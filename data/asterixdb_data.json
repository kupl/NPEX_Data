[{"commit": "https://github.com/apache/asterixdb/commit/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "parent": "https://github.com/apache/asterixdb/commit/314e279fa24f7786f11e681173b3a15ec597270a", "message": "[ASTERIXDB-2680][FUN] Add support to regexp_matches() and regexp_split()\n\n- user model changes: yes\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Added support to regexp_matches().\n- Added support to regexp_split().\n- Added test cases for regexp_matches().\n- Added test cases for regexp_split().\n- Changed behavior of UTF8CharSequence when\n  subSequence is called with start = end, originally\n  it returns a null char[] array which causes an NPE,\n  now it returns an empty char[].\n\nChange-Id: Iccf5ba14f5c8b8cf4bcd6dd6e412bb515d68dd74\nReviewed-on: https://asterix-gerrit.ics.uci.edu/c/asterixdb/+/4243\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Hussain Towaileb <hussainht@gmail.com>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>", "bug_id": "asterixdb_1", "file": [{"additions": 30, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp", "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp"}, {"additions": 29, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp", "sha": "e15e988268aed564d9a74fa5009d207ed44ac9a0", "changes": 29, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": \"So, 'twas better Betty Botter bought a bit of better butter\", \"f2\": \"\\\\b[Bb]\\\\w+\"},\n+{\"id\": 2, \"f1\": \"So, 'twas better Betty Botter bought a bit of better butter\", \"f2\": \"\\\\b[Bb]\\\\w+ \\\\b[Bb]\\\\w+\"},\n+{\"id\": 3, \"f1\": \"abracadabra\", \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": \"abc\", \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": \"123\"},\n+{\"id\": 6, \"f1\": \"\", \"f2\": \"\"}\n+]);\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp"}, {"additions": 22, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp", "sha": "83f2d9a65701e7f793553c05293cf2c6ac7ba3dd", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value regexp_matches(f1, f2) from test order by id asc;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp"}, {"additions": 20, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp", "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp"}, {"additions": 30, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp", "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp", "sha": "d77abf0054b16cb83689ca5f7fc0cd086f86f200", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": missing, \"f2\": null},\n+{\"id\": 2, \"f1\": null, \"f2\": missing},\n+{\"id\": 3, \"f1\": null, \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": 13, \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": true}\n+]);\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp", "sha": "2ae8bbb5f8aec10637bd6245eeed04569b444097", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value [\n+(select value regexp_matches(f1, f2) is missing from test where id = 1)[0],\n+(select value regexp_matches(f1, f2) is missing from test where id = 2)[0],\n+(select value regexp_matches(f1, f2) is null from test where id = 3)[0],\n+(select value regex_matches(f1, f2) is null from test where id = 4)[0],\n+(select value regex_matches(f1, f2) is null from test where id = 5)[0]\n+];", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp"}, {"additions": 20, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp", "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp"}, {"additions": 27, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp", "sha": "a38770474966ec9a6048f9304f4fd5c70c7fec42", "changes": 27, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_matches(\"So, 'twas better Betty Botter bought a bit of better butter\", \"\\\\b[Bb]\\\\w+\"),\n+regexp_matches(\"So, 'twas better Betty Botter bought a bit of better butter\", \"\\\\b[Bb]\\\\w+ \\\\b[Bb]\\\\w+\"),\n+regexp_matches(\"abracadabra\", \"[abc]\"),\n+regex_matches(\"abc\", \"\"),\n+regex_matches(\"abc\", \"123\"),\n+regex_matches(\"\", \"\")\n+];\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp", "sha": "f127ce36ef28cd88e5fd5d3200f4f08899fd8b70", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_matches(missing, null) is missing,\n+regexp_matches(null, missing) is missing,\n+regexp_matches(null, \"[abc]\") is null,\n+regexp_matches(13, \"\") is null,\n+regexp_matches(\"abc\", true) is null\n+];\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp"}, {"additions": 30, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp", "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp"}, {"additions": 36, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp", "sha": "d4f38c577fa725e3cd13e4ab2899ffe7a44844a3", "changes": 36, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": \"C:\\\\Program Files\\\\asterixdb\\\\server\\\\bin\", \"f2\": \"[\\\\\\\\]\"},\n+{\"id\": 2, \"f1\": \"/opt/asterixdb/bin\", \"f2\": \"/\"},\n+{\"id\": 3, \"f1\": \"a + b - c * d / e < f > g >= h <= i == j\", \"f2\": \"\\\\s*[a-zA-Z]+\\\\s*\"},\n+{\"id\": 4, \"f1\": \"abc\", \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": \"/\"},\n+{\"id\": 6, \"f1\": \"\", \"f2\": \"\"},\n+{\"id\": 7, \"f1\": \"\", \"f2\": \"1\"},\n+{\"id\": 8, \"f1\": \"1\", \"f2\": \"\"},\n+{\"id\": 9, \"f1\": \"1\", \"f2\": \"2\"},\n+{\"id\": 10, \"f1\": \"1\", \"f2\": \"1\"},\n+{\"id\": 11, \"f1\": \"12\", \"f2\": \"1\"},\n+{\"id\": 12, \"f1\": \"12\", \"f2\": \"2\"},\n+{\"id\": 13, \"f1\": \"121\", \"f2\": \"2\"}\n+]);\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp"}, {"additions": 22, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp", "sha": "897b20b070dec6abcc9d64d6441f057802dd7a12", "changes": 22, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value regexp_split(f1, f2) from test order by id asc;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp"}, {"additions": 20, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp", "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp"}, {"additions": 30, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp", "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp", "sha": "d77abf0054b16cb83689ca5f7fc0cd086f86f200", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": missing, \"f2\": null},\n+{\"id\": 2, \"f1\": null, \"f2\": missing},\n+{\"id\": 3, \"f1\": null, \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": 13, \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": true}\n+]);\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp", "sha": "bbb8b7b29a16cd309cf2c21325f082fb17943b05", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value [\n+(select value regexp_split(f1, f2) is missing from test where id = 1)[0],\n+(select value regexp_split(f1, f2) is missing from test where id = 2)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 3)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 4)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 5)[0]\n+];", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp"}, {"additions": 20, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp", "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp"}, {"additions": 34, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp", "sha": "a48af939696750297c75ee19fec5ed7cf959641b", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_split(\"C:\\\\Program Files\\\\asterixdb\\\\server\\\\bin\", \"[\\\\\\\\]\"),\n+regexp_split(\"/opt/asterixdb/bin\", \"/\"),\n+regexp_split(\"a + b - c * d / e < f > g >= h <= i == j\", \"\\\\s*[a-zA-Z]+\\\\s*\"),\n+regexp_split(\"abc\", \"\"),\n+regexp_split(\"abc\", \"/\"),\n+regexp_split(\"\", \"\"),\n+regex_split(\"\", \"1\"),\n+regex_split(\"1\", \"\"),\n+regex_split(\"1\", \"2\"),\n+regex_split(\"1\", \"1\"),\n+regex_split(\"12\", \"1\"),\n+regex_split(\"12\", \"2\"),\n+regex_split(\"121\", \"2\")\n+];\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp", "sha": "69d0ca7119d5caf174e3e9c697407683b79d641b", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_split(missing, null) is missing,\n+regexp_split(null, missing) is missing,\n+regexp_split(null, \"[abc]\") is null,\n+regexp_split(13, \"\") is null,\n+regexp_split(\"abc\", true) is null\n+];\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm", "sha": "1aa8d8cb3dc9f93899accf5b7d004411128c1092", "changes": 6, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,6 @@\n+[ \"better\", \"Betty\", \"Botter\", \"bought\", \"bit\", \"better\", \"butter\" ]\n+[ \"better Betty\", \"Botter bought\", \"better butter\" ]\n+[ \"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\", \"a\" ]\n+[ \"\", \"\", \"\", \"\" ]\n+[  ]\n+[ \"\" ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm", "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm", "sha": "32f80be1264233e28f3615942a20fade5026f0d8", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ [ \"better\", \"Betty\", \"Botter\", \"bought\", \"bit\", \"better\", \"butter\" ], [ \"better Betty\", \"Botter bought\", \"better butter\" ], [ \"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\", \"a\" ], [ \"\", \"\", \"\", \"\" ], [  ], [ \"\" ] ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm", "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm"}, {"additions": 13, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm", "sha": "96a4a2ec56b58dc944c40e2150d428beaa6c03bd", "changes": 13, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,13 @@\n+[ \"C:\", \"Program Files\", \"asterixdb\", \"server\", \"bin\" ]\n+[ \"\", \"opt\", \"asterixdb\", \"bin\" ]\n+[ \"\", \"+\", \"-\", \"*\", \"/\", \"<\", \">\", \">=\", \"<=\", \"==\" ]\n+[ \"a\", \"b\", \"c\" ]\n+[ \"abc\" ]\n+[ \"\" ]\n+[ \"\" ]\n+[ \"1\" ]\n+[ \"1\" ]\n+[  ]\n+[ \"\", \"2\" ]\n+[ \"1\" ]\n+[ \"1\", \"1\" ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm", "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm", "sha": "796e5447581bbc4aafb82f14360fc4ca8bd791db", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ [ \"C:\", \"Program Files\", \"asterixdb\", \"server\", \"bin\" ], [ \"\", \"opt\", \"asterixdb\", \"bin\" ], [ \"\", \"+\", \"-\", \"*\", \"/\", \"<\", \">\", \">=\", \"<=\", \"==\" ], [ \"a\", \"b\", \"c\" ], [ \"abc\" ], [ \"\" ], [ \"\" ], [ \"1\" ], [ \"1\" ], [  ], [ \"\", \"2\" ], [ \"1\" ], [ \"1\", \"1\" ] ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm", "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm"}, {"additions": 40, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "201ec6b4c57036128b36f3754aafe7f7e72652af", "changes": 40, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -9212,6 +9212,26 @@\n         <output-dir compare=\"Text\">regexp_like_with_flag/regex_like_with_flag</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/001\">\n+        <output-dir compare=\"Text\">regexp_matches/001</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/002\">\n+        <output-dir compare=\"Text\">regexp_matches/002</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/003\">\n+        <output-dir compare=\"Text\">regexp_matches/003</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/004\">\n+        <output-dir compare=\"Text\">regexp_matches/004</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"string\">\n       <compilation-unit name=\"regexp_position/offset0/regexp_position\">\n         <output-dir compare=\"Text\">regexp_position/offset0/regexp_position</output-dir>\n@@ -9332,6 +9352,26 @@\n         <output-dir compare=\"Text\">regexp_position_with_flag/offset1/regex_pos1_with_flag</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/001\">\n+        <output-dir compare=\"Text\">regexp_split/001</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/002\">\n+        <output-dir compare=\"Text\">regexp_split/002</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/003\">\n+        <output-dir compare=\"Text\">regexp_split/003</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/004\">\n+        <output-dir compare=\"Text\">regexp_split/004</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"string\">\n       <compilation-unit name=\"repeat\">\n         <output-dir compare=\"Text\">repeat</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java", "sha": "c87f4dcfdbb6f8475dcaf2d0dbf0f4ca5dadc5e4", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -70,6 +70,8 @@\n         addFunctionMapping(\"regex_position1\", \"regexp-position1\");\n         addFunctionMapping(\"regexp_pos1\", \"regexp-position1\");\n         addFunctionMapping(\"regex_replace\", \"regexp-replace\");\n+        addFunctionMapping(\"regex_matches\", \"regexp-matches\");\n+        addFunctionMapping(\"regex_split\", \"regexp-split\");\n \n         // Type functions.\n         addFunctionMapping(\"isnull\", \"is-null\"); // isnull, internal: is-null", "filename": "asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java", "sha": "94303a722a56b6d8c9b2450f12ba65836c7a8c3a", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -440,6 +440,10 @@\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-replace\", 3);\n     public static final FunctionIdentifier STRING_REGEXP_REPLACE_WITH_FLAG =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-replace\", 4);\n+    public static final FunctionIdentifier STRING_REGEXP_MATCHES =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-matches\", 2);\n+    public static final FunctionIdentifier STRING_REGEXP_SPLIT =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-split\", 2);\n     public static final FunctionIdentifier STRING_LOWERCASE =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"lowercase\", 1);\n     public static final FunctionIdentifier STRING_UPPERCASE =\n@@ -1744,6 +1748,8 @@ public static FunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addFunction(STRING_REGEXP_REPLACE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n         addFunction(STRING_REGEXP_REPLACE_WITH_FLAG, AStringTypeComputer.INSTANCE_NULLABLE, true);\n         addFunction(STRING_REPLACE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n+        addFunction(STRING_REGEXP_MATCHES, UniformInputTypeComputer.STRING_STRING_LIST_INSTANCE, true);\n+        addFunction(STRING_REGEXP_SPLIT, UniformInputTypeComputer.STRING_STRING_LIST_INSTANCE, true);\n         addFunction(STRING_REPLACE_WITH_LIMIT, AStringTypeComputer.INSTANCE_NULLABLE, true);\n         addFunction(STRING_REVERSE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n         addFunction(SUBSTRING_BEFORE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);", "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java", "sha": "2fc8654da6467aaa1aff05a176086868c0c93ada", "changes": 10, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -46,8 +46,8 @@\n     // Argument pointables.\n     private final IPointable argPtrLeft = new VoidPointable();\n     private final IPointable argPtrSecond = new VoidPointable();\n-    private final UTF8StringPointable leftPtr = new UTF8StringPointable();\n-    private final UTF8StringPointable rightPtr = new UTF8StringPointable();\n+    private final UTF8StringPointable leftStringPointable = new UTF8StringPointable();\n+    private final UTF8StringPointable rightStringPointable = new UTF8StringPointable();\n \n     // For results.\n     protected final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();\n@@ -100,12 +100,12 @@ public void evaluate(IFrameTupleReference tuple, IPointable resultPointable) thr\n         }\n \n         // Sets StringUTF8Pointables.\n-        leftPtr.set(bytes0, offset0 + 1, len0 - 1);\n-        rightPtr.set(bytes1, offset1 + 1, len1 - 1);\n+        leftStringPointable.set(bytes0, offset0 + 1, len0 - 1);\n+        rightStringPointable.set(bytes1, offset1 + 1, len1 - 1);\n \n         // The actual processing.\n         try {\n-            process(leftPtr, rightPtr, resultPointable);\n+            process(leftStringPointable, rightStringPointable, resultPointable);\n         } catch (IOException e) {\n             throw HyracksDataException.create(e);\n         }", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java"}, {"additions": 111, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java", "sha": "595203bd58519f3b527ff6629e3a59264f5b4c77", "changes": 111, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.IOException;\n+\n+import org.apache.asterix.builders.IAsterixListBuilder;\n+import org.apache.asterix.builders.OrderedListBuilder;\n+import org.apache.asterix.common.annotations.MissingNullInOutFunction;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.utils.RegExpMatcher;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n+import org.apache.hyracks.data.std.util.GrowableArray;\n+import org.apache.hyracks.data.std.util.UTF8StringBuilder;\n+\n+/**\n+ * This function takes 2 arguments, a string, and a pattern\n+ */\n+@MissingNullInOutFunction\n+public class StringRegExpMatchesDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final IFunctionDescriptorFactory FACTORY = StringRegExpMatchesDescriptor::new;\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(IEvaluatorContext ctx) throws HyracksDataException {\n+                return new AbstractBinaryStringEval(ctx, args[0], args[1], getIdentifier(), sourceLoc) {\n+                    private final RegExpMatcher matcher = new RegExpMatcher();\n+\n+                    private final UTF8StringBuilder stringBuilder = new UTF8StringBuilder();\n+                    private final GrowableArray stringBuilderArray = new GrowableArray();\n+\n+                    private final IAsterixListBuilder listBuilder = new OrderedListBuilder();\n+                    private final AbstractCollectionType collectionType =\n+                            new AOrderedListType(BuiltinType.ASTRING, BuiltinType.ASTRING.getTypeName());\n+\n+                    @Override\n+                    protected void process(UTF8StringPointable srcPtr, UTF8StringPointable patternPtr,\n+                            IPointable result) throws HyracksDataException {\n+                        matcher.build(srcPtr, patternPtr);\n+\n+                        // Result is a list of type strings\n+                        listBuilder.reset(collectionType);\n+\n+                        try {\n+                            // Add all the matches to the builder\n+                            while (matcher.find()) {\n+                                String match = matcher.group();\n+                                stringBuilderArray.reset();\n+\n+                                // Estimated length is number of characters + 1 (1 byte for string length)\n+                                stringBuilder.reset(stringBuilderArray, match.length() + 1);\n+                                stringBuilder.appendString(match);\n+                                stringBuilder.finish();\n+\n+                                resultStorage.reset();\n+                                dataOutput.writeByte(ATypeTag.SERIALIZED_STRING_TYPE_TAG);\n+                                dataOutput.write(stringBuilderArray.getByteArray(), 0, stringBuilderArray.getLength());\n+                                listBuilder.addItem(resultStorage);\n+                            }\n+\n+                            resultStorage.reset();\n+                            listBuilder.write(dataOutput, true);\n+                            result.set(resultStorage);\n+                        } catch (IOException ex) {\n+                            throw HyracksDataException.create(ex);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.STRING_REGEXP_MATCHES;\n+    }\n+}", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java"}, {"additions": 108, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java", "sha": "da6a20649e9052bfdd0356588d15cec5587a8cc7", "changes": 108, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.IOException;\n+\n+import org.apache.asterix.builders.IAsterixListBuilder;\n+import org.apache.asterix.builders.OrderedListBuilder;\n+import org.apache.asterix.common.annotations.MissingNullInOutFunction;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n+import org.apache.hyracks.data.std.util.GrowableArray;\n+import org.apache.hyracks.data.std.util.UTF8StringBuilder;\n+\n+/**\n+ * This function takes 2 arguments, a string, and a pattern\n+ */\n+@MissingNullInOutFunction\n+public class StringRegExpSplitDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final IFunctionDescriptorFactory FACTORY = StringRegExpSplitDescriptor::new;\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(IEvaluatorContext ctx) throws HyracksDataException {\n+                return new AbstractBinaryStringEval(ctx, args[0], args[1], getIdentifier(), sourceLoc) {\n+\n+                    private final UTF8StringBuilder stringBuilder = new UTF8StringBuilder();\n+                    private final GrowableArray stringBuilderArray = new GrowableArray();\n+\n+                    private final IAsterixListBuilder listBuilder = new OrderedListBuilder();\n+                    private final AbstractCollectionType collectionType =\n+                            new AOrderedListType(BuiltinType.ASTRING, BuiltinType.ASTRING.getTypeName());\n+\n+                    @Override\n+                    protected void process(UTF8StringPointable srcPtr, UTF8StringPointable patternPtr,\n+                            IPointable result) throws HyracksDataException {\n+                        String[] splits = srcPtr.toString().split(patternPtr.toString());\n+\n+                        // Result is a list of type strings\n+                        listBuilder.reset(collectionType);\n+\n+                        try {\n+                            // Add all the splits to the builder\n+                            for (String split : splits) {\n+                                stringBuilderArray.reset();\n+\n+                                // Estimated length is number of characters + 1 (1 byte for string length)\n+                                stringBuilder.reset(stringBuilderArray, split.length() + 1);\n+                                stringBuilder.appendString(split);\n+                                stringBuilder.finish();\n+\n+                                resultStorage.reset();\n+                                dataOutput.writeByte(ATypeTag.SERIALIZED_STRING_TYPE_TAG);\n+                                dataOutput.write(stringBuilderArray.getByteArray(), 0, stringBuilderArray.getLength());\n+                                listBuilder.addItem(resultStorage);\n+                            }\n+\n+                            resultStorage.reset();\n+                            listBuilder.write(dataOutput, true);\n+                            result.set(resultStorage);\n+                        } catch (IOException ex) {\n+                            throw HyracksDataException.create(ex);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.STRING_REGEXP_SPLIT;\n+    }\n+}", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java"}, {"additions": 10, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java", "sha": "778df5b19346aba68eeb1907190f67744d18fcec", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -151,6 +151,16 @@ public boolean find() {\n         return matcher.find();\n     }\n \n+    /**\n+     * Returns the matched string. This should be called after checking that the find()\n+     * method returns true.\n+     *\n+     * @return The matched string\n+     */\n+    public String group() {\n+        return matcher.group();\n+    }\n+\n     /**\n      * @return the first matched position of the regular expression pattern in the source string.\n      */", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java", "sha": "515518d5b9154116e254607dd1b1ec7cec40a301", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -417,12 +417,14 @@\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpContainsWithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpLikeDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpLikeWithFlagDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.StringRegExpMatchesDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionOffset1Descriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionOffset1WithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionWithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpReplaceDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpReplaceWithFlagDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.StringRegExpSplitDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRepeatDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringReplaceDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringReplaceWithLimitDescriptor;\n@@ -999,6 +1001,8 @@ public static FunctionCollection createDefaultFunctionCollection() {\n         fc.add(StringRegExpPositionOffset1WithFlagDescriptor.FACTORY);\n         fc.add(StringRegExpReplaceDescriptor.FACTORY);\n         fc.add(StringRegExpReplaceWithFlagDescriptor.FACTORY);\n+        fc.add(StringRegExpMatchesDescriptor.FACTORY);\n+        fc.add(StringRegExpSplitDescriptor.FACTORY);\n         fc.add(StringInitCapDescriptor.FACTORY);\n         fc.add(StringTrimDescriptor.FACTORY);\n         fc.add(StringLTrimDescriptor.FACTORY);", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java", "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java", "sha": "71ca6521fcaee8ae1a8287c00c3be43e944a2ce4", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d", "patch": "@@ -45,6 +45,9 @@ public CharSequence subSequence(int start, int end) {\n         if (end != start) {\n             carSeq.buf = new char[carSeq.length];\n             System.arraycopy(buf, start, carSeq.buf, 0, carSeq.length);\n+        } else {\n+            // subSequence with start = end will return an empty char[]\n+            carSeq.buf = new char[0];\n         }\n         return carSeq;\n     }", "filename": "hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/5e79ec0b895b28af74bbc9edd4f397b77ff22db4", "parent": "https://github.com/apache/asterixdb/commit/1a565f89959ba281dc0dfd8c9664fc5a373f09ad", "message": "[NO ISSUE][OTH] Skip Result Metadata Updates on No Result\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Do not attempt to update the result metadata when a job\n  has no result to avoid NPE.\n\nChange-Id: I1ccae6003048f45344a5b7843a25c61d6a7bd366\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3408\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Hussain Towaileb <hussainht@gmail.com>", "bug_id": "asterixdb_2", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/5e79ec0b895b28af74bbc9edd4f397b77ff22db4/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/result/JobResultCallback.java", "blob_url": "https://github.com/apache/asterixdb/blob/5e79ec0b895b28af74bbc9edd4f397b77ff22db4/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/result/JobResultCallback.java", "sha": "ecf92a0e3adcf9231bd89bb97cbca0bcbb175a97", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/result/JobResultCallback.java?ref=5e79ec0b895b28af74bbc9edd4f397b77ff22db4", "patch": "@@ -25,6 +25,7 @@\n import org.apache.hyracks.api.job.JobId;\n import org.apache.hyracks.api.result.IJobResultCallback;\n import org.apache.hyracks.api.result.ResultJobRecord;\n+import org.apache.hyracks.api.result.ResultSetMetaData;\n import org.apache.hyracks.control.cc.ClusterControllerService;\n import org.apache.hyracks.control.cc.job.IJobManager;\n import org.apache.hyracks.control.cc.job.JobRun;\n@@ -53,7 +54,11 @@ public void completed(JobId jobId, ResultJobRecord resultJobRecord) {\n     }\n \n     private void updateResultMetadata(JobId jobId, ResultJobRecord resultJobRecord) {\n-        final ResultMetadata metadata = (ResultMetadata) resultJobRecord.getResultSetMetaData().getMetadata();\n+        final ResultSetMetaData resultSetMetaData = resultJobRecord.getResultSetMetaData();\n+        if (resultSetMetaData == null) {\n+            return;\n+        }\n+        final ResultMetadata metadata = (ResultMetadata) resultSetMetaData.getMetadata();\n         metadata.setJobDuration(resultJobRecord.getJobDuration());\n         metadata.setProcessedObjects(getJobProccssedObjects(jobId));\n     }", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/result/JobResultCallback.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4", "parent": "https://github.com/apache/asterixdb/commit/a93a5c6fe4f83cef973f5caaa540723c96e29ba2", "message": "[NO ISSUE][OTH] Ensure HttpServer Channel is Initialized\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Ensure the HttpServer channel is initialized when stopping\n  the server to avoid NPE.\n\nChange-Id: I5b7403e80f6118f99be46d166c6cfbee8d4305ac\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3389\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>", "bug_id": "asterixdb_3", "file": [{"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java", "blob_url": "https://github.com/apache/asterixdb/blob/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java", "sha": "d9902da942921e10e7da92818644bcb17a50104a", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java?ref=4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4", "patch": "@@ -333,8 +333,10 @@ protected void doStop() throws InterruptedException {\n         } catch (Exception e) {\n             LOGGER.log(Level.ERROR, \"Error while shutting down http server executor\", e);\n         }\n-        channel.close();\n-        channel.closeFuture().sync();\n+        if (channel != null) {\n+            channel.close();\n+            channel.closeFuture().sync();\n+        }\n     }\n \n     public IServlet getServlet(FullHttpRequest request) {", "filename": "hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/36379d052e1789be2ef415bd1742dd45ac4a7f7b", "parent": "https://github.com/apache/asterixdb/commit/78fe9f819cdbb93c3328901abb304ee051e2f427", "message": "[NO ISSUE][HYR][RT] Handle calls to close() properly in hash join\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\nHash join build activity assumes that upon calling close()\nthe join state must have been allocated in open() and\ntherefore, it will directly call \"close build\" using the join\nstate. However, if the build activity throws an exception\nin open(), then it could happen that the join state has\nnot been initialized. Calling close() on the build activity\nwill lead to a NPE since it will use the join state directly.\nThis patch checks if the join state has been initialized. If\nso, it will close the build as usual.\n\nChange-Id: I41fff7deed5e56818bfefb4d36b8018a9f512cbb\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3375\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Murtadha Hubail <mhubail@apache.org>", "bug_id": "asterixdb_4", "file": [{"additions": 9, "raw_url": "https://github.com/apache/asterixdb/raw/36379d052e1789be2ef415bd1742dd45ac4a7f7b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/36379d052e1789be2ef415bd1742dd45ac4a7f7b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java", "sha": "81d08b257ba8546df98d84c645fa08f3a8c85834", "changes": 16, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java?ref=36379d052e1789be2ef415bd1742dd45ac4a7f7b", "patch": "@@ -315,13 +315,15 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n \n                 @Override\n                 public void close() throws HyracksDataException {\n-                    state.hybridHJ.closeBuild();\n-                    if (isFailed) {\n-                        state.hybridHJ.clearBuildTempFiles();\n-                    } else {\n-                        ctx.setStateObject(state);\n-                        if (LOGGER.isTraceEnabled()) {\n-                            LOGGER.trace(\"OptimizedHybridHashJoin closed its build phase\");\n+                    if (state.hybridHJ != null) {\n+                        state.hybridHJ.closeBuild();\n+                        if (isFailed) {\n+                            state.hybridHJ.clearBuildTempFiles();\n+                        } else {\n+                            ctx.setStateObject(state);\n+                            if (LOGGER.isTraceEnabled()) {\n+                                LOGGER.trace(\"OptimizedHybridHashJoin closed its build phase\");\n+                            }\n                         }\n                     }\n                 }", "filename": "hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/6b0e2f7109362f08f0c5df9c908b11f86396a127", "parent": "https://github.com/apache/asterixdb/commit/719c53b9478427727213311212426502d83afc8e", "message": "[NO ISSUE][OTH] Do not send cancellation on null clientContextId\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Currently when a query is cancelled or times out, a cancellation\n  request is sent even if the clientContextId is null, which results\n  in NPE when trying to get the job. This change skips sending the\n  cancellation when the clientContextId is null.\n\nChange-Id: I4ec6d2596cc345aa0f6b9910248807d6a95a3aee\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3200\nReviewed-by: Michael Blow <mblow@apache.org>\nIntegration-Tests: Murtadha Hubail <mhubail@apache.org>\nTested-by: Ian Maxon <imaxon@uci.edu>", "bug_id": "asterixdb_5", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/6b0e2f7109362f08f0c5df9c908b11f86396a127/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/NCQueryServiceServlet.java", "blob_url": "https://github.com/apache/asterixdb/blob/6b0e2f7109362f08f0c5df9c908b11f86396a127/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/NCQueryServiceServlet.java", "sha": "d9b69cbabbf89130981baa45549ead25a34536f5", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/NCQueryServiceServlet.java?ref=6b0e2f7109362f08f0c5df9c908b11f86396a127", "patch": "@@ -136,6 +136,9 @@ protected void executeStatement(IRequestReference requestReference, String state\n \n     private void cancelQuery(INCMessageBroker messageBroker, String nodeId, String clientContextID, Exception exception,\n             boolean wait) {\n+        if (clientContextID == null) {\n+            return;\n+        }\n         MessageFuture cancelQueryFuture = messageBroker.registerMessageFuture();\n         try {\n             CancelQueryRequest cancelQueryMessage =", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/server/NCQueryServiceServlet.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/6b0e2f7109362f08f0c5df9c908b11f86396a127/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/RequestTracker.java", "blob_url": "https://github.com/apache/asterixdb/blob/6b0e2f7109362f08f0c5df9c908b11f86396a127/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/RequestTracker.java", "sha": "a0ab55988f42d0129c1dc3e8220b45b39148f400", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/RequestTracker.java?ref=6b0e2f7109362f08f0c5df9c908b11f86396a127", "patch": "@@ -21,6 +21,7 @@\n import java.util.Collection;\n import java.util.Collections;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.concurrent.ConcurrentHashMap;\n \n import org.apache.asterix.common.api.IClientRequest;\n@@ -45,6 +46,7 @@ public IClientRequest get(String requestId) {\n \n     @Override\n     public IClientRequest getByClientContextId(String clientContextId) {\n+        Objects.requireNonNull(clientContextId, \"clientContextId must not be null\");\n         return clientIdRequests.get(clientContextId);\n     }\n ", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/RequestTracker.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/91384f6ca8130bc30d930e437a7b48d525f21312", "parent": "https://github.com/apache/asterixdb/commit/4547639bb4fd8aa098ea5402da445b1c5e36a991", "message": "ASTERIXDB-2418][COMP] Fix NPE in SqlppExpressionToPlanTranslator\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE in SqlppExpressionToPlanTranslator for query:\u2028\n  select value $param\n\nChange-Id: Ie3207d077480a90fd00fdd59923ea76e2ca6db25\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2789\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Taewoo Kim <wangsaeu@gmail.com>", "bug_id": "asterixdb_6", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java", "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java", "sha": "033c92f444c6f744968aee228b9235a010012c30", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java?ref=91384f6ca8130bc30d930e437a7b48d525f21312", "patch": "@@ -84,6 +84,7 @@\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalPlan;\n+import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n import org.apache.hyracks.algebricks.core.algebra.base.LogicalVariable;\n import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;\n import org.apache.hyracks.algebricks.core.algebra.expressions.AggregateFunctionCallExpression;\n@@ -683,7 +684,8 @@ protected ILogicalExpression translateVariableRef(VariableExpr varExpr) throws C\n         LogicalVariable returnVar;\n         ILogicalOperator returnOperator;\n         SourceLocation sourceLoc = returnExpr.getSourceLocation();\n-        if (returnExpr.getKind() == Kind.VARIABLE_EXPRESSION) {\n+        if (returnExpr.getKind() == Kind.VARIABLE_EXPRESSION\n+                && eo.first.getExpressionTag() == LogicalExpressionTag.VARIABLE) {\n             VariableExpr varExpr = (VariableExpr) returnExpr;\n             returnOperator = eo.second.getValue();\n             returnVar = context.getVar(varExpr.getVar().getId());", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java"}, {"additions": 30, "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp", "sha": "720c2f2becd1d0c6a720d47204ef23edecea948c", "changes": 30, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp?ref=91384f6ca8130bc30d930e437a7b48d525f21312", "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description  : Test fix for ASTERIXDB-2418\n+ * Expected Res : Success\n+ * Date         : Jul 2018\n+ */\n+\n+// requesttype=application/json\n+\n+// param $p_int:json=42\n+\n+select value $p_int\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm", "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm", "sha": "f70d7bba4ae1f07682e0358bd7a2068094fc023b", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm?ref=91384f6ca8130bc30d930e437a7b48d525f21312", "patch": "@@ -0,0 +1 @@\n+42\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "8b0f5a40fcfe51fb3801bc714bf0291af2ab1c99", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=91384f6ca8130bc30d930e437a7b48d525f21312", "patch": "@@ -6167,6 +6167,11 @@\n         <output-dir compare=\"Text\">named_03</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"statement-params\">\n+      <compilation-unit name=\"named_04\">\n+        <output-dir compare=\"Text\">named_04</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"statement-params\">\n       <compilation-unit name=\"positional_01\">\n         <output-dir compare=\"Text\">positional_01</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/1619b8881584a6f9a197344939c118ad869f824e", "parent": "https://github.com/apache/asterixdb/commit/0b414e81ebe9bd7d8c73ae6c0688166127c6a84f", "message": "[NO ISSUE][OTH] Avoid NPE on response w/o content-length\n\nChange-Id: Ifac2a5098f3c70348b20b2859d5d2fdddb3d8579\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2902\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nTested-by: Michael Blow <mblow@apache.org>", "bug_id": "asterixdb_7", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/1619b8881584a6f9a197344939c118ad869f824e/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/CLFLogger.java", "blob_url": "https://github.com/apache/asterixdb/blob/1619b8881584a6f9a197344939c118ad869f824e/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/CLFLogger.java", "sha": "70f861cf3a87785b5c8814e354101647249dc4a9", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/CLFLogger.java?ref=1619b8881584a6f9a197344939c118ad869f824e", "patch": "@@ -23,14 +23,14 @@\n import java.time.ZoneId;\n import java.time.format.DateTimeFormatter;\n \n-import io.netty.channel.socket.nio.NioSocketChannel;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.Logger;\n \n import io.netty.channel.ChannelDuplexHandler;\n import io.netty.channel.ChannelHandlerContext;\n import io.netty.channel.ChannelPromise;\n+import io.netty.channel.socket.nio.NioSocketChannel;\n import io.netty.handler.codec.http.DefaultFullHttpResponse;\n import io.netty.handler.codec.http.DefaultHttpContent;\n import io.netty.handler.codec.http.DefaultHttpResponse;\n@@ -93,7 +93,7 @@ public void write(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)\n             statusCode = resp.status().code();\n             if (msg instanceof DefaultFullHttpResponse) {\n                 lastChunk = true;\n-                respSize = resp.headers().getInt(HttpHeaderNames.CONTENT_LENGTH);\n+                respSize = resp.headers().getInt(HttpHeaderNames.CONTENT_LENGTH, 0);\n             }\n         } else if (msg instanceof DefaultHttpContent) {\n             HttpContent content = (DefaultHttpContent) msg;", "filename": "hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/CLFLogger.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/07048a3b97dab28bcf7555ec900de0712ce9d710", "parent": "https://github.com/apache/asterixdb/commit/04dd5977bd798d3f9538931f77b575eac3afec11", "message": "[NO ISSUE][FUN] Fix type inference in JListAccessor\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\nAs the list element type is available, there is no need to deserialize\nelement types from the data. Doing so, for example, will cause the\nobject type to be fully open type and closed fields to be recognized as\nopen fields. This will further cause NPE in UDFs. Modified the upperCase\ntest case to check this issue.\n\nChange-Id: I4f437857779e5c0af175c695938fbd7208da244d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3264\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>", "bug_id": "asterixdb_8", "file": [{"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql", "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql", "sha": "2dcd24d7c288706825b3a57242f0bf6ca3f6bfeb", "changes": 27, "status": "removed", "deletions": 27, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11", "patch": "@@ -1,27 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-drop dataverse externallibtest if exists;\n-create dataverse externallibtest;\n-use dataverse externallibtest;\n-\n-create type TextType if not exists as open {\n-    id: int32,\n-    text: string\n-};\n-", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql", "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql", "sha": "d1e0e87600fcb4996cf70cdb3a98b6f2831f0537", "changes": 19, "status": "removed", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11", "patch": "@@ -1,19 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-install externallibtest testlib target/data/externallib/asterix-external-data-testlib.zip\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql", "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql", "sha": "5f0b86cd5b3c2cae82eef6d482a5b0c83bf1fea5", "changes": 28, "status": "removed", "deletions": 28, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11", "patch": "@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-use dataverse externallibtest;\n-\n-let $i:={\"id\":1, \"text\":\"lower text\"}\n-return testlib#toUpper($i);\n-\n-let $i:=testlib#toUpper({\"id\":1, \"text\":\"lower text\"})\n-return $i;\n-\n-let $i:= {\"field1\" : testlib#toUpper({\"id\":1, \"text\":\"lower text\"}), \"field2\": 123}\n-return $i;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql", "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql", "sha": "86af80f251c2ea3d7f7c1a6637bc148aaadf517b", "changes": 19, "status": "removed", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11", "patch": "@@ -1,19 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-uninstall externallibtest testlib\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp", "sha": "292e4e1b1ab42a9a9a4a1398352908f135f92e7e", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -20,7 +20,11 @@ DROP DATAVERSE externallibtest if exists;\n CREATE DATAVERSE  externallibtest;\n USE externallibtest;\n \n+create type list_element as open{\n+    text: string\n+};\n+\n create type TextType if not exists as open {\n     id: int32,\n-    text: string\n+    text_list: [list_element]\n };\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp", "sha": "743d39acd830726f47e54c717ab5e6d7868fc19c", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -18,11 +18,11 @@\n  */\n use externallibtest;\n \n-let i={\"id\":1, \"text\":\"lower text\"}\n+let i={\"id\":1, \"text_list\": [{\"text\":\"lower text1\"}, {\"text\":\"lower text2\"}]}\n select value `testlib#toUpper`(i);\n \n-let i=`testlib#toUpper`({\"id\":1, \"text\":\"lower text\"})\n+let i=`testlib#toUpper`({\"id\":1, \"text_list\":[{\"text\":\"lower text\"}]})\n select value i;\n \n-let i= {\"field1\" : `testlib#toUpper`({\"id\":1, \"text\":\"lower text\"}), \"field2\": 123}\n+let i= {\"field1\" : `testlib#toUpper`({\"id\":1, \"text_list\":[{\"text\":\"lower text\"}]}), \"field2\": 123}\n select value i;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm", "sha": "2efaa4f76be9d7e906ee154ca1de24901903aa66", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -1,3 +1,3 @@\n-{ \"id\": -1, \"text\": \"LOWER TEXT\" }\n-{ \"id\": -1, \"text\": \"LOWER TEXT\" }\n-{ \"field1\": { \"id\": -1, \"text\": \"LOWER TEXT\" }, \"field2\": 123 }\n+{ \"id\": -1, \"text_list\": [ { \"text\": \"lower text1\" }, { \"text\": \"lower text2\" } ], \"element_n\": 2, \"capitalized_list\": [ \"LOWER TEXT1\", \"LOWER TEXT2\" ] }\n+{ \"id\": -1, \"text_list\": [ { \"text\": \"lower text\" } ], \"element_n\": 1, \"capitalized_list\": [ \"LOWER TEXT\" ] }\n+{ \"field1\": { \"id\": -1, \"text_list\": [ { \"text\": \"lower text\" } ], \"element_n\": 1, \"capitalized_list\": [ \"LOWER TEXT\" ] }, \"field2\": 123 }", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml", "sha": "e77b32bb9b7107a0c4a0e02ae2960418c0785dbf", "changes": 5, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -42,11 +42,6 @@\n         <output-dir compare=\"Text\">getCapital</output-dir>\n       </compilation-unit>\n     </test-case>\n-    <test-case FilePath=\"external-library\">\n-      <compilation-unit name=\"upperCase\">\n-        <output-dir compare=\"Text\">upperCase</output-dir>\n-      </compilation-unit>\n-    </test-case>\n     <test-case FilePath=\"external-library\">\n       <compilation-unit name=\"keyword_detector\">\n         <output-dir compare=\"Text\">keyword_detector</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java", "sha": "1a6553cf0c58a883b9a76bdbcedc9be021841342", "changes": 13, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -82,8 +82,10 @@\n import org.apache.asterix.om.pointables.AListVisitablePointable;\n import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.AOrderedListType;\n import org.apache.asterix.om.types.ARecordType;\n import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n import org.apache.asterix.om.types.BuiltinType;\n import org.apache.asterix.om.types.EnumDeserializer;\n import org.apache.asterix.om.types.IAType;\n@@ -582,17 +584,12 @@ public JListAccessor(IObjectPool<IJObject, IAType> objectPool) {\n         public IJObject access(AListVisitablePointable pointable, IObjectPool<IJObject, IAType> objectPool,\n                 IAType listType, JObjectPointableVisitor pointableVisitor) throws HyracksDataException {\n             List<IVisitablePointable> items = pointable.getItems();\n-            List<IVisitablePointable> itemTags = pointable.getItemTags();\n             JList list = pointable.ordered() ? new JOrderedList(listType) : new JUnorderedList(listType);\n             IJObject listItem;\n-            int index = 0;\n             for (IVisitablePointable itemPointable : items) {\n-                IVisitablePointable itemTagPointable = itemTags.get(index);\n-                ATypeTag itemTypeTag = EnumDeserializer.ATYPETAGDESERIALIZER\n-                        .deserialize(itemTagPointable.getByteArray()[itemTagPointable.getStartOffset()]);\n-                final IAType fieldType = TypeTagUtil.getBuiltinTypeByTag(itemTypeTag);\n-                typeInfo.reset(fieldType, itemTypeTag);\n-                switch (itemTypeTag) {\n+                final IAType fieldType = ((AbstractCollectionType) listType).getItemType();\n+                typeInfo.reset(fieldType, fieldType.getTypeTag());\n+                switch (typeInfo.getTypeTag()) {\n                     case OBJECT:\n                         listItem = pointableVisitor.visit((ARecordVisitablePointable) itemPointable, typeInfo);\n                         break;", "filename": "asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java"}, {"additions": 16, "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java", "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java", "sha": "398504ac7e5c07938137db510099648b21d2c726", "changes": 23, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java?ref=07048a3b97dab28bcf7555ec900de0712ce9d710", "patch": "@@ -21,8 +21,10 @@\n import org.apache.asterix.external.api.IExternalScalarFunction;\n import org.apache.asterix.external.api.IFunctionHelper;\n import org.apache.asterix.external.library.java.base.JInt;\n+import org.apache.asterix.external.library.java.base.JOrderedList;\n import org.apache.asterix.external.library.java.base.JRecord;\n import org.apache.asterix.external.library.java.base.JString;\n+import org.apache.asterix.om.types.BuiltinType;\n \n /**\n  * Accepts an input record of type Open{ id: int32, text: string }\n@@ -43,16 +45,23 @@ public void deinitialize() {\n     @Override\n     public void evaluate(IFunctionHelper functionHelper) throws Exception {\n         JRecord inputRecord = (JRecord) functionHelper.getArgument(0);\n+        JOrderedList textList = (JOrderedList) inputRecord.getValueByName(\"text_list\");\n+        JOrderedList capList = new JOrderedList(BuiltinType.ASTRING);\n         JInt id = (JInt) inputRecord.getValueByName(\"id\");\n-        id.setValue(id.getValue() * -1); // for maintaining uniqueness\n-                                         // constraint in the case when\n-                                         // output is re-inserted into source\n-                                         // dataset\n-        JString text = (JString) inputRecord.getValueByName(\"text\");\n-        text.setValue(text.getValue().toUpperCase());\n+        id.setValue(id.getValue() * -1);\n+\n+        for (int iter1 = 0; iter1 < textList.getValue().size(); iter1++) {\n+            JRecord originalElement = (JRecord) textList.getValue().get(iter1);\n+            JString originalText = (JString) originalElement.getValueByName(\"text\");\n+            JString capText = new JString(originalText.getValue().toUpperCase());\n+            capList.getValue().add(capText);\n+        }\n+        JInt element_n = new JInt(textList.size());\n         JRecord result = (JRecord) functionHelper.getResultObject();\n         result.setField(\"id\", id);\n-        result.setField(\"text\", text);\n+        result.setField(\"text_list\", textList);\n+        result.setField(\"element_n\", element_n);\n+        result.setField(\"capitalized_list\", capList);\n         functionHelper.setResult(result);\n     }\n }", "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/142aad08e5ad71f8d897c2786ce2665c3ac48c7c", "parent": "https://github.com/apache/asterixdb/commit/5550a5f225a0528fe2229d2b39db4595590ab0ea", "message": "[NO ISSUE] Avoid NPE logging shutdown hooks if shutdown already in progress\n\nChange-Id: Id7102a975bd6e2d653198067bb5b5e7573ded7e7\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2962\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_9", "file": [{"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/142aad08e5ad71f8d897c2786ce2665c3ac48c7c/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/ExitUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/142aad08e5ad71f8d897c2786ce2665c3ac48c7c/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/ExitUtil.java", "sha": "e2ae73abf50dea3526be31577a785f737e425c16", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/ExitUtil.java?ref=142aad08e5ad71f8d897c2786ce2665c3ac48c7c", "patch": "@@ -161,9 +161,12 @@ private static void logShutdownHooks() {\n                 Field hooksField = clazz.getDeclaredField(\"hooks\");\n                 hooksField.setAccessible(true);\n                 IdentityHashMap hooks = (IdentityHashMap) hooksField.get(null);\n-                LOGGER.info(\"the following ({}) shutdown hooks have been registered: {}\", hooks::size, hooks::toString);\n+                if (hooks != null) {\n+                    LOGGER.info(\"the following ({}) shutdown hooks have been registered: {}\", hooks::size,\n+                            hooks::toString);\n+                }\n             } catch (Exception e) {\n-                LOGGER.warn(\"ignoring exception trying to determine number of shutdown hooks\", e);\n+                LOGGER.debug(\"ignoring exception trying to log shutdown hooks\", e);\n             }\n         }\n     }", "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/ExitUtil.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/4af131ada7f104cd8adddcabd8b5eb928f560f68", "parent": "https://github.com/apache/asterixdb/commit/309c69c57a4fb79028eeee8efd9e179240299f3d", "message": "[NO ISSUE][EXT] Prevent NPE in close() when using TestTypedAdapter\n\nWARN ...CleanupUtils - Failure closing a closeable resource\njava.lang.NullPointerException: null\n  at org.apache.asterix.external.dataset.adapter.FeedAdapter.close(FeedAdapter.java:63)\n\nChange-Id: If2d62ce00858ff9a9f8033bd21d5da5f1f207c56\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2903\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>", "bug_id": "asterixdb_10", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java", "blob_url": "https://github.com/apache/asterixdb/blob/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java", "sha": "effd59fcc087c3203ebf357718b04e09cb178792", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java?ref=4af131ada7f104cd8adddcabd8b5eb928f560f68", "patch": "@@ -55,7 +55,7 @@\n \n     public TestTypedAdapter(ITupleParserFactory parserFactory, ARecordType sourceDatatype, IHyracksTaskContext ctx,\n             Map<String, String> configuration, int partition) throws IOException {\n-        super(null);\n+        super(new TestTypedFeedDataFlowController(ctx));\n         pos = new PipedOutputStream();\n         pis = new PipedInputStream(pos);\n         this.configuration = configuration;\n@@ -150,4 +150,5 @@ public boolean pause() {\n     public boolean resume() {\n         return false;\n     }\n+\n }", "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java"}, {"additions": 39, "raw_url": "https://github.com/apache/asterixdb/raw/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java", "blob_url": "https://github.com/apache/asterixdb/blob/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java", "sha": "708cdd8488fa8e8071bbe506413831ffd72fa441", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java?ref=4af131ada7f104cd8adddcabd8b5eb928f560f68", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.external.library.adapter;\n+\n+import org.apache.asterix.external.dataflow.AbstractFeedDataFlowController;\n+import org.apache.hyracks.api.comm.IFrameWriter;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+\n+class TestTypedFeedDataFlowController extends AbstractFeedDataFlowController {\n+    TestTypedFeedDataFlowController(IHyracksTaskContext ctx) {\n+        super(ctx, null, 0);\n+    }\n+\n+    @Override\n+    public String getStats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void start(IFrameWriter writer) {\n+        throw new UnsupportedOperationException();\n+    }\n+}", "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/7722e5d4d27120685b7a2b0076899409746c2027", "parent": "https://github.com/apache/asterixdb/commit/8b6578add5132b1e9ad82545d49cc15fff79d24a", "message": "[ASTERIXDB-2159][API] ValidateUtil throws NPE\n\n- user model changes: no\n- storage format changes: no\n- interface change: no\n\nDetails:\n\nFix a case where ValidateUtil throws an NPE instead of using error codes.\n\nChange-Id: If467e484e01e9085f2eb8a943a4178b44a384a02\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2137\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>", "bug_id": "asterixdb_11", "file": [{"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java", "sha": "cda9dd325e9dbf9e4f2aae382e7e773c48b7b409", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java?ref=7722e5d4d27120685b7a2b0076899409746c2027", "patch": "@@ -118,6 +118,10 @@ public static void validateFilterField(ARecordType recordType, List<String> filt\n             }\n             List<String> fieldName = partitioningExprs.get(0);\n             IAType fieldType = recType.getSubFieldType(fieldName);\n+            if (fieldType == null) {\n+                String unTypeField = fieldName.get(0) == null ? \"\" : fieldName.get(0);\n+                throw new CompilationException(ErrorCode.COMPILATION_FIELD_NOT_FOUND, unTypeField);\n+            }\n             partitioningExprTypes.add(fieldType);\n             ATypeTag pkTypeTag = fieldType.getTypeTag();\n             if (pkTypeTag != ATypeTag.UUID) {", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java"}, {"additions": 34, "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql", "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql", "sha": "a0764a01779c2858dbba4c2f943f0e2a8b77e48d", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql?ref=7722e5d4d27120685b7a2b0076899409746c2027", "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+// try to create autogenerated key on field not mentioned in type, should fail\n+\n+drop dataverse test if exists;\n+create dataverse test;\n+\n+use dataverse test;\n+\n+create type DBLPType as open {\n+  id: uuid,\n+  dblpid: string,\n+  title: string,\n+  authors: string,\n+  misc: string\n+}\n+\n+create dataset DBLP(DBLPType) primary key not_id autogenerated;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql"}, {"additions": 34, "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp", "sha": "b04d413aca5c1b6313e4521a5ac6c1ec6603037b", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp?ref=7722e5d4d27120685b7a2b0076899409746c2027", "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+\n+use test;\n+\n+\n+create type test.DBLPType as\n+ closed {\n+  id : uuid,\n+  title : string,\n+  authors : string\n+};\n+\n+create dataset DBLP(DBLPType) primary key not_id autogenerated ;\n+", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "sha": "8987a7fd5428af543979a9eddf0a940447185491", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=7722e5d4d27120685b7a2b0076899409746c2027", "patch": "@@ -1940,6 +1940,12 @@\n         <output-dir compare=\"Text\">load-with-autogenerated-pk_csv_02</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"dml\">\n+      <compilation-unit name=\"load-with-autogenerated-no-field\">\n+        <output-dir compare=\"Text\">load-with-autogenerated-no-field</output-dir>\n+        <expected-error>ASX1014: Field \"not_id\" is not found [CompilationException]</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"dml\">\n       <compilation-unit name=\"load-with-index\">\n         <output-dir compare=\"Text\">load-with-index</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "484e39557c29ca076b1371f3b0dee858c3343ea6", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=7722e5d4d27120685b7a2b0076899409746c2027", "patch": "@@ -1886,6 +1886,12 @@\n         <output-dir compare=\"Text\">load-with-autogenerated-pk_csv_02</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"dml\">\n+      <compilation-unit name=\"load-with-autogenerated-no-field\">\n+        <output-dir compare=\"Text\">load-with-autogenerated-no-field</output-dir>\n+        <expected-error>org.apache.asterix.common.exceptions.AsterixException: ASX1014: Field \"not_id\" is not found</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"dml\">\n       <compilation-unit name=\"insert-return-records\">\n         <output-dir compare=\"Text\">insert-return-records</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/a952e0150efd60d584761af6d8619f15766dab08", "parent": "https://github.com/apache/asterixdb/commit/bdb1cb4e1033cabcf81866ca1ebc6e259dc97c10", "message": "[ASTERIXDB-2448][COMP] Fix NullPointerException in IntroduceSelectAccessMethodRule\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE when intersecting two indexes and predicate containing\n  between operator:\n  a) If index intersection plan is not possible then exit the rule\n  b) Rewrite between operator into ge/le pair instead of le/le pair\n\nChange-Id: I34d4cde6adf3785feb6a8280fcdb964a5fb72803\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2937\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_12", "file": [{"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java", "sha": "0ea16aeb51845bba525171c49968ac43897f7d11", "changes": 18, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -220,13 +220,17 @@ private boolean intersectAllSecondaryIndexes(List<Pair<IAccessMethod, Index>> ch\n         List<ILogicalOperator> subRoots = new ArrayList<>();\n         for (Pair<IAccessMethod, Index> pair : chosenIndexes) {\n             AccessMethodAnalysisContext analysisCtx = analyzedAMs.get(pair.first);\n-            subRoots.add(pair.first.createIndexSearchPlan(afterSelectRefs, selectRef, conditionRef,\n-                    subTree.getAssignsAndUnnestsRefs(), subTree, null, pair.second, analysisCtx,\n-                    AccessMethodUtils.retainInputs(subTree.getDataSourceVariables(),\n-                            subTree.getDataSourceRef().getValue(), afterSelectRefs),\n-                    false, subTree.getDataSourceRef().getValue().getInputs().get(0).getValue()\n-                            .getExecutionMode() == ExecutionMode.UNPARTITIONED,\n-                    context, null));\n+            boolean retainInput = AccessMethodUtils.retainInputs(subTree.getDataSourceVariables(),\n+                    subTree.getDataSourceRef().getValue(), afterSelectRefs);\n+            boolean requiresBroadcast = subTree.getDataSourceRef().getValue().getInputs().get(0).getValue()\n+                    .getExecutionMode() == ExecutionMode.UNPARTITIONED;\n+            ILogicalOperator subRoot = pair.first.createIndexSearchPlan(afterSelectRefs, selectRef, conditionRef,\n+                    subTree.getAssignsAndUnnestsRefs(), subTree, null, pair.second, analysisCtx, retainInput, false,\n+                    requiresBroadcast, context, null);\n+            if (subRoot == null) {\n+                return false;\n+            }\n+            subRoots.add(subRoot);\n         }\n         // Connect each secondary index utilization plan to a common intersect operator.\n         ILogicalOperator primaryUnnestOp = connectAll2ndarySearchPlanWithIntersect(subRoots, context);", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java"}, {"additions": 54, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp", "sha": "af04479b0f8f46025de9207e0fc5c4be81d63776", "changes": 54, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ *  Description     : Secondary BTree Index intersection with between operator (ASTERIXDB-2448)\n+ *  Expected Result : Success\n+ */\n+\n+drop  dataverse tpch if exists;\n+create  dataverse tpch;\n+\n+use tpch;\n+\n+create type tpch.OrderType as\n+ closed {\n+  o_orderkey : bigint,\n+  o_custkey : bigint,\n+  o_orderstatus : string,\n+  o_totalprice : double,\n+  o_orderdate : string,\n+  o_orderpriority : string,\n+  o_clerk : string,\n+  o_shippriority : bigint,\n+  o_comment : string\n+};\n+\n+create  dataset Orders(OrderType) primary key o_orderkey;\n+\n+create index idx_custkey on Orders (o_custkey) type btree;\n+\n+create index idx_orderpriority on Orders (o_orderpriority) type btree;\n+\n+select o_custkey, o_orderkey, o_orderstatus from Orders\n+where\n+  o_orderpriority = '1-URGENT' and\n+  o_custkey between 40 and 43\n+order by o_custkey, o_orderkey;\n+", "filename": "asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp"}, {"additions": 32, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan", "sha": "80def8827b5e8d981787d5afbdce1879a9e1ba95", "changes": 32, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,32 @@\n+-- DISTRIBUTE_RESULT  |PARTITIONED|\n+  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+    -- STREAM_PROJECT  |PARTITIONED|\n+      -- ASSIGN  |PARTITIONED|\n+        -- SORT_MERGE_EXCHANGE [$$25(ASC), $$26(ASC) ]  |PARTITIONED|\n+          -- STABLE_SORT [$$25(ASC), $$26(ASC)]  |PARTITIONED|\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              -- STREAM_PROJECT  |PARTITIONED|\n+                -- STREAM_SELECT  |PARTITIONED|\n+                  -- ASSIGN  |PARTITIONED|\n+                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                      -- BTREE_SEARCH  |PARTITIONED|\n+                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                          -- INTERSECT  |PARTITIONED|\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              -- STABLE_SORT [$$35(ASC)]  |PARTITIONED|\n+                                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                  -- STREAM_PROJECT  |PARTITIONED|\n+                                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                      -- BTREE_SEARCH  |PARTITIONED|\n+                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                          -- ASSIGN  |PARTITIONED|\n+                                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              -- STABLE_SORT [$$39(ASC)]  |PARTITIONED|\n+                                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                  -- STREAM_PROJECT  |PARTITIONED|\n+                                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                      -- BTREE_SEARCH  |PARTITIONED|\n+                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                          -- ASSIGN  |PARTITIONED|\n+                                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|", "filename": "asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan"}, {"additions": 43, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp", "sha": "cb5101204a2d20289a7d72ea49911e8e2632512f", "changes": 43, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ *  Description     : Secondary BTree Index intersection with between operator (ASTERIXDB-2448)\n+ *  Expected Result : Success\n+ */\n+\n+drop  dataverse tpch if exists;\n+create  dataverse tpch;\n+\n+use tpch;\n+\n+create type tpch.OrderType as\n+ closed {\n+  o_orderkey : bigint,\n+  o_custkey : bigint,\n+  o_orderstatus : string,\n+  o_totalprice : double,\n+  o_orderdate : string,\n+  o_orderpriority : string,\n+  o_clerk : string,\n+  o_shippriority : bigint,\n+  o_comment : string\n+};\n+\n+create  dataset Orders(OrderType) primary key o_orderkey;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp"}, {"additions": 23, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp", "sha": "109732505f0e160c4878bc2e88be00eca701e805", "changes": 23, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+load  dataset Orders using localfs ((`path`=`asterix_nc1://data/tpch0.001/orders.tbl`),(`format`=`delimited-text`),(`delimiter`=`|`)) pre-sorted;\n+", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp"}, {"additions": 24, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp", "sha": "62f4cc0465e9f7639126f081a1a8f0ca174dbe97", "changes": 24, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+create index idx_custkey on Orders (o_custkey) type btree;\n+\n+create index idx_orderpriority on Orders (o_orderpriority) type btree;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp", "sha": "75212af815429c110beef5240cbe58dcb13cb0f6", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+select o_custkey, o_orderkey, o_orderstatus from Orders\n+where\n+  o_orderpriority = '1-URGENT' and\n+  o_custkey between 40 and 43\n+order by o_custkey, o_orderkey", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp"}, {"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm", "sha": "ad86590bf897e86500dbc6f2e1af868a8f6df8e3", "changes": 7, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -0,0 +1,7 @@\n+{ \"o_custkey\": 40, \"o_orderkey\": 323, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 40, \"o_orderkey\": 3653, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 40, \"o_orderkey\": 4934, \"o_orderstatus\": \"O\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 258, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 2596, \"o_orderstatus\": \"O\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 3687, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 5378, \"o_orderstatus\": \"F\" }\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm", "sha": "131b860948da53f546b621386767f36616ab4aec", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -20,7 +20,7 @@ distribute result [$$19]\n                   -- ASSIGN  |PARTITIONED|\n                     exchange\n                     -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n-                      data-scan []<-[$$22, $$t] <- test.TweetMessages condition (and(le(0, $$t.getField(\"user\").getField(\"friends_count\")), le($$t.getField(\"user\").getField(\"friends_count\"), 150))) limit 2\n+                      data-scan []<-[$$22, $$t] <- test.TweetMessages condition (and(ge($$t.getField(\"user\").getField(\"friends_count\"), 0), le($$t.getField(\"user\").getField(\"friends_count\"), 150))) limit 2\n                       -- DATASOURCE_SCAN  |PARTITIONED|\n                         exchange\n                         -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "904dc6149856f4bd50b598809c13cc57c322eb6a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -3374,6 +3374,11 @@\n         <output-dir compare=\"Text\">cust-index-age-nullable</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"index-selection\">\n+      <compilation-unit name=\"intersection-with-between\">\n+        <output-dir compare=\"Text\">intersection-with-between</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"index-selection\">\n       <compilation-unit name=\"inverted-index-ngram-contains\">\n         <output-dir compare=\"Text\">inverted-index-ngram-contains</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}, {"additions": 8, "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java", "sha": "23b4d60cf47408899d57525f4354d1d8a6b97347", "changes": 16, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java?ref=a952e0150efd60d584761af6d8619f15766dab08", "patch": "@@ -136,13 +136,13 @@ private Expression processBetweenOperator(OperatorExpr operatorExpr, OperatorTyp\n         Expression left = operatorExpr.getExprList().get(1);\n         Expression right = operatorExpr.getExprList().get(2);\n \n-        // Creates the expression left <= target.\n-        Expression leftComparison =\n-                createLessThanExpression(left, target, operatorExpr.getHints(), operatorExpr.getSourceLocation());\n+        // Creates the expression target >= left.\n+        Expression leftComparison = createOperatorExpression(OperatorType.GE, target, left, operatorExpr.getHints(),\n+                operatorExpr.getSourceLocation());\n         // Creates the expression target <= right.\n         Expression targetCopy = (Expression) SqlppRewriteUtil.deepCopy(target);\n-        Expression rightComparison =\n-                createLessThanExpression(targetCopy, right, operatorExpr.getHints(), operatorExpr.getSourceLocation());\n+        Expression rightComparison = createOperatorExpression(OperatorType.LE, targetCopy, right,\n+                operatorExpr.getHints(), operatorExpr.getSourceLocation());\n         OperatorExpr andExpr = new OperatorExpr();\n         andExpr.addOperand(leftComparison);\n         andExpr.addOperand(rightComparison);\n@@ -158,12 +158,12 @@ private Expression processBetweenOperator(OperatorExpr operatorExpr, OperatorTyp\n         }\n     }\n \n-    private Expression createLessThanExpression(Expression lhs, Expression rhs, List<IExpressionAnnotation> hints,\n-            SourceLocation sourceLoc) {\n+    private Expression createOperatorExpression(OperatorType opType, Expression lhs, Expression rhs,\n+            List<IExpressionAnnotation> hints, SourceLocation sourceLoc) {\n         OperatorExpr comparison = new OperatorExpr();\n         comparison.addOperand(lhs);\n         comparison.addOperand(rhs);\n-        comparison.addOperator(OperatorType.LE);\n+        comparison.addOperator(opType);\n         comparison.setSourceLocation(sourceLoc);\n         if (hints != null) {\n             for (IExpressionAnnotation hint : hints) {", "filename": "asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/89e6a93277205a9dbc76c18e249919a745d224d2", "parent": "https://github.com/apache/asterixdb/commit/536c707dc2ffc92a9e2f331b8765697367d9ab3a", "message": "[ASTERIXDB-2135][IDX] Prevent NPE in LSMBTreePointSearchCursor\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Prevent NPE on LSMBTreePointSearchCursor.close\n\nChange-Id: I062c1200d9c5a1a574a1ccdb32be0ac011406d92\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2081\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Ian Maxon <imaxon@apache.org>", "bug_id": "asterixdb_13", "file": [{"additions": 10, "raw_url": "https://github.com/apache/asterixdb/raw/89e6a93277205a9dbc76c18e249919a745d224d2/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java", "blob_url": "https://github.com/apache/asterixdb/blob/89e6a93277205a9dbc76c18e249919a745d224d2/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java", "sha": "0f7aa38826cf6e122aaab0193a0f9b91f1e4a0a0", "changes": 13, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java?ref=89e6a93277205a9dbc76c18e249919a745d224d2", "patch": "@@ -214,9 +214,7 @@ public void next() throws HyracksDataException {\n     public void close() throws HyracksDataException {\n         if (lsmHarness != null) {\n             try {\n-                for (int i = 0; i < rangeCursors.length; i++) {\n-                    rangeCursors[i].close();\n-                }\n+                closeCursors();\n                 rangeCursors = null;\n             } finally {\n                 lsmHarness.endSearch(opCtx);\n@@ -265,4 +263,13 @@ public boolean isExclusiveLatchNodes() {\n         return false;\n     }\n \n+    private void closeCursors() throws HyracksDataException {\n+        if (rangeCursors != null) {\n+            for (int i = 0; i < rangeCursors.length; ++i) {\n+                if (rangeCursors[i] != null) {\n+                    rangeCursors[i].close();\n+                }\n+            }\n+        }\n+    }\n }", "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/595277850582341bead228ce84d411b423a8be35", "parent": "https://github.com/apache/asterixdb/commit/b227a0d37893831f94a971cc116600860d8d23d7", "message": "[NO ISSUE][TEST] Avoid NPE on empty result from cleanup query\n\nChange-Id: Ic645b0f2c5ff29a6178cfd784fcbffb331386e90\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2406\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>", "bug_id": "asterixdb_14", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/595277850582341bead228ce84d411b423a8be35/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java", "blob_url": "https://github.com/apache/asterixdb/blob/595277850582341bead228ce84d411b423a8be35/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java", "sha": "b75df995e0aac89e861e4ad6ad5741f8479a313e", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java?ref=595277850582341bead228ce84d411b423a8be35", "patch": "@@ -1649,14 +1649,18 @@ public void cleanup(String testCase, List<String> badtestcases) throws Exception\n             InputStream resultStream = executeQueryService(\n                     \"select dv.DataverseName from Metadata.`Dataverse` as dv order by dv.DataverseName;\",\n                     getEndpoint(Servlets.QUERY_SERVICE), OutputFormat.CLEAN_JSON);\n-            String out = IOUtils.toString(resultStream);\n+            String out = IOUtils.toString(resultStream, StandardCharsets.UTF_8);\n             ObjectMapper om = new ObjectMapper();\n             om.setConfig(om.getDeserializationConfig().with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT));\n             JsonNode result;\n             try {\n                 result = om.readValue(out, ObjectNode.class).get(\"results\");\n             } catch (JsonMappingException e) {\n-                result = om.createArrayNode();\n+                LOGGER.warn(\"error mapping response '{}' to json\", out, e);\n+                result = null;\n+            }\n+            if (result == null) {\n+                return;\n             }\n             for (int i = 0; i < result.size(); i++) {\n                 JsonNode json = result.get(i);", "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/d237f0c22db8ee316d553b2254f711f328d5aff8", "parent": "https://github.com/apache/asterixdb/commit/3a6846942cde2f6e97ab53e01e14a7025ca04814", "message": "[NO ISSUE][NET] Ensure CLOSE Is Not Sent After Channel ERROR\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Currently it is possible to send network channel\n  CLOSE command after a channel ERROR was sent. When this\n  happens and the channel was recycled to be reused\n  on the receiver side, the CLOSE command will result\n  in NPE. There is no need to send a CLOSE command\n  after an ERROR command because when an ERROR command\n  is received, it is treated as ERROR + CLOSE on the\n  receiver side.\n- Avoid registering partition requests for failed jobs.\n\nChange-Id: I17a769a46f4d13220adb22dd255e56dc4ccc458d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2954\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nReviewed-by: Michael Blow <mblow@apache.org>", "bug_id": "asterixdb_15", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java", "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java", "sha": "84f7831d496d428343a381f8aeceee0c244c0e93", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8", "patch": "@@ -54,7 +54,7 @@ public void write(IConnectionWriterState writerState) throws NetException {\n             ecodeSent = true;\n             ccb.reportLocalEOS();\n             adjustChannelWritability();\n-        } else if (eos && !eosSent) {\n+        } else if (isPendingCloseWrite()) {\n             writerState.getCommand().setChannelId(channelId);\n             writerState.getCommand().setCommandType(MuxDemuxCommand.CommandType.CLOSE_CHANNEL);\n             writerState.getCommand().setData(0);", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java", "sha": "7c8fb3471a0d2465ca6c9ce6d7a2741bfcd4a713", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8", "patch": "@@ -107,6 +107,7 @@ public synchronized IPartition getPartition(PartitionId pid) {\n     public synchronized void registerPartitionRequest(PartitionId partitionId, NetworkOutputChannel writer) {\n         if (failedJobsCache.getIfPresent(partitionId.getJobId()) != null) {\n             writer.abort(AbstractChannelWriteInterface.REMOTE_ERROR_CODE);\n+            return;\n         }\n         List<IPartition> pList = availablePartitionMap.get(partitionId);\n         if (pList != null && !pList.isEmpty()) {", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java", "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java", "sha": "5c927f95e3ca1ced89b99f2684e11b6f95f99484", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8", "patch": "@@ -75,7 +75,7 @@ private boolean computeWritability() {\n         if (writableDataPresent) {\n             return credits > 0;\n         }\n-        if (eos && !eosSent) {\n+        if (isPendingCloseWrite()) {\n             return true;\n         }\n         return ecode.get() == REMOTE_ERROR_CODE && !ecodeSent;\n@@ -116,6 +116,10 @@ public int getCredits() {\n         return credits;\n     }\n \n+    protected boolean isPendingCloseWrite() {\n+        return eos && !eosSent && !ecodeSent;\n+    }\n+\n     private class CloseableBufferAcceptor implements ICloseableBufferAcceptor {\n         @Override\n         public void accept(ByteBuffer buffer) {", "filename": "hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java", "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java", "sha": "3f4618bdc9728293345a1688c57975c586dc3a2d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8", "patch": "@@ -58,7 +58,7 @@ public void write(IConnectionWriterState writerState) throws NetException {\n             ecodeSent = true;\n             ccb.reportLocalEOS();\n             adjustChannelWritability();\n-        } else if (eos && !eosSent) {\n+        } else if (isPendingCloseWrite()) {\n             writerState.getCommand().setChannelId(channelId);\n             writerState.getCommand().setCommandType(MuxDemuxCommand.CommandType.CLOSE_CHANNEL);\n             writerState.getCommand().setData(0);", "filename": "hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "parent": "https://github.com/apache/asterixdb/commit/9a987680d3b7b7946df34070262d1b95e8ede054", "message": "[ASTERIXDB-2417][COMP] Fix issues with LIMIT clause\n\n- user model changes: yes\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE in optimizer when limit/offset is non-integer\n- Allow float/double values that are integers in limit/offset\n- Make consistent limit/offset value types (integer) between\n  runtime and optimizer rules\n- Add internal function treat-as-integer() that returns integer\n  if input number conforms to the integer type or fails otherwise\n\nChange-Id: I986fab3e79b072aa2441af293f3e16c3f37bf508\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2788\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_16", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java", "sha": "85d1c294d2cfe3b4b0492f060e1389c1d3318bac", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -182,13 +182,14 @@ private RuleCollections() {\n         normalization.add(new IntroduceDynamicTypeCastRule());\n         normalization.add(new IntroduceDynamicTypeCastForExternalFunctionRule());\n         normalization.add(new IntroduceEnforcedListTypeRule());\n+        // Perform constant folding before common expression extraction\n+        normalization.add(new ConstantFoldingRule(appCtx));\n         normalization.add(new ExtractCommonExpressionsRule());\n \n         // Let PushAggFuncIntoStandaloneAggregateRule run after ExtractCommonExpressionsRule\n         // so that PushAggFunc can happen in fewer places.\n         normalization.add(new PushAggFuncIntoStandaloneAggregateRule());\n         normalization.add(new ListifyUnnestingFunctionRule());\n-        normalization.add(new ConstantFoldingRule(appCtx));\n         normalization.add(new RemoveRedundantSelectRule());\n         normalization.add(new UnnestToDataScanRule());\n         normalization.add(new MetaFunctionToMetaVariableRule());", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java"}, {"additions": 42, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java", "sha": "e64889d0e55dac7c3999fa422f36dd0c1d54237a", "changes": 78, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -18,12 +18,15 @@\n  */\n package org.apache.asterix.optimizer.rules;\n \n-import org.apache.asterix.optimizer.rules.am.AccessMethodUtils;\n+import org.apache.asterix.om.base.AInt32;\n+import org.apache.asterix.om.base.IAObject;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.utils.ConstantExpressionUtil;\n import org.apache.commons.lang3.mutable.Mutable;\n import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator;\n import org.apache.hyracks.algebricks.core.algebra.base.IOptimizationContext;\n-import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n import org.apache.hyracks.algebricks.core.algebra.base.LogicalOperatorTag;\n import org.apache.hyracks.algebricks.core.algebra.base.PhysicalOperatorTag;\n import org.apache.hyracks.algebricks.core.algebra.operators.logical.AbstractLogicalOperator;\n@@ -89,50 +92,19 @@ private boolean pushLimitIntoOrder(Mutable<ILogicalOperator> opRef, Mutable<ILog\n         PhysicalOptimizationConfig physicalOptimizationConfig = context.getPhysicalOptimizationConfig();\n         LimitOperator limitOp = (LimitOperator) opRef.getValue();\n         OrderOperator orderOp = (OrderOperator) opRef2.getValue();\n-        long topK = -1;\n \n         // We don't push-down LIMIT into in-memory sort.\n         if (orderOp.getPhysicalOperator().getOperatorTag() != PhysicalOperatorTag.STABLE_SORT) {\n             return false;\n         }\n \n-        // Get the LIMIT constant\n-        if (limitOp.getMaxObjects().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n-            // Currently, we support LIMIT with a constant value.\n-            topK = AccessMethodUtils.getInt64Constant(limitOp.getMaxObjects());\n-            // If topK is huge, there is no reason to use topK sort module\n-            // since the original external sort's performance might be better.\n-            if (topK > Integer.MAX_VALUE) {\n-                return false;\n-            }\n-            if (topK < 0) {\n-                topK = 0;\n-            }\n-        } else {\n+        Integer topK = getOutputLimit(limitOp);\n+        if (topK == null) {\n             return false;\n         }\n \n-        // Get the offset constant if there is one. If one presents, then topK = topK + offset.\n-        // This is because we can't apply offset to the external sort.\n-        // Final topK will be applied through LIMIT.\n-        if (limitOp.getOffset().getValue() != null) {\n-            if (limitOp.getOffset().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n-                long offset = AccessMethodUtils.getInt64Constant(limitOp.getOffset());\n-                if (offset < 0) {\n-                    offset = 0;\n-                }\n-                // Check the overflow case.\n-                if (offset >= Integer.MAX_VALUE - topK) {\n-                    return false;\n-                }\n-                topK += offset;\n-            } else {\n-                return false;\n-            }\n-        }\n-\n         // Create the new ORDER operator, set the topK value, and replace the current one.\n-        OrderOperator newOrderOp = new OrderOperator(orderOp.getOrderExpressions(), (int) topK);\n+        OrderOperator newOrderOp = new OrderOperator(orderOp.getOrderExpressions(), topK);\n         newOrderOp.setSourceLocation(orderOp.getSourceLocation());\n         newOrderOp.setPhysicalOperator(\n                 new StableSortPOperator(physicalOptimizationConfig.getMaxFramesExternalSort(), newOrderOp.getTopK()));\n@@ -146,4 +118,38 @@ private boolean pushLimitIntoOrder(Mutable<ILogicalOperator> opRef, Mutable<ILog\n         return true;\n     }\n \n+    static Integer getOutputLimit(LimitOperator limitOp) {\n+        // Currently, we support LIMIT with a constant value.\n+        ILogicalExpression maxObjectsExpr = limitOp.getMaxObjects().getValue();\n+        IAObject maxObjectsValue = ConstantExpressionUtil.getConstantIaObject(maxObjectsExpr, ATypeTag.INTEGER);\n+        if (maxObjectsValue == null) {\n+            return null;\n+        }\n+        int topK = ((AInt32) maxObjectsValue).getIntegerValue();\n+        if (topK < 0) {\n+            topK = 0;\n+        }\n+\n+        // Get the offset constant if there is one. If one presents, then topK = topK + offset.\n+        // This is because we can't apply offset to the external sort.\n+        // Final topK will be applied through LIMIT.\n+        ILogicalExpression offsetExpr = limitOp.getOffset().getValue();\n+        if (offsetExpr != null) {\n+            IAObject offsetValue = ConstantExpressionUtil.getConstantIaObject(offsetExpr, ATypeTag.INTEGER);\n+            if (offsetValue == null) {\n+                return null;\n+            }\n+            int offset = ((AInt32) offsetValue).getIntegerValue();\n+            if (offset < 0) {\n+                offset = 0;\n+            }\n+            // Check the overflow case.\n+            if (offset >= Integer.MAX_VALUE - topK) {\n+                return null;\n+            }\n+            topK += offset;\n+        }\n+\n+        return topK;\n+    }\n }", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java", "sha": "5427ca628551a3d74702bc94471df69bd610cfa3", "changes": 23, "status": "modified", "deletions": 19, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -25,7 +25,6 @@\n import org.apache.asterix.metadata.declared.DataSource;\n import org.apache.asterix.om.functions.BuiltinFunctions;\n import org.apache.asterix.optimizer.rules.am.AccessMethodJobGenParams;\n-import org.apache.asterix.optimizer.rules.am.AccessMethodUtils;\n import org.apache.commons.lang3.mutable.Mutable;\n import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n@@ -67,7 +66,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         }\n         context.addToDontApplySet(this, op);\n \n-        Long outputLimit = getOutputLimit((LimitOperator) op);\n+        Integer outputLimit = PushLimitIntoOrderByRule.getOutputLimit((LimitOperator) op);\n         if (outputLimit == null) {\n             // we cannot push if limit is not constant\n             return false;\n@@ -77,7 +76,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         if (childOp.getValue().getOperatorTag() == LogicalOperatorTag.EXCHANGE) {\n             childOp = childOp.getValue().getInputs().get(0);\n         }\n-        boolean changed = false;\n+        boolean changed;\n         if (childOp.getValue().getOperatorTag() == LogicalOperatorTag.SELECT) {\n             changed = rewriteSelect(childOp, outputLimit);\n         } else {\n@@ -89,21 +88,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         return changed;\n     }\n \n-    private Long getOutputLimit(LimitOperator limit) {\n-        if (limit.getMaxObjects().getValue().getExpressionTag() != LogicalExpressionTag.CONSTANT) {\n-            return null;\n-        }\n-        long outputLimit = AccessMethodUtils.getInt64Constant(limit.getMaxObjects());\n-        if (limit.getOffset() != null && limit.getOffset().getValue() != null) {\n-            if (limit.getOffset().getValue().getExpressionTag() != LogicalExpressionTag.CONSTANT) {\n-                return null;\n-            }\n-            outputLimit += AccessMethodUtils.getInt64Constant(limit.getOffset());\n-        }\n-        return outputLimit;\n-    }\n-\n-    private boolean rewriteSelect(Mutable<ILogicalOperator> op, long outputLimit) throws AlgebricksException {\n+    private boolean rewriteSelect(Mutable<ILogicalOperator> op, int outputLimit) {\n         SelectOperator select = (SelectOperator) op.getValue();\n         Set<LogicalVariable> selectedVariables = new HashSet<>();\n         select.getCondition().getValue().getUsedVariables(selectedVariables);\n@@ -131,7 +116,7 @@ private boolean rewriteSelect(Mutable<ILogicalOperator> op, long outputLimit) th\n         return changed;\n     }\n \n-    private boolean setLimitForScanOrUnnestMap(ILogicalOperator op, long outputLimit) throws AlgebricksException {\n+    private boolean setLimitForScanOrUnnestMap(ILogicalOperator op, int outputLimit) {\n         if (op.getOperatorTag() == LogicalOperatorTag.DATASOURCESCAN) {\n             DataSourceScanOperator scan = (DataSourceScanOperator) op;\n             if (isScanPushable(scan, Collections.emptySet())) {", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java"}, {"additions": 50, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java", "sha": "5410a94ca869eda381930a18440872b9649dd7d9", "changes": 107, "status": "modified", "deletions": 57, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -1085,38 +1085,27 @@ private ILogicalPlan createNestedPlanWithAggregate(LogicalVariable aggOutputVar,\n             ILogicalExpression e = p.first;\n             // now look at the operator\n             if (i < nOps) {\n-                if (OperatorExpr.opIsComparison(ops.get(i))) {\n-                    AbstractFunctionCallExpression c = createComparisonExpression(ops.get(i), sourceLoc);\n-\n-                    // chain the operators\n-                    if (i == 0) {\n-                        c.getArguments().add(new MutableObject<>(e));\n-                        currExpr = c;\n-                        if (op.isBroadcastOperand(i)) {\n-                            BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n-                            bcast.setObject(BroadcastSide.LEFT);\n-                            c.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n-                        }\n-                    } else {\n-                        currExpr.getArguments().add(new MutableObject<>(e));\n-                        c.getArguments().add(new MutableObject<>(currExpr));\n-                        currExpr = c;\n-                        if (i == 1 && op.isBroadcastOperand(i)) {\n-                            BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n-                            bcast.setObject(BroadcastSide.RIGHT);\n-                            c.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n-                        }\n+                OperatorType opType = ops.get(i);\n+                boolean isCmpOp = OperatorExpr.opIsComparison(opType);\n+                AbstractFunctionCallExpression f = createFunctionCallExpressionForBuiltinOperator(opType, sourceLoc);\n+\n+                // chain the operators\n+                if (i == 0) {\n+                    f.getArguments().add(new MutableObject<>(e));\n+                    currExpr = f;\n+                    if (isCmpOp && op.isBroadcastOperand(i)) {\n+                        BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n+                        bcast.setObject(BroadcastSide.LEFT);\n+                        f.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n                     }\n                 } else {\n-                    AbstractFunctionCallExpression f =\n-                            createFunctionCallExpressionForBuiltinOperator(ops.get(i), sourceLoc);\n-                    if (i == 0) {\n-                        f.getArguments().add(new MutableObject<>(e));\n-                        currExpr = f;\n-                    } else {\n-                        currExpr.getArguments().add(new MutableObject<>(e));\n-                        f.getArguments().add(new MutableObject<>(currExpr));\n-                        currExpr = f;\n+                    currExpr.getArguments().add(new MutableObject<>(e));\n+                    f.getArguments().add(new MutableObject<>(currExpr));\n+                    currExpr = f;\n+                    if (isCmpOp && i == 1 && op.isBroadcastOperand(i)) {\n+                        BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n+                        bcast.setObject(BroadcastSide.RIGHT);\n+                        f.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n                     }\n                 }\n             } else { // don't forget the last expression...\n@@ -1359,53 +1348,52 @@ private ILogicalPlan createNestedPlanWithAggregate(LogicalVariable aggOutputVar,\n     public Pair<ILogicalOperator, LogicalVariable> visit(LimitClause lc, Mutable<ILogicalOperator> tupSource)\n             throws CompilationException {\n         SourceLocation sourceLoc = lc.getSourceLocation();\n-        Pair<ILogicalExpression, Mutable<ILogicalOperator>> p1 = langExprToAlgExpression(lc.getLimitExpr(), tupSource);\n         LimitOperator opLim;\n+\n+        Pair<ILogicalExpression, Mutable<ILogicalOperator>> p1 = langExprToAlgExpression(lc.getLimitExpr(), tupSource);\n+        AbstractFunctionCallExpression maxObjectsExpr =\n+                createFunctionCallExpression(BuiltinFunctions.TREAT_AS_INTEGER, lc.getLimitExpr().getSourceLocation());\n+        maxObjectsExpr.getArguments().add(new MutableObject<>(p1.first));\n+\n         Expression offset = lc.getOffset();\n         if (offset != null) {\n             Pair<ILogicalExpression, Mutable<ILogicalOperator>> p2 = langExprToAlgExpression(offset, p1.second);\n-            opLim = new LimitOperator(p1.first, p2.first);\n+            AbstractFunctionCallExpression offsetExpr =\n+                    createFunctionCallExpression(BuiltinFunctions.TREAT_AS_INTEGER, lc.getOffset().getSourceLocation());\n+            offsetExpr.getArguments().add(new MutableObject<>(p2.first));\n+            opLim = new LimitOperator(maxObjectsExpr, offsetExpr);\n             opLim.getInputs().add(p2.second);\n             opLim.setSourceLocation(sourceLoc);\n         } else {\n-            opLim = new LimitOperator(p1.first);\n+            opLim = new LimitOperator(maxObjectsExpr);\n             opLim.getInputs().add(p1.second);\n             opLim.setSourceLocation(sourceLoc);\n         }\n         return new Pair<>(opLim, null);\n     }\n \n-    protected AbstractFunctionCallExpression createComparisonExpression(OperatorType t, SourceLocation sourceLoc) {\n-        FunctionIdentifier fi = operatorTypeToFunctionIdentifier(t);\n-        IFunctionInfo finfo = FunctionUtil.getFunctionInfo(fi);\n-        ScalarFunctionCallExpression callExpr = new ScalarFunctionCallExpression(finfo);\n-        callExpr.setSourceLocation(sourceLoc);\n-        return callExpr;\n-    }\n-\n-    private static FunctionIdentifier operatorTypeToFunctionIdentifier(OperatorType t) {\n+    private static AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinOperator(OperatorType t,\n+            SourceLocation sourceLoc) throws CompilationException {\n+        FunctionIdentifier fid;\n         switch (t) {\n             case EQ:\n-                return AlgebricksBuiltinFunctions.EQ;\n+                fid = AlgebricksBuiltinFunctions.EQ;\n+                break;\n             case NEQ:\n-                return AlgebricksBuiltinFunctions.NEQ;\n+                fid = AlgebricksBuiltinFunctions.NEQ;\n+                break;\n             case GT:\n-                return AlgebricksBuiltinFunctions.GT;\n+                fid = AlgebricksBuiltinFunctions.GT;\n+                break;\n             case GE:\n-                return AlgebricksBuiltinFunctions.GE;\n+                fid = AlgebricksBuiltinFunctions.GE;\n+                break;\n             case LT:\n-                return AlgebricksBuiltinFunctions.LT;\n+                fid = AlgebricksBuiltinFunctions.LT;\n+                break;\n             case LE:\n-                return AlgebricksBuiltinFunctions.LE;\n-            default:\n-                throw new IllegalStateException();\n-        }\n-    }\n-\n-    protected AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinOperator(OperatorType t,\n-            SourceLocation sourceLoc) throws CompilationException {\n-        FunctionIdentifier fid;\n-        switch (t) {\n+                fid = AlgebricksBuiltinFunctions.LE;\n+                break;\n             case PLUS:\n                 fid = AlgebricksBuiltinFunctions.NUMERIC_ADD;\n                 break;\n@@ -1440,6 +1428,11 @@ protected AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinO\n                 throw new CompilationException(ErrorCode.COMPILATION_ERROR, sourceLoc,\n                         \"Operator \" + t + \" is not yet implemented\");\n         }\n+        return createFunctionCallExpression(fid, sourceLoc);\n+    }\n+\n+    private static AbstractFunctionCallExpression createFunctionCallExpression(FunctionIdentifier fid,\n+            SourceLocation sourceLoc) {\n         ScalarFunctionCallExpression callExpr = new ScalarFunctionCallExpression(FunctionUtil.getFunctionInfo(fid));\n         callExpr.setSourceLocation(sourceLoc);\n         return callExpr;", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java"}, {"additions": 29, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp", "sha": "c8b2b7a4aee352965ac85bddd7c5eb8a4eb2cdf4", "changes": 29, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test expressions returning floating point numbers\n+ *                 : in limit/offset\n+ * Expected Result : Success\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 7.5/2.5 offset 5/2.5\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp", "sha": "ce55ac9ebbb98650d8a080666e586b991b636dd0", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 5.5/2\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp", "sha": "e479296d5aab6ca8352c44f0c7f172e070726c87", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 1 offset 3.5/2\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp", "sha": "b870b76f28f1cfd742fe8c5523fde555316414ff", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit \"2\"\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp", "sha": "3e3bfa7215d24bb8b8ba97a6afc843e1a0757772", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 2 offset true\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp", "sha": "d783bb14bf2b35af5a1d3ca3cd7d842a266b6c10", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test overflow error in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 9999999999\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp", "sha": "991f189fb3745c791e61ce10fae9a745da899b5c", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test overflow error in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 1 offset 8888888888\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp"}, {"additions": 25, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp", "sha": "5673992be9d455c58e7d9206c0188876994a6e2b", "changes": 25, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+explain select element c\n+from  LineItem as c\n+where (c.l_suppkey < 150)\n+limit 7.5/1.5 offset 7.5/1.5;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp", "sha": "fc9d42f8bf68902b52dc558299b7f057d949704c", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/* scan and print a delimited text file */\n+\n+use test;\n+\n+explain\n+  select element paper\n+  from  DBLP1 as paper\n+  limit 7.5/1.5 offset 7.5/1.5;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm", "sha": "af6412102d192d12927a67e2fa76c05cc15b2b2c", "changes": 3, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,3 @@\n+3\n+4\n+5\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm"}, {"additions": 34, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm", "sha": "d070b2be7954c389d6575b897ae734e89225e3de", "changes": 34, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,34 @@\n+distribute result [$$c]\n+-- DISTRIBUTE_RESULT  |UNPARTITIONED|\n+  exchange\n+  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|\n+    limit 5, 5\n+    -- STREAM_LIMIT  |UNPARTITIONED|\n+      project ([$$c])\n+      -- STREAM_PROJECT  |PARTITIONED|\n+        exchange\n+        -- SORT_MERGE_EXCHANGE [$$14(ASC), $$15(ASC) ]  |PARTITIONED|\n+          limit 10\n+          -- STREAM_LIMIT  |PARTITIONED|\n+            exchange\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              unnest-map [$$14, $$15, $$c] <- index-search(\"LineItem\", 0, \"test\", \"LineItem\", FALSE, FALSE, 2, $$19, $$20, 2, $$19, $$20, TRUE, TRUE, TRUE) condition (lt($$c.getField(2), 150)) limit 10\n+              -- BTREE_SEARCH  |PARTITIONED|\n+                exchange\n+                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                  order (ASC, $$19) (ASC, $$20)\n+                  -- STABLE_SORT [$$19(ASC), $$20(ASC)]  |PARTITIONED|\n+                    exchange\n+                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                      project ([$$19, $$20])\n+                      -- STREAM_PROJECT  |PARTITIONED|\n+                        exchange\n+                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                          unnest-map [$$18, $$19, $$20] <- index-search(\"idx_LineItem_suppkey\", 0, \"test\", \"LineItem\", FALSE, FALSE, 0, 1, $$17, TRUE, FALSE, FALSE)\n+                          -- BTREE_SEARCH  |PARTITIONED|\n+                            exchange\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              assign [$$17] <- [150]\n+                              -- ASSIGN  |PARTITIONED|\n+                                empty-tuple-source\n+                                -- EMPTY_TUPLE_SOURCE  |PARTITIONED|", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm"}, {"additions": 20, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm", "sha": "ee3e565427b3be54ed8161c54ada941a8b9e89cd", "changes": 20, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,20 @@\n+distribute result [$$paper]\n+-- DISTRIBUTE_RESULT  |UNPARTITIONED|\n+  exchange\n+  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|\n+    limit 5, 5\n+    -- STREAM_LIMIT  |UNPARTITIONED|\n+      project ([$$paper])\n+      -- STREAM_PROJECT  |PARTITIONED|\n+        exchange\n+        -- SORT_MERGE_EXCHANGE [$$12(ASC) ]  |PARTITIONED|\n+          limit 10\n+          -- STREAM_LIMIT  |PARTITIONED|\n+            exchange\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              data-scan []<-[$$12, $$paper] <- test.DBLP1 limit 10\n+              -- DATASOURCE_SCAN  |PARTITIONED|\n+                exchange\n+                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                  empty-tuple-source\n+                  -- EMPTY_TUPLE_SOURCE  |PARTITIONED|", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm"}, {"additions": 18, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "c5775d8d47da421f6f4bb9b98b8827f1670a8a54", "changes": 19, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -10155,12 +10155,29 @@\n     </test-case>\n   </test-group>\n   <test-group name=\"limit\">\n+    <test-case FilePath=\"limit\">\n+      <compilation-unit name=\"limit_type_01\">\n+        <output-dir compare=\"Text\">limit_type_01</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"limit\">\n+      <compilation-unit name=\"limit_type_02\">\n+        <output-dir compare=\"Text\">limit_type_01</output-dir>\n+        <expected-error>ASX0039: Expected integer value, got 2.75 (in line 28, at column 10)</expected-error>\n+        <expected-error>ASX0039: Expected integer value, got 1.75 (in line 28, at column 19)</expected-error>\n+        <expected-error>ASX1091: Type mismatch: expected value of type integer, but got the value of type string (in line 28, at column 7)</expected-error>\n+        <expected-error>ASX1091: Type mismatch: expected value of type integer, but got the value of type boolean (in line 28, at column 16)</expected-error>\n+        <expected-error>ASX0021: Source value 9999999999 is out of range that integer can hold - integer.MAX_VALUE: 2147483647, integer.MIN_VALUE: -2147483648</expected-error>\n+        <expected-error>ASX0021: Source value 8888888888 is out of range that integer can hold - integer.MAX_VALUE: 2147483647, integer.MIN_VALUE: -2147483648</expected-error>\n+        <source-location>false</source-location>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"limit\">\n       <compilation-unit name=\"push-limit-to-primary-scan\">\n         <output-dir compare=\"Text\">push-limit-to-primary-scan</output-dir>\n       </compilation-unit>\n     </test-case>\n-     <test-case FilePath=\"limit\">\n+    <test-case FilePath=\"limit\">\n        <compilation-unit name=\"push-limit-to-primary-scan-select\">\n          <output-dir compare=\"Text\">push-limit-to-primary-scan-select</output-dir>\n        </compilation-unit>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java", "sha": "f570aa8f4574ab693a98a7a914f1a4a79a675198", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -79,6 +79,7 @@\n     public static final int CANNOT_COMPARE_COMPLEX = 36;\n     public static final int TYPE_MISMATCH_GENERIC = 37;\n     public static final int DIFFERENT_LIST_TYPE_ARGS = 38;\n+    public static final int INTEGER_VALUE_EXPECTED = 39;\n \n     public static final int UNSUPPORTED_JRE = 100;\n ", "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties", "sha": "8c09d75c199617eb3c52f771a21b036935fc7407", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -73,6 +73,7 @@\n 35 = Unsupported multiple statements.\n 36 = Cannot compare non-primitive values\n 38 = Input contains different list types\n+39 = Expected integer value, got %1$s\n \n 100 = Unsupported JRE: %1$s\n ", "filename": "asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java", "sha": "8f24864ad1cfa1bb6c050b828fcb3cee2c2708e7", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -121,6 +121,7 @@\n import org.apache.asterix.om.typecomputer.impl.ToDoubleTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.ToNumberTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.ToObjectTypeComputer;\n+import org.apache.asterix.om.typecomputer.impl.TreatAsTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryBinaryInt64TypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryMinusTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryStringInt64TypeComputer;\n@@ -1102,6 +1103,9 @@\n     public static final FunctionIdentifier TO_STRING =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"to-string\", 1);\n \n+    public static final FunctionIdentifier TREAT_AS_INTEGER =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"treat-as-integer\", 1);\n+\n     public static final FunctionIdentifier EXTERNAL_LOOKUP =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"external-lookup\", FunctionIdentifier.VARARGS);\n \n@@ -1297,6 +1301,8 @@ public static FunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addFunction(TO_OBJECT, ToObjectTypeComputer.INSTANCE, true);\n         addFunction(TO_STRING, AStringTypeComputer.INSTANCE, true);\n \n+        addPrivateFunction(TREAT_AS_INTEGER, TreatAsTypeComputer.INSTANCE_INTEGER, true);\n+\n         addFunction(IF_INF, IfNanOrInfTypeComputer.INSTANCE, true);\n         addFunction(IF_MISSING, IfMissingTypeComputer.INSTANCE, true);\n         addFunction(IF_MISSING_OR_NULL, IfMissingOrNullTypeComputer.INSTANCE, true);", "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java"}, {"additions": 48, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java", "sha": "1a5861b0ffa45813e42ca96974f6b6237b82f985", "changes": 48, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.om.typecomputer.impl;\n+\n+import org.apache.asterix.om.exceptions.TypeMismatchException;\n+import org.apache.asterix.om.typecomputer.base.AbstractResultTypeComputer;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n+\n+public class TreatAsTypeComputer extends AbstractResultTypeComputer {\n+    public static final TreatAsTypeComputer INSTANCE_INTEGER = new TreatAsTypeComputer(BuiltinType.AINT32);\n+\n+    private final IAType type;\n+\n+    private TreatAsTypeComputer(IAType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    protected IAType getResultType(ILogicalExpression expr, IAType... strippedInputTypes) throws AlgebricksException {\n+        IAType inputType = strippedInputTypes[0];\n+        if (ATypeHierarchy.isCompatible(inputType.getTypeTag(), type.getTypeTag())) {\n+            return type;\n+        } else {\n+            throw new TypeMismatchException(expr.getSourceLocation(), inputType.getTypeTag(), type.getTypeTag());\n+        }\n+    }\n+}", "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java"}, {"additions": 130, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java", "sha": "2c3e148dc531f1208c4e30bd81ff283a0f811a0c", "changes": 130, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.DataOutput;\n+\n+import org.apache.asterix.common.exceptions.ErrorCode;\n+import org.apache.asterix.common.exceptions.RuntimeDataException;\n+import org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\n+import org.apache.asterix.om.base.AInt32;\n+import org.apache.asterix.om.base.AMutableInt32;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptor;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.exceptions.TypeMismatchException;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.VoidPointable;\n+import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n+import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n+\n+public class TreatAsIntegerDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n+        @Override\n+        public IFunctionDescriptor createFunctionDescriptor() {\n+            return new TreatAsIntegerDescriptor();\n+        }\n+    };\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(final IHyracksTaskContext ctx) throws HyracksDataException {\n+\n+                final IScalarEvaluator inputEval = args[0].createScalarEvaluator(ctx);\n+                final IPointable inputArg = new VoidPointable();\n+                final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();\n+                final DataOutput out = resultStorage.getDataOutput();\n+                final AMutableInt32 aInt32 = new AMutableInt32(0);\n+\n+                @SuppressWarnings(\"unchecked\")\n+                final ISerializerDeserializer<AInt32> int32Ser =\n+                        SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.AINT32);\n+\n+                return new IScalarEvaluator() {\n+                    @Override\n+                    public void evaluate(IFrameTupleReference tuple, IPointable result) throws HyracksDataException {\n+                        inputEval.evaluate(tuple, inputArg);\n+\n+                        int intValue;\n+                        byte[] bytes = inputArg.getByteArray();\n+                        int startOffset = inputArg.getStartOffset();\n+                        ATypeTag tt = ATypeTag.VALUE_TYPE_MAPPING[bytes[startOffset]];\n+                        switch (tt) {\n+                            case TINYINT:\n+                            case SMALLINT:\n+                            case INTEGER:\n+                            case BIGINT:\n+                                intValue = ATypeHierarchy.getIntegerValue(getIdentifier().getName(), 0, bytes,\n+                                        startOffset, true);\n+                                break;\n+                            case FLOAT:\n+                            case DOUBLE:\n+                                double doubleValue =\n+                                        ATypeHierarchy.getDoubleValue(getIdentifier().getName(), 0, bytes, startOffset);\n+                                intValue = asInt(doubleValue);\n+                                break;\n+                            default:\n+                                throw new TypeMismatchException(sourceLoc, bytes[startOffset],\n+                                        ATypeTag.SERIALIZED_INT8_TYPE_TAG, ATypeTag.SERIALIZED_INT16_TYPE_TAG,\n+                                        ATypeTag.SERIALIZED_INT32_TYPE_TAG, ATypeTag.SERIALIZED_INT64_TYPE_TAG,\n+                                        ATypeTag.SERIALIZED_FLOAT_TYPE_TAG, ATypeTag.SERIALIZED_DOUBLE_TYPE_TAG);\n+                        }\n+\n+                        resultStorage.reset();\n+                        aInt32.setValue(intValue);\n+                        int32Ser.serialize(aInt32, out);\n+                        result.set(resultStorage);\n+                    }\n+\n+                    private int asInt(double d) throws HyracksDataException {\n+                        if (Double.isFinite(d)) {\n+                            long v = (long) d;\n+                            if (v == d && Integer.MIN_VALUE <= v && v <= Integer.MAX_VALUE) {\n+                                return (int) v;\n+                            }\n+                        }\n+                        throw new RuntimeDataException(ErrorCode.INTEGER_VALUE_EXPECTED, sourceLoc, d);\n+                    }\n+                };\n+            }\n+        };\n+\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.TREAT_AS_INTEGER;\n+    }\n+}", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java", "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java", "sha": "04f4a1e781ab1453e998ba0e71f40ae700fff943", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175", "patch": "@@ -281,6 +281,7 @@\n import org.apache.asterix.runtime.evaluators.functions.ToNumberDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.ToObjectDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.ToStringDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.TreatAsIntegerDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.UUIDDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryConcatDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryLengthDescriptor;\n@@ -790,6 +791,8 @@ public static FunctionCollection createDefaultFunctionCollection() {\n         fc.addGenerated(ToObjectDescriptor.FACTORY);\n         fc.addGenerated(ToStringDescriptor.FACTORY);\n \n+        fc.addGenerated(TreatAsIntegerDescriptor.FACTORY);\n+\n         // Cast function\n         fc.addGenerated(CastTypeDescriptor.FACTORY);\n         fc.addGenerated(CastTypeLaxDescriptor.FACTORY);", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/81907afa0249fd872450989eb35e2dd7923cd991", "parent": "https://github.com/apache/asterixdb/commit/e2eb6eff5eae3fe55cafab278546bb62a5632138", "message": "handled undefined property to avoid NPE", "bug_id": "asterixdb_17", "file": [{"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/81907afa0249fd872450989eb35e2dd7923cd991/asterix-common/src/main/java/edu/uci/ics/asterix/common/config/AsterixPropertiesAccessor.java", "blob_url": "https://github.com/apache/asterixdb/blob/81907afa0249fd872450989eb35e2dd7923cd991/asterix-common/src/main/java/edu/uci/ics/asterix/common/config/AsterixPropertiesAccessor.java", "sha": "7b2f2a6ef941d6c46c85c8b9adefe1051c1bcba2", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-common/src/main/java/edu/uci/ics/asterix/common/config/AsterixPropertiesAccessor.java?ref=81907afa0249fd872450989eb35e2dd7923cd991", "patch": "@@ -84,9 +84,12 @@ public String getMetadataStore() {\n \n     public <T> T getProperty(String property, T defaultValue, IPropertyInterpreter<T> interpreter) {\n         Property p = asterixConfigurationParams.get(property);\n+        if (p == null) {\n+            return defaultValue;\n+        }\n+\n         try {\n-            T interpretedValue = interpreter.interpret(p);\n-            return interpretedValue == null ? defaultValue : interpretedValue;\n+            return interpreter.interpret(p);\n         } catch (IllegalArgumentException e) {\n             logConfigurationError(p, defaultValue);\n             throw e;", "filename": "asterix-common/src/main/java/edu/uci/ics/asterix/common/config/AsterixPropertiesAccessor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/54384a377e3870310a462758ddda3d6f799972b7", "parent": "https://github.com/apache/asterixdb/commit/1308eae519a613873c85ee6c16a0a6ce766ffb72", "message": "[ASTERIXDB-1961][IDX] Prevent NPE in cursor during cancellation\n\n- user model changes: no\n- interface changes: no\n- storage format changes: no\n\nDetails:\n- Prevent NPE in cursor when an interruption happens during\ncursors initialization.\n- Keep track of interruption stack trace to help in diagnosing\nfuture similar issues.\n\nChange-Id: I6937d14bc79d6583bb62c1d7b726ab0f26a59d79\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1856\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>", "bug_id": "asterixdb_18", "file": [{"additions": 16, "raw_url": "https://github.com/apache/asterixdb/raw/54384a377e3870310a462758ddda3d6f799972b7/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/Task.java", "blob_url": "https://github.com/apache/asterixdb/blob/54384a377e3870310a462758ddda3d6f799972b7/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/Task.java", "sha": "ad4881afb8d74fe8dc92bb86bab056000debd3d3", "changes": 17, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/Task.java?ref=54384a377e3870310a462758ddda3d6f799972b7", "patch": "@@ -280,6 +280,7 @@ public void run() {\n         }\n         ct.setName(displayName + \":\" + taskAttemptId + \":\" + 0);\n         try {\n+            Exception operatorException = null;\n             try {\n                 operator.initialize();\n                 if (collectors.length > 0) {\n@@ -318,8 +319,22 @@ public void run() {\n                         sem.acquire(collectors.length - 1);\n                     }\n                 }\n+            } catch (Exception e) {\n+                // Store the operator exception\n+                operatorException = e;\n+                throw e;\n             } finally {\n-                operator.deinitialize();\n+                try {\n+                    operator.deinitialize();\n+                } catch (Exception e) {\n+                    if (operatorException != null) {\n+                        // Add deinitialize exception to the operator exception to keep track of both\n+                        operatorException.addSuppressed(e);\n+                    } else {\n+                        operatorException = e;\n+                    }\n+                    throw operatorException;\n+                }\n             }\n             NodeControllerService ncs = joblet.getNodeController();\n             ncs.getWorkQueue().schedule(new NotifyTaskCompleteWork(ncs, this));", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/Task.java"}, {"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/54384a377e3870310a462758ddda3d6f799972b7/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMIndexSearchCursor.java", "blob_url": "https://github.com/apache/asterixdb/blob/54384a377e3870310a462758ddda3d6f799972b7/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMIndexSearchCursor.java", "sha": "724a909362726a146027a852f429c133569a2973", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMIndexSearchCursor.java?ref=54384a377e3870310a462758ddda3d6f799972b7", "patch": "@@ -137,10 +137,14 @@ public void close() throws HyracksDataException {\n             if (outputPriorityQueue != null) {\n                 outputPriorityQueue.clear();\n             }\n-            for (int i = 0; i < rangeCursors.length; i++) {\n-                rangeCursors[i].close();\n+            if (rangeCursors != null) {\n+                for (int i = 0; i < rangeCursors.length; i++) {\n+                    if (rangeCursors[i] != null) {\n+                        rangeCursors[i].close();\n+                    }\n+                }\n+                rangeCursors = null;\n             }\n-            rangeCursors = null;\n         } finally {\n             if (lsmHarness != null) {\n                 lsmHarness.endSearch(opCtx);", "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMIndexSearchCursor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/536aa3f2bfb4dfb2d425e598443c27d49fe86b31", "parent": "https://github.com/apache/asterixdb/commit/df5e3cf5df1634a1edab16cbf661421c95dbd0d3", "message": "[NO ISSUE][OTH] Name NONE tracer to avoid potential NPE\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\ndetails:\n- Name the none tracer to avoid potential NullPointerException.\n\nChange-Id: I55e55d1d99c2cdf52d7439cd3107fd573ddf73e9\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2077\nReviewed-by: Till Westmann <tillw@apache.org>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Michael Blow <mblow@apache.org>", "bug_id": "asterixdb_19", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/536aa3f2bfb4dfb2d425e598443c27d49fe86b31/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/trace/ITracer.java", "blob_url": "https://github.com/apache/asterixdb/blob/536aa3f2bfb4dfb2d425e598443c27d49fe86b31/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/trace/ITracer.java", "sha": "01b78daca39ae4d1df8ae1043e077a92b945edf9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/trace/ITracer.java?ref=536aa3f2bfb4dfb2d425e598443c27d49fe86b31", "patch": "@@ -54,7 +54,7 @@\n     ITracer NONE = new ITracer() {\n         @Override\n         public String getName() {\n-            return null;\n+            return \"NONE\";\n         }\n \n         @Override", "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/trace/ITracer.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/950c6197ba2e374ea2171e7b8642ece901e4ce20", "parent": "https://github.com/apache/asterixdb/commit/ec151c1dc943bc7b6784a0dec7631aeb6b77e72e", "message": "[ASTERIXDB-2120][HYR][RT] Avoid NPE in case of unknown job\n\nChange-Id: I77267aeaf1a0f6498146fe6f0b5777eb6ba47054\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2049\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nIntegration-Tests: Michael Blow <mblow@apache.org>\nTested-by: Michael Blow <mblow@apache.org>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_20", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/950c6197ba2e374ea2171e7b8642ece901e4ce20/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java", "blob_url": "https://github.com/apache/asterixdb/blob/950c6197ba2e374ea2171e7b8642ece901e4ce20/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java", "sha": "337e88fbbecaba2164ff5574decc7381af251f7f", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java?ref=950c6197ba2e374ea2171e7b8642ece901e4ce20", "patch": "@@ -51,12 +51,14 @@ public JobletCleanupNotificationWork(ClusterControllerService ccs, JobId jobId,\n     public void runWork() {\n         IJobManager jobManager = ccs.getJobManager();\n         final JobRun run = jobManager.get(jobId);\n+        if (run == null) {\n+            LOGGER.log(Level.WARNING, () -> \"ignoring unknown job \" + jobId + \" on notification from \" + nodeId);\n+            return;\n+        }\n         Set<String> cleanupPendingNodes = run.getCleanupPendingNodeIds();\n         if (!cleanupPendingNodes.remove(nodeId)) {\n-            if (LOGGER.isLoggable(Level.WARNING)) {\n-                LOGGER.warning(\n-                        nodeId + \" not in pending cleanup nodes set: \" + cleanupPendingNodes + \" for Job: \" + jobId);\n-            }\n+            LOGGER.log(Level.WARNING, () -> nodeId + \" not in pending cleanup nodes set: \" + cleanupPendingNodes +\n+                    \" for job \" + jobId);\n             return;\n         }\n         INodeManager nodeManager = ccs.getNodeManager();", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/9ac5e40654b712dcd491aef2605d0e0b3b30957e", "parent": "https://github.com/apache/asterixdb/commit/fc1224ecbee1dd917caa6e6c1362d5f7d8476569", "message": "fix NPE when no custom aggregator is set", "bug_id": "asterixdb_21", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/9ac5e40654b712dcd491aef2605d0e0b3b30957e/pregelix/pregelix-api/src/main/java/edu/uci/ics/pregelix/api/util/BspUtils.java", "blob_url": "https://github.com/apache/asterixdb/blob/9ac5e40654b712dcd491aef2605d0e0b3b30957e/pregelix/pregelix-api/src/main/java/edu/uci/ics/pregelix/api/util/BspUtils.java", "sha": "d303969c4b662f99d243dd8f25af3228f13541a3", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/pregelix/pregelix-api/src/main/java/edu/uci/ics/pregelix/api/util/BspUtils.java?ref=9ac5e40654b712dcd491aef2605d0e0b3b30957e", "patch": "@@ -123,7 +123,12 @@\n     public static <I extends WritableComparable, V extends Writable, E extends Writable, M extends WritableSizable, P extends Writable, F extends Writable> List<Class<? extends GlobalAggregator<I, V, E, M, P, F>>> getGlobalAggregatorClasses(\n             Configuration conf) {\n         String aggStrs = conf.get(PregelixJob.GLOBAL_AGGREGATOR_CLASS);\n-        String[] classnames = aggStrs.split(PregelixJob.COMMA_STR);\n+        String[] classnames;\n+        if (aggStrs == null) {\n+            classnames = new String[0];\n+        } else {\n+            classnames = aggStrs.split(PregelixJob.COMMA_STR);\n+        }\n         try {\n             List<Class<? extends GlobalAggregator<I, V, E, M, P, F>>> classes = new ArrayList<Class<? extends GlobalAggregator<I, V, E, M, P, F>>>();\n             for (String defaultClass : PregelixJob.DEFAULT_GLOBAL_AGGREGATOR_CLASSES) {", "filename": "pregelix/pregelix-api/src/main/java/edu/uci/ics/pregelix/api/util/BspUtils.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8", "parent": "https://github.com/apache/asterixdb/commit/0f63d8bf4dc96d106ef237d227807edfbda0046b", "message": "Changes to fix NPE in tpch SF=1 with OptzHHJ", "bug_id": "asterixdb_22", "file": [{"additions": 19, "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java", "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java", "sha": "f44d2f1101c7a5b72475a575bea0ceb5c8036d98", "changes": 20, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8", "patch": "@@ -119,7 +119,16 @@ public void join(ByteBuffer buffer, IFrameWriter writer) throws HyracksDataExcep\n                     accessorBuild.reset(buffers.get(bIndex));\n                     int c = tpComparator.compare(accessorProbe, i, accessorBuild, tIndex);\n                     if (c == 0) {\n-                    \tboolean predEval = ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, i, accessorBuild, tIndex) );\n+                    \tboolean predEval = evaluatePredicate(i, tIndex);\n+\t\t\t\t\t\t/*\n+                    \ttry {\n+\t\t\t\t\t\t\tpredEval = ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, i, accessorBuild, tIndex) );\n+\t\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t\t\t\t\t\t\tSystem.out.println(\"Hit Array Index out of bound - now we swap\");\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t\tpredEval = predEvaluator.evaluate(accessorBuild, i, accessorProbe, tIndex);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t*/\n                     \tif(predEval){\n                     \t\tmatchFound = true;\n                             appendToResult(i, tIndex, writer);\n@@ -155,6 +164,15 @@ private void flushFrame(ByteBuffer buffer, IFrameWriter writer) throws HyracksDa\n         buffer.position(0);\n         buffer.limit(buffer.capacity());\n     }\n+    \n+    private boolean evaluatePredicate(int tIx1, int tIx2){\n+    \tif(reverseOutputOrder){\t\t//Role Reversal Optimization is triggered\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorBuild, tIx2, accessorProbe, tIx1) );\n+    \t}\n+    \telse {\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, tIx1, accessorBuild, tIx2) );\n+    \t}\n+    }\n \n     private void appendToResult(int probeSidetIx, int buildSidetIx, IFrameWriter writer) throws HyracksDataException {\n         if (!reverseOutputOrder) {", "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java"}, {"additions": 17, "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java", "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java", "sha": "979ef5912d2adbe54657e7946782cfd983e9e785", "changes": 18, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8", "patch": "@@ -49,6 +49,8 @@\n     private final boolean isLeftOuter;\n     private final ArrayTupleBuilder nullTupleBuilder;\n     private final IPredicateEvaluator predEvaluator;\n+    private boolean isReversed;\t\t//Added for handling correct calling for predicate-evaluator upon recursive calls (in OptimizedHybridHashJoin) that cause role-reversal\n+\n     \n     public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessor0, FrameTupleAccessor accessor1,\n             ITuplePairComparator comparators, int memSize, IPredicateEvaluator predEval, boolean isLeftOuter, INullWriter[] nullWriters1)\n@@ -63,6 +65,7 @@ public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessor0, Fra\n         this.outBuffers = new ArrayList<ByteBuffer>();\n         this.memSize = memSize;\n         this.predEvaluator = predEval;\n+        this.isReversed = false;\n         this.ctx = ctx;\n \n         this.isLeftOuter = isLeftOuter;\n@@ -133,7 +136,7 @@ private void blockJoin(ByteBuffer outerBuffer, ByteBuffer innerBuffer, IFrameWri\n             boolean matchFound = false;\n             for (int j = 0; j < tupleCount1; ++j) {\n                 int c = compare(accessorOuter, i, accessorInner, j);\n-                boolean prdEval = (predEvaluator == null) || (predEvaluator.evaluate(accessorOuter, i, accessorInner, j));\n+                boolean prdEval = evaluatePredicate(i, j);\n                 if (c == 0 && prdEval) {\n                 \tmatchFound = true;\n                     if (!appender.appendConcat(accessorOuter, i, accessorInner, j)) {\n@@ -165,6 +168,15 @@ private void blockJoin(ByteBuffer outerBuffer, ByteBuffer innerBuffer, IFrameWri\n             }\n         }\n     }\n+    \n+    private boolean evaluatePredicate(int tIx1, int tIx2){\n+    \tif(isReversed){\t\t//Role Reversal Optimization is triggered\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorInner, tIx2, accessorOuter, tIx1) );\n+    \t}\n+    \telse {\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorOuter, tIx1, accessorInner, tIx2) );\n+    \t}\n+    }\n \n     public void closeCache() throws HyracksDataException {\n         if (runFileWriter != null) {\n@@ -206,4 +218,8 @@ private int compare(FrameTupleAccessor accessor0, int tIndex0, FrameTupleAccesso\n         }\n         return 0;\n     }\n+    \n+    public void setIsReversed(boolean b){\n+    \tthis.isReversed = b;\n+    }\n }", "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java"}, {"additions": 9, "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java", "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java", "sha": "6bc810ef02a982a784c7023ad8f4ac13979022d0", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8", "patch": "@@ -99,6 +99,7 @@\n     private int freeFramesCounter; //Used for partition tuning\n     \n     private boolean isTableEmpty;\t//Added for handling the case, where build side is empty (tableSize is 0)\n+    private boolean isReversed;\t\t//Added for handling correct calling for predicate-evaluator upon recursive calls that cause role-reversal\n     \n     public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numOfPartitions, String rel0Name,\n             String rel1Name, int[] keys0, int[] keys1, IBinaryComparator[] comparators, RecordDescriptor buildRd,\n@@ -125,6 +126,7 @@ public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numO\n         this.predEvaluator = predEval;\n         this.isLeftOuter = false;\n         this.nullWriters1 = null;\n+        this.isReversed = false;\n \n     }\n \n@@ -153,7 +155,8 @@ public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numO\n         \n         this.predEvaluator = predEval;\n         this.isLeftOuter = isLeftOuter;\n-\n+        this.isReversed = false;\n+        \n         this.nullWriters1 = isLeftOuter ? new INullWriter[nullWriterFactories1.length] : null;\n         if (isLeftOuter) {\n             for (int i = 0; i < nullWriterFactories1.length; i++) {\n@@ -441,7 +444,7 @@ private void createInMemoryJoiner(int inMemTupCount) throws HyracksDataException\n         this.inMemJoiner = new InMemoryHashJoin(ctx, inMemTupCount,\n                 new FrameTupleAccessor(ctx.getFrameSize(), probeRd), probeHpc, new FrameTupleAccessor(\n                         ctx.getFrameSize(), buildRd), buildHpc, new FrameTuplePairComparator(probeKeys, buildKeys,\n-                        comparators), isLeftOuter, nullWriters1, table, predEvaluator);\n+                        comparators), isLeftOuter, nullWriters1, table, predEvaluator, isReversed);\n     }\n \n     private void cacheInMemJoin() throws HyracksDataException {\n@@ -639,4 +642,8 @@ public String debugGetStats() {\n     public boolean isTableEmpty() {\n         return this.isTableEmpty;\n     }\n+    \n+    public void setIsReversed(boolean b){\n+    \tthis.isReversed = b;\n+    }\n }", "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java"}, {"additions": 23, "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java", "sha": "2d3185f401d5fb2b379cc7bcb1f6e74152b2ae48", "changes": 37, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8", "patch": "@@ -19,6 +19,8 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.BitSet;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import edu.uci.ics.hyracks.api.context.IHyracksTaskContext;\n import edu.uci.ics.hyracks.api.dataflow.ActivityId;\n@@ -117,6 +119,8 @@\n     \n     private final boolean isLeftOuter;\n     private final INullWriterFactory[] nullWriterFactories1;\n+    \n+    private static final Logger LOGGER = Logger.getLogger(OptimizedHybridHashJoinOperatorDescriptor.class.getName());\n \n     public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spec, int memsize, int inputsize0,\n             double factor, int[] keys0, int[] keys1, IBinaryHashFunctionFamily[] hashFunctionGeneratorFactories,\n@@ -139,8 +143,6 @@ public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spe\n         this.predEvaluatorFactory = predEvaluatorFactory;\n         this.isLeftOuter = isLeftOuter;\n         this.nullWriterFactories1 = nullWriterFactories1;\n-        \n-\n     }\n \n     public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spec, int memsize, int inputsize0,\n@@ -207,7 +209,7 @@ private int getNumberOfPartitions(int memorySize, int buildSize, double factor,\n     }\n \n     public static class BuildAndPartitionTaskState extends AbstractStateObject {\n-\n+    \t\n         private int memForJoin;\n         private int numOfPartitions;\n         private OptimizedHybridHashJoin hybridHJ;\n@@ -303,6 +305,7 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n                 public void close() throws HyracksDataException {\n                     state.hybridHJ.closeBuild();\n                     ctx.setStateObject(state);\n+                    LOGGER.log(Level.WARNING, \"OptimizedHybridHashJoin closed its build phase\");\n                 }\n \n                 @Override\n@@ -323,7 +326,7 @@ public void fail() throws HyracksDataException {\n      * Hybrid Hash Join recursively on them.\n      */\n     private class ProbeAndJoinActivityNode extends AbstractActivityNode {\n-\n+    \t\n         private static final long serialVersionUID = 1L;\n \n         private final ActivityId buildAid;\n@@ -423,9 +426,11 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                             hashFunctionGeneratorFactories).createPartitioner(level);\n                     ITuplePartitionComputer buildHpc = new FieldHashPartitionComputerFamily(buildKeys,\n                             hashFunctionGeneratorFactories).createPartitioner(level);\n-\n+                    \n                     long buildPartSize = ohhj.getBuildPartitionSize(pid) / ctx.getFrameSize();\n                     long probePartSize = ohhj.getProbePartitionSize(pid) / ctx.getFrameSize();\n+                    \n+                    LOGGER.log(Level.WARNING,\"Joining Partition Pairs (pid \"+pid+\") - (level \"+level+\") - BuildSize:\\t\"+buildPartSize+\"\\tProbeSize:\\t\"+probePartSize+\" - MemForJoin \"+(state.memForJoin));\n \n                     //Apply in-Mem HJ if possible\n                     if ((buildPartSize < state.memForJoin) || (probePartSize < state.memForJoin)) {\n@@ -460,7 +465,7 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                     else {\n                         OptimizedHybridHashJoin rHHj;\n                         if (isLeftOuter || buildPartSize < probePartSize) { //Build Side is smaller\n-\n+                        \tLOGGER.log(Level.WARNING,\"\\tApply RecursiveHHJ for (pid \"+pid+\") - (level \"+level+\") [buildSize is smaller]\");\n                             int n = getNumberOfPartitions(state.memForJoin, (int) buildPartSize, fudgeFactor,\n                                     nPartitions);\n                            \n@@ -503,6 +508,7 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                 }\n \n                             } else { //Switch to NLJ (Further recursion seems not to be useful)\n+                            \tLOGGER.log(Level.WARNING,\"\\tSwitched to NLJ for (pid \"+pid+\") - (level \"+level+\") (reverse false) [coming from buildSize was smaller]\");\n                                 for (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n                                     RunFileReader rbrfw = rHHj.getBuildRFReader(rPid);\n                                     RunFileReader rprfw = rHHj.getProbeRFReader(rPid);\n@@ -515,19 +521,21 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     int probeSideInTups = rHHj.getProbePartitionSizeInTup(rPid);\n                                     if (isLeftOuter || buildSideInTups < probeSideInTups) {\n                                         applyNestedLoopJoin(probeRd, buildRd, state.memForJoin, rbrfw, rprfw,\n-                                                nljComparator0);\n+                                                nljComparator0, false);\n                                     } else {\n                                         applyNestedLoopJoin(buildRd, probeRd, state.memForJoin, rprfw, rbrfw,\n-                                                nljComparator1);\n+                                                nljComparator1, false);\n                                     }\n                                 }\n                             }\n                         } else { //Role Reversal (Probe Side is smaller)\n+                        \tLOGGER.log(Level.WARNING,\"\\tApply RecursiveHHJ for (pid \"+pid+\") - (level \"+level+\") WITH REVERSAL [probeSize is smaller]\");\n                             int n = getNumberOfPartitions(state.memForJoin, (int) probePartSize, fudgeFactor,\n                                     nPartitions);\n                             \n                             rHHj = new OptimizedHybridHashJoin(ctx, state.memForJoin, n, BUILD_REL, PROBE_REL,\n                                     buildKeys, probeKeys, comparators, buildRd, probeRd, buildHpc, probeHpc, predEvaluator);\n+                            rHHj.setIsReversed(true);\t//Added to use predicateEvaluator (for inMemoryHashJoin) correctly\n \n                             probeSideReader.open();\n                             rHHj.initBuild();\n@@ -561,7 +569,8 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     joinPartitionPair(rHHj, rprfw, rbrfw, rPid, afterMax, (level + 1));\n                                 }\n                             } else { //Switch to NLJ (Further recursion seems not to be effective)\n-                                for (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n+                            \tLOGGER.log(Level.WARNING,\"\\tSwitched to NLJ for (pid \"+pid+\") - (level \"+level+\") (reverse true) [coming from probeSize was smaller]\");\n+                            \tfor (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n                                     RunFileReader rbrfw = rHHj.getBuildRFReader(rPid);\n                                     RunFileReader rprfw = rHHj.getProbeRFReader(rPid);\n                                     \n@@ -573,10 +582,10 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     long probeSideSize = rprfw.getFileSize();\n                                     if (buildSideSize > probeSideSize) {\n                                         applyNestedLoopJoin(buildRd, probeRd, state.memForJoin, rbrfw, rprfw,\n-                                                nljComparator1);\n+                                                nljComparator1, true);\n                                     } else {\n                                         applyNestedLoopJoin(probeRd, buildRd, state.memForJoin, rprfw, rbrfw,\n-                                                nljComparator0);\n+                                                nljComparator0, true);\n                                     }\n                                 }\n                             }\n@@ -590,7 +599,7 @@ private void applyInMemHashJoin(int[] bKeys, int[] pKeys, int tabSize, RecordDes\n                         RecordDescriptor probeRDesc, ITuplePartitionComputer hpcRepLarger,\n                         ITuplePartitionComputer hpcRepSmaller, RunFileReader bReader, RunFileReader pReader, boolean reverse, int pid)\n                         throws HyracksDataException {\n-\n+                \tLOGGER.log(Level.WARNING,\"\\t(pid \"+pid+\") - applyInMemHashJoin (reversal \"+reverse+\")\");\n                     ISerializableTable table = new SerializableHashTable(tabSize, ctx);\n                     InMemoryHashJoin joiner = new InMemoryHashJoin(ctx, tabSize, new FrameTupleAccessor(\n                             ctx.getFrameSize(), probeRDesc), hpcRepLarger, new FrameTupleAccessor(ctx.getFrameSize(),\n@@ -619,9 +628,9 @@ private void applyInMemHashJoin(int[] bKeys, int[] pKeys, int tabSize, RecordDes\n                 }\n \n                 private void applyNestedLoopJoin(RecordDescriptor outerRd, RecordDescriptor innerRd, int memorySize,\n-                        RunFileReader outerReader, RunFileReader innerReader, ITuplePairComparator nljComparator)\n+                        RunFileReader outerReader, RunFileReader innerReader, ITuplePairComparator nljComparator, boolean reverse)\n                         throws HyracksDataException {\n-\n+                \t\n                     NestedLoopJoin nlj = new NestedLoopJoin(ctx, new FrameTupleAccessor(ctx.getFrameSize(), outerRd),\n                             new FrameTupleAccessor(ctx.getFrameSize(), innerRd), nljComparator, memorySize, predEvaluator, false, null);\n ", "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/c2d2fa71c43e5583826902b7e74e440bd6be0008", "parent": "https://github.com/apache/asterixdb/commit/4d9b5dccbfc9e17fb38346d56dc96ea3140f74a5", "message": "Added error message to substitue for an NPE", "bug_id": "asterixdb_23", "file": [{"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/c2d2fa71c43e5583826902b7e74e440bd6be0008/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/common/FunctionManagerImpl.java", "blob_url": "https://github.com/apache/asterixdb/blob/c2d2fa71c43e5583826902b7e74e440bd6be0008/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/common/FunctionManagerImpl.java", "sha": "bb4526ca1f6b9a742c4b2a0548c68e1646351ffa", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/common/FunctionManagerImpl.java?ref=c2d2fa71c43e5583826902b7e74e440bd6be0008", "patch": "@@ -37,6 +37,10 @@ public FunctionManagerImpl() {\n     @Override\n     public synchronized IFunctionDescriptor lookupFunction(FunctionIdentifier fid) throws AlgebricksException {\n         Pair<FunctionIdentifier, Integer> key = new Pair<FunctionIdentifier, Integer>(fid, fid.getArity());\n+        IFunctionDescriptorFactory factory = functions.get(key);\n+        if (factory == null) {\n+            throw new AlgebricksException(\"Inappropriate use of function \" + \"'\" + fid.getName() + \"'\");\n+        }\n         return functions.get(key).createFunctionDescriptor();\n     }\n ", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/common/FunctionManagerImpl.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/1e864a69e0f31a23b711a221965166066671b05a", "parent": "https://github.com/apache/asterixdb/commit/5dcf139e532ecf2fa1fa256467c6c7015f590ca5", "message": "[ASTERIXDB-2124] Throw NPE early\n\nChange-Id: I84a458d2293450bce973788ac84b6fbc4c993a4a\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2055\nReviewed-by: Ian Maxon <imaxon@apache.org>\nTested-by: Ian Maxon <imaxon@apache.org>\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nIntegration-Tests: Murtadha Hubail <mhubail@apache.org>\nTested-by: Murtadha Hubail <mhubail@apache.org>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_24", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/1e864a69e0f31a23b711a221965166066671b05a/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/base/LogicalVariable.java", "blob_url": "https://github.com/apache/asterixdb/blob/1e864a69e0f31a23b711a221965166066671b05a/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/base/LogicalVariable.java", "sha": "f3b9edc651c2567335bfaa08690b05a693d6e0a0", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/base/LogicalVariable.java?ref=1e864a69e0f31a23b711a221965166066671b05a", "patch": "@@ -48,11 +48,10 @@ public String toString() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (!(obj instanceof LogicalVariable)) {\n-            return false;\n-        } else {\n+        if (obj instanceof LogicalVariable) {\n             return id == ((LogicalVariable) obj).getId();\n         }\n+        return false;\n     }\n \n     @Override", "filename": "hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/base/LogicalVariable.java"}, {"additions": 8, "raw_url": "https://github.com/apache/asterixdb/raw/1e864a69e0f31a23b711a221965166066671b05a/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/expressions/VariableReferenceExpression.java", "blob_url": "https://github.com/apache/asterixdb/blob/1e864a69e0f31a23b711a221965166066671b05a/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/expressions/VariableReferenceExpression.java", "sha": "c1342cc5bd20a0895559299adbfdcfe60129f722", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/expressions/VariableReferenceExpression.java?ref=1e864a69e0f31a23b711a221965166066671b05a", "patch": "@@ -33,6 +33,9 @@\n     private LogicalVariable variable;\n \n     public VariableReferenceExpression(int tupleRef, LogicalVariable variable) {\n+        if (variable == null) {\n+            throw new NullPointerException();\n+        }\n         this.tupleRef = tupleRef;\n         this.variable = variable;\n     }\n@@ -73,17 +76,16 @@ public void substituteVar(LogicalVariable v1, LogicalVariable v2) {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (!(obj instanceof VariableReferenceExpression)) {\n-            return false;\n-        } else {\n-            return tupleRef == ((VariableReferenceExpression) obj).tupleRef\n-                    && variable.equals(((VariableReferenceExpression) obj).getVariableReference());\n+        if (obj instanceof VariableReferenceExpression) {\n+            final VariableReferenceExpression varRefExpr = (VariableReferenceExpression) obj;\n+            return tupleRef == varRefExpr.tupleRef && variable.equals(varRefExpr.getVariableReference());\n         }\n+        return false;\n     }\n \n     @Override\n     public int hashCode() {\n-        return tupleRef + variable.getId();\n+        return tupleRef + variable.hashCode();\n     }\n \n     @Override", "filename": "hyracks-fullstack/algebricks/algebricks-core/src/main/java/org/apache/hyracks/algebricks/core/algebra/expressions/VariableReferenceExpression.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/67ffd4c1284c2629a582b80d0564d26c5df38394", "parent": "https://github.com/apache/asterixdb/commit/db672753fe676e553996eab5dd58542c5f8b2325", "message": "ResultWriterOperatorDescriptor fail() NPE on open() failure\n\nConform to IFrameWriter contract for fail()\n\nChange-Id: I613dcae32596af43476cf61d0245bfed258359de\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1834\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_25", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/67ffd4c1284c2629a582b80d0564d26c5df38394/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/67ffd4c1284c2629a582b80d0564d26c5df38394/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java", "sha": "58eee79849032717994e17d5993426bbfbbcffe3", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java?ref=67ffd4c1284c2629a582b80d0564d26c5df38394", "patch": "@@ -112,7 +112,9 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n             @Override\n             public void fail() throws HyracksDataException {\n                 failed = true;\n-                datasetPartitionWriter.fail();\n+                if (datasetPartitionWriter != null) {\n+                    datasetPartitionWriter.fail();\n+                }\n             }\n \n             @Override", "filename": "hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/25b8e9cbcfa487e398f4233509eb7617b0617d72", "parent": "https://github.com/apache/asterixdb/commit/1e8df9fbc0258c3436e0cbd5cb663d9bfa00848d", "message": "Add null guards to avoid NPE when there is no result distribution enabled.", "bug_id": "asterixdb_26", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/25b8e9cbcfa487e398f4233509eb7617b0617d72/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/AbortTasksWork.java", "blob_url": "https://github.com/apache/asterixdb/blob/25b8e9cbcfa487e398f4233509eb7617b0617d72/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/AbortTasksWork.java", "sha": "54ac99a4b44fef50bcec53c00bfae96e1a8ab04d", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/AbortTasksWork.java?ref=25b8e9cbcfa487e398f4233509eb7617b0617d72", "patch": "@@ -20,6 +20,7 @@\n import java.util.logging.Logger;\n \n import edu.uci.ics.hyracks.api.dataflow.TaskAttemptId;\n+import edu.uci.ics.hyracks.api.dataset.IDatasetPartitionManager;\n import edu.uci.ics.hyracks.api.job.JobId;\n import edu.uci.ics.hyracks.control.common.work.AbstractWork;\n import edu.uci.ics.hyracks.control.nc.Joblet;\n@@ -46,7 +47,11 @@ public void run() {\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"Aborting Tasks: \" + jobId + \":\" + tasks);\n         }\n-        ncs.getDatasetPartitionManager().abortReader(jobId);\n+        IDatasetPartitionManager dpm = ncs.getDatasetPartitionManager();\n+        if (dpm != null) {\n+            ncs.getDatasetPartitionManager().abortReader(jobId);\n+        }\n+\n         Map<JobId, Joblet> jobletMap = ncs.getJobletMap();\n         Joblet ji = jobletMap.get(jobId);\n         if (ji != null) {", "filename": "hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/AbortTasksWork.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/25b8e9cbcfa487e398f4233509eb7617b0617d72/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/NotifyTaskFailureWork.java", "blob_url": "https://github.com/apache/asterixdb/blob/25b8e9cbcfa487e398f4233509eb7617b0617d72/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/NotifyTaskFailureWork.java", "sha": "013544d0264a5a4ed2dfa7c85230b10186dd8ab3", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/NotifyTaskFailureWork.java?ref=25b8e9cbcfa487e398f4233509eb7617b0617d72", "patch": "@@ -14,6 +14,7 @@\n  */\n package edu.uci.ics.hyracks.control.nc.work;\n \n+import edu.uci.ics.hyracks.api.dataset.IDatasetPartitionManager;\n import edu.uci.ics.hyracks.api.job.JobId;\n import edu.uci.ics.hyracks.control.common.work.AbstractWork;\n import edu.uci.ics.hyracks.control.nc.NodeControllerService;\n@@ -34,7 +35,10 @@ public NotifyTaskFailureWork(NodeControllerService ncs, Task task, String detail\n     public void run() {\n         try {\n             JobId jobId = task.getJobletContext().getJobId();\n-            ncs.getDatasetPartitionManager().abortReader(jobId);\n+            IDatasetPartitionManager dpm = ncs.getDatasetPartitionManager();\n+            if (dpm != null) {\n+                dpm.abortReader(jobId);\n+            }\n             ncs.getClusterController().notifyTaskFailure(jobId, task.getTaskAttemptId(), ncs.getId(), details);\n         } catch (Exception e) {\n             e.printStackTrace();", "filename": "hyracks/hyracks-control/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/work/NotifyTaskFailureWork.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/050f509e0643b2a2d41af1695867d618a0519e4b", "parent": "https://github.com/apache/asterixdb/commit/2e03fd673a5ca2100b52c07aff0434fafe6aa9ce", "message": "Fix NPE in DatasetDirectoryService.reportJobFailure\n\nChange-Id: I4c27d2133d199bbb6984f8da14e37b2e511528ac\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1582\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_27", "file": [{"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/050f509e0643b2a2d41af1695867d618a0519e4b/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/dataset/DatasetDirectoryService.java", "blob_url": "https://github.com/apache/asterixdb/blob/050f509e0643b2a2d41af1695867d618a0519e4b/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/dataset/DatasetDirectoryService.java", "sha": "8fd15f923afdb14f53d384daf84207991f3b8c03", "changes": 7, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/dataset/DatasetDirectoryService.java?ref=050f509e0643b2a2d41af1695867d618a0519e4b", "patch": "@@ -159,9 +159,10 @@ public synchronized void reportJobFailure(JobId jobId, List<Exception> exception\n         if (djr != null) {\n             djr.fail(exceptions);\n         }\n-        // TODO(tillw) throwing an NPE here hangs the system, why?\n-        // TODO(tillw) still run into NPE here ..\n-        jobResultLocations.get(jobId).setException(exceptions.isEmpty() ? null : exceptions.get(0));\n+        final JobResultInfo jobResultInfo = jobResultLocations.get(jobId);\n+        if (jobResultInfo != null) {\n+            jobResultInfo.setException(exceptions.isEmpty() ? null : exceptions.get(0));\n+        }\n         notifyAll();\n     }\n ", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/dataset/DatasetDirectoryService.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/fb530551b5f5efd8d2dba350bf9958a40b4a63a7", "parent": "https://github.com/apache/asterixdb/commit/a672f4421761f27b8b9f3974855c40bc70e76a52", "message": "ASTERIXDB-1330: fix NPE in ExternalGroupByOperator.\n\nChange-Id: I2279221abbef1440179a31df180a24f6a642c641\nReviewed-on: https://asterix-gerrit.ics.uci.edu/687\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Ian Maxon <imaxon@apache.org>", "bug_id": "asterixdb_28", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/fb530551b5f5efd8d2dba350bf9958a40b4a63a7/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupBuildOperatorNodePushable.java", "blob_url": "https://github.com/apache/asterixdb/blob/fb530551b5f5efd8d2dba350bf9958a40b4a63a7/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupBuildOperatorNodePushable.java", "sha": "852a1601e0a252a6b11b91de79486fd398855959", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupBuildOperatorNodePushable.java?ref=fb530551b5f5efd8d2dba350bf9958a40b4a63a7", "patch": "@@ -71,7 +71,8 @@ public ExternalGroupBuildOperatorNodePushable(IHyracksTaskContext ctx, Object st\n         for (int i = 0; i < comparatorFactories.length; ++i) {\n             comparators[i] = comparatorFactories[i].createBinaryComparator();\n         }\n-        this.firstNormalizerComputer = firstNormalizerFactory.createNormalizedKeyComputer();\n+        this.firstNormalizerComputer = firstNormalizerFactory == null ? null\n+                : firstNormalizerFactory.createNormalizedKeyComputer();\n         this.spillableTableFactory = spillableTableFactory;\n         this.inRecordDescriptor = inRecordDescriptor;\n         this.outRecordDescriptor = outRecordDescriptor;", "filename": "hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupBuildOperatorNodePushable.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/fb530551b5f5efd8d2dba350bf9958a40b4a63a7/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupWriteOperatorNodePushable.java", "blob_url": "https://github.com/apache/asterixdb/blob/fb530551b5f5efd8d2dba350bf9958a40b4a63a7/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupWriteOperatorNodePushable.java", "sha": "0dbb06390677b2ac9b44f716181f4580eb2448b8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupWriteOperatorNodePushable.java?ref=fb530551b5f5efd8d2dba350bf9958a40b4a63a7", "patch": "@@ -64,7 +64,7 @@ public ExternalGroupWriteOperatorNodePushable(IHyracksTaskContext ctx, Object st\n         this.stateId = stateId;\n         this.spillableTableFactory = spillableTableFactory;\n         this.frameLimit = framesLimit;\n-        this.nmkComputer = nmkFactory.createNormalizedKeyComputer();\n+        this.nmkComputer = nmkFactory == null ? null : nmkFactory.createNormalizedKeyComputer();\n \n         this.partialAggRecordDesc = partialAggRecordDesc;\n         this.outRecordDesc = outRecordDesc;", "filename": "hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/group/external/ExternalGroupWriteOperatorNodePushable.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/86f3908ba93090c2546b6887db930d523864b639", "parent": "https://github.com/apache/asterixdb/commit/f0759c85b70d18fe9376cdc034ed9e70e1ec0c74", "message": "IFrameWriter.close() can be called if open() failed\n\nFix potential NPE in ResultWriterOperatorDescriptor should open() fail\nand close() be subsequently called\n\nChange-Id: I6f53258765719c30b132bf67680f280924b624be\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1832\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>", "bug_id": "asterixdb_29", "file": [{"additions": 10, "raw_url": "https://github.com/apache/asterixdb/raw/86f3908ba93090c2546b6887db930d523864b639/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/86f3908ba93090c2546b6887db930d523864b639/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java", "sha": "78417aceb30b0d968a62377ed39c0a7ba8e9bed2", "changes": 18, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java?ref=86f3908ba93090c2546b6887db930d523864b639", "patch": "@@ -117,15 +117,17 @@ public void fail() throws HyracksDataException {\n \n             @Override\n             public void close() throws HyracksDataException {\n-                try {\n-                    if (!failed && frameOutputStream.getTupleCount() > 0) {\n-                        frameOutputStream.flush(datasetPartitionWriter);\n+                if (datasetPartitionWriter != null) {\n+                    try {\n+                        if (!failed && frameOutputStream.getTupleCount() > 0) {\n+                            frameOutputStream.flush(datasetPartitionWriter);\n+                        }\n+                    } catch (Exception e) {\n+                        datasetPartitionWriter.fail();\n+                        throw e;\n+                    } finally {\n+                        datasetPartitionWriter.close();\n                     }\n-                } catch (Exception e) {\n-                    datasetPartitionWriter.fail();\n-                    throw e;\n-                } finally {\n-                    datasetPartitionWriter.close();\n                 }\n             }\n ", "filename": "hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/result/ResultWriterOperatorDescriptor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/eb199d3a91563968c35786bb9f2b8bbd9da7db16", "parent": "https://github.com/apache/asterixdb/commit/03e940a7781dbdbb654fe13ec7077aae74e1c416", "message": "ASTERIXDB-1754: fix NPE in CopyLimitDownRule.\n\nChange-Id: Ia9e26912a048c680aa9db7a12cd3933a7acbde37\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1399\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_30", "file": [{"additions": 38, "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp", "sha": "7eb1cd121f9cf536d8969dc7bad9173024a1f654", "changes": 38, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16", "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+\n+use test;\n+\n+create type CustomerType as\n+{\n+  cid : bigint\n+}\n+\n+create type OrderType as\n+{\n+  oid : bigint\n+}\n+\n+create external dataset Customers(CustomerType) using localfs((`path`=`asterix_nc1://data/nontagged/customerData.json`),(`format`=`adm`));\n+\n+create external dataset Orders(OrderType) using localfs((`path`=`asterix_nc1://data/nontagged/orderData.json`),(`format`=`adm`));\n+", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp"}, {"additions": 28, "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp", "sha": "74e50e39c45ea59982d2e9e5b6bbc6c8cd201c20", "changes": 28, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16", "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+USE test;\n+\n+SELECT c.name AS cust_name,\n+       c.age AS cust_age,\n+       o.total AS order_total\n+FROM Customers c, Orders o\n+WHERE c.cid = o.cid AND c.age != o.total\n+LIMIT 1\n+;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm", "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm", "sha": "c18fb3db01fbdf51c351031670cc1c4cfde34d28", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16", "patch": "@@ -0,0 +1 @@\n+{ \"cust_name\": \"Jodi Alex\", \"cust_age\": 19, \"order_total\": 7.206 }", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "bd3266ef31a133f65073f0b8a7df6ed0b8067995", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16", "patch": "@@ -1410,6 +1410,11 @@\n         <expected-error>Cannot resolve ambiguous alias reference for undefined identifier age</expected-error>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"custord\">\n+      <compilation-unit name=\"query-ASTERIXDB-1754\">\n+        <output-dir compare=\"Text\">query-ASTERIXDB-1754</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"custord\">\n       <compilation-unit name=\"load-test\">\n         <output-dir compare=\"Text\">load-test</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java", "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java", "sha": "372af26e2b4e54d8c212f62e071113fb6fb62871", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16", "patch": "@@ -103,6 +103,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n             limitCloneOp.setPhysicalOperator(new StreamLimitPOperator());\n             limitCloneOp.getInputs().add(new MutableObject<ILogicalOperator>(unsafeOp));\n             limitCloneOp.setExecutionMode(unsafeOp.getExecutionMode());\n+            OperatorPropertiesUtil.computeSchemaRecIfNull((AbstractLogicalOperator) unsafeOp);\n             limitCloneOp.recomputeSchema();\n             unsafeOpRef.setValue(limitCloneOp);\n             context.computeAndSetTypeEnvironmentForOperator(limitCloneOp);", "filename": "hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/05fedfc8c6ff0909137879a40b8a5dcf9cd13cdc", "parent": "https://github.com/apache/asterixdb/commit/ece0fd13262e39eb983e0a28d9c98eba0d909152", "message": "checkpoint: fixed a issue when introducing the HashMergeExcnahge but\nhave not compute its delivered property, which could cause a NPE when\nits delivered property by other operator.", "bug_id": "asterixdb_31", "file": [{"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/05fedfc8c6ff0909137879a40b8a5dcf9cd13cdc/algebricks/algebricks-rewriter/src/main/java/edu/uci/ics/hyracks/algebricks/rewriter/rules/IntroHashPartitionMergeExchange.java", "blob_url": "https://github.com/apache/asterixdb/blob/05fedfc8c6ff0909137879a40b8a5dcf9cd13cdc/algebricks/algebricks-rewriter/src/main/java/edu/uci/ics/hyracks/algebricks/rewriter/rules/IntroHashPartitionMergeExchange.java", "sha": "82e69702ca7b7414539780a3a954626c36cdc799", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/algebricks/algebricks-rewriter/src/main/java/edu/uci/ics/hyracks/algebricks/rewriter/rules/IntroHashPartitionMergeExchange.java?ref=05fedfc8c6ff0909137879a40b8a5dcf9cd13cdc", "patch": "@@ -28,6 +28,7 @@\n import edu.uci.ics.hyracks.algebricks.core.algebra.operators.physical.HashPartitionMergeExchangePOperator;\n import edu.uci.ics.hyracks.algebricks.core.algebra.operators.physical.SortMergeExchangePOperator;\n import edu.uci.ics.hyracks.algebricks.core.algebra.properties.OrderColumn;\n+import edu.uci.ics.hyracks.algebricks.core.algebra.util.OperatorPropertiesUtil;\n import edu.uci.ics.hyracks.algebricks.core.rewriter.base.IAlgebraicRewriteRule;\n \n public class IntroHashPartitionMergeExchange implements IAlgebraicRewriteRule {\n@@ -60,6 +61,7 @@ public boolean rewritePost(Mutable<ILogicalOperator> opRef, IOptimizationContext\n                 hpe.getDomain());\n         op1.setPhysicalOperator(hpme);\n         op1.getInputs().get(0).setValue(op2.getInputs().get(0).getValue());\n+        op1.computeDeliveredPhysicalProperties(context);\n         return true;\n     }\n ", "filename": "algebricks/algebricks-rewriter/src/main/java/edu/uci/ics/hyracks/algebricks/rewriter/rules/IntroHashPartitionMergeExchange.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "parent": "https://github.com/apache/asterixdb/commit/6c6479d0e3f3f774703c8e9afa28259d9bd78bf7", "message": "Cleanup Logging, Report Joined Nodes, Misc Cleanup\n\n- Minor refactoring of NodeControllerService startup\n- Cleanup logging in GlobalRecoveryManager / LifeCycleComponentManager\n- Enable TestExecutor to accept non-200 status codes\n- Use ExecutorService for GlobalRecovery thread\n- Eliminate NPE when metadata node goes down before global recovery\n  starts\n\nChange-Id: I87b6b45e1a0cdc7a8b77d80b4e603d927aa60b8a\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1706\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_32", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java", "sha": "bf7d5ebfa66547f29f4c653c2d0bd0e819fa3a1d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -123,7 +123,7 @@ public void start(IServiceContext serviceCtx, String[] args) throws Exception {\n                 .create(ClusterProperties.INSTANCE.getCluster(), repStrategy, ccServiceCtx);\n         ExternalLibraryUtils.setUpExternaLibraries(libraryManager, false);\n         componentProvider = new StorageComponentProvider();\n-        GlobalRecoveryManager.instantiate((HyracksConnection) getHcc(), componentProvider);\n+        GlobalRecoveryManager.instantiate(ccServiceCtx, getHcc(), componentProvider);\n         appCtx = new CcApplicationContext(ccServiceCtx, getHcc(), libraryManager, resourceIdManager,\n                 () -> MetadataManager.INSTANCE, GlobalRecoveryManager.instance(), ftStrategy,\n                 new ActiveLifecycleListener());", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java"}, {"additions": 126, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java", "sha": "1816a25292d317ac232f7790cd7bbc6f902bafad", "changes": 250, "status": "modified", "deletions": 124, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -45,7 +45,8 @@\n import org.apache.asterix.metadata.utils.ExternalIndexingOperations;\n import org.apache.asterix.metadata.utils.MetadataConstants;\n import org.apache.asterix.runtime.utils.ClusterStateManager;\n-import org.apache.hyracks.api.client.HyracksConnection;\n+import org.apache.hyracks.api.application.ICCServiceContext;\n+import org.apache.hyracks.api.client.IHyracksClientConnection;\n import org.apache.hyracks.api.job.JobId;\n import org.apache.hyracks.api.job.JobSpecification;\n \n@@ -55,10 +56,13 @@\n     private static GlobalRecoveryManager instance;\n     private static ClusterState state;\n     private final IStorageComponentProvider componentProvider;\n-    private HyracksConnection hcc;\n+    private final ICCServiceContext ccServiceCtx;\n+    private IHyracksClientConnection hcc;\n \n-    private GlobalRecoveryManager(HyracksConnection hcc, IStorageComponentProvider componentProvider) {\n+    private GlobalRecoveryManager(ICCServiceContext ccServiceCtx, IHyracksClientConnection hcc,\n+                                  IStorageComponentProvider componentProvider) {\n         setState(ClusterState.UNUSABLE);\n+        this.ccServiceCtx = ccServiceCtx;\n         this.hcc = hcc;\n         this.componentProvider = componentProvider;\n     }\n@@ -97,142 +101,140 @@ public void startGlobalRecovery(ICcApplicationContext appCtx) {\n         final ClusterState newState = ClusterStateManager.INSTANCE.getState();\n         boolean needToRecover = !newState.equals(state) && (newState == ClusterState.ACTIVE);\n         if (needToRecover) {\n-            Thread recoveryThread = new Thread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    LOGGER.info(\"Starting AsterixDB's Global Recovery\");\n-                    MetadataTransactionContext mdTxnCtx = null;\n-                    try {\n-                        Thread.sleep(4000);\n-                        MetadataManager.INSTANCE.init();\n-                        // Loop over datasets\n-                        mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                        List<Dataverse> dataverses = MetadataManager.INSTANCE.getDataverses(mdTxnCtx);\n-                        for (Dataverse dataverse : dataverses) {\n-                            if (!dataverse.getDataverseName().equals(MetadataConstants.METADATA_DATAVERSE_NAME)) {\n-                                MetadataProvider metadataProvider =\n-                                        new MetadataProvider(appCtx, dataverse, componentProvider);\n-                                try {\n-                                    List<Dataset> datasets = MetadataManager.INSTANCE.getDataverseDatasets(mdTxnCtx,\n-                                            dataverse.getDataverseName());\n-                                    for (Dataset dataset : datasets) {\n-                                        if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n-                                            // External dataset\n-                                            // Get indexes\n-                                            List<Index> indexes = MetadataManager.INSTANCE.getDatasetIndexes(mdTxnCtx,\n-                                                    dataset.getDataverseName(), dataset.getDatasetName());\n-                                            // Get the state of the dataset\n-                                            ExternalDatasetDetails dsd =\n-                                                    (ExternalDatasetDetails) dataset.getDatasetDetails();\n-                                            TransactionState datasetState = dsd.getState();\n-                                            if (!indexes.isEmpty()) {\n-                                                if (datasetState == TransactionState.BEGIN) {\n-                                                    List<ExternalFile> files = MetadataManager.INSTANCE\n-                                                            .getDatasetExternalFiles(mdTxnCtx, dataset);\n-                                                    // if persumed abort, roll backward\n-                                                    // 1. delete all pending files\n-                                                    for (ExternalFile file : files) {\n-                                                        if (file.getPendingOp() != ExternalFilePendingOp.NO_OP) {\n-                                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n-                                                        }\n-                                                    }\n-                                                }\n-                                                // 2. clean artifacts in NCs\n-                                                metadataProvider.setMetadataTxnContext(mdTxnCtx);\n-                                                JobSpecification jobSpec = ExternalIndexingOperations\n-                                                        .buildAbortOp(dataset, indexes, metadataProvider);\n-                                                executeHyracksJob(jobSpec);\n-                                                // 3. correct the dataset state\n-                                                ((ExternalDatasetDetails) dataset.getDatasetDetails())\n-                                                        .setState(TransactionState.COMMIT);\n-                                                MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n-                                                MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                                                mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                                            } else if (datasetState == TransactionState.READY_TO_COMMIT) {\n-                                                List<ExternalFile> files = MetadataManager.INSTANCE\n-                                                        .getDatasetExternalFiles(mdTxnCtx, dataset);\n-                                                // if ready to commit, roll forward\n-                                                // 1. commit indexes in NCs\n-                                                metadataProvider.setMetadataTxnContext(mdTxnCtx);\n-                                                JobSpecification jobSpec = ExternalIndexingOperations\n-                                                        .buildRecoverOp(dataset, indexes, metadataProvider);\n-                                                executeHyracksJob(jobSpec);\n-                                                // 2. add pending files in metadata\n-                                                for (ExternalFile file : files) {\n-                                                    if (file.getPendingOp() == ExternalFilePendingOp.ADD_OP) {\n-                                                        MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n-                                                        file.setPendingOp(ExternalFilePendingOp.NO_OP);\n-                                                        MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, file);\n-                                                    } else if (file.getPendingOp() == ExternalFilePendingOp.DROP_OP) {\n-                                                        // find original file\n-                                                        for (ExternalFile originalFile : files) {\n-                                                            if (originalFile.getFileName().equals(file.getFileName())) {\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        file);\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                                break;\n-                                                            }\n-                                                        }\n-                                                    } else if (file.getPendingOp() == ExternalFilePendingOp.APPEND_OP) {\n-                                                        // find original file\n-                                                        for (ExternalFile originalFile : files) {\n-                                                            if (originalFile.getFileName().equals(file.getFileName())) {\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        file);\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                                originalFile.setSize(file.getSize());\n-                                                                MetadataManager.INSTANCE.addExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                            }\n-                                                        }\n-                                                    }\n-                                                    // 3. correct the dataset state\n-                                                    ((ExternalDatasetDetails) dataset.getDatasetDetails())\n-                                                            .setState(TransactionState.COMMIT);\n-                                                    MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n-                                                    MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                                                    mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                                                }\n-                                            }\n-                                        }\n-                                    }\n-                                } finally {\n-                                    metadataProvider.getLocks().unlock();\n-                                }\n-                            }\n-                        }\n-                        MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                    } catch (Exception e) {\n-                        // This needs to be fixed <-- Needs to shutdown the system -->\n-                        /*\n-                         * Note: Throwing this illegal state exception will terminate this thread\n-                         * and feeds listeners will not be notified.\n-                         */\n-                        LOGGER.log(Level.SEVERE, \"Global recovery was not completed successfully: \", e);\n+            setState(newState);\n+            ccServiceCtx.getControllerService().getExecutor().submit(() -> {\n+                LOGGER.info(\"Starting Global Recovery\");\n+                MetadataTransactionContext mdTxnCtx = null;\n+                try {\n+                    MetadataManager.INSTANCE.init();\n+                    // Loop over datasets\n+                    mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                    for (Dataverse dataverse : MetadataManager.INSTANCE.getDataverses(mdTxnCtx)) {\n+                        mdTxnCtx = recoverDataset(appCtx, mdTxnCtx, dataverse);\n+                    }\n+                    MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                } catch (Exception e) {\n+                    // This needs to be fixed <-- Needs to shutdown the system -->\n+                    /*\n+                     * Note: Throwing this illegal state exception will terminate this thread\n+                     * and feeds listeners will not be notified.\n+                     */\n+                    LOGGER.log(Level.SEVERE, \"Global recovery was not completed successfully: \", e);\n+                    if (mdTxnCtx != null) {\n                         try {\n                             MetadataManager.INSTANCE.abortTransaction(mdTxnCtx);\n                         } catch (Exception e1) {\n                             LOGGER.log(Level.SEVERE, \"Exception in aborting\", e1);\n+                            e1.addSuppressed(e);\n                             throw new IllegalStateException(e1);\n                         }\n                     }\n-                    ClusterStateManager.INSTANCE.setGlobalRecoveryCompleted(true);\n-                    LOGGER.info(\"Global Recovery Completed\");\n                 }\n-            }, \"RecoveryThread\");\n-            setState(newState);\n-            recoveryThread.start();\n+                ClusterStateManager.INSTANCE.setGlobalRecoveryCompleted(true);\n+                LOGGER.info(\"Global Recovery Completed\");\n+            });\n+        }\n+    }\n+\n+    private MetadataTransactionContext recoverDataset(ICcApplicationContext appCtx, MetadataTransactionContext mdTxnCtx,\n+                                                      Dataverse dataverse)\n+            throws Exception {\n+        if (!dataverse.getDataverseName().equals(MetadataConstants.METADATA_DATAVERSE_NAME)) {\n+            MetadataProvider metadataProvider = new MetadataProvider(appCtx, dataverse, componentProvider);\n+            try {\n+                List<Dataset> datasets = MetadataManager.INSTANCE.getDataverseDatasets(mdTxnCtx,\n+                        dataverse.getDataverseName());\n+                for (Dataset dataset : datasets) {\n+                    if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n+                        // External dataset\n+                        // Get indexes\n+                        List<Index> indexes = MetadataManager.INSTANCE.getDatasetIndexes(mdTxnCtx,\n+                                dataset.getDataverseName(), dataset.getDatasetName());\n+                        // Get the state of the dataset\n+                        ExternalDatasetDetails dsd = (ExternalDatasetDetails) dataset.getDatasetDetails();\n+                        TransactionState datasetState = dsd.getState();\n+                        if (!indexes.isEmpty()) {\n+                            if (datasetState == TransactionState.BEGIN) {\n+                                List<ExternalFile> files = MetadataManager.INSTANCE.getDatasetExternalFiles(mdTxnCtx,\n+                                        dataset);\n+                                // if persumed abort, roll backward\n+                                // 1. delete all pending files\n+                                for (ExternalFile file : files) {\n+                                    if (file.getPendingOp() != ExternalFilePendingOp.NO_OP) {\n+                                        MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                    }\n+                                }\n+                            }\n+                            // 2. clean artifacts in NCs\n+                            metadataProvider.setMetadataTxnContext(mdTxnCtx);\n+                            JobSpecification jobSpec = ExternalIndexingOperations.buildAbortOp(dataset, indexes,\n+                                    metadataProvider);\n+                            executeHyracksJob(jobSpec);\n+                            // 3. correct the dataset state\n+                            ((ExternalDatasetDetails) dataset.getDatasetDetails()).setState(TransactionState.COMMIT);\n+                            MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n+                            MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                            mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                        } else if (datasetState == TransactionState.READY_TO_COMMIT) {\n+                            List<ExternalFile> files = MetadataManager.INSTANCE.getDatasetExternalFiles(mdTxnCtx,\n+                                    dataset);\n+                            // if ready to commit, roll forward\n+                            // 1. commit indexes in NCs\n+                            metadataProvider.setMetadataTxnContext(mdTxnCtx);\n+                            JobSpecification jobSpec = ExternalIndexingOperations.buildRecoverOp(dataset, indexes,\n+                                    metadataProvider);\n+                            executeHyracksJob(jobSpec);\n+                            // 2. add pending files in metadata\n+                            for (ExternalFile file : files) {\n+                                if (file.getPendingOp() == ExternalFilePendingOp.ADD_OP) {\n+                                    MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                    file.setPendingOp(ExternalFilePendingOp.NO_OP);\n+                                    MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, file);\n+                                } else if (file.getPendingOp() == ExternalFilePendingOp.DROP_OP) {\n+                                    // find original file\n+                                    for (ExternalFile originalFile : files) {\n+                                        if (originalFile.getFileName().equals(file.getFileName())) {\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, originalFile);\n+                                            break;\n+                                        }\n+                                    }\n+                                } else if (file.getPendingOp() == ExternalFilePendingOp.APPEND_OP) {\n+                                    // find original file\n+                                    for (ExternalFile originalFile : files) {\n+                                        if (originalFile.getFileName().equals(file.getFileName())) {\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, originalFile);\n+                                            originalFile.setSize(file.getSize());\n+                                            MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, originalFile);\n+                                        }\n+                                    }\n+                                }\n+                                // 3. correct the dataset state\n+                                ((ExternalDatasetDetails) dataset.getDatasetDetails())\n+                                        .setState(TransactionState.COMMIT);\n+                                MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n+                                MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                                mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                            }\n+                        }\n+                    }\n+                }\n+            } finally {\n+                metadataProvider.getLocks().unlock();\n+            }\n         }\n+\n+        return mdTxnCtx;\n     }\n \n     public static GlobalRecoveryManager instance() {\n         return instance;\n     }\n \n-    public static synchronized void instantiate(HyracksConnection hcc, IStorageComponentProvider componentProvider) {\n-        instance = new GlobalRecoveryManager(hcc, componentProvider);\n+    public static synchronized void instantiate(ICCServiceContext ccServiceCtx, IHyracksClientConnection hcc,\n+                                                IStorageComponentProvider componentProvider) {\n+        instance = new GlobalRecoveryManager(ccServiceCtx, hcc, componentProvider);\n     }\n \n     public static synchronized void setState(ClusterState state) {", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java"}, {"additions": 16, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java", "sha": "e88f64716a95b13c21ca2a1eeb347c7dbc89374f", "changes": 20, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -45,6 +45,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.regex.Matcher;\n@@ -404,7 +405,12 @@ private static void writeOutputToFile(File actualFile, InputStream resultStream)\n     }\n \n     protected HttpResponse executeAndCheckHttpRequest(HttpUriRequest method) throws Exception {\n-        return checkResponse(executeHttpRequest(method));\n+        return checkResponse(executeHttpRequest(method), code -> code == HttpStatus.SC_OK);\n+    }\n+\n+    protected HttpResponse executeAndCheckHttpRequest(HttpUriRequest method, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n+        return checkResponse(executeHttpRequest(method), responseCodeValidator);\n     }\n \n     protected HttpResponse executeHttpRequest(HttpUriRequest method) throws Exception {\n@@ -418,8 +424,9 @@ protected HttpResponse executeHttpRequest(HttpUriRequest method) throws Exceptio\n         }\n     }\n \n-    protected HttpResponse checkResponse(HttpResponse httpResponse) throws Exception {\n-        if (httpResponse.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n+    protected HttpResponse checkResponse(HttpResponse httpResponse, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n+        if (!responseCodeValidator.test(httpResponse.getStatusLine().getStatusCode())) {\n             String errorBody = EntityUtils.toString(httpResponse.getEntity());\n             String exceptionMsg;\n             try {\n@@ -582,8 +589,13 @@ public InputStream executeJSONGet(OutputFormat fmt, URI uri) throws Exception {\n     }\n \n     public InputStream executeJSONPost(OutputFormat fmt, URI uri) throws Exception {\n+        return executeJSONPost(fmt, uri, code -> code == HttpStatus.SC_OK);\n+    }\n+\n+    public InputStream executeJSONPost(OutputFormat fmt, URI uri, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n         HttpUriRequest request = constructPostMethod(uri, fmt, new ArrayList<>());\n-        HttpResponse response = executeAndCheckHttpRequest(request);\n+        HttpResponse response = executeAndCheckHttpRequest(request, responseCodeValidator);\n         return response.getEntity().getContent();\n     }\n ", "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java"}, {"additions": 17, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java", "sha": "48937f8d9da33688e42a8fff76e7cfc24e001a64", "changes": 29, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -26,6 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.SortedMap;\n+import java.util.TreeSet;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -41,6 +42,7 @@\n import org.apache.hyracks.api.config.IOption;\n import org.apache.hyracks.api.exceptions.HyracksDataException;\n import org.apache.hyracks.api.exceptions.HyracksException;\n+import org.apache.hyracks.control.cc.ClusterControllerService;\n import org.apache.hyracks.control.common.controllers.NCConfig;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -303,24 +305,27 @@ public synchronized ObjectNode getClusterStateDescription() {\n         stateDescription.put(\"metadata_node\", currentMetadataNode);\n         ArrayNode ncs = om.createArrayNode();\n         stateDescription.set(\"ncs\", ncs);\n-        for (Map.Entry<String, ClusterPartition[]> entry : node2PartitionsMap.entrySet()) {\n+        for (String node : new TreeSet<>(((ClusterControllerService) appCtx.getServiceContext().getControllerService())\n+                .getNodeManager().getAllNodeIds())) {\n             ObjectNode nodeJSON = om.createObjectNode();\n-            nodeJSON.put(\"node_id\", entry.getKey());\n+            nodeJSON.put(\"node_id\", node);\n             boolean allActive = true;\n             boolean anyActive = false;\n             Set<Map<String, Object>> partitions = new HashSet<>();\n-            for (ClusterPartition part : entry.getValue()) {\n-                HashMap<String, Object> partition = new HashMap<>();\n-                partition.put(\"partition_id\", \"partition_\" + part.getPartitionId());\n-                partition.put(\"active\", part.isActive());\n-                partitions.add(partition);\n-                allActive = allActive && part.isActive();\n-                if (allActive) {\n-                    anyActive = true;\n+            if (node2PartitionsMap.containsKey(node)) {\n+                for (ClusterPartition part : node2PartitionsMap.get(node)) {\n+                    HashMap<String, Object> partition = new HashMap<>();\n+                    partition.put(\"partition_id\", \"partition_\" + part.getPartitionId());\n+                    partition.put(\"active\", part.isActive());\n+                    partitions.add(partition);\n+                    allActive = allActive && part.isActive();\n+                    if (allActive) {\n+                        anyActive = true;\n+                    }\n                 }\n             }\n-            nodeJSON.put(\"state\", failedNodes.contains(entry.getKey()) ? \"FAILED\"\n-                    : allActive ? \"ACTIVE\" : anyActive ? \"PARTIALLY_ACTIVE\" : \"INACTIVE\");\n+            nodeJSON.put(\"state\", failedNodes.contains(node) ? \"FAILED\"\n+                    : allActive && anyActive ? \"ACTIVE\" : anyActive ? \"PARTIALLY_ACTIVE\" : \"INACTIVE\");\n             nodeJSON.putPOJO(\"partitions\", partitions);\n             ncs.add(nodeJSON);\n         }", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java", "sha": "94ebcfe01cddf021d02635393f147a6af251d679", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.hyracks.api.context.ICCContext;\n import org.apache.hyracks.api.job.IJobLifecycleListener;\n+import org.apache.hyracks.api.service.IControllerService;\n \n /**\n  * Service Context at the Cluster Controller for an application.", "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java"}, {"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java", "sha": "4674f9a1b6eb948137cf2593445e8d6d1a7475d7", "changes": 35, "status": "modified", "deletions": 24, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -43,24 +43,19 @@\n     private boolean configured;\n \n     public LifeCycleComponentManager() {\n-        components = new ArrayList<ILifeCycleComponent>();\n+        components = new ArrayList<>();\n         stopInitiated = false;\n         configured = false;\n         stopped = false;\n     }\n \n     @Override\n     public void uncaughtException(Thread t, Throwable e) {\n-        if (LOGGER.isLoggable(Level.SEVERE)) {\n-            LOGGER.severe(\"Uncaught Exception from thread \" + t.getName() + \" message: \" + e.getMessage());\n-            e.printStackTrace();\n-        }\n+        LOGGER.log(Level.SEVERE, \"Uncaught Exception from thread \" + t.getName(), e);\n         try {\n             stopAll(true);\n         } catch (IOException e1) {\n-            if (LOGGER.isLoggable(Level.SEVERE)) {\n-                LOGGER.severe(\"Exception in stopping Asterix. \" + e1.getMessage());\n-            }\n+            LOGGER.log(Level.SEVERE, \"Exception in stopping instance\", e1);\n         }\n     }\n \n@@ -79,31 +74,25 @@ public void startAll() {\n     @Override\n     public synchronized void stopAll(boolean dumpState) throws IOException {\n         if (LOGGER.isLoggable(Level.INFO)) {\n-            LOGGER.severe(\"Attempting to stop \" + this);\n+            LOGGER.info(\"Attempting to stop \" + this);\n         }\n         if (stopped) {\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.severe(\"Lifecycle management was already stopped\");\n-            }\n+            LOGGER.info(\"Lifecycle management was already stopped\");\n             return;\n         }\n         if (stopInitiated) {\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.severe(\"Stop already in progress\");\n-            }\n+            LOGGER.info(\"Stop already in progress\");\n             return;\n         }\n         if (!configured) {\n             if (LOGGER.isLoggable(Level.SEVERE)) {\n-                LOGGER.severe(\"Lifecycle management not configured\" + this);\n+                LOGGER.severe(\"Lifecycle management not configured \" + this);\n             }\n             return;\n         }\n \n         stopInitiated = true;\n-        if (LOGGER.isLoggable(Level.SEVERE)) {\n-            LOGGER.severe(\"Stopping Asterix instance\");\n-        }\n+        LOGGER.severe(\"Stopping instance\");\n \n         FileOutputStream componentDumpStream = null;\n         String componentDumpPath = null;\n@@ -120,14 +109,12 @@ public synchronized void stopAll(boolean dumpState) throws IOException {\n                     componentDumpStream = new FileOutputStream(f);\n                 }\n                 if (LOGGER.isLoggable(Level.INFO)) {\n-                    LOGGER.info(\"Stopping component instance \" + component.getClass().getName() + \" dump state \"\n-                            + dumpState + \" dump path \" + componentDumpPath);\n+                    LOGGER.info(\"Stopping component instance \" + component.getClass().getName() + \"; dump state: \"\n+                            + dumpState + \", dump path: \" + componentDumpPath);\n                 }\n                 component.stop(dumpState, componentDumpStream);\n             } catch (Exception e) {\n-                if (LOGGER.isLoggable(Level.SEVERE)) {\n-                    LOGGER.severe(\"Exception in stopping component \" + component.getClass().getName() + e.getMessage());\n-                }\n+                LOGGER.log(Level.SEVERE, \"Exception in stopping component \" + component.getClass().getName(), e);\n             } finally {\n                 if (componentDumpStream != null) {\n                     componentDumpStream.close();", "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java", "sha": "11df079a7dbe721077b1160813746e97cccac95d", "changes": 5, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -44,12 +44,7 @@ public static void main(String[] args) {\n             application.registerConfig(configManager);\n             NCConfig ncConfig = new NCConfig(nodeId, configManager);\n             final NodeControllerService ncService = new NodeControllerService(ncConfig, application);\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.info(\"Setting uncaught exception handler \" + ncService.getLifeCycleComponentManager());\n-            }\n-            Thread.currentThread().setUncaughtExceptionHandler(ncService.getLifeCycleComponentManager());\n             ncService.start();\n-            Runtime.getRuntime().addShutdownHook(new NCShutdownHook(ncService));\n             while (true) {\n                 Thread.sleep(10000);\n             }", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java", "sha": "be24dbe8f462581b6e2ce494d4b0ca6f0c9bc85f", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5", "patch": "@@ -256,6 +256,11 @@ private void init() throws Exception {\n     @Override\n     public void start() throws Exception {\n         LOGGER.log(Level.INFO, \"Starting NodeControllerService\");\n+        if (LOGGER.isLoggable(Level.INFO)) {\n+            LOGGER.info(\"Setting uncaught exception handler \" + getLifeCycleComponentManager());\n+        }\n+        Thread.currentThread().setUncaughtExceptionHandler(getLifeCycleComponentManager());\n+        Runtime.getRuntime().addShutdownHook(new NCShutdownHook(this));\n         ipc = new IPCSystem(new InetSocketAddress(ncConfig.getClusterListenAddress(), ncConfig.getClusterListenPort()),\n                 new NodeControllerIPCI(this), new CCNCFunctions.SerializerDeserializer());\n         ipc.start();", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/c9571fc089821a7967635ff999d4b38ec38ad48e", "parent": "https://github.com/apache/asterixdb/commit/b58572a9c8cf42b3a66af2c708de35e4a7b31ba2", "message": "Fix NULL/MISSING field value handing in Java UDF\n\nAdd NULL/MISSING value support in Java UDF. This fixed the NPE when there\nis a NULL/MISSING field in a record.\n\nChange-Id: Icf110b2f5b3658847967f5ee7163fb2e47713813\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1695\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>", "bug_id": "asterixdb_33", "file": [{"additions": 8, "raw_url": "https://github.com/apache/asterixdb/raw/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/JTypeObjectFactory.java", "blob_url": "https://github.com/apache/asterixdb/blob/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/JTypeObjectFactory.java", "sha": "fb9fd7983d6c50513c3ea14d9b4e0e0f8c93870e", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/JTypeObjectFactory.java?ref=c9571fc089821a7967635ff999d4b38ec38ad48e", "patch": "@@ -19,6 +19,7 @@\n package org.apache.asterix.external.library;\n \n import org.apache.asterix.external.api.IJObject;\n+import org.apache.asterix.external.library.java.JObjects;\n import org.apache.asterix.external.library.java.JObjects.JBoolean;\n import org.apache.asterix.external.library.java.JObjects.JCircle;\n import org.apache.asterix.external.library.java.JObjects.JDate;\n@@ -46,6 +47,7 @@\n import org.apache.asterix.om.types.IAType;\n import org.apache.asterix.om.util.container.IObjectFactory;\n \n+\n public class JTypeObjectFactory implements IObjectFactory<IJObject, IAType> {\n \n     public static final JTypeObjectFactory INSTANCE = new JTypeObjectFactory();\n@@ -108,6 +110,12 @@ public IJObject create(IAType type) {\n             case INT64:\n                 retValue = new JLong(0);\n                 break;\n+            case NULL:\n+                retValue = JObjects.JNull.INSTANCE;\n+                break;\n+            case MISSING:\n+                retValue = JObjects.JMissing.INSTANCE;\n+                break;\n             case ORDEREDLIST:\n                 AOrderedListType ot = (AOrderedListType) type;\n                 IAType orderedItemType = ot.getItemType();", "filename": "asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/JTypeObjectFactory.java"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java", "blob_url": "https://github.com/apache/asterixdb/blob/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java", "sha": "a35bc69831ff9d994aafa6d2e6f4b5a6fc240578", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java?ref=c9571fc089821a7967635ff999d4b38ec38ad48e", "patch": "@@ -140,6 +140,12 @@ public static IJObjectAccessor createFlatJObjectAccessor(ATypeTag aTypeTag) {\n             case DURATION:\n                 accessor = new JDurationAccessor();\n                 break;\n+            case NULL:\n+                accessor = new JNullAccessor();\n+                break;\n+            case MISSING:\n+                accessor = new JMissingAccessor();\n+                break;\n             default:\n                 break;\n         }\n@@ -189,6 +195,26 @@ public IJObject access(IVisitablePointable pointable, IObjectPool<IJObject, IATy\n         }\n     }\n \n+    public static class JNullAccessor implements IJObjectAccessor {\n+\n+        @Override\n+        public IJObject access(IVisitablePointable pointable, IObjectPool<IJObject, IAType> objPool)\n+                throws HyracksDataException {\n+            IJObject jObject = objPool.allocate(BuiltinType.ANULL);\n+            return jObject;\n+        }\n+    }\n+\n+    public static class JMissingAccessor implements  IJObjectAccessor {\n+\n+        @Override\n+        public IJObject access(IVisitablePointable pointable, IObjectPool<IJObject, IAType> objPool)\n+                throws HyracksDataException {\n+            IJObject jObject = objPool.allocate(BuiltinType.AMISSING);\n+            return jObject;\n+        }\n+    }\n+\n     public static class JInt64Accessor implements IJObjectAccessor {\n \n         @Override", "filename": "asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java"}, {"additions": 32, "raw_url": "https://github.com/apache/asterixdb/raw/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjects.java", "blob_url": "https://github.com/apache/asterixdb/blob/c9571fc089821a7967635ff999d4b38ec38ad48e/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjects.java", "sha": "859a327ddf42a8976d6c7f8f31983b3b3b2a56b5", "changes": 33, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjects.java?ref=c9571fc089821a7967635ff999d4b38ec38ad48e", "patch": "@@ -61,6 +61,7 @@\n import org.apache.asterix.om.base.AInt32;\n import org.apache.asterix.om.base.AInt64;\n import org.apache.asterix.om.base.AInt8;\n+import org.apache.asterix.om.base.AMissing;\n import org.apache.asterix.om.base.AMutableCircle;\n import org.apache.asterix.om.base.AMutableDate;\n import org.apache.asterix.om.base.AMutableDateTime;\n@@ -144,7 +145,7 @@ public IAObject getIAObject() {\n         public void serialize(DataOutput dataOutput, boolean writeTypeTag) throws HyracksDataException {\n             if (writeTypeTag) {\n                 try {\n-                    dataOutput.writeByte(ATypeTag.SERIALIZED_MISSING_TYPE_TAG);\n+                    dataOutput.writeByte(ATypeTag.SERIALIZED_NULL_TYPE_TAG);\n                 } catch (IOException e) {\n                     throw new HyracksDataException(e);\n                 }\n@@ -157,6 +158,36 @@ public void reset() {\n \n     }\n \n+    public static class JMissing implements IJObject {\n+        public final static JMissing INSTANCE = new JMissing();\n+\n+        @Override\n+        public ATypeTag getTypeTag() {\n+            return ATypeTag.MISSING;\n+        }\n+\n+        @Override\n+        public IAObject getIAObject() {\n+            return AMissing.MISSING;\n+        }\n+\n+        @Override\n+        public void serialize(DataOutput dataOutput, boolean writeTypeTag) throws HyracksDataException {\n+            if (writeTypeTag) {\n+                try {\n+                    dataOutput.writeByte(ATypeTag.SERIALIZED_MISSING_TYPE_TAG);\n+                } catch (IOException e) {\n+                    throw new HyracksDataException(e);\n+                }\n+            }\n+        }\n+\n+        @Override\n+        public void reset() throws HyracksDataException {\n+            // no op\n+        }\n+    }\n+\n     public static final class JByte extends JObject {\n \n         public JByte(byte value) {", "filename": "asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjects.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/f6df6e4a0776beca227a5383e46405aefb27f3bb", "parent": "https://github.com/apache/asterixdb/commit/5b857450ba71f42b46aabbf91240731bd5ed6020", "message": "Fixed NPE on fail when other failures occur\n\ngit-svn-id: https://hyracks.googlecode.com/svn/branches/hyracks_dev_next@1215 123451ca-8445-de46-9d55-352943316053", "bug_id": "asterixdb_34", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/f6df6e4a0776beca227a5383e46405aefb27f3bb/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/partitions/PipelinedPartition.java", "blob_url": "https://github.com/apache/asterixdb/blob/f6df6e4a0776beca227a5383e46405aefb27f3bb/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/partitions/PipelinedPartition.java", "sha": "92dc0b2efc8d22c3928cfc451182b7f90d35df14", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/partitions/PipelinedPartition.java?ref=f6df6e4a0776beca227a5383e46405aefb27f3bb", "patch": "@@ -91,7 +91,9 @@ private void ensureConnected() throws HyracksDataException {\n     public void fail() throws HyracksDataException {\n         ensureConnected();\n         failed = true;\n-        delegate.fail();\n+        if (delegate != null) {\n+            delegate.fail();\n+        }\n     }\n \n     @Override", "filename": "hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/partitions/PipelinedPartition.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1", "parent": "https://github.com/apache/asterixdb/commit/78a50b9794230245b1d8c1d13a7421290cc18742", "message": "Fixed NPE in LSMBTreeUpdateTest.\n\ngit-svn-id: https://hyracks.googlecode.com/svn/branches/hyracks_lsm_tree@1184 123451ca-8445-de46-9d55-352943316053", "bug_id": "asterixdb_35", "file": [{"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1/hyracks-tests/hyracks-storage-am-lsm-btree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/btree/util/LSMBTreeTestHarness.java", "blob_url": "https://github.com/apache/asterixdb/blob/2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1/hyracks-tests/hyracks-storage-am-lsm-btree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/btree/util/LSMBTreeTestHarness.java", "sha": "02d821be53136273f75f383ae5c975b193ed9e11", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-tests/hyracks-storage-am-lsm-btree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/btree/util/LSMBTreeTestHarness.java?ref=2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1", "patch": "@@ -45,7 +45,6 @@\n     private static final long RANDOM_SEED = 50;\n     private static final int DEFAULT_DISK_PAGE_SIZE = 256;\n     private static final int DEFAULT_DISK_NUM_PAGES = 1000;\n-    //private static final int DEFAULT_DISK_NUM_PAGES = 100;\n     private static final int DEFAULT_DISK_MAX_OPEN_FILES = 200;\n     private static final int DEFAULT_MEM_PAGE_SIZE = 256;\n     private static final int DEFAULT_MEM_NUM_PAGES = 100;\n@@ -113,9 +112,11 @@ public boolean accept(File dir, String name) {\n                 }\n             };\n             String[] files = dir.list(filter);\n-            for (String fileName : files) {\n-                File file = new File(dir.getPath() + File.separator + fileName);\n-                file.delete();\n+            if (files != null) {\n+                for (String fileName : files) {\n+                    File file = new File(dir.getPath() + File.separator + fileName);\n+                    file.delete();\n+                }\n             }\n             dir.delete();\n         }", "filename": "hyracks-tests/hyracks-storage-am-lsm-btree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/btree/util/LSMBTreeTestHarness.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1/hyracks-tests/hyracks-storage-am-lsm-rtree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/rtree/util/LSMRTreeTestHarness.java", "blob_url": "https://github.com/apache/asterixdb/blob/2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1/hyracks-tests/hyracks-storage-am-lsm-rtree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/rtree/util/LSMRTreeTestHarness.java", "sha": "23ad4385966ad90d2552b9ab327a2c9037160e37", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-tests/hyracks-storage-am-lsm-rtree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/rtree/util/LSMRTreeTestHarness.java?ref=2fc93e5609ef648e083e8fcb3b7ac1c29f149ae1", "patch": "@@ -111,9 +111,11 @@ public boolean accept(File dir, String name) {\n                 }\n             };\n             String[] files = dir.list(filter);\n-            for (String fileName : files) {\n-                File file = new File(dir.getPath() + File.separator + fileName);\n-                file.delete();\n+            if (files != null) {\n+            \tfor (String fileName : files) {\n+            \t\tFile file = new File(dir.getPath() + File.separator + fileName);\n+            \t\tfile.delete();\n+            \t}\n             }\n             dir.delete();\n         }", "filename": "hyracks-tests/hyracks-storage-am-lsm-rtree-test/src/test/java/edu/uci/ics/hyracks/storage/am/lsm/rtree/util/LSMRTreeTestHarness.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "parent": "https://github.com/apache/asterixdb/commit/16f9be39731b880a40a078745c91704a7a78e067", "message": "Fixed NPE in Stagelet Completion. Added success flag to finishJoblet() call\n\ngit-svn-id: https://hyracks.googlecode.com/svn/trunk@577 123451ca-8445-de46-9d55-352943316053", "bug_id": "asterixdb_36", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/control/INodeController.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/control/INodeController.java", "sha": "a90eaec401bb8f60ba57291f8a73e9f267ffa8b7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/control/INodeController.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -43,7 +43,7 @@ public void initializeJobletPhase2(String appName, UUID jobId, byte[] plan, UUID\n \n     public void abortJoblet(UUID jobId, int attempt) throws Exception;\n \n-    public void cleanUpJob(UUID jobId) throws Exception;\n+    public void cleanUpJob(UUID jobId, boolean success) throws Exception;\n \n     public void startStage(UUID jobId, UUID stageId) throws Exception;\n ", "filename": "hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/control/INodeController.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/job/IJobletEventListener.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/job/IJobletEventListener.java", "sha": "4827c258bcc0f84c17af0417725d87793721a7c7", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/job/IJobletEventListener.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -17,5 +17,5 @@\n public interface IJobletEventListener {\n     public void jobletStart();\n \n-    public void jobletFinish();\n+    public void jobletFinish(boolean success);\n }\n\\ No newline at end of file", "filename": "hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/job/IJobletEventListener.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/JobCleanupEvent.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/JobCleanupEvent.java", "sha": "9ec8760aa8e58923b3cfd4d5108593b854e22a7f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/JobCleanupEvent.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -49,7 +49,7 @@ public void run() {\n         final JobCompleteNotifier[] jcns = new JobCompleteNotifier[targetNodes.size()];\n         int i = 0;\n         for (String n : targetNodes) {\n-            jcns[i++] = new JobCompleteNotifier(n, jobId);\n+            jcns[i++] = new JobCompleteNotifier(n, jobId, status == JobStatus.TERMINATED);\n         }\n         ccs.getExecutor().execute(new Runnable() {\n             @Override", "filename": "hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/JobCleanupEvent.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/StageletFailureEvent.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/StageletFailureEvent.java", "sha": "8742ff3acb015d85255f7fbe9b356b619b18e421", "changes": 9, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/StageletFailureEvent.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -30,16 +30,12 @@\n public class StageletFailureEvent implements Runnable {\n     private final ClusterControllerService ccs;\n     private final UUID jobId;\n-    private final UUID stageId;\n     private final int attempt;\n-    private final String nodeId;\n \n     public StageletFailureEvent(ClusterControllerService ccs, UUID jobId, UUID stageId, int attempt, String nodeId) {\n         this.ccs = ccs;\n         this.jobId = jobId;\n-        this.stageId = stageId;\n         this.attempt = attempt;\n-        this.nodeId = nodeId;\n     }\n \n     @Override\n@@ -50,7 +46,10 @@ public void run() {\n         final Set<String> targetNodes = new HashSet<String>(ja.getParticipatingNodeIds());\n         Map<String, NodeControllerState> nodeMap = new HashMap<String, NodeControllerState>();\n         for (String nodeId : targetNodes) {\n-            nodeMap.get(nodeId).getActiveJobIds().remove(jobId);\n+            NodeControllerState ncState = nodeMap.get(nodeId);\n+            if (ncState != null) {\n+                ncState.getActiveJobIds().remove(jobId);\n+            }\n         }\n         ccs.getExecutor().execute(new Runnable() {\n             @Override", "filename": "hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/job/manager/events/StageletFailureEvent.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/remote/ops/JobCompleteNotifier.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/remote/ops/JobCompleteNotifier.java", "sha": "563e883f7b30dc8144e9c0fd8f158df3e259f714", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/remote/ops/JobCompleteNotifier.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -22,15 +22,17 @@\n public class JobCompleteNotifier implements RemoteOp<Void> {\n     private String nodeId;\n     private UUID jobId;\n+    private boolean status;\n \n-    public JobCompleteNotifier(String nodeId, UUID jobId) {\n+    public JobCompleteNotifier(String nodeId, UUID jobId, boolean status) {\n         this.nodeId = nodeId;\n         this.jobId = jobId;\n+        this.status = status;\n     }\n \n     @Override\n     public Void execute(INodeController node) throws Exception {\n-        node.cleanUpJob(jobId);\n+        node.cleanUpJob(jobId, status);\n         return null;\n     }\n ", "filename": "hyracks/hyracks-control-cc/src/main/java/edu/uci/ics/hyracks/control/cc/remote/ops/JobCompleteNotifier.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/NodeControllerService.java", "blob_url": "https://github.com/apache/asterixdb/blob/769cf65be04bcc128c8da47a03dd7cb8524b4ec1/hyracks/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/NodeControllerService.java", "sha": "163d79214302591599eadb2fa55ca3c8fbf117b7", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/NodeControllerService.java?ref=769cf65be04bcc128c8da47a03dd7cb8524b4ec1", "patch": "@@ -466,15 +466,15 @@ public Executor getExecutor() {\n     }\n \n     @Override\n-    public void cleanUpJob(UUID jobId) throws Exception {\n+    public void cleanUpJob(UUID jobId, boolean success) throws Exception {\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"Cleaning up after job: \" + jobId);\n         }\n         Joblet joblet = jobletMap.remove(jobId);\n         if (joblet != null) {\n             IJobletEventListener listener = joblet.getJobletEventListener();\n             if (listener != null) {\n-                listener.jobletFinish();\n+                listener.jobletFinish(success);\n             }\n             joblet.close();\n         }", "filename": "hyracks/hyracks-control-nc/src/main/java/edu/uci/ics/hyracks/control/nc/NodeControllerService.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/03e44a5735d2891e67c0ba7e8e01140de98fc1c1", "parent": "https://github.com/apache/asterixdb/commit/4d7899dd842983e76f51e1d6803de77cba8b4f11", "message": "Workaround JDK-8080094\n\nNPE enountered if http://<server>:19001/webui is requested\n\nChange-Id: I08b29ec0a219bbcba67cd433f2daea4e67fe5ca9\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1280\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>", "bug_id": "asterixdb_37", "file": [{"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/03e44a5735d2891e67c0ba7e8e01140de98fc1c1/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/APIServlet.java", "blob_url": "https://github.com/apache/asterixdb/blob/03e44a5735d2891e67c0ba7e8e01140de98fc1c1/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/APIServlet.java", "sha": "4e9bb253f84768e4b2baf69135fde88f3f549b8f", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/APIServlet.java?ref=03e44a5735d2891e67c0ba7e8e01140de98fc1c1", "patch": "@@ -177,7 +177,17 @@ public void doGet(HttpServletRequest request, HttpServletResponse response) thro\n             InputStreamReader isr = new InputStreamReader(is);\n             StringBuilder sb = new StringBuilder();\n             BufferedReader br = new BufferedReader(isr);\n-            String line = br.readLine();\n+            String line;\n+            try {\n+                line = br.readLine();\n+            } catch (NullPointerException e) {\n+                LOGGER.log(Level.WARNING, \"NPE reading resource \" + resourcePath\n+                        + \", assuming JDK-8080094; returning 404\", e);\n+                // workaround lame JDK bug where a broken InputStream is returned in case the resourcePath is a\n+                // directory; see https://bugs.openjdk.java.net/browse/JDK-8080094\n+                response.sendError(HttpServletResponse.SC_NOT_FOUND);\n+                return;\n+            }\n \n             while (line != null) {\n                 sb.append(line);", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/api/http/servlet/APIServlet.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/e0d8e5078f90823e8dd51052317a7da1c08cc9f9", "parent": "https://github.com/apache/asterixdb/commit/f94f63d3f8e52cdb099cce365b9fb053050969cf", "message": "[ASTERIXDB-2019][CLUS] Update cluster state on partitions changes\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Set the cluster to UNUSABLE when no partitions are registered\n- Update cluster state after partitions register/de-register\n- Reject unregistered nodes queries on CC\n- Avoid NPE when trying to send to a node that was de-registered\n\nChange-Id: I7d11733a1dcd86136e157d80517bff4abcfc776b\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1918\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Michael Blow <mblow@apache.org>", "bug_id": "asterixdb_38", "file": [{"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java", "sha": "9faa9e9a09265664248143e1a46b44d76cb2e7fc", "changes": 33, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9", "patch": "@@ -92,6 +92,11 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n         ClusterControllerService ccSrv = (ClusterControllerService) ccSrvContext.getControllerService();\n         CCApplication ccApp = (CCApplication) ccSrv.getApplication();\n         CCMessageBroker messageBroker = (CCMessageBroker) ccSrvContext.getMessageBroker();\n+        final String rejectionReason = getRejectionReason(ccSrv);\n+        if (rejectionReason != null) {\n+            sendRejection(rejectionReason, messageBroker);\n+            return;\n+        }\n         CCExtensionManager ccExtMgr = (CCExtensionManager) ccAppCtx.getExtensionManager();\n         ILangCompilationProvider compilationProvider = ccExtMgr.getCompilationProvider(lang);\n         IStorageComponentProvider storageComponentProvider = ccAppCtx.getStorageComponentProvider();\n@@ -100,16 +105,9 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n \n         ccSrv.getExecutor().submit(() -> {\n             ExecuteStatementResponseMessage responseMsg = new ExecuteStatementResponseMessage(requestMessageId);\n-\n             try {\n-                final IClusterManagementWork.ClusterState clusterState = ClusterStateManager.INSTANCE.getState();\n-                if (clusterState != IClusterManagementWork.ClusterState.ACTIVE) {\n-                    throw new IllegalStateException(\"Cannot execute request, cluster is \" + clusterState);\n-                }\n-\n                 IParser parser = compilationProvider.getParserFactory().createParser(statementsText);\n                 List<Statement> statements = parser.parse();\n-\n                 StringWriter outWriter = new StringWriter(256);\n                 PrintWriter outPrinter = new PrintWriter(outWriter);\n                 SessionOutput.ResultDecorator resultPrefix = ResultUtil.createPreResultDecorator();\n@@ -148,6 +146,27 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n         });\n     }\n \n+    private String getRejectionReason(ClusterControllerService ccSrv) {\n+        if (ccSrv.getNodeManager().getNodeControllerState(requestNodeId) == null) {\n+            return \"Node is not registerted with the CC\";\n+        }\n+        final IClusterManagementWork.ClusterState clusterState = ClusterStateManager.INSTANCE.getState();\n+        if (clusterState != IClusterManagementWork.ClusterState.ACTIVE) {\n+            return \"Cannot execute request, cluster is \" + clusterState;\n+        }\n+        return null;\n+    }\n+\n+    private void sendRejection(String reason, CCMessageBroker messageBroker) {\n+        ExecuteStatementResponseMessage responseMsg = new ExecuteStatementResponseMessage(requestMessageId);\n+        responseMsg.setError(new Exception(reason));\n+        try {\n+            messageBroker.sendApplicationMessageToNC(responseMsg, requestNodeId);\n+        } catch (Exception e) {\n+            LOGGER.log(Level.WARNING, e.toString(), e);\n+        }\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"%s(id=%s, from=%s): %s\", getClass().getSimpleName(), requestMessageId, requestNodeId,", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java"}, {"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java", "sha": "0eade416d072d0927f5b7ddaec045defbf7387e5", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9", "patch": "@@ -69,7 +69,13 @@ public void receivedMessage(IMessage message, String nodeId) throws Exception {\n     public void sendApplicationMessageToNC(INcAddressedMessage msg, String nodeId) throws Exception {\n         INodeManager nodeManager = ccs.getNodeManager();\n         NodeControllerState state = nodeManager.getNodeControllerState(nodeId);\n-        state.getNodeController().sendApplicationMessageToNC(JavaSerializationUtils.serialize(msg), null, nodeId);\n+        if (state != null) {\n+            state.getNodeController().sendApplicationMessageToNC(JavaSerializationUtils.serialize(msg), null, nodeId);\n+        } else {\n+            if (LOGGER.isLoggable(Level.WARNING)) {\n+                LOGGER.warning(\"Couldn't send message to unregistered node (\" + nodeId + \")\");\n+            }\n+        }\n     }\n \n     @Override", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java"}, {"additions": 10, "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java", "sha": "30675cd631ccbcbca68def98685009d07fd82829", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9", "patch": "@@ -100,11 +100,20 @@ boolean waitForState(ClusterState waitForState, long timeout, TimeUnit unit)\n \n     /**\n      * Register the specified node partitions with the specified nodeId with this cluster state manager\n+     * then calls {@link IClusterStateManager#refreshState()}\n+     *\n+     * @param nodeId\n+     * @param nodePartitions\n+     * @throws AsterixException\n      */\n     void registerNodePartitions(String nodeId, ClusterPartition[] nodePartitions) throws AsterixException;\n \n     /**\n      * De-register the specified node's partitions from this cluster state manager\n+     * then calls {@link IClusterStateManager#refreshState()}\n+     *\n+     * @param nodeId\n+     * @throws HyracksDataException\n      */\n-    void deregisterNodePartitions(String nodeId);\n+    void deregisterNodePartitions(String nodeId) throws HyracksDataException;\n }", "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java"}, {"additions": 14, "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java", "sha": "8156a231d3ae1529282964c6f2a2ed10ebe68d4a", "changes": 15, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9", "patch": "@@ -154,6 +154,12 @@ public synchronized void updateClusterPartition(Integer partitionNum, String act\n     @Override\n     public synchronized void refreshState() throws HyracksDataException {\n         resetClusterPartitionConstraint();\n+        if (clusterPartitions.isEmpty()) {\n+            LOGGER.info(\"Cluster does not have any registered partitions\");\n+            setState(ClusterState.UNUSABLE);\n+            return;\n+        }\n+\n         for (ClusterPartition p : clusterPartitions.values()) {\n             if (!p.isActive()) {\n                 setState(ClusterState.UNUSABLE);\n@@ -368,10 +374,16 @@ public synchronized void registerNodePartitions(String nodeId, ClusterPartition[\n             clusterPartitions.put(nodePartition.getPartitionId(), nodePartition);\n         }\n         node2PartitionsMap.put(nodeId, nodePartitions);\n+        //TODO fix exception propagation from refreshState\n+        try {\n+            refreshState();\n+        } catch (HyracksDataException e) {\n+            throw new AsterixException(e);\n+        }\n     }\n \n     @Override\n-    public synchronized void deregisterNodePartitions(String nodeId) {\n+    public synchronized void deregisterNodePartitions(String nodeId) throws HyracksDataException {\n         ClusterPartition[] nodePartitions = node2PartitionsMap.remove(nodeId);\n         if (nodePartitions == null) {\n             LOGGER.info(\"deregisterNodePartitions unknown node \" + nodeId + \" (already removed?)\");\n@@ -382,6 +394,7 @@ public synchronized void deregisterNodePartitions(String nodeId) {\n             for (ClusterPartition nodePartition : nodePartitions) {\n                 clusterPartitions.remove(nodePartition.getPartitionId());\n             }\n+            refreshState();\n         }\n     }\n ", "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/54a507007e08cd84652774263bd7e1fe9ede8a0f", "parent": "https://github.com/apache/asterixdb/commit/0d0a113f40014384bcf54b68235581286c9b2c2b", "message": "[ASTERIXDB-2003][FAIL] Abort jobs failing during job start\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Prevent NPE or unmodifiable list in JobCleanupWork and\n  JobletCleanupNotificationWork.\n- Abort job if a failure happens during job start\n\nChange-Id: If6fe4ed9084270f9f22ee4b4c71936d679c8b883\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1904\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_39", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java", "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java", "sha": "f18a9179b1c7b3c60804ee20858849059b89ccdf", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f", "patch": "@@ -521,7 +521,7 @@ private void startTasks(Map<String, List<TaskAttemptDescriptor>> taskAttemptMap)\n         }\n     }\n \n-    private void abortJob(List<Exception> exceptions) {\n+    public void abortJob(List<Exception> exceptions) {\n         Set<TaskCluster> inProgressTaskClustersCopy = new HashSet<>(inProgressTaskClusters);\n         for (TaskCluster tc : inProgressTaskClustersCopy) {\n             abortTaskCluster(findLastTaskClusterAttempt(tc), TaskClusterAttempt.TaskClusterStatus.ABORTED);", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java", "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java", "sha": "abf1d5793eb3fb1425184881b2690270f1cc3ecc", "changes": 9, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f", "patch": "@@ -45,7 +45,6 @@\n import org.apache.hyracks.control.cc.cluster.INodeManager;\n import org.apache.hyracks.control.cc.scheduler.FIFOJobQueue;\n import org.apache.hyracks.control.cc.scheduler.IJobQueue;\n-import org.apache.hyracks.control.cc.work.JobCleanupWork;\n import org.apache.hyracks.control.common.controllers.CCConfig;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -318,8 +317,12 @@ private void executeJobInternal(JobRun run) {\n         try {\n             run.getExecutor().startJob();\n         } catch (Exception e) {\n-            ccs.getWorkQueue().schedule(new JobCleanupWork(ccs.getJobManager(), run.getJobId(), JobStatus.FAILURE,\n-                    Collections.singletonList(e)));\n+            LOGGER.log(Level.SEVERE, \"Aborting \" + run.getJobId() + \" due to failure during job start\", e);\n+            final List<Exception> exceptions = Collections.singletonList(e);\n+            // fail the job then abort it\n+            run.setStatus(JobStatus.FAILURE, exceptions);\n+            // abort job will trigger JobCleanupWork\n+            run.getExecutor().abortJob(exceptions);\n         }\n     }\n ", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java"}, {"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java", "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java", "sha": "502ac50e510e04c84611e73d7e60c56ad66c04d9", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f", "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.hyracks.control.cc.work;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -55,8 +56,12 @@ public void run() {\n         } catch (HyracksException e) {\n             // Fail the job with the caught exception during final completion.\n             JobRun run = jobManager.get(jobId);\n-            run.getExceptions().add(e);\n-            run.setStatus(JobStatus.FAILURE, run.getExceptions());\n+            List<Exception> completionException = new ArrayList<>();\n+            if (run.getExceptions() != null && !run.getExceptions().isEmpty()) {\n+                completionException.addAll(run.getExceptions());\n+            }\n+            completionException.add(0, e);\n+            run.setStatus(JobStatus.FAILURE, completionException);\n         }\n     }\n ", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java"}, {"additions": 8, "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java", "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java", "sha": "5bf721b394925fa162d43fe65a4a713cf461657e", "changes": 10, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f", "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.hyracks.control.cc.work;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Set;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -67,8 +69,12 @@ public void runWork() {\n                 jobManager.finalComplete(run);\n             } catch (HyracksException e) {\n                 // Fail the job with the caught exception during final completion.\n-                run.getExceptions().add(e);\n-                run.setStatus(JobStatus.FAILURE, run.getExceptions());\n+                List<Exception> completionException = new ArrayList<>();\n+                if (run.getExceptions() != null && !run.getExceptions().isEmpty()) {\n+                    completionException.addAll(run.getExceptions());\n+                }\n+                completionException.add(0, e);\n+                run.setStatus(JobStatus.FAILURE, completionException);\n             }\n         }\n     }", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/0d0a113f40014384bcf54b68235581286c9b2c2b", "parent": "https://github.com/apache/asterixdb/commit/8b077a536aa7c1bb69f31067ace8f136ffdf5182", "message": "[ASTERIXDB-1995][STO] Abort write txn when index cannot be flushed\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fix LSM memory component state transition on flush/merge failure\n- When index cannot be flushed, abort waiting threads\n- Prevent NPE in MateralizerTaskState when file creation fails\n- Check parent dirs creation for index metadata file\n\nChange-Id: I28592c30c788f4a6f44db8b47a84bc77f6b3f8f3\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1896\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>", "bug_id": "asterixdb_40", "file": [{"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java", "sha": "279976548d3e77bd3cef1dd7c563f1398fd42443", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -64,6 +64,8 @@ private LoggerHolder() {\n     public NodeControllerService[] ncs = new NodeControllerService[0];\n     public IHyracksClientConnection hcc;\n \n+    private static final String DEFAULT_STORAGE_PATH = joinPath(\"target\", \"io\", \"dir\");\n+    private static String storagePath = DEFAULT_STORAGE_PATH;\n     private ConfigManager configManager;\n     private List<String> nodeNames;\n \n@@ -217,8 +219,16 @@ public void stopCC(boolean terminateNCService) throws Exception {\n         }\n     }\n \n+    public static void setStoragePath(String path) {\n+        storagePath = path;\n+    }\n+\n+    public static void restoreDefaultStoragePath() {\n+        storagePath = DEFAULT_STORAGE_PATH;\n+    }\n+\n     protected String getDefaultStoragePath() {\n-        return joinPath(\"target\", \"io\", \"dir\");\n+        return storagePath;\n     }\n \n     public void removeTestStorageFiles() {", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java"}, {"additions": 173, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java", "sha": "58697a99bc9fa19b1d59e2aadad8931a7a619208", "changes": 173, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.test.storage;\n+\n+import static org.apache.hyracks.util.StorageUtil.StorageUnit.MEGABYTE;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.asterix.api.common.AsterixHyracksIntegrationUtil;\n+import org.apache.asterix.app.bootstrap.TestNodeController;\n+import org.apache.asterix.app.data.gen.TupleGenerator;\n+import org.apache.asterix.app.data.gen.TupleGenerator.GenerationFunction;\n+import org.apache.asterix.common.config.DatasetConfig.DatasetType;\n+import org.apache.asterix.common.dataflow.LSMInsertDeleteOperatorNodePushable;\n+import org.apache.asterix.common.exceptions.ExceptionUtils;\n+import org.apache.asterix.common.transactions.ITransactionContext;\n+import org.apache.asterix.external.util.DataflowUtils;\n+import org.apache.asterix.file.StorageComponentProvider;\n+import org.apache.asterix.metadata.entities.Dataset;\n+import org.apache.asterix.metadata.entities.Index;\n+import org.apache.asterix.metadata.entities.InternalDatasetDetails;\n+import org.apache.asterix.metadata.entities.InternalDatasetDetails.PartitioningStrategy;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.test.common.TestHelper;\n+import org.apache.commons.lang3.SystemUtils;\n+import org.apache.hyracks.api.comm.VSizeFrame;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+import org.apache.hyracks.api.exceptions.ErrorCode;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.dataflow.common.comm.io.FrameTupleAppender;\n+import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference;\n+import org.apache.hyracks.storage.am.lsm.common.impls.NoMergePolicyFactory;\n+import org.apache.hyracks.util.DiskUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DiskIsFullTest {\n+\n+    private static final IAType[] KEY_TYPES = { BuiltinType.AINT32 };\n+    private static final ARecordType RECORD_TYPE = new ARecordType(\"TestRecordType\", new String[] { \"key\", \"value\" },\n+            new IAType[] { BuiltinType.AINT32, BuiltinType.AINT64 }, false);\n+    private static final GenerationFunction[] RECORD_GEN_FUNCTION =\n+            { GenerationFunction.DETERMINISTIC, GenerationFunction.DETERMINISTIC };\n+    private static final boolean[] UNIQUE_RECORD_FIELDS = { true, false };\n+    private static final ARecordType META_TYPE = null;\n+    private static final GenerationFunction[] META_GEN_FUNCTION = null;\n+    private static final boolean[] UNIQUE_META_FIELDS = null;\n+    private static final int[] KEY_INDEXES = { 0 };\n+    private static final int[] KEY_INDICATOR = { Index.RECORD_INDICATOR };\n+    private static final List<Integer> KEY_INDICATOR_LIST = Arrays.asList(new Integer[] { Index.RECORD_INDICATOR });\n+    private static final int DATASET_ID = 101;\n+    private static final String DATAVERSE_NAME = \"TestDV\";\n+    private static final String DATASET_NAME = \"TestDS\";\n+    private static final String DATA_TYPE_NAME = \"DUMMY\";\n+    private static final String NODE_GROUP_NAME = \"DEFAULT\";\n+    private static final String TEST_DISK_NAME = \"asterixdb_ram_disk\";\n+    private boolean shouldRun = true;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        if (!SystemUtils.IS_OS_MAC) {\n+            System.out.println(\"Skipping test \" + DiskIsFullTest.class.getName() + \" due to unsupported OS\");\n+            shouldRun = false;\n+            return;\n+        }\n+        System.out.println(\"SetUp: \");\n+        TestHelper.deleteExistingInstanceFiles();\n+        // create RAM disk\n+        final Path ramDiskRoot = DiskUtil.mountRamDisk(TEST_DISK_NAME, 4, MEGABYTE);\n+        // Use RAM disk for storage\n+        AsterixHyracksIntegrationUtil.setStoragePath(ramDiskRoot.toAbsolutePath().toString());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (!shouldRun) {\n+            return;\n+        }\n+        System.out.println(\"TearDown\");\n+        TestHelper.deleteExistingInstanceFiles();\n+        DiskUtil.unmountRamDisk(TEST_DISK_NAME);\n+        AsterixHyracksIntegrationUtil.restoreDefaultStoragePath();\n+    }\n+\n+    @Test\n+    public void testDiskIsFull() {\n+        if (!shouldRun) {\n+            return;\n+        }\n+        HyracksDataException expectedException =\n+                HyracksDataException.create(ErrorCode.CANNOT_MODIFY_INDEX_DISK_IS_FULL);\n+        try {\n+            TestNodeController nc = new TestNodeController(null, false);\n+            nc.init();\n+            StorageComponentProvider storageManager = new StorageComponentProvider();\n+            List<List<String>> partitioningKeys = new ArrayList<>();\n+            partitioningKeys.add(Collections.singletonList(\"key\"));\n+            Dataset dataset =\n+                    new Dataset(DATAVERSE_NAME, DATASET_NAME, DATAVERSE_NAME, DATA_TYPE_NAME, NODE_GROUP_NAME, null,\n+                            null,\n+                            new InternalDatasetDetails(null, PartitioningStrategy.HASH, partitioningKeys, null, null,\n+                                    null, false, null, false), null, DatasetType.INTERNAL, DATASET_ID, 0);\n+            try {\n+                nc.createPrimaryIndex(dataset, KEY_TYPES, RECORD_TYPE, META_TYPE, new NoMergePolicyFactory(), null,\n+                        null, storageManager, KEY_INDEXES, KEY_INDICATOR_LIST);\n+                IHyracksTaskContext ctx = nc.createTestContext(false);\n+                nc.newJobId();\n+                ITransactionContext txnCtx = nc.getTransactionManager().getTransactionContext(nc.getTxnJobId(), true);\n+                // Prepare insert operation\n+                LSMInsertDeleteOperatorNodePushable insertOp =\n+                        nc.getInsertPipeline(ctx, dataset, KEY_TYPES, RECORD_TYPE, META_TYPE,\n+                                new NoMergePolicyFactory(), null, null, KEY_INDEXES, KEY_INDICATOR_LIST, storageManager)\n+                                .getLeft();\n+                insertOp.open();\n+                TupleGenerator tupleGenerator =\n+                        new TupleGenerator(RECORD_TYPE, META_TYPE, KEY_INDEXES, KEY_INDICATOR, RECORD_GEN_FUNCTION,\n+                                UNIQUE_RECORD_FIELDS, META_GEN_FUNCTION, UNIQUE_META_FIELDS);\n+                VSizeFrame frame = new VSizeFrame(ctx);\n+                FrameTupleAppender tupleAppender = new FrameTupleAppender(frame);\n+                // Insert records until disk becomes full\n+                int tupleCount = 100000;\n+                while (tupleCount > 0) {\n+                    ITupleReference tuple = tupleGenerator.next();\n+                    try {\n+                        DataflowUtils.addTupleToFrame(tupleAppender, tuple, insertOp);\n+                    } catch (Throwable t) {\n+                        final Throwable rootCause = ExceptionUtils.getRootCause(t);\n+                        rootCause.printStackTrace();\n+                        if (rootCause instanceof HyracksDataException) {\n+                            HyracksDataException cause = (HyracksDataException) rootCause;\n+                            Assert.assertEquals(cause.getErrorCode(), expectedException.getErrorCode());\n+                            Assert.assertEquals(cause.getMessage(), expectedException.getMessage());\n+                            return;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    tupleCount--;\n+                }\n+                Assert.fail(\"Expected exception (\" + expectedException + \") was not thrown\");\n+            } finally {\n+                nc.deInit();\n+            }\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            Assert.fail(\"Expected exception (\" + expectedException + \") was not thrown\");\n+        }\n+    }\n+}\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java"}, {"additions": 9, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java", "sha": "b117cf1d6d1f40ae4558e53fad0489926833d778", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.asterix.transaction.management.resource;\n \n+import static org.apache.hyracks.api.exceptions.ErrorCode.CANNOT_CREATE_FILE;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -190,10 +192,12 @@ public synchronized void insert(LocalResource resource) throws HyracksDataExcept\n         FileReference resourceFile = ioManager.resolve(relativePath);\n         if (resourceFile.getFile().exists()) {\n             throw new HyracksDataException(\"Duplicate resource: \" + resourceFile.getAbsolutePath());\n-        } else {\n-            resourceFile.getFile().getParentFile().mkdirs();\n         }\n-        resourceCache.put(resource.getPath(), resource);\n+\n+        final File parent = resourceFile.getFile().getParentFile();\n+        if (!parent.exists() && !parent.mkdirs()) {\n+            throw HyracksDataException.create(CANNOT_CREATE_FILE, parent.getAbsolutePath());\n+        }\n \n         try (FileOutputStream fos = new FileOutputStream(resourceFile.getFile());\n                 ObjectOutputStream oosToFos = new ObjectOutputStream(fos)) {\n@@ -203,6 +207,8 @@ public synchronized void insert(LocalResource resource) throws HyracksDataExcept\n             throw new HyracksDataException(e);\n         }\n \n+        resourceCache.put(resource.getPath(), resource);\n+\n         //if replication enabled, send resource metadata info to remote nodes\n         if (isReplicationEnabled) {\n             createReplicationJob(ReplicationOperation.REPLICATE, resourceFile);", "filename": "asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java", "sha": "e6fbc6f265cc4e0a0971d40b1db520e772bf3bc7", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -121,6 +121,7 @@\n     public static final int FOUND_MULTIPLE_TRANSACTIONS = 85;\n     public static final int UNRECOGNIZED_INDEX_COMPONENT_FILE = 86;\n     public static final int UNEQUAL_NUM_FILTERS_TREES = 87;\n+    public static final int CANNOT_MODIFY_INDEX_DISK_IS_FULL = 88;\n \n     // Compilation error codes.\n     public static final int RULECOLLECTION_NOT_INSTANCE_OF_LIST = 10000;", "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties", "sha": "d2e05e381c8bded26478c7abebfaffd4a3a2d1d1", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -104,5 +104,6 @@\n 85 = Found more than one transaction file in %1$s\n 86 = Found an unrecognized index file %1$s\n 87 = Unequal number of trees and filters found in %1$s\n+88 = Cannot modify index (Disk is full)\n \n 10000 = The given rule collection %1$s is not an instance of the List class.", "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties"}, {"additions": 17, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java", "sha": "31cbaad111562a950b3ec3a486552d0f24bcb6f1", "changes": 27, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -66,28 +66,35 @@ public void open(IHyracksTaskContext ctx) throws HyracksDataException {\n     }\n \n     public void close() throws HyracksDataException {\n-        out.close();\n+        if (out != null) {\n+            out.close();\n+        }\n     }\n \n     public void appendFrame(ByteBuffer buffer) throws HyracksDataException {\n         out.nextFrame(buffer);\n     }\n \n     public void writeOut(IFrameWriter writer, IFrame frame, boolean failed) throws HyracksDataException {\n-        RunFileReader in = out.createReader();\n+        RunFileReader in = null;\n+        if (out != null) {\n+            in = out.createReader();\n+        }\n         writer.open();\n         try {\n             if (failed) {\n                 writer.fail();\n                 return;\n             }\n-            in.open();\n-            try {\n-                while (in.nextFrame(frame)) {\n-                    writer.nextFrame(frame.getBuffer());\n+            if (in != null) {\n+                in.open();\n+                try {\n+                    while (in.nextFrame(frame)) {\n+                        writer.nextFrame(frame.getBuffer());\n+                    }\n+                } finally {\n+                    in.close();\n                 }\n-            } finally {\n-                in.close();\n             }\n         } catch (Exception e) {\n             writer.fail();\n@@ -96,10 +103,10 @@ public void writeOut(IFrameWriter writer, IFrame frame, boolean failed) throws H\n             try {\n                 writer.close();\n             } finally {\n-                if (numConsumers.decrementAndGet() == 0) {\n+                if (numConsumers.decrementAndGet() == 0 && out != null) {\n                     out.getFileReference().delete();\n                 }\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file", "filename": "hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java", "sha": "1ee68d991223fdb082b677286173c437d1cd243f", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -144,6 +144,11 @@ public void threadExit(LSMOperationType opType, boolean failedOperation, boolean\n                     throw new IllegalStateException(\"Flush sees an illegal LSM memory compoenent state: \" + state);\n                 }\n                 readerCount--;\n+                if (failedOperation) {\n+                    // if flush failed, return the component state to READABLE_UNWRITABLE\n+                    state = ComponentState.READABLE_UNWRITABLE;\n+                    return;\n+                }\n                 if (readerCount == 0) {\n                     state = ComponentState.INACTIVE;\n                 } else {", "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java"}, {"additions": 31, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java", "sha": "8ff907a30f74e38f4972f24ee85a9408570f034f", "changes": 33, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -47,6 +47,7 @@\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndex;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndexAccessor;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndexOperationContext;\n+import org.apache.hyracks.storage.am.lsm.common.api.ILSMMemoryComponent;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMMergePolicy;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMOperationTracker;\n import org.apache.hyracks.storage.am.lsm.common.api.LSMOperationType;\n@@ -131,6 +132,10 @@ protected boolean getAndEnterComponents(ILSMIndexOperationContext ctx, LSMOperat\n                     // Flush and merge operations should never reach this wait call, because they are always try operations.\n                     // If they fail to enter the components, then it means that there are an ongoing flush/merge operation on\n                     // the same components, so they should not proceed.\n+                    if (opType == LSMOperationType.MODIFICATION) {\n+                        // before waiting, make sure the index is in a modifiable state to avoid waiting forever.\n+                        ensureIndexModifiable();\n+                    }\n                     opTracker.wait();\n                 } catch (InterruptedException e) {\n                     throw new HyracksDataException(e);\n@@ -186,6 +191,7 @@ protected boolean enterComponents(ILSMIndexOperationContext ctx, LSMOperationTyp\n                 break;\n             case MERGE:\n                 lsmIndex.getIOOperationCallback().beforeOperation(LSMOperationType.MERGE);\n+                break;\n             default:\n                 break;\n         }\n@@ -498,15 +504,17 @@ public void flush(ILSMIndexOperationContext ctx, ILSMIOOperation operation) thro\n         }\n \n         ILSMDiskComponent newComponent = null;\n+        boolean failedOperation = false;\n         try {\n             newComponent = lsmIndex.flush(operation);\n             operation.getCallback().afterOperation(LSMOperationType.FLUSH, null, newComponent);\n             lsmIndex.markAsValid(newComponent);\n         } catch (Throwable e) {\n+            failedOperation = true;\n             e.printStackTrace();\n             throw e;\n         } finally {\n-            exitComponents(ctx, LSMOperationType.FLUSH, newComponent, false);\n+            exitComponents(ctx, LSMOperationType.FLUSH, newComponent, failedOperation);\n             operation.getCallback().afterFinalize(LSMOperationType.FLUSH, newComponent);\n         }\n         if (LOGGER.isLoggable(Level.INFO)) {\n@@ -545,15 +553,17 @@ public void merge(ILSMIndexOperationContext ctx, ILSMIOOperation operation) thro\n         }\n \n         ILSMDiskComponent newComponent = null;\n+        boolean failedOperation = false;\n         try {\n             newComponent = lsmIndex.merge(operation);\n             operation.getCallback().afterOperation(LSMOperationType.MERGE, ctx.getComponentHolder(), newComponent);\n             lsmIndex.markAsValid(newComponent);\n         } catch (Throwable e) {\n+            failedOperation = true;\n             e.printStackTrace();\n             throw e;\n         } finally {\n-            exitComponents(ctx, LSMOperationType.MERGE, newComponent, false);\n+            exitComponents(ctx, LSMOperationType.MERGE, newComponent, failedOperation);\n             operation.getCallback().afterFinalize(LSMOperationType.MERGE, newComponent);\n         }\n         if (LOGGER.isLoggable(Level.INFO)) {\n@@ -660,4 +670,23 @@ public void batchOperate(ILSMIndexOperationContext ctx, FrameTupleAccessor acces\n             exit(ctx);\n         }\n     }\n+\n+    /***\n+     * Ensures the index is in a modifiable state\n+     * @throws HyracksDataException if the index is not in a modifiable state\n+     */\n+    private void ensureIndexModifiable() throws HyracksDataException {\n+        // find if there is any memory component which is in a writable state or eventually will be in a writable state\n+        for (ILSMMemoryComponent memoryComponent : lsmIndex.getMemoryComponents()) {\n+            switch (memoryComponent.getState()) {\n+                case INACTIVE:\n+                case READABLE_WRITABLE:\n+                case READABLE_UNWRITABLE_FLUSHING:\n+                    return;\n+                default:\n+                    // continue to the next component\n+            }\n+        }\n+        throw HyracksDataException.create(ErrorCode.CANNOT_MODIFY_INDEX_DISK_IS_FULL);\n+    }\n }", "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/pom.xml", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/pom.xml", "sha": "3b03fce8a5dfdd305d7e8caafab865051c5d959c", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/pom.xml?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -64,6 +64,10 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+    </dependency>\n   </dependencies>\n \n </project>", "filename": "hyracks-fullstack/hyracks/hyracks-util/pom.xml"}, {"additions": 126, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java", "sha": "9a65d720a4e85b9470ce1ea8fc3dc1c44c90603b", "changes": 126, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.hyracks.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+public class DiskUtil {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DiskUtil.class.getName());\n+\n+    private DiskUtil() {\n+        throw new AssertionError(\"Util class should not be initialized.\");\n+    }\n+\n+    /**\n+     * Mounts a RAM disk\n+     *\n+     * @param name\n+     * @param size\n+     * @param unit\n+     * @return The root of the mounted disk\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public static Path mountRamDisk(String name, int size, StorageUtil.StorageUnit unit)\n+            throws IOException, InterruptedException {\n+        if (SystemUtils.IS_OS_MAC) {\n+            return mountMacRamDisk(name, (StorageUtil.getIntSizeInBytes(size, unit) * 2) / StorageUtil.BASE);\n+        } else if (SystemUtils.IS_OS_LINUX) {\n+            return mountLinuxRamDisk(name, size + unit.getLinuxUnitTypeInLetter());\n+        }\n+        throw new UnsupportedOperationException(\"Unsupported OS: \" + System.getProperty(\"os.name\"));\n+    }\n+\n+    /**\n+     * Unmounts a disk\n+     *\n+     * @param name\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public static void unmountRamDisk(String name) throws IOException, InterruptedException {\n+        if (SystemUtils.IS_OS_MAC) {\n+            unmountMacRamDisk(name);\n+        } else if (SystemUtils.IS_OS_LINUX) {\n+            unmountLinuxRamDisk(name);\n+        }\n+    }\n+\n+    private static Path mountMacRamDisk(String name, long size) throws IOException, InterruptedException {\n+        final String cmd = \"diskutil erasevolume HFS+ '\" + name + \"' `hdiutil attach -nomount ram://\" + size + \"`\";\n+        final ProcessBuilder pb = new ProcessBuilder(\"/bin/sh\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+        return Paths.get(\"/Volumes\", name);\n+    }\n+\n+    private static void unmountMacRamDisk(String name) throws InterruptedException, IOException {\n+        final String cmd = \"diskutil unmount \" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"/bin/sh\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+    }\n+\n+    private static Path mountLinuxRamDisk(String name, String size) throws IOException, InterruptedException {\n+        Path root = Paths.get(\"/tmp\", name);\n+        if (!Files.exists(root)) {\n+            Files.createFile(root);\n+        }\n+        final String cmd = \"mount -o size=\" + size + \" -t tmpfs none /tmp/\" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+        return root;\n+    }\n+\n+    private static void unmountLinuxRamDisk(String name) throws InterruptedException, IOException {\n+        final String cmd = \"umount /tmp/\" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+    }\n+\n+    private static void watchProcess(Process p) {\n+        new Thread(() -> {\n+            final BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+            String line;\n+            try {\n+                while ((line = input.readLine()) != null) {\n+                    LOGGER.info(line);\n+                }\n+            } catch (IOException e) {\n+                LOGGER.log(Level.WARNING, e.getMessage(), e);\n+            }\n+        }).start();\n+    }\n+}\n\\ No newline at end of file", "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java"}, {"additions": 14, "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java", "sha": "dbfe6f9503fb67090ec2fbbb5450bfb2ea2fe207", "changes": 22, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b", "patch": "@@ -23,17 +23,18 @@\n \n public class StorageUtil {\n \n-    private static final int BASE = 1024;\n+    public static final int BASE = 1024;\n \n     public enum StorageUnit {\n-        BYTE(\"B\", 1),\n-        KILOBYTE(\"KB\", BASE),\n-        MEGABYTE(\"MB\", KILOBYTE.multiplier * BASE),\n-        GIGABYTE(\"GB\", MEGABYTE.multiplier * BASE),\n-        TERABYTE(\"TB\", GIGABYTE.multiplier * BASE),\n-        PETABYTE(\"PB\", TERABYTE.multiplier * BASE);\n+        BYTE(\"B\", \"b\", 1),\n+        KILOBYTE(\"KB\", \"kb\", BASE),\n+        MEGABYTE(\"MB\", \"m\", KILOBYTE.multiplier * BASE),\n+        GIGABYTE(\"GB\", \"g\", MEGABYTE.multiplier * BASE),\n+        TERABYTE(\"TB\", \"t\", GIGABYTE.multiplier * BASE),\n+        PETABYTE(\"PB\", \"p\", TERABYTE.multiplier * BASE);\n \n         private final String unitTypeInLetter;\n+        private final String linuxUnitTypeInLetter;\n         private final long multiplier;\n         private static final Map<String, StorageUnit> SUFFIX_TO_UNIT_MAP = new HashMap<>();\n \n@@ -43,8 +44,9 @@\n             }\n         }\n \n-        StorageUnit(String unitTypeInLetter, long multiplier) {\n+        StorageUnit(String unitTypeInLetter, String linuxUnitTypeInLetter, long multiplier) {\n             this.unitTypeInLetter = unitTypeInLetter;\n+            this.linuxUnitTypeInLetter = linuxUnitTypeInLetter;\n             this.multiplier = multiplier;\n         }\n \n@@ -57,6 +59,10 @@ public double toBytes(double value) {\n             return value * multiplier;\n         }\n \n+        public String getLinuxUnitTypeInLetter() {\n+            return linuxUnitTypeInLetter;\n+        }\n+\n         public static StorageUnit lookupBySuffix(String name) {\n             return SUFFIX_TO_UNIT_MAP.get(name);\n         }", "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/b975100c9001b8b86f976c592f7ab7863111d659", "parent": "https://github.com/apache/asterixdb/commit/6c63834dcda2d2efe2bf1fe25e53945e78b2de86", "message": "fix NPE in ValidateUtil\n\nChange-Id: I8f623441a3f5b72a9a0621d32d9d1a6aa5567d66\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1139\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_41", "file": [{"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java", "sha": "065b1b0c85732744123b5fb1192002935a49dbd4", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java?ref=b975100c9001b8b86f976c592f7ab7863111d659", "patch": "@@ -107,6 +107,10 @@ public static void validateFilterField(ARecordType recType, List<String> filterF\n                     keySourceIndicators);\n             for (int fidx = 0; fidx < partitioningExprTypes.size(); ++fidx) {\n                 IAType fieldType = partitioningExprTypes.get(fidx);\n+                if (fieldType == null) {\n+                    throw new AsterixException(\n+                            \"Type not found for partitioning key \" + partitioningExprs.get(fidx));\n+                }\n                 switch (fieldType.getTypeTag()) {\n                     case INT8:\n                     case INT16:\n@@ -125,10 +129,10 @@ public static void validateFilterField(ARecordType recType, List<String> filterF\n                         break;\n                     case UNION:\n                         throw new AsterixException(\n-                                \"The partitioning key \\\"\" + partitioningExprs.get(fidx) + \"\\\" cannot be nullable\");\n+                                \"The partitioning key \" + partitioningExprs.get(fidx) + \" cannot be nullable\");\n                     default:\n-                        throw new AsterixException(\"The partitioning key \\\"\" + partitioningExprs.get(fidx)\n-                                + \"\\\" cannot be of type \" + fieldType.getTypeTag() + \".\");\n+                        throw new AsterixException(\"The partitioning key \" + partitioningExprs.get(fidx)\n+                                + \" cannot be of type \" + fieldType.getTypeTag() + \".\");\n                 }\n             }\n         }", "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml", "sha": "251e2e4c3f03613ab27ceea38633fba2572d9851", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659", "patch": "@@ -412,13 +412,13 @@\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_255_create_dataset_error_1\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [name]</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_255_create_dataset_error_2\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>Error: The partitioning key \"[open-type]\" cannot be of type RECORD.</expected-error>\n+        <expected-error>Error: The partitioning key [open-type] cannot be of type RECORD.</expected-error>\n       </compilation-unit>\n     </test-case>\n     <!-- Feed datasets are not supported anymore\n@@ -432,13 +432,13 @@\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_266_create_dataset_error_1\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [point]</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_266_create_dataset_error_2\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>Error: The partitioning key \"[id]\" cannot be nullable</expected-error>\n+        <expected-error>Error: The partitioning key [id] cannot be nullable</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">", "filename": "asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "sha": "6c65a62454a9ca8b55560de669d39bd0b18dd6c9", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659", "patch": "@@ -3179,7 +3179,7 @@\n     <test-case FilePath=\"misc\">\n       <compilation-unit name=\"partition-by-nonexistent-field\"> <!-- Seriously?? 3 expected errors -->\n         <output-dir compare=\"Text\">partition-by-nonexistent-field</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [id]</expected-error>\n         <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Cannot find dataset</expected-error>\n         <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Could not find dataset</expected-error>\n       </compilation-unit>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "a89808e20e662c01869851bf7afd1a0e8a256505", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659", "patch": "@@ -3034,9 +3034,9 @@\n     <test-case FilePath=\"misc\">\n       <compilation-unit name=\"partition-by-nonexistent-field\">\n         <output-dir compare=\"Text\">partition-by-nonexistent-field</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n-        <expected-error>Cannot find dataset</expected-error>\n-        <expected-error>Cannot find dataset testds in dataverse test nor an alias with name testds</expected-error>\n+        <expected-error>Type not found for partitioning key [id]</expected-error>\n+        <expected-error>Cannot find dataset testds in dataverse test</expected-error>\n+        <expected-error>Cannot find dataset testds in dataverse test nor an alias with name testds!</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"misc\">", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/4e33cd95a0003257d5114be4d2b5f7aca4996d3f", "parent": "https://github.com/apache/asterixdb/commit/52a9d992dfadf6bb3057968416bf217c9a42dffb", "message": "fix NPE in SqlppAstPrintVisitor\n\nChange-Id: Ic5ac437366aa0eb2d60ceceeeba5b5f02d2946d2\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1114\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_42", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/4e33cd95a0003257d5114be4d2b5f7aca4996d3f/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/SqlppAstPrintVisitor.java", "blob_url": "https://github.com/apache/asterixdb/blob/4e33cd95a0003257d5114be4d2b5f7aca4996d3f/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/SqlppAstPrintVisitor.java", "sha": "3880fa15318e5f89f6f9b69b09a9958a9d3e50fe", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/SqlppAstPrintVisitor.java?ref=4e33cd95a0003257d5114be4d2b5f7aca4996d3f", "patch": "@@ -132,9 +132,10 @@ public Void visit(NestClause nestClause, Integer step) throws AsterixException {\n     public Void visit(Projection projection, Integer step) throws AsterixException {\n         if (projection.star()) {\n             out.println(skip(step) + \"*\");\n+        } else {\n+            projection.getExpression().accept(this, step);\n+            out.println(skip(step) + projection.getName());\n         }\n-        projection.getExpression().accept(this, step);\n-        out.println(skip(step) + projection.getName());\n         return null;\n     }\n ", "filename": "asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/SqlppAstPrintVisitor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/e56526423dd70c07e3b51a81c9a4bd032ba74b1e", "parent": "https://github.com/apache/asterixdb/commit/3b2acdc01d46a877d47fd13c2e9f4e30f7233275", "message": "Avoid NPE in AsterixHyracksIntegrationUtil.deinit\n\nChange-Id: I4af385918becc2dfbc40462c9505135d91ea859f\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1107\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Michael Blow <mblow@apache.org>", "bug_id": "asterixdb_43", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/e56526423dd70c07e3b51a81c9a4bd032ba74b1e/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/e56526423dd70c07e3b51a81c9a4bd032ba74b1e/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java", "sha": "03ed3c4fde195dac23019d7e39c57aa52e256383", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java?ref=e56526423dd70c07e3b51a81c9a4bd032ba74b1e", "patch": "@@ -56,6 +56,7 @@\n     private AsterixPropertiesAccessor propertiesAccessor;\n \n     public void init(boolean deleteOldInstanceData) throws Exception {\n+        ncs = new NodeControllerService[0]; // ensure that ncs is not null\n         propertiesAccessor = new AsterixPropertiesAccessor();\n         if (deleteOldInstanceData) {\n             deleteTransactionLogs();", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509", "parent": "https://github.com/apache/asterixdb/commit/5dc73edd313eac8755a51dd603b73f4263e03c82", "message": "ASTERIXDB-1363: Fix NPE on bulkload failure\n\nChange-Id: Ic1626baa63371834cc2abbe30366df506d817da6\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1033\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_44", "file": [{"additions": 33, "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql", "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql", "sha": "963e105d1d2cbfe973f3154c9dd255516c4c7686", "changes": 33, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509", "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Bulkload non-empty index.\n+ * Expected Res : Failure\n+ * Date         : 29 July 2016\n+ */\n+drop dataverse OpenTinySocial if exists;\n+create dataverse OpenTinySocial;\n+use dataverse OpenTinySocial;\n+\n+create type FacebookMessageType as {\n+  message-id: int64\n+};\n+\n+create dataset FacebookMessages(FacebookMessageType)\n+primary key message-id;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql"}, {"additions": 32, "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql", "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql", "sha": "21db9810807dcb5a9eda91ca8bdfd8081fc34497", "changes": 32, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509", "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Bulkload non-empty index.\n+ * Expected Res : Failure\n+ * Date         : 29 July 2016\n+ */\n+use dataverse OpenTinySocial;\n+\n+load dataset FacebookMessages\n+using localfs\n+((\"path\"=\"asterix_nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset FacebookMessages\n+using localfs\n+((\"path\"=\"asterix_nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "sha": "0553fba278877203a6612f402d43b6656bf3c657", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509", "patch": "@@ -6379,6 +6379,12 @@\n       </test-case>-->\n   </test-group>\n   <test-group name=\"load\">\n+    <test-case FilePath=\"load\">\n+      <compilation-unit name=\"load_non-empty_index\">\n+        <output-dir compare=\"Text\">load_non-empty_index</output-dir>\n+        <expected-error>Cannot load an index that is not empty</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"load\">\n       <compilation-unit name=\"dataset-with-meta\">\n         <output-dir compare=\"Text\">dataset-with-meta</output-dir>", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java", "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java", "sha": "56cad895e5afe773f131a71dd0d4dd04db224c6f", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509", "patch": "@@ -97,7 +97,10 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n     @Override\n     public void close() throws HyracksDataException {\n         try {\n-            bulkLoader.end();\n+            // bulkloader can be null if an exception is thrown before it is initialized.\n+            if (bulkLoader != null) {\n+                bulkLoader.end();\n+            }\n         } catch (Throwable th) {\n             throw new HyracksDataException(th);\n         } finally {\n@@ -123,4 +126,4 @@ public void fail() throws HyracksDataException {\n             writer.fail();\n         }\n     }\n-}\n+}\n\\ No newline at end of file", "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/b7551d1a2e3dcaef63a7ccdf3efe18b345685b23", "parent": "https://github.com/apache/asterixdb/commit/640705a79a58518dd78dc60154445868a20558d9", "message": "avoid NPE\n\nChange-Id: I31db965351e04444e86d3bc55d7e6dbdfded3fa2\nReviewed-on: https://asterix-gerrit.ics.uci.edu/972\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Cameron Samak <csamak@apache.org>\nReviewed-by: Murtadha Hubail <hubailmor@gmail.com>", "bug_id": "asterixdb_45", "file": [{"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/b7551d1a2e3dcaef63a7ccdf3efe18b345685b23/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/MetadataNode.java", "blob_url": "https://github.com/apache/asterixdb/blob/b7551d1a2e3dcaef63a7ccdf3efe18b345685b23/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/MetadataNode.java", "sha": "2cd8c46ebc8a68c022e1249d85d2ebb44cb3f8b7", "changes": 3, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/MetadataNode.java?ref=b7551d1a2e3dcaef63a7ccdf3efe18b345685b23", "patch": "@@ -576,9 +576,6 @@ private void deleteTupleFromIndex(JobId jobId, IMetadataIndex metadataIndex, ITu\n             IValueExtractor<Dataverse> valueExtractor = new MetadataEntityValueExtractor<Dataverse>(tupleReaderWriter);\n             List<Dataverse> results = new ArrayList<Dataverse>();\n             searchIndex(jobId, MetadataPrimaryIndexes.DATAVERSE_DATASET, null, valueExtractor, results);\n-            if (results.isEmpty()) {\n-                return null;\n-            }\n             return results;\n         } catch (IndexException | IOException e) {\n             throw new MetadataException(e);", "filename": "asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/MetadataNode.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/640705a79a58518dd78dc60154445868a20558d9", "parent": "https://github.com/apache/asterixdb/commit/7f30303c3c38a08078b8f085f3c183c881aac64d", "message": "ASTERIXDB-1515: fix the NPE.\n\nChange-Id: I39412b02d503866588990020af1ea3252e83e1a0\nReviewed-on: https://asterix-gerrit.ics.uci.edu/976\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_46", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp", "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp", "sha": "ac2562ff428d99b7b7f9dc48c2b1b3c958abe46e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp?ref=640705a79a58518dd78dc60154445868a20558d9", "patch": "@@ -28,5 +28,5 @@ declare function abc(y) {\n };\n \n let z =y\n-select element z\n+select element z;\n ", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml", "sha": "f2d57047e721b0196f7a8997b9f413784d72d3a4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=640705a79a58518dd78dc60154445868a20558d9", "patch": "@@ -6534,7 +6534,7 @@\n     <test-case FilePath=\"user-defined-functions\">\n       <compilation-unit name=\"udf30\">\n         <output-dir compare=\"Text\">udf30</output-dir>\n-        <expected-error>Error:</expected-error>\n+        <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Undefined alias (variable) reference for identifier y</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"user-defined-functions\">", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java", "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java", "sha": "dfb15b0646f303a130764037d866f648855ae3ba", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java?ref=640705a79a58518dd78dc60154445868a20558d9", "patch": "@@ -274,7 +274,7 @@ public Expression visit(IndependentSubquery independentSubquery, ILangExpression\n         // variables defined in the parent scope.\n         Scope scope = new Scope(scopeChecker, scopeChecker.getCurrentScope(), true);\n         scopeChecker.pushExistingScope(scope);\n-        independentSubquery.getExpr().accept(this, arg);\n+        independentSubquery.setExpr(independentSubquery.getExpr().accept(this, arg));\n         scopeChecker.removeCurrentScope();\n         return independentSubquery;\n     }", "filename": "asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5", "parent": "https://github.com/apache/asterixdb/commit/224f2ffe5b12d9ccd31c2d8b1e4fd8fb713cae0d", "message": "some test cleanup\n- avoid NPE when reading the \"summary field\" of the result\n- avoid IndexOutOfBoundsException for missing result files\n- get rid of exception tunneling through JsonMappingException\n- refactor common code into TestCaseContext.getFilesInDir\nmove execution.tests to global.test.includes", "bug_id": "asterixdb_47", "file": [{"additions": 45, "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java", "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java", "sha": "b280ec975e0c541d9316c35d6cfa77564bbab10b", "changes": 102, "status": "modified", "deletions": 57, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5", "patch": "@@ -160,7 +160,7 @@ public static String aqlExtToResExt(String fname) {\n         return fname.substring(0, dot + 1) + EXTENSION_AQL_RESULT;\n     }\n \n-    public static void writeResultsToFile(File actualFile, InputStream resultStream) throws IOException, JSONException {\n+    public static void writeResultsToFile(File actualFile, InputStream resultStream) throws Exception {\n         BufferedWriter writer = new BufferedWriter(new FileWriter(actualFile));\n         try {\n             JsonFactory jsonFactory = new JsonFactory();\n@@ -176,10 +176,10 @@ public static void writeResultsToFile(File actualFile, InputStream resultStream)\n                             writer.write(record);\n                         }\n                     } else {\n-                        String summary = resultParser.getValueAsString();\n                         if (key.equals(\"summary\")) {\n+                            String summary = resultParser.nextTextValue();\n                             writer.write(summary);\n-                            throw new JsonMappingException(\"Could not find results key in the JSON Object\");\n+                            throw new Exception(\"Could not find results key in the JSON Object, result file is at \" + actualFile);\n                         }\n                     }\n                 }\n@@ -377,86 +377,75 @@ public static void executeTest(String actualPath, TestCaseContext testCaseCtx, P\n             for (TestFileContext ctx : testFileCtxs) {\n                 testFile = ctx.getFile();\n                 statement = TestsUtils.readTestFile(testFile);\n+                InputStream resultStream;\n                 try {\n                     switch (ctx.getType()) {\n                         case \"ddl\":\n                             TestsUtils.executeDDL(statement);\n                             break;\n                         case \"update\":\n-\n                             //isDmlRecoveryTest: set IP address\n                             if (isDmlRecoveryTest && statement.contains(\"nc1://\")) {\n                                 statement = statement\n                                         .replaceAll(\"nc1://\", \"127.0.0.1://../../../../../../asterix-app/\");\n-\n                             }\n \n                             TestsUtils.executeUpdate(statement);\n                             break;\n                         case \"query\":\n-                            try {\n-                                // isDmlRecoveryTest: insert Crash and Recovery\n-                                if (isDmlRecoveryTest) {\n-                                    executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator\n-                                            + \"dml_recovery\" + File.separator + \"kill_cc_and_nc.sh\");\n-                                    executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator\n-                                            + \"dml_recovery\" + File.separator + \"stop_and_start.sh\");\n-                                }\n+                            // isDmlRecoveryTest: insert Crash and Recovery\n+                            if (isDmlRecoveryTest) {\n+                                executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator + \"dml_recovery\"\n+                                        + File.separator + \"kill_cc_and_nc.sh\");\n+                                executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator + \"dml_recovery\"\n+                                        + File.separator + \"stop_and_start.sh\");\n+                            }\n \n-                                InputStream resultStream = executeQuery(statement);\n-                                expectedResultFile = expectedResultFileCtxs.get(queryCount).getFile();\n+                            resultStream = executeQuery(statement);\n+                            if (queryCount >= expectedResultFileCtxs.size()) {\n+                                throw new IllegalStateException(\"no result file for \" + testFile.toString());\n+                            }\n+                            expectedResultFile = expectedResultFileCtxs.get(queryCount).getFile();\n \n-                                File actualFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \".adm\");\n-                                TestsUtils.writeResultsToFile(actualFile, resultStream);\n+                            File actualFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \".adm\");\n+                            TestsUtils.writeResultsToFile(actualFile, resultStream);\n \n-                                File actualResultFile = testCaseCtx.getActualResultFile(cUnit, new File(actualPath));\n-                                actualResultFile.getParentFile().mkdirs();\n+                            File actualResultFile = testCaseCtx.getActualResultFile(cUnit, new File(actualPath));\n+                            actualResultFile.getParentFile().mkdirs();\n+\n+                            TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n+                                    expectedResultFile, actualFile);\n+                            LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\" + cUnit.getName()\n+                                    + \" PASSED \");\n \n-                                TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n-                                        expectedResultFile, actualFile);\n-                                LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n-                                        + cUnit.getName() + \" PASSED \");\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n                             queryCount++;\n                             break;\n                         case \"mgx\":\n                             executeManagixCommand(statement);\n                             break;\n                         case \"txnqbc\": //qbc represents query before crash\n-                            try {\n-                                InputStream resultStream = executeQuery(statement);\n-                                qbcFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \"_qbc.adm\");\n-                                qbcFile.getParentFile().mkdirs();\n-                                TestsUtils.writeResultsToFile(qbcFile, resultStream);\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n+                            resultStream = executeQuery(statement);\n+                            qbcFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \"_qbc.adm\");\n+                            qbcFile.getParentFile().mkdirs();\n+                            TestsUtils.writeResultsToFile(qbcFile, resultStream);\n                             break;\n                         case \"txnqar\": //qar represents query after recovery\n-                            try {\n-\n-                                InputStream resultStream = executeQuery(statement);\n-\n-                                qarFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \"_qar.adm\");\n-                                qarFile.getParentFile().mkdirs();\n-                                TestsUtils.writeResultsToFile(qarFile, resultStream);\n-\n-                                TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n-                                        qbcFile, qarFile);\n-\n-                                LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n-                                        + cUnit.getName() + \" PASSED \");\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n+                            resultStream = executeQuery(statement);\n+                            qarFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \"_qar.adm\");\n+                            qarFile.getParentFile().mkdirs();\n+                            TestsUtils.writeResultsToFile(qarFile, resultStream);\n+\n+                            TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n+                                    qbcFile, qarFile);\n+\n+                            LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n+                                    + cUnit.getName() + \" PASSED \");\n                             break;\n                         case \"txneu\": //eu represents erroneous update\n                             try {\n@@ -502,5 +491,4 @@ public static void executeTest(String actualPath, TestCaseContext testCaseCtx, P\n             }\n         }\n     }\n-\n }", "filename": "asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java"}, {"additions": 25, "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java", "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java", "sha": "04c10a506a3e5981db87a86912e374b9ee9367e9", "changes": 69, "status": "modified", "deletions": 44, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5", "patch": "@@ -60,66 +60,47 @@ public TestCase getTestCase() {\n         return testCase;\n     }\n \n-    public List<TestFileContext> getTestFiles(CompilationUnit cUnit) {\n+    public List<TestFileContext> getFilesInDir(String basePath, String dirName, boolean withType) {\n         List<TestFileContext> testFileCtxs = new ArrayList<TestFileContext>();\n \n         File path = tsRoot;\n-        path = new File(path, testSuite.getQueryOffsetPath());\n+        path = new File(path, basePath);\n         path = new File(path, testCase.getFilePath());\n-        path = new File(path, cUnit.getName());\n+        path = new File(path, dirName);\n \n-        String fileNames[] = path.list();\n-        for (String fName : fileNames) {\n-            if (fName.startsWith(\".\")) {\n-                continue;\n-            }\n-            \n-            File testFile = new File(path, fName);\n-            TestFileContext tfsc = new TestFileContext(testFile);\n-            String[] nameSplits = fName.split(\"\\\\.\");\n-            if (nameSplits.length < 3) {\n-                throw new IllegalArgumentException(\"Test file '\" + cUnit.getName() + File.separatorChar\n-                        + fName + \"' does not have the proper test file name format.\");\n-            }\n-            tfsc.setSeqNum(nameSplits[nameSplits.length - 3]);\n-            tfsc.setType(nameSplits[nameSplits.length - 2]);\n-            testFileCtxs.add(tfsc);\n-        }\n-        Collections.sort(testFileCtxs);\n-        return testFileCtxs;\n-    }\n-\n-    public List<TestFileContext> getExpectedResultFiles(CompilationUnit cUnit) {\n-        List<TestFileContext> resultFileCtxs = new ArrayList<TestFileContext>();\n-\n-        File path = tsRoot;\n-        path = new File(path, testSuite.getResultOffsetPath());\n-        path = new File(path, testCase.getFilePath());\n-        path = new File(path, cUnit.getOutputDir().getValue());\n-\n-        String fileNames[] = path.list();\n-\n-        if (fileNames != null) {\n+        if (path.isDirectory()) {\n+            String fileNames[] = path.list();\n             for (String fName : fileNames) {\n                 if (fName.startsWith(\".\")) {\n                     continue;\n                 }\n-                \n+\n                 File testFile = new File(path, fName);\n                 TestFileContext tfsc = new TestFileContext(testFile);\n                 String[] nameSplits = fName.split(\"\\\\.\");\n-                \n                 if (nameSplits.length < 3) {\n-                    throw new IllegalArgumentException(\"Test file '\" + cUnit.getName() + File.separatorChar\n-                            + fName + \"' does not have the proper test file name format.\");\n+                    throw new IllegalArgumentException(\"Test file '\" + dirName + File.separatorChar + fName\n+                            + \"' does not have the proper test file name format.\");\n                 }\n-                \n-                tfsc.setSeqNum(nameSplits[nameSplits.length - 2]);\n-                resultFileCtxs.add(tfsc);\n+                if (withType) {\n+                    tfsc.setSeqNum(nameSplits[nameSplits.length - 3]);\n+                    tfsc.setType(nameSplits[nameSplits.length - 2]);\n+                } else {\n+                    tfsc.setSeqNum(nameSplits[nameSplits.length - 2]);\n+                }\n+                testFileCtxs.add(tfsc);\n             }\n-            Collections.sort(resultFileCtxs);\n         }\n-        return resultFileCtxs;\n+        Collections.sort(testFileCtxs);\n+        return testFileCtxs;\n+    }\n+\n+    public List<TestFileContext> getTestFiles(CompilationUnit cUnit) {\n+        return getFilesInDir(testSuite.getQueryOffsetPath(), cUnit.getName(), true);\n+    }\n+\n+    public List<TestFileContext> getExpectedResultFiles(CompilationUnit cUnit) {\n+        return getFilesInDir(testSuite.getResultOffsetPath(), cUnit.getOutputDir().getValue(), false);\n     }\n \n     public File getActualResultFile(CompilationUnit cUnit, File actualResultsBase) {", "filename": "asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/pom.xml", "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/pom.xml", "sha": "74592ed571ffbf0da492c7d365c50550292b25bf", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/pom.xml?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5", "patch": "@@ -31,8 +31,8 @@\n     <metadata.tests>**/metadata/*Test.java</metadata.tests>\n     <execution.tests>**/ExecutionTest.java</execution.tests>\n     <invalid.tests>**/DmlTest.java</invalid.tests>\n-    <global.test.includes>**/*TestSuite.java,**/*Test.java</global.test.includes>\n-    <global.test.excludes>${optimizer.tests},${metadata.tests},${execution.tests},${invalid.tests}</global.test.excludes>\n+    <global.test.includes>**/*TestSuite.java,**/*Test.java,${execution.tests}</global.test.includes>\n+    <global.test.excludes>${optimizer.tests},${metadata.tests},${invalid.tests}</global.test.excludes>\n   </properties>\n \n \t<build>", "filename": "pom.xml"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/9d63f629aedd21e891a892d18b22811586da1818", "parent": "https://github.com/apache/asterixdb/commit/34fc9ef89967fdccdda8d31d571b0f26ae39f569", "message": "Add function signature check to Connect Feed\n\n1. Revise the exception info when apply an unknown function to feed.\n2. Fix the possible NPE in connect feed statement.\n3. Add test case for applying undefined function.\n\nChange-Id: I1462b394d84ea7e1eae5a03f98fe8cd39213eb8e\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1674\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>", "bug_id": "asterixdb_48", "file": [{"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java", "sha": "6a2b4e0bef609b8dfd0f89c4c0448f345592f995", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -2138,6 +2138,12 @@ private void handleConnectFeedStatement(MetadataProvider metadataProvider, State\n             ARecordType outputType = FeedMetadataUtil.getOutputType(feed, feed.getAdapterConfiguration(),\n                     ExternalDataConstants.KEY_TYPE_NAME);\n             List<FunctionSignature> appliedFunctions = cfs.getAppliedFunctions();\n+            for (FunctionSignature func : appliedFunctions) {\n+                if (MetadataManager.INSTANCE.getFunction(mdTxnCtx, func) == null) {\n+                    throw new CompilationException(ErrorCode.FEED_CONNECT_FEED_APPLIED_INVALID_FUNCTION,\n+                            func.getName());\n+                }\n+            }\n             fc = MetadataManager.INSTANCE.getFeedConnection(metadataProvider.getMetadataTxnContext(), dataverseName,\n                     feedName, datasetName);\n             if (fc != null) {", "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java"}, {"additions": 39, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql", "sha": "d294772f40f1b318fa695b8675b1614570b50424", "changes": 39, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop dataverse externallibtest if exists;\n+create dataverse externallibtest;\n+use dataverse externallibtest;\n+\n+create type TweetInputType as closed {\n+  id: string,\n+  username : string,\n+  location : string,\n+  text : string,\n+  timestamp : string\n+}\n+\n+create feed TweetFeed\n+using localfs\n+((\"type-name\"=\"TweetInputType\"),\n+(\"path\"=\"asterix_nc1://data/twitter/obamatweets.adm\"),\n+(\"format\"=\"adm\"));\n+\n+create dataset TweetsFeedIngest(TweetInputType)\n+primary key id;", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql"}, {"additions": 26, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql", "sha": "a2a00babf6fcd35188c8ce90c2721008b468fee6", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+use dataverse externallibtest;\n+\n+set wait-for-completion-feed \"true\";\n+\n+connect feed TweetFeed to dataset TweetsFeedIngest\n+apply function function_undefined;\n+\n+start feed TweetFeed;\n\\ No newline at end of file", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm", "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391", "changes": 0, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm?ref=9d63f629aedd21e891a892d18b22811586da1818", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml", "sha": "83d55813439079bf9331a6f02574d084bc95f19e", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -273,6 +273,12 @@\n         <output-dir compare=\"Text\">record-reader-with-malformed-input-stream</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"feeds\">\n+      <compilation-unit name=\"feed-with-undefined-function\">\n+        <output-dir compare=\"Text\">feed-with-undefined-function</output-dir>\n+        <expected-error>Cannot find function</expected-error>\n+      </compilation-unit>\n+    </test-case>\n   </test-group>\n   <test-group name=\"upsert\">\n     <test-case FilePath=\"upsert\">", "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java", "sha": "23d67278de9eee563afc5a1d786cf64ed36d1efe", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -179,6 +179,7 @@\n     public static final int FEED_METADATA_UTIL_UNEXPECTED_FEED_DATATYPE = 3080;\n     public static final int FEED_METADATA_SOCKET_ADAPTOR_SOCKET_NOT_PROPERLY_CONFIGURED = 3081;\n     public static final int FEED_METADATA_SOCKET_ADAPTOR_SOCKET_INVALID_HOST_NC = 3082;\n+    public static final int FEED_CONNECT_FEED_APPLIED_INVALID_FUNCTION = 3087;\n \n     private ErrorCode() {\n     }", "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties", "sha": "e1a54cf7024b5c5bc1db6db694a8f115cc8bc771", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -167,4 +167,5 @@\n 3079 = Cannot register runtime, active manager has been shutdown\n 3080 = Unexpected feed datatype '%1$s'\n 3081 = socket is not properly configured\n-3082 = \"Invalid %1$s %2$s as it is not part of the AsterixDB cluster. Valid choices are %3$s\"\n\\ No newline at end of file\n+3082 = \"Invalid %1$s %2$s as it is not part of the AsterixDB cluster. Valid choices are %3$s\"\n+3087 = Cannot find function %1$s\n\\ No newline at end of file", "filename": "asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj", "sha": "b92805b76962166fe3ee60ef12fae19f884e3421", "changes": 10, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -818,11 +818,10 @@ boolean IfNotExists() throws ParseException:\n     }\n }\n \n-List<FunctionSignature> ApplyFunction() throws ParseException:\n+void ApplyFunction(List<FunctionSignature> funcSigs) throws ParseException:\n {\n   FunctionName functioName = null;\n   String fqFunctionName = null;\n-  List<FunctionSignature> funcSigs = new ArrayList<FunctionSignature>();\n }\n {\n   <APPLY> <FUNCTION> functioName = FunctionName()\n@@ -837,9 +836,6 @@ List<FunctionSignature> ApplyFunction() throws ParseException:\n       funcSigs.add(new FunctionSignature(functioName.dataverse, fqFunctionName, 1));\n     }\n   )*\n-    {\n-        return funcSigs;\n-    }\n }\n \n String GetPolicy() throws ParseException:\n@@ -1167,14 +1163,14 @@ Statement FeedStatement() throws ParseException:\n   Pair<Identifier,Identifier> datasetNameComponents = null;\n \n   Map<String,String> configuration = null;\n-  List<FunctionSignature> appliedFunctions = null;\n+  List<FunctionSignature> appliedFunctions = new ArrayList<FunctionSignature>();\n   Statement stmt = null;\n   String policy = null;\n }\n {\n   (\n     <CONNECT> <FEED> feedNameComponents = QualifiedName() <TO> <DATASET> datasetNameComponents = QualifiedName()\n-    (appliedFunctions = ApplyFunction())? (policy = GetPolicy())?\n+    (ApplyFunction(appliedFunctions))? (policy = GetPolicy())?\n       {\n         stmt = new ConnectFeedStatement(feedNameComponents, datasetNameComponents, appliedFunctions, policy, getVarCounter());\n       }", "filename": "asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj", "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj", "sha": "69bfbc5242aa0c5e15f93e3429b32e556f34cdcc", "changes": 10, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj?ref=9d63f629aedd21e891a892d18b22811586da1818", "patch": "@@ -840,11 +840,10 @@ boolean IfNotExists() throws ParseException:\n     }\n }\n \n-List<FunctionSignature> ApplyFunction() throws ParseException:\n+void ApplyFunction(List<FunctionSignature> funcSigs) throws ParseException:\n {\n   FunctionName functioName = null;\n   String fqFunctionName = null;\n-  List<FunctionSignature> funcSigs = new ArrayList<FunctionSignature>();\n }\n {\n   <APPLY> <FUNCTION> functioName = FunctionName()\n@@ -859,9 +858,6 @@ List<FunctionSignature> ApplyFunction() throws ParseException:\n         funcSigs.add(new FunctionSignature(functioName.dataverse, fqFunctionName, 1));\n       }\n   )*\n-    {\n-        return funcSigs;\n-    }\n }\n \n String GetPolicy() throws ParseException:\n@@ -1254,14 +1250,14 @@ Statement ConnectStatement() throws ParseException:\n   Pair<Identifier,Identifier> datasetNameComponents = null;\n \n   Map<String,String> configuration = null;\n-  List<FunctionSignature> appliedFunctions = null;\n+  List<FunctionSignature> appliedFunctions = new ArrayList<FunctionSignature>();\n   Statement stmt = null;\n   String policy = null;\n }\n {\n   (\n     <FEED> feedNameComponents = QualifiedName() <TO> Dataset() datasetNameComponents = QualifiedName()\n-    (appliedFunctions = ApplyFunction())?  (policy = GetPolicy())?\n+    (ApplyFunction(appliedFunctions))?  (policy = GetPolicy())?\n       {\n         stmt = new ConnectFeedStatement(feedNameComponents, datasetNameComponents, appliedFunctions,\n          policy, getVarCounter());", "filename": "asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/84ddcb998e908cf4f8f27275aa6855063c14b3f0", "parent": "https://github.com/apache/asterixdb/commit/c10677f36fd1de1ce1a984419e29718a1cd82f55", "message": "Fix for ASTERIXDB-1200\n\nFixes an issue where in the Hyracks integration tests,\nif the result size is 0, a NPE is thrown instead of\nan assert passing or failing.\n\nChange-Id: Ib519882b9cbca941addcd66232c176a2eaeecc4b\nReviewed-on: https://asterix-gerrit.ics.uci.edu/524\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>", "bug_id": "asterixdb_49", "file": [{"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/84ddcb998e908cf4f8f27275aa6855063c14b3f0/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java", "blob_url": "https://github.com/apache/asterixdb/blob/84ddcb998e908cf4f8f27275aa6855063c14b3f0/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java", "sha": "7a339b774c393ab10d8df1f01b11c56961d45d13", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java?ref=84ddcb998e908cf4f8f27275aa6855063c14b3f0", "patch": "@@ -145,7 +145,6 @@ protected void runTest(JobSpecification spec) throws Exception {\n         hcc.waitForCompletion(jobId);\n     }\n \n-\n     protected List<String> readResults(JobSpecification spec, JobId jobId, ResultSetId resultSetId) throws Exception {\n         int nReaders = 1;\n \n@@ -190,13 +189,18 @@ protected boolean runTestAndCompareResults(JobSpecification spec, String[] expec\n             results = readResults(spec, jobId, spec.getResultSetIds().get(i));\n             BufferedReader expectedFile = new BufferedReader(new FileReader(expectedFileNames[i]));\n \n+            //We're expecting some sort of result.\n+            Assert.assertTrue(results != null);\n+            Assert.assertTrue(results.size() > 0);\n+\n             String expectedLine, actualLine;\n             int j = 0;\n             while ((expectedLine = expectedFile.readLine()) != null) {\n                 actualLine = results.get(j).trim();\n                 Assert.assertEquals(expectedLine, actualLine);\n                 j++;\n             }\n+            //We also expect the same amount of results.\n             Assert.assertEquals(j, results.size());\n             expectedFile.close();\n         }\n@@ -212,7 +216,7 @@ protected void runTestAndStoreResult(JobSpecification spec, File file) throws Ex\n         List<String> results;\n         for (int i = 0; i < spec.getResultSetIds().size(); i++) {\n             results = readResults(spec, jobId, spec.getResultSetIds().get(i));\n-            for(String str : results) {\n+            for (String str : results) {\n                 output.write(str);\n             }\n         }\n@@ -229,4 +233,4 @@ protected File createTempFile() throws IOException {\n         outputFiles.add(tempFile);\n         return tempFile;\n     }\n-}\n\\ No newline at end of file\n+}", "filename": "hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/df9ccbb7989358e706fd0c858ea215ee0e03b30f", "parent": "https://github.com/apache/asterixdb/commit/2fe1d18dbf1825a653c340473f3b53fc9116e8b6", "message": "Fix Running 'asterixnc' Without Defining Node Id\n\nRunning 'asterixnc -help' should emit the usage.  Running without -help\nbut also without supplying the node id, should also display an error\nmessage and emit the usage.  A recent regression caused this to instead\nthrow an NPE, fixed by this change.\n\nChange-Id: I7c454619f4a6611e6bdc37a0169b682c1d3a7e12\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1560\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_50", "file": [{"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/df9ccbb7989358e706fd0c858ea215ee0e03b30f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/controllers/NCConfig.java", "blob_url": "https://github.com/apache/asterixdb/blob/df9ccbb7989358e706fd0c858ea215ee0e03b30f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/controllers/NCConfig.java", "sha": "a65719e8fdbbb72b76a5dab01bc031e1ad3c6f0c", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/controllers/NCConfig.java?ref=df9ccbb7989358e706fd0c858ea215ee0e03b30f", "patch": "@@ -221,7 +221,7 @@ public NCConfig(String nodeId) {\n \n     public NCConfig(String nodeId, ConfigManager configManager) {\n         super(configManager);\n-        this.appConfig = configManager.getNodeEffectiveConfig(nodeId);\n+        this.appConfig = nodeId == null ? configManager.getAppConfig() : configManager.getNodeEffectiveConfig(nodeId);\n         configManager.register(Option.class);\n         setNodeId(nodeId);\n         this.nodeId = nodeId;", "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-common/src/main/java/org/apache/hyracks/control/common/controllers/NCConfig.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/6b889c7f092adcb6c3c83a46bf72fd6da6b8485e", "parent": "https://github.com/apache/asterixdb/commit/4cb685a2e33bbde8e4f22cdc70bb05a0e18e0172", "message": "cleanup\n\n - refactor getNumberOfIODevices\n - remove unused inner class AsterixCluster\n - replace NPE with an IllegalStateException with a message\n - cleaner log message\n\nChange-Id: Iecad33440bb154b7e438f49755a1d8a2b0c8d677\nReviewed-on: http://fulliautomatix.ics.uci.edu:8443/117\nReviewed-by: Ian Maxon <imaxon@uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>", "bug_id": "asterixdb_51", "file": [{"additions": 7, "raw_url": "https://github.com/apache/asterixdb/raw/6b889c7f092adcb6c3c83a46bf72fd6da6b8485e/asterix-app/src/main/java/edu/uci/ics/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java", "blob_url": "https://github.com/apache/asterixdb/blob/6b889c7f092adcb6c3c83a46bf72fd6da6b8485e/asterix-app/src/main/java/edu/uci/ics/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java", "sha": "1f0c91dcb5d2a0e3dea0adcc17f59d9e42a67dfb", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/main/java/edu/uci/ics/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java?ref=6b889c7f092adcb6c3c83a46bf72fd6da6b8485e", "patch": "@@ -58,7 +58,7 @@ public void start(INCApplicationContext ncAppCtx, String[] args) throws Exceptio\n         ncApplicationContext = ncAppCtx;\n         nodeId = ncApplicationContext.getNodeId();\n         if (LOGGER.isLoggable(Level.INFO)) {\n-            LOGGER.info(\"Starting Asterix node controller  TAKE NOTE: \" + nodeId);\n+            LOGGER.info(\"Starting Asterix node controller: \" + nodeId);\n         }\n \n         runtimeContext = new AsterixAppRuntimeContext(ncApplicationContext);\n@@ -118,7 +118,6 @@ public void stop() throws Exception {\n \n     @Override\n     public void notifyStartupComplete() throws Exception {\n-        IAsterixStateProxy proxy = (IAsterixStateProxy) ncApplicationContext.getDistributedState();\n         AsterixMetadataProperties metadataProperties = ((IAsterixPropertiesProvider) runtimeContext)\n                 .getMetadataProperties();\n \n@@ -135,13 +134,19 @@ public void notifyStartupComplete() throws Exception {\n             localResourceRepository.initialize(nodeId, metadataProperties.getStores().get(nodeId)[0], true, null);\n         }\n \n+        IAsterixStateProxy proxy = null;\n         isMetadataNode = nodeId.equals(metadataProperties.getMetadataNodeName());\n         if (isMetadataNode) {\n             if (LOGGER.isLoggable(Level.INFO)) {\n                 LOGGER.info(\"Bootstrapping metadata\");\n             }\n             MetadataNode.INSTANCE.initialize(runtimeContext);\n \n+            proxy = (IAsterixStateProxy) ncApplicationContext.getDistributedState();\n+            if (proxy == null) {\n+                throw new IllegalStateException(\"Metadata node cannot access distributed state\");\n+            }\n+\n             // This is a special case, we just give the metadataNode directly.\n             // This way we can delay the registration of the metadataNode until\n             // it is completely initialized.", "filename": "asterix-app/src/main/java/edu/uci/ics/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java"}, {"additions": 9, "raw_url": "https://github.com/apache/asterixdb/raw/6b889c7f092adcb6c3c83a46bf72fd6da6b8485e/asterix-om/src/main/java/edu/uci/ics/asterix/om/util/AsterixClusterProperties.java", "blob_url": "https://github.com/apache/asterixdb/blob/6b889c7f092adcb6c3c83a46bf72fd6da6b8485e/asterix-om/src/main/java/edu/uci/ics/asterix/om/util/AsterixClusterProperties.java", "sha": "8e393d72a547776d212c00d0a64dc56afd0a13c0", "changes": 86, "status": "modified", "deletions": 77, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/edu/uci/ics/asterix/om/util/AsterixClusterProperties.java?ref=6b889c7f092adcb6c3c83a46bf72fd6da6b8485e", "patch": "@@ -3,9 +3,9 @@\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * you may obtain a copy of the License from\n- * \n+ *\n  *     http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -17,10 +17,10 @@\n import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import java.util.HashSet;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -97,34 +97,27 @@ public synchronized void addNCConfiguration(String nodeId, Map<String, String> c\n \n     /**\n      * Returns the number of IO devices configured for a Node Controller\n-     * \n+     *\n      * @param nodeId\n      *            unique identifier of the Node Controller\n      * @return number of IO devices. -1 if the node id is not valid. A node id\n      *         is not valid if it does not correspond to the set of registered\n      *         Node Controllers.\n      */\n-    public synchronized int getNumberOfIODevices(String nodeId) {\n-        Map<String, String> ncConfig = ncConfiguration.get(nodeId);\n-        if (ncConfig == null) {\n-            if (LOGGER.isLoggable(Level.WARNING)) {\n-                LOGGER.warning(\"Configuration parameters for nodeId \" + nodeId\n-                        + \" not found. The node has not joined yet or has left.\");\n-            }\n-            return -1;\n-        }\n-        return ncConfig.get(IO_DEVICES).split(\",\").length;\n+    public int getNumberOfIODevices(String nodeId) {\n+        String[] ioDevs = getIODevices(nodeId);\n+        return ioDevs == null ? -1 : ioDevs.length;\n     }\n \n     /**\n      * Returns the IO devices configured for a Node Controller\n-     * \n+     *\n      * @param nodeId\n      *            unique identifier of the Node Controller\n      * @return a list of IO devices. null if node id is not valid. A node id is not valid\n      *         if it does not correspond to the set of registered Node Controllers.\n      */\n-    public String[] getIODevices(String nodeId) {\n+    public synchronized String[] getIODevices(String nodeId) {\n         Map<String, String> ncConfig = ncConfiguration.get(nodeId);\n         if (ncConfig == null) {\n             if (LOGGER.isLoggable(Level.WARNING)) {\n@@ -181,67 +174,6 @@ private synchronized void resetClusterPartitionConstraint() {\n         clusterPartitionConstraint = new AlgebricksAbsolutePartitionConstraint(cluster);\n     }\n \n-    private static class AsterixCluster {\n-\n-        private final String asterixInstance;\n-        private Map<String, AsterixNode> asterixNodes;\n-\n-        public AsterixCluster(Cluster cluster) {\n-            asterixInstance = cluster.getInstanceName();\n-            asterixNodes = new HashMap<String, AsterixNode>();\n-            for (Node node : cluster.getNode()) {\n-                AsterixNode aNode = new AsterixNode(node, AsterixNode.NodeRole.PARTICIPANT,\n-                        AsterixNode.NodeState.INACTIVE);\n-                asterixNodes.put(asterixInstance + \"_\" + node.getId(), aNode);\n-            }\n-\n-            for (Node node : cluster.getSubstituteNodes().getNode()) {\n-                AsterixNode aNode = new AsterixNode(node, AsterixNode.NodeRole.SUBSTITUTE,\n-                        AsterixNode.NodeState.INACTIVE);\n-                asterixNodes.put(asterixInstance + \"_\" + node.getId(), aNode);\n-            }\n-        }\n-\n-        private static class AsterixNode {\n-\n-            private final Node node;\n-            private NodeRole role;\n-            private NodeState state;\n-\n-            public enum NodeRole {\n-                PARTICIPANT,\n-                SUBSTITUTE\n-            }\n-\n-            public enum NodeState {\n-                ACTIVE,\n-                INACTIVE\n-            }\n-\n-            public AsterixNode(Node node, NodeRole role, NodeState state) {\n-                this.node = node;\n-                this.role = role;\n-                this.state = state;\n-            }\n-\n-            @Override\n-            public String toString() {\n-                return node.getId() + \"_\" + role + \"_\" + state;\n-            }\n-        }\n-\n-        public void notifyChangeState(String nodeId, AsterixNode.NodeRole newRole, AsterixNode.NodeState newState) {\n-            AsterixNode node = asterixNodes.get(nodeId);\n-            if (node != null) {\n-                node.role = newRole;\n-                node.state = newState;\n-            } else {\n-                throw new IllegalStateException(\"Unknown nodeId\" + nodeId);\n-            }\n-\n-        }\n-    }\n-\n     public boolean isGlobalRecoveryCompleted() {\n         return globalRecoveryCompleted;\n     }", "filename": "asterix-om/src/main/java/edu/uci/ics/asterix/om/util/AsterixClusterProperties.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/d1bf370e721e1c92e136e66a8adcd9442d7d6c1b", "parent": "https://github.com/apache/asterixdb/commit/751315f870ed6c297efb96751678eeb620d7335b", "message": "Fix ASTERIXDB-1089\n\nThis fixes a case where an NPE is thrown when a substitute node joins but\nno substitute nodes are specified in the cluster config\n\nChange-Id: I8977d91ea82cd3a0538a84dc6d727d94fe2ece1d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/508\nReviewed-by: Till Westmann <tillw@apache.org>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Murtadha Hubail <hubailmor@gmail.com>\nReviewed-by: Keren-Audrey Ouaknine <kereno@gmail.com>", "bug_id": "asterixdb_52", "file": [{"additions": 12, "raw_url": "https://github.com/apache/asterixdb/raw/d1bf370e721e1c92e136e66a8adcd9442d7d6c1b/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java", "blob_url": "https://github.com/apache/asterixdb/blob/d1bf370e721e1c92e136e66a8adcd9442d7d6c1b/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java", "sha": "2cd6a1a36bacad8283c8f7364ec6139648d49f52", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java?ref=d1bf370e721e1c92e136e66a8adcd9442d7d6c1b", "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.rmi.server.UnicastRemoteObject;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -38,6 +39,7 @@\n import org.apache.asterix.common.transactions.IRecoveryManager.SystemState;\n import org.apache.asterix.event.schema.cluster.Cluster;\n import org.apache.asterix.event.schema.cluster.Node;\n+import org.apache.asterix.event.schema.cluster.SubstituteNodes;\n import org.apache.asterix.metadata.MetadataManager;\n import org.apache.asterix.metadata.MetadataNode;\n import org.apache.asterix.metadata.api.IAsterixStateProxy;\n@@ -295,11 +297,20 @@ private void updateOnNodeJoin() {\n         if (!metadataProperties.getNodeNames().contains(nodeId)) {\n             metadataProperties.getNodeNames().add(nodeId);\n             Cluster cluster = AsterixClusterProperties.INSTANCE.getCluster();\n+            if (cluster == null) {\n+                throw new IllegalStateException(\"No cluster configuration found for this instance\");\n+            }\n             String asterixInstanceName = cluster.getInstanceName();\n             AsterixTransactionProperties txnProperties = ((IAsterixPropertiesProvider) runtimeContext)\n                     .getTransactionProperties();\n             Node self = null;\n-            for (Node node : cluster.getSubstituteNodes().getNode()) {\n+            List<Node> nodes;\n+            if (cluster.getSubstituteNodes() != null) {\n+                nodes = cluster.getSubstituteNodes().getNode();\n+            } else {\n+                throw new IllegalStateException(\"Unknown node joining the cluster\");\n+            }\n+            for (Node node : nodes) {\n                 String ncId = asterixInstanceName + \"_\" + node.getId();\n                 if (ncId.equalsIgnoreCase(nodeId)) {\n                     String storeDir = node.getStore() == null ? cluster.getStore() : node.getStore();", "filename": "asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/NCApplicationEntryPoint.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/02b35a1bf98f4168dae91fa68c14d7e062bfd032", "parent": "https://github.com/apache/asterixdb/commit/442e49b9f174717035d0f4ebcc0810f5f3f3f29c", "message": "ASTERIXDB-1378 Fix NPE on Feed Connect After Restart\n\nThis issue was caused by the way type traits are computed for each\nindex. since we have duplicate code to create the index dataflow\nhelper, we had to fix the way type traits are created in all of\nthese different places. We propably need to do further refactoring\nto have common code for creating index dataflow helper instances.\n\nChange-Id: If8f8696d252868a8cce0afdbaeda0dd046f99186\nReviewed-on: https://asterix-gerrit.ics.uci.edu/766\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>", "bug_id": "asterixdb_53", "file": [{"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java", "sha": "905269600204bc754fa1a825f9530a833fc4cc20", "changes": 10, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -69,7 +69,7 @@\n \n     public static JobSpecification createDropDatasetJobSpec(CompiledDatasetDropStatement datasetDropStmt,\n             AqlMetadataProvider metadataProvider)\n-                    throws AlgebricksException, HyracksDataException, RemoteException, ACIDException, AsterixException {\n+            throws AlgebricksException, HyracksDataException, RemoteException, ACIDException, AsterixException {\n \n         String dataverseName = null;\n         if (datasetDropStmt.getDataverseName() != null) {\n@@ -222,26 +222,22 @@ public static JobSpecification compactDatasetJobSpec(Dataverse dataverse, String\n             throw new AsterixException(\"Could not find dataset \" + datasetName + \" in dataverse \" + dataverseName);\n         }\n         boolean temp = dataset.getDatasetDetails().isTemp();\n-\n         ARecordType itemType = (ARecordType) metadata.findType(dataset.getItemTypeDataverseName(),\n                 dataset.getItemTypeName());\n+        ARecordType metaItemType = DatasetUtils.getMetaType(metadata, dataset);\n         JobSpecification spec = JobSpecificationUtils.createJobSpecification();\n         IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                 itemType, format.getBinaryComparatorFactoryProvider());\n-        ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+        ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n         int[] blooFilterKeyFields = DatasetUtils.createBloomFilterKeyFields(dataset);\n-\n         ITypeTraits[] filterTypeTraits = DatasetUtils.computeFilterTypeTraits(dataset, itemType);\n         IBinaryComparatorFactory[] filterCmpFactories = DatasetUtils.computeFilterBinaryComparatorFactories(dataset,\n                 itemType, format.getBinaryComparatorFactoryProvider());\n         int[] filterFields = DatasetUtils.createFilterFields(dataset);\n         int[] btreeFields = DatasetUtils.createBTreeFieldsWhenThereisAFilter(dataset);\n-\n         Pair<IFileSplitProvider, AlgebricksPartitionConstraint> splitsAndConstraint = metadata\n                 .splitProviderAndPartitionConstraintsForDataset(dataverseName, datasetName, datasetName, temp);\n-\n         AsterixStorageProperties storageProperties = AsterixAppContextInfo.getInstance().getStorageProperties();\n-\n         Pair<ILSMMergePolicyFactory, Map<String, String>> compactionInfo = DatasetUtils.getMergePolicyFactory(dataset,\n                 metadata.getMetadataTxnContext());\n         LSMTreeIndexCompactOperatorDescriptor compactOp = new LSMTreeIndexCompactOperatorDescriptor(spec,", "filename": "asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java", "sha": "e372d31a62ab8c4ae91c5cdcf7cd295edb24ca67", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -48,9 +48,10 @@\n             File.separator);\n \n     protected static final String TEST_CONFIG_FILE_NAME = \"asterix-build-configuration.xml\";\n-\n     protected static AsterixTransactionProperties txnProperties;\n-    private final static TestExecutor testExecutor = new TestExecutor();\n+    private static final TestExecutor testExecutor = new TestExecutor();\n+    private static final boolean cleanupOnStart = true;\n+    private static final boolean cleanupOnStop = true;\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n@@ -60,7 +61,7 @@ public static void setUp() throws Exception {\n             // remove library directory\n             TestLibrarian.removeLibraryDir();\n             testExecutor.setLibrarian(new TestLibrarian());\n-            ExecutionTestUtil.setUp();\n+            ExecutionTestUtil.setUp(cleanupOnStart);\n         } catch (Throwable th) {\n             th.printStackTrace();\n             throw th;\n@@ -71,7 +72,7 @@ public static void setUp() throws Exception {\n     public static void tearDown() throws Exception {\n         // remove library directory\n         TestLibrarian.removeLibraryDir();\n-        ExecutionTestUtil.tearDown();\n+        ExecutionTestUtil.tearDown(cleanupOnStop);\n     }\n \n     @Parameters(name = \"ExecutionTest {index}: {0}\")", "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java", "sha": "d919c92f60f4963e04b629091260e9b05ba768bb", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -43,7 +43,7 @@\n \n     protected static TestGroup FailedGroup;\n \n-    public static void setUp() throws Exception {\n+    public static void setUp(boolean cleanup) throws Exception {\n         System.out.println(\"Starting setup\");\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"Starting setup\");\n@@ -53,7 +53,7 @@ public static void setUp() throws Exception {\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"initializing pseudo cluster\");\n         }\n-        AsterixHyracksIntegrationUtil.init(true);\n+        AsterixHyracksIntegrationUtil.init(cleanup);\n \n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"initializing HDFS\");\n@@ -81,9 +81,9 @@ private static void validateBufferCacheState() {\n         }\n     }\n \n-    public static void tearDown() throws Exception {\n+    public static void tearDown(boolean cleanup) throws Exception {\n         // validateBufferCacheState(); <-- Commented out until bug is fixed -->\n-        AsterixHyracksIntegrationUtil.deinit(true);\n+        AsterixHyracksIntegrationUtil.deinit(cleanup);\n         File outdir = new File(PATH_ACTUAL);\n         File[] files = outdir.listFiles();\n         if (files == null || files.length == 0) {", "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java", "sha": "b827a0da77ac999bf06293c38e4a5fff1de251e6", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -51,20 +51,22 @@\n     protected static final String TEST_CONFIG_FILE_NAME = \"asterix-build-configuration.xml\";\n \n     protected static AsterixTransactionProperties txnProperties;\n-    private final static TestExecutor testExecutor = new TestExecutor();\n+    private static final TestExecutor testExecutor = new TestExecutor();\n+    private static final boolean cleanupOnStart = true;\n+    private static final boolean cleanupOnStop = true;\n \n     protected static TestGroup FailedGroup;\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n         File outdir = new File(PATH_ACTUAL);\n         outdir.mkdirs();\n-        ExecutionTestUtil.setUp();\n+        ExecutionTestUtil.setUp(cleanupOnStart);\n     }\n \n     @AfterClass\n     public static void tearDown() throws Exception {\n-        ExecutionTestUtil.tearDown();\n+        ExecutionTestUtil.tearDown(cleanupOnStop);\n         AsterixHyracksIntegrationUtil.removeTestStorageFiles();\n     }\n ", "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java", "sha": "387e2dc3e00e3cb0e319199e5c6ce253189f02fd", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -85,6 +85,9 @@ public void start(IFrameWriter writer) throws HyracksDataException {\n                 }\n                 tupleForwarder.addTuple(tb);\n             }\n+        } catch (InterruptedException e) {\n+            //TODO: Find out what could cause an interrupted exception beside termination of a job/feed\n+            LOGGER.warn(\"Feed has been interrupted. Closing the feed\");\n         } catch (Exception e) {\n             failed = true;\n             tupleForwarder.flush();", "filename": "asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql", "sha": "cc46136086bef2ff6f9d9dd534b382807376299a", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1 @@\n+create_and_start.sh", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql"}, {"additions": 58, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql", "sha": "d3317e41bf2b606dcabdb5cd61482792e64b55c9", "changes": 58, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed with meta-data and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+\n+drop dataverse KeyVerse if exists;\n+create dataverse KeyVerse;\n+use dataverse KeyVerse;\n+\n+create type DocumentType as open{\n+};\n+\n+create type KVMetaType as open{\n+\"key\":string,\n+bucket:string,\n+vbucket:int32,\n+seq:int64,\n+cas:int64,\n+creationTime:int64,\n+expiration:int32,\n+flags:int32,\n+revSeq:int64,\n+lockTime:int32\n+};\n+\n+create dataset KVStore(DocumentType) with meta(KVMetaType)primary key meta().\"key\";\n+\n+create feed KVChangeStream using adapter(\n+    (\"type-name\"=\"DocumentType\"),\n+    (\"meta-type-name\"=\"KVMetaType\"),\n+    (\"reader\"=\"kv_test\"),\n+    (\"parser\"=\"record-with-metadata\"),\n+    (\"format\"=\"dcp\"),\n+    (\"record-format\"=\"json\"),\n+    (\"change-feed\"=\"true\"),\n+    (\"key-indexes\"=\"0\"),\n+    (\"key-indicators\"=\"1\"),\n+    (\"num-of-records\"=\"1000\")\n+);\n\\ No newline at end of file", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql"}, {"additions": 27, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql", "sha": "7faf01340863ead3e1ee0102a892b76a20ce8a0e", "changes": 27, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed with meta-data and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+use dataverse KeyVerse;\n+\n+set wait-for-completion-feed \"true\";\n+connect feed KVChangeStream to dataset KVStore;\n\\ No newline at end of file", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql", "sha": "3ba1dc0e2f8a88caa6573165f74ca04503b7e4fc", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1 @@\n+stop_and_start.sh", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql"}, {"additions": 29, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql", "sha": "9db20a9a4aa31fc349c0f5e13a13c63e9ae7862a", "changes": 29, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+use dataverse KeyVerse;\n+\n+count(\n+    for $d in dataset KVStore\n+    return $d\n+);\n\\ No newline at end of file", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql", "sha": "10e1a51c440715e1e9b5a320ce7e88ada8219817", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1 @@\n+stop_and_delete.sh", "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm", "sha": "c31da8b3c449ed1fb8c6e37d77083f8a82d74e4a", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1 @@\n+804\n\\ No newline at end of file", "filename": "asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh", "sha": "945f01db9b3d8fd1eed3f07d906e1ac7fb194aa1", "changes": 1, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1 @@\n+$MANAGIX_HOME/bin/managix create -n nc1 -c $MANAGIX_HOME/clusters/local/local.xml;", "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh"}, {"additions": 3, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh", "sha": "d7deea3de811c5dacc09963570b93350635dc3f1", "changes": 3, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1,3 @@\n+$MANAGIX_HOME/bin/managix stop -n nc1;\n+$MANAGIX_HOME/bin/managix delete -n nc1;\n+", "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh", "sha": "1271a2b2062896f7811e995c9f9bc6044deed4bc", "changes": 2, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -0,0 +1,2 @@\n+$MANAGIX_HOME/bin/managix stop -n nc1;\n+$MANAGIX_HOME/bin/managix start -n nc1;", "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh"}, {"additions": 5, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/testsuite.xml", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/testsuite.xml", "sha": "0c12426a7e39cff4d0cc8f13aa696c7c7830054f", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/testsuite.xml?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -17,8 +17,12 @@\n  ! under the License.\n  !-->\n <test-suite xmlns=\"urn:xml.testframework.asterix.apache.org\" ResultOffsetPath=\"results\" QueryOffsetPath=\"queries\" QueryFileExtension=\".aql\">\n-\n   <test-group name=\"query_after_restart\">\n+      <test-case FilePath=\"query_after_restart\">\n+          <compilation-unit name=\"dataset-with-meta-record\">\n+              <output-dir compare=\"Text\">dataset-with-meta-record</output-dir>\n+          </compilation-unit>\n+      </test-case>\n       <test-case FilePath=\"query_after_restart\">\n           <compilation-unit name=\"external_index\">\n               <output-dir compare=\"Text\">external_index</output-dir>", "filename": "asterix-installer/src/test/resources/transactionts/testsuite.xml"}, {"additions": 9, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java", "sha": "90ebfb7757db9c2f7aa72fb05f13e6a2359ccfc7", "changes": 21, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -700,11 +700,11 @@ private IAdapterFactory getConfiguredAdapterFactory(Dataset dataset, String adap\n                 for (int i = 0; i < numPrimaryKeys; i++) {\n                     bloomFilterKeyFields[i] = i;\n                 }\n-\n-                typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+                // get meta item type\n+                ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+                typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n                 comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset, itemType,\n                         context.getBinaryComparatorFactoryProvider());\n-\n                 filterFields = DatasetUtils.createFilterFields(dataset);\n                 btreeFields = DatasetUtils.createBTreeFieldsWhenThereisAFilter(dataset);\n             }\n@@ -1089,7 +1089,7 @@ public boolean scannerOperatorIsLeaf(IDataSource<AqlSourceId> dataSource) {\n             String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n                     .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), itemTypeName).getDatatype();\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, null);\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                     itemType, context.getBinaryComparatorFactoryProvider());\n \n@@ -1174,12 +1174,10 @@ public boolean scannerOperatorIsLeaf(IDataSource<AqlSourceId> dataSource) {\n             Index primaryIndex = MetadataManager.INSTANCE.getIndex(mdTxnCtx, dataset.getDataverseName(),\n                     dataset.getDatasetName(), dataset.getDatasetName());\n             String indexName = primaryIndex.getIndexName();\n-\n-            String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n-                    .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), itemTypeName).getDatatype();\n-\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+                    .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), dataset.getItemTypeName()).getDatatype();\n+            ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n \n             IAsterixApplicationContextInfo appContext = (IAsterixApplicationContextInfo) context.getAppContext();\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n@@ -2347,9 +2345,8 @@ public void setLocks(Map<String, Integer> locks) {\n             String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n                     .getDatatype(mdTxnCtx, dataSource.getId().getDataverseName(), itemTypeName).getDatatype();\n-\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n-\n+            ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n             IAsterixApplicationContextInfo appContext = (IAsterixApplicationContextInfo) context.getAppContext();\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                     itemType, context.getBinaryComparatorFactoryProvider());", "filename": "asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java"}, {"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java", "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java", "sha": "0ac4f5600b154984b8e6d6959e9ca4dca5f91363", "changes": 17, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032", "patch": "@@ -35,6 +35,7 @@\n import org.apache.asterix.metadata.MetadataException;\n import org.apache.asterix.metadata.MetadataManager;\n import org.apache.asterix.metadata.MetadataTransactionContext;\n+import org.apache.asterix.metadata.declared.AqlMetadataProvider;\n import org.apache.asterix.metadata.entities.CompactionPolicy;\n import org.apache.asterix.metadata.entities.Dataset;\n import org.apache.asterix.metadata.entities.ExternalDatasetDetails;\n@@ -105,11 +106,6 @@\n         return bhffs;\n     }\n \n-    public static ITypeTraits[] computeTupleTypeTraits(Dataset dataset, ARecordType itemType)\n-            throws AlgebricksException {\n-        return computeTupleTypeTraits(dataset, itemType, null);\n-    }\n-\n     public static ITypeTraits[] computeTupleTypeTraits(Dataset dataset, ARecordType itemType, ARecordType metaItemType)\n             throws AlgebricksException {\n         if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n@@ -156,7 +152,7 @@\n \n     public static IBinaryComparatorFactory[] computeFilterBinaryComparatorFactories(Dataset dataset,\n             ARecordType itemType, IBinaryComparatorFactoryProvider comparatorFactoryProvider)\n-                    throws AlgebricksException {\n+            throws AlgebricksException {\n         if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n             return null;\n         }\n@@ -274,4 +270,13 @@ public static void writePropertyTypeRecord(String name, String value, DataOutput\n \n         propertyRecordBuilder.write(out, true);\n     }\n+\n+    public static ARecordType getMetaType(AqlMetadataProvider metadataProvider, Dataset dataset)\n+            throws AlgebricksException {\n+        if (dataset.hasMetaPart()) {\n+            return (ARecordType) metadataProvider.findType(dataset.getMetaItemTypeDataverseName(),\n+                    dataset.getMetaItemTypeName());\n+        }\n+        return null;\n+    }\n }", "filename": "asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/81b15019fec73d29c0757cc36afd516360fce34c", "parent": "https://github.com/apache/asterixdb/commit/9b3b54672a3a0215c6e1da827a30588e19fc1cd2", "message": "This change allows setting a local ordering property for assign operators. it is needed when variables that are created in the assign operator are sorted\n\nThe following commits from your working branch will be included:\n\ncommit 9e4abb36e6f50e0f73406f4603cdc79590ca7b06\nAuthor: Abdullah Alamoudi <bamousaa@gmail.com>\nDate:   Mon Feb 2 16:53:45 2015 +0300\n\n    added a TODO for deserialization\n\ncommit 78f7ee6fb04358d36156658202fb4478e47059e2\nAuthor: Abdullah Alamoudi <bamousaa@gmail.com>\nDate:   Mon Feb 2 16:30:56 2015 +0300\n\n    fixed NPE in substitue variable visitor\n\ncommit 6bb101e072e03aae2732613385589e1ae52b510c\nAuthor: Abdullah Alamoudi <bamousaa@gmail.com>\nDate:   Mon Feb 2 15:07:14 2015 +0300\n\n    Allow assign operator to have explicitly set ordering properties\n\nChange-Id: If995b47aa3c97ce60be952141699268341d31eea\nReviewed-on: http://fulliautomatix.ics.uci.edu:8443/214\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Taewoo Kim <wangsaeu@gmail.com>", "bug_id": "asterixdb_54", "file": [{"additions": 12, "raw_url": "https://github.com/apache/asterixdb/raw/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/AssignOperator.java", "blob_url": "https://github.com/apache/asterixdb/blob/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/AssignOperator.java", "sha": "9a8c428eefb8fb10968b545ec9ffe4837ffa6335", "changes": 13, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/AssignOperator.java?ref=81b15019fec73d29c0757cc36afd516360fce34c", "patch": "@@ -15,7 +15,6 @@\n package edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical;\n \n import java.util.List;\n-\n import org.apache.commons.lang3.mutable.Mutable;\n \n import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n@@ -25,6 +24,7 @@\n import edu.uci.ics.hyracks.algebricks.core.algebra.base.LogicalVariable;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.IVariableTypeEnvironment;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.VariableReferenceExpression;\n+import edu.uci.ics.hyracks.algebricks.core.algebra.properties.LocalOrderProperty;\n import edu.uci.ics.hyracks.algebricks.core.algebra.properties.VariablePropagationPolicy;\n import edu.uci.ics.hyracks.algebricks.core.algebra.typing.ITypingContext;\n import edu.uci.ics.hyracks.algebricks.core.algebra.typing.PropagatingTypeEnvironment;\n@@ -37,6 +37,8 @@\n  */\n \n public class AssignOperator extends AbstractAssignOperator {\n+\t\n+\tprivate LocalOrderProperty explicitOrderingProperty;\n \n     public AssignOperator(List<LogicalVariable> vars, List<Mutable<ILogicalExpression>> exprs) {\n         super(vars, exprs);\n@@ -105,4 +107,13 @@ public IVariableTypeEnvironment computeOutputTypeEnvironment(ITypingContext ctx)\n     public boolean requiresVariableReferenceExpressions() {\n         return false;\n     }\n+\n+    public LocalOrderProperty getExplicitOrderingProperty() {\n+\t\treturn explicitOrderingProperty;\n+\t}\n+\n+\tpublic void setExplicitOrderingProperty(\n+\t\t\tLocalOrderProperty explicitOrderingProperty) {\n+\t\tthis.explicitOrderingProperty = explicitOrderingProperty;\n+\t}\n }\n\\ No newline at end of file", "filename": "algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/AssignOperator.java"}, {"additions": 11, "raw_url": "https://github.com/apache/asterixdb/raw/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/visitors/SubstituteVariableVisitor.java", "blob_url": "https://github.com/apache/asterixdb/blob/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/visitors/SubstituteVariableVisitor.java", "sha": "695078a1a7ba00e24fb4c0977d1d7747173d27ff", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/visitors/SubstituteVariableVisitor.java?ref=81b15019fec73d29c0757cc36afd516360fce34c", "patch": "@@ -61,6 +61,7 @@\n import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.UnnestOperator;\n import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.WriteOperator;\n import edu.uci.ics.hyracks.algebricks.core.algebra.operators.logical.WriteResultOperator;\n+import edu.uci.ics.hyracks.algebricks.core.algebra.properties.OrderColumn;\n import edu.uci.ics.hyracks.algebricks.core.algebra.typing.ITypingContext;\n import edu.uci.ics.hyracks.algebricks.core.algebra.util.OperatorManipulationUtil;\n import edu.uci.ics.hyracks.algebricks.core.algebra.visitors.ILogicalOperatorVisitor;\n@@ -103,6 +104,16 @@ public Void visitAssignOperator(AssignOperator op, Pair<LogicalVariable, Logical\n                 op.getExpressions().get(i).getValue().substituteVar(pair.first, pair.second);\n             }\n         }\n+        // Substitute variables stored in ordering property\n+        if (op.getExplicitOrderingProperty() != null) {\n+            List<OrderColumn> orderColumns = op.getExplicitOrderingProperty().getOrderColumns();\n+            for (int i = 0; i < orderColumns.size(); i++) {\n+                OrderColumn oc = orderColumns.get(i);\n+                if (oc.getColumn().equals(pair.first)) {\n+                    orderColumns.set(i, new OrderColumn(pair.second, oc.getOrder()));\n+                }\n+            }\n+        }\n         substVarTypes(op, pair);\n         return null;\n     }", "filename": "algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/logical/visitors/SubstituteVariableVisitor.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/physical/AssignPOperator.java", "blob_url": "https://github.com/apache/asterixdb/blob/81b15019fec73d29c0757cc36afd516360fce34c/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/physical/AssignPOperator.java", "sha": "26313fbf0aaab3f485fad5e7cc2346362c0dee96", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/physical/AssignPOperator.java?ref=81b15019fec73d29c0757cc36afd516360fce34c", "patch": "@@ -47,8 +47,12 @@ public PhysicalOperatorTag getOperatorTag() {\n \n     @Override\n     public void computeDeliveredProperties(ILogicalOperator op, IOptimizationContext context) {\n+        AssignOperator assignOp = (AssignOperator) op;\n         ILogicalOperator op2 = op.getInputs().get(0).getValue();\n         deliveredProperties = op2.getDeliveredPhysicalProperties().clone();\n+        if (assignOp.getExplicitOrderingProperty() != null) {\n+            deliveredProperties.getLocalProperties().add(assignOp.getExplicitOrderingProperty());\n+        }\n     }\n \n     @Override", "filename": "algebricks/algebricks-core/src/main/java/edu/uci/ics/hyracks/algebricks/core/algebra/operators/physical/AssignPOperator.java"}, {"additions": 6, "raw_url": "https://github.com/apache/asterixdb/raw/81b15019fec73d29c0757cc36afd516360fce34c/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/dataflow/value/ISerializerDeserializer.java", "blob_url": "https://github.com/apache/asterixdb/blob/81b15019fec73d29c0757cc36afd516360fce34c/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/dataflow/value/ISerializerDeserializer.java", "sha": "197fda799d0d936e5b32d6e4739296343a90325b", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/dataflow/value/ISerializerDeserializer.java?ref=81b15019fec73d29c0757cc36afd516360fce34c", "patch": "@@ -39,4 +39,10 @@\n      *            - Stream to write data to.\n      */\n     public void serialize(T instance, DataOutput out) throws HyracksDataException;\n+    \n+    /*\n+     * TODO: Add a new method:\n+     * T deserialize(DataInput in, T mutable)\n+     * to provide deserialization without creating objects\n+     */\n }\n\\ No newline at end of file", "filename": "hyracks/hyracks-api/src/main/java/edu/uci/ics/hyracks/api/dataflow/value/ISerializerDeserializer.java"}], "repo": "asterixdb"}, {"commit": "https://github.com/apache/asterixdb/commit/c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "parent": "https://github.com/apache/asterixdb/commit/a86c28efe295a5141aa63898f285caee67769ea7", "message": "1) Fixes Issue 24:Need grammar consistency w.r.t. semicolons\n   ';' is the terminator symbol for all AQL statements/queries. As per the last discussion, we decided to keep the terminator symbol optional for create type \n   statement and aql queries. If we choose to make it mandatory for them, I would go ahead an modify all test cases. \n2) Fixed a bug in create dataset syntax that deems the datatype compoenent of a dataset definition as being optionalr, resulting in NPE.\n3) Code refactoring centering use of FunctionDescriptors. Code reduction and simplication with interfaces replaced by abstract classes that have default implementation. \n\n\ngit-svn-id: https://asterixdb.googlecode.com/svn/branches/asterix_stabilization@576 eaa15691-b419-025a-1212-ee371bd00084", "bug_id": "asterixdb_55", "file": [{"additions": 47, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-algebra/src/main/java/edu/uci/ics/asterix/jobgen/AqlLogicalExpressionJobGen.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-algebra/src/main/java/edu/uci/ics/asterix/jobgen/AqlLogicalExpressionJobGen.java", "sha": "f515516cb927cc001b1cb59035c866a3c816b5f1", "changes": 200, "status": "modified", "deletions": 153, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-algebra/src/main/java/edu/uci/ics/asterix/jobgen/AqlLogicalExpressionJobGen.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -4,28 +4,22 @@\n \n import org.apache.commons.lang3.mutable.Mutable;\n \n+import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n import edu.uci.ics.asterix.formats.base.IDataFormat;\n import edu.uci.ics.asterix.metadata.declared.AqlCompiledMetadataDeclarations;\n import edu.uci.ics.asterix.metadata.declared.AqlMetadataProvider;\n import edu.uci.ics.asterix.om.functions.AsterixBuiltinFunctions;\n import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.asterix.runtime.base.IAggregateFunctionDynamicDescriptor;\n-import edu.uci.ics.asterix.runtime.base.IRunningAggregateFunctionDynamicDescriptor;\n-import edu.uci.ics.asterix.runtime.base.IScalarFunctionDynamicDescriptor;\n-import edu.uci.ics.asterix.runtime.base.ISerializableAggregateFunctionDynamicDescriptor;\n-import edu.uci.ics.asterix.runtime.base.IUnnestingFunctionDynamicDescriptor;\n import edu.uci.ics.asterix.runtime.evaluators.comparisons.ComparisonEvalFactory;\n import edu.uci.ics.asterix.runtime.formats.FormatUtils;\n import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n import edu.uci.ics.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.base.LogicalVariable;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;\n-import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression.FunctionKind;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.AggregateFunctionCallExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.ConstantExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.ILogicalExpressionJobGen;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.IVariableTypeEnvironment;\n-import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.ScalarFunctionCallExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.StatefulFunctionCallExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.UnnestingFunctionCallExpression;\n import edu.uci.ics.hyracks.algebricks.core.algebra.expressions.VariableReferenceExpression;\n@@ -53,132 +47,59 @@ public ICopyAggregateFunctionFactory createAggregateFunctionFactory(AggregateFun\n             IVariableTypeEnvironment env, IOperatorSchema[] inputSchemas, JobGenContext context)\n             throws AlgebricksException {\n         ICopyEvaluatorFactory[] args = codegenArguments(expr, env, inputSchemas, context);\n-        IFunctionDescriptor fd;\n-        AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n-        AqlCompiledMetadataDeclarations compiledDecls = mp.getMetadataDeclarations();\n-        try {\n-            fd = compiledDecls.getFormat().resolveFunction(expr, env);\n-        } catch (AlgebricksException e) {\n-            throw new AlgebricksException(e);\n-        }\n+        IFunctionDescriptor fd = getFunctionDescriptor(expr, env, context);\n         switch (fd.getFunctionDescriptorTag()) {\n-            case SCALAR: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from a scalar evaluator function descriptor. (fi=\"\n-                                + expr.getFunctionIdentifier() + \")\");\n-            }\n-            case AGGREGATE: {\n-                IAggregateFunctionDynamicDescriptor afdd = (IAggregateFunctionDynamicDescriptor) fd;\n-                return afdd.createAggregateFunctionFactory(args);\n-            }\n-            case SERIALAGGREGATE: {\n-                // temporal hack\n+            case SERIALAGGREGATE:\n                 return null;\n-            }\n-            case RUNNINGAGGREGATE: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from a running aggregate function descriptor.\");\n-            }\n-            case UNNEST: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from an unnesting aggregate function descriptor.\");\n-            }\n-\n-            default: {\n-                throw new IllegalStateException(fd.getFunctionDescriptorTag().toString());\n-            }\n+            case AGGREGATE:\n+                return fd.createAggregateFunctionFactory(args);\n+            default:\n+                throw new IllegalStateException(\"Invalid function descriptor \" + fd.getFunctionDescriptorTag()\n+                        + \" expected \" + FunctionDescriptorTag.SERIALAGGREGATE + \" or \"\n+                        + FunctionDescriptorTag.AGGREGATE);\n         }\n-\n     }\n \n     @Override\n-    public ICopyRunningAggregateFunctionFactory createRunningAggregateFunctionFactory(StatefulFunctionCallExpression expr,\n-            IVariableTypeEnvironment env, IOperatorSchema[] inputSchemas, JobGenContext context)\n-            throws AlgebricksException {\n+    public ICopyRunningAggregateFunctionFactory createRunningAggregateFunctionFactory(\n+            StatefulFunctionCallExpression expr, IVariableTypeEnvironment env, IOperatorSchema[] inputSchemas,\n+            JobGenContext context) throws AlgebricksException {\n         ICopyEvaluatorFactory[] args = codegenArguments(expr, env, inputSchemas, context);\n-        IFunctionDescriptor fd;\n-        AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n-        AqlCompiledMetadataDeclarations compiledDecls = mp.getMetadataDeclarations();\n-        try {\n-            fd = compiledDecls.getFormat().resolveFunction(expr, env);\n-        } catch (AlgebricksException e) {\n-            throw new AlgebricksException(e);\n-        }\n-        switch (fd.getFunctionDescriptorTag()) {\n-            case SCALAR: {\n-                throw new AlgebricksException(\n-                        \"Trying to create a running aggregate from a scalar evaluator function descriptor. (fi=\"\n-                                + expr.getFunctionIdentifier() + \")\");\n-            }\n-            case AGGREGATE: {\n-                throw new AlgebricksException(\n-                        \"Trying to create a running aggregate from an aggregate function descriptor.\");\n-            }\n-            case UNNEST: {\n-                throw new AlgebricksException(\n-                        \"Trying to create a running aggregate from an unnesting function descriptor.\");\n-            }\n-            case RUNNINGAGGREGATE: {\n-                IRunningAggregateFunctionDynamicDescriptor rafdd = (IRunningAggregateFunctionDynamicDescriptor) fd;\n-                return rafdd.createRunningAggregateFunctionFactory(args);\n-            }\n-            default: {\n-                throw new IllegalStateException();\n-            }\n-        }\n+        return getFunctionDescriptor(expr, env, context).createRunningAggregateFunctionFactory(args);\n     }\n \n     @Override\n     public ICopyUnnestingFunctionFactory createUnnestingFunctionFactory(UnnestingFunctionCallExpression expr,\n             IVariableTypeEnvironment env, IOperatorSchema[] inputSchemas, JobGenContext context)\n             throws AlgebricksException {\n         ICopyEvaluatorFactory[] args = codegenArguments(expr, env, inputSchemas, context);\n-        IFunctionDescriptor fd;\n-        AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n-        AqlCompiledMetadataDeclarations compiledDecls = mp.getMetadataDeclarations();\n-        try {\n-            fd = compiledDecls.getFormat().resolveFunction(expr, env);\n-        } catch (AlgebricksException e) {\n-            throw new AlgebricksException(e);\n-        }\n-        switch (fd.getFunctionDescriptorTag()) {\n-            case UNNEST: {\n-                IUnnestingFunctionDynamicDescriptor ufdd = (IUnnestingFunctionDynamicDescriptor) fd;\n-                return ufdd.createUnnestingFunctionFactory(args);\n-            }\n-            default: {\n-                throw new AlgebricksException(\"Trying to create an unnesting function descriptor from a \"\n-                        + fd.getFunctionDescriptorTag() + \". (fid=\" + expr.getFunctionIdentifier() + \")\");\n-            }\n-        }\n+        return getFunctionDescriptor(expr, env, context).createUnnestingFunctionFactory(args);\n     }\n \n     @Override\n     public ICopyEvaluatorFactory createEvaluatorFactory(ILogicalExpression expr, IVariableTypeEnvironment env,\n             IOperatorSchema[] inputSchemas, JobGenContext context) throws AlgebricksException {\n+        ICopyEvaluatorFactory copyEvaluatorFactory = null;\n         switch (expr.getExpressionTag()) {\n             case VARIABLE: {\n                 VariableReferenceExpression v = (VariableReferenceExpression) expr;\n-                return createVariableEvaluatorFactory(v, inputSchemas, context);\n+                copyEvaluatorFactory = createVariableEvaluatorFactory(v, inputSchemas, context);\n+                return copyEvaluatorFactory;\n             }\n             case CONSTANT: {\n                 ConstantExpression c = (ConstantExpression) expr;\n-                return createConstantEvaluatorFactory(c, inputSchemas, context);\n+                copyEvaluatorFactory = createConstantEvaluatorFactory(c, inputSchemas, context);\n+                return copyEvaluatorFactory;\n             }\n             case FUNCTION_CALL: {\n-                AbstractFunctionCallExpression fun = (AbstractFunctionCallExpression) expr;\n-                if (fun.getKind() == FunctionKind.SCALAR) {\n-                    ScalarFunctionCallExpression scalar = (ScalarFunctionCallExpression) fun;\n-                    return createScalarFunctionEvaluatorFactory(scalar, env, inputSchemas, context);\n-                } else {\n-                    throw new AlgebricksException(\"Cannot create evaluator for function \" + fun + \" of kind \"\n-                            + fun.getKind());\n-                }\n+                copyEvaluatorFactory = createScalarFunctionEvaluatorFactory((AbstractFunctionCallExpression) expr, env,\n+                        inputSchemas, context);\n+                return copyEvaluatorFactory;\n             }\n-            default: {\n+            default:\n                 throw new IllegalStateException();\n-            }\n         }\n+\n     }\n \n     private ICopyEvaluatorFactory createVariableEvaluatorFactory(VariableReferenceExpression expr,\n@@ -203,31 +124,15 @@ private ICopyEvaluatorFactory createScalarFunctionEvaluatorFactory(AbstractFunct\n             return new ComparisonEvalFactory(args[0], args[1], ck);\n         }\n \n-        IFunctionDescriptor fd;\n-\n+        IFunctionDescriptor fd = null;\n         AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n         IDataFormat format = mp == null ? FormatUtils.getDefaultFormat() : mp.getMetadataDeclarations().getFormat();\n-        try {\n-            fd = format.resolveFunction(expr, env);\n-        } catch (AlgebricksException e) {\n-            throw new AlgebricksException(e);\n-        }\n-\n-        switch (fd.getFunctionDescriptorTag()) {\n-            case SCALAR: {\n-                IScalarFunctionDynamicDescriptor sfdd = (IScalarFunctionDynamicDescriptor) fd;\n-                return sfdd.createEvaluatorFactory(args);\n-            }\n-            default: {\n-                throw new AlgebricksException(\"Trying to create a scalar function descriptor from a \"\n-                        + fd.getFunctionDescriptorTag() + \". (fid=\" + fi + \")\");\n-            }\n-        }\n-\n+        fd = format.resolveFunction(expr, env);\n+        return fd.createEvaluatorFactory(args);\n     }\n \n-    private ICopyEvaluatorFactory createConstantEvaluatorFactory(ConstantExpression expr, IOperatorSchema[] inputSchemas,\n-            JobGenContext context) throws AlgebricksException {\n+    private ICopyEvaluatorFactory createConstantEvaluatorFactory(ConstantExpression expr,\n+            IOperatorSchema[] inputSchemas, JobGenContext context) throws AlgebricksException {\n         AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n         IDataFormat format = mp == null ? FormatUtils.getDefaultFormat() : mp.getMetadataDeclarations().getFormat();\n         return format.getConstantEvalFactory(expr.getValue());\n@@ -250,50 +155,39 @@ public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunc\n             AggregateFunctionCallExpression expr, IVariableTypeEnvironment env, IOperatorSchema[] inputSchemas,\n             JobGenContext context) throws AlgebricksException {\n         ICopyEvaluatorFactory[] args = codegenArguments(expr, env, inputSchemas, context);\n-        IFunctionDescriptor fd;\n-        AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n-        AqlCompiledMetadataDeclarations compiledDecls = mp.getMetadataDeclarations();\n-        try {\n-            fd = compiledDecls.getFormat().resolveFunction(expr, env);\n-        } catch (AlgebricksException e) {\n-            throw new AlgebricksException(e);\n-        }\n+        IFunctionDescriptor fd = getFunctionDescriptor(expr, env, context);\n+\n         switch (fd.getFunctionDescriptorTag()) {\n-            case SCALAR: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from a scalar evaluator function descriptor. (fi=\"\n-                                + expr.getFunctionIdentifier() + \")\");\n-            }\n             case AGGREGATE: {\n                 if (AsterixBuiltinFunctions.isAggregateFunctionSerializable(fd.getIdentifier())) {\n                     AggregateFunctionCallExpression serialAggExpr = AsterixBuiltinFunctions\n                             .makeSerializableAggregateFunctionExpression(fd.getIdentifier(), expr.getArguments());\n-                    ISerializableAggregateFunctionDynamicDescriptor afdd = (ISerializableAggregateFunctionDynamicDescriptor) compiledDecls\n-                            .getFormat().resolveFunction(serialAggExpr, env);\n-                    return afdd.createAggregateFunctionFactory(args);\n+                    IFunctionDescriptor afdd = getFunctionDescriptor(serialAggExpr, env, context);\n+                    return afdd.createSerializableAggregateFunctionFactory(args);\n                 } else {\n                     throw new AlgebricksException(\n                             \"Trying to create a serializable aggregate from a non-serializable aggregate function descriptor. (fi=\"\n                                     + expr.getFunctionIdentifier() + \")\");\n                 }\n             }\n             case SERIALAGGREGATE: {\n-                ISerializableAggregateFunctionDynamicDescriptor afdd = (ISerializableAggregateFunctionDynamicDescriptor) fd;\n-                return afdd.createAggregateFunctionFactory(args);\n-            }\n-            case RUNNINGAGGREGATE: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from a running aggregate function descriptor.\");\n-            }\n-            case UNNEST: {\n-                throw new AlgebricksException(\n-                        \"Trying to create an aggregate from an unnesting aggregate function descriptor.\");\n+                return fd.createSerializableAggregateFunctionFactory(args);\n             }\n \n-            default: {\n-                throw new IllegalStateException();\n-            }\n+            default:\n+                throw new IllegalStateException(\"Invalid function descriptor \" + fd.getFunctionDescriptorTag()\n+                        + \" expected \" + FunctionDescriptorTag.SERIALAGGREGATE + \" or \"\n+                        + FunctionDescriptorTag.AGGREGATE);\n         }\n     }\n \n+    private IFunctionDescriptor getFunctionDescriptor(AbstractFunctionCallExpression expr,\n+            IVariableTypeEnvironment env, JobGenContext context) throws AlgebricksException {\n+        IFunctionDescriptor fd;\n+        AqlMetadataProvider mp = (AqlMetadataProvider) context.getMetadataProvider();\n+        AqlCompiledMetadataDeclarations compiledDecls = mp.getMetadataDeclarations();\n+        fd = compiledDecls.getFormat().resolveFunction(expr, env);\n+        return fd;\n+    }\n+\n }", "filename": "asterix-algebra/src/main/java/edu/uci/ics/asterix/jobgen/AqlLogicalExpressionJobGen.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-aql/src/main/javacc/AQL.jj", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-aql/src/main/javacc/AQL.jj", "sha": "3e63b35237360a3a4134fc5b8d17f8bc8af61b37", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-aql/src/main/javacc/AQL.jj?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -598,7 +598,7 @@ DatasetDecl DatasetDeclaration(DatasetType datasetType) throws ParseException :\n     \titemTypeName = new Identifier(token.image);\n   \t}\n   \t< RIGHTPAREN >\n-  )?\n+  )\n   {\n   \t  if(datasetType == DatasetType.INTERNAL) {\n       \tidd = InternalDatasetDeclaration();\n@@ -860,6 +860,7 @@ TypeDecl TypeDeclaration(boolean dgen, String hint) throws ParseException:\n   )?\n   \"as\"\n   ( typeExpr = TypeExpr() )\n+  (\";\")?\n   {\n     long numValues = -1;\n     String filename = null;\n@@ -1143,11 +1144,12 @@ Query Query()throws ParseException:\n }\n {\n     expr = Expression()\n-\n+    (\";\")?\n     {\n       query.setBody(expr);\n       return query;\n     }\n+     \n }\n \n ", "filename": "asterix-aql/src/main/javacc/AQL.jj"}, {"additions": 65, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AbstractFunctionDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AbstractFunctionDescriptor.java", "sha": "caf3b91f3489e34d950aecfb78596a5187943329", "changes": 65, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AbstractFunctionDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Copyright 2009-2012 by The Regents of the University of California\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * you may obtain a copy of the License from\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package edu.uci.ics.asterix.om.functions;\n+\n+import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n+import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import edu.uci.ics.hyracks.algebricks.common.exceptions.NotImplementedException;\n+import edu.uci.ics.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyRunningAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopySerializableAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyUnnestingFunctionFactory;\n+\n+public abstract class AbstractFunctionDescriptor implements IFunctionDescriptor {\n+\n+    @Override\n+    public abstract FunctionIdentifier getIdentifier();\n+\n+    @Override\n+    public abstract FunctionDescriptorTag getFunctionDescriptorTag();\n+\n+    @Override\n+    public ICopyEvaluatorFactory createEvaluatorFactory(ICopyEvaluatorFactory[] args) throws AlgebricksException {\n+        throw new NotImplementedException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public ICopyRunningAggregateFunctionFactory createRunningAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException {\n+        throw new NotImplementedException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(\n+            ICopyEvaluatorFactory[] args) throws AlgebricksException {\n+        throw new NotImplementedException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public ICopyUnnestingFunctionFactory createUnnestingFunctionFactory(ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException {\n+        throw new NotImplementedException(\"Not Implemented\");\n+    }\n+\n+    @Override\n+    public ICopyAggregateFunctionFactory createAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException {\n+        throw new NotImplementedException(\"Not Implemented\");\n+\n+    }\n+\n+}", "filename": "asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AbstractFunctionDescriptor.java"}, {"additions": 48, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AsterixBuiltinFunctions.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AsterixBuiltinFunctions.java", "sha": "6f5a95ff9dda0d62fe9b9e352afd61685ed6a61d", "changes": 100, "status": "modified", "deletions": 52, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AsterixBuiltinFunctions.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -163,51 +163,51 @@\n             \"numeric-idiv\", 2);\n     public final static FunctionIdentifier CARET = new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"caret\", 2);\n \n-\tpublic final static FunctionIdentifier NUMERIC_ABS = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-abs\", 1);\n-\tpublic final static FunctionIdentifier NUMERIC_CEILING = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-ceiling\", 1);\n-\tpublic final static FunctionIdentifier NUMERIC_FLOOR = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-floor\", 1);\n-\tpublic final static FunctionIdentifier NUMERIC_ROUND = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-round\", 1);\n-\tpublic final static FunctionIdentifier NUMERIC_ROUND_HALF_TO_EVEN = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-round-half-to-even\", 1);\n-\tpublic final static FunctionIdentifier NUMERIC_ROUND_HALF_TO_EVEN2 = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"numeric-round-half-to-even2\", 2);\n-\t// String funcitons\n-\tpublic final static FunctionIdentifier STRING_EQUAL = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"string-equal\", 2);\n-\tpublic final static FunctionIdentifier STRING_START_WITH = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"start-with\", 2);\n-\tpublic final static FunctionIdentifier STRING_END_WITH = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"end-with\", 2);\n-\tpublic final static FunctionIdentifier STRING_MATCHES = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"matches\", 2);\n-\tpublic final static FunctionIdentifier STRING_MATCHES_WITH_FLAG = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"matches2\", 3);\n-\tpublic final static FunctionIdentifier STRING_LOWERCASE = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"lowercase\", 1);\n-\tpublic final static FunctionIdentifier STRING_REPLACE = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"replace\", 3);\n-\tpublic final static FunctionIdentifier STRING_REPLACE_WITH_FLAG = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"replace2\", 4);\n-\tpublic final static FunctionIdentifier STRING_LENGTH = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"string-length\", 1);\n-\tpublic final static FunctionIdentifier SUBSTRING2 = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"substring2\", 2);\n-\tpublic final static FunctionIdentifier SUBSTRING_BEFORE = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"substring-before\", 2);\n-\tpublic final static FunctionIdentifier SUBSTRING_AFTER = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"substring-after\", 2);\n-\tpublic final static FunctionIdentifier STRING_TO_CODEPOINT = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"string-to-codepoint\", 1);\n-\tpublic final static FunctionIdentifier CODEPOINT_TO_STRING = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"codepoint-to-string\", 1);\n-\tpublic final static FunctionIdentifier STRING_CONCAT = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"string-concat\", 1);\n-\tpublic final static FunctionIdentifier STRING_JOIN = new FunctionIdentifier(\n-\t\t\tFunctionConstants.ASTERIX_NS, \"string-join\", 2);\n+    public final static FunctionIdentifier NUMERIC_ABS = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"numeric-abs\", 1);\n+    public final static FunctionIdentifier NUMERIC_CEILING = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"numeric-ceiling\", 1);\n+    public final static FunctionIdentifier NUMERIC_FLOOR = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"numeric-floor\", 1);\n+    public final static FunctionIdentifier NUMERIC_ROUND = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"numeric-round\", 1);\n+    public final static FunctionIdentifier NUMERIC_ROUND_HALF_TO_EVEN = new FunctionIdentifier(\n+            FunctionConstants.ASTERIX_NS, \"numeric-round-half-to-even\", 1);\n+    public final static FunctionIdentifier NUMERIC_ROUND_HALF_TO_EVEN2 = new FunctionIdentifier(\n+            FunctionConstants.ASTERIX_NS, \"numeric-round-half-to-even2\", 2);\n+    // String funcitons\n+    public final static FunctionIdentifier STRING_EQUAL = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"string-equal\", 2);\n+    public final static FunctionIdentifier STRING_START_WITH = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"start-with\", 2);\n+    public final static FunctionIdentifier STRING_END_WITH = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"end-with\", 2);\n+    public final static FunctionIdentifier STRING_MATCHES = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"matches\", 2);\n+    public final static FunctionIdentifier STRING_MATCHES_WITH_FLAG = new FunctionIdentifier(\n+            FunctionConstants.ASTERIX_NS, \"matches2\", 3);\n+    public final static FunctionIdentifier STRING_LOWERCASE = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"lowercase\", 1);\n+    public final static FunctionIdentifier STRING_REPLACE = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"replace\", 3);\n+    public final static FunctionIdentifier STRING_REPLACE_WITH_FLAG = new FunctionIdentifier(\n+            FunctionConstants.ASTERIX_NS, \"replace2\", 4);\n+    public final static FunctionIdentifier STRING_LENGTH = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"string-length\", 1);\n+    public final static FunctionIdentifier SUBSTRING2 = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"substring2\", 2);\n+    public final static FunctionIdentifier SUBSTRING_BEFORE = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"substring-before\", 2);\n+    public final static FunctionIdentifier SUBSTRING_AFTER = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"substring-after\", 2);\n+    public final static FunctionIdentifier STRING_TO_CODEPOINT = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"string-to-codepoint\", 1);\n+    public final static FunctionIdentifier CODEPOINT_TO_STRING = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"codepoint-to-string\", 1);\n+    public final static FunctionIdentifier STRING_CONCAT = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"string-concat\", 1);\n+    public final static FunctionIdentifier STRING_JOIN = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"string-join\", 2);\n \n     public final static FunctionIdentifier DATASET = new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"dataset\", 1);\n     public final static FunctionIdentifier FEED_INGEST = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n@@ -404,9 +404,6 @@ public static IFunctionInfo getAsterixFunctionInfo(FunctionIdentifier fid) {\n         IFunctionInfo finfo = asterixFunctionIdToInfo.get(fid);\n         if (finfo == null) {\n             finfo = new AsterixFunctionInfo(fid);\n-            //   if (fid.isBuiltin()) {\n-            asterixFunctionIdToInfo.put(fid, finfo);\n-            //  }\n         }\n         return finfo;\n     }\n@@ -523,15 +520,14 @@ public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironmen\n         add(NUMERIC_DIVIDE, NonTaggedNumericAddSubMulDivTypeComputer.INSTANCE);\n         add(NUMERIC_MOD, NonTaggedNumericAddSubMulDivTypeComputer.INSTANCE);\n         add(NUMERIC_IDIV, AInt32TypeComputer.INSTANCE);\n-        \n-        // Xiaoyu Ma Add for new functions\n+\n         add(NUMERIC_ABS, NonTaggedNumericUnaryFunctionTypeComputer.INSTANCE);\n         add(NUMERIC_CEILING, NonTaggedNumericUnaryFunctionTypeComputer.INSTANCE);\n         add(NUMERIC_FLOOR, NonTaggedNumericUnaryFunctionTypeComputer.INSTANCE);\n         add(NUMERIC_ROUND, NonTaggedNumericUnaryFunctionTypeComputer.INSTANCE);\n         add(NUMERIC_ROUND_HALF_TO_EVEN, NonTaggedNumericUnaryFunctionTypeComputer.INSTANCE);\n         add(NUMERIC_ROUND_HALF_TO_EVEN2, NonTaggedNumericRoundHalfToEven2TypeComputer.INSTANCE);\n-        \n+\n         add(STRING_TO_CODEPOINT, OrderedListOfAInt32TypeComputer.INSTANCE);\n         add(CODEPOINT_TO_STRING, AStringTypeComputer.INSTANCE);\n         add(STRING_CONCAT, AStringTypeComputer.INSTANCE);\n@@ -548,7 +544,7 @@ public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironmen\n         add(SUBSTRING_AFTER, BinaryStringStringOrNullTypeComputer.INSTANCE);\n         add(STRING_EQUAL, BinaryStringBoolOrNullTypeComputer.INSTANCE);\n         add(STRING_JOIN, AStringTypeComputer.INSTANCE);\n-        \n+\n         add(OPEN_RECORD_CONSTRUCTOR, OpenRecordConstructorResultType.INSTANCE);\n         add(ORDERED_LIST_CONSTRUCTOR, OrderedListConstructorResultType.INSTANCE);\n         add(POINT_CONSTRUCTOR, OptionalAPointTypeComputer.INSTANCE);", "filename": "asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/AsterixBuiltinFunctions.java"}, {"additions": 35, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/IFunctionDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/IFunctionDescriptor.java", "sha": "c372dec0c9e780e5c7a2b757a607d17caaca2295", "changes": 35, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/IFunctionDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,12 +1,47 @@\n+/*\n+ * Copyright 2009-2012 by The Regents of the University of California\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * you may obtain a copy of the License from\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n package edu.uci.ics.asterix.om.functions;\n \n import java.io.Serializable;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n+import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n import edu.uci.ics.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyRunningAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopySerializableAggregateFunctionFactory;\n+import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyUnnestingFunctionFactory;\n \n public interface IFunctionDescriptor extends Serializable {\n     public FunctionIdentifier getIdentifier();\n \n     public FunctionDescriptorTag getFunctionDescriptorTag();\n+\n+    public ICopyEvaluatorFactory createEvaluatorFactory(ICopyEvaluatorFactory[] args) throws AlgebricksException;\n+\n+    public ICopyRunningAggregateFunctionFactory createRunningAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException;\n+\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(\n+            final ICopyEvaluatorFactory[] args) throws AlgebricksException;\n+\n+    public ICopyUnnestingFunctionFactory createUnnestingFunctionFactory(final ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException;\n+\n+    public ICopyAggregateFunctionFactory createAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n+            throws AlgebricksException;\n+\n }\n\\ No newline at end of file", "filename": "asterix-om/src/main/java/edu/uci/ics/asterix/om/functions/IFunctionDescriptor.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractAggregateFunctionDynamicDescriptor.java", "sha": "09325e4a8df2b3bd83f776e3f19563293521016d", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractAggregateFunctionDynamicDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,12 +1,14 @@\n package edu.uci.ics.asterix.runtime.aggregates.base;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n-import edu.uci.ics.asterix.runtime.base.IAggregateFunctionDynamicDescriptor;\n+import edu.uci.ics.asterix.om.functions.AbstractFunctionDescriptor;\n \n-public abstract class AbstractAggregateFunctionDynamicDescriptor implements IAggregateFunctionDynamicDescriptor {\n+public abstract class AbstractAggregateFunctionDynamicDescriptor extends AbstractFunctionDescriptor  {\n     private static final long serialVersionUID = 1L;\n \n     public FunctionDescriptorTag getFunctionDescriptorTag() {\n         return FunctionDescriptorTag.AGGREGATE;\n     }\n+\n+   \n }", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractAggregateFunctionDynamicDescriptor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractSerializableAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractSerializableAggregateFunctionDynamicDescriptor.java", "sha": "abde1171258fbfb49dbb70e426291e9571884efe", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractSerializableAggregateFunctionDynamicDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,10 +1,9 @@\n package edu.uci.ics.asterix.runtime.aggregates.base;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n-import edu.uci.ics.asterix.runtime.base.ISerializableAggregateFunctionDynamicDescriptor;\n+import edu.uci.ics.asterix.om.functions.AbstractFunctionDescriptor;\n \n-public abstract class AbstractSerializableAggregateFunctionDynamicDescriptor implements\n-        ISerializableAggregateFunctionDynamicDescriptor {\n+public abstract class AbstractSerializableAggregateFunctionDynamicDescriptor extends AbstractFunctionDescriptor {\n     private static final long serialVersionUID = 1L;\n \n     @Override", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/base/AbstractSerializableAggregateFunctionDynamicDescriptor.java"}, {"additions": 4, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableAvgAggregateDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableAvgAggregateDescriptor.java", "sha": "6c9989d27aaf09dfe5d75c3615c076a133bc40bd", "changes": 8, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableAvgAggregateDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -48,8 +48,8 @@ public FunctionIdentifier getIdentifier() {\n     }\n \n     @Override\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n-            throws AlgebricksException {\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(\n+            ICopyEvaluatorFactory[] args) throws AlgebricksException {\n         final ICopyEvaluatorFactory[] evals = args;\n \n         return new ICopySerializableAggregateFunctionFactory() {\n@@ -89,8 +89,8 @@ public void step(IFrameTupleReference tuple, byte[] state, int start, int len)\n                         boolean metNull = BufferSerDeUtil.getBoolean(state, start + 16);\n                         if (inputVal.getLength() > 0) {\n                             ++count;\n-                            ATypeTag typeTag = EnumDeserializer.ATYPETAGDESERIALIZER\n-                                    .deserialize(inputVal.getByteArray()[0]);\n+                            ATypeTag typeTag = EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(inputVal\n+                                    .getByteArray()[0]);\n                             switch (typeTag) {\n                                 case INT8: {\n                                     byte val = AInt8SerializerDeserializer.getByte(inputVal.getByteArray(), 1);", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableAvgAggregateDescriptor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableCountAggregateDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableCountAggregateDescriptor.java", "sha": "d8f25537c7149cbf72900c01926c4bc5c34f9c2d", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableCountAggregateDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -39,7 +39,7 @@ public FunctionIdentifier getIdentifier() {\n     }\n \n     @Override\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n             throws AlgebricksException {\n         return new ICopySerializableAggregateFunctionFactory() {\n             private static final long serialVersionUID = 1L;", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableCountAggregateDescriptor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableGlobalAvgAggregateDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableGlobalAvgAggregateDescriptor.java", "sha": "02d24a0f3bcf674e64c1fedf754b225e51e42a3f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableGlobalAvgAggregateDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -58,7 +58,7 @@ public FunctionIdentifier getIdentifier() {\n     }\n \n     @Override\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n             throws AlgebricksException {\n         final ICopyEvaluatorFactory[] evals = args;\n         List<IAType> unionList = new ArrayList<IAType>();", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableGlobalAvgAggregateDescriptor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableLocalAvgAggregateDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableLocalAvgAggregateDescriptor.java", "sha": "d96e4880cb327411b13b6855407ac1c5fa7f047b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableLocalAvgAggregateDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -60,7 +60,7 @@ public FunctionIdentifier getIdentifier() {\n     }\n \n     @Override\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(ICopyEvaluatorFactory[] args)\n             throws AlgebricksException {\n         final ICopyEvaluatorFactory[] evals = args;\n         List<IAType> unionList = new ArrayList<IAType>();", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableLocalAvgAggregateDescriptor.java"}, {"additions": 1, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableSumAggregateDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableSumAggregateDescriptor.java", "sha": "510921a0d1ee352330ef3b103f7ec4ce416bfaa4", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableSumAggregateDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -52,7 +52,7 @@ public FunctionIdentifier getIdentifier() {\n     }\n \n     @Override\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n+    public ICopySerializableAggregateFunctionFactory createSerializableAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n             throws AlgebricksException {\n         return new ICopySerializableAggregateFunctionFactory() {\n             private static final long serialVersionUID = 1L;", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/aggregates/serializable/std/SerializableSumAggregateDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IAggregateFunctionDynamicDescriptor.java", "sha": "95c604ab8870d5cce91552f3201cc8949b758e74", "changes": 11, "status": "removed", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IAggregateFunctionDynamicDescriptor.java?ref=a86c28efe295a5141aa63898f285caee67769ea7", "patch": "@@ -1,11 +0,0 @@\n-package edu.uci.ics.asterix.runtime.base;\n-\n-import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyAggregateFunctionFactory;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n-\n-public interface IAggregateFunctionDynamicDescriptor extends IFunctionDescriptor {\n-    public ICopyAggregateFunctionFactory createAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n-            throws AlgebricksException;\n-}", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IAggregateFunctionDynamicDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IRunningAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IRunningAggregateFunctionDynamicDescriptor.java", "sha": "7ab726130e86e8ec92eccc7d4340dbf99a6f3f18", "changes": 12, "status": "removed", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IRunningAggregateFunctionDynamicDescriptor.java?ref=a86c28efe295a5141aa63898f285caee67769ea7", "patch": "@@ -1,12 +0,0 @@\n-package edu.uci.ics.asterix.runtime.base;\n-\n-\n-import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyRunningAggregateFunctionFactory;\n-\n-public interface IRunningAggregateFunctionDynamicDescriptor extends IFunctionDescriptor {\n-    public ICopyRunningAggregateFunctionFactory createRunningAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n-            throws AlgebricksException;\n-}", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IRunningAggregateFunctionDynamicDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IScalarFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IScalarFunctionDynamicDescriptor.java", "sha": "8e4353e077daf366839b91f40b149c37610bf4d0", "changes": 10, "status": "removed", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IScalarFunctionDynamicDescriptor.java?ref=a86c28efe295a5141aa63898f285caee67769ea7", "patch": "@@ -1,10 +0,0 @@\n-package edu.uci.ics.asterix.runtime.base;\n-\n-\n-import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n-\n-public interface IScalarFunctionDynamicDescriptor extends IFunctionDescriptor {\n-    public ICopyEvaluatorFactory createEvaluatorFactory(ICopyEvaluatorFactory[] args) throws AlgebricksException;\n-}", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IScalarFunctionDynamicDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/ISerializableAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/ISerializableAggregateFunctionDynamicDescriptor.java", "sha": "810af16252984c352ac6dbd0efdf49950a8044df", "changes": 11, "status": "removed", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/ISerializableAggregateFunctionDynamicDescriptor.java?ref=a86c28efe295a5141aa63898f285caee67769ea7", "patch": "@@ -1,11 +0,0 @@\n-package edu.uci.ics.asterix.runtime.base;\n-\n-import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopySerializableAggregateFunctionFactory;\n-\n-public interface ISerializableAggregateFunctionDynamicDescriptor extends IFunctionDescriptor {\n-    public ICopySerializableAggregateFunctionFactory createAggregateFunctionFactory(final ICopyEvaluatorFactory[] args)\n-            throws AlgebricksException;\n-}", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/ISerializableAggregateFunctionDynamicDescriptor.java"}, {"additions": 0, "raw_url": "https://github.com/apache/asterixdb/raw/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IUnnestingFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/a86c28efe295a5141aa63898f285caee67769ea7/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IUnnestingFunctionDynamicDescriptor.java", "sha": "3f555398b590780b9a4de2f35cd23b3ac7b7dc17", "changes": 11, "status": "removed", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IUnnestingFunctionDynamicDescriptor.java?ref=a86c28efe295a5141aa63898f285caee67769ea7", "patch": "@@ -1,11 +0,0 @@\n-package edu.uci.ics.asterix.runtime.base;\n-\n-import edu.uci.ics.asterix.om.functions.IFunctionDescriptor;\n-import edu.uci.ics.hyracks.algebricks.common.exceptions.AlgebricksException;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n-import edu.uci.ics.hyracks.algebricks.runtime.base.ICopyUnnestingFunctionFactory;\n-\n-public interface IUnnestingFunctionDynamicDescriptor extends IFunctionDescriptor {\n-    public ICopyUnnestingFunctionFactory createUnnestingFunctionFactory(final ICopyEvaluatorFactory[] args)\n-            throws AlgebricksException;\n-}", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/base/IUnnestingFunctionDynamicDescriptor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/base/AbstractScalarFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/base/AbstractScalarFunctionDynamicDescriptor.java", "sha": "a2f00ff0a4f40a8a5bec3d2e1bdd4f776d9845ff", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/base/AbstractScalarFunctionDynamicDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,9 +1,9 @@\n package edu.uci.ics.asterix.runtime.evaluators.base;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n-import edu.uci.ics.asterix.runtime.base.IScalarFunctionDynamicDescriptor;\n+import edu.uci.ics.asterix.om.functions.AbstractFunctionDescriptor;\n \n-public abstract class AbstractScalarFunctionDynamicDescriptor implements IScalarFunctionDynamicDescriptor {\n+public abstract class AbstractScalarFunctionDynamicDescriptor extends AbstractFunctionDescriptor {\n \n     private static final long serialVersionUID = 1L;\n ", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/evaluators/base/AbstractScalarFunctionDynamicDescriptor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/runningaggregates/base/AbstractRunningAggregateFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/runningaggregates/base/AbstractRunningAggregateFunctionDynamicDescriptor.java", "sha": "9be4046b2cd800abf55986ead12dd77d1f85093a", "changes": 5, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/runningaggregates/base/AbstractRunningAggregateFunctionDynamicDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,10 +1,9 @@\n package edu.uci.ics.asterix.runtime.runningaggregates.base;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n-import edu.uci.ics.asterix.runtime.base.IRunningAggregateFunctionDynamicDescriptor;\n+import edu.uci.ics.asterix.om.functions.AbstractFunctionDescriptor;\n \n-public abstract class AbstractRunningAggregateFunctionDynamicDescriptor implements\n-        IRunningAggregateFunctionDynamicDescriptor {\n+public abstract class AbstractRunningAggregateFunctionDynamicDescriptor extends AbstractFunctionDescriptor {\n     private static final long serialVersionUID = 1L;\n \n     public FunctionDescriptorTag getFunctionDescriptorTag() {", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/runningaggregates/base/AbstractRunningAggregateFunctionDynamicDescriptor.java"}, {"additions": 2, "raw_url": "https://github.com/apache/asterixdb/raw/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/unnestingfunctions/base/AbstractUnnestingFunctionDynamicDescriptor.java", "blob_url": "https://github.com/apache/asterixdb/blob/c022a0d91c2b4da4435dcb2a1399a568b23dd42c/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/unnestingfunctions/base/AbstractUnnestingFunctionDynamicDescriptor.java", "sha": "bcab30f9fc7c63222b880362d5a7f202af15863f", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/unnestingfunctions/base/AbstractUnnestingFunctionDynamicDescriptor.java?ref=c022a0d91c2b4da4435dcb2a1399a568b23dd42c", "patch": "@@ -1,9 +1,9 @@\n package edu.uci.ics.asterix.runtime.unnestingfunctions.base;\n \n import edu.uci.ics.asterix.common.functions.FunctionDescriptorTag;\n-import edu.uci.ics.asterix.runtime.base.IUnnestingFunctionDynamicDescriptor;\n+import edu.uci.ics.asterix.om.functions.AbstractFunctionDescriptor;\n \n-public abstract class AbstractUnnestingFunctionDynamicDescriptor implements IUnnestingFunctionDynamicDescriptor {\n+public abstract class AbstractUnnestingFunctionDynamicDescriptor extends AbstractFunctionDescriptor {\n     private static final long serialVersionUID = 1L;\n \n     public FunctionDescriptorTag getFunctionDescriptorTag() {", "filename": "asterix-runtime/src/main/java/edu/uci/ics/asterix/runtime/unnestingfunctions/base/AbstractUnnestingFunctionDynamicDescriptor.java"}], "repo": "asterixdb"}]
