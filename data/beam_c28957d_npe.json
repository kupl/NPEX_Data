[
    {
        "repo": "beam",
        "commit": "https://github.com/apache/beam/commit/c28957d16fb0f63f82f578cf904df61bf7bb63e5",
        "bug_id": "beam_c28957d",
        "message": "This closes #1612: [BEAM-27] Support timer setting and receiving in SimpleDoFnRunner\n\n  Use empty SideInputReader, fixes NPE in SimpleDoFnRunnerTest\n  Test that SimpleDoFnRunner wraps exceptions in startBundle and finishBundle\n  Add timer support to DoFnRunner(s)\n  Make TimerSpec and StateSpec fields accessible",
        "parent": "https://github.com/apache/beam/commit/5255a33812758bbb9d081962675bd0180802c82b",
        "patched_files": [
            "SimpleDoFnRunner.java",
            "PushbackSideInputDoFnRunner.java",
            "DoFnSignatures.java",
            "DoFnRunner.java",
            "SimpleOldDoFnRunner.java",
            "LateDataDroppingDoFnRunner.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java",
                "deletions": 0,
                "sha": "7c73a349155695a7ac2452e92d343093170ae865",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java",
                "patch": "@@ -20,8 +20,11 @@\n import org.apache.beam.sdk.transforms.Aggregator;\n import org.apache.beam.sdk.transforms.DoFn;\n import org.apache.beam.sdk.transforms.OldDoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.util.TimeDomain;\n import org.apache.beam.sdk.util.WindowedValue;\n import org.apache.beam.sdk.values.KV;\n+import org.joda.time.Instant;\n \n /**\n  * An wrapper interface that represents the execution of a {@link DoFn}.\n@@ -38,6 +41,12 @@\n    */\n   void processElement(WindowedValue<InputT> elem);\n \n+  /**\n+   * Calls a {@link DoFn DoFn's} {@link DoFn.OnTimer @OnTimer} method for the given timer\n+   * in the given window.\n+   */\n+  void onTimer(String timerId, BoundedWindow window, Instant timestamp, TimeDomain timeDomain);\n+\n   /**\n    * Calls a {@link DoFn DoFn's} {@link DoFn.FinishBundle @FinishBundle} method and performs\n    * additional tasks, such as flushing in-memory states.",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java",
                "deletions": 0,
                "sha": "290171ad22800375bb01ac7ecd180e0cbe58d272",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.beam.sdk.transforms.Aggregator;\n import org.apache.beam.sdk.transforms.OldDoFn;\n import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.util.TimeDomain;\n import org.apache.beam.sdk.util.TimerInternals;\n import org.apache.beam.sdk.util.WindowTracing;\n import org.apache.beam.sdk.util.WindowedValue;\n@@ -72,6 +73,12 @@ public void processElement(WindowedValue<KeyedWorkItem<K, InputT>> elem) {\n     doFnRunner.processElement(elem.withValue(keyedWorkItem));\n   }\n \n+  @Override\n+  public void onTimer(String timerId, BoundedWindow window, Instant timestamp,\n+      TimeDomain timeDomain) {\n+    doFnRunner.onTimer(timerId, window, timestamp, timeDomain);\n+  }\n+\n   @Override\n   public void finishBundle() {\n     doFnRunner.finishBundle();",
                "changes": 7
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java",
                "deletions": 0,
                "sha": "2962832a5096cc729f098b1eda532ccec75f013b",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java",
                "patch": "@@ -25,8 +25,10 @@\n import java.util.Set;\n import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n import org.apache.beam.sdk.util.ReadyCheckingSideInputReader;\n+import org.apache.beam.sdk.util.TimeDomain;\n import org.apache.beam.sdk.util.WindowedValue;\n import org.apache.beam.sdk.values.PCollectionView;\n+import org.joda.time.Instant;\n \n /**\n  * A {@link DoFnRunner} that can refuse to process elements that are not ready, instead returning\n@@ -109,6 +111,12 @@ public void processElement(WindowedValue<InputT> elem) {\n     underlying.processElement(elem);\n   }\n \n+  @Override\n+  public void onTimer(String timerId, BoundedWindow window, Instant timestamp,\n+      TimeDomain timeDomain) {\n+    underlying.onTimer(timerId, window, timestamp, timeDomain);\n+  }\n+\n   /**\n    * Call the underlying {@link DoFnRunner#finishBundle()}.\n    */",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 235,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java",
                "deletions": 1,
                "sha": "a7d82bf52ed87780b02e99cc4bd0a799da6ff674",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java",
                "patch": "@@ -50,8 +50,10 @@\n import org.apache.beam.sdk.util.ExecutionContext.StepContext;\n import org.apache.beam.sdk.util.SideInputReader;\n import org.apache.beam.sdk.util.SystemDoFnInternal;\n+import org.apache.beam.sdk.util.TimeDomain;\n import org.apache.beam.sdk.util.Timer;\n import org.apache.beam.sdk.util.TimerInternals;\n+import org.apache.beam.sdk.util.TimerSpec;\n import org.apache.beam.sdk.util.UserCodeException;\n import org.apache.beam.sdk.util.WindowedValue;\n import org.apache.beam.sdk.util.WindowingInternals;\n@@ -64,6 +66,7 @@\n import org.apache.beam.sdk.util.state.StateTags;\n import org.apache.beam.sdk.values.PCollectionView;\n import org.apache.beam.sdk.values.TupleTag;\n+import org.joda.time.Duration;\n import org.joda.time.Instant;\n import org.joda.time.format.PeriodFormat;\n \n@@ -161,6 +164,35 @@ public void processElement(WindowedValue<InputT> compressedElem) {\n     }\n   }\n \n+  @Override\n+  public void onTimer(\n+      String timerId, BoundedWindow window, Instant timestamp, TimeDomain timeDomain) {\n+\n+    // The effective timestamp is when derived elements will have their timestamp set, if not\n+    // otherwise specified. If this is an event time timer, then they have the timestamp of the\n+    // timer itself. Otherwise, they are set to the input timestamp, which is by definition\n+    // non-late.\n+    Instant effectiveTimestamp;\n+    switch (timeDomain) {\n+      case EVENT_TIME:\n+        effectiveTimestamp = timestamp;\n+        break;\n+\n+      case PROCESSING_TIME:\n+      case SYNCHRONIZED_PROCESSING_TIME:\n+        effectiveTimestamp = context.stepContext.timerInternals().currentInputWatermarkTime();\n+        break;\n+\n+      default:\n+        throw new IllegalArgumentException(\n+            String.format(\"Unknown time domain: %s\", timeDomain));\n+    }\n+\n+    OnTimerArgumentProvider<InputT, OutputT> argumentProvider =\n+        new OnTimerArgumentProvider<>(fn, context, window, effectiveTimestamp, timeDomain);\n+    invoker.invokeOnTimer(timerId, argumentProvider);\n+  }\n+\n   private void invokeProcessElement(WindowedValue<InputT> elem) {\n     final DoFnProcessContext<InputT, OutputT> processContext = createProcessContext(elem);\n \n@@ -630,7 +662,13 @@ public State state(String stateId) {\n \n     @Override\n     public Timer timer(String timerId) {\n-      throw new UnsupportedOperationException(\"Timer parameters are not supported.\");\n+      try {\n+        TimerSpec spec =\n+            (TimerSpec) signature.timerDeclarations().get(timerId).field().get(fn);\n+        return new TimerInternalsTimer(getNamespace(), timerId, spec, stepContext.timerInternals());\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      }\n     }\n \n     @Override\n@@ -682,5 +720,201 @@ public void outputWindowedValue(\n         }\n       };\n     }\n+\n+  }\n+\n+  /**\n+   * A concrete implementation of {@link DoFnInvoker.ArgumentProvider} used for running a {@link\n+   * DoFn} on a timer.\n+   *\n+   * @param <InputT> the type of the {@link DoFn} (main) input elements\n+   * @param <OutputT> the type of the {@link DoFn} (main) output elements\n+   */\n+  private class OnTimerArgumentProvider<InputT, OutputT>\n+      extends DoFn<InputT, OutputT>.OnTimerContext\n+      implements DoFnInvoker.ArgumentProvider<InputT, OutputT> {\n+\n+    final DoFn<InputT, OutputT> fn;\n+    final DoFnContext<InputT, OutputT> context;\n+    private final BoundedWindow window;\n+    private final Instant timestamp;\n+    private final TimeDomain timeDomain;\n+\n+    /** Lazily initialized; should only be accessed via {@link #getNamespace()}. */\n+    private StateNamespace namespace;\n+\n+    /**\n+     * The state namespace for this context.\n+     *\n+     * <p>Any call to {@link #getNamespace()} when more than one window is present will crash; this\n+     * represents a bug in the runner or the {@link DoFnSignature}, since values must be in exactly\n+     * one window when state or timers are relevant.\n+     */\n+    private StateNamespace getNamespace() {\n+      if (namespace == null) {\n+        namespace = StateNamespaces.window(windowCoder, window);\n+      }\n+      return namespace;\n+    }\n+\n+    private OnTimerArgumentProvider(\n+        DoFn<InputT, OutputT> fn,\n+        DoFnContext<InputT, OutputT> context,\n+        BoundedWindow window,\n+        Instant timestamp,\n+        TimeDomain timeDomain) {\n+      fn.super();\n+      this.fn = fn;\n+      this.context = context;\n+      this.window = window;\n+      this.timestamp = timestamp;\n+      this.timeDomain = timeDomain;\n+    }\n+\n+    @Override\n+    public Instant timestamp() {\n+      return timestamp;\n+    }\n+\n+    @Override\n+    public BoundedWindow window() {\n+      return window;\n+    }\n+\n+    @Override\n+    public TimeDomain timeDomain() {\n+      return timeDomain;\n+    }\n+\n+    @Override\n+    public Context context(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"Context parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public ProcessContext processContext(DoFn<InputT, OutputT> doFn) {\n+      throw new UnsupportedOperationException(\"ProcessContext parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public OnTimerContext onTimerContext(DoFn<InputT, OutputT> doFn) {\n+      return this;\n+    }\n+\n+    @Override\n+    public InputProvider<InputT> inputProvider() {\n+      throw new UnsupportedOperationException(\"InputProvider parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public OutputReceiver<OutputT> outputReceiver() {\n+      throw new UnsupportedOperationException(\"OutputReceiver parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public <RestrictionT> RestrictionTracker<RestrictionT> restrictionTracker() {\n+      throw new UnsupportedOperationException(\"RestrictionTracker parameters are not supported.\");\n+    }\n+\n+    @Override\n+    public State state(String stateId) {\n+      try {\n+        StateSpec<?, ?> spec =\n+            (StateSpec<?, ?>) signature.stateDeclarations().get(stateId).field().get(fn);\n+        return stepContext\n+            .stateInternals()\n+            .state(getNamespace(), StateTags.tagForSpec(stateId, (StateSpec) spec));\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @Override\n+    public Timer timer(String timerId) {\n+      try {\n+        TimerSpec spec =\n+            (TimerSpec) signature.timerDeclarations().get(timerId).field().get(fn);\n+        return new TimerInternalsTimer(getNamespace(), timerId, spec, stepContext.timerInternals());\n+      } catch (IllegalAccessException e) {\n+        throw new RuntimeException(e);\n+      }\n+    }\n+\n+    @Override\n+    public PipelineOptions getPipelineOptions() {\n+      return context.getPipelineOptions();\n+    }\n+\n+    @Override\n+    public void output(OutputT output) {\n+      context.outputWithTimestamp(output, timestamp);\n+    }\n+\n+    @Override\n+    public void outputWithTimestamp(OutputT output, Instant timestamp) {\n+      context.outputWithTimestamp(output, timestamp);\n+    }\n+\n+    @Override\n+    public <T> void sideOutput(TupleTag<T> tag, T output) {\n+      context.sideOutputWithTimestamp(tag, output, timestamp);\n+    }\n+\n+    @Override\n+    public <T> void sideOutputWithTimestamp(TupleTag<T> tag, T output, Instant timestamp) {\n+      context.sideOutputWithTimestamp(tag, output, timestamp);\n+    }\n+\n+    @Override\n+    protected <AggInputT, AggOutputT> Aggregator<AggInputT, AggOutputT> createAggregator(\n+        String name,\n+        CombineFn<AggInputT, ?, AggOutputT> combiner) {\n+      throw new UnsupportedOperationException(\"Cannot createAggregator in @OnTimer method\");\n+    }\n+\n+    @Override\n+    public WindowingInternals<InputT, OutputT> windowingInternals() {\n+      throw new UnsupportedOperationException(\"WindowingInternals are unsupported.\");\n+    }\n+  }\n+\n+  private static class TimerInternalsTimer implements Timer {\n+    private final TimerInternals timerInternals;\n+    private final String timerId;\n+    private final TimerSpec spec;\n+    private final StateNamespace namespace;\n+\n+    public TimerInternalsTimer(\n+        StateNamespace namespace, String timerId, TimerSpec spec, TimerInternals timerInternals) {\n+      this.namespace = namespace;\n+      this.timerId = timerId;\n+      this.spec = spec;\n+      this.timerInternals = timerInternals;\n+    }\n+\n+    @Override\n+    public void setForNowPlus(Duration durationFromNow) {\n+      timerInternals.setTimer(\n+          namespace, timerId, getCurrentTime().plus(durationFromNow), spec.getTimeDomain());\n+    }\n+\n+    @Override\n+    public void cancel() {\n+      timerInternals.deleteTimer(namespace, timerId);\n+    }\n+\n+    private Instant getCurrentTime() {\n+      switch(spec.getTimeDomain()) {\n+        case EVENT_TIME:\n+          return timerInternals.currentInputWatermarkTime();\n+        case PROCESSING_TIME:\n+          return timerInternals.currentProcessingTime();\n+        case SYNCHRONIZED_PROCESSING_TIME:\n+          return timerInternals.currentSynchronizedProcessingTime();\n+        default:\n+          throw new IllegalStateException(\n+              String.format(\"Timer created for unknown time domain %s\", spec.getTimeDomain()));\n+      }\n+    }\n   }\n }",
                "changes": 236
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleOldDoFnRunner.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleOldDoFnRunner.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleOldDoFnRunner.java",
                "deletions": 0,
                "sha": "342a4a8694583c3bf7eb0a6d058c2bc966e577ad",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleOldDoFnRunner.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.beam.sdk.util.ExecutionContext.StepContext;\n import org.apache.beam.sdk.util.SideInputReader;\n import org.apache.beam.sdk.util.SystemDoFnInternal;\n+import org.apache.beam.sdk.util.TimeDomain;\n import org.apache.beam.sdk.util.TimerInternals;\n import org.apache.beam.sdk.util.UserCodeException;\n import org.apache.beam.sdk.util.WindowedValue;\n@@ -107,6 +108,13 @@ public void processElement(WindowedValue<InputT> elem) {\n     }\n   }\n \n+  @Override\n+  public void onTimer(String timerId, BoundedWindow window, Instant timestamp,\n+      TimeDomain timeDomain) {\n+    throw new UnsupportedOperationException(\n+        String.format(\"Timers are not supported by %s\", OldDoFn.class.getSimpleName()));\n+  }\n+\n   private void invokeProcessElement(WindowedValue<InputT> elem) {\n     final OldDoFn<InputT, OutputT>.ProcessContext processContext = createProcessContext(elem);\n     // This can contain user code. Wrap it in case it throws an exception.",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 41,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/test/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunnerTest.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/test/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunnerTest.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/test/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunnerTest.java",
                "deletions": 0,
                "sha": "a1cdbf6dce04c998773000cd8a17cb35bcae82a4",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/test/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunnerTest.java",
                "patch": "@@ -17,6 +17,7 @@\n  */\n package org.apache.beam.runners.core;\n \n+import static org.hamcrest.Matchers.contains;\n import static org.hamcrest.Matchers.containsInAnyOrder;\n import static org.hamcrest.Matchers.emptyIterable;\n import static org.hamcrest.Matchers.equalTo;\n@@ -37,7 +38,10 @@\n import org.apache.beam.sdk.transforms.windowing.Window;\n import org.apache.beam.sdk.util.IdentitySideInputWindowFn;\n import org.apache.beam.sdk.util.ReadyCheckingSideInputReader;\n+import org.apache.beam.sdk.util.TimeDomain;\n+import org.apache.beam.sdk.util.TimerInternals.TimerData;\n import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.util.state.StateNamespaces;\n import org.apache.beam.sdk.values.PCollection;\n import org.apache.beam.sdk.values.PCollectionView;\n import org.hamcrest.Matchers;\n@@ -215,22 +219,59 @@ public void processElementNoSideInputs() {\n     assertThat(underlying.inputElems, containsInAnyOrder(multiWindow));\n   }\n \n+  /** Tests that a call to onTimer gets delegated. */\n+  @Test\n+  public void testOnTimerCalled() {\n+    PushbackSideInputDoFnRunner<Integer, Integer> runner =\n+        createRunner(ImmutableList.<PCollectionView<?>>of());\n+\n+    String timerId = \"fooTimer\";\n+    IntervalWindow window = new IntervalWindow(new Instant(4), new Instant(16));\n+    Instant timestamp = new Instant(72);\n+\n+    // Mocking is not easily compatible with annotation analysis, so we manually record\n+    // the method call.\n+    runner.onTimer(timerId, window, new Instant(timestamp), TimeDomain.EVENT_TIME);\n+\n+    assertThat(\n+        underlying.firedTimers,\n+        contains(\n+            TimerData.of(\n+                timerId,\n+                StateNamespaces.window(IntervalWindow.getCoder(), window),\n+                timestamp,\n+                TimeDomain.EVENT_TIME)));\n+  }\n+\n   private static class TestDoFnRunner<InputT, OutputT> implements DoFnRunner<InputT, OutputT> {\n     List<WindowedValue<InputT>> inputElems;\n+    List<TimerData> firedTimers;\n     private boolean started = false;\n     private boolean finished = false;\n \n     @Override\n     public void startBundle() {\n       started = true;\n       inputElems = new ArrayList<>();\n+      firedTimers = new ArrayList<>();\n     }\n \n     @Override\n     public void processElement(WindowedValue<InputT> elem) {\n       inputElems.add(elem);\n     }\n \n+    @Override\n+    public void onTimer(String timerId, BoundedWindow window, Instant timestamp,\n+        TimeDomain timeDomain) {\n+      firedTimers.add(\n+          TimerData.of(\n+              timerId,\n+              StateNamespaces.window(IntervalWindow.getCoder(), (IntervalWindow) window),\n+              timestamp,\n+              timeDomain));\n+    }\n+\n     @Override\n     public void finishBundle() {\n       finished = true;",
                "changes": 41
            },
            {
                "status": "added",
                "additions": 301,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/test/java/org/apache/beam/runners/core/SimpleDoFnRunnerTest.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/runners/core-java/src/test/java/org/apache/beam/runners/core/SimpleDoFnRunnerTest.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "runners/core-java/src/test/java/org/apache/beam/runners/core/SimpleDoFnRunnerTest.java",
                "deletions": 0,
                "sha": "ec5d375117e907d7a3ad2b2a854fef515aa36a01",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/runners/core-java/src/test/java/org/apache/beam/runners/core/SimpleDoFnRunnerTest.java",
                "patch": "@@ -0,0 +1,301 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.beam.runners.core;\n+\n+import static org.hamcrest.Matchers.contains;\n+import static org.hamcrest.Matchers.is;\n+import static org.junit.Assert.assertThat;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.beam.sdk.coders.Coder;\n+import org.apache.beam.sdk.transforms.DoFn;\n+import org.apache.beam.sdk.transforms.windowing.BoundedWindow;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindow;\n+import org.apache.beam.sdk.transforms.windowing.GlobalWindows;\n+import org.apache.beam.sdk.transforms.windowing.WindowFn;\n+import org.apache.beam.sdk.util.BaseExecutionContext.StepContext;\n+import org.apache.beam.sdk.util.NullSideInputReader;\n+import org.apache.beam.sdk.util.TimeDomain;\n+import org.apache.beam.sdk.util.Timer;\n+import org.apache.beam.sdk.util.TimerInternals;\n+import org.apache.beam.sdk.util.TimerInternals.TimerData;\n+import org.apache.beam.sdk.util.TimerSpec;\n+import org.apache.beam.sdk.util.TimerSpecs;\n+import org.apache.beam.sdk.util.UserCodeException;\n+import org.apache.beam.sdk.util.WindowedValue;\n+import org.apache.beam.sdk.util.WindowingStrategy;\n+import org.apache.beam.sdk.util.state.StateNamespaces;\n+import org.apache.beam.sdk.values.TupleTag;\n+import org.joda.time.Duration;\n+import org.joda.time.Instant;\n+import org.junit.Before;\n+import org.junit.Rule;\n+import org.junit.Test;\n+import org.junit.rules.ExpectedException;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.JUnit4;\n+import org.mockito.Mock;\n+import org.mockito.MockitoAnnotations;\n+\n+/** Tests for {@link SimpleDoFnRunner}. */\n+@RunWith(JUnit4.class)\n+public class SimpleDoFnRunnerTest {\n+  @Rule public ExpectedException thrown = ExpectedException.none();\n+\n+  @Mock StepContext mockStepContext;\n+\n+  @Mock TimerInternals mockTimerInternals;\n+\n+  @Before\n+  public void setup() {\n+    MockitoAnnotations.initMocks(this);\n+    when(mockStepContext.timerInternals()).thenReturn(mockTimerInternals);\n+  }\n+\n+  @Test\n+  public void testProcessElementExceptionsWrappedAsUserCodeException() {\n+    ThrowingDoFn fn = new ThrowingDoFn();\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(new GlobalWindows()));\n+\n+    thrown.expect(UserCodeException.class);\n+    thrown.expectCause(is(fn.exceptionToThrow));\n+\n+    runner.processElement(WindowedValue.valueInGlobalWindow(\"anyValue\"));\n+  }\n+\n+  @Test\n+  public void testOnTimerExceptionsWrappedAsUserCodeException() {\n+    ThrowingDoFn fn = new ThrowingDoFn();\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(new GlobalWindows()));\n+\n+    thrown.expect(UserCodeException.class);\n+    thrown.expectCause(is(fn.exceptionToThrow));\n+\n+    runner.onTimer(\n+        ThrowingDoFn.TIMER_ID,\n+        GlobalWindow.INSTANCE,\n+        new Instant(0),\n+        TimeDomain.EVENT_TIME);\n+  }\n+\n+  /**\n+   * Tests that a users call to set a timer gets properly dispatched to the timer internals. From\n+   * there on, it is the duty of the runner & step context to set it in whatever way is right for\n+   * that runner.\n+   */\n+  @Test\n+  public void testTimerSet() {\n+    WindowFn<?, ?> windowFn = new GlobalWindows();\n+    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(new GlobalWindows()));\n+\n+    // Setting the timer needs the current time, as it is set relative\n+    Instant currentTime = new Instant(42);\n+    when(mockTimerInternals.currentInputWatermarkTime()).thenReturn(currentTime);\n+\n+    runner.processElement(WindowedValue.valueInGlobalWindow(\"anyValue\"));\n+\n+    verify(mockTimerInternals)\n+        .setTimer(\n+            StateNamespaces.window(new GlobalWindows().windowCoder(), GlobalWindow.INSTANCE),\n+            DoFnWithTimers.TIMER_ID,\n+            currentTime.plus(DoFnWithTimers.TIMER_OFFSET),\n+            TimeDomain.EVENT_TIME);\n+  }\n+\n+  @Test\n+  public void testStartBundleExceptionsWrappedAsUserCodeException() {\n+    ThrowingDoFn fn = new ThrowingDoFn();\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(new GlobalWindows()));\n+\n+    thrown.expect(UserCodeException.class);\n+    thrown.expectCause(is(fn.exceptionToThrow));\n+\n+    runner.startBundle();\n+  }\n+\n+  @Test\n+  public void testFinishBundleExceptionsWrappedAsUserCodeException() {\n+    ThrowingDoFn fn = new ThrowingDoFn();\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(new GlobalWindows()));\n+\n+    thrown.expect(UserCodeException.class);\n+    thrown.expectCause(is(fn.exceptionToThrow));\n+\n+    runner.finishBundle();\n+  }\n+\n+\n+  /**\n+   * Tests that {@link SimpleDoFnRunner#onTimer} properly dispatches to the underlying\n+   * {@link DoFn}.\n+   */\n+  @Test\n+  public void testOnTimerCalled() {\n+    WindowFn<?, GlobalWindow> windowFn = new GlobalWindows();\n+    DoFnWithTimers<GlobalWindow> fn = new DoFnWithTimers(windowFn.windowCoder());\n+    DoFnRunner<String, String> runner =\n+        new SimpleDoFnRunner<>(\n+            null,\n+            fn,\n+            NullSideInputReader.empty(),\n+            null,\n+            null,\n+            Collections.<TupleTag<?>>emptyList(),\n+            mockStepContext,\n+            null,\n+            WindowingStrategy.of(windowFn));\n+\n+    Instant currentTime = new Instant(42);\n+    Duration offset = Duration.millis(37);\n+\n+    // Mocking is not easily compatible with annotation analysis, so we manually record\n+    // the method call.\n+    runner.onTimer(\n+        DoFnWithTimers.TIMER_ID,\n+        GlobalWindow.INSTANCE,\n+        currentTime.plus(offset),\n+        TimeDomain.EVENT_TIME);\n+\n+    assertThat(\n+        fn.onTimerInvocations,\n+        contains(\n+            TimerData.of(\n+                DoFnWithTimers.TIMER_ID,\n+                StateNamespaces.window(windowFn.windowCoder(), GlobalWindow.INSTANCE),\n+                currentTime.plus(offset),\n+                TimeDomain.EVENT_TIME)));\n+  }\n+\n+  static class ThrowingDoFn extends DoFn<String, String> {\n+    final Exception exceptionToThrow = new UnsupportedOperationException(\"Expected exception\");\n+\n+    static final String TIMER_ID = \"throwingTimerId\";\n+\n+    @TimerId(TIMER_ID)\n+    private static final TimerSpec timer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @StartBundle\n+    public void startBundle(Context c) throws Exception {\n+      throw exceptionToThrow;\n+    }\n+\n+    @FinishBundle\n+    public void finishBundle(Context c) throws Exception {\n+      throw exceptionToThrow;\n+    }\n+\n+    @ProcessElement\n+    public void processElement(ProcessContext c) throws Exception {\n+      throw exceptionToThrow;\n+    }\n+\n+    @OnTimer(TIMER_ID)\n+    public void onTimer(OnTimerContext context) throws Exception {\n+      throw exceptionToThrow;\n+    }\n+  }\n+\n+  private static class DoFnWithTimers<W extends BoundedWindow> extends DoFn<String, String> {\n+    static final String TIMER_ID = \"testTimerId\";\n+\n+    static final Duration TIMER_OFFSET = Duration.millis(100);\n+\n+    private final Coder<W> windowCoder;\n+\n+    // Mutable\n+    List<TimerData> onTimerInvocations;\n+\n+    DoFnWithTimers(Coder<W> windowCoder) {\n+      this.windowCoder = windowCoder;\n+      this.onTimerInvocations = new ArrayList<>();\n+    }\n+\n+    @TimerId(TIMER_ID)\n+    private static final TimerSpec timer = TimerSpecs.timer(TimeDomain.EVENT_TIME);\n+\n+    @ProcessElement\n+    public void process(ProcessContext context, @TimerId(TIMER_ID) Timer timer) {\n+      timer.setForNowPlus(TIMER_OFFSET);\n+    }\n+\n+    @OnTimer(TIMER_ID)\n+    public void onTimer(OnTimerContext context) {\n+      onTimerInvocations.add(\n+          TimerData.of(\n+              DoFnWithTimers.TIMER_ID,\n+              StateNamespaces.window(windowCoder, (W) context.window()),\n+              context.timestamp(),\n+              context.timeDomain()));\n+    }\n+  }\n+}",
                "changes": 301
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/beam/raw/c28957d16fb0f63f82f578cf904df61bf7bb63e5/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java",
                "contents_url": "https://api.github.com/repos/apache/beam/contents/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java?ref=c28957d16fb0f63f82f578cf904df61bf7bb63e5",
                "filename": "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java",
                "deletions": 0,
                "sha": "d72cea40a41669bcee02b658a4b104992e5cf3f1",
                "blob_url": "https://github.com/apache/beam/blob/c28957d16fb0f63f82f578cf904df61bf7bb63e5/sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java",
                "patch": "@@ -1040,6 +1040,8 @@ private static String getStateId(List<Annotation> annotations) {\n       ErrorReporter errors, Class<?> fnClazz) {\n     Map<String, DoFnSignature.TimerDeclaration> declarations = new HashMap<>();\n     for (Field field : declaredFieldsWithAnnotation(DoFn.TimerId.class, fnClazz, DoFn.class)) {\n+      // TimerSpec fields may generally be private, but will be accessed via the signature\n+      field.setAccessible(true);\n       String id = field.getAnnotation(DoFn.TimerId.class).value();\n       validateTimerField(errors, declarations, id, field);\n       declarations.put(id, DoFnSignature.TimerDeclaration.create(id, field));\n@@ -1205,6 +1207,8 @@ private static void validateTimerField(\n     Map<String, DoFnSignature.StateDeclaration> declarations = new HashMap<>();\n \n     for (Field field : declaredFieldsWithAnnotation(DoFn.StateId.class, fnClazz, DoFn.class)) {\n+      // StateSpec fields may generally be private, but will be accessed via the signature\n+      field.setAccessible(true);\n       String id = field.getAnnotation(DoFn.StateId.class).value();\n \n       if (declarations.containsKey(id)) {",
                "changes": 4
            }
        ],
        "unit_tests": [
            "PushbackSideInputDoFnRunnerTest.java",
            "DoFnSignaturesTest.java",
            "SimpleOldDoFnRunnerTest.java",
            "LateDataDroppingDoFnRunnerTest.java",
            "SimpleDoFnRunnerTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "runners/core-java/src/test/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunnerTest.java",
        "buggy_files": [
            "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleDoFnRunner.java",
            "runners/core-java/src/main/java/org/apache/beam/runners/core/PushbackSideInputDoFnRunner.java",
            "sdks/java/core/src/main/java/org/apache/beam/sdk/transforms/reflect/DoFnSignatures.java",
            "runners/core-java/src/main/java/org/apache/beam/runners/core/DoFnRunner.java",
            "runners/core-java/src/main/java/org/apache/beam/runners/core/SimpleOldDoFnRunner.java",
            "runners/core-java/src/main/java/org/apache/beam/runners/core/LateDataDroppingDoFnRunner.java"
        ],
        "fixed": true
    }
]