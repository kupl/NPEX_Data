{
    "drill_4ccea48": {
        "bug_id": "drill_4ccea48",
        "commit": "https://github.com/apache/drill/commit/4ccea48905cca4a822521c83ad2ff31eb62bfa06",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/drill/blob/4ccea48905cca4a822521c83ad2ff31eb62bfa06/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetGroupScan.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/drill/contents/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetGroupScan.java?ref=4ccea48905cca4a822521c83ad2ff31eb62bfa06",
                "deletions": 1,
                "filename": "exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetGroupScan.java",
                "patch": "@@ -341,7 +341,11 @@ private void scanAndAssign (Multimap<Integer, ParquetRowGroupScan.RowGroupReadEn\n \n           endpointAssignments.put(minorFragmentId, rowGroupInfo.getRowGroupReadEntry());\n           logger.debug(\"Assigned rowGroup {} to minorFragmentId {} endpoint {}\", rowGroupInfo.getRowGroupIndex(), minorFragmentId, endpoints.get(minorFragmentId).getAddress());\n-          assignmentAffinityStats.update(bytesPerEndpoint.get(currentEndpoint) / rowGroupInfo.getLength());\n+          if (bytesPerEndpoint.get(currentEndpoint) != null) {\n+            assignmentAffinityStats.update(bytesPerEndpoint.get(currentEndpoint) / rowGroupInfo.getLength());\n+          } else {\n+            assignmentAffinityStats.update(0);\n+          }\n           iter.remove();\n           fragmentPointer = (minorFragmentId + 1) % endpoints.size();\n           break;",
                "raw_url": "https://github.com/apache/drill/raw/4ccea48905cca4a822521c83ad2ff31eb62bfa06/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetGroupScan.java",
                "sha": "10fcdffff75976c13aaf4a28204d1f84b48d1df4",
                "status": "modified"
            }
        ],
        "message": "DRILL-244: NPE when updating assignment affinity metric",
        "parent": "https://github.com/apache/drill/commit/c93a5a1dc396fc8378da77b62a9e61314fbc98b4",
        "repo": "drill",
        "unit_tests": [
            "TestParquetGroupScan.java"
        ]
    },
    "drill_a459e4d": {
        "bug_id": "drill_a459e4d",
        "commit": "https://github.com/apache/drill/commit/a459e4dbbc242fe0d06b221afe5f830780fc682e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/drill/blob/a459e4dbbc242fe0d06b221afe5f830780fc682e/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetReaderUtility.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/drill/contents/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetReaderUtility.java?ref=a459e4dbbc242fe0d06b221afe5f830780fc682e",
                "deletions": 1,
                "filename": "exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetReaderUtility.java",
                "patch": "@@ -196,7 +196,7 @@ public static DateCorruptionStatus detectCorruptDates(ParquetMetadata footer,\n     } else {\n       // Possibly an old, un-migrated Drill file, check the column statistics to see if min/max values look corrupt\n       // only applies if there is a date column selected\n-      if (createdBy.equals(\"parquet-mr\")) {\n+      if (createdBy == null || createdBy.equals(\"parquet-mr\")) {\n         // loop through parquet column metadata to find date columns, check for corrupt values\n         return checkForCorruptDateValuesInStatistics(footer, columns, autoCorrectCorruptDates);\n       } else {",
                "raw_url": "https://github.com/apache/drill/raw/a459e4dbbc242fe0d06b221afe5f830780fc682e/exec/java-exec/src/main/java/org/apache/drill/exec/store/parquet/ParquetReaderUtility.java",
                "sha": "767c98de8480cae7bd199ae06103bebdc05e0a27",
                "status": "modified"
            }
        ],
        "message": "DRILL-5400: Fix NPE in corrupt date detection\n\nThis closes #646",
        "parent": "https://github.com/apache/drill/commit/ee3489ce3b6e5ad53e5c3a59b6e2e4e50773c630",
        "repo": "drill",
        "unit_tests": [
            "TestParquetReaderUtility.java"
        ]
    },
    "drill_d44b889": {
        "bug_id": "drill_d44b889",
        "commit": "https://github.com/apache/drill/commit/d44b889ffebbb58939110776795489c052aac786",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/drill/blob/d44b889ffebbb58939110776795489c052aac786/exec/java-exec/src/main/java/org/apache/drill/exec/record/RecordIterator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/drill/contents/exec/java-exec/src/main/java/org/apache/drill/exec/record/RecordIterator.java?ref=d44b889ffebbb58939110776795489c052aac786",
                "deletions": 6,
                "filename": "exec/java-exec/src/main/java/org/apache/drill/exec/record/RecordIterator.java",
                "patch": "@@ -93,7 +93,7 @@ public void mark() {\n     // Release all batches before current batch. [0 to startBatchPosition).\n     final Map<Range<Long>,RecordBatchData> oldBatches = batches.subRangeMap(Range.closedOpen(0l, startBatchPosition)).asMapOfRanges();\n     for (Range<Long> range : oldBatches.keySet()) {\n-      oldBatches.get(range.lowerEndpoint()).clear();\n+      oldBatches.get(range).clear();\n     }\n     batches.remove(Range.closedOpen(0l, startBatchPosition));\n     markedInnerPosition = innerPosition;\n@@ -113,8 +113,9 @@ public void reset() {\n       }\n       innerPosition = markedInnerPosition;\n       outerPosition = markedOuterPosition;\n-      startBatchPosition = batches.getEntry(outerPosition).getKey().lowerEndpoint();\n-      innerRecordCount = (int)(batches.getEntry(outerPosition).getKey().upperEndpoint() - startBatchPosition);\n+      final Range<Long> markedBatchRange = batches.getEntry(outerPosition).getKey();\n+      startBatchPosition = markedBatchRange.lowerEndpoint();\n+      innerRecordCount = (int)(markedBatchRange.upperEndpoint() - startBatchPosition);\n       markedInnerPosition = -1;\n       markedOuterPosition = -1;\n     }\n@@ -133,9 +134,10 @@ public void forward(long delta) {\n     // Get vectors from new position.\n     container.transferIn(rbdNew.getContainer());\n     outerPosition = nextOuterPosition;\n-    startBatchPosition = batches.getEntry(outerPosition).getKey().lowerEndpoint();\n+    final Range<Long> markedBatchRange = batches.getEntry(outerPosition).getKey();\n+    startBatchPosition = markedBatchRange.lowerEndpoint();\n     innerPosition = (int)(outerPosition - startBatchPosition);\n-    innerRecordCount = (int)(batches.getEntry(outerPosition).getKey().upperEndpoint() - startBatchPosition);\n+    innerRecordCount = (int)(markedBatchRange.upperEndpoint() - startBatchPosition);\n   }\n \n   /**\n@@ -239,7 +241,9 @@ public long getOuterPosition() {\n \n   public int getCurrentPosition() {\n     Preconditions.checkArgument(initialized);\n-    Preconditions.checkArgument(innerPosition >= 0 && innerPosition < innerRecordCount);\n+    Preconditions.checkArgument(innerPosition >= 0 && innerPosition < innerRecordCount,\n+      String.format(\"innerPosition:%d, outerPosition:%d, innerRecordCount:%d, totalRecordCount:%d\",\n+        innerPosition, outerPosition, innerRecordCount, totalRecordCount));\n     return innerPosition;\n   }\n ",
                "raw_url": "https://github.com/apache/drill/raw/d44b889ffebbb58939110776795489c052aac786/exec/java-exec/src/main/java/org/apache/drill/exec/record/RecordIterator.java",
                "sha": "7b5ec2889760089252cce73e6a88420881bf1955",
                "status": "modified"
            }
        ],
        "message": "DRILL-4109 Fix NPE in RecordIterator.",
        "parent": "https://github.com/apache/drill/commit/46c47a24f67e53146521d50062180c4aa902f687",
        "repo": "drill",
        "unit_tests": [
            "TestRecordIterator.java"
        ]
    },
    "drill_ed51b3f": {
        "bug_id": "drill_ed51b3f",
        "commit": "https://github.com/apache/drill/commit/ed51b3f95ee4eaa3694629b1181b9e8cd13b932e",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/drill/blob/ed51b3f95ee4eaa3694629b1181b9e8cd13b932e/exec/java-exec/src/main/java/org/apache/drill/exec/client/DumpCat.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/drill/contents/exec/java-exec/src/main/java/org/apache/drill/exec/client/DumpCat.java?ref=ed51b3f95ee4eaa3694629b1181b9e8cd13b932e",
                "deletions": 1,
                "filename": "exec/java-exec/src/main/java/org/apache/drill/exec/client/DumpCat.java",
                "patch": "@@ -54,7 +54,6 @@ public static void main(String args[]) throws Exception {\n       System.out.println(e.getMessage());\n       String[] valid = {\"-f\", \"file\"};\n       new JCommander(o, valid).usage();\n-      jc.usage();\n       System.exit(-1);\n     }\n     if (o.help) {",
                "raw_url": "https://github.com/apache/drill/raw/ed51b3f95ee4eaa3694629b1181b9e8cd13b932e/exec/java-exec/src/main/java/org/apache/drill/exec/client/DumpCat.java",
                "sha": "7e8a4a26dca4f8d621836672e24b3adc7492c967",
                "status": "modified"
            }
        ],
        "message": "DRILL-559: Fix NPE in dumpcat when arguments are not provided",
        "parent": "https://github.com/apache/drill/commit/3f92e56aeb768cac90495951befaa0f03f13372e",
        "repo": "drill",
        "unit_tests": [
            "DumpCatTest.java"
        ]
    }
}