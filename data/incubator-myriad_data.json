[{"commit": "https://github.com/apache/incubator-myriad/commit/4bce035ec8feff66f4804cc121c3051f5ecff4fa", "parent": "https://github.com/apache/incubator-myriad/commit/79ba4a5f09c0bb59492a50bb8b310543fb372ead", "message": "[Myriad 188] - NodeManager switch to UNHEALTHY causes NPE on ResourceManager.\n\nJIRA:\n  [Myriad-188] https://issues.apache.org/jira/browse/MYRIAD-188\n  [Myriad-156] https://issues.apache.org/jira/browse/MYRIAD-156\n\nPull Request:\n  Closes #62\n\nAuthor:\n  darinj darinj@apache.org", "bug_id": "incubator-myriad_1", "file": [{"additions": 9, "raw_url": "https://github.com/apache/incubator-myriad/raw/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/main/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManager.java", "blob_url": "https://github.com/apache/incubator-myriad/blob/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/main/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManager.java", "sha": "1dee5fa22862fec26c5b7ff1a0da49848e24a12f", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/incubator-myriad/contents/myriad-scheduler/src/main/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManager.java?ref=4bce035ec8feff66f4804cc121c3051f5ecff4fa", "patch": "@@ -70,6 +70,7 @@\n  */\n public class YarnNodeCapacityManager extends BaseInterceptor {\n   private static final Logger LOGGER = LoggerFactory.getLogger(YarnNodeCapacityManager.class);\n+\n   private final AbstractYarnScheduler yarnScheduler;\n   private final RMContext rmContext;\n   private final MyriadDriver myriadDriver;\n@@ -247,9 +248,14 @@ public void setNodeCapacity(RMNode rmNode, Resource newCapacity) {\n       rmNode.getTotalCapability().setVirtualCores(newCapacity.getVirtualCores());\n       LOGGER.debug(\"Setting capacity for node {} to {}\", rmNode.getHostName(), newCapacity);\n       // updates the scheduler with the new capacity for the NM.\n-      // the event is handled by the scheduler asynchronously\n-      rmContext.getDispatcher().getEventHandler().handle(new NodeResourceUpdateSchedulerEvent(rmNode, ResourceOption.newInstance(\n-          rmNode.getTotalCapability(), RMNode.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT)));\n+      synchronized (yarnScheduler) {\n+        if (yarnScheduler.getSchedulerNode(rmNode.getNodeID()) != null) {\n+          yarnScheduler.updateNodeResource(rmNode,\n+              ResourceOption.newInstance(rmNode.getTotalCapability(), RMNode.OVER_COMMIT_TIMEOUT_MILLIS_DEFAULT));\n+        } else {\n+          LOGGER.info(\"Yarn Scheduler doesn't have node {}, probably UNHEALTHY\", rmNode.getNodeID());\n+        }\n+      }\n     }\n   }\n ", "filename": "myriad-scheduler/src/main/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManager.java"}, {"additions": 5, "raw_url": "https://github.com/apache/incubator-myriad/raw/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/FGSTestBaseSpec.groovy", "blob_url": "https://github.com/apache/incubator-myriad/blob/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/FGSTestBaseSpec.groovy", "sha": "c769999059734969564a42f26027c3be0249a6bc", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-myriad/contents/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/FGSTestBaseSpec.groovy?ref=4bce035ec8feff66f4804cc121c3051f5ecff4fa", "patch": "@@ -33,6 +33,7 @@ import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode\n import org.apache.hadoop.yarn.server.resourcemanager.scheduler.AbstractYarnScheduler\n import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerApplicationAttempt\n import org.apache.hadoop.yarn.server.resourcemanager.scheduler.SchedulerNode\n+import org.apache.hadoop.yarn.server.resourcemanager.scheduler.fair.FSSchedulerNode\n import org.apache.hadoop.yarn.util.resource.Resources\n import org.apache.mesos.Protos\n import org.apache.mesos.SchedulerDriver\n@@ -65,6 +66,7 @@ class FGSTestBaseSpec extends Specification {\n \n     def rmNodes = new ConcurrentHashMap<NodeId, RMNode>()\n \n+\n     RMNode getRMNode(int cpu, int mem, String host, Protos.SlaveID slaveId) {\n         RMNode rmNode = MockNodes.newNodeInfo(0, Resources.createResource(mem, cpu), 0, host)\n         if (rmNodes[rmNode.getNodeID()]) {\n@@ -80,18 +82,17 @@ class FGSTestBaseSpec extends Specification {\n \n     SchedulerNode getSchedulerNode(RMNode rmNode) {\n         SchedulerNode schedulerNode = new SchedulerNode(rmNode, false) {\n-\n             @Override\n             void reserveResource(SchedulerApplicationAttempt attempt, Priority priority, RMContainer container) {\n             }\n-\n             @Override\n             void unreserveResource(SchedulerApplicationAttempt attempt) {\n             }\n         }\n         return schedulerNode\n     }\n \n+\n     /******************* RMContext Related ****************/\n \n     def publisher = Mock(SystemMetricsPublisher) {}\n@@ -143,6 +144,8 @@ class FGSTestBaseSpec extends Specification {\n \n     AbstractYarnScheduler yarnScheduler = Mock(AbstractYarnScheduler) {\n         getRMContainer(_ as ContainerId) >> { ContainerId cid -> fgsContainers.get(cid).rmContainer }\n+        getSchedulerNode(_ as NodeId) >> { NodeId nodeId -> getSchedulerNode(rmNodes.get(nodeId)) }\n+        updateNodeResource(_ as RMNode, _ as ResourceOption) >> { }\n     }\n \n     FGSContainer getFGSContainer(RMNode node, int cid, int cpu, int mem, ContainerState state) {", "filename": "myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/FGSTestBaseSpec.groovy"}, {"additions": 3, "raw_url": "https://github.com/apache/incubator-myriad/raw/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManagerSpec.groovy", "blob_url": "https://github.com/apache/incubator-myriad/blob/4bce035ec8feff66f4804cc121c3051f5ecff4fa/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManagerSpec.groovy", "sha": "5d59c68eaa9c7cb111123cf9b9e7ff7e7fdd1659", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/incubator-myriad/contents/myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManagerSpec.groovy?ref=4bce035ec8feff66f4804cc121c3051f5ecff4fa", "patch": "@@ -19,6 +19,8 @@\n package org.apache.myriad.scheduler.fgs\n \n import org.apache.hadoop.yarn.api.records.ContainerState\n+import org.apache.hadoop.yarn.api.records.ResourceOption\n+import org.apache.hadoop.yarn.server.resourcemanager.rmnode.RMNode\n import org.apache.hadoop.yarn.server.resourcemanager.scheduler.event.NodeResourceUpdateSchedulerEvent\n import org.apache.hadoop.yarn.util.resource.Resources\n import org.apache.mesos.Protos\n@@ -115,7 +117,7 @@ class YarnNodeCapacityManagerSpec extends FGSTestBaseSpec {\n         then:\n         zeroNM.getTotalCapability().getMemory() == 2048\n         zeroNM.getTotalCapability().getVirtualCores() == 2\n-        1 * rmContext.getDispatcher().getEventHandler().handle(_ as NodeResourceUpdateSchedulerEvent)\n+        1 * yarnScheduler.updateNodeResource( _ as RMNode, _ as ResourceOption)\n     }\n \n     YarnNodeCapacityManager getYarnNodeCapacityManager() {\n@@ -137,6 +139,5 @@ class YarnNodeCapacityManagerSpec extends FGSTestBaseSpec {\n         def taskUtils = new TaskUtils(cfg)\n         return new YarnNodeCapacityManager(registry, yarnScheduler, rmContext,\n                 myriadDriver, offerLifecycleManager, nodeStore, state, taskUtils)\n-\n     }\n }", "filename": "myriad-scheduler/src/test/java/org/apache/myriad/scheduler/fgs/YarnNodeCapacityManagerSpec.groovy"}], "repo": "incubator-myriad"}, {"commit": "https://github.com/apache/incubator-myriad/commit/fceaf73013a38ba9e43e7f4ef1a258fbb96f09f1", "parent": "https://github.com/apache/incubator-myriad/commit/981c4d24d8838d82deb4d82c8e38814f14fec877", "message": "This commit address Myriad-135, it is possible an offer may not conta\u2026 \u2026in a particular resource type, in which case an NPE occured.\n\nIn reviewing the code it was also discovered Myriad was only taking the first resource type offered instead of all resources of a type offered.  This meant if Myriad was running with role \"Hadoop\" and got an offer with cpu(Hadoop): 2 and cpu(*): 1, it would ignore the 1 cpu it could've taken from the * role.\n\nThis closes: #3\nReview: https://github.com/apache/incubator-myriad/pull/3", "bug_id": "incubator-myriad_2", "file": [{"additions": 31, "raw_url": "https://github.com/apache/incubator-myriad/raw/fceaf73013a38ba9e43e7f4ef1a258fbb96f09f1/myriad-scheduler/src/main/java/com/ebay/myriad/scheduler/event/handlers/ResourceOffersEventHandler.java", "blob_url": "https://github.com/apache/incubator-myriad/blob/fceaf73013a38ba9e43e7f4ef1a258fbb96f09f1/myriad-scheduler/src/main/java/com/ebay/myriad/scheduler/event/handlers/ResourceOffersEventHandler.java", "sha": "1ca9ec0b6467c3cba7bde6b6e5d2179bc01d5a2b", "changes": 49, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/incubator-myriad/contents/myriad-scheduler/src/main/java/com/ebay/myriad/scheduler/event/handlers/ResourceOffersEventHandler.java?ref=fceaf73013a38ba9e43e7f4ef1a258fbb96f09f1", "patch": "@@ -64,6 +64,12 @@\n \n   private static final Lock driverOperationLock = new ReentrantLock();\n \n+  private static final String RESOURCES_CPU_KEY = \"cpus\";\n+  private static final String RESOURCES_MEM_KEY = \"mem\";\n+  private static final String RESOURCES_PORTS_KEY = \"ports\";\n+  private static final String RESOURCES_DISK_KEY = \"disk\";\n+\n+\n   @Inject\n   private SchedulerState schedulerState;\n \n@@ -155,7 +161,7 @@ public void onEvent(ResourceOffersEvent event, long sequence,\n         if (SchedulerUtils.isEligibleForFineGrainedScaling(offer.getHostname(), schedulerState)) {\n           if (LOGGER.isDebugEnabled()) {\n             LOGGER.debug(\"Picking an offer from slave with hostname {} for fine grained scaling.\",\n-                offer.getHostname());\n+                    offer.getHostname());\n           }\n           offerLifecycleMgr.addOffers(offer);\n         } else {\n@@ -175,22 +181,27 @@ private boolean matches(Offer offer, NodeTask taskToLaunch, Constraint constrain\n       return false;\n     }\n     Map<String, Object> results = new HashMap<String, Object>(5);\n+    //Assign default values to avoid NPE\n+    results.put(RESOURCES_CPU_KEY, Double.valueOf(0.0));\n+    results.put(RESOURCES_MEM_KEY, Double.valueOf(0.0));\n+    results.put(RESOURCES_DISK_KEY, Double.valueOf(0.0));\n+    results.put(RESOURCES_PORTS_KEY, Integer.valueOf(0));\n \n     for (Resource resource : offer.getResourcesList()) {\n       if (resourceEvaluators.containsKey(resource.getName())) {\n         resourceEvaluators.get(resource.getName()).eval(resource, results);\n       } else {\n         LOGGER.warn(\"Ignoring unknown resource type: {}\",\n-            resource.getName());\n+                resource.getName());\n       }\n     }\n-    double cpus = (Double) results.get(\"cpus\");\n-    double mem = (Double) results.get(\"mem\");\n-    int ports = (Integer) results.get(\"ports\");\n+    double cpus = (Double) results.get(RESOURCES_CPU_KEY);\n+    double mem = (Double) results.get(RESOURCES_MEM_KEY);\n+    int ports = (Integer) results.get(RESOURCES_PORTS_KEY);\n \n-    checkResource(cpus < 0, \"cpus\");\n-    checkResource(mem < 0, \"mem\");\n-    checkResource(ports < 0, \"port\");\n+    checkResource(cpus <= 0, RESOURCES_CPU_KEY);\n+    checkResource(mem <= 0, RESOURCES_MEM_KEY);\n+    checkResource(ports <= 0, RESOURCES_PORTS_KEY);\n \n     return checkAggregates(offer, taskToLaunch, ports, cpus, mem);\n   }\n@@ -243,7 +254,7 @@ private static Double scalarToDouble(Resource resource, String id) {\n       value = new Double(resource.getScalar().getValue());\n     } else {\n       LOGGER.error(id + \" resource was not a scalar: {}\", resource\n-          .getType().toString());\n+              .getType().toString());\n     }\n     return value;\n   }\n@@ -256,21 +267,23 @@ private static Double scalarToDouble(Resource resource, String id) {\n \n   static {\n     resourceEvaluators = new HashMap<String, EvalResources>(4);\n-    resourceEvaluators.put(\"cpus\", new EvalResources() {\n+    resourceEvaluators.put(RESOURCES_CPU_KEY, new EvalResources() {\n       public void eval(Resource resource, Map<String, Object> results) {\n-        results.put(\"cpus\", scalarToDouble(resource, \"cpus\"));\n+        results.put(RESOURCES_CPU_KEY, (Double) results.get(RESOURCES_CPU_KEY) +\n+                scalarToDouble(resource, RESOURCES_CPU_KEY));\n       }\n     });\n-    resourceEvaluators.put(\"mem\", new EvalResources() {\n+    resourceEvaluators.put(RESOURCES_MEM_KEY, new EvalResources() {\n       public void eval(Resource resource, Map<String, Object> results) {\n-        results.put(\"mem\", scalarToDouble(resource, \"mem\"));\n+        results.put(RESOURCES_MEM_KEY, (Double) results.get(RESOURCES_MEM_KEY) +\n+                scalarToDouble(resource, RESOURCES_MEM_KEY));\n       }\n     });\n-    resourceEvaluators.put(\"disk\", new EvalResources() {\n+    resourceEvaluators.put(RESOURCES_DISK_KEY, new EvalResources() {\n       public void eval(Resource resource, Map<String, Object> results) {\n       }\n     });\n-    resourceEvaluators.put(\"ports\", new EvalResources() {\n+    resourceEvaluators.put(RESOURCES_PORTS_KEY, new EvalResources() {\n       public void eval(Resource resource, Map<String, Object> results) {\n         int ports = 0;\n         if (resource.getType().equals(Value.Type.RANGES)) {\n@@ -280,13 +293,13 @@ public void eval(Resource resource, Map<String, Object> results) {\n               ports += range.getEnd() - range.getBegin() + 1;\n             }\n           }\n-\n         } else {\n           LOGGER.error(\"ports resource was not Ranges: {}\", resource\n-              .getType().toString());\n+                  .getType().toString());\n \n         }\n-        results.put(\"ports\", Integer.valueOf(ports));\n+        results.put(RESOURCES_PORTS_KEY, (Integer) results.get(RESOURCES_PORTS_KEY) +\n+                Integer.valueOf(ports));\n       }\n     });\n   }", "filename": "myriad-scheduler/src/main/java/com/ebay/myriad/scheduler/event/handlers/ResourceOffersEventHandler.java"}], "repo": "incubator-myriad"}]
