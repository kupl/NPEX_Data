{
    "pivot_3f2a9a2": {
        "bug_id": "pivot_3f2a9a2",
        "commit": "https://github.com/apache/pivot/commit/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pivot/blob/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/build.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/build.xml?ref=3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
                "deletions": 2,
                "filename": "build.xml",
                "patch": "@@ -36,12 +36,12 @@ limitations under the License.\n     <property name=\"keystore.passwd\" value=\"apache\"/>\n \n     <!-- Compiler properties -->\n-    <property name=\"compiler.deprecation\" value=\"true\"/>\n+    <property name=\"compiler.deprecation\" value=\"false\"/>\n     <property name=\"compiler.debug\" value=\"false\"/>\n     <property name=\"compiler.target\" value=\"1.6\"/>\n     <property name=\"compiler.encoding\" value=\"UTF-8\"/>\n     <property name=\"compiler.indexJars\" value=\"true\"/>\n-    <property name=\"compiler.arg\" value=\"-Xlint\"/>\n+    <property name=\"compiler.arg\" value=\"-Xlint:-deprecation\"/>\n \n     <!-- Test properties -->\n     <property name=\"test.verbose\" value=\"false\"/>",
                "raw_url": "https://github.com/apache/pivot/raw/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/build.xml",
                "sha": "58829fe6830b2f5510ce6bd0e6877b1b158af2d9",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pivot/blob/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/src/org/apache/pivot/serialization/JSONSerializer.java?ref=3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e",
                "deletions": 5,
                "filename": "core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "patch": "@@ -772,7 +772,8 @@ public static Number getNumber(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Short getShort(Object root, String path) {\n-        return getNumber(root, path).shortValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.shortValue();\n     }\n \n     /**\n@@ -784,7 +785,8 @@ public static Short getShort(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Integer getInteger(Object root, String path) {\n-        return getNumber(root, path).intValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.intValue();\n     }\n \n     /**\n@@ -796,7 +798,8 @@ public static Integer getInteger(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Long getLong(Object root, String path) {\n-        return getNumber(root, path).longValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.longValue();\n     }\n \n     /**\n@@ -808,7 +811,8 @@ public static Long getLong(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Float getFloat(Object root, String path) {\n-        return getNumber(root, path).floatValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.floatValue();\n     }\n \n     /**\n@@ -820,7 +824,8 @@ public static Float getFloat(Object root, String path) {\n      * @see #get(Object, String)\n      */\n     public static Double getDouble(Object root, String path) {\n-        return getNumber(root, path).doubleValue();\n+        Number number = getNumber(root, path);\n+        return (number == null) ? null : number.doubleValue();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pivot/raw/3f2a9a23cea5ef524286c5748d42a7c3a79f7d0e/core/src/org/apache/pivot/serialization/JSONSerializer.java",
                "sha": "1c74f54873393082c43537e738b50873fb664473",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPEs in JSONSerializer; temporarily disable deprecation warnings in build.xml.\n\ngit-svn-id: https://svn.apache.org/repos/asf/pivot/trunk@918160 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/cf5f62a024ca7da2674d3f2442988dfe05668f82",
        "patched_files": [
            "build.xml",
            "JSONSerializer.java"
        ],
        "repo": "pivot",
        "unit_tests": [
            "JSONSerializerTest.java"
        ]
    },
    "pivot_9ee479f": {
        "bug_id": "pivot_9ee479f",
        "commit": "https://github.com/apache/pivot/commit/9ee479fcbc66fe77821e25823a18f35df317fd30",
        "file": [
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/pivot/blob/9ee479fcbc66fe77821e25823a18f35df317fd30/core/src/org/apache/pivot/collections/MapList.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/src/org/apache/pivot/collections/MapList.java?ref=9ee479fcbc66fe77821e25823a18f35df317fd30",
                "deletions": 28,
                "filename": "core/src/org/apache/pivot/collections/MapList.java",
                "patch": "@@ -26,13 +26,13 @@\n  * Decorates a {@link Map} to look like a {@link List} of key/value pairs. This\n  * facilitates the use of a <tt>Map</tt> as table data in a\n  * {@link org.apache.pivot.wtk.TableView}.\n- *\n+ * \n  * @author tvolkert\n  */\n public class MapList<K, V> implements List<Pair<K, V>> {\n     /**\n      * Map list listener list.\n-     *\n+     * \n      * @author tvolkert\n      */\n     private static class MapListListenerList<K, V> extends ListenerList<MapListListener<K, V>>\n@@ -48,6 +48,8 @@ public void sourceChanged(MapList<K, V> mapList, Map<K, V> previousSource) {\n \n     private ArrayList<Pair<K, V>> view = null;\n \n+    // this flag is used to prevent recursion if the source is updated\n+    // externally\n     private boolean updating = false;\n \n     private ListListenerList<Pair<K, V>> listListeners = new ListListenerList<Pair<K, V>>();\n@@ -120,31 +122,34 @@ public MapList() {\n \n     /**\n      * Creates a new map list that decorates the specified source map.\n-     *\n+     * \n      * @param source\n-     * The map to present as a list\n+     *            The map to present as a list\n      */\n     public MapList(Map<K, V> source) {\n         setSource(source);\n     }\n \n     /**\n      * Gets the source map.\n-     *\n-     * @return\n-     * The source map, or <tt>null</tt> if no source is set\n+     * \n+     * @return The source map, or <tt>null</tt> if no source is set\n      */\n     public Map<K, V> getSource() {\n         return source;\n     }\n \n     /**\n      * Sets the source map.\n-     *\n+     * \n      * @param source\n-     * The source map, or <tt>null</tt> to clear the source\n+     *            The source map, or <tt>null</tt> to clear the source\n      */\n     public void setSource(Map<K, V> source) {\n+        if (source == null) {\n+            source = new HashMap<K, V>();\n+        }\n+\n         Map<K, V> previousSource = this.source;\n \n         if (previousSource != source) {\n@@ -168,14 +173,10 @@ public void setSource(Map<K, V> source) {\n             mapListListeners.sourceChanged(this, previousSource);\n \n             // Refresh the view\n-            if (source == null) {\n-                view = null;\n-            } else {\n-                view = new ArrayList<Pair<K, V>>(source.count());\n+            view = new ArrayList<Pair<K, V>>(source.count());\n \n-                for (K key : source) {\n-                    listListeners.itemInserted(this, view.add(new Pair<K, V>(key, source.get(key))));\n-                }\n+            for (K key : source) {\n+                listListeners.itemInserted(this, view.add(new Pair<K, V>(key, source.get(key))));\n             }\n         }\n     }\n@@ -249,8 +250,7 @@ public void insert(Pair<K, V> pair, int index) {\n \n         Pair<K, V> previousPair = view.get(index);\n \n-        if (!pair.key.equals(previousPair.key)\n-            && source.containsKey(pair.key)) {\n+        if (!pair.key.equals(previousPair.key) && source.containsKey(pair.key)) {\n             throw new IllegalArgumentException(\"Duplicate keys not allowed.\");\n         }\n \n@@ -260,7 +260,6 @@ public void insert(Pair<K, V> pair, int index) {\n         // Update the source\n         updating = true;\n         try {\n-            source.remove(previousPair.key);\n             source.put(pair.key, pair.value);\n         } finally {\n             updating = false;\n@@ -280,7 +279,7 @@ public int remove(Pair<K, V> pair) {\n         int index = indexOf(pair);\n \n         if (index >= 0) {\n-           remove(index, 1);\n+            remove(index, 1);\n         }\n \n         return index;\n@@ -328,15 +327,13 @@ public int indexOf(Pair<K, V> pair) {\n     }\n \n     /**\n-     * Finds the specified pair in the view list by searching linearly\n-     * and reporting an exact match only (bypasses the list's\n-     * comparator).\n-     *\n+     * Finds the specified pair in the view list by searching linearly and\n+     * reporting an exact match only (bypasses the list's comparator).\n+     * \n      * @param pair\n-     * The pair to search for\n-     *\n-     * @return\n-     * The index of the pair in the list, or <tt>-1</tt> if not found\n+     *            The pair to search for\n+     * \n+     * @return The index of the pair in the list, or <tt>-1</tt> if not found\n      */\n     private int linearSearch(Pair<K, V> pair) {\n         int index = -1;",
                "raw_url": "https://github.com/apache/pivot/raw/9ee479fcbc66fe77821e25823a18f35df317fd30/core/src/org/apache/pivot/collections/MapList.java",
                "sha": "05d81d58a03d8e935baf8fe348015ed0bccca125",
                "status": "modified"
            },
            {
                "additions": 167,
                "blob_url": "https://github.com/apache/pivot/blob/9ee479fcbc66fe77821e25823a18f35df317fd30/core/test/org/apache/pivot/collections/test/MapListTest.java",
                "changes": 167,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/test/org/apache/pivot/collections/test/MapListTest.java?ref=9ee479fcbc66fe77821e25823a18f35df317fd30",
                "deletions": 0,
                "filename": "core/test/org/apache/pivot/collections/test/MapListTest.java",
                "patch": "@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to you under the Apache License,\n+ * Version 2.0 (the \"License\"); you may not use this file except in\n+ * compliance with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pivot.collections.test;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.fail;\n+\n+import java.util.Comparator;\n+import java.util.Iterator;\n+\n+import org.apache.pivot.collections.HashMap;\n+import org.apache.pivot.collections.Map;\n+import org.apache.pivot.collections.MapList;\n+import org.apache.pivot.collections.MapListListener;\n+import org.apache.pivot.collections.Sequence;\n+import org.apache.pivot.collections.Map.Pair;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class MapListTest {\n+\n+    private TestMapListListener listener;\n+\n+    @Before\n+    public void createListener() {\n+        listener = new TestMapListListener();\n+    }\n+\n+    @Test\n+    public void basicTest() {\n+        MapList<String, Integer> mapList = new MapList<String, Integer>();\n+        assertMapList(mapList);\n+\n+        mapList = new MapList<String, Integer>(new HashMap<String, Integer>());\n+        assertMapList(mapList);\n+\n+        Map<String, Integer> source = mapList.getSource();\n+        mapList.getMapListListeners().add(listener);\n+        mapList.setSource(null);\n+        assertEquals(1, listener.calls);\n+        assertEquals(mapList, listener.mapList);\n+        assertEquals(source, listener.previousSource);\n+        assertMapList(mapList);\n+\n+        TestComparator comparator = new TestComparator();\n+        mapList.setComparator(comparator);\n+        assertEquals(comparator, mapList.getComparator());\n+    }\n+\n+    private void assertMapList(MapList<String, Integer> mapList) {\n+        assertNull(mapList.getComparator());\n+        assertNotNull(mapList.getListListeners());\n+        assertNotNull(mapList.getMapListListeners());\n+        assertEquals(0, mapList.getLength());\n+\n+        Pair<String, Integer> pair = new Pair<String, Integer>(\"a\", 1);\n+\n+        assertEquals(-1, mapList.indexOf(pair));\n+\n+        mapList.add(pair);\n+        assertEquals(1, mapList.getLength());\n+\n+        Map<String, Integer> newSource = new HashMap<String, Integer>();\n+        newSource.put(\"b\", 2);\n+        newSource.put(\"c\", 3);\n+        mapList.setSource(newSource);\n+\n+        assertEquals(newSource, mapList.getSource());\n+        assertEquals(2, mapList.getLength());\n+\n+        int iteratorCount = 0;\n+        Iterator<Pair<String, Integer>> iter = mapList.iterator();\n+        while (iter.hasNext()) {\n+            pair = iter.next();\n+            if (mapList.indexOf(pair) != iteratorCount) {\n+                fail(\"Unexpected pair \" + pair + \" in iterator\");\n+            }\n+            iteratorCount++;\n+        }\n+        assertEquals(2, iteratorCount);\n+\n+        Pair<String, Integer> newCPair = new Pair<String, Integer>(\"c\", 33);\n+        mapList.update(1, newCPair);\n+        assertEquals(newCPair, mapList.get(1));\n+\n+        Pair<String, Integer> aaPair = new Pair<String, Integer>(\"aa\", 11);\n+        mapList.insert(aaPair, 1);\n+        assertEquals(3, mapList.getLength());\n+        assertEquals(aaPair, mapList.get(1));\n+        assertEquals(newCPair, mapList.get(2));\n+\n+        Sequence<Pair<String, Integer>> sequence = mapList.remove(0, 1);\n+        assertNotNull(sequence);\n+        pair = sequence.get(0);\n+        assertNotNull(pair);\n+        assertEquals(\"b\", pair.key);\n+        assertEquals(2, pair.value);\n+\n+        assertEquals(2, mapList.getLength());\n+\n+        newSource.put(\"aa\", 77);\n+        pair = mapList.get(1);\n+        assertEquals(pair.key, \"aa\");\n+        assertEquals(pair.value, 77);\n+\n+        newSource.remove(\"aa\");\n+        assertEquals(1, mapList.getLength());\n+\n+        mapList.clear();\n+        assertEquals(0, mapList.getLength());\n+\n+        pair = new Pair<String, Integer>(\"d\", 4);\n+        mapList.add(pair);\n+        assertEquals(1, mapList.getLength());\n+        assertEquals(pair, mapList.get(0));\n+        \n+        assertEquals(0, mapList.remove(pair));\n+        assertEquals(0, mapList.getLength());\n+\n+        newSource.put(\"z\", 24);\n+        assertEquals(1, mapList.getLength());\n+        \n+        newSource.put(\"z\", 24);\n+        assertEquals(1, mapList.getLength());\n+        \n+        newSource.clear();\n+        assertEquals(0, mapList.getLength());\n+    }\n+\n+    private class TestMapListListener implements MapListListener<String, Integer> {\n+        private MapList<String, Integer> mapList;\n+        private Map<String, Integer> previousSource;\n+        private int calls;\n+\n+        @Override\n+        public void sourceChanged(MapList<String, Integer> mapList,\n+            Map<String, Integer> previousSource) {\n+            this.mapList = mapList;\n+            this.previousSource = previousSource;\n+            this.calls++;\n+        }\n+    }\n+\n+    private class TestComparator implements Comparator<Pair<String, Integer>> {\n+        @Override\n+        public int compare(Pair<String, Integer> o1, Pair<String, Integer> o2) {\n+            return o1.key.compareTo(o2.key);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/pivot/raw/9ee479fcbc66fe77821e25823a18f35df317fd30/core/test/org/apache/pivot/collections/test/MapListTest.java",
                "sha": "82dfcf264bca3ae6949d04c2369f40305ea07b13",
                "status": "added"
            }
        ],
        "message": "Added a test for MapList\n\nChanged MapList:\n- source is never null. previously it was easy to generate an NPE\n- changed update so that it doesn't remove before doing a put from the source.  previously update on the map handler was never being called\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pivot/trunk@804476 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/de2e283c595c01ad375d6008bb534003445854c0",
        "patched_files": [
            "MapList.java"
        ],
        "repo": "pivot",
        "unit_tests": [
            "MapListTest.java"
        ]
    },
    "pivot_c32c0d3": {
        "bug_id": "pivot_c32c0d3",
        "commit": "https://github.com/apache/pivot/commit/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pivot/blob/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca/core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pivot/contents/core/src/org/apache/pivot/serialization/CSVSerializer.java?ref=c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca",
                "deletions": 1,
                "filename": "core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "patch": "@@ -397,7 +397,9 @@ private String readValue(Reader reader)\n         }\n \n         // Trim the value\n-        value = value.trim();\n+        if (value != null) {\n+            value = value.trim();\n+        }\n \n         return value;\n     }",
                "raw_url": "https://github.com/apache/pivot/raw/c32c0d3e5a7d49b813845a10eb69fe74b6f1a2ca/core/src/org/apache/pivot/serialization/CSVSerializer.java",
                "sha": "5af9b8856b80ec3ce22bfbf3d7016dd7efb6f24f",
                "status": "modified"
            }
        ],
        "message": "fix potential NPE, value can be null in readValue()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pivot/trunk@957451 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pivot/commit/a7af7295c46fbd8c3772e183ce3e96a8345c1a2f",
        "patched_files": [
            "CSVSerializer.java"
        ],
        "repo": "pivot",
        "unit_tests": [
            "CSVSerializerTest.java"
        ]
    }
}