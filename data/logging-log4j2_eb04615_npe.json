[
    {
        "repo": "logging-log4j2",
        "commit": "https://github.com/apache/logging-log4j2/commit/eb046150bf6d0b87a195f7808aebca3627222be6",
        "bug_id": "logging-log4j2_eb04615",
        "message": "Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n\ngit-svn-id: https://svn.apache.org/repos/asf/logging/log4j/log4j2/trunk@1399852 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/logging-log4j2/commit/8bf770ea5fd0b4571c488cd68401479921c2ae41",
        "patched_files": [
            "RegexFilter.java",
            "extending.xml",
            "LogManager.java",
            "Category.java",
            "LoggerContext.java",
            "Logger.java",
            "LoggerContextFactory.java",
            "log4j-provider.xml",
            "SimpleLoggerContext.java",
            "SimpleLogger.java",
            "RFC5424Layout.java",
            "changes.xml",
            "PropsUtil.java",
            "EventLogger.java",
            "SocketServer.java",
            "FlumeAppender.java",
            "StatusLogger.java",
            "SimpleLoggerContextFactory.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 79,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/LogManager.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "deletions": 45,
                "sha": "8f050ee440f9944abf106c08ec2423945ed49530",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/LogManager.java",
                "patch": "@@ -16,16 +16,19 @@\n  */\n package org.apache.logging.log4j;\n \n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.io.IOException;\n import java.net.URL;\n-import java.util.ArrayList;\n import java.util.Enumeration;\n-import java.util.List;\n+import java.util.Map;\n import java.util.Properties;\n+import java.util.SortedMap;\n+import java.util.TreeMap;\n \n /**\n  * The anchor point for the logging system.\n@@ -39,10 +42,13 @@\n     private static final String LOGGER_RESOURCE = \"META-INF/log4j-provider.xml\";\n     private static final String LOGGER_CONTEXT_FACTORY = \"LoggerContextFactory\";\n     private static final String API_VERSION = \"Log4jAPIVersion\";\n+    private static final String FACTORY_PRIORITY = \"FactoryPriority\";\n     private static final String[] COMPATIBLE_API_VERSIONS = {\n-        \"1.99.0\"\n+        \"2.0.0\"\n     };\n \n+    private static final String FACTORY_PROPERTY_NAME = \"log4j2.loggerContextFactory\";\n+\n     private static LoggerContextFactory factory;\n \n     private static final Logger logger = StatusLogger.getLogger();\n@@ -58,54 +64,85 @@ protected LogManager() {\n      * be used but this could be extended to allow multiple implementations to be used.\n      */\n     static {\n+        PropsUtil managerProps = new PropsUtil(\"log4j2.LogManager.properties\");\n+        String factoryClass = managerProps.getStringProperty(FACTORY_PROPERTY_NAME);\n         ClassLoader cl = findClassLoader();\n-        List<LoggerContextFactory> factories = new ArrayList<LoggerContextFactory>();\n-\n-        Enumeration<URL> enumResources = null;\n-        try {\n-            enumResources = cl.getResources(LOGGER_RESOURCE);\n-        } catch (IOException e) {\n-            logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+        if (factoryClass != null) {\n+            try {\n+                Class<?> clazz = cl.loadClass(factoryClass);\n+                if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                    factory = (LoggerContextFactory) clazz.newInstance();\n+                }\n+            } catch (ClassNotFoundException cnfe) {\n+                logger.error(\"Unable to locate configured LoggerContextFactory {}\", factoryClass);\n+            } catch (Exception ex) {\n+                logger.error(\"Unable to create configured LoggerContextFactory {}\", factoryClass, ex);\n+            }\n         }\n \n-        if (enumResources != null) {\n-            while (enumResources.hasMoreElements()) {\n-                Properties props = new Properties();\n-                URL url = enumResources.nextElement();\n-                try {\n-                    props.loadFromXML(url.openStream());\n-                } catch (IOException ioe) {\n-                    logger.error(\"Unable to read \" + url.toString(), ioe);\n-                }\n-                if (!validVersion(props.getProperty(API_VERSION))) {\n-                    continue;\n-                }\n-                String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n-                if (className != null) {\n+        if (factory == null) {\n+            SortedMap<Integer, LoggerContextFactory> factories = new TreeMap<Integer, LoggerContextFactory>();\n+\n+            Enumeration<URL> enumResources = null;\n+            try {\n+                enumResources = cl.getResources(LOGGER_RESOURCE);\n+            } catch (IOException e) {\n+                logger.fatal(\"Unable to locate \" + LOGGER_RESOURCE, e);\n+            }\n+\n+            if (enumResources != null) {\n+                while (enumResources.hasMoreElements()) {\n+                    Properties props = new Properties();\n+                    URL url = enumResources.nextElement();\n                     try {\n-                        Class<?> clazz = cl.loadClass(className);\n-                        if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n-                            factories.add((LoggerContextFactory) clazz.newInstance());\n-                        } else {\n-                            logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                        props.loadFromXML(url.openStream());\n+                    } catch (IOException ioe) {\n+                        logger.error(\"Unable to read \" + url.toString(), ioe);\n+                    }\n+                    if (!validVersion(props.getProperty(API_VERSION))) {\n+                        continue;\n+                    }\n+                    String weight = props.getProperty(FACTORY_PRIORITY);\n+                    Integer priority = weight == null ? -1 : Integer.valueOf(weight);\n+                    String className = props.getProperty(LOGGER_CONTEXT_FACTORY);\n+                    if (className != null) {\n+                        try {\n+                            Class<?> clazz = cl.loadClass(className);\n+                            if (LoggerContextFactory.class.isAssignableFrom(clazz)) {\n+                                factories.put(priority, (LoggerContextFactory) clazz.newInstance());\n+                            } else {\n+                                logger.error(className + \" does not implement \" + LoggerContextFactory.class.getName());\n+                            }\n+                        } catch (ClassNotFoundException cnfe) {\n+                            logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(),\n+                                cnfe);\n+                        } catch (IllegalAccessException iae) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(),\n+                                iae);\n+                        } catch (Exception e) {\n+                            logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n+                            e.printStackTrace();\n                         }\n-                    } catch (ClassNotFoundException cnfe) {\n-                        logger.error(\"Unable to locate class \" + className + \" specified in \" + url.toString(), cnfe);\n-                    } catch (IllegalAccessException iae) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), iae);\n-                    } catch (Exception e) {\n-                        logger.error(\"Unable to create class \" + className + \" specified in \" + url.toString(), e);\n-                        e.printStackTrace();\n                     }\n                 }\n-            }\n-            if (factories.size() != 1) {\n-                logger.fatal(\"Unable to locate a logging implementation\");\n+                if (factories.size() == 0) {\n+                    logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                    factory = new SimpleLoggerContextFactory();\n+                } else {\n+                    StringBuilder sb = new StringBuilder(\"Multiple logging implementations found: \\n\");\n+                    for (Map.Entry<Integer, LoggerContextFactory> entry : factories.entrySet()) {\n+                        sb.append(\"Factory: \").append(entry.getValue().getClass().getName());\n+                        sb.append(\", Weighting: \").append(entry.getKey()).append(\"\\n\");\n+                    }\n+                    factory = factories.get(factories.lastKey());\n+                    sb.append(\"Using factory: \").append(factory.getClass().getName());\n+                    logger.warn(sb.toString());\n+\n+                }\n             } else {\n-                factory = factories.get(0);\n+                logger.error(\"Unable to locate a logging implementation, using SimpleLogger\");\n+                factory = new SimpleLoggerContextFactory();\n             }\n-        } else {\n-            logger.fatal(\"Unable to locate a logging implementation\");\n         }\n     }\n \n@@ -237,9 +274,6 @@ public ClassLoader run() {\n                     }\n                 }\n             );\n-        }\n-        if (cl != null && cl.getParent() != null) {\n-\n         }\n         if (cl == null) {\n             cl = LogManager.class.getClassLoader();",
                "changes": 124
            },
            {
                "status": "added",
                "additions": 168,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "deletions": 0,
                "sha": "807f92c1c6afbb211bf0b665554d369aa0b1164c",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
                "patch": "@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Marker;\n+import org.apache.logging.log4j.ThreadContext;\n+import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.spi.AbstractLogger;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.Map;\n+\n+/**\n+ *  This is the default logger that is used when no suitable logging implementation is available.\n+ *\n+ */\n+public class SimpleLogger extends AbstractLogger {\n+\n+    /**\n+     * Used to format times.\n+     * <p>\n+     * Note that DateFormat is not Thread-safe.\n+     */\n+    private DateFormat dateFormatter = null;\n+\n+    private Level level;\n+\n+    private boolean showDateTime;\n+\n+    private boolean showContextMap;\n+\n+    private PrintStream stream;\n+\n+    private String logName;\n+\n+\n+    public SimpleLogger(String name, Level defaultLevel, boolean showLogName, boolean showShortLogName,\n+                        boolean showDateTime, boolean showContextMap, String dateTimeFormat,\n+                        PropsUtil props, PrintStream stream) {\n+        super(name);\n+        String lvl = props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + name + \".level\");\n+        this.level = Level.toLevel(lvl, defaultLevel);\n+        if (showShortLogName) {\n+            int index = name.lastIndexOf(\".\");\n+            if (index > 0 && index < name.length()) {\n+                this.logName = name.substring(index + 1);\n+            } else {\n+                this.logName = name;\n+            }\n+        } else if (showLogName) {\n+            this.logName = name;\n+        }\n+        this.showDateTime = showDateTime;\n+        this.showContextMap = showContextMap;\n+        this.stream = stream;\n+\n+        if (showDateTime) {\n+            try {\n+                this.dateFormatter = new SimpleDateFormat(dateTimeFormat);\n+            } catch(IllegalArgumentException e) {\n+                // If the format pattern is invalid - use the default format\n+                this.dateFormatter = new SimpleDateFormat(SimpleLoggerContext.DEFAULT_DATE_TIME_FORMAT);\n+            }\n+        }\n+    }\n+\n+    public void setStream(PrintStream stream) {\n+        this.stream = stream;\n+    }\n+\n+    public void setLevel(Level level) {\n+        if (level != null) {\n+            this.level = level;\n+        }\n+    }\n+\n+    @Override\n+    public void log(Marker marker, String fqcn, Level level, Message msg, Throwable throwable) {\n+        StringBuilder sb = new StringBuilder();\n+        // Append date-time if so configured\n+        if(showDateTime) {\n+            Date now = new Date();\n+            String dateText;\n+            synchronized(dateFormatter) {\n+                dateText = dateFormatter.format(now);\n+            }\n+            sb.append(dateText);\n+            sb.append(\" \");\n+        }\n+\n+        sb.append(level.toString());\n+        sb.append(\" \");\n+        if (logName != null && logName.length() > 0) {\n+            sb.append(logName);\n+            sb.append(\" \");\n+        }\n+        sb.append(msg.getFormattedMessage());\n+        if (showContextMap) {\n+            Map<String, String> mdc = ThreadContext.getContext();\n+            if (mdc.size() > 0) {\n+                sb.append(\" \");\n+                sb.append(mdc.toString());\n+                sb.append(\" \");\n+            }\n+        }\n+        Object[] params = msg.getParameters();\n+        Throwable t;\n+        if (throwable == null && params != null && params[params.length -1] instanceof Throwable ) {\n+            t = (Throwable) params[params.length - 1];\n+        } else {\n+            t = throwable;\n+        }\n+        if (t != null) {\n+            sb.append(\" \");\n+            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+            t.printStackTrace(new PrintStream(baos));\n+            sb.append(baos.toString());\n+        }\n+        stream.println(sb.toString());\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, String msg, Object... p1) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Object msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+    @Override\n+    protected boolean isEnabled(Level level, Marker marker, Message msg, Throwable t) {\n+        return this.level.intLevel() >= level.intLevel();\n+    }\n+\n+}",
                "changes": 168
            },
            {
                "status": "added",
                "additions": 115,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "deletions": 0,
                "sha": "5db90c3804bad52922f9b660eac739e82a4019e5",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
                "patch": "@@ -0,0 +1,115 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.simple;\n+\n+import org.apache.logging.log4j.Level;\n+import org.apache.logging.log4j.Logger;\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.util.PropsUtil;\n+\n+import java.io.FileNotFoundException;\n+import java.io.FileOutputStream;\n+import java.io.InputStream;\n+import java.io.PrintStream;\n+import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n+import java.util.concurrent.ConcurrentMap;\n+\n+/**\n+ *\n+ */\n+public class SimpleLoggerContext implements LoggerContext {\n+\n+    /** The default format to use when formating dates */\n+    protected static final String DEFAULT_DATE_TIME_FORMAT = \"yyyy/MM/dd HH:mm:ss:SSS zzz\";\n+\n+    /** All system properties used by <code>SimpleLog</code> start with this */\n+    protected static final String SYSTEM_PREFIX = \"org.apache.logging.log4j.simplelog.\";\n+\n+    /** Properties loaded from simplelog.properties */\n+    private Properties simpleLogProps = new Properties();\n+\n+    private PropsUtil props;\n+\n+    /** Include the instance name in the log message? */\n+    private final boolean showLogName;\n+    /** Include the short name ( last component ) of the logger in the log\n+     *  message. Defaults to true - otherwise we'll be lost in a flood of\n+     *  messages without knowing who sends them.\n+     */\n+    private final boolean showShortName;\n+    /** Include the current time in the log message */\n+    private final boolean showDateTime;\n+    /** Include the ThreadContextMap in the log message */\n+    private final boolean showContextMap;\n+    /** The date and time format to use in the log message */\n+    private final String dateTimeFormat;\n+\n+    private final Level defaultLevel;\n+\n+    private final PrintStream stream;\n+\n+    public SimpleLoggerContext() {\n+        props = new PropsUtil(\"log4j2.simplelog.properties\");\n+\n+        showContextMap = props.getBooleanProperty(SYSTEM_PREFIX + \"showContextMap\", false);\n+        showLogName = props.getBooleanProperty(SYSTEM_PREFIX + \"showlogname\", false);\n+        showShortName = props.getBooleanProperty(SYSTEM_PREFIX + \"showShortLogname\", true);\n+        showDateTime = props.getBooleanProperty(SYSTEM_PREFIX + \"showdatetime\", false);\n+        String lvl = props.getStringProperty(SYSTEM_PREFIX + \"level\");\n+        defaultLevel = Level.toLevel(lvl, Level.ERROR);\n+\n+        dateTimeFormat = showDateTime ? props.getStringProperty(SimpleLoggerContext.SYSTEM_PREFIX + \"dateTimeFormat\",\n+            DEFAULT_DATE_TIME_FORMAT) : null;\n+\n+        String fileName = props.getStringProperty(SYSTEM_PREFIX + \"logFile\", \"system.err\");\n+        PrintStream ps;\n+        if (\"system.err\".equalsIgnoreCase(fileName)) {\n+            ps = System.err;\n+        } else if (\"system.out\".equalsIgnoreCase(fileName)) {\n+            ps = System.out;\n+        } else {\n+            try {\n+                FileOutputStream os = new FileOutputStream(fileName);\n+                ps = new PrintStream(os);\n+            } catch (FileNotFoundException fnfe) {\n+                ps = System.err;\n+            }\n+        }\n+        this.stream = ps;\n+    }\n+\n+    private ConcurrentMap<String, Logger> loggers = new ConcurrentHashMap<String, Logger>();\n+\n+    public Logger getLogger(String name) {\n+        if (loggers.containsKey(name)) {\n+            return loggers.get(name);\n+        }\n+\n+        loggers.putIfAbsent(name, new SimpleLogger(name, defaultLevel, showLogName, showShortName, showDateTime,\n+            showContextMap, dateTimeFormat, props, stream));\n+        return loggers.get(name);\n+    }\n+\n+    public boolean hasLogger(String name) {\n+        return false;\n+    }\n+\n+    public Object getExternalContext() {\n+        return null;\n+    }\n+}",
                "changes": 115
            },
            {
                "status": "renamed",
                "additions": 1,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContextFactory.java",
                "deletions": 1,
                "sha": "43bc54f0cc68fe7a95fbbe8f887acb998a714a6f",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java",
                "patch": "@@ -14,7 +14,7 @@\n  * See the license for the specific language governing permissions and\n  * limitations under the license.\n  */\n-package org.apache.logging.log4j;\n+package org.apache.logging.log4j.simple;\n \n import org.apache.logging.log4j.spi.LoggerContext;\n import org.apache.logging.log4j.spi.LoggerContextFactory;",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 17,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "deletions": 5,
                "sha": "66e5c76127b4d35d63b01ae28d84d942e0404b81",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
                "patch": "@@ -16,11 +16,13 @@\n  */\n package org.apache.logging.log4j.status;\n \n+import org.apache.logging.log4j.simple.SimpleLogger;\n+import org.apache.logging.log4j.simple.SimpleLoggerContextFactory;\n import org.apache.logging.log4j.spi.AbstractLogger;\n import org.apache.logging.log4j.Level;\n-import org.apache.logging.log4j.Logger;\n import org.apache.logging.log4j.Marker;\n import org.apache.logging.log4j.message.Message;\n+import org.apache.logging.log4j.util.PropsUtil;\n \n import java.util.ArrayList;\n import java.util.Iterator;\n@@ -50,7 +52,7 @@\n \n     private static final StatusLogger statusLogger = new StatusLogger();\n \n-    private Logger logger;\n+    private final SimpleLogger logger;\n \n     private final CopyOnWriteArrayList<StatusListener> listeners = new CopyOnWriteArrayList<StatusListener>();\n     private final ReentrantReadWriteLock listenersLock = new ReentrantReadWriteLock();\n@@ -59,6 +61,8 @@\n     private final ReentrantLock msgLock = new ReentrantLock();\n \n     private StatusLogger() {\n+        PropsUtil props = new PropsUtil(\"log4j2.StatusLogger.properties\");\n+        this.logger = new SimpleLogger(\"StatusLogger\", Level.ERROR, false, true, false, false, \"\", props, System.err);\n     }\n \n     /**\n@@ -69,6 +73,10 @@ public static StatusLogger getLogger() {\n         return statusLogger;\n     }\n \n+    public void setLevel(Level level) {\n+        logger.setLevel(level);\n+    }\n+\n     /**\n      * Register a new listener.\n      * @param listener The StatusListener to register.\n@@ -158,8 +166,12 @@ public void log(Marker marker, String fqcn, Level level, Message msg, Throwable\n         } finally {\n             msgLock.unlock();\n         }\n-        for (StatusListener listener : listeners) {\n-            listener.log(data);\n+        if (listeners.size() > 0) {\n+            for (StatusListener listener : listeners) {\n+                listener.log(data);\n+            }\n+        } else {\n+            logger.log(marker, fqcn, level, msg, t);\n         }\n     }\n \n@@ -208,7 +220,7 @@ protected boolean isEnabled(Level level, Marker marker, Message data, Throwable\n     }\n \n     protected boolean isEnabled(Level level, Marker marker) {\n-        if (logger == null) {\n+        if (listeners.size() > 0) {\n             return true;\n         }\n         switch (level) {",
                "changes": 22
            },
            {
                "status": "added",
                "additions": 86,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "deletions": 0,
                "sha": "25c80ff01e43475442a8154ae6252105d4e9da53",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
                "patch": "@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j.util;\n+\n+import java.io.InputStream;\n+import java.util.Properties;\n+\n+/**\n+ * Utility class to help with accessing System Properties.\n+ */\n+public class PropsUtil {\n+\n+    private Properties props;\n+\n+    public PropsUtil(Properties props) {\n+        this.props = props;\n+    }\n+\n+    public PropsUtil(String propsLocn) {\n+        this.props = new Properties();\n+        ClassLoader loader = findClassLoader();\n+        InputStream in = loader.getResourceAsStream(propsLocn);\n+        if (null != in) {\n+            try {\n+                this.props.load(in);\n+                in.close();\n+            } catch(java.io.IOException e) {\n+                // ignored\n+            }\n+        }\n+    }\n+\n+    public String getStringProperty(String name) {\n+        String prop = null;\n+        try {\n+            prop = System.getProperty(name);\n+        } catch (SecurityException e) {\n+            // Ignore\n+        }\n+        return (prop == null) ? props.getProperty(name) : prop;\n+    }\n+\n+    public String getStringProperty(String name, String defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : prop;\n+    }\n+\n+    public boolean getBooleanProperty(String name, boolean defaultValue) {\n+        String prop = getStringProperty(name);\n+        return (prop == null) ? defaultValue : \"true\".equalsIgnoreCase(prop);\n+    }\n+\n+    private static ClassLoader findClassLoader() {\n+        ClassLoader cl;\n+        if (System.getSecurityManager() == null) {\n+            cl = Thread.currentThread().getContextClassLoader();\n+        } else {\n+            cl = java.security.AccessController.doPrivileged(\n+                new java.security.PrivilegedAction<ClassLoader>() {\n+                    public ClassLoader run() {\n+                        return Thread.currentThread().getContextClassLoader();\n+                    }\n+                }\n+            );\n+        }\n+        if (cl == null) {\n+            cl = PropsUtil.class.getClassLoader();\n+        }\n+\n+        return cl;\n+    }\n+}",
                "changes": 86
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "deletions": 1,
                "sha": "2f8310b1f90bc7660e0f6197548e9cabbad56c23",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/EventLoggerTest.java",
                "patch": "@@ -31,7 +31,7 @@\n  */\n public class EventLoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"EventLogger\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"EventLogger\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "deletions": 1,
                "sha": "37b46558cad437f983eab773e3dd99dca3839810",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/LoggerTest.java",
                "patch": "@@ -34,7 +34,7 @@\n  */\n public class LoggerTest {\n \n-    SimpleLogger logger = (SimpleLogger) LogManager.getLogger(\"LoggerTest\");\n+    TestLogger logger = (TestLogger) LogManager.getLogger(\"LoggerTest\");\n     List<String> results = logger.getEntries();\n \n     @Before",
                "changes": 2
            },
            {
                "status": "renamed",
                "additions": 1,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLogger.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLogger.java",
                "deletions": 1,
                "sha": "41c93420adcf9e069361881f293bc3a44b812bdf",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLogger.java",
                "patch": "@@ -28,7 +28,7 @@\n /**\n  *\n  */\n-public class SimpleLogger extends AbstractLogger {\n+public class TestLogger extends AbstractLogger {\n     private List<String> array = new ArrayList<String>();\n \n     public List<String> getEntries() {",
                "changes": 2
            },
            {
                "status": "renamed",
                "additions": 2,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "previous_filename": "api/src/test/java/org/apache/logging/log4j/SimpleLoggerContext.java",
                "deletions": 2,
                "sha": "226502f93794bde28a64443d2c4741752d6346ee",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContext.java",
                "patch": "@@ -21,8 +21,8 @@\n /**\n  *\n  */\n-public class SimpleLoggerContext implements LoggerContext {\n-    private Logger logger = new SimpleLogger();\n+public class TestLoggerContext implements LoggerContext {\n+    private Logger logger = new TestLogger();\n \n     public Logger getLogger(String name) {\n         return logger;",
                "changes": 4
            },
            {
                "status": "added",
                "additions": 32,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "deletions": 0,
                "sha": "1c589e163e5de5cfaeeacc26ec9be4de00b6bbbd",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/java/org/apache/logging/log4j/TestLoggerContextFactory.java",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements. See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache license, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License. You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the license for the specific language governing permissions and\n+ * limitations under the license.\n+ */\n+package org.apache.logging.log4j;\n+\n+import org.apache.logging.log4j.spi.LoggerContext;\n+import org.apache.logging.log4j.spi.LoggerContextFactory;\n+\n+/**\n+ *\n+ */\n+public class TestLoggerContextFactory implements LoggerContextFactory {\n+\n+    private static LoggerContext ctx = new TestLoggerContext();\n+\n+    public LoggerContext getContext(String FQCN, ClassLoader loader, boolean currentContext) {\n+        return ctx;\n+    }\n+}",
                "changes": 32
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/api/src/test/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "api/src/test/resources/META-INF/log4j-provider.xml",
                "deletions": 2,
                "sha": "51e6d1bb145ac9dc25625e4d98ddce215e84b8fd",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/api/src/test/resources/META-INF/log4j-provider.xml",
                "patch": "@@ -1,6 +1,7 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n-    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.SimpleLoggerContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.TestLoggerContextFactory</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">0</entry>\n </properties>\n\\ No newline at end of file",
                "changes": 5
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/main/resources/META-INF/log4j-provider.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "core/src/main/resources/META-INF/log4j-provider.xml",
                "deletions": 1,
                "sha": "c15c54804c05295dcb7135a11b621396d4519533",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/main/resources/META-INF/log4j-provider.xml",
                "patch": "@@ -19,5 +19,6 @@\n <!DOCTYPE properties SYSTEM \"http://java.sun.com/dtd/properties.dtd\">\n <properties>\n     <entry key=\"LoggerContextFactory\">org.apache.logging.log4j.core.impl.Log4jContextFactory</entry>\n-    <entry key=\"Log4jAPIVersion\">1.99.0</entry>\n+    <entry key=\"Log4jAPIVersion\">2.0.0</entry>\n+    <entry key=\"FactoryPriority\">10</entry>\n </properties>\n\\ No newline at end of file",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "deletions": 0,
                "sha": "eb6f51dbc2d82a8e0a3be8fc2a7a09bfe16e5b7a",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/filter/RegexFilterTest.java",
                "patch": "@@ -21,6 +21,8 @@\n import org.apache.logging.log4j.core.impl.Log4jLogEvent;\n import org.apache.logging.log4j.core.LogEvent;\n import org.apache.logging.log4j.message.SimpleMessage;\n+import org.apache.logging.log4j.status.StatusLogger;\n+import org.junit.BeforeClass;\n import org.junit.Test;\n \n import static org.junit.Assert.assertTrue;\n@@ -30,6 +32,10 @@\n  *\n  */\n public class RegexFilterTest {\n+    @BeforeClass\n+    public static void before() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n+    }\n \n     @Test\n     public void testThresholds() {",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "deletions": 0,
                "sha": "c492c54d306872fb998aefde8e5b6e8e31191199",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/layout/RFC5424LayoutTest.java",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.logging.log4j.core.BasicConfigurationFactory;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.message.StructuredDataMessage;\n@@ -54,6 +55,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) LogManager.getContext();\n         ctx.reconfigure();",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "deletions": 1,
                "sha": "958d73ea3159bf34c0cbe49ef9fe76d2ef7c5fd1",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
                "patch": "@@ -96,7 +96,7 @@ public void testServer() throws Exception {\n             \"Test\", null, null, null, socketFilter);\n         appender.start();\n         ListAppender listApp = new ListAppender(\"Events\", serverFilter, null, false, false);\n-        appender.start();\n+        listApp.start();\n         PatternLayout layout = PatternLayout.createLayout(\"%m %ex%n\", null, null, null);\n         ConsoleAppender console = ConsoleAppender.createAppender(layout, null, \"SYSTEM_OUT\", \"Console\", \"true\");\n         Logger serverLogger = ctx.getLogger(SocketServer.class.getName());",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "deletions": 0,
                "sha": "fc2a8f913b70794c09512e5ffc5b35f10f0159be",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/flume-ng/src/test/java/org/apache/logging/log4j/flume/appender/FlumeAppenderTest.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.logging.log4j.core.Appender;\n import org.apache.logging.log4j.core.Logger;\n import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.status.StatusLogger;\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -68,6 +69,7 @@\n \n     @BeforeClass\n     public static void setupClass() {\n+        StatusLogger.getLogger().setLevel(Level.OFF);\n         ctx = (LoggerContext) LogManager.getContext();\n     }\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "deletions": 1,
                "sha": "f5fef96ab6fc4b8355ec248a84bbbdbea2b043f1",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/CategoryTest.java",
                "patch": "@@ -25,7 +25,9 @@\n import org.apache.logging.log4j.test.appender.ListAppender;\n import org.apache.logging.log4j.core.config.ConfigurationFactory;\n import org.apache.logging.log4j.core.layout.PatternLayout;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n \n@@ -48,10 +50,11 @@\n \n     private static final String LINE_SEP = System.getProperty(\"line.separator\");\n \n-    private ListAppender appender = new ListAppender(\"List\");\n+    private static ListAppender appender = new ListAppender(\"List\");\n \n     @BeforeClass\n     public static void setupClass() {\n+        appender.start();\n         ConfigurationFactory.setConfigurationFactory(cf);\n         LoggerContext ctx = (LoggerContext) org.apache.logging.log4j.LogManager.getContext();\n         ctx.reconfigure();\n@@ -60,6 +63,7 @@ public static void setupClass() {\n     @AfterClass\n     public static void cleanupClass() {\n         ConfigurationFactory.removeConfigurationFactory(cf);\n+        appender.stop();\n     }\n \n     /**",
                "changes": 6
            },
            {
                "status": "modified",
                "additions": 29,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "deletions": 0,
                "sha": "1e98c3afe1731a6f8a3a4c34f5b4b31e76b3f390",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/log4j12-api/src/test/java/org/apache/log4j/LoggerTest.java",
                "patch": "@@ -127,6 +127,7 @@ public void testAdditivity1() {\n         Logger a = Logger.getLogger(\"a\");\n         Logger ab = Logger.getLogger(\"a.b\");\n         CountingAppender ca = new CountingAppender();\n+        ca.start();\n         a.getLogger().addAppender(ca);\n \n         assertEquals(ca.counter, 0);\n@@ -138,6 +139,8 @@ public void testAdditivity1() {\n         assertEquals(ca.counter, 3);\n         ab.error(MSG);\n         assertEquals(ca.counter, 4);\n+        ca.stop();\n+        a.getLogger().removeAppender(ca);\n     }\n \n     /**\n@@ -152,7 +155,9 @@ public void testAdditivity2() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender ca1 = new CountingAppender();\n+        ca1.start();\n         CountingAppender ca2 = new CountingAppender();\n+        ca2.start();\n \n         a.getLogger().addAppender(ca1);\n         abc.getLogger().addAppender(ca2);\n@@ -171,6 +176,10 @@ public void testAdditivity2() {\n         x.debug(MSG);\n         assertEquals(ca1.counter, 2);\n         assertEquals(ca2.counter, 1);\n+        ca1.stop();\n+        ca2.stop();\n+        a.getLogger().removeAppender(ca1);\n+        abc.getLogger().removeAppender(ca2);\n     }\n \n     /**\n@@ -186,8 +195,11 @@ public void testAdditivity3() {\n         Logger x = Logger.getLogger(\"x\");\n \n         CountingAppender caRoot = new CountingAppender();\n+        caRoot.start();\n         CountingAppender caA = new CountingAppender();\n+        caA.start();\n         CountingAppender caABC = new CountingAppender();\n+        caABC.start();\n \n         root.getLogger().addAppender(caRoot);\n         a.getLogger().addAppender(caA);\n@@ -214,6 +226,12 @@ public void testAdditivity3() {\n         assertEquals(caRoot.counter, 1);\n         assertEquals(caA.counter, 1);\n         assertEquals(caABC.counter, 1);\n+        caRoot.stop();\n+        caA.stop();\n+        caABC.stop();\n+        root.getLogger().removeAppender(caRoot);\n+        a.getLogger().removeAppender(caA);\n+        abc.getLogger().removeAppender(caABC);\n     }\n \n     /* Don't support getLoggerRepository\n@@ -391,6 +409,8 @@ public void testTrace() {\n         LogEvent event = (LogEvent) msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormat());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -399,6 +419,7 @@ public void testTrace() {\n     @Test\n     public void testTraceWithException() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -416,6 +437,8 @@ public void testTraceWithException() {\n         LogEvent event = msgs.get(0);\n         assertEquals(org.apache.logging.log4j.Level.TRACE, event.getLevel());\n         assertEquals(\"Message 1\", event.getMessage().getFormattedMessage());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     /**\n@@ -424,6 +447,7 @@ public void testTraceWithException() {\n     @Test\n     public void testIsTraceEnabled() {\n         ListAppender appender = new ListAppender(\"List\");\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -433,12 +457,15 @@ public void testIsTraceEnabled() {\n \n         assertTrue(tracer.isTraceEnabled());\n         assertFalse(root.isTraceEnabled());\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     @Test\n     public void testLog() {\n         PatternLayout layout = PatternLayout.createLayout(\"%d %C %L %m\", null, null, null);\n         ListAppender appender = new ListAppender(\"List\", null, layout, false, false);\n+        appender.start();\n         Logger root = Logger.getRootLogger();\n         root.getLogger().addAppender(appender);\n         root.setLevel(Level.INFO);\n@@ -450,6 +477,8 @@ public void testLog() {\n         assertTrue(\"Incorrect number of messages\", msgs.size() == 3);\n         String msg = msgs.get(0);\n         assertTrue(\"Message contains incorrect class name: \" + msg, msg.contains(LoggerTest.class.getName()));\n+        appender.stop();\n+        root.getLogger().removeAppender(appender);\n     }\n \n     private static class MyLogger {",
                "changes": 29
            },
            {
                "status": "modified",
                "additions": 4,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/changes/changes.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "src/changes/changes.xml",
                "deletions": 0,
                "sha": "9822ba1dddc08cfa93dd28313e7dff0de45567d4",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/changes/changes.xml",
                "patch": "@@ -23,6 +23,10 @@\n \n   <body>\n     <release version=\"2.0-beta3\" date=\"TBD\" description= \"Bug fixes and enhancements\">\n+      <action dev=\"rgoers\" type=\"fix\">\n+        Avoid NPE when duplicate LoggerContextFactorys are present. Allow factories to specify a weight to allow\n+        real implementations to outrank test implementations. Provide a simple default LoggerContextFactory.\n+      </action>\n       <action issue=\"LOG4J2-97\" dev=\"rgoers\" type=\"fix\">\n         Added several missing classes and methods for Log4j 1.x compatibility.\n       </action>",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 16,
                "raw_url": "https://github.com/apache/logging-log4j2/raw/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "contents_url": "https://api.github.com/repos/apache/logging-log4j2/contents/src/site/xdoc/manual/extending.xml?ref=eb046150bf6d0b87a195f7808aebca3627222be6",
                "filename": "src/site/xdoc/manual/extending.xml",
                "deletions": 1,
                "sha": "df3ca467934e89aa318bafa14686bf9d8d039e49",
                "blob_url": "https://github.com/apache/logging-log4j2/blob/eb046150bf6d0b87a195f7808aebca3627222be6/src/site/xdoc/manual/extending.xml",
                "patch": "@@ -34,10 +34,25 @@\n               locates a LoggerContextFactory by locating all instances of META-INF/log4j-provider.xml, a\n               file that conforms to the java.util.Properties DTD, and then inspecting each to verify that it\n               specifies a value for the \"Log4jAPIVersion\" property that conforms to the version required by the\n-              LogManager. If more than one valid implementation is located an exception will be thrown.\n+              LogManager. If more than one valid implementation is located the value for \"FactoryPriority\" will\n+              be used to identify the factory with the highest priority.\n               Finally, the value of the \"LoggerContextFactory\" property will be used to locate the\n               LoggerContextFactory. In Log4j 2 this is provided by Log4jContextFactory.\n             </p>\n+            <p>\n+              Applications may change the LoggerContextFactory that will be used by\n+              <ol>\n+                <li>Implementing a new LoggerContextFactory and creating a log4j-provider.xml to reference it making\n+                  sure that it has the highest priority.</li>\n+                <li>Create a new log4j-provider.xml and configure it with the desired LoggerContextFactory making\n+                  sure that it has the highest priority.</li>\n+                <li>Setting the system property \"log4j2.LoggerContextFactory\" to the name of the LoggerContextFactory\n+                  class to use.</li>\n+                <li>Setting the property \"log4j2.LoggerContextFactory\" in a properties file named\n+                  \"log4j2.LogManager.properties\" to the name of the LoggerContextFactory class to use. The properties\n+                  file must be on the classpath.</li>\n+              </ol>\n+            </p>\n           </subsection>\n           <subsection name=\"ContextSelector\">\n             <p>",
                "changes": 17
            }
        ],
        "unit_tests": [
            "LoggerTest.java",
            "TestLoggerContext.java",
            "TestLoggerContextFactory.java",
            "RegexFilterTest.java",
            "TestLogger.java",
            "SocketServerTest.java",
            "EventLoggerTest.java",
            "CategoryTest.java",
            "FlumeAppenderTest.java",
            "RFC5424LayoutTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "core/src/test/java/org/apache/logging/log4j/core/net/SocketServerTest.java",
        "buggy_files": [
            "core/src/main/java/org/apache/logging/log4j/core/filter/RegexFilter.java",
            "src/site/xdoc/manual/extending.xml",
            "api/src/main/java/org/apache/logging/log4j/LogManager.java",
            "log4j12-api/src/main/java/org/apache/log4j/LogManager.java",
            "log4j12-api/src/main/java/org/apache/log4j/Category.java",
            "core/src/main/java/org/apache/logging/log4j/core/LoggerContext.java",
            "api/src/main/java/org/apache/logging/log4j/spi/LoggerContext.java",
            "core/src/main/java/org/apache/logging/log4j/core/Logger.java",
            "api/src/main/java/org/apache/logging/log4j/Logger.java",
            "log4j12-api/src/main/java/org/apache/log4j/Logger.java",
            "api/src/main/java/org/apache/logging/log4j/spi/LoggerContextFactory.java",
            "core/src/main/resources/META-INF/log4j-provider.xml",
            "api/src/test/resources/META-INF/log4j-provider.xml",
            "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContext.java",
            "api/src/main/java/org/apache/logging/log4j/simple/SimpleLogger.java",
            "core/src/main/java/org/apache/logging/log4j/core/layout/RFC5424Layout.java",
            "src/changes/changes.xml",
            "api/src/main/java/org/apache/logging/log4j/util/PropsUtil.java",
            "api/src/main/java/org/apache/logging/log4j/EventLogger.java",
            "core/src/main/java/org/apache/logging/log4j/core/net/SocketServer.java",
            "flume-ng/src/main/java/org/apache/logging/log4j/flume/appender/FlumeAppender.java",
            "api/src/main/java/org/apache/logging/log4j/status/StatusLogger.java",
            "api/src/main/java/org/apache/logging/log4j/simple/SimpleLoggerContextFactory.java"
        ],
        "fixed": true
    }
]