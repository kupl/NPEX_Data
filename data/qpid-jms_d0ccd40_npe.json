[
    {
        "repo": "qpid-jms",
        "commit": "https://github.com/apache/qpid-jms/commit/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
        "bug_id": "qpid-jms_d0ccd40",
        "message": "Just use collections and always return empty ones to avoid any NPE\nissues",
        "parent": "https://github.com/apache/qpid-jms/commit/47348747d7bb91cb6aafa94b5f7cb37b66b238d2",
        "patched_files": [
            "DiscoveryProviderFactory.java",
            "FailoverUriPool.java",
            "URISupport.java",
            "FailoverProvider.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverProvider.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverProvider.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverProvider.java",
                "deletions": 2,
                "sha": "a080fb1f8467edfc12cb9558472e05d6af82fca7",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverProvider.java",
                "patch": "@@ -113,11 +113,11 @@ public FailoverProvider(Map<String, String> nestedOptions) {\n         this(null, nestedOptions);\n     }\n \n-    public FailoverProvider(URI[] uris) {\n+    public FailoverProvider(List<URI> uris) {\n         this(uris, null);\n     }\n \n-    public FailoverProvider(URI[] uris, Map<String, String> nestedOptions) {\n+    public FailoverProvider(List<URI> uris, Map<String, String> nestedOptions) {\n         this.uris = new FailoverUriPool(uris, nestedOptions);\n \n         this.serializer = Executors.newSingleThreadScheduledExecutor(new ThreadFactory() {",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverUriPool.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverUriPool.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverUriPool.java",
                "deletions": 1,
                "sha": "624c05a717cf3dc4ab91264362cbdf21917fa86b",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverUriPool.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.net.URISyntaxException;\n import java.util.Collections;\n import java.util.LinkedList;\n+import java.util.List;\n import java.util.Map;\n \n import org.apache.qpid.jms.util.URISupport;\n@@ -47,7 +48,7 @@ public FailoverUriPool() {\n         this.nestedOptions = Collections.emptyMap();\n     }\n \n-    public FailoverUriPool(URI[] uris, Map<String, String> nestedOptions) {\n+    public FailoverUriPool(List<URI> uris, Map<String, String> nestedOptions) {\n         this.uris = new LinkedList<URI>();\n         if (nestedOptions != null) {\n             this.nestedOptions = nestedOptions;",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/util/URISupport.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/main/java/org/apache/qpid/jms/util/URISupport.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/main/java/org/apache/qpid/jms/util/URISupport.java",
                "deletions": 7,
                "sha": "e2aaaa01b695dfc01f357133db72be1e28b84a05",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/main/java/org/apache/qpid/jms/util/URISupport.java",
                "patch": "@@ -34,14 +34,15 @@\n      * the individual URIs that comprise the composite one.\n      */\n     public static class CompositeData {\n+\n         private String host;\n         private String scheme;\n         private String path;\n-        private URI components[];\n-        private Map<String, String> parameters;\n+        private List<URI> components = Collections.emptyList();\n+        private Map<String, String> parameters = Collections.emptyMap();\n         private String fragment;\n \n-        public URI[] getComponents() {\n+        public List<URI> getComponents() {\n             return components;\n         }\n \n@@ -76,11 +77,11 @@ public URI toURI() throws URISyntaxException {\n                 sb.append(host);\n             } else {\n                 sb.append('(');\n-                for (int i = 0; i < components.length; i++) {\n+                for (int i = 0; i < components.size(); i++) {\n                     if (i != 0) {\n                         sb.append(',');\n                     }\n-                    sb.append(components[i].toString());\n+                    sb.append(components.get(i).toString());\n                 }\n                 sb.append(')');\n             }\n@@ -173,9 +174,9 @@ private static void parseComposite(URI uri, CompositeData rc, String ssp) throws\n         }\n \n         String components[] = splitComponents(componentString);\n-        rc.components = new URI[components.length];\n+        rc.components = new ArrayList<URI>(components.length);\n         for (int i = 0; i < components.length; i++) {\n-            rc.components[i] = new URI(components[i].trim());\n+            rc.components.add(new URI(components[i].trim()));\n         }\n \n         p = params.indexOf(\"?\");",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FailoverUriPoolTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FailoverUriPoolTest.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FailoverUriPoolTest.java",
                "deletions": 8,
                "sha": "2636830c5f8b7cc7470e2bfa9d6abcaca77e9d79",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FailoverUriPoolTest.java",
                "patch": "@@ -71,7 +71,7 @@ public void testCreateEmptyPoolFromNullUris() {\n \n     @Test\n     public void testCreateEmptyPoolWithURIs() throws URISyntaxException {\n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         assertEquals(FailoverUriPool.DEFAULT_RANDOMIZE_ENABLED, pool.isRandomize());\n \n         assertNotNull(pool.getNestedOptions());\n@@ -88,7 +88,7 @@ public void testGetNextFromEmptyPool() {\n \n     @Test\n     public void testGetNextFromSingleValuePool() {\n-        FailoverUriPool pool = new FailoverUriPool(new URI[] {uris.get(0) }, null);\n+        FailoverUriPool pool = new FailoverUriPool(uris.subList(0, 1), null);\n \n         assertEquals(uris.get(0), pool.getNext());\n         assertEquals(uris.get(0), pool.getNext());\n@@ -106,7 +106,7 @@ public void testAddUriToEmptyPool() {\n \n     @Test\n     public void testDuplicatesNotAdded() {\n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n \n         assertEquals(uris.size(), pool.size());\n         pool.add(uris.get(0));\n@@ -195,7 +195,7 @@ public void testDuplicatesNotAddedWhenQueryPresentAndUnresolveable() throws URIS\n     public void testAddUriToPoolRandomized() throws URISyntaxException {\n         URI newUri = new URI(\"tcp://192.168.2.\" + (uris.size() + 1) + \":5672\");\n \n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         pool.setRandomize(true);\n         pool.add(newUri);\n \n@@ -217,7 +217,7 @@ public void testAddUriToPoolRandomized() throws URISyntaxException {\n     public void testAddUriToPoolNotRandomized() throws URISyntaxException {\n         URI newUri = new URI(\"tcp://192.168.2.\" + (uris.size() + 1) + \":5672\");\n \n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         pool.setRandomize(false);\n         pool.add(newUri);\n \n@@ -230,7 +230,7 @@ public void testAddUriToPoolNotRandomized() throws URISyntaxException {\n \n     @Test\n     public void testRemoveURIFromPool() throws URISyntaxException {\n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         pool.setRandomize(false);\n \n         URI removed = uris.get(0);\n@@ -256,7 +256,7 @@ public void testConnectedDoesNotShufflesWhenNoRandomizing() {\n \n     private void assertConnectedEffectOnPool(boolean randomize, boolean shouldShuffle) {\n \n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         pool.setRandomize(randomize);\n \n         List<URI> current = new ArrayList<URI>();\n@@ -291,7 +291,7 @@ private void assertConnectedEffectOnPool(boolean randomize, boolean shouldShuffl\n \n     @Test\n     public void testAddOrRemoveNullHasNoAffect() throws URISyntaxException {\n-        FailoverUriPool pool = new FailoverUriPool(uris.toArray(new URI[0]), null);\n+        FailoverUriPool pool = new FailoverUriPool(uris, null);\n         assertEquals(uris.size(), pool.size());\n \n         pool.add(null);",
                "changes": 16
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FiloverProviderFactoryTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FiloverProviderFactoryTest.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FiloverProviderFactoryTest.java",
                "deletions": 0,
                "sha": "d2db7c2ee72b9190606ab9aec300acfd6c1fc90e",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FiloverProviderFactoryTest.java",
                "patch": "@@ -44,6 +44,7 @@ public void setUp() throws URISyntaxException {\n \n     @Test(timeout = 60000)\n     public void testCreateProvider() throws Exception {\n+        assertNotNull(factory.getName());\n         Provider provider = factory.createProvider(baseURI);\n         assertNotNull(provider);\n         assertTrue(provider instanceof FailoverProvider);",
                "changes": 1
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/util/URISupportTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-client/src/test/java/org/apache/qpid/jms/util/URISupportTest.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-client/src/test/java/org/apache/qpid/jms/util/URISupportTest.java",
                "deletions": 12,
                "sha": "a858758db0b7b1526d93990156acc402142be631",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-client/src/test/java/org/apache/qpid/jms/util/URISupportTest.java",
                "patch": "@@ -21,17 +21,15 @@\n import java.util.HashMap;\n import java.util.Map;\n \n-import org.apache.qpid.jms.util.PropertyUtil;\n-import org.apache.qpid.jms.util.URISupport;\n-import org.apache.qpid.jms.util.URISupport.CompositeData;\n-\n import junit.framework.TestCase;\n \n+import org.apache.qpid.jms.util.URISupport.CompositeData;\n+\n public class URISupportTest extends TestCase {\n \n     public void testEmptyCompositePath() throws Exception {\n         CompositeData data = URISupport.parseComposite(new URI(\"broker:()/localhost?persistent=false\"));\n-        assertEquals(0, data.getComponents().length);\n+        assertEquals(0, data.getComponents().size());\n     }\n \n     public void testCompositePath() throws Exception {\n@@ -43,19 +41,19 @@ public void testCompositePath() throws Exception {\n \n     public void testSimpleComposite() throws Exception {\n         CompositeData data = URISupport.parseComposite(new URI(\"test:part1\"));\n-        assertEquals(1, data.getComponents().length);\n+        assertEquals(1, data.getComponents().size());\n     }\n \n     public void testComposite() throws Exception {\n         URI uri = new URI(\"test:(part1://host,part2://(sub1://part,sube2:part))\");\n         CompositeData data = URISupport.parseComposite(uri);\n-        assertEquals(2, data.getComponents().length);\n+        assertEquals(2, data.getComponents().size());\n     }\n \n     public void testEmptyCompositeWithParenthesisInParam() throws Exception {\n         URI uri = new URI(\"failover://()?updateURIsURL=file:/C:/Dir(1)/a.csv\");\n         CompositeData data = URISupport.parseComposite(uri);\n-        assertEquals(0, data.getComponents().length);\n+        assertEquals(0, data.getComponents().size());\n         assertEquals(1, data.getParameters().size());\n         assertTrue(data.getParameters().containsKey(\"updateURIsURL\"));\n         assertEquals(\"file:/C:/Dir(1)/a.csv\", data.getParameters().get(\"updateURIsURL\"));\n@@ -64,17 +62,17 @@ public void testEmptyCompositeWithParenthesisInParam() throws Exception {\n     public void testCompositeWithParenthesisInParam() throws Exception {\n         URI uri = new URI(\"failover://(test)?updateURIsURL=file:/C:/Dir(1)/a.csv\");\n         CompositeData data = URISupport.parseComposite(uri);\n-        assertEquals(1, data.getComponents().length);\n+        assertEquals(1, data.getComponents().size());\n         assertEquals(1, data.getParameters().size());\n         assertTrue(data.getParameters().containsKey(\"updateURIsURL\"));\n         assertEquals(\"file:/C:/Dir(1)/a.csv\", data.getParameters().get(\"updateURIsURL\"));\n     }\n \n     public void testCompositeWithComponentParam() throws Exception {\n         CompositeData data = URISupport.parseComposite(new URI(\"test:(part1://host?part1=true)?outside=true\"));\n-        assertEquals(1, data.getComponents().length);\n+        assertEquals(1, data.getComponents().size());\n         assertEquals(1, data.getParameters().size());\n-        Map<String, String> part1Params = URISupport.parseParameters(data.getComponents()[0]);\n+        Map<String, String> part1Params = URISupport.parseParameters(data.getComponents().get(0));\n         assertEquals(1, part1Params.size());\n         assertTrue(part1Params.containsKey(\"part1\"));\n     }\n@@ -99,7 +97,7 @@ protected void assertMapKey(Map<String, String> map, String key, Object expected\n \n     public void testParsingCompositeURI() throws URISyntaxException {\n         CompositeData data = URISupport.parseComposite(new URI(\"broker://(tcp://localhost:61616)?name=foo\"));\n-        assertEquals(\"one component\", 1, data.getComponents().length);\n+        assertEquals(\"one component\", 1, data.getComponents().size());\n         assertEquals(\"Size: \" + data.getParameters(), 1, data.getParameters().size());\n     }\n ",
                "changes": 22
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/qpid-jms/raw/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-discovery/src/main/java/org/apache/qpid/jms/provider/discovery/DiscoveryProviderFactory.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-jms/contents/qpid-jms-discovery/src/main/java/org/apache/qpid/jms/provider/discovery/DiscoveryProviderFactory.java?ref=d0ccd408be0a3921bf2b0db77ccd1b310d2d9512",
                "filename": "qpid-jms-discovery/src/main/java/org/apache/qpid/jms/provider/discovery/DiscoveryProviderFactory.java",
                "deletions": 1,
                "sha": "1015e33ca0fdb37573c434a9fd421f618bae27a8",
                "blob_url": "https://github.com/apache/qpid-jms/blob/d0ccd408be0a3921bf2b0db77ccd1b310d2d9512/qpid-jms-discovery/src/main/java/org/apache/qpid/jms/provider/discovery/DiscoveryProviderFactory.java",
                "patch": "@@ -52,7 +52,7 @@ public Provider createProvider(URI remoteURI) throws Exception {\n         DiscoveryProvider discovery = new DiscoveryProvider(remoteURI, failover);\n         PropertyUtil.setProperties(discovery, options);\n \n-        DiscoveryAgent agent = DiscoveryAgentFactory.createAgent(composite.getComponents()[0]);\n+        DiscoveryAgent agent = DiscoveryAgentFactory.createAgent(composite.getComponents().get(0));\n         discovery.setDiscoveryAgent(agent);\n \n         return discovery;",
                "changes": 2
            }
        ],
        "unit_tests": [
            "FiloverProviderFactoryTest.java",
            "FailoverProviderTest.java",
            "URISupportTest.java",
            "FailoverUriPoolTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "qpid-jms-client/src/test/java/org/apache/qpid/jms/provider/failover/FiloverProviderFactoryTest.java",
        "buggy_files": [
            "qpid-jms-discovery/src/main/java/org/apache/qpid/jms/provider/discovery/DiscoveryProviderFactory.java",
            "qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverUriPool.java",
            "qpid-jms-client/src/main/java/org/apache/qpid/jms/util/URISupport.java",
            "qpid-jms-client/src/main/java/org/apache/qpid/jms/provider/failover/FailoverProvider.java"
        ],
        "fixed": true
    }
]