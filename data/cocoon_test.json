{
    "cocoon_a9292f1": {
        "bug_id": "cocoon_a9292f1",
        "commit": "https://github.com/apache/cocoon/commit/a9292f14a9625e559bbd8350b6c66985d082cfa1",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cocoon/blob/a9292f14a9625e559bbd8350b6c66985d082cfa1/src/java/org/apache/cocoon/core/CoreUtil.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/CoreUtil.java?ref=a9292f14a9625e559bbd8350b6c66985d082cfa1",
                "deletions": 3,
                "filename": "src/java/org/apache/cocoon/core/CoreUtil.java",
                "patch": "@@ -758,9 +758,19 @@ protected void forceProperty() {\n      * of this class (eg. Cocoon Context).\n      */\n     protected void updateEnvironment() throws Exception {\n-        StringBuffer buffer = new StringBuffer(this.env.getClassPath(this.settings));\n-        buffer.append(File.pathSeparatorChar).append(this.getExtraClassPath());\n-\n+        // concatenate the class path and the extra class path\n+        String classPath = this.env.getClassPath(this.settings);\n+        StringBuffer buffer = new StringBuffer();\n+        if ( classPath != null && classPath.length() > 0 ) {\n+            buffer.append(classPath);\n+        }\n+        classPath = this.getExtraClassPath();\n+        if ( classPath != null && classPath.length() > 0 ) {\n+            if ( buffer.length() > 0 ) {\n+                buffer.append(File.pathSeparatorChar);\n+            }\n+            buffer.append(classPath);\n+        }\n         this.appContext.put(Constants.CONTEXT_CLASSPATH, buffer.toString());\n     }\n ",
                "raw_url": "https://github.com/apache/cocoon/raw/a9292f14a9625e559bbd8350b6c66985d082cfa1/src/java/org/apache/cocoon/core/CoreUtil.java",
                "sha": "99432a03d6a22724153e92dc8ad39377f92d5e2b",
                "status": "modified"
            }
        ],
        "message": "fix npe\n\ngit-svn-id: https://svn.apache.org/repos/asf/cocoon/trunk@225722 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cocoon/commit/27d01b575c130a2e10b537d1ad53c81285c47724",
        "patched_files": [
            "CoreUtil.java"
        ],
        "repo": "cocoon",
        "unit_tests": [
            "TestCoreUtil.java"
        ]
    },
    "cocoon_cfaf554": {
        "bug_id": "cocoon_cfaf554",
        "commit": "https://github.com/apache/cocoon/commit/cfaf5546786e9cd0d132288d9db79a35522df01c",
        "file": [
            {
                "additions": 132,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/BaseSettings.java",
                "changes": 134,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/BaseSettings.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 2,
                "filename": "src/java/org/apache/cocoon/core/BaseSettings.java",
                "patch": "@@ -20,13 +20,24 @@\n import java.util.Map;\n \n /**\n- * This object holds the global configuration of Cocoon that can't be changed\n- * during runtime.\n+ * The settings (configuration) for the Cocoon core are described through the {@link BaseSettings}\n+ * interface and the {@link DynamicSettings} interface.\n+ * Whereas the settings of the {@link BaseSettings} object can't be changed at runtime,\n+ * the settings of the {@link DynamicSettings} object are mutable. Use the {@link Core} instance\n+ * to update the settings.\n  *\n  * @version SVN $Id$\n  */\n public interface BaseSettings {\n \n+    /** Default value for {@link #isManageExceptions()}. */\n+    boolean MANAGE_EXCEPTIONS = true;\n+\n+    /**\n+     * Default value for {@link #isInitClassloader()} setting (false)\n+     */\n+    boolean INIT_CLASSLOADER = false;\n+\n     /** Name of the property specifying a user properties file */\n     String PROPERTY_USER_SETTINGS = \"org.apache.cocoon.settings\";\n \n@@ -98,6 +109,71 @@\n      */\n     String KEY_PARENT_SERVICE_MANAGER = \"parentservicemanager\";\n \n+    /**\n+     * This parameter tells Cocoon to set the thread's context classloader to\n+     * its own classloader. If you experience strange classloader issues,\n+     * try setting this parameter to \"true\".\n+     */\n+    String KEY_INIT_CLASSLOADER = \"classloader.init\";\n+\n+    /**\n+     * This parameter indicates the category id of the logger from the LogKit\n+     * configuration used by the environment.\n+     */\n+    String KEY_LOGGING_ENVIRONMENT_LOGGER = \"logging.category.environment\";\n+\n+    /**\n+     * This parameter indicates the category id of the logger from the LogKit\n+     * management configuration for the Cocoon engine.\n+     * This logger is used for all components described in the cocoon.xconf\n+     * and sitemap.xmap file not having specified a logger with the\n+     * logger=\"...\" attribute in the component configuration file.\n+     */\n+    String KEY_LOGGING_COCOON_LOGGER = \"logging.category.cocoon\";\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should put uploaded files.\n+     * The path specified can be either absolute or relative to the context\n+     * path of the servlet. On windows platform, absolute directory must start\n+     * with volume: C:\\Path\\To\\Upload\\Directory.\n+     */\n+    String KEY_UPLOADS_DIRECTORY = \"uploads.directory\";\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should create its page\n+     * and other objects cache. The path specified can be either absolute or\n+     * relative to the context path of the servlet. On windows platform,\n+     * absolute directory must start with volume: C:\\Path\\To\\Cache\\Directory.\n+     */\n+    String KEY_CACHE_DIRECTORY = \"cache.directory\";\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should put it's\n+     * working files. The path specified is either absolute or relative\n+     * to the context path of the Cocoon servlet. On windows platform,\n+     * absolute directory must start with volume: C:\\Path\\To\\Work\\Directory.\n+     */\n+    String KEY_WORK_DIRECTORY = \"work.directory\";\n+\n+    /**\n+     * If true or not set, this class will try to catch and handle all Cocoon exceptions.\n+     * If false, it will rethrow them to the servlet container.\n+     */\n+    String KEY_MANAGE_EXCEPTIONS = \"manageexceptions\";\n+\n+    /**\n+     * Set form encoding. This will be the character set used to decode request\n+     * parameters. If not set the ISO-8859-1 encoding will be assumed.\n+    */\n+    String KEY_FORM_ENCODING = \"formencoding\";\n+\n+    /**\n+     * If this value is specified, it will be interpreted as a log level and\n+     * all logging categories will be set to this level regardless of their\n+     * definition in the logging configuration.\n+     */\n+    String KEY_LOGGING_OVERRIDE_LOGLEVEL = \"override.loglevel\";\n+\n     /**\n      * @return Returns the configuration.\n      * @see #KEY_CONFIGURATION\n@@ -152,4 +228,58 @@\n      */\n     String getLog4jConfiguration();\n \n+    /**\n+     * @return Returns the uploadDirectory.\n+     * @see #KEY_UPLOADS_DIRECTORY\n+     */\n+    String getUploadDirectory();\n+\n+    /**\n+     * @return Returns the workDirectory.\n+     * @see #KEY_WORK_DIRECTORY\n+     */\n+    String getWorkDirectory();\n+\n+    /**\n+     * @return Returns the logger for the environment.\n+     * @see #KEY_LOGGING_ENVIRONMENT_LOGGER\n+     */\n+    String getEnvironmentLogger();\n+\n+    /**\n+     * @return Returns the overrideLogLevel.\n+     * @see #KEY_LOGGING_OVERRIDE_LOGLEVEL\n+     */\n+    String getOverrideLogLevel();\n+\n+    /**\n+     * @return Returns the formEncoding.\n+     * @see #KEY_FORM_ENCODING\n+     */\n+    String getFormEncoding();\n+\n+    /**\n+     * @return Returns the initClassloader.\n+     * @see #KEY_INIT_CLASSLOADER\n+     */\n+    boolean isInitClassloader();\n+\n+    /**\n+     * @return Returns the manageExceptions.\n+     * @see #KEY_MANAGE_EXCEPTIONS\n+     */\n+    boolean isManageExceptions();\n+\n+    /**\n+     * @return Returns the cacheDirectory.\n+     * @see #KEY_CACHE_DIRECTORY\n+     */\n+    String getCacheDirectory();\n+\n+    /**\n+     * @return Returns the cocoonLogger.\n+     * @see #KEY_LOGGING_COCOON_LOGGER\n+     */\n+    String getCocoonLogger();\n+\n }",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/BaseSettings.java",
                "sha": "91bb9334d6b877e30e70cd39a0e981216d28eebe",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/Core.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/Core.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 0,
                "filename": "src/java/org/apache/cocoon/core/Core.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.cocoon.core.container.ComponentLocatorWrapper;\n import org.apache.cocoon.environment.internal.EnvironmentHelper;\n import org.apache.cocoon.sitemap.ComponentLocator;\n+import org.apache.commons.lang.NotImplementedException;\n \n /**\n  * This is the core Cocoon component.\n@@ -120,6 +121,14 @@ public Settings getSettings() {\n         return this.settings;\n     }\n \n+    /**\n+     * Update the dynamic settings at runtime.\n+     * @param dynSettings\n+     */\n+    public void update(DynamicSettings dynSettings) {\n+        throw new NotImplementedException(\"The update method is not implemented yet.\");\n+    }\n+\n     /**\n      * Return the environment context object.\n      * @return The environment context.",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/Core.java",
                "sha": "db2d0c7d5f8089523565013609e3793eb8785f59",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/CoreUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/CoreUtil.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 1,
                "filename": "src/java/org/apache/cocoon/core/CoreUtil.java",
                "patch": "@@ -666,7 +666,7 @@ public synchronized Cocoon createCocoon()\n \n             this.cocoon = c;\n         } catch (Exception e) {\n-            this.log.error(\"Exception reloading\", e);\n+            this.log.error(\"Exception reloading Cocoon.\", e);\n             this.disposeCocoon();\n             throw e;\n         }",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/CoreUtil.java",
                "sha": "dc09f2b9a559aea98fe644ea385b3958d1caaa19",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/DynamicSettings.java",
                "changes": 136,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/DynamicSettings.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 127,
                "filename": "src/java/org/apache/cocoon/core/DynamicSettings.java",
                "patch": "@@ -17,8 +17,11 @@\n \n \n /**\n- * This object holds the global configuration of Cocoon. The different settings can\n- * be changed during runtime.\n+ * The settings (configuration) for the Cocoon core are described through the {@link BaseSettings}\n+ * interface and the {@link DynamicSettings} interface.\n+ * Whereas the settings of the {@link BaseSettings} object can't be changed at runtime,\n+ * the settings of the {@link DynamicSettings} object are mutable. Use the {@link Core} instance\n+ * to update the settings.\n  *\n  * @version SVN $Id$\n  */\n@@ -36,36 +39,8 @@\n     boolean SAVE_UPLOADS_TO_DISK = true;\n     int MAX_UPLOAD_SIZE = 10000000; // 10Mb\n \n-    /**\n-     * Default value for {@link #isInitClassloader()} setting (false)\n-     */\n-    boolean INIT_CLASSLOADER = false;\n-\n     boolean SHOW_TIME = false;\n     boolean HIDE_SHOW_TIME = false;\n-    boolean MANAGE_EXCEPTIONS = true;\n-\n-    /**\n-     * This parameter tells Cocoon to set the thread's context classloader to\n-     * its own classloader. If you experience strange classloader issues,\n-     * try setting this parameter to \"true\".\n-     */\n-    String KEY_INIT_CLASSLOADER = \"classloader.init\";\n-\n-    /**\n-     * This parameter indicates the category id of the logger from the LogKit\n-     * configuration used by the environment.\n-     */\n-    String KEY_LOGGING_ENVIRONMENT_LOGGER = \"logging.category.environment\";\n-\n-    /**\n-     * This parameter indicates the category id of the logger from the LogKit\n-     * management configuration for the Cocoon engine.\n-     * This logger is used for all components described in the cocoon.xconf\n-     * and sitemap.xmap file not having specified a logger with the\n-     * logger=\"...\" attribute in the component configuration file.\n-     */\n-    String KEY_LOGGING_COCOON_LOGGER = \"logging.category.cocoon\";\n \n     /**\n      * Allow reinstantiating (reloading) of the cocoon instance. If this is\n@@ -81,14 +56,6 @@\n      */\n     String KEY_UPLOADS_ENABLE = \"uploads.enable\";\n \n-    /**\n-     * This parameter allows to specify where Cocoon should put uploaded files.\n-     * The path specified can be either absolute or relative to the context\n-     * path of the servlet. On windows platform, absolute directory must start\n-     * with volume: C:\\Path\\To\\Upload\\Directory.\n-     */\n-    String KEY_UPLOADS_DIRECTORY = \"uploads.directory\";\n-\n     /**\n      * Causes all files in multipart requests to be saved to upload-dir.\n      * Default is true for security reasons.\n@@ -108,22 +75,6 @@\n      */\n     String KEY_UPLOADS_MAXSIZE = \"uploads.maxsize\";\n \n-    /**\n-     * This parameter allows to specify where Cocoon should create its page\n-     * and other objects cache. The path specified can be either absolute or\n-     * relative to the context path of the servlet. On windows platform,\n-     * absolute directory must start with volume: C:\\Path\\To\\Cache\\Directory.\n-     */\n-    String KEY_CACHE_DIRECTORY = \"cache.directory\";\n-\n-    /**\n-     * This parameter allows to specify where Cocoon should put it's\n-     * working files. The path specified is either absolute or relative\n-     * to the context path of the Cocoon servlet. On windows platform,\n-     * absolute directory must start with volume: C:\\Path\\To\\Work\\Directory.\n-     */\n-    String KEY_WORK_DIRECTORY = \"work.directory\";\n-\n     /**\n      * Allow adding processing time to the response\n      */\n@@ -134,25 +85,6 @@\n      */\n     String KEY_HIDE_SHOWTIME = \"hideshowtime\";\n \n-    /**\n-     * If true or not set, this class will try to catch and handle all Cocoon exceptions.\n-     * If false, it will rethrow them to the servlet container.\n-     */\n-    String KEY_MANAGE_EXCEPTIONS = \"manageexceptions\";\n-\n-    /**\n-     * Set form encoding. This will be the character set used to decode request\n-     * parameters. If not set the ISO-8859-1 encoding will be assumed.\n-    */\n-    String KEY_FORM_ENCODING = \"formencoding\";\n-\n-    /**\n-     * If this value is specified, it will be interpreted as a log level and\n-     * all logging categories will be set to this level regardless of their\n-     * definition in the logging configuration.\n-     */\n-    String KEY_LOGGING_OVERRIDE_LOGLEVEL = \"override.loglevel\";\n-\n     /**\n      * Delay between reload checks for the configuration\n      */\n@@ -181,42 +113,12 @@\n      */\n     boolean isAutosaveUploads();\n \n-    /**\n-     * @return Returns the cacheDirectory.\n-     * @see #KEY_CACHE_DIRECTORY\n-     */\n-    String getCacheDirectory();\n-\n-    /**\n-     * @return Returns the cocoonLogger.\n-     * @see #KEY_LOGGING_COCOON_LOGGER\n-     */\n-    String getCocoonLogger();\n-\n     /**\n      * @return Returns the enableUploads.\n      * @see #KEY_UPLOADS_ENABLE\n      */\n     boolean isEnableUploads();\n \n-    /**\n-     * @return Returns the formEncoding.\n-     * @see #KEY_FORM_ENCODING\n-     */\n-    String getFormEncoding();\n-\n-    /**\n-     * @return Returns the initClassloader.\n-     * @see #KEY_INIT_CLASSLOADER\n-     */\n-    boolean isInitClassloader();\n-\n-    /**\n-     * @return Returns the manageExceptions.\n-     * @see #KEY_MANAGE_EXCEPTIONS\n-     */\n-    boolean isManageExceptions();\n-\n     /**\n      * @return Returns the maxUploadSize.\n      * @see #KEY_UPLOADS_MAXSIZE\n@@ -235,30 +137,6 @@\n      */\n     boolean isShowTime();\n \n-    /**\n-     * @return Returns the uploadDirectory.\n-     * @see #KEY_UPLOADS_DIRECTORY\n-     */\n-    String getUploadDirectory();\n-\n-    /**\n-     * @return Returns the workDirectory.\n-     * @see #KEY_WORK_DIRECTORY\n-     */\n-    String getWorkDirectory();\n-\n-    /**\n-     * @return Returns the logger for the environment.\n-     * @see #KEY_LOGGING_ENVIRONMENT_LOGGER\n-     */\n-    String getEnvironmentLogger();\n-\n-    /**\n-     * @return Returns the overrideLogLevel.\n-     * @see #KEY_LOGGING_OVERRIDE_LOGLEVEL\n-     */\n-    String getOverrideLogLevel();\n-\n     /**\n      * @return Returns the configurationReloadDelay.\n      * @see #KEY_CONFIGURATION_RELOAD_DELAY\n@@ -271,4 +149,8 @@\n      */\n     boolean isLazyMode();\n \n+    boolean isAllowOverwrite();\n+\n+    boolean isSilentlyRename();\n+\n }",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/DynamicSettings.java",
                "sha": "ee28a463350edf22993477021840508b4501a5b4",
                "status": "modified"
            },
            {
                "additions": 563,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/MutableSettings.java",
                "changes": 564,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/MutableSettings.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 1,
                "filename": "src/java/org/apache/cocoon/core/MutableSettings.java",
                "patch": "@@ -15,7 +15,10 @@\n  */\n package org.apache.cocoon.core;\n \n+import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n+import java.util.List;\n import java.util.Map;\n import java.util.Properties;\n \n@@ -27,11 +30,205 @@\n  *\n  * @version SVN $Id$\n  */\n-public class MutableSettings extends Settings {\n+public class MutableSettings implements Settings {\n \n     /** Are we still mutable? */\n     protected boolean readOnly = false;\n \n+    /** Prefix for properties */\n+    protected static final String KEYPREFIX = \"org.apache.cocoon.\";\n+\n+    /**\n+     * The list of properties used to configure Cocoon\n+     */\n+    protected List properties = new ArrayList();\n+\n+    /**\n+     * This parameter tells Cocoon to set the thread's context classloader to\n+     * its own classloader. If you experience strange classloader issues,\n+     * try setting this parameter to \"true\".\n+     */\n+    protected boolean initClassloader = INIT_CLASSLOADER;\n+\n+    /**\n+     * This parameter allows to set system properties\n+     */\n+    protected Map forceProperties = new HashMap();\n+\n+    /**\n+     * This parameter points to the main configuration file for Cocoon.\n+     * Note that the path is specified in absolute notation but it will be\n+     * resolved relative to the application context path.\n+     */\n+    protected String configuration;\n+\n+    /**\n+     * This parameter indicates the configuration file of the LogKit management\n+     */\n+    protected String loggingConfiguration;\n+\n+    /**\n+     * This parameter indicates the category id of the logger from the LogKit\n+     * configuration used by the environment.\n+     */\n+    protected String environmentLogger;\n+\n+    /**\n+     * This parameter indicates the category id of the logger from the LogKit\n+     * management configuration for the Cocoon engine.\n+     * This logger is used for all components described in the cocoon.xconf\n+     * and sitemap.xmap file not having specified a logger with the\n+     * logger=\"...\" attribute in the component configuration file.\n+     */\n+    protected String cocoonLogger;\n+\n+    /**\n+     * This parameter indicates the log level to use throughout startup of the\n+     * system. As soon as the logkit.xconf the setting of the logkit.xconf\n+     * configuration is used instead! Only for startup and if the logkit.xconf is\n+     * not readable/available this log level is of importance.\n+     */\n+    protected String bootstrapLogLevel;\n+\n+    /**\n+     * This parameter switches the logging system from LogKit to Log4J for Cocoon.\n+     * Log4J has to be configured already.\n+     */\n+    protected String loggerManagerClassName;\n+\n+    /**\n+     * If you want to configure log4j using Cocoon, then you can define\n+     * an XML configuration file here. You can use the usual log4j property\n+     * substituation mechanism, e.g. ${context-root} is replaced by the\n+     * context root of this web application etc.\n+     * You can configure the log4j configuration even if you use LogKit\n+     * for Cocoon logging. You can use this to configure third party code\n+     * for example.\n+     */\n+    protected String log4jConfiguration;\n+\n+    /**\n+     * Allow reinstantiating (reloading) of the cocoon instance. If this is\n+     * set to \"yes\" or \"true\", a new cocoon instance can be created using\n+     * the request parameter \"cocoon-reload\". It also enables that Cocoon is\n+     * reloaded when cocoon.xconf changes. Default is no for security reasons.\n+     */\n+    protected boolean allowReload = ALLOW_RELOAD;\n+\n+    /**\n+     * This parameter is used to list classes that should be loaded at\n+     * initialization time of the servlet. For example, JDBC Drivers used need to\n+     * be named here. Additional entries may be inserted here during build\n+     * depending on your build properties.\n+     */\n+    protected List loadClasses = new ArrayList();\n+\n+    /**\n+     * Causes all files in multipart requests to be processed.\n+     * Default is false for security reasons.\n+     */\n+    protected boolean enableUploads = ENABLE_UPLOADS;\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should put uploaded files.\n+     * The path specified can be either absolute or relative to the context\n+     * path of the servlet. On windows platform, absolute directory must start\n+     * with volume: C:\\Path\\To\\Upload\\Directory.\n+     */\n+    protected String uploadDirectory;\n+\n+    /**\n+     * Causes all files in multipart requests to be saved to upload-dir.\n+     * Default is true for security reasons.\n+     */\n+    protected boolean autosaveUploads = SAVE_UPLOADS_TO_DISK;\n+\n+    /**\n+     * Specify handling of name conflicts when saving uploaded files to disk.\n+     * Acceptable values are deny, allow, rename (default). Files are renamed\n+     * x_filename where x is an integer value incremented to make the new\n+     * filename unique.\n+     */\n+    protected String overwriteUploads;\n+\n+    /**\n+     * Specify maximum allowed size of the upload. Defaults to 10 Mb.\n+     */\n+    protected int maxUploadSize = MAX_UPLOAD_SIZE;\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should create its page\n+     * and other objects cache. The path specified can be either absolute or\n+     * relative to the context path of the servlet. On windows platform,\n+     * absolute directory must start with volume: C:\\Path\\To\\Cache\\Directory.\n+     */\n+    protected String cacheDirectory;\n+\n+    /**\n+     * This parameter allows to specify where Cocoon should put it's\n+     * working files. The path specified is either absolute or relative\n+     * to the context path of the Cocoon servlet. On windows platform,\n+     * absolute directory must start with volume: C:\\Path\\To\\Work\\Directory.\n+     */\n+    protected String workDirectory;\n+\n+    /**\n+     * This parameter allows to specify additional directories or jars\n+     * which Cocoon should put into it's own classpath.\n+     * Note that absolute pathes are taken as such but relative pathes\n+     * are rooted at the context root of the Cocoon servlet.\n+     */\n+    protected List extraClasspaths = new ArrayList();\n+\n+    /**\n+     * This parameter allows you to select the parent service manager.\n+     * The class will be instantiated via the constructor that takes a single\n+     * String as a parameter. That String will be equal to the text after the '/'.\n+     *\n+     * Cocoon honors the LogEnabled, Initializable and Disposable interfaces for\n+     * this class, if it implements them.\n+     */\n+    protected String parentServiceManagerClassName;\n+\n+    /**\n+     * Allow adding processing time to the response\n+     */\n+    protected boolean showTime = SHOW_TIME;\n+\n+    /**\n+     * If true, processing time will be added as an HTML comment\n+     */\n+    protected boolean hideShowTime = HIDE_SHOW_TIME;\n+\n+    /**\n+     * If true or not set, this class will try to catch and handle all Cocoon exceptions.\n+     * If false, it will rethrow them to the servlet container.\n+     */\n+    protected boolean manageExceptions = MANAGE_EXCEPTIONS;\n+\n+    /**\n+     * Set form encoding. This will be the character set used to decode request\n+     * parameters. If not set the ISO-8859-1 encoding will be assumed.\n+    */\n+    protected String formEncoding;\n+\n+    /**\n+     * If this value is specified, it will be interpreted as a log level and\n+     * all logging categories will be set to this level regardless of their\n+     * definition in the logging configuration.\n+     */\n+    protected String overrideLogLevel;\n+\n+    /**\n+     * Delay between reload checks for the configuration\n+     */\n+    protected long configurationReloadDelay = 1000;\n+\n+    /**\n+     * Lazy mode for component loading\n+     */\n+    protected boolean lazyMode = false;\n+\n     /**\n      * Create a new settings object\n      */\n@@ -115,6 +312,371 @@ public void fill(Properties props) {\n         }\n     }\n \n+    /**\n+     * @return Returns the hideShowTime.\n+     */\n+    public boolean isHideShowTime() {\n+        return this.hideShowTime;\n+    }\n+\n+    /**\n+     * @return Returns the allowReload.\n+     */\n+    public boolean isAllowReload() {\n+        return this.allowReload;\n+    }\n+\n+    /**\n+     * @return Returns the autosaveUploads.\n+     */\n+    public boolean isAutosaveUploads() {\n+        return this.autosaveUploads;\n+    }\n+\n+    /**\n+     * @return Returns the cacheDirectory.\n+     */\n+    public String getCacheDirectory() {\n+        return this.cacheDirectory;\n+    }\n+\n+    /**\n+     * @return Returns the cocoonLogger.\n+     */\n+    public String getCocoonLogger() {\n+        return this.cocoonLogger;\n+    }\n+\n+    /**\n+     * @return Returns the configuration.\n+     */\n+    public String getConfiguration() {\n+        return this.configuration;\n+    }\n+\n+    /**\n+     * @return Returns the enableUploads.\n+     */\n+    public boolean isEnableUploads() {\n+        return this.enableUploads;\n+    }\n+\n+    /**\n+     * @return Returns the extraClasspaths.\n+     */\n+    public List getExtraClasspaths() {\n+        return this.extraClasspaths;\n+    }\n+\n+    /**\n+     * @return Returns the forceProperties.\n+     */\n+    public Map getForceProperties() {\n+        return this.forceProperties;\n+    }\n+\n+    /**\n+     * @return Returns the formEncoding.\n+     */\n+    public String getFormEncoding() {\n+        return this.formEncoding;\n+    }\n+\n+    /**\n+     * @return Returns the initClassloader.\n+     */\n+    public boolean isInitClassloader() {\n+        return this.initClassloader;\n+    }\n+\n+    /**\n+     * @return Returns the loadClasses.\n+     */\n+    public Iterator getLoadClasses() {\n+        return this.loadClasses.iterator();\n+    }\n+\n+    /**\n+     * @return Returns the loggerClassName.\n+     */\n+    public String getLoggerManagerClassName() {\n+        return this.loggerManagerClassName;\n+    }\n+\n+    /**\n+     * @return Returns the loggingConfiguration.\n+     */\n+    public String getLoggingConfiguration() {\n+        return this.loggingConfiguration;\n+    }\n+\n+    /**\n+     * @return Returns the logLevel.\n+     */\n+    public String getBootstrapLogLevel() {\n+        return this.bootstrapLogLevel;\n+    }\n+\n+    /**\n+     * @return Returns the manageExceptions.\n+     */\n+    public boolean isManageExceptions() {\n+        return this.manageExceptions;\n+    }\n+\n+    /**\n+     * @return Returns the maxUploadSize.\n+     */\n+    public int getMaxUploadSize() {\n+        return this.maxUploadSize;\n+    }\n+\n+    /**\n+     * @return Returns the overwriteUploads.\n+     */\n+    public String getOverwriteUploads() {\n+        return this.overwriteUploads;\n+    }\n+\n+    /**\n+     * @return Returns the parentServiceManagerClassName.\n+     */\n+    public String getParentServiceManagerClassName() {\n+        return this.parentServiceManagerClassName;\n+    }\n+\n+    /**\n+     * @return Returns the showTime.\n+     */\n+    public boolean isShowTime() {\n+        return this.showTime;\n+    }\n+\n+    /**\n+     * @return Returns the uploadDirectory.\n+     */\n+    public String getUploadDirectory() {\n+        return this.uploadDirectory;\n+    }\n+\n+    /**\n+     * @return Returns the workDirectory.\n+     */\n+    public String getWorkDirectory() {\n+        return this.workDirectory;\n+    }\n+\n+    /**\n+     * @return Returns the log4jConfiguration.\n+     */\n+    public String getLog4jConfiguration() {\n+        return this.log4jConfiguration;\n+    }\n+\n+    /**\n+     * @return Returns the accessLogger.\n+     */\n+    public String getEnvironmentLogger() {\n+        return this.environmentLogger;\n+    }\n+\n+    /**\n+     * @return Returns the overrideLogLevel.\n+     */\n+    public String getOverrideLogLevel() {\n+        return this.overrideLogLevel;\n+    }\n+\n+    public boolean isAllowOverwrite() {\n+        if (\"deny\".equalsIgnoreCase(this.overwriteUploads)) {\n+            return false;\n+        } else if (\"allow\".equalsIgnoreCase(this.overwriteUploads)) {\n+            return true;\n+        } else {\n+            // either rename is specified or unsupported value - default to rename.\n+            return false;\n+        }\n+    }\n+\n+    public boolean isSilentlyRename() {\n+        if (\"deny\".equalsIgnoreCase(this.overwriteUploads)) {\n+            return false;\n+        } else if (\"allow\".equalsIgnoreCase(this.overwriteUploads)) {\n+            return false; // ignored in this case\n+        } else {\n+            // either rename is specified or unsupported value - default to rename.\n+            return true;\n+        }\n+    }\n+\n+    /**\n+     * @return Returns the configurationReloadDelay.\n+     */\n+    public long getConfigurationReloadDelay() {\n+        return configurationReloadDelay;\n+    }\n+\n+    /**\n+     * @return Returns the lazyMode.\n+     */\n+    public boolean isLazyMode() {\n+        return this.lazyMode;\n+    }\n+\n+    public String getProperty(String name) {\n+        return this.getProperty(name, null);\n+    }\n+\n+    public String getProperty(String key, String defaultValue) {\n+        if ( key == null ) {\n+            return defaultValue;\n+        }\n+        String value = null;\n+        if ( key.startsWith(KEYPREFIX) ) {\n+            final String sKey = key.substring(KEYPREFIX.length());\n+            if ( sKey.equals(KEY_INIT_CLASSLOADER) ) {\n+                value = String.valueOf(this.initClassloader);\n+            } else if ( sKey.equals(KEY_CONFIGURATION) ) {\n+                value = this.configuration;\n+            } else if ( sKey.equals(KEY_CONFIGURATION_RELOAD_DELAY) ) {\n+                value = String.valueOf(this.configurationReloadDelay);\n+            } else if ( sKey.equals(KEY_LOGGING_CONFIGURATION) ) {\n+                value = this.loggingConfiguration;\n+            } else if ( sKey.equals(KEY_LOGGING_ENVIRONMENT_LOGGER) ) {\n+                value = this.environmentLogger;\n+            } else if ( sKey.equals(KEY_LOGGING_COCOON_LOGGER) ) {\n+                value = this.cocoonLogger;\n+            } else if ( sKey.equals(KEY_LOGGING_BOOTSTRAP_LOGLEVEL) ) {\n+                value = this.bootstrapLogLevel;\n+            } else if ( sKey.equals(KEY_LOGGING_MANAGER_CLASS) ) {\n+                value = this.loggerManagerClassName;\n+            } else if ( sKey.equals(KEY_LOGGING_LOG4J_CONFIGURATION) ) {\n+                value = this.log4jConfiguration;\n+            } else if ( sKey.equals(KEY_ALLOW_RELOAD) ) {\n+                value = String.valueOf(this.allowReload);\n+            } else if ( sKey.equals(KEY_UPLOADS_ENABLE) ) {\n+                value = String.valueOf(this.enableUploads);\n+            } else if ( sKey.equals(KEY_UPLOADS_DIRECTORY) ) {\n+                value = this.uploadDirectory = value;\n+            } else if ( sKey.equals(KEY_UPLOADS_AUTOSAVE) ) {\n+                value = String.valueOf(this.autosaveUploads);\n+            } else if ( sKey.equals(KEY_UPLOADS_OVERWRITE) ) {\n+                value = this.overwriteUploads;\n+            } else if ( sKey.equals(KEY_UPLOADS_MAXSIZE) ) {\n+                value = String.valueOf(this.maxUploadSize);\n+            } else if ( sKey.equals(KEY_CACHE_DIRECTORY) ) {\n+                value = this.cacheDirectory;\n+            } else if ( sKey.equals(KEY_WORK_DIRECTORY) ) {\n+                value = this.workDirectory;\n+            } else if ( sKey.equals(KEY_PARENT_SERVICE_MANAGER) ) {\n+                value = this.parentServiceManagerClassName;\n+            } else if ( sKey.equals(KEY_SHOWTIME) ) {\n+                value = String.valueOf(this.showTime);\n+            } else if ( sKey.equals(KEY_HIDE_SHOWTIME) ) {\n+                value = String.valueOf(this.hideShowTime);\n+            } else if ( sKey.equals(KEY_MANAGE_EXCEPTIONS) ) {\n+                value = String.valueOf(this.manageExceptions);\n+            } else if ( sKey.equals(KEY_FORM_ENCODING) ) {\n+                value = this.formEncoding;\n+            } else if ( sKey.equals(KEY_LOGGING_OVERRIDE_LOGLEVEL) ) {\n+                value = this.overrideLogLevel;\n+            } else if ( sKey.equals(KEY_LAZY_MODE) ) {\n+                value = String.valueOf(this.lazyMode);\n+            } else if ( key.equals(KEY_LOAD_CLASSES) ) {\n+                value = this.toString(this.loadClasses);\n+            } else if ( key.equals(KEY_EXTRA_CLASSPATHS) ) {\n+                this.toString(this.extraClasspaths);\n+            } else if ( key.equals(KEY_FORCE_PROPERTIES) ) {\n+                this.toString(this.forceProperties);\n+            }\n+        }\n+\n+        int i = 0;\n+        while ( i < this.properties.size() && value == null ) {\n+            final Properties p = (Properties)this.properties.get(i);\n+            value = p.getProperty(key);\n+            i++;\n+        }\n+        if ( value == null ) {\n+            value = defaultValue;\n+        }\n+        return value;\n+    }\n+\n+    /**\n+     * @see java.lang.Object#toString()\n+     */\n+    public String toString() {\n+        return \"Settings:\\n\"+\n+          KEY_CONFIGURATION + \" : \" + this.configuration + '\\n' +\n+          KEY_CONFIGURATION_RELOAD_DELAY + \" : \" + this.configurationReloadDelay + '\\n' +\n+          KEY_ALLOW_RELOAD + \" : \" + this.allowReload + '\\n' +\n+          KEY_INIT_CLASSLOADER + \" : \" + this.initClassloader + '\\n' +\n+          KEY_EXTRA_CLASSPATHS + \" : \" + this.toString(this.extraClasspaths) + '\\n' +\n+          KEY_LOAD_CLASSES + \" : \" + this.toString(this.loadClasses) + '\\n' +\n+          KEY_FORCE_PROPERTIES + \" : \" + this.toString(this.forceProperties) + '\\n' +\n+          KEY_LOGGING_CONFIGURATION + \" : \" + this.loggingConfiguration + '\\n' +\n+          KEY_LOGGING_ENVIRONMENT_LOGGER + \" : \" + this.environmentLogger + '\\n' +\n+          KEY_LOGGING_BOOTSTRAP_LOGLEVEL + \" : \" + this.bootstrapLogLevel + '\\n' +\n+          KEY_LOGGING_COCOON_LOGGER + \" : \" + this.cocoonLogger + '\\n' +\n+          KEY_LOGGING_LOG4J_CONFIGURATION + \" : \" + this.log4jConfiguration + '\\n' +\n+          KEY_LOGGING_MANAGER_CLASS + \" : \" + this.loggerManagerClassName + '\\n' +\n+          KEY_LOGGING_OVERRIDE_LOGLEVEL + \" : \" + this.overrideLogLevel + '\\n' +\n+          KEY_MANAGE_EXCEPTIONS + \" : \" + this.manageExceptions + '\\n' +\n+          KEY_PARENT_SERVICE_MANAGER + \" : \" + this.parentServiceManagerClassName + '\\n' +\n+          KEY_UPLOADS_DIRECTORY + \" : \" + this.uploadDirectory + '\\n' +\n+          KEY_UPLOADS_AUTOSAVE + \" : \" + this.autosaveUploads + '\\n' +\n+          KEY_UPLOADS_ENABLE + \" : \" + this.enableUploads + '\\n' +\n+          KEY_UPLOADS_MAXSIZE + \" : \" + this.maxUploadSize + '\\n' +\n+          KEY_UPLOADS_OVERWRITE + \" : \" + this.overwriteUploads + '\\n' +\n+          KEY_CACHE_DIRECTORY + \" : \" + this.cacheDirectory + '\\n' +\n+          KEY_WORK_DIRECTORY + \" : \" + this.workDirectory + '\\n' +\n+          KEY_FORM_ENCODING + \" : \" + this.formEncoding + '\\n' +\n+          KEY_SHOWTIME + \" : \" + this.showTime + '\\n' +\n+          KEY_HIDE_SHOWTIME + \" : \" + this.hideShowTime + '\\n' +\n+          KEY_LAZY_MODE + \" : \" + this.lazyMode + '\\n';\n+    }\n+\n+    /**\n+     * Helper method to make a string out of a list of objects.\n+     */\n+    protected String toString(List a) {\n+        final StringBuffer buffer = new StringBuffer();\n+        final Iterator i = a.iterator();\n+        boolean first = true;\n+        while ( i.hasNext() ) {\n+            if ( first ) {\n+                first = false;\n+            } else {\n+                buffer.append(\", \");\n+            }\n+            buffer.append(i.next());\n+        }\n+        return buffer.toString();        \n+    }\n+\n+    /**\n+     * Helper method to make a string out of a map of objects.\n+     */\n+    protected String toString(Map a) {\n+        final StringBuffer buffer = new StringBuffer(\"{\");\n+        final Iterator i = a.entrySet().iterator();\n+        boolean first = true;\n+        while ( i.hasNext() ) {\n+            if ( first ) {\n+                first = false;\n+            } else {\n+                buffer.append(\", \");\n+            }\n+            final Map.Entry current = (Map.Entry)i.next();\n+            buffer.append(current.getKey());\n+            buffer.append(\"=\");\n+            buffer.append(current.getValue());\n+        }\n+        buffer.append(\"}\");\n+        return buffer.toString();        \n+    }\n+\n     /**\n      * @param hideShowTime The hideShowTime to set.\n      */",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/MutableSettings.java",
                "sha": "2d5ae4d169e1d36ef002114935ae32167109e7e2",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/Settings.java",
                "changes": 574,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/Settings.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 571,
                "filename": "src/java/org/apache/cocoon/core/Settings.java",
                "patch": "@@ -15,584 +15,16 @@\n  */\n package org.apache.cocoon.core;\n \n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Properties;\n \n /**\n  * This object holds the global configuration of Cocoon.\n  *\n  * @version SVN $Id$\n  */\n-public class Settings implements BaseSettings, DynamicSettings {\n+public interface Settings extends BaseSettings, DynamicSettings {\n \n-    /** Prefix for properties */\n-    protected static final String KEYPREFIX = \"org.apache.cocoon.\";\n+    String getProperty(String name);\n \n-    /**\n-     * The list of properties used to configure Cocoon\n-     */\n-    protected List properties = new ArrayList();\n-\n-    /**\n-     * This parameter tells Cocoon to set the thread's context classloader to\n-     * its own classloader. If you experience strange classloader issues,\n-     * try setting this parameter to \"true\".\n-     */\n-    protected boolean initClassloader = INIT_CLASSLOADER;\n-\n-    /**\n-     * This parameter allows to set system properties\n-     */\n-    protected Map forceProperties = new HashMap();\n-\n-    /**\n-     * This parameter points to the main configuration file for Cocoon.\n-     * Note that the path is specified in absolute notation but it will be\n-     * resolved relative to the application context path.\n-     */\n-    protected String configuration;\n-\n-    /**\n-     * This parameter indicates the configuration file of the LogKit management\n-     */\n-    protected String loggingConfiguration;\n-\n-    /**\n-     * This parameter indicates the category id of the logger from the LogKit\n-     * configuration used by the environment.\n-     */\n-    protected String environmentLogger;\n-\n-    /**\n-     * This parameter indicates the category id of the logger from the LogKit\n-     * management configuration for the Cocoon engine.\n-     * This logger is used for all components described in the cocoon.xconf\n-     * and sitemap.xmap file not having specified a logger with the\n-     * logger=\"...\" attribute in the component configuration file.\n-     */\n-    protected String cocoonLogger;\n-\n-    /**\n-     * This parameter indicates the log level to use throughout startup of the\n-     * system. As soon as the logkit.xconf the setting of the logkit.xconf\n-     * configuration is used instead! Only for startup and if the logkit.xconf is\n-     * not readable/available this log level is of importance.\n-     */\n-    protected String bootstrapLogLevel;\n-\n-    /**\n-     * This parameter switches the logging system from LogKit to Log4J for Cocoon.\n-     * Log4J has to be configured already.\n-     */\n-    protected String loggerManagerClassName;\n-\n-    /**\n-     * If you want to configure log4j using Cocoon, then you can define\n-     * an XML configuration file here. You can use the usual log4j property\n-     * substituation mechanism, e.g. ${context-root} is replaced by the\n-     * context root of this web application etc.\n-     * You can configure the log4j configuration even if you use LogKit\n-     * for Cocoon logging. You can use this to configure third party code\n-     * for example.\n-     */\n-    protected String log4jConfiguration;\n-\n-    /**\n-     * Allow reinstantiating (reloading) of the cocoon instance. If this is\n-     * set to \"yes\" or \"true\", a new cocoon instance can be created using\n-     * the request parameter \"cocoon-reload\". It also enables that Cocoon is\n-     * reloaded when cocoon.xconf changes. Default is no for security reasons.\n-     */\n-    protected boolean allowReload = ALLOW_RELOAD;\n-\n-    /**\n-     * This parameter is used to list classes that should be loaded at\n-     * initialization time of the servlet. For example, JDBC Drivers used need to\n-     * be named here. Additional entries may be inserted here during build\n-     * depending on your build properties.\n-     */\n-    protected List loadClasses = new ArrayList();\n-\n-    /**\n-     * Causes all files in multipart requests to be processed.\n-     * Default is false for security reasons.\n-     */\n-    protected boolean enableUploads = ENABLE_UPLOADS;\n-\n-    /**\n-     * This parameter allows to specify where Cocoon should put uploaded files.\n-     * The path specified can be either absolute or relative to the context\n-     * path of the servlet. On windows platform, absolute directory must start\n-     * with volume: C:\\Path\\To\\Upload\\Directory.\n-     */\n-    protected String uploadDirectory;\n-\n-    /**\n-     * Causes all files in multipart requests to be saved to upload-dir.\n-     * Default is true for security reasons.\n-     */\n-    protected boolean autosaveUploads = SAVE_UPLOADS_TO_DISK;\n-\n-    /**\n-     * Specify handling of name conflicts when saving uploaded files to disk.\n-     * Acceptable values are deny, allow, rename (default). Files are renamed\n-     * x_filename where x is an integer value incremented to make the new\n-     * filename unique.\n-     */\n-    protected String overwriteUploads;\n-\n-    /**\n-     * Specify maximum allowed size of the upload. Defaults to 10 Mb.\n-     */\n-    protected int maxUploadSize = MAX_UPLOAD_SIZE;\n-\n-    /**\n-     * This parameter allows to specify where Cocoon should create its page\n-     * and other objects cache. The path specified can be either absolute or\n-     * relative to the context path of the servlet. On windows platform,\n-     * absolute directory must start with volume: C:\\Path\\To\\Cache\\Directory.\n-     */\n-    protected String cacheDirectory;\n-\n-    /**\n-     * This parameter allows to specify where Cocoon should put it's\n-     * working files. The path specified is either absolute or relative\n-     * to the context path of the Cocoon servlet. On windows platform,\n-     * absolute directory must start with volume: C:\\Path\\To\\Work\\Directory.\n-     */\n-    protected String workDirectory;\n-\n-    /**\n-     * This parameter allows to specify additional directories or jars\n-     * which Cocoon should put into it's own classpath.\n-     * Note that absolute pathes are taken as such but relative pathes\n-     * are rooted at the context root of the Cocoon servlet.\n-     */\n-    protected List extraClasspaths = new ArrayList();\n-\n-    /**\n-     * This parameter allows you to select the parent service manager.\n-     * The class will be instantiated via the constructor that takes a single\n-     * String as a parameter. That String will be equal to the text after the '/'.\n-     *\n-     * Cocoon honors the LogEnabled, Initializable and Disposable interfaces for\n-     * this class, if it implements them.\n-     */\n-    protected String parentServiceManagerClassName;\n-\n-    /**\n-     * Allow adding processing time to the response\n-     */\n-    protected boolean showTime = SHOW_TIME;\n-\n-    /**\n-     * If true, processing time will be added as an HTML comment\n-     */\n-    protected boolean hideShowTime = HIDE_SHOW_TIME;\n-\n-    /**\n-     * If true or not set, this class will try to catch and handle all Cocoon exceptions.\n-     * If false, it will rethrow them to the servlet container.\n-     */\n-    protected boolean manageExceptions = MANAGE_EXCEPTIONS;\n-\n-    /**\n-     * Set form encoding. This will be the character set used to decode request\n-     * parameters. If not set the ISO-8859-1 encoding will be assumed.\n-    */\n-    protected String formEncoding;\n-\n-    /**\n-     * If this value is specified, it will be interpreted as a log level and\n-     * all logging categories will be set to this level regardless of their\n-     * definition in the logging configuration.\n-     */\n-    protected String overrideLogLevel;\n-\n-    /**\n-     * Delay between reload checks for the configuration\n-     */\n-    protected long configurationReloadDelay = 1000;\n-\n-    /**\n-     * Lazy mode for component loading\n-     */\n-    protected boolean lazyMode = false;\n-\n-    /**\n-     * Create a new settings object\n-     */\n-    public Settings() {\n-        // nothing to do\n-    }\n-\n-    /**\n-     * @return Returns the hideShowTime.\n-     */\n-    public boolean isHideShowTime() {\n-        return this.hideShowTime;\n-    }\n-\n-    /**\n-     * @return Returns the allowReload.\n-     */\n-    public boolean isAllowReload() {\n-        return this.allowReload;\n-    }\n-\n-    /**\n-     * @return Returns the autosaveUploads.\n-     */\n-    public boolean isAutosaveUploads() {\n-        return this.autosaveUploads;\n-    }\n-\n-    /**\n-     * @return Returns the cacheDirectory.\n-     */\n-    public String getCacheDirectory() {\n-        return this.cacheDirectory;\n-    }\n-\n-    /**\n-     * @return Returns the cocoonLogger.\n-     */\n-    public String getCocoonLogger() {\n-        return this.cocoonLogger;\n-    }\n-\n-    /**\n-     * @return Returns the configuration.\n-     */\n-    public String getConfiguration() {\n-        return this.configuration;\n-    }\n-\n-    /**\n-     * @return Returns the enableUploads.\n-     */\n-    public boolean isEnableUploads() {\n-        return this.enableUploads;\n-    }\n-\n-    /**\n-     * @return Returns the extraClasspaths.\n-     */\n-    public List getExtraClasspaths() {\n-        return this.extraClasspaths;\n-    }\n-\n-    /**\n-     * @return Returns the forceProperties.\n-     */\n-    public Map getForceProperties() {\n-        return this.forceProperties;\n-    }\n-\n-    /**\n-     * @return Returns the formEncoding.\n-     */\n-    public String getFormEncoding() {\n-        return this.formEncoding;\n-    }\n-\n-    /**\n-     * @return Returns the initClassloader.\n-     */\n-    public boolean isInitClassloader() {\n-        return this.initClassloader;\n-    }\n-\n-    /**\n-     * @return Returns the loadClasses.\n-     */\n-    public Iterator getLoadClasses() {\n-        return this.loadClasses.iterator();\n-    }\n-\n-    /**\n-     * @return Returns the loggerClassName.\n-     */\n-    public String getLoggerManagerClassName() {\n-        return this.loggerManagerClassName;\n-    }\n-\n-    /**\n-     * @return Returns the loggingConfiguration.\n-     */\n-    public String getLoggingConfiguration() {\n-        return this.loggingConfiguration;\n-    }\n-\n-    /**\n-     * @return Returns the logLevel.\n-     */\n-    public String getBootstrapLogLevel() {\n-        return this.bootstrapLogLevel;\n-    }\n-\n-    /**\n-     * @return Returns the manageExceptions.\n-     */\n-    public boolean isManageExceptions() {\n-        return this.manageExceptions;\n-    }\n-\n-    /**\n-     * @return Returns the maxUploadSize.\n-     */\n-    public int getMaxUploadSize() {\n-        return this.maxUploadSize;\n-    }\n-\n-    /**\n-     * @return Returns the overwriteUploads.\n-     */\n-    public String getOverwriteUploads() {\n-        return this.overwriteUploads;\n-    }\n-\n-    /**\n-     * @return Returns the parentServiceManagerClassName.\n-     */\n-    public String getParentServiceManagerClassName() {\n-        return this.parentServiceManagerClassName;\n-    }\n-\n-    /**\n-     * @return Returns the showTime.\n-     */\n-    public boolean isShowTime() {\n-        return this.showTime;\n-    }\n-\n-    /**\n-     * @return Returns the uploadDirectory.\n-     */\n-    public String getUploadDirectory() {\n-        return this.uploadDirectory;\n-    }\n-\n-    /**\n-     * @return Returns the workDirectory.\n-     */\n-    public String getWorkDirectory() {\n-        return this.workDirectory;\n-    }\n-\n-    /**\n-     * @return Returns the log4jConfiguration.\n-     */\n-    public String getLog4jConfiguration() {\n-        return this.log4jConfiguration;\n-    }\n-\n-    /**\n-     * @return Returns the accessLogger.\n-     */\n-    public String getEnvironmentLogger() {\n-        return this.environmentLogger;\n-    }\n-\n-    /**\n-     * @return Returns the overrideLogLevel.\n-     */\n-    public String getOverrideLogLevel() {\n-        return this.overrideLogLevel;\n-    }\n-\n-    public boolean isAllowOverwrite() {\n-        if (\"deny\".equalsIgnoreCase(this.overwriteUploads)) {\n-            return false;\n-        } else if (\"allow\".equalsIgnoreCase(this.overwriteUploads)) {\n-            return true;\n-        } else {\n-            // either rename is specified or unsupported value - default to rename.\n-            return false;\n-        }\n-    }\n-\n-    public boolean isSilentlyRename() {\n-        if (\"deny\".equalsIgnoreCase(this.overwriteUploads)) {\n-            return false;\n-        } else if (\"allow\".equalsIgnoreCase(this.overwriteUploads)) {\n-            return false; // ignored in this case\n-        } else {\n-            // either rename is specified or unsupported value - default to rename.\n-            return true;\n-        }\n-    }\n-\n-    /**\n-     * @return Returns the configurationReloadDelay.\n-     */\n-    public long getConfigurationReloadDelay() {\n-        return configurationReloadDelay;\n-    }\n-\n-    /**\n-     * @return Returns the lazyMode.\n-     */\n-    public boolean isLazyMode() {\n-        return this.lazyMode;\n-    }\n-\n-    /**\n-     * @see java.lang.Object#toString()\n-     */\n-    public String toString() {\n-        return \"Settings:\\n\"+\n-          KEY_CONFIGURATION + \" : \" + this.configuration + '\\n' +\n-          KEY_CONFIGURATION_RELOAD_DELAY + \" : \" + this.configurationReloadDelay + '\\n' +\n-          KEY_ALLOW_RELOAD + \" : \" + this.allowReload + '\\n' +\n-          KEY_INIT_CLASSLOADER + \" : \" + this.initClassloader + '\\n' +\n-          KEY_EXTRA_CLASSPATHS + \" : \" + this.toString(this.extraClasspaths) + '\\n' +\n-          KEY_LOAD_CLASSES + \" : \" + this.toString(this.loadClasses) + '\\n' +\n-          KEY_FORCE_PROPERTIES + \" : \" + this.toString(this.forceProperties) + '\\n' +\n-          KEY_LOGGING_CONFIGURATION + \" : \" + this.loggingConfiguration + '\\n' +\n-          KEY_LOGGING_ENVIRONMENT_LOGGER + \" : \" + this.environmentLogger + '\\n' +\n-          KEY_LOGGING_BOOTSTRAP_LOGLEVEL + \" : \" + this.bootstrapLogLevel + '\\n' +\n-          KEY_LOGGING_COCOON_LOGGER + \" : \" + this.cocoonLogger + '\\n' +\n-          KEY_LOGGING_LOG4J_CONFIGURATION + \" : \" + this.log4jConfiguration + '\\n' +\n-          KEY_LOGGING_MANAGER_CLASS + \" : \" + this.loggerManagerClassName + '\\n' +\n-          KEY_LOGGING_OVERRIDE_LOGLEVEL + \" : \" + this.overrideLogLevel + '\\n' +\n-          KEY_MANAGE_EXCEPTIONS + \" : \" + this.manageExceptions + '\\n' +\n-          KEY_PARENT_SERVICE_MANAGER + \" : \" + this.parentServiceManagerClassName + '\\n' +\n-          KEY_UPLOADS_DIRECTORY + \" : \" + this.uploadDirectory + '\\n' +\n-          KEY_UPLOADS_AUTOSAVE + \" : \" + this.autosaveUploads + '\\n' +\n-          KEY_UPLOADS_ENABLE + \" : \" + this.enableUploads + '\\n' +\n-          KEY_UPLOADS_MAXSIZE + \" : \" + this.maxUploadSize + '\\n' +\n-          KEY_UPLOADS_OVERWRITE + \" : \" + this.overwriteUploads + '\\n' +\n-          KEY_CACHE_DIRECTORY + \" : \" + this.cacheDirectory + '\\n' +\n-          KEY_WORK_DIRECTORY + \" : \" + this.workDirectory + '\\n' +\n-          KEY_FORM_ENCODING + \" : \" + this.formEncoding + '\\n' +\n-          KEY_SHOWTIME + \" : \" + this.showTime + '\\n' +\n-          KEY_HIDE_SHOWTIME + \" : \" + this.hideShowTime + '\\n' +\n-          KEY_LAZY_MODE + \" : \" + this.lazyMode + '\\n';\n-    }\n-\n-    /**\n-     * Helper method to make a string out of a list of objects.\n-     */\n-    protected String toString(List a) {\n-        final StringBuffer buffer = new StringBuffer();\n-        final Iterator i = a.iterator();\n-        boolean first = true;\n-        while ( i.hasNext() ) {\n-            if ( first ) {\n-                first = false;\n-            } else {\n-                buffer.append(\", \");\n-            }\n-            buffer.append(i.next());\n-        }\n-        return buffer.toString();        \n-    }\n-\n-    /**\n-     * Helper method to make a string out of a map of objects.\n-     */\n-    protected String toString(Map a) {\n-        final StringBuffer buffer = new StringBuffer(\"{\");\n-        final Iterator i = a.entrySet().iterator();\n-        boolean first = true;\n-        while ( i.hasNext() ) {\n-            if ( first ) {\n-                first = false;\n-            } else {\n-                buffer.append(\", \");\n-            }\n-            final Map.Entry current = (Map.Entry)i.next();\n-            buffer.append(current.getKey());\n-            buffer.append(\"=\");\n-            buffer.append(current.getValue());\n-        }\n-        buffer.append(\"}\");\n-        return buffer.toString();        \n-    }\n-\n-    public String getProperty(String name) {\n-        return this.getProperty(name, null);\n-    }\n-\n-    public String getProperty(String key, String defaultValue) {\n-        if ( key == null ) {\n-            return defaultValue;\n-        }\n-        String value = null;\n-        if ( key.startsWith(KEYPREFIX) ) {\n-            final String sKey = key.substring(KEYPREFIX.length());\n-            if ( sKey.equals(KEY_INIT_CLASSLOADER) ) {\n-                value = String.valueOf(this.initClassloader);\n-            } else if ( sKey.equals(KEY_CONFIGURATION) ) {\n-                value = this.configuration;\n-            } else if ( sKey.equals(KEY_CONFIGURATION_RELOAD_DELAY) ) {\n-                value = String.valueOf(this.configurationReloadDelay);\n-            } else if ( sKey.equals(KEY_LOGGING_CONFIGURATION) ) {\n-                value = this.loggingConfiguration;\n-            } else if ( sKey.equals(KEY_LOGGING_ENVIRONMENT_LOGGER) ) {\n-                value = this.environmentLogger;\n-            } else if ( sKey.equals(KEY_LOGGING_COCOON_LOGGER) ) {\n-                value = this.cocoonLogger;\n-            } else if ( sKey.equals(KEY_LOGGING_BOOTSTRAP_LOGLEVEL) ) {\n-                value = this.bootstrapLogLevel;\n-            } else if ( sKey.equals(KEY_LOGGING_MANAGER_CLASS) ) {\n-                value = this.loggerManagerClassName;\n-            } else if ( sKey.equals(KEY_LOGGING_LOG4J_CONFIGURATION) ) {\n-                value = this.log4jConfiguration;\n-            } else if ( sKey.equals(KEY_ALLOW_RELOAD) ) {\n-                value = String.valueOf(this.allowReload);\n-            } else if ( sKey.equals(KEY_UPLOADS_ENABLE) ) {\n-                value = String.valueOf(this.enableUploads);\n-            } else if ( sKey.equals(KEY_UPLOADS_DIRECTORY) ) {\n-                value = this.uploadDirectory = value;\n-            } else if ( sKey.equals(KEY_UPLOADS_AUTOSAVE) ) {\n-                value = String.valueOf(this.autosaveUploads);\n-            } else if ( sKey.equals(KEY_UPLOADS_OVERWRITE) ) {\n-                value = this.overwriteUploads;\n-            } else if ( sKey.equals(KEY_UPLOADS_MAXSIZE) ) {\n-                value = String.valueOf(this.maxUploadSize);\n-            } else if ( sKey.equals(KEY_CACHE_DIRECTORY) ) {\n-                value = this.cacheDirectory;\n-            } else if ( sKey.equals(KEY_WORK_DIRECTORY) ) {\n-                value = this.workDirectory;\n-            } else if ( sKey.equals(KEY_PARENT_SERVICE_MANAGER) ) {\n-                value = this.parentServiceManagerClassName;\n-            } else if ( sKey.equals(KEY_SHOWTIME) ) {\n-                value = String.valueOf(this.showTime);\n-            } else if ( sKey.equals(KEY_HIDE_SHOWTIME) ) {\n-                value = String.valueOf(this.hideShowTime);\n-            } else if ( sKey.equals(KEY_MANAGE_EXCEPTIONS) ) {\n-                value = String.valueOf(this.manageExceptions);\n-            } else if ( sKey.equals(KEY_FORM_ENCODING) ) {\n-                value = this.formEncoding;\n-            } else if ( sKey.equals(KEY_LOGGING_OVERRIDE_LOGLEVEL) ) {\n-                value = this.overrideLogLevel;\n-            } else if ( sKey.equals(KEY_LAZY_MODE) ) {\n-                value = String.valueOf(this.lazyMode);\n-            } else if ( key.equals(KEY_LOAD_CLASSES) ) {\n-                value = this.toString(this.loadClasses);\n-            } else if ( key.equals(KEY_EXTRA_CLASSPATHS) ) {\n-                this.toString(this.extraClasspaths);\n-            } else if ( key.equals(KEY_FORCE_PROPERTIES) ) {\n-                this.toString(this.forceProperties);\n-            }\n-        }\n-\n-        int i = 0;\n-        while ( i < this.properties.size() && value == null ) {\n-            final Properties p = (Properties)this.properties.get(i);\n-            value = p.getProperty(key);\n-            i++;\n-        }\n-        if ( value == null ) {\n-            value = defaultValue;\n-        }\n-        return value;\n-    }\n+    String getProperty(String key, String defaultValue);\n \n }",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/core/Settings.java",
                "sha": "1aa9ce86e180a1b175cb4e04b1a0e7c8c5b5a2b1",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/generation/StatusGenerator.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/generation/StatusGenerator.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 9,
                "filename": "src/java/org/apache/cocoon/generation/StatusGenerator.java",
                "patch": "@@ -401,26 +401,26 @@ private void genSettings() throws SAXException {\n         this.addValue(Settings.KEY_LOGGING_LOG4J_CONFIGURATION, s.getLog4jConfiguration());\n         this.addValue(Settings.KEY_LOGGING_MANAGER_CLASS, s.getLoggerManagerClassName());\n         this.addValue(Settings.KEY_PARENT_SERVICE_MANAGER, s.getParentServiceManagerClassName());\n+        this.addValue(Settings.KEY_LOGGING_COCOON_LOGGER, s.getCocoonLogger());\n+        this.addValue(Settings.KEY_INIT_CLASSLOADER, s.isInitClassloader());\n+        this.addValue(Settings.KEY_LOGGING_ENVIRONMENT_LOGGER, s.getEnvironmentLogger());\n+        this.addValue(Settings.KEY_LOGGING_OVERRIDE_LOGLEVEL, s.getOverrideLogLevel());\n+        this.addValue(Settings.KEY_MANAGE_EXCEPTIONS, s.isManageExceptions());\n+        this.addValue(Settings.KEY_UPLOADS_DIRECTORY, s.getUploadDirectory());\n+        this.addValue(Settings.KEY_CACHE_DIRECTORY, s.getCacheDirectory());\n+        this.addValue(Settings.KEY_WORK_DIRECTORY, s.getWorkDirectory());\n+        this.addValue(Settings.KEY_FORM_ENCODING, s.getFormEncoding());\n         \n         this.endGroup();\n \n         this.startGroup(\"Dynamic Settings\");\n \n         this.addValue(Settings.KEY_CONFIGURATION_RELOAD_DELAY, s.getConfigurationReloadDelay());\n-        this.addValue(Settings.KEY_LOGGING_COCOON_LOGGER, s.getCocoonLogger());\n         this.addValue(Settings.KEY_ALLOW_RELOAD, s.isAllowReload());\n-        this.addValue(Settings.KEY_INIT_CLASSLOADER, s.isInitClassloader());\n-        this.addValue(Settings.KEY_LOGGING_ENVIRONMENT_LOGGER, s.getEnvironmentLogger());\n-        this.addValue(Settings.KEY_LOGGING_OVERRIDE_LOGLEVEL, s.getOverrideLogLevel());\n-        this.addValue(Settings.KEY_MANAGE_EXCEPTIONS, s.isManageExceptions());\n-        this.addValue(Settings.KEY_UPLOADS_DIRECTORY, s.getUploadDirectory());\n         this.addValue(Settings.KEY_UPLOADS_AUTOSAVE, s.isAutosaveUploads());\n         this.addValue(Settings.KEY_UPLOADS_ENABLE, s.isEnableUploads());\n         this.addValue(Settings.KEY_UPLOADS_MAXSIZE, s.getMaxUploadSize());\n         this.addValue(Settings.KEY_UPLOADS_OVERWRITE, s.isAllowOverwrite());\n-        this.addValue(Settings.KEY_CACHE_DIRECTORY, s.getCacheDirectory());\n-        this.addValue(Settings.KEY_WORK_DIRECTORY, s.getWorkDirectory());\n-        this.addValue(Settings.KEY_FORM_ENCODING, s.getFormEncoding());\n         this.addValue(Settings.KEY_SHOWTIME, s.isShowTime());\n         this.addValue(Settings.KEY_HIDE_SHOWTIME, s.isHideShowTime());\n         this.addValue(Settings.KEY_LAZY_MODE, s.isLazyMode());",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/java/org/apache/cocoon/generation/StatusGenerator.java",
                "sha": "dbca634ce8712b6f8355b476d8acdb785aadc21e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cocoon/blob/cfaf5546786e9cd0d132288d9db79a35522df01c/src/test/org/apache/cocoon/core/container/ContainerTestCase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/test/org/apache/cocoon/core/container/ContainerTestCase.java?ref=cfaf5546786e9cd0d132288d9db79a35522df01c",
                "deletions": 2,
                "filename": "src/test/org/apache/cocoon/core/container/ContainerTestCase.java",
                "patch": "@@ -38,7 +38,7 @@\n import org.apache.avalon.framework.service.ServiceManager;\n import org.apache.cocoon.core.Core;\n import org.apache.cocoon.core.CoreUtil;\n-import org.apache.cocoon.core.Settings;\n+import org.apache.cocoon.core.MutableSettings;\n import org.apache.cocoon.util.log.DeprecationLogger;\n \n /**\n@@ -300,7 +300,7 @@ final private void setupManagers( final Configuration confCM,\n         roleManager.configure( confRM );\n \n         // Set up root manager for Core\n-        Core core = new Core(new Settings(), this.context);\n+        Core core = new Core(new MutableSettings(), this.context);\n         ((DefaultContext)this.context).put(Core.ROLE, core);\n         CoreUtil.RootServiceManager rsm = new CoreUtil.RootServiceManager(null, core);\n  ",
                "raw_url": "https://github.com/apache/cocoon/raw/cfaf5546786e9cd0d132288d9db79a35522df01c/src/test/org/apache/cocoon/core/container/ContainerTestCase.java",
                "sha": "d738ca896738abcc18860d84cf5019448abff09e",
                "status": "modified"
            }
        ],
        "message": "Start with a minimal set of dynamic settings\r\nQuick fix for NPE in OJB\n\ngit-svn-id: https://svn.apache.org/repos/asf/cocoon/trunk@177968 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cocoon/commit/f55437b1a5ca27c63052c4d5c4ce809d783927a0",
        "patched_files": [
            "CoreUtil.java"
        ],
        "repo": "cocoon",
        "unit_tests": [
            "TestCoreUtil.java"
        ]
    },
    "cocoon_e8746c4": {
        "bug_id": "cocoon_e8746c4",
        "commit": "https://github.com/apache/cocoon/commit/e8746c49d9de53f6b52c3561f091f36cb6df5e26",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cocoon/blob/e8746c49d9de53f6b52c3561f091f36cb6df5e26/src/java/org/apache/cocoon/core/CoreUtil.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/core/CoreUtil.java?ref=e8746c49d9de53f6b52c3561f091f36cb6df5e26",
                "deletions": 0,
                "filename": "src/java/org/apache/cocoon/core/CoreUtil.java",
                "patch": "@@ -287,6 +287,13 @@ protected Core createCore() {\n         return c;\n     }\n \n+    /**\n+     * Return the settings object.\n+     */\n+    public Settings getSettings() {\n+        return this.settings;\n+    }\n+\n     /**\n      * Instatiates the parent service manager, as specified in the\n      * parent-service-manager init parameter.",
                "raw_url": "https://github.com/apache/cocoon/raw/e8746c49d9de53f6b52c3561f091f36cb6df5e26/src/java/org/apache/cocoon/core/CoreUtil.java",
                "sha": "bc4950287364a651a65173f5c8ea8d9208bd8a1c",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/cocoon/blob/e8746c49d9de53f6b52c3561f091f36cb6df5e26/src/java/org/apache/cocoon/servlet/CocoonServlet.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cocoon/contents/src/java/org/apache/cocoon/servlet/CocoonServlet.java?ref=e8746c49d9de53f6b52c3561f091f36cb6df5e26",
                "deletions": 11,
                "filename": "src/java/org/apache/cocoon/servlet/CocoonServlet.java",
                "patch": "@@ -217,7 +217,7 @@ public void init(ServletConfig conf)\n         }\n \n         if (getLogger().isDebugEnabled()) {\n-            getLogger().debug(this.coreUtil.getCore().getSettings().toString());\n+            getLogger().debug(this.coreUtil.getSettings().toString());\n             getLogger().debug(\"getRealPath for /: \" + this.servletContextPath);\n             if (this.servletContextPath == null) {\n                 getLogger().debug(\"getResource for /WEB-INF: \" + debugPathOne);\n@@ -226,11 +226,11 @@ public void init(ServletConfig conf)\n         }\n \n         this.containerEncoding = this.getInitParameter(\"container-encoding\", \"ISO-8859-1\");\n-        this.requestFactory = new RequestFactory(coreUtil.getCore().getSettings().isAutosaveUploads(),\n+        this.requestFactory = new RequestFactory(coreUtil.getSettings().isAutosaveUploads(),\n                                                  new File(coreUtil.getCore().getSettings().getUploadDirectory()),\n-                                                 coreUtil.getCore().getSettings().isAllowOverwrite(),\n-                                                 coreUtil.getCore().getSettings().isSilentlyRename(),\n-                                                 coreUtil.getCore().getSettings().getMaxUploadSize(),\n+                                                 coreUtil.getSettings().isAllowOverwrite(),\n+                                                 coreUtil.getSettings().isSilentlyRename(),\n+                                                 coreUtil.getSettings().getMaxUploadSize(),\n                                                  this.containerEncoding);\n \n         try {\n@@ -267,7 +267,7 @@ public void service(HttpServletRequest req, HttpServletResponse res)\n \n         /* HACK for reducing class loader problems.                                     */\n         /* example: xalan extensions fail if someone adds xalan jars in tomcat3.2.1/lib */\n-        if (this.coreUtil.getCore().getSettings().isInitClassloader()) {\n+        if (this.coreUtil.getSettings().isInitClassloader()) {\n             try {\n                 Thread.currentThread().setContextClassLoader(this.classLoader);\n             } catch (Exception e) {\n@@ -285,7 +285,7 @@ public void service(HttpServletRequest req, HttpServletResponse res)\n         // get the request (wrapped if contains multipart-form data)\n         HttpServletRequest request;\n         try{\n-            if (this.coreUtil.getCore().getSettings().isEnableUploads()) {\n+            if (this.coreUtil.getSettings().isEnableUploads()) {\n                 request = requestFactory.getServletRequest(req);\n             } else {\n                 request = req;\n@@ -440,15 +440,15 @@ public void service(HttpServletRequest req, HttpServletResponse res)\n \n             if (contentType != null && contentType.equals(\"text/html\")) {\n                 String showTime = request.getParameter(Constants.SHOWTIME_PARAM);\n-                boolean show = this.coreUtil.getCore().getSettings().isShowTime();\n+                boolean show = this.coreUtil.getSettings().isShowTime();\n                 if (showTime != null) {\n                     show = !showTime.equalsIgnoreCase(\"no\");\n                 }\n                 if (show) {\n                     if ( timeString == null ) {\n                         timeString = processTime(stopWatch.getTime());\n                     }\n-                    boolean hide = this.coreUtil.getCore().getSettings().isHideShowTime();\n+                    boolean hide = this.coreUtil.getSettings().isHideShowTime();\n                     if (showTime != null) {\n                         hide = showTime.equalsIgnoreCase(\"hide\");\n                     }\n@@ -498,7 +498,7 @@ protected void manageException(HttpServletRequest req, HttpServletResponse res,\n                                    String title, String message, String description,\n                                    Exception e)\n     throws IOException {\n-        if (this.coreUtil.getCore().getSettings().isManageExceptions()) {\n+        if (this.coreUtil.getSettings().isManageExceptions()) {\n             if (env != null) {\n                 env.tryResetResponse();\n             } else {\n@@ -556,7 +556,7 @@ protected Environment getEnvironment(String uri,\n \n         String formEncoding = req.getParameter(\"cocoon-form-encoding\");\n         if (formEncoding == null) {\n-            formEncoding = this.coreUtil.getCore().getSettings().getFormEncoding();\n+            formEncoding = this.coreUtil.getSettings().getFormEncoding();\n         }\n         env = new HttpEnvironment(uri,\n                                   this.servletContextURL,",
                "raw_url": "https://github.com/apache/cocoon/raw/e8746c49d9de53f6b52c3561f091f36cb6df5e26/src/java/org/apache/cocoon/servlet/CocoonServlet.java",
                "sha": "374b549fe01c6f350270221980007c9f886cdce5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when an error occurs\n\ngit-svn-id: https://svn.apache.org/repos/asf/cocoon/trunk@219699 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cocoon/commit/3ef566f6fa0b2d438cc6071c9f8f65d749d8b451",
        "patched_files": [
            "CoreUtil.java"
        ],
        "repo": "cocoon",
        "unit_tests": [
            "TestCoreUtil.java"
        ]
    }
}