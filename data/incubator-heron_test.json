{
    "incubator-heron_2a1cf77": {
        "bug_id": "incubator-heron_2a1cf77",
        "commit": "https://github.com/apache/incubator-heron/commit/2a1cf77759d06791cb47a7c9845ccd5171d684b0",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/2a1cf77759d06791cb47a7c9845ccd5171d684b0/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java?ref=2a1cf77759d06791cb47a7c9845ccd5171d684b0",
                "deletions": 3,
                "filename": "heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "patch": "@@ -425,6 +425,9 @@ public void submitTopology() throws TopologySubmissionException {\n       // initialize the state manager\n       statemgr.initialize(config);\n \n+      // initialize the uploader\n+      uploader.initialize(config);\n+\n       // TODO(mfu): timeout should read from config\n       SchedulerStateManagerAdaptor adaptor = new SchedulerStateManagerAdaptor(statemgr, 5000);\n \n@@ -544,9 +547,6 @@ protected void validateSubmit(SchedulerStateManagerAdaptor adaptor, String topol\n   }\n \n   protected URI uploadPackage(IUploader uploader) throws UploaderException {\n-    // initialize the uploader\n-    uploader.initialize(config);\n-\n     // upload the topology package to the storage\n     return uploader.uploadPackage();\n   }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/2a1cf77759d06791cb47a7c9845ccd5171d684b0/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "sha": "e2121650abc7aa4e75ff970f5c96395ead2e2dc8",
                "status": "modified"
            }
        ],
        "message": "Move uploader init above PackingPlan creation to fix NPE in case of bad PackingPlan (#2083)",
        "parent": "https://github.com/apache/incubator-heron/commit/68d8d0e494cafb1117fff6080a92774744fefcbe",
        "patched_files": [
            "SubmitterMain.java"
        ],
        "repo": "incubator-heron",
        "unit_tests": [
            "SubmitterMainTest.java"
        ]
    },
    "incubator-heron_414969c": {
        "bug_id": "incubator-heron_414969c",
        "commit": "https://github.com/apache/incubator-heron/commit/414969ce8342b3aadff1fae8674f507ef2bd881c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-heron/blob/414969ce8342b3aadff1fae8674f507ef2bd881c/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonController.java?ref=414969ce8342b3aadff1fae8674f507ef2bd881c",
                "deletions": 1,
                "filename": "heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonController.java",
                "patch": "@@ -45,7 +45,8 @@ public MarathonController(\n    */\n   public boolean killTopology() {\n     // Setup Connection\n-    String topologyURI = String.format(\"%s/v2/groups/%s\", this.marathonURI, this.topologyName);\n+    String topologyURI = String.format(\"%s/v2/groups/%s?force=true\",\n+        this.marathonURI, this.topologyName);\n     HttpURLConnection conn = NetworkUtils.getHttpConnection(topologyURI);\n \n     // Attach a token if there is one specified",
                "raw_url": "https://github.com/apache/incubator-heron/raw/414969ce8342b3aadff1fae8674f507ef2bd881c/heron/schedulers/src/java/com/twitter/heron/scheduler/marathon/MarathonController.java",
                "sha": "31c9baa1f6191b102b75758cc05f0bb42a38fba9",
                "status": "modified"
            }
        ],
        "message": "Force destroy Marathon group on topology kill (#2168)\n\n* Move uploader init above PackingPlan creation to fix NPE in case of bad PackingPlan\r\n\r\n* Alwayse use force=true on marathon group deletes\r\n\r\n* Fix style issues",
        "parent": "https://github.com/apache/incubator-heron/commit/e62daed32e823996b8c08beb5fba9a4b89e708ac",
        "patched_files": [
            "MarathonController.java"
        ],
        "repo": "incubator-heron",
        "unit_tests": [
            "MarathonControllerTest.java"
        ]
    },
    "incubator-heron_50a20e8": {
        "bug_id": "incubator-heron_50a20e8",
        "commit": "https://github.com/apache/incubator-heron/commit/50a20e872ad462d1f4b9c200bedfd0804a3505a7",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 1,
                "filename": "heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java",
                "patch": "@@ -22,6 +22,7 @@\n import com.twitter.heron.proto.system.ExecutionEnvironment;\n import com.twitter.heron.spi.common.Config;\n import com.twitter.heron.spi.common.Context;\n+import com.twitter.heron.spi.common.Keys;\n import com.twitter.heron.spi.common.PackingPlan;\n import com.twitter.heron.spi.packing.IPacking;\n import com.twitter.heron.spi.scheduler.ILauncher;\n@@ -119,8 +120,14 @@ public Boolean call() {\n     packing.initialize(config, runtime);\n     PackingPlan packedPlan = packing.pack();\n \n+    // Add the instanceDistribution to the runtime\n+    Config ytruntime = Config.newBuilder()\n+        .putAll(runtime)\n+        .put(Keys.instanceDistribution(), packedPlan.getInstanceDistribution())\n+        .build();\n+\n     // initialize the launcher\n-    launcher.initialize(config, runtime);\n+    launcher.initialize(config, ytruntime);\n \n     Boolean result;\n \n@@ -153,4 +160,5 @@ public Boolean call() {\n \n     return true;\n   }\n+\n }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/LaunchRunner.java",
                "sha": "3ca29a9ca108ced45c8fea5be98c2df76d396ed1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 4,
                "filename": "heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java",
                "patch": "@@ -319,18 +319,17 @@ public boolean runScheduler() {\n           .put(Keys.topologyDefinition(), topology)\n           .put(Keys.schedulerStateManagerAdaptor(), adaptor)\n           .put(Keys.numContainers(), 1 + TopologyUtils.getNumContainers(topology))\n+          .put(Keys.schedulerShutdown(), getShutdown())\n           .build();\n \n       // get a packed plan and schedule it\n       packing.initialize(config, runtime);\n       PackingPlan packedPlan = packing.pack();\n \n-      // TODO - investigate whether the heron executors can be started\n-      // in scheduler.schedule method - rather than in scheduler.initialize method\n+      // Add the instanceDistribution to the runtime\n       Config ytruntime = Config.newBuilder()\n           .putAll(runtime)\n-          .put(Keys.instanceDistribution(), TopologyUtils.packingToString(packedPlan))\n-          .put(Keys.schedulerShutdown(), getShutdown())\n+          .put(Keys.instanceDistribution(), packedPlan.getInstanceDistribution())\n           .build();\n \n       // initialize the scheduler",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SchedulerMain.java",
                "sha": "45dec48736079b89a47a05a79211064ca46b4afd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 0,
                "filename": "heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "patch": "@@ -409,6 +409,7 @@ public boolean submitTopology() {\n               .put(Keys.topologyName(), topology.getName())\n               .put(Keys.topologyDefinition(), topology)\n               .put(Keys.schedulerStateManagerAdaptor(), adaptor)\n+              .put(Keys.numContainers(), 1 + TopologyUtils.getNumContainers(topology))\n               .put(Keys.topologyPackageUri(), packageURI)\n               .put(Keys.launcherClassInstance(), launcher)\n               .put(Keys.packingClassInstance(), packing)",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/src/java/com/twitter/heron/scheduler/SubmitterMain.java",
                "sha": "1b04df27fe596588fe3d603ac44336ebf5ee42d0",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 5,
                "filename": "heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java",
                "patch": "@@ -47,6 +47,7 @@\n   private static final String CLUSTER = \"testCluster\";\n   private static final String ROLE = \"testRole\";\n   private static final String ENVIRON = \"testEnviron\";\n+  private static final String MOCK_PACKING_STRING = \"mockPackString\";\n \n   private static TopologyAPI.Config.KeyValue getConfig(String key, String value) {\n     return TopologyAPI.Config.KeyValue.newBuilder().setKey(key).setValue(value).build();\n@@ -98,16 +99,20 @@ private static Config createRunnerConfig() {\n   }\n \n   private static Config createRunnerRuntime() {\n-    Config runtime = Mockito.mock(Config.class);\n+    Config runtime = Mockito.spy(Config.newBuilder().build());\n     ILauncher launcher = Mockito.mock(ILauncher.class);\n     IPacking packing = Mockito.mock(IPacking.class);\n     SchedulerStateManagerAdaptor adaptor = Mockito.mock(SchedulerStateManagerAdaptor.class);\n     TopologyAPI.Topology topology = createTopology(new com.twitter.heron.api.Config());\n \n-    Mockito.when(runtime.get(Keys.launcherClassInstance())).thenReturn(launcher);\n-    Mockito.when(runtime.get(Keys.packingClassInstance())).thenReturn(packing);\n-    Mockito.when(runtime.get(Keys.schedulerStateManagerAdaptor())).thenReturn(adaptor);\n-    Mockito.when(runtime.get(Keys.topologyDefinition())).thenReturn(topology);\n+    Mockito.doReturn(launcher).when(runtime).get(Keys.launcherClassInstance());\n+    Mockito.doReturn(packing).when(runtime).get(Keys.packingClassInstance());\n+    Mockito.doReturn(adaptor).when(runtime).get(Keys.schedulerStateManagerAdaptor());\n+    Mockito.doReturn(topology).when(runtime).get(Keys.topologyDefinition());\n+\n+    PackingPlan packingPlan = Mockito.mock(PackingPlan.class);\n+    Mockito.when(packing.pack()).thenReturn(packingPlan);\n+    Mockito.when(packingPlan.getInstanceDistribution()).thenReturn(MOCK_PACKING_STRING);\n \n     return runtime;\n   }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/LaunchRunnerTest.java",
                "sha": "22d6db8fd6d09215fb4dcc6d856e0fafea78917e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 5,
                "filename": "heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java",
                "patch": "@@ -83,16 +83,15 @@ public void setUp() throws Exception {\n             new HashMap<String, Integer>(), new HashMap<String, Integer>());\n     String packingString = \"dummyPackingString\";\n \n-    // Mock TopologyUtils stuff\n-    PowerMockito.spy(TopologyUtils.class);\n-    PowerMockito.doReturn(packingString).\n-        when(TopologyUtils.class, \"packingToString\", Mockito.any(PackingPlan.class));\n-\n     // Mock objects to be verified\n     stateManager = Mockito.mock(IStateManager.class);\n     packing = Mockito.mock(IPacking.class);\n     scheduler = Mockito.mock(IScheduler.class);\n \n+    PackingPlan packingPlan = Mockito.mock(PackingPlan.class);\n+    Mockito.when(packing.pack()).thenReturn(packingPlan);\n+    Mockito.when(packingPlan.getInstanceDistribution()).thenReturn(packingString);\n+\n     // Mock ReflectionUtils stuff\n     PowerMockito.spy(ReflectionUtils.class);\n     PowerMockito.doReturn(stateManager).",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/scheduler-core/tests/java/com/twitter/heron/scheduler/SchedulerMainTest.java",
                "sha": "6cd45ba2fc959fb35c095d1e40ae10e172e82a10",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 1,
                "filename": "heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java",
                "patch": "@@ -136,7 +136,7 @@ protected String getHeronAuroraPath() {\n     auroraProperties.put(\"TOPOLOGY_ID\", topology.getId());\n     auroraProperties.put(\"TOPOLOGY_DEFINITION_FILE\",\n         FileUtils.getBaseName(Context.topologyDefinitionFile(config)));\n-    auroraProperties.put(\"INSTANCE_DISTRIBUTION\", TopologyUtils.packingToString(packing));\n+    auroraProperties.put(\"INSTANCE_DISTRIBUTION\", packing.getInstanceDistribution());\n     auroraProperties.put(\"STATEMGR_CONNECTION_STRING\",\n         Context.stateManagerConnectionString(config));\n     auroraProperties.put(\"STATEMGR_ROOT_PATH\", Context.stateManagerRootPath(config));",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/schedulers/src/java/com/twitter/heron/scheduler/aurora/AuroraScheduler.java",
                "sha": "b473f01160304fd54887d21f4def0d421adc5977",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/src/java/com/twitter/heron/spi/common/PackingPlan.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/spi/src/java/com/twitter/heron/spi/common/PackingPlan.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 0,
                "filename": "heron/spi/src/java/com/twitter/heron/spi/common/PackingPlan.java",
                "patch": "@@ -27,6 +27,35 @@ public PackingPlan(String id, Map<String, ContainerPlan> containers, Resource re\n     this.resource = resource;\n   }\n \n+  /**\n+   * Pack the packing plan into a String describing instance distribution, used by executor\n+   *\n+   * @return String describing instance distribution\n+   */\n+  public String getInstanceDistribution() {\n+    StringBuilder[] containerBuilder = new StringBuilder[this.containers.size()];\n+    for (PackingPlan.ContainerPlan container : this.containers.values()) {\n+      int index = Integer.parseInt(container.id);\n+      containerBuilder[index - 1] = new StringBuilder();\n+\n+      for (PackingPlan.InstancePlan instance : container.instances.values()) {\n+        String[] tokens = instance.id.split(\":\");\n+        containerBuilder[index - 1].append(\n+            String.format(\"%s:%s:%s:\", tokens[1], tokens[2], tokens[3]));\n+      }\n+      containerBuilder[index - 1].deleteCharAt(containerBuilder[index - 1].length() - 1);\n+    }\n+\n+    StringBuilder packingBuilder = new StringBuilder();\n+    for (int i = 0; i < containerBuilder.length; ++i) {\n+      StringBuilder builder = containerBuilder[i];\n+      packingBuilder.append(String.format(\"%d:%s,\", i + 1, builder.toString()));\n+    }\n+    packingBuilder.deleteCharAt(packingBuilder.length() - 1);\n+\n+    return packingBuilder.toString();\n+  }\n+\n   /**\n    * Type definition of packing structure output.\n    */",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/src/java/com/twitter/heron/spi/common/PackingPlan.java",
                "sha": "3a4da1a7a04714901923f9c3190f39d801c750f9",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/src/java/com/twitter/heron/spi/utils/TopologyUtils.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/spi/src/java/com/twitter/heron/spi/utils/TopologyUtils.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 26,
                "filename": "heron/spi/src/java/com/twitter/heron/spi/utils/TopologyUtils.java",
                "patch": "@@ -30,7 +30,6 @@\n import com.twitter.heron.api.Config;\n import com.twitter.heron.api.generated.TopologyAPI;\n import com.twitter.heron.spi.common.Constants;\n-import com.twitter.heron.spi.common.PackingPlan;\n \n /**\n  * Utility to process TopologyAPI.Topology proto\n@@ -199,31 +198,6 @@ public static String getAdditionalClassPath(TopologyAPI.Topology topology) {\n     return ramMap;\n   }\n \n-  // TODO(nbhagat): Formalize how to pass distribution to heron-executor.\n-  public static String packingToString(PackingPlan packing) {\n-    StringBuilder[] containerBuilder = new StringBuilder[packing.containers.size()];\n-    for (PackingPlan.ContainerPlan container : packing.containers.values()) {\n-      int index = Integer.parseInt(container.id);\n-      containerBuilder[index - 1] = new StringBuilder();\n-\n-      for (PackingPlan.InstancePlan instance : container.instances.values()) {\n-        String[] tokens = instance.id.split(\":\");\n-        containerBuilder[index - 1].append(\n-            String.format(\"%s:%s:%s:\", tokens[1], tokens[2], tokens[3]));\n-      }\n-      containerBuilder[index - 1].deleteCharAt(containerBuilder[index - 1].length() - 1);\n-    }\n-\n-    StringBuilder packingBuilder = new StringBuilder();\n-    for (int i = 0; i < containerBuilder.length; ++i) {\n-      StringBuilder builder = containerBuilder[i];\n-      packingBuilder.append(String.format(\"%d:%s,\", i + 1, builder.toString()));\n-    }\n-    packingBuilder.deleteCharAt(packingBuilder.length() - 1);\n-\n-    return packingBuilder.toString();\n-  }\n-\n   public static String formatRamMap(Map<String, Long> ramMap) {\n     StringBuilder ramMapBuilder = new StringBuilder();\n     for (String component : ramMap.keySet()) {",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/src/java/com/twitter/heron/spi/utils/TopologyUtils.java",
                "sha": "eb32753002fa40047dced078bbb62d0b8d0f0d00",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/BUILD",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/spi/tests/java/BUILD?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 0,
                "filename": "heron/spi/tests/java/BUILD",
                "patch": "@@ -37,6 +37,13 @@ java_test(\n     size = \"small\",\n )\n \n+java_test(\n+    name = \"packing-plan_unittest\",\n+    srcs = glob([\"**/common/PackingPlanTest.java\"]),\n+    deps = common_deps_files,\n+    size = \"small\",\n+)\n+\n java_test(\n     name = \"network-utils_unittest\",\n     srcs = glob([\"**/common/NetworkUtilsTest.java\"]),",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/BUILD",
                "sha": "f4d5dd9cfce8396082266f7ac036a86eb32b9c2b",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/com/twitter/heron/spi/common/PackingPlanTest.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/spi/tests/java/com/twitter/heron/spi/common/PackingPlanTest.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 0,
                "filename": "heron/spi/tests/java/com/twitter/heron/spi/common/PackingPlanTest.java",
                "patch": "@@ -0,0 +1,80 @@\n+// Copyright 2016 Twitter. All rights reserved.\n+//\n+// Licensed under the Apache License, Version 2.0 (the \"License\");\n+// you may not use this file except in compliance with the License.\n+// You may obtain a copy of the License at\n+//\n+//    http://www.apache.org/licenses/LICENSE-2.0\n+//\n+// Unless required by applicable law or agreed to in writing, software\n+// distributed under the License is distributed on an \"AS IS\" BASIS,\n+// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+// See the License for the specific language governing permissions and\n+// limitations under the License.\n+\n+package com.twitter.heron.spi.common;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+public class PackingPlanTest {\n+  public static PackingPlan generatePacking(Map<String, List<String>> basePacking) {\n+    PackingPlan.Resource resource =\n+        new PackingPlan.Resource(1.0, 1 * Constants.GB, 10 * Constants.GB);\n+\n+    Map<String, PackingPlan.ContainerPlan> containerPlanMap = new HashMap<>();\n+\n+    for (Map.Entry<String, List<String>> entry : basePacking.entrySet()) {\n+      String containerId = entry.getKey();\n+      List<String> instanceList = entry.getValue();\n+\n+      Map<String, PackingPlan.InstancePlan> instancePlanMap = new HashMap<>();\n+\n+      for (String instanceId : instanceList) {\n+        String componentName = instanceId.split(\":\")[1];\n+        PackingPlan.InstancePlan instancePlan =\n+            new PackingPlan.InstancePlan(instanceId, componentName, resource);\n+        instancePlanMap.put(instanceId, instancePlan);\n+      }\n+\n+      PackingPlan.ContainerPlan containerPlan =\n+          new PackingPlan.ContainerPlan(containerId, instancePlanMap, resource);\n+\n+      containerPlanMap.put(containerId, containerPlan);\n+    }\n+\n+    return new PackingPlan(\"\", containerPlanMap, resource);\n+  }\n+\n+  @Test\n+  public void testPackingToString() {\n+    Map<String, List<String>> packing = new HashMap<>();\n+    packing.put(\"1\", Arrays.asList(\"1:spout:1:0\", \"1:bolt:3:0\"));\n+    String packingStr = generatePacking(packing).getInstanceDistribution();\n+    String expectedStr0 = \"1:spout:1:0:bolt:3:0\";\n+    String expectedStr1 = \"1:bolt:3:0:spout:1:0\";\n+\n+    Assert.assertTrue(packingStr.equals(expectedStr0) || packingStr.equals(expectedStr1));\n+\n+    packing.put(\"2\", Arrays.asList(\"2:spout:2:1\"));\n+    packingStr = generatePacking(packing).getInstanceDistribution();\n+\n+    for (String str : packingStr.split(\",\")) {\n+      if (str.startsWith(\"1:\")) {\n+        // This is the packing str for container 1\n+        Assert.assertTrue(str.equals(expectedStr0) || str.equals(expectedStr1));\n+      } else if (str.startsWith(\"2:\")) {\n+        // This is the packing str for container 2\n+        Assert.assertEquals(\"2:spout:2:1\", str);\n+      } else {\n+        // Unexpected container string\n+        throw new RuntimeException(\"Unexpected results\");\n+      }\n+    }\n+  }\n+}",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/com/twitter/heron/spi/common/PackingPlanTest.java",
                "sha": "de5b09d31e7ed4917527580c3c778a6b3058f049",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/incubator-heron/blob/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/com/twitter/heron/spi/utils/TopologyUtilsTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/spi/tests/java/com/twitter/heron/spi/utils/TopologyUtilsTest.java?ref=50a20e872ad462d1f4b9c200bedfd0804a3505a7",
                "deletions": 60,
                "filename": "heron/spi/tests/java/com/twitter/heron/spi/utils/TopologyUtilsTest.java",
                "patch": "@@ -14,9 +14,7 @@\n \n package com.twitter.heron.spi.utils;\n \n-import java.util.Arrays;\n import java.util.HashMap;\n-import java.util.List;\n import java.util.Map;\n import java.util.TreeMap;\n \n@@ -26,39 +24,8 @@\n import com.twitter.heron.api.Config;\n import com.twitter.heron.api.generated.TopologyAPI;\n import com.twitter.heron.spi.common.Constants;\n-import com.twitter.heron.spi.common.PackingPlan;\n \n public class TopologyUtilsTest {\n-\n-  public static PackingPlan generatePacking(Map<String, List<String>> basePacking) {\n-    PackingPlan.Resource resource =\n-        new PackingPlan.Resource(1.0, 1 * Constants.GB, 10 * Constants.GB);\n-\n-    Map<String, PackingPlan.ContainerPlan> containerPlanMap = new HashMap<>();\n-\n-    for (Map.Entry<String, List<String>> entry : basePacking.entrySet()) {\n-      String containerId = entry.getKey();\n-      List<String> instanceList = entry.getValue();\n-\n-      Map<String, PackingPlan.InstancePlan> instancePlanMap = new HashMap<>();\n-\n-      for (String instanceId : instanceList) {\n-        String componentName = instanceId.split(\":\")[1];\n-        PackingPlan.InstancePlan instancePlan =\n-            new PackingPlan.InstancePlan(instanceId, componentName, resource);\n-        instancePlanMap.put(instanceId, instancePlan);\n-      }\n-\n-      PackingPlan.ContainerPlan containerPlan =\n-          new PackingPlan.ContainerPlan(containerId, instancePlanMap, resource);\n-\n-      containerPlanMap.put(containerId, containerPlan);\n-    }\n-\n-    return new PackingPlan(\"\", containerPlanMap, resource);\n-\n-  }\n-\n   @Test\n   public void testGetComponentParallelism() {\n     int componentParallelism = 4;\n@@ -89,33 +56,6 @@ public void testGetTotalInstance() {\n         TopologyUtils.getTotalInstance(topology));\n   }\n \n-  @Test\n-  public void testPackingToString() {\n-    Map<String, List<String>> packing = new HashMap<>();\n-    packing.put(\"1\", Arrays.asList(\"1:spout:1:0\", \"1:bolt:3:0\"));\n-    String packingStr = TopologyUtils.packingToString(generatePacking(packing));\n-    String expectedStr0 = \"1:spout:1:0:bolt:3:0\";\n-    String expectedStr1 = \"1:bolt:3:0:spout:1:0\";\n-\n-    Assert.assertTrue(packingStr.equals(expectedStr0) || packingStr.equals(expectedStr1));\n-\n-    packing.put(\"2\", Arrays.asList(\"2:spout:2:1\"));\n-    packingStr = TopologyUtils.packingToString(generatePacking(packing));\n-\n-    for (String str : packingStr.split(\",\")) {\n-      if (str.startsWith(\"1:\")) {\n-        // This is the packing str for container 1\n-        Assert.assertTrue(str.equals(expectedStr0) || str.equals(expectedStr1));\n-      } else if (str.startsWith(\"2:\")) {\n-        // This is the packing str for container 2\n-        Assert.assertEquals(\"2:spout:2:1\", str);\n-      } else {\n-        // Unexpected container string\n-        throw new RuntimeException(\"Unexpected results\");\n-      }\n-    }\n-  }\n-\n   @Test\n   public void testGetComponentRamMapDefaultValue() {\n     int componentParallelism = 2;",
                "raw_url": "https://github.com/apache/incubator-heron/raw/50a20e872ad462d1f4b9c200bedfd0804a3505a7/heron/spi/tests/java/com/twitter/heron/spi/utils/TopologyUtilsTest.java",
                "sha": "de245531d4a66b3ce9d14ca5ea1defdcf7f7f75e",
                "status": "modified"
            }
        ],
        "message": "Add missing values for Config runtime to avoid NPE (#715)\n\n1. Add missing value for Config runtime, mainly the instance_distribution string.\r\n2. Move the method of packing to instance distribution string from TopologyUtils (static method) to PackingPlan(instance method).\r\n3. Update unit tests.",
        "parent": "https://github.com/apache/incubator-heron/commit/b50558769fc0a992840106a64bcfcb518d3678f8",
        "patched_files": [
            "SchedulerMain.java",
            "SubmitterMain.java",
            "LaunchRunner.java",
            "BUILD",
            "PackingPlan.java",
            "TopologyUtils.java",
            "AuroraScheduler.java"
        ],
        "repo": "incubator-heron",
        "unit_tests": [
            "LaunchRunnerTest.java",
            "TopologyUtilsTest.java",
            "SchedulerMainTest.java",
            "AuroraSchedulerTest.java",
            "SubmitterMainTest.java",
            "PackingPlanTest.java"
        ]
    },
    "incubator-heron_62e940e": {
        "bug_id": "incubator-heron_62e940e",
        "commit": "https://github.com/apache/incubator-heron/commit/62e940e0924a808f7a3c6dd71e101297f89e9b96",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/incubator-heron/blob/62e940e0924a808f7a3c6dd71e101297f89e9b96/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java?ref=62e940e0924a808f7a3c6dd71e101297f89e9b96",
                "deletions": 1,
                "filename": "heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "patch": "@@ -42,7 +42,7 @@\n \n public class BoltInstance implements IInstance {\n \n-  protected final PhysicalPlanHelper helper;\n+  protected PhysicalPlanHelper helper;\n   protected final IBolt bolt;\n   protected final BoltOutputCollectorImpl collector;\n   protected final IPluggableSerializer serializer;\n@@ -99,6 +99,11 @@ public void update(PhysicalPlanHelper physicalPlanHelper) {\n       ((IUpdatable) bolt).update(physicalPlanHelper.getTopologyContext());\n     }\n     collector.updatePhysicalPlanHelper(physicalPlanHelper);\n+\n+    // Re-prepare the CustomStreamGrouping since the downstream tasks can change\n+    physicalPlanHelper.prepareForCustomStreamGrouping();\n+    // Reset the helper\n+    helper = physicalPlanHelper;\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/incubator-heron/raw/62e940e0924a808f7a3c6dd71e101297f89e9b96/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "sha": "1840c0349120b9646dc3a061a3815a3e597390d9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/incubator-heron/blob/62e940e0924a808f7a3c6dd71e101297f89e9b96/heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java?ref=62e940e0924a808f7a3c6dd71e101297f89e9b96",
                "deletions": 0,
                "filename": "heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java",
                "patch": "@@ -117,6 +117,11 @@ public void update(PhysicalPlanHelper physicalPlanHelper) {\n       ((IUpdatable) spout).update(physicalPlanHelper.getTopologyContext());\n     }\n     collector.updatePhysicalPlanHelper(physicalPlanHelper);\n+\n+    // Re-prepare the CustomStreamGrouping since the downstream tasks can change\n+    physicalPlanHelper.prepareForCustomStreamGrouping();\n+    // Reset the helper\n+    helper = physicalPlanHelper;\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/incubator-heron/raw/62e940e0924a808f7a3c6dd71e101297f89e9b96/heron/instance/src/java/com/twitter/heron/instance/spout/SpoutInstance.java",
                "sha": "b3e1660875ab6e4c6536f3c55fd367748aa2540c",
                "status": "modified"
            }
        ],
        "message": "Fixes NPE in CustomGrouping (#1804)",
        "parent": "https://github.com/apache/incubator-heron/commit/2ece5a91b0587d1beb31ed4743b0fbca561a42b2",
        "patched_files": [
            "SpoutInstance.java",
            "BoltInstance.java"
        ],
        "repo": "incubator-heron",
        "unit_tests": [
            "BoltInstanceTest.java",
            "SpoutInstanceTest.java"
        ]
    },
    "incubator-heron_c4fe05f": {
        "bug_id": "incubator-heron_c4fe05f",
        "commit": "https://github.com/apache/incubator-heron/commit/c4fe05fa97b6ada6000f008c98fdca40ff759d34",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 5,
                "filename": "heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java",
                "patch": "@@ -40,24 +40,27 @@\n   private final long tupleKey;\n   private final List<HeronTuples.RootId> roots;\n   private final long creationTime;\n+  private final int sourceTaskId;\n \n   private List<Object> values;\n \n   public TupleImpl(TopologyContext context, TopologyAPI.StreamId stream,\n                    long tupleKey, List<HeronTuples.RootId> roots,\n-                   List<Object> values) {\n-    this(context, stream, tupleKey, roots, values, System.nanoTime(), true);\n+                   List<Object> values, int sourceTaskId) {\n+    this(context, stream, tupleKey, roots, values, System.nanoTime(), true, sourceTaskId);\n   }\n \n   public TupleImpl(TopologyContext context, TopologyAPI.StreamId stream,\n                    long tupleKey, List<HeronTuples.RootId> roots,\n-                   List<Object> values, long creationTime, boolean isCheckRequired) {\n+                   List<Object> values, long creationTime, boolean isCheckRequired,\n+                   int sourceTaskId) {\n     this.context = context;\n     this.stream = stream;\n     this.tupleKey = tupleKey;\n     this.roots = roots;\n     this.values = values;\n     this.creationTime = creationTime;\n+    this.sourceTaskId = sourceTaskId;\n \n     if (isCheckRequired) {\n       Fields schema = context.getComponentOutputFields(stream.getComponentName(),\n@@ -223,10 +226,9 @@ public String getSourceComponent() {\n     return stream.getComponentName();\n   }\n \n-  // TODO:- Is this needed\n   @Override\n   public int getSourceTask() {\n-    throw new RuntimeException(\"Tuple no longer supports getSourceTask\");\n+    return sourceTaskId;\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/common/src/java/com/twitter/heron/common/utils/tuple/TupleImpl.java",
                "sha": "e2875263a39b9a73e29e72a536aab9dabcc05786",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 2,
                "filename": "heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java",
                "patch": "@@ -44,7 +44,7 @@ public AbstractOutputCollector(IPluggableSerializer serializer,\n     this.serializer = serializer;\n     this.metrics = metrics;\n     this.totalTuplesEmitted = 0;\n-    updatePhysicalPlanHelper(helper);\n+    this.helper = helper;\n \n     Map<String, Object> config = helper.getTopologyContext().getTopologyConfig();\n     if (config.containsKey(Config.TOPOLOGY_ENABLE_ACKING)\n@@ -54,11 +54,12 @@ public AbstractOutputCollector(IPluggableSerializer serializer,\n       this.ackEnabled = false;\n     }\n \n-    this.outputter = new OutgoingTupleCollection(helper.getMyComponent(), streamOutQueue);\n+    this.outputter = new OutgoingTupleCollection(helper, streamOutQueue);\n   }\n \n   public void updatePhysicalPlanHelper(PhysicalPlanHelper physicalPlanHelper) {\n     this.helper = physicalPlanHelper;\n+    this.outputter.updatePhysicalPlanHelper(physicalPlanHelper);\n   }\n \n   public PhysicalPlanHelper getPhysicalPlanHelper() {",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/AbstractOutputCollector.java",
                "sha": "40f5bb3fbda96c52e52c01b0608eb6096526ef5c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/OutgoingTupleCollection.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/instance/OutgoingTupleCollection.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 4,
                "filename": "heron/instance/src/java/com/twitter/heron/instance/OutgoingTupleCollection.java",
                "patch": "@@ -19,6 +19,7 @@\n import com.twitter.heron.common.basics.Communicator;\n import com.twitter.heron.common.basics.SingletonRegistry;\n import com.twitter.heron.common.config.SystemConfig;\n+import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;\n import com.twitter.heron.proto.system.HeronTuples;\n \n /**\n@@ -30,7 +31,7 @@\n  * In fact, when talking about to send out tuples, we mean we push them to the out queues.\n  */\n public class OutgoingTupleCollection {\n-  protected final String componentName;\n+  protected PhysicalPlanHelper helper;\n   // We have just one outQueue responsible for both control tuples and data tuples\n   private final Communicator<HeronTuples.HeronTupleSet> outQueue;\n \n@@ -49,10 +50,10 @@\n   private long currentDataTupleSizeInBytes;\n \n   public OutgoingTupleCollection(\n-      String componentName,\n+      PhysicalPlanHelper helper,\n       Communicator<HeronTuples.HeronTupleSet> outQueue) {\n     this.outQueue = outQueue;\n-    this.componentName = componentName;\n+    this.helper = helper;\n     SystemConfig systemConfig =\n         (SystemConfig) SingletonRegistry.INSTANCE.getSingleton(SystemConfig.HERON_SYSTEM_CONFIG);\n \n@@ -118,7 +119,7 @@ private void initNewDataTuple(String streamId) {\n \n     TopologyAPI.StreamId.Builder sbldr = TopologyAPI.StreamId.newBuilder();\n     sbldr.setId(streamId);\n-    sbldr.setComponentName(componentName);\n+    sbldr.setComponentName(helper.getMyComponent());\n     currentDataTuple = HeronTuples.HeronDataTupleSet.newBuilder();\n     currentDataTuple.setStream(sbldr);\n   }\n@@ -131,6 +132,7 @@ private void initNewControlTuple() {\n   private void flushRemaining() {\n     if (currentDataTuple != null) {\n       HeronTuples.HeronTupleSet.Builder bldr = HeronTuples.HeronTupleSet.newBuilder();\n+      bldr.setSrcTaskId(helper.getMyTaskId());\n       bldr.setData(currentDataTuple);\n \n       pushTupleToQueue(bldr, outQueue);\n@@ -139,7 +141,9 @@ private void flushRemaining() {\n     }\n     if (currentControlTuple != null) {\n       HeronTuples.HeronTupleSet.Builder bldr = HeronTuples.HeronTupleSet.newBuilder();\n+      bldr.setSrcTaskId(helper.getMyTaskId());\n       bldr.setControl(currentControlTuple);\n+\n       pushTupleToQueue(bldr, outQueue);\n \n       currentControlTuple = null;\n@@ -168,4 +172,8 @@ public void clear() {\n \n     outQueue.clear();\n   }\n+\n+  public void updatePhysicalPlanHelper(PhysicalPlanHelper physicalPlanHelper) {\n+    this.helper = physicalPlanHelper;\n+  }\n }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/OutgoingTupleCollection.java",
                "sha": "9e9db942bca051140cfd17dab61a958bce52183d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 1,
                "filename": "heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "patch": "@@ -191,6 +191,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue\n       TopologyAPI.StreamId stream = tuples.getData().getStream();\n       int nValues = topologyContext.getComponentOutputFields(\n           stream.getComponentName(), stream.getId()).size();\n+      int sourceTaskId = tuples.getSrcTaskId();\n \n       for (HeronTuples.HeronDataTuple dataTuple : tuples.getData().getTuplesList()) {\n         long startExecuteTuple = System.nanoTime();\n@@ -202,7 +203,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue\n \n         // Decode the tuple\n         TupleImpl t = new TupleImpl(topologyContext, stream, dataTuple.getKey(),\n-            dataTuple.getRootsList(), values, startExecuteTuple, false);\n+            dataTuple.getRootsList(), values, startExecuteTuple, false, sourceTaskId);\n \n         // Delegate to the use defined bolt\n         bolt.execute(t);",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/instance/bolt/BoltInstance.java",
                "sha": "bccc697410f145accaa5996de008be25f5f6a7a5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 0,
                "filename": "heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java",
                "patch": "@@ -281,6 +281,9 @@ private void handleNewTuples(StreamManager.TupleMessage message) {\n \n   private void handleNewTuples2(HeronTuples.HeronTupleSet2 set) {\n     HeronTuples.HeronTupleSet.Builder toFeed = HeronTuples.HeronTupleSet.newBuilder();\n+    // Set the source task id\n+    toFeed.setSrcTaskId(set.getSrcTaskId());\n+\n     if (set.hasControl()) {\n       toFeed.setControl(set.getControl());\n     } else {",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/java/com/twitter/heron/network/StreamManagerClient.java",
                "sha": "ceea68ca319f5bd1ee55e4269ef867bdaf1e8b1b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/python/instance/st_heron_instance.py",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/src/python/instance/st_heron_instance.py?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 0,
                "filename": "heron/instance/src/python/instance/st_heron_instance.py",
                "patch": "@@ -139,6 +139,7 @@ def send_buffered_messages(self):\n     \"\"\"Send messages in out_stream to the Stream Manager\"\"\"\n     while not self.out_stream.is_empty():\n       tuple_set = self.out_stream.poll()\n+      tuple_set.src_task_id = self.my_pplan_helper.my_task_id\n       self.gateway_metrics.update_sent_packet(tuple_set.ByteSize())\n       self._stmgr_client.send_message(tuple_set)\n ",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/src/python/instance/st_heron_instance.py",
                "sha": "87e39984c81e734025e4e15cb170bf0c7b8ddaff",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/instance/bolt/BoltInstanceTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/tests/java/com/twitter/heron/instance/bolt/BoltInstanceTest.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 0,
                "filename": "heron/instance/tests/java/com/twitter/heron/instance/bolt/BoltInstanceTest.java",
                "patch": "@@ -49,6 +49,7 @@\n  */\n public class BoltInstanceTest {\n   private static final String BOLT_INSTANCE_ID = \"bolt-id\";\n+  private static final int SRC_TASK_ID = 1;\n   private static IPluggableSerializer serializer = new JavaSerializer();\n \n   // Singleton to be changed globally for testing\n@@ -103,6 +104,7 @@ public void testReadTupleAndExecute() {\n \n     // Send tuples to bolt instance\n     HeronTuples.HeronTupleSet.Builder heronTupleSet = HeronTuples.HeronTupleSet.newBuilder();\n+    heronTupleSet.setSrcTaskId(SRC_TASK_ID);\n     HeronTuples.HeronDataTupleSet.Builder dataTupleSet = HeronTuples.HeronDataTupleSet.newBuilder();\n     TopologyAPI.StreamId.Builder streamId = TopologyAPI.StreamId.newBuilder();\n     streamId.setComponentName(\"test-spout\");",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/instance/bolt/BoltInstanceTest.java",
                "sha": "cd800b3be03e692eff9d60118e07091d79c82a37",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 0,
                "filename": "heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java",
                "patch": "@@ -64,6 +64,7 @@\n  */\n public class SpoutInstanceTest {\n   private static final String SPOUT_INSTANCE_ID = \"spout-id\";\n+  private static final int SRC_TASK_ID = 1;\n   private static IPluggableSerializer serializer = new JavaSerializer();\n \n   // Singleton to be changed globally for testing\n@@ -282,6 +283,7 @@ private void constructAndSendAcks() {\n     // We will construct the ack&fail tuples\n     // We will construct 5 acks and 5 fails\n     HeronTuples.HeronTupleSet.Builder bldr = HeronTuples.HeronTupleSet.newBuilder();\n+    bldr.setSrcTaskId(SRC_TASK_ID);\n     HeronTuples.HeronControlTupleSet.Builder controlTupleSet\n         = HeronTuples.HeronControlTupleSet.newBuilder();\n ",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/instance/spout/SpoutInstanceTest.java",
                "sha": "5f27a47740929590e3af52c8d4929822b4f299fe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/network/HandleReadTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/instance/tests/java/com/twitter/heron/network/HandleReadTest.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 0,
                "filename": "heron/instance/tests/java/com/twitter/heron/network/HandleReadTest.java",
                "patch": "@@ -42,6 +42,7 @@\n  * Stream manager.\n  */\n public class HandleReadTest extends AbstractNetworkTest {\n+  private static final int SRC_TASK_ID = 1;\n \n   /**\n    * Test reading from network\n@@ -101,6 +102,7 @@ public void testHandleRead() throws IOException {\n   private Message constructMockMessage() {\n     StreamManager.TupleMessage.Builder message = StreamManager.TupleMessage.newBuilder();\n     HeronTuples.HeronTupleSet.Builder heronTupleSet = HeronTuples.HeronTupleSet.newBuilder();\n+    heronTupleSet.setSrcTaskId(SRC_TASK_ID);\n     HeronTuples.HeronDataTupleSet.Builder dataTupleSet = HeronTuples.HeronDataTupleSet.newBuilder();\n     TopologyAPI.StreamId.Builder streamId = TopologyAPI.StreamId.newBuilder();\n     streamId.setComponentName(\"test-spout\");",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/instance/tests/java/com/twitter/heron/network/HandleReadTest.java",
                "sha": "cd88a207199a857a5554985e232b715421dafb83",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/proto/stmgr.proto",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/proto/stmgr.proto?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 1,
                "filename": "heron/proto/stmgr.proto",
                "patch": "@@ -79,7 +79,10 @@ message TupleMessage2 {\n \n // Tuples exchanged between stream managers\n message TupleStreamMessage2 {\n+  // The src_task of this message\n+  required int32 src_task_id = 3;\n+  // This is actually the destination task_id\n   required int32 task_id = 1;\n   // serialized data\n   required bytes set = 2;\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/proto/stmgr.proto",
                "sha": "a7ab8ec257d42f7ce6f68f082c3585ff59584d66",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/proto/tuple.proto",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/proto/tuple.proto?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 1,
                "filename": "heron/proto/tuple.proto",
                "patch": "@@ -41,6 +41,7 @@ message HeronControlTupleSet {\n message HeronTupleSet {\n   optional HeronDataTupleSet data = 1;\n   optional HeronControlTupleSet control = 2;\n+  required int32 src_task_id = 3;\n }\n \n message HeronDataTupleSet2 {\n@@ -51,4 +52,5 @@ message HeronDataTupleSet2 {\n message HeronTupleSet2 {\n   optional HeronDataTupleSet2 data = 1;\n   optional HeronControlTupleSet control = 2;\n-}\n\\ No newline at end of file\n+  required int32 src_task_id = 3;\n+}",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/proto/tuple.proto",
                "sha": "d1003f3391fe4553df70b999bbb6733a22368671",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/executors/StreamExecutor.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/simulator/src/java/com/twitter/heron/simulator/executors/StreamExecutor.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 7,
                "filename": "heron/simulator/src/java/com/twitter/heron/simulator/executors/StreamExecutor.java",
                "patch": "@@ -161,11 +161,11 @@ public void handleInstanceExecutor() {\n         if (tupleSet.hasControl()) {\n           HeronTuples.HeronControlTupleSet c = tupleSet.getControl();\n           for (HeronTuples.AckTuple ack : c.getAcksList()) {\n-            copyControlOutBound(ack, true);\n+            copyControlOutBound(tupleSet.getSrcTaskId(), ack, true);\n           }\n \n           for (HeronTuples.AckTuple fail : c.getFailsList()) {\n-            copyControlOutBound(fail, false);\n+            copyControlOutBound(tupleSet.getSrcTaskId(), fail, false);\n           }\n         }\n       }\n@@ -193,7 +193,7 @@ protected void copyDataOutBound(int sourceTaskId,\n     boolean isAnchored = tuple.getRootsCount() > 0;\n \n     for (Integer outTask : outTasks) {\n-      long tupleKey = tupleCache.addDataTuple(outTask, streamId, tuple, isAnchored);\n+      long tupleKey = tupleCache.addDataTuple(sourceTaskId, outTask, streamId, tuple, isAnchored);\n       if (isAnchored) {\n         // Anchored tuple\n \n@@ -213,7 +213,7 @@ protected void copyDataOutBound(int sourceTaskId,\n                     setAckedtuple(tupleKey).\n                     build();\n \n-            tupleCache.addEmitTuple(rootId.getTaskid(), t);\n+            tupleCache.addEmitTuple(sourceTaskId, rootId.getTaskid(), t);\n           }\n         }\n       }\n@@ -223,7 +223,8 @@ protected void copyDataOutBound(int sourceTaskId,\n   }\n \n   // Process HeronAckTuple and insert it into cache\n-  protected void copyControlOutBound(HeronTuples.AckTuple control,\n+  protected void copyControlOutBound(int srcTaskId,\n+                                     HeronTuples.AckTuple control,\n                                      boolean isSuccess) {\n     for (HeronTuples.RootId rootId : control.getRootsList()) {\n       HeronTuples.AckTuple t =\n@@ -233,9 +234,9 @@ protected void copyControlOutBound(HeronTuples.AckTuple control,\n               build();\n \n       if (isSuccess) {\n-        tupleCache.addAckTuple(rootId.getTaskid(), t);\n+        tupleCache.addAckTuple(srcTaskId, rootId.getTaskid(), t);\n       } else {\n-        tupleCache.addFailTuple(rootId.getTaskid(), t);\n+        tupleCache.addFailTuple(srcTaskId, rootId.getTaskid(), t);\n       }\n     }\n   }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/executors/StreamExecutor.java",
                "sha": "211817402abc54090c1ba7bb98d63d627b260520",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltInstance.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltInstance.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 3,
                "filename": "heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltInstance.java",
                "patch": "@@ -50,7 +50,8 @@ public BoltInstance(PhysicalPlanHelper helper,\n   }\n \n   private void handleDataTuple(HeronTuples.HeronDataTuple dataTuple,\n-                               TopologyAPI.StreamId stream) {\n+                               TopologyAPI.StreamId stream,\n+                               int srcTaskId) {\n     long startTime = System.nanoTime();\n \n     List<Object> values = new ArrayList<>();\n@@ -60,7 +61,7 @@ private void handleDataTuple(HeronTuples.HeronDataTuple dataTuple,\n \n     // Decode the tuple\n     TupleImpl t = new TupleImpl(helper.getTopologyContext(), stream, dataTuple.getKey(),\n-        dataTuple.getRootsList(), values);\n+        dataTuple.getRootsList(), values, srcTaskId);\n \n     long deserializedTime = System.nanoTime();\n \n@@ -96,7 +97,7 @@ public void readTuplesAndExecute(Communicator<HeronTuples.HeronTupleSet> inQueue\n       TopologyAPI.StreamId stream = tuples.getData().getStream();\n \n       for (HeronTuples.HeronDataTuple dataTuple : tuples.getData().getTuplesList()) {\n-        handleDataTuple(dataTuple, stream);\n+        handleDataTuple(dataTuple, stream, tuples.getSrcTaskId());\n       }\n \n       // To avoid spending too much time",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/instance/BoltInstance.java",
                "sha": "230ebc6ef693cf8f211121e82f4c69ab4b6511b8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 2,
                "filename": "heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java",
                "patch": "@@ -15,6 +15,7 @@\n package com.twitter.heron.simulator.instance;\n \n import com.twitter.heron.common.basics.Communicator;\n+import com.twitter.heron.common.utils.misc.PhysicalPlanHelper;\n import com.twitter.heron.proto.system.HeronTuples;\n \n /**\n@@ -27,8 +28,8 @@\n  */\n public class OutgoingTupleCollection extends com.twitter.heron.instance.OutgoingTupleCollection {\n \n-  public OutgoingTupleCollection(String componentName,\n+  public OutgoingTupleCollection(PhysicalPlanHelper helper,\n                                  Communicator<HeronTuples.HeronTupleSet> outQueue) {\n-    super(componentName, outQueue);\n+    super(helper, outQueue);\n   }\n }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/instance/OutgoingTupleCollection.java",
                "sha": "5b6ee49268fdbe9abc96d0eacf5c2b0ffeef29d7",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/utils/TupleCache.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/simulator/src/java/com/twitter/heron/simulator/utils/TupleCache.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 13,
                "filename": "heron/simulator/src/java/com/twitter/heron/simulator/utils/TupleCache.java",
                "patch": "@@ -36,23 +36,24 @@ protected TupleList get(int destTaskId) {\n     return list;\n   }\n \n-  public long addDataTuple(int destTaskId,\n+  public long addDataTuple(int srcTaskId,\n+                           int destTaskId,\n                            TopologyAPI.StreamId streamId,\n                            HeronTuples.HeronDataTuple tuple,\n                            boolean isAnchored) {\n-    return get(destTaskId).addDataTuple(streamId, tuple, isAnchored);\n+    return get(destTaskId).addDataTuple(srcTaskId, streamId, tuple, isAnchored);\n   }\n \n-  public void addAckTuple(int taskId, HeronTuples.AckTuple tuple) {\n-    get(taskId).addAckTuple(tuple);\n+  public void addAckTuple(int srcTaskId, int taskId, HeronTuples.AckTuple tuple) {\n+    get(taskId).addAckTuple(srcTaskId, tuple);\n   }\n \n-  public void addFailTuple(int taskId, HeronTuples.AckTuple tuple) {\n-    get(taskId).addFailTuple(tuple);\n+  public void addFailTuple(int srcTaskId, int taskId, HeronTuples.AckTuple tuple) {\n+    get(taskId).addFailTuple(srcTaskId, tuple);\n   }\n \n-  public void addEmitTuple(int taskId, HeronTuples.AckTuple tuple) {\n-    get(taskId).addEmitTuple(tuple);\n+  public void addEmitTuple(int srcTaskId, int taskId, HeronTuples.AckTuple tuple) {\n+    get(taskId).addEmitTuple(srcTaskId, tuple);\n   }\n \n   // Construct a new Map from current cache\n@@ -87,19 +88,22 @@ public TupleList() {\n     }\n \n     // returns the tuple key used for XOR\n-    public long addDataTuple(TopologyAPI.StreamId streamId,\n+    public long addDataTuple(int srcTaskId,\n+                             TopologyAPI.StreamId streamId,\n                              HeronTuples.HeronDataTuple tuple,\n                              boolean isAnchored) {\n       if (current == null\n           || current.hasControl()\n+          || current.getSrcTaskId() != srcTaskId\n           || !current.getDataBuilder().getStream().getComponentName().equals(\n-              streamId.getComponentName())\n+          streamId.getComponentName())\n           || !current.getDataBuilder().getStream().getId().equals(streamId.getId())) {\n         if (current != null) {\n           tuples.add(current.build());\n         }\n         current = HeronTuples.HeronTupleSet.newBuilder();\n         current.getDataBuilder().setStream(streamId);\n+        current.setSrcTaskId(srcTaskId);\n       }\n \n       long tupleKey = -1;\n@@ -116,46 +120,52 @@ public long addDataTuple(TopologyAPI.StreamId streamId,\n       return tupleKey;\n     }\n \n-    public void addAckTuple(HeronTuples.AckTuple tuple) {\n+    public void addAckTuple(int srcTaskId, HeronTuples.AckTuple tuple) {\n       if (current == null\n           || current.hasData()\n+          || current.getSrcTaskId() != srcTaskId\n           || current.getControlBuilder().getFailsCount() > 0\n           || current.getControlBuilder().getEmitsCount() > 0) {\n         if (current != null) {\n           tuples.add(current.build());\n         }\n \n         current = HeronTuples.HeronTupleSet.newBuilder();\n+        current.setSrcTaskId(srcTaskId);\n       }\n \n       current.getControlBuilder().addAcks(tuple);\n     }\n \n-    public void addFailTuple(HeronTuples.AckTuple tuple) {\n+    public void addFailTuple(int srcTaskId, HeronTuples.AckTuple tuple) {\n       if (current == null\n           || current.hasData()\n+          || current.getSrcTaskId() != srcTaskId\n           || current.getControlBuilder().getAcksCount() > 0\n           || current.getControlBuilder().getEmitsCount() > 0) {\n         if (current != null) {\n           tuples.add(current.build());\n         }\n \n         current = HeronTuples.HeronTupleSet.newBuilder();\n+        current.setSrcTaskId(srcTaskId);\n       }\n \n       current.getControlBuilder().addFails(tuple);\n     }\n \n-    public void addEmitTuple(HeronTuples.AckTuple tuple) {\n+    public void addEmitTuple(int srcTaskId, HeronTuples.AckTuple tuple) {\n       if (current == null\n           || current.hasData()\n+          || current.getSrcTaskId() != srcTaskId\n           || current.getControlBuilder().getAcksCount() > 0\n           || current.getControlBuilder().getFailsCount() > 0) {\n         if (current != null) {\n           tuples.add(current.build());\n         }\n \n         current = HeronTuples.HeronTupleSet.newBuilder();\n+        current.setSrcTaskId(srcTaskId);\n       }\n \n       current.getControlBuilder().addEmits(tuple);",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/src/java/com/twitter/heron/simulator/utils/TupleCache.java",
                "sha": "dd8f58e80d531c6f211bb4b9d6c4cf45aaeea867",
                "status": "modified"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/tests/java/com/twitter/heron/simulator/utils/TupleCacheTest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/simulator/tests/java/com/twitter/heron/simulator/utils/TupleCacheTest.java?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 10,
                "filename": "heron/simulator/tests/java/com/twitter/heron/simulator/utils/TupleCacheTest.java",
                "patch": "@@ -35,6 +35,7 @@\n   public static final int N = 10;\n   public static final int REPEAT = 10;\n \n+  private static final int SRC_TASK_ID = 1;\n   private static List<Integer> destTaskIds;\n   private static HeronTuples.HeronDataTuple dataTuple;\n   private static HeronTuples.AckTuple ackTuple;\n@@ -85,11 +86,13 @@ public void testAddDataTupleBatch() throws Exception {\n     // Test for Batch should apply\n \n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addDataTuple(destTaskIds.get(i % destTaskIds.size()), stream0, dataTuple, true);\n+      tupleCache.addDataTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), stream0, dataTuple, true);\n     }\n \n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addDataTuple(destTaskIds.get(i % destTaskIds.size()), stream1, dataTuple, true);\n+      tupleCache.addDataTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), stream1, dataTuple, true);\n     }\n \n     Map<Integer, List<HeronTuples.HeronTupleSet>> cache = tupleCache.getCache();\n@@ -113,8 +116,10 @@ public void testAddDataTupleBatch() throws Exception {\n   public void testAddDataTupleNoBatch() throws Exception {\n     // Test for Batch should not apply\n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addDataTuple(destTaskIds.get(i % destTaskIds.size()), stream0, dataTuple, true);\n-      tupleCache.addDataTuple(destTaskIds.get(i % destTaskIds.size()), stream1, dataTuple, true);\n+      tupleCache.addDataTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), stream0, dataTuple, true);\n+      tupleCache.addDataTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), stream1, dataTuple, true);\n     }\n \n     Map<Integer, List<HeronTuples.HeronTupleSet>> cache = tupleCache.getCache();\n@@ -140,9 +145,12 @@ public void testAddAckTupleBatch() throws Exception {\n \n     // Test for Batch should apply\n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addAckTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n-      tupleCache.addFailTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n-      tupleCache.addEmitTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addAckTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addFailTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addEmitTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n     }\n \n     Map<Integer, List<HeronTuples.HeronTupleSet>> cache = tupleCache.getCache();\n@@ -161,15 +169,18 @@ public void testAddAckTupleBatch() throws Exception {\n   @Test\n   public void testAddAckTupleNoBatch() throws Exception {\n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addAckTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addAckTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n     }\n \n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addFailTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addFailTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n     }\n \n     for (int i = 0; i < N * REPEAT; i++) {\n-      tupleCache.addEmitTuple(destTaskIds.get(i % destTaskIds.size()), ackTuple);\n+      tupleCache.addEmitTuple(SRC_TASK_ID,\n+          destTaskIds.get(i % destTaskIds.size()), ackTuple);\n     }\n \n     Map<Integer, List<HeronTuples.HeronTupleSet>> cache = tupleCache.getCache();",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/simulator/tests/java/com/twitter/heron/simulator/utils/TupleCacheTest.java",
                "sha": "c30952af75a96e2fcf5f5582b7e630c4b4121f71",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/manager/stmgr.cpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/stmgr/src/cpp/manager/stmgr.cpp?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 9,
                "filename": "heron/stmgr/src/cpp/manager/stmgr.cpp",
                "patch": "@@ -554,13 +554,14 @@ void StMgr::SendInBound(sp_int32 _task_id, proto::system::HeronTupleSet2* _messa\n   }\n   if (_message->has_control()) {\n     // We got a bunch of acks/fails\n-    ProcessAcksAndFails(_task_id, _message->control());\n+    ProcessAcksAndFails(_message->src_task_id(), _task_id, _message->control());\n   }\n }\n \n-void StMgr::ProcessAcksAndFails(sp_int32 _task_id,\n+void StMgr::ProcessAcksAndFails(sp_int32 _src_task_id, sp_int32 _task_id,\n                                 const proto::system::HeronControlTupleSet& _control) {\n   current_control_tuple_set_.Clear();\n+  current_control_tuple_set_.set_src_task_id(_src_task_id);\n \n   // First go over emits. This makes sure that new emits makes\n   // a tuples stay alive before we process its acks\n@@ -653,10 +654,10 @@ void StMgr::HandleInstanceData(const sp_int32 _src_task_id, bool _local_spout,\n     proto::system::HeronControlTupleSet* c = _message->mutable_control();\n     CHECK_EQ(c->emits_size(), 0);\n     for (sp_int32 i = 0; i < c->acks_size(); ++i) {\n-      CopyControlOutBound(c->acks(i), false);\n+      CopyControlOutBound(_src_task_id, c->acks(i), false);\n     }\n     for (sp_int32 i = 0; i < c->fails_size(); ++i) {\n-      CopyControlOutBound(c->fails(i), true);\n+      CopyControlOutBound(_src_task_id, c->fails(i), true);\n     }\n   }\n }\n@@ -674,15 +675,16 @@ void StMgr::DrainInstanceData(sp_int32 _task_id, proto::system::HeronTupleSet2*\n   __global_protobuf_pool_release__(_tuple);\n }\n \n-void StMgr::CopyControlOutBound(const proto::system::AckTuple& _control, bool _is_fail) {\n+void StMgr::CopyControlOutBound(sp_int32 _src_task_id,\n+                                const proto::system::AckTuple& _control, bool _is_fail) {\n   for (sp_int32 i = 0; i < _control.roots_size(); ++i) {\n     proto::system::AckTuple t;\n     t.add_roots()->CopyFrom(_control.roots(i));\n     t.set_ackedtuple(_control.ackedtuple());\n     if (!_is_fail) {\n-      tuple_cache_->add_ack_tuple(_control.roots(i).taskid(), t);\n+      tuple_cache_->add_ack_tuple(_src_task_id, _control.roots(i).taskid(), t);\n     } else {\n-      tuple_cache_->add_fail_tuple(_control.roots(i).taskid(), t);\n+      tuple_cache_->add_fail_tuple(_src_task_id, _control.roots(i).taskid(), t);\n     }\n   }\n }\n@@ -693,7 +695,7 @@ void StMgr::CopyDataOutBound(sp_int32 _src_task_id, bool _local_spout,\n                              const std::vector<sp_int32>& _out_tasks) {\n   bool first_iteration = true;\n   for (auto& i : _out_tasks) {\n-    sp_int64 tuple_key = tuple_cache_->add_data_tuple(i, _streamid, _tuple);\n+    sp_int64 tuple_key = tuple_cache_->add_data_tuple(_src_task_id, i, _streamid, _tuple);\n     if (_tuple->roots_size() > 0) {\n       // Anchored tuple\n       if (_local_spout) {\n@@ -710,7 +712,7 @@ void StMgr::CopyDataOutBound(sp_int32 _src_task_id, bool _local_spout,\n           proto::system::AckTuple t;\n           t.add_roots()->CopyFrom(_tuple->roots(i));\n           t.set_ackedtuple(tuple_key);\n-          tuple_cache_->add_emit_tuple(_tuple->roots(i).taskid(), t);\n+          tuple_cache_->add_emit_tuple(_src_task_id, _tuple->roots(i).taskid(), t);\n         }\n       }\n     }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/manager/stmgr.cpp",
                "sha": "e8d58f94362fc9a363bb1f911f33723cd27b15c9",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/manager/stmgr.h",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/stmgr/src/cpp/manager/stmgr.h?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 2,
                "filename": "heron/stmgr/src/cpp/manager/stmgr.h",
                "patch": "@@ -99,12 +99,14 @@ class StMgr {\n   void CleanupXorManagers();\n \n   void SendInBound(sp_int32 _task_id, proto::system::HeronTupleSet2* _message);\n-  void ProcessAcksAndFails(sp_int32 _task_id, const proto::system::HeronControlTupleSet& _control);\n+  void ProcessAcksAndFails(sp_int32 _src_task_id,\n+                           sp_int32 _task_id, const proto::system::HeronControlTupleSet& _control);\n   void CopyDataOutBound(sp_int32 _src_task_id, bool _local_spout,\n                         const proto::api::StreamId& _streamid,\n                         proto::system::HeronDataTuple* _tuple,\n                         const std::vector<sp_int32>& _out_tasks);\n-  void CopyControlOutBound(const proto::system::AckTuple& _control, bool _is_fail);\n+  void CopyControlOutBound(sp_int32 _src_task_id,\n+                           const proto::system::AckTuple& _control, bool _is_fail);\n \n   sp_int32 ExtractTopologyTimeout(const proto::api::Topology& _topology);\n ",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/manager/stmgr.h",
                "sha": "80aa2c7641cb5eae11c94e2949349e911ffd0bc9",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/util/tuple-cache.cpp",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/stmgr/src/cpp/util/tuple-cache.cpp?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 16,
                "filename": "heron/stmgr/src/cpp/util/tuple-cache.cpp",
                "patch": "@@ -49,29 +49,34 @@ TupleCache::~TupleCache() {\n   }\n }\n \n-sp_int64 TupleCache::add_data_tuple(sp_int32 _task_id, const proto::api::StreamId& _streamid,\n+sp_int64 TupleCache::add_data_tuple(sp_int32 _src_task_id,\n+                                    sp_int32 _task_id, const proto::api::StreamId& _streamid,\n                                     proto::system::HeronDataTuple* _tuple) {\n   if (total_size_ >= drain_threshold_bytes_) drain_impl();\n   TupleList* l = get(_task_id);\n-  return l->add_data_tuple(_streamid, _tuple, &total_size_, &tuples_cache_max_tuple_size_);\n+  return l->add_data_tuple(_src_task_id, _streamid, _tuple, &total_size_,\n+                           &tuples_cache_max_tuple_size_);\n }\n \n-void TupleCache::add_ack_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n+void TupleCache::add_ack_tuple(sp_int32 _src_task_id,\n+                               sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n   if (total_size_ >= drain_threshold_bytes_) drain_impl();\n   TupleList* l = get(_task_id);\n-  return l->add_ack_tuple(_tuple, &total_size_);\n+  return l->add_ack_tuple(_src_task_id, _tuple, &total_size_);\n }\n \n-void TupleCache::add_fail_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n+void TupleCache::add_fail_tuple(sp_int32 _src_task_id,\n+                                sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n   if (total_size_ >= drain_threshold_bytes_) drain_impl();\n   TupleList* l = get(_task_id);\n-  return l->add_fail_tuple(_tuple, &total_size_);\n+  return l->add_fail_tuple(_src_task_id, _tuple, &total_size_);\n }\n \n-void TupleCache::add_emit_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n+void TupleCache::add_emit_tuple(sp_int32 _src_task_id,\n+                                sp_int32 _task_id, const proto::system::AckTuple& _tuple) {\n   if (total_size_ >= drain_threshold_bytes_) drain_impl();\n   TupleList* l = get(_task_id);\n-  return l->add_emit_tuple(_tuple, &total_size_);\n+  return l->add_emit_tuple(_src_task_id, _tuple, &total_size_);\n }\n \n TupleCache::TupleList* TupleCache::get(sp_int32 _task_id) {\n@@ -105,18 +110,21 @@ TupleCache::TupleList::~TupleList() {\n   CHECK(tuples_.empty());\n }\n \n-sp_int64 TupleCache::TupleList::add_data_tuple(const proto::api::StreamId& _streamid,\n+sp_int64 TupleCache::TupleList::add_data_tuple(sp_int32 _src_task_id,\n+                                               const proto::api::StreamId& _streamid,\n                                                proto::system::HeronDataTuple* _tuple,\n                                                sp_uint64* _total_size,\n                                                sp_uint64* _tuples_cache_max_tuple_size) {\n-  if (!current_ || current_->has_control() || current_->data().stream().id() != _streamid.id() ||\n+  if (!current_ || current_->has_control() || current_->src_task_id() != _src_task_id ||\n+      current_->data().stream().id() != _streamid.id() ||\n       current_->data().stream().component_name() != _streamid.component_name() ||\n       current_size_ > *_tuples_cache_max_tuple_size) {\n     if (current_) {\n       tuples_.push_front(current_);\n     }\n     current_ = acquire_clean_set();\n     current_->mutable_data()->mutable_stream()->MergeFrom(_streamid);\n+    current_->set_src_task_id(_src_task_id);\n     current_size_ = 0;\n   }\n \n@@ -136,13 +144,16 @@ sp_int64 TupleCache::TupleList::add_data_tuple(const proto::api::StreamId& _stre\n   return tuple_key;\n }\n \n-void TupleCache::TupleList::add_ack_tuple(const proto::system::AckTuple& _tuple,\n+void TupleCache::TupleList::add_ack_tuple(sp_int32 _src_task_id,\n+                                          const proto::system::AckTuple& _tuple,\n                                           sp_uint64* _total_size) {\n-  if (!current_ || current_->has_data() || current_->control().emits_size() > 0) {\n+  if (!current_ || current_->src_task_id() != _src_task_id ||\n+      current_->has_data() || current_->control().emits_size() > 0) {\n     if (current_) {\n       tuples_.push_front(current_);\n     }\n     current_ = acquire_clean_set();\n+    current_->set_src_task_id(_src_task_id);\n     current_size_ = 0;\n   }\n   sp_int64 tuple_size = _tuple.ByteSize();\n@@ -151,13 +162,16 @@ void TupleCache::TupleList::add_ack_tuple(const proto::system::AckTuple& _tuple,\n   current_->mutable_control()->add_acks()->CopyFrom(_tuple);\n }\n \n-void TupleCache::TupleList::add_fail_tuple(const proto::system::AckTuple& _tuple,\n+void TupleCache::TupleList::add_fail_tuple(sp_int32 _src_task_id,\n+                                           const proto::system::AckTuple& _tuple,\n                                            sp_uint64* _total_size) {\n-  if (!current_ || current_->has_data() || current_->control().emits_size() > 0) {\n+  if (!current_ || current_->src_task_id() != _src_task_id ||\n+      current_->has_data() || current_->control().emits_size() > 0) {\n     if (current_) {\n       tuples_.push_front(current_);\n     }\n     current_ = acquire_clean_set();\n+    current_->set_src_task_id(_src_task_id);\n     current_size_ = 0;\n   }\n   sp_int64 tuple_size = _tuple.ByteSize();\n@@ -166,14 +180,17 @@ void TupleCache::TupleList::add_fail_tuple(const proto::system::AckTuple& _tuple\n   current_->mutable_control()->add_fails()->CopyFrom(_tuple);\n }\n \n-void TupleCache::TupleList::add_emit_tuple(const proto::system::AckTuple& _tuple,\n+void TupleCache::TupleList::add_emit_tuple(sp_int32 _src_task_id,\n+                                           const proto::system::AckTuple& _tuple,\n                                            sp_uint64* _total_size) {\n-  if (!current_ || current_->has_data() || current_->control().acks_size() > 0 ||\n+  if (!current_ || current_->src_task_id() != _src_task_id ||\n+      current_->has_data() || current_->control().acks_size() > 0 ||\n       current_->control().fails_size() > 0) {\n     if (current_) {\n       tuples_.push_front(current_);\n     }\n     current_ = acquire_clean_set();\n+    current_->set_src_task_id(_src_task_id);\n     current_size_ = 0;\n   }\n   sp_int64 tuple_size = _tuple.ByteSize();",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/util/tuple-cache.cpp",
                "sha": "4f25e8b54944430bd98d1398c1ffd05f499e0260",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/util/tuple-cache.h",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/stmgr/src/cpp/util/tuple-cache.h?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 8,
                "filename": "heron/stmgr/src/cpp/util/tuple-cache.h",
                "patch": "@@ -40,11 +40,15 @@ class TupleCache {\n   }\n \n   // returns tuple key\n-  sp_int64 add_data_tuple(sp_int32 _task_id, const proto::api::StreamId& _streamid,\n+  sp_int64 add_data_tuple(sp_int32 _src_task_id,\n+                          sp_int32 _task_id, const proto::api::StreamId& _streamid,\n                           proto::system::HeronDataTuple* _tuple);\n-  void add_ack_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n-  void add_fail_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n-  void add_emit_tuple(sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n+  void add_ack_tuple(sp_int32 _src_task_id,\n+                     sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n+  void add_fail_tuple(sp_int32 _src_task_id,\n+                      sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n+  void add_emit_tuple(sp_int32 _src_task_id,\n+                      sp_int32 _task_id, const proto::system::AckTuple& _tuple);\n \n  private:\n   void drain(EventLoop::Status);\n@@ -58,12 +62,16 @@ class TupleCache {\n     TupleList();\n     ~TupleList();\n \n-    sp_int64 add_data_tuple(const proto::api::StreamId& _streamid,\n+    sp_int64 add_data_tuple(sp_int32 _src_task_id,\n+                            const proto::api::StreamId& _streamid,\n                             proto::system::HeronDataTuple* _tuple, sp_uint64* total_size_,\n                             sp_uint64* _tuples_cache_max_tuple_size);\n-    void add_ack_tuple(const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n-    void add_fail_tuple(const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n-    void add_emit_tuple(const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n+    void add_ack_tuple(sp_int32 _src_task_id,\n+                       const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n+    void add_fail_tuple(sp_int32 _src_task_id,\n+                        const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n+    void add_emit_tuple(sp_int32 _src_task_id,\n+                        const proto::system::AckTuple& _tuple, sp_uint64* total_size_);\n \n     void drain(sp_int32 _task_id,\n                std::function<void(sp_int32, proto::system::HeronTupleSet2*)> _drainer);",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/src/cpp/util/tuple-cache.h",
                "sha": "1c31308cba67a496e8252215d78956f682fcf577",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/incubator-heron/blob/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/tests/cpp/util/tuple-cache_unittest.cpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/incubator-heron/contents/heron/stmgr/tests/cpp/util/tuple-cache_unittest.cpp?ref=c4fe05fa97b6ada6000f008c98fdca40ff759d34",
                "deletions": 10,
                "filename": "heron/stmgr/tests/cpp/util/tuple-cache_unittest.cpp",
                "patch": "@@ -111,7 +111,7 @@ TEST(TupleCache, test_simple_data_drain) {\n   for (sp_int32 i = 0; i < data_tuples_count; ++i) {\n     heron::proto::system::HeronDataTuple tuple;\n     tuple.set_key(RandUtils::lrand());\n-    g->add_data_tuple(1, dummy, &tuple);\n+    g->add_data_tuple(1, 1, dummy, &tuple);\n   }\n \n   // 300 milliseconds second\n@@ -150,17 +150,17 @@ TEST(TupleCache, test_data_ack_fail_mix) {\n     if (i < data_tuples_count) {\n       heron::proto::system::HeronDataTuple tuple;\n       tuple.set_key(RandUtils::lrand());\n-      g->add_data_tuple(1, dummy, &tuple);\n+      g->add_data_tuple(1, 1, dummy, &tuple);\n     }\n     if (i < ack_tuples_count) {\n       heron::proto::system::AckTuple tuple;\n       tuple.set_ackedtuple(RandUtils::lrand());\n-      g->add_ack_tuple(1, tuple);\n+      g->add_ack_tuple(1, 1, tuple);\n     }\n     if (i < fail_tuples_count) {\n       heron::proto::system::AckTuple tuple;\n       tuple.set_ackedtuple(RandUtils::lrand());\n-      g->add_fail_tuple(1, tuple);\n+      g->add_fail_tuple(1, 1, tuple);\n     }\n   }\n \n@@ -207,27 +207,27 @@ TEST(TupleCache, test_different_stream_mix) {\n       heron::proto::system::HeronDataTuple tuple;\n       tuple.set_key(RandUtils::lrand());\n       if (i % 2 == 0) {\n-        g->add_data_tuple(1, stream1, &tuple);\n+        g->add_data_tuple(1, 1, stream1, &tuple);\n       } else {\n-        g->add_data_tuple(2, stream2, &tuple);\n+        g->add_data_tuple(1, 2, stream2, &tuple);\n       }\n     }\n     if (i < ack_tuples_count) {\n       heron::proto::system::AckTuple tuple;\n       tuple.set_ackedtuple(RandUtils::lrand());\n       if (i % 2 == 0) {\n-        g->add_ack_tuple(1, tuple);\n+        g->add_ack_tuple(1, 1, tuple);\n       } else {\n-        g->add_ack_tuple(2, tuple);\n+        g->add_ack_tuple(1, 2, tuple);\n       }\n     }\n     if (i < fail_tuples_count) {\n       heron::proto::system::AckTuple tuple;\n       tuple.set_ackedtuple(RandUtils::lrand());\n       if (i % 2 == 0) {\n-        g->add_fail_tuple(1, tuple);\n+        g->add_fail_tuple(1, 1, tuple);\n       } else {\n-        g->add_fail_tuple(2, tuple);\n+        g->add_fail_tuple(1, 2, tuple);\n       }\n     }\n   }",
                "raw_url": "https://github.com/apache/incubator-heron/raw/c4fe05fa97b6ada6000f008c98fdca40ff759d34/heron/stmgr/tests/cpp/util/tuple-cache_unittest.cpp",
                "sha": "920fd8beb4ce6477f8d454e15aec597155ff1bb1",
                "status": "modified"
            }
        ],
        "message": "Add support for src task id in the storm api (#1938)\n\n* Added src task id information of tuples flowing between stmgrs\r\nand between stmgrs and instance\r\n\r\n* StreamManager changes to support src_task_id.\r\nWe now break tuple batches based on src_task_ids\r\n\r\n* Heron-instance changes to support src_task_id.\r\nIt can pass the compliation. But unit tests will fail.\r\nHeron-simulator has not been changed yet. So src_task_id will not work in heron-simulator.\r\n\r\n* Fix a NPE in heron-instance\r\n\r\n* Added the support of src_task_id in heron-simulator.\r\nFixed all unit tests and coding style.\r\n\r\n* Set src_task_id in python instance as well",
        "parent": "https://github.com/apache/incubator-heron/commit/1ca533bfe8a0b520efd9b60a474580e5d27fe4af",
        "patched_files": [
            "SpoutInstance.java",
            "stmgr.cpp",
            "BoltInstance.java",
            "StreamExecutor.java",
            "AbstractOutputCollector.java",
            "TupleImpl.java",
            "TupleCache.java",
            "tuple.proto",
            "stmgr.h",
            "tuple-cache.cpp",
            "StreamManagerClient.java",
            "st_heron_instance.py",
            "stmgr.proto",
            "tuple-cache.h",
            "OutgoingTupleCollection.java",
            "tuple-cache_unittest.cpp"
        ],
        "repo": "incubator-heron",
        "unit_tests": [
            "BoltInstanceTest.java",
            "SpoutInstanceTest.java",
            "TupleCacheTest.java",
            "HandleReadTest.java"
        ]
    }
}