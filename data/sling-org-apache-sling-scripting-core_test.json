{
    "sling-org-apache-sling-scripting-core_11d59c1": {
        "repo": "sling-org-apache-sling-scripting-core",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* add else case/logging to the script engine registration loops",
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/11d59c1d8dba37fc4090057ca96b11f0853374a7",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/7114133f465b608337550aa64a189cf15aa8967f",
        "bug_id": "sling-org-apache-sling-scripting-core_11d59c1",
        "file": [
            {
                "sha": "fe7b425351a91c3f928ea46fa49fca0af194c746",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/11d59c1d8dba37fc4090057ca96b11f0853374a7/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/11d59c1d8dba37fc4090057ca96b11f0853374a7/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=11d59c1d8dba37fc4090057ca96b11f0853374a7",
                "patch": "@@ -295,16 +295,22 @@ private void registerAssociations(ScriptEngineFactory factory) {\n         for (String extension : factory.getExtensions()) {\n             if (extension != null && !extension.isEmpty()) {\n                 internalManager.registerEngineExtension(extension, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null extension for script engine factory {}\", factory.getEngineName());\n             }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n             if (mimeType != null && !mimeType.isEmpty()) {\n                 internalManager.registerEngineMimeType(mimeType, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}\", factory.getEngineName());\n             }\n         }\n         for (String name : factory.getNames()) {\n             if (name != null && !name.isEmpty()) {\n                 internalManager.registerEngineName(name, factory);\n+            } else {\n+                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}\", factory.getEngineName());\n             }\n         }\n     }",
                "deletions": 0
            }
        ],
        "patched_files": [
            "SlingScriptEngineManager.java"
        ],
        "unit_tests": [
            "SlingScriptEngineManagerTest.java"
        ]
    },
    "sling-org-apache-sling-scripting-core_1b5b0f1": {
        "repo": "sling-org-apache-sling-scripting-core",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* corrected SlingScriptEngineManagerTest.testOSGiRegisteredFactoriesDifferentServiceRanking",
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/1b5b0f13ac8190bb02be6c3bc6018e696e20b355",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/11d59c1d8dba37fc4090057ca96b11f0853374a7",
        "bug_id": "sling-org-apache-sling-scripting-core_1b5b0f1",
        "file": [
            {
                "sha": "14cb13a78d869b58d492c66053b8fead1e72f250",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=1b5b0f13ac8190bb02be6c3bc6018e696e20b355",
                "patch": "@@ -296,21 +296,21 @@ private void registerAssociations(ScriptEngineFactory factory) {\n             if (extension != null && !extension.isEmpty()) {\n                 internalManager.registerEngineExtension(extension, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null extension for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null extension for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n             if (mimeType != null && !mimeType.isEmpty()) {\n                 internalManager.registerEngineMimeType(mimeType, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null mime type for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n         for (String name : factory.getNames()) {\n             if (name != null && !name.isEmpty()) {\n                 internalManager.registerEngineName(name, factory);\n             } else {\n-                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}\", factory.getEngineName());\n+                LOG.warn(\"Could not register an empty or null engine name for script engine factory {}.\", factory.getEngineName());\n             }\n         }\n     }",
                "deletions": 3
            },
            {
                "sha": "4f28324e7382f9c8ae428ea95fde6a686ee5ac59",
                "filename": "src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/1b5b0f13ac8190bb02be6c3bc6018e696e20b355/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "status": "modified",
                "changes": 57,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java?ref=1b5b0f13ac8190bb02be6c3bc6018e696e20b355",
                "patch": "@@ -40,8 +40,6 @@\n import org.junit.Before;\n import org.junit.Rule;\n import org.junit.Test;\n-import org.mockito.invocation.InvocationOnMock;\n-import org.mockito.stubbing.Answer;\n import org.osgi.framework.Bundle;\n import org.osgi.framework.BundleEvent;\n import org.osgi.framework.Constants;\n@@ -75,17 +73,15 @@ public void testPlatformScriptEngines() {\n         int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactory registered.\", expectedScriptEngineFactories, scriptEngineManager\n-                    .getEngineFactories().size());\n-        }\n+        assertEquals(\"The ScriptEngineManager should have had \" + jvmProvidedScriptEngineFactoryCount + \" ScriptEngineFactory registered.\", jvmProvidedScriptEngineFactoryCount, scriptEngineManager.getEngineFactories().size());\n     }\n \n     @Test\n     public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exception {\n+        int numberOfOSGiRegisteredFactories = 2;\n         int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n-        int expectedEvents = jvmProvidedScriptEngineFactoryCount + 1;\n+        // we register 2 factories, then unregister 1 of them\n+        int expectedEvents = 3;\n         CountDownLatch latch = new CountDownLatch(expectedEvents);\n         TestEventHandler eventHandler = new TestEventHandler\n                 (latch, \"org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager/UPDATED\");\n@@ -113,24 +109,20 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n         List<ScriptEngineFactory> factories = scriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 2;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(f1.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount + 1).getEngineName());\n-        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        int expectedScriptEngineFactories = numberOfOSGiRegisteredFactories + jvmProvidedScriptEngineFactoryCount;\n+        assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(f1.getEngineName(), factories.get(expectedScriptEngineFactories - 1).getEngineName());\n+        assertEquals(f2.getEngineName(), factories.get(expectedScriptEngineFactories - 2).getEngineName());\n \n         SlingScriptEngineManager slingScriptEngineManager = context.getService(SlingScriptEngineManager.class);\n         assertEquals(2, slingScriptEngineManager.getProperties(f1).get(Constants.SERVICE_RANKING));\n \n         f1SR.unregister();\n+        expectedScriptEngineFactories--;\n \n         factories = scriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n-            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(f2.getEngineName(), factories.get(expectedScriptEngineFactories - 1).getEngineName());\n \n         assertEquals(f2, scriptEngineManager.getEngineByName(\"f2\").getFactory());\n         assertEquals(f2, scriptEngineManager.getEngineByExtension(\"f2\").getFactory());\n@@ -178,20 +170,16 @@ public void testBundledScriptEngineFactory() throws Exception {\n         assertNotNull(\"Expected that the SlingScriptEngineManager would already be registered.\", slingScriptEngineManager);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         List<ScriptEngineFactory> factories = slingScriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n-            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        assertEquals(\"Dummy Scripting Engine\", factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n+        int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+        assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n+        assertEquals(\"Dummy Scripting Engine\", factories.get(expectedScriptEngineFactories - 1).getEngineName());\n \n         bundleEvent = new BundleEvent(BundleEvent.STOPPED, bundle);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n+        expectedScriptEngineFactories--;\n+\n         factories = slingScriptEngineManager.getEngineFactories();\n-        {\n-            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n-            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n-        }\n-        //assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n+        assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\", slingScriptEngineManager\n                 .getEngineByExtension(\"dummy\"));\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\",\n@@ -230,16 +218,9 @@ private ScriptEngineFactory mockScriptEngineFactory(String engineName, String en\n     private File createFactoryFile() throws IOException {\n         File tempFile = File.createTempFile(\"scriptEngine\", \"tmp\");\n         tempFile.deleteOnExit();\n-\n-        FileOutputStream fos = null;\n-        try {\n-            fos = new FileOutputStream(tempFile);\n+        try (FileOutputStream fos = new FileOutputStream(tempFile)) {\n             fos.write(\"#I'm a test-comment\\n\".getBytes());\n             fos.write(SCRIPT_ENGINE_FACTORY.getName().getBytes());\n-        } finally {\n-            if (fos != null) {\n-                fos.close();\n-            }\n         }\n         return tempFile;\n     }\n@@ -251,7 +232,7 @@ private File createFactoryFile() throws IOException {\n         CountDownLatch latch;\n         int processedEvents = 0;\n \n-        public TestEventHandler(CountDownLatch latch, String topic) {\n+        TestEventHandler(CountDownLatch latch, String topic) {\n             this.topic = topic;\n             this.latch = latch;\n         }",
                "deletions": 38
            }
        ],
        "patched_files": [
            "SlingScriptEngineManager.java"
        ],
        "unit_tests": [
            "SlingScriptEngineManagerTest.java"
        ]
    },
    "sling-org-apache-sling-scripting-core_7114133": {
        "repo": "sling-org-apache-sling-scripting-core",
        "message": "SLING-8425 - NPE in SlingScriptEngineManager when Sling is run on GraalVM\n\n* fix NPE on GraalVM",
        "commit": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/7114133f465b608337550aa64a189cf15aa8967f",
        "parent": "https://github.com/apache/sling-org-apache-sling-scripting-core/commit/8e32b80a6dcfa0ea32da7e7f9c40f9018033940f",
        "bug_id": "sling-org-apache-sling-scripting-core_7114133",
        "file": [
            {
                "sha": "b5f800ab007d6b1e5deb620c8890229022880798",
                "filename": "src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/7114133f465b608337550aa64a189cf15aa8967f/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/7114133f465b608337550aa64a189cf15aa8967f/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/main/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager.java?ref=7114133f465b608337550aa64a189cf15aa8967f",
                "patch": "@@ -293,13 +293,19 @@ private ScriptEngineManager getInternalScriptEngineManager() {\n \n     private void registerAssociations(ScriptEngineFactory factory) {\n         for (String extension : factory.getExtensions()) {\n-            internalManager.registerEngineExtension(extension, factory);\n+            if (extension != null && !extension.isEmpty()) {\n+                internalManager.registerEngineExtension(extension, factory);\n+            }\n         }\n         for (String mimeType : factory.getMimeTypes()) {\n-            internalManager.registerEngineMimeType(mimeType, factory);\n+            if (mimeType != null && !mimeType.isEmpty()) {\n+                internalManager.registerEngineMimeType(mimeType, factory);\n+            }\n         }\n         for (String name : factory.getNames()) {\n-            internalManager.registerEngineName(name, factory);\n+            if (name != null && !name.isEmpty()) {\n+                internalManager.registerEngineName(name, factory);\n+            }\n         }\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "e737ede420c72fd052fdc0b6f26986094ec744c8",
                "filename": "src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/blob/7114133f465b608337550aa64a189cf15aa8967f/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-scripting-core/raw/7114133f465b608337550aa64a189cf15aa8967f/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java",
                "status": "modified",
                "changes": 53,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-scripting-core/contents/src/test/java/org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManagerTest.java?ref=7114133f465b608337550aa64a189cf15aa8967f",
                "patch": "@@ -72,15 +72,20 @@ public void setUp() {\n \n     @Test\n     public void testPlatformScriptEngines() {\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n-        assertEquals(\"The ScriptEngineManager should have had 1 ScriptEngineFactory registered.\", 1, scriptEngineManager\n-                .getEngineFactories().size());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactory registered.\", expectedScriptEngineFactories, scriptEngineManager\n+                    .getEngineFactories().size());\n+        }\n     }\n \n     @Test\n     public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exception {\n-        int expectedEvents = 3;\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n+        int expectedEvents = jvmProvidedScriptEngineFactoryCount + 1;\n         CountDownLatch latch = new CountDownLatch(expectedEvents);\n         TestEventHandler eventHandler = new TestEventHandler\n                 (latch, \"org/apache/sling/scripting/core/impl/jsr223/SlingScriptEngineManager/UPDATED\");\n@@ -108,18 +113,24 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n         ScriptEngineManager scriptEngineManager = context.getService(ScriptEngineManager.class);\n         assertNotNull(\"Expected a ScriptEngineManager would be already registered.\", scriptEngineManager);\n         List<ScriptEngineFactory> factories = scriptEngineManager.getEngineFactories();\n-        assertEquals(\"The ScriptEngineManager should have had 3 ScriptEngineFactories registered.\", 3, factories.size());\n-        assertEquals(f1.getEngineName(), factories.get(2).getEngineName());\n-        assertEquals(f2.getEngineName(), factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 2;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(f1.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount + 1).getEngineName());\n+        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         SlingScriptEngineManager slingScriptEngineManager = context.getService(SlingScriptEngineManager.class);\n         assertEquals(2, slingScriptEngineManager.getProperties(f1).get(Constants.SERVICE_RANKING));\n \n         f1SR.unregister();\n \n         factories = scriptEngineManager.getEngineFactories();\n-        assertEquals(\"The ScriptEngineManager should have had 2 ScriptEngineFactories registered.\", 2, factories.size());\n-        assertEquals(f2.getEngineName(), factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+            assertEquals(\"The ScriptEngineManager should have had \" + expectedScriptEngineFactories + \" ScriptEngineFactories registered.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(f2.getEngineName(), factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         assertEquals(f2, scriptEngineManager.getEngineByName(\"f2\").getFactory());\n         assertEquals(f2, scriptEngineManager.getEngineByExtension(\"f2\").getFactory());\n@@ -138,6 +149,7 @@ public void testOSGiRegisteredFactoriesDifferentServiceRanking() throws Exceptio\n \n     @Test\n     public void testBundledScriptEngineFactory() throws Exception {\n+        int jvmProvidedScriptEngineFactoryCount = jvmProvidedScriptEngineFactoryCount();\n         final URL url = createFactoryFile().toURI().toURL();\n         Bundle bundle = mock(Bundle.class);\n         BundleWiring wiring = mock(BundleWiring.class);\n@@ -166,14 +178,20 @@ public void testBundledScriptEngineFactory() throws Exception {\n         assertNotNull(\"Expected that the SlingScriptEngineManager would already be registered.\", slingScriptEngineManager);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         List<ScriptEngineFactory> factories = slingScriptEngineManager.getEngineFactories();\n-        assertEquals(\"Expected 2 ScriptEngineFactories.\", 2, factories.size());\n-        assertEquals(\"Dummy Scripting Engine\", factories.get(1).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount + 1;\n+            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactories.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        assertEquals(\"Dummy Scripting Engine\", factories.get(jvmProvidedScriptEngineFactoryCount).getEngineName());\n \n         bundleEvent = new BundleEvent(BundleEvent.STOPPED, bundle);\n         slingScriptEngineManager.bundleChanged(bundleEvent);\n         factories = slingScriptEngineManager.getEngineFactories();\n-        assertEquals(\"Expected 1 ScriptEngineFactory.\", 1, factories.size());\n-        assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n+        {\n+            int expectedScriptEngineFactories = jvmProvidedScriptEngineFactoryCount;\n+            assertEquals(\"Expected \" + expectedScriptEngineFactories + \" ScriptEngineFactory.\", expectedScriptEngineFactories, factories.size());\n+        }\n+        //assertEquals(\"Oracle Nashorn\", factories.get(0).getEngineName());\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\", slingScriptEngineManager\n                 .getEngineByExtension(\"dummy\"));\n         assertNull(\"Did not expect references to the already unregistered DummyScriptEngineFactory\",\n@@ -182,6 +200,17 @@ public void testBundledScriptEngineFactory() throws Exception {\n                 slingScriptEngineManager.getEngineByName(\"Dummy\"));\n     }\n \n+    private int jvmProvidedScriptEngineFactoryCount() {\n+        ClassLoader loader = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Thread.currentThread().setContextClassLoader(null);\n+            return new ScriptEngineManager(ClassLoader.getSystemClassLoader()).getEngineFactories().size();\n+        }\n+        finally {\n+            Thread.currentThread().setContextClassLoader(loader);\n+        }\n+    }\n+\n     private ScriptEngineFactory mockScriptEngineFactory(String engineName, String engineVersion, List<String> extensions, String\n             languageName, String languageVersion, List<String> mimeTypes) {\n         ScriptEngineFactory factory = mock(ScriptEngineFactory.class);",
                "deletions": 12
            }
        ],
        "patched_files": [
            "SlingScriptEngineManager.java"
        ],
        "unit_tests": [
            "SlingScriptEngineManagerTest.java"
        ]
    }
}