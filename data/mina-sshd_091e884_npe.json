[
    {
        "repo": "mina-sshd",
        "commit": "https://github.com/apache/mina-sshd/commit/091e8840c64a6f11d9845dcea3613bb1261d8c44",
        "bug_id": "mina-sshd_091e884",
        "message": "SSHD-44: NPE in ScpCommand and improvements to ScpCommandFactory.createCommand\n\ngit-svn-id: https://svn.apache.org/repos/asf/mina/sshd/trunk@830479 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/mina-sshd/commit/b198a7b50e094bff3886f59ba7431aa0ac4faa10",
        "patched_files": [
            "ScpCommandFactory.java",
            "ChannelSession.java",
            "ScpCommand.java",
            "CommandFactory.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 8,
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "deletions": 1,
                "sha": "918c3189b351329083fac2b7a25324c2e8e67752",
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java",
                "patch": "@@ -101,12 +101,19 @@\n     public interface ExitCallback {\n \n         /**\n-         * Informs the SSH server that the shell has exited\n+         * Informs the SSH client/server that the shell has exited\n          *\n          * @param exitValue the exit value\n          */\n         void onExit(int exitValue);\n \n+        /**\n+         * Informs the SSH client/server that the shell has exited\n+         *\n+         * @param exitValue the exit value\n+         * @param exitMessage exit value description\n+         */\n+        void onExit(int exitValue, String exitMessage);\n     }\n \n }",
                "changes": 9
            },
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "deletions": 1,
                "sha": "ead4ae056320c58f4ebd6ab9c1f3bba9565a35ee",
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
                "patch": "@@ -474,14 +474,20 @@ protected int getPtyModeValue(PtyMode mode) {\n     }\n \n     protected boolean handleExec(Buffer buffer) throws IOException {\n+        CommandFactory.Command command;\n         boolean wantReply = buffer.getBoolean();\n         String commandLine = buffer.getString();\n \n         if (((ServerSession) session).getServerFactoryManager().getCommandFactory() == null) {\n             return false;\n         }\n \n-        CommandFactory.Command command = ((ServerSession) session).getServerFactoryManager().getCommandFactory().createCommand(commandLine);\n+        try {\n+            command = ((ServerSession) session).getServerFactoryManager().getCommandFactory().createCommand(commandLine);\n+        } catch (IllegalArgumentException iae) {\n+            // TODO: Shouldn't we log errors on the server side?\n+            return false;\n+        }\n         // If the command wants to be aware of the session, let's do that\n         if (command instanceof CommandFactory.SessionAware) {\n             ((CommandFactory.SessionAware) command).setSession((ServerSession) session);\n@@ -505,6 +511,9 @@ public void onExit(int exitValue) {\n                     log.info(\"Error closing shell\", e);\n                 }\n             }\n+            public void onExit(int exitValue, String exitMessage) {\n+                onExit(exitValue);\n+            }\n         });\n \n         if (wantReply) {",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 12,
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "deletions": 3,
                "sha": "1c0c4fe6194da162dc04e5d00ba2d741e2d9c2ba",
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
                "patch": "@@ -41,6 +41,8 @@\n public class ScpCommand implements CommandFactory.Command, Runnable {\n \n     private static final Logger log = LoggerFactory.getLogger(ScpCommand.class);\n+    private static final int OK = 0;\n+    private static final int ERROR = 2;\n \n     private boolean optR;\n     private boolean optT;\n@@ -116,6 +118,9 @@ public void start() throws IOException {\n     }\n \n     public void run() {\n+        int exitValue = OK;\n+        String exitMessage = null;\n+        \n         try {\n             if (optT && !optR) {\n                 ack();\n@@ -143,16 +148,20 @@ public void run() {\n             }\n         } catch (IOException e) {\n             try {\n-                out.write(2);\n-                out.write(e.getMessage().getBytes());\n+                exitValue = ERROR;\n+                exitMessage = e.getMessage();\n+                out.write(exitValue);\n+                out.write(exitMessage.getBytes());\n                 out.write('\\n');\n                 out.flush();\n             } catch (IOException e2) {\n                 // Ignore\n             }\n             log.info(\"Error in scp command\", e);\n         } finally {\n-            callback.onExit(0);\n+            if (callback != null) {\n+                callback.onExit(exitValue, exitMessage);\n+            }\n         }\n     }\n ",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 46,
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "filename": "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "deletions": 7,
                "sha": "fdc632ca2c78bcbceaa84ffff253d5618c251236",
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
                "patch": "@@ -18,6 +18,9 @@\n  */\n package org.apache.sshd.server.command;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n import org.apache.sshd.server.CommandFactory;\n \n /**\n@@ -40,15 +43,51 @@ public ScpCommandFactory(CommandFactory delegate) {\n         this.delegate = delegate;\n     }\n \n-    public Command createCommand(String command){\n-        String[] args = command.split(\" \");\n-        if (args.length > 0 && \"scp\".equals(args[0])) {\n-            return new ScpCommand(args);\n+    /**\n+     * Parses a command string and verifies that the basic syntax is\n+     * correct. If parsing fails the responsibility is delegated to\n+     * the configured {@link CommandFactory} instance; if one exist.\n+     *\n+     * @param command command to parse \n+     * @return configured {@link CommandFactory.Command} instance\n+     * @throws IllegalArgumentException\n+     */\n+    public Command createCommand(String command) {\n+        try {\n+            return new ScpCommand(splitCommandString(command));\n+        } catch (IllegalArgumentException iae) {\n+            if (delegate != null) {\n+                return delegate.createCommand(command);\n+            }\n+            throw iae;\n+        }\n+    }\n+\n+    private String[] splitCommandString(String command) {\n+        if (!command.trim().startsWith(\"scp\")) {\n+            throw new IllegalArgumentException(\"Unknown command, does not begin with 'scp'\");\n         }\n-        if (delegate != null) {\n-            return delegate.createCommand(command);\n+\n+        String[] args = command.split(\" \");\n+        List<String> parts = new ArrayList<String>();\n+        parts.add(args[0]);\n+        for (int i = 1; i < args.length; i++) {\n+            if (!args[i].trim().startsWith(\"-\")) {\n+                parts.add(concatenateWithSpace(args, i));\n+                break;\n+            } else {\n+                parts.add(args[i]);\n+            }\n         }\n-        return new UnknownCommand(command);\n+        return parts.toArray(new String[parts.size()]);\n     }\n \n+    private String concatenateWithSpace(String[] args, int from) {\n+        StringBuilder sb = new StringBuilder();\n+\n+        for (int i = from; i < args.length; i++) {\n+            sb.append(args[i] + \" \");\n+        }\n+        return sb.toString().trim();\n+    }\n }",
                "changes": 53
            },
            {
                "status": "modified",
                "additions": 7,
                "raw_url": "https://github.com/apache/mina-sshd/raw/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "contents_url": "https://api.github.com/repos/apache/mina-sshd/contents/sshd-core/src/test/java/org/apache/sshd/ScpTest.java?ref=091e8840c64a6f11d9845dcea3613bb1261d8c44",
                "filename": "sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "deletions": 7,
                "sha": "1c789c15454bc53866ff59238f15dc2d69c09a5d",
                "blob_url": "https://github.com/apache/mina-sshd/blob/091e8840c64a6f11d9845dcea3613bb1261d8c44/sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
                "patch": "@@ -109,32 +109,32 @@ public void testScp() throws Exception {\n         String data = \"0123456789\\n\";\n \n         File root = new File(\"target/scp\");\n-        File target = new File(\"target/scp/out.txt\");\n+        File target = new File(\"target/scp/o ut.txt\");\n         root.mkdirs();\n         assertTrue(root.exists());\n \n         target.delete();\n         assertFalse(target.exists());\n-        sendFile(\"target/scp/out.txt\", \"out.txt\", data);\n+        sendFile(\"target/scp/o ut.txt\", \"out.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n \n         target.delete();\n         assertFalse(target.exists());\n-        sendFile(\"target/scp\", \"out.txt\", data);\n+        sendFile(\"target/scp\", \"o ut.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n \n         sendFileError(\"target\", \"scp\", \"0123456789\\n\");\n \n         readFileError(\"target/scp\");\n \n-        assertEquals(data, readFile(\"target/scp/out.txt\"));\n+        assertEquals(data, readFile(\"target/scp/o ut.txt\"));\n \n         assertEquals(data, readDir(\"target/scp\"));\n \n         target.delete();\n         root.delete();\n \n-        sendDir(\"target\", \"scp\", \"out.txt\", data);\n+        sendDir(\"target\", \"scp\", \"o ut.txt\", data);\n         assertFileLength(target, data.length(), 5000);\n     }\n \n@@ -164,7 +164,7 @@ protected String readFile(String path) throws Exception {\n         OutputStream os = c.getOutputStream();\n         InputStream is = c.getInputStream();\n         String header = readLine(is);\n-        assertEquals(\"C0644 11 out.txt\", header);\n+        assertEquals(\"C0644 11 o ut.txt\", header);\n         int length = Integer.parseInt(header.substring(6, header.indexOf(' ', 6)));\n         os.write(0);\n         os.flush();\n@@ -191,7 +191,7 @@ protected String readDir(String path) throws Exception {\n         os.write(0);\n         os.flush();\n         header = readLine(is);\n-        assertEquals(\"C0644 11 out.txt\", header);\n+        assertEquals(\"C0644 11 o ut.txt\", header);\n         int length = Integer.parseInt(header.substring(6, header.indexOf(' ', 6)));\n         os.write(0);\n         os.flush();",
                "changes": 14
            }
        ],
        "unit_tests": [
            "ScpTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "sshd-core/src/test/java/org/apache/sshd/ScpTest.java",
        "buggy_files": [
            "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommandFactory.java",
            "sshd-core/src/main/java/org/apache/sshd/server/channel/ChannelSession.java",
            "sshd-core/src/main/java/org/apache/sshd/client/channel/ChannelSession.java",
            "sshd-core/src/main/java/org/apache/sshd/server/command/ScpCommand.java",
            "sshd-core/src/main/java/org/apache/sshd/server/CommandFactory.java"
        ],
        "fixed": true
    }
]