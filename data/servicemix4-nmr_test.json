{
    "servicemix4-nmr_09942a3": {
        "repo": "servicemix4-nmr",
        "message": "SMX4NMR-44: NPE when unregistering endpoints\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/nmr/trunk@679025 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-nmr/commit/09942a3f749fec03052bb347dc0e0befe4f5b7cc",
        "parent": "https://github.com/apache/servicemix4-nmr/commit/e55024ecac2002ac251c4f36a1081429142860ed",
        "bug_id": "servicemix4-nmr_09942a3",
        "file": [
            {
                "sha": "d72cb05a7a7ad61738e3ef4c05cc70860614d3ab",
                "filename": "nmr/core/src/main/java/org/apache/servicemix/nmr/core/EndpointRegistryImpl.java",
                "blob_url": "https://github.com/apache/servicemix4-nmr/blob/09942a3f749fec03052bb347dc0e0befe4f5b7cc/nmr/core/src/main/java/org/apache/servicemix/nmr/core/EndpointRegistryImpl.java",
                "raw_url": "https://github.com/apache/servicemix4-nmr/raw/09942a3f749fec03052bb347dc0e0befe4f5b7cc/nmr/core/src/main/java/org/apache/servicemix/nmr/core/EndpointRegistryImpl.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-nmr/contents/nmr/core/src/main/java/org/apache/servicemix/nmr/core/EndpointRegistryImpl.java?ref=09942a3f749fec03052bb347dc0e0befe4f5b7cc",
                "patch": "@@ -123,17 +123,23 @@ public void unregister(Endpoint endpoint, Map<String, ?> properties) {\n         InternalEndpoint wrapper;\n         if (endpoint instanceof InternalEndpoint) {\n             wrapper = (InternalEndpoint) endpoint;\n-            endpoint = wrappers.remove(wrapper);\n-            endpoints.remove(endpoint);\n+            if (wrapper != null) {\n+                endpoint = wrappers.remove(wrapper);\n+                if (endpoint != null) {\n+                    endpoints.remove(endpoint);\n+                }\n+            }\n         } else {\n             wrapper = endpoints.remove(endpoint);\n             if (wrapper != null) {\n                 wrappers.remove(wrapper);\n             }\n         }\n-        registry.unregister(wrapper, properties);\n-        for (EndpointListener listener : nmr.getListenerRegistry().getListeners(EndpointListener.class)) {\n-            listener.endpointUnregistered(wrapper);\n+        if (wrapper != null) {\n+            registry.unregister(wrapper, properties);\n+            for (EndpointListener listener : nmr.getListenerRegistry().getListeners(EndpointListener.class)) {\n+                listener.endpointUnregistered(wrapper);\n+            }\n         }\n         for (DynamicReferenceImpl ref : references.keySet()) {\n             ref.setDirty();",
                "deletions": 5
            }
        ],
        "patched_files": [
            "EndpointRegistryImpl.java"
        ],
        "unit_tests": [
            "EndpointRegistryImplTest.java"
        ]
    },
    "servicemix4-nmr_2c82c8b": {
        "repo": "servicemix4-nmr",
        "message": "SMX4NMR-136: Avoid NPE in AssemblyReferencesListener when sending from Endpoint with unknown SA\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/nmr/trunk@781836 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-nmr/commit/2c82c8bf75d06e808d1677ffab97de982ba0c4d7",
        "parent": "https://github.com/apache/servicemix4-nmr/commit/c2e4f678a5495fa9734376cbc7ac27dd39e1758c",
        "bug_id": "servicemix4-nmr_2c82c8b",
        "file": [
            {
                "sha": "ebf86a92caf6ffecb25957a4c7133c0706ca618a",
                "filename": "jbi/deployer/src/main/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListener.java",
                "blob_url": "https://github.com/apache/servicemix4-nmr/blob/2c82c8bf75d06e808d1677ffab97de982ba0c4d7/jbi/deployer/src/main/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListener.java",
                "raw_url": "https://github.com/apache/servicemix4-nmr/raw/2c82c8bf75d06e808d1677ffab97de982ba0c4d7/jbi/deployer/src/main/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListener.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-nmr/contents/jbi/deployer/src/main/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListener.java?ref=2c82c8bf75d06e808d1677ffab97de982ba0c4d7",
                "patch": "@@ -107,7 +107,9 @@ private boolean isSync(Exchange exchange) {\n \n     private void pending(InternalExchange exchange) {\n         ServiceAssembly assembly = endpoints.get(exchange.getSource());\n-        pending.put(exchange, assembly);\n+        if (assembly != null) {\n+          pending.put(exchange, assembly);\n+        }\n     }\n \n     public void exchangeDelivered(Exchange exchange) {",
                "deletions": 1
            },
            {
                "sha": "9f4dcbdfc9f2fdcadf3955583f03b135de5b5233",
                "filename": "jbi/deployer/src/test/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListenerTest.java",
                "blob_url": "https://github.com/apache/servicemix4-nmr/blob/2c82c8bf75d06e808d1677ffab97de982ba0c4d7/jbi/deployer/src/test/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListenerTest.java",
                "raw_url": "https://github.com/apache/servicemix4-nmr/raw/2c82c8bf75d06e808d1677ffab97de982ba0c4d7/jbi/deployer/src/test/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListenerTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-nmr/contents/jbi/deployer/src/test/java/org/apache/servicemix/jbi/deployer/artifacts/AssemblyReferencesListenerTest.java?ref=2c82c8bf75d06e808d1677ffab97de982ba0c4d7",
                "patch": "@@ -115,6 +115,20 @@ public void testCancelPendingExchanges() throws Exception {\n         assertEquals(Status.Error, exchange.getStatus());\n     }\n \n+    public void testNoExceptionsOnUnknownExchange() throws Exception {\n+        AssemblyReferencesListener listener = new AssemblyReferencesListener();\n+        InternalEndpoint endpoint = new InternalEndpointWrapper(new EndpointImpl(ServiceHelper.createMap(Endpoint.ENDPOINT_NAME, \"endpoint\")),\n+                                                                ServiceHelper.createMap(Endpoint.ENDPOINT_NAME, \"internal-endpoint\"));\n+        \n+        InternalExchange exchange = new ExchangeImpl(Pattern.InOnly);\n+        exchange.setSource(endpoint);\n+        exchange.setProperty(DeliveryChannelImpl.SEND_SYNC, Boolean.TRUE);\n+        exchange.getConsumerLock(true);\n+        \n+        // this should not throw an exception\n+        listener.exchangeSent(exchange);\n+    }\n+\n     private ServiceAssemblyImpl createServiceAssembly() {\n         ServiceAssemblyDesc descriptor = DescriptorFactory.buildDescriptor(DescriptorFactory.class.getResource(\"serviceAssembly.xml\")).getServiceAssembly();\n         final Preferences prefs = createMock(Preferences.class);",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AssemblyReferencesListener.java"
        ],
        "unit_tests": [
            "AssemblyReferencesListenerTest.java"
        ]
    },
    "servicemix4-nmr_4c1c203": {
        "repo": "servicemix4-nmr",
        "message": "SMX4NMR-228: NPE in ExecutorConfigurator when no configuration settings available\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/nmr/trunk@1003498 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-nmr/commit/4c1c20308d8b8b73aa06a43957e82ce798ba4bb8",
        "parent": "https://github.com/apache/servicemix4-nmr/commit/c4fc731552dbabad44de5ccc84c3708880c28be8",
        "bug_id": "servicemix4-nmr_4c1c203",
        "file": [
            {
                "sha": "378bb60916842efe38498412ceb041fbbf22c71c",
                "filename": "nmr/osgi/src/main/java/org/apache/servicemix/nmr/osgi/ExecutorConfigurator.java",
                "blob_url": "https://github.com/apache/servicemix4-nmr/blob/4c1c20308d8b8b73aa06a43957e82ce798ba4bb8/nmr/osgi/src/main/java/org/apache/servicemix/nmr/osgi/ExecutorConfigurator.java",
                "raw_url": "https://github.com/apache/servicemix4-nmr/raw/4c1c20308d8b8b73aa06a43957e82ce798ba4bb8/nmr/osgi/src/main/java/org/apache/servicemix/nmr/osgi/ExecutorConfigurator.java",
                "status": "modified",
                "changes": 78,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-nmr/contents/nmr/osgi/src/main/java/org/apache/servicemix/nmr/osgi/ExecutorConfigurator.java?ref=4c1c20308d8b8b73aa06a43957e82ce798ba4bb8",
                "patch": "@@ -44,44 +44,46 @@ public void setExecutorFactory(ExecutorFactoryImpl factory) {\n     public void updated(Dictionary properties) throws ConfigurationException {\n         ExecutorConfig defaultConfig = new ExecutorConfig();\n         Map<String, ExecutorConfig> configs = new HashMap<String, ExecutorConfig>();\n-        for (Enumeration e = properties.keys(); e.hasMoreElements();) {\n-            String key = (String) e.nextElement();\n-            if (key.endsWith(\".corePoolSize\")) {\n-                getConfig(configs, key).setCorePoolSize(getInt(properties, key));\n-            } else if (key.endsWith(\".maximumPoolSize\")) {\n-                getConfig(configs, key).setMaximumPoolSize(getInt(properties, key));\n-            } else if (key.endsWith(\".keepAliveTime\")) {\n-                getConfig(configs, key).setKeepAliveTime(getLong(properties, key));\n-            } else if (key.endsWith(\".threadDaemon\")) {\n-                getConfig(configs, key).setThreadDaemon(getBool(properties, key));\n-            } else if (key.endsWith(\".threadPriority\")) {\n-                getConfig(configs, key).setThreadPriority(getInt(properties, key));\n-            } else if (key.endsWith(\".queueSize\")) {\n-                getConfig(configs, key).setQueueSize(getInt(properties, key));\n-            } else if (key.endsWith(\".shutdownDelay\")) {\n-                getConfig(configs, key).setShutdownDelay(getLong(properties, key));\n-            } else if (key.endsWith(\".allowCoreThreadsTimeout\")) {\n-                getConfig(configs, key).setAllowCoreThreadsTimeout(getBool(properties, key));\n-            } else if (key.endsWith(\".bypassIfSynchronous\")) {\n-                getConfig(configs, key).setBypassIfSynchronous(getBool(properties, key));\n-            } else if (key.equals(\"corePoolSize\")) {\n-                defaultConfig.setCorePoolSize(getInt(properties, key));\n-            } else if (key.equals(\"maximumPoolSize\")) {\n-                defaultConfig.setMaximumPoolSize(getInt(properties, key));\n-            } else if (key.equals(\"keepAliveTime\")) {\n-                defaultConfig.setKeepAliveTime(getLong(properties, key));\n-            } else if (key.equals(\"threadDaemon\")) {\n-                defaultConfig.setThreadDaemon(getBool(properties, key));\n-            } else if (key.equals(\"threadPriority\")) {\n-                defaultConfig.setThreadPriority(getInt(properties, key));\n-            } else if (key.equals(\"queueSize\")) {\n-                defaultConfig.setQueueSize(getInt(properties, key));\n-            } else if (key.equals(\"shutdownDelay\")) {\n-                defaultConfig.setShutdownDelay(getLong(properties, key));\n-            } else if (key.equals(\"allowCoreThreadsTimeout\")) {\n-                defaultConfig.setAllowCoreThreadsTimeout(getBool(properties, key));\n-            } else if (key.equals(\"bypassIfSynchronous\")) {\n-                defaultConfig.setBypassIfSynchronous(getBool(properties, key));\n+        if (properties != null) {\n+            for (Enumeration e = properties.keys(); e.hasMoreElements();) {\n+                String key = (String) e.nextElement();\n+                if (key.endsWith(\".corePoolSize\")) {\n+                    getConfig(configs, key).setCorePoolSize(getInt(properties, key));\n+                } else if (key.endsWith(\".maximumPoolSize\")) {\n+                    getConfig(configs, key).setMaximumPoolSize(getInt(properties, key));\n+                } else if (key.endsWith(\".keepAliveTime\")) {\n+                    getConfig(configs, key).setKeepAliveTime(getLong(properties, key));\n+                } else if (key.endsWith(\".threadDaemon\")) {\n+                    getConfig(configs, key).setThreadDaemon(getBool(properties, key));\n+                } else if (key.endsWith(\".threadPriority\")) {\n+                    getConfig(configs, key).setThreadPriority(getInt(properties, key));\n+                } else if (key.endsWith(\".queueSize\")) {\n+                    getConfig(configs, key).setQueueSize(getInt(properties, key));\n+                } else if (key.endsWith(\".shutdownDelay\")) {\n+                    getConfig(configs, key).setShutdownDelay(getLong(properties, key));\n+                } else if (key.endsWith(\".allowCoreThreadsTimeout\")) {\n+                    getConfig(configs, key).setAllowCoreThreadsTimeout(getBool(properties, key));\n+                } else if (key.endsWith(\".bypassIfSynchronous\")) {\n+                    getConfig(configs, key).setBypassIfSynchronous(getBool(properties, key));\n+                } else if (key.equals(\"corePoolSize\")) {\n+                    defaultConfig.setCorePoolSize(getInt(properties, key));\n+                } else if (key.equals(\"maximumPoolSize\")) {\n+                    defaultConfig.setMaximumPoolSize(getInt(properties, key));\n+                } else if (key.equals(\"keepAliveTime\")) {\n+                    defaultConfig.setKeepAliveTime(getLong(properties, key));\n+                } else if (key.equals(\"threadDaemon\")) {\n+                    defaultConfig.setThreadDaemon(getBool(properties, key));\n+                } else if (key.equals(\"threadPriority\")) {\n+                    defaultConfig.setThreadPriority(getInt(properties, key));\n+                } else if (key.equals(\"queueSize\")) {\n+                    defaultConfig.setQueueSize(getInt(properties, key));\n+                } else if (key.equals(\"shutdownDelay\")) {\n+                    defaultConfig.setShutdownDelay(getLong(properties, key));\n+                } else if (key.equals(\"allowCoreThreadsTimeout\")) {\n+                    defaultConfig.setAllowCoreThreadsTimeout(getBool(properties, key));\n+                } else if (key.equals(\"bypassIfSynchronous\")) {\n+                    defaultConfig.setBypassIfSynchronous(getBool(properties, key));\n+                }\n             }\n         }\n         executorFactory.setDefaultConfig(defaultConfig);",
                "deletions": 38
            },
            {
                "sha": "fd8655efef8a92513103e0248002c405a5892513",
                "filename": "nmr/osgi/src/test/java/org/apache/servicemix/nmr/osgi/ExecutorConfiguratorTest.java",
                "blob_url": "https://github.com/apache/servicemix4-nmr/blob/4c1c20308d8b8b73aa06a43957e82ce798ba4bb8/nmr/osgi/src/test/java/org/apache/servicemix/nmr/osgi/ExecutorConfiguratorTest.java",
                "raw_url": "https://github.com/apache/servicemix4-nmr/raw/4c1c20308d8b8b73aa06a43957e82ce798ba4bb8/nmr/osgi/src/test/java/org/apache/servicemix/nmr/osgi/ExecutorConfiguratorTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-nmr/contents/nmr/osgi/src/test/java/org/apache/servicemix/nmr/osgi/ExecutorConfiguratorTest.java?ref=4c1c20308d8b8b73aa06a43957e82ce798ba4bb8",
                "patch": "@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.servicemix.nmr.osgi;\n+\n+import junit.framework.TestCase;\n+import org.apache.servicemix.executors.impl.ExecutorFactoryImpl;\n+import org.osgi.service.cm.ConfigurationException;\n+\n+/**\n+ * Test cases for {@link org.apache.servicemix.nmr.osgi.ExecutorConfigurator#updated(java.util.Dictionary)}\n+ */\n+public class ExecutorConfiguratorTest extends TestCase {\n+\n+    public void testUpdatedWithNullDictionary() {\n+        ExecutorConfigurator configurator = new ExecutorConfigurator();\n+        configurator.setExecutorFactory(new ExecutorFactoryImpl());\n+        \n+        try {\n+            configurator.updated(null);\n+            // this is OK\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+            fail(\"Should not throw exception: \" + e);\n+        }\n+    }    \n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ExecutorConfigurator.java"
        ],
        "unit_tests": [
            "ExecutorConfiguratorTest.java"
        ]
    }
}