{
    "geronimo-xbean_11b2e88": {
        "bug_id": "geronimo-xbean_11b2e88",
        "commit": "https://github.com/apache/geronimo-xbean/commit/11b2e88df77c701c44467e7ff7d8d535c9a32bf3",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3",
                "deletions": 2,
                "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java",
                "patch": "@@ -1698,8 +1698,12 @@ public AnnotationInfo(Class<? extends Annotation> annotation) {\n         }\n \n         public AnnotationInfo(String name) {\n-            name = Type.getType(name).getClassName();\n-            this.name = name.intern();\n+            final Type type = Type.getType(name);\n+            name = type.getClassName();\n+            if (name == null) {\n+                name = type.getDescriptor(); // name was already a class name\n+            }\n+            this.name = name;\n         }\n \n         public String getName() {",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AnnotationFinder.java",
                "sha": "84bf6470eb2649de11d47e80fee451a2c6dc39a4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3",
                "deletions": 4,
                "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java",
                "patch": "@@ -29,6 +29,7 @@\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicInteger;\n \n+// designed to trigger asynchronism from a single thread\n public class AsynchronousInheritanceAnnotationFinder extends AnnotationFinder {\n     private ExecutorService executor = null;\n     private CountDownLatch subclassesLatch = null;\n@@ -43,7 +44,7 @@ public AsynchronousInheritanceAnnotationFinder(final Archive archive) {\n         super(archive);\n     }\n \n-    @Override\n+    @Override // should be called from main thread\n     public AnnotationFinder enableFindImplementations() {\n         if (implementationsLatch == null) {\n             enableFindSubclasses();\n@@ -65,7 +66,7 @@ public void run() {\n         return this;\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public AnnotationFinder enableFindSubclasses() {\n         if (subclassesLatch == null) {\n             subclassesLatch = new CountDownLatch(1);\n@@ -80,7 +81,7 @@ public void run() {\n         return this;\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public <T> List<Class<? extends T>> findSubclasses(final Class<T> clazz) {\n         if (subclassesLatch == null) {\n             enableFindSubclasses();\n@@ -89,7 +90,7 @@ public void run() {\n         return super.findSubclasses(clazz);\n     }\n \n-    @Override\n+    @Override  // should be called from main thread\n     public <T> List<Class<? extends T>> findImplementations(final Class<T> clazz) {\n         if (implementationsLatch == null) {\n             enableFindImplementations();",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/main/java/org/apache/xbean/finder/AsynchronousInheritanceAnnotationFinder.java",
                "sha": "7c17b63a8b1f33688cdaeb661ced8d9b2e16a56e",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java?ref=11b2e88df77c701c44467e7ff7d8d535c9a32bf3",
                "deletions": 1,
                "filename": "xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java",
                "patch": "@@ -20,13 +20,16 @@\n import org.apache.xbean.finder.archive.ClassesArchive;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class ClassFinderDepthTest extends TestCase {\n-\n+    @Deprecated\n+    public static abstract class TargetImpl implements java.lang.annotation.Target {\n+    }\n \n     public static interface Hue<T> {\n     }\n@@ -74,6 +77,20 @@ public void testFindSubclassesIncomplete() throws Exception {\n         }\n     }\n \n+    public void testFindAnnotatedInterfaceImplementationsAfterGet() {\n+        for (int i = 0; i < 10; i++) {\n+                final ClassesArchive archive = new ClassesArchive(TargetImpl.class);\n+                for (final AnnotationFinder finder : new AnnotationFinder[] {\n+                            new AnnotationFinder(archive),\n+                            new AsynchronousInheritanceAnnotationFinder(archive)\n+                                }) {\n+                        assertEquals(Collections.singletonList(TargetImpl.class), finder.findAnnotatedClasses(Deprecated.class));\n+                        finder.link();\n+                        assertImplementations(finder, java.lang.annotation.Target.class, TargetImpl.class);\n+                    }\n+            }\n+    }\n+\n     public void testFindImplementations() throws Exception {\n         for (int i = 0; i < 10; i++) { // try to avoid AsynchronousInheritanceAnnotationFinder \"luck\" issues\n             for (final AnnotationFinder finder : new AnnotationFinder[] {",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/11b2e88df77c701c44467e7ff7d8d535c9a32bf3/xbean-finder/src/test/java/org/apache/xbean/finder/ClassFinderDepthTest.java",
                "sha": "20202608be5a2f3e73298c8044de39d3425aab03",
                "status": "modified"
            }
        ],
        "message": "XBEAN-267 javadoc for 267 and fix for XBEAN-263 creating ClassInfo for an annotated Class object throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@1596328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo-xbean/commit/d0ecaf77422f9bf33471ceba66a7b5102f90be31",
        "patched_files": [
            "AsynchronousInheritanceAnnotationFinder.java",
            "AnnotationFinder.java"
        ],
        "repo": "geronimo-xbean",
        "unit_tests": [
            "ClassFinderDepthTest.java"
        ]
    },
    "geronimo-xbean_5a7ee53": {
        "bug_id": "geronimo-xbean_5a7ee53",
        "commit": "https://github.com/apache/geronimo-xbean/commit/5a7ee535445d001d4b72778e37314d46cba6bf6e",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java?ref=5a7ee535445d001d4b72778e37314d46cba6bf6e",
                "deletions": 33,
                "filename": "xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "patch": "@@ -59,11 +59,11 @@\n  * @version $Rev$ $Date$\n  */\n public class ClassFinder {\n-    private final Map<String, List<Info>> annotated = new HashMap();\n-    private final List<ClassInfo> classInfos = new ArrayList();\n+    private final Map<String, List<Info>> annotated = new HashMap<String, List<Info>>();\n+    private final List<ClassInfo> classInfos = new ArrayList<ClassInfo>();\n \n     private final ClassLoader classLoader;\n-    private final List<String> classesNotLoaded = new ArrayList();\n+    private final List<String> classesNotLoaded = new ArrayList<String>();\n \n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader\n@@ -77,8 +77,8 @@\n      *\n      *    new ClassFinder(classLoader, classLoader.getParent().getParent());\n      *\n-     * @param classLoader\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader) throws Exception {\n         this(classLoader, true);\n@@ -87,9 +87,9 @@ public ClassFinder(ClassLoader classLoader) throws Exception {\n     /**\n      * Creates a ClassFinder that will search the urls in the specified classloader.\n      *\n-     * @param classLoader\n-     * @param excludeParent\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param excludeParent Allegedly excludes classes from parent classloader, whatever that might mean\n+     * @throws Exception if something goes wrong.\n      */\n     public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Exception {\n         this(classLoader, getUrls(classLoader, excludeParent));\n@@ -99,22 +99,22 @@ public ClassFinder(ClassLoader classLoader, boolean excludeParent) throws Except\n      * Creates a ClassFinder that will search the urls in the specified classloader excluding\n      * the urls in the 'exclude' classloader.\n      *\n-     * @param classLoader\n-     * @param exclude\n-     * @throws Exception\n+     * @param classLoader source of classes to scan\n+     * @param exclude source of classes to exclude from scanning\n+     * @throws Exception if something goes wrong\n      */\n     public ClassFinder(ClassLoader classLoader, ClassLoader exclude) throws Exception {\n         this(classLoader, getUrls(classLoader, exclude));\n     }\n \n     public ClassFinder(ClassLoader classLoader, URL url) {\n-        this(classLoader, Arrays.asList(new URL[]{url}));\n+        this(classLoader, Arrays.asList(url));\n     }\n \n     public ClassFinder(ClassLoader classLoader, Collection<URL> urls) {\n         this.classLoader = classLoader;\n \n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         for (URL location : urls) {\n             try {\n                 if (location.getProtocol().equals(\"jar\")) {\n@@ -146,8 +146,8 @@ public ClassFinder(Class... classes){\n \n     public ClassFinder(List<Class> classes){\n         this.classLoader = null;\n-        List<Info> infos = new ArrayList();\n-        List<Package> packages = new ArrayList();\n+        List<Info> infos = new ArrayList<Info>();\n+        List<Package> packages = new ArrayList<Package>();\n         for (Class clazz : classes) {\n \n             Package aPackage = clazz.getPackage();\n@@ -191,10 +191,11 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n      * The list will only contain entries of classes whose byte code matched the requirements\n      * of last invoked find* method, but were unable to be loaded and included in the results.\n      * <p/>\n-     * The list returned is unmodifiable and the results of this method will change\n-     * after each invocation of a findAnnotated* method.\n+     * The list returned is unmodifiable.  Once obtained, the returned list will be a live view of the\n+     * results from the last findAnnotated* method call.\n      * <p/>\n      * This method is not thread safe.\n+     * @return an unmodifiable live view of classes that could not be loaded in previous findAnnotated* call.\n      */\n     public List<String> getClassesNotLoaded() {\n         return Collections.unmodifiableList(classesNotLoaded);\n@@ -331,7 +332,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n \n     public List<Class> findClassesInPackage(String packageName, boolean recursive) {\n         classesNotLoaded.clear();\n-        List<Class> classes = new ArrayList();\n+        List<Class> classes = new ArrayList<Class>();\n         for (ClassInfo classInfo : classInfos) {\n             try {\n                 if (recursive && classInfo.getPackageName().startsWith(packageName)){\n@@ -364,7 +365,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private static Map<String, URL> toMap(Enumeration<URL> enumeration) {\n-        Map<String, URL> urls = new HashMap();\n+        Map<String, URL> urls = new HashMap<String, URL>();\n         while (enumeration.hasMoreElements()) {\n             URL url = enumeration.nextElement();\n             urls.put(url.toExternalForm(), url);\n@@ -373,7 +374,7 @@ public boolean isAnnotationPresent(Class<? extends Annotation> annotation) {\n     }\n \n     private List<String> file(URL location) {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n         File dir = new File(location.getPath());\n         if (dir.getName().equals(\"META-INF\")) {\n             dir = dir.getParentFile(); // Scrape \"META-INF\" off\n@@ -413,7 +414,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     private List<String> jar(JarInputStream jarStream) throws IOException {\n-        List<String> classNames = new ArrayList();\n+        List<String> classNames = new ArrayList<String>();\n \n         JarEntry entry;\n         while ((entry = jarStream.getNextJarEntry()) != null) {\n@@ -430,7 +431,7 @@ private void scanDir(File dir, List<String> classNames, String packageName) {\n     }\n \n     public class Annotatable {\n-        private final List<AnnotationInfo> annotations = new ArrayList();\n+        private final List<AnnotationInfo> annotations = new ArrayList<AnnotationInfo>();\n \n         public Annotatable(AnnotatedElement element) {\n             for (Annotation annotation : element.getAnnotations()) {\n@@ -482,11 +483,11 @@ public Package get() throws ClassNotFoundException {\n \n     public class ClassInfo extends Annotatable implements Info {\n         private final String name;\n-        private final List<MethodInfo> methods = new ArrayList();\n-        private final List<MethodInfo> constructors = new ArrayList();\n+        private final List<MethodInfo> methods = new ArrayList<MethodInfo>();\n+        private final List<MethodInfo> constructors = new ArrayList<MethodInfo>();\n         private final String superType;\n-        private final List<String> interfaces = new ArrayList();\n-        private final List<FieldInfo> fields = new ArrayList();\n+        private final List<String> interfaces = new ArrayList<String>();\n+        private final List<FieldInfo> fields = new ArrayList<FieldInfo>();\n         private Class<?> clazz;\n         private ClassNotFoundException notFound;\n \n@@ -553,7 +554,7 @@ public String toString() {\n         private final ClassInfo declaringClass;\n         private final String returnType;\n         private final String name;\n-        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList();\n+        private final List<List<AnnotationInfo>> parameterAnnotations = new ArrayList<List<AnnotationInfo>>();\n \n         public MethodInfo(ClassInfo info, Constructor constructor){\n             super(constructor);\n@@ -663,14 +664,14 @@ public String getName() {\n         }\n \n         public String toString() {\n-            return name.toString();\n+            return name;\n         }\n     }\n \n     private List<Info> getAnnotationInfos(String name) {\n         List<Info> infos = annotated.get(name);\n         if (infos == null) {\n-            infos = new ArrayList();\n+            infos = new ArrayList<Info>();\n             annotated.put(name, infos);\n         }\n         return infos;\n@@ -680,16 +681,18 @@ private void readClassDef(String className) {\n         if (!className.endsWith(\".class\")) {\n             className = className.replace('.', '/') + \".class\";\n         }\n-        ClassReader classReader = null;\n         try {\n             URL resource = classLoader.getResource(className);\n-            classReader = new ClassReader(resource.openStream());\n+            if (resource != null) {\n+                ClassReader classReader = new ClassReader(resource.openStream());\n+                classReader.accept(new InfoBuildingVisitor(), true);\n+            } else {\n+                new Exception(\"Could not load \" + className).printStackTrace();\n+            }\n         } catch (IOException e) {\n             e.printStackTrace();\n         }\n \n-//        classReader.accept(new ASMifierClassVisitor(new PrintWriter(System.out)), true);\n-        classReader.accept(new InfoBuildingVisitor(), true);\n     }\n \n     public class InfoBuildingVisitor extends EmptyVisitor {",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/5a7ee535445d001d4b72778e37314d46cba6bf6e/xbean-finder/src/main/java/org/apache/xbean/finder/ClassFinder.java",
                "sha": "5e123695ef6189a480b9328aeb6d1ec1b996abc0",
                "status": "modified"
            }
        ],
        "message": "XBEAN-76 fix NPE, eliminate intellij warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@511967 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo-xbean/commit/236c6e7b88f4b5b337d63e7114815c42d40ab6fe",
        "patched_files": [
            "ClassFinder.java"
        ],
        "repo": "geronimo-xbean",
        "unit_tests": [
            "ClassFinderTest.java"
        ]
    },
    "geronimo-xbean_f928aaa": {
        "bug_id": "geronimo-xbean_f928aaa",
        "commit": "https://github.com/apache/geronimo-xbean/commit/f928aaa9360ba5b158895a3fe89fcdc01438749b",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java?ref=f928aaa9360ba5b158895a3fe89fcdc01438749b",
                "deletions": 0,
                "filename": "xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java",
                "patch": "@@ -20,8 +20,10 @@\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.springframework.context.support.AbstractXmlApplicationContext;\n+import org.springframework.core.io.ClassPathResource;\n import org.apache.xbean.spring.example.RestaurantService;\n import org.apache.xbean.spring.example.PizzaService;\n+import org.apache.xbean.spring.context.impl.XBeanXmlBeanFactory;\n \n import javax.xml.namespace.QName;\n \n@@ -89,4 +91,10 @@ public void testPizza() throws Exception {\n     protected AbstractXmlApplicationContext createApplicationContext() {\n         return new ClassPathXmlApplicationContext(\"org/apache/xbean/spring/context/restaurant-xbean.xml\");\n     }\n+    \n+     public void testCreateXBeanXmlBeanFactory() throws Exception {\n+        XBeanXmlBeanFactory factory = new XBeanXmlBeanFactory(new ClassPathResource(\"org/apache/xbean/spring/context/restaurant-xbean.xml\"));\n+        assertNotNull(factory);\n+    }\n+ \n }",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-itests/core/src/main/java/org/apache/xbean/spring/context/RestaurantUsingXBeanTest.java",
                "sha": "f3fc38961f813b89de99cea7a1c6b5efcc990a81",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/geronimo-xbean/blob/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/geronimo-xbean/contents/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java?ref=f928aaa9360ba5b158895a3fe89fcdc01438749b",
                "deletions": 2,
                "filename": "xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java",
                "patch": "@@ -56,8 +56,10 @@ public XBeanXmlBeanDefinitionReader(SpringApplicationContext applicationContext,\n         this.xmlPreprocessors = xmlPreprocessors;\n         setNamespaceAware(true);\n         setValidationMode(VALIDATION_NONE);\n-        setResourceLoader(applicationContext);\n-        setEntityResolver(new ResourceEntityResolver(applicationContext));\n+        if (applicationContext != null) {\n+            setResourceLoader(applicationContext);\n+            setEntityResolver(new ResourceEntityResolver(applicationContext));\n+        }\n         setDocumentReaderClass(XBeanBeanDefinitionDocumentReader.class);\n     }\n ",
                "raw_url": "https://github.com/apache/geronimo-xbean/raw/f928aaa9360ba5b158895a3fe89fcdc01438749b/xbean-spring-v2/src/main/java/org/apache/xbean/spring/context/v2/XBeanXmlBeanDefinitionReader.java",
                "sha": "1dbf72359168e25372fa62920e939dd45f8140e8",
                "status": "modified"
            }
        ],
        "message": "XBEAN-30: NPE using XBeanHelper.createBeanDefinitionReader and spring 2.0-rc2\n\ngit-svn-id: https://svn.apache.org/repos/asf/geronimo/xbean/trunk@427307 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/geronimo-xbean/commit/fdb0590edf1e9ea7a9644de488b6a79a9740a293",
        "patched_files": [
            "XBeanXmlBeanDefinitionReader.java"
        ],
        "repo": "geronimo-xbean",
        "unit_tests": [
            "RestaurantUsingXBeanTest.java"
        ]
    }
}