[
    {
        "repo": "jclouds",
        "message": "Protects from NPE input.getLocation() is nullable",
        "commit": "https://github.com/apache/jclouds/commit/7c5927038a464c6100f4a3f4f035bb15f19ce958",
        "parent": "https://github.com/apache/jclouds/commit/f7b45341328410dea583901a31218a3588cb5aad",
        "bug_id": "jclouds_1",
        "file": [
            {
                "sha": "b85628c62167ea6cef5ae3d23e70dadf98f8846b",
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "blob_url": "https://github.com/apache/jclouds/blob/7c5927038a464c6100f4a3f4f035bb15f19ce958/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "raw_url": "https://github.com/apache/jclouds/raw/7c5927038a464c6100f4a3f4f035bb15f19ce958/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/extensions/AzureComputeSecurityGroupExtension.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/extensions/AzureComputeSecurityGroupExtension.java?ref=7c5927038a464c6100f4a3f4f035bb15f19ce958",
                "patch": "@@ -116,7 +116,7 @@\n       return ImmutableSet.copyOf(filter(securityGroups, new Predicate<SecurityGroup>() {\n          @Override\n          public boolean apply(SecurityGroup input) {\n-            return locations.contains(input.getLocation().getId());\n+            return input.getLocation() != null && locations.contains(input.getLocation().getId());\n          }\n       }));\n    }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-1381: Fix NPE in GCE DiskURIToImage",
        "commit": "https://github.com/apache/jclouds/commit/7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
        "parent": "https://github.com/apache/jclouds/commit/50ae6828f52cebe4dffab518c4d5053d93b2a494",
        "bug_id": "jclouds_2",
        "file": [
            {
                "sha": "470cd9eb7ccb5c61f633b07fb5c6a2a2a5eb09ca",
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "blob_url": "https://github.com/apache/jclouds/blob/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "raw_url": "https://github.com/apache/jclouds/raw/7aed4bc88ccd4748c46bb0fa144ff9185a559e94/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/loaders/DiskURIToImage.java?ref=7aed4bc88ccd4748c46bb0fa144ff9185a559e94",
                "patch": "@@ -45,9 +45,11 @@\n    @Override\n    public Optional<Image> load(URI key) throws ExecutionException {\n       try {\n+         Image image = null;\n          Disk disk = resources.disk(key);\n-         URI sourceImage = disk.sourceImage();\n-         Image image = sourceImage != null ? resources.image(sourceImage) : null;\n+         if (disk != null && disk.sourceImage() != null) {\n+            image = resources.image(disk.sourceImage());\n+         }\n          return Optional.fromNullable(image);\n       } catch (Exception e) {\n          throw new ExecutionException(message(key, e), e);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fix NPE in ARM VirtualMachineToNodeMetadata",
        "commit": "https://github.com/apache/jclouds/commit/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
        "parent": "https://github.com/apache/jclouds/commit/dd9bbff45200dd6f030c336e0e439754305cea41",
        "bug_id": "jclouds_3",
        "file": [
            {
                "sha": "6b7ef3008c891b611454985a51cc8cca21d9e8aa",
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/functions/VirtualMachineToNodeMetadata.java?ref=efb3dd53d0487dd10c7ebfb9ba451c8fb4c6a64a",
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.azurecompute.arm.domain.IdReference;\n import org.jclouds.azurecompute.arm.domain.IpConfiguration;\n import org.jclouds.azurecompute.arm.domain.NetworkInterfaceCard;\n+import org.jclouds.azurecompute.arm.domain.PublicIPAddress;\n import org.jclouds.azurecompute.arm.domain.RegionAndId;\n import org.jclouds.azurecompute.arm.domain.ResourceGroup;\n import org.jclouds.azurecompute.arm.domain.StorageProfile;\n@@ -247,8 +248,10 @@ private NetworkInterfaceCard getNetworkInterfaceCard(IdReference networkInterfac\n             for (IpConfiguration ipConfiguration : networkInterfaceCard.properties().ipConfigurations()) {\n                if (ipConfiguration.properties().publicIPAddress() != null) {\n                   String publicIpId = ipConfiguration.properties().publicIPAddress().id();\n-                  publicIpAddresses.add(api.getPublicIPAddressApi(resourceGroup)\n-                        .get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId))).properties().ipAddress());\n+                  PublicIPAddress publicIp = api.getPublicIPAddressApi(resourceGroup).get(Iterables.getLast(Splitter.on(\"/\").split(publicIpId)));\n+                  if (publicIp != null && publicIp.properties().ipAddress() != null) {\n+                     publicIpAddresses.add(publicIp.properties().ipAddress());\n+                  }\n                }\n             }\n          }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 552:VCloudClient getNetwork returns java.lang.NullPointerException: internalIP",
        "commit": "https://github.com/apache/jclouds/commit/20e3389a2d0fe147adafbeefef2d5799752f69a8",
        "parent": "https://github.com/apache/jclouds/commit/6e483c7f7ceb965ca0a7ce2eb07cc70e77700e4e",
        "bug_id": "jclouds_4",
        "file": [
            {
                "sha": "ec9ed8d30ae56449a6439ac91ae7777594038d5c",
                "filename": "common/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/20e3389a2d0fe147adafbeefef2d5799752f69a8/common/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/20e3389a2d0fe147adafbeefef2d5799752f69a8/common/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java?ref=20e3389a2d0fe147adafbeefef2d5799752f69a8",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.jclouds.vcloud.xml;\n \n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n import static org.jclouds.vcloud.util.Utils.newReferenceType;\n \n import java.util.List;\n@@ -271,11 +272,11 @@ public void endElement(String uri, String name, String qName) {\n          this.vmNicId = -1;\n       } else if (qName.equalsIgnoreCase(\"ExternalPort\")) {\n          externalPort = Integer.parseInt(currentOrNull());\n-      } else if (qName.equalsIgnoreCase(\"IxternalIP\")) {\n+      } else if (qName.equalsIgnoreCase(\"InternalIP\")) {\n          internalIP = currentOrNull();\n       } else if (qName.equalsIgnoreCase(\"InternalPort\")) {\n          internalPort = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"NatProtocol\")) {\n+      } else if (equalsOrSuffix(qName, \"Protocol\")) {\n          natProtocol = NatProtocol.valueOf(currentOrNull());\n       } else if (qName.equals(\"PortForwardingRule\")) {\n          natRules.add(new PortForwardingRule(externalIP, externalPort, internalIP, internalPort, natProtocol));",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 495:vcloud: NullPointerExceptions when a VM has no IP addresses",
        "commit": "https://github.com/apache/jclouds/commit/9117644f26999c937c844d20035d24255bd903e2",
        "parent": "https://github.com/apache/jclouds/commit/87f6bdcce8080097ed1f21a03187bb8e7821154c",
        "bug_id": "jclouds_5",
        "file": [
            {
                "sha": "9faac756f1c30ee8761ab22e9f24965b46fad9d0",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -20,13 +20,15 @@\n package org.jclouds.vcloud.compute.functions;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.base.Predicates.not;\n+import static com.google.common.collect.Iterables.filter;\n import static org.jclouds.compute.util.ComputeServiceUtils.parseGroupFromName;\n import static org.jclouds.vcloud.compute.util.VCloudComputeUtils.getCredentialsFrom;\n-import static org.jclouds.vcloud.compute.util.VCloudComputeUtils.getPrivateIpsFromVApp;\n-import static org.jclouds.vcloud.compute.util.VCloudComputeUtils.getPublicIpsFromVApp;\n+import static org.jclouds.vcloud.compute.util.VCloudComputeUtils.getIpsFromVApp;\n import static org.jclouds.vcloud.compute.util.VCloudComputeUtils.toComputeOs;\n \n import java.util.Map;\n+import java.util.Set;\n \n import javax.annotation.Resource;\n import javax.inject.Inject;\n@@ -38,6 +40,7 @@\n import org.jclouds.compute.domain.NodeState;\n import org.jclouds.domain.Credentials;\n import org.jclouds.logging.Logger;\n+import org.jclouds.util.InetAddresses2.IsPrivateIPAddress;\n import org.jclouds.vcloud.domain.Status;\n import org.jclouds.vcloud.domain.VApp;\n \n@@ -58,7 +61,7 @@\n \n    @Inject\n    protected VAppToNodeMetadata(Map<Status, NodeState> vAppStatusToNodeState, Map<String, Credentials> credentialStore,\n-            FindLocationForResource findLocationForResourceInVDC, Function<VApp, Hardware> hardwareForVApp) {\n+         FindLocationForResource findLocationForResourceInVDC, Function<VApp, Hardware> hardwareForVApp) {\n       this.hardwareForVApp = checkNotNull(hardwareForVApp, \"hardwareForVApp\");\n       this.findLocationForResourceInVDC = checkNotNull(findLocationForResourceInVDC, \"findLocationForResourceInVDC\");\n       this.credentialStore = checkNotNull(credentialStore, \"credentialStore\");\n@@ -75,8 +78,9 @@ public NodeMetadata apply(VApp from) {\n       builder.operatingSystem(toComputeOs(from, null));\n       builder.hardware(hardwareForVApp.apply(from));\n       builder.state(vAppStatusToNodeState.get(from.getStatus()));\n-      builder.publicAddresses(getPublicIpsFromVApp(from));\n-      builder.privateAddresses(getPrivateIpsFromVApp(from));\n+      Set<String> addresses = getIpsFromVApp(from);\n+      builder.publicAddresses(filter(addresses, not(IsPrivateIPAddress.INSTANCE)));\n+      builder.privateAddresses(filter(addresses, IsPrivateIPAddress.INSTANCE));\n       builder.credentials(getCredentialsFrom(from));\n       Credentials fromApi = getCredentialsFrom(from);\n       if (fromApi != null && !credentialStore.containsKey(\"node#\" + from.getHref().toASCIIString()))",
                "deletions": 5
            },
            {
                "sha": "9cd87d9f7d49ced07828645566c87a0d5796febc",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/compute/util/VCloudComputeUtils.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/util/VCloudComputeUtils.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/util/VCloudComputeUtils.java",
                "status": "modified",
                "changes": 32,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/compute/util/VCloudComputeUtils.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -36,8 +36,9 @@\n import org.jclouds.vcloud.domain.ovf.ResourceType;\n import org.jclouds.vcloud.domain.ovf.VCloudNetworkAdapter;\n \n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.ImmutableSet.Builder;\n import com.google.common.collect.Iterables;\n-import com.google.common.collect.Sets;\n \n /**\n  * \n@@ -77,42 +78,41 @@ public static Credentials getCredentialsFrom(VAppTemplate vApp) {\n    public static Credentials getCredentialsFrom(Vm vm) {\n       String user = \"root\";\n       if (vm.getOperatingSystemSection() != null && vm.getOperatingSystemSection().getDescription() != null\n-               && vm.getOperatingSystemSection().getDescription().indexOf(\"Windows\") >= 0)\n+            && vm.getOperatingSystemSection().getDescription().indexOf(\"Windows\") >= 0)\n          user = \"Administrator\";\n       String password = null;\n       if (vm.getGuestCustomizationSection() != null)\n          password = vm.getGuestCustomizationSection().getAdminPassword();\n       return new Credentials(user, password);\n    }\n \n-   public static Set<String> getPublicIpsFromVApp(VApp vApp) {\n-      Set<String> ips = Sets.newLinkedHashSet();\n+   public static Set<String> getIpsFromVApp(VApp vApp) {\n       // TODO make this work with composite vApps\n       if (vApp.getChildren().size() == 0)\n-         return ips;\n+         return ImmutableSet.of();\n+      Builder<String> ips = ImmutableSet.<String> builder();\n       Vm vm = Iterables.get(vApp.getChildren(), 0);\n       // TODO: figure out how to differentiate public from private ip addresses\n       // assumption is that we'll do this from the network object, which may have\n       // enough data to tell whether or not it is a public network without string\n-      // parsing.  At worst, we could have properties set per cloud provider to\n-      // declare the networks which are public, then check against these in \n+      // parsing. At worst, we could have properties set per cloud provider to\n+      // declare the networks which are public, then check against these in\n       // networkconnection.getNetwork\n       if (vm.getNetworkConnectionSection() != null) {\n-         for (NetworkConnection connection : vm.getNetworkConnectionSection().getConnections())\n-            ips.add(connection.getIpAddress());\n+         for (NetworkConnection connection : vm.getNetworkConnectionSection().getConnections()) {\n+            if (connection.getIpAddress() != null)\n+               ips.add(connection.getIpAddress());\n+         }\n       } else {\n          for (ResourceAllocation net : filter(vm.getVirtualHardwareSection().getResourceAllocations(),\n-                  resourceType(ResourceType.ETHERNET_ADAPTER))) {\n+               resourceType(ResourceType.ETHERNET_ADAPTER))) {\n             if (net instanceof VCloudNetworkAdapter) {\n                VCloudNetworkAdapter vNet = VCloudNetworkAdapter.class.cast(net);\n-               ips.add(vNet.getIpAddress());\n+               if (vNet.getIpAddress() != null)\n+                  ips.add(vNet.getIpAddress());\n             }\n          }\n       }\n-      return ips;\n-   }\n-\n-   public static Set<String> getPrivateIpsFromVApp(VApp vApp) {\n-      return Sets.newLinkedHashSet();\n+      return ips.build();\n    }\n }",
                "deletions": 16
            },
            {
                "sha": "73dd87b5ce26577c08dee71370ffd63debdbc69d",
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/FindLocationForResourceTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/FindLocationForResourceTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/FindLocationForResourceTest.java",
                "status": "added",
                "changes": 67,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/FindLocationForResourceTest.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -0,0 +1,67 @@\n+/**\n+ *\n+ * Copyright (C) 2010 Cloud Conscious, LLC. <info@cloudconscious.com>\n+ *\n+ * ====================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ====================================================================\n+ */\n+\n+package org.jclouds.vcloud.compute.functions;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.net.URI;\n+import java.util.NoSuchElementException;\n+import java.util.Set;\n+\n+import org.jclouds.domain.Location;\n+import org.jclouds.domain.LocationBuilder;\n+import org.jclouds.domain.LocationScope;\n+import org.jclouds.vcloud.domain.internal.ReferenceTypeImpl;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ * Tests behavior of {@code FindLocationForResource}\n+ * \n+ * @author Adrian Cole\n+ */\n+@Test(groups = \"unit\")\n+public class FindLocationForResourceTest {\n+   public void testMatchWhenIdIsHref() {\n+      Location location = new LocationBuilder().id(\"http://foo\").description(\"description\")\n+            .scope(LocationScope.PROVIDER).build();\n+      FindLocationForResource converter = new FindLocationForResource(\n+            Suppliers.<Set<? extends Location>> ofInstance(ImmutableSet.<Location> of(location)));\n+      assertEquals(converter.apply(new ReferenceTypeImpl(\"name\", \"type\", URI.create(\"http://foo\"))), location);\n+   }\n+\n+   @Test(expectedExceptions = NoSuchElementException.class)\n+   public void testGracefulWhenHrefIsntLocationId() {\n+      FindLocationForResource converter = new FindLocationForResource(\n+            Suppliers.<Set<? extends Location>> ofInstance(ImmutableSet.<Location> of(new LocationBuilder()\n+                  .id(\"http://bar\").description(\"description\").scope(LocationScope.PROVIDER).build())));\n+      converter.apply(new ReferenceTypeImpl(\"name\", \"type\", URI.create(\"http://foo\")));\n+   }\n+\n+   @Test(expectedExceptions = NoSuchElementException.class)\n+   public void testGracefulWhenLocationIdIsntURI() {\n+      FindLocationForResource converter = new FindLocationForResource(\n+            Suppliers.<Set<? extends Location>> ofInstance(ImmutableSet.<Location> of(new LocationBuilder().id(\"1\")\n+                  .description(\"description\").scope(LocationScope.PROVIDER).build())));\n+      converter.apply(new ReferenceTypeImpl(\"name\", \"type\", URI.create(\"http://foo\")));\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "13792ec293ed28e66ee8d1010897a1ef619266a2",
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadataTest.java",
                "status": "added",
                "changes": 148,
                "additions": 148,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadataTest.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -0,0 +1,148 @@\n+/**\n+ *\n+ * Copyright (C) 2010 Cloud Conscious, LLC. <info@cloudconscious.com>\n+ *\n+ * ====================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ====================================================================\n+ */\n+\n+package org.jclouds.vcloud.compute.functions;\n+\n+import static com.google.common.base.Preconditions.checkNotNull;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.InputStream;\n+import java.util.Map;\n+import java.util.NoSuchElementException;\n+import java.util.Properties;\n+import java.util.Set;\n+\n+import javax.inject.Singleton;\n+\n+import org.jclouds.collect.Memoized;\n+import org.jclouds.compute.domain.Hardware;\n+import org.jclouds.compute.domain.NodeMetadata;\n+import org.jclouds.compute.domain.NodeState;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.Location;\n+import org.jclouds.domain.LocationBuilder;\n+import org.jclouds.domain.LocationScope;\n+import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.http.functions.ParseSax.Factory;\n+import org.jclouds.http.functions.config.SaxParserModule;\n+import org.jclouds.vcloud.VCloudPropertiesBuilder;\n+import org.jclouds.vcloud.compute.config.CommonVCloudComputeServiceContextModule;\n+import org.jclouds.vcloud.domain.Status;\n+import org.jclouds.vcloud.domain.VApp;\n+import org.jclouds.vcloud.xml.VAppHandler;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.base.Function;\n+import com.google.common.base.Supplier;\n+import com.google.common.base.Suppliers;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Maps;\n+import com.google.inject.AbstractModule;\n+import com.google.inject.Guice;\n+import com.google.inject.Injector;\n+import com.google.inject.Provides;\n+import com.google.inject.TypeLiteral;\n+import com.google.inject.name.Names;\n+\n+/**\n+ * Tests behavior of {@code VAppToNodeMetadata}\n+ * \n+ * @author Adrian Cole\n+ */\n+@Test(groups = \"unit\")\n+public class VAppToNodeMetadataTest {\n+\n+   public Injector createInjectorWithLocation(final Location location) {\n+      return Guice.createInjector(new SaxParserModule(), new AbstractModule() {\n+\n+         @Override\n+         protected void configure() {\n+            Properties props = new Properties();\n+            Names.bindProperties(binder(), checkNotNull(new VCloudPropertiesBuilder(props).build(), \"properties\"));\n+            bind(new TypeLiteral<Function<VApp, Hardware>>() {\n+            }).to(new TypeLiteral<HardwareForVApp>() {\n+            });\n+         }\n+\n+         @SuppressWarnings(\"unused\")\n+         @Memoized\n+         @Singleton\n+         @Provides\n+         Supplier<Set<? extends Location>> supplyLocations() {\n+            return Suppliers.<Set<? extends Location>> ofInstance(ImmutableSet.<Location> of(location));\n+         }\n+\n+         @SuppressWarnings(\"unused\")\n+         @Singleton\n+         @Provides\n+         Map<String, Credentials> supplyCreds() {\n+            return Maps.newConcurrentMap();\n+         }\n+\n+         @SuppressWarnings(\"unused\")\n+         @Singleton\n+         @Provides\n+         protected Map<Status, NodeState> provideVAppStatusToNodeState() {\n+            return CommonVCloudComputeServiceContextModule.VAPPSTATUS_TO_NODESTATE;\n+         }\n+\n+      });\n+   }\n+\n+   public void testWhenVDCIsLocation() {\n+      Location location = new LocationBuilder().id(\"https://1.1.1.1/api/v1.0/vdc/1\").description(\"description\")\n+            .scope(LocationScope.PROVIDER).build();\n+      Injector injector = createInjectorWithLocation(location);\n+      InputStream is = getClass().getResourceAsStream(\"/vapp-pool.xml\");\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      VApp result = factory.create(injector.getInstance(VAppHandler.class)).parse(is);\n+      VAppToNodeMetadata converter = injector.getInstance(VAppToNodeMetadata.class);\n+      NodeMetadata node = converter.apply(result);\n+      assertEquals(node.getLocation(), location);\n+      assertEquals(node.getPrivateAddresses(), ImmutableSet.of(\"172.16.7.230\"));\n+      assertEquals(node.getPublicAddresses(), ImmutableSet.of());\n+   }\n+\n+   public void testGracefulWhenNoIPs() {\n+      Location location = new LocationBuilder().id(\"https://1.1.1.1/api/v1.0/vdc/1\").description(\"description\")\n+            .scope(LocationScope.PROVIDER).build();\n+      Injector injector = createInjectorWithLocation(location);\n+      InputStream is = getClass().getResourceAsStream(\"/vapp-none.xml\");\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      VApp result = factory.create(injector.getInstance(VAppHandler.class)).parse(is);\n+      VAppToNodeMetadata converter = injector.getInstance(VAppToNodeMetadata.class);\n+      NodeMetadata node = converter.apply(result);\n+      assertEquals(node.getLocation(), location);\n+      assertEquals(node.getPrivateAddresses(), ImmutableSet.of());\n+      assertEquals(node.getPublicAddresses(), ImmutableSet.of());\n+   }\n+\n+   @Test(expectedExceptions = NoSuchElementException.class)\n+   public void testGracefulWhenVDCIsNotLocation() {\n+      Location location = new LocationBuilder().id(\"https://1.1.1.1/api/v1.0/vdc/11111\").description(\"description\")\n+            .scope(LocationScope.PROVIDER).build();\n+      Injector injector = createInjectorWithLocation(location);\n+      InputStream is = getClass().getResourceAsStream(\"/vapp-pool.xml\");\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      VApp result = factory.create(injector.getInstance(VAppHandler.class)).parse(is);\n+      VAppToNodeMetadata converter = injector.getInstance(VAppToNodeMetadata.class);\n+      NodeMetadata node = converter.apply(result);\n+      assertEquals(node.getLocation(), location);\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "523cd26429a91c8931b761060c50adb0e2d529e7",
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/xml/VAppHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/VAppHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/VAppHandlerTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/VAppHandlerTest.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -46,6 +46,7 @@\n  */\n @Test(groups = \"unit\")\n public class VAppHandlerTest {\n+\n    public void testRhelOffStatic() {\n       InputStream is = getClass().getResourceAsStream(\"/vapp-rhel-off-static.xml\");\n       Injector injector = Guice.createInjector(new SaxParserModule());\n@@ -55,8 +56,10 @@ public void testRhelOffStatic() {\n       assertEquals(result.getHref(), URI.create(\"https://vcenterprise.bluelock.com/api/v1.0/vApp/vapp-607806320\"));\n       assertEquals(result.getType(), \"application/vnd.vmware.vcloud.vApp+xml\");\n       assertEquals(result.getStatus(), Status.OFF);\n-      assertEquals(result.getVDC(), new ReferenceTypeImpl(null, VCloudMediaType.VDC_XML, URI\n-               .create(\"https://vcenterprise.bluelock.com/api/v1.0/vdc/1014839439\")));\n+      assertEquals(\n+            result.getVDC(),\n+            new ReferenceTypeImpl(null, VCloudMediaType.VDC_XML, URI\n+                  .create(\"https://vcenterprise.bluelock.com/api/v1.0/vdc/1014839439\")));\n       assertEquals(result.getDescription(), null);\n       assertEquals(result.getTasks(), ImmutableList.of());\n       assert result.isOvfDescriptorUploaded();",
                "deletions": 2
            },
            {
                "sha": "7343ec00e2ff04bd492fb70a6382cd3b90bb2d25",
                "filename": "apis/vcloud/src/test/resources/log4j.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/log4j.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/log4j.xml",
                "status": "added",
                "changes": 170,
                "additions": 170,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/log4j.xml?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -0,0 +1,170 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+    <!--\n+\n+\n+        Copyright (C) 2010 Cloud Conscious, LLC.\n+        <info@cloudconscious.com>\n+\n+        ====================================================================\n+        Licensed under the Apache License, Version 2.0 (the \"License\");\n+        you may not use this file except in compliance with the License.\n+        You may obtain a copy of the License at\n+\n+        http://www.apache.org/licenses/LICENSE-2.0 Unless required by\n+        applicable law or agreed to in writing, software distributed\n+        under the License is distributed on an \"AS IS\" BASIS, WITHOUT\n+        WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+        See the License for the specific language governing permissions\n+        and limitations under the License.\n+        ====================================================================\n+    -->\n+<!DOCTYPE log4j:configuration SYSTEM \"log4j.dtd\">\n+\n+    <!--\n+        For more configuration infromation and examples see the Apache\n+        Log4j website: http://logging.apache.org/log4j/\n+    -->\n+<log4j:configuration xmlns:log4j=\"http://jakarta.apache.org/log4j/\"\n+    debug=\"false\">\n+\n+    <!-- A time/date based rolling appender -->\n+    <appender name=\"WIREFILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n+        <param name=\"File\" value=\"target/test-data/jclouds-wire.log\" />\n+        <param name=\"Append\" value=\"true\" />\n+\n+        <!-- Rollover at midnight each day -->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\" />\n+\n+        <param name=\"Threshold\" value=\"TRACE\" />\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!-- The default pattern: Date Priority [Category] Message\\n -->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] (%t) %m%n\" />\n+\n+            <!--\n+                The full pattern: Date MS Priority [Category]\n+                (Thread:NDC) Message\\n <param name=\"ConversionPattern\"\n+                value=\"%d %-5r %-5p [%c] (%t:%x) %m%n\"/>\n+            -->\n+        </layout>\n+    </appender>\n+\n+    <!-- A time/date based rolling appender -->\n+    <appender name=\"FILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n+        <param name=\"File\" value=\"target/test-data/jclouds.log\" />\n+        <param name=\"Append\" value=\"true\" />\n+\n+        <!-- Rollover at midnight each day -->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\" />\n+\n+        <param name=\"Threshold\" value=\"TRACE\" />\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!-- The default pattern: Date Priority [Category] Message\\n -->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] (%t) %m%n\" />\n+\n+            <!--\n+                The full pattern: Date MS Priority [Category]\n+                (Thread:NDC) Message\\n <param name=\"ConversionPattern\"\n+                value=\"%d %-5r %-5p [%c] (%t:%x) %m%n\"/>\n+            -->\n+        </layout>\n+    </appender>\n+    \n+    <!-- A time/date based rolling appender -->\n+    <appender name=\"COMPUTEFILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n+        <param name=\"File\" value=\"target/test-data/jclouds-compute.log\" />\n+        <param name=\"Append\" value=\"true\" />\n+\n+        <!-- Rollover at midnight each day -->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\" />\n+\n+        <param name=\"Threshold\" value=\"TRACE\" />\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!-- The default pattern: Date Priority [Category] Message\\n -->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] (%t) %m%n\" />\n+\n+            <!--\n+                The full pattern: Date MS Priority [Category]\n+                (Thread:NDC) Message\\n <param name=\"ConversionPattern\"\n+                value=\"%d %-5r %-5p [%c] (%t:%x) %m%n\"/>\n+            -->\n+        </layout>\n+    </appender>\n+\n+    <!-- A time/date based rolling appender -->\n+    <appender name=\"SSHFILE\" class=\"org.apache.log4j.DailyRollingFileAppender\">\n+        <param name=\"File\" value=\"target/test-data/jclouds-ssh.log\" />\n+        <param name=\"Append\" value=\"true\" />\n+\n+        <!-- Rollover at midnight each day -->\n+        <param name=\"DatePattern\" value=\"'.'yyyy-MM-dd\" />\n+\n+        <param name=\"Threshold\" value=\"TRACE\" />\n+\n+        <layout class=\"org.apache.log4j.PatternLayout\">\n+            <!-- The default pattern: Date Priority [Category] Message\\n -->\n+            <param name=\"ConversionPattern\" value=\"%d %-5p [%c] (%t) %m%n\" />\n+\n+            <!--\n+                The full pattern: Date MS Priority [Category]\n+                (Thread:NDC) Message\\n <param name=\"ConversionPattern\"\n+                value=\"%d %-5r %-5p [%c] (%t:%x) %m%n\"/>\n+            -->\n+        </layout>\n+    </appender>\n+\n+    <appender name=\"ASYNCCOMPUTE\" class=\"org.apache.log4j.AsyncAppender\">\n+        <appender-ref ref=\"COMPUTEFILE\" />\n+    </appender>\n+    \n+    <appender name=\"ASYNCSSH\" class=\"org.apache.log4j.AsyncAppender\">\n+        <appender-ref ref=\"SSHFILE\" />\n+    </appender>\n+\n+    <appender name=\"ASYNC\" class=\"org.apache.log4j.AsyncAppender\">\n+        <appender-ref ref=\"FILE\" />\n+    </appender>\n+\n+    <appender name=\"ASYNCWIRE\" class=\"org.apache.log4j.AsyncAppender\">\n+        <appender-ref ref=\"WIREFILE\" />\n+    </appender>\n+\n+    <!-- ================ -->\n+    <!-- Limit categories -->\n+    <!-- ================ -->\n+\n+    <category name=\"org.jclouds\">\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"ASYNC\" />\n+    </category>\n+\n+    <category name=\"jclouds.headers\">\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"ASYNCWIRE\" />\n+    </category>\n+    \n+    <category name=\"jclouds.ssh\">\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"ASYNCSSH\" />\n+    </category>\n+    \n+    <category name=\"jclouds.wire\">\n+        <priority value=\"DEBUG\" />\n+        <appender-ref ref=\"ASYNCWIRE\" />\n+    </category>\n+\n+    <category name=\"jclouds.compute\">\n+        <priority value=\"TRACE\" />\n+        <appender-ref ref=\"ASYNCCOMPUTE\" />\n+    </category>\n+    <!-- ======================= -->\n+    <!-- Setup the Root category -->\n+    <!-- ======================= -->\n+\n+    <root>\n+        <priority value=\"WARN\" />\n+    </root>\n+\n+</log4j:configuration>\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "eb7e7a1f51d5b58a795b220e3b8bea045cb6df57",
                "filename": "apis/vcloud/src/test/resources/vapp-none.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/vapp-none.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/vapp-none.xml",
                "status": "added",
                "changes": 237,
                "additions": 237,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/vapp-none.xml?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -0,0 +1,237 @@\n+<VApp xmlns=\"http://www.vmware.com/vcloud/v1\" xmlns:ovf=\"http://schemas.dmtf.org/ovf/envelope/1\" xmlns:vssd=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData\" xmlns:rasd=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData\" deployed=\"true\" status=\"4\" name=\"customize-750\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2.22.0/CIM_VirtualSystemSettingData.xsd http://schemas.dmtf.org/ovf/envelope/1 http://schemas.dmtf.org/ovf/envelope/1/dsp8023_1.1.0.xsd http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2.22.0/CIM_ResourceAllocationSettingData.xsd http://www.vmware.com/vcloud/v1 http://1.1.1.1/api/v1.0/schema/master.xsd\">\n+    <Link rel=\"power:powerOff\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/powerOff\"/>\n+    <Link rel=\"power:reboot\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/reboot\"/>\n+    <Link rel=\"power:reset\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/reset\"/>\n+    <Link rel=\"power:shutdown\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/shutdown\"/>\n+    <Link rel=\"power:suspend\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/suspend\"/>\n+    <Link rel=\"deploy\" type=\"application/vnd.vmware.vcloud.deployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/action/deploy\"/>\n+    <Link rel=\"undeploy\" type=\"application/vnd.vmware.vcloud.undeployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-98934665/action/undeploy\"/>\n+    <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.controlAccess+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/controlAccess/\"/>\n+    <Link rel=\"controlAccess\" type=\"application/vnd.vmware.vcloud.controlAccess+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/action/controlAccess\"/>\n+    <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.vdc+xml\" href=\"https://1.1.1.1/api/v1.0/vdc/1\"/>\n+    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\"/>\n+    <LeaseSettingsSection type=\"application/vnd.vmware.vcloud.leaseSettingsSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/leaseSettingsSection/\" ovf:required=\"false\">\n+        <ovf:Info>Lease settings section</ovf:Info>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.leaseSettingsSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/leaseSettingsSection/\"/>\n+        <DeploymentLeaseInSeconds>0</DeploymentLeaseInSeconds>\n+        <StorageLeaseInSeconds>7776000</StorageLeaseInSeconds>\n+    </LeaseSettingsSection>\n+    <ovf:StartupSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/startupSection/\" vcloud:type=\"application/vnd.vmware.vcloud.startupSection+xml\">\n+        <ovf:Info>VApp startup section</ovf:Info>\n+        <ovf:Item ovf:stopDelay=\"0\" ovf:stopAction=\"powerOff\" ovf:startDelay=\"0\" ovf:startAction=\"powerOn\" ovf:order=\"0\" ovf:id=\"Centos-5.5_x64\"/>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.startupSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/startupSection/\"/>\n+    </ovf:StartupSection>\n+    <ovf:NetworkSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/networkSection/\" vcloud:type=\"application/vnd.vmware.vcloud.networkSection+xml\">\n+        <ovf:Info>The list of logical networks</ovf:Info>\n+        <ovf:Network ovf:name=\"none\">\n+            <ovf:Description/>\n+        </ovf:Network>\n+        <ovf:Network ovf:name=\"none\">\n+            <ovf:Description>This is a special place-holder used for disconnected network interfaces.</ovf:Description>\n+        </ovf:Network>\n+    </ovf:NetworkSection>    <NetworkConfigSection type=\"application/vnd.vmware.vcloud.networkConfigSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp\n+-1/networkConfigSection/\" ovf:required=\"false\">\n+        <ovf:Info>The configuration parameters for logical networks</ovf:Info>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.networkConfigSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/networkConfigSection/\"/>\n+        <NetworkConfig networkName=\"none\">\n+            <Description/>\n+            <Configuration>\n+                <IpScope>\n+                    <IsInherited>true</IsInherited>\n+                    <Gateway>172.16.7.1</Gateway>\n+                    <Netmask>255.255.255.0</Netmask>\n+                    <Dns1>208.95.232.10</Dns1>\n+                    <Dns2>208.95.232.11</Dns2>\n+                    <IpRanges>\n+                        <IpRange>\n+                            <StartAddress>172.16.7.230</StartAddress>\n+                            <EndAddress>172.16.7.239</EndAddress>\n+                        </IpRange>\n+                    </IpRanges>\n+                </IpScope>\n+                <ParentNetwork type=\"application/vnd.vmware.vcloud.network+xml\" name=\"Direct\" href=\"https://1.1.1.1/api/v1.0/network/282371363\"/>\n+                <FenceMode>bridged</FenceMode>\n+                <Features>\n+                    <DhcpService>\n+                        <IsEnabled>false</IsEnabled>\n+                        <DefaultLeaseTime>3600</DefaultLeaseTime>\n+                        <MaxLeaseTime>7200</MaxLeaseTime>\n+                        <IpRange>\n+                            <StartAddress>172.16.7.2</StartAddress>\n+                            <EndAddress>172.16.7.229</EndAddress>\n+                        </IpRange>\n+                    </DhcpService>\n+                    <FirewallService>\n+                        <IsEnabled>true</IsEnabled>\n+                    </FirewallService>\n+                    <NatService>\n+                        <IsEnabled>true</IsEnabled>\n+                        <NatType>ipTranslation</NatType>\n+                        <Policy>allowTraffic</Policy>\n+                    </NatService>\n+                </Features>\n+            </Configuration>\n+            <IsDeployed>true</IsDeployed>\n+        </NetworkConfig>\n+        <NetworkConfig networkName=\"none\">\n+            <Description>This is a special place-holder used for disconnected network interfaces.</Description>\n+            <Configuration>\n+                <IpScope>\n+                    <IsInherited>false</IsInherited>\n+                    <Gateway>196.254.254.254</Gateway>\n+                    <Netmask>255.255.0.0</Netmask>\n+                    <Dns1>196.254.254.254</Dns1>\n+                </IpScope>\n+                <FenceMode>isolated</FenceMode>\n+            </Configuration>\n+            <IsDeployed>false</IsDeployed>\n+        </NetworkConfig>\n+    </NetworkConfigSection>\n+    <Children>\n+        <Vm deployed=\"true\" status=\"4\" name=\"Centos-5.5_x64\" type=\"application/vnd.vmware.vcloud.vm+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1\">\n+            <Link rel=\"power:powerOff\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/powerOff\"/>\n+            <Link rel=\"power:reboot\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/reboot\"/>\n+            <Link rel=\"power:reset\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/reset\"/>\n+            <Link rel=\"power:shutdown\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/shutdown\"/>\n+            <Link rel=\"power:suspend\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/suspend\"/>\n+            <Link rel=\"undeploy\" type=\"application/vnd.vmware.vcloud.undeployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/action/undeploy\"/>\n+            <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\"/>\n+            <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.vm+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1\"/>\n+            <Link rel=\"screen:thumbnail\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/screen\"/>\n+            <Link rel=\"screen:acquireTicket\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/screen/action/acquireTicket\"/>\n+            <Link rel=\"media:insertMedia\" type=\"application/vnd.vmware.vcloud.mediaInsertOrEjectParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/media/action/insertMedia\"/>\n+            <Link rel=\"media:ejectMedia\" type=\"application/vnd.vmware.vcloud.mediaInsertOrEjectParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/media/action/ejectMedia\"/>\n+            <Description/>\n+            <ovf:VirtualHardwareSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/\" vcloud:type=\"application/vnd.vmware.vcloud.virtualHardwareSection+xml\">\n+                <ovf:Info>Virtual hardware requirements</ovf:Info>\n+                <ovf:System>\n+                    <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>\n+                    <vssd:InstanceID>0</vssd:InstanceID>\n+                    <vssd:VirtualSystemIdentifier>Centos-5.5_x64</vssd:VirtualSystemIdentifier>\n+                    <vssd:VirtualSystemType>vmx-07</vssd:VirtualSystemType>\n+                </ovf:System>\n+                <ovf:Item>\n+                    <rasd:Address>00:50:56:01:02:38</rasd:Address>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>\n+                    <rasd:Connection vcloud:primaryNetworkConnection=\"true\" vcloud:ipAddressingMode=\"NONE\">none</rasd:Connection>\n+                    <rasd:Description>PCNet32 ethernet adapter</rasd:Description>\n+                    <rasd:ElementName>Network adapter 0</rasd:ElementName>\n+                    <rasd:InstanceID>1</rasd:InstanceID>\n+                    <rasd:ResourceSubType>PCNet32</rasd:ResourceSubType>\n+                    <rasd:ResourceType>10</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:Address>0</rasd:Address>\n+                    <rasd:Description>SCSI Controller</rasd:Description>\n+                    <rasd:ElementName>SCSI Controller 0</rasd:ElementName>\n+                    <rasd:InstanceID>2</rasd:InstanceID>\n+                    <rasd:ResourceSubType>lsilogic</rasd:ResourceSubType>\n+                    <rasd:ResourceType>6</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:Description>Hard disk</rasd:Description>\n+                    <rasd:ElementName>Hard disk 1</rasd:ElementName>\n+                    <rasd:HostResource vcloud:capacity=\"15360\" vcloud:busType=\"6\" vcloud:busSubType=\"lsilogic\"/>\n+                    <rasd:InstanceID>2000</rasd:InstanceID>\n+                    <rasd:Parent>2</rasd:Parent>\n+                    <rasd:ResourceType>17</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:Address>0</rasd:Address>\n+                    <rasd:Description>IDE Controller</rasd:Description>\n+                    <rasd:ElementName>IDE Controller 0</rasd:ElementName>\n+                    <rasd:InstanceID>3</rasd:InstanceID>\n+                    <rasd:ResourceType>5</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>\n+                    <rasd:Description>CD/DVD Drive</rasd:Description>\n+                    <rasd:ElementName>CD/DVD Drive 1</rasd:ElementName>\n+                    <rasd:HostResource/>\n+                    <rasd:InstanceID>3002</rasd:InstanceID>\n+                    <rasd:Parent>3</rasd:Parent>\n+                    <rasd:ResourceType>15</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>\n+                    <rasd:Description>Floppy Drive</rasd:Description>\n+                    <rasd:ElementName>Floppy Drive 1</rasd:ElementName>\n+                    <rasd:HostResource/>\n+                    <rasd:InstanceID>8000</rasd:InstanceID>\n+                    <rasd:ResourceType>14</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\" vcloud:type=\"application/vnd.vmware.vcloud.rasdItem+xml\">\n+                    <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>\n+                    <rasd:Description>Number of Virtual CPUs</rasd:Description>\n+                    <rasd:ElementName>1 virtual CPU(s)</rasd:ElementName>\n+                    <rasd:InstanceID>4</rasd:InstanceID>\n+                    <rasd:Reservation>0</rasd:Reservation>\n+                    <rasd:ResourceType>3</rasd:ResourceType>\n+                    <rasd:VirtualQuantity>1</rasd:VirtualQuantity>\n+                    <rasd:Weight>0</rasd:Weight>\n+                    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                </ovf:Item>\n+                <ovf:Item vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\" vcloud:type=\"application/vnd.vmware.vcloud.rasdItem+xml\">\n+                    <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>\n+                    <rasd:Description>Memory Size</rasd:Description>\n+                    <rasd:ElementName>2048 MB of memory</rasd:ElementName>\n+                    <rasd:InstanceID>5</rasd:InstanceID>\n+                    <rasd:Reservation>0</rasd:Reservation>\n+                    <rasd:ResourceType>4</rasd:ResourceType>\n+                    <rasd:VirtualQuantity>2048</rasd:VirtualQuantity>\n+                    <rasd:Weight>0</rasd:Weight>\n+                    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                </ovf:Item>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.virtualHardwareSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/disks\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/disks\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/media\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/networkCards\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/networkCards\"/>\n+            </ovf:VirtualHardwareSection>\n+            <ovf:OperatingSystemSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" xmlns:vmw=\"http://www.vmware.com/schema/ovf\" ovf:id=\"80\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/operatingSystemSection/\" vcloud:type=\"application/vnd.vmware.vcloud.operatingSystemSection+xml\" vmw:osType=\"rhel5_64Guest\">\n+                <ovf:Info>Specifies the operating system installed</ovf:Info>\n+                <ovf:Description>Red Hat Enterprise Linux 5 (64-bit)</ovf:Description>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.operatingSystemSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/operatingSystemSection/\"/>\n+            </ovf:OperatingSystemSection>\n+            <NetworkConnectionSection type=\"application/vnd.vmware.vcloud.networkConnectionSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/networkConnectionSection/\" ovf:required=\"false\">\n+                <ovf:Info>Specifies the available VM network connections</ovf:Info>\n+                <PrimaryNetworkConnectionIndex>0</PrimaryNetworkConnectionIndex>\n+                <NetworkConnection network=\"none\">\n+                    <NetworkConnectionIndex>0</NetworkConnectionIndex>\n+                    <IsConnected>false</IsConnected>\n+                    <MACAddress>00:50:56:01:02:38</MACAddress>\n+                    <IpAddressAllocationMode>NONE</IpAddressAllocationMode>\n+                </NetworkConnection>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.networkConnectionSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/networkConnectionSection/\"/>\n+            </NetworkConnectionSection>\n+            <GuestCustomizationSection type=\"application/vnd.vmware.vcloud.guestCustomizationSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/guestCustomizationSection/\" ovf:required=\"false\">\n+                <ovf:Info>Specifies Guest OS Customization Settings</ovf:Info>\n+                <Enabled>true</Enabled>\n+                <ChangeSid>false</ChangeSid>\n+                <VirtualMachineId>1</VirtualMachineId>\n+                <JoinDomainEnabled>false</JoinDomainEnabled>\n+                <UseOrgSettings>false</UseOrgSettings>\n+                <AdminPasswordEnabled>true</AdminPasswordEnabled>\n+                <AdminPasswordAuto>true</AdminPasswordAuto>\n+                <AdminPassword>secret</AdminPassword>\n+                <ResetPasswordRequired>false</ResetPasswordRequired>\n+                <CustomizationScript>cat &gt; /root/foo.txt&lt;&lt;EOF\n+I love candy\n+EOF\n+</CustomizationScript>\n+                <ComputerName>Centos-5.5_x64</ComputerName>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.guestCustomizationSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/guestCustomizationSection/\"/>\n+            </GuestCustomizationSection>\n+            <VAppScopedLocalId>Centos-5.5_x64</VAppScopedLocalId>\n+        </Vm>\n+    </Children>\n+</VApp>",
                "deletions": 0
            },
            {
                "sha": "13d9432242d8cfd782fc7b7c87fd9b87b317eec9",
                "filename": "apis/vcloud/src/test/resources/vapp-pool.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/vapp-pool.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloud/src/test/resources/vapp-pool.xml",
                "status": "added",
                "changes": 227,
                "additions": 227,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/vapp-pool.xml?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -0,0 +1,227 @@\n+<VApp xmlns=\"http://www.vmware.com/vcloud/v1\" xmlns:ovf=\"http://schemas.dmtf.org/ovf/envelope/1\" xmlns:vssd=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData\" xmlns:rasd=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData\" deployed=\"true\" status=\"4\" name=\"my-appExample\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_VirtualSystemSettingData http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2.22.0/CIM_VirtualSystemSettingData.xsd http://schemas.dmtf.org/ovf/envelope/1 http://schemas.dmtf.org/ovf/envelope/1/dsp8023_1.1.0.xsd http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2/CIM_ResourceAllocationSettingData http://schemas.dmtf.org/wbem/wscim/1/cim-schema/2.22.0/CIM_ResourceAllocationSettingData.xsd http://www.vmware.com/vcloud/v1 http://1.1.1.1/api/v1.0/schema/master.xsd\">\n+    <Link rel=\"power:powerOff\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/powerOff\"/>\n+    <Link rel=\"power:reboot\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/reboot\"/>\n+    <Link rel=\"power:reset\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/reset\"/>\n+    <Link rel=\"power:shutdown\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/shutdown\"/>\n+    <Link rel=\"power:suspend\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/power/action/suspend\"/>\n+    <Link rel=\"deploy\" type=\"application/vnd.vmware.vcloud.deployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/action/deploy\"/>\n+    <Link rel=\"undeploy\" type=\"application/vnd.vmware.vcloud.undeployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/action/undeploy\"/>\n+    <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.controlAccess+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/controlAccess/\"/>\n+    <Link rel=\"controlAccess\" type=\"application/vnd.vmware.vcloud.controlAccess+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/action/controlAccess\"/>\n+    <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.vdc+xml\" href=\"https://1.1.1.1/api/v1.0/vdc/1\"/>\n+    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\"/>\n+    <Description/>\n+    <LeaseSettingsSection type=\"application/vnd.vmware.vcloud.leaseSettingsSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/leaseSettingsSection/\" ovf:required=\"false\">\n+        <ovf:Info>Lease settings section</ovf:Info>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.leaseSettingsSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/leaseSettingsSection/\"/>\n+        <DeploymentLeaseInSeconds>0</DeploymentLeaseInSeconds>\n+        <StorageLeaseInSeconds>0</StorageLeaseInSeconds>\n+    </LeaseSettingsSection>\n+    <ovf:StartupSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/startupSection/\" vcloud:type=\"application/vnd.vmware.vcloud.startupSection+xml\">\n+        <ovf:Info>VApp startup section</ovf:Info>\n+        <ovf:Item ovf:stopDelay=\"0\" ovf:stopAction=\"powerOff\" ovf:startDelay=\"0\" ovf:startAction=\"powerOn\" ovf:order=\"0\" ovf:id=\"my-app\"/>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.startupSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/startupSection/\"/>\n+    </ovf:StartupSection>\n+    <ovf:NetworkSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/networkSection/\" vcloud:type=\"application/vnd.vmware.vcloud.networkSection+xml\">\n+        <ovf:Info>The list of logical networks</ovf:Info>\n+        <ovf:Network ovf:name=\"Direct\">\n+            <ovf:Description/>\n+        </ovf:Network>\n+    </ovf:NetworkSection>\n+    <NetworkConfigSection type=\"application/vnd.vmware.vcloud.networkConfigSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/networkConfigSection/\" ovf:required=\"false\">\n+        <ovf:Info>The configuration parameters for logical networks</ovf:Info>\n+        <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.networkConfigSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1/networkConfigSection/\"/>\n+        <NetworkConfig networkName=\"Direct\">\n+            <Description/>\n+            <Configuration>\n+                <IpScope>\n+                    <IsInherited>true</IsInherited>\n+                    <Gateway>172.16.7.1</Gateway>\n+                    <Netmask>255.255.255.0</Netmask>\n+                    <Dns1>1.1.1.2</Dns1>\n+                    <Dns2>1.1.1.3</Dns2>\n+                    <IpRanges>\n+                        <IpRange>\n+                            <StartAddress>172.16.7.230</StartAddress>\n+                            <EndAddress>172.16.7.239</EndAddress>\n+                        </IpRange>\n+                    </IpRanges>\n+                </IpScope>\n+                <ParentNetwork type=\"application/vnd.vmware.vcloud.network+xml\" name=\"Direct\" href=\"https://1.1.1.1/api/v1.0/network/282371363\"/>\n+                <FenceMode>bridged</FenceMode>\n+                <Features>\n+                    <DhcpService>\n+                        <IsEnabled>false</IsEnabled>\n+                        <DefaultLeaseTime>3600</DefaultLeaseTime>\n+                        <MaxLeaseTime>7200</MaxLeaseTime>\n+                        <IpRange>\n+                            <StartAddress>172.16.7.2</StartAddress>\n+                            <EndAddress>172.16.7.229</EndAddress>\n+                        </IpRange>\n+                    </DhcpService>\n+                    <FirewallService>\n+                        <IsEnabled>true</IsEnabled>\n+                    </FirewallService>\n+                    <NatService>\n+                        <IsEnabled>true</IsEnabled>\n+                        <NatType>ipTranslation</NatType>\n+                        <Policy>allowTraffic</Policy>\n+                        <NatRule>\n+                            <OneToOneVmRule>\n+                                <MappingMode>automatic</MappingMode>\n+                                <VAppScopedVmId>100c208b-4f43-40bb-98d6-a046f6e48c3a</VAppScopedVmId>\n+                                <VmNicId>0</VmNicId>\n+                            </OneToOneVmRule>\n+                        </NatRule>\n+                    </NatService>\n+                </Features>\n+            </Configuration>\n+            <IsDeployed>true</IsDeployed>\n+        </NetworkConfig>\n+    </NetworkConfigSection>\n+    <Children>\n+        <Vm deployed=\"true\" status=\"4\" name=\"my-app\" type=\"application/vnd.vmware.vcloud.vm+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1\">\n+            <Link rel=\"power:powerOff\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/powerOff\"/>\n+            <Link rel=\"power:reboot\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/reboot\"/>\n+            <Link rel=\"power:reset\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/reset\"/>\n+            <Link rel=\"power:shutdown\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/shutdown\"/>\n+            <Link rel=\"power:suspend\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/power/action/suspend\"/>\n+            <Link rel=\"undeploy\" type=\"application/vnd.vmware.vcloud.undeployVAppParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/action/undeploy\"/>\n+            <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.vApp+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vapp-1\"/>\n+            <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.vm+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1\"/>\n+            <Link rel=\"screen:thumbnail\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/screen\"/>\n+            <Link rel=\"screen:acquireTicket\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/screen/action/acquireTicket\"/>\n+            <Link rel=\"media:insertMedia\" type=\"application/vnd.vmware.vcloud.mediaInsertOrEjectParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/media/action/insertMedia\"/>\n+            <Link rel=\"media:ejectMedia\" type=\"application/vnd.vmware.vcloud.mediaInsertOrEjectParams+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/media/action/ejectMedia\"/>\n+            <Description/>\n+            <ovf:VirtualHardwareSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/\" vcloud:type=\"application/vnd.vmware.vcloud.virtualHardwareSection+xml\">\n+                <ovf:Info>Virtual hardware requirements</ovf:Info>\n+                <ovf:System>\n+                    <vssd:ElementName>Virtual Hardware Family</vssd:ElementName>\n+                    <vssd:InstanceID>0</vssd:InstanceID>\n+                    <vssd:VirtualSystemIdentifier>my-app</vssd:VirtualSystemIdentifier>\n+                    <vssd:VirtualSystemType>vmx-07</vssd:VirtualSystemType>\n+                </ovf:System>\n+                <ovf:Item>\n+                    <rasd:Address>00:50:56:01:02:33</rasd:Address>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>true</rasd:AutomaticAllocation>\n+                    <rasd:Connection vcloud:ipAddress=\"172.16.7.230\" vcloud:primaryNetworkConnection=\"true\" vcloud:ipAddressingMode=\"POOL\">Direct</rasd:Connection>\n+                    <rasd:Description>PCNet32 ethernet adapter</rasd:Description>\n+                    <rasd:ElementName>Network adapter 0</rasd:ElementName>\n+                    <rasd:InstanceID>1</rasd:InstanceID>\n+                    <rasd:ResourceSubType>PCNet32</rasd:ResourceSubType>\n+                    <rasd:ResourceType>10</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:Address>0</rasd:Address>\n+                    <rasd:Description>SCSI Controller</rasd:Description>\n+                    <rasd:ElementName>SCSI Controller 0</rasd:ElementName>\n+                    <rasd:InstanceID>2</rasd:InstanceID>\n+                    <rasd:ResourceSubType>lsilogic</rasd:ResourceSubType>\n+                    <rasd:ResourceType>6</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:Description>Hard disk</rasd:Description>\n+                    <rasd:ElementName>Hard disk 1</rasd:ElementName>\n+                    <rasd:HostResource vcloud:capacity=\"15360\" vcloud:busType=\"6\" vcloud:busSubType=\"lsilogic\"/>\n+                    <rasd:InstanceID>2000</rasd:InstanceID>\n+                    <rasd:Parent>2</rasd:Parent>\n+                    <rasd:ResourceType>17</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:Address>0</rasd:Address>\n+                    <rasd:Description>IDE Controller</rasd:Description>\n+                    <rasd:ElementName>IDE Controller 0</rasd:ElementName>\n+                    <rasd:InstanceID>3</rasd:InstanceID>\n+                    <rasd:ResourceType>5</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>\n+                    <rasd:Description>CD/DVD Drive</rasd:Description>\n+                    <rasd:ElementName>CD/DVD Drive 1</rasd:ElementName>\n+                    <rasd:HostResource/>\n+                    <rasd:InstanceID>3002</rasd:InstanceID>\n+                    <rasd:Parent>3</rasd:Parent>\n+                    <rasd:ResourceType>15</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item>\n+                    <rasd:AddressOnParent>0</rasd:AddressOnParent>\n+                    <rasd:AutomaticAllocation>false</rasd:AutomaticAllocation>\n+                    <rasd:Description>Floppy Drive</rasd:Description>\n+                    <rasd:ElementName>Floppy Drive 1</rasd:ElementName>\n+                    <rasd:HostResource/>\n+                    <rasd:InstanceID>8000</rasd:InstanceID>\n+                    <rasd:ResourceType>14</rasd:ResourceType>\n+                </ovf:Item>\n+                <ovf:Item vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\" vcloud:type=\"application/vnd.vmware.vcloud.rasdItem+xml\">\n+                    <rasd:AllocationUnits>hertz * 10^6</rasd:AllocationUnits>\n+                    <rasd:Description>Number of Virtual CPUs</rasd:Description>\n+                    <rasd:ElementName>1 virtual CPU(s)</rasd:ElementName>\n+                    <rasd:InstanceID>4</rasd:InstanceID>\n+                    <rasd:Reservation>0</rasd:Reservation>\n+                    <rasd:ResourceType>3</rasd:ResourceType>\n+                    <rasd:VirtualQuantity>1</rasd:VirtualQuantity>\n+                    <rasd:Weight>0</rasd:Weight>\n+                    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                </ovf:Item>\n+                <ovf:Item vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\" vcloud:type=\"application/vnd.vmware.vcloud.rasdItem+xml\">\n+                    <rasd:AllocationUnits>byte * 2^20</rasd:AllocationUnits>\n+                    <rasd:Description>Memory Size</rasd:Description>\n+                    <rasd:ElementName>2048 MB of memory</rasd:ElementName>\n+                    <rasd:InstanceID>5</rasd:InstanceID>\n+                    <rasd:Reservation>0</rasd:Reservation>\n+                    <rasd:ResourceType>4</rasd:ResourceType>\n+                    <rasd:VirtualQuantity>2048</rasd:VirtualQuantity>\n+                    <rasd:Weight>0</rasd:Weight>\n+                    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                </ovf:Item>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.virtualHardwareSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/cpu\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItem+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/memory\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/disks\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/disks\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/media\"/>\n+                <Link rel=\"down\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/networkCards\"/>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.rasdItemsList+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/virtualHardwareSection/networkCards\"/>\n+            </ovf:VirtualHardwareSection>\n+            <ovf:OperatingSystemSection xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" xmlns:vmw=\"http://www.vmware.com/schema/ovf\" ovf:id=\"80\" vcloud:href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/operatingSystemSection/\" vcloud:type=\"application/vnd.vmware.vcloud.operatingSystemSection+xml\" vmw:osType=\"rhel5_64Guest\">\n+                <ovf:Info>Specifies the operating system installed</ovf:Info>\n+                <ovf:Description>Red Hat Enterprise Linux 5 (64-bit)</ovf:Description>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.operatingSystemSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/operatingSystemSection/\"/>\n+            </ovf:OperatingSystemSection>\n+            <NetworkConnectionSection type=\"application/vnd.vmware.vcloud.networkConnectionSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/networkConnectionSection/\" ovf:required=\"false\">\n+                <ovf:Info>Specifies the available VM network connections</ovf:Info>\n+                <PrimaryNetworkConnectionIndex>0</PrimaryNetworkConnectionIndex>\n+                <NetworkConnection network=\"Direct\">\n+                    <NetworkConnectionIndex>0</NetworkConnectionIndex>\n+                    <IpAddress>172.16.7.230</IpAddress>\n+                    <IsConnected>true</IsConnected>\n+                    <MACAddress>00:50:56:01:02:33</MACAddress>\n+                    <IpAddressAllocationMode>POOL</IpAddressAllocationMode>\n+                </NetworkConnection>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.networkConnectionSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/networkConnectionSection/\"/>\n+            </NetworkConnectionSection>\n+            <GuestCustomizationSection type=\"application/vnd.vmware.vcloud.guestCustomizationSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/guestCustomizationSection/\" ovf:required=\"false\">\n+                <ovf:Info>Specifies Guest OS Customization Settings</ovf:Info>\n+                <Enabled>true</Enabled>\n+                <ChangeSid>false</ChangeSid>\n+                <VirtualMachineId>1</VirtualMachineId>\n+                <JoinDomainEnabled>false</JoinDomainEnabled>\n+                <UseOrgSettings>false</UseOrgSettings>\n+                <AdminPasswordEnabled>true</AdminPasswordEnabled>\n+                <AdminPasswordAuto>true</AdminPasswordAuto>\n+                <AdminPassword>Favor</AdminPassword>\n+                <ResetPasswordRequired>false</ResetPasswordRequired>\n+                <CustomizationScript/>\n+                <ComputerName>my-app</ComputerName>\n+                <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.guestCustomizationSection+xml\" href=\"https://1.1.1.1/api/v1.0/vApp/vm-1/guestCustomizationSection/\"/>\n+            </GuestCustomizationSection>\n+            <VAppScopedLocalId>100c208b-4f43-40bb-98d6-a046f6e48c3a</VAppScopedLocalId>\n+        </Vm>\n+    </Children>\n+</VApp>",
                "deletions": 0
            },
            {
                "sha": "9d8be3b626474692effc4518b8f17253cad639e1",
                "filename": "apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudComputeServiceContextModuleTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudComputeServiceContextModuleTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudComputeServiceContextModuleTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudComputeServiceContextModuleTest.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -36,7 +36,7 @@ public void testAllStatusCovered() {\n       for (Status state : EnumSet.allOf(Status.class).complementOf(\n                EnumSet.of(Status.PENDING_DESCRIPTOR, Status.PENDING_CONTENTS, Status.COPYING, Status.QUARANTINED,\n                         Status.QUARANTINE_EXPIRED))) {\n-         assert VCloudExpressComputeServiceContextModule.vAppStatusToNodeState.containsKey(state) : state;\n+         assert VCloudExpressComputeServiceContextModule.VAPPSTATUS_TO_NODESTATE.containsKey(state) : state;\n       }\n \n    }",
                "deletions": 1
            },
            {
                "sha": "11e1243c1d99981062ce42a3f38c9cf024f3273f",
                "filename": "apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudExpressComputeServiceContextModuleTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudExpressComputeServiceContextModuleTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudExpressComputeServiceContextModuleTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloudexpress/src/test/java/org/jclouds/vcloud/compute/config/VCloudExpressComputeServiceContextModuleTest.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -36,7 +36,7 @@ public void testAllStatusCovered() {\n       for (Status state : EnumSet.allOf(Status.class).complementOf(\n                EnumSet.of(Status.PENDING_DESCRIPTOR, Status.PENDING_CONTENTS, Status.COPYING, Status.QUARANTINED,\n                         Status.QUARANTINE_EXPIRED))) {\n-         assert VCloudExpressComputeServiceContextModule.vAppStatusToNodeState.containsKey(state) : state;\n+         assert VCloudExpressComputeServiceContextModule.VAPPSTATUS_TO_NODESTATE.containsKey(state) : state;\n       }\n \n    }",
                "deletions": 1
            },
            {
                "sha": "a380f7cb4b04c9971bb81959a17a209467d032b0",
                "filename": "common/vcloud/src/main/java/org/jclouds/vcloud/compute/config/CommonVCloudComputeServiceContextModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/common/vcloud/src/main/java/org/jclouds/vcloud/compute/config/CommonVCloudComputeServiceContextModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/common/vcloud/src/main/java/org/jclouds/vcloud/compute/config/CommonVCloudComputeServiceContextModule.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/vcloud/src/main/java/org/jclouds/vcloud/compute/config/CommonVCloudComputeServiceContextModule.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -42,18 +42,18 @@\n public abstract class CommonVCloudComputeServiceContextModule extends BaseComputeServiceContextModule {\n \n    @VisibleForTesting\n-   static final Map<Status, NodeState> vAppStatusToNodeState = ImmutableMap.<Status, NodeState> builder().put(\n-            Status.OFF, NodeState.SUSPENDED).put(Status.ON, NodeState.RUNNING).put(Status.RESOLVED, NodeState.PENDING)\n-            .put(Status.ERROR, NodeState.ERROR).put(Status.UNRECOGNIZED, NodeState.UNRECOGNIZED).put(Status.DEPLOYED,\n-                     NodeState.PENDING).put(Status.INCONSISTENT, NodeState.PENDING).put(Status.UNKNOWN,\n-                     NodeState.UNRECOGNIZED).put(Status.MIXED, NodeState.PENDING).put(Status.WAITING_FOR_INPUT,\n-                     NodeState.PENDING).put(Status.SUSPENDED, NodeState.SUSPENDED).put(Status.UNRESOLVED,\n-                     NodeState.PENDING).build();\n+   public static final Map<Status, NodeState> VAPPSTATUS_TO_NODESTATE = ImmutableMap.<Status, NodeState> builder()\n+         .put(Status.OFF, NodeState.SUSPENDED).put(Status.ON, NodeState.RUNNING)\n+         .put(Status.RESOLVED, NodeState.PENDING).put(Status.ERROR, NodeState.ERROR)\n+         .put(Status.UNRECOGNIZED, NodeState.UNRECOGNIZED).put(Status.DEPLOYED, NodeState.PENDING)\n+         .put(Status.INCONSISTENT, NodeState.PENDING).put(Status.UNKNOWN, NodeState.UNRECOGNIZED)\n+         .put(Status.MIXED, NodeState.PENDING).put(Status.WAITING_FOR_INPUT, NodeState.PENDING)\n+         .put(Status.SUSPENDED, NodeState.SUSPENDED).put(Status.UNRESOLVED, NodeState.PENDING).build();\n \n    @Singleton\n    @Provides\n-   Map<Status, NodeState> provideVAppStatusToNodeState() {\n-      return vAppStatusToNodeState;\n+   protected Map<Status, NodeState> provideVAppStatusToNodeState() {\n+      return VAPPSTATUS_TO_NODESTATE;\n    }\n \n    @Override",
                "deletions": 9
            },
            {
                "sha": "1e9e84536d8baa7d6c0531f379c49f576d082ccb",
                "filename": "common/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/FindLocationForResource.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/common/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/FindLocationForResource.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/common/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/FindLocationForResource.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/vcloud/src/main/java/org/jclouds/vcloud/compute/functions/FindLocationForResource.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -63,8 +63,7 @@ public Location apply(ReferenceType resource) {\n             // link that only includes href and type.\n             if (URI.create(input.getId()).equals(resource.getHref()))\n                return input;\n-            input = input.getParent();\n-         } while (input.getParent() != null);\n+         } while ((input = input.getParent()) != null);\n       }\n       throw new NoSuchElementException(String.format(\"resource: %s not found in locations: %s\", resource, locations\n                .get()));",
                "deletions": 2
            },
            {
                "sha": "6fb3ee96f16f7eb7695bd765d462000fb2b2b1ed",
                "filename": "core/src/main/java/org/jclouds/util/InetAddresses2.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9117644f26999c937c844d20035d24255bd903e2/core/src/main/java/org/jclouds/util/InetAddresses2.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9117644f26999c937c844d20035d24255bd903e2/core/src/main/java/org/jclouds/util/InetAddresses2.java",
                "status": "modified",
                "changes": 47,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/util/InetAddresses2.java?ref=9117644f26999c937c844d20035d24255bd903e2",
                "patch": "@@ -21,6 +21,9 @@\n \n import static com.google.common.base.Preconditions.checkNotNull;\n \n+import javax.inject.Singleton;\n+\n+import com.google.common.base.Predicate;\n import com.google.common.base.Splitter;\n import com.google.common.collect.Iterables;\n import com.google.common.net.InetAddresses;\n@@ -31,26 +34,40 @@\n  * @author Adrian Cole\n  */\n public class InetAddresses2 {\n+   @Singleton\n+   public static enum IsPrivateIPAddress implements Predicate<String> {\n+      INSTANCE;\n+\n+      public boolean apply(String in) {\n+         if (InetAddresses.isInetAddress(checkNotNull(in, \"input address\"))) {\n+            // 24-bit Block (/8 prefix, 1/A) 10.0.0.0 10.255.255.255 16777216\n+            if (in.indexOf(\"10.\") == 0)\n+               return true;\n+            // 20-bit Block (/12 prefix, 16/B) 172.16.0.0 172.31.255.255 1048576\n+            if (in.indexOf(\"172.\") == 0) {\n+               int second = Integer.parseInt(Iterables.get(Splitter.on('.').split(in), 1));\n+               if (second >= 16 && second <= 31)\n+                  return true;\n+            }\n+            // 16-bit Block (/16 prefix, 256/C) 192.168.0.0 192.168.255.255 65536\n+            if (in.indexOf(\"192.168.\") == 0)\n+               return true;\n+         }\n+         return false;\n+      }\n+\n+      @Override\n+      public String toString() {\n+         return \"isPrivateIPAddress()\";\n+      }\n+\n+   }\n \n    /**\n     * @return true if the input is an ip4 address and in one of the 3 reserved private blocks.\n     */\n    public static boolean isPrivateIPAddress(String in) {\n-      if (InetAddresses.isInetAddress(checkNotNull(in, \"input address\"))) {\n-         // 24-bit Block (/8 prefix, 1 \u00d7 A) 10.0.0.0 10.255.255.255 16777216\n-         if (in.indexOf(\"10.\") == 0)\n-            return true;\n-         // 20-bit Block (/12 prefix, 16 \u00d7 B) 172.16.0.0 172.31.255.255 1048576\n-         if (in.indexOf(\"172.\") == 0) {\n-            int second = Integer.parseInt(Iterables.get(Splitter.on('.').split(in), 1));\n-            if (second >= 16 && second <= 31)\n-               return true;\n-         }\n-         // 16-bit Block (/16 prefix, 256 \u00d7 C) 192.168.0.0 192.168.255.255 65536\n-         if (in.indexOf(\"192.168.\") == 0)\n-            return true;\n-      }\n-      return false;\n+      return IsPrivateIPAddress.INSTANCE.apply(in);\n    }\n \n }",
                "deletions": 15
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fixing issue 406. Handling the NullPointerException (NullOutputException) from MapMaker$ComputingMapAdapter.get() call.",
        "commit": "https://github.com/apache/jclouds/commit/512eb0139c532a68e125b0533ce737110cb4fe3a",
        "parent": "https://github.com/apache/jclouds/commit/b41eedf882d23afdfa0aa1e0fe649c5fdebab156",
        "bug_id": "jclouds_6",
        "file": [
            {
                "sha": "c3a9daaf1598fe1d2c707586f6547674fbc44bc2",
                "filename": "aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/512eb0139c532a68e125b0533ce737110cb4fe3a/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/512eb0139c532a68e125b0533ce737110cb4fe3a/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "status": "modified",
                "changes": 19,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java?ref=512eb0139c532a68e125b0533ce737110cb4fe3a",
                "patch": "@@ -101,9 +101,20 @@ public NodeMetadata apply(RunningInstance instance) {\n       builder.imageId(instance.getRegion() + \"/\" + instance.getImageId());\n \n       // extract the operating system from the image\n-      Image image = instanceToImage.get(new RegionAndName(instance.getRegion(), instance.getImageId()));\n-      if (image != null)\n-         builder.operatingSystem(image.getOperatingSystem());\n+      RegionAndName regionAndName = new RegionAndName(instance.getRegion(), instance.getImageId());\n+      try {\n+         Image image = instanceToImage.get(regionAndName);\n+          if (image != null)\n+              builder.operatingSystem(image.getOperatingSystem());\n+      }\n+      catch (NullPointerException e) {\n+          // The instanceToImage Map may throw NullPointerException (actually subclass NullOutputException) if the\n+          // computing Function returns a null value.\n+          //\n+          // See the following for more information:\n+          // MapMaker.makeComputingMap()\n+          // RegionAndIdToImage.apply()\n+      }\n \n       return builder.build();\n    }\n@@ -209,4 +220,4 @@ public boolean apply(Location input) {\n       }\n    }\n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "a0044b6b73e894c342be51fe35c0410fc9320a86",
                "filename": "aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/512eb0139c532a68e125b0533ce737110cb4fe3a/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/512eb0139c532a68e125b0533ce737110cb4fe3a/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "status": "modified",
                "changes": 45,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java?ref=512eb0139c532a68e125b0533ce737110cb4fe3a",
                "patch": "@@ -51,6 +51,9 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n+import com.google.common.collect.MapMaker;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * @author Adrian Cole\n@@ -140,15 +143,44 @@ public void testApplyWhereTagDoesntMatchAndImageHardwareAndLocationFound() throw\n                \"i-9slweygo\").location(provider).build());\n    }\n \n+   @Test\n+   public void testHandleMissingAMIs() {\n+\n+      // Handle the case when the installed AMI no longer can be found in AWS.\n+\n+      // Create a null-returning function to simulate that the AMI can't be found.\n+      Function<RegionAndName, Image> nullReturningFunction = new Function<RegionAndName, Image>() {\n+\n+         @Override\n+         public Image apply(@Nullable RegionAndName from) {\n+            return null;\n+         }\n+      };\n+      Map<RegionAndName, Image> instanceToImage = new MapMaker().makeComputingMap(nullReturningFunction);\n+\n+      RunningInstanceToNodeMetadata parser = createNodeParser(ImmutableSet.of(m1_small().build()), ImmutableSet\n+              .of(provider), ImmutableMap\n+              .<String, Credentials>of(), EC2ComputeServiceDependenciesModule.instanceToNodeState, instanceToImage);\n+\n+      RunningInstance server = firstInstanceFromResource(\"/ec2/describe_instances_nova.xml\");\n+\n+      assertEquals(parser.apply(server), new NodeMetadataBuilder().state(NodeState.TERMINATED).privateAddresses(\n+              ImmutableSet.of(\"10.128.207.5\")).tag(\"NOTAG-i-9slweygo\").imageId(\"us-east-1/ami-25CB1213\").id(\n+              \"us-east-1/i-9slweygo\").providerId(\"i-9slweygo\").hardware(m1_small().build()).location(\n+              provider).build());\n+   }\n+\n+\n    protected RunningInstance firstInstanceFromResource(String resource) {\n       RunningInstance server = Iterables.get(Iterables.get(DescribeInstancesResponseHandlerTest\n-               .parseRunningInstances(resource), 0), 0);\n+              .parseRunningInstances(resource), 0), 0);\n       return server;\n    }\n \n    protected RunningInstanceToNodeMetadata createNodeParser(final ImmutableSet<Hardware> hardware,\n-            final ImmutableSet<Location> locations, Set<org.jclouds.compute.domain.Image> images,\n-            Map<String, Credentials> credentialStore) {\n+                                                            final ImmutableSet<Location> locations,\n+                                                            Set<org.jclouds.compute.domain.Image> images,\n+                                                            Map<String, Credentials> credentialStore) {\n       Map<InstanceState, NodeState> instanceToNodeState = EC2ComputeServiceDependenciesModule.instanceToNodeState;\n \n       Map<RegionAndName, Image> instanceToImage = Maps.uniqueIndex(images, new Function<Image, RegionAndName>() {\n@@ -159,6 +191,13 @@ public RegionAndName apply(Image from) {\n          }\n \n       });\n+\n+      return createNodeParser(hardware, locations, credentialStore, instanceToNodeState, instanceToImage);\n+   }\n+\n+   private RunningInstanceToNodeMetadata createNodeParser(final ImmutableSet<Hardware> hardware, final\n+   ImmutableSet<Location> locations, Map<String, Credentials> credentialStore, Map<InstanceState, NodeState>\n+           instanceToNodeState, Map<RegionAndName, Image> instanceToImage) {\n       Supplier<Set<? extends Location>> locationSupplier = new Supplier<Set<? extends Location>>() {\n \n          @Override",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fix NPE when node is null",
        "commit": "https://github.com/apache/jclouds/commit/0e41b45af598576821084c5bff2c54342ff860c6",
        "parent": "https://github.com/apache/jclouds/commit/cd50ad905dc2250eff6b0cfa2f4fb0ba7f723b93",
        "bug_id": "jclouds_7",
        "file": [
            {
                "sha": "da3874751c7a58c7854ade376adab005c6739a19",
                "filename": "compute/src/main/java/org/jclouds/compute/strategy/impl/AdaptingComputeServiceStrategies.java",
                "blob_url": "https://github.com/apache/jclouds/blob/0e41b45af598576821084c5bff2c54342ff860c6/compute/src/main/java/org/jclouds/compute/strategy/impl/AdaptingComputeServiceStrategies.java",
                "raw_url": "https://github.com/apache/jclouds/raw/0e41b45af598576821084c5bff2c54342ff860c6/compute/src/main/java/org/jclouds/compute/strategy/impl/AdaptingComputeServiceStrategies.java",
                "status": "modified",
                "changes": 11,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/strategy/impl/AdaptingComputeServiceStrategies.java?ref=0e41b45af598576821084c5bff2c54342ff860c6",
                "patch": "@@ -144,21 +144,22 @@ public NodeMetadata getNode(String id) {\n    @Override\n    public NodeMetadata rebootNode(String id) {\n       NodeMetadata node = getNode(checkNotNull(id, \"id\"));\n-      checkStateAvailable(node);\n+      checkStateAvailable(id, node);\n       client.rebootNode(id);\n       // invalidate state of node\n       return getNode(checkNotNull(id, \"id\"));\n    }\n \n-   private void checkStateAvailable(NodeMetadata node) {\n-      checkState(node != null && node.getStatus() != Status.TERMINATED,\n+   private void checkStateAvailable(String id, NodeMetadata node) {\n+      checkState(node != null, \"node with id %s terminated or unavailable!\", id);\n+      checkState(node.getStatus() != Status.TERMINATED,\n                \"node %s terminated or unavailable! current status: %s\", node, formatStatus(node));\n    }\n \n    @Override\n    public NodeMetadata resumeNode(String id) {\n       NodeMetadata node = getNode(checkNotNull(id, \"id\"));\n-      checkStateAvailable(node);\n+      checkStateAvailable(id, node);\n       client.resumeNode(id);\n       // invalidate state of node\n       return getNode(checkNotNull(id, \"id\"));\n@@ -167,7 +168,7 @@ public NodeMetadata resumeNode(String id) {\n    @Override\n    public NodeMetadata suspendNode(String id) {\n       NodeMetadata node = getNode(checkNotNull(id, \"id\"));\n-      checkStateAvailable(node);\n+      checkStateAvailable(id, node);\n       client.suspendNode(id);\n       // invalidate state of node\n       return getNode(checkNotNull(id, \"id\"));",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Avoid NPE in BaseBlobStore.copyBlob\n\nResolves copyBlob failures in Atmos.",
        "commit": "https://github.com/apache/jclouds/commit/cd50ad905dc2250eff6b0cfa2f4fb0ba7f723b93",
        "parent": "https://github.com/apache/jclouds/commit/41bdd9c5a9e02aa407e7036d3fddceb138f8b3b7",
        "bug_id": "jclouds_8",
        "file": [
            {
                "sha": "ad9273400a16707859651fe58af768ebf84970e7",
                "filename": "blobstore/src/main/java/org/jclouds/blobstore/internal/BaseBlobStore.java",
                "blob_url": "https://github.com/apache/jclouds/blob/cd50ad905dc2250eff6b0cfa2f4fb0ba7f723b93/blobstore/src/main/java/org/jclouds/blobstore/internal/BaseBlobStore.java",
                "raw_url": "https://github.com/apache/jclouds/raw/cd50ad905dc2250eff6b0cfa2f4fb0ba7f723b93/blobstore/src/main/java/org/jclouds/blobstore/internal/BaseBlobStore.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/blobstore/src/main/java/org/jclouds/blobstore/internal/BaseBlobStore.java?ref=cd50ad905dc2250eff6b0cfa2f4fb0ba7f723b93",
                "patch": "@@ -263,8 +263,9 @@ public String copyBlob(String fromContainer, String fromName, String toContainer\n          throw new KeyNotFoundException(fromContainer, fromName, \"while copying\");\n       }\n \n-      String eTag = maybeQuoteETag(blob.getMetadata().getETag());\n+      String eTag = blob.getMetadata().getETag();\n       if (eTag != null) {\n+         eTag = maybeQuoteETag(eTag);\n          if (options.ifMatch() != null && !options.ifMatch().equals(eTag)) {\n             throw returnResponseException(412);\n          }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixed NPE",
        "commit": "https://github.com/apache/jclouds/commit/d0947bbda0c8c9b540832e70fc48b5cc495648fa",
        "parent": "https://github.com/apache/jclouds/commit/5c647df129f122c12258e54341fde312b2b37b7c",
        "bug_id": "jclouds_9",
        "file": [
            {
                "sha": "c440d5ae2ba2627f111d8ac31117df2cf8ec6f5e",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/functions/VAppTemplatesForCatalogItems.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d0947bbda0c8c9b540832e70fc48b5cc495648fa/apis/vcloud/src/main/java/org/jclouds/vcloud/functions/VAppTemplatesForCatalogItems.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d0947bbda0c8c9b540832e70fc48b5cc495648fa/apis/vcloud/src/main/java/org/jclouds/vcloud/functions/VAppTemplatesForCatalogItems.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/functions/VAppTemplatesForCatalogItems.java?ref=d0947bbda0c8c9b540832e70fc48b5cc495648fa",
                "patch": "@@ -43,6 +43,7 @@\n \n import com.google.common.base.Function;\n import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n import com.google.common.base.Throwables;\n \n /**\n@@ -79,7 +80,7 @@ public VAppTemplate apply(Exception from) {\n \n    @Override\n    public Iterable<VAppTemplate> apply(Iterable<CatalogItem> from) {\n-      return Iterables2.concreteCopy(transformParallel(filter(from, new Predicate<CatalogItem>() {\n+      return Iterables2.concreteCopy(filter(transformParallel(filter(from, new Predicate<CatalogItem>() {\n \n          @Override\n          public boolean apply(CatalogItem input) {\n@@ -95,7 +96,7 @@ public boolean apply(CatalogItem input) {\n                      returnNullOnAuthorizationException);\n          }\n \n-      }, executor, null, logger, \"vappTemplates in\"));\n+      }, executor, null, logger, \"vappTemplates in\"), Predicates.notNull()));\n    }\n \n }\n\\ No newline at end of file",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "NPE guard",
        "commit": "https://github.com/apache/jclouds/commit/5033b982529ac6a776a65dbe0fbb7ab648ddb3be",
        "parent": "https://github.com/apache/jclouds/commit/d8472b799a0187751f02972e7b450f62361ae060",
        "bug_id": "jclouds_10",
        "file": [
            {
                "sha": "1c011141f727d019a49720f3798b47607ca43c97",
                "filename": "blobstore/src/main/java/org/jclouds/blobstore/TransientStorageStrategy.java",
                "blob_url": "https://github.com/apache/jclouds/blob/5033b982529ac6a776a65dbe0fbb7ab648ddb3be/blobstore/src/main/java/org/jclouds/blobstore/TransientStorageStrategy.java",
                "raw_url": "https://github.com/apache/jclouds/raw/5033b982529ac6a776a65dbe0fbb7ab648ddb3be/blobstore/src/main/java/org/jclouds/blobstore/TransientStorageStrategy.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/blobstore/src/main/java/org/jclouds/blobstore/TransientStorageStrategy.java?ref=5033b982529ac6a776a65dbe0fbb7ab648ddb3be",
                "patch": "@@ -79,7 +79,8 @@ public void putBlob(final String containerName, final Blob blob) {\n    }\n \n    public void removeBlob(final String containerName, final String blobName) {\n-      containerToBlobs.get(containerName).remove(blobName);\n+      if (containerToBlobs.containsKey(containerName)) \n+         containerToBlobs.get(containerName).remove(blobName);\n    }\n \n    public Iterable<String> getBlobKeysInsideContainer(final String containerName) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixed npe",
        "commit": "https://github.com/apache/jclouds/commit/f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1",
        "parent": "https://github.com/apache/jclouds/commit/4dbcbfc7a633b2abfb1db97d3c070ef15141c973",
        "bug_id": "jclouds_11",
        "file": [
            {
                "sha": "c36e6c97af76e415b0d589cc027dcdbc6b3114e1",
                "filename": "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "status": "modified",
                "changes": 4,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java?ref=f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1",
                "patch": "@@ -83,7 +83,6 @@\n import org.jclouds.io.Payload;\n import org.jclouds.logging.Logger;\n import org.jclouds.predicates.RetryablePredicate;\n-import org.jclouds.scriptbuilder.InitBuilder;\n import org.jclouds.scriptbuilder.domain.Statements;\n import org.jclouds.ssh.ExecResponse;\n import org.jclouds.util.Utils;\n@@ -175,9 +174,6 @@ public ComputeServiceContext getContext() {\n             throws RunNodesException {\n       checkArgument(tag.indexOf('-') == -1, \"tag cannot contain hyphens\");\n       checkNotNull(template.getLocation(), \"location\");\n-      if (template.getOptions().getTaskName() == null && template.getOptions().getRunScript() != null\n-               && !(template.getOptions().getRunScript() instanceof InitBuilder))\n-         template.getOptions().nameTask(\"bootstrap\");\n       logger.debug(\">> running %d node%s tag(%s) location(%s) image(%s) hardwareProfile(%s) options(%s)\", count,\n                count > 1 ? \"s\" : \"\", tag, template.getLocation().getId(), template.getImage().getId(), template\n                         .getHardware().getId(), template.getOptions());",
                "deletions": 4
            },
            {
                "sha": "9c7392d73a1b5df0fe20ae23e84a8adc6027a911",
                "filename": "compute/src/main/java/org/jclouds/compute/util/ComputeUtils.java",
                "blob_url": "https://github.com/apache/jclouds/blob/f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1/compute/src/main/java/org/jclouds/compute/util/ComputeUtils.java",
                "raw_url": "https://github.com/apache/jclouds/raw/f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1/compute/src/main/java/org/jclouds/compute/util/ComputeUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/util/ComputeUtils.java?ref=f70f822e64495b1ce88ff55ce6d6d79ac0b0a7d1",
                "patch": "@@ -55,6 +55,7 @@\n import org.jclouds.compute.strategy.GetNodeMetadataStrategy;\n import org.jclouds.compute.util.ComputeServiceUtils.SshCallable;\n import org.jclouds.logging.Logger;\n+import org.jclouds.scriptbuilder.InitBuilder;\n import org.jclouds.scriptbuilder.domain.AuthorizeRSAPublicKey;\n import org.jclouds.scriptbuilder.domain.InstallRSAPrivateKey;\n import org.jclouds.scriptbuilder.domain.Statement;\n@@ -144,8 +145,11 @@ public NodeMetadata runOptionsOnNode(NodeMetadata node, TemplateOptions options)\n          bootstrap.add(options.getRunScript());\n       if (options.getPrivateKey() != null)\n          bootstrap.add(new InstallRSAPrivateKey(options.getPrivateKey()));\n-      if (bootstrap.size() >= 1)\n+      if (bootstrap.size() >= 1) {\n+         if (options.getTaskName() == null && !(options.getRunScript() instanceof InitBuilder))\n+            options.nameTask(\"bootstrap\");\n          runScriptOnNode(node, bootstrap.size() == 1 ? bootstrap.get(0) : new StatementList(bootstrap), options);\n+      }\n       return node;\n    }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "avoid NPE in testResetNetwork",
        "commit": "https://github.com/apache/jclouds/commit/5873157074a39fc7614b719a95af6f4e3fdc0e94",
        "parent": "https://github.com/apache/jclouds/commit/a4272f5429ab09724e07f6adc47e21f244421c6c",
        "bug_id": "jclouds_12",
        "file": [
            {
                "sha": "c5c6d9eee2886ad24d48bcb911cf09cb39613214",
                "filename": "labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/5873157074a39fc7614b719a95af6f4e3fdc0e94/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/5873157074a39fc7614b719a95af6f4e3fdc0e94/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminNetworkClientLiveTest.java?ref=5873157074a39fc7614b719a95af6f4e3fdc0e94",
                "patch": "@@ -147,7 +147,7 @@ public void testUpdateNetwork() {\n    @Test(testName = \"POST /admin/network/{id}/action/reset\")\n    public void testResetNetwork() { \n       // TODO assert that network is deployed somehow\n-      Task resetNetworkTask = networkClient.resetNetwork(network.getHref());\n+      Task resetNetworkTask = networkClient.resetNetwork(networkRef.getHref());\n       Checks.checkTask(resetNetworkTask);\n       assertTrue(retryTaskSuccess.apply(resetNetworkTask), String.format(TASK_COMPLETE_TIMELY, \"resetNetworkTask\"));\n       network = networkClient.getNetwork(network.getHref());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "guard against NPE",
        "commit": "https://github.com/apache/jclouds/commit/8a926cea44cdfc515c1109c0d8d5830dd7211b29",
        "parent": "https://github.com/apache/jclouds/commit/7e126f45aa21432de8606982746b021911e93999",
        "bug_id": "jclouds_13",
        "file": [
            {
                "sha": "89d959711c9675a2144dae47b5fd22b2b0fe7e86",
                "filename": "labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "blob_url": "https://github.com/apache/jclouds/blob/8a926cea44cdfc515c1109c0d8d5830dd7211b29/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "raw_url": "https://github.com/apache/jclouds/raw/8a926cea44cdfc515c1109c0d8d5830dd7211b29/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/functions/ThrowVCloudErrorOn4xx.java?ref=8a926cea44cdfc515c1109c0d8d5830dd7211b29",
                "patch": "@@ -45,7 +45,7 @@ private ThrowVCloudErrorOn4xx() { }\n    public Object apply(Exception from) {\n       Iterable<HttpResponseException> throwables = Iterables.filter(Throwables.getCausalChain(from), HttpResponseException.class);\n       HttpResponseException exception = Iterables.getFirst(throwables, null);\n-      if (exception != null && exception.getResponse().getStatusCode() >= 400 && exception.getResponse().getStatusCode() < 500) {\n+      if (exception != null && exception.getResponse() != null && exception.getResponse().getStatusCode() >= 400 && exception.getResponse().getStatusCode() < 500) {\n          try {\n             Error error = JAXB.unmarshal(InputSuppliers.of(exception.getContent()).getInput(), Error.class);\n             throw new VCloudDirectorException(error);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "NPE in vcloud",
        "commit": "https://github.com/apache/jclouds/commit/ea8cca231a15978abe2e0db45d48863fc6ff55d3",
        "parent": "https://github.com/apache/jclouds/commit/c50b8a5dbd823cc063d16719a8d7775322711a25",
        "bug_id": "jclouds_14",
        "file": [
            {
                "sha": "7d92b372f4aa415308caa7a530e0da429cc60ebd",
                "filename": "vcloud/core/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/ea8cca231a15978abe2e0db45d48863fc6ff55d3/vcloud/core/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/ea8cca231a15978abe2e0db45d48863fc6ff55d3/vcloud/core/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/vcloud/core/src/main/java/org/jclouds/vcloud/compute/functions/VAppToNodeMetadata.java?ref=ea8cca231a15978abe2e0db45d48863fc6ff55d3",
                "patch": "@@ -73,8 +73,9 @@ public NodeMetadata apply(VApp from) {\n       builder.publicAddresses(getPublicIpsFromVApp(from));\n       builder.privateAddresses(getPrivateIpsFromVApp(from));\n       builder.credentials(getCredentialsFrom(from));\n-      if (!credentialStore.containsKey(\"node#\" + from.getHref().toASCIIString()))\n-         credentialStore.put(\"node#\" + from.getHref().toASCIIString(), getCredentialsFrom(from));\n+      Credentials fromApi = getCredentialsFrom(from);\n+      if (fromApi != null && !credentialStore.containsKey(\"node#\" + from.getHref().toASCIIString()))\n+         credentialStore.put(\"node#\" + from.getHref().toASCIIString(), fromApi);\n       builder.credentials(credentialStore.get(\"node#\" + from.getHref().toASCIIString()));\n       return builder.build();\n    }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fixed NPE when Server has no Image",
        "commit": "https://github.com/apache/jclouds/commit/1db5d38a09f577a0edd3481810b8fb0c01e72a19",
        "parent": "https://github.com/apache/jclouds/commit/a68eb389010fafbdd62ced416ef632cd8cc78844",
        "bug_id": "jclouds_15",
        "file": [
            {
                "sha": "57d66c270d1219bfffbfa097bff906e20aae65a3",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadata.java",
                "status": "modified",
                "changes": 18,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadata.java?ref=1db5d38a09f577a0edd3481810b8fb0c01e72a19",
                "patch": "@@ -104,7 +104,11 @@ public NodeMetadata apply(ServerInZone serverInZone) {\n             .description(from.getHostId()).parent(zone).build() : zone);\n       builder.group(groupFromMapOrName(from.getMetadata(), from.getName(), nodeNamingConvention));\n       addMetadataAndParseTagsFromCommaDelimitedValue(builder, from.getMetadata());\n-      builder.imageId(ZoneAndId.fromZoneAndId(serverInZone.getZone(), from.getImage().getId()).slashEncode());\n+\n+      if (from.getImage() != null) {\n+         builder.imageId(ZoneAndId.fromZoneAndId(serverInZone.getZone(), from.getImage().getId()).slashEncode());\n+      }\n+\n       builder.operatingSystem(findOperatingSystemForServerOrNull(serverInZone));\n       builder.hardware(findHardwareForServerOrNull(serverInZone));\n       builder.status(toPortableNodeStatus.get(from.getStatus()));\n@@ -174,9 +178,15 @@ protected Hardware findHardwareForServerOrNull(ServerInZone serverInZone) {\n    }\n \n    protected OperatingSystem findOperatingSystemForServerOrNull(ServerInZone serverInZone) {\n-      Image image = findObjectOfTypeForServerOrNull(images.get(), \"image\", serverInZone.getServer().getImage().getId(),\n-            serverInZone);\n-      return (image != null) ? image.getOperatingSystem() : null;\n+      if (serverInZone.getServer().getImage() != null) {\n+         Image image = findObjectOfTypeForServerOrNull(\n+               images.get(), \"image\", serverInZone.getServer().getImage().getId(), serverInZone);\n+\n+         return (image != null) ? image.getOperatingSystem() : null;\n+      } else {\n+         return null;\n+      }\n+\n    }\n \n    public <T extends ComputeMetadata> T findObjectOfTypeForServerOrNull(Set<? extends T> supply, String type,",
                "deletions": 4
            },
            {
                "sha": "f35dba88e379f1f1557456ee9d079ad474e320f8",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/config/NovaParserModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/config/NovaParserModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/config/NovaParserModule.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/config/NovaParserModule.java?ref=1db5d38a09f577a0edd3481810b8fb0c01e72a19",
                "patch": "@@ -122,13 +122,12 @@ public ServerWithSecurityGroups deserialize(JsonElement jsonElement, Type type,\n       @Override\n       public Server deserialize(JsonElement jsonElement, Type type, JsonDeserializationContext context)\n             throws JsonParseException {\n-         Server serverBase = null;\n+         Server serverBase;\n \n          // Servers can be created without an image so test if an image object is returned\n          if (jsonElement.getAsJsonObject().get(\"image\").isJsonObject()) {\n             serverBase = apply((ServerInternal) context.deserialize(jsonElement, ServerInternal.class));\n-         }\n-         else {\n+         } else {\n             serverBase = apply((ServerInternalWithoutImage) context.deserialize(jsonElement, ServerInternalWithoutImage.class));\n          }\n \n@@ -144,7 +143,7 @@ public Server deserialize(JsonElement jsonElement, Type type, JsonDeserializatio\n          return result.build();\n       }\n \n-      public Server apply(ServerInternal in) {\n+      public Server apply(Server in) {\n          return in.toBuilder().build();\n       }\n \n@@ -161,10 +160,6 @@ protected ServerInternal(String id, @Nullable String name, java.util.Set<Link> l\n          }\n       }\n \n-      public Server apply(ServerInternalWithoutImage in) {\n-         return in.toBuilder().build();\n-      }\n-\n       private static class ServerInternalWithoutImage extends Server {\n          @ConstructorProperties({\n                \"id\", \"name\", \"links\", \"uuid\", \"tenant_id\", \"user_id\", \"updated\", \"created\", \"hostId\", \"accessIPv4\", \"accessIPv6\", \"status\", \"flavor\", \"key_name\", \"config_drive\", \"addresses\", \"metadata\", \"extendedStatus\", \"extendedAttributes\", \"OS-DCF:diskConfig\"",
                "deletions": 8
            },
            {
                "sha": "d0cedfe8f63ae62195618f9760598d7bae462b95",
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1db5d38a09f577a0edd3481810b8fb0c01e72a19/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java?ref=1db5d38a09f577a0edd3481810b8fb0c01e72a19",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertNull;\n \n import java.net.URI;\n import java.util.Map;\n@@ -39,6 +40,7 @@\n import org.jclouds.openstack.nova.v2_0.domain.Server;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ServerInZone;\n import org.jclouds.openstack.nova.v2_0.parse.ParseServerTest;\n+import org.jclouds.openstack.nova.v2_0.parse.ParseServerWithoutImageTest;\n import org.jclouds.openstack.v2_0.domain.Link;\n import org.jclouds.openstack.v2_0.domain.Resource;\n import org.testng.annotations.Test;\n@@ -201,7 +203,30 @@ public void testPortableNodeStatusNotNull() {\n       }\n    }\n \n-    // TODO: clean up this syntax\n+   @Test\n+   public void testServerWithoutImage() {\n+      Hardware existingHardware = new HardwareBuilder().id(\"az-1.region-a.geo-1/52415800-8b69-11e0-9b19-734f216543fd\")\n+            .providerId(\"52415800-8b69-11e0-9b19-734f216543fd\").location(zone).build();\n+      Image existingImage = new ImageBuilder().id(\"az-1.region-a.geo-1/52415800-8b69-11e0-9b19-734f6f006e54\")\n+            .operatingSystem(OperatingSystem.builder().family(OsFamily.LINUX).description(\"foobuntu\").build())\n+            .providerId(\"52415800-8b69-11e0-9b19-734f6f006e54\").description(\"foobuntu\").status(Image.Status.AVAILABLE)\n+            .location(zone).build();\n+\n+      Server serverToConvert = new ParseServerWithoutImageTest().expected();\n+      ServerInZone serverInZoneToConvert = new ServerInZone(serverToConvert, \"az-1.region-a.geo-1\");\n+\n+      ServerInZoneToNodeMetadata converter = new ServerInZoneToNodeMetadata(\n+            NovaComputeServiceContextModule.toPortableNodeStatus, locationIndex,\n+            Suppliers.<Set<? extends Image>> ofInstance(ImmutableSet.of(existingImage)),\n+            Suppliers.<Set<? extends Hardware>> ofInstance(ImmutableSet.of(existingHardware)),\n+            namingConvention);\n+\n+      NodeMetadata convertedNodeMetadata = converter.apply(serverInZoneToConvert);\n+\n+      assertNull(convertedNodeMetadata.getImageId());\n+   }\n+\n+   // TODO: clean up this syntax\n    private void checkHardwareAndImageStatus(Hardware expectedHardware, Hardware existingHardware,\n          String expectedImageId, OperatingSystem expectedOs, Image existingImage) {\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fixed NPE in error handler",
        "commit": "https://github.com/apache/jclouds/commit/9c40c3a34dd309a686fd2d76a7071f139f368545",
        "parent": "https://github.com/apache/jclouds/commit/ef66989727f3aebeab15035f0eccf6e5aad6f0cb",
        "bug_id": "jclouds_16",
        "file": [
            {
                "sha": "5d209865c756285be955f3a36e3baf11cea209b1",
                "filename": "labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9c40c3a34dd309a686fd2d76a7071f139f368545/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9c40c3a34dd309a686fd2d76a7071f139f368545/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/main/java/org/jclouds/vcloud/director/v1_5/handlers/VCloudDirectorErrorHandler.java?ref=9c40c3a34dd309a686fd2d76a7071f139f368545",
                "patch": "@@ -53,7 +53,7 @@ public void handleError(HttpCommand command, HttpResponse response) {\n       String message = data != null\n             ? new String(data)\n             : String.format(\"%s -> %s\", command.getCurrentRequest().getRequestLine(), response.getStatusLine());\n-      Exception exception = new HttpResponseException(command, response, response.getPayload().getContentMetadata().getContentType());\n+      Exception exception = new HttpResponseException(command, response, message);\n       \n       // Try to create a VCloudDirectorException from XML payload\n       if (response.getPayload().getContentMetadata().getContentType().startsWith(VCloudDirectorMediaType.ERROR)) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 899:NPE on cleanUpIncidentalResourcesOfDeadNodes",
        "commit": "https://github.com/apache/jclouds/commit/915b548d04094ce4d48a848e3837395d40f3de88",
        "parent": "https://github.com/apache/jclouds/commit/c1dd80f9b36b7217006608bc03d3bb756eb2ef48",
        "bug_id": "jclouds_17",
        "file": [
            {
                "sha": "bd4496b2197edd7460b5594bb07c6b3fe28016cb",
                "filename": "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/915b548d04094ce4d48a848e3837395d40f3de88/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/915b548d04094ce4d48a848e3837395d40f3de88/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "status": "modified",
                "changes": 20,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java?ref=915b548d04094ce4d48a848e3837395d40f3de88",
                "patch": "@@ -32,7 +32,6 @@\n import static org.jclouds.concurrent.FutureIterables.awaitCompletion;\n import static org.jclouds.concurrent.FutureIterables.transformParallel;\n \n-import java.util.Collections;\n import java.util.Map;\n import java.util.NoSuchElementException;\n import java.util.Set;\n@@ -82,6 +81,7 @@\n import org.jclouds.domain.Location;\n import org.jclouds.domain.LoginCredentials;\n import org.jclouds.domain.LoginCredentials.Builder;\n+import org.jclouds.javax.annotation.Nullable;\n import org.jclouds.logging.Logger;\n import org.jclouds.predicates.RetryablePredicate;\n import org.jclouds.scriptbuilder.domain.Statement;\n@@ -225,9 +225,10 @@ public ComputeServiceContext getContext() {\n     * {@inheritDoc}\n     */\n    @Override\n-   public void destroyNode(final String id) {\n-      NodeMetadata destroyedNode = doDestroyNode(id);\n-      cleanUpIncidentalResourcesOfDeadNodes(Collections.singleton(destroyedNode));\n+   public void destroyNode(String id) {\n+      NodeMetadata destroyedNodeOrNull = doDestroyNode(id);\n+      if (destroyedNodeOrNull != null)\n+         cleanUpIncidentalResourcesOfDeadNodes(ImmutableSet.of(destroyedNodeOrNull));\n    }\n \n    /**\n@@ -236,14 +237,15 @@ public void destroyNode(final String id) {\n    @Override\n    public Set<? extends NodeMetadata> destroyNodesMatching(Predicate<NodeMetadata> filter) {\n       logger.debug(\">> destroying nodes matching(%s)\", filter);\n-      Set<NodeMetadata> set = newLinkedHashSet(transformParallel(nodesMatchingFilterAndNotTerminated(filter),\n+      Set<NodeMetadata> set = newLinkedHashSet(filter(transformParallel(nodesMatchingFilterAndNotTerminated(filter),\n             new Function<NodeMetadata, Future<NodeMetadata>>() {\n \n                // TODO make an async interface instead of re-wrapping\n                @Override\n                public Future<NodeMetadata> apply(final NodeMetadata from) {\n                   return executor.submit(new Callable<NodeMetadata>() {\n \n+                     @Nullable\n                      @Override\n                      public NodeMetadata call() throws Exception {\n                         doDestroyNode(from.getId());\n@@ -257,13 +259,19 @@ public String toString() {\n                   });\n                }\n \n-            }, executor, null, logger, \"destroyNodesMatching(\" + filter + \")\"));\n+            }, executor, null, logger, \"destroyNodesMatching(\" + filter + \")\"), notNull()));\n       logger.debug(\"<< destroyed(%d)\", set.size());\n       \n       cleanUpIncidentalResourcesOfDeadNodes(set);\n       return set;\n    }\n \n+   /**\n+    * \n+    * @param id\n+    * @return node that was deleted or null if it wasn't found\n+    */\n+   @Nullable\n    protected NodeMetadata doDestroyNode(final String id) {\n       checkNotNull(id, \"id\");\n       logger.debug(\">> destroying node(%s)\", id);",
                "deletions": 6
            },
            {
                "sha": "d942c2d83c8c81eb1211f19c66f7027da6b2776f",
                "filename": "compute/src/main/java/org/jclouds/compute/strategy/DestroyNodeStrategy.java",
                "blob_url": "https://github.com/apache/jclouds/blob/915b548d04094ce4d48a848e3837395d40f3de88/compute/src/main/java/org/jclouds/compute/strategy/DestroyNodeStrategy.java",
                "raw_url": "https://github.com/apache/jclouds/raw/915b548d04094ce4d48a848e3837395d40f3de88/compute/src/main/java/org/jclouds/compute/strategy/DestroyNodeStrategy.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/strategy/DestroyNodeStrategy.java?ref=915b548d04094ce4d48a848e3837395d40f3de88",
                "patch": "@@ -19,6 +19,7 @@\n package org.jclouds.compute.strategy;\n \n import org.jclouds.compute.domain.NodeMetadata;\n+import org.jclouds.javax.annotation.Nullable;\n \n /**\n  * terminates the node\n@@ -31,6 +32,7 @@\n     * \n     * @return null if the node wasn't found\n     */\n+   @Nullable\n    NodeMetadata destroyNode(String id);\n \n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fix NPE and test ordering",
        "commit": "https://github.com/apache/jclouds/commit/3295c1fdc7ed1fdc75aa1408e1881636852a0187",
        "parent": "https://github.com/apache/jclouds/commit/33128f8d8b29c2f6df1678bd49a40bf635c5e008",
        "bug_id": "jclouds_18",
        "file": [
            {
                "sha": "32277c4ce56f03446ce40f685e3c4088bbb993ad",
                "filename": "labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3295c1fdc7ed1fdc75aa1408e1881636852a0187/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3295c1fdc7ed1fdc75aa1408e1881636852a0187/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/v1_5/features/AdminCatalogClientLiveTest.java?ref=3295c1fdc7ed1fdc75aa1408e1881636852a0187",
                "patch": "@@ -41,6 +41,7 @@\n import org.jclouds.vcloud.director.v1_5.domain.Reference;\n import org.jclouds.vcloud.director.v1_5.domain.User;\n import org.jclouds.vcloud.director.v1_5.internal.BaseVCloudDirectorClientLiveTest;\n+import org.testng.annotations.AfterClass;\n import org.testng.annotations.BeforeClass;\n import org.testng.annotations.Test;\n \n@@ -73,7 +74,7 @@\n \n    @Override\n    @BeforeClass(inheritGroups = true)\n-   public void setupRequiredClients() {\n+   protected void setupRequiredClients() {\n       catalogClient = context.getApi().getAdminCatalogClient();\n       orgRef = Iterables.getFirst(context.getApi().getOrgClient().getOrgList().getOrgs(), null).toAdminReference(endpoint);\n    }\n@@ -186,36 +187,47 @@ public void testPublishCatalog() {\n       \n       assertTrue(catalog.isPublished(), String.format(OBJ_FIELD_EQ, \n             CATALOG, \"isPublished\", true, catalog.isPublished()));\n-      \n    }\n    \n    @Test(testName = \"DELETE /admin/catalog/{id}\",\n-         dependsOnMethods = { \"testUpdateCatalog\" } )\n+         dependsOnMethods = { \"testCreateCatalog\" } )\n    public void testDeleteCatalog() {\n //      assertEquals(catalog.getCatalogItems().getCatalogItems().size(), 0, \n //            String.format(OBJ_FIELD_EMPTY_TO_DELETE, \"Catalog\", \"CatalogItems\", \n //                  catalog.getCatalogItems().getCatalogItems().toString()));\n-      catalogClient.deleteCatalog(catalog.getHref());\n+      AdminCatalog deleteCatalog = AdminCatalog.builder()\n+            .name(\"Test Catalog \" + random.nextInt())\n+            .description(\"created by testCreateCatalog()\")\n+            .build();\n+      deleteCatalog = catalogClient.createCatalog(orgRef.getHref(), deleteCatalog);\n+      catalogClient.deleteCatalog(deleteCatalog.getHref());\n       \n       Error expected = Error.builder()\n             .message(\"No access to entity \\\"(com.vmware.vcloud.entity.catalog:\"+\n-                  catalog.getId().substring(\"urn:vcloud:catalog:\".length())+\")\\\".\")\n+                  deleteCatalog.getId().substring(\"urn:vcloud:catalog:\".length())+\")\\\".\")\n             .majorErrorCode(403)\n             .minorErrorCode(\"ACCESS_TO_RESOURCE_IS_FORBIDDEN\")\n             .build();\n       \n       try {\n-         catalog = catalogClient.getCatalog(catalog.getHref());\n+         deleteCatalog = catalogClient.getCatalog(deleteCatalog.getHref());\n          fail(\"Should give HTTP 403 error\");\n       } catch (VCloudDirectorException vde) {\n          assertEquals(vde.getError(), expected);\n-         catalog = null;\n+         deleteCatalog = null;\n       } catch (Exception e) {\n          fail(\"Should have thrown a VCloudDirectorException\");\n       }\n       \n-      if (catalog != null) { // guard against NPE on the .toStrings\n-         assertNull(catalog, String.format(OBJ_DEL, CATALOG, catalog.toString()));\n+      if (deleteCatalog != null) { // guard against NPE on the .toStrings\n+         assertNull(deleteCatalog, String.format(OBJ_DEL, CATALOG, deleteCatalog.toString()));\n+      }\n+   }\n+   \n+   @AfterClass\n+   protected void tidyUp() {\n+      if (catalog != null) {\n+         catalogClient.deleteCatalog(catalog.getHref());\n       }\n    }\n }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "NPE guard in test formatter",
        "commit": "https://github.com/apache/jclouds/commit/84fe8fa4196b1abcfb9ff081894c02753bcc74dc",
        "parent": "https://github.com/apache/jclouds/commit/2af7272d668c5d3d7dda7f4992f4e2825f26535e",
        "bug_id": "jclouds_19",
        "file": [
            {
                "sha": "6abbb96dce756cf644e3c43f3511e8a12ec24a28",
                "filename": "labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "blob_url": "https://github.com/apache/jclouds/blob/84fe8fa4196b1abcfb9ff081894c02753bcc74dc/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "raw_url": "https://github.com/apache/jclouds/raw/84fe8fa4196b1abcfb9ff081894c02753bcc74dc/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java?ref=84fe8fa4196b1abcfb9ff081894c02753bcc74dc",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.jclouds.vcloud.director.testng;\n \n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.Set;\n \n@@ -104,7 +106,9 @@ private String getApi(ITestResult res) {\n    }\n \n    private String getOperation(ITestResult res) {\n-      return res.getMethod().getConstructorOrMethod().getMethod().getAnnotation(Test.class).testName();\n+      Method method = res.getMethod().getConstructorOrMethod().getMethod();\n+      Test test = method.getAnnotation(Test.class);\n+      return test != null ? test.testName() : method.getName();\n    }\n \n    private String getDuration() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 873:NPE on InstantiateVAppTemplate",
        "commit": "https://github.com/apache/jclouds/commit/0365e5856619827b863e2a0d3f6a8e77e90201f1",
        "parent": "https://github.com/apache/jclouds/commit/1bef09ab916b15a862069295d393c97da3d12001",
        "bug_id": "jclouds_20",
        "file": [
            {
                "sha": "5a898b307bd9389bc1a037757197d6d4d87216ee",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TaskHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TaskHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TaskHandler.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TaskHandler.java?ref=0365e5856619827b863e2a0d3f6a8e77e90201f1",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.jclouds.vcloud.xml;\n \n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n+\n import java.text.ParseException;\n import java.util.Date;\n import java.util.Map;\n@@ -69,7 +71,7 @@ public Task getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equalsIgnoreCase(\"Task\")) {\n+      if (equalsOrSuffix(qName, \"Task\")) {\n          if (attributes.get(\"href\") != null && !inOwner)// queued tasks may not have an\n             // href yet\n             taskLink = Utils.newReferenceType(attributes);\n@@ -82,11 +84,11 @@ public void startElement(String uri, String localName, String qName, Attributes\n          if (attributes.containsKey(\"expiryTime\"))\n             expiryTime = parseDate(attributes.get(\"expiryTime\"));\n          // TODO technically the old Result object should only be owner for copy and delete tasks\n-      } else if (qName.equals(\"Owner\") || qName.equals(\"Result\")) {\n+      } else if (equalsOrSuffix(qName, \"Owner\") || equalsOrSuffix(qName, \"Result\")) {\n          owner = Utils.newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n+      } else if (equalsOrSuffix(qName, \"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n          taskLink = Utils.newReferenceType(attributes);\n-      } else if (qName.equals(\"Error\")) {\n+      } else if (equalsOrSuffix(qName, \"Error\")) {\n          error = Utils.newError(attributes);\n       }\n    }\n@@ -108,7 +110,7 @@ private Date parseDate(String toParse) {\n \n    @Override\n    public void endElement(String uri, String localName, String qName) {\n-      if (qName.equalsIgnoreCase(\"Task\")) {\n+      if (equalsOrSuffix(qName, \"Task\")) {\n          this.task = new TaskImpl(taskLink.getHref(), operation, status, startTime, endTime, expiryTime, owner, error);\n          operation = null;\n          taskLink = null;\n@@ -117,7 +119,7 @@ public void endElement(String uri, String localName, String qName) {\n          endTime = null;\n          owner = null;\n          error = null;\n-      } else if (qName.equalsIgnoreCase(\"Owner\")) {\n+      } else if (equalsOrSuffix(qName, \"Owner\")) {\n          inOwner = false;\n       }\n    }",
                "deletions": 6
            },
            {
                "sha": "bb69c6be9d30921bce34a51735045c0e4e509316",
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/xml/TaskHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/TaskHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/TaskHandlerTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/TaskHandlerTest.java?ref=0365e5856619827b863e2a0d3f6a8e77e90201f1",
                "patch": "@@ -52,6 +52,12 @@ protected void setUpInjector() {\n       super.setUpInjector();\n       dateService = injector.getInstance(DateService.class);\n    }\n+   \n+   public void testHrefWhenTaskElementIsNamespaced() {\n+      InputStream is = getClass().getResourceAsStream(\"/task-vcd15.xml\");\n+      Task result = factory.create(injector.getInstance(TaskHandler.class)).parse(is);\n+      assertEquals(result.getHref(), URI.create(\"https://mycloud.greenhousedata.com/api/v1.0/task/77a33fd4-3401-423c-8167-6711fc51ee9a\"));\n+   }\n \n    public void test() {\n       InputStream is = getClass().getResourceAsStream(\"/task-1.0.xml\");",
                "deletions": 0
            },
            {
                "sha": "452287daddaad54d0cc915e6161243d03e91f152",
                "filename": "apis/vcloud/src/test/resources/task-vcd15.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/test/resources/task-vcd15.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/0365e5856619827b863e2a0d3f6a8e77e90201f1/apis/vcloud/src/test/resources/task-vcd15.xml",
                "status": "added",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/task-vcd15.xml?ref=0365e5856619827b863e2a0d3f6a8e77e90201f1",
                "patch": "@@ -0,0 +1,5 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<vcloud:Task xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" status=\"running\" startTime=\"2012-03-15T22:47:02.058-06:00\" operation=\"Updating Virtual Machine UbuntuServer-x64-2GB(c9004a47-5e21-4cf1-860c-670d8965b24a)\" expiryTime=\"2012-06-13T22:47:02.058-06:00\" type=\"application/vnd.vmware.vcloud.task+xml\" href=\"https://mycloud.greenhousedata.com/api/v1.0/task/77a33fd4-3401-423c-8167-6711fc51ee9a\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.vmware.com/vcloud/v1 http://mycloud.greenhousedata.com/api/v1.0/schema/master.xsd\">\n+    <vcloud:Link rel=\"task:cancel\" href=\"https://mycloud.greenhousedata.com/api/v1.0/task/77a33fd4-3401-423c-8167-6711fc51ee9a/action/cancel\"/>\n+    <vcloud:Owner type=\"application/vnd.vmware.vcloud.vm+xml\" name=\"UbuntuServer-x64-2GB\" href=\"https://mycloud.greenhousedata.com/api/v1.0/vApp/vm-c9004a47-5e21-4cf1-860c-670d8965b24a\"/>\n+</vcloud:Task>\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixed NPE and backfilled test",
        "commit": "https://github.com/apache/jclouds/commit/8b3010b5879b4e49a2ac2df5544579f8b5fff724",
        "parent": "https://github.com/apache/jclouds/commit/ab882bf0352d8c2ff1f8707b249d8d5e0d5bc6e7",
        "bug_id": "jclouds_21",
        "file": [
            {
                "sha": "52d98885a15b93c6ea6240865e129a6e323f6210",
                "filename": "core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "blob_url": "https://github.com/apache/jclouds/blob/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "raw_url": "https://github.com/apache/jclouds/raw/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java",
                "status": "modified",
                "changes": 13,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ParseFirstJsonValueNamed.java?ref=8b3010b5879b4e49a2ac2df5544579f8b5fff724",
                "patch": "@@ -27,8 +27,11 @@\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n+import javax.annotation.Resource;\n+\n import org.jclouds.http.HttpResponse;\n import org.jclouds.json.internal.GsonWrapper;\n+import org.jclouds.logging.Logger;\n \n import com.google.common.base.Function;\n import com.google.common.collect.ImmutableList;\n@@ -44,6 +47,9 @@\n  */\n public class ParseFirstJsonValueNamed<T> implements Function<HttpResponse, T> {\n \n+   @Resource\n+   protected Logger logger = Logger.NULL;\n+\n    private final GsonWrapper json;\n    private final TypeLiteral<T> type;\n    private final String name;\n@@ -68,8 +74,11 @@ public T apply(HttpResponse arg0) {\n          for (; token != JsonToken.END_DOCUMENT && nnn(this.name, reader, token, name); token = skipAndPeek(token,\n                reader))\n             ;\n-         if (name.get().equals(this.name)) {\n-            return json.delegate().<T>fromJson(reader, type.getType());\n+         if (name.get() == null) {\n+            logger.trace(\"did not object named %s in json from response %s\", this.name, arg0);\n+            return nothing();\n+         } else if (name.get().equals(this.name)) {\n+            return json.delegate().<T> fromJson(reader, type.getType());\n          } else {\n             return nothing();\n          }",
                "deletions": 2
            },
            {
                "sha": "0f043bc8b9b19aa71289cdacf8c0495edc324ef6",
                "filename": "core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/8b3010b5879b4e49a2ac2df5544579f8b5fff724/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java",
                "status": "added",
                "changes": 138,
                "additions": 138,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/http/functions/ParseFirstJsonValueNamedTest.java?ref=8b3010b5879b4e49a2ac2df5544579f8b5fff724",
                "patch": "@@ -0,0 +1,138 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.http.functions;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import org.jclouds.http.HttpResponse;\n+import org.jclouds.io.Payloads;\n+import org.jclouds.json.config.GsonModule;\n+import org.jclouds.json.internal.GsonWrapper;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.inject.Guice;\n+import com.google.inject.TypeLiteral;\n+\n+/**\n+ * \n+ * @author Adrian Cole\n+ */\n+@Test(testName = \"ParseFirstJsonValueNamedTest\")\n+public class ParseFirstJsonValueNamedTest {\n+\n+   GsonWrapper json = Guice.createInjector(new GsonModule()).getInstance(GsonWrapper.class);\n+\n+   static class Event {\n+      private String name;\n+      private String source;\n+\n+      private Event(String name, String source) {\n+         this.name = name;\n+         this.source = source;\n+      }\n+\n+      @Override\n+      public String toString() {\n+         return String.format(\"(name=%s, source=%s)\", name, source);\n+      }\n+   }\n+\n+   public void testParseNestedElements() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"event\\\" : [  {name:'GREETINGS',source:'guest'} ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[(name=GREETINGS, source=guest)]\");\n+   }\n+\n+   public void testParseNestedElementsWhenNotFoundIsEmpty() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"evant\\\" : [  {name:'GREETINGS',source:'guest'} ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNestedElementsButNothing() throws IOException {\n+      String nested = \"{ \\\"count\\\":1 ,\\\"event\\\" : [  ] }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nested)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNestedFurtherElements() throws IOException {\n+      String nestedFurther = \"{ \\\"listaccountsresponse\\\" : { \\\"count\\\":1 ,\\\"event\\\" : [  {name:'GREETINGS',source:'guest'} ] } }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nestedFurther)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[(name=GREETINGS, source=guest)]\");\n+   }\n+\n+   public void testParseNestedFurtherElementsButNothing() throws IOException {\n+      String nestedFurther = \"{ \\\"listaccountsresponse\\\" : { \\\"count\\\":1 ,\\\"event\\\" : [ ] } }\";\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\")\n+            .payload(Payloads.newPayload(nestedFurther)).build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val.toString(), \"[]\");\n+   }\n+\n+   public void testParseNoPayloadEmptyList() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      List<Event> val = new ParseFirstJsonValueNamed<List<Event>>(json, new TypeLiteral<List<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val, ImmutableList.<Event> of());\n+   }\n+\n+   public void testParseNoPayloadEmptyMap() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      Map<String, String> val = new ParseFirstJsonValueNamed<Map<String, String>>(json,\n+            new TypeLiteral<Map<String, String>>() {\n+            }, \"event\").apply(response);\n+      assertEquals(val, ImmutableMap.<String, String> of());\n+   }\n+\n+   public void testParseNoPayloadEmptySet() throws IOException {\n+      HttpResponse response = HttpResponse.builder().statusCode(200).message(\"goodie\").build();\n+\n+      Set<Event> val = new ParseFirstJsonValueNamed<Set<Event>>(json, new TypeLiteral<Set<Event>>() {\n+      }, \"event\").apply(response);\n+      assertEquals(val, ImmutableSet.<Event> of());\n+   }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-890: Prevent NPE when generating the Chef attributes file",
        "commit": "https://github.com/apache/jclouds/commit/2b855809a4ef1b87fb17e541442b97a02396fffd",
        "parent": "https://github.com/apache/jclouds/commit/efd4aa8bcfa3202dfadba8faebad928c7ec3940c",
        "bug_id": "jclouds_22",
        "file": [
            {
                "sha": "9920de5e6e7b7cbf18a6ab822ba863b3ebe36cc9",
                "filename": "apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/main/java/org/jclouds/chef/functions/GroupToBootScript.java?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "patch": "@@ -121,19 +121,24 @@ private Statement createClientRbFile(String clientRbFile, String group, String n\n    }\n \n    private Statement createAttributesFile(String chefBootFile, BootstrapConfig config) {\n-      String attributes = config.getAttributes().toString();\n       String runlist = Joiner.on(',').join(transform(config.getRunList(), new Function<String, String>() {\n          @Override\n          public String apply(String input) {\n             return \"\\\"\" + input + \"\\\"\";\n          }\n       }));\n \n-      // Append the runlist to the json attributes\n       StringBuilder sb = new StringBuilder();\n-      // Strip the json ending character\n-      sb.append(attributes.trim().substring(0, attributes.length() - 1));\n-      sb.append(\",\\\"run_list\\\":[\").append(runlist).append(\"]\");\n+      sb.append(\"{\");\n+\n+      if (config.getAttributes() != null) {\n+         String attributes = config.getAttributes().toString();\n+         // Omit the opening and closing json characters\n+         sb.append(attributes.trim().substring(1, attributes.length() - 1));\n+         sb.append(\",\");\n+      }\n+\n+      sb.append(\"\\\"run_list\\\":[\").append(runlist).append(\"]\");\n       sb.append(\"}\");\n \n       return createOrOverwriteFile(chefBootFile, Collections.singleton(sb.toString()));",
                "deletions": 5
            },
            {
                "sha": "dd4302440d3bb63c46fb42cc2f884889c87b7a4d",
                "filename": "apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/test/java/org/jclouds/chef/functions/GroupToBootScriptTest.java?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "patch": "@@ -204,6 +204,24 @@ public void testOneRecipeAndEnvironmentOmnibus() throws IOException {\n       verify(validatorKey);\n    }\n \n+   public void testNoAttribtues() throws IOException {\n+      Optional<PrivateKey> validatorCredential = Optional.of(createMock(PrivateKey.class));\n+      BootstrapConfig config = BootstrapConfig.builder()\n+            .environment(\"env\").runList(new RunListBuilder().addRecipe(\"apache2\").addRole(\"webserver\").build()).build();\n+\n+      GroupToBootScript fn = groupToBootScriptFor(config, validatorCredential, true);\n+\n+      PrivateKey validatorKey = validatorCredential.get();\n+      expect(validatorKey.getEncoded()).andReturn(PemsTest.PRIVATE_KEY.getBytes());\n+      replay(validatorKey);\n+\n+      assertEquals(fn.apply(\"foo\", null).render(OsFamily.UNIX),\n+            \"setupPublicCurl || exit 1\\ncurl -q -s -S -L --connect-timeout 10 --max-time 600 --retry 20 \"\n+                  + \"-X GET  https://www.opscode.com/chef/install.sh |(bash)\\n\" + readContent(\"bootstrap-env-noattrs.sh\"));\n+\n+      verify(validatorKey);\n+   }\n+\n    public void testCustomNodeName() throws IOException {\n       Optional<PrivateKey> validatorCredential = Optional.of(createMock(PrivateKey.class));\n       BootstrapConfig config = BootstrapConfig.builder().attributes(new JsonBall(\"{\\\"tomcat6\\\":{\\\"ssl_port\\\":8433}}\"))",
                "deletions": 0
            },
            {
                "sha": "fe0de79068610dd3e8d3cfaa5303115ffd25eb1e",
                "filename": "apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "blob_url": "https://github.com/apache/jclouds/blob/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "raw_url": "https://github.com/apache/jclouds/raw/2b855809a4ef1b87fb17e541442b97a02396fffd/apis/chef/src/test/resources/bootstrap-env-noattrs.sh",
                "status": "added",
                "changes": 57,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/chef/src/test/resources/bootstrap-env-noattrs.sh?ref=2b855809a4ef1b87fb17e541442b97a02396fffd",
                "patch": "@@ -0,0 +1,57 @@\n+mkdir -p /etc/chef\n+cat > /etc/chef/client.rb <<-'END_OF_JCLOUDS_FILE'\n+\trequire 'rubygems'\n+\trequire 'ohai'\n+\to = Ohai::System.new\n+\to.all_plugins\n+\tnode_name \"foo-\" + o[:ipaddress]\n+\tlog_level :info\n+\tlog_location STDOUT\n+\tvalidation_client_name \"chef-validator\"\n+\tchef_server_url \"http://localhost:4000\"\n+\tenvironment \"env\"\n+END_OF_JCLOUDS_FILE\n+cat > /etc/chef/validation.pem <<-'END_OF_JCLOUDS_FILE'\n+\t-----BEGIN PRIVATE KEY-----\n+\tLS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVB\n+\teWIyWkpKcUdtMEtLUis4bmZRSk5zU2QrRjl0WE5NVjdDZk9jVzZqc3FzOEVaZ2lW\n+\tClIwOWhEMUlZT2o0WXFNMHFKT05sZ3lnNHhSV2V3ZFNHN1FUUGoxbEpwVkFpZGE5\n+\tc1h5MitrenlhZ1pBMUFtME8KWmNicWI1aG9lSURnY1grZURhNzlzMHUwRG9tamNm\n+\tTzlFS2h2SExCeit6TSszUXFQUmtQVjhuWVRiZnMrSGpWegp6T1U2RDFCMFhSMytJ\n+\tUFpabDJBbldzMmQwcWhuU3RIY0RVdm5SVlEwUDQ4Mll3TjlWZ2NlT1p0cFB6MERD\n+\tS0VKCjVUeDVTVHViOGswL3p0L1ZBTUhRYWZMU3VRTUxkMnM0Wkx1T1pwdE4vL3VB\n+\tc1RteGlyZXFkMzd6KzhaVGRCYkoKOExFcEoraUNYdVNmbTVhVWg3aXc2b3h2VG9Z\n+\tMkFMNTMraksyVVFJREFRQUJBb0lCQVFEQTg4QjNpL3hXbjB2WApCVnhGYW1DWW9l\n+\tY3VOakd3WFhrU3laZXc2MTZBK0VPQ3U0N2JoNGFUdXJkRmJZTDBZRmFBdGFXdnps\n+\tYU4yZUhnCkRiK0hEdVRlZkUyOStXa2NHazZTc2hQbWl6NVQwWE9DQUlDV3c2d1NW\n+\tRGtIbUd3UzRqWnZiQUZtN1c4bndHazkKWWh4Z3hGaVJuZ3N3SlpGb3BPTG9GNVdY\n+\tczJ0ZDhndUlZTnNsTXBvN3R1NTBpRm5CSHdLTzJac1BBazh0OW5uUwp4bERhdkty\n+\tdXltRW1xSENyMytkdGlvNWVhZW5KY3AzZmpvWEJRT0tVazNpcElJMjlYUkI4TnFl\n+\tQ1ZWLzdLeHdxCmNrcU9CRWJSd0JjbGNreUliRCtSaUFnS3ZPZWxPUmpFaUU5UjQy\n+\tdnVxdnhSQTZrOWtkOW83dXRsWDBBVXRwRW4KM2daYzZMZXBBb0dCQVA5YWVsNVk3\n+\tNStzSzJKSlVOT09oTzhhZTQ1Y2RzaWxwMnlJMFgrVUJhU3VRczIrZHlQcAprcEVI\n+\tQXhkNHBtbVN2bi84YzlUbEVaaHIrcVliQUJYVlBsRG5jeHBJdXcyQWpiazdzL1M0\n+\tWGFTS3NScXBYTDU3CnpqL1FPcUxrUms4K09WVjlxNmxNZVFOcUx0RWoxdTZKUHZp\n+\tWDcwUm8rRlF0UnR0Tk9ZYmZkUC9mQW9HQkFNcEEKWGpSNXdvVjVzVWIrUkVnOXZF\n+\tdVlvOFJTeU9hcnhxS0ZDSVhWVU5zTE94KzIyK0FLNCtDUXBidWVXTjdqb3RybApZ\n+\tRDZ1VDZzdldpM0FBQzdraVkwVUkvZmpWUFJDVWk4dFZvUVVFMFRhVTVWTElUYVlP\n+\tQitXL2JCYURFNE05NTYwCjFOdURXTzkwYmFBNWRmVTQ0aXV6dmEwMnJHSlhLOStu\n+\tUzNvOG5rL1BBb0dCQUxPTDZkam5EZTRtd0FhRzZKY28KY2Q0eHI4amt5UHpDUlp1\n+\teUJDU0Jid3BoSVVYTGM3aERwclBreTA2NG5jSkQxVURtd0lka1hkL2ZwTWtnMlFt\n+\tQQovQ1VrNkxFRmpNaXNxSG9qT2FDTDlnUVpKUGhMTjVRVU4yeDFQSldHanMxdlFo\n+\tOFRreDBpVVVDT2E4YlFQWE5SCiszNE9Uc1c2VFVuYTRDU1pBeWNMZmhmZkFvR0JB\n+\tSWdnVnNlZkJDdnVRa0YwTmVVaG1EQ1JaZmhuZDh5NTVSSFIKMUhDdnFLSWxwdity\n+\taGNYL3pteUJMdXRlb3BZeVJKUnNPaUUyRlcwMGk4K3JJUFJ1NFozUTVueWJ4N3cz\n+\tUHpWOQpvSE41UjViYUU5T3lJNEtwWld6dHBZWWl0WkY2N05jbkF2VlVMSEhPdlZK\n+\tUUduS1lmTEhKWW1ySkY3R0Exb2pNCkF1TWRGYmpGQW9HQVB4VWh4d0Z5OGdhcUJh\n+\taEtVRVpuNEY4MUhGUDVpaEdoa1Q0UUw2QUZQTzJlK0poSUdqdVIKMjcrODVoY0Zx\n+\tUStISFZ0RnNtODFiL2ErUjdQNFV1Q1JnYzhlQ2p4UU1vSjFYbDRuN1ZialBiSE1u\n+\tSU4wUnl2ZApPNFpwV0RXWW5DTzAyMUpUT1VVT0o0Si95MDQxNkJ2a3cwejU5eTdz\n+\tTlg3d0RCQkhIYksvWENjPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=\n+\t-----END PRIVATE KEY-----\n+\t\n+END_OF_JCLOUDS_FILE\n+cat > /etc/chef/first-boot.json <<-'END_OF_JCLOUDS_FILE'\n+\t{\"run_list\":[\"recipe[apache2]\",\"role[webserver]\"]}\n+END_OF_JCLOUDS_FILE\n+chef-client -j /etc/chef/first-boot.json",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixed NPE on ec2 log statement",
        "commit": "https://github.com/apache/jclouds/commit/6dc03a7993e9ce5c5a8dd33c84efa75ef07ae2e4",
        "parent": "https://github.com/apache/jclouds/commit/d85fbb55c6043b7fbcb5aeca844ed3915a014983",
        "bug_id": "jclouds_23",
        "file": [
            {
                "sha": "b67919be0b117cd454698c47bc0316d43d9e9f95",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6dc03a7993e9ce5c5a8dd33c84efa75ef07ae2e4/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6dc03a7993e9ce5c5a8dd33c84efa75ef07ae2e4/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java?ref=6dc03a7993e9ce5c5a8dd33c84efa75ef07ae2e4",
                "patch": "@@ -81,7 +81,6 @@\n import org.jclouds.ec2.domain.KeyPair;\n import org.jclouds.ec2.domain.RunningInstance;\n import org.jclouds.ec2.domain.Tag;\n-import org.jclouds.ec2.util.SubnetFilterBuilder;\n import org.jclouds.ec2.util.TagFilterBuilder;\n import org.jclouds.scriptbuilder.functions.InitAdminAccess;\n \n@@ -309,7 +308,7 @@ public boolean apply(RegionAndName input) {\n                logger.debug(\"<< deleted incidentalResources(%s)\", input);\n                return true;\n             } catch (IllegalStateException e) {\n-               logger.debug(\"<< inUse incidentalResources(%s @ %s)\", input);\n+               logger.debug(\"<< inUse incidentalResources(%s)\", input);\n                return false;\n             }\n          }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "openstack-nova: fixing NPE in toString()",
        "commit": "https://github.com/apache/jclouds/commit/2c82ab283207776c1127a78f7f6eb392a50f832f",
        "parent": "https://github.com/apache/jclouds/commit/404dc9314012425f0b04569d14b50c43e37a9e85",
        "bug_id": "jclouds_24",
        "file": [
            {
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/2c82ab283207776c1127a78f7f6eb392a50f832f/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=2c82ab283207776c1127a78f7f6eb392a50f832f",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 830: Fixing NPE in test listener",
        "commit": "https://github.com/apache/jclouds/commit/4324edc1d2b12dc032f447e71518f79f124a3dd9",
        "parent": "https://github.com/apache/jclouds/commit/7e6b4190687ff4a215fb201e9e0ac871cf95c9a0",
        "bug_id": "jclouds_25",
        "file": [
            {
                "sha": "fac0e0f41cda73367162ecd8ef98947a29db8d9b",
                "filename": "labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "blob_url": "https://github.com/apache/jclouds/blob/4324edc1d2b12dc032f447e71518f79f124a3dd9/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "raw_url": "https://github.com/apache/jclouds/raw/4324edc1d2b12dc032f447e71518f79f124a3dd9/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java?ref=4324edc1d2b12dc032f447e71518f79f124a3dd9",
                "patch": "@@ -28,7 +28,9 @@\n import org.testng.TestListenerAdapter;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicates;\n+import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n \n@@ -79,15 +81,16 @@ private String resultForState(ITestResult res, String state) {\n    }\n \n    private String getApi(ITestResult res) {\n-      return Iterables.find(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      Optional<String> found = Iterables.tryFind(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      return found.isPresent() ? found.get() : \"\";\n    }\n \n    private String getOperation(ITestResult res) {\n-      return res.getMethod().getDescription();\n+      return Strings.nullToEmpty(res.getMethod().getDescription());\n    }\n \n    private String getTest(ITestResult res) {\n-      return res.getName();\n+      return Strings.nullToEmpty(res.getName());\n    }\n \n    private String getStart(ITestResult res) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "cloudfiles NPE when CDN not present",
        "commit": "https://github.com/apache/jclouds/commit/cc5aa5cee28a15e1b051b8650076df2a89d82117",
        "parent": "https://github.com/apache/jclouds/commit/ef021720b1a3dc1d086160d1b49849964e7e2fb6",
        "bug_id": "jclouds_26",
        "file": [
            {
                "sha": "e78b301302d68328ee0fa83b86b8e667ce657d5e",
                "filename": "apis/cloudfiles/src/main/java/org/jclouds/cloudfiles/blobstore/functions/PublicUriForObjectInfo.java",
                "blob_url": "https://github.com/apache/jclouds/blob/cc5aa5cee28a15e1b051b8650076df2a89d82117/apis/cloudfiles/src/main/java/org/jclouds/cloudfiles/blobstore/functions/PublicUriForObjectInfo.java",
                "raw_url": "https://github.com/apache/jclouds/raw/cc5aa5cee28a15e1b051b8650076df2a89d82117/apis/cloudfiles/src/main/java/org/jclouds/cloudfiles/blobstore/functions/PublicUriForObjectInfo.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudfiles/src/main/java/org/jclouds/cloudfiles/blobstore/functions/PublicUriForObjectInfo.java?ref=cc5aa5cee28a15e1b051b8650076df2a89d82117",
                "patch": "@@ -52,6 +52,9 @@ public URI apply(ObjectInfo from) {\n       try {\n          return uriBuilders.get().uri(cdnContainer.getUnchecked(from.getContainer())).path(from.getName()).replaceQuery(\"\")\n                   .build();\n+      } catch (NullPointerException e) {\n+         // nulls not permitted from cache loader\n+         return null;\n       } catch (CacheLoader.InvalidCacheLoadException e) {\n          // nulls not permitted from cache loader\n          return null;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 617:address NPE failures in CI",
        "commit": "https://github.com/apache/jclouds/commit/fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
        "parent": "https://github.com/apache/jclouds/commit/f42d2bdb31be3bf208b11c635818c3a1b57516c1",
        "bug_id": "jclouds_27",
        "file": [
            {
                "sha": "57812360a3f804e2e5b7278fe46354612734ed73",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/GoGridLiveTestDisabled.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -81,7 +81,8 @@\n  * \n  * @author Oleksiy Yarmula\n  */\n-@Test(enabled = true, groups = \"live\")\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(enabled = false, groups = \"live\", testName = \"GoGridLiveTestDisabled\")\n public class GoGridLiveTestDisabled {\n \n    private GoGridClient client;",
                "deletions": 1
            },
            {
                "sha": "0fc3f7b3eb28e4fb5a190bf042afe8972fdec37e",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindIdsToQueryParamsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindIdsToQueryParamsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindIdsToQueryParamsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindIdsToQueryParamsTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -35,6 +35,8 @@\n  * \n  * @author Oleksiy Yarmula\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"BindIdsToQueryParamsTest\")\n public class BindIdsToQueryParamsTest {\n \n    @Test",
                "deletions": 0
            },
            {
                "sha": "b0668005c5fc326c17581cad0d689073c7964050",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindNamesToQueryParamsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindNamesToQueryParamsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindNamesToQueryParamsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/binders/BindNamesToQueryParamsTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -35,6 +35,8 @@\n  * \n  * @author Oleksiy Yarmula\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"BindNamesToQueryParamsTest\")\n public class BindNamesToQueryParamsTest {\n \n    @Test",
                "deletions": 0
            },
            {
                "sha": "ab5bbf2e55e0d657b016629d8a952ee61d16fe65",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridComputeServiceLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridComputeServiceLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridComputeServiceLiveTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridComputeServiceLiveTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -25,7 +25,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n-@Test(groups = \"live\", enabled = true, sequential = true)\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"live\", singleThreaded = true, testName = \"GoGridComputeServiceLiveTest\")\n public class GoGridComputeServiceLiveTest extends BaseComputeServiceLiveTest {\n    public GoGridComputeServiceLiveTest() {\n       provider = \"gogrid\";",
                "deletions": 1
            },
            {
                "sha": "4182b9d3cbdc676c500110e1eded3ef1b663a91e",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridTemplateBuilderLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridTemplateBuilderLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridTemplateBuilderLiveTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/GoGridTemplateBuilderLiveTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -38,7 +38,8 @@\n  * \n  * @author Adrian Cole\n  */\n-@Test(groups = \"live\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"live\", singleThreaded = true, testName = \"GoGridTemplateBuilderLiveTest\")\n public class GoGridTemplateBuilderLiveTest extends BaseTemplateBuilderLiveTest {\n \n    public GoGridTemplateBuilderLiveTest() {",
                "deletions": 1
            },
            {
                "sha": "e59f9b72192d648687b257456974c3455dedb620",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModuleTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModuleTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModuleTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/config/GoGridComputeServiceContextModuleTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -24,7 +24,8 @@\n /**\n  * @author Adrian Cole\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"GoGridComputeServiceContextModuleTest\")\n public class GoGridComputeServiceContextModuleTest {\n \n    public void testAllStatusCovered() {",
                "deletions": 1
            },
            {
                "sha": "6fb98d8ea9979a8743f03e5435e8e15e57bc256a",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/compute/functions/ServerToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/functions/ServerToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/functions/ServerToNodeMetadataTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/functions/ServerToNodeMetadataTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -54,7 +54,8 @@\n /**\n  * @author Adrian Cole\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ServerToNodeMetadataTest\")\n public class ServerToNodeMetadataTest {\n \n    @SuppressWarnings(\"unchecked\")",
                "deletions": 1
            },
            {
                "sha": "a517bb0ae25c0b5158a3ca909b7245bad0726659",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/compute/options/GoGridTemplateOptionsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/options/GoGridTemplateOptionsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/options/GoGridTemplateOptionsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/compute/options/GoGridTemplateOptionsTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -28,6 +28,8 @@\n  * \n  * @author Andrew Kennedy\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"GoGridTemplateOptionsTest\")\n public class GoGridTemplateOptionsTest {\n    @Test\n    public void testAs() {",
                "deletions": 0
            },
            {
                "sha": "8f3aab7d85c127fd8b187fed2b6876af8f5eabf2",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseCredentialsFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseCredentialsFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseCredentialsFromJsonResponseTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseCredentialsFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -47,7 +47,8 @@\n /**\n  * @author Adrian Cole\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseCredentialsFromJsonResponseTest\")\n public class ParseCredentialsFromJsonResponseTest {\n \n    @Test(expectedExceptions = IllegalStateException.class)",
                "deletions": 1
            },
            {
                "sha": "9751bc719a48033d6686bc30dff85996ae5d4e61",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseErrorFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseErrorFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseErrorFromJsonResponseTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseErrorFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -35,6 +35,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseErrorFromJsonResponseTest\")\n public class ParseErrorFromJsonResponseTest {\n \n    Injector i = Guice.createInjector(new GsonModule() {",
                "deletions": 0
            },
            {
                "sha": "f08da2206c7814384b35cb776a0be7036db99d79",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseJobsFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseJobsFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseJobsFromJsonResponseTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseJobsFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -51,7 +51,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseJobsFromJsonResponseTest\")\n public class ParseJobsFromJsonResponseTest {\n \n    @Test",
                "deletions": 1
            },
            {
                "sha": "4ea0b9d386a39f3565ac023df64289fc236fd15e",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseLoadBalancersFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseLoadBalancersFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseLoadBalancersFromJsonResponseTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseLoadBalancersFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -54,7 +54,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseLoadBalancersFromJsonResponseTest\")\n public class ParseLoadBalancersFromJsonResponseTest {\n \n    @Test",
                "deletions": 1
            },
            {
                "sha": "843533df025e0ea3104c3ceb01b389af852f755f",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServerNameToCredentialsMapFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServerNameToCredentialsMapFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServerNameToCredentialsMapFromJsonResponseTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServerNameToCredentialsMapFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -47,7 +47,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseServerNameToCredentialsMapFromJsonResponseTest\")\n public class ParseServerNameToCredentialsMapFromJsonResponseTest {\n \n    @Test",
                "deletions": 1
            },
            {
                "sha": "6e053cc484bc6f7931418cebd12ed6bf993c5860",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServersFromJsonResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServersFromJsonResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServersFromJsonResponseTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/functions/ParseServersFromJsonResponseTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -57,7 +57,8 @@\n  * \n  * @author Adrian Cole\n  */\n-@Test(groups = \"unit\")\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ParseServersFromJsonResponseTest\")\n public class ParseServersFromJsonResponseTest {\n \n    @Test",
                "deletions": 1
            },
            {
                "sha": "3f8393d393b0a9d00df020b66b3384269f5cd6e4",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/handlers/GoGridErrorHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/handlers/GoGridErrorHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/handlers/GoGridErrorHandlerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/handlers/GoGridErrorHandlerTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -40,6 +40,8 @@\n  * \n  * @author Oleksiy Yarmula\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"GoGridErrorHandlerTest\")\n public class GoGridErrorHandlerTest {\n \n    @Test",
                "deletions": 0
            },
            {
                "sha": "d0e3b94f917c44fad4863565fb4db76a41ebbc3c",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/options/AddServerOptionsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/options/AddServerOptionsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/options/AddServerOptionsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/options/AddServerOptionsTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -32,6 +32,8 @@\n  * \n  * @author Adrian Cole\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"AddServerOptionsTest\")\n public class AddServerOptionsTest {\n \n    @Test",
                "deletions": 0
            },
            {
                "sha": "b24688fa41aaab97ce4fd6ad5de250f997727d25",
                "filename": "providers/gogrid/src/test/java/org/jclouds/gogrid/predicates/ServerLatestJobCompletedTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/predicates/ServerLatestJobCompletedTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fae29d217eb5b843c39a7b1b01922ae37ab7f15d/providers/gogrid/src/test/java/org/jclouds/gogrid/predicates/ServerLatestJobCompletedTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/test/java/org/jclouds/gogrid/predicates/ServerLatestJobCompletedTest.java?ref=fae29d217eb5b843c39a7b1b01922ae37ab7f15d",
                "patch": "@@ -35,6 +35,8 @@\n /**\n  * @author Oleksiy Yarmula\n  */\n+//NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"ServerLatestJobCompletedTest\")\n public class ServerLatestJobCompletedTest {\n \n     @Test",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "mapmaker doesn't return null, rather NPE",
        "commit": "https://github.com/apache/jclouds/commit/b7e2f606c75d355385a91d6f805c82d081c59b24",
        "parent": "https://github.com/apache/jclouds/commit/ad96923db7f80da1fc2dca2288f0924c61eefffa",
        "bug_id": "jclouds_28",
        "file": [
            {
                "sha": "71b0950ed1bedfd8bbc05eb87dd51cc88c1c3940",
                "filename": "apis/s3/src/main/java/org/jclouds/s3/blobstore/S3AsyncBlobStore.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b7e2f606c75d355385a91d6f805c82d081c59b24/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3AsyncBlobStore.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b7e2f606c75d355385a91d6f805c82d081c59b24/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3AsyncBlobStore.java",
                "status": "modified",
                "changes": 42,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3AsyncBlobStore.java?ref=b7e2f606c75d355385a91d6f805c82d081c59b24",
                "patch": "@@ -57,12 +57,12 @@\n import org.jclouds.s3.blobstore.functions.ObjectToBlob;\n import org.jclouds.s3.blobstore.functions.ObjectToBlobMetadata;\n import org.jclouds.s3.domain.AccessControlList;\n+import org.jclouds.s3.domain.AccessControlList.GroupGranteeURI;\n+import org.jclouds.s3.domain.AccessControlList.Permission;\n import org.jclouds.s3.domain.BucketMetadata;\n import org.jclouds.s3.domain.CannedAccessPolicy;\n import org.jclouds.s3.domain.ListBucketResponse;\n import org.jclouds.s3.domain.ObjectMetadata;\n-import org.jclouds.s3.domain.AccessControlList.GroupGranteeURI;\n-import org.jclouds.s3.domain.AccessControlList.Permission;\n import org.jclouds.s3.options.ListBucketOptions;\n import org.jclouds.s3.options.PutBucketOptions;\n import org.jclouds.s3.options.PutObjectOptions;\n@@ -94,12 +94,12 @@\n \n    @Inject\n    protected S3AsyncBlobStore(BlobStoreContext context, BlobUtils blobUtils,\n-            @Named(Constants.PROPERTY_USER_THREADS) ExecutorService service, Supplier<Location> defaultLocation,\n-            @Memoized Supplier<Set<? extends Location>> locations, S3AsyncClient async, S3Client sync,\n-            BucketToResourceMetadata bucket2ResourceMd, ContainerToBucketListOptions container2BucketListOptions,\n-            BucketToResourceList bucket2ResourceList, ObjectToBlob object2Blob,\n-            BlobToHttpGetOptions blob2ObjectGetOptions, BlobToObject blob2Object, ObjectToBlobMetadata object2BlobMd,\n-            Provider<FetchBlobMetadata> fetchBlobMetadataProvider, Map<String, AccessControlList> bucketAcls) {\n+         @Named(Constants.PROPERTY_USER_THREADS) ExecutorService service, Supplier<Location> defaultLocation,\n+         @Memoized Supplier<Set<? extends Location>> locations, S3AsyncClient async, S3Client sync,\n+         BucketToResourceMetadata bucket2ResourceMd, ContainerToBucketListOptions container2BucketListOptions,\n+         BucketToResourceList bucket2ResourceList, ObjectToBlob object2Blob,\n+         BlobToHttpGetOptions blob2ObjectGetOptions, BlobToObject blob2Object, ObjectToBlobMetadata object2BlobMd,\n+         Provider<FetchBlobMetadata> fetchBlobMetadataProvider, Map<String, AccessControlList> bucketAcls) {\n       super(context, blobUtils, service, defaultLocation, locations);\n       this.blob2ObjectGetOptions = checkNotNull(blob2ObjectGetOptions, \"blob2ObjectGetOptions\");\n       this.async = checkNotNull(async, \"async\");\n@@ -120,11 +120,11 @@ protected S3AsyncBlobStore(BlobStoreContext context, BlobUtils blobUtils,\n    @Override\n    public ListenableFuture<PageSet<? extends StorageMetadata>> list() {\n       return Futures.compose(async.listOwnedBuckets(),\n-               new Function<Set<BucketMetadata>, org.jclouds.blobstore.domain.PageSet<? extends StorageMetadata>>() {\n-                  public org.jclouds.blobstore.domain.PageSet<? extends StorageMetadata> apply(Set<BucketMetadata> from) {\n-                     return new PageSetImpl<StorageMetadata>(Iterables.transform(from, bucket2ResourceMd), null);\n-                  }\n-               }, service);\n+            new Function<Set<BucketMetadata>, org.jclouds.blobstore.domain.PageSet<? extends StorageMetadata>>() {\n+               public org.jclouds.blobstore.domain.PageSet<? extends StorageMetadata> apply(Set<BucketMetadata> from) {\n+                  return new PageSetImpl<StorageMetadata>(Iterables.transform(from, bucket2ResourceMd), null);\n+               }\n+            }, service);\n    }\n \n    /**\n@@ -163,9 +163,9 @@ protected S3AsyncBlobStore(BlobStoreContext context, BlobUtils blobUtils,\n       ListBucketOptions httpOptions = container2BucketListOptions.apply(options);\n       ListenableFuture<ListBucketResponse> returnVal = async.listBucket(container, httpOptions);\n       ListenableFuture<PageSet<? extends StorageMetadata>> list = Futures.compose(returnVal, bucket2ResourceList,\n-               service);\n+            service);\n       return (options.isDetailed()) ? Futures.compose(list,\n-               fetchBlobMetadataProvider.get().setContainerName(container), service) : list;\n+            fetchBlobMetadataProvider.get().setContainerName(container), service) : list;\n    }\n \n    /**\n@@ -233,9 +233,13 @@ public BlobMetadata apply(ObjectMetadata from) {\n    @Override\n    public ListenableFuture<String> putBlob(String container, Blob blob) {\n       PutObjectOptions options = new PutObjectOptions();\n-      AccessControlList acl = bucketAcls.get(container);\n-      if (acl != null && acl.hasPermission(GroupGranteeURI.ALL_USERS, Permission.READ))\n-         options.withAcl(CannedAccessPolicy.PUBLIC_READ);\n+      try {\n+         AccessControlList acl = bucketAcls.get(container);\n+         if (acl != null && acl.hasPermission(GroupGranteeURI.ALL_USERS, Permission.READ))\n+            options.withAcl(CannedAccessPolicy.PUBLIC_READ);\n+      } catch (NullPointerException e) {\n+         // MapMaker\n+      }\n       return async.putObject(container, blob2Object.apply(blob), options);\n    }\n \n@@ -260,7 +264,7 @@ public BlobMetadata apply(ObjectMetadata from) {\n \n    @Override\n    public ListenableFuture<Boolean> createContainerInLocation(Location location, String container,\n-            CreateContainerOptions options) {\n+         CreateContainerOptions options) {\n       PutBucketOptions putBucketOptions = new PutBucketOptions();\n       if (options.isPublicRead())\n          putBucketOptions.withBucketAcl(CannedAccessPolicy.PUBLIC_READ);",
                "deletions": 19
            },
            {
                "sha": "29af4790cf28574ed2c2f54618e19a42f20afcb0",
                "filename": "apis/s3/src/main/java/org/jclouds/s3/blobstore/S3BlobStore.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b7e2f606c75d355385a91d6f805c82d081c59b24/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3BlobStore.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b7e2f606c75d355385a91d6f805c82d081c59b24/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3BlobStore.java",
                "status": "modified",
                "changes": 24,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/s3/src/main/java/org/jclouds/s3/blobstore/S3BlobStore.java?ref=b7e2f606c75d355385a91d6f805c82d081c59b24",
                "patch": "@@ -52,10 +52,10 @@\n import org.jclouds.s3.blobstore.functions.ObjectToBlob;\n import org.jclouds.s3.blobstore.functions.ObjectToBlobMetadata;\n import org.jclouds.s3.domain.AccessControlList;\n-import org.jclouds.s3.domain.BucketMetadata;\n-import org.jclouds.s3.domain.CannedAccessPolicy;\n import org.jclouds.s3.domain.AccessControlList.GroupGranteeURI;\n import org.jclouds.s3.domain.AccessControlList.Permission;\n+import org.jclouds.s3.domain.BucketMetadata;\n+import org.jclouds.s3.domain.CannedAccessPolicy;\n import org.jclouds.s3.options.ListBucketOptions;\n import org.jclouds.s3.options.PutBucketOptions;\n import org.jclouds.s3.options.PutObjectOptions;\n@@ -85,11 +85,11 @@\n \n    @Inject\n    protected S3BlobStore(BlobStoreContext context, BlobUtils blobUtils, Supplier<Location> defaultLocation,\n-            @Memoized Supplier<Set<? extends Location>> locations, S3Client sync,\n-            BucketToResourceMetadata bucket2ResourceMd, ContainerToBucketListOptions container2BucketListOptions,\n-            BucketToResourceList bucket2ResourceList, ObjectToBlob object2Blob,\n-            BlobToHttpGetOptions blob2ObjectGetOptions, BlobToObject blob2Object, ObjectToBlobMetadata object2BlobMd,\n-            Provider<FetchBlobMetadata> fetchBlobMetadataProvider, Map<String, AccessControlList> bucketAcls) {\n+         @Memoized Supplier<Set<? extends Location>> locations, S3Client sync,\n+         BucketToResourceMetadata bucket2ResourceMd, ContainerToBucketListOptions container2BucketListOptions,\n+         BucketToResourceList bucket2ResourceList, ObjectToBlob object2Blob,\n+         BlobToHttpGetOptions blob2ObjectGetOptions, BlobToObject blob2Object, ObjectToBlobMetadata object2BlobMd,\n+         Provider<FetchBlobMetadata> fetchBlobMetadataProvider, Map<String, AccessControlList> bucketAcls) {\n       super(context, blobUtils, defaultLocation, locations);\n       this.blob2ObjectGetOptions = checkNotNull(blob2ObjectGetOptions, \"blob2ObjectGetOptions\");\n       this.sync = checkNotNull(sync, \"sync\");\n@@ -233,9 +233,13 @@ public Blob getBlob(String container, String key, org.jclouds.blobstore.options.\n    @Override\n    public String putBlob(String container, Blob blob) {\n       PutObjectOptions options = new PutObjectOptions();\n-      AccessControlList acl = bucketAcls.get(container);\n-      if (acl != null && acl.hasPermission(GroupGranteeURI.ALL_USERS, Permission.READ))\n-         options.withAcl(CannedAccessPolicy.PUBLIC_READ);\n+      try {\n+         AccessControlList acl = bucketAcls.get(container);\n+         if (acl != null && acl.hasPermission(GroupGranteeURI.ALL_USERS, Permission.READ))\n+            options.withAcl(CannedAccessPolicy.PUBLIC_READ);\n+      } catch (NullPointerException e) {\n+         // MapMaker\n+      }\n       return sync.putObject(container, blob2Object.apply(blob), options);\n    }\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-607: ComputeService.createNodesInGroup throws NPE on FloatingIPApi.create()",
        "commit": "https://github.com/apache/jclouds/commit/3659a5f583d38a925476287d47b34b4afa7bdb43",
        "parent": "https://github.com/apache/jclouds/commit/4cf6efe39a4c36d01207a191df2f8618442b8178",
        "bug_id": "jclouds_29",
        "file": [
            {
                "sha": "347510c62c889494589784c36cc1796488d33fe6",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java",
                "status": "modified",
                "changes": 93,
                "additions": 67,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNode.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -19,8 +19,9 @@\n import static com.google.common.base.Preconditions.checkState;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n \n import javax.annotation.Resource;\n@@ -32,13 +33,15 @@\n import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.logging.Logger;\n import org.jclouds.openstack.nova.v2_0.NovaApi;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.domain.FloatingIP;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneAndId;\n import org.jclouds.openstack.nova.v2_0.extensions.FloatingIPApi;\n import org.jclouds.rest.InsufficientResourcesException;\n \n import com.google.common.base.Function;\n import com.google.common.base.Objects;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicate;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.ImmutableSet;\n@@ -49,7 +52,7 @@\n  * A function for adding and allocating an ip to a node\n  */\n public class AllocateAndAddFloatingIpToNode implements\n-         Function<AtomicReference<NodeMetadata>, AtomicReference<NodeMetadata>> {\n+         Function<AtomicReference<NodeAndNovaTemplateOptions>, AtomicReference<NodeMetadata>> {\n \n    @Resource\n    @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n@@ -68,39 +71,77 @@ public AllocateAndAddFloatingIpToNode(@Named(TIMEOUT_NODE_RUNNING) Predicate<Ato\n    }\n \n    @Override\n-   public AtomicReference<NodeMetadata> apply(AtomicReference<NodeMetadata> input) {\n-      checkState(nodeRunning.apply(input), \"node never achieved state running %s\", input.get());\n-      NodeMetadata node = input.get();\n+   public AtomicReference<NodeMetadata> apply(AtomicReference<NodeAndNovaTemplateOptions> input) {\n+      checkState(nodeRunning.apply(input.get().getNodeMetadata()), \"node never achieved state running %s\", input.get().getNodeMetadata());\n+      NodeMetadata node = input.get().getNodeMetadata().get();\n       // node's location is a host\n       String zoneId = node.getLocation().getParent().getId();\n       FloatingIPApi floatingIpApi = novaApi.getFloatingIPExtensionForZone(zoneId).get();\n+      Optional<Set<String>> poolNames = input.get().getNovaTemplateOptions().get().getFloatingIpPoolNames();\n+\n+      Optional<FloatingIP> ip = allocateFloatingIPForNode(floatingIpApi, poolNames, node.getId());\n+      if (!ip.isPresent()) {\n+         throw new InsufficientResourcesException(\"Failed to allocate a FloatingIP for node(\" + node.getId() + \")\");\n+      }\n+      logger.debug(\">> adding floatingIp(%s) to node(%s)\", ip.get().getIp(), node.getId());\n+\n+      floatingIpApi.addToServer(ip.get().getIp(), node.getProviderId());\n+      input.get().getNodeMetadata().set(NodeMetadataBuilder.fromNodeMetadata(node).publicAddresses(ImmutableSet.of(ip.get().getIp())).build());\n+      floatingIpCache.invalidate(ZoneAndId.fromSlashEncoded(node.getId()));\n+      return input.get().getNodeMetadata();\n+   }\n+\n+   /**\n+    * Allocates a FloatingIP for a given Node\n+    *\n+    * @param floatingIpApi FloatingIPApi to create or query for a valid FloatingIP\n+    * @param poolNames optional set of pool names from which we will attempt to allocate an IP from. Most cases this is null\n+    * @param nodeID optional id of the Node we are trying to allocate a FloatingIP for. Used here only for logging purposes\n+    * @return Optional<FloatingIP>\n+    */\n+   private Optional<FloatingIP> allocateFloatingIPForNode(FloatingIPApi floatingIpApi, Optional<Set<String>> poolNames, String nodeID) {\n \n       FloatingIP ip = null;\n+\n+      // 1.) Attempt to allocate from optionally passed poolNames\n+      if (poolNames.isPresent()) {\n+         for (String poolName : poolNames.get()) {\n+            try {\n+               logger.debug(\">> allocating floating IP from pool %s for node(%s)\", poolName, nodeID);\n+               ip = floatingIpApi.allocateFromPool(poolName);\n+               if (ip != null)\n+                  return Optional.of(ip);\n+            } catch (InsufficientResourcesException ire){\n+               logger.trace(\"<< [%s] failed to allocate floating IP from pool %s for node(%s)\", ire.getMessage(), poolName, nodeID);\n+            }\n+         }\n+      }\n+\n+      // 2.) Attempt to allocate, if necessary, via 'create()' call\n       try {\n-         logger.debug(\">> allocating or reassigning floating ip for node(%s)\", node.getId());\n+         logger.debug(\">> creating floating IP for node(%s)\", nodeID);\n          ip = floatingIpApi.create();\n-      } catch (InsufficientResourcesException e) {\n-         logger.trace(\"<< [%s] allocating a new floating ip for node(%s)\", e.getMessage(), node.getId());\n-         logger.trace(\">> searching for existing, unassigned floating ip for node(%s)\", node.getId());\n-         ArrayList<FloatingIP> unassignedIps = Lists.newArrayList(Iterables.filter(floatingIpApi.list(),\n-                  new Predicate<FloatingIP>() {\n-\n-                     @Override\n-                     public boolean apply(FloatingIP arg0) {\n-                        return arg0.getFixedIp() == null;\n-                     }\n-\n-                  }));\n-         // try to prevent multiple parallel launches from choosing the same ip.\n-         Collections.shuffle(unassignedIps);\n-         ip = Iterables.getLast(unassignedIps);\n+         if (ip != null)\n+            return Optional.of(ip);\n+      } catch (InsufficientResourcesException ire) {\n+         logger.trace(\"<< [%s] failed to create floating IP for node(%s)\", ire.getMessage(), nodeID);\n       }\n-      logger.debug(\">> adding floatingIp(%s) to node(%s)\", ip.getIp(), node.getId());\n \n-      floatingIpApi.addToServer(ip.getIp(), node.getProviderId());\n-      input.set(NodeMetadataBuilder.fromNodeMetadata(node).publicAddresses(ImmutableSet.of(ip.getIp())).build());\n-      floatingIpCache.invalidate(ZoneAndId.fromSlashEncoded(node.getId()));\n-      return input;\n+      // 3.) If no IP was found make final attempt by searching through list of available IP's\n+      logger.trace(\">> searching for existing, unassigned floating IP for node(%s)\", nodeID);\n+      List<FloatingIP> unassignedIps = Lists.newArrayList(Iterables.filter(floatingIpApi.list(),\n+            new Predicate<FloatingIP>() {\n+\n+               @Override\n+               public boolean apply(FloatingIP arg0) {\n+                  return arg0.getFixedIp() == null;\n+               }\n+\n+      }));\n+      // try to prevent multiple parallel launches from choosing the same ip.\n+      Collections.shuffle(unassignedIps);\n+      ip = Iterables.getLast(unassignedIps);\n+      return Optional.fromNullable(ip);\n    }\n \n    @Override",
                "deletions": 26
            },
            {
                "sha": "b971cfc616f9a4e6db8a1b382f7396ce8985f415",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java",
                "status": "added",
                "changes": 54,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NodeAndNovaTemplateOptions.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.openstack.nova.v2_0.compute.options;\n+\n+import java.util.concurrent.atomic.AtomicReference;\n+\n+import org.jclouds.compute.domain.NodeMetadata;\n+\n+import com.google.common.util.concurrent.Atomics;\n+\n+/**\n+ * Simple data-structure for holding a NodeMetadata object along with a\n+ * corresponding NovaTemplateOptions object.\n+ */\n+public class NodeAndNovaTemplateOptions {\n+\n+   private final AtomicReference<NodeMetadata> nodeMetadata;\n+   private final AtomicReference<NovaTemplateOptions> novaTemplateOptions;\n+\n+   protected NodeAndNovaTemplateOptions(AtomicReference<NodeMetadata> nodeMetadata, AtomicReference<NovaTemplateOptions> novaTemplateOptions) {\n+      this.nodeMetadata = nodeMetadata;\n+      this.novaTemplateOptions = novaTemplateOptions;\n+   }\n+\n+   public AtomicReference<NodeMetadata> getNodeMetadata() {\n+      return nodeMetadata;\n+   }\n+\n+   public AtomicReference<NovaTemplateOptions> getNovaTemplateOptions() {\n+      return novaTemplateOptions;\n+   }\n+\n+   public static NodeAndNovaTemplateOptions newReference(AtomicReference<NodeMetadata> node, AtomicReference<NovaTemplateOptions> options) {\n+      return new NodeAndNovaTemplateOptions(node, options);\n+   }\n+\n+   public static AtomicReference<NodeAndNovaTemplateOptions> newAtomicReference(AtomicReference<NodeMetadata> node, AtomicReference<NovaTemplateOptions> options) {\n+      return Atomics.newReference(NodeAndNovaTemplateOptions.newReference(node, options));\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "750b7c0a1a0e1437f182b94d416c2679d3dd98f8",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java",
                "status": "modified",
                "changes": 55,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/options/NovaTemplateOptions.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -63,6 +63,8 @@ public void copyTo(TemplateOptions to) {\n       if (to instanceof NovaTemplateOptions) {\n          NovaTemplateOptions eTo = NovaTemplateOptions.class.cast(to);\n          eTo.autoAssignFloatingIp(shouldAutoAssignFloatingIp());\n+         if (getFloatingIpPoolNames().isPresent())\n+            eTo.floatingIpPoolNames(getFloatingIpPoolNames().get());\n          if (getSecurityGroupNames().isPresent())\n             eTo.securityGroupNames(getSecurityGroupNames().get());\n          eTo.generateKeyPair(shouldGenerateKeyPair());\n@@ -80,6 +82,7 @@ public void copyTo(TemplateOptions to) {\n    }\n \n    protected boolean autoAssignFloatingIp = false;\n+   protected Optional<Set<String>> floatingIpPoolNames = Optional.absent();\n    protected Optional<Set<String>> securityGroupNames = Optional.absent();\n    protected boolean generateKeyPair = false;\n    protected String keyPairName;\n@@ -96,6 +99,7 @@ public boolean equals(Object o) {\n          return false;\n       NovaTemplateOptions that = NovaTemplateOptions.class.cast(o);\n       return super.equals(that) && equal(this.autoAssignFloatingIp, that.autoAssignFloatingIp)\n+            && equal(this.floatingIpPoolNames, that.floatingIpPoolNames)\n             && equal(this.securityGroupNames, that.securityGroupNames)\n             && equal(this.generateKeyPair, that.generateKeyPair)\n             && equal(this.keyPairName, that.keyPairName)\n@@ -107,14 +111,16 @@ public boolean equals(Object o) {\n \n    @Override\n    public int hashCode() {\n-      return Objects.hashCode(super.hashCode(), autoAssignFloatingIp, securityGroupNames, generateKeyPair, keyPairName, userData, diskConfig, configDrive, novaNetworks);\n+      return Objects.hashCode(super.hashCode(), autoAssignFloatingIp, floatingIpPoolNames, securityGroupNames, generateKeyPair, keyPairName, userData, diskConfig, configDrive, novaNetworks);\n    }\n \n    @Override\n    public ToStringHelper string() {\n       ToStringHelper toString = super.string();\n       if (!autoAssignFloatingIp)\n          toString.add(\"autoAssignFloatingIp\", autoAssignFloatingIp);\n+      if (floatingIpPoolNames.isPresent())\n+         toString.add(\"floatingIpPoolNames\", floatingIpPoolNames.get());\n       if (securityGroupNames.isPresent())\n          toString.add(\"securityGroupNames\", securityGroupNames.get());\n       if (generateKeyPair)\n@@ -130,13 +136,30 @@ public ToStringHelper string() {\n    public static final NovaTemplateOptions NONE = new NovaTemplateOptions();\n \n    /**\n-    * @see #shouldAutoAssignFloatingIp()\n+    * @see #getFloatingIpPoolNames()\n     */\n    public NovaTemplateOptions autoAssignFloatingIp(boolean enable) {\n       this.autoAssignFloatingIp = enable;\n       return this;\n    }\n \n+   /**\n+    * @see #getFloatingIpPoolNames()\n+    */\n+   public NovaTemplateOptions floatingIpPoolNames(String... floatingIpPoolNames) {\n+      return floatingIpPoolNames(ImmutableSet.copyOf(checkNotNull(floatingIpPoolNames, \"floatingIpPoolNames\")));\n+   }\n+\n+   /**\n+    * @see #getFloatingIpPoolNames()\n+    */\n+   public NovaTemplateOptions floatingIpPoolNames(Iterable<String> floatingIpPoolNames) {\n+      for (String groupName : checkNotNull(floatingIpPoolNames, \"floatingIpPoolNames\"))\n+        checkNotNull(emptyToNull(groupName), \"all floating-ip-pool-names must be non-empty\");\n+      this.floatingIpPoolNames = Optional.<Set<String>> of(ImmutableSet.copyOf(floatingIpPoolNames));\n+      return this;\n+   }\n+\n    /**\n     * @see #shouldGenerateKeyPair()\n     */\n@@ -183,6 +206,18 @@ public boolean shouldAutoAssignFloatingIp() {\n       return autoAssignFloatingIp;\n    }\n \n+   /**\n+    * The floating IP pool name(s) to use when allocating a FloatingIP. Applicable\n+    * only if #shouldAutoAssignFloatingIp() returns true. If not set will attempt to\n+    * use whatever FloatingIP(s) can be found regardless of which pool they originated\n+    * from\n+    *\n+    * @return floating-ip-pool names to use\n+    */\n+   public Optional<Set<String>> getFloatingIpPoolNames() {\n+      return floatingIpPoolNames;\n+   }\n+\n    /**\n     * Specifies the keypair used to run instances with\n     * @return the keypair to be used\n@@ -247,6 +282,22 @@ public static NovaTemplateOptions autoAssignFloatingIp(boolean enable) {\n          return new NovaTemplateOptions().autoAssignFloatingIp(enable);\n       }\n \n+      /**\n+       * @see #getFloatingIpPoolNames()\n+       */\n+      public NovaTemplateOptions floatingIpPoolNames(String... floatingIpPoolNames) {\n+         NovaTemplateOptions options = new NovaTemplateOptions();\n+         return NovaTemplateOptions.class.cast(options.floatingIpPoolNames(floatingIpPoolNames));\n+      }\n+\n+      /**\n+       * @see #getFloatingIpPoolNames()\n+       */\n+      public NovaTemplateOptions floatingIpPoolNames(Iterable<String> floatingIpPoolNames) {\n+         NovaTemplateOptions options = new NovaTemplateOptions();\n+         return NovaTemplateOptions.class.cast(options.floatingIpPoolNames(floatingIpPoolNames));\n+      }\n+\n       /**\n        * @see NovaTemplateOptions#shouldGenerateKeyPair() \n        */",
                "deletions": 2
            },
            {
                "sha": "58f7af55b3bf9c99e51560adebe6dccb193274ca",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java",
                "status": "modified",
                "changes": 19,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/strategy/ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSet.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -42,16 +42,19 @@\n import org.jclouds.compute.strategy.impl.CreateNodesWithGroupEncodedIntoNameThenAddToSet;\n import org.jclouds.openstack.nova.v2_0.NovaApi;\n import org.jclouds.openstack.nova.v2_0.compute.functions.AllocateAndAddFloatingIpToNode;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.domain.KeyPair;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.SecurityGroupInZone;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneAndName;\n import org.jclouds.openstack.nova.v2_0.domain.zonescoped.ZoneSecurityGroupNameAndPorts;\n \n+import com.google.common.base.Function;\n import com.google.common.base.Throwables;\n import com.google.common.cache.LoadingCache;\n import com.google.common.collect.Multimap;\n import com.google.common.primitives.Ints;\n+import com.google.common.util.concurrent.Atomics;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n import com.google.common.util.concurrent.ListeningExecutorService;\n@@ -149,13 +152,21 @@ protected ApplyNovaTemplateOptionsCreateNodesWithGroupEncodedIntoNameThenAddToSe\n             final String name, Template template) {\n \n       ListenableFuture<AtomicReference<NodeMetadata>> future = super.createNodeInGroupWithNameAndTemplate(group, name, template);\n-      NovaTemplateOptions templateOptions = NovaTemplateOptions.class.cast(template.getOptions());\n-\n+      final NovaTemplateOptions templateOptions = NovaTemplateOptions.class.cast(template.getOptions());\n       if (templateOptions.shouldAutoAssignFloatingIp()) {\n-         return Futures.transform(future, createAndAddFloatingIpToNode, userExecutor);\n+\n+         ListenableFuture<AtomicReference<NodeAndNovaTemplateOptions>> nodeAndNovaTemplateOptions = Futures.transform(future,\n+               new Function<AtomicReference<NodeMetadata>, AtomicReference<NodeAndNovaTemplateOptions>>() {\n+\n+                  @Override\n+                  public AtomicReference<NodeAndNovaTemplateOptions> apply(AtomicReference<NodeMetadata> input) {\n+                     return NodeAndNovaTemplateOptions.newAtomicReference(input, Atomics.newReference(templateOptions));\n+                  }\n+               }\n+         );\n+         return Futures.transform(nodeAndNovaTemplateOptions, createAndAddFloatingIpToNode, userExecutor);\n       } else {\n          return future;\n       }\n    }\n-\n }",
                "deletions": 4
            },
            {
                "sha": "c8fa869bb688d2593013284a7be738d8372247ae",
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java",
                "status": "modified",
                "changes": 54,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/AllocateAndAddFloatingIpToNodeExpectTest.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -31,6 +31,8 @@\n import org.jclouds.domain.LoginCredentials;\n import org.jclouds.http.HttpRequest;\n import org.jclouds.http.HttpResponse;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NodeAndNovaTemplateOptions;\n+import org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions;\n import org.jclouds.openstack.nova.v2_0.internal.BaseNovaComputeServiceExpectTest;\n import org.testng.annotations.Test;\n \n@@ -53,6 +55,7 @@\n    final NodeMetadata node = new NodeMetadataBuilder().id(\"az-1.region-a.geo-1/71592\").providerId(\"71592\").location(\n             host).name(\"Server 71592\").status(Status.RUNNING).privateAddresses(ImmutableSet.of(\"10.4.27.237\"))\n             .credentials(LoginCredentials.builder().password(\"foo\").build()).build();\n+   final NovaTemplateOptions options = NovaTemplateOptions.Builder.autoAssignFloatingIp(false);\n \n    HttpRequest createFloatingIP = HttpRequest.builder().method(\"POST\").endpoint(\n             URI.create(\"https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-floating-ips\")).headers(\n@@ -75,9 +78,13 @@ public void testAllocateWhenAllocationReturnsIpIsAddedToServerAndUpdatesNodeMeta\n                .getInstance(AllocateAndAddFloatingIpToNode.class);\n \n       AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n-      fn.apply(nodeRef);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n+\n+      fn.apply(nodeNovaRef);\n       NodeMetadata node1 = nodeRef.get();\n       assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n       assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.3\"));\n       assertEquals(node1.getCredentials(), node.getCredentials());\n \n@@ -94,7 +101,7 @@ private HttpRequest addFloatingIPForAddress(String address) {\n       return addFloatingIPRequest;\n    }\n \n-   public void testAllocateWhenAllocationFailsLookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n+   public void testAllocateWhenAllocationFailsOn400LookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n       HttpResponse createFloatingIPResponse = HttpResponse\n                .builder()\n                .statusCode(400)\n@@ -122,10 +129,51 @@ public void testAllocateWhenAllocationFailsLookupUnusedIpAddToServerAndUpdatesNo\n                .getInstance(AllocateAndAddFloatingIpToNode.class);\n \n       AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n-      fn.apply(nodeRef);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n+\n+      fn.apply(nodeNovaRef);\n       NodeMetadata node1 = nodeRef.get();\n       assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n       assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.5\"));\n+   }\n+\n+   public void testAllocateWhenAllocationFailsOn404LookupUnusedIpAddToServerAndUpdatesNodeMetadata() throws Exception {\n+      HttpResponse createFloatingIPResponse = HttpResponse\n+               .builder()\n+               .statusCode(404)\n+               .payload(\n+                        payloadFromStringWithContentType(\n+                                 \"{\\\"badRequest\\\": {\\\"message\\\": \\\"AddressLimitExceeded: Address quota exceeded. You cannot create any more addresses\\\", \\\"code\\\": 404}}\",\n+                                 \"application/json\")).build();\n+\n+      HttpRequest list = HttpRequest.builder().method(\"GET\").endpoint(\n+               URI.create(\"https://az-1.region-a.geo-1.compute.hpcloudsvc.com/v1.1/3456/os-floating-ips\")).headers(\n+               ImmutableMultimap.<String, String> builder().put(\"Accept\", \"application/json\").put(\"X-Auth-Token\",\n+                        authToken).build()).build();\n+\n+      HttpResponse listResponseForUnassigned = HttpResponse.builder().statusCode(200).payload(\n+               payloadFromResource(\"/floatingip_list.json\")).build();\n+\n+      HttpRequest addFloatingIPRequest = addFloatingIPForAddress(\"10.0.0.5\");\n+\n+      AllocateAndAddFloatingIpToNode fn = requestsSendResponses(\n+               ImmutableMap.<HttpRequest, HttpResponse> builder().put(keystoneAuthWithUsernameAndPasswordAndTenantName,\n+                        responseWithKeystoneAccess).put(extensionsOfNovaRequest, extensionsOfNovaResponse).put(\n+                        createFloatingIP, createFloatingIPResponse)\n+                        .put(addFloatingIPRequest, addFloatingIPResponse).put(list,\n+                                 listResponseForUnassigned).build()).getContext().utils().injector()\n+               .getInstance(AllocateAndAddFloatingIpToNode.class);\n+\n+      AtomicReference<NodeMetadata> nodeRef = Atomics.newReference(node);\n+      AtomicReference<NovaTemplateOptions> optionsRef = Atomics.newReference(options);\n+      AtomicReference<NodeAndNovaTemplateOptions> nodeNovaRef = NodeAndNovaTemplateOptions.newAtomicReference(nodeRef, optionsRef);\n \n+      fn.apply(nodeNovaRef);\n+      NodeMetadata node1 = nodeRef.get();\n+      assertNotNull(node1);\n+      assertNotNull(optionsRef.get());\n+      assertEquals(node1.getPublicAddresses(), ImmutableSet.of(\"10.0.0.5\"));\n    }\n }",
                "deletions": 3
            },
            {
                "sha": "935adbe828cd613c892aaa28fad6bf1b45f25f98",
                "filename": "core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3659a5f583d38a925476287d47b34b4afa7bdb43/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3659a5f583d38a925476287d47b34b4afa7bdb43/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/InsufficientResourcesException.java?ref=3659a5f583d38a925476287d47b34b4afa7bdb43",
                "patch": "@@ -27,6 +27,10 @@ public InsufficientResourcesException() {\n       super();\n    }\n \n+   public InsufficientResourcesException(String arg0) {\n+      super(arg0);\n+   }\n+\n    public InsufficientResourcesException(String arg0, Throwable arg1) {\n       super(arg0, arg1);\n    }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-1041: Fix NPE when deserializing Port in Docker 1.9.1",
        "commit": "https://github.com/apache/jclouds/commit/29a8474ba03b420b462566acede250e98fdb4789",
        "parent": "https://github.com/apache/jclouds/commit/33522b8945655d02c6427d841131f8fb0c0c58dc",
        "bug_id": "jclouds_30",
        "file": [
            {
                "sha": "45fa96602d65080c2f346886faf716487a3a67e5",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "blob_url": "https://github.com/apache/jclouds/blob/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "raw_url": "https://github.com/apache/jclouds/raw/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/main/java/org/jclouds/docker/domain/Port.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/domain/Port.java?ref=29a8474ba03b420b462566acede250e98fdb4789",
                "patch": "@@ -16,25 +16,26 @@\n  */\n package org.jclouds.docker.domain;\n \n+import org.jclouds.javax.annotation.Nullable;\n import org.jclouds.json.SerializedNames;\n \n import com.google.auto.value.AutoValue;\n \n @AutoValue\n public abstract class Port {\n-   public abstract String ip();\n+   @Nullable public abstract String ip();\n \n    public abstract int privatePort();\n \n-   public abstract int publicPort();\n+   @Nullable public abstract Integer publicPort();\n \n    public abstract String type();\n \n    Port() {\n    }\n \n    @SerializedNames({ \"IP\", \"PrivatePort\", \"PublicPort\", \"Type\" })\n-   public static Port create(String ip, int privatePort, int publicPort, String type) {\n+   public static Port create(String ip, int privatePort, Integer publicPort, String type) {\n       return new AutoValue_Port(ip, privatePort, publicPort, type);\n    }\n }",
                "deletions": 3
            },
            {
                "sha": "39565bf63b99f1c406843c31c669c325760b2479",
                "filename": "apis/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/test/java/org/jclouds/docker/parse/ContainersParseTest.java?ref=29a8474ba03b420b462566acede250e98fdb4789",
                "patch": "@@ -39,15 +39,13 @@ public String resource() {\n    @Override\n    @Consumes(MediaType.APPLICATION_JSON)\n    public List<ContainerSummary> expected() {\n-      return ImmutableList.of(\n-              ContainerSummary.create(\"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a9\",\n-                      ImmutableList.of(\"/hopeful_mclean\"),\n-                      \"1395472605\",\n-                      \"jclouds/ubuntu:latest\",\n-                      \"/usr/sbin/sshd -D\",\n-                      ImmutableList.of(Port.create(\"0.0.0.0\", 22, 49231, \"tcp\")),\n-                      \"Up 55 seconds\")\n-      );\n+      return ImmutableList.of(ContainerSummary.create(\n+            \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a9\", ImmutableList.of(\"/hopeful_mclean\"),\n+            \"1395472605\", \"jclouds/ubuntu:latest\", \"/usr/sbin/sshd -D\",\n+            ImmutableList.of(Port.create(\"0.0.0.0\", 22, 49231, \"tcp\")), \"Up 55 seconds\"), ContainerSummary.create(\n+            \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a2\", ImmutableList.of(\"/hopeful_mclean\"),\n+            \"1395472605\", \"jclouds/ubuntu:latest\", \"/usr/sbin/sshd -D\",\n+            ImmutableList.of(Port.create(null, 22, null, \"tcp\")), \"Up 55 seconds\"));\n    }\n \n }",
                "deletions": 9
            },
            {
                "sha": "e7e7e3be1e20fa672aff919f6af99697b7c13cad",
                "filename": "apis/docker/src/test/resources/containers.json",
                "blob_url": "https://github.com/apache/jclouds/blob/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/test/resources/containers.json",
                "raw_url": "https://github.com/apache/jclouds/raw/29a8474ba03b420b462566acede250e98fdb4789/apis/docker/src/test/resources/containers.json",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/test/resources/containers.json?ref=29a8474ba03b420b462566acede250e98fdb4789",
                "patch": "@@ -16,5 +16,21 @@\n       }\n     ],\n     \"Status\": \"Up 55 seconds\"\n+  },\n+  {\n+    \"Command\": \"/usr/sbin/sshd -D\",\n+    \"Created\": 1395472605,\n+    \"Id\": \"6d35806c1bd2b25cd92bba2d2c2c5169dc2156f53ab45c2b62d76e2d2fee14a2\",\n+    \"Image\": \"jclouds/ubuntu:latest\",\n+    \"Names\": [\n+      \"/hopeful_mclean\"\n+    ],\n+    \"Ports\": [\n+      {\n+        \"PrivatePort\": 22,\n+        \"Type\": \"tcp\"\n+      }\n+    ],\n+    \"Status\": \"Up 55 seconds\"\n   }\n ]\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "openstack-nova: eliminating NPE thrown by SecurityGroupApi.delete()",
        "commit": "https://github.com/apache/jclouds/commit/055098866f6a2a0b99fdea4f825e96cd6aeb0e03",
        "parent": "https://github.com/apache/jclouds/commit/f170c8d6694ff30236ee3efa15e58988b92b4fd2",
        "bug_id": "jclouds_31",
        "file": [
            {
                "sha": "e7f0a56af93b9ea937a165ae9334bd129c6d0ea9",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "blob_url": "https://github.com/apache/jclouds/blob/055098866f6a2a0b99fdea4f825e96cd6aeb0e03/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "raw_url": "https://github.com/apache/jclouds/raw/055098866f6a2a0b99fdea4f825e96cd6aeb0e03/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java?ref=055098866f6a2a0b99fdea4f825e96cd6aeb0e03",
                "patch": "@@ -102,7 +102,7 @@\n     */\n    @DELETE\n    @Path(\"/os-security-groups/{id}\")\n-   @Fallback(NullOnNotFoundOr404.class)\n+   @Fallback(FalseOnNotFoundOr404.class)\n    @Consumes(MediaType.APPLICATION_JSON)\n    ListenableFuture<Boolean> delete(@PathParam(\"id\") String id);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fix issue #607: NPE in compareTo method of ResourceMetadataImpl",
        "commit": "https://github.com/apache/jclouds/commit/27dfdd571bd2f7bd219eb0ac1ce7ba8836a15f67",
        "parent": "https://github.com/apache/jclouds/commit/0a35c9b4740c7cddeb6c825044b76e497245d44e",
        "bug_id": "jclouds_32",
        "file": [
            {
                "sha": "e5258faecda5cfdcece6d4bffa1816e1e9eb510a",
                "filename": "core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "blob_url": "https://github.com/apache/jclouds/blob/27dfdd571bd2f7bd219eb0ac1ce7ba8836a15f67/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "raw_url": "https://github.com/apache/jclouds/raw/27dfdd571bd2f7bd219eb0ac1ce7ba8836a15f67/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java?ref=27dfdd571bd2f7bd219eb0ac1ce7ba8836a15f67",
                "patch": "@@ -20,6 +20,8 @@\n \n import static com.google.common.base.Objects.equal;\n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.ComparisonChain.start;\n+import static com.google.common.collect.Ordering.natural;\n \n import java.net.URI;\n import java.util.Map;\n@@ -62,10 +64,10 @@ public ResourceMetadataImpl(@Nullable String providerId, @Nullable String name,\n     * {@inheritDoc}\n     */\n    @Override\n-   public int compareTo(ResourceMetadata<T> o) {\n-      if (getName() == null)\n-         return -1;\n-      return (this == o) ? 0 : getName().compareTo(o.getName());\n+   public int compareTo(ResourceMetadata<T> that) {\n+      return start()\n+            .compare(this.getName(), that.getName(), natural().nullsLast())\n+            .result();\n    }\n \n    /**",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "the associatedNetwork is @Nullable so guard against (a fatal) NPE",
        "commit": "https://github.com/apache/jclouds/commit/95b220f26f1658b23aeecd771a0826821b4966c4",
        "parent": "https://github.com/apache/jclouds/commit/ed471a2eba9f5fe4277bda1b0caf39b1822d8f9b",
        "bug_id": "jclouds_33",
        "file": [
            {
                "sha": "462061811cd0500194e88a7f47d749a01e3803a1",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "blob_url": "https://github.com/apache/jclouds/blob/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "raw_url": "https://github.com/apache/jclouds/raw/95b220f26f1658b23aeecd771a0826821b4966c4/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java?ref=95b220f26f1658b23aeecd771a0826821b4966c4",
                "patch": "@@ -35,12 +35,12 @@\n       private final String networkId;\n \n       public AssociatedWithNetwork(String networkId) {\n-         this.networkId = networkId;\n+         this.networkId = checkNotNull(networkId, \"networkId\");\n       }\n \n       @Override\n       public boolean apply(PublicIPAddress input) {\n-         return checkNotNull(input, \"ipaddress\").getAssociatedNetworkId().equals(networkId);\n+         return networkId.equals(checkNotNull(input, \"ipaddress\").getAssociatedNetworkId());\n       }\n \n       @Override",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-1421: Add default credentials to images created by the ImageExtension\n\nBy default, when listing images the ComputeServiceAdapter adds the\ndefault credentials for each image. This is not done when images are\ncreated by the image extension, and NPEs can appear in code that assumes\nthe default credentials are there, as the field is not nullable.\n\nThis change tries to populate the known node credentials for images\ncreated form nodes, and falls back to the default strategy to add the\ndefault credentials to an image if there are not known credentials.",
        "commit": "https://github.com/apache/jclouds/commit/b76a594e816b0c04a8382b1876e160ae4581ae09",
        "parent": "https://github.com/apache/jclouds/commit/29655f3149f151a834ed5a724e91e32994b28d89",
        "bug_id": "jclouds_34",
        "file": [
            {
                "sha": "70227bd46828f57a6bfe0fa2d6f66cf6c566cb52",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java",
                "status": "modified",
                "changes": 68,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/CloudStackComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -17,11 +17,11 @@\n package org.jclouds.cloudstack.compute;\n \n import static com.google.common.base.Preconditions.checkNotNull;\n+import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n+import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-import static org.jclouds.cloudstack.predicates.SshKeyPairPredicates.nameMatches;\n-import static org.jclouds.cloudstack.predicates.ZonePredicates.supportsSecurityGroups;\n \n import java.util.Map;\n import java.util.Set;\n@@ -33,6 +33,13 @@\n import javax.inject.Singleton;\n \n import org.jclouds.Constants;\n+import org.jclouds.cloudstack.CloudStackApi;\n+import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n+import org.jclouds.cloudstack.domain.SecurityGroup;\n+import org.jclouds.cloudstack.domain.SshKeyPair;\n+import org.jclouds.cloudstack.domain.Zone;\n+import org.jclouds.cloudstack.domain.ZoneAndName;\n+import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.collect.Memoized;\n import org.jclouds.compute.ComputeServiceContext;\n import org.jclouds.compute.callables.RunScriptOnNode;\n@@ -42,11 +49,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -58,13 +65,6 @@\n import org.jclouds.compute.strategy.SuspendNodeStrategy;\n import org.jclouds.domain.Credentials;\n import org.jclouds.domain.Location;\n-import org.jclouds.cloudstack.CloudStackApi;\n-import org.jclouds.cloudstack.compute.options.CloudStackTemplateOptions;\n-import org.jclouds.cloudstack.domain.SecurityGroup;\n-import org.jclouds.cloudstack.domain.SshKeyPair;\n-import org.jclouds.cloudstack.domain.Zone;\n-import org.jclouds.cloudstack.domain.ZoneAndName;\n-import org.jclouds.cloudstack.predicates.SecurityGroupPredicates;\n import org.jclouds.scriptbuilder.functions.InitAdminAccess;\n \n import com.google.common.base.Function;\n@@ -88,32 +88,30 @@\n \n    @Inject\n    protected CloudStackComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n-            LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap,\n-            LoadingCache<String, SshKeyPair> keyPairCache,\n-            Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n-            GroupNamingConvention.Factory namingConvention,\n-            Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, CloudStackApi client,\n+         LoadingCache<ZoneAndName, SecurityGroup> securityGroupMap, LoadingCache<String, SshKeyPair> keyPairCache,\n+         Function<Set<? extends NodeMetadata>, Multimap<String, String>> orphanedGroupsByZoneId,\n+         GroupNamingConvention.Factory namingConvention, Supplier<LoadingCache<String, Zone>> zoneIdToZone,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.zoneIdToZone = checkNotNull(zoneIdToZone, \"zoneIdToZone\");\n       this.client = checkNotNull(client, \"client\");\n       this.securityGroupMap = checkNotNull(securityGroupMap, \"securityGroupMap\");",
                "deletions": 35
            },
            {
                "sha": "fea023c109df06027206b553e44f158bd974513c",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java",
                "status": "modified",
                "changes": 48,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/compute/EC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -57,6 +57,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.functions.GroupNamingConvention.Factory;\n import org.jclouds.compute.internal.BaseComputeService;\n@@ -113,30 +114,31 @@\n \n    @Inject\n    protected EC2ComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n-            ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n-            @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n-            Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n-            @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor, EC2Api client,\n+         ConcurrentMap<RegionAndName, KeyPair> credentialsMap,\n+         @Named(\"SECURITY\") LoadingCache<RegionAndName, String> securityGroupMap,\n+         Optional<ImageExtension> imageExtension, GroupNamingConvention.Factory namingConvention,\n+         @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.credentialsMap = credentialsMap;\n       this.securityGroupMap = securityGroupMap;",
                "deletions": 23
            },
            {
                "sha": "c28319cb1d2b9a1aaadf7715734ca750a190847e",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java",
                "status": "modified",
                "changes": 45,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Set;\n import java.util.concurrent.atomic.AtomicReference;\n@@ -39,10 +40,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -69,28 +70,28 @@\n \n    @Inject\n    protected NovaComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n-            SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-            PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n-            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            CleanupResources cleanupResources,\n-            Optional<ImageExtension> imageExtension,\n-            Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> sizes,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy startNodeStrategy,\n+         SuspendNodeStrategy stopNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n+         PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = checkNotNull(cleanupResources, \"cleanupResources\");\n \n    }",
                "deletions": 22
            },
            {
                "sha": "39265b9ff94a4bd1e58b8b49684d6d23a9e7b6ef",
                "filename": "compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/config/BaseComputeServiceContextModule.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -45,6 +45,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.CreateSshClientOncePortIsListeningOnNode;\n import org.jclouds.compute.functions.DefaultCredentialsFromImageOrOverridingCredentials;\n import org.jclouds.compute.options.RunScriptOptions;\n@@ -112,6 +113,8 @@ protected void configure() {\n       }, InitializeRunScriptOnNodeOrPlaceInBadMap.class).build(InitializeRunScriptOnNodeOrPlaceInBadMap.Factory.class));\n \n       install(new FactoryModuleBuilder().build(BlockUntilInitScriptStatusIsZeroThenReturnOutput.Factory.class));\n+      \n+      install(new FactoryModuleBuilder().build(DelegatingImageExtension.Factory.class));\n    }\n \n    protected void bindCredentialsOverriderFunction() {",
                "deletions": 0
            },
            {
                "sha": "7fd7544ac730377f161c2d43182ca2d1ac3ac93e",
                "filename": "compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java",
                "status": "modified",
                "changes": 68,
                "additions": 63,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/extensions/internal/DelegatingImageExtension.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -16,17 +16,30 @@\n  */\n package org.jclouds.compute.extensions.internal;\n \n-import static com.google.common.base.Preconditions.checkNotNull;\n+import java.util.Map;\n \n+import javax.annotation.Resource;\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.CloneImageTemplate;\n import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.ImageBuilder;\n import org.jclouds.compute.domain.ImageTemplate;\n import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.jclouds.logging.Logger;\n \n import com.google.common.annotations.Beta;\n+import com.google.common.base.Function;\n import com.google.common.util.concurrent.FutureCallback;\n import com.google.common.util.concurrent.Futures;\n import com.google.common.util.concurrent.ListenableFuture;\n+import com.google.inject.assistedinject.Assisted;\n \n /**\n  * Delegates to the provider specific {@link ImageExtension} and takes care of\n@@ -35,20 +48,65 @@\n @Beta\n public class DelegatingImageExtension implements ImageExtension {\n \n+   public interface Factory {\n+      DelegatingImageExtension create(ImageCacheSupplier imageCache, ImageExtension delegate);\n+   }\n+\n+   @Resource\n+   @Named(ComputeServiceConstants.COMPUTE_LOGGER)\n+   protected Logger logger = Logger.NULL;\n+\n    private final ImageCacheSupplier imageCache;\n    private final ImageExtension delegate;\n+   private final AddDefaultCredentialsToImage addDefaultCredentialsToImage;\n+   private final Map<String, Credentials> credentialStore;\n \n-   public DelegatingImageExtension(ImageCacheSupplier imageCache, ImageExtension delegate) {\n-      this.imageCache = checkNotNull(imageCache, \"imageCache\");\n-      this.delegate = checkNotNull(delegate, \"delegate\");\n+   @Inject\n+   DelegatingImageExtension(@Assisted ImageCacheSupplier imageCache, @Assisted ImageExtension delegate,\n+         AddDefaultCredentialsToImage addDefaultCredentialsToImage, Map<String, Credentials> credentialStore) {\n+      this.imageCache = imageCache;\n+      this.delegate = delegate;\n+      this.addDefaultCredentialsToImage = addDefaultCredentialsToImage;\n+      this.credentialStore = credentialStore;\n    }\n \n    public ImageTemplate buildImageTemplateFromNode(String name, String id) {\n       return delegate.buildImageTemplateFromNode(name, id);\n    }\n \n-   public ListenableFuture<Image> createImage(ImageTemplate template) {\n+   public ListenableFuture<Image> createImage(final ImageTemplate template) {\n       ListenableFuture<Image> future = delegate.createImage(template);\n+\n+      // Populate the default image credentials, if missing\n+      future = Futures.transform(future, new Function<Image, Image>() {\n+         @Override\n+         public Image apply(Image input) {\n+            if (input.getDefaultCredentials() != null) {\n+               return input;\n+            }\n+\n+            // If the image has been created by cloning a node, then try to\n+            // populate the known node credentials as the default image\n+            // credentials\n+            if (template instanceof CloneImageTemplate) {\n+               final CloneImageTemplate cloneImageTemplate = (CloneImageTemplate) template;\n+\n+               Credentials nodeCredentials = credentialStore.get(\"node#\" + cloneImageTemplate.getSourceNodeId());\n+               if (nodeCredentials != null) {\n+                  logger.info(\">> Adding node(%s) credentials to image(%s)...\", cloneImageTemplate.getSourceNodeId(),\n+                        cloneImageTemplate.getName());\n+                  return ImageBuilder.fromImage(input)\n+                        .defaultCredentials(LoginCredentials.fromCredentials(nodeCredentials)).build();\n+               }\n+            }\n+\n+            // If no credentials are known for the node, populate the default\n+            // credentials using the defined strategy\n+            logger.info(\">> Adding default image credentials to image(%s)...\", template.getName());\n+            return addDefaultCredentialsToImage.apply(input);\n+         }\n+      });\n+\n       Futures.addCallback(future, new FutureCallback<Image>() {\n          @Override\n          public void onSuccess(Image result) {",
                "deletions": 5
            },
            {
                "sha": "c8c4c1f704e24d1e3927b07eb848a9dc4c941b74",
                "filename": "compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java",
                "status": "modified",
                "changes": 12,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/internal/BaseComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -68,7 +68,6 @@\n import org.jclouds.compute.options.RunScriptOptions;\n import org.jclouds.compute.options.TemplateOptions;\n import org.jclouds.compute.reference.ComputeServiceConstants;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -131,7 +130,6 @@\n    private final Predicate<AtomicReference<NodeMetadata>> nodeTerminated;\n    private final Predicate<AtomicReference<NodeMetadata>> nodeSuspended;\n    private final InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory;\n-   private final Timeouts timeouts;\n    private final InitAdminAccess initAdminAccess;\n    private final PersistNodeCredentials persistNodeCredentials;\n    private final RunScriptOnNode.Factory runScriptOnNodeFactory;\n@@ -154,8 +152,9 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n             @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n             InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n             RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+            @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+            DelegatingImageExtension.Factory delegatingImageExtension) {\n       this.context = checkNotNull(context, \"context\");\n       this.credentialStore = checkNotNull(credentialStore, \"credentialStore\");\n       this.images = checkNotNull(images, \"images\");\n@@ -175,15 +174,14 @@ protected BaseComputeService(ComputeServiceContext context, Map<String, Credenti\n       this.nodeTerminated = checkNotNull(nodeTerminated, \"nodeTerminated\");\n       this.nodeSuspended = checkNotNull(nodeSuspended, \"nodeSuspended\");\n       this.initScriptRunnerFactory = checkNotNull(initScriptRunnerFactory, \"initScriptRunnerFactory\");\n-      this.timeouts = checkNotNull(timeouts, \"timeouts\");\n       this.initAdminAccess = checkNotNull(initAdminAccess, \"initAdminAccess\");\n       this.runScriptOnNodeFactory = checkNotNull(runScriptOnNodeFactory, \"runScriptOnNodeFactory\");\n       this.persistNodeCredentials = checkNotNull(persistNodeCredentials, \"persistNodeCredentials\");\n       this.userExecutor = checkNotNull(userExecutor, \"userExecutor\");\n       this.securityGroupExtension = checkNotNull(securityGroupExtension, \"securityGroupExtension\");\n       if (imageExtension.isPresent() && images instanceof ImageCacheSupplier) {\n-         this.imageExtension = Optional.<ImageExtension> of(new DelegatingImageExtension(ImageCacheSupplier.class\n-               .cast(images), imageExtension.get()));\n+         this.imageExtension = Optional.<ImageExtension> of(delegatingImageExtension.create(\n+               ImageCacheSupplier.class.cast(images), imageExtension.get()));\n       } else {\n          this.imageExtension = checkNotNull(imageExtension, \"imageExtension\");\n       }",
                "deletions": 7
            },
            {
                "sha": "4eb6a39240c2a484c3bb7b2489eb374ba0a7c570",
                "filename": "compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java",
                "status": "added",
                "changes": 214,
                "additions": 214,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/test/java/org/jclouds/compute/extensions/internal/DelegatingImageExtensionTest.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -0,0 +1,214 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.jclouds.compute.extensions.internal;\n+\n+import static com.google.common.util.concurrent.Futures.immediateFuture;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.expectLastCall;\n+import static org.easymock.EasyMock.replay;\n+import static org.easymock.EasyMock.verify;\n+import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertTrue;\n+\n+import java.util.Collections;\n+import java.util.Map;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.jclouds.compute.config.ComputeServiceAdapterContextModule.AddDefaultCredentialsToImage;\n+import org.jclouds.compute.domain.Image;\n+import org.jclouds.compute.domain.Image.Status;\n+import org.jclouds.compute.domain.ImageBuilder;\n+import org.jclouds.compute.domain.ImageTemplate;\n+import org.jclouds.compute.domain.ImageTemplateBuilder.CloneImageTemplateBuilder;\n+import org.jclouds.compute.domain.OperatingSystem;\n+import org.jclouds.compute.domain.internal.ImageTemplateImpl;\n+import org.jclouds.compute.extensions.ImageExtension;\n+import org.jclouds.compute.suppliers.ImageCacheSupplier;\n+import org.jclouds.domain.Credentials;\n+import org.jclouds.domain.LoginCredentials;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableMap;\n+import com.google.common.util.concurrent.Futures;\n+\n+@Test(groups = \"unit\", testName = \"DelegatingImageExtensionTest\")\n+public class DelegatingImageExtensionTest {\n+\n+   @Test\n+   public void createImageRegistersInCacheAndAddsCredentials()  {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+      Image withCredentials = ImageBuilder.fromImage(result).defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(withCredentials);\n+      imageCache.registerImage(withCredentials);\n+      expectLastCall();\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateFailedFuture(new RuntimeException()));\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void createImageDoesNotRegisterInCacheWhenCancelled() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new ImageTemplateImpl(\"test\") {\n+      };\n+\n+      expect(delegate.createImage(template)).andReturn(Futures.<Image> immediateCancelledFuture());\n+      replay(delegate, imageCache, credsToImage);\n+\n+      new DelegatingImageExtension(imageCache, delegate, credsToImage, null).createImage(template);\n+\n+      verify(delegate, imageCache, credsToImage);\n+   }\n+\n+   @Test\n+   public void deleteUnregistersImageFromCache() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(true);\n+      imageCache.removeImage(\"test\");\n+      expectLastCall();\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void deleteDoesNotUnregisterImageFromCacheWhenFailed() {\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+\n+      expect(delegate.deleteImage(\"test\")).andReturn(false);\n+      replay(delegate, imageCache);\n+\n+      new DelegatingImageExtension(imageCache, delegate, null, null).deleteImage(\"test\");\n+\n+      verify(delegate, imageCache);\n+   }\n+\n+   @Test\n+   public void createByCloningDoesNothingIfImageHasCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE)\n+            .defaultCredentials(credentials).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, null)\n+            .createImage(template);\n+\n+      // Verify that the exact same instance is returned unmodified\n+      assertTrue(image.get() == result);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsNodeCredentials() throws InterruptedException, ExecutionException {\n+      Credentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = ImmutableMap.of(\"node#node1\", credentials);\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+\n+   @Test\n+   public void createByCloningAddsDefaultImageCredentials() throws InterruptedException, ExecutionException {\n+      LoginCredentials credentials = LoginCredentials.builder().user(\"jclouds\").password(\"pass\").build();\n+\n+      ImageCacheSupplier imageCache = createMock(ImageCacheSupplier.class);\n+      ImageExtension delegate = createMock(ImageExtension.class);\n+      AddDefaultCredentialsToImage credsToImage = createMock(AddDefaultCredentialsToImage.class);\n+      Map<String, Credentials> credentialStore = Collections.emptyMap();\n+\n+      ImageTemplate template = new CloneImageTemplateBuilder().name(\"test\").nodeId(\"node1\").build();\n+      Image result = new ImageBuilder().id(\"test\")\n+            .operatingSystem(OperatingSystem.builder().description(\"test\").build()).status(Status.AVAILABLE).build();\n+\n+      expect(delegate.createImage(template)).andReturn(immediateFuture(result));\n+      expect(credsToImage.apply(result)).andReturn(\n+            ImageBuilder.fromImage(result).defaultCredentials(credentials).build());\n+      replay(delegate, credsToImage);\n+\n+      Future<Image> image = new DelegatingImageExtension(imageCache, delegate, credsToImage, credentialStore)\n+            .createImage(template);\n+\n+      assertEquals(image.get().getDefaultCredentials(), credentials);\n+\n+      verify(delegate, credsToImage);\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "cc2f13abc8b5ade33013f8a276e40d0e59f425b4",
                "filename": "providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/main/java/org/jclouds/aws/ec2/compute/AWSEC2ComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -47,6 +47,7 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n@@ -103,13 +104,14 @@ protected AWSEC2ComputeService(ComputeServiceContext context, Map<String, Creden\n          @Named(\"DELETED\") Predicate<PlacementGroup> placementGroupDeleted, Optional<ImageExtension> imageExtension,\n          GroupNamingConvention.Factory namingConvention,\n          @Named(PROPERTY_EC2_GENERATE_INSTANCE_NAMES) boolean generateInstanceNames,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, runScriptOnNodeFactory, initAdminAccess,\n             persistNodeCredentials, timeouts, userExecutor, client, credentialsMap, securityGroupMap, imageExtension,\n-            namingConvention, generateInstanceNames, securityGroupExtension);\n+            namingConvention, generateInstanceNames, securityGroupExtension, delegatingImageExtension);\n       this.client = client;\n       this.placementGroupMap = placementGroupMap;\n       this.placementGroupDeleted = placementGroupDeleted;",
                "deletions": 2
            },
            {
                "sha": "9a85abe940dacf26c8e592824a48196bd8d7a224",
                "filename": "providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java",
                "status": "modified",
                "changes": 17,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/azurecompute-arm/src/main/java/org/jclouds/azurecompute/arm/compute/AzureComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -16,6 +16,10 @@\n  */\n package org.jclouds.azurecompute.arm.compute;\n \n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n+import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n+\n import java.util.Map;\n import java.util.Map.Entry;\n import java.util.Set;\n@@ -38,10 +42,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -62,10 +66,6 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.util.concurrent.ListeningExecutorService;\n \n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_RUNNING;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_SUSPENDED;\n-import static org.jclouds.compute.config.ComputeServiceProperties.TIMEOUT_NODE_TERMINATED;\n-\n @Singleton\n public class AzureComputeService extends BaseComputeService {\n    private final CleanupResources cleanupResources;\n@@ -84,15 +84,16 @@ protected AzureComputeService(ComputeServiceContext context, Map<String, Credent\n          @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n          InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n          RunScriptOnNode.Factory runScriptOnNodeFactory, InitAdminAccess initAdminAccess,\n-         PersistNodeCredentials persistNodeCredentials, Timeouts timeouts,\n+         PersistNodeCredentials persistNodeCredentials,\n          @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n          CleanupResources cleanupResources, Optional<ImageExtension> imageExtension,\n-         Optional<SecurityGroupExtension> securityGroupExtension) {\n+         Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, sizes, locations, listNodesStrategy, getImageStrategy,\n             getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n             startNodeStrategy, stopNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n             nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-            persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.cleanupResources = cleanupResources;\n    }\n ",
                "deletions": 8
            },
            {
                "sha": "96ac4d7d42766f476e4f9be7b0e7693df4cf3e61",
                "filename": "providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java",
                "status": "modified",
                "changes": 40,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/gogrid/src/main/java/org/jclouds/gogrid/compute/GoGridComputeService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -38,10 +38,10 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants.Timeouts;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -65,26 +65,26 @@\n public class GoGridComputeService extends BaseComputeService {\n    @Inject\n    protected GoGridComputeService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n-            @Memoized Supplier<Set<? extends Image>> images,\n-            @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-            @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n-            GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n-            CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n-            DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n-            SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n-            @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-            @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n-            @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n-            @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-            InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n-            RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n-            Timeouts timeouts, @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-            Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension) {\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-               getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-               resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-               nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-               persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n    }\n \n    /**",
                "deletions": 20
            },
            {
                "sha": "1142b06a3c8cc0bfbf5268fd5a69134cedeee7f5",
                "filename": "providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/b76a594e816b0c04a8382b1876e160ae4581ae09/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java",
                "status": "modified",
                "changes": 62,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-compute-engine/src/main/java/org/jclouds/googlecomputeengine/compute/GoogleComputeEngineService.java?ref=b76a594e816b0c04a8382b1876e160ae4581ae09",
                "patch": "@@ -39,11 +39,11 @@\n import org.jclouds.compute.domain.TemplateBuilder;\n import org.jclouds.compute.extensions.ImageExtension;\n import org.jclouds.compute.extensions.SecurityGroupExtension;\n+import org.jclouds.compute.extensions.internal.DelegatingImageExtension;\n import org.jclouds.compute.functions.GroupNamingConvention;\n import org.jclouds.compute.internal.BaseComputeService;\n import org.jclouds.compute.internal.PersistNodeCredentials;\n import org.jclouds.compute.options.TemplateOptions;\n-import org.jclouds.compute.reference.ComputeServiceConstants;\n import org.jclouds.compute.strategy.CreateNodesInGroupThenAddToSet;\n import org.jclouds.compute.strategy.DestroyNodeStrategy;\n import org.jclouds.compute.strategy.GetImageStrategy;\n@@ -76,44 +76,30 @@\n    private final GoogleComputeEngineApi api;\n    private final Predicate<AtomicReference<Operation>> operationDone;\n \n-   @Inject GoogleComputeEngineService(ComputeServiceContext context,\n-                                        Map<String, Credentials> credentialStore,\n-                                        @Memoized Supplier<Set<? extends Image>> images,\n-                                        @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n-                                        @Memoized Supplier<Set<? extends Location>> locations,\n-                                        ListNodesStrategy listNodesStrategy,\n-                                        GetImageStrategy getImageStrategy,\n-                                        GetNodeMetadataStrategy getNodeMetadataStrategy,\n-                                        CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy,\n-                                        RebootNodeStrategy rebootNodeStrategy,\n-                                        DestroyNodeStrategy destroyNodeStrategy,\n-                                        ResumeNodeStrategy resumeNodeStrategy,\n-                                        SuspendNodeStrategy suspendNodeStrategy,\n-                                        Provider<TemplateBuilder> templateBuilderProvider,\n-                                        @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n-                                        @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeRunning,\n-                                        @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>>\n-                                                nodeTerminated,\n-                                        @Named(TIMEOUT_NODE_SUSPENDED)\n-                                        Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n-                                        InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory,\n-                                        InitAdminAccess initAdminAccess,\n-                                        RunScriptOnNode.Factory runScriptOnNodeFactory,\n-                                        PersistNodeCredentials persistNodeCredentials,\n-                                        ComputeServiceConstants.Timeouts timeouts,\n-                                        @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n-                                        Optional<ImageExtension> imageExtension,\n-                                        Optional<SecurityGroupExtension> securityGroupExtension,\n-                                        Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n-                                        GroupNamingConvention.Factory namingConvention,\n-                                        GoogleComputeEngineApi api,\n-                                        Predicate<AtomicReference<Operation>> operationDone) {\n+   @Inject\n+   GoogleComputeEngineService(ComputeServiceContext context, Map<String, Credentials> credentialStore,\n+         @Memoized Supplier<Set<? extends Image>> images, @Memoized Supplier<Set<? extends Hardware>> hardwareProfiles,\n+         @Memoized Supplier<Set<? extends Location>> locations, ListNodesStrategy listNodesStrategy,\n+         GetImageStrategy getImageStrategy, GetNodeMetadataStrategy getNodeMetadataStrategy,\n+         CreateNodesInGroupThenAddToSet runNodesAndAddToSetStrategy, RebootNodeStrategy rebootNodeStrategy,\n+         DestroyNodeStrategy destroyNodeStrategy, ResumeNodeStrategy resumeNodeStrategy,\n+         SuspendNodeStrategy suspendNodeStrategy, Provider<TemplateBuilder> templateBuilderProvider,\n+         @Named(\"DEFAULT\") Provider<TemplateOptions> templateOptionsProvider,\n+         @Named(TIMEOUT_NODE_RUNNING) Predicate<AtomicReference<NodeMetadata>> nodeRunning,\n+         @Named(TIMEOUT_NODE_TERMINATED) Predicate<AtomicReference<NodeMetadata>> nodeTerminated,\n+         @Named(TIMEOUT_NODE_SUSPENDED) Predicate<AtomicReference<NodeMetadata>> nodeSuspended,\n+         InitializeRunScriptOnNodeOrPlaceInBadMap.Factory initScriptRunnerFactory, InitAdminAccess initAdminAccess,\n+         RunScriptOnNode.Factory runScriptOnNodeFactory, PersistNodeCredentials persistNodeCredentials,\n+         @Named(Constants.PROPERTY_USER_THREADS) ListeningExecutorService userExecutor,\n+         Optional<ImageExtension> imageExtension, Optional<SecurityGroupExtension> securityGroupExtension,\n+         Function<Set<? extends NodeMetadata>, Set<String>> findOrphanedGroups,\n+         GroupNamingConvention.Factory namingConvention, GoogleComputeEngineApi api,\n+         Predicate<AtomicReference<Operation>> operationDone, DelegatingImageExtension.Factory delegatingImageExtension) {\n       super(context, credentialStore, images, hardwareProfiles, locations, listNodesStrategy, getImageStrategy,\n-              getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n-              resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n-              nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n-              persistNodeCredentials, timeouts, userExecutor, imageExtension, securityGroupExtension);\n+            getNodeMetadataStrategy, runNodesAndAddToSetStrategy, rebootNodeStrategy, destroyNodeStrategy,\n+            resumeNodeStrategy, suspendNodeStrategy, templateBuilderProvider, templateOptionsProvider, nodeRunning,\n+            nodeTerminated, nodeSuspended, initScriptRunnerFactory, initAdminAccess, runScriptOnNodeFactory,\n+            persistNodeCredentials, userExecutor, imageExtension, securityGroupExtension, delegatingImageExtension);\n       this.findOrphanedGroups = findOrphanedGroups;\n       this.namingConvention = namingConvention;\n       this.api = api;",
                "deletions": 38
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 671: NPE on aws-ec2 w/vpc security groups",
        "commit": "https://github.com/apache/jclouds/commit/14ad17108faab23a3792e372005c60e6ada293cd",
        "parent": "https://github.com/apache/jclouds/commit/363d996f19a6eda233e6ed004f7192e2902ccf73",
        "bug_id": "jclouds_35",
        "file": [
            {
                "sha": "69bb6a7ad3e5c3d48a0e1ba089ef2ab58620f1a7",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java",
                "status": "modified",
                "changes": 141,
                "additions": 133,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermission.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -18,49 +18,174 @@\n  */\n package org.jclouds.ec2.domain;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n+\n import java.util.Set;\n \n+import com.google.common.base.Objects;\n+import com.google.common.collect.ImmutableMultimap;\n+import com.google.common.collect.ImmutableSet;\n+import com.google.common.collect.Iterables;\n+import com.google.common.collect.LinkedHashMultimap;\n import com.google.common.collect.Multimap;\n+import com.google.common.collect.Sets;\n \n /**\n- * \n+ *\n  * @see <a href=\n  *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-IpPermissionType.html\"\n  *      />\n  * @author Adrian Cole\n  */\n-public interface IpPermission extends Comparable<IpPermission> {\n+public class IpPermission {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public static class Builder {\n+      private int fromPort;\n+      private int toPort;\n+      private IpProtocol ipProtocol;\n+      private Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n+      private Set<String> groupIds = Sets.newLinkedHashSet();\n+      private Set<String> ipRanges = Sets.newLinkedHashSet();\n+\n+      public Builder fromPort(int fromPort) {\n+         this.fromPort = fromPort;\n+         return this;\n+      }\n+\n+      public Builder toPort(int toPort) {\n+         this.toPort = toPort;\n+         return this;\n+      }\n+\n+      public Builder ipProtocol(IpProtocol ipProtocol) {\n+         this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n+         return this;\n+      }\n+\n+      public Builder userIdGroupPair(String userId, String groupNameOrId) {\n+         this.userIdGroupPairs.put(checkNotNull(userId, \"userId\"), checkNotNull(groupNameOrId, \"groupNameOrId of %s\", userId));\n+         return this;\n+      }\n+\n+      public Builder userIdGroupPairs(Multimap<String, String> userIdGroupPairs) {\n+         this.userIdGroupPairs.putAll(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n+         return this;\n+      }\n+\n+      public Builder ipRange(String ipRange) {\n+         this.ipRanges.add(ipRange);\n+         return this;\n+      }\n+\n+      public Builder ipRanges(Iterable<String> ipRanges) {\n+         Iterables.addAll(this.ipRanges, checkNotNull(ipRanges, \"ipRanges\"));\n+         return this;\n+      }\n+\n+      public Builder groupId(String groupId) {\n+         this.groupIds.add(checkNotNull(groupId, \"groupId\"));\n+         return this;\n+      }\n+\n+      public Builder groupIds(Iterable<String> groupIds) {\n+         Iterables.addAll(this.groupIds, checkNotNull(groupIds, \"groupIds\"));\n+         return this;\n+      }\n+\n+      public IpPermission build() {\n+         return new IpPermission(ipProtocol, fromPort, toPort, userIdGroupPairs, groupIds, ipRanges);\n+      }\n+   }\n+\n+   private final int fromPort;\n+   private final int toPort;\n+   private final Multimap<String, String> userIdGroupPairs;\n+   private final Set<String> groupIds;\n+   private final IpProtocol ipProtocol;\n+   private final Set<String> ipRanges;\n+\n+   public IpPermission(IpProtocol ipProtocol, int fromPort, int toPort, Multimap<String, String> userIdGroupPairs,\n+         Iterable<String> groupIds, Iterable<String> ipRanges) {\n+      this.fromPort = fromPort;\n+      this.toPort = toPort;\n+      this.userIdGroupPairs = ImmutableMultimap.copyOf(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n+      this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n+      this.groupIds = ImmutableSet.copyOf(checkNotNull(groupIds, \"groupIds\"));\n+      this.ipRanges = ImmutableSet.copyOf(checkNotNull(ipRanges, \"ipRanges\"));\n+   }\n \n    /**\n     * Start of port range for the TCP and UDP protocols, or an ICMP type number.\n     * An ICMP type number of -1 indicates a wildcard (i.e., any ICMP type\n     * number).\n     */\n-   int getFromPort();\n+   public int getFromPort() {\n+      return fromPort;\n+   }\n \n    /**\n     * End of port range for the TCP and UDP protocols, or an ICMP code. An ICMP\n     * code of -1 indicates a wildcard (i.e., any ICMP code).\n     */\n-   int getToPort();\n+   public int getToPort() {\n+      return toPort;\n+   }\n \n    /**\n     * List of security group and user ID pairs.\n     */\n-   Multimap<String, String> getUserIdGroupPairs();\n+   public Multimap<String, String> getUserIdGroupPairs() {\n+      return userIdGroupPairs;\n+   }\n \n    /**\n     * List of security group Ids\n     */\n-   Set<String> getGroupIds();\n+   public Set<String> getGroupIds() {\n+      return groupIds;\n+   }\n \n    /**\n     * IP protocol\n     */\n-   IpProtocol getIpProtocol();\n+   public IpProtocol getIpProtocol() {\n+      return ipProtocol;\n+   }\n \n    /**\n     * IP ranges.\n     */\n-   Set<String> getIpRanges();\n+   public Set<String> getIpRanges() {\n+      return ipRanges;\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(fromPort, toPort, groupIds, ipProtocol, ipRanges, userIdGroupPairs);\n+   }\n+\n+   @Override\n+   public boolean equals(Object obj) {\n+      if (this == obj)\n+         return true;\n+      if (obj == null || getClass() != obj.getClass())\n+         return false;\n+      IpPermission that = IpPermission.class.cast(obj);\n+      return Objects.equal(this.fromPort, that.fromPort) && Objects.equal(this.toPort, that.toPort)\n+            && Objects.equal(this.groupIds, that.groupIds) && Objects.equal(this.ipProtocol, that.ipProtocol)\n+            && Objects.equal(this.ipRanges, that.ipRanges)\n+            && Objects.equal(this.userIdGroupPairs, that.userIdGroupPairs);\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return Objects.toStringHelper(this).omitNullValues().add(\"fromPort\", fromPort == -1 ? null : fromPort)\n+            .add(\"toPort\", toPort == -1 ? null : toPort).add(\"groupIds\", groupIds.size() == 0 ? null : groupIds)\n+            .add(\"ipProtocol\", ipProtocol).add(\"ipRanges\", ipRanges.size() == 0 ? null : ipRanges)\n+            .add(\"userIdGroupPairs\", userIdGroupPairs.size() == 0 ? null : userIdGroupPairs).toString();\n+   }\n+\n }\n\\ No newline at end of file",
                "deletions": 8
            },
            {
                "sha": "fe801981ee8b6672279544a1c38f65a025654858",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "blob_url": "https://github.com/apache/jclouds/blob/363d996f19a6eda233e6ed004f7192e2902ccf73/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "raw_url": "https://github.com/apache/jclouds/raw/363d996f19a6eda233e6ed004f7192e2902ccf73/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java",
                "status": "removed",
                "changes": 226,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/IpPermissionImpl.java?ref=363d996f19a6eda233e6ed004f7192e2902ccf73",
                "patch": "@@ -1,226 +0,0 @@\n-/**\n- * Licensed to jclouds, Inc. (jclouds) under one or more\n- * contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  jclouds licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.jclouds.ec2.domain;\n-\n-import static com.google.common.base.Preconditions.checkNotNull;\n-\n-import java.util.Set;\n-\n-import com.google.common.collect.ImmutableMultimap;\n-import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.Iterables;\n-import com.google.common.collect.LinkedHashMultimap;\n-import com.google.common.collect.Multimap;\n-import com.google.common.collect.Sets;\n-\n-/**\n- * \n- * @see <a href=\n- *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-IpPermissionType.html\"\n- *      />\n- * @author Adrian Cole\n- */\n-public class IpPermissionImpl implements IpPermission {\n-   public static Builder builder() {\n-      return new Builder();\n-   }\n-\n-   public static class Builder {\n-      private int fromPort;\n-      private int toPort;\n-      private IpProtocol ipProtocol;\n-      private Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n-      private Set<String> groupIds = Sets.newLinkedHashSet();\n-      private Set<String> ipRanges = Sets.newLinkedHashSet();\n-\n-      public Builder fromPort(int fromPort) {\n-         this.fromPort = fromPort;\n-         return this;\n-      }\n-\n-      public Builder toPort(int toPort) {\n-         this.fromPort = toPort;\n-         return this;\n-      }\n-\n-      public Builder ipProtocol(IpProtocol ipProtocol) {\n-         this.ipProtocol = ipProtocol;\n-         return this;\n-      }\n-\n-      public Builder userIdGroupPair(String userId, String groupNameOrId) {\n-         this.userIdGroupPairs.put(userId, groupNameOrId);\n-         return this;\n-      }\n-\n-      public Builder userIdGroupPairs(Multimap<String, String> userIdGroupPairs) {\n-         this.userIdGroupPairs.putAll(userIdGroupPairs);\n-         return this;\n-      }\n-\n-      public Builder ipRange(String ipRange) {\n-         this.ipRanges.add(ipRange);\n-         return this;\n-      }\n-\n-      public Builder ipRanges(Iterable<String> ipRanges) {\n-         Iterables.addAll(this.ipRanges, ipRanges);\n-         return this;\n-      }\n-\n-      public Builder groupId(String groupId) {\n-         this.groupIds.add(groupId);\n-         return this;\n-      }\n-\n-      public Builder groupIds(Iterable<String> groupIds) {\n-         Iterables.addAll(this.groupIds, groupIds);\n-         return this;\n-      }\n-\n-      public IpPermission build() {\n-         return new IpPermissionImpl(ipProtocol, fromPort, toPort, userIdGroupPairs, groupIds, ipRanges);\n-      }\n-   }\n-\n-   private final int fromPort;\n-   private final int toPort;\n-   private final Multimap<String, String> userIdGroupPairs;\n-   private final Set<String> groupIds;\n-   private final IpProtocol ipProtocol;\n-   private final Set<String> ipRanges;\n-\n-   public IpPermissionImpl(IpProtocol ipProtocol, int fromPort, int toPort,\n-         Multimap<String, String> userIdGroupPairs, Iterable<String> groupIds, Iterable<String> ipRanges) {\n-      this.fromPort = fromPort;\n-      this.toPort = toPort;\n-      this.userIdGroupPairs = ImmutableMultimap.copyOf(checkNotNull(userIdGroupPairs, \"userIdGroupPairs\"));\n-      this.ipProtocol = checkNotNull(ipProtocol, \"ipProtocol\");\n-      this.groupIds = ImmutableSet.copyOf(checkNotNull(groupIds, \"groupIds\"));\n-      this.ipRanges = ImmutableSet.copyOf(checkNotNull(ipRanges, \"ipRanges\"));\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   public int compareTo(IpPermission o) {\n-      return (this == o) ? 0 : getIpProtocol().compareTo(o.getIpProtocol());\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public int getFromPort() {\n-      return fromPort;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public int getToPort() {\n-      return toPort;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Multimap<String, String> getUserIdGroupPairs() {\n-      return userIdGroupPairs;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Set<String> getGroupIds() {\n-      return groupIds;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public IpProtocol getIpProtocol() {\n-      return ipProtocol;\n-   }\n-\n-   /**\n-    * {@inheritDoc}\n-    */\n-   @Override\n-   public Set<String> getIpRanges() {\n-      return ipRanges;\n-   }\n-\n-   @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + fromPort;\n-      result = prime * result + ((groupIds == null) ? 0 : groupIds.hashCode());\n-      result = prime * result + ((ipProtocol == null) ? 0 : ipProtocol.hashCode());\n-      result = prime * result + ((ipRanges == null) ? 0 : ipRanges.hashCode());\n-      result = prime * result + toPort;\n-      result = prime * result + ((userIdGroupPairs == null) ? 0 : userIdGroupPairs.hashCode());\n-      return result;\n-   }\n-\n-   @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      IpPermissionImpl other = (IpPermissionImpl) obj;\n-      if (fromPort != other.fromPort)\n-         return false;\n-      if (groupIds == null) {\n-         if (other.groupIds != null)\n-            return false;\n-      } else if (!groupIds.equals(other.groupIds))\n-         return false;\n-      if (ipProtocol != other.ipProtocol)\n-         return false;\n-      if (ipRanges == null) {\n-         if (other.ipRanges != null)\n-            return false;\n-      } else if (!ipRanges.equals(other.ipRanges))\n-         return false;\n-      if (toPort != other.toPort)\n-         return false;\n-      if (userIdGroupPairs == null) {\n-         if (other.userIdGroupPairs != null)\n-            return false;\n-      } else if (!userIdGroupPairs.equals(other.userIdGroupPairs))\n-         return false;\n-      return true;\n-   }\n-\n-   @Override\n-   public String toString() {\n-      return \"[fromPort=\" + fromPort + \", toPort=\" + toPort + \", userIdGroupPairs=\" + userIdGroupPairs + \", groupIds=\"\n-            + groupIds + \", ipProtocol=\" + ipProtocol + \", ipRanges=\" + ipRanges + \"]\";\n-   }\n-\n-}",
                "deletions": 226
            },
            {
                "sha": "f13d1e583ae550994328db5d4fd15d8d5f4e959d",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java",
                "status": "modified",
                "changes": 194,
                "additions": 137,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/SecurityGroup.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -24,37 +24,141 @@\n \n import org.jclouds.javax.annotation.Nullable;\n \n+import com.google.common.base.Objects;\n+import com.google.common.base.Objects.ToStringHelper;\n+import com.google.common.collect.ForwardingSet;\n+import com.google.common.collect.ImmutableSet;\n+\n /**\n- * \n+ *\n  * @see <a href=\n  *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/ApiReference-ItemType-SecurityGroupItemType.html\"\n  *      />\n  * @author Adrian Cole\n  */\n-public class SecurityGroup {\n+public class SecurityGroup extends ForwardingSet<IpPermission> {\n+\n+   public static Builder<?> builder() {\n+      return new ConcreteBuilder();\n+   }\n+\n+   public Builder<?> toBuilder() {\n+      return new ConcreteBuilder().fromSecurityGroup(this);\n+   }\n+\n+   public static abstract class Builder<T extends Builder<T>> {\n+      protected abstract T self();\n+\n+      protected String region;\n+      protected String id;\n+      protected String name;\n+      protected String ownerId;\n+      protected String description;\n+      protected ImmutableSet.Builder<IpPermission> ipPermissions = ImmutableSet.<IpPermission> builder();\n+\n+      /**\n+       * @see SecurityGroup#getRegion()\n+       */\n+      public T region(String region) {\n+         this.region = region;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getId()\n+       */\n+      public T id(String id) {\n+         this.id = id;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getName()\n+       */\n+      public T name(String name) {\n+         this.name = name;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getOwnerId()\n+       */\n+      public T ownerId(String ownerId) {\n+         this.ownerId = ownerId;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#getDescription()\n+       */\n+      public T description(String description) {\n+         this.description = description;\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T role(IpPermission role) {\n+         this.ipPermissions.add(role);\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T ipPermissions(Iterable<IpPermission> ipPermissions) {\n+         this.ipPermissions.addAll(checkNotNull(ipPermissions, \"ipPermissions\"));\n+         return self();\n+      }\n+\n+      /**\n+       * @see SecurityGroup#delegate()\n+       */\n+      public T ipPermission(IpPermission ipPermission) {\n+         this.ipPermissions.add(checkNotNull(ipPermission, \"ipPermission\"));\n+         return self();\n+      }\n+\n+      public SecurityGroup build() {\n+         return new SecurityGroup(region, id, name, ownerId, description, ipPermissions.build());\n+      }\n+\n+      public T fromSecurityGroup(SecurityGroup in) {\n+         return region(in.region).id(in.id).name(in.name).ownerId(in.ownerId).description(in.description)\n+               .ipPermissions(in);\n+      }\n+   }\n+\n+   private static class ConcreteBuilder extends Builder<ConcreteBuilder> {\n+      @Override\n+      protected ConcreteBuilder self() {\n+         return this;\n+      }\n+   }\n \n    private final String region;\n    private final String id;\n    private final String name;\n    private final String ownerId;\n    private final String description;\n-   private final Set<IpPermissionImpl> ipPermissions;\n+   private final Set<IpPermission> ipPermissions;\n \n    public SecurityGroup(String region, String id, String name, String ownerId, String description,\n-         Set<IpPermissionImpl> ipPermissions) {\n+         Iterable<IpPermission> ipPermissions) {\n       this.region = checkNotNull(region, \"region\");\n       this.id = id;\n       this.name = name;\n       this.ownerId = ownerId;\n       this.description = description;\n-      this.ipPermissions = ipPermissions;\n+      this.ipPermissions = ImmutableSet.copyOf(checkNotNull(ipPermissions, \"ipPermissions\"));\n    }\n-   \n+\n    /**\n     * To be removed in jclouds 1.6 <h4>Warning</h4>\n-    * \n-    * Especially on EC2 clones that may not support regions, this value is fragile. Consider\n-    * alternate means to determine context.\n+    *\n+    * Especially on EC2 clones that may not support regions, this value is\n+    * fragile. Consider alternate means to determine context.\n     */\n    @Deprecated\n    public String getRegion() {\n@@ -91,70 +195,46 @@ public String getDescription() {\n    }\n \n    /**\n-    * Set of IP permissions associated with the security group.\n+    * Please use this class as a collection\n     */\n-   public Set<IpPermissionImpl> getIpPermissions() {\n+   @Deprecated\n+   public Set<IpPermission> getIpPermissions() {\n       return ipPermissions;\n    }\n \n    @Override\n    public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((description == null) ? 0 : description.hashCode());\n-      result = prime * result + ((id == null) ? 0 : id.hashCode());\n-      result = prime * result + ((ipPermissions == null) ? 0 : ipPermissions.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((ownerId == null) ? 0 : ownerId.hashCode());\n-      result = prime * result + ((region == null) ? 0 : region.hashCode());\n-      return result;\n+      return Objects.hashCode(region, id, name, ownerId, description, ipPermissions);\n    }\n \n    @Override\n    public boolean equals(Object obj) {\n       if (this == obj)\n          return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      SecurityGroup other = (SecurityGroup) obj;\n-      if (description == null) {\n-         if (other.description != null)\n-            return false;\n-      } else if (!description.equals(other.description))\n-         return false;\n-      if (id == null) {\n-         if (other.id != null)\n-            return false;\n-      } else if (!id.equals(other.id))\n-         return false;\n-      if (ipPermissions == null) {\n-         if (other.ipPermissions != null)\n-            return false;\n-      } else if (!ipPermissions.equals(other.ipPermissions))\n+      if (obj == null || getClass() != obj.getClass())\n          return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (ownerId == null) {\n-         if (other.ownerId != null)\n-            return false;\n-      } else if (!ownerId.equals(other.ownerId))\n-         return false;\n-      if (region == null) {\n-         if (other.region != null)\n-            return false;\n-      } else if (!region.equals(other.region))\n-         return false;\n-      return true;\n+      SecurityGroup that = SecurityGroup.class.cast(obj);\n+      return Objects.equal(this.region, that.region)\n+            && Objects.equal(this.id, that.id)\n+            && Objects.equal(this.name, that.name)\n+            && Objects.equal(this.ownerId, that.ownerId)\n+            && Objects.equal(this.description, that.description)\n+            && Objects.equal(this.ipPermissions, that.ipPermissions);\n+   }\n+\n+   protected ToStringHelper string() {\n+      return Objects.toStringHelper(this).omitNullValues().add(\"region\", region).add(\"id\", id).add(\"name\", name)\n+            .add(\"ownerId\", ownerId).add(\"description\", description)\n+            .add(\"ipPermissions\", ipPermissions.size() == 0 ? null : ipPermissions);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[region=\" + region + \", id=\" + id + \", name=\" + name + \", ownerId=\" + ownerId + \", description=\"\n-            + description + \", ipPermissions=\" + ipPermissions + \"]\";\n+      return string().toString();\n+   }\n+\n+   @Override\n+   protected Set<IpPermission> delegate() {\n+      return ipPermissions;\n    }\n }",
                "deletions": 57
            },
            {
                "sha": "1dad22db5fb2474a369be101382be6af3d21ec11",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/util/IpPermissions.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -24,7 +24,6 @@\n import java.util.Map.Entry;\n \n import org.jclouds.ec2.domain.IpPermission;\n-import org.jclouds.ec2.domain.IpPermissionImpl;\n import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.util.Maps2;\n \n@@ -37,12 +36,12 @@\n import com.google.common.collect.Multimaps;\n \n /**\n- * \n+ *\n  * Shortcut to create ingress rules\n- * \n+ *\n  * @author Adrian Cole\n  */\n-public class IpPermissions extends IpPermissionImpl {\n+public class IpPermissions extends IpPermission {\n \n    protected IpPermissions(IpProtocol ipProtocol, int fromPort, int toPort,\n          Multimap<String, String> userIdGroupPairs, Iterable<String> groupIds, Iterable<String> ipRanges) {\n@@ -139,7 +138,7 @@ public ToSourceSelection andCode(int code) {\n       public ToPortSelection fromPort(int port) {\n          return new ToPortSelection(getIpProtocol(), port);\n       }\n-      \n+\n       public ToSourceSelection port(int port) {\n          return new ToSourceSelection(getIpProtocol(), port, port);\n       }",
                "deletions": 5
            },
            {
                "sha": "3db80b94712e5c80d809da33ae70de1c14048c70",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java",
                "status": "modified",
                "changes": 170,
                "additions": 71,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -18,139 +18,111 @@\n  */\n package org.jclouds.ec2.xml;\n \n-import static org.jclouds.util.SaxUtils.currentOrNegative;\n-import static org.jclouds.util.SaxUtils.currentOrNull;\n import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n \n import java.util.Set;\n \n import javax.inject.Inject;\n \n-import org.jclouds.aws.util.AWSUtils;\n-import org.jclouds.ec2.domain.IpPermissionImpl;\n-import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.http.HttpRequest;\n import org.jclouds.http.functions.ParseSax;\n-import org.jclouds.location.Region;\n+import org.jclouds.http.functions.ParseSax.HandlerForGeneratedRequestWithResult;\n import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n \n-import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableSet;\n-import com.google.common.collect.LinkedHashMultimap;\n-import com.google.common.collect.Multimap;\n-import com.google.common.collect.Sets;\n+import com.google.common.collect.ImmutableSet.Builder;\n \n /**\n  * Parses: DescribeSecurityGroupsResponse\n  * xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\"\n- * \n+ *\n  * @see <a href=\n- *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/index.html?ApiReference-query-DescribeSecurityGroups.html\"\n+ *      \"http://docs.amazonwebservices.com/AWSEC2/latest/APIReference/index.html?ApiReference-query-DescribesecurityGroupInfo.html\"\n  *      />\n  * @author Adrian Cole\n  */\n public class DescribeSecurityGroupsResponseHandler extends\n       ParseSax.HandlerForGeneratedRequestWithResult<Set<SecurityGroup>> {\n-   @Inject\n-   @Region\n-   Supplier<String> defaultRegion;\n+\n+   private final SecurityGroupHandler securityGroupHandler;\n \n    private StringBuilder currentText = new StringBuilder();\n-   private Set<SecurityGroup> securtyGroups = Sets.newLinkedHashSet();\n-   private String groupId;\n-   private String groupName;\n-   private String ownerId;\n-   private String groupDescription;\n-   private Set<IpPermissionImpl> ipPermissions = Sets.newLinkedHashSet();\n-   private int fromPort;\n-   private int toPort;\n-   private Multimap<String, String> groups = LinkedHashMultimap.create();\n-   private String userId;\n-   private String userIdGroupName;\n-   private IpProtocol ipProtocol;\n-   private Set<String> ipRanges = Sets.newLinkedHashSet();\n-\n-   private boolean inIpPermissions;\n-   private boolean inIpRanges;\n-   private boolean inGroups;\n+   private Builder<SecurityGroup> securityGroups = ImmutableSet.<SecurityGroup> builder();\n+   private boolean inSecurityGroupInfo;\n+\n+   protected int itemDepth;\n+\n+   @Inject\n+   public DescribeSecurityGroupsResponseHandler(SecurityGroupHandler securityGroupHandler) {\n+      this.securityGroupHandler = securityGroupHandler;\n+   }\n+\n+   @Override\n+   public HandlerForGeneratedRequestWithResult<Set<SecurityGroup>> setContext(HttpRequest request) {\n+      securityGroupHandler.setContext(request);\n+      return super.setContext(request);\n+   }\n \n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n    public Set<SecurityGroup> getResult() {\n-      return securtyGroups;\n+      return securityGroups.build();\n    }\n \n-   public void startElement(String uri, String name, String qName, Attributes attrs) {\n-      if (equalsOrSuffix(qName, \"ipPermissions\")) {\n-         inIpPermissions = true;\n-      } else if (equalsOrSuffix(qName, \"ipRanges\")) {\n-         inIpRanges = true;\n-      } else if (equalsOrSuffix(qName, \"groups\")) {\n-         inGroups = true;\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void startElement(String url, String name, String qName, Attributes attributes) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         itemDepth++;\n+      } else if (equalsOrSuffix(qName, \"securityGroupInfo\")) {\n+         inSecurityGroupInfo = true;\n+      }\n+      if (inSecurityGroupInfo) {\n+         securityGroupHandler.startElement(url, name, qName, attributes);\n       }\n    }\n \n-   public void endElement(String uri, String name, String qName) {\n-      if (equalsOrSuffix(qName, \"groupName\")) {\n-         if (!inGroups)\n-            this.groupName = currentOrNull(currentText);\n-         else\n-            this.userIdGroupName = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"groupId\")) {\n-         this.groupId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"ownerId\")) {\n-         this.ownerId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"userId\")) {\n-         this.userId = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"groupDescription\")) {\n-         this.groupDescription = currentOrNull(currentText);\n-      } else if (equalsOrSuffix(qName, \"ipProtocol\")) {\n-         // Algorete: ipProtocol can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.ipProtocol = IpProtocol.fromValue(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"fromPort\")) {\n-         // Algorete: fromPort can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.fromPort = Integer.parseInt(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"toPort\")) {\n-         // Algorete: toPort can be an empty tag on EC2 clone (e.g. OpenStack EC2)\n-         this.toPort = Integer.parseInt(currentOrNegative(currentText));\n-      } else if (equalsOrSuffix(qName, \"cidrIp\")) {\n-         this.ipRanges.add(currentOrNull(currentText));\n-      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n-         inIpPermissions = false;\n-      } else if (equalsOrSuffix(qName, \"ipRanges\")) {\n-         inIpRanges = false;\n-      } else if (equalsOrSuffix(qName, \"groups\")) {\n-         inGroups = false;\n-      } else if (equalsOrSuffix(qName, \"item\")) {\n-         if (inIpPermissions && !inIpRanges && !inGroups) {\n-            // TODO groups? we need an example of VPC stuff\n-            ipPermissions.add(new IpPermissionImpl(ipProtocol, fromPort, toPort, groups, ImmutableSet.<String> of(),\n-                  ipRanges));\n-            this.fromPort = -1;\n-            this.toPort = -1;\n-            this.groups = LinkedHashMultimap.create();\n-            this.ipProtocol = null;\n-            this.ipRanges = Sets.newLinkedHashSet();\n-         } else if (inIpPermissions && !inIpRanges && inGroups) {\n-            if (userId != null && userIdGroupName != null)\n-               this.groups.put(userId, userIdGroupName);\n-            this.userId = null;\n-            this.userIdGroupName = null;\n-         } else if (!inIpPermissions && !inIpRanges && !inGroups) {\n-            String region = AWSUtils.findRegionInArgsOrNull(getRequest());\n-            if (region == null)\n-               region = defaultRegion.get();\n-            securtyGroups.add(new SecurityGroup(region, groupId, groupName, ownerId, groupDescription, ipPermissions));\n-            this.groupName = null;\n-            this.groupId = null;\n-            this.ownerId = null;\n-            this.groupDescription = null;\n-            this.ipPermissions = Sets.newLinkedHashSet();\n-         }\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         endItem(uri, name, qName);\n+         itemDepth--;\n+      } else if (equalsOrSuffix(qName, \"securityGroupInfo\")) {\n+         inSecurityGroupInfo = false;\n+      } else if (inSecurityGroupInfo) {\n+         securityGroupHandler.endElement(uri, name, qName);\n       }\n-\n       currentText = new StringBuilder();\n    }\n \n+   protected void endItem(String uri, String name, String qName) throws SAXException {\n+      if (inSecurityGroupInfo) {\n+         if (itemDepth == 1)\n+            securityGroups.add(securityGroupHandler.getResult());\n+         else\n+            securityGroupHandler.endElement(uri, name, qName);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n    public void characters(char ch[], int start, int length) {\n-      currentText.append(ch, start, length);\n+      if (inSecurityGroupInfo) {\n+         securityGroupHandler.characters(ch, start, length);\n+      } else {\n+         currentText.append(ch, start, length);\n+      }\n    }\n+\n }",
                "deletions": 99
            },
            {
                "sha": "8045feee4067619cb4974ee27b1c17a9ef0eeb5e",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java",
                "status": "added",
                "changes": 75,
                "additions": 75,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/IpPermissionHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -0,0 +1,75 @@\n+package org.jclouds.ec2.xml;\n+\n+import static org.jclouds.util.SaxUtils.currentOrNegative;\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n+\n+import org.jclouds.ec2.domain.IpPermission;\n+import org.jclouds.ec2.domain.IpProtocol;\n+import org.jclouds.http.functions.ParseSax;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ *\n+ * @author Adrian Cole\n+ */\n+public class IpPermissionHandler extends ParseSax.HandlerForGeneratedRequestWithResult<IpPermission> {\n+\n+   private StringBuilder currentText = new StringBuilder();\n+   private IpPermission.Builder builder = IpPermission.builder();\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public IpPermission getResult() {\n+      try {\n+         return builder.build();\n+      } finally {\n+         builder = IpPermission.builder();\n+      }\n+   }\n+\n+   private String userId;\n+   private String groupId;\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"ipProtocol\")) {\n+         // Algorete: ipProtocol can be an empty tag on EC2 clone (e.g.\n+         // OpenStack EC2)\n+         builder.ipProtocol(IpProtocol.fromValue(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"fromPort\")) {\n+         // Algorete: fromPort can be an empty tag on EC2 clone (e.g. OpenStack\n+         // EC2)\n+         builder.fromPort(Integer.parseInt(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"toPort\")) {\n+         // Algorete: toPort can be an empty tag on EC2 clone (e.g. OpenStack\n+         // EC2)\n+         builder.toPort(Integer.parseInt(currentOrNegative(currentText)));\n+      } else if (equalsOrSuffix(qName, \"cidrIp\")) {\n+         builder.ipRange(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"userId\")) {\n+         this.userId = currentOrNull(currentText);\n+      } else if (equalsOrSuffix(qName, \"groupName\") || equalsOrSuffix(qName, \"groupId\")) {\n+         this.groupId = currentOrNull(currentText);\n+      } else if (equalsOrSuffix(qName, \"item\")) {\n+         if (userId != null && groupId != null)\n+            builder.userIdGroupPair(userId, groupId);\n+         userId = groupId = null;\n+      }\n+      currentText = new StringBuilder();\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void characters(char ch[], int start, int length) {\n+      currentText.append(ch, start, length);\n+   }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "aeb7dbdec02b8de88e4f71cc2aa6581ab4d078dd",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java",
                "status": "added",
                "changes": 145,
                "additions": 145,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/xml/SecurityGroupHandler.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -0,0 +1,145 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.ec2.xml;\n+\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n+import static org.jclouds.util.SaxUtils.equalsOrSuffix;\n+\n+import org.jclouds.aws.util.AWSUtils;\n+import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.http.HttpRequest;\n+import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.http.functions.ParseSax.HandlerForGeneratedRequestWithResult;\n+import org.jclouds.location.Region;\n+import org.jclouds.rest.internal.GeneratedHttpRequest;\n+import org.xml.sax.Attributes;\n+import org.xml.sax.SAXException;\n+\n+import com.google.common.base.Supplier;\n+import com.google.inject.Inject;\n+\n+/**\n+ * @author Adrian Cole\n+ */\n+public class SecurityGroupHandler extends ParseSax.HandlerForGeneratedRequestWithResult<SecurityGroup> {\n+\n+   protected final IpPermissionHandler ipPermissionHandler;\n+   protected final Supplier<String> defaultRegion;\n+\n+   protected StringBuilder currentText = new StringBuilder();\n+   protected SecurityGroup.Builder<?> builder;\n+   protected boolean inIpPermissions;\n+\n+   protected int itemDepth;\n+\n+   protected String region;\n+\n+   @Inject\n+   public SecurityGroupHandler(IpPermissionHandler ipPermissionHandler, @Region Supplier<String> defaultRegion) {\n+      this.ipPermissionHandler = ipPermissionHandler;\n+      this.defaultRegion = defaultRegion;\n+   }\n+\n+   protected SecurityGroup.Builder<?> builder() {\n+      return SecurityGroup.builder().region(region);\n+   }\n+\n+   @Override\n+   public HandlerForGeneratedRequestWithResult<SecurityGroup> setContext(HttpRequest request) {\n+      region = AWSUtils.findRegionInArgsOrNull(GeneratedHttpRequest.class.cast(request));\n+      if (region == null)\n+         region = defaultRegion.get();\n+      builder = builder();\n+      return super.setContext(request);\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public SecurityGroup getResult() {\n+      try {\n+         return builder.build();\n+      } finally {\n+         builder = builder();\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void startElement(String url, String name, String qName, Attributes attributes) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         itemDepth++;\n+      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n+         inIpPermissions = true;\n+      }\n+      if (inIpPermissions) {\n+         ipPermissionHandler.startElement(url, name, qName, attributes);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void endElement(String uri, String name, String qName) throws SAXException {\n+      if (equalsOrSuffix(qName, \"item\")) {\n+         endItem(uri, name, qName);\n+         itemDepth--;\n+      } else if (equalsOrSuffix(qName, \"ipPermissions\")) {\n+         inIpPermissions = false;\n+         itemDepth = 0;\n+      } else if (inIpPermissions) {\n+         ipPermissionHandler.endElement(uri, name, qName);\n+      } else if (equalsOrSuffix(qName, \"groupName\")) {\n+         builder.name(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"groupId\")) {\n+         builder.id(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"ownerId\")) {\n+         builder.ownerId(currentOrNull(currentText));\n+      } else if (equalsOrSuffix(qName, \"groupDescription\")) {\n+         builder.description(currentOrNull(currentText));\n+      }\n+      currentText = new StringBuilder();\n+   }\n+\n+   protected void endItem(String uri, String name, String qName) throws SAXException {\n+      if (inIpPermissions) {\n+         if (itemDepth == 2)\n+            builder.ipPermission(ipPermissionHandler.getResult());\n+         else\n+            ipPermissionHandler.endElement(uri, name, qName);\n+      }\n+   }\n+\n+   /**\n+    * {@inheritDoc}\n+    */\n+   @Override\n+   public void characters(char ch[], int start, int length) {\n+      if (inIpPermissions) {\n+         ipPermissionHandler.characters(ch, start, length);\n+      } else {\n+         currentText.append(ch, start, length);\n+      }\n+   }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "b7bd44f62c417cff2456d35a948394a334f8f671",
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/xml/DescribeSecurityGroupsResponseHandlerTest.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -26,7 +26,7 @@\n import java.io.InputStream;\n import java.util.Set;\n \n-import org.jclouds.ec2.domain.IpPermissionImpl;\n+import org.jclouds.ec2.domain.IpPermission;\n import org.jclouds.ec2.domain.IpProtocol;\n import org.jclouds.ec2.domain.SecurityGroup;\n import org.jclouds.http.functions.ParseSax;\n@@ -41,7 +41,7 @@\n \n /**\n  * Tests behavior of {@code DescribeSecurityGroupsResponseHandler}\n- * \n+ *\n  * @author Adrian Cole\n  */\n // NOTE:without testName, this will not call @Before* and fail w/NPE during\n@@ -54,40 +54,40 @@ public void testApplyInputStream() {\n \n       Set<SecurityGroup> expected = ImmutableSet.of(\n             new SecurityGroup(defaultRegion, null, \"WebServers\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Web Servers\",\n-                  ImmutableSet.of(new IpPermissionImpl(IpProtocol.TCP, 80, 80, ImmutableMultimap.<String, String> of(),\n+                  ImmutableSet.of(new IpPermission(IpProtocol.TCP, 80, 80, ImmutableMultimap.<String, String> of(),\n                         ImmutableSet.<String> of(), ImmutableSet.of(\"0.0.0.0/0\")))),\n             new SecurityGroup(defaultRegion, null, \"RangedPortsBySource\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Group A\",\n-                  ImmutableSet.of(new IpPermissionImpl(IpProtocol.TCP, 6000, 7000, ImmutableMultimap\n+                  ImmutableSet.of(new IpPermission(IpProtocol.TCP, 6000, 7000, ImmutableMultimap\n                         .<String, String> of(), ImmutableSet.<String> of(), ImmutableSet.<String> of()))));\n \n       DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n       addDefaultRegionToHandler(handler);\n       Set<SecurityGroup> result = factory.create(handler).parse(is);\n \n-      assertEquals(result, expected);\n+      assertEquals(result.toString(), expected.toString());\n    }\n \n    // Response from OpenStack 1.1 EC2 API\n    public void testApplyInputStreamWithEmptyFields() {\n \n       InputStream is = getClass().getResourceAsStream(\"/describe_securitygroups_empty.xml\");\n-      \n+\n       Multimap<String, String> userIdGroupPairs = LinkedHashMultimap.create();\n       userIdGroupPairs.put(\"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"jclouds#cluster#world\");\n-      \n+\n       Set<SecurityGroup> expected = ImmutableSet.of(\n             new SecurityGroup(defaultRegion, null, \"jclouds#cluster#world\", \"UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM\", \"Cluster\",\n                   ImmutableSet.of(\n-                        new IpPermissionImpl(IpProtocol.TCP, 22, 22, ImmutableMultimap.<String, String> of(),\n+                        new IpPermission(IpProtocol.TCP, 22, 22, ImmutableMultimap.<String, String> of(),\n                               ImmutableSet.<String> of(), ImmutableSet.of(\"0.0.0.0/0\")),\n-                        new IpPermissionImpl(IpProtocol.ALL, -1, -1, userIdGroupPairs,\n+                        new IpPermission(IpProtocol.ALL, -1, -1, userIdGroupPairs,\n                               ImmutableSet.<String> of(), ImmutableSet.<String> of()))));\n \n       DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n       addDefaultRegionToHandler(handler);\n       Set<SecurityGroup> result = factory.create(handler).parse(is);\n \n-      assertEquals(result, expected);\n+      assertEquals(result.toString(), expected.toString());\n    }\n \n    private void addDefaultRegionToHandler(ParseSax.HandlerWithResult<?> handler) {",
                "deletions": 10
            },
            {
                "sha": "3a6c9b86d3f34bba00f61dc8cb862c62ed4c9d26",
                "filename": "apis/ec2/src/test/resources/describe_securitygroups.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups.xml",
                "status": "modified",
                "changes": 71,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/resources/describe_securitygroups.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -1,36 +1,37 @@\n-<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\">\n-  <securityGroupInfo>\n-    <item>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-      <groupName>WebServers</groupName>\n-      <groupDescription>Web Servers</groupDescription>\n-      <ipPermissions>\n-        <item>\n-      <ipProtocol>tcp</ipProtocol>\n-      <fromPort>80</fromPort>\n-      <toPort>80</toPort>\n-      <groups/>\n-      <ipRanges>\n-        <item>\n-          <cidrIp>0.0.0.0/0</cidrIp>\n-        </item>\n-      </ipRanges>\n-         </item>\n-      </ipPermissions>\n-    </item>\n-    <item>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-      <groupName>RangedPortsBySource</groupName>\n-      <groupDescription>Group A</groupDescription>\n-      <ipPermissions>\n-    <item>\n-      <ipProtocol>tcp</ipProtocol>\n-      <fromPort>6000</fromPort>\n-      <toPort>7000</toPort>\n-      <groups/>\n-      <ipRanges/>\n-    </item>\n-      </ipPermissions>\n-    </item>\n-  </securityGroupInfo>\n+<DescribeSecurityGroupsResponse\n+\txmlns=\"http://ec2.amazonaws.com/doc/2009-11-30/\">\n+\t<securityGroupInfo>\n+\t\t<item>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t\t<groupName>WebServers</groupName>\n+\t\t\t<groupDescription>Web Servers</groupDescription>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<fromPort>80</fromPort>\n+\t\t\t\t\t<toPort>80</toPort>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<ipRanges>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<cidrIp>0.0.0.0/0</cidrIp>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</ipRanges>\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t</item>\n+\t\t<item>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t\t<groupName>RangedPortsBySource</groupName>\n+\t\t\t<groupDescription>Group A</groupDescription>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<fromPort>6000</fromPort>\n+\t\t\t\t\t<toPort>7000</toPort>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<ipRanges />\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t</item>\n+\t</securityGroupInfo>\n </DescribeSecurityGroupsResponse>\n\\ No newline at end of file",
                "deletions": 35
            },
            {
                "sha": "0079ee6abd2a4483411ab2ec65dbbd97769bfc1a",
                "filename": "apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/apis/ec2/src/test/resources/describe_securitygroups_empty.xml",
                "status": "modified",
                "changes": 70,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/resources/describe_securitygroups_empty.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -1,39 +1,39 @@\n <?xml version=\"1.0\" ?>\n-<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\">\n-  <requestId>L6EFIZVPJS76T3K5-0UV</requestId>\n-  <securityGroupInfo>\n+<DescribeSecurityGroupsResponse\n+\txmlns=\"http://ec2.amazonaws.com/doc/2010-06-15/\">\n+\t<requestId>L6EFIZVPJS76T3K5-0UV</requestId>\n+\t<securityGroupInfo>\n+\t\t<item>\n+\t\t\t<ipPermissions>\n+\t\t\t\t<item>\n+\t\t\t\t\t<toPort>22</toPort>\n+\t\t\t\t\t<ipProtocol>tcp</ipProtocol>\n+\t\t\t\t\t<ipRanges>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<cidrIp>0.0.0.0/0</cidrIp>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</ipRanges>\n+\t\t\t\t\t<groups />\n+\t\t\t\t\t<fromPort>22</fromPort>\n+\t\t\t\t</item>\n \n-    <item>\n-      <ipPermissions>\n-        <item>\n-          <toPort>22</toPort>\n-          <ipProtocol>tcp</ipProtocol>\n-          <ipRanges>\n-            <item>\n-              <cidrIp>0.0.0.0/0</cidrIp>\n-            </item>\n-          </ipRanges>\n-          <groups/>\n-          <fromPort>22</fromPort>\n-        </item>\n+\t\t\t\t<item>\n+\t\t\t\t\t<toPort />\n+\t\t\t\t\t<ipProtocol />\n+\t\t\t\t\t<ipRanges />\n+\t\t\t\t\t<groups>\n+\t\t\t\t\t\t<item>\n+\t\t\t\t\t\t\t<groupName>jclouds#cluster#world</groupName>\n+\t\t\t\t\t\t\t<userId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</userId>\n+\t\t\t\t\t\t</item>\n+\t\t\t\t\t</groups>\n+\t\t\t\t\t<fromPort />\n+\t\t\t\t</item>\n+\t\t\t</ipPermissions>\n+\t\t\t<groupName>jclouds#cluster#world</groupName>\n+\t\t\t<groupDescription>Cluster</groupDescription>\n+\t\t\t<ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n+\t\t</item>\n \n-        <item>\n-          <toPort/>\n-          <ipProtocol/>\n-          <ipRanges/>\n-          <groups>\n-            <item>\n-              <groupName>jclouds#cluster#world</groupName>\n-              <userId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</userId>\n-            </item>\n-          </groups>\n-          <fromPort/>\n-        </item>\n-      </ipPermissions>\n-      <groupName>jclouds#cluster#world</groupName>\n-      <groupDescription>Cluster</groupDescription>\n-      <ownerId>UYY3TLBUXIEON5NQVUUX6OMPWBZIQNFM</ownerId>\n-    </item>\n-\n-  </securityGroupInfo>\n+\t</securityGroupInfo>\n </DescribeSecurityGroupsResponse>",
                "deletions": 35
            },
            {
                "sha": "0394d2baaea95d94e4a974c773d019dc018a5999",
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java",
                "status": "added",
                "changes": 87,
                "additions": 87,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/parse/DescribeSecurityGroupsResponseTest.java?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -0,0 +1,87 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.aws.ec2.parse;\n+\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.InputStream;\n+import java.util.Set;\n+\n+import org.jclouds.ec2.domain.IpPermission;\n+import org.jclouds.ec2.domain.IpProtocol;\n+import org.jclouds.ec2.domain.SecurityGroup;\n+import org.jclouds.ec2.xml.BaseEC2HandlerTest;\n+import org.jclouds.ec2.xml.DescribeSecurityGroupsResponseHandler;\n+import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.rest.internal.GeneratedHttpRequest;\n+import org.testng.annotations.Test;\n+\n+import com.google.common.collect.ImmutableList;\n+import com.google.common.collect.ImmutableSet;\n+\n+/**\n+ *\n+ * @author Adrian Cole\n+ */\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during\n+// surefire\n+@Test(groups = \"unit\", testName = \"DescribeSecurityGroupsResponseTest\")\n+public class DescribeSecurityGroupsResponseTest extends BaseEC2HandlerTest {\n+\n+   public void test() {\n+      InputStream is = getClass().getResourceAsStream(\"/describe_security_groups_vpc.xml\");\n+\n+      Set<SecurityGroup> expected = expected();\n+\n+      DescribeSecurityGroupsResponseHandler handler = injector.getInstance(DescribeSecurityGroupsResponseHandler.class);\n+      addDefaultRegionToHandler(handler);\n+      Set<SecurityGroup> result = factory.create(handler).parse(is);\n+\n+      assertEquals(result.toString(), expected.toString());\n+   }\n+\n+   public Set<SecurityGroup> expected() {\n+      return ImmutableSet.of(SecurityGroup.builder()\n+                                          .region(defaultRegion)\n+                                          .ownerId(\"123123123123\")\n+                                          .id(\"sg-11111111\")\n+                                          .name(\"default\")\n+                                          .description(\"default VPC security group\")\n+//                                          .vpcId(\"vpc-99999999\")\n+                                          .ipPermission(IpPermission.builder()\n+                                                                    .ipProtocol(IpProtocol.ALL)\n+                                                                    .userIdGroupPair(\"123123123123\",\"sg-11111111\").build())\n+//                                          .ipPermissionEgress(IpPermission.builder()\n+//                                                                    .ipProtocol(IpProtocol.ALL)\n+//                                                                    .ipRange(\"0.0.0.0/0\").build())\n+                                          .build());\n+\n+   }\n+\n+   private void addDefaultRegionToHandler(ParseSax.HandlerWithResult<?> handler) {\n+      GeneratedHttpRequest request = createMock(GeneratedHttpRequest.class);\n+      expect(request.getArgs()).andReturn(ImmutableList.<Object> of()).atLeastOnce();\n+      replay(request);\n+      handler.setContext(request);\n+   }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "cd635b4e7179fb5c5ffcfde86ff810734043f586",
                "filename": "providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/14ad17108faab23a3792e372005c60e6ada293cd/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml",
                "status": "added",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/resources/describe_security_groups_vpc.xml?ref=14ad17108faab23a3792e372005c60e6ada293cd",
                "patch": "@@ -0,0 +1,35 @@\n+<DescribeSecurityGroupsResponse xmlns=\"http://ec2.amazonaws.com/doc/2011-05-15/\">\n+        <requestId>xxxxxxxxxxxxxxxx</requestId>\n+        <securityGroupInfo>\n+            <item>\n+                <ownerId>123123123123</ownerId>\n+                <groupId>sg-11111111</groupId>\n+                <groupName>default</groupName>\n+                <groupDescription>default VPC security group</groupDescription>\n+                <vpcId>vpc-99999999</vpcId>\n+                <ipPermissions>\n+                    <item>\n+                        <ipProtocol>-1</ipProtocol>\n+                        <groups>\n+                            <item>\n+                                <userId>123123123123</userId>\n+                                <groupId>sg-11111111</groupId>\n+                            </item>\n+                        </groups>\n+                        <ipRanges/>\n+                    </item>\n+                </ipPermissions>\n+                <ipPermissionsEgress>\n+                    <item>\n+                        <ipProtocol>-1</ipProtocol>\n+                        <groups/>\n+                        <ipRanges>\n+                            <item>\n+                                <cidrIp>0.0.0.0/0</cidrIp>\n+                            </item>\n+                        </ipRanges>\n+                    </item>\n+                </ipPermissionsEgress>\n+            </item>\n+    </securityGroupInfo>\n+</DescribeSecurityGroupsResponse>\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "nicer NPE when null args are specified to ReST methods",
        "commit": "https://github.com/apache/jclouds/commit/85b5006084adeb8bb72ee1be3218a72497418129",
        "parent": "https://github.com/apache/jclouds/commit/085bc43d4883e359a0966a0b2e7a3a9f617c705a",
        "bug_id": "jclouds_36",
        "file": [
            {
                "sha": "ba42417faf86d1cb69af263036d3cfc5a3c21acb",
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "blob_url": "https://github.com/apache/jclouds/blob/85b5006084adeb8bb72ee1be3218a72497418129/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "raw_url": "https://github.com/apache/jclouds/raw/85b5006084adeb8bb72ee1be3218a72497418129/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "status": "modified",
                "changes": 91,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=85b5006084adeb8bb72ee1be3218a72497418129",
                "patch": "@@ -140,6 +140,7 @@\n import com.google.common.base.Function;\n import com.google.common.base.Functions;\n import com.google.common.base.Objects;\n+import com.google.common.base.Optional;\n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -1014,7 +1015,7 @@ public GeneratedHttpRequest decorateRequest(GeneratedHttpRequest request) throws\n \n             Annotation[] annotations = request.getJavaMethod().getParameterAnnotations()[entry.getKey()];\n             for (Annotation a : annotations) {\n-               if (Nullable.class.isAssignableFrom(a.annotationType()))\n+               if (NULLABLE.apply(a))\n                   continue OUTER;\n             }\n             Preconditions.checkNotNull(null, request.getJavaMethod().getName() + \" parameter \" + (entry.getKey() + 1));\n@@ -1188,17 +1189,11 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((PathParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()].toString();\n-            }\n-            pathParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               pathParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n-\n       if (method.isAnnotationPresent(PathParam.class) && method.isAnnotationPresent(ParamParser.class)) {\n          String paramKey = method.getAnnotation(PathParam.class).value();\n          String paramValue = injector.getInstance(method.getAnnotation(ParamParser.class).value()).apply(args);\n@@ -1208,6 +1203,33 @@ else if (args[i] instanceof PayloadEnclosing)\n       return pathParamValues;\n    }\n \n+   protected Optional<?> getParamValue(Method method, Object[] args, Set<Annotation> extractors,\n+            Entry<Integer, Set<Annotation>> entry, String paramKey) {\n+      Object arg = args[entry.getKey()];\n+      if (arg == null && containsNullable(method.getParameterAnnotations()[entry.getKey()]))\n+         return Optional.absent();\n+\n+      checkNotNull(arg, \"param{%s} for method %s.%s\", paramKey, method.getDeclaringClass().getSimpleName(),\n+               method.getName());\n+      if (extractors != null && extractors.size() > 0) {\n+         ParamParser extractor = (ParamParser) extractors.iterator().next();\n+         return Optional.of(injector.getInstance(extractor.value()).apply(arg));\n+      }\n+      return Optional.of(arg);\n+   }\n+\n+   private static final Predicate<Annotation> NULLABLE = new Predicate<Annotation>() {\n+\n+      @Override\n+      public boolean apply(Annotation in) {\n+         return Nullable.class.isAssignableFrom(in.annotationType());\n+      }\n+   };\n+\n+   private static boolean containsNullable(Annotation[] annotations) {\n+      return Iterables.any(ImmutableSet.copyOf(annotations), NULLABLE);\n+   }\n+\n    private Multimap<String, String> encodeValues(Multimap<String, String> unencoded, char... skips) {\n       Multimap<String, String> encoded = LinkedHashMultimap.create();\n       for (Entry<String, String> entry : unencoded.entries()) {\n@@ -1226,14 +1248,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((MatrixParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()].toString();\n-            }\n-            matrixParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               matrixParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1257,16 +1274,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((FormParam) key).value();\n-            String paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               Object pvo = args[entry.getKey()];\n-               Preconditions.checkNotNull(pvo, paramKey);\n-               paramValue = pvo.toString();\n-            }\n-            formParamValues.put(paramKey, paramValue);\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               formParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1289,16 +1299,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            Object paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()];\n-            }\n-            if (paramValue != null) {\n-                queryParamValues.put(paramKey, paramValue.toString());\n-            }\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               queryParamValues.put(paramKey, paramValue.get().toString());\n          }\n       }\n \n@@ -1321,15 +1324,9 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((PayloadParam) key).value();\n-            Object paramValue;\n-            if (extractors != null && extractors.size() > 0) {\n-               ParamParser extractor = (ParamParser) extractors.iterator().next();\n-               paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n-            } else {\n-               paramValue = args[entry.getKey()] != null ? args[entry.getKey()] : null;\n-            }\n-            postParams.put(paramKey, paramValue);\n-\n+            Optional<?> paramValue = getParamValue(method, args, extractors, entry, paramKey);\n+            if (paramValue.isPresent())\n+               postParams.put(paramKey, paramValue.get());\n          }\n       }\n       return postParams;",
                "deletions": 47
            },
            {
                "sha": "0bce56fcd54eb525332bd70bcf6d8d8f48fdeb44",
                "filename": "core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/85b5006084adeb8bb72ee1be3218a72497418129/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/85b5006084adeb8bb72ee1be3218a72497418129/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java",
                "status": "modified",
                "changes": 68,
                "additions": 64,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/rest/internal/RestAnnotationProcessorTest.java?ref=85b5006084adeb8bb72ee1be3218a72497418129",
                "patch": "@@ -499,6 +499,12 @@ public void foo2() {\n       @QueryParams(keys = { \"foo\", \"fooble\" }, values = { \"bar\", \"baz\" })\n       public void foo3(@QueryParam(\"robbie\") String robbie) {\n       }\n+      \n+      @FOO\n+      @Path(\"/\")\n+      @QueryParams(keys = { \"foo\", \"fooble\" }, values = { \"bar\", \"baz\" })\n+      public void foo3Nullable(@Nullable @QueryParam(\"robbie\") String robbie) {\n+      }\n    }\n \n    public void testUnEncodeQuery() {\n@@ -537,6 +543,25 @@ public void testQuery3() throws SecurityException, NoSuchMethodException {\n       assertEquals(request.getEndpoint().getQuery(), \"x-ms-version=2009-07-17&foo=bar&fooble=baz&robbie=wonder\");\n       assertEquals(request.getMethod(), \"FOO\");\n    }\n+   \n+   @Test\n+   public void testNiceNPEQueryParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestQuery.class.getMethod(\"foo3\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{robbie} for method TestQuery.foo3\");\n+      }\n+   }\n+\n+   public void testNoNPEOnQueryParamWithNullable() throws SecurityException, NoSuchMethodException {\n+      Method method = TestQuery.class.getMethod(\"foo3Nullable\", String.class);\n+      HttpRequest request = factory(TestPath.class).createRequest(method, (String) null);\n+      assertEquals(request.getEndpoint().getHost(), \"localhost\");\n+      assertEquals(request.getEndpoint().getPath(), \"/\");\n+      assertEquals(request.getEndpoint().getQuery(), \"foo=bar&fooble=baz\");\n+      assertEquals(request.getMethod(), \"FOO\");\n+   }\n \n    public interface TestPayloadParamVarargs {\n       @POST\n@@ -578,7 +603,7 @@ public void testHttpRequestOptionsPayloadParam() throws SecurityException, NoSuc\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, \"foo\", \"application/octet-stream\", false);\n    }\n-\n+   \n    public void testHttpRequestWithOnlyContentType() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPayloadParamVarargs.class.getMethod(\"post\", HttpRequestOptions.class);\n       HttpRequest request = factory(TestPayloadParamVarargs.class).createRequest(method, new TestHttpRequestOptions().payload(\"fooya\"));\n@@ -1397,6 +1422,11 @@ public void testConstantPathParam() throws SecurityException, NoSuchMethodExcept\n       @Path(\"/{path}\")\n       public void onePath(@PathParam(\"path\") String path) {\n       }\n+      \n+      @GET\n+      @Path(\"/{path}\")\n+      public void onePathNullable(@Nullable @PathParam(\"path\") String path) {\n+      }\n \n       @GET\n       @Path(\"/{path1}/{path2}\")\n@@ -1435,7 +1465,17 @@ public void oneMatrixParamExtractor(@MatrixParam(\"one\") @ParamParser(FirstCharac\n       public void onePathParamExtractorMethod(String path) {\n       }\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEPathParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"onePath\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{path} for method TestPath.onePath\");\n+      }\n+   }\n+   \n    @Test\n    public void testPathParamExtractor() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPath.class.getMethod(\"onePathParamExtractor\", String.class);\n@@ -1462,7 +1502,17 @@ public void testMatrixParamExtractor() throws SecurityException, NoSuchMethodExc\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, null, null, false);\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEMatrixParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"oneMatrixParamExtractor\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{one} for method TestPath.oneMatrixParamExtractor\");\n+      }\n+   }\n+   \n    @Test\n    public void testFormParamExtractor() throws SecurityException, NoSuchMethodException, IOException {\n       Method method = TestPath.class.getMethod(\"oneFormParamExtractor\", String.class);\n@@ -1471,7 +1521,17 @@ public void testFormParamExtractor() throws SecurityException, NoSuchMethodExcep\n       assertNonPayloadHeadersEqual(request, \"\");\n       assertPayloadEquals(request, \"one=l\", \"application/x-www-form-urlencoded\", false);\n    }\n-\n+   \n+   @Test\n+   public void testNiceNPEFormParam() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = TestPath.class.getMethod(\"oneFormParamExtractor\", String.class);\n+      try {\n+         factory(TestPath.class).createRequest(method, (String) null);\n+      } catch (NullPointerException e) {\n+         assertEquals(e.getMessage(), \"param{one} for method TestPath.oneFormParamExtractor\");\n+      }\n+   }\n+   \n    @Test\n    public void testParamExtractorMethod() throws SecurityException, NoSuchMethodException {\n       Method method = TestPath.class.getMethod(\"onePathParamExtractorMethod\", String.class);",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "prevent NPE when null is passed to @QueryParam annotated argument",
        "commit": "https://github.com/apache/jclouds/commit/43f12fa6277db8c18fee65b70289ec63bef6ce62",
        "parent": "https://github.com/apache/jclouds/commit/90df3a1e51c0e4b40740c8dc4f94ef5491644932",
        "bug_id": "jclouds_37",
        "file": [
            {
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "blob_url": "https://github.com/apache/jclouds/blob/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "raw_url": "https://github.com/apache/jclouds/raw/43f12fa6277db8c18fee65b70289ec63bef6ce62/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=43f12fa6277db8c18fee65b70289ec63bef6ce62",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "added mock identity prop to prevent NPE in some cases",
        "commit": "https://github.com/apache/jclouds/commit/68290ba2b24483faa1a89ffc3fe789d859a56f51",
        "parent": "https://github.com/apache/jclouds/commit/d742d53f6b062e01ecaeca083fdbee40b50d8342",
        "bug_id": "jclouds_38",
        "file": [
            {
                "sha": "33c55a390d610c224c4b67b1c4e50bfd5ae52c71",
                "filename": "labs/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/68290ba2b24483faa1a89ffc3fe789d859a56f51/labs/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/68290ba2b24483faa1a89ffc3fe789d859a56f51/labs/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/virtualbox/src/test/java/org/jclouds/virtualbox/BaseVirtualBoxClientLiveTest.java?ref=68290ba2b24483faa1a89ffc3fe789d859a56f51",
                "patch": "@@ -119,10 +119,8 @@ protected void setupCredentials() {\n    }\n \n    protected void ensureIdentityPropertyIsSpecifiedOrTakeFromDefaults() {\n-      Properties defaultVBoxProperties = new VirtualBoxPropertiesBuilder().build();\n       if (!System.getProperties().containsKey(\"test.\" + provider + \".identity\"))\n-         System.setProperty(\"test.\" + provider + \".identity\",\n-                  defaultVBoxProperties.getProperty(Constants.PROPERTY_IDENTITY));\n+         System.setProperty(\"test.\" + provider + \".identity\", \"administrator\");\n    }\n \n    @BeforeClass(groups = \"live\")",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "permit NPE on cdn metadata while in beta",
        "commit": "https://github.com/apache/jclouds/commit/aa9922355824a278e05fc3f0bbdd485faa547061",
        "parent": "https://github.com/apache/jclouds/commit/075c0c8e5ea5460de97c6df6f4229eee1e40f06f",
        "bug_id": "jclouds_39",
        "file": [
            {
                "sha": "229149566472f261f8dd6f4e1291b0a40acf87af",
                "filename": "providers/hpcloud-object-storage/src/main/java/org/jclouds/hpcloud/object/storage/blobstore/functions/PublicUriForObjectInfo.java",
                "blob_url": "https://github.com/apache/jclouds/blob/aa9922355824a278e05fc3f0bbdd485faa547061/providers/hpcloud-object-storage/src/main/java/org/jclouds/hpcloud/object/storage/blobstore/functions/PublicUriForObjectInfo.java",
                "raw_url": "https://github.com/apache/jclouds/raw/aa9922355824a278e05fc3f0bbdd485faa547061/providers/hpcloud-object-storage/src/main/java/org/jclouds/hpcloud/object/storage/blobstore/functions/PublicUriForObjectInfo.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/hpcloud-object-storage/src/main/java/org/jclouds/hpcloud/object/storage/blobstore/functions/PublicUriForObjectInfo.java?ref=aa9922355824a278e05fc3f0bbdd485faa547061",
                "patch": "@@ -54,6 +54,10 @@ public URI apply(ObjectInfo from) {\n       } catch (CacheLoader.InvalidCacheLoadException e) {\n          // nulls not permitted from cache loader\n          return null;\n+      } catch (NullPointerException e) {\n+         // nulls not permitted from cache loader\n+         // TODO this shouldn't occur when the above exception is reliably presented\n+         return null;\n       }\n    }\n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "added message to NPE when vdc isn't found",
        "commit": "https://github.com/apache/jclouds/commit/281109dfc4d2c11dc24f390542e8297f3999acdb",
        "parent": "https://github.com/apache/jclouds/commit/69a1b7a6aafdf0ba42429774f8791063f549d7bc",
        "bug_id": "jclouds_40",
        "file": [
            {
                "sha": "9b2db963b2767599c0aae38bc3322991ce928280",
                "filename": "common/trmk/src/main/java/org/jclouds/vcloud/terremark/compute/TerremarkVCloudComputeClient.java",
                "blob_url": "https://github.com/apache/jclouds/blob/281109dfc4d2c11dc24f390542e8297f3999acdb/common/trmk/src/main/java/org/jclouds/vcloud/terremark/compute/TerremarkVCloudComputeClient.java",
                "raw_url": "https://github.com/apache/jclouds/raw/281109dfc4d2c11dc24f390542e8297f3999acdb/common/trmk/src/main/java/org/jclouds/vcloud/terremark/compute/TerremarkVCloudComputeClient.java",
                "status": "modified",
                "changes": 66,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/vcloud/terremark/compute/TerremarkVCloudComputeClient.java?ref=281109dfc4d2c11dc24f390542e8297f3999acdb",
                "patch": "@@ -18,15 +18,16 @@\n  */\n package org.jclouds.vcloud.terremark.compute;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static com.google.common.collect.Iterables.filter;\n import static com.google.common.collect.Iterables.getLast;\n import static org.jclouds.vcloud.terremark.options.AddInternetServiceOptions.Builder.withDescription;\n \n import java.net.URI;\n import java.util.Map;\n-import java.util.Map.Entry;\n import java.util.NoSuchElementException;\n import java.util.Set;\n+import java.util.Map.Entry;\n \n import javax.annotation.Nullable;\n import javax.inject.Inject;\n@@ -71,10 +72,10 @@\n \n    @Inject\n    protected TerremarkVCloudComputeClient(TerremarkVCloudClient client,\n-         PopulateDefaultLoginCredentialsForImageStrategy credentialsProvider,\n-         @Named(\"PASSWORD\") Provider<String> passwordGenerator, Predicate<URI> successTester,\n-         Map<Status, NodeState> vAppStatusToNodeState, Map<String, Credentials> credentialStore,\n-         InternetServiceAndPublicIpAddressSupplier internetServiceAndPublicIpAddressSupplier) {\n+            PopulateDefaultLoginCredentialsForImageStrategy credentialsProvider,\n+            @Named(\"PASSWORD\") Provider<String> passwordGenerator, Predicate<URI> successTester,\n+            Map<Status, NodeState> vAppStatusToNodeState, Map<String, Credentials> credentialStore,\n+            InternetServiceAndPublicIpAddressSupplier internetServiceAndPublicIpAddressSupplier) {\n       super(client, successTester, vAppStatusToNodeState);\n       this.client = client;\n       this.credentialsProvider = credentialsProvider;\n@@ -85,7 +86,7 @@ protected TerremarkVCloudComputeClient(TerremarkVCloudClient client,\n \n    @Override\n    public VCloudExpressVApp start(@Nullable URI VDC, URI templateId, String name,\n-         InstantiateVAppTemplateOptions options, int... portsToOpen) {\n+            InstantiateVAppTemplateOptions options, int... portsToOpen) {\n       if (options.getDiskSizeKilobytes() != null) {\n          logger.warn(\"trmk does not support resizing the primary disk; unsetting disk size\");\n       }\n@@ -95,7 +96,7 @@ public VCloudExpressVApp start(@Nullable URI VDC, URI templateId, String name,\n       String password = null;\n       VCloudExpressVAppTemplate template = client.getVAppTemplate(templateId);\n       if (template.getDescription().indexOf(\"Windows\") != -1\n-            && options instanceof TerremarkInstantiateVAppTemplateOptions) {\n+               && options instanceof TerremarkInstantiateVAppTemplateOptions) {\n          password = passwordGenerator.get();\n          TerremarkInstantiateVAppTemplateOptions.class.cast(options).getProperties().put(\"password\", password);\n       }\n@@ -104,7 +105,7 @@ public VCloudExpressVApp start(@Nullable URI VDC, URI templateId, String name,\n       VCloudExpressVApp vAppResponse = super.start(VDC, templateId, name, options, portsToOpen);\n       if (password != null) {\n          credentialStore.put(\"node#\" + vAppResponse.getHref().toASCIIString(), new Credentials(\n-               defaultCredentials.identity, password));\n+                  defaultCredentials.identity, password));\n       }\n       if (portsToOpen.length > 0)\n          createPublicAddressMappedToPorts(vAppResponse.getHref(), portsToOpen);\n@@ -119,61 +120,58 @@ public String createPublicAddressMappedToPorts(URI vAppId, int... ports) {\n          InternetService is = null;\n          Protocol protocol;\n          switch (port) {\n-         case 22:\n-            protocol = Protocol.TCP;\n-            break;\n-         case 80:\n-         case 8080:\n-            protocol = Protocol.HTTP;\n-            break;\n-         case 443:\n-            protocol = Protocol.HTTPS;\n-            break;\n-         default:\n-            protocol = Protocol.HTTP;\n-            break;\n+            case 22:\n+               protocol = Protocol.TCP;\n+               break;\n+            case 80:\n+            case 8080:\n+               protocol = Protocol.HTTP;\n+               break;\n+            case 443:\n+               protocol = Protocol.HTTPS;\n+               break;\n+            default:\n+               protocol = Protocol.HTTP;\n+               break;\n          }\n          if (ip == null) {\n \n             Entry<InternetService, PublicIpAddress> entry = internetServiceAndPublicIpAddressSupplier\n-                  .getNewInternetServiceAndIp(vApp, port, protocol);\n+                     .getNewInternetServiceAndIp(vApp, port, protocol);\n             is = entry.getKey();\n             ip = entry.getValue();\n \n          } else {\n             logger.debug(\">> adding InternetService %s:%s:%d\", ip.getAddress(), protocol, port);\n-            is = client.addInternetServiceToExistingIp(\n-                  ip.getId(),\n-                  vApp.getName() + \"-\" + port,\n-                  protocol,\n-                  port,\n-                  withDescription(String.format(\"port %d access to serverId: %s name: %s\", port, vApp.getName(),\n-                        vApp.getName())));\n+            is = client.addInternetServiceToExistingIp(ip.getId(), vApp.getName() + \"-\" + port, protocol, port,\n+                     withDescription(String.format(\"port %d access to serverId: %s name: %s\", port, vApp.getName(),\n+                              vApp.getName())));\n          }\n-         logger.debug(\"<< created InternetService(%s) %s:%s:%d\", is.getName(), is.getPublicIpAddress().getAddress(),\n-               is.getProtocol(), is.getPort());\n+         logger.debug(\"<< created InternetService(%s) %s:%s:%d\", is.getName(), is.getPublicIpAddress().getAddress(), is\n+                  .getProtocol(), is.getPort());\n          logger.debug(\">> adding Node %s:%d -> %s:%d\", is.getPublicIpAddress().getAddress(), is.getPort(),\n-               privateAddress, port);\n+                  privateAddress, port);\n          Node node = client.addNode(is.getId(), privateAddress, vApp.getName() + \"-\" + port, port);\n          logger.debug(\"<< added Node(%s)\", node.getName());\n       }\n       return ip != null ? ip.getAddress() : null;\n    }\n \n    private Set<PublicIpAddress> deleteInternetServicesAndNodesAssociatedWithVApp(VCloudExpressVApp vApp) {\n+      checkNotNull(vApp.getVDC(), \"VDC reference missing for vApp(%s)\", vApp.getName());\n       Set<PublicIpAddress> ipAddresses = Sets.newHashSet();\n       SERVICE: for (InternetService service : client.getAllInternetServicesInVDC(vApp.getVDC().getHref())) {\n          for (Node node : client.getNodes(service.getId())) {\n             if (vApp.getNetworkToAddresses().containsValue(node.getIpAddress())) {\n                ipAddresses.add(service.getPublicIpAddress());\n                logger.debug(\">> deleting Node(%s) %s:%d -> %s:%d\", node.getName(), service.getPublicIpAddress()\n-                     .getAddress(), service.getPort(), node.getIpAddress(), node.getPort());\n+                        .getAddress(), service.getPort(), node.getIpAddress(), node.getPort());\n                client.deleteNode(node.getId());\n                logger.debug(\"<< deleted Node(%s)\", node.getName());\n                Set<Node> nodes = client.getNodes(service.getId());\n                if (nodes.size() == 0) {\n                   logger.debug(\">> deleting InternetService(%s) %s:%d\", service.getName(), service.getPublicIpAddress()\n-                        .getAddress(), service.getPort());\n+                           .getAddress(), service.getPort());\n                   client.deleteInternetService(service.getId());\n                   logger.debug(\"<< deleted InternetService(%s)\", service.getName());\n                   continue SERVICE;",
                "deletions": 34
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 466: NPE creating a key in trmk-ecloud",
        "commit": "https://github.com/apache/jclouds/commit/a75486f2e6ff52dcc41707576a406174f848a30e",
        "parent": "https://github.com/apache/jclouds/commit/a74ad46ca48090a1056923874cee2e9805974dd8",
        "bug_id": "jclouds_41",
        "file": [
            {
                "sha": "f88b30611be350a1e9559b1704a05589eac5cc4d",
                "filename": "common/trmk/src/main/resources/terremark/CreateKey.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/a75486f2e6ff52dcc41707576a406174f848a30e/common/trmk/src/main/resources/terremark/CreateKey.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/a75486f2e6ff52dcc41707576a406174f848a30e/common/trmk/src/main/resources/terremark/CreateKey.xml",
                "status": "renamed",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/resources/terremark/CreateKey.xml?ref=a75486f2e6ff52dcc41707576a406174f848a30e",
                "deletions": 0,
                "previous_filename": "common/trmk/src/test/resources/terremark/CreateKey.xml"
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixed NPE when httpresponseexception is caused by an io exception",
        "commit": "https://github.com/apache/jclouds/commit/d884978a98262de0d52e92322611bdd2f7e2fe28",
        "parent": "https://github.com/apache/jclouds/commit/a168683851f57d2c47667038ea8b1d5021839738",
        "bug_id": "jclouds_42",
        "file": [
            {
                "sha": "3a8ab0d400c22e93102d2dbc8cbfe02a1078a1a5",
                "filename": "aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java",
                "status": "modified",
                "changes": 36,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/main/java/org/jclouds/aws/s3/functions/ReturnTrueOn404OrNotFoundFalseIfNotEmpty.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -18,6 +18,12 @@\n  */\n package org.jclouds.aws.s3.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static com.google.common.base.Throwables.getCausalChain;\n+import static com.google.common.collect.Iterables.filter;\n+import static com.google.common.collect.Iterables.get;\n+import static com.google.common.collect.Iterables.size;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import java.util.List;\n@@ -26,11 +32,8 @@\n \n import org.jclouds.aws.AWSResponseException;\n import org.jclouds.blobstore.ContainerNotFoundException;\n-import org.jclouds.http.HttpResponseException;\n \n import com.google.common.base.Function;\n-import com.google.common.base.Throwables;\n-import com.google.common.collect.Iterables;\n \n /**\n  * \n@@ -40,28 +43,21 @@\n public class ReturnTrueOn404OrNotFoundFalseIfNotEmpty implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      List<Throwable> throwables = Throwables.getCausalChain(from);\n+      List<Throwable> throwables = getCausalChain(from);\n \n-      Iterable<AWSResponseException> matchingAWSResponseException = Iterables.filter(throwables,\n-               AWSResponseException.class);\n-      if (Iterables.size(matchingAWSResponseException) >= 1) {\n-         if (Iterables.get(matchingAWSResponseException, 0).getError().getCode().equals(\n-                  \"BucketNotEmpty\"))\n+      Iterable<AWSResponseException> matchingAWSResponseException = filter(throwables, AWSResponseException.class);\n+      if (size(matchingAWSResponseException) >= 1 && get(matchingAWSResponseException, 0).getError() != null) {\n+         if (get(matchingAWSResponseException, 0).getError().getCode().equals(\"BucketNotEmpty\"))\n             return false;\n       }\n-      \n-      Iterable<ContainerNotFoundException> matchingContainerNotFoundException = Iterables.filter(\n-               throwables, ContainerNotFoundException.class);\n-      if (Iterables.size(matchingContainerNotFoundException) >= 1) {\n-         return true;\n-      }\n \n-      Iterable<HttpResponseException> matchingHttpResponseException = Iterables.filter(throwables,\n-               HttpResponseException.class);\n-      if (Iterables.size(matchingHttpResponseException) >= 1) {\n-         if (Iterables.get(matchingHttpResponseException, 0).getResponse().getStatusCode() == 404)\n-            return true;\n+      Iterable<ContainerNotFoundException> matchingContainerNotFoundException = filter(throwables,\n+            ContainerNotFoundException.class);\n+      if (size(matchingContainerNotFoundException) >= 1) {\n+         return true;\n       }\n+      if (returnValueOnCodeOrNull(from, true, equalTo(404)) != null)\n+         return true;\n \n       return Boolean.class.cast(propagateOrNull(from));\n    }",
                "deletions": 20
            },
            {
                "sha": "11b1e376cb80babfed48061bf990f23492dac44f",
                "filename": "core/src/main/java/org/jclouds/http/HttpUtils.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/HttpUtils.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/HttpUtils.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/HttpUtils.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -20,8 +20,12 @@\n \n import static com.google.common.base.Preconditions.checkArgument;\n import static com.google.common.base.Preconditions.checkState;\n+import static com.google.common.base.Throwables.getCausalChain;\n import static com.google.common.base.Throwables.propagate;\n import static com.google.common.collect.Iterables.any;\n+import static com.google.common.collect.Iterables.filter;\n+import static com.google.common.collect.Iterables.get;\n+import static com.google.common.collect.Iterables.size;\n import static com.google.common.collect.Lists.newArrayList;\n import static com.google.common.collect.Sets.newTreeSet;\n import static com.google.common.io.ByteStreams.toByteArray;\n@@ -562,4 +566,13 @@ public static void wirePayloadIfEnabled(Wire wire, HttpRequest request) {\n                \"After wiring, the request has neither chunked encoding nor content length: \" + request);\n       }\n    }\n+\n+   public static <T> T returnValueOnCodeOrNull(Exception from, T value, Predicate<Integer> codePredicate) {\n+      Iterable<HttpResponseException> throwables = filter(getCausalChain(from), HttpResponseException.class);\n+      if (size(throwables) >= 1 && get(throwables, 0).getResponse() != null\n+            && codePredicate.apply(get(throwables, 0).getResponse().getStatusCode())) {\n+         return value;\n+      }\n+      return null;\n+   }\n }",
                "deletions": 0
            },
            {
                "sha": "dcc8e1a854ff593a6ddb702cb3bd1f8e40f80081",
                "filename": "core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java",
                "status": "modified",
                "changes": 13,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ReturnFalseOn404.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -18,12 +18,12 @@\n  */\n package org.jclouds.http.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import javax.inject.Singleton;\n \n-import org.jclouds.http.HttpResponseException;\n-\n import com.google.common.base.Function;\n \n /**\n@@ -34,13 +34,8 @@\n public class ReturnFalseOn404 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      if (from instanceof HttpResponseException) {\n-         HttpResponseException responseException = (HttpResponseException) from;\n-         if (responseException.getResponse().getStatusCode() == 404) {\n-            return false;\n-         }\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, false, equalTo(404));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n \n }",
                "deletions": 9
            },
            {
                "sha": "7a38204612ac74ed9af5a66fdc1f191930e00636",
                "filename": "core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java",
                "status": "modified",
                "changes": 15,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/functions/ReturnTrueOn404.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -18,27 +18,20 @@\n  */\n package org.jclouds.http.functions;\n \n+import static com.google.common.base.Predicates.equalTo;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n import javax.inject.Singleton;\n \n-import org.jclouds.http.HttpResponseException;\n-\n import com.google.common.base.Function;\n-import com.google.common.base.Throwables;\n-import com.google.common.collect.Iterables;\n \n @Singleton\n public class ReturnTrueOn404 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      Iterable<HttpResponseException> throwables = Iterables.filter(\n-               Throwables.getCausalChain(from), HttpResponseException.class);\n-      if (Iterables.size(throwables) >= 1\n-               && Iterables.get(throwables, 0).getResponse().getStatusCode() == 404) {\n-         return true;\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, true, equalTo(404));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n \n }\n\\ No newline at end of file",
                "deletions": 11
            },
            {
                "sha": "d90806b7ef601b7aaa15522a5620ad7d221bae35",
                "filename": "core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/RestContextBuilder.java",
                "status": "modified",
                "changes": 46,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/RestContextBuilder.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -67,14 +67,17 @@\n import com.google.inject.util.Types;\n \n /**\n- * Creates {@link RestContext} or {@link Injector} instances based on the most commonly requested\n- * arguments.\n+ * Creates {@link RestContext} or {@link Injector} instances based on the most\n+ * commonly requested arguments.\n  * <p/>\n- * Note that Threadsafe objects will be bound as singletons to the Injector or Context provided.\n+ * Note that Threadsafe objects will be bound as singletons to the Injector or\n+ * Context provided.\n  * <p/>\n  * <p/>\n- * If no <code>Module</code>s are specified, the default {@link JDKLoggingModule logging} and\n- * {@link JavaUrlHttpCommandExecutorServiceModule http transports} will be installed.\n+ * If no <code>Module</code>s are specified, the default\n+ * {@link JDKLoggingModule logging} and\n+ * {@link JavaUrlHttpCommandExecutorServiceModule http transports} will be\n+ * installed.\n  * \n  * @author Adrian Cole, Andrew Newdigate\n  * @see RestContext\n@@ -95,22 +98,18 @@ protected void configure() {\n          toBind.putAll(System.getProperties());\n          Names.bindProperties(binder(), toBind);\n          bind(String.class).annotatedWith(Provider.class).toInstance(\n-                  checkNotNull(toBind.getProperty(PROPERTY_PROVIDER), PROPERTY_PROVIDER));\n+               checkNotNull(toBind.getProperty(PROPERTY_PROVIDER), PROPERTY_PROVIDER));\n          bind(URI.class).annotatedWith(Provider.class).toInstance(\n-                  URI.create(checkNotNull(toBind.getProperty(PROPERTY_ENDPOINT),\n-                           PROPERTY_ENDPOINT)));\n+               URI.create(checkNotNull(toBind.getProperty(PROPERTY_ENDPOINT), PROPERTY_ENDPOINT)));\n          if (toBind.containsKey(PROPERTY_API))\n-            bind(String.class).annotatedWith(Api.class).toInstance(\n-                     toBind.getProperty(PROPERTY_API));\n+            bind(String.class).annotatedWith(Api.class).toInstance(toBind.getProperty(PROPERTY_API));\n          if (toBind.containsKey(PROPERTY_API_VERSION))\n-            bind(String.class).annotatedWith(ApiVersion.class).toInstance(\n-                     toBind.getProperty(PROPERTY_API_VERSION));\n+            bind(String.class).annotatedWith(ApiVersion.class).toInstance(toBind.getProperty(PROPERTY_API_VERSION));\n          if (toBind.containsKey(PROPERTY_IDENTITY))\n             bind(String.class).annotatedWith(Identity.class).toInstance(\n-                     checkNotNull(toBind.getProperty(PROPERTY_IDENTITY), PROPERTY_IDENTITY));\n+                  checkNotNull(toBind.getProperty(PROPERTY_IDENTITY), PROPERTY_IDENTITY));\n          if (toBind.containsKey(PROPERTY_CREDENTIAL))\n-            bind(String.class).annotatedWith(Credential.class).toInstance(\n-                     toBind.getProperty(PROPERTY_CREDENTIAL));\n+            bind(String.class).annotatedWith(Credential.class).toInstance(toBind.getProperty(PROPERTY_CREDENTIAL));\n       }\n    }\n \n@@ -120,8 +119,7 @@ protected void configure() {\n    protected Class<S> syncClientType;\n \n    @Inject\n-   public RestContextBuilder(Class<S> syncClientClass, Class<A> asyncClientClass,\n-            Properties properties) {\n+   public RestContextBuilder(Class<S> syncClientClass, Class<A> asyncClientClass, Properties properties) {\n       this.asyncClientType = checkNotNull(asyncClientClass, \"asyncClientType\");\n       this.syncClientType = checkNotNull(syncClientClass, \"syncClientType\");\n       this.properties = checkNotNull(properties, \"properties\");\n@@ -184,10 +182,10 @@ protected void addContextModule(List<Module> modules) {\n          @Override\n          protected void configure() {\n             bind(\n-                     (TypeLiteral) TypeLiteral.get(Types.newParameterizedType(RestContext.class,\n-                              syncClientType, asyncClientType))).to(\n-                     TypeLiteral.get(Types.newParameterizedType(RestContextImpl.class,\n-                              syncClientType, asyncClientType))).in(Scopes.SINGLETON);\n+                  (TypeLiteral) TypeLiteral.get(Types.newParameterizedType(RestContext.class, syncClientType,\n+                        asyncClientType))).to(\n+                  TypeLiteral.get(Types.newParameterizedType(RestContextImpl.class, syncClientType, asyncClientType)))\n+                  .in(Scopes.SINGLETON);\n \n          }\n \n@@ -260,9 +258,9 @@ public Properties getProperties() {\n    }\n \n    @SuppressWarnings(\"unchecked\")\n-   public RestContext<S, A> buildContext() {\n+   public <T extends RestContext<S, A>> T buildContext() {\n       Injector injector = buildInjector();\n-      return (RestContext<S, A>) injector.getInstance(Key.get(Types.newParameterizedType(\n-               RestContext.class, syncClientType, asyncClientType)));\n+      return (T) injector.getInstance(Key.get(Types.newParameterizedType(RestContext.class, syncClientType,\n+            asyncClientType)));\n    }\n }",
                "deletions": 24
            },
            {
                "sha": "89dbd58da30f0652a90c10d6102832fed3b17db5",
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestContextImpl.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -27,10 +27,10 @@\n import org.jclouds.lifecycle.Closer;\n import org.jclouds.logging.Logger;\n import org.jclouds.rest.RestContext;\n+import org.jclouds.rest.Utils;\n import org.jclouds.rest.annotations.ApiVersion;\n import org.jclouds.rest.annotations.Identity;\n import org.jclouds.rest.annotations.Provider;\n-import org.jclouds.rest.Utils;\n \n import com.google.inject.Injector;\n import com.google.inject.Key;\n@@ -55,9 +55,9 @@\n    private final Utils utils;\n \n    @Inject\n-   RestContextImpl(Closer closer, Utils utils, Injector injector, TypeLiteral<S> syncApi,\n-            TypeLiteral<A> asyncApi, @Provider URI endpoint, @Provider String provider,\n-            @Identity String identity, @ApiVersion String apiVersion) {\n+   protected RestContextImpl(Closer closer, Utils utils, Injector injector, TypeLiteral<S> syncApi,\n+         TypeLiteral<A> asyncApi, @Provider URI endpoint, @Provider String provider, @Identity String identity,\n+         @ApiVersion String apiVersion) {\n       this.utils = utils;\n       this.asyncApi = injector.getInstance(Key.get(asyncApi));\n       this.syncApi = injector.getInstance(Key.get(syncApi));\n@@ -168,7 +168,7 @@ public boolean equals(Object obj) {\n \n    @Override\n    public String toString() {\n-      return \"RestContextImpl [provider=\" + provider + \", endpoint=\" + endpoint + \", apiVersion=\"\n-               + apiVersion + \", identity=\" + identity + \"]\";\n+      return \"RestContextImpl [provider=\" + provider + \", endpoint=\" + endpoint + \", apiVersion=\" + apiVersion\n+            + \", identity=\" + identity + \"]\";\n    }\n }",
                "deletions": 6
            },
            {
                "sha": "0d6225f9b8faddef992520c5733457a1af9232ba",
                "filename": "core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/core/src/test/java/org/jclouds/util/HttpUtilsTest.java",
                "status": "modified",
                "changes": 54,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/util/HttpUtilsTest.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -18,11 +18,13 @@\n  */\n package org.jclouds.util;\n \n+import static com.google.common.base.Predicates.equalTo;\n import static org.easymock.EasyMock.expect;\n import static org.easymock.classextension.EasyMock.createMock;\n import static org.easymock.classextension.EasyMock.replay;\n import static org.jclouds.http.HttpUtils.changeSchemeHostAndPortTo;\n import static org.jclouds.http.HttpUtils.parseQueryToMap;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.testng.Assert.assertEquals;\n \n import java.net.URI;\n@@ -35,6 +37,8 @@\n import org.jboss.resteasy.specimpl.UriBuilderImpl;\n import org.jclouds.PerformanceTest;\n import org.jclouds.http.HttpRequest;\n+import org.jclouds.http.HttpResponse;\n+import org.jclouds.http.HttpResponseException;\n import org.jclouds.http.HttpUtils;\n import org.testng.annotations.Test;\n \n@@ -67,8 +71,8 @@ public void testParseBase64InForm() {\n       expects.put(\"Value\", \"dGVzdA==\");\n       expects.put(\"InstanceId\", \"1\");\n       assertEquals(\n-               expects,\n-               parseQueryToMap(\"Version=2010-06-15&Action=ModifyInstanceAttribute&Attribute=userData&Value=dGVzdA%3D%3D&InstanceId=1\"));\n+            expects,\n+            parseQueryToMap(\"Version=2010-06-15&Action=ModifyInstanceAttribute&Attribute=userData&Value=dGVzdA%3D%3D&InstanceId=1\"));\n    }\n \n    @Test\n@@ -77,24 +81,21 @@ public void testParseQueryToMapSingleParam() {\n       assert parsedMap.keySet().size() == 1 : \"Expected 1 key, found: \" + parsedMap.keySet().size();\n       assert parsedMap.keySet().contains(\"v\") : \"Expected v to be a part of the keys\";\n       String valueForV = Iterables.getOnlyElement(parsedMap.get(\"v\"));\n-      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \"\n-               + valueForV;\n+      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \" + valueForV;\n    }\n \n    @Test\n    public void testParseQueryToMapMultiParam() {\n       Multimap<String, String> parsedMap = parseQueryToMap(\"v=1.3&sig=123\");\n-      assert parsedMap.keySet().size() == 2 : \"Expected 2 keys, found: \"\n-               + parsedMap.keySet().size();\n+      assert parsedMap.keySet().size() == 2 : \"Expected 2 keys, found: \" + parsedMap.keySet().size();\n       assert parsedMap.keySet().contains(\"v\") : \"Expected v to be a part of the keys\";\n       assert parsedMap.keySet().contains(\"sig\") : \"Expected sig to be a part of the keys\";\n       String valueForV = Iterables.getOnlyElement(parsedMap.get(\"v\"));\n-      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \"\n-               + valueForV;\n+      assert valueForV.equals(\"1.3\") : \"Expected the value for 'v' to be '1.3', found: \" + valueForV;\n       String valueForSig = Iterables.getOnlyElement(parsedMap.get(\"sig\"));\n-      assert valueForSig.equals(\"123\") : \"Expected the value for 'v' to be '123', found: \"\n-               + valueForSig;\n+      assert valueForSig.equals(\"123\") : \"Expected the value for 'v' to be '123', found: \" + valueForSig;\n    }\n+\n    @Test\n    public void testChangeSchemeHostAndPortTo() {\n       HttpRequest request = createMock(HttpRequest.class);\n@@ -114,28 +115,24 @@ public void testIsEncoded() {\n \n    public void testNoDoubleEncode() {\n       assertEquals(HttpUtils.urlEncode(\"/read-tests/%73%6f%6d%65%20%66%69%6c%65\", '/'),\n-               \"/read-tests/%73%6f%6d%65%20%66%69%6c%65\");\n+            \"/read-tests/%73%6f%6d%65%20%66%69%6c%65\");\n       assertEquals(HttpUtils.urlEncode(\"/read-tests/ tep\", '/'), \"/read-tests/%20tep\");\n    }\n \n    public void testIBM() {\n       URI ibm = HttpUtils\n-               .createUri(\"https://www-180.ibm.com/cloud/enterprise/beta/ram/assetDetail/generalDetails.faces?guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n+            .createUri(\"https://www-180.ibm.com/cloud/enterprise/beta/ram/assetDetail/generalDetails.faces?guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n       assertEquals(ibm.getQuery(), \"guid={A31FF849-0E97-431A-0324-097385A46298}&v=1.2\");\n    }\n \n    public void testAtmos() {\n-      URI creds = HttpUtils\n-               .createUri(\"compute://domain/user:Base64==@azureblob/container-hyphen/prefix\");\n-      assertEquals(creds, URI\n-               .create(\"compute://domain%2Fuser:Base64%3D%3D@azureblob/container-hyphen/prefix\"));\n+      URI creds = HttpUtils.createUri(\"compute://domain/user:Base64==@azureblob/container-hyphen/prefix\");\n+      assertEquals(creds, URI.create(\"compute://domain%2Fuser:Base64%3D%3D@azureblob/container-hyphen/prefix\"));\n    }\n \n    public void testAzure() {\n-      URI creds = HttpUtils\n-               .createUri(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\");\n-      assertEquals(creds, URI\n-               .create(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\"));\n+      URI creds = HttpUtils.createUri(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\");\n+      assertEquals(creds, URI.create(\"compute://identity:Base64==@azureblob/container-hyphen/prefix\"));\n    }\n \n    public void testHosting() {\n@@ -181,13 +178,18 @@ public void testS3Space() {\n    }\n \n    public void testPercent() {\n-      URI creds = HttpUtils\n-               .createUri(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%.txt\");\n+      URI creds = HttpUtils.createUri(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%.txt\");\n \n-      assertEquals(\n-               creds,\n-               URI\n-                        .create(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%25.txt\"));\n+      assertEquals(creds, URI.create(\"https://jclouds.blob.core.windows.net/jclouds-getpath/write-tests/file1%25.txt\"));\n \n    }\n+\n+   public void test404() {\n+      Exception from = new HttpResponseException(\"message\", null, new HttpResponse(404, \"not found\", null));\n+      assertEquals(returnValueOnCodeOrNull(from, true, equalTo(404)), Boolean.TRUE);\n+   }\n+   public void testNullResponse() {\n+      Exception from = new HttpResponseException(\"message\", null, null);\n+      assertEquals(returnValueOnCodeOrNull(from, true, equalTo(404)), null);\n+   }\n }",
                "deletions": 26
            },
            {
                "sha": "9a354638672712d3875c93f92cf316477c74c5e0",
                "filename": "rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d884978a98262de0d52e92322611bdd2f7e2fe28/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d884978a98262de0d52e92322611bdd2f7e2fe28/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java",
                "status": "modified",
                "changes": 17,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/rackspace/src/main/java/org/jclouds/rackspace/cloudfiles/functions/ReturnTrueOn404FalseOn409.java?ref=d884978a98262de0d52e92322611bdd2f7e2fe28",
                "patch": "@@ -18,23 +18,20 @@\n  */\n package org.jclouds.rackspace.cloudfiles.functions;\n \n+import static com.google.common.base.Predicates.in;\n+import static com.google.common.collect.ImmutableSet.of;\n+import static org.jclouds.http.HttpUtils.returnValueOnCodeOrNull;\n import static org.jclouds.util.Utils.propagateOrNull;\n \n-import org.jclouds.http.HttpResponseException;\n+import javax.inject.Singleton;\n \n import com.google.common.base.Function;\n \n+@Singleton\n public class ReturnTrueOn404FalseOn409 implements Function<Exception, Boolean> {\n \n    public Boolean apply(Exception from) {\n-      if (from instanceof HttpResponseException) {\n-         HttpResponseException responseException = (HttpResponseException) from;\n-         if (responseException.getResponse().getStatusCode() == 404) {\n-            return true;\n-         } else if (responseException.getResponse().getStatusCode() == 409) {\n-            return false;\n-         }\n-      }\n-      return Boolean.class.cast(propagateOrNull(from));\n+      Boolean returnVal = returnValueOnCodeOrNull(from, true, in(of(404, 409)));\n+      return returnVal != null ? returnVal : Boolean.class.cast(propagateOrNull(from));\n    }\n }\n\\ No newline at end of file",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fixes a NPE in swift when maxResults is set to 0",
        "commit": "https://github.com/apache/jclouds/commit/ba4435040fb72b31d982344834884453a9bbd98c",
        "parent": "https://github.com/apache/jclouds/commit/0423ba802aeb8814114d36d958b11182d8acc68a",
        "bug_id": "jclouds_43",
        "file": [
            {
                "sha": "b2e65a3fe37b799e0c41e8d1424c3187b828a1fb",
                "filename": "apis/swift/src/main/java/org/jclouds/openstack/swift/functions/ParseObjectInfoListFromJsonResponse.java",
                "blob_url": "https://github.com/apache/jclouds/blob/ba4435040fb72b31d982344834884453a9bbd98c/apis/swift/src/main/java/org/jclouds/openstack/swift/functions/ParseObjectInfoListFromJsonResponse.java",
                "raw_url": "https://github.com/apache/jclouds/raw/ba4435040fb72b31d982344834884453a9bbd98c/apis/swift/src/main/java/org/jclouds/openstack/swift/functions/ParseObjectInfoListFromJsonResponse.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/swift/src/main/java/org/jclouds/openstack/swift/functions/ParseObjectInfoListFromJsonResponse.java?ref=ba4435040fb72b31d982344834884453a9bbd98c",
                "patch": "@@ -78,7 +78,10 @@ public ObjectInfo apply(ObjectInfoImpl from) {\n                   }\n                }));\n          boolean truncated = options.getMaxResults() == returnVal.size();\n-         String marker = truncated ? returnVal.last().getName() : null;\n+         String marker = null;\n+         if (truncated && !returnVal.isEmpty()) {\n+            marker = returnVal.last().getName();\n+         }\n          return new PageSetImpl<ObjectInfo>(returnVal, marker);\n       } catch (IOException e) {\n          throw new RuntimeException(\"problem reading response from request: \" + request, e);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-317: Fix NPE when ComputeService.listNodes()\n\nFollow-up to 222779b",
        "commit": "https://github.com/apache/jclouds/commit/84e0b91179be6921ef0ce7be63934fe4c374f690",
        "parent": "https://github.com/apache/jclouds/commit/244e194c722ffa3fc3a55d921b8f3e5b5671a422",
        "bug_id": "jclouds_44",
        "file": [
            {
                "sha": "cd00ce108243df49c3f440ec0c45d74fdfa1979a",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/config/NovaComputeServiceContextModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/84e0b91179be6921ef0ce7be63934fe4c374f690/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/config/NovaComputeServiceContextModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/84e0b91179be6921ef0ce7be63934fe4c374f690/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/config/NovaComputeServiceContextModule.java",
                "status": "modified",
                "changes": 39,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/compute/config/NovaComputeServiceContextModule.java?ref=84e0b91179be6921ef0ce7be63934fe4c374f690",
                "patch": "@@ -236,21 +236,30 @@ public String apply(Location arg0) {\n \n    @VisibleForTesting\n    public static final Map<Server.Status, NodeMetadata.Status> toPortableNodeStatus = ImmutableMap\n-            .<Server.Status, NodeMetadata.Status> builder().put(Server.Status.ACTIVE, NodeMetadata.Status.RUNNING)//\n-            .put(Server.Status.SUSPENDED, NodeMetadata.Status.SUSPENDED)//\n-            .put(Server.Status.DELETED, NodeMetadata.Status.TERMINATED)//\n-            .put(Server.Status.PAUSED, NodeMetadata.Status.SUSPENDED)//\n-            .put(Server.Status.RESIZE, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.VERIFY_RESIZE, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.REVERT_RESIZE, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.BUILD, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.PASSWORD, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.REBUILD, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.ERROR, NodeMetadata.Status.ERROR)//\n-            .put(Server.Status.REBOOT, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.HARD_REBOOT, NodeMetadata.Status.PENDING)//\n-            .put(Server.Status.UNKNOWN, NodeMetadata.Status.UNRECOGNIZED)//\n-            .put(Server.Status.UNRECOGNIZED, NodeMetadata.Status.UNRECOGNIZED).build();\n+            .<Server.Status, NodeMetadata.Status> builder()\n+            .put(Server.Status.ACTIVE, NodeMetadata.Status.RUNNING)\n+            .put(Server.Status.BUILD, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.DELETED, NodeMetadata.Status.TERMINATED)\n+            .put(Server.Status.ERROR, NodeMetadata.Status.ERROR)\n+            .put(Server.Status.HARD_REBOOT, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.MIGRATING, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.PASSWORD, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.PAUSED, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.REBOOT, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.REBUILD, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.RESCUE, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.RESIZE, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.REVERT_RESIZE, NodeMetadata.Status.PENDING)\n+            .put(Server.Status.SHELVED, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.SHELVED_OFFLOADED, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.SHUTOFF, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.SOFT_DELETED, NodeMetadata.Status.TERMINATED)\n+            .put(Server.Status.STOPPED, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.SUSPENDED, NodeMetadata.Status.SUSPENDED)\n+            .put(Server.Status.UNKNOWN, NodeMetadata.Status.UNRECOGNIZED)\n+            .put(Server.Status.UNRECOGNIZED, NodeMetadata.Status.UNRECOGNIZED)\n+            .put(Server.Status.VERIFY_RESIZE, NodeMetadata.Status.PENDING)\n+            .build();\n \n    @Singleton\n    @Provides",
                "deletions": 15
            },
            {
                "sha": "72b82d5023dceddb797c02ef7bc7235ddfb78a17",
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/84e0b91179be6921ef0ce7be63934fe4c374f690/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/84e0b91179be6921ef0ce7be63934fe4c374f690/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/functions/ServerInZoneToNodeMetadataTest.java?ref=84e0b91179be6921ef0ce7be63934fe4c374f690",
                "patch": "@@ -196,7 +196,14 @@ public void testAlternateAccessIPs() {\n       assertEquals(convertedNodeMetadata.getPublicAddresses(), ImmutableSet.of(\"67.23.10.132\", \"67.23.10.131\", \"76.32.1.231\"));\n    }\n \n-      // TODO: clean up this syntax\n+   @Test\n+   public void testPortableNodeStatusNotNull() {\n+      for (Server.Status serverStatus: Server.Status.values()) {\n+         assertNotNull(NovaComputeServiceContextModule.toPortableNodeStatus.get(serverStatus));\n+      }\n+   }\n+\n+    // TODO: clean up this syntax\n    private void checkHardwareAndImageStatus(Hardware expectedHardware, Hardware existingHardware,\n          String expectedImageId, OperatingSystem expectedOs, Image existingImage) {\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Options use boolean primitive instead of object\n\nThe Boolean object makes passing null value possible, which would cause NPE.",
        "commit": "https://github.com/apache/jclouds/commit/be6ce141b661d7f33c51f149efc58ef9a2db6f74",
        "parent": "https://github.com/apache/jclouds/commit/867b7f52e4dc7a0c6b45203c3f679fe5c7be0b58",
        "bug_id": "jclouds_45",
        "file": [
            {
                "sha": "3c21865621ba48e38c1f795a91239e7a5654b8a8",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java",
                "status": "modified",
                "changes": 30,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/AttachOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -25,35 +25,35 @@\n     *               When TTY is disabled, the stream is multiplexed to separate stdout and stderr.\n     * @return AttachOptions\n     */\n-   public AttachOptions stream(Boolean stream) {\n-      this.queryParameters.put(\"stream\", stream.toString());\n+   public AttachOptions stream(boolean stream) {\n+      this.queryParameters.put(\"stream\", String.valueOf(stream));\n       return this;\n    }\n \n    /**\n     * @param logs require logs to be attached. Default false.\n     * @return AttachOptions\n     */\n-   public AttachOptions logs(Boolean logs) {\n-      this.queryParameters.put(\"logs\", logs.toString());\n+   public AttachOptions logs(boolean logs) {\n+      this.queryParameters.put(\"logs\", String.valueOf(logs));\n       return this;\n    }\n \n    /**\n     * @param stdin if stream=true, attach to stdin. Default false\n     * @return AttachOptions\n     */\n-   public AttachOptions stdin(Boolean stdin) {\n-      this.queryParameters.put(\"stdin\", stdin.toString());\n+   public AttachOptions stdin(boolean stdin) {\n+      this.queryParameters.put(\"stdin\", String.valueOf(stdin));\n       return this;\n    }\n \n    /**\n     * @param stdout if logs=true, return stdout log, if stream=true, attach to stdout. Default false\n     * @return\n     */\n-   public AttachOptions stdout(Boolean stdout) {\n-      this.queryParameters.put(\"stdout\", stdout.toString());\n+   public AttachOptions stdout(boolean stdout) {\n+      this.queryParameters.put(\"stdout\", String.valueOf(stdout));\n       return this;\n    }\n \n@@ -62,8 +62,8 @@ public AttachOptions stdout(Boolean stdout) {\n     * @param stderr if logs=true, return stderr log, if stream=true, attach to stderr. Default false\n     * @return\n     */\n-   public AttachOptions stderr(Boolean stderr) {\n-      this.queryParameters.put(\"stderr\", stderr.toString());\n+   public AttachOptions stderr(boolean stderr) {\n+      this.queryParameters.put(\"stderr\", String.valueOf(stderr));\n       return this;\n    }\n \n@@ -72,39 +72,39 @@ public AttachOptions stderr(Boolean stderr) {\n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stream\n        */\n-      public static AttachOptions stream(Boolean stream) {\n+      public static AttachOptions stream(boolean stream) {\n          AttachOptions options = new AttachOptions();\n          return options.stream(stream);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#logs(Boolean)\n        */\n-      public static AttachOptions logs(Boolean logs) {\n+      public static AttachOptions logs(boolean logs) {\n          AttachOptions options = new AttachOptions();\n          return options.logs(logs);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stdin(Boolean)\n        */\n-      public static AttachOptions stdin(Boolean stdin) {\n+      public static AttachOptions stdin(boolean stdin) {\n          AttachOptions options = new AttachOptions();\n          return options.stdin(stdin);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stdout(Boolean)\n        */\n-      public static AttachOptions stdout(Boolean stdout) {\n+      public static AttachOptions stdout(boolean stdout) {\n          AttachOptions options = new AttachOptions();\n          return options.stdout(stdout);\n       }\n \n       /**\n        * @see org.jclouds.docker.options.AttachOptions#stderr(Boolean)\n        */\n-      public static AttachOptions stderr(Boolean stderr) {\n+      public static AttachOptions stderr(boolean stderr) {\n          AttachOptions options = new AttachOptions();\n          return options.stderr(stderr);\n       }",
                "deletions": 15
            },
            {
                "sha": "6653a56c3e396a5db30427908774f24d3e3ce809",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/BuildOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -25,13 +25,13 @@ public BuildOptions tag(String tag) {\n       return this;\n    }\n \n-   public BuildOptions verbose(Boolean verbose) {\n-      this.queryParameters.put(\"verbose\", verbose.toString());\n+   public BuildOptions verbose(boolean verbose) {\n+      this.queryParameters.put(\"verbose\", String.valueOf(verbose));\n       return this;\n    }\n \n-   public BuildOptions nocache(Boolean nocache) {\n-      this.queryParameters.put(\"nocache\", nocache.toString());\n+   public BuildOptions nocache(boolean nocache) {\n+      this.queryParameters.put(\"nocache\", String.valueOf(nocache));\n       return this;\n    }\n \n@@ -48,15 +48,15 @@ public static BuildOptions tag(String tag) {\n       /**\n        * @see BuildOptions#verbose(Boolean)\n        */\n-      public static BuildOptions verbose(Boolean verbose) {\n+      public static BuildOptions verbose(boolean verbose) {\n          BuildOptions options = new BuildOptions();\n          return options.verbose(verbose);\n       }\n \n       /**\n        * @see BuildOptions#nocache(Boolean)\n        */\n-      public static BuildOptions nocache(Boolean nocache) {\n+      public static BuildOptions nocache(boolean nocache) {\n          BuildOptions options = new BuildOptions();\n          return options.nocache(nocache);\n       }",
                "deletions": 6
            },
            {
                "sha": "c284fd9a10a58597ea76c393472ae52b041fb8fb",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/DeleteImageOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -20,13 +20,13 @@\n \n public class DeleteImageOptions extends BaseHttpRequestOptions {\n \n-   public DeleteImageOptions force(Boolean force) {\n-      this.queryParameters.put(\"force\", force.toString());\n+   public DeleteImageOptions force(boolean force) {\n+      this.queryParameters.put(\"force\", String.valueOf(force));\n       return this;\n    }\n \n-   public DeleteImageOptions noPrune(Boolean noPrune) {\n-      this.queryParameters.put(\"noPrune\", noPrune.toString());\n+   public DeleteImageOptions noPrune(boolean noPrune) {\n+      this.queryParameters.put(\"noPrune\", String.valueOf(noPrune));\n       return this;\n    }\n \n@@ -35,15 +35,15 @@ public DeleteImageOptions noPrune(Boolean noPrune) {\n       /**\n        * @see DeleteImageOptions#force\n        */\n-      public static DeleteImageOptions force(Boolean force) {\n+      public static DeleteImageOptions force(boolean force) {\n          DeleteImageOptions options = new DeleteImageOptions();\n          return options.force(force);\n       }\n \n       /**\n        * @see DeleteImageOptions#noPrune\n        */\n-      public static DeleteImageOptions noPrune(Boolean noPrune) {\n+      public static DeleteImageOptions noPrune(boolean noPrune) {\n          DeleteImageOptions options = new DeleteImageOptions();\n          return options.noPrune(noPrune);\n       }",
                "deletions": 6
            },
            {
                "sha": "173f6fba86b7bf357753baabd48549e432aca23c",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/ListContainerOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -20,8 +20,8 @@\n \n public class ListContainerOptions extends BaseHttpRequestOptions {\n \n-   public ListContainerOptions all(Boolean all) {\n-      this.queryParameters.put(\"all\", all.toString());\n+   public ListContainerOptions all(boolean all) {\n+      this.queryParameters.put(\"all\", String.valueOf(all));\n       return this;\n    }\n \n@@ -50,7 +50,7 @@ public ListContainerOptions size(Integer size) {\n       /**\n        * @see ListContainerOptions#all\n        */\n-      public static ListContainerOptions all(Boolean all) {\n+      public static ListContainerOptions all(boolean all) {\n          ListContainerOptions options = new ListContainerOptions();\n          return options.all(all);\n       }",
                "deletions": 3
            },
            {
                "sha": "f4704d0a9d24d0e483f25426ed9c88846a85f872",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/ListImageOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -20,16 +20,16 @@\n \n public class ListImageOptions extends BaseHttpRequestOptions {\n \n-   public ListImageOptions all(Boolean all) {\n-      this.queryParameters.put(\"all\", all.toString());\n+   public ListImageOptions all(boolean all) {\n+      this.queryParameters.put(\"all\", String.valueOf(all));\n       return this;\n    }\n \n    public static class Builder {\n       /**\n        * @see ListImageOptions#all\n        */\n-      public static ListImageOptions all(Boolean all) {\n+      public static ListImageOptions all(boolean all) {\n          ListImageOptions options = new ListImageOptions();\n          return options.all(all);\n       }",
                "deletions": 3
            },
            {
                "sha": "f4a67955b8f748bf3944b527ec72eea150cb6e28",
                "filename": "apis/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/be6ce141b661d7f33c51f149efc58ef9a2db6f74/apis/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/docker/src/main/java/org/jclouds/docker/options/RemoveContainerOptions.java?ref=be6ce141b661d7f33c51f149efc58ef9a2db6f74",
                "patch": "@@ -20,13 +20,13 @@\n \n public class RemoveContainerOptions extends BaseHttpRequestOptions {\n \n-   public RemoveContainerOptions verbose(Boolean verbose) {\n-      this.queryParameters.put(\"verbose\", verbose.toString());\n+   public RemoveContainerOptions verbose(boolean verbose) {\n+      this.queryParameters.put(\"verbose\", String.valueOf(verbose));\n       return this;\n    }\n \n-   public RemoveContainerOptions force(Boolean force) {\n-      this.queryParameters.put(\"force\", force.toString());\n+   public RemoveContainerOptions force(boolean force) {\n+      this.queryParameters.put(\"force\", String.valueOf(force));\n       return this;\n    }\n    \n@@ -36,32 +36,32 @@ public RemoveContainerOptions force(Boolean force) {\n     * @param volume If set to true the volume associated to the container will be removed. \n     * Otherwise it will not be removed.\n     */\n-   public RemoveContainerOptions volume(Boolean volume) {\n-       this.queryParameters.put(\"v\", volume.toString());\n+   public RemoveContainerOptions volume(boolean volume) {\n+       this.queryParameters.put(\"v\", String.valueOf(volume));\n        return this;\n     }\n \n    public static class Builder {\n       /**\n        * @see RemoveContainerOptions#verbose\n        */\n-      public static RemoveContainerOptions verbose(Boolean verbose) {\n+      public static RemoveContainerOptions verbose(boolean verbose) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.verbose(verbose);\n       }\n \n       /**\n        * @see RemoveContainerOptions#force\n        */\n-      public static RemoveContainerOptions force(Boolean force) {\n+      public static RemoveContainerOptions force(boolean force) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.force(force);\n       }\n       \n       /**\n        * @see RemoveContainerOptions#volume\n        */\n-      public static RemoveContainerOptions volume(Boolean volume) {\n+      public static RemoveContainerOptions volume(boolean volume) {\n          RemoveContainerOptions options = new RemoveContainerOptions();\n          return options.volume(volume);\n       }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #1182 from aplowe/master\n\nopenstack-nova: NPE in SecurityGroupApi.delete()",
        "commit": "https://github.com/apache/jclouds/commit/f6990c60c9785f3a66f7a56b08e51fef115edfea",
        "parent": "https://github.com/apache/jclouds/commit/4fbb70be7b6ced4bc03dd0f4293cc24f9fe7017b",
        "bug_id": "jclouds_46",
        "file": [
            {
                "sha": "e7f0a56af93b9ea937a165ae9334bd129c6d0ea9",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "blob_url": "https://github.com/apache/jclouds/blob/f6990c60c9785f3a66f7a56b08e51fef115edfea/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "raw_url": "https://github.com/apache/jclouds/raw/f6990c60c9785f3a66f7a56b08e51fef115edfea/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v2_0/extensions/SecurityGroupAsyncApi.java?ref=f6990c60c9785f3a66f7a56b08e51fef115edfea",
                "patch": "@@ -102,7 +102,7 @@\n     */\n    @DELETE\n    @Path(\"/os-security-groups/{id}\")\n-   @Fallback(NullOnNotFoundOr404.class)\n+   @Fallback(FalseOnNotFoundOr404.class)\n    @Consumes(MediaType.APPLICATION_JSON)\n    ListenableFuture<Boolean> delete(@PathParam(\"id\") String id);\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge branch 'issue-406' of https://github.com/mattiasholmqvist/jclouds\n\n* 'issue-406' of https://github.com/mattiasholmqvist/jclouds:\n  Fixing issue 406. Handling the NullPointerException (NullOutputException) from MapMaker$ComputingMapAdapter.get() call.",
        "commit": "https://github.com/apache/jclouds/commit/fa0ed8664d4d8d5d78803f96dffd6218c91fde8a",
        "parent": "https://github.com/apache/jclouds/commit/ea3b75874e72b5d7f38b7e4af62df154c8e26a0c",
        "bug_id": "jclouds_47",
        "file": [
            {
                "sha": "c3a9daaf1598fe1d2c707586f6547674fbc44bc2",
                "filename": "aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fa0ed8664d4d8d5d78803f96dffd6218c91fde8a/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fa0ed8664d4d8d5d78803f96dffd6218c91fde8a/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java",
                "status": "modified",
                "changes": 19,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/main/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadata.java?ref=fa0ed8664d4d8d5d78803f96dffd6218c91fde8a",
                "patch": "@@ -101,9 +101,20 @@ public NodeMetadata apply(RunningInstance instance) {\n       builder.imageId(instance.getRegion() + \"/\" + instance.getImageId());\n \n       // extract the operating system from the image\n-      Image image = instanceToImage.get(new RegionAndName(instance.getRegion(), instance.getImageId()));\n-      if (image != null)\n-         builder.operatingSystem(image.getOperatingSystem());\n+      RegionAndName regionAndName = new RegionAndName(instance.getRegion(), instance.getImageId());\n+      try {\n+         Image image = instanceToImage.get(regionAndName);\n+          if (image != null)\n+              builder.operatingSystem(image.getOperatingSystem());\n+      }\n+      catch (NullPointerException e) {\n+          // The instanceToImage Map may throw NullPointerException (actually subclass NullOutputException) if the\n+          // computing Function returns a null value.\n+          //\n+          // See the following for more information:\n+          // MapMaker.makeComputingMap()\n+          // RegionAndIdToImage.apply()\n+      }\n \n       return builder.build();\n    }\n@@ -209,4 +220,4 @@ public boolean apply(Location input) {\n       }\n    }\n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "a0044b6b73e894c342be51fe35c0410fc9320a86",
                "filename": "aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fa0ed8664d4d8d5d78803f96dffd6218c91fde8a/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fa0ed8664d4d8d5d78803f96dffd6218c91fde8a/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java",
                "status": "modified",
                "changes": 45,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/test/java/org/jclouds/aws/ec2/compute/functions/RunningInstanceToNodeMetadataTest.java?ref=fa0ed8664d4d8d5d78803f96dffd6218c91fde8a",
                "patch": "@@ -51,6 +51,9 @@\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n import com.google.common.collect.Maps;\n+import com.google.common.collect.MapMaker;\n+\n+import javax.annotation.Nullable;\n \n /**\n  * @author Adrian Cole\n@@ -140,15 +143,44 @@ public void testApplyWhereTagDoesntMatchAndImageHardwareAndLocationFound() throw\n                \"i-9slweygo\").location(provider).build());\n    }\n \n+   @Test\n+   public void testHandleMissingAMIs() {\n+\n+      // Handle the case when the installed AMI no longer can be found in AWS.\n+\n+      // Create a null-returning function to simulate that the AMI can't be found.\n+      Function<RegionAndName, Image> nullReturningFunction = new Function<RegionAndName, Image>() {\n+\n+         @Override\n+         public Image apply(@Nullable RegionAndName from) {\n+            return null;\n+         }\n+      };\n+      Map<RegionAndName, Image> instanceToImage = new MapMaker().makeComputingMap(nullReturningFunction);\n+\n+      RunningInstanceToNodeMetadata parser = createNodeParser(ImmutableSet.of(m1_small().build()), ImmutableSet\n+              .of(provider), ImmutableMap\n+              .<String, Credentials>of(), EC2ComputeServiceDependenciesModule.instanceToNodeState, instanceToImage);\n+\n+      RunningInstance server = firstInstanceFromResource(\"/ec2/describe_instances_nova.xml\");\n+\n+      assertEquals(parser.apply(server), new NodeMetadataBuilder().state(NodeState.TERMINATED).privateAddresses(\n+              ImmutableSet.of(\"10.128.207.5\")).tag(\"NOTAG-i-9slweygo\").imageId(\"us-east-1/ami-25CB1213\").id(\n+              \"us-east-1/i-9slweygo\").providerId(\"i-9slweygo\").hardware(m1_small().build()).location(\n+              provider).build());\n+   }\n+\n+\n    protected RunningInstance firstInstanceFromResource(String resource) {\n       RunningInstance server = Iterables.get(Iterables.get(DescribeInstancesResponseHandlerTest\n-               .parseRunningInstances(resource), 0), 0);\n+              .parseRunningInstances(resource), 0), 0);\n       return server;\n    }\n \n    protected RunningInstanceToNodeMetadata createNodeParser(final ImmutableSet<Hardware> hardware,\n-            final ImmutableSet<Location> locations, Set<org.jclouds.compute.domain.Image> images,\n-            Map<String, Credentials> credentialStore) {\n+                                                            final ImmutableSet<Location> locations,\n+                                                            Set<org.jclouds.compute.domain.Image> images,\n+                                                            Map<String, Credentials> credentialStore) {\n       Map<InstanceState, NodeState> instanceToNodeState = EC2ComputeServiceDependenciesModule.instanceToNodeState;\n \n       Map<RegionAndName, Image> instanceToImage = Maps.uniqueIndex(images, new Function<Image, RegionAndName>() {\n@@ -159,6 +191,13 @@ public RegionAndName apply(Image from) {\n          }\n \n       });\n+\n+      return createNodeParser(hardware, locations, credentialStore, instanceToNodeState, instanceToImage);\n+   }\n+\n+   private RunningInstanceToNodeMetadata createNodeParser(final ImmutableSet<Hardware> hardware, final\n+   ImmutableSet<Location> locations, Map<String, Credentials> credentialStore, Map<InstanceState, NodeState>\n+           instanceToNodeState, Map<RegionAndName, Image> instanceToImage) {\n       Supplier<Set<? extends Location>> locationSupplier = new Supplier<Set<? extends Location>>() {\n \n          @Override",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Avoid NPE in case value is null but contains return true.",
        "commit": "https://github.com/apache/jclouds/commit/0c38cd584af0956d0e29c3415bde504c11d26ba5",
        "parent": "https://github.com/apache/jclouds/commit/405ca5648a0e4d8fb9bb81ba2b8d52c12ee9e0d1",
        "bug_id": "jclouds_48",
        "file": [
            {
                "sha": "f1c8767adba5d21d8e48050d6c4486c1a9ffee3a",
                "filename": "core/src/main/java/org/jclouds/collect/InputSupplierMap.java",
                "blob_url": "https://github.com/apache/jclouds/blob/0c38cd584af0956d0e29c3415bde504c11d26ba5/core/src/main/java/org/jclouds/collect/InputSupplierMap.java",
                "raw_url": "https://github.com/apache/jclouds/raw/0c38cd584af0956d0e29c3415bde504c11d26ba5/core/src/main/java/org/jclouds/collect/InputSupplierMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/collect/InputSupplierMap.java?ref=0c38cd584af0956d0e29c3415bde504c11d26ba5",
                "patch": "@@ -68,7 +68,7 @@ public boolean containsKey(Object key) {\n    public V get(Object key) {\n       InputSupplier<V> value = toMap.get(key);\n       try {\n-         return (value != null || toMap.containsKey(key)) ? value.getInput() : null;\n+         return value != null ? value.getInput() : null;\n       } catch (IOException e) {\n          throw Throwables.propagate(e);\n       }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Fixed a possible NPE when ServiceFunctionLoader finds no OSGi service for a function.",
        "commit": "https://github.com/apache/jclouds/commit/758e01a4d278898f103747d3e3eb2005f407551a",
        "parent": "https://github.com/apache/jclouds/commit/0666a6fbdebbe84a1fde3e0f001f68bb32d94e58",
        "bug_id": "jclouds_49",
        "file": [
            {
                "sha": "584b1eaac78f1c6260e0875592e49985c9270680",
                "filename": "scriptbuilder/src/main/java/org/jclouds/scriptbuilder/functionloader/osgi/ServiceFunctionLoader.java",
                "blob_url": "https://github.com/apache/jclouds/blob/758e01a4d278898f103747d3e3eb2005f407551a/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/functionloader/osgi/ServiceFunctionLoader.java",
                "raw_url": "https://github.com/apache/jclouds/raw/758e01a4d278898f103747d3e3eb2005f407551a/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/functionloader/osgi/ServiceFunctionLoader.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/scriptbuilder/src/main/java/org/jclouds/scriptbuilder/functionloader/osgi/ServiceFunctionLoader.java?ref=758e01a4d278898f103747d3e3eb2005f407551a",
                "patch": "@@ -55,13 +55,15 @@ public String loadFunction(String function, OsFamily family) throws FunctionNotF\n       String filter = String.format(\"(function=*%s.%s*)\", function, ShellToken.SH.to(family));\n       try {\n          references = bundleContext.getServiceReferences(FunctionLoader.class.getName(), filter);\n-         for (ServiceReference reference : references) {\n+        if (references != null) {\n+          for (ServiceReference reference : references) {\n             FunctionLoader loader = (FunctionLoader) bundleContext.getService(reference);\n             String f = loader.loadFunction(function, family);\n             if (!Strings.isNullOrEmpty(f)) {\n-               return f;\n+              return f;\n             }\n-         }\n+          }\n+        }\n       } catch (InvalidSyntaxException e) {\n          throw new FunctionNotFoundException(function, family, e);\n       } finally {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #704 from dkoper/master\n\ntested NPE goes away with FGCP expect test",
        "commit": "https://github.com/apache/jclouds/commit/6cdad28359d9ccc32c83de12f00f309b92e39489",
        "parent": "https://github.com/apache/jclouds/commit/c47950c9abb6c8e60d22f61ad371cfa24a1a4b79",
        "bug_id": "jclouds_50",
        "file": [
            {
                "sha": "e29dede0ebb0f0ee12a6194a26a040a67cf2e0ea",
                "filename": "core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6cdad28359d9ccc32c83de12f00f309b92e39489/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/internal/RestAnnotationProcessor.java?ref=6cdad28359d9ccc32c83de12f00f309b92e39489",
                "patch": "@@ -1294,14 +1294,16 @@ else if (args[i] instanceof PayloadEnclosing)\n          for (Annotation key : entry.getValue()) {\n             Set<Annotation> extractors = indexToParamExtractor.get(entry.getKey());\n             String paramKey = ((QueryParam) key).value();\n-            String paramValue;\n+            Object paramValue;\n             if (extractors != null && extractors.size() > 0) {\n                ParamParser extractor = (ParamParser) extractors.iterator().next();\n                paramValue = injector.getInstance(extractor.value()).apply(args[entry.getKey()]);\n             } else {\n-               paramValue = args[entry.getKey()].toString();\n+               paramValue = args[entry.getKey()];\n+            }\n+            if (paramValue != null) {\n+                queryParamValues.put(paramKey, paramValue.toString());\n             }\n-            queryParamValues.put(paramKey, paramValue);\n          }\n       }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 942: NPE + Missing data when calling getVAppExtendedInfo on Terremark eCloud",
        "commit": "https://github.com/apache/jclouds/commit/6bd8f154fc2ffed7cb73de93666a21e6362347d5",
        "parent": "https://github.com/apache/jclouds/commit/c50edefef6409e00156e9a90e177fc1e65937dce",
        "bug_id": "jclouds_51",
        "file": [
            {
                "sha": "72211f62fa6af9bb4c47488f66ab1ef908afb292",
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java",
                "status": "added",
                "changes": 102,
                "additions": 102,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/ComputePoolReference.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -0,0 +1,102 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.trmk.vcloud_0_8.domain;\n+\n+import static com.google.common.base.Objects.equal;\n+\n+import java.net.URI;\n+\n+import com.google.common.base.Objects;\n+\n+/**\n+ * @author Adrian Cole\n+ */\n+public class ComputePoolReference implements Comparable<ComputePoolReference> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromComputePoolReference(this);\n+   }\n+\n+   public static class Builder {\n+      private URI href;\n+      private String name;\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public ComputePoolReference build() {\n+         return new ComputePoolReference(href, name);\n+      }\n+\n+      public Builder fromComputePoolReference(ComputePoolReference in) {\n+         return href(in.getHref()).name(in.getName());\n+      }\n+\n+   }\n+\n+   private final URI href;\n+   private final String name;\n+\n+   public ComputePoolReference(URI href, String name) {\n+      this.href = href;\n+      this.name = name;\n+   }\n+\n+   public int compareTo(ComputePoolReference that) {\n+      return (this == that) ? 0 : getHref().compareTo(that.getHref());\n+   }\n+\n+   public URI getHref() {\n+      return href;\n+   }\n+\n+   public String getName() {\n+      return name;\n+   }\n+\n+   @Override\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      ComputePoolReference that = ComputePoolReference.class.cast(o);\n+      return equal(this.href, that.href) && equal(this.name, that.name);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(href, name);\n+   }\n+\n+   @Override\n+   public String toString() {\n+      return Objects.toStringHelper(\"\").add(\"href\", href).add(\"name\", name).toString();\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "1508fb9c09d96c27033735d28a2b440e55363e73",
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java",
                "status": "modified",
                "changes": 85,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/NetworkAdapter.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -18,10 +18,52 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n+import com.google.common.base.Objects;\n+\n /**\n  * @author Seshu Pasam\n  */\n public class NetworkAdapter implements Comparable<NetworkAdapter> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromNetworkAdapter(this);\n+   }\n+\n+   public static class Builder {\n+      private String macAddress;\n+      private String name;\n+      private Subnet subnet;\n+\n+      public Builder macAddress(String macAddress) {\n+         this.macAddress = macAddress;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Builder subnet(Subnet subnet) {\n+         this.subnet = subnet;\n+         return this;\n+      }\n+\n+      public NetworkAdapter build() {\n+         return new NetworkAdapter(macAddress, name, subnet);\n+      }\n+\n+      public Builder fromNetworkAdapter(NetworkAdapter in) {\n+         return macAddress(in.getMacAddress()).name(in.getName()).subnet(in.getSubnet());\n+      }\n+\n+   }\n+\n    private final String macAddress;\n    private final String name;\n    private final Subnet subnet;\n@@ -49,44 +91,23 @@ public Subnet getSubnet() {\n    }\n \n    @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((macAddress== null) ? 0 : macAddress.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((subnet == null) ? 0 : subnet.hashCode());\n-      return result;\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      NetworkAdapter that = NetworkAdapter.class.cast(o);\n+      return equal(this.macAddress, that.macAddress) && equal(this.name, that.name) && equal(this.subnet, that.subnet);\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      NetworkAdapter other = (NetworkAdapter) obj;\n-      if (macAddress == null) {\n-         if (other.macAddress != null)\n-            return false;\n-      } else if (!macAddress.equals(other.macAddress))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (subnet == null) {\n-         if (other.subnet != null)\n-            return false;\n-      } else if (!subnet.equals(other.subnet))\n-         return false;\n-      return true;\n+   public int hashCode() {\n+      return Objects.hashCode(macAddress, name, subnet);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[MAC address=\" + macAddress + \", name=\" + name + \", subnet=\" + subnet + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"macAddress\", macAddress).add(\"name\", name).add(\"subnet\", subnet)\n+               .toString();\n    }\n }",
                "deletions": 32
            },
            {
                "sha": "8bb466c26e3b147c8082967e099b32f8cc7451d9",
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java",
                "status": "modified",
                "changes": 72,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/Subnet.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -18,12 +18,48 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n import java.net.URI;\n \n+import com.google.common.base.Objects;\n+\n /**\n  * @author Seshu Pasam\n  */\n public class Subnet implements Comparable<Subnet> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromSubnet(this);\n+   }\n+\n+   public static class Builder {\n+      private URI href;\n+      private String name;\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Subnet build() {\n+         return new Subnet(href, name);\n+      }\n+\n+      public Builder fromSubnet(Subnet in) {\n+         return href(in.getHref()).name(in.getName());\n+      }\n+\n+   }\n+\n    private final URI href;\n    private final String name;\n \n@@ -45,38 +81,22 @@ public String getName() {\n    }\n \n    @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((href == null) ? 0 : href.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      return result;\n+   public boolean equals(Object o) {\n+      if (this == o)\n+         return true;\n+      if (o == null || getClass() != o.getClass())\n+         return false;\n+      Subnet that = Subnet.class.cast(o);\n+      return equal(this.href, that.href) && equal(this.name, that.name);\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n-         return true;\n-      if (obj == null)\n-         return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      Subnet other = (Subnet) obj;\n-      if (href == null) {\n-         if (other.href != null)\n-            return false;\n-      } else if (!href.equals(other.href))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      return true;\n+   public int hashCode() {\n+      return Objects.hashCode(href, name);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[href=\" + href + \", name=\" + name + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"href\", href).add(\"name\", name).toString();\n    }\n }",
                "deletions": 26
            },
            {
                "sha": "8e03862359b59d2d5b4460a848ba7b45d5e70521",
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java",
                "status": "modified",
                "changes": 154,
                "additions": 101,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/domain/VAppExtendedInfo.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -2,7 +2,7 @@\n  * Licensed to jclouds, Inc. (jclouds) under one or more\n  * contributor license agreements.  See the NOTICE file\n  * distributed with this work for additional information\n- * regarding copyright ownership.  jclouds licenses this file\n+ * regarding copyright ownershhref.  jclouds licenses this file\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n@@ -18,28 +18,103 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.domain;\n \n+import static com.google.common.base.Objects.equal;\n+\n import java.net.URI;\n import java.util.List;\n \n+import com.google.common.base.Objects;\n+import com.google.common.collect.Lists;\n+\n /**\n- * @author Seshu Pasam\n+ * @author Seshu Pasam, Adrian Cole\n  */\n public class VAppExtendedInfo implements Comparable<VAppExtendedInfo> {\n+   public static Builder builder() {\n+      return new Builder();\n+   }\n+\n+   public Builder toBuilder() {\n+      return builder().fromVAppExtendedInfo(this);\n+   }\n+\n+   public static class Builder {\n+      private String id;\n+      private URI href;\n+      private String name;\n+      private String longName;\n+      private List<String> tags = Lists.newArrayList();\n+      private List<NetworkAdapter> networkAdapters = Lists.newArrayList();\n+      private ComputePoolReference computePoolReference;\n+\n+      public Builder id(String id) {\n+         this.id = id;\n+         return this;\n+      }\n+\n+      public Builder href(URI href) {\n+         this.href = href;\n+         return this;\n+      }\n+\n+      public Builder name(String name) {\n+         this.name = name;\n+         return this;\n+      }\n+\n+      public Builder longName(String longName) {\n+         this.longName = longName;\n+         return this;\n+      }\n+\n+      public Builder tags(List<String> tags) {\n+         this.tags = tags;\n+         return this;\n+      }\n+\n+      public Builder networkAdapters(List<NetworkAdapter> networkAdapters) {\n+         this.networkAdapters = networkAdapters;\n+         return this;\n+      }\n+\n+      public Builder networkAdapter(NetworkAdapter networkAdapter) {\n+         this.networkAdapters.add(networkAdapter);\n+         return this;\n+      }\n+\n+      public Builder computePoolReference(ComputePoolReference computePoolReference) {\n+         this.computePoolReference = computePoolReference;\n+         return this;\n+      }\n+\n+      public VAppExtendedInfo build() {\n+         return new VAppExtendedInfo(id, href, name, tags, longName, networkAdapters, computePoolReference);\n+      }\n+\n+      public Builder fromVAppExtendedInfo(VAppExtendedInfo in) {\n+         return id(in.getId()).href(in.getHref()).name(in.getName()).longName(in.getLongName()).tags(in.getTags())\n+                  .networkAdapters(in.getNetworkAdapters()).computePoolReference(in.getComputePoolReference());\n+      }\n+\n+   }\n+\n    private final String id;\n    private final URI href;\n    private final String name;\n-   private final List<String> tags;\n    private final String longName;\n+   private final List<String> tags;\n    private final List<NetworkAdapter> networkAdapters;\n+   private final ComputePoolReference computePoolReference;\n \n    public VAppExtendedInfo(String id, URI href, String name, List<String> tags, String longName,\n-           List<NetworkAdapter> networkAdapters) {\n+            List<NetworkAdapter> networkAdapters, ComputePoolReference computePoolReference) {\n       this.id = id;\n       this.href = href;\n       this.name = name;\n       this.tags = tags;\n       this.longName = longName;\n       this.networkAdapters = networkAdapters;\n+      this.computePoolReference = computePoolReference;\n    }\n \n    public int compareTo(VAppExtendedInfo that) {\n@@ -58,71 +133,44 @@ public String getName() {\n       return name;\n    }\n \n-   public List<String> getTags() {\n-      return tags;\n-   }\n-\n    public String getLongName() {\n       return longName;\n    }\n \n+   public List<String> getTags() {\n+      return tags;\n+   }\n+\n    public List<NetworkAdapter> getNetworkAdapters() {\n       return networkAdapters;\n    }\n \n-   @Override\n-   public int hashCode() {\n-      final int prime = 31;\n-      int result = 1;\n-      result = prime * result + ((href == null) ? 0 : href.hashCode());\n-      result = prime * result + ((id == null) ? 0 : id.hashCode());\n-      result = prime * result + ((name == null) ? 0 : name.hashCode());\n-      result = prime * result + ((longName == null) ? 0 : longName.hashCode());\n-      result = prime * result + ((tags == null) ? 0 : tags.hashCode());\n-      result = prime * result + ((networkAdapters == null) ? 0 : networkAdapters.hashCode());\n-      return result;\n+   public ComputePoolReference getComputePoolReference() {\n+      return computePoolReference;\n    }\n \n    @Override\n-   public boolean equals(Object obj) {\n-      if (this == obj)\n+   public boolean equals(Object o) {\n+      if (this == o)\n          return true;\n-      if (obj == null)\n+      if (o == null || getClass() != o.getClass())\n          return false;\n-      if (getClass() != obj.getClass())\n-         return false;\n-      VAppExtendedInfo other = (VAppExtendedInfo) obj;\n-      if (href == null) {\n-         if (other.href != null)\n-            return false;\n-      } else if (!href.equals(other.href))\n-         return false;\n-      if (id == null) {\n-         if (other.id != null)\n-            return false;\n-      } else if (!id.equals(other.id))\n-         return false;\n-      if (name == null) {\n-         if (other.name != null)\n-            return false;\n-      } else if (!name.equals(other.name))\n-         return false;\n-      if (tags == null) {\n-         if (other.tags != null)\n-            return false;\n-      } else if (!tags.equals(other.tags))\n-         return false;\n-      if (networkAdapters == null) {\n-         if (other.networkAdapters != null)\n-            return false;\n-      } else if (!networkAdapters.equals(other.networkAdapters))\n-         return false;\n-      return true;\n+      VAppExtendedInfo that = VAppExtendedInfo.class.cast(o);\n+      return equal(this.id, that.id) && equal(this.href, that.href) && equal(this.name, that.name)\n+               && equal(this.longName, that.longName) && equal(this.tags, that.tags)\n+               && equal(this.networkAdapters, that.networkAdapters)\n+               && equal(this.computePoolReference, that.computePoolReference);\n+   }\n+\n+   @Override\n+   public int hashCode() {\n+      return Objects.hashCode(id, href, name, longName, tags, networkAdapters, computePoolReference);\n    }\n \n    @Override\n    public String toString() {\n-      return \"[href=\" + href + \", id=\" + id + \", name=\" + name + \", long name=\" + longName\n-          + \", tags=\" + tags.toString() + \", network adapters=\" + networkAdapters.toString() + \"]\";\n+      return Objects.toStringHelper(\"\").add(\"id\", id).add(\"href\", href).add(\"name\", name).add(\"longName\", longName)\n+               .add(\"tags\", tags).add(\"networkAdapters\", networkAdapters).add(\"computePoolReference\",\n+                        computePoolReference).toString();\n    }\n }",
                "deletions": 53
            },
            {
                "sha": "fad34bb6b550413085dfee82038f43b01e174461",
                "filename": "common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java",
                "status": "modified",
                "changes": 90,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/main/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandler.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -18,53 +18,39 @@\n  */\n package org.jclouds.trmk.vcloud_0_8.xml;\n \n-import java.net.URI;\n-import java.util.Arrays;\n-import java.util.List;\n+import static org.jclouds.util.SaxUtils.currentOrNull;\n \n-import javax.annotation.Resource;\n+import java.net.URI;\n \n import org.jclouds.http.functions.ParseSax.HandlerWithResult;\n-import org.jclouds.logging.Logger;\n+import org.jclouds.trmk.vcloud_0_8.domain.ComputePoolReference;\n import org.jclouds.trmk.vcloud_0_8.domain.NetworkAdapter;\n import org.jclouds.trmk.vcloud_0_8.domain.Subnet;\n import org.jclouds.trmk.vcloud_0_8.domain.VAppExtendedInfo;\n import org.xml.sax.Attributes;\n import org.xml.sax.SAXException;\n \n-import com.google.common.collect.Lists;\n+import com.google.common.base.Splitter;\n+import com.google.common.collect.ImmutableList;\n \n /**\n- * @author Seshu Pasam\n+ * @author Seshu Pasam, Adrian Cole\n  */\n public class VAppExtendedInfoHandler extends HandlerWithResult<VAppExtendedInfo> {\n \n-   @Resource\n-   protected Logger logger = Logger.NULL;\n    private StringBuilder currentText = new StringBuilder();\n \n-   private String id;\n-   private URI href;\n-   private String name;\n-   private String longName;\n-   private List<String> tags;\n-   private List<NetworkAdapter> networkAdapters = Lists.newArrayList();\n+   private VAppExtendedInfo.Builder builder = VAppExtendedInfo.builder();\n+   private NetworkAdapter.Builder adapterBuilder = NetworkAdapter.builder();\n+   private Subnet.Builder subnetBuilder = Subnet.builder();\n+   private ComputePoolReference.Builder poolBuilder = ComputePoolReference.builder();\n    private boolean inAdapters;\n-   private String macAddress;\n-   private String adapterName;\n    private boolean inSubnet;\n-   private Subnet subnet;\n-   private URI subnetLocation;\n-   private String subnetName;\n-\n-   protected String currentOrNull() {\n-      String returnVal = currentText.toString().trim();\n-      return returnVal.equals(\"\") ? null : returnVal;\n-   }\n+   private boolean inComputePool;\n \n    @Override\n    public VAppExtendedInfo getResult() {\n-      return new VAppExtendedInfo(id, href, name, tags, longName, networkAdapters);\n+      return builder.build();\n    }\n \n    @Override\n@@ -73,47 +59,55 @@ public void startElement(String uri, String localName, String qName, Attributes\n          inAdapters = true;\n       } else if (qName.equals(\"Subnet\")) {\n          inSubnet = true;\n+      } else if (qName.equals(\"ComputePoolReference\")) {\n+         inComputePool = true;\n       }\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      String current = currentOrNull();\n+      String current = currentOrNull(currentText);\n       if (current != null) {\n          if (qName.equals(\"Id\")) {\n-            this.id = current;\n+            builder.id(current);\n          } else if (qName.equals(\"Tags\")) {\n-            this.tags = Arrays.asList(current.split(\",\"));\n+            builder.tags(ImmutableList.copyOf(Splitter.on(',').split(current)));\n          } else if (qName.equals(\"LongName\")) {\n-            this.longName = current;\n+            builder.longName(current);\n          } else if (qName.equals(\"Href\")) {\n+            URI href = URI.create(current);\n             if (inSubnet) {\n-               this.subnetLocation = URI.create(current);\n+               subnetBuilder.href(href);\n+            } else if (inComputePool) {\n+               poolBuilder.href(href);\n             } else {\n-               this.href = URI.create(current);\n+               builder.href(href);\n             }\n          } else if (qName.equals(\"Name\")) {\n             if (inSubnet) {\n-               this.subnetName = current;\n+               subnetBuilder.name(current);\n             } else if (inAdapters) {\n-               this.adapterName = current;\n+               adapterBuilder.name(current);\n+            } else if (inComputePool) {\n+               poolBuilder.name(current);\n             } else {\n-               this.name = current;\n+               builder.name(current);\n             }\n-         } else if (qName.equals(\"NetworkAdapters\")) {\n-             inAdapters = false;\n-         } else if (qName.equals(\"NetworkAdapter\")) {\n-             networkAdapters.add(new NetworkAdapter(macAddress, adapterName, subnet));\n-             macAddress = null;\n-             adapterName = null;\n-             subnet = null;\n          } else if (qName.equals(\"MacAddress\")) {\n-             macAddress = current;\n-         } else if (qName.equals(\"Subnet\")) {\n-             subnet = new Subnet(subnetLocation, subnetName);\n-             subnetLocation = null;\n-             subnetName = null;\n-             inSubnet = false;\n+            adapterBuilder.macAddress(current);\n          }\n+      } else if (qName.equals(\"NetworkAdapters\")) {\n+         inAdapters = false;\n+      } else if (qName.equals(\"NetworkAdapter\")) {\n+         builder.networkAdapter(adapterBuilder.build());\n+         adapterBuilder = NetworkAdapter.builder();\n+      } else if (qName.equals(\"Subnet\")) {\n+         adapterBuilder.subnet(subnetBuilder.build());\n+         subnetBuilder = Subnet.builder();\n+         inSubnet = false;\n+      } else if (qName.equals(\"ComputePoolReference\")) {\n+         builder.computePoolReference(poolBuilder.build());\n+         poolBuilder = ComputePoolReference.builder();\n+         inComputePool = false;\n       }\n       currentText = new StringBuilder();\n    }",
                "deletions": 48
            },
            {
                "sha": "51b099028a94997b80d600ba1ee3f94859c26bae",
                "filename": "common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java",
                "status": "added",
                "changes": 78,
                "additions": 78,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/test/java/org/jclouds/trmk/vcloud_0_8/xml/VAppExtendedInfoHandlerTest.java?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -0,0 +1,78 @@\n+/**\n+ * Licensed to jclouds, Inc. (jclouds) under one or more\n+ * contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  jclouds licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.jclouds.trmk.vcloud_0_8.xml;\n+\n+import static org.testng.Assert.assertEquals;\n+\n+import java.io.InputStream;\n+import java.net.URI;\n+\n+import org.jclouds.http.functions.BaseHandlerTest;\n+import org.jclouds.trmk.vcloud_0_8.domain.ComputePoolReference;\n+import org.jclouds.trmk.vcloud_0_8.domain.NetworkAdapter;\n+import org.jclouds.trmk.vcloud_0_8.domain.Subnet;\n+import org.jclouds.trmk.vcloud_0_8.domain.VAppExtendedInfo;\n+import org.testng.annotations.Test;\n+\n+/**\n+ * Tests behavior of {@code VAppExtendedInfoHandler}\n+ * \n+ * @author Adrian Cole\n+ */\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+@Test(groups = \"unit\", testName = \"VAppExtendedInfoHandlerTest\")\n+public class VAppExtendedInfoHandlerTest extends BaseHandlerTest {\n+\n+   public void test() {\n+      InputStream is = getClass().getResourceAsStream(\"/vapp-ext.xml\");\n+\n+      VAppExtendedInfo result = factory.create(injector.getInstance(VAppExtendedInfoHandler.class)).parse(is);\n+      assertEquals(\n+               result,\n+               VAppExtendedInfo\n+                        .builder()\n+                        .id(\"392992\")\n+                        .href(\n+                                 URI\n+                                          .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/vapp/392992\"))\n+                        .name(\"instance01\")\n+                        .networkAdapter(\n+                                 NetworkAdapter\n+                                          .builder()\n+                                          .macAddress(\"00:50:56:95:12:96\")\n+                                          .name(\"Network adapter 1\")\n+                                          .subnet(\n+                                                   Subnet\n+                                                            .builder()\n+                                                            .href(\n+                                                                     URI\n+                                                                              .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/network/43781\"))\n+                                                            .name(\"10.122.213.192/27\").build()).build())\n+                        .computePoolReference(\n+                                 ComputePoolReference\n+                                          .builder()\n+                                          .href(\n+                                                   URI\n+                                                            .create(\"https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/computePool/692\"))\n+                                          .name(\n+\n+                                          \"Resource Pool 692\").build()).build());\n+\n+   }\n+}\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "6739670e1ca2744cb25fe9f9eb87a9529626a10e",
                "filename": "common/trmk/src/test/resources/vapp-ext.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/resources/vapp-ext.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd8f154fc2ffed7cb73de93666a21e6362347d5/common/trmk/src/test/resources/vapp-ext.xml",
                "status": "added",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/common/trmk/src/test/resources/vapp-ext.xml?ref=6bd8f154fc2ffed7cb73de93666a21e6362347d5",
                "patch": "@@ -0,0 +1,21 @@\n+<VApp xmlns=\"urn:tmrk:eCloudExtensions-2.8\" xmlns:i=\"http://www.w3.org/2001/XMLSchema-instance\">\n+    <Id>392992</Id>\n+    <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/vapp/392992</Href>\n+    <Name>instance01</Name>\n+    <Tags></Tags>\n+    <LongName></LongName>\n+    <NetworkAdapters>\n+        <NetworkAdapter>\n+            <MacAddress>00:50:56:95:12:96</MacAddress>\n+            <Name>Network adapter 1</Name>\n+            <Subnet>\n+                <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/network/43781</Href>\n+                <Name>10.122.213.192/27</Name>\n+            </Subnet>\n+        </NetworkAdapter>\n+    </NetworkAdapters>\n+    <ComputePoolReference>\n+        <Href>https://services.enterprisecloud.terremark.com/api/v0.8b-ext2.8/extensions/computePool/692</Href>\n+        <Name>Resource Pool 692</Name>\n+    </ComputePoolReference>\n+</VApp>\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "EC2 image architecture can be null. Don't throw NPE if architecture is null.",
        "commit": "https://github.com/apache/jclouds/commit/ef17ef23ea508a531e2724c191ca0ddc1daa0b74",
        "parent": "https://github.com/apache/jclouds/commit/07c2c2472124c0c4d5747438b353665c124a5c51",
        "bug_id": "jclouds_52",
        "file": [
            {
                "sha": "c3e85927994293f81d136857db7b5be33137a2ff",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "blob_url": "https://github.com/apache/jclouds/blob/ef17ef23ea508a531e2724c191ca0ddc1daa0b74/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "raw_url": "https://github.com/apache/jclouds/raw/ef17ef23ea508a531e2724c191ca0ddc1daa0b74/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java?ref=ef17ef23ea508a531e2724c191ca0ddc1daa0b74",
                "patch": "@@ -78,7 +78,7 @@ public Image(String region, Architecture architecture, @Nullable String name, @N\n             @Nullable String ramdiskId, RootDeviceType rootDeviceType, @Nullable String rootDeviceName,\n             Map<String, EbsBlockDevice> ebsBlockDevices, VirtualizationType virtualizationType, Hypervisor hypervisor) {\n       this.region = checkNotNull(region, \"region\");\n-      this.architecture = checkNotNull(architecture, \"architecture\");\n+      this.architecture = architecture;\n       this.imageId = checkNotNull(imageId, \"imageId\");\n       this.name = name;\n       this.description = description;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #619 from aplowe/openstack-nova\n\nopenstack-nova: fixing NPE in CreateServerOptions.string()",
        "commit": "https://github.com/apache/jclouds/commit/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
        "parent": "https://github.com/apache/jclouds/commit/81f46b49a7c38cc422953060626b69628365cfb0",
        "bug_id": "jclouds_53",
        "file": [
            {
                "sha": "ae36ea1455d5684904d2b3cb7ab5b1983a573cd8",
                "filename": "apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "blob_url": "https://github.com/apache/jclouds/blob/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "raw_url": "https://github.com/apache/jclouds/raw/9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/main/java/org/jclouds/openstack/nova/v1_1/options/CreateServerOptions.java?ref=9a4e5fd7d8f1b26cd8024fd9534e4f16c7feff3d",
                "patch": "@@ -133,9 +133,10 @@ public int hashCode() {\n    }\n \n    protected ToStringHelper string() {\n-      return toStringHelper(\"\").add(\"keyName\", \"keyName\").add(\"securityGroupNames\", securityGroupNames)\n+      return toStringHelper(\"\").add(\"keyName\", keyName).add(\"securityGroupNames\", securityGroupNames)\n               .add(\"metadata\", metadata).add(\"personality\", personality)\n-              .add(\"adminPassPresent\", adminPass != null).add(\"userData\", new String(userData));\n+              .add(\"adminPassPresent\", adminPass != null)\n+              .add(\"userData\", userData == null ? null : new String(userData));\n    }\n \n    @Override\n@@ -258,9 +259,6 @@ public CreateServerOptions userData(byte[] userData) {\n    /**\n     * A keypair name can be defined when creating a server. This key will be\n     * linked to the server and used to SSH connect to the machine\n-    * \n-    * @param keyName\n-    * @return\n     */\n    public String getKeyPairName() {\n       return keyName;",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #536 from grkvlt/listener-fix\n\nIssue 830: Fixing NPE in test listener",
        "commit": "https://github.com/apache/jclouds/commit/991cf2833dc8a756cebb98270a433696fa9830b7",
        "parent": "https://github.com/apache/jclouds/commit/7e6b4190687ff4a215fb201e9e0ac871cf95c9a0",
        "bug_id": "jclouds_54",
        "file": [
            {
                "sha": "fac0e0f41cda73367162ecd8ef98947a29db8d9b",
                "filename": "labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "blob_url": "https://github.com/apache/jclouds/blob/991cf2833dc8a756cebb98270a433696fa9830b7/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "raw_url": "https://github.com/apache/jclouds/raw/991cf2833dc8a756cebb98270a433696fa9830b7/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/labs/vcloud-director/src/test/java/org/jclouds/vcloud/director/testng/FormatApiResultsListener.java?ref=991cf2833dc8a756cebb98270a433696fa9830b7",
                "patch": "@@ -28,7 +28,9 @@\n import org.testng.TestListenerAdapter;\n \n import com.google.common.base.Joiner;\n+import com.google.common.base.Optional;\n import com.google.common.base.Predicates;\n+import com.google.common.base.Strings;\n import com.google.common.collect.ImmutableSet;\n import com.google.common.collect.Iterables;\n \n@@ -79,15 +81,16 @@ private String resultForState(ITestResult res, String state) {\n    }\n \n    private String getApi(ITestResult res) {\n-      return Iterables.find(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      Optional<String> found = Iterables.tryFind(Arrays.asList(res.getMethod().getGroups()), Predicates.in(apis));\n+      return found.isPresent() ? found.get() : \"\";\n    }\n \n    private String getOperation(ITestResult res) {\n-      return res.getMethod().getDescription();\n+      return Strings.nullToEmpty(res.getMethod().getDescription());\n    }\n \n    private String getTest(ITestResult res) {\n-      return res.getName();\n+      return Strings.nullToEmpty(res.getName());\n    }\n \n    private String getStart(ITestResult res) {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "changed the way the version is fetched from nova to avoid NPE",
        "commit": "https://github.com/apache/jclouds/commit/8de88410f64f44edb488c9bf04d466a2ef4af765",
        "parent": "https://github.com/apache/jclouds/commit/073eba9699e44fded3d145a8881ba6a39b712dc5",
        "bug_id": "jclouds_55",
        "file": [
            {
                "sha": "125584360a84018f9e14c642823346c39ccec044",
                "filename": "apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "blob_url": "https://github.com/apache/jclouds/blob/8de88410f64f44edb488c9bf04d466a2ef4af765/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "raw_url": "https://github.com/apache/jclouds/raw/8de88410f64f44edb488c9bf04d466a2ef4af765/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java?ref=8de88410f64f44edb488c9bf04d466a2ef4af765",
                "patch": "@@ -46,7 +46,7 @@ public Image apply(org.jclouds.openstack.nova.domain.Image from) {\n       builder.ids(from.getId() + \"\");\n       builder.name(from.getName() != null ? from.getName() : \"unspecified\");\n       builder.description(from.getName() != null ? from.getName() : \"unspecified\");\n-      builder.version(from.getUpdated().getTime() + \"\");\n+      builder.version(from.getUpdated() != null ? from.getUpdated().getTime() + \"\" : \"-1\");\n       builder.operatingSystem(imageToOs.apply(from)); //image name may not represent the OS type\n       builder.defaultCredentials(new Credentials(\"root\", null));\n       builder.uri(from.getURI());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 540:fixed NPE when overriding aws-s3.endpoint with a regional one",
        "commit": "https://github.com/apache/jclouds/commit/08a3cc0275254469639eca4547d24e95b55b20dd",
        "parent": "https://github.com/apache/jclouds/commit/796c441b73c0fb136af61b7a8acf8450e20ee351",
        "bug_id": "jclouds_56",
        "file": [
            {
                "sha": "9517e6c12e79995544f4c4b2cc10cd7e0f04e765",
                "filename": "apis/s3/src/main/java/org/jclouds/s3/config/S3RestClientModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/config/S3RestClientModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/config/S3RestClientModule.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/s3/src/main/java/org/jclouds/s3/config/S3RestClientModule.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -21,6 +21,7 @@\n import java.util.Map;\n import java.util.concurrent.TimeUnit;\n \n+import javax.annotation.Nullable;\n import javax.inject.Named;\n import javax.inject.Singleton;\n \n@@ -33,6 +34,7 @@\n import org.jclouds.http.annotation.ClientError;\n import org.jclouds.http.annotation.Redirection;\n import org.jclouds.http.annotation.ServerError;\n+import org.jclouds.location.Region;\n import org.jclouds.rest.ConfiguresRestClient;\n import org.jclouds.rest.RequestSigner;\n import org.jclouds.s3.Bucket;\n@@ -70,6 +72,14 @@ public S3RestClientModule(Class<S> sync, Class<A> async) {\n       return Maps.newConcurrentMap();\n    }\n \n+   @Provides\n+   @Bucket\n+   @Singleton\n+   @Nullable\n+   protected String defaultRegionForBucket(@Nullable @Region String defaultRegion) {\n+      return defaultRegion;\n+   }\n+\n    @Override\n    protected void configure() {\n       install(new S3ObjectModule());",
                "deletions": 0
            },
            {
                "sha": "c634bf538867c32c354e76145bc761a78afe89da",
                "filename": "apis/s3/src/main/java/org/jclouds/s3/functions/BindRegionToXmlPayload.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/functions/BindRegionToXmlPayload.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/functions/BindRegionToXmlPayload.java",
                "status": "modified",
                "changes": 34,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/s3/src/main/java/org/jclouds/s3/functions/BindRegionToXmlPayload.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -19,9 +19,8 @@\n package org.jclouds.s3.functions;\n \n import static com.google.common.base.Preconditions.checkArgument;\n+import static com.google.common.base.Preconditions.checkNotNull;\n \n-import java.net.URI;\n-import java.util.Map;\n import java.util.Set;\n \n import javax.annotation.Nullable;\n@@ -33,11 +32,12 @@\n import org.jclouds.http.HttpRequest;\n import org.jclouds.logging.Logger;\n import org.jclouds.rest.binders.BindToStringPayload;\n+import org.jclouds.s3.Bucket;\n \n /**\n  * \n- * Depending on your latency and legal requirements, you can specify a location constraint that will\n- * affect where your data physically resides.\n+ * Depending on your latency and legal requirements, you can specify a location\n+ * constraint that will affect where your data physically resides.\n  * \n  * @author Adrian Cole\n  * \n@@ -47,25 +47,28 @@\n    @Resource\n    protected Logger logger = Logger.NULL;\n \n-   private final String defaultRegion;\n+   private final String defaultRegionForEndpoint;\n+   private final String defaultRegionForService;\n    private final Set<String> regions;\n \n    @Inject\n-   BindRegionToXmlPayload(@org.jclouds.location.Region @Nullable String defaultRegion,\n-            @org.jclouds.location.Region Set<String> regions) {\n-      this.defaultRegion = defaultRegion;\n-      this.regions = regions;\n+   public BindRegionToXmlPayload(@org.jclouds.location.Region @Nullable String defaultRegionForEndpoint,\n+         @Nullable @Bucket String defaultRegionForService, @org.jclouds.location.Region Set<String> regions) {\n+      this.defaultRegionForEndpoint = defaultRegionForEndpoint;\n+      this.defaultRegionForService = defaultRegionForService;\n+      this.regions = checkNotNull(regions, \"regions\");\n    }\n \n    @Override\n    public <R extends HttpRequest> R bindToRequest(R request, Object input) {\n-      if (defaultRegion == null)\n+      if (defaultRegionForEndpoint == null)\n          return request;\n-      input = input == null ? defaultRegion : input;\n+      input = input == null ? defaultRegionForEndpoint : input;\n       checkArgument(input instanceof String, \"this binder is only valid for Region!\");\n       String constraint = (String) input;\n       String value = null;\n-      if (defaultRegion.equals(constraint)) {\n+      if ((defaultRegionForService == null && constraint == null)\n+            || (defaultRegionForService != null && defaultRegionForService.equals(constraint))) {\n          // nothing to bind as this is default.\n          return request;\n       } else if (regions.contains(constraint)) {\n@@ -74,9 +77,10 @@\n          logger.warn(\"region %s not in %s \", constraint, regions);\n          value = constraint;\n       }\n-      String payload = String.format(\n-               \"<CreateBucketConfiguration><LocationConstraint>%s</LocationConstraint></CreateBucketConfiguration>\",\n-               value);\n+      String payload = String\n+            .format(\n+                  \"<CreateBucketConfiguration><LocationConstraint>%s</LocationConstraint></CreateBucketConfiguration>\",\n+                  value);\n       request = super.bindToRequest(request, payload);\n       request.getPayload().getContentMetadata().setContentType(MediaType.TEXT_XML);\n       return request;",
                "deletions": 15
            },
            {
                "sha": "e3ffabc7ef0fe5b66d65183522de85e9c535292e",
                "filename": "apis/s3/src/main/java/org/jclouds/s3/xml/LocationConstraintHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/xml/LocationConstraintHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/apis/s3/src/main/java/org/jclouds/s3/xml/LocationConstraintHandler.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/s3/src/main/java/org/jclouds/s3/xml/LocationConstraintHandler.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -20,7 +20,7 @@\n \n import static org.jclouds.util.SaxUtils.currentOrNull;\n \n-import java.util.concurrent.ConcurrentMap;\n+import java.util.Map;\n \n import javax.inject.Inject;\n \n@@ -35,17 +35,19 @@\n  * <p/>\n  * Region is the document we expect to parse.\n  * \n- * @see <a href= \"http://docs.amazonwebservices.com/AmazonS3/latest/RESTBucketLocationGET.html\" />\n+ * @see <a href=\n+ *      \"http://docs.amazonwebservices.com/AmazonS3/latest/RESTBucketLocationGET.html\"\n+ *      />\n  * @author Adrian Cole\n  */\n public class LocationConstraintHandler extends ParseSax.HandlerWithResult<String> {\n-   private final ConcurrentMap<String, String> bucketToRegion;\n+   private final Map<String, String> bucketToRegion;\n    private StringBuilder currentText = new StringBuilder();\n    private String region;\n    private String bucket;\n \n    @Inject\n-   public LocationConstraintHandler(@Bucket ConcurrentMap<String, String> bucketToRegion) {\n+   public LocationConstraintHandler(@Bucket Map<String, String> bucketToRegion) {\n       this.bucketToRegion = bucketToRegion;\n    }\n ",
                "deletions": 4
            },
            {
                "sha": "20c5abd0426f0e624c791b9216576f1c4717257e",
                "filename": "providers/aws-s3/src/main/java/org/jclouds/aws/s3/binders/AssignCorrectHostnameAndBindAsHostPrefixIfConfigured.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/main/java/org/jclouds/aws/s3/binders/AssignCorrectHostnameAndBindAsHostPrefixIfConfigured.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/main/java/org/jclouds/aws/s3/binders/AssignCorrectHostnameAndBindAsHostPrefixIfConfigured.java",
                "status": "added",
                "changes": 73,
                "additions": 73,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-s3/src/main/java/org/jclouds/aws/s3/binders/AssignCorrectHostnameAndBindAsHostPrefixIfConfigured.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -0,0 +1,73 @@\n+/**\n+ *\n+ * Copyright (C) 2011 Cloud Conscious, LLC. <info@cloudconscious.com>\n+ *\n+ * ====================================================================\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ * ====================================================================\n+ */\n+\n+package org.jclouds.aws.s3.binders;\n+\n+import static org.jclouds.s3.reference.S3Constants.PROPERTY_S3_SERVICE_PATH;\n+import static org.jclouds.s3.reference.S3Constants.PROPERTY_S3_VIRTUAL_HOST_BUCKETS;\n+\n+import java.net.URI;\n+import java.util.Map;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+import javax.inject.Provider;\n+import javax.inject.Singleton;\n+import javax.ws.rs.core.UriBuilder;\n+\n+import org.jclouds.http.HttpRequest;\n+import org.jclouds.http.utils.ModifyRequest;\n+import org.jclouds.location.functions.RegionToEndpointOrProviderIfNull;\n+import org.jclouds.rest.binders.BindAsHostPrefix;\n+import org.jclouds.s3.Bucket;\n+import org.jclouds.s3.binders.BindAsHostPrefixIfConfigured;\n+\n+/**\n+ * \n+ * @author Adrian Cole\n+ */\n+@Singleton\n+public class AssignCorrectHostnameAndBindAsHostPrefixIfConfigured extends BindAsHostPrefixIfConfigured {\n+   private final Map<String, String> bucketToRegion;\n+   private final RegionToEndpointOrProviderIfNull r2;\n+\n+   @Inject\n+   public AssignCorrectHostnameAndBindAsHostPrefixIfConfigured(BindAsHostPrefix bindAsHostPrefix,\n+         @Named(PROPERTY_S3_VIRTUAL_HOST_BUCKETS) boolean isVhostStyle,\n+         @Named(PROPERTY_S3_SERVICE_PATH) String servicePath, RegionToEndpointOrProviderIfNull r2,\n+         Provider<UriBuilder> uriBuilderProvider, @Bucket Map<String, String> bucketToRegion) {\n+      super(bindAsHostPrefix, isVhostStyle, servicePath, uriBuilderProvider);\n+      this.bucketToRegion = bucketToRegion;\n+      this.r2 = r2;\n+   }\n+\n+   @Override\n+   public <R extends HttpRequest> R bindToRequest(R request, Object payload) {\n+      String bucket = payload.toString();\n+      String region = bucketToRegion.get(bucket);\n+      if (region != null) {\n+         URI endpoint = r2.apply(region);\n+         request = ModifyRequest.endpoint(\n+               request,\n+               uriBuilderProvider.get().uri(endpoint).path(request.getEndpoint().getPath())\n+                     .replaceQuery(request.getEndpoint().getQuery()).build());\n+      }\n+      return super.bindToRequest(request, payload);\n+   }\n+}",
                "deletions": 0
            },
            {
                "sha": "daccd2d7ed7c8126ddaab947b92d7642ba0745fd",
                "filename": "providers/aws-s3/src/main/java/org/jclouds/aws/s3/config/AWSS3RestClientModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/main/java/org/jclouds/aws/s3/config/AWSS3RestClientModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/main/java/org/jclouds/aws/s3/config/AWSS3RestClientModule.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-s3/src/main/java/org/jclouds/aws/s3/config/AWSS3RestClientModule.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -31,6 +31,7 @@\n import org.jclouds.aws.s3.AWSS3Client;\n import org.jclouds.aws.s3.binders.AssignCorrectHostnameAndBindAsHostPrefixIfConfigured;\n import org.jclouds.http.RequiresHttp;\n+import org.jclouds.location.Region;\n import org.jclouds.rest.ConfiguresRestClient;\n import org.jclouds.s3.Bucket;\n import org.jclouds.s3.S3AsyncClient;\n@@ -52,10 +53,15 @@\n    @Provides\n    @Singleton\n    @Bucket\n-   protected URI provideLocationURI(@Named(PROPERTY_REGION + \".\" + US_STANDARD + \".\" + ENDPOINT) String endpoint) {\n+   protected URI provideBucketURI(@Named(PROPERTY_REGION + \".\" + US_STANDARD + \".\" + ENDPOINT) String endpoint) {\n       return URI.create(endpoint);\n    }\n \n+   @Override\n+   protected String defaultRegionForBucket(@Region String defaultRegion) {\n+      return US_STANDARD;\n+   }\n+\n    @Override\n    protected void configure() {\n       bind(BindAsHostPrefixIfConfigured.class).to(AssignCorrectHostnameAndBindAsHostPrefixIfConfigured.class);",
                "deletions": 1
            },
            {
                "sha": "137777a4f2b7a36a2af1876a63e554e47c5e7512",
                "filename": "providers/aws-s3/src/test/java/org/jclouds/aws/s3/AWSS3AsyncClientTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/test/java/org/jclouds/aws/s3/AWSS3AsyncClientTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/08a3cc0275254469639eca4547d24e95b55b20dd/providers/aws-s3/src/test/java/org/jclouds/aws/s3/AWSS3AsyncClientTest.java",
                "status": "modified",
                "changes": 63,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-s3/src/test/java/org/jclouds/aws/s3/AWSS3AsyncClientTest.java?ref=08a3cc0275254469639eca4547d24e95b55b20dd",
                "patch": "@@ -43,7 +43,6 @@\n import org.jclouds.rest.functions.MapHttp4xxCodesToExceptions;\n import org.jclouds.rest.functions.ReturnVoidOnNotFoundOr404;\n import org.jclouds.rest.internal.RestAnnotationProcessor;\n-import org.jclouds.s3.S3AsyncClient;\n import org.jclouds.s3.domain.ObjectMetadata;\n import org.jclouds.s3.domain.ObjectMetadataBuilder;\n import org.jclouds.s3.functions.ReturnFalseIfBucketAlreadyOwnedByYouOrIllegalState;\n@@ -61,7 +60,8 @@\n /**\n  * @author Adrian Cole\n  */\n-// NOTE:without testName, this will not call @Before* and fail w/NPE during surefire\n+// NOTE:without testName, this will not call @Before* and fail w/NPE during\n+// surefire\n @Test(groups = \"unit\", testName = \"AWSS3AsyncClientTest\")\n public class AWSS3AsyncClientTest extends org.jclouds.s3.S3AsyncClientTest<AWSS3AsyncClient> {\n \n@@ -70,11 +70,11 @@ public AWSS3AsyncClientTest() {\n    }\n \n    public void testGetBucketLocationEU() throws SecurityException, NoSuchMethodException, IOException {\n-      Method method = S3AsyncClient.class.getMethod(\"getBucketLocation\", String.class);\n+      Method method = AWSS3AsyncClient.class.getMethod(\"getBucketLocation\", String.class);\n       HttpRequest request = processor.createRequest(method, \"eubucket\");\n \n-      assertRequestLineEquals(request, \"GET https://eubucket.bucket/?location HTTP/1.1\");\n-      assertNonPayloadHeadersEqual(request, \"Host: bucket.s3.amazonaws.com\\n\");\n+      assertRequestLineEquals(request, \"GET https://eubucket.s3-eu-west-1.amazonaws.com/?location HTTP/1.1\");\n+      assertNonPayloadHeadersEqual(request, \"Host: eubucket.s3-eu-west-1.amazonaws.com\\n\");\n       assertPayloadEquals(request, null, null, false);\n \n       assertResponseParserClassEquals(method, request, ParseSax.class);\n@@ -84,6 +84,48 @@ public void testGetBucketLocationEU() throws SecurityException, NoSuchMethodExce\n       checkFilters(request);\n    }\n \n+   @Override\n+   public void testGetBucketLocation() throws SecurityException, NoSuchMethodException, IOException {\n+      Method method = AWSS3AsyncClient.class.getMethod(\"getBucketLocation\", String.class);\n+      HttpRequest request = processor.createRequest(method, \"bucket\");\n+\n+      assertRequestLineEquals(request, \"GET https://bucket.bucketendpoint/?location HTTP/1.1\");\n+      assertNonPayloadHeadersEqual(request, \"Host: bucket.bucketendpoint\\n\");\n+      assertPayloadEquals(request, null, null, false);\n+\n+      request = filter.filter(request);\n+\n+      assertRequestLineEquals(request, \"GET https://bucket.bucketendpoint/?location HTTP/1.1\");\n+      assertNonPayloadHeadersEqual(\n+            request,\n+            \"Authorization: AWS identity:2fFTeYJTDwiJmaAkKj732RjNbOg=\\nDate: 2009-11-08T15:54:08.897Z\\nHost: bucket.bucketendpoint\\n\");\n+      assertPayloadEquals(request, null, null, false);\n+\n+      assertResponseParserClassEquals(method, request, ParseSax.class);\n+      assertSaxResponseParserClassEquals(method, LocationConstraintHandler.class);\n+      assertExceptionParserClassEquals(method, null);\n+\n+      checkFilters(request);\n+   }\n+\n+   @Override\n+   public void testPutBucketDefault() throws ArrayIndexOutOfBoundsException, SecurityException,\n+         IllegalArgumentException, NoSuchMethodException, IOException {\n+      Method method = AWSS3AsyncClient.class.getMethod(\"putBucketInRegion\", String.class, String.class, Array\n+            .newInstance(PutBucketOptions.class, 0).getClass());\n+      HttpRequest request = processor.createRequest(method, (String) null, \"bucket\");\n+\n+      assertRequestLineEquals(request, \"PUT https://bucket.bucketendpoint/ HTTP/1.1\");\n+      assertNonPayloadHeadersEqual(request, \"Host: bucket.bucketendpoint\\n\");\n+      assertPayloadEquals(request, null, null, false);\n+\n+      assertResponseParserClassEquals(method, request, ReturnTrueIf2xx.class);\n+      assertSaxResponseParserClassEquals(method, null);\n+      assertExceptionParserClassEquals(method, ReturnFalseIfBucketAlreadyOwnedByYouOrIllegalState.class);\n+\n+      checkFilters(request);\n+   }\n+\n    @Override\n    protected TypeLiteral<RestAnnotationProcessor<AWSS3AsyncClient>> createTypeLiteral() {\n       return new TypeLiteral<RestAnnotationProcessor<AWSS3AsyncClient>>() {\n@@ -107,7 +149,8 @@ public void testInitiateMultipartUpload() throws SecurityException, NegativeArra\n             + url + \"\\n\");\n       assertPayloadEquals(request, null, null, false);\n \n-      // as this is a payload-related command, but with no payload, be careful that we check\n+      // as this is a payload-related command, but with no payload, be careful\n+      // that we check\n       // filtering and do not ignore if this fails later.\n       request = request.getFilters().get(0).filter(request);\n \n@@ -185,8 +228,8 @@ public void testPutBucketEu() throws ArrayIndexOutOfBoundsException, SecurityExc\n             .newInstance(PutBucketOptions.class, 0).getClass());\n       HttpRequest request = processor.createRequest(method, \"EU\", \"bucket\");\n \n-      assertRequestLineEquals(request, \"PUT https://bucket.\" + url + \"/ HTTP/1.1\");\n-      assertNonPayloadHeadersEqual(request, \"Host: bucket.\" + url + \"\\n\");\n+      assertRequestLineEquals(request, \"PUT https://bucket.bucketendpoint/ HTTP/1.1\");\n+      assertNonPayloadHeadersEqual(request, \"Host: bucket.bucketendpoint\\n\");\n       assertPayloadEquals(request,\n             \"<CreateBucketConfiguration><LocationConstraint>EU</LocationConstraint></CreateBucketConfiguration>\",\n             \"text/xml\", false);\n@@ -214,8 +257,8 @@ public TestAWSS3RestClientModule() {\n       }\n \n       @Override\n-      protected URI provideLocationURI(String endpoint) {\n-         return URI.create(\"https://bucket\");\n+      protected URI provideBucketURI(String endpoint) {\n+         return URI.create(\"https://bucketendpoint\");\n       }\n \n       @Override",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "JCLOUDS-549: Fix NPE in LoginCredentials.toString\n\n- also deprecates LoginCredentails.get(Password|PrivateKey)\n- use getOptionalPassword and getOptionalPrivateKey instead",
        "commit": "https://github.com/apache/jclouds/commit/1fb286809e14e77e051ec22d91afe32bd1ecdebd",
        "parent": "https://github.com/apache/jclouds/commit/fb60d76704745317186ad700e9b7ce5a569a614d",
        "bug_id": "jclouds_57",
        "file": [
            {
                "sha": "877b0fefb9b61cf228666d7d98bba34b96e5c68c",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/compute/CloudStackComputeServiceAdapterExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -18,6 +18,7 @@\n \n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n import java.io.IOException;\n import java.util.Map;\n@@ -179,7 +180,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPair() throws IOExcepti\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithGenerateKeyPair() throws IOException {\n@@ -226,7 +227,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithGenerateKeyPair() throws I\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertNotNull(server.getCredentials().getPrivateKey());\n+      assertTrue(server.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n    \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGroup() throws IOException {\n@@ -277,7 +278,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGrou\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGroupAndDisk() throws IOException {\n@@ -333,7 +334,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairDefaultSecurityGrou\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n               template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairGenerateSecurityGroup() throws IOException {\n@@ -391,7 +392,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairGenerateSecurityGro\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }\n \n    public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairAssignedToAccountAndDomain() throws IOException {\n@@ -444,7 +445,7 @@ public void testCreateNodeWithGroupEncodedIntoNameWithKeyPairAssignedToAccountAn\n       NodeAndInitialCredentials<VirtualMachine> server = adapter.createNodeWithGroupEncodedIntoName(\"test\", \"test-e92\",\n             template);\n       assertNotNull(server);\n-      assertEquals(server.getCredentials().getPrivateKey(), privKey);\n+      assertEquals(server.getCredentials().getOptionalPrivateKey().get(), privKey);\n    }   \n    \n    @Override",
                "deletions": 6
            },
            {
                "sha": "edce6009737da407fa4d484f4bf84cd25cc321ef",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/FirewallApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -77,7 +77,7 @@ public boolean apply(Network network) {\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()),\n             client, jobComplete, virtualMachineRunning);\n \n-         if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+         if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n             loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n \n       } catch (NoSuchElementException e) {",
                "deletions": 1
            },
            {
                "sha": "82d3a6268322b3424ee8cb1c0965ca6d9d3a71dd",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/LoadBalancerApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -89,7 +89,7 @@ public void testCreateVm() {\n       vm = VirtualMachineApiLiveTest.createVirtualMachineInNetwork(network,\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()),\n             client, jobComplete, virtualMachineRunning);\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n    }\n ",
                "deletions": 1
            },
            {
                "sha": "a4bb788e23d721a6d097cf7b184e6c9e72dc84db",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/SecurityGroupApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -177,7 +177,7 @@ public void testCreateVMInSecurityGroup() throws Exception {\n       vm = VirtualMachineApiLiveTest.createVirtualMachineWithSecurityGroupInZone(zone.getId(),\n             defaultTemplateOrPreferredInZone(defaultTemplate, client, zone.getId()), group.getId(), client,\n             jobComplete, virtualMachineRunning);\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       // ingress port 22\n       checkSSH(HostAndPort.fromParts(vm.getIPAddress(), 22));",
                "deletions": 1
            },
            {
                "sha": "3b8b043a3e9106792a513210cac76cced1dc8aa3",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -74,7 +74,7 @@ public void testGetPasswordForVirtualMachineWhenResponseIs2xx() throws NoSuchAlg\n       WindowsLoginCredentialsFromEncryptedData passwordDecrypt = new WindowsLoginCredentialsFromEncryptedData(new JCECrypto());\n \n       assertEquals(passwordDecrypt.apply(\n-         EncryptedPasswordAndPrivateKey.builder().encryptedPassword(actual).privateKey(privateKey).build()).getPassword(), \"bX7vvptvw\");\n+         EncryptedPasswordAndPrivateKey.builder().encryptedPassword(actual).privateKey(privateKey).build()).getOptionalPassword().get(), \"bX7vvptvw\");\n    }\n    \n    HttpRequest deployVirtualMachineInZone =  HttpRequest.builder().method(\"GET\")",
                "deletions": 1
            },
            {
                "sha": "a0dc15352aa451001fee9f41db4a81620fc42704",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/features/VirtualMachineApiLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -279,7 +279,7 @@ private void destroyMachine(VirtualMachine virtualMachine) {\n    }\n \n    private void conditionallyCheckSSH() {\n-      if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+      if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n          loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       assert HostSpecifier.isValid(vm.getIPAddress());\n       if (!InetAddresses2.isPrivateIPAddress(vm.getIPAddress())) {",
                "deletions": 1
            },
            {
                "sha": "75bfd18e8d5ec49b62952c192380e109dbd592e2",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/StaticNATVirtualMachineInNetworkLiveTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -62,7 +62,7 @@ public void setupClient() {\n          vm = VirtualMachineApiLiveTest.createVirtualMachineInNetwork(network,\n                defaultTemplateOrPreferredInZone(defaultTemplate, client, network.getZoneId()), client, jobComplete,\n                virtualMachineRunning);\n-         if (vm.getPassword() != null && loginCredentials.getOptionalPassword() == null)\n+         if (vm.getPassword() != null && !loginCredentials.getOptionalPassword().isPresent())\n             loginCredentials = loginCredentials.toBuilder().password(vm.getPassword()).build();\n       } catch (NoSuchElementException e) {\n          networksDisabled = true;",
                "deletions": 1
            },
            {
                "sha": "a59ecadc31db8e0c890efb68ec2e534520e10628",
                "filename": "apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/test/java/org/jclouds/cloudstack/functions/WindowsLoginCredentialsFromEncryptedDataTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -62,7 +62,7 @@ public void testApply() throws Exception {\n       LoginCredentials credentials = f.apply(new EncryptedPasswordAndPrivateKey(ENCRYPTED_PASSWORD, PRIVATE_KEY));\n \n       assertEquals(credentials.getUser(), \"Administrator\");\n-      assertEquals(credentials.getPassword(), \"u4.y9mb;nR.\");\n+      assertEquals(credentials.getOptionalPassword().get(), \"u4.y9mb;nR.\");\n       assertFalse(credentials.getOptionalPrivateKey().isPresent());\n    }\n }",
                "deletions": 1
            },
            {
                "sha": "4ffad1f1b1d46a70f0dfdb4efe13e1fdef8a00da",
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/EC2ComputeServiceExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.ec2.compute.options.EC2TemplateOptions.Builder.maxCount;\n import static org.testng.Assert.assertEquals;\n import static org.testng.Assert.assertNotNull;\n+import static org.testng.Assert.assertTrue;\n \n import javax.ws.rs.core.MediaType;\n import java.util.Set;\n@@ -132,7 +133,7 @@ public void testCreateNodeWithGeneratedKeyPairAndOverriddenLoginUser() throws Ex\n               blockUntilRunning(false).overrideLoginUser(\"ec2-user\")));\n       assertEquals(node.getCredentials().getUser(), \"ec2-user\");\n       System.out.println(node.getImageId());\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n    public void testCreateThreeNodesWithMaxCountThree() throws Exception {\n@@ -312,7 +313,7 @@ public void testCreateNodeWithGeneratedKeyPairAndOverriddenLoginUserWithTemplate\n             apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             apiThatCreatesNode.templateBuilder().from(\"osDescriptionMatches=.*fedora.*,loginUser=ec2-user\").build()));\n       assertEquals(node.getCredentials().getUser(), \"ec2-user\");\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n }",
                "deletions": 2
            },
            {
                "sha": "3859f531e360014c51618af6157de6bd88c11de6",
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/functions/WindowsLoginCredentialsFromEncryptedDataTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -68,7 +68,7 @@ public void testApply() throws Exception {\n       LoginCredentials credentials = f.apply(new PasswordDataAndPrivateKey(passwordData, PRIVATE_KEY));\n \n       assertEquals(credentials.getUser(), \"Administrator\");\n-      assertEquals(credentials.getPassword(), \"u4.y9mb;nR.\");\n+      assertEquals(credentials.getOptionalPassword().get(), \"u4.y9mb;nR.\");\n       assertFalse(credentials.getOptionalPrivateKey().isPresent());\n    }\n }",
                "deletions": 1
            },
            {
                "sha": "527123a9270b25b1d1a714f6d4ec77a2178fc449",
                "filename": "apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/test/java/org/jclouds/ec2/compute/strategy/CreateKeyPairAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -317,7 +317,7 @@ public void testCreateNewKeyPairUnlessUserSpecifiedOtherwise_reusesKeyWhenToldTo\n \n       // setup expectations\n       expect(options.getKeyPair()).andReturn(userSuppliedKeyPair);\n-      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getPrivateKey()).atLeastOnce();\n+      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getOptionalPrivateKey().get()).atLeastOnce();\n \n       // Notice that the fingerprint and sha1 generated\n       expect(strategy.credentialsMap.put(new RegionAndName(region, userSuppliedKeyPair), KEYPAIR)).andReturn(null);",
                "deletions": 1
            },
            {
                "sha": "f87f66e4a1e01e2d1a74d5503dc3c3d888ce74cb",
                "filename": "apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/openstack-nova/src/test/java/org/jclouds/openstack/nova/v2_0/compute/NovaComputeServiceExpectTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -20,6 +20,7 @@\n import static org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions.Builder.blockUntilRunning;\n import static org.jclouds.openstack.nova.v2_0.compute.options.NovaTemplateOptions.Builder.keyPairName;\n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertFalse;\n import static org.testng.Assert.assertNotNull;\n import static org.testng.Assert.assertTrue;\n \n@@ -267,7 +268,7 @@ public String get() {\n \n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             blockUntilRunning(false).generateKeyPair(true)));\n-      assertNotNull(node.getCredentials().getPrivateKey());\n+      assertTrue(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n    @Test\n@@ -323,7 +324,7 @@ public String get() {\n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             keyPairName(\"fooPair\").blockUntilRunning(false)));\n       // we don't have access to this private key\n-      assertEquals(node.getCredentials().getPrivateKey(), null);\n+      assertFalse(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n \n@@ -374,7 +375,7 @@ public String get() {\n       NodeMetadata node = Iterables.getOnlyElement(apiThatCreatesNode.createNodesInGroup(\"test\", 1,\n             keyPairName(\"fooPair\").securityGroupNames(\"mygroup\").blockUntilRunning(false)));\n       // we don't have access to this private key\n-      assertEquals(node.getCredentials().getPrivateKey(), null);\n+      assertFalse(node.getCredentials().getOptionalPrivateKey().isPresent());\n    }\n \n }",
                "deletions": 3
            },
            {
                "sha": "419109d17ca6c99c6eb0ec43481a293ae09cf6d8",
                "filename": "compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/callables/RunScriptOnNodeUsingSsh.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -102,8 +102,8 @@ public RunScriptOnNode init() {\n \n    protected ExecResponse runCommand(String command) {\n       ExecResponse returnVal;\n-      logger.debug(\">> running [%s] as %s@%s\", command.replace(node.getCredentials().getPassword() != null ? node\n-            .getCredentials().getPassword() : \"XXXXX\", \"XXXXX\"), ssh.getUsername(), ssh.getHostAddress());\n+      logger.debug(\">> running [%s] as %s@%s\", command.replace(node.getCredentials().getOptionalPassword().isPresent() ? node\n+            .getCredentials().getOptionalPassword().get() : \"XXXXX\", \"XXXXX\"), ssh.getUsername(), ssh.getHostAddress());\n       returnVal = ssh.exec(command);\n       return returnVal;\n    }\n@@ -112,7 +112,7 @@ protected ExecResponse runCommand(String command) {\n    public String execAsRoot(String command) {\n       if (node.getCredentials().identity.equals(\"root\")) {\n       } else if (node.getCredentials().shouldAuthenticateSudo()) {\n-         command = String.format(\"sudo -S sh <<'%s'\\n%s\\n%s%s\\n\", MARKER, node.getCredentials().getPassword(), command, MARKER);\n+         command = String.format(\"sudo -S sh <<'%s'\\n%s\\n%s%s\\n\", MARKER, node.getCredentials().getOptionalPassword().get(), command, MARKER);\n       } else {\n          command = String.format(\"sudo sh <<'%s'\\n%s%s\\n\", MARKER, command, MARKER);\n       }",
                "deletions": 3
            },
            {
                "sha": "cef80566fa93ada1d2a788a9a9421206b4959d07",
                "filename": "compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/callables/SudoAwareInitManager.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -95,7 +95,7 @@ else if (computeLogger.isTraceEnabled())\n \n    ExecResponse runCommand(String command) {\n       String statement = String.format(\"[%s] as %s@%s\", command.replace(\n-            node.getCredentials().getPassword() != null ? node.getCredentials().getPassword() : \"XXXXX\", \"XXXXX\"), ssh\n+            node.getCredentials().getOptionalPassword().isPresent() ? node.getCredentials().getOptionalPassword().get() : \"XXXXX\", \"XXXXX\"), ssh\n             .getUsername(), ssh.getHostAddress());\n       if (command.endsWith(\"status\") || command.endsWith(\"stdout\") || command.endsWith(\"stderr\"))\n          logger.trace(\">> running %s\", statement);\n@@ -113,7 +113,7 @@ String execScriptAsRoot(String action) {\n       if (node.getCredentials().identity.equals(\"root\")) {\n          command = initFile + \" \" + action;\n       } else if (node.getCredentials().shouldAuthenticateSudo()) {\n-         command = String.format(\"echo '%s'|sudo -S %s %s\", node.getCredentials().getPassword(),\n+         command = String.format(\"echo '%s'|sudo -S %s %s\", node.getCredentials().getOptionalPassword().get(),\n                initFile, action);\n       } else {\n          command = \"sudo \" + initFile + \" \" + action;",
                "deletions": 2
            },
            {
                "sha": "26251fb26e4437efbbc64a283845eb09e0b1a5c0",
                "filename": "compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/strategy/PrioritizeCredentialsFromTemplate.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -44,10 +44,10 @@ public LoginCredentials apply(Template template, LoginCredentials fromNode) {\n          Builder builder = LoginCredentials.builder(creds);\n          if (credsFromParameters.getUser() != null)\n             builder.user(credsFromParameters.getUser());\n-         if (credsFromParameters.getPassword() != null)\n-            builder.password(credsFromParameters.getPassword());\n-         if (credsFromParameters.getPrivateKey() != null)\n-            builder.privateKey(credsFromParameters.getPrivateKey());\n+         if (credsFromParameters.getOptionalPassword().isPresent())\n+            builder.password(credsFromParameters.getOptionalPassword().get());\n+         if (credsFromParameters.getOptionalPrivateKey().isPresent())\n+            builder.privateKey(credsFromParameters.getOptionalPrivateKey().get());\n          if (credsFromParameters.shouldAuthenticateSudo())\n             builder.authenticateSudo(true);\n          creds = builder.build();",
                "deletions": 4
            },
            {
                "sha": "d115f73f76598ea8604cadee401c97affe293602",
                "filename": "core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/domain/LoginCredentials.java",
                "status": "modified",
                "changes": 43,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/domain/LoginCredentials.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.jclouds.domain;\n \n+import static com.google.common.base.Preconditions.checkNotNull;\n import static org.jclouds.crypto.Pems.PRIVATE_PKCS1_MARKER;\n import static org.jclouds.crypto.Pems.PRIVATE_PKCS8_MARKER;\n \n@@ -54,8 +55,8 @@ public static Builder builder() {\n    \n    public static class Builder extends Credentials.Builder<LoginCredentials> {\n       private boolean authenticateSudo;\n-      private Optional<String> password;\n-      private Optional<String> privateKey;\n+      private Optional<String> password = Optional.absent();\n+      private Optional<String> privateKey = Optional.absent();\n \n       public Builder identity(String identity) {\n          return Builder.class.cast(super.identity(identity));\n@@ -67,8 +68,6 @@ public Builder user(String user) {\n \n       public Builder password(String password) {\n          this.password = Optional.fromNullable(password);\n-         if (privateKey == null)\n-            noPrivateKey();\n          return this;\n       }\n \n@@ -79,8 +78,6 @@ public Builder noPassword() {\n \n       public Builder privateKey(String privateKey) {\n          this.privateKey = Optional.fromNullable(privateKey);\n-         if (password == null)\n-            noPassword();\n          return this;\n       }\n \n@@ -103,7 +100,7 @@ public Builder authenticateSudo(boolean authenticateSudo) {\n       }\n \n       public LoginCredentials build() {\n-         if (identity == null && password == null && privateKey == null && !authenticateSudo)\n+         if (identity == null && !password.isPresent() && !privateKey.isPresent() && !authenticateSudo)\n             return null;\n          return new LoginCredentials(identity, password, privateKey, authenticateSudo);\n       }\n@@ -113,13 +110,13 @@ public LoginCredentials build() {\n    private final Optional<String> password;\n    private final Optional<String> privateKey;\n \n-   private LoginCredentials(String username, @Nullable Optional<String> password, @Nullable Optional<String> privateKey, boolean authenticateSudo) {\n-      super(username, privateKey != null && privateKey.isPresent() && isPrivateKeyCredential(privateKey.get())\n+   private LoginCredentials(String username, Optional<String> password, Optional<String> privateKey, boolean authenticateSudo) {\n+      super(username, privateKey.isPresent() && isPrivateKeyCredential(privateKey.get())\n                     ? privateKey.get()\n-                    : (password != null && password.isPresent() ? password.get() : null));\n+                    : password.orNull());\n       this.authenticateSudo = authenticateSudo;\n-      this.password = password;\n-      this.privateKey = privateKey;\n+      this.password = checkNotNull(password, \"password\");\n+      this.privateKey = checkNotNull(privateKey, \"privateKey\");\n    }\n \n    /**\n@@ -131,41 +128,45 @@ public String getUser() {\n \n    /**\n     * @return the password of the login user or null\n+    * \n+    * @deprecated since 1.8; instead use {@link #getOptionalPassword()}\n     */\n    @Nullable\n+   @Deprecated\n    public String getPassword() {\n-      return (password != null) ? password.orNull() : null;\n+      return password.orNull();\n    }\n \n    /**\n-    * @return the optional password of the user or null\n+    * @return the optional password of the user (Optional.absent if none supplied).\n     */\n-   @Nullable\n    public Optional<String> getOptionalPassword() {\n       return password;\n    }\n \n    /**\n     * @return the private ssh key of the user or null\n+    * \n+    * @deprecated since 1.8; instead use {@link #getOptionalPrivateKey()}\n     */\n    @Nullable\n+   @Deprecated\n    public String getPrivateKey() {\n-      return (privateKey != null) ? privateKey.orNull() : null;\n+      return privateKey.orNull();\n    }\n \n    /**\n     * @return true if there is a private key attached that is not encrypted\n     */\n    public boolean hasUnencryptedPrivateKey() {\n-      return getPrivateKey() != null\n-         && !getPrivateKey().isEmpty()\n-         && !getPrivateKey().contains(Pems.PROC_TYPE_ENCRYPTED);\n+      return getOptionalPrivateKey().isPresent()\n+         && !getOptionalPrivateKey().get().isEmpty()\n+         && !getOptionalPrivateKey().get().contains(Pems.PROC_TYPE_ENCRYPTED);\n    }\n \n    /**\n-    * @return the optional private ssh key of the user or null\n+    * @return the optional private ssh key of the user (Optional.absent if none supplied).\n     */\n-   @Nullable\n    public Optional<String> getOptionalPrivateKey() {\n       return privateKey;\n    }",
                "deletions": 21
            },
            {
                "sha": "8e7e5087a09266aa72731e902a16146f653cdcb4",
                "filename": "core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/rest/config/CredentialStoreModule.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -85,8 +85,8 @@ public ByteSource apply(Credentials from) {\n             LoginCredentials login = LoginCredentials.class.cast(from);\n             JsonLoginCredentials val = new JsonLoginCredentials();\n             val.user = login.getUser();\n-            val.password = login.getPassword();\n-            val.privateKey = login.getPrivateKey();\n+            val.password = login.getOptionalPassword().orNull();\n+            val.privateKey = login.getOptionalPrivateKey().orNull();\n             if (login.shouldAuthenticateSudo())\n                val.authenticateSudo = login.shouldAuthenticateSudo();\n             return ByteSource.wrap(json.toJson(val).getBytes(Charsets.UTF_8));",
                "deletions": 2
            },
            {
                "sha": "608f5e31857131afc87d5e7bc333a67d8d5dee42",
                "filename": "core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/domain/LoginCredentialsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -17,6 +17,7 @@\n package org.jclouds.domain;\n \n import static org.testng.Assert.assertEquals;\n+import static org.testng.Assert.assertNotNull;\n \n import org.testng.annotations.Test;\n \n@@ -48,4 +49,15 @@ public void testPrivateKeyLeavesPasswordAloneWhenSet() {\n       assertEquals(toTest.getOptionalPassword(), Optional.of(\"password\"));\n       assertEquals(toTest.getOptionalPrivateKey(), Optional.of(\"key\"));\n    }\n+   \n+   \n+   public void testToStringWhenNullPasswordAndKey() {\n+      LoginCredentials toTest = LoginCredentials.builder().user(\"myuser\").build();\n+      assertNotNull(toTest.toString());\n+   }\n+   \n+   public void testToString() {\n+      LoginCredentials toTest = LoginCredentials.builder().user(\"myuser\").password(\"password\").privateKey(\"key\").build();\n+      assertNotNull(toTest.toString());\n+   }\n }",
                "deletions": 0
            },
            {
                "sha": "9e4635b711f16a7393da56f113e884178e1e4ba6",
                "filename": "core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/test/java/org/jclouds/rest/CredentialStoreModuleTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -34,6 +34,7 @@\n import org.testng.annotations.Test;\n \n import com.google.common.base.Charsets;\n+import com.google.common.base.Function;\n import com.google.common.io.ByteSource;\n import com.google.inject.Guice;\n import com.google.inject.Injector;\n@@ -124,6 +125,25 @@ public void testLoginConsistentAcrossMultipleInjectorsAndLooksNiceWithSudo() thr\n       remove(map, getStore(createInjector()), \"test\");\n    }\n \n+   public void testCredentialsToByteSourceConversion() throws Exception {\n+      Function<Credentials, ByteSource> toBytesFunc = getCredentialsToByteStoreFunction(createInjector());\n+      Function<ByteSource, Credentials> fromBytesFunc = getByteStoreToCredentialsFunction(createInjector());\n+      \n+      LoginCredentials creds = LoginCredentials.builder().user(\"myuser\").password(\"mypass\").authenticateSudo(true).build();\n+      ByteSource bytes = toBytesFunc.apply(creds);\n+      LoginCredentials deserializedCreds = (LoginCredentials) fromBytesFunc.apply(bytes);\n+      \n+      String json = bytes.asCharSource(Charsets.UTF_8).read();\n+      assertEquals(json, \"{\\\"user\\\":\\\"myuser\\\",\\\"password\\\":\\\"mypass\\\",\\\"authenticateSudo\\\":true}\");\n+      \n+      assertEquals(deserializedCreds.identity, creds.identity);\n+      assertEquals(deserializedCreds.credential, creds.credential);\n+      assertEquals(deserializedCreds.getUser(), creds.getUser());\n+      assertEquals(deserializedCreds.getOptionalPassword(), creds.getOptionalPassword());\n+      assertEquals(deserializedCreds.getOptionalPrivateKey(), creds.getOptionalPrivateKey());\n+      assertEquals(deserializedCreds.shouldAuthenticateSudo(), creds.shouldAuthenticateSudo());\n+   }\n+   \n    protected Map<String, Credentials> getStore(Injector injector) {\n       return injector.getInstance(Key.get(new TypeLiteral<Map<String, Credentials>>() {\n       }));\n@@ -134,6 +154,16 @@ public void testLoginConsistentAcrossMultipleInjectorsAndLooksNiceWithSudo() thr\n       }));\n    }\n \n+   protected Function<ByteSource, Credentials> getByteStoreToCredentialsFunction(Injector injector) {\n+      return injector.getInstance(Key.get(new TypeLiteral<Function<ByteSource, Credentials>>() {\n+      }));\n+   }\n+\n+   protected Function<Credentials, ByteSource> getCredentialsToByteStoreFunction(Injector injector) {\n+      return injector.getInstance(Key.get(new TypeLiteral<Function<Credentials, ByteSource>>() {\n+      }));\n+   }\n+   \n    protected Injector createInjectorWithProvidedMap(Map<String, ByteSource> map) {\n       return Guice.createInjector(new CredentialStoreModule(map), new GsonModule());\n    }",
                "deletions": 0
            },
            {
                "sha": "2413b9fde9b8fe9f9661f78d2392d3892ec2017b",
                "filename": "drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/JschSshClient.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -128,16 +128,16 @@ public JschSshClient(ProxyConfig proxyConfig, BackoffLimitedRetryHandler backoff\n       this.user = checkNotNull(loginCredentials, \"loginCredentials\").getUser();\n       this.host = checkNotNull(socket, \"socket\").getHostText();\n       checkArgument(socket.getPort() > 0, \"ssh port must be greater then zero\" + socket.getPort());\n-      checkArgument(loginCredentials.getPassword() != null || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n+      checkArgument(loginCredentials.getOptionalPassword().isPresent() || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n                \"you must specify a password, a key or an SSH agent needs to be available\");\n       this.backoffLimitedRetryHandler = checkNotNull(backoffLimitedRetryHandler, \"backoffLimitedRetryHandler\");\n-      if (loginCredentials.getPassword() != null) {\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n          this.toString = String.format(\"%s:pw[%s]@%s:%d\", loginCredentials.getUser(),\n-               base16().lowerCase().encode(md5().hashString(loginCredentials.getPassword(), UTF_8).asBytes()), host,\n+               base16().lowerCase().encode(md5().hashString(loginCredentials.getOptionalPassword().get(), UTF_8).asBytes()), host,\n                socket.getPort());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         String fingerPrint = fingerprintPrivateKey(loginCredentials.getPrivateKey());\n-         String sha1 = sha1PrivateKey(loginCredentials.getPrivateKey());\n+         String fingerPrint = fingerprintPrivateKey(loginCredentials.getOptionalPrivateKey().get());\n+         String sha1 = sha1PrivateKey(loginCredentials.getOptionalPrivateKey().get());\n          this.toString = String.format(\"%s:rsa[fingerprint(%s),sha1(%s)]@%s:%d\", loginCredentials.getUser(),\n                  fingerPrint, sha1, host, socket.getPort());\n       } else {",
                "deletions": 5
            },
            {
                "sha": "987d8b91d3ed5b2d5ea501c47235910b95f1d55c",
                "filename": "drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/jsch/src/main/java/org/jclouds/ssh/jsch/SessionConnection.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -169,10 +169,10 @@ public Session create() throws Exception {\n             .getSession(loginCredentials.getUser(), hostAndPort.getHostText(), hostAndPort.getPortOrDefault(22));\n       if (sessionTimeout != 0)\n          session.setTimeout(sessionTimeout);\n-      if (loginCredentials.getPrivateKey() == null) {\n-         session.setPassword(loginCredentials.getPassword());\n+      if (!loginCredentials.getOptionalPrivateKey().isPresent()) {\n+         session.setPassword(loginCredentials.getOptionalPassword().orNull());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         byte[] privateKey = loginCredentials.getPrivateKey().getBytes();\n+         byte[] privateKey = loginCredentials.getOptionalPrivateKey().get().getBytes();\n          jsch.addIdentity(loginCredentials.getUser(), privateKey, null, emptyPassPhrase);\n       } else if (agentConnector.isPresent()) {\n          JSch.setConfig(\"PreferredAuthentications\", \"publickey\");",
                "deletions": 3
            },
            {
                "sha": "68754e9c4f6c968d12521922622e8cfe03612101",
                "filename": "drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/sshj/src/main/java/org/jclouds/sshj/SSHClientConnection.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -157,11 +157,11 @@ public SSHClient create() throws Exception {\n          ssh.setTimeout(sessionTimeout);\n       }\n       ssh.connect(hostAndPort.getHostText(), hostAndPort.getPortOrDefault(22));\n-      if (loginCredentials.getPassword() != null) {\n-         ssh.authPassword(loginCredentials.getUser(), loginCredentials.getPassword());\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n+         ssh.authPassword(loginCredentials.getUser(), loginCredentials.getOptionalPassword().get());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n          OpenSSHKeyFile key = new OpenSSHKeyFile();\n-         key.init(loginCredentials.getPrivateKey(), null);\n+         key.init(loginCredentials.getOptionalPrivateKey().get(), null);\n          ssh.authPublickey(loginCredentials.getUser(), key);\n       } else if (agentConnector.isPresent()) {\n          AgentProxy proxy = new AgentProxy(agentConnector.get());",
                "deletions": 3
            },
            {
                "sha": "b1f60b5e781939101b1341b18b180ce4a044c9f5",
                "filename": "drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/drivers/sshj/src/main/java/org/jclouds/sshj/SshjSshClient.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -145,16 +145,16 @@ public SshjSshClient(BackoffLimitedRetryHandler backoffLimitedRetryHandler, Host\n       this.user = checkNotNull(loginCredentials, \"loginCredentials\").getUser();\n       this.host = checkNotNull(socket, \"socket\").getHostText();\n       checkArgument(socket.getPort() > 0, \"ssh port must be greater then zero\" + socket.getPort());\n-      checkArgument(loginCredentials.getPassword() != null || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n+      checkArgument(loginCredentials.getOptionalPassword().isPresent() || loginCredentials.hasUnencryptedPrivateKey() || agentConnector.isPresent(),\n               \"you must specify a password, a key or an SSH agent needs to be available\");\n       this.backoffLimitedRetryHandler = checkNotNull(backoffLimitedRetryHandler, \"backoffLimitedRetryHandler\");\n-      if (loginCredentials.getPassword() != null) {\n+      if (loginCredentials.getOptionalPassword().isPresent()) {\n          this.toString = String.format(\"%s:pw[%s]@%s:%d\", loginCredentials.getUser(),\n-               base16().lowerCase().encode(md5().hashString(loginCredentials.getPassword(), UTF_8).asBytes()), host,\n+               base16().lowerCase().encode(md5().hashString(loginCredentials.getOptionalPassword().get(), UTF_8).asBytes()), host,\n                socket.getPort());\n       } else if (loginCredentials.hasUnencryptedPrivateKey()) {\n-         String fingerPrint = fingerprintPrivateKey(loginCredentials.getPrivateKey());\n-         String sha1 = sha1PrivateKey(loginCredentials.getPrivateKey());\n+         String fingerPrint = fingerprintPrivateKey(loginCredentials.getOptionalPrivateKey().get());\n+         String sha1 = sha1PrivateKey(loginCredentials.getOptionalPrivateKey().get());\n          this.toString = String.format(\"%s:rsa[fingerprint(%s),sha1(%s)]@%s:%d\", loginCredentials.getUser(),\n                   fingerPrint, sha1, host, socket.getPort());\n       } else {",
                "deletions": 5
            },
            {
                "sha": "bee444961e386bea3ae6e917922e1f047a4d5f02",
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/AWSEC2ImageParserTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -170,11 +170,11 @@ public void testParseRightScaleImage() {\n \n       assertEquals(\n             new Gson().toJson(Iterables.get(result, 1)),\n-            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"UBUNTU\\\",\\\"arch\\\":\\\"paravirtual\\\",\\\"version\\\":\\\"9.10\\\",\\\"description\\\":\\\"411009282317/RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"is64Bit\\\":true},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"4.5.3_EBS_Alpha\\\",\\\"description\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-c19db6b5\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-c19db6b5\\\",\\\"name\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"paravirtual\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n+            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"UBUNTU\\\",\\\"arch\\\":\\\"paravirtual\\\",\\\"version\\\":\\\"9.10\\\",\\\"description\\\":\\\"411009282317/RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"is64Bit\\\":true},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"4.5.3_EBS_Alpha\\\",\\\"description\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"password\\\":{},\\\"privateKey\\\":{},\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-c19db6b5\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-c19db6b5\\\",\\\"name\\\":\\\"RightImage_Ubuntu_9.10_x64_v4.5.3_EBS_Alpha\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"paravirtual\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n \n       assertEquals(\n             new Gson().toJson(Iterables.get(result, 2)),\n-            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"WINDOWS\\\",\\\"arch\\\":\\\"hvm\\\",\\\"version\\\":\\\"2003\\\",\\\"description\\\":\\\"411009282317/RightImage Windows_2003_i386_v5.4.3\\\",\\\"is64Bit\\\":false},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"5.4.3\\\",\\\"description\\\":\\\"Built by RightScale\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-710c2605\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-710c2605\\\",\\\"name\\\":\\\"RightImage Windows_2003_i386_v5.4.3\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"hvm\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n+            \"{\\\"operatingSystem\\\":{\\\"family\\\":\\\"WINDOWS\\\",\\\"arch\\\":\\\"hvm\\\",\\\"version\\\":\\\"2003\\\",\\\"description\\\":\\\"411009282317/RightImage Windows_2003_i386_v5.4.3\\\",\\\"is64Bit\\\":false},\\\"status\\\":\\\"AVAILABLE\\\",\\\"backendStatus\\\":\\\"available\\\",\\\"version\\\":\\\"5.4.3\\\",\\\"description\\\":\\\"Built by RightScale\\\",\\\"defaultCredentials\\\":{\\\"authenticateSudo\\\":false,\\\"password\\\":{},\\\"privateKey\\\":{},\\\"identity\\\":\\\"root\\\"},\\\"id\\\":\\\"us-east-1/ami-710c2605\\\",\\\"type\\\":\\\"IMAGE\\\",\\\"tags\\\":[],\\\"providerId\\\":\\\"ami-710c2605\\\",\\\"name\\\":\\\"RightImage Windows_2003_i386_v5.4.3\\\",\\\"location\\\":{\\\"scope\\\":\\\"REGION\\\",\\\"id\\\":\\\"us-east-1\\\",\\\"description\\\":\\\"us-east-1\\\",\\\"iso3166Codes\\\":[],\\\"metadata\\\":{}},\\\"userMetadata\\\":{\\\"owner\\\":\\\"411009282317\\\",\\\"rootDeviceType\\\":\\\"ebs\\\",\\\"virtualizationType\\\":\\\"hvm\\\",\\\"hypervisor\\\":\\\"xen\\\"}}\");\n    }\n \n    public void testParseAmznImage() {",
                "deletions": 2
            },
            {
                "sha": "feeaa6684ff3b5e9feb38af250dc56fa7d05bd63",
                "filename": "providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1fb286809e14e77e051ec22d91afe32bd1ecdebd/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/aws-ec2/src/test/java/org/jclouds/aws/ec2/compute/strategy/CreateKeyPairPlacementAndSecurityGroupsAsNeededAndReturnRunOptionsTest.java?ref=1fb286809e14e77e051ec22d91afe32bd1ecdebd",
                "patch": "@@ -463,7 +463,7 @@ public void testCreateNewKeyPairUnlessUserSpecifiedOtherwise_ImportPublicKeyWhen\n \n       // we specify we have a public key we want to use for authentication\n       expect(options.getPublicKey()).andReturn(\"ssh-rsa\").times(2);\n-      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getPrivateKey()).atLeastOnce();\n+      expect(options.getLoginPrivateKey()).andReturn(CREDENTIALS.getOptionalPrivateKey().get()).atLeastOnce();\n \n       // Here, we import the keypair and place it into the cache\n       expect(strategy.importExistingKeyPair.apply(new RegionNameAndPublicKeyMaterial(region, group, \"ssh-rsa\")))",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #1034 from jclouds/fix-comparable-resourcemetadata\n\nfix issue #607: NPE in compareTo method of ResourceMetadataImpl",
        "commit": "https://github.com/apache/jclouds/commit/d9aaf94bd7985c3b1bfe94ef3769593515f0badc",
        "parent": "https://github.com/apache/jclouds/commit/0a35c9b4740c7cddeb6c825044b76e497245d44e",
        "bug_id": "jclouds_58",
        "file": [
            {
                "sha": "e5258faecda5cfdcece6d4bffa1816e1e9eb510a",
                "filename": "core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "blob_url": "https://github.com/apache/jclouds/blob/d9aaf94bd7985c3b1bfe94ef3769593515f0badc/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "raw_url": "https://github.com/apache/jclouds/raw/d9aaf94bd7985c3b1bfe94ef3769593515f0badc/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/domain/internal/ResourceMetadataImpl.java?ref=d9aaf94bd7985c3b1bfe94ef3769593515f0badc",
                "patch": "@@ -20,6 +20,8 @@\n \n import static com.google.common.base.Objects.equal;\n import static com.google.common.base.Preconditions.checkNotNull;\n+import static com.google.common.collect.ComparisonChain.start;\n+import static com.google.common.collect.Ordering.natural;\n \n import java.net.URI;\n import java.util.Map;\n@@ -62,10 +64,10 @@ public ResourceMetadataImpl(@Nullable String providerId, @Nullable String name,\n     * {@inheritDoc}\n     */\n    @Override\n-   public int compareTo(ResourceMetadata<T> o) {\n-      if (getName() == null)\n-         return -1;\n-      return (this == o) ? 0 : getName().compareTo(o.getName());\n+   public int compareTo(ResourceMetadata<T> that) {\n+      return start()\n+            .compare(this.getName(), that.getName(), natural().nullsLast())\n+            .result();\n    }\n \n    /**",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #1014 from ahgittin/fix/cloudstack-niggles\n\nfix cloudstack network NPE, and 2 logging cleanups",
        "commit": "https://github.com/apache/jclouds/commit/39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
        "parent": "https://github.com/apache/jclouds/commit/74c77cacc60600596a67a45a5edea8fe5cc00852",
        "bug_id": "jclouds_59",
        "file": [
            {
                "sha": "0dab654e2cb119b6ee9dea9145c7a59a3ee387b7",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/compute/strategy/CloudStackComputeServiceAdapter.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "patch": "@@ -175,7 +175,7 @@ public CloudStackComputeServiceAdapter(CloudStackClient client, Predicate<String\n       String templateId = template.getImage().getId();\n       String serviceOfferingId = template.getHardware().getId();\n \n-      logger.info(\"serviceOfferingId %s, templateId %s, zoneId %s, options %s%n\", serviceOfferingId, templateId,\n+      logger.debug(\"serviceOfferingId %s, templateId %s, zoneId %s, options %s%n\", serviceOfferingId, templateId,\n          zoneId, options);\n       AsyncCreateResponse job = client.getVirtualMachineClient().deployVirtualMachineInZone(zoneId, serviceOfferingId,\n          templateId, options);",
                "deletions": 1
            },
            {
                "sha": "462061811cd0500194e88a7f47d749a01e3803a1",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/predicates/PublicIPAddressPredicates.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "patch": "@@ -35,12 +35,12 @@\n       private final String networkId;\n \n       public AssociatedWithNetwork(String networkId) {\n-         this.networkId = networkId;\n+         this.networkId = checkNotNull(networkId, \"networkId\");\n       }\n \n       @Override\n       public boolean apply(PublicIPAddress input) {\n-         return checkNotNull(input, \"ipaddress\").getAssociatedNetworkId().equals(networkId);\n+         return networkId.equals(checkNotNull(input, \"ipaddress\").getAssociatedNetworkId());\n       }\n \n       @Override",
                "deletions": 2
            },
            {
                "sha": "7c0ef86c229071cd3fd316331f1f87c7bf62ee9e",
                "filename": "apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "blob_url": "https://github.com/apache/jclouds/blob/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "raw_url": "https://github.com/apache/jclouds/raw/39bf8f98971d2b28c04b022a9b75eae51d4bfbab/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java",
                "status": "modified",
                "changes": 4,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/cloudstack/src/main/java/org/jclouds/cloudstack/suppliers/GetCurrentUser.java?ref=39bf8f98971d2b28c04b022a9b75eae51d4bfbab",
                "patch": "@@ -26,7 +26,6 @@\n import javax.inject.Inject;\n \n import org.jclouds.cloudstack.CloudStackClient;\n-import org.jclouds.cloudstack.domain.Account;\n import org.jclouds.cloudstack.domain.User;\n import org.jclouds.cloudstack.predicates.UserPredicates;\n import org.jclouds.logging.Logger;\n@@ -66,9 +65,6 @@ public User get() {\n                users));\n       }\n \n-      if (currentUser.getAccountType() != Account.Type.USER) {\n-         logger.warn(\"Expecting an user account: %s\", currentUser);\n-      }\n       return currentUser;\n    }\n }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #682 from aledsage/issue-994-vcloud-npe-parsing-image\n\nIssue 994: fix vcloud sax parsing of namespaces",
        "commit": "https://github.com/apache/jclouds/commit/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
        "parent": "https://github.com/apache/jclouds/commit/f3510dc6c576c981fc712471908e590c4c34a828",
        "bug_id": "jclouds_60",
        "file": [
            {
                "sha": "b3e5d350838959775391d1fcc61a5af1235e2e85",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -70,13 +70,13 @@ public Catalog getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"Catalog\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Catalog\")) {\n          catalog = newReferenceType(attributes, VCloudMediaType.CATALOG_XML);\n-      } else if (qName.equals(\"CatalogItem\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"CatalogItem\")) {\n          putReferenceType(contents, attributes);\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          org = newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"add\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"add\".equals(attributes.get(\"rel\"))) {\n          readOnly = false;\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -85,11 +85,11 @@ public void startElement(String uri, String localName, String qName, Attributes\n \n    public void endElement(String uri, String name, String qName) {\n       taskHandler.endElement(uri, name, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"IsPublished\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsPublished\")) {\n          published = Boolean.parseBoolean(currentOrNull());\n       }\n       currentText = new StringBuilder();",
                "deletions": 7
            },
            {
                "sha": "ee4c6067c9cf694c1d99e3adbc4b090d56f557cb",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/CatalogItemHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -53,19 +53,19 @@ public CatalogItem getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"CatalogItem\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"CatalogItem\")) {\n          catalogItem = newReferenceType(attributes);\n-      } else if (qName.equals(\"Entity\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Entity\"))) {\n          entity = newReferenceType(attributes);\n-      } else if (qName.equals(\"Property\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Property\"))) {\n          key = attributes.get(\"key\");\n       }\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      if (qName.equals(\"Description\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, (\"Description\"))) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"Property\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, (\"Property\"))) {\n          properties.put(key, currentOrNull());\n          key = null;\n       }",
                "deletions": 5
            },
            {
                "sha": "2ad6a9bbe30a3254e726e13831c4ec27c1a1b257",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/ErrorHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -40,7 +40,7 @@ public VCloudError getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"Error\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Error\")) {\n          error = Utils.newError(attributes);\n       }\n    }",
                "deletions": 1
            },
            {
                "sha": "3cf072302d23ebc690b7fcf5521947d5628868a0",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java",
                "status": "modified",
                "changes": 76,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/OrgNetworkHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -145,13 +145,13 @@ public OrgNetwork getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"OrgNetwork\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"OrgNetwork\")) {\n          network = newReferenceType(attributes);\n-      } else if (qName.equals(\"FirewallRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallRule\")) {\n          this.inFirewallRule = true;\n-      } else if (qName.equals(\"ParentNetwork\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"ParentNetwork\")) {\n          parentNetwork = newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          org = newReferenceType(attributes);\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -166,38 +166,38 @@ public void startElement(String uri, String localName, String qName, Attributes\n \n    public void endElement(String uri, String name, String qName) {\n       taskHandler.endElement(uri, name, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          if (inFirewallRule)\n             firewallRuleDescription = currentOrNull();\n          else\n             orgDescription = currentOrNull();\n-      } else if (qName.equals(\"FenceMode\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FenceMode\")) {\n          fenceMode = FenceMode.fromValue(currentOrNull());\n-      } else if (qName.equals(\"StartAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"StartAddress\")) {\n          startAddress = currentOrNull();\n-      } else if (qName.equals(\"EndAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"EndAddress\")) {\n          endAddress = currentOrNull();\n-      } else if (qName.equals(\"AllocatedIpAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"AllocatedIpAddress\")) {\n          allocatedIpAddresses.add(currentOrNull());\n-      } else if (qName.equals(\"IpRange\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IpRange\")) {\n          ipRanges.add(new IpRange(startAddress, endAddress));\n          this.startAddress = null;\n          this.endAddress = null;\n-      } else if (qName.equals(\"IsInherited\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsInherited\")) {\n          inherited = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Gateway\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Gateway\")) {\n          gateway = currentOrNull();\n-      } else if (qName.equals(\"Netmask\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Netmask\")) {\n          netmask = currentOrNull();\n-      } else if (qName.equals(\"Dns1\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Dns1\")) {\n          dns1 = currentOrNull();\n-      } else if (qName.equals(\"Dns2\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Dns2\")) {\n          dns2 = currentOrNull();\n-      } else if (qName.equals(\"DnsSuffix\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DnsSuffix\")) {\n          dnsSuffix = currentOrNull();\n-      } else if (qName.equals(\"IpScope\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IpScope\")) {\n          ipScope = new IpScope(inherited, gateway, netmask, dns1, dns2, dnsSuffix, ipRanges, allocatedIpAddresses);\n          this.inherited = false;\n          this.gateway = null;\n@@ -207,38 +207,38 @@ public void endElement(String uri, String name, String qName) {\n          this.dnsSuffix = null;\n          this.ipRanges = Sets.newLinkedHashSet();\n          this.allocatedIpAddresses = Sets.newLinkedHashSet();\n-      } else if (qName.equals(\"IsEnabled\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"IsEnabled\")) {\n          if (inFirewallRule)\n             firewallRuleEnabled = Boolean.parseBoolean(currentOrNull());\n          else\n             serviceEnabled = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"DefaultLeaseTime\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DefaultLeaseTime\")) {\n          defaultLeaseTime = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"MaxLeaseTime\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"MaxLeaseTime\")) {\n          maxLeaseTime = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"DhcpService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DhcpService\")) {\n          this.dhcpService = new DhcpService(serviceEnabled, defaultLeaseTime, maxLeaseTime, Iterables\n                   .getOnlyElement(ipRanges));\n          this.serviceEnabled = false;\n          this.defaultLeaseTime = null;\n          this.maxLeaseTime = null;\n          this.ipRanges = Sets.newLinkedHashSet();\n-      } else if (qName.equals(\"Policy\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Policy\")) {\n          if (inFirewallRule)\n             firewallPolicy = FirewallPolicy.fromValue(currentOrNull());\n          else\n             natPolicy = NatPolicy.fromValue(currentOrNull());\n-      } else if (qName.equals(\"Tcp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Tcp\")) {\n          tcp = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Udp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Udp\")) {\n          udp = Boolean.parseBoolean(currentOrNull());\n-      } else if (qName.equals(\"Protocols\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Protocols\")) {\n          this.protocols = new FirewallProtocols(tcp, udp);\n          this.tcp = false;\n          this.udp = false;\n-      } else if (qName.equals(\"DestinationIp\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"DestinationIp\")) {\n          this.destinationIp = currentOrNull();\n-      } else if (qName.equals(\"FirewallRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallRule\")) {\n          this.inFirewallRule = false;\n          this.firewallRules.add(new FirewallRule(firewallRuleEnabled, firewallRuleDescription, firewallPolicy,\n                   protocols, port, destinationIp));\n@@ -248,13 +248,13 @@ public void endElement(String uri, String name, String qName) {\n          this.protocols = null;\n          this.port = -1;\n          this.destinationIp = null;\n-      } else if (qName.equals(\"FirewallService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"FirewallService\")) {\n          firewallService = new FirewallService(serviceEnabled, firewallRules);\n          this.serviceEnabled = false;\n          this.firewallRules = Lists.newArrayList();\n-      } else if (qName.equals(\"NatType\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"NatType\")) {\n          natType = NatType.fromValue(currentOrNull());\n-      } else if (qName.equals(\"MappingMode\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"MappingMode\")) {\n          mappingMode = MappingMode.fromValue(currentOrNull());\n       } else if (qName.equalsIgnoreCase(\"ExternalIP\")) {\n          externalIP = currentOrNull();\n@@ -264,7 +264,7 @@ public void endElement(String uri, String name, String qName) {\n          vAppScopedLocalId = currentOrNull();\n       } else if (qName.equalsIgnoreCase(\"vmNicId\")) {\n          vmNicId = Integer.parseInt(currentOrNull());\n-      } else if (qName.equals(\"OneToOneVmRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"OneToOneVmRule\")) {\n          natRules.add(new OneToOneVmRule(mappingMode, externalIP, vAppScopedVmId, vmNicId));\n          this.mappingMode = null;\n          this.externalIP = null;\n@@ -278,39 +278,39 @@ public void endElement(String uri, String name, String qName) {\n          internalPort = Integer.parseInt(currentOrNull());\n       } else if (equalsOrSuffix(qName, \"Protocol\")) {\n          natProtocol = NatProtocol.valueOf(currentOrNull());\n-      } else if (qName.equals(\"PortForwardingRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"PortForwardingRule\")) {\n          natRules.add(new PortForwardingRule(externalIP, externalPort, internalIP, internalPort, natProtocol));\n          this.externalIP = null;\n          this.externalPort = -1;\n          this.internalIP = null;\n          this.internalPort = -1;\n          this.natProtocol = null;\n-      } else if (qName.equals(\"VmRule\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VmRule\")) {\n          natRules.add(new VmRule(externalIP, externalPort, vAppScopedLocalId, vmNicId, internalPort, natProtocol));\n          this.externalIP = null;\n          this.externalPort = -1;\n          this.vAppScopedLocalId = null;\n          this.vmNicId = -1;\n          this.internalPort = -1;\n          this.natProtocol = null;\n-      } else if (qName.equals(\"NatService\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"NatService\")) {\n          this.natService = new NatService(serviceEnabled, natType, natPolicy, natRules);\n          this.serviceEnabled = false;\n          this.natType = null;\n          this.natPolicy = null;\n          this.natRules = Lists.newArrayList();\n-      } else if (qName.equals(\"Features\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Features\")) {\n          this.features = new Features(dhcpService, firewallService, natService);\n          this.dhcpService = null;\n          this.firewallService = null;\n          this.natService = null;\n-      } else if (qName.equals(\"Configuration\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Configuration\")) {\n          configuration = new OrgNetworkImpl.ConfigurationImpl(ipScope, parentNetwork, fenceMode, features);\n          this.ipScope = null;\n          this.parentNetwork = null;\n          this.fenceMode = null;\n          this.features = null;\n-      } else if (qName.equals(\"AllowedExternalIpAddress\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"AllowedExternalIpAddress\")) {\n          allowedExternalIpAddresses.add(currentOrNull());\n       }\n       currentText = new StringBuilder();",
                "deletions": 38
            },
            {
                "sha": "8a9ef79be47e40949803d36f8b901de62ad7a06d",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/SupportedVersionsHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.SortedMap;\n \n import org.jclouds.http.functions.ParseSax;\n+import org.jclouds.util.SaxUtils;\n \n import com.google.common.collect.Maps;\n \n@@ -40,11 +41,11 @@\n    }\n \n    public void endElement(String uri, String name, String qName) {\n-      if (qName.equals(\"Version\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Version\")) {\n          version = currentOrNull();\n-      } else if (qName.equals(\"LoginUrl\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"LoginUrl\")) {\n          location = URI.create(currentOrNull());\n-      } else if (qName.equals(\"VersionInfo\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VersionInfo\")) {\n          contents.put(version, location);\n       }\n       currentText = new StringBuilder();",
                "deletions": 3
            },
            {
                "sha": "3a314b02ea4e012c8c297f68fa86c4a427adee76",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/TasksListHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -56,9 +56,9 @@ public TasksList getResult() {\n    @Override\n    public void startElement(String uri, String localName, String qName, Attributes attrs) throws SAXException {\n       Map<String, String> attributes = SaxUtils.cleanseAttributes(attrs);\n-      if (qName.equals(\"TasksList\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"TasksList\")) {\n          resource = Utils.newReferenceType(attributes);\n-      } else if (qName.equals(\"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"self\".equals(attributes.get(\"rel\"))) {\n          resource = Utils.newReferenceType(attributes);\n       } else {\n          taskHandler.startElement(uri, localName, qName, attrs);\n@@ -68,7 +68,7 @@ public void startElement(String uri, String localName, String qName, Attributes\n    @Override\n    public void endElement(String uri, String localName, String qName) throws SAXException {\n       taskHandler.endElement(uri, localName, qName);\n-      if (qName.equals(\"Task\")) {\n+      if (SaxUtils.equalsOrSuffix(qName, \"Task\")) {\n          this.tasks.add(taskHandler.getResult());\n       }\n    }",
                "deletions": 3
            },
            {
                "sha": "dcf12367afd6415e2afe4d8edf277e1be43019ce",
                "filename": "apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/main/java/org/jclouds/vcloud/xml/VmHandler.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -113,12 +113,12 @@ public void startElement(String uri, String localName, String qName, Attributes\n          guestCustomizationHandler.startElement(uri, localName, qName, attrs);\n       } else if (inTasks) {\n          taskHandler.startElement(uri, localName, qName, attrs);\n-      } else if (qName.equals(\"Vm\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Vm\")) {\n          vm = newReferenceType(attributes);\n          String status = attributes.get(\"status\");\n          if (status != null)\n             this.status = Status.fromValue(Integer.parseInt(status));\n-      } else if (qName.equals(\"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Link\") && \"up\".equals(attributes.get(\"rel\"))) {\n          vdc = newReferenceType(attributes);\n       }\n    }\n@@ -150,9 +150,9 @@ public void endElement(String uri, String name, String qName) {\n          networkConnectionSectionHandler.endElement(uri, name, qName);\n       } else if (inTasks) {\n          taskHandler.endElement(uri, name, qName);\n-      } else if (qName.equals(\"Description\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"Description\")) {\n          description = currentOrNull();\n-      } else if (qName.equals(\"VAppScopedLocalId\")) {\n+      } else if (SaxUtils.equalsOrSuffix(qName, \"VAppScopedLocalId\")) {\n          vAppScopedLocalId = currentOrNull();\n       }\n       currentText = new StringBuilder();",
                "deletions": 4
            },
            {
                "sha": "b5050e5945130499c07ce052f0c1c5b0d0fd90fd",
                "filename": "apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/java/org/jclouds/vcloud/xml/CatalogItemHandlerTest.java?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -59,4 +59,30 @@ public void testApplyInputStream() {\n                )));\n \n    }\n+   \n+   public void testApplyInputStreamWithNamespaceUsingVcloud() {\n+      InputStream is = getClass().getResourceAsStream(\"/catalogItem-carrenza-with-vcloud-namespace.xml\");\n+      Injector injector = Guice.createInjector(new SaxParserModule());\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      CatalogItem result = factory.create(injector.getInstance(CatalogItemHandler.class)).parse(is);\n+\n+      assertEquals(result, new CatalogItemImpl(\"ubuntu10.10x64\", \n+               URI.create(\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"), \n+               null, new ReferenceTypeImpl(\"ubuntu10.10x64\", \"application/vnd.vmware.vcloud.vAppTemplate+xml\", \n+                        URI.create(\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\")),\n+               ImmutableSortedMap.<String,String>of()));\n+   }\n+   \n+   public void testApplyInputStreamWithNamespaceUsingDefault() {\n+      InputStream is = getClass().getResourceAsStream(\"/catalogItem-carrenza-with-default-namespace.xml\");\n+      Injector injector = Guice.createInjector(new SaxParserModule());\n+      Factory factory = injector.getInstance(ParseSax.Factory.class);\n+      CatalogItem result = factory.create(injector.getInstance(CatalogItemHandler.class)).parse(is);\n+\n+      assertEquals(result, new CatalogItemImpl(\"ubuntu10.10x64\", \n+               URI.create(\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"), \n+               null, new ReferenceTypeImpl(\"ubuntu10.10x64\", \"application/vnd.vmware.vcloud.vAppTemplate+xml\", \n+                        URI.create(\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\")),\n+               ImmutableSortedMap.<String,String>of()));\n+   }\n }",
                "deletions": 0
            },
            {
                "sha": "88fec20ef4460db07cb0ac44a47aa5c505930772",
                "filename": "apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml",
                "status": "added",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/catalogItem-carrenza-with-default-namespace.xml?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<CatalogItem xmlns=\"http://www.vmware.com/vcloud/v1\" name=\"ubuntu10.10x64\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.vmware.com/vcloud/v1 http://myvdc.carrenza.net/api/v1.0/schema/master.xsd\">\n+    <Link rel=\"up\" type=\"application/vnd.vmware.vcloud.catalog+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalog/5d2c147a-d26d-487a-9a05-577ee175186b\"/>\n+    <Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <Link rel=\"remove\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <Description> </Description>\n+    <Entity type=\"application/vnd.vmware.vcloud.vAppTemplate+xml\" name=\"ubuntu10.10x64\" href=\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\"/>\n+</CatalogItem>",
                "deletions": 0
            },
            {
                "sha": "917c143b95a39f66fa743777afde7f5a756f1cd7",
                "filename": "apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "blob_url": "https://github.com/apache/jclouds/blob/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "raw_url": "https://github.com/apache/jclouds/raw/1c6e2c64d3a594bc7b47f2ba714a80c7790a20db/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml",
                "status": "added",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/vcloud/src/test/resources/catalogItem-carrenza-with-vcloud-namespace.xml?ref=1c6e2c64d3a594bc7b47f2ba714a80c7790a20db",
                "patch": "@@ -0,0 +1,8 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<vcloud:CatalogItem xmlns:vcloud=\"http://www.vmware.com/vcloud/v1\" name=\"ubuntu10.10x64\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.vmware.com/vcloud/v1 http://myvdc.carrenza.net/api/v1.0/schema/master.xsd\">\n+    <vcloud:Link rel=\"up\" type=\"application/vnd.vmware.vcloud.catalog+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalog/5d2c147a-d26d-487a-9a05-577ee175186b\"/>\n+    <vcloud:Link rel=\"edit\" type=\"application/vnd.vmware.vcloud.catalogItem+xml\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <vcloud:Link rel=\"remove\" href=\"https://myvdc.carrenza.net/api/v1.0/catalogItem/ecd4d3a0-0d12-4195-a6d2-14cdf9f925a3\"/>\n+    <vcloud:Description> </vcloud:Description>\n+    <vcloud:Entity type=\"application/vnd.vmware.vcloud.vAppTemplate+xml\" name=\"ubuntu10.10x64\" href=\"https://myvdc.carrenza.net/api/v1.0/vAppTemplate/vappTemplate-123766ea-2b55-482c-8adf-735ab1952834\"/>\n+</vcloud:CatalogItem>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #655 from hhrasna/patch-1\n\nDon't throw NPE if EC2 image architecture is null",
        "commit": "https://github.com/apache/jclouds/commit/5ce29e09314c971fab0322ef9d843458f427faa4",
        "parent": "https://github.com/apache/jclouds/commit/07c2c2472124c0c4d5747438b353665c124a5c51",
        "bug_id": "jclouds_61",
        "file": [
            {
                "sha": "c3e85927994293f81d136857db7b5be33137a2ff",
                "filename": "apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "blob_url": "https://github.com/apache/jclouds/blob/5ce29e09314c971fab0322ef9d843458f427faa4/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "raw_url": "https://github.com/apache/jclouds/raw/5ce29e09314c971fab0322ef9d843458f427faa4/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/ec2/src/main/java/org/jclouds/ec2/domain/Image.java?ref=5ce29e09314c971fab0322ef9d843458f427faa4",
                "patch": "@@ -78,7 +78,7 @@ public Image(String region, Architecture architecture, @Nullable String name, @N\n             @Nullable String ramdiskId, RootDeviceType rootDeviceType, @Nullable String rootDeviceName,\n             Map<String, EbsBlockDevice> ebsBlockDevices, VirtualizationType virtualizationType, Hypervisor hypervisor) {\n       this.region = checkNotNull(region, \"region\");\n-      this.architecture = checkNotNull(architecture, \"architecture\");\n+      this.architecture = architecture;\n       this.imageId = checkNotNull(imageId, \"imageId\");\n       this.name = name;\n       this.description = description;",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Merge pull request #61 from dralves/master\n\nIssue 676: Simple change to avoid NPE when tranforming nova.domain.Image into compute.domain.Image",
        "commit": "https://github.com/apache/jclouds/commit/de19f777a6f8d6b3af26c32ef3b860767c58568a",
        "parent": "https://github.com/apache/jclouds/commit/c5e233c163af26b8f5884708caf3d64052b3cfe7",
        "bug_id": "jclouds_62",
        "file": [
            {
                "sha": "125584360a84018f9e14c642823346c39ccec044",
                "filename": "apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "blob_url": "https://github.com/apache/jclouds/blob/de19f777a6f8d6b3af26c32ef3b860767c58568a/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "raw_url": "https://github.com/apache/jclouds/raw/de19f777a6f8d6b3af26c32ef3b860767c58568a/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/apis/nova/src/main/java/org/jclouds/openstack/nova/compute/functions/NovaImageToImage.java?ref=de19f777a6f8d6b3af26c32ef3b860767c58568a",
                "patch": "@@ -46,7 +46,7 @@ public Image apply(org.jclouds.openstack.nova.domain.Image from) {\n       builder.ids(from.getId() + \"\");\n       builder.name(from.getName() != null ? from.getName() : \"unspecified\");\n       builder.description(from.getName() != null ? from.getName() : \"unspecified\");\n-      builder.version(from.getUpdated().getTime() + \"\");\n+      builder.version(from.getUpdated() != null ? from.getUpdated().getTime() + \"\" : \"-1\");\n       builder.operatingSystem(imageToOs.apply(from)); //image name may not represent the OS type\n       builder.defaultCredentials(new Credentials(\"root\", null));\n       builder.uri(from.getURI());",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 89: fixed npe in google appengine live\n\ngit-svn-id: http://jclouds.googlecode.com/svn/trunk@2592 3d8758e0-26b5-11de-8745-db77d3ebf521",
        "commit": "https://github.com/apache/jclouds/commit/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4",
        "parent": "https://github.com/apache/jclouds/commit/69b247cbf49b59895f2fdee940fcde113191ffaa",
        "bug_id": "jclouds_63",
        "file": [
            {
                "sha": "9b094e6febb70eedd3857e6d1ec3a72e00b861fd",
                "filename": "demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringAppConfig.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringAppConfig.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringAppConfig.java",
                "status": "modified",
                "changes": 158,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringAppConfig.java?ref=3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4",
                "patch": "@@ -13,6 +13,7 @@\n \r\n import javax.annotation.PostConstruct;\r\n import javax.annotation.PreDestroy;\r\n+import javax.inject.Singleton;\r\n \r\n import org.jclouds.blobstore.BlobStoreContext;\r\n import org.jclouds.blobstore.BlobStoreContextBuilder;\r\n@@ -37,89 +38,92 @@\n  * @see SpringServletConfig\r\n  */\r\n @Configuration\r\n+@Singleton\r\n public class SpringAppConfig implements ResourceLoaderAware {\r\n-    /*\r\n-     * The call to TwitterContextFactory.createContext in initialize()\r\n-     * must be carried out before the servlet context loads, otherwise the\r\n-     * GAE will throw an access exception.\r\n-     * For this reason, this code cannot be in the default servlet context\r\n-     * loaded by the DispatcherServlet, but is executed in the root application\r\n-     * context (which is processed by a listener).\r\n-     */\r\n-    \r\n-    private final Properties props = new Properties();\r\n+   /*\r\n+    * The call to TwitterContextFactory.createContext in initialize() must be carried out before the\r\n+    * servlet context loads, otherwise the GAE will throw an access exception. For this reason, this\r\n+    * code cannot be in the default servlet context loaded by the DispatcherServlet, but is executed\r\n+    * in the root application context (which is processed by a listener).\r\n+    */\r\n \r\n-    Map<String, BlobStoreContext<?, ?>> providerTypeToBlobStoreMap;\r\n-    TwitterClient twitterClient;\r\n-    String container;\r\n+   private final Properties props = new Properties();\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n-    @PostConstruct\r\n-    public void initialize() {\r\n-        // shared across all blobstores and used to retrieve tweets\r\n-        twitterClient = TwitterContextFactory.createContext(props,\r\n-                new GaeHttpCommandExecutorServiceModule()).getApi();\r\n+   Map<String, BlobStoreContext<?, ?>> providerTypeToBlobStoreMap;\r\n+   TwitterClient twitterClient;\r\n+   String container;\r\n \r\n-        // common namespace for storing tweets.\r\n-        container = checkNotNull(props.getProperty(PROPERTY_TWEETSTORE_CONTAINER),\r\n-                                 PROPERTY_TWEETSTORE_CONTAINER);\r\n-        ImmutableList<String> contextBuilderClassNames = ImmutableList.<String>of(\r\n-                checkNotNull(props.getProperty(PROPERTY_BLOBSTORE_CONTEXTBUILDERS),\r\n-                             PROPERTY_BLOBSTORE_CONTEXTBUILDERS)\r\n-                 .split(\",\"));\r\n+   private boolean initializing;\r\n \r\n-        // instantiate and store references to all blobstores by provider name\r\n-        providerTypeToBlobStoreMap = Maps.newHashMap();\r\n-        for (String className : contextBuilderClassNames) {\r\n-            Class<BlobStoreContextBuilder<?, ?>> builderClass;\r\n-            Constructor<BlobStoreContextBuilder<?, ?>> constructor;\r\n-            String name;\r\n-            BlobStoreContext<?, ?> context;\r\n-            try {\r\n-                builderClass = (Class<BlobStoreContextBuilder<?, ?>>) Class.forName(className);\r\n-                name = builderClass.getSimpleName().replaceAll(\"BlobStoreContextBuilder\", \"\");\r\n-                constructor = builderClass.getConstructor(Properties.class);\r\n-                context = constructor.newInstance(props)\r\n-                          .withModules(new GaeHttpCommandExecutorServiceModule())\r\n-                          .buildContext();\r\n-            } catch (Exception e) {\r\n-                throw new RuntimeException(\"error instantiating \" + className, e);\r\n-            }\r\n-            providerTypeToBlobStoreMap.put(name, context);\r\n-        }\r\n+   @SuppressWarnings(\"unchecked\")\r\n+   @PostConstruct\r\n+   public void initialize() {\r\n+      if (initializing)\r\n+         return;\r\n+      initializing = true;\r\n+      // shared across all blobstores and used to retrieve tweets\r\n+      twitterClient = TwitterContextFactory.createContext(props,\r\n+               new GaeHttpCommandExecutorServiceModule()).getApi();\r\n \r\n-        // get a queue for submitting store tweet requests\r\n-        Queue queue = QueueFactory.getQueue(\"twitter\");\r\n-        // submit a job to store tweets for each configured blobstore\r\n-        for (String name : providerTypeToBlobStoreMap.keySet()) {\r\n-            queue.add(url(\"/store/do\").header(\"context\", name).method(Method.GET));\r\n-        }\r\n-    }\r\n+      // common namespace for storing tweets.\r\n+      container = checkNotNull(props.getProperty(PROPERTY_TWEETSTORE_CONTAINER),\r\n+               PROPERTY_TWEETSTORE_CONTAINER);\r\n+      ImmutableList<String> contextBuilderClassNames = ImmutableList.<String> of(checkNotNull(\r\n+               props.getProperty(PROPERTY_BLOBSTORE_CONTEXTBUILDERS),\r\n+               PROPERTY_BLOBSTORE_CONTEXTBUILDERS).split(\",\"));\r\n \r\n-    @PreDestroy\r\n-    public void destroy() {\r\n-        for (BlobStoreContext<?, ?> context : providerTypeToBlobStoreMap.values()) {\r\n-            context.close();\r\n-        }\r\n-    }\r\n+      // instantiate and store references to all blobstores by provider name\r\n+      providerTypeToBlobStoreMap = Maps.newHashMap();\r\n+      for (String className : contextBuilderClassNames) {\r\n+         Class<BlobStoreContextBuilder<?, ?>> builderClass;\r\n+         Constructor<BlobStoreContextBuilder<?, ?>> constructor;\r\n+         String name;\r\n+         BlobStoreContext<?, ?> context;\r\n+         try {\r\n+            builderClass = (Class<BlobStoreContextBuilder<?, ?>>) Class.forName(className);\r\n+            name = builderClass.getSimpleName().replaceAll(\"BlobStoreContextBuilder\", \"\");\r\n+            constructor = builderClass.getConstructor(Properties.class);\r\n+            context = constructor.newInstance(props).withModules(\r\n+                     new GaeHttpCommandExecutorServiceModule()).buildContext();\r\n+         } catch (Exception e) {\r\n+            throw new RuntimeException(\"error instantiating \" + className, e);\r\n+         }\r\n+         providerTypeToBlobStoreMap.put(name, context);\r\n+      }\r\n \r\n-    /*\r\n-     * (non-Javadoc)\r\n-     * \r\n-     * @see\r\n-     * org.springframework.context.ResourceLoaderAware#setResourceLoader(org\r\n-     * .springframework.core.io.ResourceLoader)\r\n-     */\r\n-    @Override\r\n-    public void setResourceLoader(ResourceLoader resourceLoader) {\r\n-        InputStream input = null;\r\n-        try {\r\n-            input = resourceLoader.getResource(\"/WEB-INF/jclouds.properties\").getInputStream();\r\n-            props.load(input);\r\n-        } catch (IOException e) {\r\n-            throw new RuntimeException(e);\r\n-        } finally {\r\n-            Closeables.closeQuietly(input);\r\n-        }        \r\n-    }\r\n+      // get a queue for submitting store tweet requests\r\n+      Queue queue = QueueFactory.getQueue(\"twitter\");\r\n+      // submit a job to store tweets for each configured blobstore\r\n+      for (String name : providerTypeToBlobStoreMap.keySet()) {\r\n+         queue.add(url(\"/store/do\").header(\"context\", name).method(Method.GET));\r\n+      }\r\n+   }\r\n+\r\n+   @PreDestroy\r\n+   public void destroy() {\r\n+      for (BlobStoreContext<?, ?> context : providerTypeToBlobStoreMap.values()) {\r\n+         context.close();\r\n+      }\r\n+   }\r\n+\r\n+   /*\r\n+    * (non-Javadoc)\r\n+    * \r\n+    * @see org.springframework.context.ResourceLoaderAware#setResourceLoader(org\r\n+    * .springframework.core.io.ResourceLoader)\r\n+    */\r\n+   @Override\r\n+   public void setResourceLoader(ResourceLoader resourceLoader) {\r\n+      InputStream input = null;\r\n+      try {\r\n+         input = resourceLoader.getResource(\"/WEB-INF/jclouds.properties\").getInputStream();\r\n+         props.load(input);\r\n+         if (!initializing)\r\n+            initialize();\r\n+      } catch (IOException e) {\r\n+         throw new RuntimeException(e);\r\n+      } finally {\r\n+         Closeables.closeQuietly(input);\r\n+      }\r\n+   }\r\n }\r",
                "deletions": 77
            },
            {
                "sha": "5bc64c6ed658b0bd4289ae862bfcc67fd6eea23a",
                "filename": "demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringServletConfig.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringServletConfig.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringServletConfig.java",
                "status": "modified",
                "changes": 132,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/config/SpringServletConfig.java?ref=3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4",
                "patch": "@@ -1,21 +1,33 @@\n+/**\r\n+ *\r\n+ * Copyright (C) 2009 Cloud Conscious, LLC. <info@cloudconscious.com>\r\n+ *\r\n+ * ====================================================================\r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ *\r\n+ * http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ * ====================================================================\r\n+ */\r\n package org.jclouds.demo.tweetstore.config;\r\n \r\n import static com.google.common.base.Preconditions.checkNotNull;\r\n \r\n import java.util.Map;\r\n \r\n-import javax.inject.Inject;\r\n-import javax.servlet.Servlet;\r\n-import javax.servlet.ServletConfig;\r\n-import javax.servlet.ServletException;\r\n-\r\n import org.jclouds.demo.tweetstore.controller.AddTweetsController;\r\n import org.jclouds.demo.tweetstore.controller.StoreTweetsController;\r\n import org.jclouds.demo.tweetstore.functions.ServiceToStoredTweetStatuses;\r\n-import org.springframework.beans.factory.BeanCreationException;\r\n import org.springframework.context.annotation.Bean;\r\n import org.springframework.context.annotation.Configuration;\r\n-import org.springframework.web.context.ServletConfigAware;\r\n+import org.springframework.web.context.WebApplicationContext;\r\n import org.springframework.web.servlet.HandlerAdapter;\r\n import org.springframework.web.servlet.HandlerMapping;\r\n import org.springframework.web.servlet.handler.SimpleServletHandlerAdapter;\r\n@@ -24,74 +36,54 @@\n import com.google.common.collect.Maps;\r\n \r\n /**\r\n- * Creates servlets (using resources from the {@link SpringAppConfig}) and mappings.\r\n+ * Creates servlets,(using resources from the {@link SpringAppConfig}) and mappings.\r\n  * \r\n  * @author Andrew Phillips\r\n- * @see SpringAppConfig\r\n  */\r\n @Configuration\r\n-public class SpringServletConfig implements ServletConfigAware {\r\n-    private ServletConfig servletConfig;\r\n-    \r\n-    @Inject\r\n-    private SpringAppConfig appConfig;\r\n-    \r\n-    @Bean\r\n-    public StoreTweetsController storeTweetsController() {\r\n-        StoreTweetsController controller = new StoreTweetsController(appConfig.providerTypeToBlobStoreMap, \r\n-                appConfig.container, appConfig.twitterClient);\r\n-        injectServletConfig(controller);        \r\n-        return controller;\r\n-    }\r\n+public class SpringServletConfig {\r\n \r\n-    @Bean\r\n-    public AddTweetsController addTweetsController() {\r\n-        AddTweetsController controller = new AddTweetsController(appConfig.providerTypeToBlobStoreMap,\r\n-                serviceToStoredTweetStatuses());\r\n-        injectServletConfig(controller);\r\n-        return controller;\r\n-    }\r\n-    \r\n-    private void injectServletConfig(Servlet servlet) {\r\n-        checkNotNull(servletConfig);\r\n-        try {\r\n-            servlet.init(servletConfig);\r\n-        } catch (ServletException exception) {\r\n-            throw new BeanCreationException(\"Unable to instantiate \" + servlet, exception);\r\n-        }\r\n-    }\r\n+   @Bean\r\n+   public StoreTweetsController storeTweetsController(SpringAppConfig appConfig) {\r\n+      return new StoreTweetsController(checkNotNull(appConfig.providerTypeToBlobStoreMap,\r\n+               \"contexts\"), checkNotNull(appConfig.container, \"container\"), checkNotNull(\r\n+               appConfig.twitterClient, \"twitterClient\"));\r\n+   }\r\n \r\n-    @Bean\r\n-    ServiceToStoredTweetStatuses serviceToStoredTweetStatuses() {\r\n-        return new ServiceToStoredTweetStatuses(appConfig.providerTypeToBlobStoreMap,\r\n-                appConfig.container);\r\n-    }\r\n-    \r\n-    @Bean\r\n-    public HandlerMapping handlerMapping() {\r\n-        SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\r\n-        Map<String, Object> urlMap = Maps.newHashMapWithExpectedSize(2);\r\n-        urlMap.put(\"/store/*\", storeTweetsController());\r\n-        urlMap.put(\"/tweets/*\", addTweetsController());\r\n-        mapping.setUrlMap(urlMap);\r\n-        /*\r\n-         * \"/store\" and \"/tweets\" are part of the servlet mapping and thus stripped\r\n-         * by the mapping if using default settings.\r\n-         */\r\n-        mapping.setAlwaysUseFullPath(true);\r\n-        return mapping;\r\n-    }\r\n-    \r\n-    @Bean\r\n-    public HandlerAdapter servletHandlerAdapter() {\r\n-        return new SimpleServletHandlerAdapter();\r\n-    }\r\n+   @Bean\r\n+   public AddTweetsController addTweetsController(SpringAppConfig appConfig) {\r\n+      return new AddTweetsController(\r\n+               checkNotNull(appConfig.providerTypeToBlobStoreMap, \"contexts\"),\r\n+               serviceToStoredTweetStatuses(appConfig));\r\n+   }\r\n \r\n-    /* (non-Javadoc)\r\n-     * @see org.springframework.web.context.ServletConfigAware#setServletConfig(javax.servlet.ServletConfig)\r\n-     */\r\n-    @Override\r\n-    public void setServletConfig(ServletConfig servletConfig) {\r\n-        this.servletConfig = servletConfig;\r\n-    }\r\n+   @Bean\r\n+   ServiceToStoredTweetStatuses serviceToStoredTweetStatuses(SpringAppConfig appConfig) {\r\n+      return new ServiceToStoredTweetStatuses(checkNotNull(appConfig.providerTypeToBlobStoreMap,\r\n+               \"contexts\"), checkNotNull(appConfig.container, \"container\"));\r\n+   }\r\n+\r\n+   @Bean\r\n+   public HandlerMapping handlerMapping(AddTweetsController add, StoreTweetsController store,\r\n+            WebApplicationContext context) {\r\n+      SimpleUrlHandlerMapping mapping = new SimpleUrlHandlerMapping();\r\n+      mapping.setServletContext(context.getServletContext());\r\n+      Map<String, Object> urlMap = Maps.newHashMapWithExpectedSize(2);\r\n+      urlMap.put(\"/store/*\", checkNotNull(store, \"store\"));\r\n+      add.setServletContext(checkNotNull(context.getServletContext(), \"servletContext\"));\r\n+      urlMap.put(\"/tweets/*\", checkNotNull(add, \"add\"));\r\n+      mapping.setUrlMap(urlMap);\r\n+      /*\r\n+       * \"/store\" and \"/tweets\" are part of the servlet mapping and thus stripped by the mapping if\r\n+       * using default settings.\r\n+       */\r\n+      mapping.setAlwaysUseFullPath(true);\r\n+      return mapping;\r\n+   }\r\n+\r\n+   @Bean\r\n+   public HandlerAdapter servletHandlerAdapter() {\r\n+      return new SimpleServletHandlerAdapter();\r\n+   }\r\n }\r\n+\r",
                "deletions": 70
            },
            {
                "sha": "261fa659a4028c78b5ba0d1b7167cb551522cd8e",
                "filename": "demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/controller/AddTweetsController.java",
                "blob_url": "https://github.com/apache/jclouds/blob/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/controller/AddTweetsController.java",
                "raw_url": "https://github.com/apache/jclouds/raw/3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/controller/AddTweetsController.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/demos/gae-tweetstore-spring/src/main/java/org/jclouds/demo/tweetstore/controller/AddTweetsController.java?ref=3087cce5404d1ecbb76c22c9c77a40dd0d1d4ff4",
                "patch": "@@ -69,8 +69,9 @@\n    @Inject\n    public AddTweetsController(Map<String, BlobStoreContext<?, ?>> contexts,\n             ServiceToStoredTweetStatuses blobStoreContextToContainerResult) {\n-      this.contexts = contexts;\n-      this.blobStoreContextToContainerResult = blobStoreContextToContainerResult;\n+      this.contexts = checkNotNull(contexts, \"contexts\");\n+      this.blobStoreContextToContainerResult = checkNotNull(blobStoreContextToContainerResult,\n+               \"blobStoreContextToContainerResult\");\n    }\n \n    @Override\n@@ -100,13 +101,14 @@ void addMyTweetsToRequest(HttpServletRequest request) throws InterruptedExceptio\n       return statuses;\n    }\n \n+   @Inject\n    @Override\n    public void setServletContext(ServletContext context) {\n       this.servletContext = context;\n    }\n \n    @Override\n    public ServletContext getServletContext() {\n-      return checkNotNull(servletContext, \"servletContext\");\n+      return (servletContext != null) ? servletContext : super.getServletContext();\n    }\n }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Issue 130: fixed npe when there is no ip address\n\ngit-svn-id: http://jclouds.googlecode.com/svn/trunk@2465 3d8758e0-26b5-11de-8745-db77d3ebf521",
        "commit": "https://github.com/apache/jclouds/commit/6bd1663f3d0ee6ced52c4581f738a47ff18ee1a0",
        "parent": "https://github.com/apache/jclouds/commit/dfc519c79cab4426768566b8ca27d346b08192ad",
        "bug_id": "jclouds_64",
        "file": [
            {
                "sha": "97b91aa5287e0fa49709af9817b02d8fb65c35d3",
                "filename": "aws/core/src/main/java/org/jclouds/aws/ec2/compute/EC2ComputeService.java",
                "blob_url": "https://github.com/apache/jclouds/blob/6bd1663f3d0ee6ced52c4581f738a47ff18ee1a0/aws/core/src/main/java/org/jclouds/aws/ec2/compute/EC2ComputeService.java",
                "raw_url": "https://github.com/apache/jclouds/raw/6bd1663f3d0ee6ced52c4581f738a47ff18ee1a0/aws/core/src/main/java/org/jclouds/aws/ec2/compute/EC2ComputeService.java",
                "status": "modified",
                "changes": 32,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/aws/core/src/main/java/org/jclouds/aws/ec2/compute/EC2ComputeService.java?ref=6bd1663f3d0ee6ced52c4581f738a47ff18ee1a0",
                "patch": "@@ -73,11 +73,14 @@\n    protected Logger logger = Logger.NULL;\r\n    private final EC2Client ec2Client;\r\n    private final Predicate<RunningInstance> instanceStateRunning;\r\n+   private final RunningInstanceToServerMetadata runningInstanceToServerMetadata;\r\n \r\n    @Inject\r\n-   public EC2ComputeService(EC2Client tmClient, Predicate<RunningInstance> instanceStateRunning) {\r\n+   public EC2ComputeService(EC2Client tmClient, Predicate<RunningInstance> instanceStateRunning,\r\n+            RunningInstanceToServerMetadata runningInstanceToServerMetadata) {\r\n       this.ec2Client = tmClient;\r\n       this.instanceStateRunning = instanceStateRunning;\r\n+      this.runningInstanceToServerMetadata = runningInstanceToServerMetadata;\r\n    }\r\n \r\n    private Map<Image, String> imageAmiIdMap = ImmutableMap.<Image, String> builder().put(\r\n@@ -89,7 +92,7 @@ public EC2ComputeService(EC2Client tmClient, Predicate<RunningInstance> instance\n    private Map<Profile, InstanceType> profileInstanceTypeMap = ImmutableMap\r\n             .<Profile, InstanceType> builder().put(Profile.SMALLEST, InstanceType.M1_SMALL).build();\r\n \r\n-   private Map<InstanceState, ServerState> instanceToServerState = ImmutableMap\r\n+   private static Map<InstanceState, ServerState> instanceToServerState = ImmutableMap\r\n             .<InstanceState, ServerState> builder().put(InstanceState.PENDING, ServerState.PENDING)\r\n             .put(InstanceState.RUNNING, ServerState.RUNNING).put(InstanceState.SHUTTING_DOWN,\r\n                      ServerState.PENDING).put(InstanceState.TERMINATED, ServerState.TERMINATED)\r\n@@ -175,10 +178,27 @@ private void createSecurityGroup(String name, int... ports) {\n    @Override\r\n    public ServerMetadata getServerMetadata(String id) {\r\n       RunningInstance runningInstance = getRunningInstance(id);\r\n-      return new ServerMetadataImpl(runningInstance.getInstanceId(), runningInstance.getKeyName(),\r\n-               instanceToServerState.get(runningInstance.getInstanceState()), ImmutableSet\r\n-                        .<InetAddress> of(runningInstance.getIpAddress()), ImmutableSet\r\n-                        .<InetAddress> of(runningInstance.getPrivateIpAddress()), 22, LoginType.SSH);\r\n+      return runningInstanceToServerMetadata.apply(runningInstance);\r\n+   }\r\n+\r\n+   @Singleton\r\n+   private static class RunningInstanceToServerMetadata implements\r\n+            Function<RunningInstance, ServerMetadata> {\r\n+\r\n+      @Override\r\n+      public ServerMetadata apply(RunningInstance from) {\r\n+         return new ServerMetadataImpl(from.getInstanceId(), from.getKeyName(),\r\n+                  instanceToServerState.get(from.getInstanceState()), nullSafeSet(from\r\n+                           .getIpAddress()), nullSafeSet(from.getPrivateIpAddress()), 22,\r\n+                  LoginType.SSH);\r\n+      }\r\n+\r\n+      Set<InetAddress> nullSafeSet(InetAddress in) {\r\n+         if (in == null) {\r\n+            return ImmutableSet.<InetAddress> of();\r\n+         }\r\n+         return ImmutableSet.<InetAddress> of(in);\r\n+      }\r\n    }\r\n \r\n    private RunningInstance getRunningInstance(String id) {\r",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "instrumented so that NPE contain the XML content it arised from\n\ngit-svn-id: http://jclouds.googlecode.com/svn/trunk@1474 3d8758e0-26b5-11de-8745-db77d3ebf521",
        "commit": "https://github.com/apache/jclouds/commit/8508c37a3b59d38cdcc44eb1c117f830895ab03c",
        "parent": "https://github.com/apache/jclouds/commit/fd08265c67a6a38d02fd54289973e19f163e31a2",
        "bug_id": "jclouds_65",
        "file": [
            {
                "sha": "8e70f69b9f4bb5cceb8eb33fcfefe4b797adebd2",
                "filename": "core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "blob_url": "https://github.com/apache/jclouds/blob/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "raw_url": "https://github.com/apache/jclouds/raw/8508c37a3b59d38cdcc44eb1c117f830895ab03c/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/core/src/main/java/org/jclouds/http/commands/callables/xml/ParseSax.java?ref=8508c37a3b59d38cdcc44eb1c117f830895ab03c",
                "patch": "@@ -100,7 +100,8 @@ private void parseAndCloseStream(InputStream xml, ContentHandler handler) throws\n             message.append(\"\\n\").append(response);\n          }\n          logger.error(e, message.toString());\n-         Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n+         if (!(e instanceof NullPointerException))\n+            Utils.<HttpException> rethrowIfRuntimeOrSameType(e);\n          throw new HttpException(message.toString(), e);\n       } finally {\n          IOUtils.closeQuietly(xml);",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "Allow GCS object nullable owner\n\nThis addresses a NullPointerException seen while listing a bucket:\n\n{statusCode=200, message=OK, headers={X-Frame-Options=[SAMEORIGIN], Server=[GSE], Cache-Control=[private, max-age=0, must-revalidate, no-transform], X-Content-Type-Options=[nosniff], Vary=[X-Origin, Origin], X-XSS-Protection=[1; mode=block], Date=[Fri, 29 May 2015 21:43:51 GMT], Alternate-Protocol=[443:quic,p=1]}, payload=[content=true, contentMetadata=[contentDisposition=null, contentEncoding=null, contentLanguage=null, contentLength=760, contentMD5=null, contentType=application/json; charset=UTF-8, expires=Fri May 29 14:43:51 PDT 2015], written=false]}",
        "commit": "https://github.com/apache/jclouds/commit/fb4c65141ef13f1c199078cf866875d0854750f3",
        "parent": "https://github.com/apache/jclouds/commit/3d9258f75adf8f0b8258c14c88c1a73316f7dad3",
        "bug_id": "jclouds_66",
        "file": [
            {
                "sha": "d63971097f65b129bb3f3bee9174461ad159a650",
                "filename": "providers/google-cloud-storage/src/main/java/org/jclouds/googlecloudstorage/domain/GoogleCloudStorageObject.java",
                "blob_url": "https://github.com/apache/jclouds/blob/fb4c65141ef13f1c199078cf866875d0854750f3/providers/google-cloud-storage/src/main/java/org/jclouds/googlecloudstorage/domain/GoogleCloudStorageObject.java",
                "raw_url": "https://github.com/apache/jclouds/raw/fb4c65141ef13f1c199078cf866875d0854750f3/providers/google-cloud-storage/src/main/java/org/jclouds/googlecloudstorage/domain/GoogleCloudStorageObject.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/providers/google-cloud-storage/src/main/java/org/jclouds/googlecloudstorage/domain/GoogleCloudStorageObject.java?ref=fb4c65141ef13f1c199078cf866875d0854750f3",
                "patch": "@@ -59,7 +59,7 @@\n    @Nullable public abstract String contentLanguage();\n    @Nullable public abstract String cacheControl();\n    public abstract List<ObjectAccessControls> acl();\n-   public abstract Owner owner();\n+   @Nullable public abstract Owner owner();\n    @Nullable public abstract String crc32c();\n    @Nullable public abstract Integer componentCount();\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jclouds",
        "message": "fixes in location containment predicate.\nthe grouping of and's and or's was wrong, causing an NPE in cloudstack tests when investigating parents;\nthe direction of containment (input should be descendent of location) was wrong also, i think,\nto judge by the description \"locationEqualsOrChildOf\";\ncode is now a loop rather than fixed investigation of 3 levels",
        "commit": "https://github.com/apache/jclouds/commit/0676300841773f9ca763be52714061268ce0f3f8",
        "parent": "https://github.com/apache/jclouds/commit/2523d74ad1e98a1bb24839668d8d325e1516e726",
        "bug_id": "jclouds_67",
        "file": [
            {
                "sha": "ae483158dd234bac84578a78541c5184727b253c",
                "filename": "compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "blob_url": "https://github.com/apache/jclouds/blob/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "raw_url": "https://github.com/apache/jclouds/raw/0676300841773f9ca763be52714061268ce0f3f8/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java",
                "status": "modified",
                "changes": 17,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/jclouds/contents/compute/src/main/java/org/jclouds/compute/domain/internal/TemplateBuilderImpl.java?ref=0676300841773f9ca763be52714061268ce0f3f8",
                "patch": "@@ -139,17 +139,20 @@ protected TemplateBuilderImpl(@Memoized Supplier<Set<? extends Location>> locati\n     * \n     * If the input location is null, then the data isn't location sensitive\n     * \n-    * If the input location is a parent of the specified location, then we are ok.\n+    * If the input location is a child (descendent, recursively) of the specified location, then we are ok.\n     */\n    final Predicate<ComputeMetadata> locationPredicate = new Predicate<ComputeMetadata>() {\n       @Override\n       public boolean apply(ComputeMetadata input) {\n-         boolean returnVal = true;\n-         if (location != null && input.getLocation() != null)\n-            returnVal = location.equals(input.getLocation()) || location.getParent() != null\n-                  && location.getParent().equals(input.getLocation()) || location.getParent().getParent() != null\n-                  && location.getParent().getParent().equals(input.getLocation());\n-         return returnVal;\n+         if (location == null) return true;\n+         Location inputLocation = input.getLocation();\n+         if (inputLocation == null) return true;\n+         while (inputLocation!=null) {\n+            if (location.equals(inputLocation))\n+               return true;\n+            inputLocation = inputLocation.getParent();\n+         }\n+         return false;\n       }\n \n       @Override",
                "deletions": 7
            }
        ]
    }
]