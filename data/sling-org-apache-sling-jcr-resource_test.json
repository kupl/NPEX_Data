{
    "sling-org-apache-sling-jcr-resource_f91b285": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-1218 Ensure accessing \"root\" (\"/\") does not cause a NPE in the URI class when accessing the path.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@892661 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/f91b285a9928f825dc7abc9f5fd6f001a970e0b9",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/59206042510528a64b26c3c1276e637013603bd3",
        "bug_id": "sling-org-apache-sling-jcr-resource_f91b285",
        "file": [
            {
                "sha": "62d9d484609f340bdc3efcd1a8c28c708fe3b76a",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceResolver.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/f91b285a9928f825dc7abc9f5fd6f001a970e0b9/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceResolver.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/f91b285a9928f825dc7abc9f5fd6f001a970e0b9/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceResolver.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceResolver.java?ref=f91b285a9928f825dc7abc9f5fd6f001a970e0b9",
                "patch": "@@ -322,9 +322,15 @@ public String map(final HttpServletRequest request, final String resourcePath) {\n \n             // build path from segment names\n             StringBuilder buf = new StringBuilder();\n-            while (!names.isEmpty()) {\n+\n+            // construct the path from the segments (or root if none)\n+            if (names.isEmpty()) {\n                 buf.append('/');\n-                buf.append(names.removeLast());\n+            } else {\n+                while (!names.isEmpty()) {\n+                    buf.append('/');\n+                    buf.append(names.removeLast());\n+                }\n             }\n \n             // reappend the resolutionPathInfo",
                "deletions": 2
            }
        ],
        "patched_files": [
            "JcrResourceResolver.java"
        ],
        "unit_tests": [
            "JcrResourceResolverTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_fcff814": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-2573 : JcrResourceListener activation is failing with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1376410 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/fcff814295ee6c4b9d6da217574a1f2e00486746",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/478bc4e66ef237864cbb0aff02659b27f9284d6c",
        "bug_id": "sling-org-apache-sling-jcr-resource_fcff814",
        "file": [
            {
                "sha": "6a39579b33c7769f180ed2f0b4ff5754a2abe40d",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/fcff814295ee6c4b9d6da217574a1f2e00486746/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/fcff814295ee6c4b9d6da217574a1f2e00486746/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "status": "modified",
                "changes": 65,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=fcff814295ee6c4b9d6da217574a1f2e00486746",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.felix.scr.annotations.Properties;\n import org.apache.felix.scr.annotations.Property;\n import org.apache.felix.scr.annotations.Reference;\n+import org.apache.felix.scr.annotations.ReferencePolicy;\n import org.apache.jackrabbit.api.observation.JackrabbitEvent;\n import org.apache.sling.api.SlingConstants;\n import org.apache.sling.api.resource.LoginException;\n@@ -68,7 +69,7 @@\n     /** Logger */\n     private final Logger logger = LoggerFactory.getLogger(JcrResourceListener.class);\n \n-    @Reference\n+    @Reference(policy=ReferencePolicy.DYNAMIC)\n     private EventAdmin eventAdmin;\n \n     @Reference\n@@ -115,28 +116,47 @@ public JcrResourceListener() {\n     }\n \n     @Activate\n-    protected void activate() throws RepositoryException, LoginException {\n+    protected void activate() throws LoginException {\n         this.resourceResolver = this.resourceResolverFactory.getAdministrativeResourceResolver(null);\n-        try {\n-            this.session = this.resourceResolver.adaptTo(Session.class);\n-            this.startPath = \"/\";\n-            this.mountPrefix = null;\n-\n-            this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n-            Thread oeqt = new Thread(new Runnable() {\n-                public void run() {\n-                    processOsgiEventQueue();\n-                }\n-            }, \"JCR Resource Event Queue Processor\");\n-            oeqt.start();\n+        this.startPath = \"/\";\n+        this.mountPrefix = null;\n+\n+        this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n+        final Thread oeqt = new Thread(new Runnable() {\n+            public void run() {\n+                init();\n+                processOsgiEventQueue();\n+            }\n+        }, \"JCR Resource Event Queue Processor\");\n+        oeqt.start();\n \n-            this.session.getWorkspace().getObservationManager().addEventListener(this,\n-                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n-                this.startPath, true, null, null, false);\n-        } catch (final RepositoryException re) {\n-            this.resourceResolver.close();\n-            this.resourceResolver = null;\n-            throw re;\n+    }\n+\n+    private void init() {\n+        // lazy polling\n+        Session session = null;\n+        ResourceResolver resolver = this.resourceResolver;\n+        while ( resolver != null && session == null ) {\n+            session = this.resourceResolver.adaptTo(Session.class);\n+            if ( session == null ) {\n+                try {\n+                    Thread.sleep(100);\n+                } catch (final InterruptedException ignore) {\n+                    // we ignore this\n+                }\n+                resolver = this.resourceResolver;\n+            }\n+        }\n+        if ( session != null ) {\n+            try {\n+                session.getWorkspace().getObservationManager().addEventListener(this,\n+                                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n+                                this.startPath, true, null, null, false);\n+                this.session = session;\n+            } catch (final RepositoryException re) {\n+                logger.error(\"Unable to register event listener.\", re);\n+                this.deactivate();\n+            }\n         }\n     }\n \n@@ -155,6 +175,7 @@ protected void deactivate() {\n         }\n         if ( this.resourceResolver != null ) {\n             this.resourceResolver.close();\n+            this.resourceResolver = null;\n         }\n \n         // drop any remaining OSGi Events not processed yet\n@@ -165,7 +186,7 @@ protected void deactivate() {\n     /**\n      * @see javax.jcr.observation.EventListener#onEvent(javax.jcr.observation.EventIterator)\n      */\n-    public void onEvent(EventIterator events) {\n+    public void onEvent(final EventIterator events) {\n         // if the event admin is currently not available, we just skip this\n         final EventAdmin localEA = this.eventAdmin;\n         if ( localEA == null ) {",
                "deletions": 22
            }
        ],
        "patched_files": [
            "JcrResourceListener.java"
        ],
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_82e4306": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-2773 : NPE in JcrResourceListener on missing user id\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1453303 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/82e430633bf3516a71648acca43e1de71c3903a5",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/ec4ae2adfc701e39a78513059a42fbf146d04e05",
        "bug_id": "sling-org-apache-sling-jcr-resource_82e4306",
        "file": [
            {
                "sha": "921e20d9a95811ad751d48dc1a726115f3ef36ab",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/82e430633bf3516a71648acca43e1de71c3903a5/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/82e430633bf3516a71648acca43e1de71c3903a5/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=82e430633bf3516a71648acca43e1de71c3903a5",
                "patch": "@@ -295,7 +295,9 @@ private void sendOsgiEvent(final String path, final Event event, final String to\n             final ChangedAttributes changedAttributes) {\n \n         final Dictionary<String, Object> properties = new Hashtable<String, Object>();\n-        properties.put(SlingConstants.PROPERTY_USERID, event.getUserID());\n+        if ( event.getUserID() != null ) {\n+            properties.put(SlingConstants.PROPERTY_USERID, event.getUserID());\n+        }\n         if (this.isExternal(event)) {\n             properties.put(\"event.application\", \"unknown\");\n         }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "JcrResourceListener.java"
        ],
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_06d1efd": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-1153 : Throw NPE if key is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@824288 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/b60ab2c0d26fbc92f93d719cfa08dfc8792bbb99",
        "bug_id": "sling-org-apache-sling-jcr-resource_06d1efd",
        "file": [
            {
                "sha": "a506aff4af842fb302dc6b06f2ffe40d861148ee",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/pom.xml",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/pom.xml?ref=06d1efdc63ea321e6f8b459a3cc48d97c683d0b6",
                "patch": "@@ -113,16 +113,23 @@\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n             <version>2.0.8</version>\n+            <scope>provided</scope>\n+        </dependency>\n+       <dependency>\n+           <groupId>javax.jcr</groupId>\n+           <artifactId>jcr</artifactId>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.jcr.api</artifactId>\n             <version>2.0.2-incubator</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.adapter</artifactId>\n             <version>2.0.2-incubator</version>\n+            <scope>provided</scope>\n         </dependency>\n         <dependency>\n             <groupId>org.slf4j</groupId>\n@@ -132,6 +139,7 @@\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.commons.classloader</artifactId>\n             <version>0.9.0</version>\n+            <scope>provided</scope>\n         </dependency>\n         \n         <!--\n@@ -142,6 +150,7 @@\n            <groupId>commons-collections</groupId>\n            <artifactId>commons-collections</artifactId>\n            <version>3.2.1</version>\n+            <scope>provided</scope>\n         </dependency>\n \n         <!-- For the Console Plugin of the JcrResourceResolverFactoryImpl -->\n@@ -153,6 +162,7 @@\n             <groupId>org.apache.felix</groupId>\n             <artifactId>org.apache.felix.webconsole</artifactId>\n             <version>1.2.0</version>\n+            <scope>provided</scope>\n         </dependency>\n \n         <!-- for adapting JCR resources to URLs -->\n@@ -165,7 +175,7 @@\n         <dependency>\n             <groupId>org.apache.jackrabbit</groupId>\n             <artifactId>jackrabbit-jcr-commons</artifactId>\n-            <version>1.5.0</version>\n+            <version>1.6.0</version>\n             <scope>provided</scope>\n         </dependency>\n ",
                "deletions": 1
            },
            {
                "sha": "87f1773e406ffb1ab4906b02929fa186831b22b5",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrModifiablePropertyMap.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/src/main/java/org/apache/sling/jcr/resource/internal/JcrModifiablePropertyMap.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/src/main/java/org/apache/sling/jcr/resource/internal/JcrModifiablePropertyMap.java",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrModifiablePropertyMap.java?ref=06d1efdc63ea321e6f8b459a3cc48d97c683d0b6",
                "patch": "@@ -69,7 +69,7 @@ public void clear() {\n      */\n     public Object put(String aKey, Object value) {\n         final String key = checkKey(aKey);\n-        if ( key == null || key.indexOf('/') != -1 ) {\n+        if ( key.indexOf('/') != -1 ) {\n             throw new IllegalArgumentException(\"Invalid key: \" + key);\n         }\n         if ( value == null ) {\n@@ -109,9 +109,6 @@ public void putAll(Map<? extends String, ? extends Object> t) {\n      * @see java.util.Map#remove(java.lang.Object)\n      */\n     public Object remove(Object aKey) {\n-        if ( aKey == null ) {\n-            return null;\n-        }\n         final String key = checkKey(aKey.toString());\n         readFully();\n         final Object oldValue = this.cache.remove(key);",
                "deletions": 4
            },
            {
                "sha": "5989c04f6c6eeb09a6110d3af9103457c2f189ed",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrPropertyMap.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/src/main/java/org/apache/sling/jcr/resource/internal/JcrPropertyMap.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/06d1efdc63ea321e6f8b459a3cc48d97c683d0b6/src/main/java/org/apache/sling/jcr/resource/internal/JcrPropertyMap.java",
                "status": "modified",
                "changes": 14,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrPropertyMap.java?ref=06d1efdc63ea321e6f8b459a3cc48d97c683d0b6",
                "patch": "@@ -102,7 +102,10 @@ Node getNode() {\n     // ---------- ValueMap\n \n     protected String checkKey(final String key) {\n-        if ( key != null && key.startsWith(\"./\") ) {\n+        if ( key == null ) {\n+            throw new NullPointerException(\"Key must not be null.\");\n+        }\n+        if ( key.startsWith(\"./\") ) {\n             return key.substring(2);\n         }\n         return key;\n@@ -113,9 +116,6 @@ protected String checkKey(final String key) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T get(final String aKey, final Class<T> type) {\n-        if ( aKey == null ) {\n-            return null;\n-        }\n         final String key = checkKey(aKey);\n         if (type == null) {\n             return (T) get(key);\n@@ -136,9 +136,6 @@ protected String checkKey(final String key) {\n      */\n     @SuppressWarnings(\"unchecked\")\n     public <T> T get(final String aKey,final T defaultValue) {\n-        if ( aKey == null ) {\n-            return null;\n-        }\n         final String key = checkKey(aKey);\n         if (defaultValue == null) {\n             return (T) get(key);\n@@ -162,9 +159,6 @@ protected String checkKey(final String key) {\n      * @see java.util.Map#get(java.lang.Object)\n      */\n     public Object get(final Object aKey) {\n-        if ( aKey == null ) {\n-            return null;\n-        }\n         final String key = checkKey(aKey.toString());\n         CacheEntry entry = cache.get(key);\n         if (entry == null) {",
                "deletions": 10
            }
        ],
        "patched_files": [
            "JcrModifiablePropertyMap.java",
            "JcrPropertyMap.java"
        ],
        "unit_tests": [
            "JcrPropertyMapTest.java",
            "JcrModifiablePropertyMapTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_882a538": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-7805 - NPE in Oak SessionImpl when starting up\n\nThis reverts commit 335d0aec54d8674b275b51286a18fff92e0eaccc, reversing\nchanges made to bf18d14584cacbadcaec443821433e78669a43a6.\n\nIt also reverts commits 5a36b33e05b1b05827993ad09bd4e389674cd8a1 and\ndde168f8e1c205a04a972b8b1997c002b41055d3.",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/882a53869c4918828c5cbd5aa5776340a950efde",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/edeedfcba76a97eff6c9dbf97fb54faa3c966b86",
        "bug_id": "sling-org-apache-sling-jcr-resource_882a538",
        "file": [
            {
                "sha": "1d18f595eee5df3da7052f7b4f3a60b4fdaef171",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/882a53869c4918828c5cbd5aa5776340a950efde/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/882a53869c4918828c5cbd5aa5776340a950efde/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/pom.xml?ref=882a53869c4918828c5cbd5aa5776340a950efde",
                "patch": "@@ -54,7 +54,6 @@\n             <plugin>\n                 <groupId>org.apache.sling</groupId>\n                 <artifactId>maven-sling-plugin</artifactId>\n-                <version>2.3.2</version>\n                 <executions>\n                     <execution>\n                         <id>generate-adapter-metadata</id>\n@@ -177,7 +176,7 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n-            <version>2.18.2</version>\n+            <version>2.16.4</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>",
                "deletions": 2
            },
            {
                "sha": "8767fa9da077203f03d76257252425767387d8f9",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/882a53869c4918828c5cbd5aa5776340a950efde/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/882a53869c4918828c5cbd5aa5776340a950efde/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "status": "modified",
                "changes": 37,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java?ref=882a53869c4918828c5cbd5aa5776340a950efde",
                "patch": "@@ -145,12 +145,7 @@ private JcrProviderState createJcrProviderState(\n             @Nonnull final Map<String, Object> authenticationInfo,\n             @Nullable final BundleContext ctx\n     ) throws LoginException {\n-        boolean explicitSessionUsed = (getSession(authenticationInfo) != null);\n-        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession, explicitSessionUsed);\n-        if (impersonatedSession != session && explicitSessionUsed) {\n-            // update the session in the auth info map in case the resolver gets cloned in the future\n-            authenticationInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, impersonatedSession);\n-        }\n+        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession);\n         // if we're actually impersonating, we're responsible for closing the session we've created, regardless\n         // of what the original logoutSession value was.\n         boolean doLogoutSession = logoutSession || (impersonatedSession != session);\n@@ -172,35 +167,25 @@ private JcrProviderState createJcrProviderState(\n      * @param logoutSession\n      *            whether to logout the <code>session</code> after impersonation\n      *            or not.\n-     * @param explicitSessionUsed\n-     *            whether the JCR session was explicitly given in the auth info or not.\n      * @return The original session or impersonated session.\n      * @throws LoginException\n      *             If something goes wrong.\n      */\n     private static Session handleImpersonation(final Session session, final Map<String, Object> authenticationInfo,\n-            final boolean logoutSession, boolean explicitSessionUsed) throws LoginException {\n+            final boolean logoutSession) throws LoginException {\n         final String sudoUser = getSudoUser(authenticationInfo);\n-        // Do we need session.impersonate() because we are asked to impersonate another user?\n-        boolean needsSudo = (sudoUser != null) && !session.getUserID().equals(sudoUser);\n-        // Do we need session.impersonate() to get an independent copy of the session we were given in the auth info?\n-        boolean needsCloning = !needsSudo && explicitSessionUsed && authenticationInfo.containsKey(ResourceProvider.AUTH_CLONE);\n-        try {\n-            if (needsSudo) {\n-                SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n+        if (sudoUser != null && !session.getUserID().equals(sudoUser)) {\n+            try {\n+                final SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n                 copyAttributes(creds, authenticationInfo);\n                 creds.setAttribute(ResourceResolver.USER_IMPERSONATOR, session.getUserID());\n                 return session.impersonate(creds);\n-            } else if (needsCloning) {\n-                SimpleCredentials creds = new SimpleCredentials(session.getUserID(), new char[0]);\n-                copyAttributes(creds, authenticationInfo);\n-                return session.impersonate(creds);\n-            }\n-        } catch (final RepositoryException re) {\n-            throw getLoginException(re);\n-        } finally {\n-            if (logoutSession) {\n-                session.logout();\n+            } catch (final RepositoryException re) {\n+                throw getLoginException(re);\n+            } finally {\n+                if (logoutSession) {\n+                    session.logout();\n+                }\n             }\n         }\n         return session;",
                "deletions": 26
            },
            {
                "sha": "a471446bd2b1fcdb4f1daf6420d664e424096b3b",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/edeedfcba76a97eff6c9dbf97fb54faa3c966b86/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/edeedfcba76a97eff6c9dbf97fb54faa3c966b86/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "status": "removed",
                "changes": 199,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java?ref=edeedfcba76a97eff6c9dbf97fb54faa3c966b86",
                "patch": "@@ -1,199 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.sling.jcr.resource.internal.helper.jcr;\n-\n-import static org.hamcrest.Matchers.is;\n-import static org.hamcrest.Matchers.not;\n-import static org.hamcrest.Matchers.sameInstance;\n-import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertFalse;\n-import static org.junit.Assert.assertNotSame;\n-import static org.junit.Assert.assertTrue;\n-import static org.junit.Assume.assumeThat;\n-import static org.junit.Assume.assumeTrue;\n-import static org.mockito.Matchers.anyString;\n-import static org.mockito.Mockito.mock;\n-import static org.mockito.Mockito.when;\n-\n-import java.util.ArrayList;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-\n-import javax.jcr.Session;\n-\n-import org.apache.sling.api.resource.ResourceResolver;\n-import org.apache.sling.api.resource.ResourceResolverFactory;\n-import org.apache.sling.commons.testing.jcr.RepositoryProvider;\n-import org.apache.sling.jcr.api.SlingRepository;\n-import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n-import org.apache.sling.spi.resource.provider.ResolveContext;\n-import org.apache.sling.spi.resource.provider.ResourceProvider;\n-import org.junit.After;\n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n-import org.junit.runners.Parameterized;\n-import org.junit.runners.Parameterized.Parameter;\n-import org.junit.runners.Parameterized.Parameters;\n-import org.mockito.Mockito;\n-import org.osgi.framework.ServiceReference;\n-import org.osgi.service.component.ComponentContext;\n-\n-@RunWith(Parameterized.class)\n-public class JcrResourceProviderSessionHandlingTest {\n-\n-    private enum LoginStyle {USER, SESSION};\n-\n-    private static final String AUTH_USER = \"admin\";\n-    private static final char[] AUTH_PASSWORD = \"admin\".toCharArray();\n-    private static final String SUDO_USER = \"anonymous\";\n-\n-    @Parameters(name = \"loginStyle= {0}, sudo = {1}, clone = {2}\")\n-    public static List<Object[]> data() {\n-\n-        LoginStyle[] loginStyles = LoginStyle.values();\n-        boolean[] sudoOptions = new boolean[] {false, true};\n-        boolean[] cloneOptions = new boolean[] {false, true};\n-\n-        // Generate all possible combinations into data.\n-        List<Object[]> data = new ArrayList<>();\n-        Object[] dataPoint = new Object[3];\n-        for (LoginStyle loginStyle : loginStyles) {\n-            dataPoint[0] = loginStyle;\n-            for (boolean sudo : sudoOptions) {\n-                dataPoint[1] = sudo;\n-                for (boolean clone : cloneOptions) {\n-                    dataPoint[2] = clone;\n-                    data.add(dataPoint.clone());\n-                }\n-            }\n-        }\n-        return data;\n-    }\n-\n-    @Parameter(0)\n-    public LoginStyle loginStyle;\n-\n-    @Parameter(1)\n-    public boolean useSudo;\n-\n-    @Parameter(2)\n-    public boolean doClone;\n-\n-    // Session we're using when loginStyle == SESSION, null otherwise.\n-    private Session explicitSession;\n-\n-    private JcrResourceProvider jcrResourceProvider;\n-    private JcrProviderState jcrProviderState;\n-\n-    @Before\n-    public void setUp() throws Exception {\n-        SlingRepository repo = RepositoryProvider.instance().getRepository();\n-        Map<String, Object> authInfo = new HashMap<>();\n-        switch (loginStyle) {\n-        case USER:\n-            authInfo.put(ResourceResolverFactory.USER, AUTH_USER);\n-            authInfo.put(ResourceResolverFactory.PASSWORD, AUTH_PASSWORD);\n-            break;\n-        case SESSION:\n-            explicitSession = repo.loginAdministrative(null);\n-            authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, explicitSession);\n-            break;\n-        }\n-\n-        if (useSudo) {\n-            authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, SUDO_USER);\n-        }\n-\n-        if (doClone) {\n-            authInfo.put(ResourceProvider.AUTH_CLONE, true);\n-        }\n-\n-        ComponentContext ctx = mock(ComponentContext.class);\n-        when(ctx.locateService(anyString(), Mockito.<ServiceReference<Object>>any())).thenReturn(repo);\n-\n-        jcrResourceProvider = new JcrResourceProvider();\n-        jcrResourceProvider.activate(ctx);\n-\n-        jcrProviderState = jcrResourceProvider.authenticate(authInfo);\n-    }\n-\n-    @After\n-    public void tearDown() throws Exception {\n-\n-        // Some tests do a logout, so check for liveness before trying to log out.\n-        if (jcrProviderState.getSession().isLive()) {\n-            jcrResourceProvider.logout(jcrProviderState);\n-        }\n-\n-        jcrResourceProvider.deactivate();\n-\n-        if (explicitSession != null) {\n-            explicitSession.logout();\n-        }\n-    }\n-\n-    @Test\n-    public void sessionUsesCorrectUser() {\n-        String expectedUser = useSudo ? SUDO_USER : AUTH_USER;\n-        assertEquals(expectedUser, jcrProviderState.getSession().getUserID());\n-    }\n-\n-    @Test\n-    public void explicitSessionNotClosedOnLogout() {\n-        assumeTrue(loginStyle == LoginStyle.SESSION);\n-\n-        jcrResourceProvider.logout(jcrProviderState);\n-\n-        assertTrue(explicitSession.isLive());\n-    }\n-\n-    @Test\n-    public void sessionsDoNotLeak() {\n-        // This test is only valid if we either didn't pass an explicit session,\n-        // or the provider had to clone it. Sessions created by the provider\n-        // must be closed by the provider, or we have a session leak.\n-        assumeThat(jcrProviderState.getSession(), is(not(sameInstance(explicitSession))));\n-\n-        jcrResourceProvider.logout(jcrProviderState);\n-\n-        assertFalse(jcrProviderState.getSession().isLive());\n-    }\n-\n-    @Test\n-    public void impersonatorIsReportedCorrectly() {\n-        assumeTrue(useSudo);\n-\n-        @SuppressWarnings(\"unchecked\")\n-        ResolveContext<JcrProviderState> mockContext = mock(ResolveContext.class);\n-        when(mockContext.getProviderState()).thenReturn(jcrProviderState);\n-        Object reportedImpersonator = jcrResourceProvider.getAttribute(mockContext, ResourceResolver.USER_IMPERSONATOR);\n-\n-        assertEquals(AUTH_USER, reportedImpersonator);\n-    }\n-\n-    @Test\n-    public void clonesAreIndependent() {\n-        assumeTrue(loginStyle == LoginStyle.SESSION && doClone);\n-\n-        assertNotSame(explicitSession, jcrProviderState.getSession());\n-    }\n-\n-}",
                "deletions": 199
            },
            {
                "sha": "aa4016299d9d26f3f4f6040f235d024497173ac3",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/882a53869c4918828c5cbd5aa5776340a950efde/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/882a53869c4918828c5cbd5aa5776340a950efde/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java?ref=882a53869c4918828c5cbd5aa5776340a950efde",
                "patch": "@@ -19,11 +19,18 @@\n package org.apache.sling.jcr.resource.internal.helper.jcr;\n \n import java.security.Principal;\n+import java.util.HashMap;\n+import java.util.Map;\n \n import javax.jcr.Repository;\n+import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n+import javax.naming.NamingException;\n \n+import org.apache.sling.api.resource.LoginException;\n+import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.commons.testing.jcr.RepositoryTestBase;\n+import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n import org.apache.sling.spi.resource.provider.ResolveContext;\n import org.junit.Assert;\n import org.mockito.Mockito;\n@@ -40,24 +47,34 @@ protected void setUp() throws Exception {\n         super.setUp();\n         // create the session\n         session = getSession();\n-        Repository repo = getRepository();\n-        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n-        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n-        jcrResourceProvider = new JcrResourceProvider();\n-        jcrResourceProvider.activate(ctx);\n     }\n \n     @Override\n     protected void tearDown() throws Exception {\n-        jcrResourceProvider.deactivate();\n         super.tearDown();\n     }\n \n     public void testAdaptTo_Principal() {\n+        jcrResourceProvider = new JcrResourceProvider();\n         ResolveContext ctx = Mockito.mock(ResolveContext.class);\n         Mockito.when(ctx.getProviderState()).thenReturn(new JcrProviderState(session, null, false));\n         Assert.assertNotNull(jcrResourceProvider.adaptTo(ctx, Principal.class));\n     }\n+    \n+    public void testLeakOnSudo() throws LoginException, RepositoryException, NamingException {\n+        Repository repo = getRepository();\n+        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n+        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n+        jcrResourceProvider = new JcrResourceProvider();\n+        jcrResourceProvider.activate(ctx);\n+        Map<String, Object> authInfo = new HashMap<String, Object>();\n+        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, session);\n+        authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, \"anonymous\");\n+        JcrProviderState providerState = jcrResourceProvider.authenticate(authInfo);\n+        Assert.assertNotEquals(\"Impersonation didn't start new session\", session, providerState.getSession());\n+        jcrResourceProvider.logout(providerState);\n+        assertFalse(\"Impersonated session wasn't closed.\", providerState.getSession().isLive());\n+    }\n }\n \n ",
                "deletions": 6
            }
        ],
        "patched_files": [
            "JcrResourceProvider.java",
            "JcrProviderStateFactory.java"
        ],
        "unit_tests": [
            "JcrResourceProviderTest.java",
            "JcrResourceProviderSessionHandlingTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_4ced1df": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "Revert \"SLING-7805 - NPE in Oak SessionImpl when starting up\"\n\nRestore the fix for SLING-3524",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/4ced1dfe227b90e076ef895b66c9dcf8b2333332",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/2db439ac3a81d831796145909d6c0440f7354f6b",
        "bug_id": "sling-org-apache-sling-jcr-resource_4ced1df",
        "file": [
            {
                "sha": "fea14126697f07e32cbef706a3c6905341c5a12a",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/4ced1dfe227b90e076ef895b66c9dcf8b2333332/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/4ced1dfe227b90e076ef895b66c9dcf8b2333332/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/pom.xml?ref=4ced1dfe227b90e076ef895b66c9dcf8b2333332",
                "patch": "@@ -54,6 +54,7 @@\n             <plugin>\n                 <groupId>org.apache.sling</groupId>\n                 <artifactId>maven-sling-plugin</artifactId>\n+                <version>2.3.2</version>\n                 <executions>\n                     <execution>\n                         <id>generate-adapter-metadata</id>\n@@ -176,7 +177,7 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n-            <version>2.16.4</version>\n+            <version>2.18.2</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>",
                "deletions": 1
            },
            {
                "sha": "064f095421138569fa094b9e44501defae4911ca",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "status": "modified",
                "changes": 37,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java?ref=4ced1dfe227b90e076ef895b66c9dcf8b2333332",
                "patch": "@@ -144,7 +144,12 @@ private JcrProviderState createJcrProviderState(\n             @NotNull final Map<String, Object> authenticationInfo,\n             @Nullable final BundleContext ctx\n     ) throws LoginException {\n-        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession);\n+        boolean explicitSessionUsed = (getSession(authenticationInfo) != null);\n+        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession, explicitSessionUsed);\n+        if (impersonatedSession != session && explicitSessionUsed) {\n+            // update the session in the auth info map in case the resolver gets cloned in the future\n+            authenticationInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, impersonatedSession);\n+        }\n         // if we're actually impersonating, we're responsible for closing the session we've created, regardless\n         // of what the original logoutSession value was.\n         boolean doLogoutSession = logoutSession || (impersonatedSession != session);\n@@ -166,25 +171,35 @@ private JcrProviderState createJcrProviderState(\n      * @param logoutSession\n      *            whether to logout the <code>session</code> after impersonation\n      *            or not.\n+     * @param explicitSessionUsed\n+     *            whether the JCR session was explicitly given in the auth info or not.\n      * @return The original session or impersonated session.\n      * @throws LoginException\n      *             If something goes wrong.\n      */\n     private static Session handleImpersonation(final Session session, final Map<String, Object> authenticationInfo,\n-            final boolean logoutSession) throws LoginException {\n+            final boolean logoutSession, boolean explicitSessionUsed) throws LoginException {\n         final String sudoUser = getSudoUser(authenticationInfo);\n-        if (sudoUser != null && !session.getUserID().equals(sudoUser)) {\n-            try {\n-                final SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n+        // Do we need session.impersonate() because we are asked to impersonate another user?\n+        boolean needsSudo = (sudoUser != null) && !session.getUserID().equals(sudoUser);\n+        // Do we need session.impersonate() to get an independent copy of the session we were given in the auth info?\n+        boolean needsCloning = !needsSudo && explicitSessionUsed && authenticationInfo.containsKey(ResourceProvider.AUTH_CLONE);\n+        try {\n+            if (needsSudo) {\n+                SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n                 copyAttributes(creds, authenticationInfo);\n                 creds.setAttribute(ResourceResolver.USER_IMPERSONATOR, session.getUserID());\n                 return session.impersonate(creds);\n-            } catch (final RepositoryException re) {\n-                throw getLoginException(re);\n-            } finally {\n-                if (logoutSession) {\n-                    session.logout();\n-                }\n+            } else if (needsCloning) {\n+                SimpleCredentials creds = new SimpleCredentials(session.getUserID(), new char[0]);\n+                copyAttributes(creds, authenticationInfo);\n+                return session.impersonate(creds);\n+            }\n+        } catch (final RepositoryException re) {\n+            throw getLoginException(re);\n+        } finally {\n+            if (logoutSession) {\n+                session.logout();\n             }\n         }\n         return session;",
                "deletions": 11
            },
            {
                "sha": "a471446bd2b1fcdb4f1daf6420d664e424096b3b",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "status": "added",
                "changes": 199,
                "additions": 199,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java?ref=4ced1dfe227b90e076ef895b66c9dcf8b2333332",
                "patch": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.jcr.resource.internal.helper.jcr;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeThat;\n+import static org.junit.Assume.assumeTrue;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.jcr.Session;\n+\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.api.resource.ResourceResolverFactory;\n+import org.apache.sling.commons.testing.jcr.RepositoryProvider;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n+import org.apache.sling.spi.resource.provider.ResolveContext;\n+import org.apache.sling.spi.resource.provider.ResourceProvider;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.mockito.Mockito;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.service.component.ComponentContext;\n+\n+@RunWith(Parameterized.class)\n+public class JcrResourceProviderSessionHandlingTest {\n+\n+    private enum LoginStyle {USER, SESSION};\n+\n+    private static final String AUTH_USER = \"admin\";\n+    private static final char[] AUTH_PASSWORD = \"admin\".toCharArray();\n+    private static final String SUDO_USER = \"anonymous\";\n+\n+    @Parameters(name = \"loginStyle= {0}, sudo = {1}, clone = {2}\")\n+    public static List<Object[]> data() {\n+\n+        LoginStyle[] loginStyles = LoginStyle.values();\n+        boolean[] sudoOptions = new boolean[] {false, true};\n+        boolean[] cloneOptions = new boolean[] {false, true};\n+\n+        // Generate all possible combinations into data.\n+        List<Object[]> data = new ArrayList<>();\n+        Object[] dataPoint = new Object[3];\n+        for (LoginStyle loginStyle : loginStyles) {\n+            dataPoint[0] = loginStyle;\n+            for (boolean sudo : sudoOptions) {\n+                dataPoint[1] = sudo;\n+                for (boolean clone : cloneOptions) {\n+                    dataPoint[2] = clone;\n+                    data.add(dataPoint.clone());\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    @Parameter(0)\n+    public LoginStyle loginStyle;\n+\n+    @Parameter(1)\n+    public boolean useSudo;\n+\n+    @Parameter(2)\n+    public boolean doClone;\n+\n+    // Session we're using when loginStyle == SESSION, null otherwise.\n+    private Session explicitSession;\n+\n+    private JcrResourceProvider jcrResourceProvider;\n+    private JcrProviderState jcrProviderState;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        SlingRepository repo = RepositoryProvider.instance().getRepository();\n+        Map<String, Object> authInfo = new HashMap<>();\n+        switch (loginStyle) {\n+        case USER:\n+            authInfo.put(ResourceResolverFactory.USER, AUTH_USER);\n+            authInfo.put(ResourceResolverFactory.PASSWORD, AUTH_PASSWORD);\n+            break;\n+        case SESSION:\n+            explicitSession = repo.loginAdministrative(null);\n+            authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, explicitSession);\n+            break;\n+        }\n+\n+        if (useSudo) {\n+            authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, SUDO_USER);\n+        }\n+\n+        if (doClone) {\n+            authInfo.put(ResourceProvider.AUTH_CLONE, true);\n+        }\n+\n+        ComponentContext ctx = mock(ComponentContext.class);\n+        when(ctx.locateService(anyString(), Mockito.<ServiceReference<Object>>any())).thenReturn(repo);\n+\n+        jcrResourceProvider = new JcrResourceProvider();\n+        jcrResourceProvider.activate(ctx);\n+\n+        jcrProviderState = jcrResourceProvider.authenticate(authInfo);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+\n+        // Some tests do a logout, so check for liveness before trying to log out.\n+        if (jcrProviderState.getSession().isLive()) {\n+            jcrResourceProvider.logout(jcrProviderState);\n+        }\n+\n+        jcrResourceProvider.deactivate();\n+\n+        if (explicitSession != null) {\n+            explicitSession.logout();\n+        }\n+    }\n+\n+    @Test\n+    public void sessionUsesCorrectUser() {\n+        String expectedUser = useSudo ? SUDO_USER : AUTH_USER;\n+        assertEquals(expectedUser, jcrProviderState.getSession().getUserID());\n+    }\n+\n+    @Test\n+    public void explicitSessionNotClosedOnLogout() {\n+        assumeTrue(loginStyle == LoginStyle.SESSION);\n+\n+        jcrResourceProvider.logout(jcrProviderState);\n+\n+        assertTrue(explicitSession.isLive());\n+    }\n+\n+    @Test\n+    public void sessionsDoNotLeak() {\n+        // This test is only valid if we either didn't pass an explicit session,\n+        // or the provider had to clone it. Sessions created by the provider\n+        // must be closed by the provider, or we have a session leak.\n+        assumeThat(jcrProviderState.getSession(), is(not(sameInstance(explicitSession))));\n+\n+        jcrResourceProvider.logout(jcrProviderState);\n+\n+        assertFalse(jcrProviderState.getSession().isLive());\n+    }\n+\n+    @Test\n+    public void impersonatorIsReportedCorrectly() {\n+        assumeTrue(useSudo);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ResolveContext<JcrProviderState> mockContext = mock(ResolveContext.class);\n+        when(mockContext.getProviderState()).thenReturn(jcrProviderState);\n+        Object reportedImpersonator = jcrResourceProvider.getAttribute(mockContext, ResourceResolver.USER_IMPERSONATOR);\n+\n+        assertEquals(AUTH_USER, reportedImpersonator);\n+    }\n+\n+    @Test\n+    public void clonesAreIndependent() {\n+        assumeTrue(loginStyle == LoginStyle.SESSION && doClone);\n+\n+        assertNotSame(explicitSession, jcrProviderState.getSession());\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "32c6bfba17d77576b4d0e751523fb46e727efdc8",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/4ced1dfe227b90e076ef895b66c9dcf8b2333332/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java?ref=4ced1dfe227b90e076ef895b66c9dcf8b2333332",
                "patch": "@@ -19,18 +19,11 @@\n package org.apache.sling.jcr.resource.internal.helper.jcr;\n \n import java.security.Principal;\n-import java.util.HashMap;\n-import java.util.Map;\n \n import javax.jcr.Repository;\n-import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n-import javax.naming.NamingException;\n \n-import org.apache.sling.api.resource.LoginException;\n-import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.commons.testing.jcr.RepositoryTestBase;\n-import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n import org.apache.sling.spi.resource.provider.ResolveContext;\n import org.junit.Assert;\n import org.mockito.Mockito;\n@@ -47,34 +40,24 @@ protected void setUp() throws Exception {\n         super.setUp();\n         // create the session\n         session = getSession();\n+        Repository repo = getRepository();\n+        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n+        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n+        jcrResourceProvider = new JcrResourceProvider();\n+        jcrResourceProvider.activate(ctx);\n     }\n \n     @Override\n     protected void tearDown() throws Exception {\n+        jcrResourceProvider.deactivate();\n         super.tearDown();\n     }\n \n     public void testAdaptTo_Principal() {\n-        jcrResourceProvider = new JcrResourceProvider();\n         ResolveContext ctx = Mockito.mock(ResolveContext.class);\n         Mockito.when(ctx.getProviderState()).thenReturn(new JcrProviderState(session, null, false));\n         Assert.assertNotNull(jcrResourceProvider.adaptTo(ctx, Principal.class));\n     }\n-    \n-    public void testLeakOnSudo() throws LoginException, RepositoryException, NamingException {\n-        Repository repo = getRepository();\n-        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n-        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n-        jcrResourceProvider = new JcrResourceProvider();\n-        jcrResourceProvider.activate(ctx);\n-        Map<String, Object> authInfo = new HashMap<String, Object>();\n-        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, session);\n-        authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, \"anonymous\");\n-        JcrProviderState providerState = jcrResourceProvider.authenticate(authInfo);\n-        Assert.assertNotEquals(\"Impersonation didn't start new session\", session, providerState.getSession());\n-        jcrResourceProvider.logout(providerState);\n-        assertFalse(\"Impersonated session wasn't closed.\", providerState.getSession().isLive());\n-    }\n }\n \n ",
                "deletions": 23
            }
        ],
        "patched_files": [
            "JcrResourceProvider.java",
            "JcrProviderStateFactory.java"
        ],
        "unit_tests": [
            "JcrResourceProviderTest.java",
            "JcrResourceProviderSessionHandlingTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_1b29aa7": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "SLING-2573 : JcrResourceListener activation is failing with NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1376876 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/1b29aa73b477f574d20963a027f361613cbe0464",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/be8ab2053a9e462539e53d3fbca5a69533c3cde4",
        "bug_id": "sling-org-apache-sling-jcr-resource_1b29aa7",
        "file": [
            {
                "sha": "79540c12c5e9318c7ff2f524343816ef2f4ad24e",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java",
                "status": "modified",
                "changes": 135,
                "additions": 69,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/JcrResourceListener.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "patch": "@@ -34,22 +34,18 @@\n import javax.jcr.observation.EventIterator;\n import javax.jcr.observation.EventListener;\n \n-import org.apache.felix.scr.annotations.Activate;\n-import org.apache.felix.scr.annotations.Component;\n-import org.apache.felix.scr.annotations.Deactivate;\n-import org.apache.felix.scr.annotations.Properties;\n-import org.apache.felix.scr.annotations.Property;\n-import org.apache.felix.scr.annotations.Reference;\n-import org.apache.felix.scr.annotations.ReferencePolicy;\n import org.apache.jackrabbit.api.observation.JackrabbitEvent;\n import org.apache.sling.api.SlingConstants;\n import org.apache.sling.api.resource.LoginException;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n-import org.osgi.framework.Constants;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.framework.ServiceReference;\n import org.osgi.service.event.EventAdmin;\n import org.osgi.service.event.EventConstants;\n+import org.osgi.util.tracker.ServiceTracker;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -58,34 +54,26 @@\n  * events and creates resource events which are sent through the\n  * OSGi event admin.\n  */\n-@Component(immediate = true)\n-@Properties({\n-    @Property(name = Constants.SERVICE_DESCRIPTION, value = \"Apache Sling JcrResourceListener\"),\n-    @Property(name = Constants.SERVICE_VENDOR, value = \"The Apache Software Foundation\")\n-\n-})\n public class JcrResourceListener implements EventListener {\n \n     /** Logger */\n     private final Logger logger = LoggerFactory.getLogger(JcrResourceListener.class);\n \n-    @Reference(policy=ReferencePolicy.DYNAMIC)\n-    private EventAdmin eventAdmin;\n+    private final ServiceTracker eventAdminTracker;\n \n-    @Reference\n-    private ResourceResolverFactory resourceResolverFactory;\n+    private ServiceReference resourceResolverFactoryReference;\n \n     /** The admin resource resolver. */\n     private ResourceResolver resourceResolver;\n \n     /** The session for observation. */\n-    private Session session;\n+    private final Session session;\n \n     /** Everything below this path is observed. */\n-    private String startPath;\n+    private final String startPath;\n \n     /** The repository is mounted under this path. */\n-    private String mountPrefix;\n+    private final String mountPrefix;\n \n     /** Is the Jackrabbit event class available? */\n     private final boolean hasJackrabbitEventClass;\n@@ -96,15 +84,21 @@\n      * waiting for actual dispatching to the OSGi Event Admin in\n      * {@link #processOsgiEventQueue()}\n      */\n-    private LinkedBlockingQueue<Dictionary<String, Object>> osgiEventQueue;\n+    private final LinkedBlockingQueue<Dictionary<String, Object>> osgiEventQueue;\n+\n+    private final BundleContext bundleContext;\n \n     /**\n      * Marker event for {@link #processOsgiEventQueue()} to be signaled to\n      * terminate processing Events.\n      */\n     private final Dictionary<String, Object> TERMINATE_PROCESSING = new Hashtable<String, Object>(1);\n \n-    public JcrResourceListener() {\n+    public JcrResourceListener(final String startPath,\n+                    final String mountPrefix,\n+                    final SlingRepository repository,\n+                    final BundleContext bundleContext)\n+    throws RepositoryException {\n         boolean foundClass = false;\n         try {\n             this.getClass().getClassLoader().loadClass(JackrabbitEvent.class.getName());\n@@ -113,58 +107,36 @@ public JcrResourceListener() {\n             // we ignore this\n         }\n         this.hasJackrabbitEventClass = foundClass;\n-    }\n+        this.startPath = startPath;\n+        this.mountPrefix = mountPrefix;\n+        this.bundleContext = bundleContext;\n \n-    @Activate\n-    protected void activate() throws LoginException {\n-        this.resourceResolver = this.resourceResolverFactory.getAdministrativeResourceResolver(null);\n-        this.startPath = \"/\";\n-        this.mountPrefix = null;\n+        this.eventAdminTracker = new ServiceTracker(bundleContext, EventAdmin.class.getName(), null);\n+        this.eventAdminTracker.open();\n+\n+        this.session = repository.loginAdministrative(null);\n+        try {\n+            session.getWorkspace().getObservationManager().addEventListener(this,\n+                            Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n+                            this.startPath, true, null, null, false);\n+        } catch (final RepositoryException re) {\n+            session.logout();\n+            throw re;\n+        }\n \n         this.osgiEventQueue = new LinkedBlockingQueue<Dictionary<String,Object>>();\n         final Thread oeqt = new Thread(new Runnable() {\n             public void run() {\n-                init();\n                 processOsgiEventQueue();\n             }\n-        }, \"JCR Resource Event Queue Processor\");\n+        }, \"Apche Sling JCR Resource Event Queue Processor for path '\" + this.startPath + \"'\");\n         oeqt.start();\n-\n-    }\n-\n-    private void init() {\n-        // lazy polling\n-        Session session = null;\n-        ResourceResolver resolver = this.resourceResolver;\n-        while ( resolver != null && session == null ) {\n-            session = this.resourceResolver.adaptTo(Session.class);\n-            if ( session == null ) {\n-                try {\n-                    Thread.sleep(100);\n-                } catch (final InterruptedException ignore) {\n-                    // we ignore this\n-                }\n-                resolver = this.resourceResolver;\n-            }\n-        }\n-        if ( session != null ) {\n-            try {\n-                session.getWorkspace().getObservationManager().addEventListener(this,\n-                                Event.NODE_ADDED|Event.NODE_REMOVED|Event.PROPERTY_ADDED|Event.PROPERTY_CHANGED|Event.PROPERTY_REMOVED,\n-                                this.startPath, true, null, null, false);\n-                this.session = session;\n-            } catch (final RepositoryException re) {\n-                logger.error(\"Unable to register event listener.\", re);\n-                this.deactivate();\n-            }\n-        }\n     }\n \n     /**\n      * Dispose this listener.\n      */\n-    @Deactivate\n-    protected void deactivate() {\n+    public void deactivate() {\n         // unregister from observations\n         if ( this.session != null ) {\n             try {\n@@ -178,17 +150,25 @@ protected void deactivate() {\n             this.resourceResolver = null;\n         }\n \n+        if ( this.resourceResolverFactoryReference != null ) {\n+            this.bundleContext.ungetService(this.resourceResolverFactoryReference);\n+        }\n+\n         // drop any remaining OSGi Events not processed yet\n         this.osgiEventQueue.clear();\n         this.osgiEventQueue.offer(TERMINATE_PROCESSING);\n+\n+        if ( this.eventAdminTracker != null ) {\n+            this.eventAdminTracker.close();\n+        }\n     }\n \n     /**\n      * @see javax.jcr.observation.EventListener#onEvent(javax.jcr.observation.EventIterator)\n      */\n     public void onEvent(final EventIterator events) {\n         // if the event admin is currently not available, we just skip this\n-        final EventAdmin localEA = this.eventAdmin;\n+        final EventAdmin localEA = (EventAdmin) this.eventAdminTracker.getService();\n         if ( localEA == null ) {\n             return;\n         }\n@@ -337,6 +317,28 @@ private void sendOsgiEvent(final String path, final Event event, final String to\n         this.osgiEventQueue.offer(properties);\n     }\n \n+    /**\n+     * Get a resource resolver.\n+     * We don't need any syncing as this is called from the process osgi thread.\n+     */\n+    private ResourceResolver getResourceResolver() {\n+        if ( this.resourceResolver == null ) {\n+            final ServiceReference ref = this.bundleContext.getServiceReference(ResourceResolverFactory.class.getName());\n+            if ( ref != null ) {\n+                final ResourceResolverFactory factory = (ResourceResolverFactory) this.bundleContext.getService(ref);\n+                if ( factory != null ) {\n+                    try {\n+                        this.resourceResolver = factory.getAdministrativeResourceResolver(null);\n+                        this.resourceResolverFactoryReference = ref;\n+                    } catch (final LoginException le) {\n+                        logger.error(\"Unable to get administrative resource resolver.\", le);\n+                        this.bundleContext.ungetService(ref);\n+                    }\n+                }\n+            }\n+        }\n+        return this.resourceResolver;\n+    }\n     /**\n      * Called by the Runnable.run method of the JCR Event Queue processor to\n      * process the {@link #osgiEventQueue} until the\n@@ -357,11 +359,12 @@ void processOsgiEventQueue() {\n             }\n \n             try {\n-                final EventAdmin localEa = this.eventAdmin;\n-                if (localEa != null) {\n+                final EventAdmin localEa = (EventAdmin) this.eventAdminTracker.getService();\n+                final ResourceResolver resolver = this.getResourceResolver();\n+                if (localEa != null && resolver != null ) {\n                     final String topic = (String) event.remove(EventConstants.EVENT_TOPIC);\n                     final String path = (String) event.get(SlingConstants.PROPERTY_PATH);\n-                    Resource resource = this.resourceResolver.getResource(path);\n+                    Resource resource = resolver.getResource(path);\n                     boolean sendEvent = true;\n                     if (!SlingConstants.TOPIC_RESOURCE_REMOVED.equals(topic)) {\n                         if (resource != null) {",
                "deletions": 66
            },
            {
                "sha": "b5d8ca8a480dd98e6e5575490d6906add68a329e",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderFactory.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "patch": "@@ -27,7 +27,9 @@\n import javax.jcr.SimpleCredentials;\n import javax.jcr.query.Query;\n \n+import org.apache.felix.scr.annotations.Activate;\n import org.apache.felix.scr.annotations.Component;\n+import org.apache.felix.scr.annotations.Deactivate;\n import org.apache.felix.scr.annotations.Properties;\n import org.apache.felix.scr.annotations.Property;\n import org.apache.felix.scr.annotations.Reference;\n@@ -41,9 +43,12 @@\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.commons.classloader.DynamicClassLoaderManager;\n+import org.apache.sling.commons.osgi.PropertiesUtil;\n import org.apache.sling.jcr.api.SlingRepository;\n import org.apache.sling.jcr.resource.JcrResourceConstants;\n+import org.apache.sling.jcr.resource.internal.JcrResourceListener;\n import org.osgi.framework.Constants;\n+import org.osgi.service.component.ComponentContext;\n \n /**\n  * The <code>JcrResourceProviderFactory</code> creates\n@@ -67,6 +72,24 @@\n     @Reference\n     private SlingRepository repository;\n \n+    /** The jcr resource listner. */\n+    private JcrResourceListener listener;\n+\n+    @Activate\n+    protected void activate(final ComponentContext context)\n+    throws RepositoryException {\n+        final String root = PropertiesUtil.toString(context.getProperties().get(ResourceProvider.ROOTS), \"/\");\n+        this.listener = new JcrResourceListener(root, null, this.repository, context.getBundleContext());\n+    }\n+\n+    @Deactivate\n+    protected void deactivate() {\n+        if ( this.listener != null ) {\n+            this.listener.deactivate();\n+            this.listener = null;\n+        }\n+    }\n+\n     /** Get the dynamic class loader if available */\n     ClassLoader getDynamicClassLoader() {\n         final DynamicClassLoaderManager dclm = this.dynamicClassLoaderManager;",
                "deletions": 0
            },
            {
                "sha": "e509776334af25a8950069404ba37d3432d56ae3",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/JcrResourceListenerTest.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "patch": "@@ -16,6 +16,10 @@\n  */\n package org.apache.sling.jcr.resource.internal;\n \n+import static org.mockito.Matchers.any;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n@@ -36,8 +40,10 @@\n import org.apache.sling.commons.testing.jcr.RepositoryTestBase;\n import org.apache.sling.commons.testing.jcr.RepositoryUtil;\n import org.apache.sling.jcr.resource.internal.helper.jcr.JcrNodeResource;\n+import org.osgi.framework.BundleContext;\n import org.osgi.service.event.Event;\n import org.osgi.service.event.EventAdmin;\n+import org.osgi.util.tracker.ServiceTracker;\n \n /**\n  * Test of JcrResourceListener.\n@@ -52,16 +58,16 @@\n     @Override\n     protected void tearDown() throws Exception {\n         super.tearDown();\n-        RepositoryUtil.startRepository();\n-        final Session adminSession = RepositoryUtil.getRepository().loginAdministrative(null);\n-        RepositoryUtil.registerSlingNodeTypes(adminSession);\n-        adminSession.logout();\n+        RepositoryUtil.stopRepository();\n     }\n \n     @Override\n     protected void setUp() throws Exception {\n         super.setUp();\n-        RepositoryUtil.stopRepository();\n+        RepositoryUtil.startRepository();\n+        final Session adminSession = RepositoryUtil.getRepository().loginAdministrative(null);\n+        RepositoryUtil.registerSlingNodeTypes(adminSession);\n+        adminSession.logout();\n     }\n \n     public void testDefaultWorkspace() throws Exception {\n@@ -264,7 +270,16 @@ public void sendEvent(Event event) {\n             }\n         };\n \n-        SynchronousJcrResourceListener listener = new SynchronousJcrResourceListener(factory, mockEA);\n+        final ServiceTracker tracker = mock(ServiceTracker.class);\n+        when(tracker.getService()).thenReturn(mockEA);\n+\n+        final BundleContext bundleContext = mock(BundleContext.class);\n+        when(bundleContext.createFilter(any(String.class))).thenReturn(null);\n+        when(bundleContext.getServiceReference(any(String.class))).thenReturn(null);\n+        when(bundleContext.getService(null)).thenReturn(mockEA);\n+\n+        SynchronousJcrResourceListener listener = new SynchronousJcrResourceListener(factory, getRepository(),\n+                        bundleContext, resolver, tracker);\n \n         createdPath = createTestPath();\n         createNode(session, createdPath);",
                "deletions": 6
            },
            {
                "sha": "4763702c3d9591c8a094861c6a108ea4e9c0b389",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/1b29aa73b477f574d20963a027f361613cbe0464/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java",
                "status": "modified",
                "changes": 17,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/SynchronousJcrResourceListener.java?ref=1b29aa73b477f574d20963a027f361613cbe0464",
                "patch": "@@ -22,8 +22,11 @@\n \n import org.apache.jackrabbit.core.observation.SynchronousEventListener;\n import org.apache.sling.api.resource.LoginException;\n+import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ResourceResolverFactory;\n-import org.osgi.service.event.EventAdmin;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.osgi.framework.BundleContext;\n+import org.osgi.util.tracker.ServiceTracker;\n \n /**\n  * This class is used to ensure that events are handled during the test.\n@@ -35,11 +38,15 @@\n public class SynchronousJcrResourceListener extends JcrResourceListener implements SynchronousEventListener {\n \n     public SynchronousJcrResourceListener(\n-            ResourceResolverFactory factory, EventAdmin eventAdmin)\n+            ResourceResolverFactory factory,\n+            SlingRepository repo,\n+            BundleContext bundleContext,\n+            final ResourceResolver resolver,\n+            final ServiceTracker tracker)\n             throws LoginException, RepositoryException, NoSuchFieldException {\n-        PrivateAccessor.setField(this, \"resourceResolverFactory\", factory);\n-        PrivateAccessor.setField(this, \"eventAdmin\", eventAdmin);\n-        this.activate();\n+        super(\"/\", null, repo, bundleContext);\n+        PrivateAccessor.setField(this, \"resourceResolver\", resolver);\n+        PrivateAccessor.setField(this, \"eventAdminTracker\", tracker);\n     }\n \n     public void dispose() {",
                "deletions": 5
            }
        ],
        "patched_files": [
            "JcrResourceProviderFactory.java",
            "SynchronousJcrResourceListener.java",
            "JcrResourceListener.java"
        ],
        "unit_tests": [
            "JcrResourceListenerTest.java"
        ]
    },
    "sling-org-apache-sling-jcr-resource_5eb4484": {
        "repo": "sling-org-apache-sling-jcr-resource",
        "message": "Revert \"SLING-7805 - NPE in Oak SessionImpl when starting up\"\n\nRestore the fix for SLING-3524",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/5eb44848b8f330447915ac9bac03f64d598e2cc5",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-resource/commit/4ed12eb799799404347f6a3550c712284a825741",
        "bug_id": "sling-org-apache-sling-jcr-resource_5eb4484",
        "file": [
            {
                "sha": "fea14126697f07e32cbef706a3c6905341c5a12a",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/5eb44848b8f330447915ac9bac03f64d598e2cc5/pom.xml",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/5eb44848b8f330447915ac9bac03f64d598e2cc5/pom.xml",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/pom.xml?ref=5eb44848b8f330447915ac9bac03f64d598e2cc5",
                "patch": "@@ -54,6 +54,7 @@\n             <plugin>\n                 <groupId>org.apache.sling</groupId>\n                 <artifactId>maven-sling-plugin</artifactId>\n+                <version>2.3.2</version>\n                 <executions>\n                     <execution>\n                         <id>generate-adapter-metadata</id>\n@@ -176,7 +177,7 @@\n         <dependency>\n             <groupId>org.apache.sling</groupId>\n             <artifactId>org.apache.sling.api</artifactId>\n-            <version>2.16.4</version>\n+            <version>2.18.2</version>\n             <scope>provided</scope>\n         </dependency>\n         <dependency>",
                "deletions": 1
            },
            {
                "sha": "064f095421138569fa094b9e44501defae4911ca",
                "filename": "src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java",
                "status": "modified",
                "changes": 37,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/main/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrProviderStateFactory.java?ref=5eb44848b8f330447915ac9bac03f64d598e2cc5",
                "patch": "@@ -144,7 +144,12 @@ private JcrProviderState createJcrProviderState(\n             @NotNull final Map<String, Object> authenticationInfo,\n             @Nullable final BundleContext ctx\n     ) throws LoginException {\n-        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession);\n+        boolean explicitSessionUsed = (getSession(authenticationInfo) != null);\n+        final Session impersonatedSession = handleImpersonation(session, authenticationInfo, logoutSession, explicitSessionUsed);\n+        if (impersonatedSession != session && explicitSessionUsed) {\n+            // update the session in the auth info map in case the resolver gets cloned in the future\n+            authenticationInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, impersonatedSession);\n+        }\n         // if we're actually impersonating, we're responsible for closing the session we've created, regardless\n         // of what the original logoutSession value was.\n         boolean doLogoutSession = logoutSession || (impersonatedSession != session);\n@@ -166,25 +171,35 @@ private JcrProviderState createJcrProviderState(\n      * @param logoutSession\n      *            whether to logout the <code>session</code> after impersonation\n      *            or not.\n+     * @param explicitSessionUsed\n+     *            whether the JCR session was explicitly given in the auth info or not.\n      * @return The original session or impersonated session.\n      * @throws LoginException\n      *             If something goes wrong.\n      */\n     private static Session handleImpersonation(final Session session, final Map<String, Object> authenticationInfo,\n-            final boolean logoutSession) throws LoginException {\n+            final boolean logoutSession, boolean explicitSessionUsed) throws LoginException {\n         final String sudoUser = getSudoUser(authenticationInfo);\n-        if (sudoUser != null && !session.getUserID().equals(sudoUser)) {\n-            try {\n-                final SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n+        // Do we need session.impersonate() because we are asked to impersonate another user?\n+        boolean needsSudo = (sudoUser != null) && !session.getUserID().equals(sudoUser);\n+        // Do we need session.impersonate() to get an independent copy of the session we were given in the auth info?\n+        boolean needsCloning = !needsSudo && explicitSessionUsed && authenticationInfo.containsKey(ResourceProvider.AUTH_CLONE);\n+        try {\n+            if (needsSudo) {\n+                SimpleCredentials creds = new SimpleCredentials(sudoUser, new char[0]);\n                 copyAttributes(creds, authenticationInfo);\n                 creds.setAttribute(ResourceResolver.USER_IMPERSONATOR, session.getUserID());\n                 return session.impersonate(creds);\n-            } catch (final RepositoryException re) {\n-                throw getLoginException(re);\n-            } finally {\n-                if (logoutSession) {\n-                    session.logout();\n-                }\n+            } else if (needsCloning) {\n+                SimpleCredentials creds = new SimpleCredentials(session.getUserID(), new char[0]);\n+                copyAttributes(creds, authenticationInfo);\n+                return session.impersonate(creds);\n+            }\n+        } catch (final RepositoryException re) {\n+            throw getLoginException(re);\n+        } finally {\n+            if (logoutSession) {\n+                session.logout();\n             }\n         }\n         return session;",
                "deletions": 11
            },
            {
                "sha": "a471446bd2b1fcdb4f1daf6420d664e424096b3b",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java",
                "status": "added",
                "changes": 199,
                "additions": 199,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderSessionHandlingTest.java?ref=5eb44848b8f330447915ac9bac03f64d598e2cc5",
                "patch": "@@ -0,0 +1,199 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.jcr.resource.internal.helper.jcr;\n+\n+import static org.hamcrest.Matchers.is;\n+import static org.hamcrest.Matchers.not;\n+import static org.hamcrest.Matchers.sameInstance;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotSame;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assume.assumeThat;\n+import static org.junit.Assume.assumeTrue;\n+import static org.mockito.Matchers.anyString;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+\n+import javax.jcr.Session;\n+\n+import org.apache.sling.api.resource.ResourceResolver;\n+import org.apache.sling.api.resource.ResourceResolverFactory;\n+import org.apache.sling.commons.testing.jcr.RepositoryProvider;\n+import org.apache.sling.jcr.api.SlingRepository;\n+import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n+import org.apache.sling.spi.resource.provider.ResolveContext;\n+import org.apache.sling.spi.resource.provider.ResourceProvider;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+import org.junit.runners.Parameterized;\n+import org.junit.runners.Parameterized.Parameter;\n+import org.junit.runners.Parameterized.Parameters;\n+import org.mockito.Mockito;\n+import org.osgi.framework.ServiceReference;\n+import org.osgi.service.component.ComponentContext;\n+\n+@RunWith(Parameterized.class)\n+public class JcrResourceProviderSessionHandlingTest {\n+\n+    private enum LoginStyle {USER, SESSION};\n+\n+    private static final String AUTH_USER = \"admin\";\n+    private static final char[] AUTH_PASSWORD = \"admin\".toCharArray();\n+    private static final String SUDO_USER = \"anonymous\";\n+\n+    @Parameters(name = \"loginStyle= {0}, sudo = {1}, clone = {2}\")\n+    public static List<Object[]> data() {\n+\n+        LoginStyle[] loginStyles = LoginStyle.values();\n+        boolean[] sudoOptions = new boolean[] {false, true};\n+        boolean[] cloneOptions = new boolean[] {false, true};\n+\n+        // Generate all possible combinations into data.\n+        List<Object[]> data = new ArrayList<>();\n+        Object[] dataPoint = new Object[3];\n+        for (LoginStyle loginStyle : loginStyles) {\n+            dataPoint[0] = loginStyle;\n+            for (boolean sudo : sudoOptions) {\n+                dataPoint[1] = sudo;\n+                for (boolean clone : cloneOptions) {\n+                    dataPoint[2] = clone;\n+                    data.add(dataPoint.clone());\n+                }\n+            }\n+        }\n+        return data;\n+    }\n+\n+    @Parameter(0)\n+    public LoginStyle loginStyle;\n+\n+    @Parameter(1)\n+    public boolean useSudo;\n+\n+    @Parameter(2)\n+    public boolean doClone;\n+\n+    // Session we're using when loginStyle == SESSION, null otherwise.\n+    private Session explicitSession;\n+\n+    private JcrResourceProvider jcrResourceProvider;\n+    private JcrProviderState jcrProviderState;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        SlingRepository repo = RepositoryProvider.instance().getRepository();\n+        Map<String, Object> authInfo = new HashMap<>();\n+        switch (loginStyle) {\n+        case USER:\n+            authInfo.put(ResourceResolverFactory.USER, AUTH_USER);\n+            authInfo.put(ResourceResolverFactory.PASSWORD, AUTH_PASSWORD);\n+            break;\n+        case SESSION:\n+            explicitSession = repo.loginAdministrative(null);\n+            authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, explicitSession);\n+            break;\n+        }\n+\n+        if (useSudo) {\n+            authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, SUDO_USER);\n+        }\n+\n+        if (doClone) {\n+            authInfo.put(ResourceProvider.AUTH_CLONE, true);\n+        }\n+\n+        ComponentContext ctx = mock(ComponentContext.class);\n+        when(ctx.locateService(anyString(), Mockito.<ServiceReference<Object>>any())).thenReturn(repo);\n+\n+        jcrResourceProvider = new JcrResourceProvider();\n+        jcrResourceProvider.activate(ctx);\n+\n+        jcrProviderState = jcrResourceProvider.authenticate(authInfo);\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+\n+        // Some tests do a logout, so check for liveness before trying to log out.\n+        if (jcrProviderState.getSession().isLive()) {\n+            jcrResourceProvider.logout(jcrProviderState);\n+        }\n+\n+        jcrResourceProvider.deactivate();\n+\n+        if (explicitSession != null) {\n+            explicitSession.logout();\n+        }\n+    }\n+\n+    @Test\n+    public void sessionUsesCorrectUser() {\n+        String expectedUser = useSudo ? SUDO_USER : AUTH_USER;\n+        assertEquals(expectedUser, jcrProviderState.getSession().getUserID());\n+    }\n+\n+    @Test\n+    public void explicitSessionNotClosedOnLogout() {\n+        assumeTrue(loginStyle == LoginStyle.SESSION);\n+\n+        jcrResourceProvider.logout(jcrProviderState);\n+\n+        assertTrue(explicitSession.isLive());\n+    }\n+\n+    @Test\n+    public void sessionsDoNotLeak() {\n+        // This test is only valid if we either didn't pass an explicit session,\n+        // or the provider had to clone it. Sessions created by the provider\n+        // must be closed by the provider, or we have a session leak.\n+        assumeThat(jcrProviderState.getSession(), is(not(sameInstance(explicitSession))));\n+\n+        jcrResourceProvider.logout(jcrProviderState);\n+\n+        assertFalse(jcrProviderState.getSession().isLive());\n+    }\n+\n+    @Test\n+    public void impersonatorIsReportedCorrectly() {\n+        assumeTrue(useSudo);\n+\n+        @SuppressWarnings(\"unchecked\")\n+        ResolveContext<JcrProviderState> mockContext = mock(ResolveContext.class);\n+        when(mockContext.getProviderState()).thenReturn(jcrProviderState);\n+        Object reportedImpersonator = jcrResourceProvider.getAttribute(mockContext, ResourceResolver.USER_IMPERSONATOR);\n+\n+        assertEquals(AUTH_USER, reportedImpersonator);\n+    }\n+\n+    @Test\n+    public void clonesAreIndependent() {\n+        assumeTrue(loginStyle == LoginStyle.SESSION && doClone);\n+\n+        assertNotSame(explicitSession, jcrProviderState.getSession());\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "32c6bfba17d77576b4d0e751523fb46e727efdc8",
                "filename": "src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/blob/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-resource/raw/5eb44848b8f330447915ac9bac03f64d598e2cc5/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-resource/contents/src/test/java/org/apache/sling/jcr/resource/internal/helper/jcr/JcrResourceProviderTest.java?ref=5eb44848b8f330447915ac9bac03f64d598e2cc5",
                "patch": "@@ -19,18 +19,11 @@\n package org.apache.sling.jcr.resource.internal.helper.jcr;\n \n import java.security.Principal;\n-import java.util.HashMap;\n-import java.util.Map;\n \n import javax.jcr.Repository;\n-import javax.jcr.RepositoryException;\n import javax.jcr.Session;\n-import javax.naming.NamingException;\n \n-import org.apache.sling.api.resource.LoginException;\n-import org.apache.sling.api.resource.ResourceResolverFactory;\n import org.apache.sling.commons.testing.jcr.RepositoryTestBase;\n-import org.apache.sling.jcr.resource.api.JcrResourceConstants;\n import org.apache.sling.spi.resource.provider.ResolveContext;\n import org.junit.Assert;\n import org.mockito.Mockito;\n@@ -47,34 +40,24 @@ protected void setUp() throws Exception {\n         super.setUp();\n         // create the session\n         session = getSession();\n+        Repository repo = getRepository();\n+        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n+        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n+        jcrResourceProvider = new JcrResourceProvider();\n+        jcrResourceProvider.activate(ctx);\n     }\n \n     @Override\n     protected void tearDown() throws Exception {\n+        jcrResourceProvider.deactivate();\n         super.tearDown();\n     }\n \n     public void testAdaptTo_Principal() {\n-        jcrResourceProvider = new JcrResourceProvider();\n         ResolveContext ctx = Mockito.mock(ResolveContext.class);\n         Mockito.when(ctx.getProviderState()).thenReturn(new JcrProviderState(session, null, false));\n         Assert.assertNotNull(jcrResourceProvider.adaptTo(ctx, Principal.class));\n     }\n-    \n-    public void testLeakOnSudo() throws LoginException, RepositoryException, NamingException {\n-        Repository repo = getRepository();\n-        ComponentContext ctx = Mockito.mock(ComponentContext.class);\n-        Mockito.when(ctx.locateService(Mockito.anyString(), Mockito.any(ServiceReference.class))).thenReturn(repo);\n-        jcrResourceProvider = new JcrResourceProvider();\n-        jcrResourceProvider.activate(ctx);\n-        Map<String, Object> authInfo = new HashMap<String, Object>();\n-        authInfo.put(JcrResourceConstants.AUTHENTICATION_INFO_SESSION, session);\n-        authInfo.put(ResourceResolverFactory.USER_IMPERSONATION, \"anonymous\");\n-        JcrProviderState providerState = jcrResourceProvider.authenticate(authInfo);\n-        Assert.assertNotEquals(\"Impersonation didn't start new session\", session, providerState.getSession());\n-        jcrResourceProvider.logout(providerState);\n-        assertFalse(\"Impersonated session wasn't closed.\", providerState.getSession().isLive());\n-    }\n }\n \n ",
                "deletions": 23
            }
        ],
        "patched_files": [
            "JcrResourceProvider.java",
            "JcrProviderStateFactory.java"
        ],
        "unit_tests": [
            "JcrResourceProviderTest.java",
            "JcrResourceProviderSessionHandlingTest.java"
        ]
    }
}