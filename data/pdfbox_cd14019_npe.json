[
    {
        "repo": "pdfbox",
        "commit": "https://github.com/apache/pdfbox/commit/cd14019b9d5a82db3282685114410ce788f8bcbb",
        "bug_id": "pdfbox_cd14019",
        "message": "PDFBOX-1381: update limits in setKids and avoid NPEs as proposed by Dominic Tubach\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1454845 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/da7e1be335e89a7ab6e6adb1cf2b071cc1e21295",
        "patched_files": [
            "PDPageLabels.java",
            "PDNumberTreeNode.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 72,
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "deletions": 34,
                "sha": "b35a1cd4a273be9c8c4ac48bd20d38a338617e36",
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n@@ -33,22 +35,24 @@\n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n  * 7.9.7 for more details.\n- * \n+ *\n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>,\n  *         <a href=\"igor.podolskiy@ievvwi.uni-stuttgart.de\">Igor Podolskiy</a>\n  * @version $Revision: 1.4 $\n  */\n public class PDNumberTreeNode implements COSObjectable\n {\n+    private static final Log LOG = LogFactory.getLog( PDNumberTreeNode.class );\n+\n     private COSDictionary node;\n-    private Class<?> valueType = null;\n+    private Class<? extends COSObjectable> valueType = null;\n \n     /**\n      * Constructor.\n      *\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( Class<?> valueClass )\n+    public PDNumberTreeNode( Class<? extends COSObjectable> valueClass )\n     {\n         node = new COSDictionary();\n         valueType = valueClass;\n@@ -60,7 +64,7 @@ public PDNumberTreeNode( Class<?> valueClass )\n      * @param dict The dictionary that holds the name information.\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( COSDictionary dict, Class<?> valueClass )\n+    public PDNumberTreeNode( COSDictionary dict, Class<? extends COSObjectable> valueClass )\n     {\n         node = dict;\n         valueType = valueClass;\n@@ -91,19 +95,18 @@ public COSDictionary getCOSDictionary()\n      *\n      * @return The list of children or null if there are no children.\n      */\n-    public List getKids()\n+    public List<PDNumberTreeNode> getKids()\n     {\n-\n-        List retval = null;\n+        List<PDNumberTreeNode> retval = null;\n         COSArray kids = (COSArray)node.getDictionaryObject( COSName.KIDS );\n         if( kids != null )\n         {\n-            List pdObjects = new ArrayList();\n+            List<PDNumberTreeNode> pdObjects = new ArrayList<PDNumberTreeNode>();\n             for( int i=0; i<kids.size(); i++ )\n             {\n                 pdObjects.add( createChildNode( (COSDictionary)kids.getObject(i) ) );\n             }\n-            retval = new COSArrayList(pdObjects,kids);\n+            retval = new COSArrayList<PDNumberTreeNode>(pdObjects,kids);\n         }\n \n         return retval;\n@@ -114,8 +117,22 @@ public List getKids()\n      *\n      * @param kids The children of this number tree.\n      */\n-    public void setKids( List kids )\n+    public void setKids( List<? extends PDNumberTreeNode> kids )\n     {\n+        if (kids != null && kids.size() > 0)\n+        {\n+            PDNumberTreeNode firstKid = kids.get(0);\n+            PDNumberTreeNode lastKid = kids.get(kids.size() - 1);\n+            Integer lowerLimit = firstKid.getLowerLimit();\n+            this.setLowerLimit(lowerLimit);\n+            Integer upperLimit = lastKid.getUpperLimit();\n+            this.setUpperLimit(upperLimit);\n+        }\n+        else if ( node.getDictionaryObject( COSName.NUMS ) == null )\n+        {\n+            // Remove limits if there are no kids and no numbers set.\n+            node.setItem( COSName.LIMITS, null);\n+        }\n         node.setItem( COSName.KIDS, COSArrayList.converterToCOSArray( kids ) );\n     }\n \n@@ -125,29 +142,36 @@ public void setKids( List kids )\n      * @param index The index in the number tree.\n      *\n      * @return The value corresponding to the index.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n     public Object getValue( Integer index ) throws IOException\n     {\n         Object retval = null;\n-        Map<Integer,Object> names = getNumbers();\n+        Map<Integer,COSObjectable> names = getNumbers();\n         if( names != null )\n         {\n             retval = names.get( index );\n         }\n         else\n         {\n-            List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            List<PDNumberTreeNode> kids = getKids();\n+            if ( kids != null )\n             {\n-                PDNumberTreeNode childNode = (PDNumberTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( index );\n+                    PDNumberTreeNode childNode = kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( index );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                LOG.warn(\"NumberTreeNode does not have \\\"nums\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }\n@@ -158,27 +182,25 @@ public Object getValue( Integer index ) throws IOException\n      * depend on where this class is being used.\n      *\n      * @return A map of COS objects.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n-    public Map getNumbers()  throws IOException\n+    public Map<Integer,COSObjectable> getNumbers()  throws IOException\n     {\n-        Map<Integer,Object> indices = null;\n+        Map<Integer, COSObjectable> indices = null;\n         COSArray namesArray = (COSArray)node.getDictionaryObject( COSName.NUMS );\n         if( namesArray != null )\n         {\n-            indices = new HashMap<Integer,Object>();\n+            indices = new HashMap<Integer,COSObjectable>();\n             for( int i=0; i<namesArray.size(); i+=2 )\n             {\n                 COSInteger key = (COSInteger)namesArray.getObject(i);\n                 COSBase cosValue = namesArray.getObject( i+1 );\n-                Object pdValue = convertCOSToPD( cosValue );\n-\n+                COSObjectable pdValue = convertCOSToPD( cosValue );\n                 indices.put( Integer.valueOf(key.intValue()), pdValue );\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n-\n         return indices;\n     }\n \n@@ -191,12 +213,12 @@ public Map getNumbers()  throws IOException\n      * @return The converted PD Model object.\n      * @throws IOException If there is an error during creation.\n      */\n-    protected Object convertCOSToPD( COSBase base ) throws IOException\n+    protected COSObjectable convertCOSToPD( COSBase base ) throws IOException\n     {\n-        Object retval = null;\n+        COSObjectable retval = null;\n         try\n         {\n-            Constructor<?> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n+            Constructor<? extends COSObjectable> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n             retval = ctor.newInstance( new Object[] { base } );\n         }\n         catch( Throwable t )\n@@ -225,7 +247,7 @@ protected PDNumberTreeNode createChildNode( COSDictionary dic )\n      *\n      * @param numbers The map of names to objects.\n      */\n-    public void setNumbers( Map<Integer,Object> numbers )\n+    public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n     {\n         if( numbers == null )\n         {\n@@ -234,7 +256,7 @@ public void setNumbers( Map<Integer,Object> numbers )\n         }\n         else\n         {\n-            List<Integer> keys = new ArrayList( numbers.keySet() );\n+            List<Integer> keys = new ArrayList<Integer>( numbers.keySet() );\n             Collections.sort( keys );\n             COSArray array = new COSArray();\n             for( int i=0; i<keys.size(); i++ )\n@@ -266,7 +288,7 @@ public Integer getUpperLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 1 ));\n         }\n@@ -286,8 +308,16 @@ private void setUpperLimit( Integer upper )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( upper != null)\n+        {\n+            arr.setInt( 1, upper.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 1, null );\n         }\n-        arr.setInt( 1, upper.intValue() );\n     }\n \n     /**\n@@ -299,7 +329,7 @@ public Integer getLowerLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 0 ));\n         }\n@@ -319,7 +349,15 @@ private void setLowerLimit( Integer lower )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( lower != null )\n+        {\n+            arr.setInt( 0, lower.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 0, null );\n         }\n-        arr.setInt( 0, lower.intValue() );\n     }\n }",
                "changes": 106
            },
            {
                "status": "modified",
                "additions": 17,
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "deletions": 8,
                "sha": "c05839a0bbd143f53b8075f1ac9007e8762f641e",
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "patch": "@@ -98,19 +98,25 @@ public PDPageLabels(PDDocument document, COSDictionary dict) throws IOException\n         findLabels(root);\n     }\n     \n-    private void findLabels(PDNumberTreeNode node) throws IOException {\n-        if (node.getKids() != null) {\n+    private void findLabels(PDNumberTreeNode node) throws IOException \n+    {\n+        if (node.getKids() != null) \n+        {\n             List<PDNumberTreeNode> kids = node.getKids();\n-            for (PDNumberTreeNode kid : kids) {\n+            for (PDNumberTreeNode kid : kids) \n+            {\n                 findLabels(kid);\n             }\n         }\n-        else if (node.getNumbers() != null) {\n-            Map<Integer, COSDictionary> numbers = node.getNumbers();\n-            for (Entry<Integer, COSDictionary> i : numbers.entrySet())\n+        else if (node.getNumbers() != null) \n+        {\n+            Map<Integer, COSObjectable> numbers = node.getNumbers();\n+            for (Entry<Integer, COSObjectable> i : numbers.entrySet())\n             {\n                 if(i.getKey() >= 0)\n-                    labels.put(i.getKey(), new PDPageLabelRange(i.getValue()));\n+                {\n+                    labels.put(i.getKey(), new PDPageLabelRange((COSDictionary)i.getValue()));\n+                }\n             }\n         }\n     }\n@@ -160,7 +166,10 @@ public void setLabelItem(int startPage, PDPageLabelRange item)\n     {\n         labels.put(startPage, item);\n     }\n-\n+    \n+    /**\n+     * {@inheritDoc} \n+     */\n     public COSBase getCOSObject()\n     {\n         COSDictionary dict = new COSDictionary();",
                "changes": 25
            },
            {
                "status": "added",
                "additions": 188,
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "deletions": 0,
                "sha": "993c3c949e5ae5fe694c9134e9dbb0f6bbab8aa4",
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "patch": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.pdfbox.cos.COSBase;\n+import org.apache.pdfbox.cos.COSInteger;\n+\n+/**\n+ * A test case for PDNumberTreeNode.\n+ * Based on TestPDNameTreeNode.\n+ * \n+ * @author Dominic Tubach\n+ */\n+public class TestPDNumberTreeNode extends TestCase\n+{\n+\n+    private PDNumberTreeNode node1;\n+    private PDNumberTreeNode node2;\n+    private PDNumberTreeNode node4;\n+    private PDNumberTreeNode node5;\n+    private PDNumberTreeNode node24;\n+    \n+    public static class PDTest implements COSObjectable {\n+        private int value;\n+\n+        public PDTest(int value) {\n+            this.value = value;\n+        }\n+        \n+        public PDTest(COSInteger cosInt) {\n+            this.value = cosInt.intValue();\n+        }\n+\n+        public COSBase getCOSObject()\n+        {\n+            return COSInteger.get( value );\n+        }\n+\n+        @Override\n+        public int hashCode()\n+        {\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + value;\n+            return result;\n+        }\n+\n+        @Override\n+        public boolean equals( Object obj )\n+        {\n+            if ( this == obj)\n+                return true;\n+            if ( obj == null)\n+                return false;\n+            if ( getClass() != obj.getClass())\n+                return false;\n+            PDTest other = (PDTest) obj;\n+            if ( value != other.value)\n+                return false;\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        this.node5 = new PDNumberTreeNode(PDTest.class);\n+        Map<Integer,PDTest> Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 1, new PDTest( 89 ) );\n+        Numbers.put( 2, new PDTest( 13 ) );\n+        Numbers.put( 3, new PDTest( 95 ) );\n+        Numbers.put( 4, new PDTest( 51 ) );\n+        Numbers.put( 5, new PDTest( 18 ) );\n+        Numbers.put( 6, new PDTest( 33 ) );\n+        Numbers.put( 7, new PDTest( 85 ) );\n+        this.node5.setNumbers( Numbers );\n+\n+        this.node24 = new PDNumberTreeNode( PDTest.class );\n+        Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 8, new PDTest( 54 ) );\n+        Numbers.put( 9, new PDTest( 70 ) );\n+        Numbers.put( 10, new PDTest( 39 ) );\n+        Numbers.put( 11, new PDTest( 30 ) );\n+        Numbers.put( 12, new PDTest( 40 ) );\n+        this.node24.setNumbers( Numbers );\n+\n+        this.node2 = new PDNumberTreeNode( PDTest.class );\n+        List<PDNumberTreeNode> kids = this.node2.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node5 );\n+        this.node2.setKids( kids );\n+\n+        this.node4 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node4.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node24 );\n+        this.node4.setKids( kids );\n+\n+        this.node1 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node1.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node2 );\n+        kids.add( this.node4 );\n+        this.node1.setKids( kids );\n+    }\n+    \n+    public void testGetValue() throws IOException {\n+        Assert.assertEquals(new PDTest( 51 ), this.node5.getValue( 4 ));\n+        Assert.assertEquals(new PDTest(70), this.node1.getValue( 9 ));\n+        \n+        this.node1.setKids( null );\n+        this.node1.setNumbers( null );\n+        Assert.assertNull( this.node1.getValue( 0 ) );\n+    }\n+\n+    public void testUpperLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node5.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node2.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node24.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node4.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node1.getUpperLimit());\n+\n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getUpperLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getUpperLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getUpperLimit() );\n+    }\n+\n+    public void testLowerLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node5.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node2.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node24.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node4.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node1.getLowerLimit());\n+        \n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getLowerLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getLowerLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getLowerLimit() );\n+    }\n+\n+}",
                "changes": 188
            }
        ],
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
        "buggy_files": [
            "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
            "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java"
        ],
        "fixed": true
    }
]