{
    "sentry_13010b0": {
        "bug_id": "sentry_13010b0",
        "commit": "https://github.com/apache/sentry/commit/13010b0b600c4f2e7a7ea7f0ec8dcae87632950a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/sentry/blob/13010b0b600c4f2e7a7ea7f0ec8dcae87632950a/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/HMSPaths.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/HMSPaths.java?ref=13010b0b600c4f2e7a7ea7f0ec8dcae87632950a",
                "deletions": 1,
                "filename": "sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/HMSPaths.java",
                "patch": "@@ -878,7 +878,13 @@ void renameAuthzObject(String oldName, List<List<String>> oldPathElems,\n     if (!oldPathElements.equals(newPathElements)) {\n       Entry oldEntry = root.find(oldPathElements.toArray(new String[0]), false);\n       Entry newParent = root.createParent(newPathElements);\n-      oldEntry.moveTo(newParent, newPathElements.get(newPathElements.size() - 1));\n+\n+      if (oldEntry == null) {\n+        LOG.warn(String.format(\"%s Moving old paths for renameAuthzObject({%s, %s} -> {%s, %s}) is skipped. Cannot find entry for old name\",\n+            this, oldName, assemblePaths(oldPathElems), newName, assemblePaths(newPathElems)));\n+      } else {\n+        oldEntry.moveTo(newParent, newPathElements.get(newPathElements.size() - 1));\n+      }\n     }\n \n     // Re-write authObj from oldName to newName.",
                "raw_url": "https://github.com/apache/sentry/raw/13010b0b600c4f2e7a7ea7f0ec8dcae87632950a/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/HMSPaths.java",
                "sha": "97a04d9eb5a1e0c5feb97b038b8fc0edec9b0d38",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/sentry/blob/13010b0b600c4f2e7a7ea7f0ec8dcae87632950a/sentry-hdfs/sentry-hdfs-common/src/test/java/org/apache/sentry/hdfs/TestHMSPaths.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-hdfs/sentry-hdfs-common/src/test/java/org/apache/sentry/hdfs/TestHMSPaths.java?ref=13010b0b600c4f2e7a7ea7f0ec8dcae87632950a",
                "deletions": 0,
                "filename": "sentry-hdfs/sentry-hdfs-common/src/test/java/org/apache/sentry/hdfs/TestHMSPaths.java",
                "patch": "@@ -395,6 +395,34 @@ public void testRenameDiffPaths() {\n         paths.findAuthzObject(HMSPaths.getPathElements(partition2Path)));\n   }\n \n+  @Test\n+  public void testRenameExternalTableDiffPaths() {\n+    String[] prefixes = {\"/user/hive/warehouse\"};\n+    HMSPaths paths = new HMSPaths(prefixes);\n+    //Create old table and partition locations\n+    String table1Path = \"/user/external/warehouse/db1.db/table1\";\n+    String partition1Path = \"/user/external/warehouse/db1.db/table1/part1\";\n+    paths.addAuthzObject(\"db1.table1\",\n+        HMSPaths.getPathsElements(Arrays.asList(table1Path, partition1Path)));\n+\n+    //Create new table location\n+    String table2Path = \"/user/external/warehouse/db2.db/table2\";\n+    paths.renameAuthzObject(\"db1.table1\", HMSPaths.getPathsElements(Arrays.asList(table1Path)),\n+        \"db2.table2\", HMSPaths.getPathsElements(Arrays.asList(table2Path)));\n+\n+    //Assert that old path is not associated with a table\n+    Assert.assertEquals(null, paths.findAuthzObject(HMSPaths.getPathElements(table1Path)));\n+    Assert.assertEquals(null, paths.findAuthzObject(HMSPaths.getPathElements(partition1Path)));\n+\n+    //Assert that new path is not associated with new table because no entry is created for external path\n+    Assert.assertEquals(null, paths.findAuthzObject(HMSPaths.getPathElements(table2Path)));\n+\n+    //Assert that old path is not moved under new table\n+    String partition2Path = \"/user/external/warehouse/db2.db/table2/part1\";\n+    Assert.assertEquals(null,\n+        paths.findAuthzObject(HMSPaths.getPathElements(partition2Path)));\n+  }\n+\n   @Test\n   public void testRenameSamePaths() {\n     String[] prefixes = {\"/user/hive/warehouse\"};",
                "raw_url": "https://github.com/apache/sentry/raw/13010b0b600c4f2e7a7ea7f0ec8dcae87632950a/sentry-hdfs/sentry-hdfs-common/src/test/java/org/apache/sentry/hdfs/TestHMSPaths.java",
                "sha": "fe2aa90663e210dd2a93bdb984ede74c26e484b0",
                "status": "modified"
            }
        ],
        "message": "SENTRY-2299: NPE In Sentry HDFS Sync Plugin (Na Li, reviewed by Sergio Pena, Kalyan Kumar Kalvagadda, Arjun Mishra)",
        "parent": "https://github.com/apache/sentry/commit/4d9665f60c240eba17356c6c91646c1c357a62d5",
        "repo": "sentry",
        "unit_tests": [
            "TestHMSPaths.java"
        ]
    },
    "sentry_370fab0": {
        "bug_id": "sentry_370fab0",
        "commit": "https://github.com/apache/sentry/commit/370fab099b93d4265f25af01d1d864b7a829d86d",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/sentry/blob/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/main/java/org/apache/sentry/provider/db/generic/service/thrift/SentryGenericPolicyProcessor.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-provider/sentry-provider-db/src/main/java/org/apache/sentry/provider/db/generic/service/thrift/SentryGenericPolicyProcessor.java?ref=370fab099b93d4265f25af01d1d864b7a829d86d",
                "deletions": 6,
                "filename": "sentry-provider/sentry-provider-db/src/main/java/org/apache/sentry/provider/db/generic/service/thrift/SentryGenericPolicyProcessor.java",
                "patch": "@@ -689,11 +689,12 @@ public TListSentryPrivilegesByAuthResponse list_sentry_privileges_by_authorizabl\n           requestedGroups = memberGroups;\n         }\n \n-        // Disallow non-admin to lookup roles that they are not part of\n+        Set<String> grantedRoles = toTrimmedLower(store.getRolesByGroups(request.getComponent(), requestedGroups));\n+\n+        // If activeRoleSet is not null, disallow non-admin to lookup roles that they are not part of.\n         if (activeRoleSet != null && !activeRoleSet.isAll()) {\n-          Set<String> grantedRoles = toTrimmedLower(store.getRolesByGroups(request.getComponent(), requestedGroups));\n-          Set<String> activeRoleNames = toTrimmedLower(activeRoleSet.getRoles());\n \n+          Set<String> activeRoleNames = toTrimmedLower(activeRoleSet.getRoles());\n           for (String activeRole : activeRoleNames) {\n             if (!grantedRoles.contains(activeRole)) {\n               throw new SentryAccessDeniedException(ACCESS_DENIAL_MESSAGE\n@@ -703,18 +704,30 @@ public TListSentryPrivilegesByAuthResponse list_sentry_privileges_by_authorizabl\n \n           // For non-admin, valid active roles are intersection of active roles and granted roles.\n           validActiveRoles.addAll(activeRoleSet.isAll() ? grantedRoles : Sets.intersection(activeRoleNames, grantedRoles));\n+        } else {\n+          // For non-admin, if activeRoleSet is null, valid active roles would be the granted roles.\n+          validActiveRoles.addAll(grantedRoles);\n         }\n       } else {\n         Set<String> allRoles = toTrimmedLower(store.getAllRoleNames());\n-        Set<String> activeRoleNames = toTrimmedLower(activeRoleSet.getRoles());\n+        Set<String> activeRoleNames = Sets.newHashSet();\n+        boolean isAllRoleSet = false;\n+\n+        // If activeRoleSet (which is optional) is null, valid active role will be all roles.\n+        if (activeRoleSet != null) {\n+          activeRoleNames = toTrimmedLower(activeRoleSet.getRoles());\n+          isAllRoleSet = activeRoleSet.isAll();\n+        } else {\n+          isAllRoleSet = true;\n+        }\n \n         // For admin, if requestedGroups are empty, valid active roles are intersection of active roles and all roles.\n         // Otherwise, valid active roles are intersection of active roles and the roles of requestedGroups.\n         if (requestedGroups == null || requestedGroups.isEmpty()) {\n-          validActiveRoles.addAll(activeRoleSet.isAll() ? allRoles : Sets.intersection(activeRoleNames, allRoles));\n+          validActiveRoles.addAll(isAllRoleSet ? allRoles : Sets.intersection(activeRoleNames, allRoles));\n         } else {\n           Set<String> requestedRoles = toTrimmedLower(store.getRolesByGroups(request.getComponent(), requestedGroups));\n-          validActiveRoles.addAll(activeRoleSet.isAll() ? allRoles : Sets.intersection(activeRoleNames, requestedRoles));\n+          validActiveRoles.addAll(isAllRoleSet ? allRoles : Sets.intersection(activeRoleNames, requestedRoles));\n         }\n       }\n ",
                "raw_url": "https://github.com/apache/sentry/raw/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/main/java/org/apache/sentry/provider/db/generic/service/thrift/SentryGenericPolicyProcessor.java",
                "sha": "2a287e9b95e36b7d365de603d94208bad59966bc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/sentry/blob/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/persistent/TestPrivilegeOperatePersistence.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/persistent/TestPrivilegeOperatePersistence.java?ref=370fab099b93d4265f25af01d1d864b7a829d86d",
                "deletions": 0,
                "filename": "sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/persistent/TestPrivilegeOperatePersistence.java",
                "patch": "@@ -966,6 +966,8 @@ public void testGetPrivilegesByAuthorizable() throws Exception {\n \n     assertEquals(0, sentryStore.getPrivilegesByAuthorizable(SEARCH, service1, null,\n         Arrays.asList(new Collection(COLLECTION_NAME), new Field(FIELD_NAME))).size());\n+    assertEquals(1, sentryStore.getPrivilegesByAuthorizable(SEARCH, service1, Sets.newHashSet(roleName1),\n+    Arrays.asList(new Collection(COLLECTION_NAME), new Field(FIELD_NAME))).size());\n     assertEquals(2, sentryStore.getPrivilegesByAuthorizable(SEARCH, service1,\n         Sets.newHashSet(roleName1), null).size());\n     assertEquals(2, sentryStore.getPrivilegesByAuthorizable(SEARCH, service1,",
                "raw_url": "https://github.com/apache/sentry/raw/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/persistent/TestPrivilegeOperatePersistence.java",
                "sha": "deefefa72f665cae6159b70056ae8c3075e1f844",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/sentry/blob/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/thrift/TestSentryGenericPolicyProcessor.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/thrift/TestSentryGenericPolicyProcessor.java?ref=370fab099b93d4265f25af01d1d864b7a829d86d",
                "deletions": 1,
                "filename": "sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/thrift/TestSentryGenericPolicyProcessor.java",
                "patch": "@@ -300,17 +300,27 @@ public void testGetRolesAndPrivileges() throws Exception {\n     assertEquals(Status.OK, fromTSentryStatus(response3.getStatus()));\n     assertEquals(2, response3.getPrivileges().size());\n \n+    // Optional parameters activeRoleSet and requested group name are both provided.\n     TListSentryPrivilegesByAuthRequest request4 = new TListSentryPrivilegesByAuthRequest();\n     request4.setGroups(Sets.newHashSet(groupName));\n     request4.setRoleSet(new TSentryActiveRoleSet(true, null));\n     request4.setRequestorUserName(ADMIN_USER);\n-\n     Set<String> authorizablesSet = Sets.newHashSet(\"Collection=c1->Field=f1\");\n     request4.setAuthorizablesSet(authorizablesSet);\n \n     TListSentryPrivilegesByAuthResponse response4 = processor.list_sentry_privileges_by_authorizable(request4);\n     assertEquals(Status.OK, fromTSentryStatus(response4.getStatus()));\n     assertEquals(1, response4.getPrivilegesMapByAuth().size());\n+\n+    // Optional parameters activeRoleSet and requested group name are both not provided.\n+    TListSentryPrivilegesByAuthRequest request5 = new TListSentryPrivilegesByAuthRequest();\n+    request5.setRequestorUserName(\"not_\" + ADMIN_USER);\n+    authorizablesSet = Sets.newHashSet(\"Collection=c1->Field=f2\");\n+    request5.setAuthorizablesSet(authorizablesSet);\n+\n+    TListSentryPrivilegesByAuthResponse response5 = processor.list_sentry_privileges_by_authorizable(request5);\n+    assertEquals(Status.OK, fromTSentryStatus(response5.getStatus()));\n+    assertEquals(1, response5.getPrivilegesMapByAuth().size());\n   }\n \n   @Test(expected=SentryConfigurationException.class)",
                "raw_url": "https://github.com/apache/sentry/raw/370fab099b93d4265f25af01d1d864b7a829d86d/sentry-provider/sentry-provider-db/src/test/java/org/apache/sentry/provider/db/generic/service/thrift/TestSentryGenericPolicyProcessor.java",
                "sha": "cc0b28ecd1ffffb62d0416405de0656633e31482",
                "status": "modified"
            }
        ],
        "message": "SENTRY-1217: NPE for list_sentry_privileges_by_authorizable when activeRoleSet is not set (Hao Hao, Reviewed by: Lenni Kuff)\n\nChange-Id: I8a59320d737209234fe6105a7ba734fd1df45566",
        "parent": "https://github.com/apache/sentry/commit/66b32afa87fab816af972d68b253f46c53ec7f58",
        "repo": "sentry",
        "unit_tests": [
            "TestSentryGenericPolicyProcessor.java"
        ]
    },
    "sentry_d96f951": {
        "bug_id": "sentry_d96f951",
        "commit": "https://github.com/apache/sentry/commit/d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/sentry/blob/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java?ref=d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
                "deletions": 4,
                "filename": "sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "patch": "@@ -23,13 +23,15 @@\n import java.util.LinkedList;\n import java.util.List;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n-\n import org.apache.sentry.hdfs.service.thrift.TPathChanges;\n import org.apache.sentry.hdfs.service.thrift.TPathsUpdate;\n import org.apache.commons.httpclient.util.URIUtil;\n import org.apache.commons.httpclient.URIException;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.hadoop.fs.FileSystem;\n+import org.apache.hadoop.conf.Configuration;\n \n import com.google.common.collect.Lists;\n \n@@ -42,7 +44,7 @@\n public class PathsUpdate implements Updateable.Update {\n \n   public static String ALL_PATHS = \"__ALL_PATHS__\";\n-\n+  private static final Configuration CONF = new Configuration();\n   private final TPathsUpdate tPathsUpdate;\n \n   public PathsUpdate() {\n@@ -89,6 +91,10 @@ public TPathsUpdate toThrift() {\n     return tPathsUpdate;\n   }\n \n+  @VisibleForTesting\n+  public static Configuration getConfiguration() {\n+    return CONF;\n+  }\n \n   /**\n    *\n@@ -106,9 +112,18 @@ public TPathsUpdate toThrift() {\n         return null;\n       }\n \n-      Preconditions.checkNotNull(uri.getScheme());\n+      String scheme = uri.getScheme();\n+      if (scheme == null) {\n+        // Use the default URI scheme only if the paths has no scheme.\n+        URI defaultUri = FileSystem.getDefaultUri(CONF);\n+        scheme = defaultUri.getScheme();\n+      }\n+\n+      // The paths without a scheme will be default to default scheme.\n+      Preconditions.checkNotNull(scheme);\n \n-      if(uri.getScheme().equalsIgnoreCase(\"hdfs\")) {\n+      // Non-HDFS paths will be skipped.\n+      if(scheme.equalsIgnoreCase(\"hdfs\")) {\n         return Lists.newArrayList(uri.getPath().split(\"^/\")[1]\n             .split(\"/\"));\n       } else {",
                "raw_url": "https://github.com/apache/sentry/raw/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-hdfs/sentry-hdfs-common/src/main/java/org/apache/sentry/hdfs/PathsUpdate.java",
                "sha": "50ef112ff9ea9674d3b0bbc4279620e7a82f2d95",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/sentry/blob/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/sentry/contents/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java?ref=d96f95160fd3dfa30c27b82d09fb5cc2c348b483",
                "deletions": 5,
                "filename": "sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "patch": "@@ -51,13 +51,12 @@\n import org.apache.hadoop.fs.permission.AclStatus;\n import org.apache.hadoop.fs.permission.FsAction;\n import org.apache.hadoop.fs.permission.FsPermission;\n-import org.apache.hadoop.hdfs.DFSConfigKeys;\n-import org.apache.hadoop.hdfs.DFSTestUtil;\n-import org.apache.hadoop.hdfs.HdfsConfiguration;\n-import org.apache.hadoop.hdfs.MiniDFSCluster;\n+import org.apache.hadoop.hdfs.*;\n import org.apache.hadoop.hdfs.server.namenode.EditLogFileOutputStream;\n import org.apache.hadoop.hive.conf.HiveConf;\n import org.apache.hadoop.hive.conf.HiveConf.ConfVars;\n+import org.apache.hadoop.hive.metastore.HiveMetaStoreClient;\n+import org.apache.hadoop.hive.metastore.api.StorageDescriptor;\n import org.apache.hadoop.io.LongWritable;\n import org.apache.hadoop.io.Text;\n import org.apache.hadoop.mapred.FileInputFormat;\n@@ -76,6 +75,7 @@\n import org.apache.hadoop.security.UserGroupInformation;\n import org.apache.sentry.binding.hive.SentryHiveAuthorizationTaskFactoryImpl;\n import org.apache.sentry.binding.hive.conf.HiveAuthzConf;\n+import org.apache.sentry.hdfs.PathsUpdate;\n import org.apache.sentry.hdfs.SentryAuthorizationProvider;\n import org.apache.sentry.provider.db.SentryAlreadyExistsException;\n import org.apache.sentry.provider.db.SimpleDBProviderBackend;\n@@ -101,6 +101,7 @@\n import com.google.common.collect.Maps;\n import com.google.common.io.Files;\n import com.google.common.io.Resources;\n+import org.apache.hadoop.hive.metastore.api.Table;\n \n public class TestHDFSIntegration {\n   \n@@ -140,13 +141,15 @@ public void reduce(Text key, Iterator<Long> values,\n \n   private static final int NUM_RETRIES = 10;\n   private static final int RETRY_WAIT = 1000;\n+  private static final String EXTERNAL_SENTRY_SERVICE = \"sentry.e2etest.external.sentry\";\n   private static final String DFS_NAMENODE_AUTHORIZATION_PROVIDER_KEY =\n       \"dfs.namenode.authorization.provider.class\";\n \n   private static MiniDFSCluster miniDFS;\n   private MiniMRClientCluster miniMR;\n   private static InternalHiveServer hiveServer2;\n   private static InternalMetastoreServer metastore;\n+  private static HiveMetaStoreClient hmsClient;\n \n   private static int sentryPort = -1;\n   protected static SentrySrv sentryServer;\n@@ -304,6 +307,7 @@ public void run() {\n           }\n         }.start();\n \n+        hmsClient = new HiveMetaStoreClient(hiveConf);\n         startHiveServer2(retries, hiveConf);\n         return null;\n       }\n@@ -1266,7 +1270,7 @@ public void testAllColumn() throws Throwable {\n     conn = hiveServer2.createConnection(StaticUserGroup.ADMIN1, StaticUserGroup.ADMIN1);\n     stmt = conn.createStatement();\n     stmt.execute(\"create database \" + dbName);\n-    stmt.execute(\"use \"+ dbName);\n+    stmt.execute(\"use \" + dbName);\n     stmt.execute(\"create table p1 (c1 string, c2 string) partitioned by (month int, day int)\");\n     stmt.execute(\"alter table p1 add partition (month=1, day=1)\");\n     loadDataTwoCols(stmt);\n@@ -1591,6 +1595,70 @@ private void verifyQuery(Statement stmt, String table, int n, int retry) throws\n     }\n   }\n \n+  /**\n+   * SENTRY-1002:\n+   * Ensure the paths with no scheme will not cause NPE during paths update.\n+   */\n+   @Test\n+   public void testMissingScheme() throws Throwable {\n+\n+     // In the local test environment, EXTERNAL_SENTRY_SERVICE is false,\n+     // set the default URI scheme to be hdfs.\n+     boolean testConfOff = new Boolean(System.getProperty(EXTERNAL_SENTRY_SERVICE, \"false\"));\n+     if (!testConfOff) {\n+       PathsUpdate.getConfiguration().set(\"fs.defaultFS\", \"hdfs:///\");\n+     }\n+\n+     tmpHDFSDir = new Path(\"/tmp/external\");\n+     if (!miniDFS.getFileSystem().exists(tmpHDFSDir)) {\n+       miniDFS.getFileSystem().mkdirs(tmpHDFSDir);\n+     }\n+\n+     Path partitionDir = new Path(\"/tmp/external/p1\");\n+     if (!miniDFS.getFileSystem().exists(partitionDir)) {\n+       miniDFS.getFileSystem().mkdirs(partitionDir);\n+     }\n+\n+     String dbName = \"db1\";\n+     String tblName = \"tab1\";\n+     dbNames = new String[]{dbName};\n+     roles = new String[]{\"admin_role\"};\n+     admin = StaticUserGroup.ADMIN1;\n+\n+     Connection conn;\n+     Statement stmt;\n+\n+     conn = hiveServer2.createConnection(\"hive\", \"hive\");\n+     stmt = conn.createStatement();\n+     stmt.execute(\"create role admin_role\");\n+     stmt.execute(\"grant all on server server1 to role admin_role\");\n+     stmt.execute(\"grant role admin_role to group \" + StaticUserGroup.ADMINGROUP);\n+     stmt.close();\n+     conn.close();\n+\n+     conn = hiveServer2.createConnection(StaticUserGroup.ADMIN1, StaticUserGroup.ADMIN1);\n+     stmt = conn.createStatement();\n+     stmt.execute(\"create database \" + dbName);\n+     stmt.execute(\"create external table \" + dbName + \".\" + tblName + \"(s string) location '/tmp/external/p1'\");\n+\n+     // Deep copy of table tab1\n+     Table tbCopy = hmsClient.getTable(dbName, tblName);\n+\n+     // Change the location of the table to strip the scheme.\n+     StorageDescriptor sd = hmsClient.getTable(dbName, tblName).getSd();\n+     sd.setLocation(\"/tmp/external\");\n+     tbCopy.setSd(sd);\n+\n+     // Alter table tab1 to be tbCopy which is at scheme-less location.\n+     // And the corresponding path will be updated to sentry server.\n+     hmsClient.alter_table(dbName, \"tab1\", tbCopy);\n+     Assert.assertEquals(hmsClient.getTable(dbName, tblName).getSd().getLocation(), \"/tmp/external\");\n+     verifyOnPath(\"/tmp/external\", FsAction.ALL, StaticUserGroup.HIVE, true);\n+\n+     stmt.close();\n+     conn.close();\n+   }\n+\n   private void loadData(Statement stmt) throws IOException, SQLException {\n     FSDataOutputStream f1 = miniDFS.getFileSystem().create(new Path(\"/tmp/f1.txt\"));\n     f1.writeChars(\"m1d1_t1\\n\");",
                "raw_url": "https://github.com/apache/sentry/raw/d96f95160fd3dfa30c27b82d09fb5cc2c348b483/sentry-tests/sentry-tests-hive/src/test/java/org/apache/sentry/tests/e2e/hdfs/TestHDFSIntegration.java",
                "sha": "4d9e31cd9147511d6ee4becaf74e9c2a58d1f556",
                "status": "modified"
            }
        ],
        "message": "SENTRY-1002: PathsUpdate.parsePath(path) will throw an NPE when parsing relative paths (Hao Hao via Lenni Kuff)\n\nChange-Id: I8882078abeed37c17734b04d09f6fb2b298861b9",
        "parent": "https://github.com/apache/sentry/commit/8529f8e121144d715986a485abb204aa036caa19",
        "repo": "sentry",
        "unit_tests": [
            "TestPathsUpdate.java"
        ]
    }
}