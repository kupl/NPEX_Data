[
    {
        "repo": "hbase",
        "commit": "https://github.com/apache/hbase/commit/c8e9a295c133ef9507a84ab9c70d18563e2c22ad",
        "bug_id": "hbase_c8e9a29",
        "message": "HBASE-16855 Avoid NPE in MetricsConnection\u2019s construction (ChiaPing Tsai)",
        "parent": "https://github.com/apache/hbase/commit/278625312047a2100f4dbb2d2eaa4e2219d00e14",
        "patched_files": [
            "MetricsConnection.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 26,
                "raw_url": "https://github.com/apache/hbase/raw/c8e9a295c133ef9507a84ab9c70d18563e2c22ad/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java",
                "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java?ref=c8e9a295c133ef9507a84ab9c70d18563e2c22ad",
                "filename": "hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java",
                "deletions": 5,
                "sha": "36627bda40938193636c5292a2753f799f5e2f06",
                "blob_url": "https://github.com/apache/hbase/blob/c8e9a295c133ef9507a84ab9c70d18563e2c22ad/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java",
                "patch": "@@ -298,23 +298,29 @@ public void updateRegionStats(ServerName serverName, byte[] regionName,\n   private final ConcurrentMap<String, Counter> cacheDroppingExceptions =\n     new ConcurrentHashMap<>(CAPACITY, LOAD_FACTOR, CONCURRENCY_LEVEL);\n \n-  public MetricsConnection(final ConnectionImplementation conn) {\n+  MetricsConnection(final ConnectionImplementation conn) {\n     this.scope = conn.toString();\n     this.registry = new MetricRegistry();\n-    final ThreadPoolExecutor batchPool = (ThreadPoolExecutor) conn.getCurrentBatchPool();\n-    final ThreadPoolExecutor metaPool = (ThreadPoolExecutor) conn.getCurrentMetaLookupPool();\n \n-    this.registry.register(name(this.getClass(), \"executorPoolActiveThreads\", scope),\n+    this.registry.register(getExecutorPoolName(),\n         new RatioGauge() {\n           @Override\n           protected Ratio getRatio() {\n+            ThreadPoolExecutor batchPool = (ThreadPoolExecutor) conn.getCurrentBatchPool();\n+            if (batchPool == null) {\n+              return Ratio.of(0, 0);\n+            }\n             return Ratio.of(batchPool.getActiveCount(), batchPool.getMaximumPoolSize());\n           }\n         });\n-    this.registry.register(name(this.getClass(), \"metaPoolActiveThreads\", scope),\n+    this.registry.register(getMetaPoolName(),\n         new RatioGauge() {\n           @Override\n           protected Ratio getRatio() {\n+            ThreadPoolExecutor metaPool = (ThreadPoolExecutor) conn.getCurrentMetaLookupPool();\n+            if (metaPool == null) {\n+              return Ratio.of(0, 0);\n+            }\n             return Ratio.of(metaPool.getActiveCount(), metaPool.getMaximumPoolSize());\n           }\n         });\n@@ -337,6 +343,21 @@ protected Ratio getRatio() {\n     this.reporter.start();\n   }\n \n+  @VisibleForTesting\n+  final String getExecutorPoolName() {\n+    return name(getClass(), \"executorPoolActiveThreads\", scope);\n+  }\n+\n+  @VisibleForTesting\n+  final String getMetaPoolName() {\n+    return name(getClass(), \"metaPoolActiveThreads\", scope);\n+  }\n+\n+  @VisibleForTesting\n+  MetricRegistry getMetricRegistry() {\n+    return registry;\n+  }\n+\n   public void shutdown() {\n     this.reporter.stop();\n   }",
                "changes": 31
            },
            {
                "status": "modified",
                "additions": 18,
                "raw_url": "https://github.com/apache/hbase/raw/c8e9a295c133ef9507a84ab9c70d18563e2c22ad/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java",
                "contents_url": "https://api.github.com/repos/apache/hbase/contents/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java?ref=c8e9a295c133ef9507a84ab9c70d18563e2c22ad",
                "filename": "hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java",
                "deletions": 6,
                "sha": "854ecc50221937dbae0a289af37cca42d7b9dd96",
                "blob_url": "https://github.com/apache/hbase/blob/c8e9a295c133ef9507a84ab9c70d18563e2c22ad/hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java",
                "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.hadoop.hbase.client;\n \n+import com.codahale.metrics.RatioGauge;\n+import com.codahale.metrics.RatioGauge.Ratio;\n import org.apache.hadoop.hbase.shaded.com.google.protobuf.ByteString;\n import org.apache.hadoop.hbase.shaded.protobuf.ProtobufUtil;\n import org.apache.hadoop.hbase.shaded.protobuf.generated.ClientProtos.ClientService;\n@@ -32,24 +34,28 @@\n import org.apache.hadoop.hbase.testclassification.SmallTests;\n import org.apache.hadoop.hbase.util.Bytes;\n import org.junit.AfterClass;\n-import org.junit.Assert;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.experimental.categories.Category;\n import org.mockito.Mockito;\n \n import java.io.IOException;\n+import java.util.concurrent.ExecutorService;\n+import java.util.concurrent.Executors;\n+import java.util.concurrent.atomic.AtomicBoolean;\n+import static org.junit.Assert.assertEquals;\n \n @Category({ClientTests.class, MetricsTests.class, SmallTests.class})\n public class TestMetricsConnection {\n \n   private static MetricsConnection METRICS;\n-\n+  private static final ExecutorService BATCH_POOL = Executors.newFixedThreadPool(2);\n   @BeforeClass\n   public static void beforeClass() {\n     ConnectionImplementation mocked = Mockito.mock(ConnectionImplementation.class);\n     Mockito.when(mocked.toString()).thenReturn(\"mocked-connection\");\n-    METRICS = new MetricsConnection(Mockito.mock(ConnectionImplementation.class));\n+    Mockito.when(mocked.getCurrentBatchPool()).thenReturn(BATCH_POOL);\n+    METRICS = new MetricsConnection(mocked);\n   }\n \n   @AfterClass\n@@ -112,9 +118,15 @@ public void testStaticMetrics() throws IOException {\n         METRICS.getTracker, METRICS.scanTracker, METRICS.multiTracker, METRICS.appendTracker,\n         METRICS.deleteTracker, METRICS.incrementTracker, METRICS.putTracker\n     }) {\n-      Assert.assertEquals(\"Failed to invoke callTimer on \" + t, loop, t.callTimer.getCount());\n-      Assert.assertEquals(\"Failed to invoke reqHist on \" + t, loop, t.reqHist.getCount());\n-      Assert.assertEquals(\"Failed to invoke respHist on \" + t, loop, t.respHist.getCount());\n+      assertEquals(\"Failed to invoke callTimer on \" + t, loop, t.callTimer.getCount());\n+      assertEquals(\"Failed to invoke reqHist on \" + t, loop, t.reqHist.getCount());\n+      assertEquals(\"Failed to invoke respHist on \" + t, loop, t.respHist.getCount());\n     }\n+    RatioGauge executorMetrics = (RatioGauge) METRICS.getMetricRegistry()\n+            .getMetrics().get(METRICS.getExecutorPoolName());\n+    RatioGauge metaMetrics = (RatioGauge) METRICS.getMetricRegistry()\n+            .getMetrics().get(METRICS.getMetaPoolName());\n+    assertEquals(Ratio.of(0, 3).getValue(), executorMetrics.getValue(), 0);\n+    assertEquals(Double.NaN, metaMetrics.getValue(), 0);\n   }\n }",
                "changes": 24
            }
        ],
        "unit_tests": [
            "TestMetricsConnection.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "hbase-client/src/test/java/org/apache/hadoop/hbase/client/TestMetricsConnection.java",
        "buggy_files": [
            "hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java"
        ],
        "fixed": true
    }
]