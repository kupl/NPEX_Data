{
    "pdfbox_03449fd": {
        "bug_id": "pdfbox_03449fd",
        "commit": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "patch": "@@ -1330,6 +1330,10 @@ public void write(PDDocument doc, SignatureInterface signInterface) throws IOExc\n                 missingID = false;\n             }\n         }\n+        else\n+        {\n+            idArray = new COSArray();\n+        }\n         // check for an existing documentID\n         if (idArray != null && idArray.size() == 2)\n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "sha": "a145699efc871fb5cffaf2675dd66a9e0739d3ea",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824693 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784",
        "repo": "pdfbox",
        "unit_tests": [
            "COSWriterTest.java"
        ]
    },
    "pdfbox_138b0d6": {
        "bug_id": "pdfbox_138b0d6",
        "commit": "https://github.com/apache/pdfbox/commit/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java?ref=138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure;\n \n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.Map;\n \n@@ -743,7 +744,7 @@ private PDStructureTreeRoot getStructureTreeRoot()\n         {\n             return root.getRoleMap();\n         }\n-        return null;\n+        return Collections.emptyMap();\n     }\n \n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "sha": "397aacd67cbb7294e7b8e79a352bd076760366de",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824701 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
        "repo": "pdfbox",
        "unit_tests": [
            "PDStructureElementTest.java"
        ]
    },
    "pdfbox_13fd53c": {
        "bug_id": "pdfbox_13fd53c",
        "commit": "https://github.com/apache/pdfbox/commit/13fd53c704d0a03c0c2f8af3829669d9a9b701f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pdfbox/blob/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=13fd53c704d0a03c0c2f8af3829669d9a9b701f3",
                "deletions": 7,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -141,7 +141,7 @@ else if (length == 2)\n     /**\n      * This will clear AFM resources that are stored statically. This is usually not a problem\n      * unless you want to reclaim resources for a long running process.\n-     * \n+     *\n      * SPECIAL NOTE: The font calculations are currently in COSObject, which is where they will\n      * reside until PDFont is mature enough to take them over. PDFont is the appropriate place for\n      * them and not in COSObject but we need font calculations for text extraction. THIS METHOD WILL\n@@ -196,6 +196,7 @@ public PDFontDescriptor getFontDescriptor()\n                 {\n                     fontDescriptor = new PDFontDescriptorAFM(afm);\n                 }\n+                // it shouldn't be possible to reach this point...\n             }\n         }\n         return fontDescriptor;\n@@ -691,12 +692,7 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        // not all fonts have a font descriptor\n-        if (getFontDescriptor() != null)\n-        {\n-            return getFontDescriptor().isSymbolic();\n-        }\n-        return false;\n+        return getFontDescriptor().isSymbolic();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "d2b915413d935dd06cea02da39343aaa656d5d4c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: Allow NPE which hopefully never happens\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604018 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/493ca599868ef0a1b8bbe8d19d102282bef95ebf",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_1d86d5b": {
        "bug_id": "pdfbox_1d86d5b",
        "commit": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=1d86d5b191c6366b9df45767d59b3b058e049784",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1339,6 +1339,12 @@ public ExternalSigningSupport saveIncrementalForExternalSigning(OutputStream out\n                 break;\n             }\n         }\n+\n+        if (foundSignature == null)\n+        {\n+            throw new IllegalStateException(\"document does not contain signature fields\");\n+        }\n+\n         int[] byteRange = foundSignature.getByteRange();\n         if (!Arrays.equals(byteRange, RESERVE_BYTE_RANGE))\n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "1f12af880a0b3bc86466cbe15eee3c6ab0f523d4",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824684 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/0279494b1bf88b1536dd57ad4b2a0c8da62e7191",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_2390a37": {
        "bug_id": "pdfbox_2390a37",
        "commit": "https://github.com/apache/pdfbox/commit/2390a371a24e9a53ddc16025049f33a4d5979506",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=2390a371a24e9a53ddc16025049f33a4d5979506",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -784,7 +784,11 @@ public float getFontWidth( int charCode )\n         if (charCode >= firstChar && charCode <= lastChar)\n         {\n             List<Float> widths = getWidths();\n-            width = widths.get(charCode-firstChar).floatValue();\n+            // maybe the font doesn't provide any widths\n+            if (widths != null)\n+            {\n+                width = widths.get(charCode-firstChar).floatValue();\n+            }\n         }\n         else \n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "fae3a9390203e82ca39ba05928a165f0692f7c87",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1049: fixed a NPE when using external type1 fonts as proposed by Henning Saul\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1139497 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/23d2430692f4d4c5fde108cc30651bb4f24d95e0",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_2b7a2d3": {
        "bug_id": "pdfbox_2b7a2d3",
        "commit": "https://github.com/apache/pdfbox/commit/2b7a2d3332424bff79910cc0c0248ea8507e7ba9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=2b7a2d3332424bff79910cc0c0248ea8507e7ba9",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "patch": "@@ -574,7 +574,11 @@ protected void doWriteTrailer(COSDocument doc) throws IOException\n         // Remove a checksum if present\n         trailer.removeItem( COSName.DOC_CHECKSUM );\n \n-        ((COSArray) trailer.getItem(COSName.ID)).setDirect(true);\n+        COSArray idArray = trailer.getCOSArray(COSName.ID);\n+        if (idArray != null)\n+        {\n+            idArray.setDirect(true);\n+        }\n \n         trailer.accept(this);\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "sha": "535375bb86e5a8eb71e792734e6ebb9028d23414",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-45: avoid NPE, as suggested by softvisionfd\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1857149 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/548dd7a6bbffb8de701441d6b5b83fe095ef03bd",
        "repo": "pdfbox",
        "unit_tests": [
            "COSWriterTest.java"
        ]
    },
    "pdfbox_2b9bb65": {
        "bug_id": "pdfbox_2b9bb65",
        "commit": "https://github.com/apache/pdfbox/commit/2b9bb6526de705de7842ac27da8f1b06e5cf7f69",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java?ref=2b9bb6526de705de7842ac27da8f1b06e5cf7f69",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "patch": "@@ -302,7 +302,7 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         List<String> filters = getFilters();\n         ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n         ByteArrayOutputStream out = new ByteArrayOutputStream(rawData.length);\n-        for (int i = 0; i < filters.size(); i++)\n+        for (int i = 0; filters != null && i < filters.size(); i++)\n         {\n             // TODO handling of abbreviated names belongs here, rather than in other classes\n             out.reset();",
                "raw_url": "https://github.com/apache/pdfbox/raw/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "sha": "97e94e7f6a303094b61fe1d6abcd1ca77771d93d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783539 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/beeaaad60901519bb869cc3a9c694299e64d0d4a",
        "repo": "pdfbox",
        "unit_tests": [
            "PDInlineImageTest.java"
        ]
    },
    "pdfbox_2cb23c5": {
        "bug_id": "pdfbox_2cb23c5",
        "commit": "https://github.com/apache/pdfbox/commit/2cb23c52a77ed378f31d180f07c579fef01a3ca2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=2cb23c52a77ed378f31d180f07c579fef01a3ca2",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -124,6 +124,10 @@\n         @SuppressWarnings(\"unused\")\r\n         Header header = readHeader(input);\r\n         String[] nameIndex = readStringIndexData(input);\r\n+        if (nameIndex == null)\r\n+        {\r\n+            throw new IOException(\"Name index missing in CFF font\");\r\n+        }\r\n         byte[][] topDictIndex = readIndexData(input);\r\n         stringIndex = readStringIndexData(input);\r\n         byte[][] globalSubrIndex = readIndexData(input);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "2f64eb0814545182692eb475fbb3615ee300f30a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3855: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1800901 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/30ffe3356d907cb61dedb416cf11222104668337",
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_31b832b": {
        "bug_id": "pdfbox_31b832b",
        "commit": "https://github.com/apache/pdfbox/commit/31b832bc5434ec7e50502644cabcf0d995de28a4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=31b832bc5434ec7e50502644cabcf0d995de28a4",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -156,7 +156,7 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             else\r\n             {\r\n                 LOG.warn(\"COSDictionary expected, but got \" +\r\n-                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n+                        (base == null ? \"null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/pdfbox/raw/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "a3453dc2da422d05bb9ad8010106f8cfe3e6e94b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854506 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_3356102": {
        "bug_id": "pdfbox_3356102",
        "commit": "https://github.com/apache/pdfbox/commit/3356102c65af2032982c711b32fba77ac5ff382d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=3356102c65af2032982c711b32fba77ac5ff382d",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -517,7 +517,7 @@ public float getSpaceWidth()\n             COSBase toUnicode = dict.getDictionaryObject(COSName.TO_UNICODE);\n             try\n             {\n-                if (toUnicode != null)\n+                if (toUnicode != null && toUnicodeCMap != null)\n                 {\n                     int spaceMapping = toUnicodeCMap.getSpaceMapping();\n                     if (spaceMapping > -1)",
                "raw_url": "https://github.com/apache/pdfbox/raw/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "08f2847a3a28c62725a0b5160a03b88c8e1bf0a6",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852: avoid NPE possibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783127 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/8355db7b782a03a4fe8963fbfb8710492b0b929d",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_3a43692": {
        "bug_id": "pdfbox_3a43692",
        "commit": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=3a436929423ce82b58ab48cfed4f77f2312c62b3",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -155,7 +155,8 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             }\r\n             else\r\n             {\r\n-                LOG.warn(\"COSDictionary expected, but got \" + base.getClass().getSimpleName());\r\n+                LOG.warn(\"COSDictionary expected, but got \" +\r\n+                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/pdfbox/raw/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "a069722b7c2a8758d3f14d83bce29fa9269aa906",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854504 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e13b880b1fd5a44cd3bd002eb3dc5f3477f4f9dc",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_4c4ed24": {
        "bug_id": "pdfbox_4c4ed24",
        "commit": "https://github.com/apache/pdfbox/commit/4c4ed241142a9f78e7fd51f7df1749a011ff0eda",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=4c4ed241142a9f78e7fd51f7df1749a011ff0eda",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "patch": "@@ -57,7 +57,7 @@\n {\n     private static final Log LOG = LogFactory.getLog(PDICCBased.class);\n \n-    private PDStream stream;\n+    private final PDStream stream;\n     private int numberOfComponents = -1;\n     private ICC_Profile iccProfile;\n     private PDColorSpace alternateColorSpace;\n@@ -72,7 +72,8 @@ public PDICCBased(PDDocument doc)\n     {\n         array = new COSArray();\n         array.add(COSName.ICCBASED);\n-        array.add(new PDStream(doc));\n+        stream = new PDStream(doc);\n+        array.add(stream);\n     }\n \n     /**\n@@ -148,7 +149,7 @@ private void loadICCProfile() throws IOException\n                 // fall back to alternateColorSpace color space\n                 awtColorSpace = null;\n                 alternateColorSpace = getAlternateColorSpace();\n-                LOG.error(\"Can't read embedded ICC profile, using alternate color space: \" + alternateColorSpace.getName());\n+                LOG.error(\"Can't read embedded ICC profile (\" + e.getLocalizedMessage() + \"), using alternate color space: \" + alternateColorSpace.getName());\n                 initialColor = alternateColorSpace.getInitialColor();\n             }\n             else",
                "raw_url": "https://github.com/apache/pdfbox/raw/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "sha": "4a66bb7b1670dd630fce9467f23e4e379f23590a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2812: avoid potiential later NPE by assigning local field\nPDFBOX-2576: make field final; improve message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681649 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/c781e42cd9c6aa0ffebf0ce96abf776ccb6a2f18",
        "repo": "pdfbox",
        "unit_tests": [
            "PDICCBasedTest.java"
        ]
    },
    "pdfbox_53fdf25": {
        "bug_id": "pdfbox_53fdf25",
        "commit": "https://github.com/apache/pdfbox/commit/53fdf250d6f303eebafe597a0867d3329a101b90",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java?ref=53fdf250d6f303eebafe597a0867d3329a101b90",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "patch": "@@ -381,6 +381,10 @@ private void updateByValue(String value)\n         // update the appearance state (AS)\n         for (PDAnnotationWidget widget : getWidgets())\n         {\n+            if (widget.getAppearance() == null)\n+            {\n+                continue;\n+            }\n             PDAppearanceEntry appearanceEntry = widget.getAppearance().getNormalAppearance();\n             if (((COSDictionary) appearanceEntry.getCOSObject()).containsKey(value))\n             {",
                "raw_url": "https://github.com/apache/pdfbox/raw/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "sha": "fb834901b443b042d25f5504ab042f41fa4c3a8b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4366: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1845601 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/56869c987e7de00d985a18389acd0bb76c909ebf",
        "repo": "pdfbox",
        "unit_tests": [
            "PDButtonTest.java"
        ]
    },
    "pdfbox_56b8196": {
        "bug_id": "pdfbox_56b8196",
        "commit": "https://github.com/apache/pdfbox/commit/56b819647ee120503fc2878d3468ee9f35272d1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=56b819647ee120503fc2878d3468ee9f35272d1f",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -453,7 +453,7 @@ public PDField getField(String fullyQualifiedName)\n         // get the field from the field tree\n         for (PDField field : getFieldTree())\n         {\n-            if (field.getFullyQualifiedName().compareTo(fullyQualifiedName) == 0)\n+            if (field.getFullyQualifiedName().equals(fullyQualifiedName))\n             {\n                 return field;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "285e1b3b50c961dda277de53ac4071693f737143",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852, PDFBOX-3547: avoid NPE in getField if supplied name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1768224 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/6931869d1fcc56beb0ba88cbb53caab2438500ab",
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_5b3c570": {
        "bug_id": "pdfbox_5b3c570",
        "commit": "https://github.com/apache/pdfbox/commit/5b3c5708af635257d12c51d1c99f274e70d2c2d1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=5b3c5708af635257d12c51d1c99f274e70d2c2d1",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -360,6 +360,11 @@ else if (options.getPage() <= 0)\n \n         List<PDField> fields = acroForm.getFields();\n         PDSignatureField signatureField = null;\n+        if(fields == null) \n+        {\n+            fields = new ArrayList();\n+            acroForm.setFields(fields);\n+        }\n         for (PDField pdField : fields)\n         {\n             if (pdField instanceof PDSignatureField)",
                "raw_url": "https://github.com/apache/pdfbox/raw/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "f8ee631ab960691aaae4a8b05a7b96a8c929e466",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1719\nNPE while signing PDF - acroform without fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1523680 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/af49e1a8a0a23151c743726cae88b0519950f436",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_5f9b1f8": {
        "bug_id": "pdfbox_5f9b1f8",
        "commit": "https://github.com/apache/pdfbox/commit/5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "patch": "@@ -41,13 +41,21 @@ public PDComplexFileSpecification()\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor. Creates empty COSDictionary if dict is null.\n      *\n      * @param dict The dictionary that fulfils this file specification.\n      */\n     public PDComplexFileSpecification( COSDictionary dict )\n     {\n-        fs = dict;\n+        if (dict == null)\n+        {\n+            fs = new COSDictionary();\n+            fs.setItem( COSName.TYPE, COSName.FILESPEC );\n+        }\n+        else\n+        {\n+            fs = dict;\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "sha": "8ee7a393f4bc7d8aa8b0d9b3f8adea3ed906b3e7",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.PDDocumentNameDictionary;\n+import org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode;\n+import org.apache.pdfbox.pdmodel.TestPDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n+import org.junit.Test;\n+\n+import junit.framework.TestCase;\n+\n+public class TestEmbeddedFiles extends TestCase\n+{\n+    @Test\n+    public void testNullEmbeddedFile() throws IOException\n+    {\n+        PDEmbeddedFile embeddedFile = null;\n+        boolean ok = false;\n+        try\n+        {\n+            PDDocument doc = PDDocument.load(TestEmbeddedFiles.class.getResourceAsStream(\n+                \"null_PDComplexFileSpecification.pdf\"));\n+\n+            PDDocumentCatalog catalog = doc.getDocumentCatalog();\n+            PDDocumentNameDictionary names = catalog.getNames();\n+            assertEquals(\"expected two files\", 2, names.getEmbeddedFiles().getNames().size());\n+            PDEmbeddedFilesNameTreeNode embeddedFiles = names.getEmbeddedFiles();\n+\n+            PDComplexFileSpecification spec = (PDComplexFileSpecification)\n+                                            embeddedFiles.getNames().get(\"non-existent-file.docx\");\n+\n+            if (spec != null)\n+            {\n+                embeddedFile = spec.getEmbeddedFile();\n+                ok = true;\n+            }\n+            //now test for actual attachment\n+            spec = (PDComplexFileSpecification)embeddedFiles.getNames().get(\"My first attachment\");\n+            assertNotNull(\"one attachment actually exists\", spec);\n+            assertEquals(\"existing file length\", 17660, spec.getEmbeddedFile().getLength());\n+            spec = (PDComplexFileSpecification)embeddedFiles\n+                                                    .getNames().get(\"non-existent-file.docx\");\n+        }\n+        catch (NullPointerException e)\n+        {\n+            assertNotNull(\"null pointer exception\", null);\n+        }\n+        assertTrue(\"Was able to get file without exception\", ok);\n+        assertNull(\"EmbeddedFile was correctly null\", embeddedFile);\n+    }\n+\n+}\n+",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "sha": "a5a699bde96421fd98650f9418c14d04c315bebc",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 0,
                "filename": "pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "sha": "d4170b5b525446c2a9a015d50de079fe7cf87a0c",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -291,7 +291,7 @@ else if( args[i].equals( NONSEQ ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file.getSubtype().equals(\"application/pdf\")) \n+                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n                                 {\n                                     if (debug)\n                                     {",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "38e65ae71e042ef03e07ee2f71983dc9861bb243",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1884: Avoid NPE in PDComplexFileSpecification\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1575069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/da5520d5e9398771ee840a27023fc0884cbd73d2",
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java"
        ]
    },
    "pdfbox_65e8292": {
        "bug_id": "pdfbox_65e8292",
        "commit": "https://github.com/apache/pdfbox/commit/65e82922ddde5508f49f0b305152486adf919615",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "patch": "@@ -181,6 +181,11 @@ private static BufferedImage getAlphaImage(BufferedImage image) throws IOExcepti\n                     \" useful, use LosslessImageFactory instead\");\r\n         }\r\n         WritableRaster alphaRaster = image.getAlphaRaster();\r\n+        if (alphaRaster == null)\r\n+        {\r\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\r\n+            return null;\r\n+        }\r\n         BufferedImage alphaImage = new BufferedImage(image.getWidth(), image.getHeight(),\r\n                 BufferedImage.TYPE_BYTE_GRAY);\r\n         alphaImage.setData(alphaRaster);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "sha": "f59a292b904485899c45ffefa7332abfba047172",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "patch": "@@ -136,6 +136,11 @@ private static PDImageXObject createAlphaFromARGBImage(PDDocument document, Buff\n \n         // extract the alpha information\n         WritableRaster alphaRaster = image.getAlphaRaster();\n+        if (alphaRaster == null)\n+        {\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\n+            return null;\n+        }\n \n         int[] pixels = alphaRaster.getPixels(0, 0,\n                 alphaRaster.getSampleModel().getWidth(),",
                "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "sha": "39c7ccb2667a3f67986ce196f08386e216c05d0c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2654: avoid NPE if bi.getAlphaRaster() returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1656322 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7a4e80a4698c3b7c5595a4582495b79cc05ffd97",
        "repo": "pdfbox",
        "unit_tests": [
            "LosslessFactoryTest.java"
        ]
    },
    "pdfbox_6a1a74e": {
        "bug_id": "pdfbox_6a1a74e",
        "commit": "https://github.com/apache/pdfbox/commit/6a1a74e6f77fe64f996bb347dead593e4376b07b",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java?ref=6a1a74e6f77fe64f996bb347dead593e4376b07b",
                "deletions": 11,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "patch": "@@ -66,7 +66,6 @@\n      */\n     private static final Log LOG = LogFactory.getLog(PDPageContentStream.class);\n \n-    private PDPage page;\n     private OutputStream output;\n     private boolean inTextMode = false;\n     private PDResources resources;\n@@ -186,15 +185,6 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n     public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appendContent, boolean compress,\n             boolean resetContext) throws IOException\n     {\n-\n-        page = sourcePage;\n-        resources = page.getResources();\n-        if (resources == null)\n-        {\n-            resources = new PDResources();\n-            page.setResources(resources);\n-        }\n-\n         // Get the pdstream from the source page instead of creating a new one\n         PDStream contents = sourcePage.getContents();\n         boolean hasContent = contents != null;\n@@ -276,6 +266,13 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n         }\n         formatDecimal.setMaximumFractionDigits(10);\n         formatDecimal.setGroupingUsed(false);\n+        // this has to be done here, as the resources will be set to null when reseting the content stream\n+        resources = sourcePage.getResources();\n+        if (resources == null)\n+        {\n+            resources = new PDResources();\n+            sourcePage.setResources(resources);\n+        }\n     }\n \n     /**\n@@ -1513,7 +1510,6 @@ public void close() throws IOException\n         output.close();\n         currentNonStrokingColorSpace = null;\n         currentStrokingColorSpace = null;\n-        page = null;\n         resources = null;\n     }\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "sha": "981aa8f3a10c482545f400b85977bf82635b7010",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1789: avoid NPE after reseting the content stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1547540 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/cf82ccbcc6f09a26dce07fb846617033c52f8105",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageContentStream.java"
        ]
    },
    "pdfbox_70dc587": {
        "bug_id": "pdfbox_70dc587",
        "commit": "https://github.com/apache/pdfbox/commit/70dc5875052f2091cae086cfa9cd81fdd537a9e3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java?ref=70dc5875052f2091cae086cfa9cd81fdd537a9e3",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "patch": "@@ -361,9 +361,10 @@ private void parseBeginbfrange(Number cosCount, PushbackInputStream cmapStream,\n             {\n                 tokenBytes = (byte[]) nextToken;\n             }\n-            if (tokenBytes.length == 0)\n+            if (tokenBytes == null || tokenBytes.length == 0)\n             {\n                 // PDFBOX-3450: ignore <>\n+                // PDFBOX-3807: ignore null\n                 continue;\n             }\n             boolean done = false;",
                "raw_url": "https://github.com/apache/pdfbox/raw/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "sha": "00e865bd5f5d418e6ca1d574db0e542f225e1e56",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3807: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1796092 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/231aa444e76123ceace8fd4529647fbed7717349",
        "repo": "pdfbox",
        "unit_tests": [
            "TestCMapParser.java"
        ]
    },
    "pdfbox_71f6b08": {
        "bug_id": "pdfbox_71f6b08",
        "commit": "https://github.com/apache/pdfbox/commit/71f6b0874c12f6e40f0b491e2559686d191aca14",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=71f6b0874c12f6e40f0b491e2559686d191aca14",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.fontbox.cff.CFFOperator;\n import org.apache.fontbox.cff.charset.CFFCharset;\n import org.apache.fontbox.cff.charset.CFFExpertCharset;\n import org.apache.fontbox.cff.charset.CFFExpertSubsetCharset;\n@@ -623,7 +624,9 @@ private Entry getEntry(CFFOperator operator)\n         {\n             for (Entry entry : entries)\n             {\n-                if (entry.operator.equals(operator))\n+            \t// Check for null entry before comparing the Font\n+                if (entry != null && entry.operator != null && \n+                    entry.operator.equals(operator))\n                 {\n                     return entry;\n                 }",
                "raw_url": "https://github.com/apache/pdfbox/raw/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "3d18f80489b210becb4ac3fddbe995f4cb878ed6",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-703: added a check for null to avoid NPE. Patch by Peter Lenahan (Peter_Lenahan at ibi dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@941835 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/6b8316816efe98aee734100a75c75734ba403335",
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_7312902": {
        "bug_id": "pdfbox_7312902",
        "commit": "https://github.com/apache/pdfbox/commit/73129021bd446ec61d182186e024fde62e55d209",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java?ref=73129021bd446ec61d182186e024fde62e55d209",
                "deletions": 3,
                "filename": "jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "patch": "@@ -36,7 +36,7 @@\n  * subclasses for access to specific properties.\n  * \n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>\n- * @version $Revision: 1.8 $\n+ * \n  */\n public class XMPSchema\n {\n@@ -246,7 +246,15 @@ public Calendar getDateProperty(String propertyName) throws IOException\n      */\n     public void setDateProperty(String propertyName, Calendar date)\n     {\n-        setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        if (date != null)\n+        {\n+            setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        }\n+        else\n+        {\n+            // remove the value for the given property \n+            setTextProperty(propertyName, null);\n+        }\n     }\n \n     /**\n@@ -820,7 +828,8 @@ public String getLanguageProperty(String propertyName, String language)\n                     }\n                 }\n             }\n-            else if (property.getChildNodes().getLength() == 1 && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n+            else if (property.getChildNodes().getLength() == 1 \n+                    && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n             {\n                 retval = property.getFirstChild().getNodeValue();\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "sha": "b05022a095427db8546b3b3a1fd3b614506d0b05",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-823: avoid NPE when setting a dtae property\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1540811 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5f43564de8055cb6bcbdd4ddd8d4a68fbe9cc7f6",
        "repo": "pdfbox",
        "unit_tests": [
            "XMPSchemaTest.java"
        ]
    },
    "pdfbox_79eb804": {
        "bug_id": "pdfbox_79eb804",
        "commit": "https://github.com/apache/pdfbox/commit/79eb804b77d48d341f3a3741349e3e25d9abd1fd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=79eb804b77d48d341f3a3741349e3e25d9abd1fd",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -601,6 +601,10 @@ else if (encodingId == 1)\n \r\n         // read private dict\r\n         DictData.Entry privateEntry = topDict.getEntry(\"Private\");\r\n+        if (privateEntry == null)\r\n+        {\r\n+            throw new IOException(\"Private dictionary entry missing for font \" + font.fontName);\r\n+        }\r\n         int privateOffset = privateEntry.getNumber(1).intValue();\r\n         input.setPosition(privateOffset);\r\n         int privateSize = privateEntry.getNumber(0).intValue();\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "bd17417c0a5a87e359e40187b03a50bbc7cd6a7a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3057: avoid NPE if private dict missing, throw IOException instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1710384 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/cc97e0223c518f5f1d8ab6c63cad7ce080477aa4",
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_82bea6b": {
        "bug_id": "pdfbox_82bea6b",
        "commit": "https://github.com/apache/pdfbox/commit/82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "patch": "@@ -91,7 +91,7 @@ public OutputStream createOutputStream() throws IOException\n      *\n      * @throws IOException If an IO error occurs during reading.\n      */\n-    public InputStream createInputStream()\n+    public InputStream createInputStream() throws IOException\n     {\n         return new ByteArrayInputStream( data );\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "sha": "e58e00e815f1225e98bbe91d62ce8544172b7f8c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
                "deletions": 4,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -691,10 +691,6 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        if (getFontDescriptor() == null)\n-        {\n-            return false;\n-        }\n         return getFontDescriptor().isSymbolic();\n     }\n ",
                "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "07ae03a52a96e0a6e06c06608df3174a98b02e3c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: Prevent NPE in system TTF getFontDescriptor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604681 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_851d10c": {
        "bug_id": "pdfbox_851d10c",
        "commit": "https://github.com/apache/pdfbox/commit/851d10cf56c2cd27ba699d32f5d93afa49cda7c9",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=851d10cf56c2cd27ba699d32f5d93afa49cda7c9",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "patch": "@@ -80,10 +80,19 @@ public PDICCBased(PDDocument doc)\n      * Creates a new ICC color space using the PDF array.\n      *\n      * @param iccArray the ICC stream object\n-     * @throws java.io.IOException if there is an error reading the ICC profile.\n+     * @throws IOException if there is an error reading the ICC profile or if the parameter\n+     * is invalid.\n      */\n     public PDICCBased(COSArray iccArray) throws IOException\n     {\n+        if (iccArray.size() < 2)\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have two elements\");\n+        }\n+        if (!(iccArray.getObject(1) instanceof COSStream))\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have a stream as second element\");\n+        }\n         array = iccArray;\n         stream = new PDStream((COSStream) iccArray.getObject(1));\n         loadICCProfile();",
                "raw_url": "https://github.com/apache/pdfbox/raw/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "sha": "4e6428639bfd12bb681dc8de0a933d7bfd42a0ef",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3728: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1788014 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/50cccec1d003dfed1f970ff545f81fe69dc7420c",
        "repo": "pdfbox",
        "unit_tests": [
            "PDICCBasedTest.java"
        ]
    },
    "pdfbox_8782aa5": {
        "bug_id": "pdfbox_8782aa5",
        "commit": "https://github.com/apache/pdfbox/commit/8782aa533901a30e3ad76a492d5d25138e97653a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "patch": "@@ -34,7 +34,7 @@\n     @Override\n     public void process(Operator operator, List<COSBase> operands) throws IOException\n     {\n-        if (operator.getImageData().length == 0)\n+        if (operator.getImageData() == null || operator.getImageData().length == 0)\n         {\n             return;\n         }",
                "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "sha": "e6e1f3c71b7166a04d21eb4364fe942946f13d8b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a",
                "deletions": 4,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "patch": "@@ -285,12 +285,15 @@ else if( next.equals( \"false\" ) )\n                         imageParams.setItem( (COSName)nextToken, (COSBase)value );\n                     }\n                     //final token will be the image data, maybe??\n-                    Operator imageData = (Operator)nextToken;\n-                    if (imageData.getImageData().length == 0)\n+                    if (nextToken instanceof Operator)\n                     {\n-                        LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        Operator imageData = (Operator) nextToken;\n+                        if (imageData.getImageData() == null || imageData.getImageData().length == 0)\n+                        {\n+                            LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        }\n+                        beginImageOP.setImageData(imageData.getImageData());\n                     }\n-                    beginImageOP.setImageData( imageData.getImageData() );\n                 }\n                 break;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "sha": "902bbc52f9757368d0e3fc3d996fb876509e8f76",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3694: avoid NPE and ClassCastExcepton on empty inline images\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783575 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/bb1078cdc5a35b790295848ee1bc869ad9061840",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFStreamParserTest.java"
        ]
    },
    "pdfbox_8b25052": {
        "bug_id": "pdfbox_8b25052",
        "commit": "https://github.com/apache/pdfbox/commit/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=8b250520afbcceb6d0f0cb0a9e552a064aed0fb4",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -1215,6 +1215,10 @@ private void updatePageReferences(PDFCloneUtility cloner,\n     {\n         for (COSObjectable obj : numberTreeAsMap.values())\n         {\n+            if (obj == null)\n+            {\n+                continue;\n+            }\n             PDParentTreeValue val = (PDParentTreeValue) obj;\n             COSBase base = val.getCOSObject();\n             if (base instanceof COSArray)",
                "raw_url": "https://github.com/apache/pdfbox/raw/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "b0474f2b993d7073028fde46517cf5252eae022f",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852210 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_8fd5a17": {
        "bug_id": "pdfbox_8fd5a17",
        "commit": "https://github.com/apache/pdfbox/commit/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pdfbox/blob/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=8fd5a17ab537e8302ac576018a28f4f04b2a0ad0",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1107,18 +1107,23 @@ public void save(OutputStream output) throws IOException\n         }\n     }\n \n-   /**\n-     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n+    /**\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a\n+     * file or a stream, not if the document was created in PDFBox itself.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n-     * @throws IllegalStateException if the document was not loaded from a file.\n+     * @throws IllegalStateException if the document was not loaded from a file or a stream.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n         COSWriter writer = null;\n         try\n         {\n+            if (pdfSource == null)\n+            {\n+                throw new IllegalStateException(\"document was not loaded from a file or a stream\");\n+            }\n             writer = new COSWriter(output, pdfSource);\n             writer.write(this, signInterface);\n             writer.close();",
                "raw_url": "https://github.com/apache/pdfbox/raw/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "3cfd8dc5ad0f0024d0390e5e1e8045f3dfb01b15",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3312: avoid NPE if document wasn't loaded / fix javadoc \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1738359 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e7bdcf6292250c96223b0a7636248de9a630ace9",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_95fa048": {
        "bug_id": "pdfbox_95fa048",
        "commit": "https://github.com/apache/pdfbox/commit/95fa048ad447bce2d2bb5477c2a2076ebabd6764",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java?ref=95fa048ad447bce2d2bb5477c2a2076ebabd6764",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "patch": "@@ -238,9 +238,12 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n             else\n             {\n                 PDOutlineItem first = srcOutline.getFirstChild();\n-                PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n-                        destination, first ));\n-                destOutline.appendChild( clonedFirst );\n+                if(first != null)\n+                {\n+                    PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n+                            destination, first ));\n+                    destOutline.appendChild( clonedFirst );\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/pdfbox/raw/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "sha": "059296263fc3e5017d9789a3c6381ce87aeacb6d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-700: avoid NPE when merging pdfs containing an OutlineNode. Patch by Adam Nichols (adam at swmc dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@940369 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/f52731360d9f471ac4e76fe472d2075a955d6faf",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_a6bba6b": {
        "bug_id": "pdfbox_a6bba6b",
        "commit": "https://github.com/apache/pdfbox/commit/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=a6bba6b353737b7deb4667e3ade6ac9da2d86ba9",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1314,8 +1314,11 @@ public void close() throws IOException\n     \t\tpageMap = null;\n     \t}\n     \tsecurityHandler = null;\n-        document.close();\n-        document = null;\n+    \tif (document != null)\n+    \t{\n+\t        document.close();\n+\t        document = null;\n+    \t}\n         if (parser != null)\n         {\n         \tparser.clearResources();",
                "raw_url": "https://github.com/apache/pdfbox/raw/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "731d0af841ef9e8c88b56d01dea32fd827e07c94",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1808: added a null check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1557374 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/401e1919f0034a1f0eff3bc893cf7a86c18fc7db",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_ace999f": {
        "bug_id": "pdfbox_ace999f",
        "commit": "https://github.com/apache/pdfbox/commit/ace999fe2b5d0b49511bd5059fb70ca5dc59699c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=ace999fe2b5d0b49511bd5059fb70ca5dc59699c",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -274,7 +274,10 @@ else if( args[i].equals( CONSOLE ) )\n                                     } \n                                     finally \n                                     {\n-                                        subDoc.close();\n+                                        if (subDoc != null)\n+                                        {\n+                                            subDoc.close();\n+                                        }\n                                     }\n                                 }\n                             } ",
                "raw_url": "https://github.com/apache/pdfbox/raw/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "44e0b2fc64f34686d2342963de2e119e1649bd9a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2576: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1671273 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/38a935da475db2461c7b3ecd94df3d11ee0e7792",
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java"
        ]
    },
    "pdfbox_af95cd3": {
        "bug_id": "pdfbox_af95cd3",
        "commit": "https://github.com/apache/pdfbox/commit/af95cd31ee1c7cd4f2d729566e039757b2d37794",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=af95cd31ee1c7cd4f2d729566e039757b2d37794",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -252,7 +252,7 @@ else if( args[i].equals( CONSOLE ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n+                                if (file != null && \"application/pdf\".equals(file.getSubtype()))\n                                 {\n                                     if (debug)\n                                     {",
                "raw_url": "https://github.com/apache/pdfbox/raw/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "c2f02c1877757ebe8af83f8cad9904a78a6ec921",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2678: avoid NPE risk discovered by user \"nullpointer\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1659023 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1f09ee49862fe3edc6a947fab8e228e92e3440e8",
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java"
        ]
    },
    "pdfbox_b9aaf1e": {
        "bug_id": "pdfbox_b9aaf1e",
        "commit": "https://github.com/apache/pdfbox/commit/b9aaf1efb1261e1193a1272897b7d8e8bb813742",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=b9aaf1efb1261e1193a1272897b7d8e8bb813742",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -304,8 +304,8 @@ private boolean isPageTreeNode(COSDictionary node )\n     {\r\n         // some files such as PDFBOX-2250-229205.pdf don't have Pages set as the Type, so we have\r\n         // to check for the presence of Kids too\r\n-        return node.getCOSName(COSName.TYPE) == COSName.PAGES ||\r\n-               node.containsKey(COSName.KIDS);\r\n+        return node != null &&\r\n+               (node.getCOSName(COSName.TYPE) == COSName.PAGES || node.containsKey(COSName.KIDS));\r\n     }\r\n \r\n     /**\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "713710c3d3cc3406d98f498233a12fe0aefabcaf",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3894: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1805547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/46802f039793e93d4c929e8faa969d768dca7cfd",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_bd7957b": {
        "bug_id": "pdfbox_bd7957b",
        "commit": "https://github.com/apache/pdfbox/commit/bd7957b5986a7261bebfd4cc59acc8b33974c035",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=bd7957b5986a7261bebfd4cc59acc8b33974c035",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -189,8 +189,7 @@ public Object getValue(Integer index) throws IOException\n                 }\n                 COSInteger key = (COSInteger) base;\n                 COSBase cosValue = numbersArray.getObject(i + 1);\n-                COSObjectable pdValue = convertCOSToPD( cosValue );\n-                indices.put( key.intValue(), pdValue );\n+                indices.put(key.intValue(), cosValue == null ? null : convertCOSToPD(cosValue));\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n@@ -215,6 +214,9 @@ protected COSObjectable convertCOSToPD(COSBase base) throws IOException\n         }\n         catch( Exception t )\n         {\n+            System.out.println(\"valueType: \" + valueType);\n+            System.out.println(\"base: \" + base);\n+            System.out.println(\"Exception: \" + t);\n             throw new IOException(\"Error while trying to create value in number tree:\" + t.getMessage(), t);\n         }\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "sha": "a4da469311acb4a332d164e3b3b755fa308aa5c8",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852205 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/2d8273051858824fc3721def784406010586fc16",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    "pdfbox_bdd43a0": {
        "bug_id": "pdfbox_bdd43a0",
        "commit": "https://github.com/apache/pdfbox/commit/bdd43a03fddf8287297563eef12546ba9e1bab5b",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/pdfbox/blob/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=bdd43a03fddf8287297563eef12546ba9e1bab5b",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -711,8 +711,9 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n             throws IOException\n     {\n         List<PDField> srcFields = srcAcroForm.getFields();\n+        COSArray destFields = null;\n \n-        if (srcFields != null)\n+        if (srcFields != null && srcFields.size() > 0)\n         {\n             // if a form is merged multiple times using PDFBox the newly generated\n             // fields starting with dummyFieldName may already exist. We need to determine the last unique \n@@ -729,7 +730,18 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n                 }\n             }\n \n-            COSArray destFields = (COSArray) destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            // get the destinations root fields. Could be that the entry doesn't exist\n+            // or is of wrong type\n+            COSBase base = destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            if (base instanceof COSArray)\n+            {\n+                destFields = (COSArray) base;\n+            }\n+            else\n+            {\n+                destFields = new COSArray();\n+            }\n+            \n             for (PDField srcField : srcAcroForm.getFields())\n             {\n                 COSDictionary dstField = (COSDictionary) cloner.cloneForNewDocument(srcField.getCOSObject());",
                "raw_url": "https://github.com/apache/pdfbox/raw/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "574fcd9ec9f774c629677f2ce6b9bd44440e7d4a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4107: avoid potential NPE; avoid potential ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824081 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fdc927e703908e5d3b8a82c618b81ab2c4d0a545",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_be59647": {
        "bug_id": "pdfbox_be59647",
        "commit": "https://github.com/apache/pdfbox/commit/be5964793daaf560370212bcc713f4b8cab46d25",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=be5964793daaf560370212bcc713f4b8cab46d25",
                "deletions": 5,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -283,18 +283,17 @@ public void addSignature(PDSignature sigObject, SignatureInterface signatureInte\n             acroForm.getCOSObject().setNeedToBeUpdated(true);\n         }\n \n-        List<PDField> fields = acroForm.getFields();\n-        if (fields == null)\n+        PDSignatureField signatureField = null;\n+        if (!(acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS) instanceof COSArray))\n         {\n-            fields = new ArrayList<PDField>();\n-            acroForm.setFields(fields);\n+            acroForm.getCOSObject().setItem(COSName.FIELDS, new COSArray());\n         }\n         else\n         {\n             COSArray fieldArray = (COSArray) acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);\n             fieldArray.setNeedToBeUpdated(true);\n+            signatureField = findSignatureField(acroForm.getFields(), sigObject);\n         }\n-        PDSignatureField signatureField = findSignatureField(fields, sigObject);\n         if (signatureField == null)\n         {\n             signatureField = new PDSignatureField(acroForm);",
                "raw_url": "https://github.com/apache/pdfbox/raw/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "9ade531107353a6019eabb3b30578ed85ab51c6d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3663: avoid NPE if /AcroForm exists without /Fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1780413 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/047579e94208ef3a7d3bbe90e9765b59283c7203",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_c71ea9e": {
        "bug_id": "pdfbox_c71ea9e",
        "commit": "https://github.com/apache/pdfbox/commit/c71ea9edd1e8ebc6d195c0209048844ca67947ff",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pdfbox/blob/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=c71ea9edd1e8ebc6d195c0209048844ca67947ff",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -314,7 +314,9 @@ public void flatten(List<PDField> fields, boolean refreshAppearances) throws IOE\n                 {\n                     annotations.add(annotation);                 \n                 }\n-                else if (!annotation.isInvisible() && !annotation.isHidden() && annotation.getNormalAppearanceStream() != null)\n+                else if (!annotation.isInvisible() && !annotation.isHidden() &&\n+                         annotation.getNormalAppearanceStream() != null && \n+                         annotation.getNormalAppearanceStream().getBBox() != null)\n                 {\n                     contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true, !isContentStreamWrapped);\n                     isContentStreamWrapped = true;",
                "raw_url": "https://github.com/apache/pdfbox/raw/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "570b2dad3e0e6774bbf7de5a17840b4e0bedcb64",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4631: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1865323 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/2e238062ba0d761c1544f59fab6e8379b3694752",
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_c94a9e1": {
        "bug_id": "pdfbox_c94a9e1",
        "commit": "https://github.com/apache/pdfbox/commit/c94a9e12071f4f60b85d93d399cc024b41377688",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/pdfbox/blob/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java?ref=c94a9e12071f4f60b85d93d399cc024b41377688",
                "deletions": 21,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.io.IOException;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n@@ -37,6 +39,11 @@\n  */\n public abstract class PDAnnotation implements COSObjectable\n {\n+    /**\n+     * Log instance.\n+     */\n+    private static final Log log = LogFactory.getLog(PDAnnotation.class);\n+\n     /**\n      * An annotation flag.\n      */\n@@ -85,7 +92,7 @@\n      * @return The correctly typed annotation object.\n      * @throws IOException If there is an error while creating the annotation.\n      */\n-    // TODO not yet implemented: FreeText, Polygon, PolyLine, Caret, Ink, Sound, \n+    // TODO not yet implemented: \n     // Movie, Screen, PrinterMark, TrapNet, Watermark, 3D, Redact\n     public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n     {\n@@ -94,62 +101,63 @@ public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n         {\n             COSDictionary annotDic = (COSDictionary)base;\n             String subtype = annotDic.getNameAsString( COSName.SUBTYPE );\n-            if( subtype.equals( PDAnnotationFileAttachment.SUB_TYPE ) )\n+            if( PDAnnotationFileAttachment.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationFileAttachment( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLine.SUB_TYPE ) )\n+            else if( PDAnnotationLine.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLine( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationPopup.SUB_TYPE ) )\n+            else if( PDAnnotationPopup.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationPopup(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationRubberStamp.SUB_TYPE ) )\n+            else if( PDAnnotationRubberStamp.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationRubberStamp(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_SQUARE ) ||\n-                    subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_CIRCLE ) )\n+            else if( PDAnnotationSquareCircle.SUB_TYPE_SQUARE.equals(subtype) ||\n+                    PDAnnotationSquareCircle.SUB_TYPE_CIRCLE.equals(subtype) )\n             {\n                 annot = new PDAnnotationSquareCircle( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationText.SUB_TYPE ) )\n+            else if( PDAnnotationText.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationText( annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT ))\n+            else if( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT.equals(subtype) )\n             {\n                 annot = new PDAnnotationTextMarkup( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationWidget.SUB_TYPE ) )\n+            else if( PDAnnotationWidget.SUB_TYPE.equals(subtype) )\n             {\n                annot = new PDAnnotationWidget( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationMarkup.SUB_TYPE_FREETEXT ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYGON ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYLINE ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_CARET ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_INK ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_SOUND ))\n+            else if( PDAnnotationMarkup.SUB_TYPE_FREETEXT.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYGON.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYLINE.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_CARET.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_INK.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_SOUND.equals(subtype) )\n             {\n                 annot = new PDAnnotationMarkup( annotDic );\n             }\n             else\n             {\n                 annot = new PDAnnotationUnknown( annotDic );\n+                log.debug(\"Unknown or unsupported annotation subtype \"+subtype);\n             }\n         }\n         else",
                "raw_url": "https://github.com/apache/pdfbox/raw/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "sha": "963d4115a389521069fc568d823c8e0089692cdf",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-960: avoid NPE when annotation subtype is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1070099 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/96cb36e599c091b25084f20902a7c7eff9730857",
        "repo": "pdfbox",
        "unit_tests": [
            "PDAnnotationTest.java"
        ]
    },
    "pdfbox_ca50571": {
        "bug_id": "pdfbox_ca50571",
        "commit": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=ca5057167359def53b88992eaec0476ef098f3db",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSInteger;\n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.cos.COSNull;\n \n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n@@ -251,7 +252,7 @@ public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n             {\n                 array.add( COSInteger.get( key ) );\n                 COSObjectable obj = numbers.get( key );\n-                array.add( obj );\n+                array.add(obj == null ? COSNull.NULL : obj);\n             }\n             Integer lower = null;\n             Integer upper = null;",
                "raw_url": "https://github.com/apache/pdfbox/raw/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "sha": "661f0eef9bb41ec2862a9eb766df6cc93972e3b1",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852208 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/bd9995639240c2b763be3e9dc99a49df48ef642b",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    "pdfbox_e3c8b09": {
        "bug_id": "pdfbox_e3c8b09",
        "commit": "https://github.com/apache/pdfbox/commit/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "patch": "@@ -47,6 +47,16 @@\n         this.isCIDFont = isCIDFont;\n     }\n \n+    /**\n+     * Indicates if the charset belongs to a CID font.\n+     * \n+     * @return true for CID fonts\n+     */\n+    public boolean isCIDFont()\n+    {\n+        return isCIDFont;\n+    }\n+    \n     /**\n      * Adds a new GID/SID/name combination to the charset.\n      *",
                "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "sha": "217bfeb4b3c7883adf0dec01bf72a1dde1c0e35d",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
                "deletions": 6,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -1323,11 +1323,14 @@ protected Format1Charset(boolean isCIDFont)\n         @Override\r\n         public int getCIDForGID(int gid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInRange(gid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapValue(gid);\r\n+                    if (mapping.isInRange(gid))\r\n+                    {\r\n+                        return mapping.mapValue(gid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getCIDForGID(gid);\r\n@@ -1336,11 +1339,14 @@ public int getCIDForGID(int gid)\n         @Override\r\n         public int getGIDForCID(int cid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInReverseRange(cid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapReverseValue(cid);\r\n+                    if (mapping.isInReverseRange(cid))\r\n+                    {\r\n+                        return mapping.mapReverseValue(cid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getGIDForCID(cid);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "e579e8f0ecc36f89439f08a98f8f0d27a265ac96",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3187: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1724102 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1d9155376cc2805aae8331f939dd7784b17eee41",
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_e6470fe": {
        "bug_id": "pdfbox_e6470fe",
        "commit": "https://github.com/apache/pdfbox/commit/e6470feaf5eafb9de9981cf3a0529a1adb8eea00",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e6470feaf5eafb9de9981cf3a0529a1adb8eea00",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -1075,7 +1075,6 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n         {\r\n             int first = dataInput.readSID();\r\n             int nLeft = dataInput.readCard16();\r\n-            charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n             if (!isCIDFont)\r\n             {\r\n                 for (int j = 0; j < 1 + nLeft; j++)\r\n@@ -1084,6 +1083,10 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n                     charset.addSID(gid + j, sid, readString(sid));\r\n                 }\r\n             }\r\n+            else\r\n+            {\r\n+                charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n+            }\r\n             gid += nLeft;\r\n         }\r\n         return charset;\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "5dcdfc1c98c76d6f62d7b4aa0f037e79573c2a65",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3131: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1721419 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/a51120cb1ec47de5bceb5b962bb4d536bf215cc2",
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_e8b3469": {
        "bug_id": "pdfbox_e8b3469",
        "commit": "https://github.com/apache/pdfbox/commit/e8b34694cf320960375ebe28c66ad5a2b3ec9f81",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/pdfbox/blob/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java?ref=e8b34694cf320960375ebe28c66ad5a2b3ec9f81",
                "deletions": 12,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "patch": "@@ -247,20 +247,23 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         InputStream is = stream.createRawInputStream();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n         List<COSName> filters = getFilters();\n-        for (int i = 0; i < filters.size(); i++)\n+        if (filters != null)\n         {\n-            COSName nextFilter = filters.get(i);\n-            if (stopFilters.contains(nextFilter.getName()))\n+            for (int i = 0; i < filters.size(); i++)\n             {\n-                break;\n-            }\n-            else\n-            {\n-                Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n-                filter.decode(is, os, stream, i);\n-                IOUtils.closeQuietly(is);\n-                is = new ByteArrayInputStream(os.toByteArray());\n-                os.reset();\n+                COSName nextFilter = filters.get(i);\n+                if ((stopFilters != null) && stopFilters.contains(nextFilter.getName()))\n+                {\n+                    break;\n+                }\n+                else\n+                {\n+                    Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n+                    filter.decode(is, os, stream, i);\n+                    IOUtils.closeQuietly(is);\n+                    is = new ByteArrayInputStream(os.toByteArray());\n+                    os.reset();\n+                }\n             }\n         }\n         return is;",
                "raw_url": "https://github.com/apache/pdfbox/raw/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "sha": "f773de04ba049e2836fccf9af8acc354d73387ae",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2948: prevent NPE when stream has no filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1698151 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7196c84de4fe3639dd20a2d8a02c599242608d7c",
        "repo": "pdfbox",
        "unit_tests": [
            "PDStreamTest.java"
        ]
    },
    "pdfbox_e96983a": {
        "bug_id": "pdfbox_e96983a",
        "commit": "https://github.com/apache/pdfbox/commit/e96983aa602bb3ecc57860cbd3b9dd14b79bc325",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=e96983aa602bb3ecc57860cbd3b9dd14b79bc325",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -377,7 +377,7 @@ protected float getAverageFontWidthFromAFMFile() throws IOException\n      */\n     protected FontMetric getAFM()\n     {\n-        if(afm==null){\n+        if(isType1Font() && afm==null){\n             COSBase baseFont = font.getDictionaryObject( COSName.BASE_FONT );\n             String name = null;\n             if( baseFont instanceof COSName )",
                "raw_url": "https://github.com/apache/pdfbox/raw/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "af6de4ed63a4b4bdddbc784a1063d380a99e25d3",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1008: use AFM metrics only with Type1 fonts to avoid NPE in getFontHeight \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1133689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7cf0bd0df5d21e9f81cb549f90856800a0e343e2",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_eb385bf": {
        "bug_id": "pdfbox_eb385bf",
        "commit": "https://github.com/apache/pdfbox/commit/eb385bf10f197123eb0979f7319df3b6aa351fbf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java?ref=eb385bf10f197123eb0979f7319df3b6aa351fbf",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "patch": "@@ -164,7 +164,8 @@ public PDSignature getDefaultValue()\n     @Override\n     public String getValueAsString()\n     {\n-        return getValue().toString();\n+        PDSignature signature = getValue();\n+        return signature != null ? signature.toString() : \"\";\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "sha": "d37f6047eaf9d97056b38c236698a5687fd10845",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2932: avoid NPE when field has no value\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1695466 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fed8a29b81b5dda18d857c9bb99b07575c92f332",
        "repo": "pdfbox",
        "unit_tests": [
            "PDSignatureFieldTest.java"
        ]
    },
    "pdfbox_ecb2f58": {
        "bug_id": "pdfbox_ecb2f58",
        "commit": "https://github.com/apache/pdfbox/commit/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=ecb2f58c6871b8da8f2bc5561c4b3124ca361afe",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -691,7 +691,12 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        return getFontDescriptor().isSymbolic();\n+        // not all fonts have a font descriptor\n+        if (getFontDescriptor() != null)\n+        {\n+            return getFontDescriptor().isSymbolic();\n+        }\n+        return false;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "45baa765d82a39b77c42346ba9121b69c869e836",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: avoid, NPE, as not all fonts have a font descriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1603854 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e46676736abe6f8d25ecb6adc2e80e5b11903c00",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_f39436a": {
        "bug_id": "pdfbox_f39436a",
        "commit": "https://github.com/apache/pdfbox/commit/f39436a8796e8e72313ae03c2029662e33fde9a8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=f39436a8796e8e72313ae03c2029662e33fde9a8",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -420,7 +420,7 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n         PDDocumentOutline srcOutline = srcCatalog.getDocumentOutline();\n         if (srcOutline != null)\n         {\n-            if (destOutline == null)\n+            if (destOutline == null || destOutline.getFirstChild() == null)\n             {\n                 PDDocumentOutline cloned = new PDDocumentOutline((COSDictionary) cloner.cloneForNewDocument(srcOutline));\n                 destCatalog.setDocumentOutline(cloned);",
                "raw_url": "https://github.com/apache/pdfbox/raw/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "20eef6ea365528a07565878669965fe7a44e7265",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3761: avoid NPE if /Outlines exists but is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1791933 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5a20e5cac9ed3a4f52fe0de7f0b78789c43551e7",
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_f4e4fc5": {
        "bug_id": "pdfbox_f4e4fc5",
        "commit": "https://github.com/apache/pdfbox/commit/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/pdfbox/blob/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java?ref=f4e4fc542951b1c27b76ffd857d6d8973eb3f68d",
                "deletions": 5,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "patch": "@@ -23,6 +23,8 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n@@ -39,6 +41,7 @@\n  */\n public class PDNameTreeNode implements COSObjectable\n {\n+    private static final Log log = LogFactory.getLog(PDNameTreeNode.class);\n     private COSDictionary node;\n     private Class valueType = null;\n \n@@ -147,15 +150,22 @@ public Object getValue( String name ) throws IOException\n         else\n         {\n             List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            if (kids != null) \n             {\n-                PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( name );\n+                    PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( name );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                log.warn(\"NameTreeNode does not have \\\"names\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "sha": "62759c2fbac04c1b31666675e28f37db17834630",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-891: Malformed document causes NPE in PDNameTreeNode.getValue\nPatch courtesy of Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1037069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/42087b9de7fd044853fc476e562c0274a1638157",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNameTreeNode.java"
        ]
    },
    "pdfbox_fdb019d": {
        "bug_id": "pdfbox_fdb019d",
        "commit": "https://github.com/apache/pdfbox/commit/fdb019d531a938b5170a4cd4ecb8bb879c3d474d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=fdb019d531a938b5170a4cd4ecb8bb879c3d474d",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -968,13 +968,18 @@ public void save(OutputStream output) throws IOException\n     }\n \n    /**\n-     * Save the PDF as an incremental update.\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n+     * @throws IllegalStateException if the document was not loaded from a file.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n+        if (incrementalFile == null)\n+        {\n+            throw new IllegalStateException(\"Incremental save is only possible if the document was loaded from a file\");\n+        }\n         InputStream input = new RandomAccessBufferedFileInputStream(incrementalFile);\n         COSWriter writer = null;\n         try",
                "raw_url": "https://github.com/apache/pdfbox/raw/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "03a0eb555a9723c903b0e4c2534f9d6922ba0111",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2716: throw IllegalStateException instead of NPE if saveIncremental() called after loading from a stream instead of a file\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1674945 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5519b3d8c1700a62b00adba8d4a6f04ba8b975c6",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_ffbc207": {
        "bug_id": "pdfbox_ffbc207",
        "commit": "https://github.com/apache/pdfbox/commit/ffbc2070ecd7dc6893a48330aae0db5942c75cd9",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=ffbc2070ecd7dc6893a48330aae0db5942c75cd9",
                "deletions": 9,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -322,16 +322,19 @@ public PDPage importPage( PDPage page ) throws IOException\n         try\n         {\n             PDStream src = page.getContents();\n-            PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n-            importedPage.setContents( dest );\n-            os = dest.createOutputStream();\n-\n-            byte[] buf = new byte[10240];\n-            int amountRead = 0;\n-            is = src.createInputStream();\n-            while((amountRead = is.read(buf,0,10240)) > -1)\n+            if(src != null)\n             {\n-                os.write(buf, 0, amountRead);\n+                PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n+                importedPage.setContents( dest );\n+                os = dest.createOutputStream();\n+\n+                byte[] buf = new byte[10240];\n+                int amountRead = 0;\n+                is = src.createInputStream();\n+                while((amountRead = is.read(buf,0,10240)) > -1)\n+                {\n+                    os.write(buf, 0, amountRead);\n+                }\n             }\n             addPage( importedPage );\n         }",
                "raw_url": "https://github.com/apache/pdfbox/raw/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "eff6afe92ceec424769f84ad0cb869fe3aa03d2b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-889: Empty page causes NPE in importPage\nPatch contributed by Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1038232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fb9ab33a4943741ad165de2036128946d17e58b2",
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    }
}