{
    "attic-rave_0b72cfd": {
        "bug_id": "attic-rave_0b72cfd",
        "commit": "https://github.com/apache/attic-rave/commit/0b72cfd29f3d38647d042ba8d377ef6c1a5305ad",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-rave/blob/0b72cfd29f3d38647d042ba8d377ef6c1a5305ad/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverter.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverter.java?ref=0b72cfd29f3d38647d042ba8d377ef6c1a5305ad",
                "deletions": 7,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverter.java",
                "patch": "@@ -19,8 +19,6 @@\n package org.apache.rave.portal.model.conversion;\n \n import org.apache.rave.model.ModelConverter;\n-import org.apache.rave.portal.model.Category;\n-import org.apache.rave.portal.model.JpaCategory;\n import org.apache.rave.portal.model.JpaWidgetComment;\n import org.apache.rave.portal.model.WidgetComment;\n import org.springframework.stereotype.Component;\n@@ -44,15 +42,19 @@\n \n     @Override\n     public JpaWidgetComment convert(WidgetComment source) {\n-        return source instanceof JpaWidgetComment ? (JpaWidgetComment)source : createEntity(source);\n+        return source instanceof JpaWidgetComment ? (JpaWidgetComment) source : createEntity(source);\n     }\n \n     private JpaWidgetComment createEntity(WidgetComment source) {\n-        JpaWidgetComment converted = manager.find(JpaWidgetComment.class, source.getId());\n-        if(converted == null) {\n-            converted = new JpaWidgetComment();\n+        JpaWidgetComment converted = null;\n+        if (source != null) {\n+            converted = manager.find(JpaWidgetComment.class, source.getId());\n+\n+            if (converted == null) {\n+                converted = new JpaWidgetComment();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/0b72cfd29f3d38647d042ba8d377ef6c1a5305ad/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverter.java",
                "sha": "0202501a6a41a8719e0c47a58840774673f42bd7",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-rave/blob/0b72cfd29f3d38647d042ba8d377ef6c1a5305ad/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverterTest.java?ref=0b72cfd29f3d38647d042ba8d377ef6c1a5305ad",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverterTest.java",
                "patch": "@@ -46,6 +46,13 @@ public void noConversion() {\n         assertThat(widgetCommentConverter.convert(comment), is(sameInstance(comment)));\r\n     }\r\n \r\n+    @Test\r\n+    public void nullConversion() {\r\n+        WidgetComment template = null;\r\n+        assertThat(widgetCommentConverter.convert(template), is(nullValue()));\r\n+    }\r\n+\r\n+\r\n     @Test\r\n     public void newComment() {\r\n         WidgetComment comment = new WidgetCommentImpl();\r",
                "raw_url": "https://github.com/apache/attic-rave/raw/0b72cfd29f3d38647d042ba8d377ef6c1a5305ad/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaWidgetCommentConverterTest.java",
                "sha": "5323f36dfe362eed4f69c6317bfda3b981149e71",
                "status": "modified"
            }
        ],
        "message": "Fixed failing WidgetComment NPE conversion test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346140 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/60c1ff6b4daed06f10eb0f98712cf1155bec52e7",
        "patched_files": [
            "JpaWidgetCommentConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaWidgetCommentConverterTest.java"
        ]
    },
    "attic-rave_0f19844": {
        "bug_id": "attic-rave_0f19844",
        "commit": "https://github.com/apache/attic-rave/commit/0f198448f3ec01087720469e3d39926f71023558",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-rave/blob/0f198448f3ec01087720469e3d39926f71023558/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionPermissionEvaluator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionPermissionEvaluator.java?ref=0f198448f3ec01087720469e3d39926f71023558",
                "deletions": 1,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionPermissionEvaluator.java",
                "patch": "@@ -201,7 +201,8 @@ private boolean isRegionMember(Authentication authentication, Region region, Lis\n         String viewer = ((User)authentication.getPrincipal()).getUsername();\r\n         do {\r\n             for (PageUser pageUser:containerPage.getMembers()){\r\n-                if (userRepository.get(pageUser.getUserId()).getUsername().equals(viewer)){\r\n+                User user = userRepository.get(pageUser.getUserId());\r\n+                if (user != null && user.getUsername().equals(viewer)){\r\n                     log.info(\"User \"+viewer+\" is a member of page \"+containerPage.getId());\r\n                     if(checkEditorStatus){\r\n                         return pageUser.isEditor();\r",
                "raw_url": "https://github.com/apache/attic-rave/raw/0f198448f3ec01087720469e3d39926f71023558/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionPermissionEvaluator.java",
                "sha": "fb6cc19d29d493d71e61a60582f3820b46e45669",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-rave/blob/0f198448f3ec01087720469e3d39926f71023558/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionWidgetPermissionEvaluator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionWidgetPermissionEvaluator.java?ref=0f198448f3ec01087720469e3d39926f71023558",
                "deletions": 1,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionWidgetPermissionEvaluator.java",
                "patch": "@@ -206,7 +206,8 @@ private boolean isRegionWidgetMember(Authentication authentication,\n         String viewer = ((User)authentication.getPrincipal()).getUsername();\r\n         do {\r\n             for (PageUser pageUser:containerPage.getMembers()){\r\n-                if (userRepository.get(pageUser.getUserId()).getUsername().equals(viewer)){\r\n+                User user = userRepository.get(pageUser.getUserId());\r\n+                if (user != null && user.getUsername().equals(viewer)){\r\n                     log.info(\"User \"+viewer+\" is a member of page \"+containerPage.getId());\r\n                     if(checkEditorStatus){\r\n                         return pageUser.isEditor();\r",
                "raw_url": "https://github.com/apache/attic-rave/raw/0f198448f3ec01087720469e3d39926f71023558/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultRegionWidgetPermissionEvaluator.java",
                "sha": "d521e7fe8250e3a295f4fe558d89692e592cf2c2",
                "status": "modified"
            }
        ],
        "message": "RAVE-1274 | Ensure a null user won't throw an NPE",
        "parent": "https://github.com/apache/attic-rave/commit/22e16c6aeafc7c3101bca3749fc074ebc60a23e6",
        "patched_files": [
            "DefaultRegionPermissionEvaluator.java",
            "DefaultRegionWidgetPermissionEvaluator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "DefaultRegionPermissionEvaluatorTest.java",
            "DefaultRegionWidgetPermissionEvaluatorTest.java"
        ]
    },
    "attic-rave_1446298": {
        "bug_id": "attic-rave_1446298",
        "commit": "https://github.com/apache/attic-rave/commit/14462989cfd2cf4019fbc1269f3fecc259bf6b6c",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/attic-rave/blob/14462989cfd2cf4019fbc1269f3fecc259bf6b6c/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonConverter.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonConverter.java?ref=14462989cfd2cf4019fbc1269f3fecc259bf6b6c",
                "deletions": 12,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonConverter.java",
                "patch": "@@ -3,15 +3,11 @@\n import org.apache.rave.model.ModelConverter;\n import org.apache.rave.portal.model.JpaPerson;\n import org.apache.rave.portal.model.Person;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.core.convert.converter.Converter;\n import org.springframework.stereotype.Component;\n \n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.TypedQuery;\n-import java.util.ArrayList;\n-import java.util.List;\n \n import static org.apache.rave.persistence.jpa.util.JpaUtil.getSingleResult;\n \n@@ -25,7 +21,7 @@\n \n     @Override\n     public JpaPerson convert(Person source) {\n-        return source instanceof JpaPerson ? (JpaPerson)source : createEntity(source);\n+        return source instanceof JpaPerson ? (JpaPerson) source : createEntity(source);\n     }\n \n     @Override\n@@ -34,15 +30,17 @@ public JpaPerson convert(Person source) {\n     }\n \n     private JpaPerson createEntity(Person source) {\n-        JpaPerson converted;\n-        TypedQuery<JpaPerson> query = manager.createNamedQuery(JpaPerson.FIND_BY_USERNAME, JpaPerson.class);\n-        query.setParameter(JpaPerson.USERNAME_PARAM, source.getUsername());\n-        converted = getSingleResult(query.getResultList());\n+        JpaPerson converted = null;\n+        if (source != null) {\n+            TypedQuery<JpaPerson> query = manager.createNamedQuery(JpaPerson.FIND_BY_USERNAME, JpaPerson.class);\n+            query.setParameter(JpaPerson.USERNAME_PARAM, source.getUsername());\n+            converted = getSingleResult(query.getResultList());\n \n-        if(converted == null) {\n-            converted = new JpaPerson();\n+            if (converted == null) {\n+                converted = new JpaPerson();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/14462989cfd2cf4019fbc1269f3fecc259bf6b6c/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonConverter.java",
                "sha": "742d93a8cf90daece0a712d627be405ea4c00766",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-rave/blob/14462989cfd2cf4019fbc1269f3fecc259bf6b6c/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonConverterTest.java?ref=14462989cfd2cf4019fbc1269f3fecc259bf6b6c",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonConverterTest.java",
                "patch": "@@ -31,6 +31,13 @@ public void testNoConversion() {\n         assertThat(converter.convert(template), is(sameInstance(template)));\n     }\n \n+    @Test\n+    public void nullConversion() {\n+        Person template = null;\n+        assertThat(converter.convert(template), is(nullValue()));\n+    }\n+\n+\n     @Test\n     public void convertValid() {\n         Person template = new PersonImpl();",
                "raw_url": "https://github.com/apache/attic-rave/raw/14462989cfd2cf4019fbc1269f3fecc259bf6b6c/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonConverterTest.java",
                "sha": "19ab27639a89d717dc2a2627e1fe507e9d3aeca6",
                "status": "modified"
            }
        ],
        "message": "Fixed failing Person NPE conversion test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346132 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/ca547cee4ecb15f0364b339404911097c0d001d8",
        "patched_files": [
            "JpaPersonConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaPersonConverterTest.java"
        ]
    },
    "attic-rave_1fd9e6f": {
        "bug_id": "attic-rave_1fd9e6f",
        "commit": "https://github.com/apache/attic-rave/commit/1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-rave/blob/1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverter.java?ref=1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d",
                "deletions": 5,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverter.java",
                "patch": "@@ -42,13 +42,16 @@ public JpaPageTemplateRegion convert(PageTemplateRegion source) {\n     }\n \n     private JpaPageTemplateRegion createEntity(PageTemplateRegion source) {\n-        JpaPageTemplateRegion converted = manager.find(JpaPageTemplateRegion.class, source.getId());\n+        JpaPageTemplateRegion converted = null;\n \n-        if (converted == null) {\n-            converted = new JpaPageTemplateRegion();\n-        }\n-        updateProperties(source, converted);\n+        if (source != null) {\n+            converted = manager.find(JpaPageTemplateRegion.class, source.getId());\n \n+            if (converted == null) {\n+                converted = new JpaPageTemplateRegion();\n+            }\n+            updateProperties(source, converted);\n+        }\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverter.java",
                "sha": "96ce54b13a525ca05f3963300f1facca17f117c3",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-rave/blob/1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverterTest.java?ref=1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverterTest.java",
                "patch": "@@ -54,6 +54,13 @@ public void testNoConversion() {\n         assertThat(converter.convert(template), is(sameInstance(template)));\n     }\n \n+    @Test\n+    public void nullConversion() {\n+        PageTemplateRegion template = null;\n+        assertThat(converter.convert(template), is(nullValue()));\n+    }\n+\n+\n     @Test\n     public void convertValid() {\n         PageTemplateRegion template = new PageTemplateRegionImpl();",
                "raw_url": "https://github.com/apache/attic-rave/raw/1fd9e6f0c44d6351b8745c5829c8ac0c0d98472d/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPageTemplateRegionConverterTest.java",
                "sha": "d988d1a13f3e85917ea4f662c0e8cf4f0871e9d9",
                "status": "modified"
            }
        ],
        "message": "Fixed failing PateTemplateRegion NPE test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346129 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/324546e265393fdcdb1f8c53c7fc32a016188f92",
        "patched_files": [
            "JpaPageTemplateRegionConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaPageTemplateRegionConverterTest.java"
        ]
    },
    "attic-rave_26e47b6": {
        "bug_id": "attic-rave_26e47b6",
        "commit": "https://github.com/apache/attic-rave/commit/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/attic-rave/blob/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaGroupConverter.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaGroupConverter.java?ref=26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720",
                "deletions": 9,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaGroupConverter.java",
                "patch": "@@ -26,7 +26,6 @@\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.TypedQuery;\n-import java.util.List;\n \n import static org.apache.rave.persistence.jpa.util.JpaUtil.getSingleResult;\n \n@@ -42,19 +41,21 @@\n \n     @Override\n     public JpaGroup convert(Group source) {\n-        return source instanceof JpaGroup ? (JpaGroup)source : createEntity(source);\n+        return source instanceof JpaGroup ? (JpaGroup) source : createEntity(source);\n     }\n \n     private JpaGroup createEntity(Group source) {\n-        JpaGroup converted;\n-        TypedQuery<JpaGroup> query = manager.createNamedQuery(JpaGroup.FIND_BY_TITLE, JpaGroup.class);\n-        query.setParameter(JpaGroup.GROUP_ID_PARAM, source.getTitle());\n-        converted = getSingleResult(query.getResultList());\n+        JpaGroup converted = null;\n+        if (source != null) {\n+            TypedQuery<JpaGroup> query = manager.createNamedQuery(JpaGroup.FIND_BY_TITLE, JpaGroup.class);\n+            query.setParameter(JpaGroup.GROUP_ID_PARAM, source.getTitle());\n+            converted = getSingleResult(query.getResultList());\n \n-        if(converted == null) {\n-            converted = new JpaGroup();\n+            if (converted == null) {\n+                converted = new JpaGroup();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaGroupConverter.java",
                "sha": "12d81e57ce9aab14e4a54d695f3d4b11881abff2",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/attic-rave/blob/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaGroupConverterTest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaGroupConverterTest.java?ref=26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720",
                "deletions": 6,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaGroupConverterTest.java",
                "patch": "@@ -18,10 +18,9 @@\n  */\n package org.apache.rave.portal.model.conversion;\n \n-import static org.hamcrest.CoreMatchers.*;\n-import static org.junit.Assert.*;\n-\n-import org.apache.rave.portal.model.*;\n+import org.apache.rave.portal.model.Group;\n+import org.apache.rave.portal.model.JpaGroup;\n+import org.apache.rave.portal.model.Person;\n import org.apache.rave.portal.model.impl.GroupImpl;\n import org.apache.rave.portal.model.impl.PersonImpl;\n import org.junit.Before;\n@@ -31,11 +30,13 @@\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n-import javax.persistence.EntityManager;\n-import javax.persistence.PersistenceContext;\n import java.util.ArrayList;\n import java.util.List;\n \n+import static org.hamcrest.CoreMatchers.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertThat;\n+\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations={\"classpath:test-applicationContext.xml\",\"classpath:test-dataContext.xml\"} )\n public class JpaGroupConverterTest {\n@@ -74,6 +75,12 @@ public void testNoConversion() {\n         assertThat(converter.convert(group), is(sameInstance(group)));\n     }\n \n+    @Test\n+    public void nullConversion() {\n+        Group category = null;\n+        assertThat(converter.convert(category), is(nullValue()));\n+    }\n+\n     @Test\n     public void testConvertGroupToJpaGroup() {\n         JpaGroup jpaGroup = converter.convert(group);",
                "raw_url": "https://github.com/apache/attic-rave/raw/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaGroupConverterTest.java",
                "sha": "472a21f5099543df25341fe37c99888a490012ad",
                "status": "modified"
            }
        ],
        "message": "Fixed failing Group NPE conversion test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346125 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/874c29569f4277988d64ecebec0c256022cbd6f9",
        "patched_files": [
            "JpaGroupConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaGroupConverterTest.java"
        ]
    },
    "attic-rave_324546e": {
        "bug_id": "attic-rave_324546e",
        "commit": "https://github.com/apache/attic-rave/commit/324546e265393fdcdb1f8c53c7fc32a016188f92",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/attic-rave/blob/324546e265393fdcdb1f8c53c7fc32a016188f92/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverter.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverter.java?ref=324546e265393fdcdb1f8c53c7fc32a016188f92",
                "deletions": 9,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverter.java",
                "patch": "@@ -27,19 +27,21 @@\n \n     @Override\n     public JpaOrganization convert(Organization source) {\n-        return source instanceof JpaOrganization ? (JpaOrganization)source : createEntity(source);\n+        return source instanceof JpaOrganization ? (JpaOrganization) source : createEntity(source);\n     }\n \n     private JpaOrganization createEntity(Organization source) {\n-        JpaOrganization converted;\n-        TypedQuery<JpaOrganization> query = manager.createNamedQuery(JpaOrganization.FIND_BY_NAME, JpaOrganization.class);\n-        query.setParameter(JpaOrganization.NAME_PARAM, source.getName());\n-        converted = getSingleResult(query.getResultList());\n-\n-        if(converted == null) {\n-            converted = new JpaOrganization();\n+        JpaOrganization converted = null;\n+        if (source != null) {\n+            TypedQuery<JpaOrganization> query = manager.createNamedQuery(JpaOrganization.FIND_BY_NAME, JpaOrganization.class);\n+            query.setParameter(JpaOrganization.NAME_PARAM, source.getName());\n+            converted = getSingleResult(query.getResultList());\n+\n+            if (converted == null) {\n+                converted = new JpaOrganization();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/324546e265393fdcdb1f8c53c7fc32a016188f92/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverter.java",
                "sha": "e15ec5726c2fc776941b21c6faf3da2c3846b550",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-rave/blob/324546e265393fdcdb1f8c53c7fc32a016188f92/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverterTest.java?ref=324546e265393fdcdb1f8c53c7fc32a016188f92",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverterTest.java",
                "patch": "@@ -31,6 +31,13 @@ public void testNoConversion() {\n         assertThat(converter.convert(template), is(sameInstance(template)));\n     }\n \n+    @Test\n+    public void nullConversion() {\n+        Organization template = null;\n+        assertThat(converter.convert(template), is(nullValue()));\n+    }\n+\n+\n     @Test\n     public void convertValid() {\n         Organization template = new OrganizationImpl();",
                "raw_url": "https://github.com/apache/attic-rave/raw/324546e265393fdcdb1f8c53c7fc32a016188f92/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaOrganizationConverterTest.java",
                "sha": "b3643004a91f28b5e0a9ca3af7ef0aa296fd90ae",
                "status": "modified"
            }
        ],
        "message": "Fixed failing Organization NPE conversion test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346127 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/26e47b6427219a9b17f8e61e5fcc7e5bb1b8d720",
        "patched_files": [
            "JpaOrganizationConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaOrganizationConverterTest.java"
        ]
    },
    "attic-rave_32eacb0": {
        "bug_id": "attic-rave_32eacb0",
        "commit": "https://github.com/apache/attic-rave/commit/32eacb098e28e082502b66df2a8814a75e8a6c7f",
        "file": [
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/attic-rave/blob/32eacb098e28e082502b66df2a8814a75e8a6c7f/rave-portal/src/main/java/org/apache/rave/portal/web/validator/NewAccountValidator.java",
                "changes": 147,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/main/java/org/apache/rave/portal/web/validator/NewAccountValidator.java?ref=32eacb098e28e082502b66df2a8814a75e8a6c7f",
                "deletions": 75,
                "filename": "rave-portal/src/main/java/org/apache/rave/portal/web/validator/NewAccountValidator.java",
                "patch": "@@ -19,9 +19,7 @@\n //TODO is this the right package name convention?\n package org.apache.rave.portal.web.validator;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import org.apache.commons.lang.StringUtils;\n import org.apache.rave.portal.model.NewUser;\n import org.apache.rave.portal.service.UserService;\n import org.slf4j.Logger;\n@@ -33,76 +31,75 @@\n \n public class NewAccountValidator implements Validator {\n \n-\t protected final Logger logger=LoggerFactory.getLogger(getClass());\n-\t \n-\t private UserService userService;\n-\n-\t @Autowired\n-\t public NewAccountValidator(UserService userService) {\n-\t\t this.userService = userService;\n-\t }\n-\t \n-\t public boolean supports(Class aClass){\n-\t\t  return NewAccountValidator.class.equals(aClass);\n-\t }\n-\t \n-\t public void validate(Object obj, Errors errors){\n-\t\t  logger.debug(\"Validator called\");\n-\t\t  NewUser newUser = (NewUser) obj;\n-\t\t  List<ObjectError> errorList = new ArrayList<ObjectError>();\n-\t\t  \n-\t\t  //check if the username is null\n-\t\t  if(newUser.getUsername() == \"\") {\n-\t\t\t  errors.rejectValue(\"username\", \"username.required\");\n-\t\t\t  logger.error(\"Username required\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if username length is less than 2\n-\t\t  else if(newUser.getUsername().length() < 2) {\n-\t\t\t  errors.rejectValue(\"username\", \"username.invalid.length\");\n-\t\t\t  logger.error(\"Username must be atleast 2 characters long\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if username is already in use\n-\t\t  \n-\t\t  else if(userService.getUserByUsername(newUser.getUsername()) != null) {\n-\t\t\t  errors.rejectValue(\"username\", \"username.exits\");\n-\t\t\t  logger.error(\"Username already exists\");\n-\t\t  }\n-\t\t  \n-\t\t  \n-\t\t  //check if the password is null\n-\t\t  if(newUser.getPassword() == \"\") {\n-\t\t\t  errors.rejectValue(\"password\", \"password.required\");\n-\t\t\t  logger.error(\"Password required\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the password length is less than 4\n-\t\t  else if(newUser.getPassword().length() < 4) {\n-\t\t\t  errors.rejectValue(\"password\", \"password.invalid.lenght\");\n-\t\t\t  logger.error(\"Password must be atleast 4 characters long\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the confirm password is null\n-\t\t  if(newUser.getConfirmPassword() == \"\") {\n-\t\t\t  errors.rejectValue(\"confirmPassword\", \"confirmPassword.required\");\n-\t\t\t  logger.error(\"Confirm Password required\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the confirm password matches the previous entered password\n-\t\t  if(newUser.getConfirmPassword().length() != newUser.getPassword().length() || newUser.getConfirmPassword().compareTo(newUser.getPassword()) != 0) {\n-\t\t\t  errors.rejectValue(\"confirmPassword\", \"confirmPassword.mismatch\");\n-\t\t\t  logger.error(\"Password mismatch\");\n-\t\t  }\n-\n-\t\t  if(errors.hasErrors()){\n-\t\t\t  errorList = errors.getAllErrors();\n-\t\t\t  for (ObjectError error : errorList) {\n-\t\t\t\t  logger.error(\"Validation error: \" + error.toString());\n-\t\t\t  }\n-\t\t  }\n-\t\t  else {\n-\t\t\t  logger.debug(\"Validation successful\");\n-\t\t  }\n-\t }\n+    protected final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private UserService userService;\n+\n+    @Autowired\n+    public NewAccountValidator(UserService userService) {\n+        this.userService = userService;\n+    }\n+\n+    public boolean supports(Class aClass) {\n+        return NewUser.class.isAssignableFrom(aClass);\n+    }\n+\n+    public void validate(Object obj, Errors errors) {\n+        logger.debug(\"Validator called\");\n+        NewUser newUser = (NewUser) obj;\n+\n+        //check if the username is null or empty\n+        if (StringUtils.isBlank(newUser.getUsername())) {\n+            errors.rejectValue(\"username\", \"username.required\");\n+            logger.info(\"Username required\");\n+        }\n+\n+        //check if username length is less than 2\n+        else if (newUser.getUsername().length() < 2) {\n+            errors.rejectValue(\"username\", \"username.invalid.length\");\n+            logger.info(\"Username must be atleast 2 characters long\");\n+        }\n+\n+        //check if username is already in use\n+\n+        else if (userService.getUserByUsername(newUser.getUsername()) != null) {\n+            errors.rejectValue(\"username\", \"username.exits\");\n+            logger.info(\"Username already exists\");\n+        }\n+\n+\n+        //check if the password is null\n+        if (StringUtils.isBlank(newUser.getPassword())) {\n+            errors.rejectValue(\"password\", \"password.required\");\n+            logger.info(\"Password required\");\n+        }\n+\n+        //check if the password length is less than 4\n+        else if (newUser.getPassword().length() < 4) {\n+            errors.rejectValue(\"password\", \"password.invalid.lenght\");\n+            logger.info(\"Password must be atleast 4 characters long\");\n+        }\n+\n+        //check if the confirm password is null\n+        if (StringUtils.isBlank(newUser.getConfirmPassword())) {\n+            errors.rejectValue(\"confirmPassword\", \"confirmPassword.required\");\n+            logger.info(\"Confirm Password required\");\n+        }\n+\n+        //check if the confirm password matches the previous entered password\n+        //first check for null\n+        if (newUser.getConfirmPassword() != null &&\n+                !(newUser.getConfirmPassword().equals(newUser.getPassword()))) {\n+            errors.rejectValue(\"confirmPassword\", \"confirmPassword.mismatch\");\n+            logger.info(\"Password mismatch\");\n+        }\n+\n+        if (errors.hasErrors()) {\n+            for (ObjectError error : errors.getAllErrors()) {\n+                logger.info(\"Validation error: \" + error.toString());\n+            }\n+        } else {\n+            logger.debug(\"Validation successful\");\n+        }\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-rave/raw/32eacb098e28e082502b66df2a8814a75e8a6c7f/rave-portal/src/main/java/org/apache/rave/portal/web/validator/NewAccountValidator.java",
                "sha": "859f81f96baed379554c3acc537ecc729c051a16",
                "status": "modified"
            },
            {
                "additions": 169,
                "blob_url": "https://github.com/apache/attic-rave/blob/32eacb098e28e082502b66df2a8814a75e8a6c7f/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "changes": 169,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java?ref=32eacb098e28e082502b66df2a8814a75e8a6c7f",
                "deletions": 0,
                "filename": "rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "patch": "@@ -0,0 +1,169 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.rave.portal.web.validator;\n+\n+import org.apache.rave.portal.model.NewUser;\n+import org.apache.rave.portal.model.User;\n+import org.apache.rave.portal.service.UserService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.validation.BindException;\n+import org.springframework.validation.Errors;\n+\n+import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNotNull;\n+import static junit.framework.Assert.assertTrue;\n+import static org.easymock.EasyMock.createMock;\n+import static org.easymock.EasyMock.expect;\n+import static org.easymock.EasyMock.replay;\n+\n+/**\n+ * Test class for {@link NewAccountValidator}\n+ */\n+public class NewAccountValidatorTest {\n+    private static final String VALID_NAME = \"valid.name\";\n+    private static final String VALID_PASSWORD = \"valid.password\";\n+    private static final String VALID_PAGELAYOUT = \"valid.pagelayout\";\n+    private static final String FIELD_USERNAME = \"username\";\n+    private static final String FIELD_PASSWORD = \"password\";\n+    private static final String FIELD_CONFIRM_PASSWORD = \"confirmPassword\";\n+    private static final String NEW_USER = \"newUser\";\n+\n+    private NewAccountValidator newAccountValidator;\n+    private UserService mockUserService;\n+\n+    @Test\n+    public void testSupports() throws Exception {\n+        assertTrue(newAccountValidator.supports(NewUser.class));\n+    }\n+\n+    @Test\n+    public void testValidate() throws Exception {\n+        NewUser newUser = new NewUser();\n+        newUser.setUsername(VALID_NAME);\n+        newUser.setPassword(VALID_PASSWORD);\n+        newUser.setConfirmPassword(VALID_PASSWORD);\n+        newUser.setPageLayout(VALID_PAGELAYOUT);\n+        Errors errors = new BindException(newUser, NEW_USER);\n+\n+        expect(mockUserService.getUserByUsername(\"valid.name\")).andReturn(null);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertFalse(\"No validation errors\", errors.hasErrors());\n+    }\n+\n+    @Test\n+    public void testValidationFailsOnEmptyNewUser() throws Exception {\n+        NewUser newUser = new NewUser();\n+        Errors errors = new BindException(newUser, NEW_USER);\n+        expect(mockUserService.getUserByUsername(\"\")).andReturn(null);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_USERNAME));\n+        assertNotNull(errors.getFieldError(FIELD_PASSWORD));\n+        assertNotNull(errors.getFieldError(FIELD_CONFIRM_PASSWORD));\n+\n+    }\n+\n+\n+    @Test\n+    public void testValidationFailsOnExistingUser() throws Exception {\n+        NewUser newUser = new NewUser();\n+        newUser.setUsername(\"ExistingUser\");\n+        newUser.setPassword(VALID_PASSWORD);\n+        newUser.setConfirmPassword(VALID_PASSWORD);\n+        newUser.setPageLayout(VALID_PAGELAYOUT);\n+        Errors errors = new BindException(newUser, NEW_USER);\n+\n+        User user = createMock(User.class);\n+        expect(mockUserService.getUserByUsername(\"ExistingUser\")).andReturn(user);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_USERNAME));\n+    }\n+\n+\n+    @Test\n+    public void testValidationFailsOnShortUserName() throws Exception {\n+        NewUser newUser = new NewUser();\n+        newUser.setUsername(\"A\");\n+        newUser.setPassword(VALID_PASSWORD);\n+        newUser.setConfirmPassword(VALID_PASSWORD);\n+        newUser.setPageLayout(VALID_PAGELAYOUT);\n+        Errors errors = new BindException(newUser, NEW_USER);\n+        expect(mockUserService.getUserByUsername(\"A\")).andReturn(null);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_USERNAME));\n+    }\n+\n+    @Test\n+    public void testValidationFailsOnShortPassword() throws Exception {\n+        NewUser newUser = new NewUser();\n+        newUser.setUsername(VALID_NAME);\n+        newUser.setPassword(\"123\");\n+        newUser.setConfirmPassword(\"123\");\n+        newUser.setPageLayout(VALID_PAGELAYOUT);\n+        Errors errors = new BindException(newUser, NEW_USER);\n+        expect(mockUserService.getUserByUsername(VALID_NAME)).andReturn(null);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_PASSWORD));\n+    }\n+\n+    @Test\n+    public void testValidationFailsOnNonMatchingPassword() throws Exception {\n+        NewUser newUser = new NewUser();\n+        newUser.setUsername(VALID_NAME);\n+        newUser.setPassword(VALID_PASSWORD);\n+        newUser.setConfirmPassword(\"doesnotmatch\");\n+        newUser.setPageLayout(VALID_PAGELAYOUT);\n+        Errors errors = new BindException(newUser, NEW_USER);\n+        expect(mockUserService.getUserByUsername(VALID_NAME)).andReturn(null);\n+        replay(mockUserService);\n+\n+        newAccountValidator.validate(newUser, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_CONFIRM_PASSWORD));\n+    }\n+\n+    @Before\n+    public void setup() {\n+        mockUserService = createMock(\"mockUserService\", UserService.class);\n+        newAccountValidator = new NewAccountValidator(mockUserService);\n+    }\n+\n+\n+}",
                "raw_url": "https://github.com/apache/attic-rave/raw/32eacb098e28e082502b66df2a8814a75e8a6c7f/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "sha": "de6ecce9dc23fb70114472dbbb39caf11f8e0b66",
                "status": "added"
            }
        ],
        "message": "RAVE-192 added junit tests for NewAccountValidator\nModified some checks to prevent NPE's\nsupports() method should return the type of Object that it validates\nvalidation errors should not be logged to error level (not application critical)\napplied code formatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/rave/trunk@1158226 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/95cc83e409f5667babda42d8cf454d33599cc812",
        "patched_files": [
            "NewAccountValidator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "NewAccountValidatorTest.java"
        ]
    },
    "attic-rave_3e8f4ee": {
        "bug_id": "attic-rave_3e8f4ee",
        "commit": "https://github.com/apache/attic-rave/commit/3e8f4ee5ed9b83f1195616260c30e00833c6f278",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/attic-rave/blob/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/jdbc/util/DataSourcePopulator.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/main/java/org/apache/rave/jdbc/util/DataSourcePopulator.java?ref=3e8f4ee5ed9b83f1195616260c30e00833c6f278",
                "deletions": 1,
                "filename": "rave-portal/src/main/java/org/apache/rave/jdbc/util/DataSourcePopulator.java",
                "patch": "@@ -1,10 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.apache.rave.jdbc.util;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.core.io.Resource;\n \n-import javax.annotation.PostConstruct;\n import javax.persistence.EntityManager;\n import javax.sql.DataSource;\n import java.io.IOException;",
                "raw_url": "https://github.com/apache/attic-rave/raw/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/jdbc/util/DataSourcePopulator.java",
                "sha": "0b9abd4e026768a3fced9bff6c3f82d96041814e",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/attic-rave/blob/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/jdbc/util/SqlFileParser.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/main/java/org/apache/rave/jdbc/util/SqlFileParser.java?ref=3e8f4ee5ed9b83f1195616260c30e00833c6f278",
                "deletions": 0,
                "filename": "rave-portal/src/main/java/org/apache/rave/jdbc/util/SqlFileParser.java",
                "patch": "@@ -1,3 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.apache.rave.jdbc.util;\n \n import org.springframework.core.io.Resource;",
                "raw_url": "https://github.com/apache/attic-rave/raw/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/jdbc/util/SqlFileParser.java",
                "sha": "fdcb0e6d06b7c1c6d3a66ac100e55b296a4218e7",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/attic-rave/blob/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/orm/jpa/PopulatedLocalContainerEntityManagerFactory.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/main/java/org/apache/rave/orm/jpa/PopulatedLocalContainerEntityManagerFactory.java?ref=3e8f4ee5ed9b83f1195616260c30e00833c6f278",
                "deletions": 6,
                "filename": "rave-portal/src/main/java/org/apache/rave/orm/jpa/PopulatedLocalContainerEntityManagerFactory.java",
                "patch": "@@ -1,3 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n package org.apache.rave.orm.jpa;\n \n import org.apache.rave.jdbc.util.DataSourcePopulator;\n@@ -6,10 +25,10 @@\n import javax.persistence.EntityManagerFactory;\n import javax.persistence.spi.PersistenceUnitInfo;\n \n+\n /**\n- * @author mfranklin\n- *         Date: 4/21/11\n- *         Time: 2:57 PM\n+ * Creates a LocalContainerEntityManagerFactoryBean that calls a DataSourcePopulator bean to insert data into the\n+ * datasource immediately after the factory is initialized\n  */\n public class PopulatedLocalContainerEntityManagerFactory extends LocalContainerEntityManagerFactoryBean{\n     private DataSourcePopulator populator;\n@@ -24,9 +43,11 @@ public void setPopulator(DataSourcePopulator populator) {\n \n     @Override\n     protected void postProcessEntityManagerFactory(EntityManagerFactory emf, PersistenceUnitInfo pui) {\n-        //Create an entity manager to force initialization of the context and then populate\n-        emf.createEntityManager().close();\n-        populator.initialize(this.getDataSource());\n+        if(populator != null) {\n+            //Create an entity manager to force initialization of the context and then populate\n+            emf.createEntityManager().close();\n+            populator.initialize(this.getDataSource());\n+        }\n         super.postProcessEntityManagerFactory(emf, pui);\n     }\n }",
                "raw_url": "https://github.com/apache/attic-rave/raw/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/main/java/org/apache/rave/orm/jpa/PopulatedLocalContainerEntityManagerFactory.java",
                "sha": "4a728865e0c3756d6e5ca961d0137ea13db863d5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/attic-rave/blob/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/test/java/org/apache/rave/portal/repository/JpaPageRepositoryTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/test/java/org/apache/rave/portal/repository/JpaPageRepositoryTest.java?ref=3e8f4ee5ed9b83f1195616260c30e00833c6f278",
                "deletions": 5,
                "filename": "rave-portal/src/test/java/org/apache/rave/portal/repository/JpaPageRepositoryTest.java",
                "patch": "@@ -30,11 +30,6 @@\n import java.util.List;\n import static org.junit.Assert.assertThat;\n \n-/**\n- * @author mfranklin\n- *         Date: 4/19/11\n- *         Time: 9:13 AM\n- */\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations={\"file:src/main/webapp/WEB-INF/dataContext.xml\", \"file:src/main/webapp/WEB-INF/applicationContext.xml\"})\n public class JpaPageRepositoryTest {",
                "raw_url": "https://github.com/apache/attic-rave/raw/3e8f4ee5ed9b83f1195616260c30e00833c6f278/rave-portal/src/test/java/org/apache/rave/portal/repository/JpaPageRepositoryTest.java",
                "sha": "b177b34a2c2c6a7c5fd53f7da41959835627c5f2",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/attic-rave/blob/b6a21ebc7381e603c73094f9c69b56eac2c44314/rave-portal/src/test/resources/test-data.sql",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/test/resources/test-data.sql?ref=b6a21ebc7381e603c73094f9c69b56eac2c44314",
                "deletions": 10,
                "filename": "rave-portal/src/test/resources/test-data.sql",
                "patch": "@@ -1,10 +0,0 @@\n-INSERT INTO page (id, name, owner_id, render_sequence, page_layout_id) values (set(@page_1_id, next value for page_id_seq), 'main', @user_id_1, 1, @two_col_id);\n-\n-INSERT INTO region(id, page_id) values (set(@page_1_region_1, next value for region_id_seq), @page_1_id);\n-INSERT INTO region(id, page_id) values (set(@page_1_region_2, next value for region_id_seq), @page_1_id);\n-\n-INSERT INTO region_widget(id, widget_id, region_id, render_position, collapsed) values (next value for region_widget_id_seq, @wikipedia_widget_id, @page_1_region_1, 1, 'N');\n-INSERT INTO region_widget(id, widget_id, region_id, render_position, collapsed) values (next value for region_widget_id_seq, @translate_widget_id, @page_1_region_1, 2, 'N');\n-\n-INSERT INTO region_widget(id, widget_id, region_id, render_position, collapsed) values (next value for region_widget_id_seq, @nyt_widget_id, @page_1_region_2, 1, 'N');\n-INSERT INTO region_widget(id, widget_id, region_id, render_position, collapsed) values (next value for region_widget_id_seq, @tabnews_widget_id, @page_1_region_2, 2, 'N');\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-rave/raw/b6a21ebc7381e603c73094f9c69b56eac2c44314/rave-portal/src/test/resources/test-data.sql",
                "sha": "22ba460b7ea7960b13c94e1ac9f3951181648dd6",
                "status": "removed"
            }
        ],
        "message": "Added missing license headers and fixed potential NPE in PopulatedLocalContainerEntityManagerFactory\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/rave/trunk@1095807 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/b6a21ebc7381e603c73094f9c69b56eac2c44314",
        "patched_files": [
            "JpaPageRepository.java",
            "SqlFileParser.java",
            "PopulatedLocalContainerEntityManagerFactory.java",
            "DataSourcePopulator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "DataSourcePopulatorTest.java",
            "JpaPageRepositoryTest.java",
            "test-data.java",
            "PopulatedLocalContainerEntityManagerFactoryTest.java"
        ]
    },
    "attic-rave_559bdaa": {
        "bug_id": "attic-rave_559bdaa",
        "commit": "https://github.com/apache/attic-rave/commit/559bdaaa85cf18e8b57d4a850a87bcfd88740f19",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/attic-rave/blob/559bdaaa85cf18e8b57d4a850a87bcfd88740f19/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/RavePermissionEvaluator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/RavePermissionEvaluator.java?ref=559bdaaa85cf18e8b57d4a850a87bcfd88740f19",
                "deletions": 1,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/RavePermissionEvaluator.java",
                "patch": "@@ -83,8 +83,11 @@ public int compare(ModelPermissionEvaluator o1, ModelPermissionEvaluator o2) {\n      */\r\n     @Override\r\n     public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permissionString) {\r\n+        if (targetDomainObject == null) {\r\n+            return false;\r\n+        }\r\n         // find the appropriate ModelPermissionEvaluator from the map based on\r\n-        // the targetDomainObject's class and invoke the hasPermission function\r\n+        // the targetDomainObject's class and invoke the hasPermission function        \r\n         return getEvaluator(targetDomainObject.getClass().getName()).hasPermission(authentication, targetDomainObject,\r\n                 getPermission(targetDomainObject, (String) permissionString));\r\n     }\r",
                "raw_url": "https://github.com/apache/attic-rave/raw/559bdaaa85cf18e8b57d4a850a87bcfd88740f19/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/RavePermissionEvaluator.java",
                "sha": "84aedda5ed393861bf432192cef2111a69e4c905",
                "status": "modified"
            },
            {
                "additions": 86,
                "blob_url": "https://github.com/apache/attic-rave/blob/559bdaaa85cf18e8b57d4a850a87bcfd88740f19/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/RavePermissionEvaluatorTest.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/RavePermissionEvaluatorTest.java?ref=559bdaaa85cf18e8b57d4a850a87bcfd88740f19",
                "deletions": 21,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/RavePermissionEvaluatorTest.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.rave.portal.security.impl;\n \n+import org.apache.rave.persistence.BasicEntity;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n@@ -37,70 +38,113 @@\n public class RavePermissionEvaluatorTest {\n     private RavePermissionEvaluator ravePermissionEvaluator;\n     private Authentication authentication;\n-    private FooModel fooModel;\n+    private BasicEntityModel basicEntityModel;\n+    private NonBasicEntityModel nonBasicEntityModel;\n     \n-    private String VALID_PERMISSION = \"read\";\n-    private Long VALID_FOO_ID = 4L;\n+    private String READ_PERMISSION = \"read\";\n+    private String CREATE_OR_UPDATE_PERMISSION = \"create_or_update\";\n+    private Long VALID_BASIC_ENTITY_MODEL_ID = 4L;\n     \n     \n     @Before\n     public void setUp() {\n         List<ModelPermissionEvaluator> modelPermissionEvaluatorList = new ArrayList<ModelPermissionEvaluator>();\n-        modelPermissionEvaluatorList.add(new FooModelPermissionEvaluator());                       \n+        modelPermissionEvaluatorList.add(new BasicEntityModelPermissionEvaluator());                       \n+        modelPermissionEvaluatorList.add(new NonBasicEntityModelPermissionEvaluator());                   \n         ravePermissionEvaluator = new RavePermissionEvaluator(modelPermissionEvaluatorList);\n         \n         authentication = createMock(Authentication.class);\n-        fooModel = new FooModel();\n+        basicEntityModel = new BasicEntityModel(VALID_BASIC_ENTITY_MODEL_ID);        \n+        nonBasicEntityModel = new NonBasicEntityModel();\n     }\n     \n     @Test\n     public void testLoadOrderOverride() {\n-        ModelPermissionEvaluator<FooModel> mockedOverriddenPermissionEvaluator = createMock(ModelPermissionEvaluator.class);                              \n-        expect(mockedOverriddenPermissionEvaluator.getType()).andReturn(FooModel.class);\n+        ModelPermissionEvaluator<BasicEntityModel> mockedOverriddenPermissionEvaluator = createMock(ModelPermissionEvaluator.class);                              \n+        expect(mockedOverriddenPermissionEvaluator.getType()).andReturn(BasicEntityModel.class);\n         expect(mockedOverriddenPermissionEvaluator.getLoadOrder()).andReturn(2);\n-        expect(mockedOverriddenPermissionEvaluator.hasPermission(authentication, fooModel, Permission.fromString(VALID_PERMISSION))).andReturn(true);        \n+        expect(mockedOverriddenPermissionEvaluator.hasPermission(authentication, basicEntityModel, Permission.fromString(READ_PERMISSION))).andReturn(true);        \n         replay(mockedOverriddenPermissionEvaluator);\n         \n          List<ModelPermissionEvaluator> modelPermissionEvaluatorList = new ArrayList<ModelPermissionEvaluator>();\n         // note we are adding the overide instance first to verify the Collections.sort works as expected\n         modelPermissionEvaluatorList.add(mockedOverriddenPermissionEvaluator);\n-        modelPermissionEvaluatorList.add(new FooModelPermissionEvaluator());                       \n+        modelPermissionEvaluatorList.add(new BasicEntityModelPermissionEvaluator());                       \n         ravePermissionEvaluator = new RavePermissionEvaluator(modelPermissionEvaluatorList);\n         \n-        assertThat(ravePermissionEvaluator.hasPermission(authentication, fooModel, VALID_PERMISSION), is(true));        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, basicEntityModel, READ_PERMISSION), is(true));        \n         verify(mockedOverriddenPermissionEvaluator);    \n     }\n     \n     @Test\n-    public void testHasPermission_3args() {        \n-        assertThat(ravePermissionEvaluator.hasPermission(authentication, fooModel, VALID_PERMISSION), is(true));        \n+    public void testHasPermission_3args_read() {        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, basicEntityModel, READ_PERMISSION), is(true));        \n+    }\n+    \n+    @Test\n+    public void testHasPermission_3args_createOrUpdate_nullEntityId() {        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, new BasicEntityModel(), CREATE_OR_UPDATE_PERMISSION), is(true));        \n+    }    \n+    \n+    @Test\n+    public void testHasPermission_3args_createOrUpdate_populatedEntityId() {        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, basicEntityModel, CREATE_OR_UPDATE_PERMISSION), is(true));        \n+    }     \n+    \n+    @Test(expected=IllegalArgumentException.class)\n+    public void testHasPermission_3args_createOrUpdate_nonBasicEntityModel() {        \n+        ravePermissionEvaluator.hasPermission(authentication, nonBasicEntityModel, CREATE_OR_UPDATE_PERMISSION);\n+    }     \n+    \n+    @Test\n+    public void testHasPermission_3args_nullModel() {        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, null, READ_PERMISSION), is(false));        \n     }\n     \n     @Test(expected=IllegalArgumentException.class)\n     public void testHasPermission_3args_invalidEvaluator() {        \n         List<String> list = new ArrayList<String>();\n-        assertThat(ravePermissionEvaluator.hasPermission(authentication, list, VALID_PERMISSION), is(true));        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, list, READ_PERMISSION), is(true));        \n     }    \n     \n     @Test\n     public void testHasPermission_4args() {    \n-        assertThat(ravePermissionEvaluator.hasPermission(authentication, VALID_FOO_ID, FooModel.class.getName(), VALID_PERMISSION), is(true));        \n+        assertThat(ravePermissionEvaluator.hasPermission(authentication, VALID_BASIC_ENTITY_MODEL_ID, BasicEntityModel.class.getName(), READ_PERMISSION), is(true));        \n     }\n+\n+    @Test(expected=IllegalArgumentException.class)\n+    public void testHasPermission_4args_createOrUpdatePermission() {    \n+        ravePermissionEvaluator.hasPermission(authentication, VALID_BASIC_ENTITY_MODEL_ID, BasicEntityModel.class.getName(), CREATE_OR_UPDATE_PERMISSION);\n+    }    \n     \n-    class FooModel {\n-        public FooModel() {\n-            \n+    class BasicEntityModel implements BasicEntity {\n+        private Long entityId;\n+        \n+        public BasicEntityModel() { }\n+        \n+        public BasicEntityModel(Long entityId) {\n+            this.entityId = entityId;\n+        }\n+\n+        @Override\n+        public Long getEntityId() {\n+            return entityId;\n+        }\n+\n+        @Override\n+        public void setEntityId(Long entityId) {\n+            this.entityId = entityId;\n         }\n     }\n     \n-    class FooModelPermissionEvaluator extends AbstractModelPermissionEvaluator<FooModel> {\n+    class BasicEntityModelPermissionEvaluator extends AbstractModelPermissionEvaluator<BasicEntityModel> {\n         @Override\n-        public Class<FooModel> getType() {\n-            return FooModel.class;\n+        public Class<BasicEntityModel> getType() {\n+            return BasicEntityModel.class;\n         }\n \n         @Override\n-        public boolean hasPermission(Authentication authentication, FooModel foo, Permission permission) {\n+        public boolean hasPermission(Authentication authentication, BasicEntityModel basicEntityModel, Permission permission) {\n             return true;\n         }\n         \n@@ -109,4 +153,25 @@ public boolean hasPermission(Authentication authentication, Serializable targetI\n             return true;\n         }\n     }       \n+    \n+    class NonBasicEntityModel {            \n+        public NonBasicEntityModel() { }                \n+    }\n+    \n+    class NonBasicEntityModelPermissionEvaluator extends AbstractModelPermissionEvaluator<NonBasicEntityModel> {\n+        @Override\n+        public Class<NonBasicEntityModel> getType() {\n+            return NonBasicEntityModel.class;\n+        }\n+\n+        @Override\n+        public boolean hasPermission(Authentication authentication, NonBasicEntityModel nonBasicEntityModel, Permission permission) {\n+            return true;\n+        }\n+        \n+        @Override\n+        public boolean hasPermission(Authentication authentication, Serializable targetId, String targetType, Permission permission) {\n+            return true;\n+        }\n+    }           \n }",
                "raw_url": "https://github.com/apache/attic-rave/raw/559bdaaa85cf18e8b57d4a850a87bcfd88740f19/rave-components/rave-core/src/test/java/org/apache/rave/portal/security/impl/RavePermissionEvaluatorTest.java",
                "sha": "74ae6b60f42829d04359f7a48eca6f9088434b1b",
                "status": "modified"
            }
        ],
        "message": "RAVE-331: error when trying to upload a duplicate gadget url to widget store\n\nRavePermissionEvalator#hasPermission has been modified to check for a null domain object to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/rave/trunk@1196777 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/48dc9356a8ca78e6c37adb2a6fa6a031c8598644",
        "patched_files": [
            "RavePermissionEvaluator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "RavePermissionEvaluatorTest.java"
        ]
    },
    "attic-rave_60c1ff6": {
        "bug_id": "attic-rave_60c1ff6",
        "commit": "https://github.com/apache/attic-rave/commit/60c1ff6b4daed06f10eb0f98712cf1155bec52e7",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/attic-rave/blob/60c1ff6b4daed06f10eb0f98712cf1155bec52e7/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverter.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverter.java?ref=60c1ff6b4daed06f10eb0f98712cf1155bec52e7",
                "deletions": 12,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverter.java",
                "patch": "@@ -1,17 +1,12 @@\n package org.apache.rave.portal.model.conversion;\n \n import org.apache.rave.model.ModelConverter;\n-import org.apache.rave.portal.model.JpaOrganization;\n import org.apache.rave.portal.model.JpaPersonProperty;\n-import org.apache.rave.portal.model.Organization;\n import org.apache.rave.portal.model.PersonProperty;\n import org.springframework.stereotype.Component;\n \n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n-import javax.persistence.TypedQuery;\n-\n-import static org.apache.rave.persistence.jpa.util.JpaUtil.getSingleResult;\n \n /**\n  * Converts an Address to a JpaAddress\n@@ -29,17 +24,19 @@\n \n     @Override\n     public JpaPersonProperty convert(PersonProperty source) {\n-        return source instanceof JpaPersonProperty ? (JpaPersonProperty)source : createEntity(source);\n+        return source instanceof JpaPersonProperty ? (JpaPersonProperty) source : createEntity(source);\n     }\n \n     private JpaPersonProperty createEntity(PersonProperty source) {\n-        JpaPersonProperty converted;\n-        converted = manager.find(JpaPersonProperty.class, source.getId());\n-\n-        if(converted == null) {\n-            converted = new JpaPersonProperty();\n+        JpaPersonProperty converted = null;\n+        if (source != null) {\n+            converted = manager.find(JpaPersonProperty.class, source.getId());\n+\n+            if (converted == null) {\n+                converted = new JpaPersonProperty();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/60c1ff6b4daed06f10eb0f98712cf1155bec52e7/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverter.java",
                "sha": "72844cb44791111165dc3714490848ca4e207b4a",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/attic-rave/blob/60c1ff6b4daed06f10eb0f98712cf1155bec52e7/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverterTest.java?ref=60c1ff6b4daed06f10eb0f98712cf1155bec52e7",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverterTest.java",
                "patch": "@@ -31,6 +31,13 @@ public void testNoConversion() {\n         assertThat(converter.convert(template), is(sameInstance(template)));\n     }\n \n+    @Test\n+    public void nullConversion() {\n+        PersonProperty template = null;\n+        assertThat(converter.convert(template), is(nullValue()));\n+    }\n+\n+\n     @Test\n     public void convertValid() {\n         PersonProperty template = new PersonPropertyImpl();",
                "raw_url": "https://github.com/apache/attic-rave/raw/60c1ff6b4daed06f10eb0f98712cf1155bec52e7/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaPersonPropertyConverterTest.java",
                "sha": "5b9070a91aac60a6b7984179249e3c8c7637a5a2",
                "status": "modified"
            }
        ],
        "message": "Fixed failing PersonProperty NPE conversion test (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346134 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/14462989cfd2cf4019fbc1269f3fecc259bf6b6c",
        "patched_files": [
            "JpaPersonPropertyConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaPersonPropertyConverterTest.java"
        ]
    },
    "attic-rave_874c295": {
        "bug_id": "attic-rave_874c295",
        "commit": "https://github.com/apache/attic-rave/commit/874c29569f4277988d64ecebec0c256022cbd6f9",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/attic-rave/blob/874c29569f4277988d64ecebec0c256022cbd6f9/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaCategoryConverter.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaCategoryConverter.java?ref=874c29569f4277988d64ecebec0c256022cbd6f9",
                "deletions": 5,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaCategoryConverter.java",
                "patch": "@@ -42,15 +42,18 @@\n \n     @Override\n     public JpaCategory convert(Category source) {\n-        return source instanceof JpaCategory ? (JpaCategory)source : createEntity(source);\n+        return source instanceof JpaCategory ? (JpaCategory) source : createEntity(source);\n     }\n \n     private JpaCategory createEntity(Category source) {\n-        JpaCategory converted = manager.find(JpaCategory.class, source.getId());\n-        if(converted == null) {\n-            converted = new JpaCategory();\n+        JpaCategory converted = null;\n+        if (source != null) {\n+            converted = manager.find(JpaCategory.class, source.getId());\n+            if (converted == null) {\n+                converted = new JpaCategory();\n+            }\n+            updateProperties(source, converted);\n         }\n-        updateProperties(source, converted);\n         return converted;\n     }\n ",
                "raw_url": "https://github.com/apache/attic-rave/raw/874c29569f4277988d64ecebec0c256022cbd6f9/rave-components/rave-core/src/main/java/org/apache/rave/portal/model/conversion/JpaCategoryConverter.java",
                "sha": "9280b939dbd230ecc6d6d36be9df5e7e6247bc2f",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/attic-rave/blob/874c29569f4277988d64ecebec0c256022cbd6f9/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaCategoryConverterTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaCategoryConverterTest.java?ref=874c29569f4277988d64ecebec0c256022cbd6f9",
                "deletions": 0,
                "filename": "rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaCategoryConverterTest.java",
                "patch": "@@ -45,6 +45,12 @@ public void noConversion() {\n         assertThat(categoryConverter.convert(category), is(sameInstance(category)));\r\n     }\r\n \r\n+    @Test\r\n+    public void nullConversion() {\r\n+        Category category = null;\r\n+        assertThat(categoryConverter.convert(category), is(nullValue()));\r\n+    }\r\n+\r\n     @Test\r\n     public void newCategory() {\r\n         Category category = new CategoryImpl();\r",
                "raw_url": "https://github.com/apache/attic-rave/raw/874c29569f4277988d64ecebec0c256022cbd6f9/rave-components/rave-core/src/test/java/org/apache/rave/portal/model/conversion/JpaCategoryConverterTest.java",
                "sha": "efb8cc57908f96926cc42b31de482aff90b18689",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in conversion (RAVE-625)\n\ngit-svn-id: https://svn.apache.org/repos/asf/rave/branches/model_interfaces@1346123 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/316c8d302a8122d7dc40c030f824ae1b7898dcc3",
        "patched_files": [
            "JpaCategoryConverter.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "JpaCategoryConverterTest.java"
        ]
    },
    "attic-rave_a79d859": {
        "bug_id": "attic-rave_a79d859",
        "commit": "https://github.com/apache/attic-rave/commit/a79d859bd559f956fa638d8045d9af85ed6285e3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/attic-rave/blob/a79d859bd559f956fa638d8045d9af85ed6285e3/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java?ref=a79d859bd559f956fa638d8045d9af85ed6285e3",
                "deletions": 2,
                "filename": "rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java",
                "patch": "@@ -224,7 +224,8 @@ private boolean isPageMember(Authentication authentication, Page page, List<Page\n         List<PageUser> members = trustedPage.getMembers();\n         if (members != null) {\n             for (PageUser pageUser : members){\n-                if (userRepository.get(pageUser.getUserId()).getUsername().equals(viewer)){\n+                User user = userRepository.get(pageUser.getUserId());\n+                if (user != null && user.getUsername().equals(viewer)){\n                     log.info(\"User \"+viewer+\" is a member of page \"+trustedPage.getId());\n                     if(checkEditorStatus){\n                         log.info(\"checking editor:\"+trustedPage.getId()+\"@\"+viewer+\"@\"+pageUser.isEditor());\n@@ -238,4 +239,4 @@ private boolean isPageMember(Authentication authentication, Page page, List<Page\n         return false;\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/attic-rave/raw/a79d859bd559f956fa638d8045d9af85ed6285e3/rave-components/rave-core/src/main/java/org/apache/rave/portal/security/impl/DefaultPagePermissionEvaluator.java",
                "sha": "81cf436bb9f001b8a0a403ed1931d13243cc644b",
                "status": "modified"
            }
        ],
        "message": "RAVE-1273 | Orphaned page members shouldn't cause an NPE",
        "parent": "https://github.com/apache/attic-rave/commit/126f1fe4154e06ad29024346114478363674e697",
        "patched_files": [
            "DefaultPagePermissionEvaluator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "DefaultPagePermissionEvaluatorTest.java"
        ]
    },
    "attic-rave_cc10b48": {
        "bug_id": "attic-rave_cc10b48",
        "commit": "https://github.com/apache/attic-rave/commit/cc10b48df557d14a302064ea778b905997c9f226",
        "file": [
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/attic-rave/blob/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/main/java/org/apache/rave/portal/web/validator/UserProfileValidator.java",
                "changes": 99,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/main/java/org/apache/rave/portal/web/validator/UserProfileValidator.java?ref=cc10b48df557d14a302064ea778b905997c9f226",
                "deletions": 53,
                "filename": "rave-portal/src/main/java/org/apache/rave/portal/web/validator/UserProfileValidator.java",
                "patch": "@@ -19,9 +19,7 @@\n //TODO is this the right package name convention?\n package org.apache.rave.portal.web.validator;\n \n-import java.util.ArrayList;\n-import java.util.List;\n-\n+import org.apache.commons.lang.StringUtils;\n import org.apache.rave.portal.model.User;\n import org.apache.rave.portal.service.UserService;\n import org.slf4j.Logger;\n@@ -33,56 +31,51 @@\n \n public class UserProfileValidator implements Validator {\n \n-\t protected final Logger logger=LoggerFactory.getLogger(getClass());\n-\t \n-\t private UserService userService;\n+    protected final Logger logger = LoggerFactory.getLogger(getClass());\n+\n+    private UserService userService;\n+\n+    @Autowired\n+    public UserProfileValidator(UserService userService) {\n+        this.userService = userService;\n+    }\n+\n+    public boolean supports(Class aClass) {\n+        return User.class.isAssignableFrom(aClass);\n+    }\n+\n+    public void validate(Object obj, Errors errors) {\n+        logger.debug(\"Validator called\");\n+        User user = (User) obj;\n+\n+        //check if the password is null or empty\n+        if (StringUtils.isBlank(user.getPassword())) {\n+            errors.rejectValue(\"password\", \"password.required\");\n+            logger.info(\"Password required\");\n+        }\n+        //check if the password length is less than 4\n+        else if (user.getPassword().length() < 4) {\n+            errors.rejectValue(\"password\", \"password.invalid.length\");\n+            logger.info(\"Password must be at least 4 characters long\");\n+        }\n+        //check if the confirm password is null or empty\n+        if (StringUtils.isBlank(user.getConfirmPassword())) {\n+            errors.rejectValue(\"confirmPassword\", \"confirmPassword.required\");\n+            logger.info(\"Confirm Password required\");\n+        }\n \n-\t @Autowired\n-\t public UserProfileValidator(UserService userService) {\n-\t\t this.userService = userService;\n-\t }\n-\t \n-\t public boolean supports(Class aClass){\n-\t\t  return UserProfileValidator.class.equals(aClass);\n-\t }\n-\t \n-\t public void validate(Object obj, Errors errors){\n-\t\t  logger.debug(\"Validator called\");\n-\t\t  User user = (User) obj;\n-\t\t  List<ObjectError> errorList = new ArrayList<ObjectError>();\n-\t\t  \n-\t\t  //check if the password is null\n-\t\t  if(user.getPassword() == \"\") {\n-\t\t\t  errors.rejectValue(\"password\", \"password.required\");\n-\t\t\t  logger.error(\"Password required\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the password length is less than 4\n-\t\t  else if(user.getPassword().length() < 4) {\n-\t\t\t  errors.rejectValue(\"password\", \"password.invalid.length\");\n-\t\t\t  logger.error(\"Password must be at least 4 characters long\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the confirm password is null\n-\t\t  if(user.getConfirmPassword() == \"\") {\n-\t\t\t  errors.rejectValue(\"confirmPassword\", \"confirmPassword.required\");\n-\t\t\t  logger.error(\"Confirm Password required\");\n-\t\t  }\n-\t\t  \n-\t\t  //check if the confirm password matches the previous entered password\n-\t\t  if(user.getConfirmPassword().length() != user.getPassword().length() || user.getConfirmPassword().compareTo(user.getPassword()) != 0) {\n-\t\t\t  errors.rejectValue(\"confirmPassword\", \"confirmPassword.mismatch\");\n-\t\t\t  logger.error(\"Password mismatch\");\n-\t\t  }\n+        //check if the confirm password matches the previous entered password\n+        if (user.getConfirmPassword() != null && !(user.getConfirmPassword().equals(user.getPassword()))) {\n+            errors.rejectValue(\"confirmPassword\", \"confirmPassword.mismatch\");\n+            logger.info(\"Password mismatch\");\n+        }\n \n-\t\t  if(errors.hasErrors()){\n-\t\t\t  errorList = errors.getAllErrors();\n-\t\t\t  for (ObjectError error : errorList) {\n-\t\t\t\t  logger.error(\"Validation error: \" + error.toString());\n-\t\t\t  }\n-\t\t  }\n-\t\t  else {\n-\t\t\t  logger.debug(\"Validation successful\");\n-\t\t  }\n-\t }\n+        if (errors.hasErrors()) {\n+            for (ObjectError error : errors.getAllErrors()) {\n+                logger.info(\"Validation error: {}\", error.toString());\n+            }\n+        } else {\n+            logger.debug(\"Validation successful\");\n+        }\n+    }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/attic-rave/raw/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/main/java/org/apache/rave/portal/web/validator/UserProfileValidator.java",
                "sha": "021a6247278e4d73332c700520b934047064b6bc",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/attic-rave/blob/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java?ref=cc10b48df557d14a302064ea778b905997c9f226",
                "deletions": 1,
                "filename": "rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "patch": "@@ -51,7 +51,8 @@\n \n     @Test\n     public void testSupports() throws Exception {\n-        assertTrue(newAccountValidator.supports(NewUser.class));\n+        assertTrue(\"Can validate org.apache.rave.portal.model.NewUser\",\n+                newAccountValidator.supports(NewUser.class));\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/attic-rave/raw/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/test/java/org/apache/rave/portal/web/validator/NewAccountValidatorTest.java",
                "sha": "d542cdfbd27ba0166af15e6ce0d70e256574341f",
                "status": "modified"
            },
            {
                "additions": 113,
                "blob_url": "https://github.com/apache/attic-rave/blob/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/test/java/org/apache/rave/portal/web/validator/UserProfileValidatorTest.java",
                "changes": 113,
                "contents_url": "https://api.github.com/repos/apache/attic-rave/contents/rave-portal/src/test/java/org/apache/rave/portal/web/validator/UserProfileValidatorTest.java?ref=cc10b48df557d14a302064ea778b905997c9f226",
                "deletions": 0,
                "filename": "rave-portal/src/test/java/org/apache/rave/portal/web/validator/UserProfileValidatorTest.java",
                "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.rave.portal.web.validator;\n+\n+import org.apache.rave.portal.model.User;\n+import org.apache.rave.portal.service.UserService;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.springframework.validation.BindException;\n+import org.springframework.validation.Errors;\n+\n+import static junit.framework.Assert.assertFalse;\n+import static junit.framework.Assert.assertNotNull;\n+import static junit.framework.Assert.assertTrue;\n+import static org.easymock.EasyMock.createMock;\n+\n+/**\n+ * Test class for {@link UserProfileValidator}\n+ */\n+public class UserProfileValidatorTest {\n+    private static final String VALID_NAME = \"valid.name\";\n+    private static final String VALID_PASSWORD = \"valid.password\";\n+    private static final String FIELD_PASSWORD = \"password\";\n+    private static final String FIELD_CONFIRM_PASSWORD = \"confirmPassword\";\n+    private static final String USER = \"user\";\n+\n+    private UserProfileValidator validator;\n+\n+    @Test\n+    public void testSupports() throws Exception {\n+        assertTrue(\"Can validate org.apache.rave.portal.model.User\", validator.supports(User.class));\n+    }\n+\n+    @Test\n+    public void testValidate() throws Exception {\n+        User user = new User();\n+        user.setUsername(VALID_NAME);\n+        user.setPassword(VALID_PASSWORD);\n+        user.setConfirmPassword(VALID_PASSWORD);\n+\n+        Errors errors = new BindException(user, USER);\n+        validator.validate(user, errors);\n+\n+        assertFalse(\"No errors\", errors.hasErrors());\n+    }\n+\n+    @Test\n+    public void testValidateFailsOnEmptyPassword() throws Exception {\n+        User user = new User();\n+        user.setUsername(VALID_NAME);\n+\n+        Errors errors = new BindException(user, USER);\n+        validator.validate(user, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_PASSWORD));\n+\n+    }\n+\n+    @Test\n+    public void testValidateFailsOnShortPassword() throws Exception {\n+        User user = new User();\n+        user.setUsername(VALID_NAME);\n+        user.setPassword(\"123\");\n+        user.setPassword(\"123\");\n+\n+        Errors errors = new BindException(user, USER);\n+        validator.validate(user, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_PASSWORD));\n+\n+    }\n+\n+    @Test\n+    public void testValidateFailsOnPasswordMismatch() throws Exception {\n+        User user = new User();\n+        user.setUsername(VALID_NAME);\n+        user.setPassword(VALID_PASSWORD);\n+        user.setConfirmPassword(\"DoesNotMatch\");\n+\n+        Errors errors = new BindException(user, USER);\n+        validator.validate(user, errors);\n+\n+        assertTrue(\"Validation errors\", errors.hasErrors());\n+        assertNotNull(errors.getFieldError(FIELD_CONFIRM_PASSWORD));\n+\n+    }\n+\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        UserService mockUserService = createMock(UserService.class);\n+        validator = new UserProfileValidator(mockUserService);\n+    }\n+}",
                "raw_url": "https://github.com/apache/attic-rave/raw/cc10b48df557d14a302064ea778b905997c9f226/rave-portal/src/test/java/org/apache/rave/portal/web/validator/UserProfileValidatorTest.java",
                "sha": "00968bcdce7e6c9f4113c3b415d9f7081b822ec3",
                "status": "added"
            }
        ],
        "message": "RAVE-192 added junit tests for UserProfileValidator\nModified some checks to prevent NPE's\nsupports() method should return the type of Object that it validates\nvalidation errors should not be logged to error level (not application critical)\napplied code formatting\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/rave/trunk@1158237 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/attic-rave/commit/32eacb098e28e082502b66df2a8814a75e8a6c7f",
        "patched_files": [
            "UserProfileValidator.java",
            "NewAccountValidator.java"
        ],
        "repo": "attic-rave",
        "unit_tests": [
            "NewAccountValidatorTest.java",
            "UserProfileValidatorTest.java"
        ]
    }
}