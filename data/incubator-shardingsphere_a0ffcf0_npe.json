[
    {
        "repo": "incubator-shardingsphere",
        "commit": "https://github.com/apache/incubator-shardingsphere/commit/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
        "bug_id": "incubator-shardingsphere_a0ffcf0",
        "message": "Fix NullPointerException bug (#3176)",
        "parent": "https://github.com/apache/incubator-shardingsphere/commit/97e932c14f5fe3252d2f715b18cb3b5622264ebf",
        "patched_files": [
            "EncryptRule.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 10,
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java?ref=a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
                "filename": "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "deletions": 2,
                "sha": "2da4a0d4dc645ccca23f19afdbdf44995c3d26b6",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java",
                "patch": "@@ -231,7 +231,11 @@ public boolean isCipherColumn(final String tableName, final String columnName) {\n             \n             @Override\n             public Object apply(final Object input) {\n-                return ((ShardingQueryAssistedEncryptor) shardingEncryptor.get()).queryAssistedEncrypt(input.toString());\n+                if (input == null) {\n+                    return null;\n+                } else {\n+                    return ((ShardingQueryAssistedEncryptor) shardingEncryptor.get()).queryAssistedEncrypt(input.toString());\n+                }\n             }\n         });\n     }\n@@ -251,7 +255,11 @@ public Object apply(final Object input) {\n             \n             @Override\n             public Object apply(final Object input) {\n-                return String.valueOf(shardingEncryptor.get().encrypt(input.toString()));\n+                if (input == null) {\n+                    return null;\n+                } else {\n+                    return String.valueOf(shardingEncryptor.get().encrypt(input.toString()));\n+                }\n             }\n         });\n     }",
                "changes": 12
            },
            {
                "status": "added",
                "additions": 72,
                "raw_url": "https://github.com/apache/incubator-shardingsphere/raw/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-shardingsphere/contents/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java?ref=a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751",
                "filename": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "deletions": 0,
                "sha": "d9a7977706cf2944c662459fc72f116c64acfa0c",
                "blob_url": "https://github.com/apache/incubator-shardingsphere/blob/a0ffcf02c29e5259f0bdbf5a6f8a5e089c48a751/sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.shardingsphere.core.rule;\n+\n+import org.apache.shardingsphere.api.config.encrypt.EncryptColumnRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptTableRuleConfiguration;\n+import org.apache.shardingsphere.api.config.encrypt.EncryptorRuleConfiguration;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Properties;\n+\n+import static org.junit.Assert.assertNull;\n+\n+/**\n+ * @author kezhenxu94\n+ */\n+public class EncryptRuleTest {\n+    private final String table = \"table\";\n+    private final String column = \"column\";\n+\n+    private EncryptRuleConfiguration encryptRuleConfig;\n+\n+    @Before\n+    public void before() {\n+        Properties props = new Properties();\n+\n+        EncryptorRuleConfiguration encryptorConfig = new EncryptorRuleConfiguration(\"assistedTest\", props);\n+        EncryptColumnRuleConfiguration columnConfig = new EncryptColumnRuleConfiguration(\"plain_pwd\", \"cipher_pwd\", \"\", \"aes\");\n+        EncryptTableRuleConfiguration tableConfig = new EncryptTableRuleConfiguration(Collections.singletonMap(column, columnConfig));\n+\n+        encryptRuleConfig = new EncryptRuleConfiguration();\n+        encryptRuleConfig.getEncryptors().put(\"aes\", encryptorConfig);\n+        encryptRuleConfig.getTables().put(table, tableConfig);\n+    }\n+\n+    @Test\n+    public void testGetEncryptAssistedQueryValues() {\n+        List<Object> encryptAssistedQueryValues = new EncryptRule(encryptRuleConfig).getEncryptAssistedQueryValues(table, column, Collections.singletonList(null));\n+\n+        for (final Object value : encryptAssistedQueryValues) {\n+            assertNull(value);\n+        }\n+    }\n+\n+    @Test\n+    public void testGetEncryptValues() {\n+        List<Object> encryptAssistedQueryValues = new EncryptRule(encryptRuleConfig).getEncryptValues(table, column, Collections.singletonList(null));\n+\n+        for (final Object value : encryptAssistedQueryValues) {\n+            assertNull(value);\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "changes": 72
            }
        ],
        "unit_tests": [
            "EncryptRuleTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "sharding-core/sharding-core-common/src/test/java/org/apache/shardingsphere/core/rule/EncryptRuleTest.java",
        "buggy_files": [
            "sharding-core/sharding-core-common/src/main/java/org/apache/shardingsphere/core/rule/EncryptRule.java"
        ],
        "fixed": true
    }
]