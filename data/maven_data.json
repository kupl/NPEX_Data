[
    {
        "repo": "maven",
        "message": "[MNG-6626] fix DefaultExceptionHandler NPE\n\nCloses #241",
        "commit": "https://github.com/apache/maven/commit/1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f",
        "parent": "https://github.com/apache/maven/commit/3ac9718f8267b2fb9636f1a58acc6bb53356c329",
        "bug_id": "maven_1",
        "file": [
            {
                "sha": "2193e61a35ed40c4fb0a79a7098832a586d4c39b",
                "filename": "maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "blob_url": "https://github.com/apache/maven/blob/1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "raw_url": "https://github.com/apache/maven/raw/1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java?ref=1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f",
                "patch": "@@ -209,10 +209,13 @@ else if ( exception instanceof PluginExecutionException )\n                 {\n                     Throwable cause2 = cause.getCause();\n \n-                    if ( cause2 instanceof NoClassDefFoundError\n-                        && cause2.getMessage().contains( \"org/sonatype/aether/\" ) )\n+                    if ( cause2 instanceof NoClassDefFoundError )\n                     {\n-                        reference = \"AetherClassNotFound\";\n+                        String message = cause2.getMessage();\n+                        if ( message != null && message.contains( \"org/sonatype/aether/\" ) )\n+                        {\n+                            reference = \"AetherClassNotFound\";\n+                        }\n                     }\n                 }\n ",
                "deletions": 3
            },
            {
                "sha": "9fe6d4f30fd380b3f43f5b176bde37151b90f0ab",
                "filename": "maven-core/src/test/java/org/apache/maven/exception/DefaultExceptionHandlerTest.java",
                "blob_url": "https://github.com/apache/maven/blob/1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f/maven-core/src/test/java/org/apache/maven/exception/DefaultExceptionHandlerTest.java",
                "raw_url": "https://github.com/apache/maven/raw/1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f/maven-core/src/test/java/org/apache/maven/exception/DefaultExceptionHandlerTest.java",
                "status": "modified",
                "changes": 53,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/exception/DefaultExceptionHandlerTest.java?ref=1a18eb6c9c7ac24adc9d57781e85fb3f60b6b65f",
                "patch": "@@ -22,15 +22,22 @@\n import java.io.IOException;\n import java.net.ConnectException;\n \n+import org.apache.maven.model.Plugin;\n+import org.apache.maven.plugin.MojoExecution;\n import org.apache.maven.plugin.MojoExecutionException;\n \n-import junit.framework.TestCase;\n+import org.apache.maven.plugin.PluginContainerException;\n+import org.apache.maven.plugin.PluginExecutionException;\n+import org.apache.maven.plugin.descriptor.MojoDescriptor;\n+import org.apache.maven.plugin.descriptor.PluginDescriptor;\n+import org.junit.Test;\n+\n+import static org.junit.Assert.assertEquals;\n \n /**\n  * @author <a href=\"mailto:baerrach@apache.org\">Barrie Treloar</a>\n  */\n public class DefaultExceptionHandlerTest\n-    extends TestCase\n {\n     /**\n      * Running Maven under JDK7 may cause connection issues because IPv6 is used by default.\n@@ -42,11 +49,11 @@\n      * http://cwiki.apache.org/confluence/display/MAVEN/ConnectException\n      * </p>\n      */\n+    @Test\n     public void testJdk7ipv6()\n     {\n         ConnectException connEx = new ConnectException( \"Connection refused: connect\" );\n-        IOException ioEx = new IOException( \"Unable to establish loopback connection\" );\n-        ioEx.initCause( connEx );\n+        IOException ioEx = new IOException( \"Unable to establish loopback connection\", connEx );\n         MojoExecutionException mojoEx =\n             new MojoExecutionException( \"Error executing Jetty: Unable to establish loopback connection\", ioEx );\n \n@@ -57,4 +64,42 @@ public void testJdk7ipv6()\n         assertEquals( expectedReference, exceptionSummary.getReference() );\n \n     }\n+\n+    @Test\n+    public void testHandleExceptionAetherClassNotFound()\n+    {\n+        Throwable cause2 = new NoClassDefFoundError( \"org/sonatype/aether/RepositorySystem\" );\n+        Plugin plugin = new Plugin();\n+        Exception cause = new PluginContainerException( plugin, null, null, cause2 );\n+        PluginDescriptor pluginDescriptor = new PluginDescriptor();\n+        MojoDescriptor mojoDescriptor = new MojoDescriptor();\n+        mojoDescriptor.setPluginDescriptor( pluginDescriptor );\n+        MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);\n+        Throwable exception = new PluginExecutionException( mojoExecution, null, cause );\n+\n+        DefaultExceptionHandler handler = new DefaultExceptionHandler();\n+        ExceptionSummary summary = handler.handleException( exception );\n+\n+        String expectedReference = \"http://cwiki.apache.org/confluence/display/MAVEN/AetherClassNotFound\";\n+        assertEquals( expectedReference, summary.getReference() );\n+    }\n+\n+    @Test\n+    public void testHandleExceptionNoClassDefFoundErrorNull()\n+    {\n+        Throwable cause2 = new NoClassDefFoundError();\n+        Plugin plugin = new Plugin();\n+        Exception cause = new PluginContainerException( plugin, null, null, cause2 );\n+        PluginDescriptor pluginDescriptor = new PluginDescriptor();\n+        MojoDescriptor mojoDescriptor = new MojoDescriptor();\n+        mojoDescriptor.setPluginDescriptor( pluginDescriptor );\n+        MojoExecution mojoExecution = new MojoExecution(mojoDescriptor);\n+        Throwable exception = new PluginExecutionException( mojoExecution, null, cause );\n+\n+        DefaultExceptionHandler handler = new DefaultExceptionHandler();\n+        ExceptionSummary summary = handler.handleException( exception );\n+\n+        String expectedReference = \"http://cwiki.apache.org/confluence/display/MAVEN/PluginContainerException\";\n+        assertEquals( expectedReference, summary.getReference() );\n+    }\n }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-6636] merge reports location tracking\n\n- avoids NPE during DefaultReportingConverter work\n- fixes missing location tracking when parent values injected into\n  existing child values",
        "commit": "https://github.com/apache/maven/commit/869b615189fd05eb1216a66178eb22b72ea0b4d3",
        "parent": "https://github.com/apache/maven/commit/1e03388d5bd3b84b1c637fbb06010a00834cfa4b",
        "bug_id": "maven_2",
        "file": [
            {
                "sha": "8b4e0cd7d2fb7633ab3eac69d93a79f0248fea45",
                "filename": "maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
                "blob_url": "https://github.com/apache/maven/blob/869b615189fd05eb1216a66178eb22b72ea0b4d3/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
                "raw_url": "https://github.com/apache/maven/raw/869b615189fd05eb1216a66178eb22b72ea0b4d3/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/java/org/apache/maven/model/merge/ModelMerger.java?ref=869b615189fd05eb1216a66178eb22b72ea0b4d3",
                "patch": "@@ -1475,6 +1475,24 @@ protected void mergeReportSet_Reports( ReportSet target, ReportSet source, boole\n             merged.addAll( tgt );\n             merged.addAll( src );\n             target.setReports( merged );\n+\n+            InputLocation sourceLocation = source.getLocation( \"reports\" );\n+            if ( sourceLocation != null )\n+            {\n+                InputLocation targetLocation = target.getLocation( \"reports\" );\n+                if ( targetLocation == null )\n+                {\n+                    target.setLocation( \"reports\", sourceLocation );\n+                }\n+                else\n+                {\n+                    for ( int i = 0; i < src.size(); i++ )\n+                    {\n+                        targetLocation.setLocation( Integer.valueOf( tgt.size() + i ),\n+                                                    sourceLocation.getLocation( Integer.valueOf( i ) ) );\n+                    }\n+                }\n+            }\n         }\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5721] Possible NullPointerException in org.apache.maven.repository.MetadataResolutionResult\n\nSigned-off-by: Michael Osipov <michaelo@apache.org>",
        "commit": "https://github.com/apache/maven/commit/d1dc63844f413ebce65162f1262c52d0bf15e06f",
        "parent": "https://github.com/apache/maven/commit/d556da84348b0d2de04839ad18ec75ba7231ea8c",
        "bug_id": "maven_3",
        "file": [
            {
                "sha": "cfdd7f96fc2d00137478c480af2c895ba6cd386e",
                "filename": "maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java",
                "blob_url": "https://github.com/apache/maven/blob/d1dc63844f413ebce65162f1262c52d0bf15e06f/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java",
                "raw_url": "https://github.com/apache/maven/raw/d1dc63844f413ebce65162f1262c52d0bf15e06f/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java",
                "status": "modified",
                "changes": 5,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/repository/MetadataResolutionResult.java?ref=d1dc63844f413ebce65162f1262c52d0bf15e06f",
                "patch": "@@ -232,10 +232,7 @@ public boolean hasErrorArtifactExceptions()\n \n     public MetadataResolutionResult addError( Exception e )\n     {\n-        if ( exceptions == null )\n-        {\n-            initList( exceptions );\n-        }\n+        exceptions = initList( exceptions );\n \n         exceptions.add( e );\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-6105] properties.internal.SystemProperties.addSystemProperties() is not really thread-safe\n\nRefactoring the current code setting system properties to synchronize correctly on the given ones: avoids ConcurrentModificationException and NullPointerException if the properties is modified by another thread.",
        "commit": "https://github.com/apache/maven/commit/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
        "parent": "https://github.com/apache/maven/commit/1e2a80eced0f01c182458a2c7e7919634fa632f6",
        "bug_id": "maven_4",
        "file": [
            {
                "sha": "1b11cb34aa55ee806ca556891d4390362433e5ca",
                "filename": "maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java",
                "status": "modified",
                "changes": 14,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/MavenRepositorySystemUtils.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -126,14 +126,18 @@ public static DefaultRepositorySystemSession newSession()\n \n         session.setArtifactDescriptorPolicy( new SimpleArtifactDescriptorPolicy( true, true ) );\n \n+        final Properties systemProperties = new Properties();\n+        \n         // MNG-5670 guard against ConcurrentModificationException\n-        Properties sysProps = new Properties();\n-        for ( String key : System.getProperties().stringPropertyNames() )\n+        // MNG-6053 guard against key without value\n+        Properties sysProp = System.getProperties();\n+        synchronized ( sysProp )\n         {\n-            sysProps.put( key, System.getProperty( key ) );\n+            systemProperties.putAll( sysProp );\n         }\n-        session.setSystemProperties( sysProps );\n-        session.setConfigProperties( sysProps );\n+\n+        session.setSystemProperties( systemProperties );\n+        session.setConfigProperties( systemProperties );\n \n         return session;\n     }",
                "deletions": 5
            },
            {
                "sha": "d67061f94848a79cfafe4769c337b7fa13ce32f0",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.maven.model.Profile;\n import org.apache.maven.project.DefaultProjectBuildingRequest;\n import org.apache.maven.project.ProjectBuildingRequest;\n+import org.apache.maven.properties.internal.SystemProperties;\n import org.apache.maven.settings.Mirror;\n import org.apache.maven.settings.Proxy;\n import org.apache.maven.settings.Server;\n@@ -535,8 +536,7 @@ public MavenExecutionRequest setSystemProperties( Properties properties )\n     {\n         if ( properties != null )\n         {\n-            this.systemProperties = new Properties();\n-            this.systemProperties.putAll( properties );\n+            this.systemProperties = SystemProperties.copyProperties( properties );\n         }\n         else\n         {",
                "deletions": 2
            },
            {
                "sha": "f1b271b5350ded123597096cea4b1873c1989672",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java",
                "status": "modified",
                "changes": 7,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingRequest.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.maven.artifact.repository.ArtifactRepository;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.ModelBuildingRequest;\n+import org.apache.maven.properties.internal.SystemProperties;\n import org.eclipse.aether.RepositorySystemSession;\n \n public class DefaultProjectBuildingRequest\n@@ -165,11 +166,7 @@ public ProjectBuildingRequest setSystemProperties( Properties systemProperties )\n     {\n         if ( systemProperties != null )\n         {\n-            this.systemProperties = new Properties();\n-            synchronized ( systemProperties )\n-            { // avoid concurrentmodification if someone else sets/removes an unrelated system property\n-                this.systemProperties.putAll( systemProperties );\n-            }\n+            this.systemProperties = SystemProperties.copyProperties( systemProperties );\n         }\n         else\n         {",
                "deletions": 5
            },
            {
                "sha": "3d6a969980d3c9cca56de838033e0cafe80b89ec",
                "filename": "maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java",
                "status": "modified",
                "changes": 30,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/properties/internal/SystemProperties.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -33,19 +33,33 @@\n      */\n     public static void addSystemProperties( Properties props )\n     {\n-        for ( String key : System.getProperties().stringPropertyNames() )\n-        {\n-            props.put( key, System.getProperty( key ) );\n-        }\n+        props.putAll( getSystemProperties() );\n     }\n \n     /**\n-     * Returns System.properties copy.\n+     * Returns a copy of {@link System#getProperties()} in a thread-safe manner.\n+     * \n+     * @return {@link System#getProperties()} obtained in a thread-safe manner. \n      */\n     public static Properties getSystemProperties()\n     {\n-        Properties systemProperties = new Properties();\n-        addSystemProperties( systemProperties );\n-        return systemProperties;\n+        return copyProperties( System.getProperties() );\n+    }\n+\n+    /**\n+     * Copies the given {@link Properties} object into a new {@link Properties} object, in a thread-safe manner.\n+     * @param properties Properties to copy.\n+     * @return Copy of the given properties.\n+     */\n+    public static Properties copyProperties( Properties properties )\n+    {\n+        final Properties copyProperties = new Properties();\n+        // guard against modification/removal of keys in the given properties (MNG-5670, MNG-6053, MNG-6105)\n+        synchronized ( properties )\n+        {\n+            copyProperties.putAll( properties );\n+        }\n+        return copyProperties;\n     }\n+\n }",
                "deletions": 8
            },
            {
                "sha": "84a68f74c8fb8bc0865398ac56e6aadcfaae56ac",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuildingRequest.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -286,7 +286,10 @@ public DefaultModelBuildingRequest setSystemProperties( Properties systemPropert\n         if ( systemProperties != null )\n         {\n             this.systemProperties = new Properties();\n-            this.systemProperties.putAll( systemProperties );\n+            synchronized ( systemProperties )\n+            { // avoid concurrentmodification if someone else sets/removes an unrelated system property\n+                this.systemProperties.putAll( systemProperties );\n+            }\n         }\n         else\n         {",
                "deletions": 1
            },
            {
                "sha": "4bb691b4bae254b427a6e1279661e06103d10172",
                "filename": "maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-settings-builder/src/main/java/org/apache/maven/settings/building/DefaultSettingsBuildingRequest.java?ref=5b4b8bd94c87afd2a1527d6a860e9673bdaf4a22",
                "patch": "@@ -116,10 +116,9 @@ public DefaultSettingsBuildingRequest setSystemProperties( Properties systemProp\n         if ( systemProperties != null )\n         {\n             this.systemProperties = new Properties();\n-            // MNG-5670 guard against ConcurrentModificationException\n-            for ( String key : System.getProperties().stringPropertyNames() )\n-            {\n-                this.systemProperties.put( key, System.getProperty( key ) );\n+            synchronized ( systemProperties )\n+            { // avoid concurrentmodification if someone else sets/removes an unrelated system property\n+                this.systemProperties.putAll( systemProperties );\n             }\n         }\n         else",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "potential NPE",
        "commit": "https://github.com/apache/maven/commit/445421051c5d364839d3bcdf2fa35e3ecd06e9bc",
        "parent": "https://github.com/apache/maven/commit/9bec8d7386156bd7b56b8261ecd51e903d55673e",
        "bug_id": "maven_5",
        "file": [
            {
                "sha": "e79b2385616d515b5b88b6f4b973075c7f82ec13",
                "filename": "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
                "blob_url": "https://github.com/apache/maven/blob/445421051c5d364839d3bcdf2fa35e3ecd06e9bc/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
                "raw_url": "https://github.com/apache/maven/raw/445421051c5d364839d3bcdf2fa35e3ecd06e9bc/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/ComparableVersion.java?ref=445421051c5d364839d3bcdf2fa35e3ecd06e9bc",
                "patch": "@@ -309,7 +309,7 @@ public int compareTo( Item item )\n                         Item r = right.hasNext() ? right.next() : null;\n \n                         // if this is shorter, then invert the compare and mul with -1\n-                        int result = l == null ? -1 * r.compareTo( l ) : l.compareTo( r );\n+                        int result = l == null ? ( r == null ? 0 : -1 * r.compareTo( l ) ) : l.compareTo( r );\n \n                         if ( result != 0 )\n                         {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "prevent possible NPE",
        "commit": "https://github.com/apache/maven/commit/6c3ec90f2c2abdb4caa45db3ab43f00c84e2e353",
        "parent": "https://github.com/apache/maven/commit/176a85f43c6a69b042024f2daebff25376930ce2",
        "bug_id": "maven_6",
        "file": [
            {
                "sha": "0b56970034755c3a7bcd0da3006f6e1e7cad3383",
                "filename": "maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
                "blob_url": "https://github.com/apache/maven/blob/6c3ec90f2c2abdb4caa45db3ab43f00c84e2e353/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
                "raw_url": "https://github.com/apache/maven/raw/6c3ec90f2c2abdb4caa45db3ab43f00c84e2e353/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultVersionResolver.java?ref=6c3ec90f2c2abdb4caa45db3ab43f00c84e2e353",
                "patch": "@@ -313,6 +313,12 @@ private Versioning readVersions( RepositorySystemSession session, RequestTrace t\n     {\n         Versioning versioning = null;\n \n+\n+        if (metadata == null)\n+        {\n+            return new Versioning();\n+        }\n+\n         SyncContext syncContext = syncContextFactory.newInstance( session, true );\n \n         try",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5113] NullPointerException on javadoc site generation\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1151420 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/f8ca95ef391982f91701a7c152cb2359424fdccb",
        "parent": "https://github.com/apache/maven/commit/84f7f7bbb1417256a528b5ab71e2f0b43f0c700a",
        "bug_id": "maven_7",
        "file": [
            {
                "sha": "a241c51207245d5c65b7d328c5a3176c41c84853",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "blob_url": "https://github.com/apache/maven/blob/f8ca95ef391982f91701a7c152cb2359424fdccb/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "raw_url": "https://github.com/apache/maven/raw/f8ca95ef391982f91701a7c152cb2359424fdccb/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java?ref=f8ca95ef391982f91701a7c152cb2359424fdccb",
                "patch": "@@ -116,8 +116,8 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr\n             reportPlugins.addChild( reportPlugin );\n \n             if ( !reporting.isExcludeDefaults() && !hasMavenProjectInfoReportsPlugin\n-                && \"org.apache.maven.plugins\".equals( reportPlugin.getChild( \"groupId\" ).getValue() )\n-                && \"maven-project-info-reports-plugin\".equals( reportPlugin.getChild( \"artifactId\" ).getValue() ) )\n+                && \"org.apache.maven.plugins\".equals( plugin.getGroupId() )\n+                && \"maven-project-info-reports-plugin\".equals( plugin.getArtifactId() ) )\n             {\n                 hasMavenProjectInfoReportsPlugin = true;\n             }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4858] correct NullPointerException if goal name is malformed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1005860 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1036f38593229d0c816b16225e5ffd4b6ef81939",
        "parent": "https://github.com/apache/maven/commit/5fee94bc6997b29d767a27d667ef9a9f19ff498d",
        "bug_id": "maven_8",
        "file": [
            {
                "sha": "98440038cf18521ddd73776efbdf1f2ba6398979",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "blob_url": "https://github.com/apache/maven/blob/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "raw_url": "https://github.com/apache/maven/raw/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "status": "modified",
                "changes": 20,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java?ref=1036f38593229d0c816b16225e5ffd4b6ef81939",
                "patch": "@@ -153,7 +153,7 @@ public MojoDescriptor getMojoDescriptor( String task, MavenSession session, Mave\n \n         int numTokens = tok.countTokens();\n \n-        if ( numTokens == 4 )\n+        if ( numTokens >= 4 )\n         {\n             // We have everything that we need\n             //\n@@ -170,6 +170,11 @@ public MojoDescriptor getMojoDescriptor( String task, MavenSession session, Mave\n             plugin.setVersion( tok.nextToken() );\n             goal = tok.nextToken();\n \n+            // This won't be valid, but it constructs something easy to read in the error message\n+            while ( tok.hasMoreTokens() )\n+            {\n+                goal += \":\" + tok.nextToken();\n+            }\n         }\n         else if ( numTokens == 3 )\n         {\n@@ -187,14 +192,23 @@ else if ( numTokens == 3 )\n             plugin.setArtifactId( tok.nextToken() );\n             goal = tok.nextToken();\n         }\n-        else if ( numTokens == 2 )\n+        else if ( numTokens <= 2 )\n         {\n             // We have a prefix and goal\n             //\n             // idea:idea\n             //\n             String prefix = tok.nextToken();\n-            goal = tok.nextToken();\n+\n+            if ( numTokens == 2 )\n+            {\n+                goal = tok.nextToken();\n+            }\n+            else\n+            {\n+                // goal was missing - pass through to MojoNotFoundException\n+                goal = \"\";\n+            }\n \n             // This is the case where someone has executed a single goal from the command line\n             // of the form:",
                "deletions": 3
            },
            {
                "sha": "22459bc2d403bfd2295d4723f8c73c248f3434bc",
                "filename": "maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/lifecycle/LifecycleExecutorTest.java?ref=1036f38593229d0c816b16225e5ffd4b6ef81939",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.maven.lifecycle.internal.TaskSegment;\n import org.apache.maven.model.Plugin;\n import org.apache.maven.plugin.MojoExecution;\n+import org.apache.maven.plugin.MojoNotFoundException;\n import org.apache.maven.plugin.descriptor.MojoDescriptor;\n import org.codehaus.plexus.component.annotations.Requirement;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n@@ -310,6 +311,32 @@ MavenExecutionPlan calculateExecutionPlan( MavenSession session, String... tasks\n                                                                         mergedSegment.getTasks() );\n     }\n \n+    public void testInvalidGoalName()\n+        throws Exception\n+    {\n+        File pom = getProject( \"project-basic\" );\n+        MavenSession session = createMavenSession( pom );\n+        try\n+        {\n+            getExecutions( calculateExecutionPlan( session, \"resources:\" ) );\n+            fail( \"expected a MojoNotFoundException\" );\n+        }\n+        catch ( MojoNotFoundException e )\n+        {\n+            assertEquals( \"\", e.getGoal() );\n+        }\n+\n+        try\n+        {\n+            getExecutions( calculateExecutionPlan( session, \"org.apache.maven.plugins:maven-resources-plugin:0.1:resources:toomany\" ) );\n+            fail( \"expected a MojoNotFoundException\" );\n+        }\n+        catch ( MojoNotFoundException e )\n+        {\n+            assertEquals( \"resources:toomany\", e.getGoal() );\n+        }\n+    }\n+\n \n     public void testPluginPrefixRetrieval()\n         throws Exception",
                "deletions": 0
            },
            {
                "sha": "ab4568c0811cc17c5be4e27f8fc3db62d6373f68",
                "filename": "maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java",
                "blob_url": "https://github.com/apache/maven/blob/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java",
                "raw_url": "https://github.com/apache/maven/raw/1036f38593229d0c816b16225e5ffd4b6ef81939/maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-api/src/main/java/org/apache/maven/plugin/MojoNotFoundException.java?ref=1036f38593229d0c816b16225e5ffd4b6ef81939",
                "patch": "@@ -54,7 +54,7 @@ private static String toMessage( String goal, PluginDescriptor pluginDescriptor\n     {\n         StringBuilder buffer = new StringBuilder( 256 );\n \n-        buffer.append( \"Could not find goal \" ).append( goal );\n+        buffer.append( \"Could not find goal '\" ).append( goal ).append( \"'\" );\n \n         if ( pluginDescriptor != null )\n         {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-541]. Fix NullPointerException when mojo doesn't have parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@202520 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/0713fa12ddd173d4029c3ebc4ce1b5f78095fa8b",
        "parent": "https://github.com/apache/maven/commit/1388e40fd30a325e1ff35a2a825ef7c66a42b02f",
        "bug_id": "maven_9",
        "file": [
            {
                "sha": "1172def18261f21f0b962f6d8fd1795afcbd803a",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/0713fa12ddd173d4029c3ebc4ce1b5f78095fa8b/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/0713fa12ddd173d4029c3ebc4ce1b5f78095fa8b/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=0713fa12ddd173d4029c3ebc4ce1b5f78095fa8b",
                "patch": "@@ -671,6 +671,11 @@ private void checkRequiredParameters( MojoDescriptor goal, PlexusConfiguration c\n \n         List parameters = goal.getParameters();\n \n+        if ( parameters == null )\n+        {\n+            return;\n+        }\n+\n         List invalidParameters = new ArrayList();\n \n         for ( int i = 0; i < parameters.size(); i++ )",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-541]. Fix NullPointerException when mojo doesn't have parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@202502 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/b44ec86d40f180a27ab65c251ee70728f2d3eafe",
        "parent": "https://github.com/apache/maven/commit/504e281d0ed2f163eb7a476b4701ea96f2095620",
        "bug_id": "maven_10",
        "file": [
            {
                "sha": "2a78b1f67052cc78c30a8d838cf672c2c4dfe560",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/b44ec86d40f180a27ab65c251ee70728f2d3eafe/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/b44ec86d40f180a27ab65c251ee70728f2d3eafe/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=b44ec86d40f180a27ab65c251ee70728f2d3eafe",
                "patch": "@@ -770,6 +770,11 @@ private void validatePomConfiguration( MojoDescriptor goal, PlexusConfiguration\n     {\n         List parameters = goal.getParameters();\n \n+        if ( parameters == null )\n+        {\n+            return;\n+        }\n+\n         for ( int i = 0; i < parameters.size(); i++ )\n         {\n             Parameter parameter = (Parameter) parameters.get( i );",
                "deletions": 0
            },
            {
                "sha": "0f0af899e01fe52f4ab22c1788c4a688fb1c4c0f",
                "filename": "maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "blob_url": "https://github.com/apache/maven/blob/b44ec86d40f180a27ab65c251ee70728f2d3eafe/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "raw_url": "https://github.com/apache/maven/raw/b44ec86d40f180a27ab65c251ee70728f2d3eafe/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-descriptor/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java?ref=b44ec86d40f180a27ab65c251ee70728f2d3eafe",
                "patch": "@@ -149,11 +149,14 @@ public Map getParameterMap()\n         {\n             parameterMap = new HashMap();\n \n-            for ( Iterator iterator = parameters.iterator(); iterator.hasNext(); )\n+            if ( parameters == null )\n             {\n-                Parameter pd = (Parameter) iterator.next();\n+                for ( Iterator iterator = parameters.iterator(); iterator.hasNext(); )\n+                {\n+                    Parameter pd = (Parameter) iterator.next();\n \n-                parameterMap.put( pd.getName(), pd );\n+                    parameterMap.put( pd.getName(), pd );\n+                }\n             }\n         }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "document why this is not a NPE",
        "commit": "https://github.com/apache/maven/commit/4ff2d7ef2a1842d4484e17836991cbc3b172a9d4",
        "parent": "https://github.com/apache/maven/commit/445421051c5d364839d3bcdf2fa35e3ecd06e9bc",
        "bug_id": "maven_11",
        "file": [
            {
                "sha": "0e98b0cb297a1a6d78f9f5b2e7ecc96ef68ec026",
                "filename": "maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumenter.java",
                "blob_url": "https://github.com/apache/maven/blob/4ff2d7ef2a1842d4484e17836991cbc3b172a9d4/maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumenter.java",
                "raw_url": "https://github.com/apache/maven/raw/4ff2d7ef2a1842d4484e17836991cbc3b172a9d4/maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumenter.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/usability/plugin/ExpressionDocumenter.java?ref=4ff2d7ef2a1842d4484e17836991cbc3b172a9d4",
                "patch": "@@ -147,6 +147,8 @@ private static ClassLoader initializeDocLoader()\n \n         URL myResource = ExpressionDocumenter.class.getClassLoader().getResource( myResourcePath );\n \n+        assert myResource != null : \"The resource is this class itself loaded by its own classloader and must exist\";\n+\n         String myClasspathEntry = myResource.getPath();\n \n         myClasspathEntry = myClasspathEntry.substring( 0, myClasspathEntry.length() - ( myResourcePath.length() + 2 ) );",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5613] fix NullPointerException when error occur during project dependency graph creation\nSubmitted by: Sebastian Le Merdy <sebastian.lemerdy@gmail.com>\nFrom: https://github.com/apache/maven/pull/13",
        "commit": "https://github.com/apache/maven/commit/bef7fac6e3495dae57a44e6a5902afd89c74b196",
        "parent": "https://github.com/apache/maven/commit/a90d71e024b7bc0f09e8c33908e3ce936e98df97",
        "bug_id": "maven_12",
        "file": [
            {
                "sha": "ab47efd00f801c9f5565c1ca97cf15943a1db137",
                "filename": "maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "blob_url": "https://github.com/apache/maven/blob/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "raw_url": "https://github.com/apache/maven/raw/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/DefaultMaven.java?ref=bef7fac6e3495dae57a44e6a5902afd89c74b196",
                "patch": "@@ -267,13 +267,13 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request )\n         //\n         ProjectDependencyGraph projectDependencyGraph = createProjectDependencyGraph( projects, request, result, true );\n \n-        session.setProjects( projectDependencyGraph.getSortedProjects() );\n-        \n         if ( result.hasExceptions() )\n         {\n             return result;\n         }\n \n+        session.setProjects( projectDependencyGraph.getSortedProjects() );\n+\n         try\n         {\n             session.setProjectMap( getProjectMap( session.getProjects() ) );",
                "deletions": 2
            },
            {
                "sha": "ab073a6324b6dcbb0324b91cf895801019f0e54c",
                "filename": "maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java",
                "blob_url": "https://github.com/apache/maven/blob/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java",
                "raw_url": "https://github.com/apache/maven/raw/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/DefaultMavenTest.java?ref=bef7fac6e3495dae57a44e6a5902afd89c74b196",
                "patch": "@@ -0,0 +1,45 @@\n+package org.apache.maven;\n+\n+import org.apache.maven.execution.MavenExecutionRequest;\n+import org.apache.maven.execution.MavenExecutionResult;\n+\n+import static java.util.Arrays.asList;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+public class DefaultMavenTest extends AbstractCoreMavenComponentTestCase{\n+\n+    public void testThatErrorDuringProjectDependencyGraphCreationAreStored()\n+            throws Exception\n+    {\n+        Maven maven = getContainer().lookup( Maven.class );\n+        MavenExecutionRequest request = createMavenExecutionRequest( getProject( \"cyclic-reference\" ) ).setGoals( asList(\"validate\") );\n+\n+        MavenExecutionResult result = maven.execute( request );\n+\n+        assertEquals( ProjectCycleException.class, result.getExceptions().get( 0 ).getClass() );\n+    }\n+\n+    @Override\n+    protected String getProjectsDirectory()\n+    {\n+        return \"src/test/projects/default-maven\";\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "56ec3412c712398a5baa67df3bc9239ecb1c7bb0",
                "filename": "maven-core/src/test/projects/default-maven/cyclic-reference/module-a/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/module-a/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/module-a/pom.xml",
                "status": "added",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/projects/default-maven/cyclic-reference/module-a/pom.xml?ref=bef7fac6e3495dae57a44e6a5902afd89c74b196",
                "patch": "@@ -0,0 +1,19 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>cyclic-reference</groupId>\n+    <artifactId>parent</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>module-a</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>cyclic-reference</groupId>\n+      <artifactId>module-b</artifactId>\n+      <version>1.0-SNAPSHOT</version>\n+    </dependency>\n+  </dependencies>\n+</project>",
                "deletions": 0
            },
            {
                "sha": "ffa4f347041718bef3009ad3047848a8c208bf98",
                "filename": "maven-core/src/test/projects/default-maven/cyclic-reference/module-b/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/module-b/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/module-b/pom.xml",
                "status": "added",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/projects/default-maven/cyclic-reference/module-b/pom.xml?ref=bef7fac6e3495dae57a44e6a5902afd89c74b196",
                "patch": "@@ -0,0 +1,19 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>cyclic-reference</groupId>\n+    <artifactId>parent</artifactId>\n+    <version>1.0-SNAPSHOT</version>\n+  </parent>\n+  <artifactId>module-b</artifactId>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>cyclic-reference</groupId>\n+      <artifactId>module-a</artifactId>\n+      <version>1.0-SNAPSHOT</version>\n+    </dependency>\n+  </dependencies>\n+</project>",
                "deletions": 0
            },
            {
                "sha": "e2666190530ceb80156d4dd59719549c9ec1269b",
                "filename": "maven-core/src/test/projects/default-maven/cyclic-reference/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/bef7fac6e3495dae57a44e6a5902afd89c74b196/maven-core/src/test/projects/default-maven/cyclic-reference/pom.xml",
                "status": "added",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/projects/default-maven/cyclic-reference/pom.xml?ref=bef7fac6e3495dae57a44e6a5902afd89c74b196",
                "patch": "@@ -0,0 +1,14 @@\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+  xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>cyclic-reference</groupId>\n+  <artifactId>parent</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+  <packaging>pom</packaging>\n+\n+  <modules>\n+    <module>module-a</module>\n+    <module>module-b</module>\n+  </modules>\n+</project>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-6170] NPE in cases using Multithreaded -T X versions:set\n-DnewVersion=1.0-SNAPSHOT\n o In some cases the code will return a null which should\n   not be scheduled.",
        "commit": "https://github.com/apache/maven/commit/7cdff43aba436408c79d2b4afc169b9c6909235a",
        "parent": "https://github.com/apache/maven/commit/587317b0095fc5d51041fed9e5b4786246a29a7b",
        "bug_id": "maven_13",
        "file": [
            {
                "sha": "1414a12708e0a94b2a63fecaac2f80b4f92152b3",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/7cdff43aba436408c79d2b4afc169b9c6909235a/maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/7cdff43aba436408c79d2b4afc169b9c6909235a/maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java",
                "status": "modified",
                "changes": 27,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/internal/builder/multithreaded/MultiThreadedBuilder.java?ref=7cdff43aba436408c79d2b4afc169b9c6909235a",
                "patch": "@@ -55,6 +55,7 @@\n  * @since 3.0\n  * @author Kristian Rosenvold\n  *         Builds one or more lifecycles for a full module\n+ *         NOTE: This class is not part of any public api and can be changed or deleted without prior notice.\n  */\n @Component( role = Builder.class, hint = \"multithreaded\" )\n public class MultiThreadedBuilder\n@@ -67,7 +68,6 @@\n     @Requirement\n     private LifecycleModuleBuilder lifecycleModuleBuilder;\n \n-\n     public MultiThreadedBuilder()\n     {\n     }\n@@ -142,15 +142,20 @@ private void multiThreadedProjectTaskSegmentBuild( ConcurrencyDependencyGraph an\n                 {\n                     break;\n                 }\n-                final List<MavenProject> newItemsThatCanBeBuilt =\n-                    analyzer.markAsFinished( projectBuild.getProject() );\n-                for ( MavenProject mavenProject : newItemsThatCanBeBuilt )\n+\n+                // MNG-6170: Only schedule other modules from reactor if we have more modules to build than one. \n+                if ( analyzer.getNumberOfBuilds() > 1 )\n                 {\n-                    ProjectSegment scheduledDependent = projectBuildList.get( mavenProject );\n-                    logger.debug( \"Scheduling: \" + scheduledDependent );\n-                    Callable<ProjectSegment> cb =\n-                        createBuildCallable( rootSession, scheduledDependent, reactorContext, taskSegment, muxer );\n-                    service.submit( cb );\n+                    final List<MavenProject> newItemsThatCanBeBuilt =\n+                        analyzer.markAsFinished( projectBuild.getProject() );\n+                    for ( MavenProject mavenProject : newItemsThatCanBeBuilt )\n+                    {\n+                        ProjectSegment scheduledDependent = projectBuildList.get( mavenProject );\n+                        logger.debug( \"Scheduling: \" + scheduledDependent );\n+                        Callable<ProjectSegment> cb =\n+                            createBuildCallable( rootSession, scheduledDependent, reactorContext, taskSegment, muxer );\n+                        service.submit( cb );\n+                    }\n                 }\n             }\n             catch ( InterruptedException e )\n@@ -160,13 +165,13 @@ private void multiThreadedProjectTaskSegmentBuild( ConcurrencyDependencyGraph an\n             }\n             catch ( ExecutionException e )\n             {\n-                // TODO MNG-5766 changes likely made this redundant \n+                // TODO MNG-5766 changes likely made this redundant\n                 rootSession.getResult().addException( e );\n                 break;\n             }\n         }\n \n-        // cancel outstanding builds (if any)  - this can happen if an exception is thrown in above block\n+        // cancel outstanding builds (if any) - this can happen if an exception is thrown in above block\n \n         Future<ProjectSegment> unprocessed;\n         while ( ( unprocessed = service.poll() ) != null )",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-5805: Fix NPE in LifecyclePhase#toString()\n\nSigned-off-by: Jason van Zyl <jason@tesla.io>\n\ncloses #62",
        "commit": "https://github.com/apache/maven/commit/9f7971dadbec8882b4c119345494b620d3a1f897",
        "parent": "https://github.com/apache/maven/commit/31e70dba9030925ce90727b9a7e0e83045c4aa0d",
        "bug_id": "maven_14",
        "file": [
            {
                "sha": "059f23468822422e8d856626633192138aa8e9a9",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java",
                "blob_url": "https://github.com/apache/maven/blob/9f7971dadbec8882b4c119345494b620d3a1f897/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java",
                "raw_url": "https://github.com/apache/maven/raw/9f7971dadbec8882b4c119345494b620d3a1f897/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java",
                "status": "modified",
                "changes": 35,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/mapping/LifecyclePhase.java?ref=9f7971dadbec8882b4c119345494b620d3a1f897",
                "patch": "@@ -55,13 +55,16 @@ public void set( String goals )\n     {\n         mojos = new ArrayList<>();\n         \n-        String[] mojoGoals = StringUtils.split( goals, \",\" );\n-        \n-        for ( String mojoGoal: mojoGoals )\n+        if ( StringUtils.isNotEmpty( goals ) )\n         {\n-            LifecycleMojo lifecycleMojo = new LifecycleMojo();\n-            lifecycleMojo.setGoal( mojoGoal.trim() );\n-            mojos.add( lifecycleMojo );\n+            String[] mojoGoals = StringUtils.split( goals, \",\" );\n+            \n+            for ( String mojoGoal: mojoGoals )\n+            {\n+                LifecycleMojo lifecycleMojo = new LifecycleMojo();\n+                lifecycleMojo.setGoal( mojoGoal.trim() );\n+                mojos.add( lifecycleMojo );\n+            }\n         }\n     }\n     \n@@ -70,17 +73,21 @@ public String toString()\n     {\n         StringBuilder sb = new StringBuilder();\n         boolean first = true;\n-        for ( LifecycleMojo mojo: getMojos() )\n+        List<LifecycleMojo> mojos = getMojos();\n+        if ( mojos != null )\n         {\n-            if ( first )\n-            {\n-                first = false;\n-            }\n-            else\n+            for ( LifecycleMojo mojo: mojos )\n             {\n-                sb.append( \",\" );\n+                if ( first )\n+                {\n+                    first = false;\n+                }\n+                else\n+                {\n+                    sb.append( \",\" );\n+                }\n+                sb.append( mojo.getGoal() );\n             }\n-            sb.append( mojo.getGoal() );\n         }\n         return sb.toString();\n     }",
                "deletions": 14
            },
            {
                "sha": "0d8cbdc68936114f9bfd2400979373a68d371a89",
                "filename": "maven-core/src/test/java/org/apache/maven/lifecycle/mapping/LifecyclePhaseTest.java",
                "blob_url": "https://github.com/apache/maven/blob/9f7971dadbec8882b4c119345494b620d3a1f897/maven-core/src/test/java/org/apache/maven/lifecycle/mapping/LifecyclePhaseTest.java",
                "raw_url": "https://github.com/apache/maven/raw/9f7971dadbec8882b4c119345494b620d3a1f897/maven-core/src/test/java/org/apache/maven/lifecycle/mapping/LifecyclePhaseTest.java",
                "status": "added",
                "changes": 73,
                "additions": 73,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/lifecycle/mapping/LifecyclePhaseTest.java?ref=9f7971dadbec8882b4c119345494b620d3a1f897",
                "patch": "@@ -0,0 +1,73 @@\n+package org.apache.maven.lifecycle.mapping;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more contributor license\n+ * agreements. See the NOTICE file distributed with this work for additional information regarding\n+ * copyright ownership. The ASF licenses this file to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance with the License. You may obtain a\n+ * copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software distributed under the License\n+ * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n+ * or implied. See the License for the specific language governing permissions and limitations under\n+ * the License.\n+ */\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.util.Arrays;\n+import java.util.List;\n+\n+import org.junit.Test;\n+\n+/**\n+ * @author atanasenko\n+ */\n+public class LifecyclePhaseTest\n+{\n+    @Test\n+    public void testToString()\n+    {\n+        LifecyclePhase phase = new LifecyclePhase();\n+        assertEquals( \"\", phase.toString() );\n+        \n+        LifecycleMojo mojo1 = new LifecycleMojo();\n+        mojo1.setGoal( \"jar:jar\" );\n+        phase.setMojos( Arrays.asList( mojo1 ) );\n+        assertEquals( \"jar:jar\", phase.toString()  );\n+        \n+        LifecycleMojo mojo2 = new LifecycleMojo();\n+        mojo2.setGoal( \"war:war\" );\n+        phase.setMojos( Arrays.asList( mojo1, mojo2 ) );\n+        assertEquals( \"jar:jar,war:war\", phase.toString() );\n+    }\n+    \n+    @Test\n+    public void testSet()\n+    {\n+        LifecyclePhase phase = new LifecyclePhase();\n+        assertNull( phase.getMojos() );\n+        \n+        phase.set( \"\" );\n+        assertNotNull( phase.getMojos() );\n+        assertEquals( 0, phase.getMojos().size() );\n+        \n+        phase.set( \"jar:jar, war:war\" );\n+        \n+        List<LifecycleMojo> mojos = phase.getMojos();\n+        assertNotNull( mojos );\n+        assertEquals( 2, mojos.size() );\n+        \n+        LifecycleMojo mojo1 = mojos.get(0);\n+        assertNotNull( mojo1 );\n+        assertEquals( \"jar:jar\", mojo1.getGoal() );\n+        \n+        LifecycleMojo mojo2 = mojos.get(1);\n+        assertNotNull( mojo2 );\n+        assertEquals( \"war:war\", mojo2.getGoal() );\n+    }\n+}\n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Prevent potential NPE and provide a faster path via identity check",
        "commit": "https://github.com/apache/maven/commit/d728b0218f5eb9516282284e4ad53d5ac82ca21a",
        "parent": "https://github.com/apache/maven/commit/7267996db8bcd00bb71432c6392bf071bba49246",
        "bug_id": "maven_15",
        "file": [
            {
                "sha": "7ebb04a2f7ecb79458b9a17531be57fd5d94fadd",
                "filename": "maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "blob_url": "https://github.com/apache/maven/blob/d728b0218f5eb9516282284e4ad53d5ac82ca21a/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "raw_url": "https://github.com/apache/maven/raw/d728b0218f5eb9516282284e4ad53d5ac82ca21a/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/MojoDescriptor.java?ref=d728b0218f5eb9516282284e4ad53d5ac82ca21a",
                "patch": "@@ -554,7 +554,12 @@ public boolean equals( Object object )\n \n     private boolean compareObjects( Object first, Object second )\n     {\n-        if ( ( first == null && second != null ) || ( first != null && second == null ) )\n+        if ( first == second )\n+        {\n+            return true;\n+        }\n+\n+        if ( first == null || second == null )\n         {\n             return false;\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4648] NullPointerException thrown from DefaultPluginRealmCache#pluginHashCode method if project-level plugin dependency misses version\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@938410 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/83389c3402084c405d18d51eaf2598cb45c0d49c",
        "parent": "https://github.com/apache/maven/commit/809969a06b9f11da4c52a325bad4a00036e3a139",
        "bug_id": "maven_16",
        "file": [
            {
                "sha": "bed7b471420eb003fa704826923baf257f626912",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 135,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -253,12 +253,7 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M\n                     validateBoolean( \"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(),\n                                      p.getKey() );\n \n-                    for ( Dependency d : p.getDependencies() )\n-                    {\n-                        validateEnum( \"build.plugins.plugin[\" + p.getKey() + \"].dependencies.dependency.scope\",\n-                                      problems, errOn30, d.getScope(), d.getManagementKey(),\n-                                      \"compile\", \"runtime\", \"system\" );\n-                    }\n+                    validateEffectivePluginDependencies( problems, p, request );\n                 }\n \n                 validateResources( problems, build.getResources(), \"build.resources.resource\", request );\n@@ -365,67 +360,21 @@ else if ( \"system\".equals( dependency.getScope() ) )\n     }\n \n     private void validateEffectiveDependencies( ModelProblemCollector problems, List<Dependency> dependencies,\n-                                                boolean managed, ModelBuildingRequest request )\n+                                                boolean management, ModelBuildingRequest request )\n     {\n         Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n-        String prefix = managed ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n+        String prefix = management ? \"dependencyManagement.dependencies.dependency.\" : \"dependencies.dependency.\";\n \n         for ( Dependency d : dependencies )\n         {\n-            validateId( prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n-\n-            validateId( prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey() );\n-\n-            if ( !managed )\n-            {\n-                validateStringNotEmpty( prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey() );\n-\n-                validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(),\n-                                        d.getManagementKey() );\n-            }\n-\n-            if ( \"system\".equals( d.getScope() ) )\n-            {\n-                String systemPath = d.getSystemPath();\n-\n-                if ( StringUtils.isEmpty( systemPath ) )\n-                {\n-                    addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\" );\n-                }\n-                else\n-                {\n-                    File sysFile = new File( systemPath );\n-                    if ( !sysFile.isAbsolute() )\n-                    {\n-                        addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(),\n-                                      \"must specify an absolute path but is \" + systemPath );\n-                    }\n-                    else if ( !sysFile.isFile() )\n-                    {\n-                        String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n-                        systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\\\', File.separatorChar );\n-                        String jdkHome =\n-                            request.getSystemProperties().getProperty( \"java.home\", \"\" ) + File.separator + \"..\";\n-                        if ( systemPath.startsWith( jdkHome ) )\n-                        {\n-                            msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n-                        }\n-                        addViolation( problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg );\n-                    }\n-                }\n-            }\n-            else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n-            {\n-                addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\"\n-                    + \" This field may only be specified for a dependency with system scope.\" );\n-            }\n+            validateEffectiveDependency( problems, d, management, prefix, request );\n \n             if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n             {\n                 validateBoolean( prefix + \"optional\", problems, errOn30, d.getOptional(), d.getManagementKey() );\n \n-                if ( !managed )\n+                if ( !management )\n                 {\n                     validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n \n@@ -440,6 +389,80 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n         }\n     }\n \n+    private void validateEffectivePluginDependencies( ModelProblemCollector problems, Plugin plugin,\n+                                                      ModelBuildingRequest request )\n+    {\n+        List<Dependency> dependencies = plugin.getDependencies();\n+\n+        if ( !dependencies.isEmpty() )\n+        {\n+            String prefix = \"build.plugins.plugin[\" + plugin.getKey() + \"].dependencies.dependency.\";\n+\n+            Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n+\n+            for ( Dependency d : dependencies )\n+            {\n+                validateEffectiveDependency( problems, d, false, prefix, request );\n+\n+                validateVersion( prefix + \"version\", problems, errOn30, d.getVersion(), d.getManagementKey() );\n+\n+                validateEnum( prefix + \"scope\", problems, errOn30, d.getScope(), d.getManagementKey(), \"compile\",\n+                              \"runtime\", \"system\" );\n+            }\n+        }\n+    }\n+\n+    private void validateEffectiveDependency( ModelProblemCollector problems, Dependency d, boolean management,\n+                                              String prefix, ModelBuildingRequest request )\n+    {\n+        validateId( prefix + \"artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n+\n+        validateId( prefix + \"groupId\", problems, d.getGroupId(), d.getManagementKey() );\n+\n+        if ( !management )\n+        {\n+            validateStringNotEmpty( prefix + \"type\", problems, Severity.ERROR, d.getType(), d.getManagementKey() );\n+\n+            validateStringNotEmpty( prefix + \"version\", problems, Severity.ERROR, d.getVersion(), d.getManagementKey() );\n+        }\n+\n+        if ( \"system\".equals( d.getScope() ) )\n+        {\n+            String systemPath = d.getSystemPath();\n+\n+            if ( StringUtils.isEmpty( systemPath ) )\n+            {\n+                addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"is missing.\" );\n+            }\n+            else\n+            {\n+                File sysFile = new File( systemPath );\n+                if ( !sysFile.isAbsolute() )\n+                {\n+                    addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(),\n+                                  \"must specify an absolute path but is \" + systemPath );\n+                }\n+                else if ( !sysFile.isFile() )\n+                {\n+                    String msg = \"refers to a non-existing file \" + sysFile.getAbsolutePath();\n+                    systemPath = systemPath.replace( '/', File.separatorChar ).replace( '\\\\', File.separatorChar );\n+                    String jdkHome =\n+                        request.getSystemProperties().getProperty( \"java.home\", \"\" ) + File.separator + \"..\";\n+                    if ( systemPath.startsWith( jdkHome ) )\n+                    {\n+                        msg += \". Please verify that you run Maven using a JDK and not just a JRE.\";\n+                    }\n+                    addViolation( problems, Severity.WARNING, prefix + \"systemPath\", d.getManagementKey(), msg );\n+                }\n+            }\n+        }\n+        else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n+        {\n+            addViolation( problems, Severity.ERROR, prefix + \"systemPath\", d.getManagementKey(), \"must be omitted.\"\n+                + \" This field may only be specified for a dependency with system scope.\" );\n+        }\n+    }\n+\n     private void validateRepositories( ModelProblemCollector problems, List<Repository> repositories, String prefix,\n                                        ModelBuildingRequest request )\n     {",
                "deletions": 56
            },
            {
                "sha": "7d51d7043a2863b3f74198d38406afb1b3668e76",
                "filename": "maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "status": "modified",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -449,4 +449,44 @@ public void testReservedRepositoryId()\n                                                           \"'distributionManagement.snapshotRepository.id' must not be 'local'\" ) );\n     }\n \n+    public void testMissingPluginDependencyGroupId()\n+        throws Exception\n+    {\n+        SimpleProblemCollector result = validate( \"missing-plugin-dependency-groupId.xml\" );\n+\n+        assertViolations( result, 0, 1, 0 );\n+\n+        assertTrue( result.getErrors().get( 0 ).contains( \":a:\" ) );\n+    }\n+\n+    public void testMissingPluginDependencyArtifactId()\n+        throws Exception\n+    {\n+        SimpleProblemCollector result = validate( \"missing-plugin-dependency-artifactId.xml\" );\n+\n+        assertViolations( result, 0, 1, 0 );\n+\n+        assertTrue( result.getErrors().get( 0 ).contains( \"test:\" ) );\n+    }\n+\n+    public void testMissingPluginDependencyVersion()\n+        throws Exception\n+    {\n+        SimpleProblemCollector result = validate( \"missing-plugin-dependency-version.xml\" );\n+\n+        assertViolations( result, 0, 1, 0 );\n+\n+        assertTrue( result.getErrors().get( 0 ).contains( \"test:a\" ) );\n+    }\n+\n+    public void testBadPluginDependencyVersion()\n+        throws Exception\n+    {\n+        SimpleProblemCollector result = validate( \"bad-plugin-dependency-version.xml\" );\n+\n+        assertViolations( result, 0, 1, 0 );\n+\n+        assertTrue( result.getErrors().get( 0 ).contains( \"test:b\" ) );\n+    }\n+\n }",
                "deletions": 0
            },
            {
                "sha": "6438252945e98278ced78e255c19ecc8051d3f0a",
                "filename": "maven-model-builder/src/test/resources/poms/validation/bad-plugin-dependency-version.xml",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/bad-plugin-dependency-version.xml",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/bad-plugin-dependency-version.xml",
                "status": "added",
                "changes": 46,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/resources/poms/validation/bad-plugin-dependency-version.xml?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -0,0 +1,46 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>aid</artifactId>\n+  <groupId>gid</groupId>\n+  <version>0.1</version>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-it-plugin</artifactId>\n+        <version>1.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>test</groupId>\n+            <artifactId>a</artifactId>\n+            <version>0.1</version>\n+          </dependency>\n+          <dependency>\n+            <groupId>test</groupId>\n+            <artifactId>b</artifactId>\n+            <version>${missing.property}</version>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>",
                "deletions": 0
            },
            {
                "sha": "5c21e363dee92b2aaba9fcbc390dd931bc3f4815",
                "filename": "maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-artifactId.xml",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-artifactId.xml",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-artifactId.xml",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-artifactId.xml?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -0,0 +1,41 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>aid</artifactId>\n+  <groupId>gid</groupId>\n+  <version>1.0</version>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-it-plugin</artifactId>\n+        <version>1.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>test</groupId>\n+            <!-- artifact id missing -->\n+            <version>2.0</version>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>",
                "deletions": 0
            },
            {
                "sha": "831c05f26e393c569b43672b45d1e7286026fafe",
                "filename": "maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-groupId.xml",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-groupId.xml",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-groupId.xml",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-groupId.xml?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -0,0 +1,41 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>aid</artifactId>\n+  <groupId>gid</groupId>\n+  <version>1.0</version>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-it-plugin</artifactId>\n+        <version>1.0</version>\n+        <dependencies>\n+          <dependency>\n+            <!-- groupd id missing -->\n+            <artifactId>a</artifactId>\n+            <version>2.0</version>\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>",
                "deletions": 0
            },
            {
                "sha": "29e0b7e78937f4f8ba1eea3764df2238f7174602",
                "filename": "maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-version.xml",
                "blob_url": "https://github.com/apache/maven/blob/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-version.xml",
                "raw_url": "https://github.com/apache/maven/raw/83389c3402084c405d18d51eaf2598cb45c0d49c/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-version.xml",
                "status": "added",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/resources/poms/validation/missing-plugin-dependency-version.xml?ref=83389c3402084c405d18d51eaf2598cb45c0d49c",
                "patch": "@@ -0,0 +1,41 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <artifactId>aid</artifactId>\n+  <groupId>gid</groupId>\n+  <version>1.0</version>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <artifactId>maven-it-plugin</artifactId>\n+        <version>1.0</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>test</groupId>\n+            <artifactId>a</artifactId>\n+            <!-- version missing -->\n+          </dependency>\n+        </dependencies>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o merged r609576 (MNG-2925: NullPointerException in PluginDescriptor.getMojo() if there's no mojo in pom.xml)\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@609577 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/4e41fbea475c8acd3e84601f9df948c9beafb5b4",
        "parent": "https://github.com/apache/maven/commit/ff53010e7e9de612b98285bb688676f3e18861ca",
        "bug_id": "maven_17",
        "file": [
            {
                "sha": "9dbaabcce9c503a7850c46580b36bd9cd2423a19",
                "filename": "maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java",
                "blob_url": "https://github.com/apache/maven/blob/4e41fbea475c8acd3e84601f9df948c9beafb5b4/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java",
                "raw_url": "https://github.com/apache/maven/raw/4e41fbea475c8acd3e84601f9df948c9beafb5b4/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-api/src/main/java/org/apache/maven/plugin/descriptor/PluginDescriptor.java?ref=4e41fbea475c8acd3e84601f9df948c9beafb5b4",
                "patch": "@@ -60,7 +60,7 @@\n     private boolean inheritedByDefault = true;\n \n     private List artifacts;\n-    \n+\n     private Map lifecycleMappings;\n \n     private ClassRealm classRealm;\n@@ -258,6 +258,11 @@ public int hashCode()\n \n     public MojoDescriptor getMojo( String goal )\n     {\n+        if ( getMojos() == null )\n+        {\n+            return null; // no mojo in this POM\n+        }\n+\n         // TODO: could we use a map? Maybe if the parent did that for components too, as this is too vulnerable to\n         // changes above not being propogated to the map\n \n@@ -329,22 +334,22 @@ public Set getIntroducedDependencyArtifacts()\n     {\n         return introducedDependencyArtifacts != null ? introducedDependencyArtifacts : Collections.EMPTY_SET;\n     }\n-    \n+\n     public void setName( String name )\n     {\n         this.name = name;\n     }\n-    \n+\n     public String getName()\n     {\n         return name;\n     }\n-    \n+\n     public void setDescription( String description )\n     {\n         this.description = description;\n     }\n-    \n+\n     public String getDescription()\n     {\n         return description;",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Check if plugin contains some mojo, and send an exception instead of NullPointerException if it isn't the case.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@179369 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/7bba85198e2140dd1287e27fdeed487a48d49d8d",
        "parent": "https://github.com/apache/maven/commit/4c582afdbff8a6a2be416a222cf8edfcc3c5a986",
        "bug_id": "maven_18",
        "file": [
            {
                "sha": "8395fb50763fc85af2ebc54928fd2ef49e631577",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/7bba85198e2140dd1287e27fdeed487a48d49d8d/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/7bba85198e2140dd1287e27fdeed487a48d49d8d/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 20,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=7bba85198e2140dd1287e27fdeed487a48d49d8d",
                "patch": "@@ -417,15 +417,25 @@ else if ( numTokens == 4 )\n \n         MojoDescriptor mojoDescriptor = null;\n \n-        // TODO: should be able to create a Map from this\n-        for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext() && mojoDescriptor == null; )\n+        if ( pluginDescriptor.getMojos() != null )\n         {\n-            MojoDescriptor desc = (MojoDescriptor) i.next();\n-            if ( desc.getGoal().equals( goal ) )\n+            // TODO: should be able to create a Map from this\n+            for ( Iterator i = pluginDescriptor.getMojos().iterator(); i.hasNext() && mojoDescriptor == null; )\n             {\n-                mojoDescriptor = desc;\n+                MojoDescriptor desc = (MojoDescriptor) i.next();\n+                if ( desc.getGoal().equals( goal ) )\n+                {\n+                    mojoDescriptor = desc;\n+                }\n             }\n         }\n+        else\n+        {\n+            throw new LifecycleExecutionException( \"The plugin \" + pluginDescriptor.getGroupId() + \":\" + \n+                                                   pluginDescriptor.getArtifactId() + \":\" +\n+                                                   pluginDescriptor.getVersion() +\n+                                                   \" doesn't contain any mojo. Check if it isn't corrupted.\" );\n+        }\n \n         if ( mojoDescriptor == null )\n         {",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fix NullPointerException if build.properties file doesn't exist in user.home\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@162536 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/15209dd9f135e0fb5bad50f0ac265c2d46191840",
        "parent": "https://github.com/apache/maven/commit/02e654b28f2a46e8fc0653105291e54e33fcddda",
        "bug_id": "maven_19",
        "file": [
            {
                "sha": "fa6db11bf452ecd3b16294f02b8e81622e306f00",
                "filename": "maven-mboot/src/main/Bootstrapper.java",
                "blob_url": "https://github.com/apache/maven/blob/15209dd9f135e0fb5bad50f0ac265c2d46191840/maven-mboot/src/main/Bootstrapper.java",
                "raw_url": "https://github.com/apache/maven/raw/15209dd9f135e0fb5bad50f0ac265c2d46191840/maven-mboot/src/main/Bootstrapper.java",
                "status": "modified",
                "changes": 12,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-mboot/src/main/Bootstrapper.java?ref=15209dd9f135e0fb5bad50f0ac265c2d46191840",
                "patch": "@@ -54,7 +54,7 @@ public void execute( String[] args )\n         String basedir = args[0];\n \n         Properties properties = loadProperties( new File( System.getProperty( \"user.home\" ), \"build.properties\" ) );\n-\n+        \n         baseUrl = properties.getProperty( \"maven.repo.remote\" );\n \n         if ( baseUrl == null )\n@@ -268,21 +268,19 @@ private Properties loadProperties( File file )\n             // ignore\n         }\n \n-        return null;\n+        return new Properties();\n     }\n \n     private static Properties loadProperties( InputStream is )\n     {\n+        Properties properties = new Properties();\n+        \n         try\n         {\n-            Properties properties = new Properties();\n-\n             if ( is != null )\n             {\n                 properties.load( is );\n             }\n-\n-            return properties;\n         }\n         catch ( IOException e )\n         {\n@@ -303,7 +301,7 @@ private static Properties loadProperties( InputStream is )\n             }\n         }\n \n-        return null;\n+        return properties;\n     }\n \n     static class BootstrapPomParser",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixed NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@768365 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/de96ac0502ed0ea6767a7ee045bab4ac98c876a7",
        "parent": "https://github.com/apache/maven/commit/ad1e062754d1418ea59bc032a1d303d9b669ebcd",
        "bug_id": "maven_20",
        "file": [
            {
                "sha": "5131cee5ece88d57590b7a00f38ac906a1ede087",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/processors/DistributionManagementProcessor.java",
                "blob_url": "https://github.com/apache/maven/blob/de96ac0502ed0ea6767a7ee045bab4ac98c876a7/maven-model-builder/src/main/java/org/apache/maven/model/processors/DistributionManagementProcessor.java",
                "raw_url": "https://github.com/apache/maven/raw/de96ac0502ed0ea6767a7ee045bab4ac98c876a7/maven-model-builder/src/main/java/org/apache/maven/model/processors/DistributionManagementProcessor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/processors/DistributionManagementProcessor.java?ref=de96ac0502ed0ea6767a7ee045bab4ac98c876a7",
                "patch": "@@ -50,7 +50,7 @@ public void process( Object parent, Object child, Object target, boolean isChild\n                 copy( p.getDistributionManagement(), t.getDistributionManagement(), false, c.getArtifactId(), p );\n             }        \t\n             copy( c.getDistributionManagement(), t.getDistributionManagement(), isChildMostSpecialized,\n-                  c.getArtifactId(), p );\n+                  c.getArtifactId(), c );\n         }\n         else if ( p != null && p.getDistributionManagement() != null )\n         {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixing NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@559215 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/8fab1c218ad120b8dd4877d6e0dd8f67c7e3e9c4",
        "parent": "https://github.com/apache/maven/commit/aaba2df26c519b1a8c72981e25e8c38e7abf54a2",
        "bug_id": "maven_21",
        "file": [
            {
                "sha": "740421a293cc054dd7ce9670590bf5a80de882a8",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "blob_url": "https://github.com/apache/maven/blob/8fab1c218ad120b8dd4877d6e0dd8f67c7e3e9c4/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "raw_url": "https://github.com/apache/maven/raw/8fab1c218ad120b8dd4877d6e0dd8f67c7e3e9c4/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java?ref=8fab1c218ad120b8dd4877d6e0dd8f67c7e3e9c4",
                "patch": "@@ -337,8 +337,8 @@ public LifecycleBindings getProjectCustomBindings( final MavenProject project )\n \n                                             message.append( \"\\n\\nNo lifecycle phase binding can be found for goal: \" + goal );\n                                             message.append( \",\\nspecified as a part of the execution: \" + execution.getId() );\n-                                            message.append( \"in plugin: \" );\n-                                            message.append( pluginDescriptor.getPluginLookupKey() );\n+                                            message.append( \" in plugin: \" );\n+                                            message.append( plugin.getKey() );\n                                             message.append( \"\\n\\nThis plugin could not be resolved, so use of the default lifecycle phase binding \" )\n                                                     .append( \"\\n(if there is one) is impossible.\" );\n                                             message.append( \"\\n\\nPlease ensure that the plugin: \" )",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixing NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@328898 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/51f23d93d9234ba0c5c5c95b0724494c006e6c09",
        "parent": "https://github.com/apache/maven/commit/58e96169a60ad7a720abf6efe8e522c98bf058d8",
        "bug_id": "maven_22",
        "file": [
            {
                "sha": "d01bb34be95a01330aba7bd4f5b5024f6a218d80",
                "filename": "maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java",
                "blob_url": "https://github.com/apache/maven/blob/51f23d93d9234ba0c5c5c95b0724494c006e6c09/maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java",
                "raw_url": "https://github.com/apache/maven/raw/51f23d93d9234ba0c5c5c95b0724494c006e6c09/maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/ProjectSorter.java?ref=51f23d93d9234ba0c5c5c95b0724494c006e6c09",
                "patch": "@@ -175,11 +175,14 @@ private void addEdgeWithParentCheck( Map projectMap, String extensionId, MavenPr\n         project.addProjectReference( extProject );\n \n         MavenProject extParent = extProject.getParent();\n-        String parentId = ArtifactUtils.versionlessKey( extParent.getGroupId(), extParent.getArtifactId() );\n-        // Don't add edge from parent to extension if a reverse edge already exists\n-        if ( !dag.hasEdge( extensionId, id ) || !parentId.equals( id ) )\n+        if ( extParent != null )\n         {\n-            dag.addEdge( id, extensionId );\n+            String parentId = ArtifactUtils.versionlessKey( extParent.getGroupId(), extParent.getArtifactId() );\n+            // Don't add edge from parent to extension if a reverse edge already exists\n+            if ( !dag.hasEdge( extensionId, id ) || !parentId.equals( id ) )\n+            {\n+                dag.addEdge( id, extensionId );\n+            }\n         }\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291582 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/883e9e53dba6930e79ab1157b561a4984205f0d4",
        "parent": "https://github.com/apache/maven/commit/e5070aa9b253be41fb9b4757d96b3431eeea58bf",
        "bug_id": "maven_23",
        "file": [
            {
                "sha": "bb9f4d8c9c99948ab540362a88e0af8b126d2a74",
                "filename": "maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
                "blob_url": "https://github.com/apache/maven/blob/883e9e53dba6930e79ab1157b561a4984205f0d4/maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
                "raw_url": "https://github.com/apache/maven/raw/883e9e53dba6930e79ab1157b561a4984205f0d4/maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/artifact/MavenMetadataSource.java?ref=883e9e53dba6930e79ab1157b561a4984205f0d4",
                "patch": "@@ -338,7 +338,7 @@ public List retrieveAvailableVersions( Artifact artifact, ArtifactRepository loc\n \n         List versions;\n         Metadata repoMetadata = metadata.getMetadata();\n-        if ( repoMetadata != null )\n+        if ( repoMetadata != null && repoMetadata.getVersioning() != null )\n         {\n             List metadataVersions = repoMetadata.getVersioning().getVersions();\n             versions = new ArrayList( metadataVersions.size() );",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191800 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/677a0dd7d5767193b378d2446eabeeb592e64c9e",
        "parent": "https://github.com/apache/maven/commit/c3d0ba0846953cc964faa8f0f32be4dd298dafe1",
        "bug_id": "maven_24",
        "file": [
            {
                "sha": "c5984dc7786c6b7aa0046314357632a3dc2f35d4",
                "filename": "maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/677a0dd7d5767193b378d2446eabeeb592e64c9e/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/677a0dd7d5767193b378d2446eabeeb592e64c9e/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "status": "modified",
                "changes": 20,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java?ref=677a0dd7d5767193b378d2446eabeeb592e64c9e",
                "patch": "@@ -159,15 +159,23 @@ public MavenProject buildWithDependencies( File projectDescriptor, ArtifactRepos\n \n     private Map createManagedVersionMap( DependencyManagement dependencyManagement )\n     {\n-        Map map = new HashMap();\n-        for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )\n+        Map map;\n+        if ( dependencyManagement != null && dependencyManagement.getDependencies() != null )\n         {\n-            Dependency d = (Dependency) i.next();\n+            map = new HashMap();\n+            for ( Iterator i = dependencyManagement.getDependencies().iterator(); i.hasNext(); )\n+            {\n+                Dependency d = (Dependency) i.next();\n \n-            Artifact artifact = artifactFactory.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(),\n-                                                                d.getScope(), d.getType(), null );\n+                Artifact artifact = artifactFactory.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(),\n+                                                                    d.getScope(), d.getType(), null );\n \n-            map.put( d.getManagementKey(), artifact );\n+                map.put( d.getManagementKey(), artifact );\n+            }\n+        }\n+        else\n+        {\n+            map = Collections.EMPTY_MAP;\n         }\n         return map;\n     }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169384 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/eda19653d84416ebddc5aa365fea60e7c60d007e",
        "parent": "https://github.com/apache/maven/commit/b15610d406f1dba7f6a63f5327f4a6a4e1591e74",
        "bug_id": "maven_25",
        "file": [
            {
                "sha": "e448d52c754e7c9cb52d88189dfd3143054af794",
                "filename": "sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "blob_url": "https://github.com/apache/maven/blob/eda19653d84416ebddc5aa365fea60e7c60d007e/sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "raw_url": "https://github.com/apache/maven/raw/eda19653d84416ebddc5aa365fea60e7c60d007e/sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/sandbox/maven-reports/maven-pmd-plugin/src/main/java/org/apache/maven/plugin/pmd/PmdReport.java?ref=eda19653d84416ebddc5aa365fea60e7c60d007e",
                "patch": "@@ -127,6 +127,7 @@ public void execute()\n                 // TODO: lazily call beginFile in case there are no rules\r\n \r\n                 reportSink.beginFile( file );\r\n+                ruleContext.setSourceCodeFilename( file.getAbsolutePath() );\r\n                 pmd.processFile( fileReader, ruleSet, ruleContext );\r\n                 reportSink.endFile( file );\r\n             }\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5157] NPE stemming from DefaultModelBuilder.containsCoordinates\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1158623 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/e49d091bc4ff310dafbf824e7f304abb4517ce64",
        "parent": "https://github.com/apache/maven/commit/decce3a1209efcaf6eebbd9b8680c4343e6ccaee",
        "bug_id": "maven_26",
        "file": [
            {
                "sha": "093305c8d3e580bfcd0f9d5020293887a5ca02be",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/e49d091bc4ff310dafbf824e7f304abb4517ce64/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/e49d091bc4ff310dafbf824e7f304abb4517ce64/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java?ref=e49d091bc4ff310dafbf824e7f304abb4517ce64",
                "patch": "@@ -909,6 +909,13 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque\n             String artifactId = dependency.getArtifactId();\n             String version = dependency.getVersion();\n \n+            if ( version == null || version.length() <= 0 )\n+            {\n+                problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.version' for \"\n+                    + dependency.getManagementKey() + \" is missing.\", dependency.getLocation( \"\" ), null );\n+                continue;\n+            }\n+\n             String imported = groupId + ':' + artifactId + ':' + version;\n \n             if ( importIds.contains( imported ) )\n@@ -1045,8 +1052,9 @@ private void fireEvent( Model model, ModelBuildingRequest request, ModelProblemC\n \n     private boolean containsCoordinates( String message, String groupId, String artifactId, String version )\n     {\n-        return message != null && message.contains( groupId ) && message.contains( artifactId )\n-            && message.contains( version );\n+        return message != null && ( groupId == null || message.contains( groupId ) )\n+            && ( artifactId == null || message.contains( artifactId ) )\n+            && ( version == null || message.contains( version ) );\n     }\n \n }",
                "deletions": 2
            },
            {
                "sha": "7e87df3072131713400c65d738727fefe186f028",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/e49d091bc4ff310dafbf824e7f304abb4517ce64/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/e49d091bc4ff310dafbf824e7f304abb4517ce64/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=e49d091bc4ff310dafbf824e7f304abb4517ce64",
                "patch": "@@ -356,6 +356,12 @@ private void validateRawDependencies( ModelProblemCollector problems, List<Depen\n         {\n             String key = dependency.getManagementKey();\n \n+            validateStringNotEmpty( prefix + \".groupId\", problems, Severity.ERROR, dependency.getGroupId(), key,\n+                                    dependency );\n+\n+            validateStringNotEmpty( prefix + \".artifactId\", problems, Severity.ERROR, dependency.getArtifactId(), key,\n+                                    dependency );\n+\n             if ( \"import\".equals( dependency.getScope() ) )\n             {\n                 if ( !\"pom\".equals( dependency.getType() ) )",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Reduced NPE risk\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1036531 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/ab0d04456686a700bd0720688c6003dc3eaf6493",
        "parent": "https://github.com/apache/maven/commit/3860e6e3ab97582b5c2e88ac64564cddf6d2b474",
        "bug_id": "maven_27",
        "file": [
            {
                "sha": "bdb4532a547cd3a906d823154f65f584c2b2cda3",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java",
                "blob_url": "https://github.com/apache/maven/blob/ab0d04456686a700bd0720688c6003dc3eaf6493/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java",
                "raw_url": "https://github.com/apache/maven/raw/ab0d04456686a700bd0720688c6003dc3eaf6493/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionResult.java?ref=ab0d04456686a700bd0720688c6003dc3eaf6493",
                "patch": "@@ -34,7 +34,7 @@\n {\n     private MavenProject project;\n \n-    private List<MavenProject> topologicallySortedProjects;\n+    private List<MavenProject> topologicallySortedProjects = Collections.emptyList();\n \n     private DependencyResolutionResult dependencyResolutionResult;\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4864] npe when transferring artifacts\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1023501 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/5ab998fa4e240118f4e7c7545b56b1de212785ee",
        "parent": "https://github.com/apache/maven/commit/267d5370310a03321a45f19a13bed7023dd716ef",
        "bug_id": "maven_28",
        "file": [
            {
                "sha": "6419e9e9914890e73ae245ec9da8076c6217d728",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/ConsoleMavenTransferListener.java",
                "blob_url": "https://github.com/apache/maven/blob/5ab998fa4e240118f4e7c7545b56b1de212785ee/maven-embedder/src/main/java/org/apache/maven/cli/ConsoleMavenTransferListener.java",
                "raw_url": "https://github.com/apache/maven/raw/5ab998fa4e240118f4e7c7545b56b1de212785ee/maven-embedder/src/main/java/org/apache/maven/cli/ConsoleMavenTransferListener.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/ConsoleMavenTransferListener.java?ref=5ab998fa4e240118f4e7c7545b56b1de212785ee",
                "patch": "@@ -57,9 +57,12 @@ public void transferProgressed( TransferEvent event )\n         for ( Map.Entry<TransferResource, Long> entry : downloads.entrySet() )\n         {\n             long total = entry.getKey().getContentLength();\n-            long complete = entry.getValue().longValue();\n-\n-            buffer.append( getStatus( complete, total ) ).append( \"  \" );\n+            Long complete = entry.getValue();\n+            // NOTE: This null check guards against http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6312056\n+            if ( complete != null )\n+            {\n+                buffer.append( getStatus( complete.longValue(), total ) ).append( \"  \" );\n+            }\n         }\n \n         int pad = lastLength - buffer.length();",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4818] NPE in legacy.DefaultWagonManager.getArtifact\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@998861 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/9e99fe5e65cdcb488d1a22eb5c20a165bb4bc5f2",
        "parent": "https://github.com/apache/maven/commit/1be90a985a25e206682a9220b78dfe1f66700ab5",
        "bug_id": "maven_29",
        "file": [
            {
                "sha": "29876e24807388c6de489a897f385b8bad418bb8",
                "filename": "maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "blob_url": "https://github.com/apache/maven/blob/9e99fe5e65cdcb488d1a22eb5c20a165bb4bc5f2/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "raw_url": "https://github.com/apache/maven/raw/9e99fe5e65cdcb488d1a22eb5c20a165bb4bc5f2/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java?ref=9e99fe5e65cdcb488d1a22eb5c20a165bb4bc5f2",
                "patch": "@@ -48,8 +48,9 @@\n     implements WagonManager\n {\n \n+    // NOTE: This must use a different field name than in the super class or IoC has no chance to inject the loggers\n     @Requirement\n-    private Logger logger;\n+    private Logger log;\n \n     @Requirement\n     private LegacySupport legacySupport;\n@@ -169,7 +170,7 @@ public ArtifactRepository getMirrorRepository( ArtifactRepository repository )\n                 id = repository.getId();\n             }\n \n-            logger.debug( \"Using mirror: \" + mirror.getUrl() + \" (id: \" + id + \")\" );\n+            log.debug( \"Using mirror: \" + mirror.getUrl() + \" (id: \" + id + \")\" );\n \n             repository = artifactRepositoryFactory.createArtifactRepository( id, mirror.getUrl(),\n                                                                      repository.getLayout(), repository.getSnapshots(),",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@929317 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1b157097df47256ce60973a5cbd14283dd805605",
        "parent": "https://github.com/apache/maven/commit/14094c260ba2658be5f70255b9785729ecb8fb69",
        "bug_id": "maven_30",
        "file": [
            {
                "sha": "5f0eb608da61388465d2d46b62f7f93f2738afa9",
                "filename": "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/1b157097df47256ce60973a5cbd14283dd805605/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/1b157097df47256ce60973a5cbd14283dd805605/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/MavenProject.java?ref=1b157097df47256ce60973a5cbd14283dd805605",
                "patch": "@@ -1062,7 +1062,7 @@ public void setArtifacts( Set<Artifact> artifacts )\n     {\n         if ( artifacts == null )\n         {\n-            if ( artifactFilter == null )\n+            if ( artifactFilter == null || resolvedArtifacts == null )\n             {\n                 artifacts = new LinkedHashSet<Artifact>();\n             }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@900540 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1d2fd838ceb841a245cd0728c860c4c04917515f",
        "parent": "https://github.com/apache/maven/commit/81f9a09a346c3c4382ae823c98c3e567a4af6e98",
        "bug_id": "maven_31",
        "file": [
            {
                "sha": "bd995701a8f94c17bd1d460ab4ae4a60aebfb967",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/1d2fd838ceb841a245cd0728c860c4c04917515f/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/1d2fd838ceb841a245cd0728c860c4c04917515f/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=1d2fd838ceb841a245cd0728c860c4c04917515f",
                "patch": "@@ -154,7 +154,7 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )\n         copy.setUserSettingsFile( original.getUserSettingsFile() );\n         copy.setGlobalSettingsFile( original.getGlobalSettingsFile() );\n         copy.setUserToolchainsFile( original.getUserToolchainsFile() );\n-        copy.setBaseDirectory( new File( original.getBaseDirectory() ) );\n+        copy.setBaseDirectory( ( original.getBaseDirectory() != null ) ? new File( original.getBaseDirectory() ) : null );\n         copy.setGoals( original.getGoals() );\n         copy.setRecursive( original.isRecursive() );\n         copy.setPom( original.getPom() );",
                "deletions": 1
            },
            {
                "sha": "320129cf465c4cf4e0ed19eb39fc0ca90e56de18",
                "filename": "maven-core/src/test/java/org/apache/maven/execution/DefaultMavenExecutionTestCase.java",
                "blob_url": "https://github.com/apache/maven/blob/1d2fd838ceb841a245cd0728c860c4c04917515f/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenExecutionTestCase.java",
                "raw_url": "https://github.com/apache/maven/raw/1d2fd838ceb841a245cd0728c860c4c04917515f/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenExecutionTestCase.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenExecutionTestCase.java?ref=1d2fd838ceb841a245cd0728c860c4c04917515f",
                "patch": "@@ -0,0 +1,36 @@\n+package org.apache.maven.execution;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * @author Benjamin Bentmann\n+ */\n+public class DefaultMavenExecutionTestCase\n+    extends TestCase\n+{\n+\n+    public void testCopyDefault()\n+    {\n+        assertNotNull( DefaultMavenExecutionRequest.copy( new DefaultMavenExecutionRequest() ) );\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4454] Incomplete <parent> element causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@881784 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1068ab557c476a291f3f16bc2b2523d5613c5e17",
        "parent": "https://github.com/apache/maven/commit/8b21cd1567f05835b777419b1f9bd93c9876d950",
        "bug_id": "maven_32",
        "file": [
            {
                "sha": "c6b03fed008f9942d8069a33a3c5b89a5becabf6",
                "filename": "maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java",
                "status": "modified",
                "changes": 23,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/profiles/DefaultProfileManager.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -21,7 +21,9 @@\n \n import org.apache.maven.model.Activation;\n import org.apache.maven.model.Profile;\n+import org.apache.maven.model.building.ModelProblem;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.profile.DefaultProfileActivationContext;\n import org.apache.maven.model.profile.ProfileActivationContext;\n import org.apache.maven.model.profile.ProfileSelector;\n@@ -192,25 +194,14 @@ public List getActiveProfiles()\n             profileSelector.getActiveProfiles( profilesById.values(), context, new ModelProblemCollector()\n             {\n \n-                public void addWarning( String message, Exception cause )\n+                public void add( Severity severity, String message, Exception cause )\n                 {\n-                    // ignored\n+                    if ( !ModelProblem.Severity.WARNING.equals( severity ) )\n+                    {\n+                        errors.add( new ProfileActivationException( message, cause ) );\n+                    }\n                 }\n \n-                public void addWarning( String message )\n-                {\n-                    // ignored\n-                }\n-\n-                public void addError( String message, Exception cause )\n-                {\n-                    errors.add( new ProfileActivationException( message, cause ) );\n-                }\n-\n-                public void addError( String message )\n-                {\n-                    errors.add( new ProfileActivationException( message ) );\n-                }\n             } );\n \n         if ( !errors.isEmpty() )",
                "deletions": 16
            },
            {
                "sha": "f31fea274edb24bbf9c4f8c3261c91bd0e203a5b",
                "filename": "maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 24,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/project/validation/DefaultModelValidator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -22,7 +22,9 @@\n import org.apache.maven.model.Model;\n import org.apache.maven.model.building.DefaultModelBuildingRequest;\n import org.apache.maven.model.building.ModelBuildingRequest;\n+import org.apache.maven.model.building.ModelProblem;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.component.annotations.Requirement;\n \n@@ -64,24 +66,12 @@ public SimpleModelProblemCollector( ModelValidationResult result )\n             this.result = result;\n         }\n \n-        public void addError( String message )\n+        public void add( Severity severity, String message, Exception cause )\n         {\n-            result.addMessage( message );\n-        }\n-\n-        public void addError( String message, Exception cause )\n-        {\n-            result.addMessage( message );\n-        }\n-\n-        public void addWarning( String message )\n-        {\n-            // not supported\n-        }\n-\n-        public void addWarning( String message, Exception cause )\n-        {\n-            // not supported\n+            if ( !ModelProblem.Severity.WARNING.equals( severity ) )\n+            {\n+                result.addMessage( message );\n+            }\n         }\n \n     }",
                "deletions": 17
            },
            {
                "sha": "ec4c4dc8584d4317a5f0986c055b61e2dfae0a96",
                "filename": "maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/model/plugin/DefaultLifecycleBindingsInjector.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.maven.model.PluginManagement;\n import org.apache.maven.model.building.ModelBuildingRequest;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.merge.MavenModelMerger;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.component.annotations.Requirement;\n@@ -63,7 +64,7 @@ public void injectLifecycleBindings( Model model, ModelBuildingRequest request,\n \n         if ( defaultPlugins == null )\n         {\n-            problems.addError( \"Unknown packaging: \" + packaging );\n+            problems.add( Severity.ERROR, \"Unknown packaging: \" + packaging, null );\n         }\n         else if ( !defaultPlugins.isEmpty() )\n         {",
                "deletions": 1
            },
            {
                "sha": "7070b009a6d58ad23e0db9fe4b8faf202de8ea49",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultModelBuildingListener.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.maven.model.Model;\n import org.apache.maven.model.building.AbstractModelBuildingListener;\n import org.apache.maven.model.building.ModelBuildingEvent;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.plugin.PluginResolutionException;\n import org.apache.maven.plugin.version.PluginVersionResolutionException;\n \n@@ -96,7 +97,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )\n         }\n         catch ( Exception e )\n         {\n-            event.getProblems().addError( \"Invalid plugin repository: \" + e.getMessage(), e );\n+            event.getProblems().add( Severity.ERROR, \"Invalid plugin repository: \" + e.getMessage(), e );\n         }\n         project.setPluginArtifactRepositories( pluginRepositories );\n \n@@ -118,11 +119,11 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )\n             }\n             catch ( PluginResolutionException e )\n             {\n-                event.getProblems().addError( \"Unresolveable build extension: \" + e.getMessage(), e );\n+                event.getProblems().add( Severity.ERROR, \"Unresolveable build extension: \" + e.getMessage(), e );\n             }\n             catch ( PluginVersionResolutionException e )\n             {\n-                event.getProblems().addError( \"Unresolveable build extension: \" + e.getMessage(), e );\n+                event.getProblems().add( Severity.ERROR, \"Unresolveable build extension: \" + e.getMessage(), e );\n             }\n \n             if ( project.getClassRealm() != null )\n@@ -152,7 +153,7 @@ public void buildExtensionsAssembled( ModelBuildingEvent event )\n         }\n         catch ( Exception e )\n         {\n-            event.getProblems().addError( \"Invalid artifact repository: \" + e.getMessage(), e );\n+            event.getProblems().add( Severity.ERROR, \"Invalid artifact repository: \" + e.getMessage(), e );\n         }\n         project.setRemoteArtifactRepositories( remoteRepositories );\n     }",
                "deletions": 4
            },
            {
                "sha": "a9a026ad327181c158aad93b686806adc83460c1",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "status": "modified",
                "changes": 43,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.maven.model.Parent;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.Repository;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.composition.DependencyManagementImporter;\n import org.apache.maven.model.inheritance.InheritanceAssembler;\n import org.apache.maven.model.interpolation.ModelInterpolator;\n@@ -267,7 +268,7 @@ private ModelBuildingResult build( ModelBuildingRequest request, ModelBuildingRe\n \n         modelValidator.validateEffectiveModel( resultModel, request, problems );\n \n-        if ( hasErrors( problems.getProblems() ) )\n+        if ( problems.hasErrors() )\n         {\n             throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n         }\n@@ -320,22 +321,24 @@ private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingReq\n \n                 if ( pomFile != null )\n                 {\n-                    problems.addError( \"Malformed POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n+                    problems.add( Severity.ERROR, \"Malformed POM \" + modelSource.getLocation() + \": \" + e.getMessage(),\n+                                  e );\n                 }\n                 else\n                 {\n-                    problems.addWarning( \"Malformed POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n+                    problems.add( Severity.WARNING, \"Malformed POM \" + modelSource.getLocation() + \": \"\n+                        + e.getMessage(), e );\n                 }\n             }\n         }\n         catch ( ModelParseException e )\n         {\n-            problems.addFatalError( \"Non-parseable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n+            problems.add( Severity.FATAL, \"Non-parseable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n             throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n         }\n         catch ( IOException e )\n         {\n-            problems.addFatalError( \"Non-readable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n+            problems.add( Severity.FATAL, \"Non-readable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n             throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n         }\n \n@@ -344,23 +347,12 @@ private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingReq\n         problems.setSource( model );\n         modelValidator.validateRawModel( model, request, problems );\n \n-        return model;\n-    }\n-\n-    private boolean hasErrors( List<ModelProblem> problems )\n-    {\n-        if ( problems != null )\n+        if ( problems.hasFatalErrors() )\n         {\n-            for ( ModelProblem problem : problems )\n-            {\n-                if ( ModelProblem.Severity.ERROR.compareTo( problem.getSeverity() ) >= 0 )\n-                {\n-                    return true;\n-                }\n-            }\n+            throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n         }\n \n-        return false;\n+        return model;\n     }\n \n     private ProfileActivationContext getProfileActivationContext( ModelBuildingRequest request )\n@@ -395,7 +387,7 @@ private void configureResolver( ModelResolver modelResolver, Model model, Defaul\n             }\n             catch ( InvalidRepositoryException e )\n             {\n-                problems.addError( \"Invalid repository \" + repository.getId() + \": \" + e.getMessage(), e );\n+                problems.add( Severity.ERROR, \"Invalid repository \" + repository.getId() + \": \" + e.getMessage(), e );\n             }\n         }\n     }\n@@ -469,8 +461,9 @@ private ModelData readParent( Model childModel, ModelBuildingRequest request, De\n \n             if ( !\"pom\".equals( parentModel.getPackaging() ) )\n             {\n-                problems.addError( \"Invalid packaging for parent POM \" + ModelProblemUtils.toSourceHint( parentModel )\n-                    + \", must be \\\"pom\\\" but is \\\"\" + parentModel.getPackaging() + \"\\\"\" );\n+                problems.add( Severity.ERROR, \"Invalid packaging for parent POM \"\n+                    + ModelProblemUtils.toSourceHint( parentModel ) + \", must be \\\"pom\\\" but is \\\"\"\n+                    + parentModel.getPackaging() + \"\\\"\", null );\n             }\n         }\n         else\n@@ -575,7 +568,7 @@ private ModelData readParentExternally( Model childModel, ModelBuildingRequest r\n         }\n         catch ( UnresolvableModelException e )\n         {\n-            problems.addFatalError( \"Non-resolvable parent POM \"\n+            problems.add( Severity.FATAL, \"Non-resolvable parent POM \"\n                 + ModelProblemUtils.toId( groupId, artifactId, version ) + \" for \"\n                 + ModelProblemUtils.toId( childModel ) + \": \" + e.getMessage(), e );\n             throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n@@ -639,7 +632,7 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque\n                     message += modelId + \" -> \";\n                 }\n                 message += imported;\n-                problems.addError( message );\n+                problems.add( Severity.ERROR, message, null );\n \n                 continue;\n             }\n@@ -663,7 +656,7 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque\n                 }\n                 catch ( UnresolvableModelException e )\n                 {\n-                    problems.addError( \"Non-resolvable import POM \"\n+                    problems.add( Severity.ERROR, \"Non-resolvable import POM \"\n                         + ModelProblemUtils.toId( groupId, artifactId, version ) + \": \" + e.getMessage(), e );\n                     continue;\n                 }",
                "deletions": 25
            },
            {
                "sha": "ac6ecad4c1394fe2899fe1df1e45e7d31f6e6768",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblemCollector.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblemCollector.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblemCollector.java",
                "status": "modified",
                "changes": 72,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelProblemCollector.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -20,9 +20,12 @@\n  */\n \n import java.util.ArrayList;\n+import java.util.EnumSet;\n import java.util.List;\n+import java.util.Set;\n \n import org.apache.maven.model.Model;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.io.ModelParseException;\n \n /**\n@@ -46,9 +49,26 @@\n \n     private Model rootModel;\n \n+    private Set<ModelProblem.Severity> severities = EnumSet.noneOf( ModelProblem.Severity.class );\n+\n     public DefaultModelProblemCollector( List<ModelProblem> problems )\n     {\n         this.problems = ( problems != null ) ? problems : new ArrayList<ModelProblem>();\n+\n+        for ( ModelProblem problem : this.problems )\n+        {\n+            severities.add( problem.getSeverity() );\n+        }\n+    }\n+\n+    public boolean hasFatalErrors()\n+    {\n+        return severities.contains( ModelProblem.Severity.FATAL );\n+    }\n+\n+    public boolean hasErrors()\n+    {\n+        return severities.contains( ModelProblem.Severity.ERROR ) || severities.contains( ModelProblem.Severity.FATAL );\n     }\n \n     public List<ModelProblem> getProblems()\n@@ -100,34 +120,21 @@ public String getRootModelId()\n     public void add( ModelProblem problem )\n     {\n         problems.add( problem );\n-    }\n \n-    public void addAll( List<ModelProblem> problems )\n-    {\n-        problems.addAll( problems );\n+        severities.add( problem.getSeverity() );\n     }\n \n-    public void addFatalError( String message, Exception cause )\n+    public void addAll( List<ModelProblem> problems )\n     {\n-        int line = -1;\n-        int column = -1;\n+        this.problems.addAll( problems );\n \n-        if ( cause instanceof ModelParseException )\n+        for ( ModelProblem problem : problems )\n         {\n-            ModelParseException e = (ModelParseException) cause;\n-            line = e.getLineNumber();\n-            column = e.getColumnNumber();\n+            severities.add( problem.getSeverity() );\n         }\n-\n-        add( message, ModelProblem.Severity.FATAL, line, column, cause );\n     }\n \n-    public void addError( String message )\n-    {\n-        addError( message, null );\n-    }\n-\n-    public void addError( String message, Exception cause )\n+    public void add( Severity severity, String message, Exception cause )\n     {\n         int line = -1;\n         int column = -1;\n@@ -139,32 +146,15 @@ public void addError( String message, Exception cause )\n             column = e.getColumnNumber();\n         }\n \n-        add( message, ModelProblem.Severity.ERROR, line, column, cause );\n-    }\n-\n-    public void addWarning( String message )\n-    {\n-        addWarning( message, null );\n+        add( severity, message, line, column, cause );\n     }\n \n-    public void addWarning( String message, Exception cause )\n+    private void add( ModelProblem.Severity severity, String message, int line, int column, Exception cause )\n     {\n-        int line = -1;\n-        int column = -1;\n+        ModelProblem problem =\n+            new DefaultModelProblem( message, severity, getSource(), line, column, getModelId(), cause );\n \n-        if ( cause instanceof ModelParseException )\n-        {\n-            ModelParseException e = (ModelParseException) cause;\n-            line = e.getLineNumber();\n-            column = e.getColumnNumber();\n-        }\n-\n-        add( message, ModelProblem.Severity.WARNING, line, column, cause );\n-    }\n-\n-    private void add( String message, ModelProblem.Severity severity, int line, int column, Exception cause )\n-    {\n-        problems.add( new DefaultModelProblem( message, severity, getSource(), line, column, getModelId(), cause ) );\n+        add( problem );\n     }\n \n }",
                "deletions": 41
            },
            {
                "sha": "33baca239f061a59fe7547cc7919d392546fb964",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java",
                "status": "modified",
                "changes": 31,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/ModelProblemCollector.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -32,33 +32,12 @@\n {\n \n     /**\n-     * Adds the specified error.\n+     * Adds the specified problem.\n      * \n-     * @param message The detail message of the error, may be {@code null}.\n+     * @param severity The severity of the problem, must not be {@code null}.\n+     * @param message The detail message of the problem, may be {@code null}.\n+     * @param cause The cause of the problem, may be {@code null}.\n      */\n-    void addError( String message );\n-\n-    /**\n-     * Adds the specified error.\n-     * \n-     * @param message The detail message of the error, may be {@code null}.\n-     * @param cause The cause of the error, may be {@code null}.\n-     */\n-    void addError( String message, Exception cause );\n-\n-    /**\n-     * Adds the specified warning.\n-     * \n-     * @param message The detail message of the warning, may be {@code null}.\n-     */\n-    void addWarning( String message );\n-\n-    /**\n-     * Adds the specified warning.\n-     * \n-     * @param message The detail message of the warning, may be {@code null}.\n-     * @param cause The cause of the warning, may be {@code null}.\n-     */\n-    void addWarning( String message, Exception cause );\n+    void add( ModelProblem.Severity severity, String message, Exception cause );\n \n }",
                "deletions": 26
            },
            {
                "sha": "83c69808c5332c09abf73f48e0a1f0d6a308dc0f",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/AbstractStringBasedModelInterpolator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.maven.model.Model;\n import org.apache.maven.model.building.ModelBuildingRequest;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.path.PathTranslator;\n import org.codehaus.plexus.component.annotations.Requirement;\n import org.codehaus.plexus.interpolation.AbstractValueSource;\n@@ -229,7 +230,7 @@ protected String interpolateInternal( String src, List<? extends ValueSource> va\n                 }\n                 catch ( InterpolationException e )\n                 {\n-                    problems.addError( e.getMessage(), e );\n+                    problems.add( Severity.ERROR, e.getMessage(), e );\n                 }\n \n                 interpolator.clearFeedback();",
                "deletions": 1
            },
            {
                "sha": "9e6e2eba3a25e54c7dd509a2ebe35f8bba0ae150",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/ProblemDetectingValueSource.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.List;\n \n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.codehaus.plexus.interpolation.ValueSource;\n \n /**\n@@ -61,7 +62,7 @@ public Object getValue( String expression )\n             {\n                 msg += \" Please use ${\" + newPrefix + expression.substring( bannedPrefix.length() ) + \"} instead.\";\n             }\n-            problems.addWarning( msg );\n+            problems.add( Severity.WARNING, msg, null );\n         }\n \n         return value;",
                "deletions": 1
            },
            {
                "sha": "9707c94e91e63b233a9bca80ba0219dee85a32d1",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/interpolation/StringSearchModelInterpolator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -22,6 +22,7 @@\n import org.apache.maven.model.Model;\n import org.apache.maven.model.building.ModelBuildingRequest;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.interpolation.InterpolationPostProcessor;\n import org.codehaus.plexus.interpolation.Interpolator;\n@@ -285,13 +286,13 @@ else if ( Map.class.isAssignableFrom( type ) )\n                             }\n                             catch ( IllegalArgumentException e )\n                             {\n-                                problems.addError( \"Failed to interpolate field: \" + fields[i] + \" on class: \"\n-                                    + cls.getName(), e );\n+                                problems.add( Severity.ERROR, \"Failed to interpolate field: \" + fields[i]\n+                                    + \" on class: \" + cls.getName(), e );\n                             }\n                             catch ( IllegalAccessException e )\n                             {\n-                                problems.addError( \"Failed to interpolate field: \" + fields[i] + \" on class: \"\n-                                    + cls.getName(), e );\n+                                problems.add( Severity.ERROR, \"Failed to interpolate field: \" + fields[i]\n+                                    + \" on class: \" + cls.getName(), e );\n                             }\n                         }\n                         finally",
                "deletions": 4
            },
            {
                "sha": "c407127694ffff4a2f14bed8fcdaa849de816e7c",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/plugin/DefaultReportingConverter.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -28,6 +28,7 @@\n import org.apache.maven.model.Reporting;\n import org.apache.maven.model.building.ModelBuildingRequest;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.util.StringUtils;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n@@ -98,8 +99,8 @@ public void convertReporting( Model model, ModelBuildingRequest request, ModelPr\n             && request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 )\n         {\n \n-            problems.addWarning( \"The <reporting> section is deprecated\"\n-                + \", please move the reports to the <configuration> section of the new Maven Site Plugin.\" );\n+            problems.add( Severity.WARNING, \"The <reporting> section is deprecated\"\n+                + \", please move the reports to the <configuration> section of the new Maven Site Plugin.\", null );\n         }\n \n         for ( ReportPlugin plugin : reporting.getPlugins() )",
                "deletions": 2
            },
            {
                "sha": "c81466043c853631bfc62834000cca9a89daf1be",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/profile/DefaultProfileSelector.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -27,6 +27,7 @@\n import org.apache.maven.model.Activation;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.profile.activation.ProfileActivator;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.component.annotations.Requirement;\n@@ -103,7 +104,7 @@ private boolean isActive( Profile profile, ProfileActivationContext context, Mod\n             }\n             catch ( RuntimeException e )\n             {\n-                problems.addError( \"Failed to determine activation for profile \" + profile.getId(), e );\n+                problems.add( Severity.ERROR, \"Failed to determine activation for profile \" + profile.getId(), e );\n                 return false;\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "c1e62cc2ac5066bfbbe53a5277fb54c5798fa3dc",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/FileProfileActivator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -25,6 +25,7 @@\n import org.apache.maven.model.ActivationFile;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.path.PathTranslator;\n import org.apache.maven.model.profile.ProfileActivationContext;\n import org.codehaus.plexus.component.annotations.Component;\n@@ -118,8 +119,8 @@ else if ( path.indexOf( \"${basedir}\" ) >= 0 )\n         }\n         catch ( Exception e )\n         {\n-            problems.addError( \"Failed to interpolate file location \" + path + \" for profile \" + profile.getId() + \": \"\n-                + e.getMessage(), e );\n+            problems.add( Severity.ERROR, \"Failed to interpolate file location \" + path + \" for profile \"\n+                + profile.getId() + \": \" + e.getMessage(), e );\n             return false;\n         }\n ",
                "deletions": 2
            },
            {
                "sha": "9cf3123cd5ca1bc9adb0d29ee29db7c81b95e6b1",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/JdkVersionProfileActivator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.maven.model.Activation;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.profile.ProfileActivationContext;\n import org.codehaus.plexus.component.annotations.Component;\n \n@@ -55,7 +56,8 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode\n \n                 if ( version.length() <= 0 )\n                 {\n-                    problems.addError( \"Failed to determine Java version for profile \" + profile.getId() );\n+                    problems.add( Severity.ERROR, \"Failed to determine Java version for profile \" + profile.getId(),\n+                                  null );\n                     return false;\n                 }\n ",
                "deletions": 1
            },
            {
                "sha": "53746b4e53f0bc5962cfe7eda934d1b38b60d949",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/profile/activation/PropertyProfileActivator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -23,6 +23,7 @@\n import org.apache.maven.model.ActivationProperty;\n import org.apache.maven.model.Profile;\n import org.apache.maven.model.building.ModelProblemCollector;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.profile.ProfileActivationContext;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.util.StringUtils;\n@@ -60,7 +61,8 @@ public boolean isActive( Profile profile, ProfileActivationContext context, Mode\n \n                 if ( name == null || name.length() <= 0 )\n                 {\n-                    problems.addError( \"The property name is required to activate the profile \" + profile.getId() );\n+                    problems.add( Severity.ERROR, \"The property name is required to activate the profile \"\n+                        + profile.getId(), null );\n                     return false;\n                 }\n ",
                "deletions": 1
            },
            {
                "sha": "bff18df4b4aea974470f158366f27780ef143d72",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 207,
                "additions": 107,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.maven.model.Repository;\n import org.apache.maven.model.Resource;\n import org.apache.maven.model.building.ModelBuildingRequest;\n+import org.apache.maven.model.building.ModelProblem.Severity;\n import org.apache.maven.model.building.ModelProblemCollector;\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.util.StringUtils;\n@@ -60,25 +61,25 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr\n         Parent parent = model.getParent();\n         if ( parent != null )\n         {\n-            validateStringNotEmpty( \"parent.groupId\", problems, false, parent.getGroupId() );\n+            validateStringNotEmpty( \"parent.groupId\", problems, Severity.FATAL, parent.getGroupId() );\n \n-            validateStringNotEmpty( \"parent.artifactId\", problems, false, parent.getArtifactId() );\n+            validateStringNotEmpty( \"parent.artifactId\", problems, Severity.FATAL, parent.getArtifactId() );\n \n-            validateStringNotEmpty( \"parent.version\", problems, false, parent.getVersion() );\n+            validateStringNotEmpty( \"parent.version\", problems, Severity.FATAL, parent.getVersion() );\n \n-            if ( parent.getGroupId().equals( model.getGroupId() )\n-                && parent.getArtifactId().equals( model.getArtifactId() ) )\n+            if ( equals( parent.getGroupId(), model.getGroupId() )\n+                && equals( parent.getArtifactId(), model.getArtifactId() ) )\n             {\n-                addViolation( problems, false, \"The parent element cannot have the same ID as the project.\" );\n+                addViolation( problems, Severity.ERROR, \"The parent element cannot have the same ID as the project.\" );\n             }\n         }\n \n         if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n         {\n-            validateEnum( \"modelVersion\", problems, false, model.getModelVersion(), null, \"4.0.0\" );\n-            validateStringNoExpression( \"groupId\", problems, true, model.getGroupId() );\n-            validateStringNoExpression( \"artifactId\", problems, true, model.getArtifactId() );\n-            validateStringNoExpression( \"version\", problems, true, model.getVersion() );\n+            validateEnum( \"modelVersion\", problems, Severity.ERROR, model.getModelVersion(), null, \"4.0.0\" );\n+            validateStringNoExpression( \"groupId\", problems, Severity.WARNING, model.getGroupId() );\n+            validateStringNoExpression( \"artifactId\", problems, Severity.WARNING, model.getArtifactId() );\n+            validateStringNoExpression( \"version\", problems, Severity.WARNING, model.getVersion() );\n \n             validateDependencies( problems, model.getDependencies(), \"dependencies.dependency\", request );\n \n@@ -98,7 +99,7 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr\n             {\n                 if ( !profileIds.add( profile.getId() ) )\n                 {\n-                    addViolation( problems, false, \"profiles.profile.id must be unique\"\n+                    addViolation( problems, Severity.ERROR, \"profiles.profile.id must be unique\"\n                         + \" but found duplicate profile with id \" + profile.getId() );\n                 }\n \n@@ -123,43 +124,34 @@ public void validateRawModel( Model model, ModelBuildingRequest request, ModelPr\n \n     public void validateEffectiveModel( Model model, ModelBuildingRequest request, ModelProblemCollector problems )\n     {\n-        validateStringNotEmpty( \"modelVersion\", problems, false, model.getModelVersion() );\n+        validateStringNotEmpty( \"modelVersion\", problems, Severity.ERROR, model.getModelVersion() );\n \n         validateId( \"groupId\", problems, model.getGroupId() );\n \n         validateId( \"artifactId\", problems, model.getArtifactId() );\n \n-        validateStringNotEmpty( \"packaging\", problems, false, model.getPackaging() );\n+        validateStringNotEmpty( \"packaging\", problems, Severity.ERROR, model.getPackaging() );\n \n         if ( !model.getModules().isEmpty() && !\"pom\".equals( model.getPackaging() ) )\n         {\n-            addViolation( problems, false, \"Packaging '\" + model.getPackaging() + \"' is invalid. Aggregator projects \"\n-                + \"require 'pom' as packaging.\" );\n+            addViolation( problems, Severity.ERROR, \"Packaging '\" + model.getPackaging()\n+                + \"' is invalid. Aggregator projects \" + \"require 'pom' as packaging.\" );\n         }\n \n-        Parent parent = model.getParent();\n-        if ( parent != null )\n-        {\n-            if ( parent.getGroupId().equals( model.getGroupId() )\n-                && parent.getArtifactId().equals( model.getArtifactId() ) )\n-            {\n-                addViolation( problems, false, \"The parent element cannot have the same ID as the project.\" );\n-            }\n-        }\n-\n-        validateStringNotEmpty( \"version\", problems, false, model.getVersion() );\n+        validateStringNotEmpty( \"version\", problems, Severity.ERROR, model.getVersion() );\n \n-        boolean warnOnly = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n+        Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n         for ( Dependency d : model.getDependencies() )\n         {\n             validateId( \"dependencies.dependency.artifactId\", problems, d.getArtifactId(), d.getManagementKey() );\n \n             validateId( \"dependencies.dependency.groupId\", problems, d.getGroupId(), d.getManagementKey() );\n \n-            validateStringNotEmpty( \"dependencies.dependency.type\", problems, false, d.getType(), d.getManagementKey() );\n+            validateStringNotEmpty( \"dependencies.dependency.type\", problems, Severity.ERROR, d.getType(),\n+                                    d.getManagementKey() );\n \n-            validateStringNotEmpty( \"dependencies.dependency.version\", problems, false, d.getVersion(),\n+            validateStringNotEmpty( \"dependencies.dependency.version\", problems, Severity.ERROR, d.getVersion(),\n                                     d.getManagementKey() );\n \n             if ( \"system\".equals( d.getScope() ) )\n@@ -168,37 +160,37 @@ public void validateEffectiveModel( Model model, ModelBuildingRequest request, M\n \n                 if ( StringUtils.isEmpty( systemPath ) )\n                 {\n-                    addViolation( problems, false, \"For dependency \" + d.getManagementKey()\n+                    addViolation( problems, Severity.ERROR, \"For dependency \" + d.getManagementKey()\n                         + \": system-scoped dependency must specify systemPath.\" );\n                 }\n                 else\n                 {\n                     if ( !new File( systemPath ).isAbsolute() )\n                     {\n-                        addViolation( problems, false, \"For dependency \" + d.getManagementKey()\n+                        addViolation( problems, Severity.ERROR, \"For dependency \" + d.getManagementKey()\n                             + \": system-scoped dependency must specify an absolute systemPath but is \" + systemPath );\n                     }\n                 }\n             }\n             else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n             {\n-                addViolation( problems, false, \"For dependency \" + d.getManagementKey()\n+                addViolation( problems, Severity.ERROR, \"For dependency \" + d.getManagementKey()\n                     + \": only dependency with system scope can specify systemPath.\" );\n             }\n \n             if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n             {\n-                validateVersion( \"dependencies.dependency.version\", problems, warnOnly, d.getVersion(),\n+                validateVersion( \"dependencies.dependency.version\", problems, errOn30, d.getVersion(),\n                                  d.getManagementKey() );\n \n-                validateBoolean( \"dependencies.dependency.optional\", problems, warnOnly, d.getOptional(),\n+                validateBoolean( \"dependencies.dependency.optional\", problems, errOn30, d.getOptional(),\n                                  d.getManagementKey() );\n \n                 /*\n                  * TODO: Extensions like Flex Mojos use custom scopes like \"merged\", \"internal\", \"external\", etc. In\n                  * order to don't break backward-compat with those, only warn but don't error out.\n                  */\n-                validateEnum( \"dependencies.dependency.scope\", problems, true, d.getScope(),\n+                validateEnum( \"dependencies.dependency.scope\", problems, Severity.WARNING, d.getScope(),\n                               d.getManagementKey(), \"provided\", \"compile\", \"runtime\", \"test\", \"system\" );\n             }\n         }\n@@ -208,40 +200,39 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n         {\n             for ( Dependency d : mgmt.getDependencies() )\n             {\n-                validateStringNotEmpty( \"dependencyManagement.dependencies.dependency.artifactId\", problems, false,\n-                                        d.getArtifactId(), d.getManagementKey() );\n+                validateStringNotEmpty( \"dependencyManagement.dependencies.dependency.artifactId\", problems,\n+                                        Severity.ERROR, d.getArtifactId(), d.getManagementKey() );\n \n-                validateStringNotEmpty( \"dependencyManagement.dependencies.dependency.groupId\", problems, false,\n-                                        d.getGroupId(), d.getManagementKey() );\n+                validateStringNotEmpty( \"dependencyManagement.dependencies.dependency.groupId\", problems,\n+                                        Severity.ERROR, d.getGroupId(), d.getManagementKey() );\n \n                 if ( \"system\".equals( d.getScope() ) )\n                 {\n                     String systemPath = d.getSystemPath();\n \n                     if ( StringUtils.isEmpty( systemPath ) )\n                     {\n-                        addViolation( problems, false, \"For managed dependency \" + d.getManagementKey()\n+                        addViolation( problems, Severity.ERROR, \"For managed dependency \" + d.getManagementKey()\n                             + \": system-scoped dependency must specify systemPath.\" );\n                     }\n                     else\n                     {\n                         if ( !new File( systemPath ).isAbsolute() )\n                         {\n-                            addViolation( problems, false, \"For managed dependency \" + d.getManagementKey()\n-                                + \": system-scoped dependency must specify an absolute systemPath but is \"\n-                                + systemPath );\n+                            addViolation( problems, Severity.ERROR, \"For managed dependency \" + d.getManagementKey()\n+                                + \": system-scoped dependency must specify an absolute systemPath but is \" + systemPath );\n                         }\n                     }\n                 }\n                 else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n                 {\n-                    addViolation( problems, false, \"For managed dependency \" + d.getManagementKey()\n+                    addViolation( problems, Severity.ERROR, \"For managed dependency \" + d.getManagementKey()\n                         + \": only dependency with system scope can specify systemPath.\" );\n                 }\n \n                 if ( request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0 )\n                 {\n-                    validateBoolean( \"dependencyManagement.dependencies.dependency.optional\", problems, warnOnly,\n+                    validateBoolean( \"dependencyManagement.dependencies.dependency.optional\", problems, errOn30,\n                                      d.getOptional(), d.getManagementKey() );\n                 }\n             }\n@@ -254,37 +245,37 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n             {\n                 if ( !modules.add( module ) )\n                 {\n-                    addViolation( problems, false, \"Duplicate child module: \" + module );\n+                    addViolation( problems, Severity.ERROR, \"Duplicate child module: \" + module );\n                 }\n             }\n \n-            boolean warnOnMissingPluginVersion =\n-                request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1;\n+            Severity errOn31 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 );\n \n             Build build = model.getBuild();\n             if ( build != null )\n             {\n                 for ( Plugin p : build.getPlugins() )\n                 {\n-                    validateStringNotEmpty( \"build.plugins.plugin.artifactId\", problems, false, p.getArtifactId() );\n+                    validateStringNotEmpty( \"build.plugins.plugin.artifactId\", problems, Severity.ERROR,\n+                                            p.getArtifactId() );\n \n-                    validateStringNotEmpty( \"build.plugins.plugin.groupId\", problems, false, p.getGroupId() );\n+                    validateStringNotEmpty( \"build.plugins.plugin.groupId\", problems, Severity.ERROR, p.getGroupId() );\n \n-                    validateStringNotEmpty( \"build.plugins.plugin.version\", problems, warnOnMissingPluginVersion,\n-                                            p.getVersion(), p.getKey() );\n+                    validateStringNotEmpty( \"build.plugins.plugin.version\", problems, errOn31, p.getVersion(),\n+                                            p.getKey() );\n \n-                    validateVersion( \"build.plugins.plugin.version\", problems, warnOnly, p.getVersion(), p.getKey() );\n+                    validateVersion( \"build.plugins.plugin.version\", problems, errOn30, p.getVersion(), p.getKey() );\n \n-                    validateBoolean( \"build.plugins.plugin.inherited\", problems, warnOnly, p.getInherited(),\n+                    validateBoolean( \"build.plugins.plugin.inherited\", problems, errOn30, p.getInherited(),\n                                      p.getKey() );\n \n-                    validateBoolean( \"build.plugins.plugin.extensions\", problems, warnOnly, p.getExtensions(),\n+                    validateBoolean( \"build.plugins.plugin.extensions\", problems, errOn30, p.getExtensions(),\n                                      p.getKey() );\n \n                     for ( Dependency d : p.getDependencies() )\n                     {\n                         validateEnum( \"build.plugins.plugin[\" + p.getKey() + \"].dependencies.dependency.scope\",\n-                                      problems, warnOnly, d.getScope(), d.getManagementKey(),\n+                                      problems, errOn30, d.getScope(), d.getManagementKey(),\n                                       \"compile\", \"runtime\", \"system\" );\n                     }\n                 }\n@@ -299,12 +290,14 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n             {\n                 for ( ReportPlugin p : reporting.getPlugins() )\n                 {\n-                    validateStringNotEmpty( \"reporting.plugins.plugin.artifactId\", problems, false, p.getArtifactId() );\n+                    validateStringNotEmpty( \"reporting.plugins.plugin.artifactId\", problems, Severity.ERROR,\n+                                            p.getArtifactId() );\n \n-                    validateStringNotEmpty( \"reporting.plugins.plugin.groupId\", problems, false, p.getGroupId() );\n+                    validateStringNotEmpty( \"reporting.plugins.plugin.groupId\", problems, Severity.ERROR,\n+                                            p.getGroupId() );\n \n-                    validateStringNotEmpty( \"reporting.plugins.plugin.version\", problems, warnOnMissingPluginVersion,\n-                                            p.getVersion(), p.getKey() );\n+                    validateStringNotEmpty( \"reporting.plugins.plugin.version\", problems, errOn31, p.getVersion(),\n+                                            p.getKey() );\n                 }\n             }\n \n@@ -325,7 +318,7 @@ else if ( StringUtils.isNotEmpty( d.getSystemPath() ) )\n             {\n                 if ( distMgmt.getStatus() != null )\n                 {\n-                    addViolation( problems, false, \"'distributionManagement.status' must not be specified\" );\n+                    addViolation( problems, Severity.ERROR, \"'distributionManagement.status' must not be specified\" );\n                 }\n \n                 validateRepositoryLayout( problems, distMgmt.getRepository(), \"distributionManagement.repository\",\n@@ -343,7 +336,7 @@ private boolean validateId( String fieldName, ModelProblemCollector problems, St\n \n     private boolean validateId( String fieldName, ModelProblemCollector problems, String id, String sourceHint )\n     {\n-        if ( !validateStringNotEmpty( fieldName, problems, false, id, sourceHint ) )\n+        if ( !validateStringNotEmpty( fieldName, problems, Severity.ERROR, id, sourceHint ) )\n         {\n             return false;\n         }\n@@ -352,7 +345,7 @@ private boolean validateId( String fieldName, ModelProblemCollector problems, St\n             boolean match = id.matches( ID_REGEX );\n             if ( !match )\n             {\n-                addViolation( problems, false, \"'\" + fieldName + \"'\"\n+                addViolation( problems, Severity.ERROR, \"'\" + fieldName + \"'\"\n                     + ( sourceHint != null ? \" for \" + sourceHint : \"\" ) + \" with value '\" + id\n                     + \"' does not match a valid id pattern.\" );\n             }\n@@ -372,17 +365,17 @@ private void validateDependencies( ModelProblemCollector problems, List<Dependen\n             if ( \"pom\".equals( dependency.getType() ) && \"import\".equals( dependency.getScope() )\n                 && StringUtils.isNotEmpty( dependency.getClassifier() ) )\n             {\n-                addViolation( problems, false, \"'\" + prefix + \".classifier' must be empty for imported POM: \" + key );\n+                addViolation( problems, Severity.ERROR, \"'\" + prefix + \".classifier' must be empty for imported POM: \" + key );\n             }\n \n             Dependency existing = index.get( key );\n \n             if ( existing != null )\n             {\n-                boolean warning = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n+                Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n                 String msg;\n-                if ( StringUtils.clean( existing.getVersion() ).equals( StringUtils.clean( dependency.getVersion() ) ) )\n+                if ( equals( existing.getVersion(), dependency.getVersion() ) )\n                 {\n                     msg =\n                         \"duplicate declaration of version \"\n@@ -395,7 +388,7 @@ private void validateDependencies( ModelProblemCollector problems, List<Dependen\n                             + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );\n                 }\n \n-                addViolation( problems, warning, \"'\" + prefix\n+                addViolation( problems, errOn30, \"'\" + prefix\n                     + \".(groupId:artifactId:type:classifier)' must be unique: \" + key + \" -> \" + msg );\n             }\n             else\n@@ -412,19 +405,20 @@ private void validateRepositories( ModelProblemCollector problems, List<Reposito\n \n         for ( Repository repository : repositories )\n         {\n-            validateStringNotEmpty( prefix + \".id\", problems, false, repository.getId() );\n+            validateStringNotEmpty( prefix + \".id\", problems, Severity.ERROR, repository.getId() );\n \n-            validateStringNotEmpty( prefix + \"[\" + repository.getId() + \"].url\", problems, false, repository.getUrl() );\n+            validateStringNotEmpty( prefix + \"[\" + repository.getId() + \"].url\", problems, Severity.ERROR,\n+                                    repository.getUrl() );\n \n             String key = repository.getId();\n \n             Repository existing = index.get( key );\n \n             if ( existing != null )\n             {\n-                boolean warning = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n+                Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n-                addViolation( problems, warning, \"'\" + prefix + \".id' must be unique: \" + repository.getId() + \" -> \"\n+                addViolation( problems, errOn30, \"'\" + prefix + \".id' must be unique: \" + repository.getId() + \" -> \"\n                     + existing.getUrl() + \" vs \" + repository.getUrl() );\n             }\n             else\n@@ -439,19 +433,20 @@ private void validateRepositoryLayout( ModelProblemCollector problems, Repositor\n     {\n         if ( repository != null && \"legacy\".equals( repository.getLayout() ) )\n         {\n-            addViolation( problems, true, \"'\" + prefix + \".layout = legacy' is deprecated: \" + repository.getId() );\n+            addViolation( problems, Severity.WARNING, \"'\" + prefix + \".layout = legacy' is deprecated: \"\n+                + repository.getId() );\n         }\n     }\n \n     private void validateResources( ModelProblemCollector problems, List<Resource> resources, String prefix, ModelBuildingRequest request )\n     {\n-        boolean warnOnBadBoolean = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n+        Severity errOn30 = getSeverity( request, ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n         for ( Resource resource : resources )\n         {\n-            validateStringNotEmpty( prefix + \".directory\", problems, false, resource.getDirectory() );\n+            validateStringNotEmpty( prefix + \".directory\", problems, Severity.ERROR, resource.getDirectory() );\n \n-            validateBoolean( prefix + \".filtering\", problems, warnOnBadBoolean, resource.getFiltering(),\n+            validateBoolean( prefix + \".filtering\", problems, errOn30, resource.getFiltering(),\n                              resource.getDirectory() );\n         }\n     }\n@@ -475,7 +470,7 @@ private void forcePluginExecutionIdCollision( Model model, ModelProblemCollector\n                     }\n                     catch ( IllegalStateException collisionException )\n                     {\n-                        addViolation( problems, false, collisionException.getMessage() );\n+                        addViolation( problems, Severity.ERROR, collisionException.getMessage() );\n                     }\n                 }\n             }\n@@ -486,15 +481,15 @@ private void forcePluginExecutionIdCollision( Model model, ModelProblemCollector\n     // Field validation\n     // ----------------------------------------------------------------------\n \n-    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, boolean warning,\n+    private boolean validateStringNoExpression( String fieldName, ModelProblemCollector problems, Severity severity,\n                                                 String string )\n     {\n         if ( !hasExpression( string ) )\n         {\n             return true;\n         }\n \n-        addViolation( problems, warning, \"'\" + fieldName + \"' contains an expression but should be a constant.\" );\n+        addViolation( problems, severity, \"'\" + fieldName + \"' contains an expression but should be a constant.\" );\n \n         return false;\n     }\n@@ -504,9 +499,10 @@ private boolean hasExpression( String value )\n         return value != null && value.indexOf( \"${\" ) >= 0;\n     }\n \n-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning, String string )\n+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,\n+                                            String string )\n     {\n-        return validateStringNotEmpty( fieldName, problems, warning, string, null );\n+        return validateStringNotEmpty( fieldName, problems, severity, string, null );\n     }\n \n     /**\n@@ -517,10 +513,10 @@ private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector\n      * <li><code>string.length > 0</code>\n      * </ul>\n      */\n-    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, boolean warning,\n+    private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector problems, Severity severity,\n                                             String string, String sourceHint )\n     {\n-        if ( !validateNotNull( fieldName, problems, warning, string, sourceHint ) )\n+        if ( !validateNotNull( fieldName, problems, severity, string, sourceHint ) )\n         {\n             return false;\n         }\n@@ -532,11 +528,11 @@ private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' is missing for \" + sourceHint );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' is missing for \" + sourceHint );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' is missing.\" );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' is missing.\" );\n         }\n \n         return false;\n@@ -549,7 +545,8 @@ private boolean validateStringNotEmpty( String fieldName, ModelProblemCollector\n      * <li><code>string != null</code>\n      * </ul>\n      */\n-    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, boolean warning, Object object, String sourceHint )\n+    private boolean validateNotNull( String fieldName, ModelProblemCollector problems, Severity severity,\n+                                     Object object, String sourceHint )\n     {\n         if ( object != null )\n         {\n@@ -558,17 +555,17 @@ private boolean validateNotNull( String fieldName, ModelProblemCollector problem\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' is missing for \" + sourceHint );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' is missing for \" + sourceHint );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' is missing.\" );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' is missing.\" );\n         }\n \n         return false;\n     }\n \n-    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, boolean warning, String string,\n+    private boolean validateBoolean( String fieldName, ModelProblemCollector problems, Severity severity, String string,\n                                      String sourceHint )\n     {\n         if ( string == null || string.length() <= 0 )\n@@ -583,18 +580,18 @@ private boolean validateBoolean( String fieldName, ModelProblemCollector problem\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false' for \" + sourceHint\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be 'true' or 'false' for \" + sourceHint\n                 + \" but is '\" + string + \"'.\" );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be 'true' or 'false' but is '\" + string + \"'.\" );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be 'true' or 'false' but is '\" + string + \"'.\" );\n         }\n \n         return false;\n     }\n \n-    private boolean validateEnum( String fieldName, ModelProblemCollector problems, boolean warning, String string,\n+    private boolean validateEnum( String fieldName, ModelProblemCollector problems, Severity severity, String string,\n                                   String sourceHint, String... validValues )\n     {\n         if ( string == null || string.length() <= 0 )\n@@ -611,19 +608,19 @@ private boolean validateEnum( String fieldName, ModelProblemCollector problems,\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values + \" for \" + sourceHint\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be one of \" + values + \" for \" + sourceHint\n                 + \" but is '\" + string + \"'.\" );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be one of \" + values + \" but is '\" + string\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be one of \" + values + \" but is '\" + string\n                 + \"'.\" );\n         }\n \n         return false;\n     }\n \n-    private boolean validateVersion( String fieldName, ModelProblemCollector problems, boolean warning, String string,\n+    private boolean validateVersion( String fieldName, ModelProblemCollector problems, Severity severity, String string,\n                                      String sourceHint )\n     {\n         if ( string == null || string.length() <= 0 )\n@@ -638,26 +635,36 @@ private boolean validateVersion( String fieldName, ModelProblemCollector problem\n \n         if ( sourceHint != null )\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be a valid version for \" + sourceHint\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be a valid version for \" + sourceHint\n                 + \" but is '\" + string + \"'.\" );\n         }\n         else\n         {\n-            addViolation( problems, warning, \"'\" + fieldName + \"' must be a valid version but is '\" + string + \"'.\" );\n+            addViolation( problems, severity, \"'\" + fieldName + \"' must be a valid version but is '\" + string + \"'.\" );\n         }\n \n         return false;\n     }\n \n-    private void addViolation( ModelProblemCollector problems, boolean warning, String message )\n+    private static void addViolation( ModelProblemCollector problems, Severity severity, String message )\n+    {\n+        problems.add( severity, message, null );\n+    }\n+\n+    private static boolean equals( String s1, String s2 )\n+    {\n+        return StringUtils.clean( s1 ).equals( StringUtils.clean( s2 ) );\n+    }\n+\n+    private static Severity getSeverity( ModelBuildingRequest request, int errorThreshold )\n     {\n-        if ( warning )\n+        if ( request.getValidationLevel() < errorThreshold )\n         {\n-            problems.addWarning( message );\n+            return Severity.WARNING;\n         }\n         else\n         {\n-            problems.addError( message );\n+            return Severity.ERROR;\n         }\n     }\n ",
                "deletions": 100
            },
            {
                "sha": "84edecde38396936acd669b967f35abec4f426af",
                "filename": "maven-model-builder/src/test/java/org/apache/maven/model/building/SimpleProblemCollector.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/java/org/apache/maven/model/building/SimpleProblemCollector.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/java/org/apache/maven/model/building/SimpleProblemCollector.java",
                "status": "modified",
                "changes": 38,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/java/org/apache/maven/model/building/SimpleProblemCollector.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -22,6 +22,8 @@\n import java.util.ArrayList;\n import java.util.List;\n \n+import org.apache.maven.model.building.ModelProblem.Severity;\n+\n /**\n  * A simple model problem collector for testing the model building components.\n  * \n@@ -35,34 +37,38 @@\n \n     private List<String> errors = new ArrayList<String>();\n \n-    public void addError( String message )\n-    {\n-        errors.add( message );\n-    }\n+    private List<String> fatals = new ArrayList<String>();\n \n-    public void addError( String message, Exception cause )\n+    public List<String> getWarnings()\n     {\n-        addError( message );\n+        return warnings;\n     }\n \n-    public void addWarning( String message )\n+    public List<String> getErrors()\n     {\n-        warnings.add( message );\n+        return errors;\n     }\n \n-    public void addWarning( String message, Exception cause )\n+    public List<String> getFatals()\n     {\n-        addWarning( message );\n+        return fatals;\n     }\n \n-    public List<String> getWarnings()\n+    public void add( Severity severity, String message, Exception cause )\n     {\n-        return warnings;\n-    }\n+        switch ( severity )\n+        {\n+            case FATAL:\n+                fatals.add( message );\n+                break;\n+            case ERROR:\n+                errors.add( message );\n+                break;\n+            case WARNING:\n+                warnings.add( message );\n+                break;\n+        }\n \n-    public List<String> getErrors()\n-    {\n-        return errors;\n     }\n \n }",
                "deletions": 16
            },
            {
                "sha": "baa4c2a7c5a3353627315f63f283deedbb9213f1",
                "filename": "maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java",
                "status": "modified",
                "changes": 67,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/java/org/apache/maven/model/validation/DefaultModelValidatorTest.java?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -102,8 +102,9 @@ protected void tearDown()\n         super.tearDown();\n     }\n \n-    private void assertViolations( SimpleProblemCollector result, int errors, int warnings )\n+    private void assertViolations( SimpleProblemCollector result, int fatals, int errors, int warnings )\n     {\n+        assertEquals( fatals, result.getFatals().size() );\n         assertEquals( errors, result.getErrors().size() );\n         assertEquals( warnings, result.getWarnings().size() );\n     }\n@@ -113,7 +114,7 @@ public void testMissingModelVersion()\n     {\n         SimpleProblemCollector result = validate( \"missing-modelVersion-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'modelVersion' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -124,7 +125,7 @@ public void testBadModelVersion()\n         SimpleProblemCollector result =\n             validateRaw( \"bad-modelVersion.xml\", ModelBuildingRequest.VALIDATION_LEVEL_STRICT );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf( \"modelVersion\" ) > -1 );\n     }\n@@ -134,7 +135,7 @@ public void testMissingArtifactId()\n     {\n         SimpleProblemCollector result = validate( \"missing-artifactId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'artifactId' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -144,7 +145,7 @@ public void testMissingGroupId()\n     {\n         SimpleProblemCollector result = validate( \"missing-groupId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'groupId' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -154,7 +155,7 @@ public void testInvalidIds()\n     {\n         SimpleProblemCollector result = validate( \"invalid-ids-pom.xml\" );\n \n-        assertViolations( result, 2, 0 );\n+        assertViolations( result, 0, 2, 0 );\n \n         assertEquals( \"'groupId' with value 'o/a/m' does not match a valid id pattern.\", result.getErrors().get( 0 ) );\n \n@@ -166,7 +167,7 @@ public void testMissingType()\n     {\n         SimpleProblemCollector result = validate( \"missing-type-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'packaging' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -176,7 +177,7 @@ public void testMissingVersion()\n     {\n         SimpleProblemCollector result = validate( \"missing-version-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'version' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -186,7 +187,7 @@ public void testInvalidAggregatorPackaging()\n     {\n         SimpleProblemCollector result = validate( \"invalid-aggregator-packaging-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf( \"Aggregator projects require 'pom' as packaging.\" ) > -1 );\n     }\n@@ -196,7 +197,7 @@ public void testMissingDependencyArtifactId()\n     {\n         SimpleProblemCollector result = validate( \"missing-dependency-artifactId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf( \"'dependencies.dependency.artifactId' is missing\" ) > -1 );\n     }\n@@ -206,7 +207,7 @@ public void testMissingDependencyGroupId()\n     {\n         SimpleProblemCollector result = validate( \"missing-dependency-groupId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf( \"'dependencies.dependency.groupId' is missing\" ) > -1 );\n     }\n@@ -216,7 +217,7 @@ public void testMissingDependencyVersion()\n     {\n         SimpleProblemCollector result = validate( \"missing-dependency-version-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf( \"'dependencies.dependency.version' is missing\" ) > -1 );\n     }\n@@ -226,7 +227,7 @@ public void testMissingDependencyManagementArtifactId()\n     {\n         SimpleProblemCollector result = validate( \"missing-dependency-mgmt-artifactId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf(\n                                                          \"'dependencyManagement.dependencies.dependency.artifactId' is missing\" ) > -1 );\n@@ -237,7 +238,7 @@ public void testMissingDependencyManagementGroupId()\n     {\n         SimpleProblemCollector result = validate( \"missing-dependency-mgmt-groupId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).indexOf(\n                                                          \"'dependencyManagement.dependencies.dependency.groupId' is missing\" ) > -1 );\n@@ -248,7 +249,7 @@ public void testMissingAll()\n     {\n         SimpleProblemCollector result = validate( \"missing-1-pom.xml\" );\n \n-        assertViolations( result, 4, 0 );\n+        assertViolations( result, 0, 4, 0 );\n \n         List<String> messages = result.getErrors();\n \n@@ -264,7 +265,7 @@ public void testMissingPluginArtifactId()\n     {\n         SimpleProblemCollector result = validate( \"missing-plugin-artifactId-pom.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'build.plugins.plugin.artifactId' is missing.\", result.getErrors().get( 0 ) );\n     }\n@@ -275,14 +276,14 @@ public void testMissingPluginVersion()\n         SimpleProblemCollector result =\n             validateEffective( \"missing-plugin-version-pom.xml\", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_1 );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertEquals( \"'build.plugins.plugin.version' is missing for org.apache.maven.plugins:maven-it-plugin\",\n                       result.getErrors().get( 0 ) );\n \n         result = validateEffective( \"missing-plugin-version-pom.xml\", ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0 );\n \n-        assertViolations( result, 0, 1 );\n+        assertViolations( result, 0, 0, 1 );\n     }\n \n     public void testMissingRepositoryId()\n@@ -291,7 +292,7 @@ public void testMissingRepositoryId()\n         SimpleProblemCollector result =\n             validateRaw( \"missing-repository-id-pom.xml\", ModelBuildingRequest.VALIDATION_LEVEL_STRICT );\n \n-        assertViolations( result, 4, 0 );\n+        assertViolations( result, 0, 4, 0 );\n \n         assertEquals( \"'repositories.repository.id' is missing.\", result.getErrors().get( 0 ) );\n \n@@ -307,7 +308,7 @@ public void testMissingResourceDirectory()\n     {\n         SimpleProblemCollector result = validate( \"missing-resource-directory-pom.xml\" );\n \n-        assertViolations( result, 2, 0 );\n+        assertViolations( result, 0, 2, 0 );\n \n         assertEquals( \"'build.resources.resource.directory' is missing.\", result.getErrors().get( 0 ) );\n \n@@ -319,7 +320,7 @@ public void testBadPluginDependencyScope()\n     {\n         SimpleProblemCollector result = validate( \"bad-plugin-dependency-scope.xml\" );\n \n-        assertViolations( result, 3, 0 );\n+        assertViolations( result, 0, 3, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"test:d\" ) );\n \n@@ -333,7 +334,7 @@ public void testBadDependencyScope()\n     {\n         SimpleProblemCollector result = validate( \"bad-dependency-scope.xml\" );\n \n-        assertViolations( result, 0, 2 );\n+        assertViolations( result, 0, 0, 2 );\n \n         assertTrue( result.getWarnings().get( 0 ).contains( \"test:f\" ) );\n \n@@ -345,7 +346,7 @@ public void testBadDependencyVersion()\n     {\n         SimpleProblemCollector result = validate( \"bad-dependency-version.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"test:b\" ) );\n     }\n@@ -355,7 +356,7 @@ public void testDuplicateModule()\n     {\n         SimpleProblemCollector result = validate( \"duplicate-module.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"child\" ) );\n     }\n@@ -365,7 +366,7 @@ public void testDuplicateProfileId()\n     {\n         SimpleProblemCollector result = validateRaw( \"duplicate-profile-id.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"non-unique-id\" ) );\n     }\n@@ -375,7 +376,7 @@ public void testBadPluginVersion()\n     {\n         SimpleProblemCollector result = validate( \"bad-plugin-version.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"test:mip\" ) );\n     }\n@@ -385,9 +386,21 @@ public void testDistributionManagementStatus()\n     {\n         SimpleProblemCollector result = validate( \"distribution-management-status.xml\" );\n \n-        assertViolations( result, 1, 0 );\n+        assertViolations( result, 0, 1, 0 );\n \n         assertTrue( result.getErrors().get( 0 ).contains( \"distributionManagement.status\" ) );\n     }\n \n+    public void testIncompleteParent()\n+        throws Exception\n+    {\n+        SimpleProblemCollector result = validateRaw( \"incomplete-parent.xml\" );\n+\n+        assertViolations( result, 3, 0, 0 );\n+\n+        assertTrue( result.getFatals().get( 0 ).contains( \"parent.groupId\" ) );\n+        assertTrue( result.getFatals().get( 1 ).contains( \"parent.artifactId\" ) );\n+        assertTrue( result.getFatals().get( 2 ).contains( \"parent.version\" ) );\n+    }\n+\n }",
                "deletions": 27
            },
            {
                "sha": "2fc94d57d3e94c1c5e0c82c46e53bd7c6b1fba71",
                "filename": "maven-model-builder/src/test/resources/poms/validation/incomplete-parent.xml",
                "blob_url": "https://github.com/apache/maven/blob/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/resources/poms/validation/incomplete-parent.xml",
                "raw_url": "https://github.com/apache/maven/raw/1068ab557c476a291f3f16bc2b2523d5613c5e17/maven-model-builder/src/test/resources/poms/validation/incomplete-parent.xml",
                "status": "added",
                "changes": 30,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/test/resources/poms/validation/incomplete-parent.xml?ref=1068ab557c476a291f3f16bc2b2523d5613c5e17",
                "patch": "@@ -0,0 +1,30 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+    http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <!-- all fields missing -->\n+  </parent>\n+\n+  <artifactId>aid</artifactId>\n+  <groupId>gid</groupId>\n+  <version>0.1</version>\n+</project>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@833726 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/e61887bbc2b96f969d77f90aa92a5c487432babf",
        "parent": "https://github.com/apache/maven/commit/185d5a07c8ba38ff2e7899be04e14ec6a1fc696a",
        "bug_id": "maven_33",
        "file": [
            {
                "sha": "ad6f3e72cc55b2d331cc56c72b0efb8b1c30bb79",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/e61887bbc2b96f969d77f90aa92a5c487432babf/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/e61887bbc2b96f969d77f90aa92a5c487432babf/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 14,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=e61887bbc2b96f969d77f90aa92a5c487432babf",
                "patch": "@@ -382,17 +382,17 @@ private void validateDependencies( ModelProblemCollector problems, List<Dependen\n                 boolean warning = request.getValidationLevel() < ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_3_0;\n \n                 String msg;\n-                if ( StringUtils.isEmpty( existing.getVersion() ) && StringUtils.isEmpty( dependency.getVersion() ) )\n+                if ( StringUtils.clean( existing.getVersion() ).equals( StringUtils.clean( dependency.getVersion() ) ) )\n                 {\n-                    msg = \"duplicate declaration\";\n-                }\n-                else if ( existing.getVersion().equals( dependency.getVersion() ) )\n-                {\n-                    msg = \"duplicate declaration of version \" + dependency.getVersion();\n+                    msg =\n+                        \"duplicate declaration of version \"\n+                            + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );\n                 }\n                 else\n                 {\n-                    msg = \"version \" + existing.getVersion() + \" vs \" + dependency.getVersion();\n+                    msg =\n+                        \"version \" + StringUtils.defaultString( existing.getVersion(), \"(?)\" ) + \" vs \"\n+                            + StringUtils.defaultString( dependency.getVersion(), \"(?)\" );\n                 }\n \n                 addViolation( problems, warning, \"'\" + prefix",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@828249 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/412ab3371b453f348515a94b34b0014d3dca537c",
        "parent": "https://github.com/apache/maven/commit/c501175f791ff0ca4bc5a3cc4ed4905fb6caeed9",
        "bug_id": "maven_34",
        "file": [
            {
                "sha": "6f407785ffa6ddb9ade0b7739c66022555da40dd",
                "filename": "maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "blob_url": "https://github.com/apache/maven/blob/412ab3371b453f348515a94b34b0014d3dca537c/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "raw_url": "https://github.com/apache/maven/raw/412ab3371b453f348515a94b34b0014d3dca537c/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java",
                "status": "modified",
                "changes": 14,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/exception/DefaultExceptionHandler.java?ref=412ab3371b453f348515a94b34b0014d3dca537c",
                "patch": "@@ -203,12 +203,24 @@ private String getMessage( String message, Throwable exception )\n         {\n             String exceptionMessage = t.getMessage();\n \n+            if ( exceptionMessage == null )\n+            {\n+                exceptionMessage = \"\";\n+            }\n+\n             if ( t instanceof AbstractMojoExecutionException )\n             {\n                 String longMessage = ( (AbstractMojoExecutionException) t ).getLongMessage();\n                 if ( StringUtils.isNotEmpty( longMessage ) )\n                 {\n-                    exceptionMessage = longMessage;\n+                    if ( StringUtils.isEmpty( exceptionMessage ) || longMessage.contains( exceptionMessage ) )\n+                    {\n+                        exceptionMessage = longMessage;\n+                    }\n+                    else\n+                    {\n+                        exceptionMessage += \": \" + longMessage;\n+                    }\n                 }\n             }\n ",
                "deletions": 1
            },
            {
                "sha": "749f6022b4dd08bc6714e6b00a8bfe052b96cc2d",
                "filename": "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/412ab3371b453f348515a94b34b0014d3dca537c/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/412ab3371b453f348515a94b34b0014d3dca537c/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/MavenProject.java?ref=412ab3371b453f348515a94b34b0014d3dca537c",
                "patch": "@@ -1800,8 +1800,8 @@ protected void setScriptSourceRoots( List<String> scriptSourceRoots )\n \n     protected ArtifactRepository getReleaseArtifactRepository()\n     {\n-        if ( getDistributionManagement().getRepository() != null )\n-        {           \n+        if ( getDistributionManagement() != null && getDistributionManagement().getRepository() != null )\n+        {\n             try\n             {\n                 ArtifactRepository repo =\n@@ -1819,8 +1819,8 @@ protected ArtifactRepository getReleaseArtifactRepository()\n \n     protected ArtifactRepository getSnapshotArtifactRepository()\n     {\n-        if ( getDistributionManagement().getSnapshotRepository() != null )\n-        {           \n+        if ( getDistributionManagement() != null && getDistributionManagement().getSnapshotRepository() != null )\n+        {\n             try\n             {\n                 ArtifactRepository repo =",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@805163 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/6499386f49a13e0a64565449d0b61b1b2870c97c",
        "parent": "https://github.com/apache/maven/commit/5eaec2f448ed2b12c73b95bf421d88ac7e674053",
        "bug_id": "maven_35",
        "file": [
            {
                "sha": "dc0ad0a8f7ceb16f3221538a047c3aedc4cd858a",
                "filename": "maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java",
                "blob_url": "https://github.com/apache/maven/blob/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java",
                "raw_url": "https://github.com/apache/maven/raw/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilter.java?ref=6499386f49a13e0a64565449d0b61b1b2870c97c",
                "patch": "@@ -39,9 +39,10 @@\n     private Set<ArtifactFilter> filters; \n \n     public AndArtifactFilter()\n-    {        \n+    {\n+        this.filters = new LinkedHashSet<ArtifactFilter>();\n     }\n-    \n+\n     public AndArtifactFilter( List<ArtifactFilter> filters )\n     {\n         this.filters = new LinkedHashSet<ArtifactFilter>( filters );\n@@ -63,11 +64,6 @@ public boolean include( Artifact artifact )\n \n     public void add( ArtifactFilter artifactFilter )\n     {\n-        if ( filters == null )\n-        {\n-            filters = new LinkedHashSet<ArtifactFilter>();\n-        }\n-        \n         filters.add( artifactFilter );\n     }\n ",
                "deletions": 7
            },
            {
                "sha": "d8499c4e6e015842e8e8f393fc23f456bb0b0158",
                "filename": "maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java",
                "blob_url": "https://github.com/apache/maven/blob/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java",
                "raw_url": "https://github.com/apache/maven/raw/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java",
                "status": "modified",
                "changes": 15,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilter.java?ref=6499386f49a13e0a64565449d0b61b1b2870c97c",
                "patch": "@@ -38,6 +38,7 @@\n \n     public OrArtifactFilter()\n     {\n+        this.filters = new LinkedHashSet<ArtifactFilter>();\n     }\n \n     public OrArtifactFilter( Collection<ArtifactFilter> filters )\n@@ -47,14 +48,11 @@ public OrArtifactFilter( Collection<ArtifactFilter> filters )\n \n     public boolean include( Artifact artifact )\n     {\n-        if ( filters != null )\n+        for ( ArtifactFilter filter : filters )\n         {\n-            for ( ArtifactFilter filter : filters )\n+            if ( filter.include( artifact ) )\n             {\n-                if ( filter.include( artifact ) )\n-                {\n-                    return true;\n-                }\n+                return true;\n             }\n         }\n \n@@ -63,11 +61,6 @@ public boolean include( Artifact artifact )\n \n     public void add( ArtifactFilter artifactFilter )\n     {\n-        if ( filters == null )\n-        {\n-            filters = new LinkedHashSet<ArtifactFilter>();\n-        }\n-\n         filters.add( artifactFilter );\n     }\n ",
                "deletions": 11
            },
            {
                "sha": "27d96bd21ec7327e2c6b078279d82ed5245888bb",
                "filename": "maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilterTest.java",
                "blob_url": "https://github.com/apache/maven/blob/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilterTest.java",
                "raw_url": "https://github.com/apache/maven/raw/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilterTest.java",
                "status": "added",
                "changes": 62,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/AndArtifactFilterTest.java?ref=6499386f49a13e0a64565449d0b61b1b2870c97c",
                "patch": "@@ -0,0 +1,62 @@\n+package org.apache.maven.artifact.resolver.filter;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+\n+import org.apache.maven.artifact.Artifact;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@link AndArtifactFilter}.\n+ * \n+ * @author Benjamin Bentmann\n+ */\n+public class AndArtifactFilterTest\n+    extends TestCase\n+{\n+\n+    private ArtifactFilter newSubFilter()\n+    {\n+        return new ArtifactFilter()\n+        {\n+            public boolean include( Artifact artifact )\n+            {\n+                return false;\n+            }\n+        };\n+    }\n+\n+    public void testEquals()\n+    {\n+        AndArtifactFilter filter1 = new AndArtifactFilter();\n+\n+        AndArtifactFilter filter2 = new AndArtifactFilter( Arrays.asList( newSubFilter() ) );\n+\n+        assertFalse( filter1.equals( null ) );\n+        assertTrue( filter1.equals( filter1 ) );\n+        assertEquals( filter1.hashCode(), filter1.hashCode() );\n+\n+        assertFalse( filter1.equals( filter2 ) );\n+        assertFalse( filter2.equals( filter1 ) );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "e17c0d40ce88ba910cd518511d455582d8af0400",
                "filename": "maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilterTest.java",
                "blob_url": "https://github.com/apache/maven/blob/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilterTest.java",
                "raw_url": "https://github.com/apache/maven/raw/6499386f49a13e0a64565449d0b61b1b2870c97c/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilterTest.java",
                "status": "added",
                "changes": 62,
                "additions": 62,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/test/java/org/apache/maven/artifact/resolver/filter/OrArtifactFilterTest.java?ref=6499386f49a13e0a64565449d0b61b1b2870c97c",
                "patch": "@@ -0,0 +1,62 @@\n+package org.apache.maven.artifact.resolver.filter;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Arrays;\n+\n+import org.apache.maven.artifact.Artifact;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@link OrArtifactFilter}.\n+ * \n+ * @author Benjamin Bentmann\n+ */\n+public class OrArtifactFilterTest\n+    extends TestCase\n+{\n+\n+    private ArtifactFilter newSubFilter()\n+    {\n+        return new ArtifactFilter()\n+        {\n+            public boolean include( Artifact artifact )\n+            {\n+                return false;\n+            }\n+        };\n+    }\n+\n+    public void testEquals()\n+    {\n+        OrArtifactFilter filter1 = new OrArtifactFilter();\n+\n+        OrArtifactFilter filter2 = new OrArtifactFilter( Arrays.asList( newSubFilter() ) );\n+\n+        assertFalse( filter1.equals( null ) );\n+        assertTrue( filter1.equals( filter1 ) );\n+        assertEquals( filter1.hashCode(), filter1.hashCode() );\n+\n+        assertFalse( filter1.equals( filter2 ) );\n+        assertFalse( filter2.equals( filter1 ) );\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@803200 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/87704b69b80922828d7c1b715090aa691a04a54f",
        "parent": "https://github.com/apache/maven/commit/16b9331f9244951c07a0157082da4202691abfd5",
        "bug_id": "maven_36",
        "file": [
            {
                "sha": "b139f1ecb05b3989331551b0cbe3d7ce4535a0fe",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/87704b69b80922828d7c1b715090aa691a04a54f/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/87704b69b80922828d7c1b715090aa691a04a54f/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=87704b69b80922828d7c1b715090aa691a04a54f",
                "patch": "@@ -738,7 +738,8 @@ private void populateMojoExecutionConfiguration( MavenProject project, MojoExecu\n                 {\n                     Xpp3Dom executionConfiguration = (Xpp3Dom) e.getConfiguration();\n \n-                    Xpp3Dom mojoConfiguration = new Xpp3Dom( executionConfiguration );\n+                    Xpp3Dom mojoConfiguration =\n+                        ( executionConfiguration != null ) ? new Xpp3Dom( executionConfiguration ) : null;\n \n                     mojoConfiguration = Xpp3Dom.mergeXpp3Dom( mojoExecution.getConfiguration(), mojoConfiguration );\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@798536 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a151c6c1a334d5094320cd04261479d9c515200c",
        "parent": "https://github.com/apache/maven/commit/fdb57e65ca17505c82178937041d53c0ccb8aac5",
        "bug_id": "maven_37",
        "file": [
            {
                "sha": "38a9d5e7899121f463dc6a8272a999291d0da54f",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/a151c6c1a334d5094320cd04261479d9c515200c/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/a151c6c1a334d5094320cd04261479d9c515200c/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 23,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=a151c6c1a334d5094320cd04261479d9c515200c",
                "patch": "@@ -707,19 +707,22 @@ private void resolvePluginVersion( Plugin plugin, ArtifactRepository localReposi\n             {\n                 Metadata pluginMetadata = readMetadata( artifactMetadataFile );\n \n-                String release = pluginMetadata.getVersioning().getRelease();\n-\n-                if ( StringUtils.isNotEmpty( release ) )\n+                if ( pluginMetadata.getVersioning() != null )\n                 {\n-                    plugin.setVersion( release );\n-                }\n-                else\n-                {\n-                    String latest = pluginMetadata.getVersioning().getLatest();\n+                    String release = pluginMetadata.getVersioning().getRelease();\n \n-                    if ( StringUtils.isNotEmpty( latest ) )\n+                    if ( StringUtils.isNotEmpty( release ) )\n                     {\n-                        plugin.setVersion( latest );\n+                        plugin.setVersion( release );\n+                    }\n+                    else\n+                    {\n+                        String latest = pluginMetadata.getVersioning().getLatest();\n+\n+                        if ( StringUtils.isNotEmpty( latest ) )\n+                        {\n+                            plugin.setVersion( latest );\n+                        }\n                     }\n                 }\n             }",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Used project realm during dependency resolution\no Fixed NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@793871 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
        "parent": "https://github.com/apache/maven/commit/2caa6b511220ca61c9bbb8cc7ab5842d6c3e56dc",
        "bug_id": "maven_38",
        "file": [
            {
                "sha": "0298812c706305a1f8a0af99d85f4e6a243a9df5",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
                "patch": "@@ -57,6 +57,7 @@\n import org.apache.maven.repository.RepositorySystem;\n import org.apache.maven.wagon.ResourceDoesNotExistException;\n import org.apache.maven.wagon.TransferFailedException;\n+import org.codehaus.plexus.classworlds.realm.ClassRealm;\n import org.codehaus.plexus.component.annotations.Requirement;\n import org.codehaus.plexus.configuration.PlexusConfiguration;\n import org.codehaus.plexus.logging.Logger;\n@@ -140,6 +141,8 @@ public void execute( MavenSession session )\n                 goals = Collections.singletonList( goal );\n             }\n         }\n+\n+        ClassLoader oldContextClassLoader = Thread.currentThread().getContextClassLoader();\n                 \n         for ( MavenProject currentProject : session.getProjects() )\n         {\n@@ -157,6 +160,12 @@ public void execute( MavenSession session )\n             {\n                 session.setCurrentProject( currentProject );\n \n+                ClassRealm projectRealm = currentProject.getClassRealm();\n+                if ( projectRealm != null )\n+                {\n+                    Thread.currentThread().setContextClassLoader( projectRealm );\n+                }\n+\n                 MavenExecutionPlan executionPlan = calculateExecutionPlan( session, goals.toArray( new String[] {} ) );\n \n                 //TODO: once we have calculated the build plan then we should accurately be able to download\n@@ -215,6 +224,8 @@ else if ( MavenExecutionRequest.REACTOR_FAIL_FAST.equals( session.getReactorFail\n             finally\n             {\n                 session.setCurrentProject( null );\n+\n+                Thread.currentThread().setContextClassLoader( oldContextClassLoader );\n             }\n         }        \n     }        ",
                "deletions": 0
            },
            {
                "sha": "7604aea1c9a05e48089cbdf603226ce14475d2d8",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilder.java?ref=42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
                "patch": "@@ -72,8 +72,6 @@\n \n     @Requirement\n     private ResolutionErrorHandler resolutionErrorHandler;\n-    \n-    private MavenProject standaloneProject;\n \n     // ----------------------------------------------------------------------\n     // MavenProjectBuilder Implementation\n@@ -143,6 +141,8 @@ private MavenProject build( File pomFile, boolean localProject, ProjectBuildingR\n             project.setRemoteArtifactRepositories( listener.getRemoteRepositories() );\n             project.setPluginArtifactRepositories( listener.getPluginRepositories() );\n \n+            project.setClassRealm( listener.getProjectRealm() );\n+\n             try\n             {\n                 if ( configuration.isProcessPlugins() )\n@@ -252,11 +252,6 @@ public MavenProject build( Artifact artifact, ProjectBuildingRequest configurati\n     public MavenProject buildStandaloneSuperProject( ProjectBuildingRequest config )\n         throws ProjectBuildingException\n     {\n-        if ( standaloneProject != null )\n-        {\n-            return standaloneProject;\n-        }\n-\n         ModelBuildingRequest request = getModelBuildingRequest( config );\n \n         ModelBuildingResult result;\n@@ -269,15 +264,20 @@ public MavenProject buildStandaloneSuperProject( ProjectBuildingRequest config )\n             throw new ProjectBuildingException( \"[standalone]\", \"Failed to build standalone project\", e );\n         }\n \n+        MavenProject standaloneProject;\n+\n         try\n         {\n             standaloneProject = new MavenProject( result.getEffectiveModel(), repositorySystem, this, config );\n         }\n         catch ( InvalidRepositoryException e )\n         {\n-            // Not going to happen.\n+            throw new IllegalStateException( e );\n         }\n \n+        standaloneProject.setActiveProfiles( result.getActiveExternalProfiles() );\n+        standaloneProject.setInjectedProfileIds( \"external\", getProfileIds( result.getActiveExternalProfiles() ) );\n+\n         standaloneProject.setExecutionRoot( true );\n \n         return standaloneProject;",
                "deletions": 8
            },
            {
                "sha": "baad3054b0929c4493e5e90b478af30cd4a39002",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java",
                "blob_url": "https://github.com/apache/maven/blob/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java",
                "raw_url": "https://github.com/apache/maven/raw/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuildingHelper.java?ref=42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
                "patch": "@@ -98,11 +98,13 @@ public ClassRealm createProjectRealm( Model model, ArtifactRepository localRepos\n                                           List<ArtifactRepository> remoteRepositories )\n         throws ArtifactResolutionException\n     {\n+        ClassRealm projectRealm = container.getContainerRealm();\n+\n         Build build = model.getBuild();\n \n         if ( build == null )\n         {\n-            return null;\n+            return projectRealm;\n         }\n \n         List<Plugin> extensionPlugins = new ArrayList<Plugin>();\n@@ -117,7 +119,7 @@ public ClassRealm createProjectRealm( Model model, ArtifactRepository localRepos\n \n         if ( build.getExtensions().isEmpty() && extensionPlugins.isEmpty() )\n         {\n-            return null;\n+            return projectRealm;\n         }\n \n         String realmId = model.getGroupId() + ':' + model.getArtifactId() + ':' + model.getVersion();\n@@ -129,8 +131,6 @@ public ClassRealm createProjectRealm( Model model, ArtifactRepository localRepos\n \n         ClassWorld world = ( (MutablePlexusContainer) container ).getClassWorld();\n \n-        ClassRealm projectRealm;\n-\n         synchronized ( world )\n         {\n             projectRealm = world.getClassRealm( realmId );",
                "deletions": 4
            },
            {
                "sha": "512b46a054c07b45a702a9cbbe5395e20f199b43",
                "filename": "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 54,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/MavenProject.java?ref=42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
                "patch": "@@ -68,6 +68,7 @@\n import org.apache.maven.model.io.xpp3.MavenXpp3Reader;\n import org.apache.maven.model.io.xpp3.MavenXpp3Writer;\n import org.apache.maven.repository.RepositorySystem;\n+import org.codehaus.plexus.classworlds.realm.ClassRealm;\n import org.codehaus.plexus.util.StringUtils;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n \n@@ -167,6 +168,8 @@\n \n     private Map<String, Object> context;\n \n+    private ClassRealm classRealm;\n+\n     //\n \n     public MavenProject()\n@@ -380,16 +383,6 @@ public void setParent( MavenProject parent )\n     {\n         this.parent = parent;\n     }\n-\n-    public void setRemoteArtifactRepositories( List<ArtifactRepository> remoteArtifactRepositories )\n-    {\n-        this.remoteArtifactRepositories = remoteArtifactRepositories;\n-    }\n-\n-    public List<ArtifactRepository> getRemoteArtifactRepositories()\n-    {\n-        return remoteArtifactRepositories;\n-    }\n     \n     public boolean hasParent()\n     {\n@@ -1346,6 +1339,21 @@ private Build getModelBuild()\n         return build;\n     }\n \n+    public void setRemoteArtifactRepositories( List<ArtifactRepository> remoteArtifactRepositories )\n+    {\n+        this.remoteArtifactRepositories = remoteArtifactRepositories;\n+    }\n+\n+    public List<ArtifactRepository> getRemoteArtifactRepositories()\n+    {\n+        if ( remoteArtifactRepositories == null )\n+        {\n+            remoteArtifactRepositories = new ArrayList<ArtifactRepository>();\n+        }\n+\n+        return remoteArtifactRepositories;\n+    }\n+\n     public void setPluginArtifactRepositories( List<ArtifactRepository> pluginArtifactRepositories )\n     {\n         this.pluginArtifactRepositories = pluginArtifactRepositories;\n@@ -1357,6 +1365,11 @@ public void setPluginArtifactRepositories( List<ArtifactRepository> pluginArtifa\n      */\n     public List<ArtifactRepository> getPluginArtifactRepositories()\n     {\n+        if ( pluginArtifactRepositories == null )\n+        {\n+            pluginArtifactRepositories = new ArrayList<ArtifactRepository>();\n+        }\n+\n         return pluginArtifactRepositories;\n     }\n \n@@ -1969,4 +1982,25 @@ public Object getContextValue( String key )\n         }\n         return context.get( key );\n     }\n+\n+    /**\n+     * Sets the project's class realm.\n+     * \n+     * @param classRealm The class realm hosting the build extensions of this project, may be {@code null}.\n+     */\n+    public void setClassRealm( ClassRealm classRealm )\n+    {\n+        this.classRealm = classRealm;\n+    }\n+\n+    /**\n+     * Gets the project's class realm. This class realm hosts the build extensions of the project.\n+     * \n+     * @return The project's class realm or {@code null}.\n+     */\n+    public ClassRealm getClassRealm()\n+    {\n+        return classRealm;\n+    }\n+\n }",
                "deletions": 10
            },
            {
                "sha": "2a36232719895723869c325fd3439e8d2d8bf408",
                "filename": "maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java",
                "blob_url": "https://github.com/apache/maven/blob/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java",
                "raw_url": "https://github.com/apache/maven/raw/42340c1b9233bc9cbe18c90639101aa3fb5d62b9/maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/ProjectBuildingHelper.java?ref=42340c1b9233bc9cbe18c90639101aa3fb5d62b9",
                "patch": "@@ -55,7 +55,7 @@\n      * @param model The model to create the project realm for, must not be {@code null}\n      * @param localRepository The local repository to use for artifact resolution, must not be {@code null}.\n      * @param remoteRepositories The remote repositories to use for artifact resolution, must not be {@code null}.\n-     * @return The project realm or {@code null} if no build extensions are present.\n+     * @return The project realm, never {@code null}.\n      * @throws ArtifactResolutionException If any build extension could not be resolved.\n      */\n     ClassRealm createProjectRealm( Model model, ArtifactRepository localRepository,",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@792721 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/d56f9e13bb50ead6388bb8f3061cbbefb179a22b",
        "parent": "https://github.com/apache/maven/commit/52519425f7ebd6a4bb7e23f216098f04fbca0019",
        "bug_id": "maven_39",
        "file": [
            {
                "sha": "0dc998e57bc0e199ffa9ff841f6573d0a7194fac",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/d56f9e13bb50ead6388bb8f3061cbbefb179a22b/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/d56f9e13bb50ead6388bb8f3061cbbefb179a22b/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=d56f9e13bb50ead6388bb8f3061cbbefb179a22b",
                "patch": "@@ -717,7 +717,7 @@ private void resolvePluginVersion( Plugin plugin, ArtifactRepository localReposi\n         }\n         else\n         {\n-            throw new PluginNotFoundException( plugin, null );\n+            throw new PluginNotFoundException( plugin, remoteRepositories );\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "3763e7d9ab832e7b4651003e5392f1db4420319f",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java",
                "blob_url": "https://github.com/apache/maven/blob/d56f9e13bb50ead6388bb8f3061cbbefb179a22b/maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java",
                "raw_url": "https://github.com/apache/maven/raw/d56f9e13bb50ead6388bb8f3061cbbefb179a22b/maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/PluginNotFoundException.java?ref=d56f9e13bb50ead6388bb8f3061cbbefb179a22b",
                "patch": "@@ -19,6 +19,9 @@\n  * under the License.\n  */\n \n+import java.util.List;\n+\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n import org.apache.maven.artifact.resolver.AbstractArtifactResolutionException;\n import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n import org.apache.maven.model.Plugin;\n@@ -41,6 +44,13 @@ public PluginNotFoundException( Plugin plugin, ArtifactNotFoundException e )\n         this.plugin = plugin;\n     }\n \n+    public PluginNotFoundException( Plugin plugin, List<ArtifactRepository> remoteRepositories )\n+    {\n+        super( \"Plugin could not be found, please check its coordinates for typos\", plugin.getGroupId(),\n+               plugin.getArtifactId(), plugin.getVersion(), \"maven-plugin\", null, remoteRepositories, null );\n+        this.plugin = plugin;\n+    }\n+\n     public Plugin getPlugin()\n     {\n         return plugin;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@790099 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/49acd30848ebbddf077aa2763d95be8b49320d61",
        "parent": "https://github.com/apache/maven/commit/accb45543fd635d692a7aecbfa099a4c83831205",
        "bug_id": "maven_40",
        "file": [
            {
                "sha": "07c314b82cd817fb4e119710c25f1d16a193efaa",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/ModelData.java",
                "blob_url": "https://github.com/apache/maven/blob/49acd30848ebbddf077aa2763d95be8b49320d61/maven-model-builder/src/main/java/org/apache/maven/model/ModelData.java",
                "raw_url": "https://github.com/apache/maven/raw/49acd30848ebbddf077aa2763d95be8b49320d61/maven-model-builder/src/main/java/org/apache/maven/model/ModelData.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/ModelData.java?ref=49acd30848ebbddf077aa2763d95be8b49320d61",
                "patch": "@@ -205,7 +205,7 @@ public String getId()\n     @Override\n     public String toString()\n     {\n-        return model.toString();\n+        return String.valueOf( model );\n     }\n \n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@788108 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/01f1ae9b5d59f121dc74dc0c26f681feda1a80d8",
        "parent": "https://github.com/apache/maven/commit/e7ef007e6e2c45ce2b5302307402845ca42addfe",
        "bug_id": "maven_41",
        "file": [
            {
                "sha": "6cf8a675d6a73dfae7af794d94eaa992e64819b8",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/01f1ae9b5d59f121dc74dc0c26f681feda1a80d8/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/01f1ae9b5d59f121dc74dc0c26f681feda1a80d8/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=01f1ae9b5d59f121dc74dc0c26f681feda1a80d8",
                "patch": "@@ -788,8 +788,12 @@ public void initialize()\n         {\n             LifecycleMapping lifecycleMappingForPackaging = lifecycleMappings.get( packaging );\n \n-            org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );                                                           \n-            \n+            org.apache.maven.lifecycle.mapping.Lifecycle lifecycleConfiguration = null;\n+            if ( lifecycleMappingForPackaging != null )\n+            {\n+                lifecycleConfiguration = lifecycleMappingForPackaging.getLifecycles().get( lifecycle.getId() );\n+            }\n+\n             if ( lifecycleConfiguration != null )\n             {\n                 Map<String, String> lifecyclePhasesForPackaging = lifecycleConfiguration.getPhases();",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "more details on the NPE cause.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@787114 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/ccd2cd2e1aa4c3078fbb97848bb2d2c185fc55bd",
        "parent": "https://github.com/apache/maven/commit/5672ae45e8bf78f4db509b343d41c6a6cf4ad61a",
        "bug_id": "maven_42",
        "file": [
            {
                "sha": "632628372ab3d70c97ba62413fe565237d9f9ef7",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/ccd2cd2e1aa4c3078fbb97848bb2d2c185fc55bd/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/ccd2cd2e1aa4c3078fbb97848bb2d2c185fc55bd/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=ccd2cd2e1aa4c3078fbb97848bb2d2c185fc55bd",
                "patch": "@@ -352,6 +352,14 @@ private void calculateExecutionForLifecyclePhase( MavenSession session, List<Moj\n \n         //TODO: need to separate the lifecycles\n \n+        if ( lifecycle == null )\n+        {\n+            logger.info( \"Invalid task '\"\n+                + lifecyclePhase\n+                + \"' : you must specify a valid lifecycle phase, or a goal in the format plugin:goal or pluginGroupId:pluginArtifactId:pluginVersion:goal\" );\n+            throw new MojoNotFoundException( lifecyclePhase, null );\n+        }\n+        \n         for ( String phase : lifecycle.getPhases() )\n         {\n             List<MojoExecution> mojos = new ArrayList<MojoExecution>();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fix possible NPE as filter can be null (dependency:tree)\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@785405 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/0852f8d21dfbea00022e06fd2575dcec055791bd",
        "parent": "https://github.com/apache/maven/commit/17d876713c5aff4fe85fa6832b05d14c9bee5c88",
        "bug_id": "maven_43",
        "file": [
            {
                "sha": "5f3b9ed91e8bddb0e1e9839873f7b308783d8ba1",
                "filename": "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/0852f8d21dfbea00022e06fd2575dcec055791bd/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/0852f8d21dfbea00022e06fd2575dcec055791bd/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/MavenProject.java?ref=0852f8d21dfbea00022e06fd2575dcec055791bd",
                "patch": "@@ -250,10 +250,12 @@ public MavenProject( Model model, RepositorySystem repositorySystem, ProjectBuil\n         for ( Dependency d : getDependencies() )\n         {\n             Artifact dependencyArtifact = repositorySystem.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(), d.getScope(), d.getType() );\n-\n-            if ( filter.include( dependencyArtifact ) )\n+            if ( filter != null )\n             {\n-                artifacts.add( dependencyArtifact );\n+                if ( filter.include( dependencyArtifact ) )\n+                {\n+                    artifacts.add( dependencyArtifact );\n+                }\n             }\n         }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Prevented NPEs in downstream code\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778126 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a2170b03c688f3e73ee428969e02b7fe6427dd09",
        "parent": "https://github.com/apache/maven/commit/a28bb83b5448a85884fc4ca87ca593a1396e86ef",
        "bug_id": "maven_44",
        "file": [
            {
                "sha": "5dc10d7ed0b6b31d5c6a047d51946f55463419aa",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "blob_url": "https://github.com/apache/maven/blob/a2170b03c688f3e73ee428969e02b7fe6427dd09/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "raw_url": "https://github.com/apache/maven/raw/a2170b03c688f3e73ee428969e02b7fe6427dd09/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java?ref=a2170b03c688f3e73ee428969e02b7fe6427dd09",
                "patch": "@@ -71,6 +71,10 @@ public ArtifactRepository getLocalRepository()\n         \n     public List<ArtifactRepository> getRemoteRepositories()\n     {\n+        if ( remoteRepositories == null )\n+        {\n+            remoteRepositories = new ArrayList<ArtifactRepository>();\n+        }\n         return remoteRepositories;\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Prevented NPEs in downstream code\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@777957 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/ba57376e69e28a67f2300f4d086d3b124735ffe8",
        "parent": "https://github.com/apache/maven/commit/f17f9aa639e34fd2e5dbb9a72322acaacefe6fea",
        "bug_id": "maven_45",
        "file": [
            {
                "sha": "0f77e1d23f0e51413d06727f81c05932a329bc98",
                "filename": "maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "blob_url": "https://github.com/apache/maven/blob/ba57376e69e28a67f2300f4d086d3b124735ffe8/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "raw_url": "https://github.com/apache/maven/raw/ba57376e69e28a67f2300f4d086d3b124735ffe8/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/DefaultProjectBuilderConfiguration.java?ref=ba57376e69e28a67f2300f4d086d3b124735ffe8",
                "patch": "@@ -82,6 +82,10 @@ public ProjectBuilderConfiguration setRemoteRepositories( List<ArtifactRepositor\n     \n     public Properties getExecutionProperties()\n     {\n+        if ( executionProperties == null )\n+        {\n+            executionProperties = new Properties();\n+        }\n         return executionProperties;\n     }\n \n@@ -115,6 +119,10 @@ public ProjectBuilderConfiguration setProcessPlugins( boolean processPlugins )\n \n     public List<String> getActiveProfileIds()\n     {\n+        if ( activeProfileIds == null )\n+        {\n+            activeProfileIds = new ArrayList<String>();\n+        }\n         return activeProfileIds;        \n     }\n \n@@ -125,6 +133,10 @@ public void setActiveProfileIds( List<String> activeProfileIds )\n \n     public List<String> getInactiveProfileIds()\n     {\n+        if ( inactiveProfileIds == null )\n+        {\n+            inactiveProfileIds = new ArrayList<String>();\n+        }\n         return inactiveProfileIds;\n     }\n \n@@ -150,6 +162,11 @@ public void addProfile( Profile profile )\n \n     public List<Profile> getProfiles()\n     {\n+        if ( profiles == null )\n+        {\n+            profiles = new ArrayList<Profile>();\n+        }\n         return profiles;\n     }\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Saved clients from NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@775303 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/6f57526dfd8c67c3363e565f62ff129139e0c7ad",
        "parent": "https://github.com/apache/maven/commit/3aac2d6d442f66978508033516f1ac56a505b4c7",
        "bug_id": "maven_46",
        "file": [
            {
                "sha": "09b2e79b257c3741b2ee3a418b51a276a59cf06c",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/6f57526dfd8c67c3363e565f62ff129139e0c7ad/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/6f57526dfd8c67c3363e565f62ff129139e0c7ad/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=6f57526dfd8c67c3363e565f62ff129139e0c7ad",
                "patch": "@@ -179,6 +179,11 @@ public File getLocalRepositoryPath()\n \n     public Properties getProperties()\n     {\n+        if ( properties == null )\n+        {\n+            properties = new Properties();\n+        }\n+\n         return properties;\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "added UT to test for another broken condition - NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@768354 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/ad1e062754d1418ea59bc032a1d303d9b669ebcd",
        "parent": "https://github.com/apache/maven/commit/ae4bee951a7c3ef70ef2d24390c43b0c9b207ac4",
        "bug_id": "maven_47",
        "file": [
            {
                "sha": "02d641a9ce0cdf4191e15e03123cdeb6ac86478f",
                "filename": "maven-mercury/src/test/java/org/apache/maven/mercury/MavenDependencyProcessorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/ad1e062754d1418ea59bc032a1d303d9b669ebcd/maven-mercury/src/test/java/org/apache/maven/mercury/MavenDependencyProcessorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/ad1e062754d1418ea59bc032a1d303d9b669ebcd/maven-mercury/src/test/java/org/apache/maven/mercury/MavenDependencyProcessorTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-mercury/src/test/java/org/apache/maven/mercury/MavenDependencyProcessorTest.java?ref=ad1e062754d1418ea59bc032a1d303d9b669ebcd",
                "patch": "@@ -154,5 +154,40 @@ public void testMavenVersion()\n         \n         assertEquals( ArtifactScopeEnum.compile, md.getArtifactScope() );\n     }\n+    @Test\n+    public void testForNPE()\n+    throws Exception\n+    {\n+        RepositoryReader rr = _remoteRepo.getReader();\n+ \n+//        String gav = \"org.apache.maven.plugins:maven-dependency-plugin:2.0\";\n+        String gav = \"org.codehaus.plexus:plexus-compiler-api:1.5.3::jar\";\n+ \n+        ArtifactMetadata bmd = new ArtifactMetadata( gav );\n+        ArrayList<ArtifactMetadata> query = new ArrayList<ArtifactMetadata>(1);\n+        query.add( bmd );\n+ \n+        MetadataResults res = rr.readDependencies( query );\n+ \n+        assertNotNull( res );\n+ \n+        assertFalse( res.hasExceptions() );\n+ \n+        assertTrue( res.hasResults() );\n+ \n+        List<ArtifactMetadata> deps = res.getResult( bmd );\n+ \n+        assertNotNull( deps );\n  \n+        assertFalse( deps.isEmpty() );\n+        \n+        ArtifactMetadata md = deps.get(0); \n+\n+        System.out.println(\"found \"+gav+\" dependencies: \"+deps);\n+        \n+//        assertEquals( \"3.0\", md.getVersion() );\n+        \n+//        assertEquals( ArtifactScopeEnum.compile, md.getArtifactScope() );\n+    }\n+    \n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE due to uninitialized field\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@751046 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a3a2e77da3b694e12085d6fa3607c76ad81dfb17",
        "parent": "https://github.com/apache/maven/commit/5678f1719884c253f331d688d11274c43d790e3d",
        "bug_id": "maven_48",
        "file": [
            {
                "sha": "e15ba5fb8ffbff132f20d4a36a165382682fad66",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/a3a2e77da3b694e12085d6fa3607c76ad81dfb17/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/a3a2e77da3b694e12085d6fa3607c76ad81dfb17/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 12,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=a3a2e77da3b694e12085d6fa3607c76ad81dfb17",
                "patch": "@@ -157,8 +157,6 @@\n     \n     private Map pluginDefinitionsByPrefix = new HashMap();\n     \n-    private Context containerContext;\n-    \n     public DefaultPluginManager()\n     {\n         pluginDescriptorBuilder = new PluginDescriptorBuilder();\n@@ -1988,7 +1986,9 @@ public PluginDescriptor loadIsolatedPluginDescriptor( Plugin plugin, MavenProjec\n \n         try\n         {\n-            List componentSetDescriptors = RealmScanningUtils.scanForComponentSetDescriptors( artifact, discoverer, containerContext, \"Plugin: \" + plugin.getKey() );\n+            List componentSetDescriptors =\n+                RealmScanningUtils.scanForComponentSetDescriptors( artifact, discoverer, container.getContext(),\n+                                                                   \"Plugin: \" + plugin.getKey() );\n \n             if ( !componentSetDescriptors.isEmpty() )\n             {\n@@ -2002,12 +2002,6 @@ public PluginDescriptor loadIsolatedPluginDescriptor( Plugin plugin, MavenProjec\n \n         return null;\n     }\n-\n-    public void contextualize( Context context )\n-        throws ContextException\n-    {\n-        containerContext = context;\n-    }\n     \n     // Plugin Mapping Manager\n     ",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE in plugin manager\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@750917 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/7f16ba74d76bd663ebeb5b3a38f4262a6475b2ca",
        "parent": "https://github.com/apache/maven/commit/ba677b1fb9b0f456b6e52b2e87fc28b063cc288f",
        "bug_id": "maven_49",
        "file": [
            {
                "sha": "619091ac2767e7db3a7894c424e9d3bec8a2572f",
                "filename": "maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java",
                "blob_url": "https://github.com/apache/maven/blob/7f16ba74d76bd663ebeb5b3a38f4262a6475b2ca/maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java",
                "raw_url": "https://github.com/apache/maven/raw/7f16ba74d76bd663ebeb5b3a38f4262a6475b2ca/maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/artifact/resolver/ArtifactResolutionResult.java?ref=7f16ba74d76bd663ebeb5b3a38f4262a6475b2ca",
                "patch": "@@ -86,7 +86,7 @@ public void addArtifact( Artifact artifact )\n \n     public Set<Artifact> getArtifacts()\n     {\n-        return artifacts;\n+        return ( artifacts != null ) ? artifacts : Collections.<Artifact> emptySet();\n     }\n \n     public void addRequestedArtifact( Artifact artifact )",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@749293 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/494b72ea2c4fdeff060c32b71a786ce011af5ab8",
        "parent": "https://github.com/apache/maven/commit/612a1f3fea856a345921b22fd3e8a2b3ef05d1e6",
        "bug_id": "maven_50",
        "file": [
            {
                "sha": "d5fd1ab2fc6a50ff0dfd11d6b5cc15c6e2e9c6dc",
                "filename": "maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/494b72ea2c4fdeff060c32b71a786ce011af5ab8/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/494b72ea2c4fdeff060c32b71a786ce011af5ab8/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java?ref=494b72ea2c4fdeff060c32b71a786ce011af5ab8",
                "patch": "@@ -206,15 +206,15 @@ public MavenProject buildFromRepository( Artifact artifact, List remoteArtifactR\n         }\n         catch ( ArtifactResolutionException e )\n         {\n-            throw new ProjectBuildingException( project.getId(), \"Error resolving project artifact.\", e );\n+            throw new ProjectBuildingException( artifact.getId(), \"Error resolving project artifact.\", e );\n         }\n         catch ( ArtifactNotFoundException e )\n         {\n-            throw new ProjectBuildingException( project.getId(), \"Error finding project artifact.\", e );\n+            throw new ProjectBuildingException( artifact.getId(), \"Error finding project artifact.\", e );\n         }\n         catch ( InvalidRepositoryException e )\n         {\n-            throw new ProjectBuildingException( project.getId(), \"Error with repository specified in project.\", e );\n+            throw new ProjectBuildingException( artifact.getId(), \"Error with repository specified in project.\", e );\n         }\n \n         ProjectBuilderConfiguration config = new DefaultProjectBuilderConfiguration().setLocalRepository( localRepository );",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-3919: NPE in DefaultLifecycleBindingManager\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@740468 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/cb077dc469f989707b1bae096db86863e0b970b3",
        "parent": "https://github.com/apache/maven/commit/5eaab2785789765b79311f0716523a11464317b6",
        "bug_id": "maven_51",
        "file": [
            {
                "sha": "26e0f3d2f538ccb3ee4f9f13f17c8a14c96e509a",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "blob_url": "https://github.com/apache/maven/blob/cb077dc469f989707b1bae096db86863e0b970b3/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "raw_url": "https://github.com/apache/maven/raw/cb077dc469f989707b1bae096db86863e0b970b3/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/binding/DefaultLifecycleBindingManager.java?ref=cb077dc469f989707b1bae096db86863e0b970b3",
                "patch": "@@ -248,6 +248,12 @@ public LifecycleBindings getProjectCustomBindings( final MavenProject project, f\n                                         }\n \n                                         MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );\n+                                        if(mojoDescriptor == null)\n+                                        {\n+                                            throw new LifecycleSpecificationException( \"Mojo Descriptor for goal is invalid: Plugin = \"\n+                                                    + plugin.getKey() + \", Plugin Descriptor = \"\n+                                                    + pluginDescriptor.getPluginLookupKey() +\", Goal = \" + goal);\n+                                        }\n                                         phase = mojoDescriptor.getPhase();\n \n                                         logger.debug( \"Phase from plugin descriptor: \" + mojoDescriptor.getFullGoalName() + \" is: \" + phase );",
                "deletions": 0
            },
            {
                "sha": "c37be679b4a45b72d59dd9e5bee9142c8dc427cc",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "status": "modified",
                "changes": 22,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java?ref=cb077dc469f989707b1bae096db86863e0b970b3",
                "patch": "@@ -264,18 +264,20 @@ private static boolean handleLifecycleExecutionException( LifecycleExecutionExce\n         handleGenericException( e, showStackTraces, writer );\n \n         MavenProject project = e.getProject();\n-\n-        writer.write( NEWLINE );\n-        writer.write( \"While building project with id: \" );\n-        writer.write( project.getId() );\n-        writer.write( NEWLINE );\n-        if ( project.getFile() != null )\n+        if(project != null)\n         {\n-            writer.write( \"Project File: \" );\n-            writer.write( project.getFile().getAbsolutePath() );\n+            writer.write( NEWLINE );\n+            writer.write( \"While building project with id: \" );\n+            writer.write( project.getId() );\n+            writer.write( NEWLINE );\n+            if ( project.getFile() != null )\n+            {\n+                writer.write( \"Project File: \" );\n+                writer.write( project.getFile().getAbsolutePath() );\n+            }\n+            writer.write( NEWLINE );\n         }\n-        writer.write( NEWLINE );\n-\n+        \n         return true;\n     }\n ",
                "deletions": 10
            },
            {
                "sha": "64ff05fb15ed5d17c86a5b242f5768b781ca7632",
                "filename": "maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "blob_url": "https://github.com/apache/maven/blob/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "raw_url": "https://github.com/apache/maven/raw/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java?ref=cb077dc469f989707b1bae096db86863e0b970b3",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.maven.settings.SettingsConfigurationException;\n import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;\n import org.apache.maven.settings.io.xpp3.SettingsXpp3Writer;\n+import org.apache.maven.lifecycle.LifecycleSpecificationException;\n import org.codehaus.plexus.util.FileUtils;\n import org.codehaus.plexus.util.IOUtil;\n import org.codehaus.plexus.util.ReaderFactory;\n@@ -57,6 +58,7 @@\n \n     protected MavenEmbedder maven;\n \n+\n     protected void setUp()\n         throws Exception\n     {\n@@ -134,6 +136,30 @@ public void testExecutionUsingABaseDirectory()\n         assertTrue( jar.exists() );\n     }\n \n+    /*MNG-3919*/\n+    public void testWithInvalidGoal()\n+        throws Exception\n+    {\n+        File testDirectory = new File( basedir, \"src/test/projects/invalid-goal\" );\n+\n+        File targetDirectory = new File( basedir, \"target/projects/invalid-goal\" );\n+\n+        FileUtils.copyDirectoryStructure( testDirectory, targetDirectory );\n+\n+        MavenExecutionRequest request = new DefaultMavenExecutionRequest().setBaseDirectory( targetDirectory )\n+            .setShowErrors( true ).setGoals( Arrays.asList( new String[]{\"validate\"} ) );\n+\n+        MavenExecutionResult result = maven.execute( request );\n+        List exceptions = result.getExceptions();\n+        assertEquals(\"Incorrect number of exceptions\", 1, exceptions.size());\n+\n+        Iterator it = exceptions.iterator();\n+        if( (it.next() instanceof NullPointerException))\n+        {\n+            fail(\"Null Pointer on Exception\");\n+        }\n+    }\n+\n     public void testExecutionUsingAPomFile()\n         throws Exception\n     {",
                "deletions": 0
            },
            {
                "sha": "d72b515ad3a1201c519ef84d29026fae61db4323",
                "filename": "maven-embedder/src/test/projects/invalid-goal/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/test/projects/invalid-goal/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/cb077dc469f989707b1bae096db86863e0b970b3/maven-embedder/src/test/projects/invalid-goal/pom.xml",
                "status": "added",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/test/projects/invalid-goal/pom.xml?ref=cb077dc469f989707b1bae096db86863e0b970b3",
                "patch": "@@ -0,0 +1,49 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <groupId>org.apache.maven.its.mng</groupId>\n+  <artifactId>test1</artifactId>\n+  <version>1.0-SNAPSHOT</version>\n+\n+  <packaging>jar</packaging>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-site-plugin</artifactId>\n+        <version>2.0-beta-7</version>\n+\n+        <executions>\n+          <execution>\n+            <goals>\n+              <goal>invalid-goal</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+    </plugins>\n+  </build>\n+</project>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-3973] masked NPE when parent metadata cannot be found\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@732937 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/8cd715bc5ebb2beb1b70d42a1be6b75f9112fea9",
        "parent": "https://github.com/apache/maven/commit/fe6d32bd6cd715b4517f9eeef1f492812a8bd609",
        "bug_id": "maven_52",
        "file": [
            {
                "sha": "654aab51c440c4826094be1fa416ea4b7e2de71f",
                "filename": "maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java",
                "blob_url": "https://github.com/apache/maven/blob/8cd715bc5ebb2beb1b70d42a1be6b75f9112fea9/maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java",
                "raw_url": "https://github.com/apache/maven/raw/8cd715bc5ebb2beb1b70d42a1be6b75f9112fea9/maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-mercury/src/main/java/org/apache/maven/mercury/MavenDependencyProcessor.java?ref=8cd715bc5ebb2beb1b70d42a1be6b75f9112fea9",
                "patch": "@@ -106,7 +106,12 @@\n                 domainModels.add( new MavenDomainModel( transformProfiles( mc.getProperties() ) ) );\n             }\n \n-            domainModels.addAll( getParentsOfDomainModel( domainModel, mdReader ) );\n+            List<DomainModel> parentModels = getParentsOfDomainModel( domainModel, mdReader );\n+            \n+            if( parentModels == null )\n+                throw new DependencyProcessorException( \"cannor read parent for \" + bmd.getGAV() );\n+            \n+            domainModels.addAll( parentModels );\n         }\n         catch ( IOException e )\n         {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "guard against NPE when the exception was dumped\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@725563 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/87e5a9acf33cde2b6e89084ca7166be07a18e090",
        "parent": "https://github.com/apache/maven/commit/2d0093ee202f009edd6118513dac10cdac03ef53",
        "bug_id": "maven_53",
        "file": [
            {
                "sha": "57576654efdeeb858da39d8625e29d299959764e",
                "filename": "maven-core/src/main/java/org/apache/maven/listeners/BuildExtensionListener.java",
                "blob_url": "https://github.com/apache/maven/blob/87e5a9acf33cde2b6e89084ca7166be07a18e090/maven-core/src/main/java/org/apache/maven/listeners/BuildExtensionListener.java",
                "raw_url": "https://github.com/apache/maven/raw/87e5a9acf33cde2b6e89084ca7166be07a18e090/maven-core/src/main/java/org/apache/maven/listeners/BuildExtensionListener.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/listeners/BuildExtensionListener.java?ref=87e5a9acf33cde2b6e89084ca7166be07a18e090",
                "patch": "@@ -142,17 +142,17 @@ public void processModelContainers( MavenSession session )\n             try\n             {\n                 result = pluginManager.resolve( request );\n+\n+                ClassRealm realm = pluginManager.createClassRealm( result.getArtifacts() );\n+\n+                realm.display();\n+            \n+                List<ComponentDescriptor<?>> components = pluginManager.discoverComponents( realm );            \n             }\n             catch ( Exception e )\n             {\n                 e.printStackTrace();\n             }\n-\n-            ClassRealm realm = pluginManager.createClassRealm( result.getArtifacts() );\n-\n-            realm.display();\n-            \n-            List<ComponentDescriptor<?>> components = pluginManager.discoverComponents( realm );            \n         }\n     } \n     ",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Throw illegal argument, not NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@721640 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/7b974639d5dbe4382905336166d8c16407445212",
        "parent": "https://github.com/apache/maven/commit/b1f8050277e93c0b60e6a3376ff88d83c905b41c",
        "bug_id": "maven_54",
        "file": [
            {
                "sha": "731f742894730c4fdbced6f951e03df11cd493f0",
                "filename": "maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "blob_url": "https://github.com/apache/maven/blob/7b974639d5dbe4382905336166d8c16407445212/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "raw_url": "https://github.com/apache/maven/raw/7b974639d5dbe4382905336166d8c16407445212/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-compat/src/main/java/org/apache/maven/artifact/manager/DefaultWagonManager.java?ref=7b974639d5dbe4382905336166d8c16407445212",
                "patch": "@@ -749,7 +749,7 @@ public ArtifactRepository getMirrorRepository( ArtifactRepository repository )\n                 id = repository.getId();\n             }\n \n-            getLogger().info( \"Using mirror: \" + mirror.getId() + \" for repository: \" + repository.getId() + \"\\n(mirror url: \" + mirror.getUrl() + \")\" );\n+            getLogger().debug( \"Using mirror: \" + mirror.getId() + \" for repository: \" + repository.getId() + \"\\n(mirror url: \" + mirror.getUrl() + \")\" );\n             repository = repositoryFactory.createArtifactRepository( id, mirror.getUrl(),\n                                                                      repository.getLayout(), repository.getSnapshots(),\n                                                                      repository.getReleases() );",
                "deletions": 1
            },
            {
                "sha": "937849cad22ab59e72c58d613cc62cc10b5764a5",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/binding/LegacyLifecycleMappingParser.java",
                "blob_url": "https://github.com/apache/maven/blob/7b974639d5dbe4382905336166d8c16407445212/maven-core/src/main/java/org/apache/maven/lifecycle/binding/LegacyLifecycleMappingParser.java",
                "raw_url": "https://github.com/apache/maven/raw/7b974639d5dbe4382905336166d8c16407445212/maven-core/src/main/java/org/apache/maven/lifecycle/binding/LegacyLifecycleMappingParser.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/binding/LegacyLifecycleMappingParser.java?ref=7b974639d5dbe4382905336166d8c16407445212",
                "patch": "@@ -35,6 +35,11 @@\n     public LifecycleBindings parseDefaultMappings( final List lifecycles )\n         throws LifecycleSpecificationException\n     {\n+        if( lifecycles == null )\n+        {\n+            throw new IllegalArgumentException(\"lifecycles: null\");\n+        }\n+        \n         LifecycleBindings bindings = new LifecycleBindings();\n \n         bindings.setPackaging( \"unmatched\" );",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Updated URIs for transformer. fixed NPE on preprocess.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@719485 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/5400908c569fb41b05aea36ac7955194f1ceb3da",
        "parent": "https://github.com/apache/maven/commit/dae9c8fdb7a4f4cb7c1195e666883fc1a5d2af72",
        "bug_id": "maven_55",
        "file": [
            {
                "sha": "e82d1eb72f77738dd33c57caef3b16f415cb2da2",
                "filename": "maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java",
                "blob_url": "https://github.com/apache/maven/blob/5400908c569fb41b05aea36ac7955194f1ceb3da/maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java",
                "raw_url": "https://github.com/apache/maven/raw/5400908c569fb41b05aea36ac7955194f1ceb3da/maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java",
                "status": "modified",
                "changes": 36,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project-builder/src/main/java/org/apache/maven/project/builder/PomTransformer.java?ref=5400908c569fb41b05aea36ac7955194f1ceb3da",
                "patch": "@@ -41,17 +41,17 @@ public PomTransformer(DomainModelFactory factory)\n     /**\r\n      * The URIs this transformer supports\r\n      */\r\n-    public static final Set<String> URIS = Collections.unmodifiableSet(new HashSet<String>( Arrays.asList( ProjectUri.Build.Extensions.xUri,\r\n+    public static final Set<String> URIS = Collections.unmodifiableSet(new HashSet<String>( Arrays.asList(  ProjectUri.Build.Extensions.xUri,\r\n                                                                           ProjectUri.Build.PluginManagement.Plugins.xUri,\r\n                                                                           ProjectUri.Build.PluginManagement.Plugins.Plugin.configuration,\r\n                                                                           ProjectUri.Build.PluginManagement.Plugins.Plugin.Dependencies.xUri,\r\n                                                                           ProjectUri.Build.PluginManagement.Plugins.Plugin.Dependencies.Dependency.Exclusions.xUri,\r\n-                                                                          ProjectUri.Build.PluginManagement.Plugins.Plugin.Executions.xUri,\r\n \r\n                                                                           ProjectUri.Build.Plugins.xUri,\r\n                                                                           ProjectUri.Build.Plugins.Plugin.configuration,\r\n+                                                                          ProjectUri.Reporting.Plugins.xUri,\r\n+                                                                          ProjectUri.Reporting.Plugins.Plugin.configuration,\r\n                                                                           ProjectUri.Build.Plugins.Plugin.Dependencies.xUri,\r\n-                                                                          ProjectUri.Build.Plugins.Plugin.Executions.xUri,\r\n                                                                           ProjectUri.Build.Resources.xUri,\r\n                                                                           ProjectUri.Build.Resources.Resource.includes,\r\n                                                                           ProjectUri.Build.Resources.Resource.excludes,\r\n@@ -77,33 +77,32 @@ public PomTransformer(DomainModelFactory factory)\n                                                                           ProjectUri.Profiles.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Build.Plugins.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Build.Plugins.Plugin.Dependencies.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.Build.Plugins.Plugin.Executions.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Build.Resources.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Build.TestResources.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Dependencies.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Dependencies.Dependency.Exclusions.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.DependencyManagement.Dependencies.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.DependencyManagement.Dependencies.Dependency.Exclusions.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.PluginRepositories.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Reporting.Plugins.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.Reporting.Plugins.Plugin.ReportSets.xUri,\r\n                                                                           ProjectUri.Profiles.Profile.Repositories.xUri,\r\n \r\n+                                                                          ProjectUri.Profiles.Profile.Build.PluginManagement.Plugins.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.Build.PluginManagement.Plugins.Plugin.Executions.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.Build.PluginManagement.Plugins.Plugin.Dependencies.xUri,\r\n+                                                                          ProjectUri.Profiles.Profile.Build.PluginManagement.Plugins.Plugin.Dependencies.Dependency.Exclusions.xUri,\r\n+\r\n                                                                           ProjectUri.Reporting.Plugins.xUri,\r\n                                                                           ProjectUri.Reporting.Plugins.Plugin.ReportSets.xUri,\r\n \r\n-                                                                          ProjectUri.Repositories.xUri,\r\n-\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/pluginManagement/plugins/plugin/dependencies#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/pluginManagement/plugins/plugin/dependencies/dependency/exclusions#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/pluginManagement/plugins/plugin/executions#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/pluginManagement/plugins#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/plugins/plugin/dependencies/dependency/exclusions#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/dependencyManagement/dependencies/dependency/exclusions#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/reporting/plugins/plugin/reportSets#collection\",\r\n-                                                                          \"http://apache.org/maven/project/profiles/profile/build/plugins/plugin/executions#collection\" ) ));\r\n+                                                                          ProjectUri.Repositories.xUri) ));\r\n \r\n     /**\r\n-     * @see ModelTransformer#transformToDomainModel(java.util.List)\r\n+     * @see ModelTransformer#transformToDomainModel(java.util.List, java.util.List)\r\n      */\r\n-    public DomainModel transformToDomainModel( List<ModelProperty> properties, List<ModelEventListener> eventListeners )\r\n+    public DomainModel transformToDomainModel( List<ModelProperty> properties,  List<ModelEventListener> eventListeners )\r\n         throws IOException\r\n     {\r\n         if ( properties == null )\r\n@@ -209,7 +208,7 @@ public DomainModel transformToDomainModel( List<ModelProperty> properties, List<\n             }\r\n         }\r\n         props.removeAll( removeProperties );\r\n-        return factory.createDomainModel( props ); \r\n+        return factory.createDomainModel( props );\r\n     }\r\n \r\n     /**\r\n@@ -531,8 +530,9 @@ private static boolean hasExecutionId( ModelContainer executionContainer )\n         return false;\r\n     }\r\n \r\n-    public List<ModelProperty> preprocessModelProperties(List<ModelProperty> modelProperties) {\r\n-        return null;\r\n+    public List<ModelProperty> preprocessModelProperties(List<ModelProperty> modelProperties)\r\n+    {\r\n+        return new ArrayList<ModelProperty>(modelProperties);\r\n     }\r\n \r\n     /**\r",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o merged from r633053 (fixed potential NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@633054 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/80a6818f01eb55afc35550da158ae7a585d0f883",
        "parent": "https://github.com/apache/maven/commit/b19a75170489f61f6bed04b4986145c50d4bc5f3",
        "bug_id": "maven_56",
        "file": [
            {
                "sha": "9c182417415cb0be1dbee79981ae91b4d707c10a",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/80a6818f01eb55afc35550da158ae7a585d0f883/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/80a6818f01eb55afc35550da158ae7a585d0f883/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java",
                "status": "modified",
                "changes": 22,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/CLIReportingUtils.java?ref=80a6818f01eb55afc35550da158ae7a585d0f883",
                "patch": "@@ -53,18 +53,26 @@ static void showVersion()\n             Properties properties = new Properties();\n             resourceAsStream = MavenCli.class.getClassLoader()\n                                              .getResourceAsStream( \"META-INF/maven/org.apache.maven/maven-core/pom.properties\" );\n-            properties.load( resourceAsStream );\n \n-            if ( properties.getProperty( \"builtOn\" ) != null )\n+            if ( resourceAsStream != null )\n             {\n-                System.out.println( \"Maven version: \"\n-                                    + properties.getProperty( \"version\", \"unknown\" ) + \" built on \"\n-                                    + properties.getProperty( \"builtOn\" ) );\n+                properties.load( resourceAsStream );\n+\n+                if ( properties.getProperty( \"builtOn\" ) != null )\n+                {\n+                    System.out.println( \"Maven version: \"\n+                                        + properties.getProperty( \"version\", \"unknown\" ) + \" built on \"\n+                                        + properties.getProperty( \"builtOn\" ) );\n+                }\n+                else\n+                {\n+                    System.out.println( \"Maven version: \"\n+                                        + properties.getProperty( \"version\", \"unknown\" ) );\n+                }\n             }\n             else\n             {\n-                System.out.println( \"Maven version: \"\n-                                    + properties.getProperty( \"version\", \"unknown\" ) );\n+                System.out.println( \"Maven version: unknown\" );\n             }\n \n             System.out.println( \"Java version: \"",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fixed NPE in exception msg\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@591938 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/083a7dd4f04612fb9590f7f28199710c263e54a9",
        "parent": "https://github.com/apache/maven/commit/dbd357ffdf9d108a41ca224bbd1cb6b04f4f8016",
        "bug_id": "maven_57",
        "file": [
            {
                "sha": "14441192bf81770be7555e21444f51c622481b8b",
                "filename": "maven-project/src/main/java/org/apache/maven/project/ProjectBuildingException.java",
                "blob_url": "https://github.com/apache/maven/blob/083a7dd4f04612fb9590f7f28199710c263e54a9/maven-project/src/main/java/org/apache/maven/project/ProjectBuildingException.java",
                "raw_url": "https://github.com/apache/maven/raw/083a7dd4f04612fb9590f7f28199710c263e54a9/maven-project/src/main/java/org/apache/maven/project/ProjectBuildingException.java",
                "status": "modified",
                "changes": 15,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/ProjectBuildingException.java?ref=083a7dd4f04612fb9590f7f28199710c263e54a9",
                "patch": "@@ -276,13 +276,20 @@ public URI getPomUri()\n     /**\n      * @deprecated use {@link #getPomUri()}\n      */\n-    public String getPomLocation()\n+    public String getPomLocation ()\n     {\n-        if ( \"file\".equals( getPomUri().getScheme() ) )\n+        if ( getPomUri() != null )\n         {\n-            return new File( getPomUri() ).getAbsolutePath();\n+            if ( \"file\".equals( getPomUri().getScheme() ) )\n+            {\n+                return new File( getPomUri() ).getAbsolutePath();\n+            }\n+            return getPomUri().toString();\n+        }\n+        else\n+        {\n+            return \"null\";\n         }\n-        return getPomUri().toString();\n     }\n \n     public String getProjectId()",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o fix typo causing NPE setting properties\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543756 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/885409f5693639c4db74f76cccbf6fed9dd6cd00",
        "parent": "https://github.com/apache/maven/commit/e8fc77cccd99d72608487de8aff7b0a1014ac3b7",
        "bug_id": "maven_58",
        "file": [
            {
                "sha": "295586448b460e13fa170b04b652e591eb978db9",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/885409f5693639c4db74f76cccbf6fed9dd6cd00/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/885409f5693639c4db74f76cccbf6fed9dd6cd00/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 21,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=885409f5693639c4db74f76cccbf6fed9dd6cd00",
                "patch": "@@ -267,7 +267,26 @@ public MavenExecutionRequest setLocalRepositoryPath( String localRepository )\n \n     public MavenExecutionRequest setProperties( Properties properties )\n     {\n-        this.properties = properties;\n+        if ( this.properties == null )\n+        {\n+            this.properties = properties;\n+        }\n+        else\n+        {\n+            this.properties.putAll( properties );\n+        }\n+\n+        return this;\n+    }\n+\n+    public MavenExecutionRequest setProperty( String key, String value )\n+    {\n+        if ( properties == null )\n+        {\n+            properties = new Properties();\n+        }\n+\n+        properties.setProperty( key, value );\n \n         return this;\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixing NPE in appendPath(..) when calculating '..' path adjustments.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@382849 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/138d77d3b0d05e96057148d2c50796ca206d4cf7",
        "parent": "https://github.com/apache/maven/commit/aaaf6537f6a686ffeeffb954cee12e47394537c7",
        "bug_id": "maven_59",
        "file": [
            {
                "sha": "218670e8cc19343d1a77491251c8765132552998",
                "filename": "maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
                "blob_url": "https://github.com/apache/maven/blob/138d77d3b0d05e96057148d2c50796ca206d4cf7/maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
                "raw_url": "https://github.com/apache/maven/raw/138d77d3b0d05e96057148d2c50796ca206d4cf7/maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/inheritance/DefaultModelInheritanceAssembler.java?ref=138d77d3b0d05e96057148d2c50796ca206d4cf7",
                "patch": "@@ -538,10 +538,16 @@ protected String appendPath( String parentPath, String childPath, String pathAdj\n                 lastToken = currentToken;\n                 currentToken = tokens.nextToken();\n \n-                if ( \"..\".equals( currentToken ) )\n+                if ( \"..\".equals( currentToken ) && lastToken != null )\n                 {\n-                    // trim the previous path part off...\n-                    cleanedPath.setLength( cleanedPath.length() - ( lastToken.length() + 1 ) );\n+                    int cleanedPathLen = cleanedPath.length();\n+                    int lastTokenLen = lastToken.length();\n+                    \n+                    if ( cleanedPathLen > lastTokenLen )\n+                    {\n+                        // trim the previous path part off...\n+                        cleanedPath.setLength( cleanedPath.length() - ( lastToken.length() + 1 ) );\n+                    }\n                 }\n                 else if ( !\".\".equals( currentToken ) )\n                 {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-2087] NPE in PluginXdocGenerator\nSubmitted by: Vincent Siveton\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@379310 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/33e508a29dd139b0c52eb8399e124b72bc63ee49",
        "parent": "https://github.com/apache/maven/commit/908d6624d47e1b4d1f93d139f7964cd3fdbcb0c2",
        "bug_id": "maven_60",
        "file": [
            {
                "sha": "6806fd4f71d7ee275560427491e0406a7554f445",
                "filename": "maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java",
                "blob_url": "https://github.com/apache/maven/blob/33e508a29dd139b0c52eb8399e124b72bc63ee49/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java",
                "raw_url": "https://github.com/apache/maven/raw/33e508a29dd139b0c52eb8399e124b72bc63ee49/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java",
                "status": "modified",
                "changes": 278,
                "additions": 142,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginXdocGenerator.java?ref=33e508a29dd139b0c52eb8399e124b72bc63ee49",
                "patch": "@@ -158,65 +158,68 @@ private void writeGoalTable( PluginDescriptor pluginDescriptor, XMLWriter w )\n \n         List mojos = pluginDescriptor.getMojos();\n \n-        for ( Iterator i = mojos.iterator(); i.hasNext(); )\n+        if ( mojos != null )\n         {\n-            MojoDescriptor mojo = (MojoDescriptor) i.next();\n+            for ( Iterator i = mojos.iterator(); i.hasNext(); )\n+            {\n+                MojoDescriptor mojo = (MojoDescriptor) i.next();\n \n-            w.startElement( \"tr\" );\n+                w.startElement( \"tr\" );\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            String paramName = mojo.getFullGoalName();\n+                String paramName = mojo.getFullGoalName();\n \n-            w.startElement( \"a\" );\n+                w.startElement( \"a\" );\n \n-            w.addAttribute( \"href\", getMojoFilename( mojo, \"html\" ) );\n+                w.addAttribute( \"href\", getMojoFilename( mojo, \"html\" ) );\n \n-            w.startElement( \"code\" );\n+                w.startElement( \"code\" );\n \n-            w.writeText( paramName );\n+                w.writeText( paramName );\n \n-            w.endElement();\n+                w.endElement();\n \n-            w.endElement();\n+                w.endElement();\n \n-            w.endElement();\n+                w.endElement();\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            if ( StringUtils.isNotEmpty( mojo.getDescription() ) )\n-            {\n-                w.writeMarkup( mojo.getDescription() );\n-            }\n-            else\n-            {\n-                w.writeText( \"No description.\" );\n-            }\n+                if ( StringUtils.isNotEmpty( mojo.getDescription() ) )\n+                {\n+                    w.writeMarkup( mojo.getDescription() );\n+                }\n+                else\n+                {\n+                    w.writeText( \"No description.\" );\n+                }\n \n-            String deprecationWarning = mojo.getDeprecated();\n-            if ( deprecationWarning != null )\n-            {\n-                w.writeMarkup( \"<br/><b>Deprecated:</b> \" );\n-                w.writeMarkup( deprecationWarning );\n-                if ( deprecationWarning.length() == 0 )\n+                String deprecationWarning = mojo.getDeprecated();\n+                if ( deprecationWarning != null )\n                 {\n-                    w.writeText( \"No reason given.\" );\n+                    w.writeMarkup( \"<br/><b>Deprecated:</b> \" );\n+                    w.writeMarkup( deprecationWarning );\n+                    if ( deprecationWarning.length() == 0 )\n+                    {\n+                        w.writeText( \"No reason given.\" );\n+                    }\n+\n+                    w.endElement();\n                 }\n \n                 w.endElement();\n-            }\n \n-            w.endElement();\n-\n-            w.endElement();\n+                w.endElement();\n+            }\n         }\n \n         w.endElement();\n@@ -323,143 +326,146 @@ private void writeGoalParameterTable( MojoDescriptor mojoDescriptor, XMLWriter w\n \n         List parameters = mojoDescriptor.getParameters();\n \n-        for ( int i = 0; i < parameters.size(); i++ )\n+        if ( parameters != null )\n         {\n-            Parameter parameter = (Parameter) parameters.get( i );\n+            for ( int i = 0; i < parameters.size(); i++ )\n+            {\n+                Parameter parameter = (Parameter) parameters.get( i );\n \n-            w.startElement( \"tr\" );\n+                w.startElement( \"tr\" );\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            String paramName = parameter.getAlias();\n+                String paramName = parameter.getAlias();\n \n-            if ( StringUtils.isEmpty( paramName ) )\n-            {\n-                paramName = parameter.getName();\n-            }\n+                if ( StringUtils.isEmpty( paramName ) )\n+                {\n+                    paramName = parameter.getName();\n+                }\n \n-            w.startElement( \"code\" );\n+                w.startElement( \"code\" );\n \n-            w.writeText( paramName );\n+                w.writeText( paramName );\n \n-            w.endElement(); // code\n+                w.endElement(); // code\n \n-            if ( !parameter.isRequired() )\n-            {\n-                w.writeMarkup( \" <i>(Optional)</i>\" );\n-            }\n+                if ( !parameter.isRequired() )\n+                {\n+                    w.writeMarkup( \" <i>(Optional)</i>\" );\n+                }\n \n-            if ( parameter.getExpression() != null && parameter.getExpression().startsWith( \"${component.\" ) )\n-            {\n-                w.writeMarkup( \" <i>(Discovered)</i>\" );\n-            }\n-            else if ( parameter.getRequirement() != null )\n-            {\n-                w.writeMarkup( \" <i>(Discovered)</i>\" );\n-            }\n+                if ( parameter.getExpression() != null && parameter.getExpression().startsWith( \"${component.\" ) )\n+                {\n+                    w.writeMarkup( \" <i>(Discovered)</i>\" );\n+                }\n+                else if ( parameter.getRequirement() != null )\n+                {\n+                    w.writeMarkup( \" <i>(Discovered)</i>\" );\n+                }\n \n-            w.endElement(); // td\n+                w.endElement(); // td\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            w.startElement( \"code\" );\n+                w.startElement( \"code\" );\n \n-            w.addAttribute( \"title\", parameter.getType() );\n+                w.addAttribute( \"title\", parameter.getType() );\n \n-            int index = parameter.getType().lastIndexOf( \".\" );\n-            if ( index >= 0 )\n-            {\n-                w.writeText( parameter.getType().substring( index + 1 ) );\n-            }\n-            else\n-            {\n-                w.writeText( parameter.getType() );\n-            }\n+                int index = parameter.getType().lastIndexOf( \".\" );\n+                if ( index >= 0 )\n+                {\n+                    w.writeText( parameter.getType().substring( index + 1 ) );\n+                }\n+                else\n+                {\n+                    w.writeText( parameter.getType() );\n+                }\n \n-            w.endElement(); // code\n+                w.endElement(); // code\n \n-            w.endElement(); // td\n+                w.endElement(); // td\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            w.startElement( \"code\" );\n+                w.startElement( \"code\" );\n \n-            if ( StringUtils.isNotEmpty( parameter.getExpression() ) &&\n-                !parameter.getExpression().startsWith( \"${component.\" ) )\n-            {\n-                w.writeText( parameter.getExpression() );\n-            }\n-            else\n-            {\n-                w.writeText( \"-\" );\n-            }\n+                if ( StringUtils.isNotEmpty( parameter.getExpression() ) &&\n+                    !parameter.getExpression().startsWith( \"${component.\" ) )\n+                {\n+                    w.writeText( parameter.getExpression() );\n+                }\n+                else\n+                {\n+                    w.writeText( \"-\" );\n+                }\n \n-            w.endElement(); // code\n+                w.endElement(); // code\n \n-            w.endElement(); // td\n+                w.endElement(); // td\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            w.startElement( \"code\" );\n+                w.startElement( \"code\" );\n \n-            if ( StringUtils.isNotEmpty( parameter.getDefaultValue() ) )\n-            {\n-                w.writeText( parameter.getDefaultValue() );\n-            }\n-            else\n-            {\n-                w.writeText( \"-\" );\n-            }\n+                if ( StringUtils.isNotEmpty( parameter.getDefaultValue() ) )\n+                {\n+                    w.writeText( parameter.getDefaultValue() );\n+                }\n+                else\n+                {\n+                    w.writeText( \"-\" );\n+                }\n \n-            w.endElement(); // code\n+                w.endElement(); // code\n \n-            w.endElement(); // td\n+                w.endElement(); // td\n \n-            // ----------------------------------------------------------------------\n-            //\n-            // ----------------------------------------------------------------------\n+                // ----------------------------------------------------------------------\n+                //\n+                // ----------------------------------------------------------------------\n \n-            w.startElement( \"td\" );\n+                w.startElement( \"td\" );\n \n-            if ( StringUtils.isNotEmpty( parameter.getDescription() ) )\n-            {\n-                w.writeMarkup( parameter.getDescription() );\n-            }\n-            else\n-            {\n-                w.writeText( \"No description.\" );\n-            }\n+                if ( StringUtils.isNotEmpty( parameter.getDescription() ) )\n+                {\n+                    w.writeMarkup( parameter.getDescription() );\n+                }\n+                else\n+                {\n+                    w.writeText( \"No description.\" );\n+                }\n \n-            String deprecationWarning = parameter.getDeprecated();\n-            if ( deprecationWarning != null )\n-            {\n-                w.writeMarkup( \"<br/><b>Deprecated:</b> \" );\n-                w.writeMarkup( deprecationWarning );\n-                if ( deprecationWarning.length() == 0 )\n+                String deprecationWarning = parameter.getDeprecated();\n+                if ( deprecationWarning != null )\n                 {\n-                    w.writeText( \"No reason given.\" );\n+                    w.writeMarkup( \"<br/><b>Deprecated:</b> \" );\n+                    w.writeMarkup( deprecationWarning );\n+                    if ( deprecationWarning.length() == 0 )\n+                    {\n+                        w.writeText( \"No reason given.\" );\n+                    }\n                 }\n-            }\n \n-            w.endElement(); // td\n+                w.endElement(); // td\n \n-            w.endElement(); // tr\n+                w.endElement(); // tr\n+            }\n         }\n \n         w.endElement(); // table",
                "deletions": 136
            }
        ]
    },
    {
        "repo": "maven",
        "message": "PR: MNG-1721\n\nFixing NPE when error parameter is null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@350275 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/3230df32bf15f687ede04cb73f68a422ade6f2e8",
        "parent": "https://github.com/apache/maven/commit/2177e3763e47e2bea1e72f05cd9d7d043628b994",
        "bug_id": "maven_61",
        "file": [
            {
                "sha": "525640ca8cf8966f759f47970e339a480e95edd4",
                "filename": "maven-error-diagnostics/src/main/java/org/apache/maven/usability/diagnostics/DiagnosisUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/3230df32bf15f687ede04cb73f68a422ade6f2e8/maven-error-diagnostics/src/main/java/org/apache/maven/usability/diagnostics/DiagnosisUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/3230df32bf15f687ede04cb73f68a422ade6f2e8/maven-error-diagnostics/src/main/java/org/apache/maven/usability/diagnostics/DiagnosisUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-error-diagnostics/src/main/java/org/apache/maven/usability/diagnostics/DiagnosisUtils.java?ref=3230df32bf15f687ede04cb73f68a422ade6f2e8",
                "patch": "@@ -80,6 +80,11 @@ public static Throwable getFromCausality( Throwable error, Class targetClass )\n     public static void appendRootCauseIfPresentAndUnique( Throwable error, StringBuffer message,\n                                                           boolean includeTypeInfo )\n     {\n+        if ( error == null )\n+        {\n+            return;\n+        }\n+        \n         Throwable root = getRootCause( error );\n \n         if ( root != null && !root.equals( error ) )",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "prevent NPE in equals()\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@349699 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/b392f199fb8d60fa1f6a9c0c31e0da72f98e13d9",
        "parent": "https://github.com/apache/maven/commit/1bd7f792fcdd69c6b92b425f0d3b4c93815e0436",
        "bug_id": "maven_62",
        "file": [
            {
                "sha": "0e45e3296ce1754aacbdce5166816903ca623ea8",
                "filename": "maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "blob_url": "https://github.com/apache/maven/blob/b392f199fb8d60fa1f6a9c0c31e0da72f98e13d9/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "raw_url": "https://github.com/apache/maven/raw/b392f199fb8d60fa1f6a9c0c31e0da72f98e13d9/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact/src/main/java/org/apache/maven/artifact/DefaultArtifact.java?ref=b392f199fb8d60fa1f6a9c0c31e0da72f98e13d9",
                "patch": "@@ -305,7 +305,7 @@ else if ( !a.getType().equals( type ) )\n         {\n             return false;\n         }\n-        else if ( classifier == null ? a.getClassifier() != null : !a.getClassifier().equals( classifier ) )\n+        else if ( a.getClassifier() == null ? classifier != null : !a.getClassifier().equals( classifier ) )\n         {\n             return false;\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE when there is no cause\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312830 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/0ebf10aa03c7222a59767898d045135ea88e680b",
        "parent": "https://github.com/apache/maven/commit/d4aa23726f9fa4397732711e23b3cd3072bc7341",
        "bug_id": "maven_63",
        "file": [
            {
                "sha": "4074d1b99aad3bcf4a8ab3bd201746359f472ec6",
                "filename": "maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
                "blob_url": "https://github.com/apache/maven/blob/0ebf10aa03c7222a59767898d045135ea88e680b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
                "raw_url": "https://github.com/apache/maven/raw/0ebf10aa03c7222a59767898d045135ea88e680b/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-manager/src/main/java/org/apache/maven/artifact/repository/metadata/DefaultRepositoryMetadataManager.java?ref=0ebf10aa03c7222a59767898d045135ea88e680b",
                "patch": "@@ -301,7 +301,7 @@ private void resolveAlways( ArtifactMetadata metadata, ArtifactRepository reposi\n         catch ( TransferFailedException e )\n         {\n             getLogger().warn( metadata + \" could not be found on repository: \" + repository.getId() +\n-                \" due to an error: \" + e.getCause().getMessage() );\n+                \" due to an error: \" + e.getMessage() );\n             getLogger().info( \"Repository '\" + repository.getId() + \"' will be blacklisted\" );\n             getLogger().debug( \"Exception\", e );\n             repository.setBlacklisted( allowBlacklisting );",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "split command to narrow down NPE in integration environment\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291250 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/0fbd59f4f8caf0ad3a984a153ad057d0f3555641",
        "parent": "https://github.com/apache/maven/commit/15913ddde00b44de292b0ce7dbfb672525cc993f",
        "bug_id": "maven_64",
        "file": [
            {
                "sha": "af9642c4019164cb2e84f9d4c44a9de10eea36ba",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/0fbd59f4f8caf0ad3a984a153ad057d0f3555641/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/0fbd59f4f8caf0ad3a984a153ad057d0f3555641/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=0fbd59f4f8caf0ad3a984a153ad057d0f3555641",
                "patch": "@@ -143,6 +143,8 @@ public Plugin getPluginDefinitionForPrefix( String prefix, MavenSession session,\n         // use for the mapping manager in here\n         Settings settings = session.getSettings();\n         List pluginGroups = settings.getPluginGroups();\n+        if ( pluginMappingManager == null ) throw new NullPointerException( \"pluginMappingManager was null\" );\n+        if ( project == null ) throw new NullPointerException( \"project was null\" );\n         return pluginMappingManager.getByPrefix( prefix, pluginGroups, project.getPluginArtifactRepositories(),\n                                                  session.getLocalRepository() );\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "split command to narrow down NPE in integration environment\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291246 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/c24680e912033e4a6db7274ed59183b4f0d43032",
        "parent": "https://github.com/apache/maven/commit/3e264f80ba8757c3df16ecf1ba6c79c2e1c86df5",
        "bug_id": "maven_65",
        "file": [
            {
                "sha": "783dd7cdc9e15ae196cde4eed9a184408be97f84",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/c24680e912033e4a6db7274ed59183b4f0d43032/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/c24680e912033e4a6db7274ed59183b4f0d43032/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=c24680e912033e4a6db7274ed59183b4f0d43032",
                "patch": "@@ -141,8 +141,9 @@ public Plugin getPluginDefinitionForPrefix( String prefix, MavenSession session,\n     {\n         // TODO: since this is only used in the lifecycle executor, maybe it should be moved there? There is no other\n         // use for the mapping manager in here\n-        return pluginMappingManager.getByPrefix( prefix, session.getSettings().getPluginGroups(),\n-                                                 project.getPluginArtifactRepositories(),\n+        Settings settings = session.getSettings();\n+        List pluginGroups = settings.getPluginGroups();\n+        return pluginMappingManager.getByPrefix( prefix, pluginGroups, project.getPluginArtifactRepositories(),\n                                                  session.getLocalRepository() );\n     }\n \n@@ -271,7 +272,7 @@ protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject p\n         }\n \n         artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );\n-        \n+\n         if ( !pluginArtifact.isResolved() )\n         {\n             throw new PluginContainerException( plugin, \"Cannot resolve artifact for plugin.\" );",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE if there are no parameters in the mojo\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@234155 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/5d3ebf4434914a9f445a86ee1baaa24eed1ce212",
        "parent": "https://github.com/apache/maven/commit/3715ac2a6c4f41c10125656760963c7317c5cd3e",
        "bug_id": "maven_66",
        "file": [
            {
                "sha": "8a028983db95d425531bd05fc829e95000eecfe9",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/5d3ebf4434914a9f445a86ee1baaa24eed1ce212/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/5d3ebf4434914a9f445a86ee1baaa24eed1ce212/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 113,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=5d3ebf4434914a9f445a86ee1baaa24eed1ce212",
                "patch": "@@ -279,7 +279,7 @@ protected void addPlugin( Plugin plugin, Artifact pluginArtifact, MavenProject p\n         throws ArtifactResolutionException, PlexusContainerException\n     {\n         artifactResolver.resolve( pluginArtifact, project.getPluginArtifactRepositories(), localRepository );\n-        \n+\n         PlexusContainer child = container.createChildContainer( plugin.getKey(),\n                                                                 Collections.singletonList( pluginArtifact.getFile() ),\n                                                                 Collections.EMPTY_MAP,\n@@ -511,7 +511,7 @@ private Mojo getConfiguredMojo( MojoDescriptor mojoDescriptor, MavenSession sess\n         //                                                                          mojoDescriptor.getConfiguration() );\n \n         ExpressionEvaluator expressionEvaluator = new PluginParameterExpressionEvaluator( session, mojoDescriptor,\n-                                                                                          pathTranslator, getLogger(), \n+                                                                                          pathTranslator, getLogger(),\n                                                                                           project );\n \n         PlexusConfiguration extractedMojoConfiguration = extractMojoConfiguration( mergedConfiguration,\n@@ -769,7 +769,7 @@ private void checkRequiredParameters( MojoDescriptor goal, PlexusConfiguration c\n                 }\n \n                 // only mark as invalid if there are no child nodes\n-                if ( fieldValue == null && (value == null || value.getChildCount() == 0 ) )\n+                if ( fieldValue == null && ( value == null || value.getChildCount() == 0 ) )\n                 {\n                     parameter.setExpression( expression );\n                     invalidParameters.add( parameter );\n@@ -829,95 +829,98 @@ private void validatePomConfiguration( MojoDescriptor goal, PlexusConfiguration\n             }\n         }\n     }\n-    \n+\n     private PlexusConfiguration mergeMojoConfiguration( XmlPlexusConfiguration fromPom, MojoDescriptor mojoDescriptor )\n     {\n         XmlPlexusConfiguration result = new XmlPlexusConfiguration( fromPom.getName() );\n         result.setValue( fromPom.getValue( null ) );\n-        \n-        PlexusConfiguration fromMojo = mojoDescriptor.getMojoConfiguration();\n-        \n-        for ( Iterator it = mojoDescriptor.getParameters().iterator(); it.hasNext(); )\n-        {\n-            Parameter parameter = (Parameter) it.next();\n \n-            String paramName = parameter.getName();\n-            String alias = parameter.getAlias();\n+        if ( mojoDescriptor.getParameters() != null )\n+        {\n+            PlexusConfiguration fromMojo = mojoDescriptor.getMojoConfiguration();\n \n-            PlexusConfiguration pomConfig = fromPom.getChild( paramName );\n-            PlexusConfiguration aliased = null;\n-            \n-            if ( alias != null )\n+            for ( Iterator it = mojoDescriptor.getParameters().iterator(); it.hasNext(); )\n             {\n-                aliased = fromPom.getChild( alias );\n-            }\n-            \n-            PlexusConfiguration mojoConfig = fromMojo.getChild( paramName, false );\n-            \n-            // first we'll merge configurations from the aliased and real params.\n-            // TODO: Is this the right thing to do?\n-            if ( aliased != null )\n-            {\n-                if ( pomConfig == null )\n+                Parameter parameter = (Parameter) it.next();\n+\n+                String paramName = parameter.getName();\n+                String alias = parameter.getAlias();\n+\n+                PlexusConfiguration pomConfig = fromPom.getChild( paramName );\n+                PlexusConfiguration aliased = null;\n+\n+                if ( alias != null )\n                 {\n-                    pomConfig = new XmlPlexusConfiguration( paramName );\n+                    aliased = fromPom.getChild( alias );\n                 }\n-                \n-                pomConfig = buildTopDownMergedConfiguration( pomConfig, aliased );\n-            }\n-            \n-            boolean addedPomConfig = false;\n \n-            if ( pomConfig != null )\n-            {\n-                pomConfig = buildTopDownMergedConfiguration( pomConfig, mojoConfig );\n+                PlexusConfiguration mojoConfig = fromMojo.getChild( paramName, false );\n \n-                if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || pomConfig.getChildCount() > 0 )\n+                // first we'll merge configurations from the aliased and real params.\n+                // TODO: Is this the right thing to do?\n+                if ( aliased != null )\n                 {\n-                    result.addChild( pomConfig );\n-                    \n-                    addedPomConfig = true;\n+                    if ( pomConfig == null )\n+                    {\n+                        pomConfig = new XmlPlexusConfiguration( paramName );\n+                    }\n+\n+                    pomConfig = buildTopDownMergedConfiguration( pomConfig, aliased );\n+                }\n+\n+                boolean addedPomConfig = false;\n+\n+                if ( pomConfig != null )\n+                {\n+                    pomConfig = buildTopDownMergedConfiguration( pomConfig, mojoConfig );\n+\n+                    if ( StringUtils.isNotEmpty( pomConfig.getValue( null ) ) || pomConfig.getChildCount() > 0 )\n+                    {\n+                        result.addChild( pomConfig );\n+\n+                        addedPomConfig = true;\n+                    }\n+                }\n+\n+                if ( !addedPomConfig && mojoConfig != null )\n+                {\n+                    result.addChild( copyConfiguration( mojoConfig ) );\n                 }\n-            }\n-            \n-            if ( !addedPomConfig && mojoConfig != null )\n-            {\n-                result.addChild( copyConfiguration( mojoConfig ) );\n             }\n         }\n-        \n         return result;\n     }\n \n-    private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfiguration dominant, PlexusConfiguration recessive )\n+    private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfiguration dominant,\n+                                                                    PlexusConfiguration recessive )\n     {\n         XmlPlexusConfiguration result = new XmlPlexusConfiguration( dominant.getName() );\n-        \n+\n         String value = dominant.getValue( null );\n-        \n+\n         if ( StringUtils.isEmpty( value ) && recessive != null )\n         {\n             value = recessive.getValue( null );\n         }\n-        \n+\n         if ( StringUtils.isNotEmpty( value ) )\n         {\n             result.setValue( value );\n         }\n-        \n+\n         String[] attributeNames = dominant.getAttributeNames();\n-        \n+\n         for ( int i = 0; i < attributeNames.length; i++ )\n         {\n             String attributeValue = dominant.getAttribute( attributeNames[i], null );\n-            \n+\n             result.setAttribute( attributeNames[i], attributeValue );\n         }\n-        \n+\n         if ( recessive != null )\n         {\n             attributeNames = recessive.getAttributeNames();\n-            \n+\n             for ( int i = 0; i < attributeNames.length; i++ )\n             {\n                 String attributeValue = recessive.getAttribute( attributeNames[i], null );\n@@ -942,7 +945,7 @@ private XmlPlexusConfiguration buildTopDownMergedConfiguration( PlexusConfigurat\n                 result.addChild( copyConfiguration( childDom ) );\n             }\n         }\n-    \n+\n         return result;\n     }\n ",
                "deletions": 55
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fix NPE in dependencies report\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@220050 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/813a3b804011bcfd2838b04a40e57243ae2a16c7",
        "parent": "https://github.com/apache/maven/commit/186f48083f2de69745ac709611b28c2c57aa1509",
        "bug_id": "maven_67",
        "file": [
            {
                "sha": "bbb8d7d317b790695e9e328d267589ff5efdcd49",
                "filename": "maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java",
                "blob_url": "https://github.com/apache/maven/blob/813a3b804011bcfd2838b04a40e57243ae2a16c7/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java",
                "raw_url": "https://github.com/apache/maven/raw/813a3b804011bcfd2838b04a40e57243ae2a16c7/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java",
                "status": "modified",
                "changes": 36,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/DependenciesReport.java?ref=813a3b804011bcfd2838b04a40e57243ae2a16c7",
                "patch": "@@ -17,6 +17,7 @@\n  */\n \n import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.repository.ArtifactRepository;\n import org.apache.maven.artifact.factory.ArtifactFactory;\n import org.apache.maven.model.Dependency;\n import org.apache.maven.project.MavenProject;\n@@ -84,6 +85,13 @@\n      */\n     private MavenProjectBuilder mavenProjectBuilder;\n \n+    /**\n+     * @parameter expression=\"${localRepository}\"\n+     * @required\n+     * @readonly\n+     */\n+    private ArtifactRepository localRepository;\n+\n     /**\n      * @see org.apache.maven.reporting.MavenReport#getName(java.util.Locale)\n      */\n@@ -139,7 +147,7 @@ public void executeReport( Locale locale )\n         throws MavenReportException\n     {\n         DependenciesRenderer r = new DependenciesRenderer( getSink(), getProject(), locale, mavenProjectBuilder,\n-                                                           artifactFactory );\n+                                                           artifactFactory, localRepository );\n \n         r.render();\n     }\n@@ -163,8 +171,11 @@ public String getOutputName()\n \n         private MavenProjectBuilder mavenProjectBuilder;\n \n+        private ArtifactRepository localRepository;\n+\n         public DependenciesRenderer( Sink sink, MavenProject project, Locale locale,\n-                                    MavenProjectBuilder mavenProjectBuilder, ArtifactFactory artifactFactory )\n+                                    MavenProjectBuilder mavenProjectBuilder, ArtifactFactory artifactFactory,\n+                                    ArtifactRepository localRepository )\n         {\n             super( sink );\n \n@@ -175,6 +186,8 @@ public DependenciesRenderer( Sink sink, MavenProject project, Locale locale,\n             this.mavenProjectBuilder = mavenProjectBuilder;\n \n             this.artifactFactory = artifactFactory;\n+\n+            this.localRepository = localRepository;\n         }\n \n         public String getTitle()\n@@ -187,7 +200,7 @@ public void renderBody()\n             // Dependencies report\n             List dependencies = project.getDependencies();\n \n-            if ( ( dependencies == null ) || ( dependencies.isEmpty() ) )\n+            if ( dependencies == null || dependencies.isEmpty() )\n             {\n                 startSection( getTitle() );\n \n@@ -224,7 +237,7 @@ public void renderBody()\n                 MavenProject artifactProject = null;\n                 try\n                 {\n-                    artifactProject = getMavenProjectFromRepository( artifact );\n+                    artifactProject = getMavenProjectFromRepository( artifact, localRepository );\n                 }\n                 catch ( ProjectBuildingException e )\n                 {\n@@ -269,16 +282,14 @@ public void renderBody()\n                     MavenProject artifactProject = null;\n                     try\n                     {\n-                        artifactProject = getMavenProjectFromRepository( artifact );\n+                        artifactProject = getMavenProjectFromRepository( artifact, localRepository );\n                     }\n                     catch ( ProjectBuildingException e )\n                     {\n                         throw new IllegalArgumentException(\n                                                             \"Can't find a valid Maven project in the repository for the artifact [\"\n                                                                 + artifact + \"].\" );\n                     }\n-                    System.out.println( \"nklj-----------------------------\" );\n-                    System.out.println( artifactProject.getUrl() );\n                     tableRow( new String[] {\n                         artifact.getGroupId(),\n                         artifact.getArtifactId(),\n@@ -308,7 +319,7 @@ private Set getTransitiveDependencies( MavenProject project )\n             List dependencies = project.getDependencies();\n             Set artifacts = project.getArtifacts();\n \n-            if ( ( dependencies == null ) || ( artifacts == null ) )\n+            if ( dependencies == null || artifacts == null )\n             {\n                 return transitiveDependencies;\n             }\n@@ -341,18 +352,17 @@ private Set getTransitiveDependencies( MavenProject project )\n         /**\n          * Get the <code>Maven project</code> from the repository depending\n          * the <code>Artifact</code> given.\n-         * \n+         *\n          * @param artifact\n          *            an artifact\n          * @return the Maven project for the given artifact\n-         * @throws ProjectBuildingException\n+         * @throws org.apache.maven.project.ProjectBuildingException\n          *             if any\n          */\n-        private MavenProject getMavenProjectFromRepository( Artifact artifact )\n+        private MavenProject getMavenProjectFromRepository( Artifact artifact, ArtifactRepository localRepository )\n             throws ProjectBuildingException\n         {\n-            return mavenProjectBuilder.buildFromRepository( artifact, project.getRepositories(), artifact\n-                .getRepository() );\n+            return mavenProjectBuilder.buildFromRepository( artifact, project.getRepositories(), localRepository );\n         }\n     }\n ",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE, pass on to proper validation\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219888 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/ecb04d2bb820855728ac34ba6a41463cf0ecf92c",
        "parent": "https://github.com/apache/maven/commit/473d99609ce2702c9d4a8b65560667eb2ad2b47c",
        "bug_id": "maven_68",
        "file": [
            {
                "sha": "945f988cb0146608010b1865151f5ce3714bb0d0",
                "filename": "maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "blob_url": "https://github.com/apache/maven/blob/ecb04d2bb820855728ac34ba6a41463cf0ecf92c/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "raw_url": "https://github.com/apache/maven/raw/ecb04d2bb820855728ac34ba6a41463cf0ecf92c/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact/src/main/java/org/apache/maven/artifact/versioning/VersionRange.java?ref=ecb04d2bb820855728ac34ba6a41463cf0ecf92c",
                "patch": "@@ -54,6 +54,11 @@ public List getRestrictions()\n     public static VersionRange createFromVersionSpec( String spec )\n         throws InvalidVersionSpecificationException\n     {\n+        if ( spec == null )\n+        {\n+            return null;\n+        }\n+\n         List restrictions = new ArrayList();\n         String process = spec;\n         ArtifactVersion version = null;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219831 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/f48d2c367c0050be732c91adcf1c7dcdf0808c5a",
        "parent": "https://github.com/apache/maven/commit/e40e709513c23c080e9929b9211d1428db5be318",
        "bug_id": "maven_69",
        "file": [
            {
                "sha": "9a93753528c754a598ec090710655361fbefb142",
                "filename": "maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java",
                "blob_url": "https://github.com/apache/maven/blob/f48d2c367c0050be732c91adcf1c7dcdf0808c5a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java",
                "raw_url": "https://github.com/apache/maven/raw/f48d2c367c0050be732c91adcf1c7dcdf0808c5a/maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-manager/src/main/java/org/apache/maven/artifact/transform/SnapshotTransformation.java?ref=f48d2c367c0050be732c91adcf1c7dcdf0808c5a",
                "patch": "@@ -79,22 +79,22 @@ public void transformForDeployment( Artifact artifact, ArtifactRepository remote\n         }\n         else if ( isSnapshot( artifact ) )\n         {\n-            SnapshotArtifactMetadata metadata = null;\n-            \n             try\n             {\n+                SnapshotArtifactMetadata metadata;\n+            \n                 metadata = (SnapshotArtifactMetadata) retrieveFromRemoteRepository( artifact, remoteRepository, null );\n+\n+                metadata.update();\n+\n+                artifact.setVersion( metadata.constructVersion() );\n+\n+                artifact.addMetadata( metadata );\n             }\n             catch ( ResourceDoesNotExistException e )\n             {\n                 // ignore. We'll be creating this metadata if it doesn't exist...\n             }\n-\n-            metadata.update();\n-\n-            artifact.setVersion( metadata.constructVersion() );\n-\n-            artifact.addMetadata( metadata );\n         }\n     }\n ",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE when no settings.xml file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191104 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/2d7f97bc31da318e825fa3422fb856cce957fd34",
        "parent": "https://github.com/apache/maven/commit/01e6c8daa613e61e2fc13dc9edcd850f88a5da99",
        "bug_id": "maven_70",
        "file": [
            {
                "sha": "776cefa1a6f31dda5088040bd5ccafc9e80effda",
                "filename": "maven-settings/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/2d7f97bc31da318e825fa3422fb856cce957fd34/maven-settings/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/2d7f97bc31da318e825fa3422fb856cce957fd34/maven-settings/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-settings/src/main/java/org/apache/maven/settings/DefaultMavenSettingsBuilder.java?ref=2d7f97bc31da318e825fa3422fb856cce957fd34",
                "patch": "@@ -87,9 +87,9 @@ private Settings readSettings( File settingsFile )\n                 settings = modelReader.read( reader );\n \n                 RuntimeInfo rtInfo = new RuntimeInfo( settings );\n-                \n+\n                 rtInfo.setFile( settingsFile );\n-                \n+\n                 settings.setRuntimeInfo( rtInfo );\n             }\n             finally\n@@ -110,6 +110,7 @@ public Settings buildSettings()\n         if ( userSettings == null )\n         {\n             userSettings = new Settings();\n+            userSettings.setRuntimeInfo( new RuntimeInfo( userSettings ) );\n         }\n \n         SettingsUtils.merge( userSettings, globalSettings, TrackableBase.GLOBAL_LEVEL );",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fix possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@190975 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/e57f2dbb44c4985cccbf9340f03d7ce43ab1aec0",
        "parent": "https://github.com/apache/maven/commit/ac2d8a7e831382797513fab99a28ffac201855c3",
        "bug_id": "maven_71",
        "file": [
            {
                "sha": "83d8d193d7e357328b7d25f07ed94a7f53a1453d",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "blob_url": "https://github.com/apache/maven/blob/e57f2dbb44c4985cccbf9340f03d7ce43ab1aec0/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "raw_url": "https://github.com/apache/maven/raw/e57f2dbb44c4985cccbf9340f03d7ce43ab1aec0/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java?ref=e57f2dbb44c4985cccbf9340f03d7ce43ab1aec0",
                "patch": "@@ -188,7 +188,10 @@ protected RemoteRepository createAntRemoteRepository( org.apache.maven.model.Rep\n         }\n \n         Mirror mirror = getSettings().getMirrorOf( pomRepository.getId() );\n-        r.setUrl( mirror.getUrl() );\n+        if ( mirror != null )\n+        {\n+            r.setUrl( mirror.getUrl() );\n+        }\n \n         return r;\n     }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE if either of the ids are not specified\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@188807 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/656b6f02b0b6e143d175f8fb4a1eb77ad15b01e7",
        "parent": "https://github.com/apache/maven/commit/7523cdb03a386ae98a7c03e08e834c8b03822e3d",
        "bug_id": "maven_72",
        "file": [
            {
                "sha": "8e6247e762f3f9c901edf3d81ffa30baf2b80779",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "blob_url": "https://github.com/apache/maven/blob/656b6f02b0b6e143d175f8fb4a1eb77ad15b01e7/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "raw_url": "https://github.com/apache/maven/raw/656b6f02b0b6e143d175f8fb4a1eb77ad15b01e7/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java?ref=656b6f02b0b6e143d175f8fb4a1eb77ad15b01e7",
                "patch": "@@ -100,12 +100,12 @@ public void execute()\n             throw new BuildException( \"Unable to resolve artifact\", e );\n         }\n \n-        if ( getProject().getReference( pathId ) != null )\n+        if ( pathId != null && getProject().getReference( pathId ) != null )\n         {\n             throw new BuildException( \"Reference ID \" + pathId + \" already exists\" );\n         }\n \n-        if ( getProject().getReference( filesetId ) != null )\n+        if ( filesetId != null && getProject().getReference( filesetId ) != null )\n         {\n             throw new BuildException( \"Reference ID \" + filesetId + \" already exists\" );\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE when there is no project file\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163991 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/8e279f87e1ac9ce7e69988f8801c4460266fc09c",
        "parent": "https://github.com/apache/maven/commit/666c60dea6668db3dae494f38241e6cfd3f42730",
        "bug_id": "maven_73",
        "file": [
            {
                "sha": "2d723922c6e681b4090ef924c6c2935589af9978",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "blob_url": "https://github.com/apache/maven/blob/8e279f87e1ac9ce7e69988f8801c4460266fc09c/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "raw_url": "https://github.com/apache/maven/raw/8e279f87e1ac9ce7e69988f8801c4460266fc09c/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java?ref=8e279f87e1ac9ce7e69988f8801c4460266fc09c",
                "patch": "@@ -112,7 +112,7 @@ else if ( \"#settings\".equals( expression ) )\n         }\n         else if ( expression.equals( \"#basedir\" ) )\n         {\n-            value = context.getProject().getFile().getParentFile().getAbsolutePath();\n+            value = context.getProject().getBasedir().getAbsolutePath();\n         }\n         else if ( expression.startsWith( \"#basedir\" ) )\n         {",
                "deletions": 1
            },
            {
                "sha": "93745033090548c6e70eeac91ac8aff4f7d6784e",
                "filename": "maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/8e279f87e1ac9ce7e69988f8801c4460266fc09c/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/8e279f87e1ac9ce7e69988f8801c4460266fc09c/maven-core/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/MavenProject.java?ref=8e279f87e1ac9ce7e69988f8801c4460266fc09c",
                "patch": "@@ -132,7 +132,14 @@ public void setFile( File file )\n \n     public File getBasedir()\n     {\n-        return getFile().getParentFile();\n+        if ( getFile() != null )\n+        {\n+            return getFile().getParentFile();\n+        }\n+        else\n+        {\n+            return new File( System.getProperty( \"user.dir\" ) );\n+        }\n     }\n \n     public void setDependencies( List denpendencies )",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "fix NPE when there is no goal configuration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163683 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/886d787bf48dc9047393528f348c275c5e259591",
        "parent": "https://github.com/apache/maven/commit/4ba9fbcc338a6215ea60d365bfb31e819060f8d7",
        "bug_id": "maven_74",
        "file": [
            {
                "sha": "c257b0415911cafd7f32196e47f14c73e8377372",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/886d787bf48dc9047393528f348c275c5e259591/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/886d787bf48dc9047393528f348c275c5e259591/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=886d787bf48dc9047393528f348c275c5e259591",
                "patch": "@@ -683,14 +683,21 @@ private static PlexusConfiguration getProjectDefinedPluginConfiguration( MavenPr\n                     if ( index >= 0 )\n                     {\n                         String goalName = goalId.substring( index + 1 );\n-                        for ( Iterator j = plugin.getGoals().iterator(); j.hasNext(); )\n+                        for ( Iterator j = plugin.getGoals().iterator(); j.hasNext() && dom == null; )\n                         {\n                             Goal goal = (Goal) j.next();\n                             if ( goal.getId().equals( goalName ) )\n                             {\n                                 Xpp3Dom goalConfiguration = (Xpp3Dom) goal.getConfiguration();\n-                                dom = Xpp3DomUtils.mergeXpp3Dom( Xpp3DomUtils.copyXpp3Dom( goalConfiguration ), dom );\n-                                break;\n+                                if ( goalConfiguration != null )\n+                                {\n+                                    dom =\n+                                        Xpp3DomUtils.mergeXpp3Dom( Xpp3DomUtils.copyXpp3Dom( goalConfiguration ), dom );\n+                                }\n+                                else\n+                                {\n+                                    dom = new Xpp3Dom( \"configuration\" );\n+                                }\n                             }\n                         }\n                     }",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fix NPE in later code when mavenRepoLocal was defined\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163600 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/17b770a2abce1babcef7163a384d1d883c2793a5",
        "parent": "https://github.com/apache/maven/commit/75951aa79d2a3861f3d79954dcc5a4dc36af7381",
        "bug_id": "maven_75",
        "file": [
            {
                "sha": "bcda0c66832ccb153add12f0f2795b6e053f8e6d",
                "filename": "maven-mboot2/src/main/java/MBoot.java",
                "blob_url": "https://github.com/apache/maven/blob/17b770a2abce1babcef7163a384d1d883c2793a5/maven-mboot2/src/main/java/MBoot.java",
                "raw_url": "https://github.com/apache/maven/raw/17b770a2abce1babcef7163a384d1d883c2793a5/maven-mboot2/src/main/java/MBoot.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-mboot2/src/main/java/MBoot.java?ref=17b770a2abce1babcef7163a384d1d883c2793a5",
                "patch": "@@ -184,12 +184,10 @@ public void run( String[] args )\n \n         String mavenRepoLocal = System.getProperty( \"maven.repo.local\" );\n \n-        SettingsReader userModelReader = null;\n+        SettingsReader userModelReader = new SettingsReader();\n \n         if ( mavenRepoLocal == null )\n         {\n-            userModelReader = new SettingsReader();\n-\n             try\n             {\n                 String userHome = System.getProperty( \"user.home\" );",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4794] 'org.apache.maven.plugins:maven-install-plugin:2.3.1'. A required class is missing: org.codehaus.plexus.digest.Digester\n[MNG-4798] NullPointerException at NearestVersionConflictResolver.selectVersion()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1001459 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/2c073d024b1fd876adbf857ea0da291b9b41e67a",
        "parent": "https://github.com/apache/maven/commit/759db789e10623626ebb00690c24e8935698f5d4",
        "bug_id": "maven_76",
        "file": [
            {
                "sha": "92a0248ace09c32de925319e1b2e3798cb842126",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/2c073d024b1fd876adbf857ea0da291b9b41e67a/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/2c073d024b1fd876adbf857ea0da291b9b41e67a/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/pom.xml?ref=2c073d024b1fd876adbf857ea0da291b9b41e67a",
                "patch": "@@ -50,7 +50,7 @@\n     <cipherVersion>1.4</cipherVersion>\n     <modelloVersion>1.4</modelloVersion>\n     <jxpathVersion>1.3</jxpathVersion>\n-    <aetherVersion>1.5</aetherVersion>\n+    <aetherVersion>1.6</aetherVersion>\n     <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n   </properties>\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4779] NullPointerException thrown during dependency resolution when dependency with range occurs more than once in the dirty tree\n[MNG-4781] Can't deploy to Nexus staging repository\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@990771 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292",
        "parent": "https://github.com/apache/maven/commit/8c13978af5dc13030018c837a855e8263fb73248",
        "bug_id": "maven_77",
        "file": [
            {
                "sha": "3a4b3e7f758f4e9d2f1948256599d01e78bdeba6",
                "filename": "maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
                "blob_url": "https://github.com/apache/maven/blob/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
                "raw_url": "https://github.com/apache/maven/raw/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java",
                "status": "modified",
                "changes": 8,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-aether-provider/src/main/java/org/apache/maven/repository/internal/DefaultArtifactDescriptorReader.java?ref=1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292",
                "patch": "@@ -19,7 +19,6 @@\n  * under the License.\n  */\n \n-import java.io.File;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.LinkedHashMap;\n@@ -366,18 +365,13 @@ private Dependency convert( org.apache.maven.model.Dependency dependency, Artifa\n         Map<String, String> props = null;\n         if ( system )\n         {\n-            props = Collections.singletonMap( ArtifactProperties.LACKS_DESCRIPTOR, Boolean.TRUE.toString() );\n+            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n         }\n \n         Artifact artifact =\n             new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                  dependency.getVersion(), props, stereotype );\n \n-        if ( system )\n-        {\n-            artifact = artifact.setFile( new File( dependency.getSystemPath() ) );\n-        }\n-\n         List<Exclusion> exclusions = new ArrayList<Exclusion>( dependency.getExclusions().size() );\n         for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n         {",
                "deletions": 7
            },
            {
                "sha": "31d32261b433be0f8fe7207698b9b862535e4429",
                "filename": "maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/RepositoryUtils.java?ref=1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292",
                "patch": "@@ -142,7 +142,8 @@ public static Artifact toArtifact( org.apache.maven.artifact.Artifact artifact )\n         Map<String, String> props = null;\n         if ( org.apache.maven.artifact.Artifact.SCOPE_SYSTEM.equals( artifact.getScope() ) )\n         {\n-            props = Collections.singletonMap( ArtifactProperties.LACKS_DESCRIPTOR, Boolean.TRUE.toString() );\n+            String localPath = ( artifact.getFile() != null ) ? artifact.getFile().getPath() : \"\";\n+            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, localPath );\n         }\n \n         Artifact result =\n@@ -270,18 +271,13 @@ public static Dependency toDependency( org.apache.maven.model.Dependency depende\n         Map<String, String> props = null;\n         if ( system )\n         {\n-            props = Collections.singletonMap( ArtifactProperties.LACKS_DESCRIPTOR, Boolean.TRUE.toString() );\n+            props = Collections.singletonMap( ArtifactProperties.LOCAL_PATH, dependency.getSystemPath() );\n         }\n \n         Artifact artifact =\n             new DefaultArtifact( dependency.getGroupId(), dependency.getArtifactId(), dependency.getClassifier(), null,\n                                  dependency.getVersion(), props, stereotype );\n \n-        if ( system )\n-        {\n-            artifact = artifact.setFile( new File( dependency.getSystemPath() ) );\n-        }\n-\n         List<Exclusion> exclusions = new ArrayList<Exclusion>( dependency.getExclusions().size() );\n         for ( org.apache.maven.model.Exclusion exclusion : dependency.getExclusions() )\n         {",
                "deletions": 7
            },
            {
                "sha": "cfc6c865feff8afbf30acbb3328df5484e33e85f",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/pom.xml?ref=1cbef71e7b761eb7ac5c07fb2e8f71cedc8b1292",
                "patch": "@@ -50,7 +50,7 @@\n     <cipherVersion>1.4</cipherVersion>\n     <modelloVersion>1.4</modelloVersion>\n     <jxpathVersion>1.3</jxpathVersion>\n-    <aetherVersion>1.1.1</aetherVersion>\n+    <aetherVersion>1.2</aetherVersion>\n     <maven.test.redirectTestOutputToFile>true</maven.test.redirectTestOutputToFile>\n   </properties>\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5157] NPE stemming from DefaultModelBuilder.containsCoordinates\n\no Revised original fix to prevent duplicate emission of error msg\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1176402 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a1d64e71cabb8e6a884321cae794366da3624673",
        "parent": "https://github.com/apache/maven/commit/a6b7bc895ff30ad79ab0d7a789a30dfad30b081a",
        "bug_id": "maven_78",
        "file": [
            {
                "sha": "86a90d325489e2a5a34fdc94ec477f90ba709f13",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/a1d64e71cabb8e6a884321cae794366da3624673/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/a1d64e71cabb8e6a884321cae794366da3624673/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java?ref=a1d64e71cabb8e6a884321cae794366da3624673",
                "patch": "@@ -909,6 +909,18 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque\n             String artifactId = dependency.getArtifactId();\n             String version = dependency.getVersion();\n \n+            if ( groupId == null || groupId.length() <= 0 )\n+            {\n+                problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.groupId' for \"\n+                    + dependency.getManagementKey() + \" is missing.\", dependency.getLocation( \"\" ), null );\n+                continue;\n+            }\n+            if ( artifactId == null || artifactId.length() <= 0 )\n+            {\n+                problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.artifactId' for \"\n+                    + dependency.getManagementKey() + \" is missing.\", dependency.getLocation( \"\" ), null );\n+                continue;\n+            }\n             if ( version == null || version.length() <= 0 )\n             {\n                 problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.version' for \"",
                "deletions": 0
            },
            {
                "sha": "d7a6ac9b5aba1dbefcbd74fc9c42427ff29bb379",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/a1d64e71cabb8e6a884321cae794366da3624673/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/a1d64e71cabb8e6a884321cae794366da3624673/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 6,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=a1d64e71cabb8e6a884321cae794366da3624673",
                "patch": "@@ -356,12 +356,6 @@ private void validateRawDependencies( ModelProblemCollector problems, List<Depen\n         {\n             String key = dependency.getManagementKey();\n \n-            validateStringNotEmpty( prefix + \".groupId\", problems, Severity.ERROR, dependency.getGroupId(), key,\n-                                    dependency );\n-\n-            validateStringNotEmpty( prefix + \".artifactId\", problems, Severity.ERROR, dependency.getArtifactId(), key,\n-                                    dependency );\n-\n             if ( \"import\".equals( dependency.getScope() ) )\n             {\n                 if ( !\"pom\".equals( dependency.getType() ) )",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5157] NPE stemming from DefaultModelBuilder.containsCoordinates\n\no Revised original fix to prevent duplicate emission of error msg\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@1176402 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/870a3b3e8040a7ee2727480bc0a43121ac99e59c",
        "parent": "https://github.com/apache/maven/commit/56f15402204568654de9d7ac7970e5657d7df85d",
        "bug_id": "maven_79",
        "file": [
            {
                "sha": "86a90d325489e2a5a34fdc94ec477f90ba709f13",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/870a3b3e8040a7ee2727480bc0a43121ac99e59c/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/870a3b3e8040a7ee2727480bc0a43121ac99e59c/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/building/DefaultModelBuilder.java?ref=870a3b3e8040a7ee2727480bc0a43121ac99e59c",
                "patch": "@@ -909,6 +909,18 @@ private void importDependencyManagement( Model model, ModelBuildingRequest reque\n             String artifactId = dependency.getArtifactId();\n             String version = dependency.getVersion();\n \n+            if ( groupId == null || groupId.length() <= 0 )\n+            {\n+                problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.groupId' for \"\n+                    + dependency.getManagementKey() + \" is missing.\", dependency.getLocation( \"\" ), null );\n+                continue;\n+            }\n+            if ( artifactId == null || artifactId.length() <= 0 )\n+            {\n+                problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.artifactId' for \"\n+                    + dependency.getManagementKey() + \" is missing.\", dependency.getLocation( \"\" ), null );\n+                continue;\n+            }\n             if ( version == null || version.length() <= 0 )\n             {\n                 problems.add( Severity.ERROR, \"'dependencyManagement.dependencies.dependency.version' for \"",
                "deletions": 0
            },
            {
                "sha": "d7a6ac9b5aba1dbefcbd74fc9c42427ff29bb379",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "blob_url": "https://github.com/apache/maven/blob/870a3b3e8040a7ee2727480bc0a43121ac99e59c/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "raw_url": "https://github.com/apache/maven/raw/870a3b3e8040a7ee2727480bc0a43121ac99e59c/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java",
                "status": "modified",
                "changes": 6,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/validation/DefaultModelValidator.java?ref=870a3b3e8040a7ee2727480bc0a43121ac99e59c",
                "patch": "@@ -356,12 +356,6 @@ private void validateRawDependencies( ModelProblemCollector problems, List<Depen\n         {\n             String key = dependency.getManagementKey();\n \n-            validateStringNotEmpty( prefix + \".groupId\", problems, Severity.ERROR, dependency.getGroupId(), key,\n-                                    dependency );\n-\n-            validateStringNotEmpty( prefix + \".artifactId\", problems, Severity.ERROR, dependency.getArtifactId(), key,\n-                                    dependency );\n-\n             if ( \"import\".equals( dependency.getScope() ) )\n             {\n                 if ( !\"pom\".equals( dependency.getType() ) )",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4785] NPE in dependency resolution code for TC plugin\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@995457 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/90ac0847b697b07ed643dab5fcafc15f12f31ec4",
        "parent": "https://github.com/apache/maven/commit/ee07bb36d559be79d7134b930d9c3c1dc42df31f",
        "bug_id": "maven_80",
        "file": [
            {
                "sha": "dfd3f40a4746aa1432164ec319abe2f5651bed28",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java",
                "blob_url": "https://github.com/apache/maven/blob/90ac0847b697b07ed643dab5fcafc15f12f31ec4/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java",
                "raw_url": "https://github.com/apache/maven/raw/90ac0847b697b07ed643dab5fcafc15f12f31ec4/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/internal/DefaultLegacySupport.java?ref=90ac0847b697b07ed643dab5fcafc15f12f31ec4",
                "patch": "@@ -37,7 +37,7 @@\n     implements LegacySupport\n {\n \n-    private ThreadLocal<MavenSession> session = new ThreadLocal<MavenSession>();\n+    private ThreadLocal<MavenSession> session = new InheritableThreadLocal<MavenSession>();\n \n     public void setSession( MavenSession session )\n     {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4786] [regression] Ant-based mojo using maven-script-ant:2.1.0+ causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@991314 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/08404c7a808565b3ec15fdca8c9cfec9c1068c51",
        "parent": "https://github.com/apache/maven/commit/98ba2c1f3d31048e4c2ce5c3fd957cb1e56b934d",
        "bug_id": "maven_81",
        "file": [
            {
                "sha": "0aeb686f7d495ca8b68178b9a854955ff7fc0b9c",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/08404c7a808565b3ec15fdca8c9cfec9c1068c51/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/08404c7a808565b3ec15fdca8c9cfec9c1068c51/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/pom.xml?ref=08404c7a808565b3ec15fdca8c9cfec9c1068c51",
                "patch": "@@ -44,7 +44,7 @@\n     <plexusVersion>1.5.4</plexusVersion>\n     <plexusInterpolationVersion>1.11</plexusInterpolationVersion>\n     <plexusUtilsVersion>2.0.4</plexusUtilsVersion>\n-    <spiceInjectVersion>1.3.4</spiceInjectVersion>\n+    <spiceInjectVersion>1.3.4.1</spiceInjectVersion>\n     <wagonVersion>1.0-beta-6</wagonVersion>\n     <securityDispatcherVersion>1.3</securityDispatcherVersion>\n     <cipherVersion>1.4</cipherVersion>",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-4776] NPE during build from parent but not from child\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/maven-3/trunk@989222 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/6b82e83024800c0c0e55d1da7282f0558a7278a4",
        "parent": "https://github.com/apache/maven/commit/6c37a89744149e68f198429fb7eac70fe1707360",
        "bug_id": "maven_82",
        "file": [
            {
                "sha": "bc113350d725811dcf817b43b7b31fd5f3e47521",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java",
                "blob_url": "https://github.com/apache/maven/blob/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java",
                "raw_url": "https://github.com/apache/maven/raw/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/internal/DefaultLifecycleExecutionPlanCalculator.java?ref=6b82e83024800c0c0e55d1da7282f0558a7278a4",
                "patch": "@@ -483,11 +483,9 @@ public void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession\n         PluginDescriptorParsingException, NoPluginFoundForPrefixException, InvalidPluginDescriptorException,\n         LifecyclePhaseNotFoundException, LifecycleNotFoundException, PluginVersionResolutionException\n     {\n-            calculateForkedExecutions( mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>() );\n-\n+        calculateForkedExecutions( mojoExecution, session, session.getCurrentProject(), new HashSet<MojoDescriptor>() );\n     }\n \n-\n     private void calculateForkedExecutions( MojoExecution mojoExecution, MavenSession session, MavenProject project,\n                                             Collection<MojoDescriptor> alreadyForkedExecutions )\n         throws MojoNotFoundException, PluginNotFoundException, PluginResolutionException,\n@@ -511,6 +509,11 @@ private void calculateForkedExecutions( MojoExecution mojoExecution, MavenSessio\n \n         for ( MavenProject forkedProject : forkedProjects )\n         {\n+            if ( forkedProject != project )\n+            {\n+                lifecyclePluginResolver.resolveMissingPluginVersions( forkedProject, session );\n+            }\n+\n             List<MojoExecution> forkedExecutions;\n \n             if ( StringUtils.isNotEmpty( mojoDescriptor.getExecutePhase() ) )",
                "deletions": 3
            },
            {
                "sha": "63ebcb7bb2b8c26580e23a7d859328f5ab5a6ed6",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecyclePluginResolver.java",
                "blob_url": "https://github.com/apache/maven/blob/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecyclePluginResolver.java",
                "raw_url": "https://github.com/apache/maven/raw/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecyclePluginResolver.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/internal/LifecyclePluginResolver.java?ref=6b82e83024800c0c0e55d1da7282f0558a7278a4",
                "patch": "@@ -60,7 +60,7 @@ public LifecyclePluginResolver()\n     public void resolveMissingPluginVersions( MavenProject project, MavenSession session )\n         throws PluginVersionResolutionException\n     {\n-        Map<String, String> versions = new HashMap<String, String>();\n+        Map<String, String> versions = new HashMap<String, String>( 64 );\n \n         for ( Plugin plugin : project.getBuildPlugins() )\n         {",
                "deletions": 1
            },
            {
                "sha": "cdc9e7d8296fb9425a3f28764edf7db28dcca02d",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "blob_url": "https://github.com/apache/maven/blob/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "raw_url": "https://github.com/apache/maven/raw/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java",
                "status": "modified",
                "changes": 25,
                "additions": 24,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/internal/MojoDescriptorCreator.java?ref=6b82e83024800c0c0e55d1da7282f0558a7278a4",
                "patch": "@@ -42,6 +42,7 @@\n import org.codehaus.plexus.component.annotations.Component;\n import org.codehaus.plexus.component.annotations.Requirement;\n import org.codehaus.plexus.configuration.PlexusConfiguration;\n+import org.codehaus.plexus.logging.Logger;\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n \n import java.util.ArrayList;\n@@ -63,6 +64,10 @@\n @Component( role = MojoDescriptorCreator.class )\n public class MojoDescriptorCreator\n {\n+\n+    @Requirement\n+    private Logger logger;\n+\n     @Requirement\n     private PluginVersionResolver pluginVersionResolver;\n \n@@ -72,17 +77,22 @@\n     @Requirement\n     private PluginPrefixResolver pluginPrefixResolver;\n \n+    @Requirement\n+    private LifecyclePluginResolver lifecyclePluginResolver;\n+\n     @SuppressWarnings( { \"UnusedDeclaration\" } )\n     public MojoDescriptorCreator()\n     {\n     }\n \n     public MojoDescriptorCreator( PluginVersionResolver pluginVersionResolver, BuildPluginManager pluginManager,\n-                                  PluginPrefixResolver pluginPrefixResolver )\n+                                  PluginPrefixResolver pluginPrefixResolver,\n+                                  LifecyclePluginResolver lifecyclePluginResolver )\n     {\n         this.pluginVersionResolver = pluginVersionResolver;\n         this.pluginManager = pluginManager;\n         this.pluginPrefixResolver = pluginPrefixResolver;\n+        this.lifecyclePluginResolver = lifecyclePluginResolver;\n     }\n \n     private Plugin findPlugin( String groupId, String artifactId, Collection<Plugin> plugins )\n@@ -221,6 +231,19 @@ public Plugin findPluginForPrefix( String prefix, MavenSession session )\n     {\n         // [prefix]:[goal]\n \n+        if ( session.getCurrentProject() != null )\n+        {\n+            try\n+            {\n+                lifecyclePluginResolver.resolveMissingPluginVersions( session.getCurrentProject(), session );\n+            }\n+            catch ( PluginVersionResolutionException e )\n+            {\n+                // not critical here\n+                logger.debug( e.getMessage(), e );\n+            }\n+        }\n+\n         PluginPrefixRequest prefixRequest = new DefaultPluginPrefixRequest( prefix, session );\n         PluginPrefixResult prefixResult = pluginPrefixResolver.resolve( prefixRequest );\n ",
                "deletions": 1
            },
            {
                "sha": "0e2ca5a9174aec7539b7d0512e6df4c610dd59aa",
                "filename": "maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/6b82e83024800c0c0e55d1da7282f0558a7278a4/maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/lifecycle/internal/LifecycleExecutionPlanCalculatorTest.java?ref=6b82e83024800c0c0e55d1da7282f0558a7278a4",
                "patch": "@@ -73,6 +73,7 @@ public static LifecycleExecutionPlanCalculator createExecutionPlaceCalculator(\n     public static MojoDescriptorCreator createMojoDescriptorCreator()\n     {\n         return new MojoDescriptorCreator( new PluginVersionResolverStub(), new BuildPluginManagerStub(),\n-                                          new PluginPrefixResolverStub() );\n+                                          new PluginPrefixResolverStub(),\n+                                          new LifecyclePluginResolver( new PluginVersionResolverStub() ) );\n     }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-3265] maven-model Extension.equals causes NPE when any field is uninitialized\n\no Merged from r793311\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@793319 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/c36b12739b556e414d93a2b0ba3af5b8cf78555e",
        "parent": "https://github.com/apache/maven/commit/d56f9e13bb50ead6388bb8f3061cbbefb179a22b",
        "bug_id": "maven_83",
        "file": [
            {
                "sha": "c259db99d2ff004212ee6d3203bfd88fdbfe2fb2",
                "filename": "maven-model/src/main/mdo/maven.mdo",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/main/mdo/maven.mdo",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/main/mdo/maven.mdo",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/mdo/maven.mdo?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -3581,21 +3581,26 @@\n \n         Extension e = (Extension) o;\n \n-        if ( !e.getArtifactId().equals( getArtifactId() ) )\n+        if ( !equal( e.getArtifactId(), getArtifactId() ) )\n         {\n             return false;\n         }\n-        else if ( !e.getGroupId().equals( getGroupId() ) )\n+        else if ( !equal( e.getGroupId(), getGroupId() ) )\n         {\n             return false;\n         }\n-        else if ( e.getVersion() != null ? !e.getVersion().equals( getVersion() ) : getVersion() != null )\n+        else if ( !equal( e.getVersion(), getVersion() ) )\n         {\n             return false;\n         }\n         return true;\n     }\n \n+    private static <T> boolean equal( T obj1, T obj2 )\n+    {\n+        return ( obj1 != null ) ? obj1.equals( obj2 ) : obj2 == null;\n+    }\n+\n     /**\n      * @see java.lang.Object#hashCode()\n      */",
                "deletions": 3
            },
            {
                "sha": "e6f057a5ed5d88b000e3ba14039f2b702690070c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new ActivationFile().equals( null ) );\n+\n+        new ActivationFile().equals( new ActivationFile() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "39b1e6210e07809739cff9273c7dda7455c63b1c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new ActivationOS().equals( null ) );\n+\n+        new ActivationOS().equals( new ActivationOS() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "014d321c6c060e027b9ab29124074d3e2925dc2a",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new ActivationProperty().equals( null ) );\n+\n+        new ActivationProperty().equals( new ActivationProperty() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "cd5b17c88a5f9f32481e1e87d8903d11d76deae7",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Activation().equals( null ) );\n+\n+        new Activation().equals( new Activation() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "0e21231211861591c7fdd0d0f54a6ba61ed07352",
                "filename": "maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/BuildTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Build().equals( null ) );\n+\n+        new Build().equals( new Build() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "57b386520e59a7c7122b4597e3e404bc183dd13c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new CiManagement().equals( null ) );\n+\n+        new CiManagement().equals( new CiManagement() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "61b3e007ed2eb248dbcf6098b7e71910eb5e6315",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Contributor().equals( null ) );\n+\n+        new Contributor().equals( new Contributor() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "85a697b46967d9a1774bdc0fd93b5cdb21a6eab2",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new DependencyManagement().equals( null ) );\n+\n+        new DependencyManagement().equals( new DependencyManagement() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "3d08d50c8d155704c290619b6a19dc053a20645c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Dependency().equals( null ) );\n+\n+        new Dependency().equals( new Dependency() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "b16c85cfe15d9099d5f5bf82c317c7fff0b948a8",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new DeploymentRepository().equals( null ) );\n+\n+        new DeploymentRepository().equals( new DeploymentRepository() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "45ee509028120600a5add7123fec8e6ff7438f3e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Developer().equals( null ) );\n+\n+        new Developer().equals( new Developer() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "5a7a155bffb8cad8aee90bd7fa54ffa9d40a7125",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new DistributionManagement().equals( null ) );\n+\n+        new DistributionManagement().equals( new DistributionManagement() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "d6fb2d72e96d47a4e050d31daa5bc097dd3a10c2",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Exclusion().equals( null ) );\n+\n+        new Exclusion().equals( new Exclusion() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "db74935a9c33081c94410567e1641749ec478605",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Extension().equals( null ) );\n+\n+        new Extension().equals( new Extension() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "5b5150905ec70bff1a831ff3ed8f27d26574ef16",
                "filename": "maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new IssueManagement().equals( null ) );\n+\n+        new IssueManagement().equals( new IssueManagement() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "e1826f53f980ee0c16d486fd96dc325c8780c0fb",
                "filename": "maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new License().equals( null ) );\n+\n+        new License().equals( new License() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "028583e02e91c59c76e34cd16d198ff72cb8ac5d",
                "filename": "maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new MailingList().equals( null ) );\n+\n+        new MailingList().equals( new MailingList() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "f322a343d711e33da13a386601da43e9848ef530",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ModelTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Model().equals( null ) );\n+\n+        new Model().equals( new Model() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "961094e2b9ae3f17bf3f43cc4fd6b0a8c8483942",
                "filename": "maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Notifier().equals( null ) );\n+\n+        new Notifier().equals( new Notifier() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "3bb3ec17ad6b62877c74fcb40a24f201b15ffefc",
                "filename": "maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Organization().equals( null ) );\n+\n+        new Organization().equals( new Organization() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "0be4324e7f4aeb79e66dd6f6db944cc797874693",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ParentTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Parent().equals( null ) );\n+\n+        new Parent().equals( new Parent() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "349d4646c1a4734c0ba2cd3e38b3360eb9b3f5cb",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new PluginConfiguration().equals( null ) );\n+\n+        new PluginConfiguration().equals( new PluginConfiguration() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "85b1d34836c48cb52c975699c961e92e81a50c6e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new PluginContainer().equals( null ) );\n+\n+        new PluginContainer().equals( new PluginContainer() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "341b5d615bf759000360194e18a47228f6d2de05",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new PluginExecution().equals( null ) );\n+\n+        new PluginExecution().equals( new PluginExecution() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "93331463353da1991dc9da408bce228495407249",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new PluginManagement().equals( null ) );\n+\n+        new PluginManagement().equals( new PluginManagement() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "e7be0a692959e1ee61cf1ebe6766d421518d16d6",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Plugin().equals( null ) );\n+\n+        new Plugin().equals( new Plugin() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "daa9c266445b9ad4b5eb373d4ac62a5600b96819",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Prerequisites().equals( null ) );\n+\n+        new Prerequisites().equals( new Prerequisites() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "ae111ee15e491885fd9004fad696ff8afd8404e8",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Profile().equals( null ) );\n+\n+        new Profile().equals( new Profile() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "0ae97f7d0acf3de74d18623845c9a8542a489056",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Relocation().equals( null ) );\n+\n+        new Relocation().equals( new Relocation() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "78ad4cf46566e01a9bb4165234cdc99aeb0ba3ff",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new ReportPlugin().equals( null ) );\n+\n+        new ReportPlugin().equals( new ReportPlugin() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "9dc6d063d491603f0393d8c8b786da997c8457fc",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new ReportSet().equals( null ) );\n+\n+        new ReportSet().equals( new ReportSet() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "20c88d274023d5f9c013332463d990f87b814a4a",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Reporting().equals( null ) );\n+\n+        new Reporting().equals( new Reporting() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "639a29e40418cc3ed15c216b7560728b66d1f5ac",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new RepositoryPolicy().equals( null ) );\n+\n+        new RepositoryPolicy().equals( new RepositoryPolicy() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "8f6a03ebc2ec7fb4e02cb9e6c6415ed911dd7911",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Repository().equals( null ) );\n+\n+        new Repository().equals( new Repository() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "4515c6c75e7e5044b0260c3ac9fd1368baf6da18",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Resource().equals( null ) );\n+\n+        new Resource().equals( new Resource() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "7d1e31f9952db1a93b02ea99d876389538792df7",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ScmTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Scm().equals( null ) );\n+\n+        new Scm().equals( new Scm() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            },
            {
                "sha": "0d910eadb6e8beeb6a22de5cbd4722ee425c970e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "blob_url": "https://github.com/apache/maven/blob/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "raw_url": "https://github.com/apache/maven/raw/c36b12739b556e414d93a2b0ba3af5b8cf78555e/maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/SiteTest.java?ref=c36b12739b556e414d93a2b0ba3af5b8cf78555e",
                "patch": "@@ -39,6 +39,8 @@ public void testHashCodeNullSafe()\n     public void testEqualsNullSafe()\n     {\n         assertFalse( new Site().equals( null ) );\n+\n+        new Site().equals( new Site() );\n     }\n \n     public void testEqualsIdentity()",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Added some more delegates to real local repo to prevents plugins from NPEs or unexpected data\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@785410 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1b80f29418397a66f41db59029b1f88e06f5e46b",
        "parent": "https://github.com/apache/maven/commit/0852f8d21dfbea00022e06fd2575dcec055791bd",
        "bug_id": "maven_84",
        "file": [
            {
                "sha": "2f53b15d06ba3637b4ce04e00067e854aa1f4370",
                "filename": "maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java",
                "blob_url": "https://github.com/apache/maven/blob/1b80f29418397a66f41db59029b1f88e06f5e46b/maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java",
                "raw_url": "https://github.com/apache/maven/raw/1b80f29418397a66f41db59029b1f88e06f5e46b/maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java",
                "status": "modified",
                "changes": 35,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-repository/src/main/java/org/apache/maven/repository/DelegatingLocalArtifactRepository.java?ref=1b80f29418397a66f41db59029b1f88e06f5e46b",
                "patch": "@@ -3,7 +3,9 @@\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.metadata.ArtifactMetadata;\n import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.artifact.repository.ArtifactRepositoryPolicy;\n import org.apache.maven.artifact.repository.DefaultArtifactRepository;\n+import org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout;\n \n /**\n  * Delegating local artifact repository chains the reactor, IDE workspace\n@@ -66,7 +68,7 @@ public String pathOfLocalRepositoryMetadata( ArtifactMetadata metadata, Artifact\n \n     public String getId()\n     {\n-        return \"local\";\n+        return userLocalArtifactRepository.getId();\n     }\n \n     @Override\n@@ -80,4 +82,35 @@ public String getBasedir()\n     {\n         return userLocalArtifactRepository.getBasedir();\n     }\n+\n+    @Override\n+    public ArtifactRepositoryLayout getLayout()\n+    {\n+        return userLocalArtifactRepository.getLayout();\n+    }\n+\n+    @Override\n+    public ArtifactRepositoryPolicy getReleases()\n+    {\n+        return userLocalArtifactRepository.getReleases();\n+    }\n+\n+    @Override\n+    public ArtifactRepositoryPolicy getSnapshots()\n+    {\n+        return userLocalArtifactRepository.getSnapshots();\n+    }\n+\n+    @Override\n+    public String getKey()\n+    {\n+        return userLocalArtifactRepository.getKey();\n+    }\n+\n+    @Override\n+    public String getUrl()\n+    {\n+        return userLocalArtifactRepository.getUrl();\n+    }\n+\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Guarded against NPE in case no project directory is available as in the case of repo artifacts\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@778491 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/1ace7476784e6de5f0f0acf24f2f25e30014e160",
        "parent": "https://github.com/apache/maven/commit/f82b30a6a1396edc2372b772e096c8cc3d0fa9e7",
        "bug_id": "maven_85",
        "file": [
            {
                "sha": "e1621e67aadf058e674dfcc46b72c8f1eff1e915",
                "filename": "maven-model-builder/src/main/java/org/apache/maven/model/interpolator/DefaultInterpolator.java",
                "blob_url": "https://github.com/apache/maven/blob/1ace7476784e6de5f0f0acf24f2f25e30014e160/maven-model-builder/src/main/java/org/apache/maven/model/interpolator/DefaultInterpolator.java",
                "raw_url": "https://github.com/apache/maven/raw/1ace7476784e6de5f0f0acf24f2f25e30014e160/maven-model-builder/src/main/java/org/apache/maven/model/interpolator/DefaultInterpolator.java",
                "status": "modified",
                "changes": 26,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model-builder/src/main/java/org/apache/maven/model/interpolator/DefaultInterpolator.java?ref=1ace7476784e6de5f0f0acf24f2f25e30014e160",
                "patch": "@@ -100,14 +100,23 @@ public Model interpolateModel( Model model, Properties properties, File projectD\n \n         List<InterpolatorProperty> standardInterpolatorProperties = new ArrayList<InterpolatorProperty>();\n \n-        String basedir = projectDirectory.getAbsolutePath();\n-        standardInterpolatorProperties.add( new InterpolatorProperty( \"${project.basedir}\", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n-        standardInterpolatorProperties.add( new InterpolatorProperty( \"${basedir}\", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n-        standardInterpolatorProperties.add( new InterpolatorProperty( \"${pom.basedir}\", basedir, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+        String basedir = null;\n+        if ( projectDirectory != null )\n+        {\n+            basedir = projectDirectory.getAbsolutePath();\n+            standardInterpolatorProperties.add( new InterpolatorProperty( \"${project.basedir}\", basedir,\n+                                                                          PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+            standardInterpolatorProperties.add( new InterpolatorProperty( \"${basedir}\", basedir,\n+                                                                          PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+            standardInterpolatorProperties.add( new InterpolatorProperty( \"${pom.basedir}\", basedir,\n+                                                                          PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n \n-        String baseuri = projectDirectory.toURI().toString();\n-        standardInterpolatorProperties.add( new InterpolatorProperty( \"${project.baseUri}\", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n-        standardInterpolatorProperties.add( new InterpolatorProperty( \"${pom.baseUri}\", baseuri, PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+            String baseuri = projectDirectory.toURI().toString();\n+            standardInterpolatorProperties.add( new InterpolatorProperty( \"${project.baseUri}\", baseuri,\n+                                                                          PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+            standardInterpolatorProperties.add( new InterpolatorProperty( \"${pom.baseUri}\", baseuri,\n+                                                                          PomInterpolatorTag.PROJECT_PROPERTIES.name() ) );\n+        }\n \n         for ( ModelProperty mp : modelProperties )\n         {\n@@ -144,7 +153,8 @@ public int compare( InterpolatorProperty o, InterpolatorProperty o1 )\n         \tif ( mp.getUri().startsWith( ProjectUri.Build.xUri ) || mp.getUri().equals( ProjectUri.Reporting.outputDirectory ) )\n         \t{\n         \t\tFile file = new File( mp.getResolvedValue() );\n-        \t\tif ( !file.isAbsolute() && !mp.getResolvedValue().startsWith( \"${project.build.\" ) && !mp.getResolvedValue().equals( \"${project.basedir}\" ) )\n+        \t\tif ( !file.isAbsolute() && !mp.getResolvedValue().startsWith( \"${project.build.\" )\n+                    && !mp.getResolvedValue().equals( \"${project.basedir}\" ) && basedir != null )\n         \t\t{\n         \t\t\tbuildDirectories.put( mp, new ModelProperty( mp.getUri(), new File( basedir, file.getPath() ).getAbsolutePath() ) );\n         \t\t}",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE in case of direct goal invocations\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@777228 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/6fe1debb603f07c967c9d45fdb7fd058b39dc0f1",
        "parent": "https://github.com/apache/maven/commit/efb59873a5e5f4403b01b4b987f0f9324681a54e",
        "bug_id": "maven_86",
        "file": [
            {
                "sha": "68b3c65ce29bb91600a8e8279c4ff8b75e25f4ee",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/6fe1debb603f07c967c9d45fdb7fd058b39dc0f1/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/6fe1debb603f07c967c9d45fdb7fd058b39dc0f1/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=6fe1debb603f07c967c9d45fdb7fd058b39dc0f1",
                "patch": "@@ -422,6 +422,12 @@ private void populateMojoExecutionConfiguration( MavenProject project, MojoExecu\n \n         Plugin p = project.getPlugin( g + \":\" + a );\n \n+        if ( p == null )\n+        {\n+            // goal was invoked directly from command line and has no declaration in the POM itself\n+            return;\n+        }\n+\n         for ( PluginExecution e : p.getExecutions() )\n         {\n             if ( mojoExecution.getExecutionId().equals( e.getId() ) )",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Prevented duplicates\no Made execution request more robust with regard to NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@777163 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/5eb52b5dee58c99fc05c18d0f74f1019d646357c",
        "parent": "https://github.com/apache/maven/commit/add87f5f56e8939aa6d280e646418ae24f5da5dc",
        "bug_id": "maven_87",
        "file": [
            {
                "sha": "976dd350ddc8a0c53d04620415586e936bfd6a69",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5eb52b5dee58c99fc05c18d0f74f1019d646357c/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5eb52b5dee58c99fc05c18d0f74f1019d646357c/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 138,
                "additions": 97,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=5eb52b5dee58c99fc05c18d0f74f1019d646357c",
                "patch": "@@ -34,6 +34,7 @@\n public class DefaultMavenExecutionRequest\n     implements MavenExecutionRequest\n {\n+\n     private ArtifactRepository localRepository;\n     \n     private File localRepositoryPath;\n@@ -50,7 +51,7 @@\n \n     private List<Profile> profiles;\n \n-    private List<String> pluginGroups = new ArrayList<String>();\n+    private List<String> pluginGroups;\n \n     private boolean usePluginUpdateOverride;\n \n@@ -118,7 +119,7 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )\n         DefaultMavenExecutionRequest copy = new DefaultMavenExecutionRequest();\n         copy.setLocalRepository( original.getLocalRepository() );\n         copy.setLocalRepositoryPath( original.getLocalRepositoryPath() );\n-        copy.setOffline(  original.isOffline() );\n+        copy.setOffline( original.isOffline() );\n         copy.setInteractiveMode( original.isInteractiveMode() );\n         copy.setProxies( original.getProxies() );\n         copy.setServers( original.getServers() );\n@@ -136,12 +137,12 @@ public static MavenExecutionRequest copy( MavenExecutionRequest original )\n         copy.setPom( original.getPom() );\n         copy.setProperties( original.getProperties() );\n         copy.setShowErrors( original.isShowErrors() );\n-        copy.setActiveProfiles( original.getActiveProfiles());\n-        copy.setInactiveProfiles(  original.getInactiveProfiles());\n-        copy.setTransferListener( original.getTransferListener());\n-        copy.setLoggingLevel( original.getLoggingLevel());\n-        copy.setGlobalChecksumPolicy( original.getGlobalChecksumPolicy());\n-        copy.setUpdateSnapshots( original.isUpdateSnapshots());\n+        copy.setActiveProfiles( original.getActiveProfiles() );\n+        copy.setInactiveProfiles( original.getInactiveProfiles() );\n+        copy.setTransferListener( original.getTransferListener() );\n+        copy.setLoggingLevel( original.getLoggingLevel() );\n+        copy.setGlobalChecksumPolicy( original.getGlobalChecksumPolicy() );\n+        copy.setUpdateSnapshots( original.isUpdateSnapshots() );\n         copy.setRemoteRepositories( original.getRemoteRepositories() );\n         copy.setNoSnapshotUpdates( original.isNoSnapshotUpdates() );\n         return original;        \n@@ -169,6 +170,10 @@ public File getLocalRepositoryPath()\n \n     public List<String> getGoals()\n     {\n+        if ( goals == null )\n+        {\n+            goals = new ArrayList<String>();\n+        }\n         return goals;\n     }\n \n@@ -209,17 +214,20 @@ public boolean isInteractiveMode()\n \n     public void setActiveProfiles( List<String> activeProfiles )\n     {\n-        this.activeProfiles = activeProfiles;\n+        getActiveProfiles().clear();\n+        getActiveProfiles().addAll( activeProfiles );\n     }\n \n     public void setInactiveProfiles( List<String> inactiveProfiles )\n     {\n-        this.inactiveProfiles = inactiveProfiles;\n+        getInactiveProfiles().clear();\n+        getInactiveProfiles().addAll( inactiveProfiles );\n     }\n \n     public MavenExecutionRequest setRemoteRepositories( List<ArtifactRepository> remoteRepositories )\n     {\n-        this.remoteRepositories = remoteRepositories;\n+        getRemoteRepositories().clear();\n+        getRemoteRepositories().addAll( remoteRepositories );\n         \n         return this;\n     }\n@@ -309,7 +317,8 @@ public MavenExecutionRequest setShowErrors( boolean showErrors )\n \n     public MavenExecutionRequest setGoals( List<String> goals )\n     {\n-        this.goals = goals;\n+        getGoals().clear();\n+        getGoals().addAll( goals );\n \n         return this;\n     }\n@@ -337,26 +346,15 @@ public MavenExecutionRequest setLocalRepositoryPath( String localRepository )\n \n     public MavenExecutionRequest setProperties( Properties properties )\n     {\n-        if ( this.properties == null )\n-        {\n-            this.properties = properties;\n-        }\n-        else\n-        {\n-            this.properties.putAll( properties );\n-        }\n+        getProperties().clear();\n+        getProperties().putAll( properties );\n \n         return this;\n     }\n \n     public MavenExecutionRequest setProperty( String key, String value )\n     {\n-        if ( properties == null )\n-        {\n-            properties = new Properties();\n-        }\n-\n-        properties.setProperty( key, value );\n+        getProperties().setProperty( key, value );\n \n         return this;\n     }\n@@ -370,28 +368,40 @@ public MavenExecutionRequest setReactorFailureBehavior( String failureBehavior )\n \n     public MavenExecutionRequest addActiveProfile( String profile )\n     {\n-        getActiveProfiles().add( profile );\n+        if ( !getActiveProfiles().contains( profile ) )\n+        {\n+            getActiveProfiles().add( profile );\n+        }\n \n         return this;\n     }\n \n     public MavenExecutionRequest addInactiveProfile( String profile )\n     {\n-        getInactiveProfiles().add( profile );\n+        if ( !getInactiveProfiles().contains( profile ) )\n+        {\n+            getInactiveProfiles().add( profile );\n+        }\n \n         return this;\n     }\n \n     public MavenExecutionRequest addActiveProfiles( List<String> profiles )\n     {\n-        getActiveProfiles().addAll( profiles );\n+        for ( String profile : profiles )\n+        {\n+            addActiveProfile( profile );\n+        }\n \n         return this;\n     }\n \n     public MavenExecutionRequest addInactiveProfiles( List<String> profiles )\n     {\n-        getInactiveProfiles().addAll( profiles );\n+        for ( String profile : profiles )\n+        {\n+            addInactiveProfile( profile );\n+        }\n \n         return this;\n     }\n@@ -481,60 +491,96 @@ public MavenExecutionRequest setGlobalChecksumPolicy( String globalChecksumPolic\n \n     public List getProxies()\n     {\n+        if ( proxies == null )\n+        {\n+            proxies = new ArrayList();\n+        }\n         return proxies;\n     }\n \n     public MavenExecutionRequest setProxies( List proxies )\n     {\n-        this.proxies = proxies;\n+        getProxies().clear();\n+        getProxies().addAll( proxies );\n \n         return this;\n     }\n \n     public List getServers()\n     {\n+        if ( servers == null )\n+        {\n+            servers = new ArrayList();\n+        }\n         return servers;\n     }\n \n     public MavenExecutionRequest setServers( List servers )\n     {\n-        this.servers = servers;\n+        getServers().clear();\n+        getServers().addAll( servers );\n \n         return this;\n     }\n \n     public List getMirrors()\n     {\n+        if ( mirrors == null )\n+        {\n+            mirrors = new ArrayList();\n+        }\n         return mirrors;\n     }\n \n     public MavenExecutionRequest setMirrors( List mirrors )\n     {\n-        this.mirrors = mirrors;\n+        getMirrors().clear();\n+        getMirrors().addAll( mirrors );\n \n         return this;\n     }\n \n     public List<Profile> getProfiles()\n     {\n+        if ( profiles == null )\n+        {\n+            profiles = new ArrayList<Profile>();\n+        }\n         return profiles;\n     }\n \n     public MavenExecutionRequest setProfiles( List<Profile> profiles )\n     {\n-        this.profiles = profiles;\n+        getProfiles().clear();\n+        getProfiles().addAll( profiles );\n \n         return this;\n     }\n \n     public List<String> getPluginGroups()\n     {\n+        if ( pluginGroups == null )\n+        {\n+            pluginGroups = new ArrayList<String>();\n+        }\n+\n         return pluginGroups;\n     }\n \n     public MavenExecutionRequest setPluginGroups( List<String> pluginGroups )\n     {\n-        this.pluginGroups = pluginGroups;\n+        getPluginGroups().clear();\n+        getPluginGroups().addAll( pluginGroups );\n+\n+        return this;\n+    }\n+\n+    public MavenExecutionRequest addPluginGroup( String pluginGroup )\n+    {\n+        if ( !getPluginGroups().contains( pluginGroup ) )\n+        {\n+            getPluginGroups().add( pluginGroup );\n+        }\n \n         return this;\n     }\n@@ -627,18 +673,25 @@ public MavenExecutionRequest setUserToolchainsFile( File userToolchainsFile )\n \n     public MavenExecutionRequest addRemoteRepository( ArtifactRepository repository )\n     {\n-        if ( remoteRepositories == null )\n+        for ( ArtifactRepository repo : getRemoteRepositories() )\n         {\n-            remoteRepositories = new ArrayList<ArtifactRepository>();\n+            if ( repo.getId() != null && repo.getId().equals( repository.getId() ) )\n+            {\n+                return this;\n+            }\n         }\n \n-        remoteRepositories.add( repository );\n+        getRemoteRepositories().add( repository );\n \n         return this;\n     }\n \n     public List<ArtifactRepository> getRemoteRepositories()\n     {\n+        if ( remoteRepositories == null )\n+        {\n+            remoteRepositories = new ArrayList<ArtifactRepository>();\n+        }\n         return remoteRepositories;\n     }\n \n@@ -666,12 +719,15 @@ public MavenExecutionRequest addProfile( Profile profile )\n             throw new IllegalArgumentException( \"profile missing\" );\n         }\n \n-        if ( profiles == null )\n+        for ( Profile p : getProfiles() )\n         {\n-            profiles = new ArrayList<Profile>();\n+            if ( p.getId() != null && p.getId().equals( profile.getId() ) )\n+            {\n+                return this;\n+            }\n         }\n \n-        profiles.add( profile );\n+        getProfiles().add( profile );\n \n         return this;\n     }",
                "deletions": 41
            },
            {
                "sha": "1caa7cb7db3f43323a05bed905f4c153e0a457d2",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/5eb52b5dee58c99fc05c18d0f74f1019d646357c/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/5eb52b5dee58c99fc05c18d0f74f1019d646357c/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java?ref=5eb52b5dee58c99fc05c18d0f74f1019d646357c",
                "patch": "@@ -151,7 +151,6 @@\n     MavenExecutionRequest addActiveProfile( String profile );\n     MavenExecutionRequest addActiveProfiles( List<String> profiles );\n     List<String> getActiveProfiles();\n-    //MAPI: do we really need to do this? deactivate active profile? seems confusing.\n     MavenExecutionRequest addInactiveProfile( String profile );\n     MavenExecutionRequest addInactiveProfiles( List<String> profiles );\n     List<String> getInactiveProfiles();\n@@ -171,6 +170,7 @@\n     // Plugin groups\n     List<String> getPluginGroups();\n     MavenExecutionRequest setPluginGroups( List<String> pluginGroups );\n+    MavenExecutionRequest addPluginGroup( String pluginGroup );\n \n     boolean isUsePluginUpdateOverride();\n     MavenExecutionRequest setUsePluginUpdateOverride( boolean usePluginUpdateOverride );",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Made plugin manager bail out if requested mojo can't be loaded to save clients from NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/branches/MNG-2766@774885 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/3e287c47bb2bf0bafd06c0129af577145b54f5aa",
        "parent": "https://github.com/apache/maven/commit/7ccc3d878e4fa3451d3084c5d3b7a4e664005919",
        "bug_id": "maven_88",
        "file": [
            {
                "sha": "ddbe266767866e2d0e93eab4ced5e8f0399a6df9",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/3e287c47bb2bf0bafd06c0129af577145b54f5aa/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/3e287c47bb2bf0bafd06c0129af577145b54f5aa/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=3e287c47bb2bf0bafd06c0129af577145b54f5aa",
                "patch": "@@ -493,13 +493,19 @@ private void populatePluginFields( Mojo mojo, MojoDescriptor mojoDescriptor, Cla\n         }\n     }\n \n-    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, ArtifactRepository localRepository, List<ArtifactRepository> remoteRepositories )\n+    public MojoDescriptor getMojoDescriptor( Plugin plugin, String goal, ArtifactRepository localRepository,\n+                                             List<ArtifactRepository> remoteRepositories )\n         throws PluginLoaderException\n     {\n         PluginDescriptor pluginDescriptor = loadPlugin( plugin, localRepository, remoteRepositories );\n \n         MojoDescriptor mojoDescriptor = pluginDescriptor.getMojo( goal );\n \n+        if ( mojoDescriptor == null )\n+        {\n+            throw new PluginLoaderException( plugin, \"Failed to load plugin mojo. Reason: Unknown mojo: \" + goal );\n+        }\n+\n         return mojoDescriptor;\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-3921] Extensions are subject to NPEs in their hashCode() impl\n\no Merged from r727548\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@727561 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/04b358629ca1add9d3e8fdb261637a6008323938",
        "parent": "https://github.com/apache/maven/commit/9002e05de59db39cf2b0ba54dff16e23212adc3f",
        "bug_id": "maven_89",
        "file": [
            {
                "sha": "2f0cb53bc0e84061eb91ab537fc8da296c8eaa00",
                "filename": "maven-model/src/main/mdo/maven.mdo",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/main/mdo/maven.mdo",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/main/mdo/maven.mdo",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/mdo/maven.mdo?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -3412,9 +3412,9 @@\n     public int hashCode()\n     {\n         int result = 17;\n-        result = 37 * result + getArtifactId() != null ? getArtifactId().hashCode() : 0;\n-        result = 37 * result + getGroupId() != null ? getGroupId().hashCode() : 0;\n-        result = 37 * result + getVersion() != null ? getVersion().hashCode() : 0;\n+        result = 37 * result + ( getArtifactId() != null ? getArtifactId().hashCode() : 0 );\n+        result = 37 * result + ( getGroupId() != null ? getGroupId().hashCode() : 0 );\n+        result = 37 * result + ( getVersion() != null ? getVersion().hashCode() : 0 );\n         return result;\n     }\n             ]]>",
                "deletions": 3
            },
            {
                "sha": "a2728e474f0a60c76fbe0c148381e11224d345d4",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationFileTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code ActivationFile}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ActivationFileTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new ActivationFile().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new ActivationFile().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        ActivationFile thing = new ActivationFile();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new ActivationFile().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "76c457fe64f838629c865dd5215d865ed09c2aeb",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationOSTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code ActivationOS}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ActivationOSTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new ActivationOS().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new ActivationOS().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        ActivationOS thing = new ActivationOS();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new ActivationOS().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "d298c5657d424fe4578d0c9931c3e6a33b83f934",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationPropertyTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code ActivationProperty}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ActivationPropertyTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new ActivationProperty().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new ActivationProperty().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        ActivationProperty thing = new ActivationProperty();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new ActivationProperty().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "ba7aad6bcd23ee34184d8746205e5cf6de25bb48",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ActivationTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Activation}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ActivationTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Activation().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Activation().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Activation thing = new Activation();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Activation().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "04a13b818920aa01904d34a0b6e4487002c68243",
                "filename": "maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/BuildTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/BuildTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Build}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class BuildTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Build().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Build().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Build thing = new Build();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Build().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "1b8c3ef2d4653d55d3e9c6e681857511df291e94",
                "filename": "maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/CiManagementTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code CiManagement}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class CiManagementTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new CiManagement().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new CiManagement().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        CiManagement thing = new CiManagement();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new CiManagement().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "6155326c0e5f4e977d7b5d83391d0887146319a4",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ContributorTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Contributor}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ContributorTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Contributor().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Contributor().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Contributor thing = new Contributor();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Contributor().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "b57469f70724785865faf5e776c14e83af38d7c8",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DependencyManagementTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code DependencyManagement}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class DependencyManagementTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new DependencyManagement().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new DependencyManagement().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        DependencyManagement thing = new DependencyManagement();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new DependencyManagement().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "d86a2b49a43d14eb3fc0257b48f9bb204847af54",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DependencyTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Dependency}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class DependencyTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Dependency().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Dependency().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Dependency thing = new Dependency();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Dependency().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "a678db722094e553cb669ab2832fabce768383e9",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DeploymentRepositoryTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code DeploymentRepository}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class DeploymentRepositoryTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new DeploymentRepository().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new DeploymentRepository().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        DeploymentRepository thing = new DeploymentRepository();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new DeploymentRepository().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "eebe4563a5059811adf3289709db6951bb8ea51c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DeveloperTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Developer}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class DeveloperTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Developer().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Developer().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Developer thing = new Developer();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Developer().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "8ac8d99538a8935f5214cb9099174e296bc0e984",
                "filename": "maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/DistributionManagementTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code DistributionManagement}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class DistributionManagementTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new DistributionManagement().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new DistributionManagement().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        DistributionManagement thing = new DistributionManagement();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new DistributionManagement().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "41041443668b0fb41a51fa94e972e994c2f088ab",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ExclusionTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Exclusion}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ExclusionTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Exclusion().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Exclusion().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Exclusion thing = new Exclusion();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Exclusion().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "3c0fe105b7dfa375098e912418e314927524381c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ExtensionTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Extension}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ExtensionTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Extension().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Extension().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Extension thing = new Extension();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Extension().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "0c4d5331ba450456d7649703c344042011d21081",
                "filename": "maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/IssueManagementTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code IssueManagement}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class IssueManagementTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new IssueManagement().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new IssueManagement().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        IssueManagement thing = new IssueManagement();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new IssueManagement().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "248b68c9c120690975aee030f1124be4872b2ea2",
                "filename": "maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/LicenseTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code License}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class LicenseTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new License().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new License().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        License thing = new License();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new License().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "8bd0c73aa9183c8e111c9b41a55f033590f4e0ed",
                "filename": "maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/MailingListTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code MailingList}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class MailingListTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new MailingList().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new MailingList().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        MailingList thing = new MailingList();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new MailingList().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "cb9e6d656335f713bddaae00bf91e01bb74fa07b",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ModelTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ModelTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Model}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ModelTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Model().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Model().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Model thing = new Model();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Model().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "2d5b8eeb5ed26e3c5f2457d85299e29cbcf13ad0",
                "filename": "maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/NotifierTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Notifier}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class NotifierTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Notifier().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Notifier().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Notifier thing = new Notifier();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Notifier().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "4e4f99485a3f7c0f78ead70ac1fd227179887b5d",
                "filename": "maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/OrganizationTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Organization}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class OrganizationTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Organization().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Organization().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Organization thing = new Organization();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Organization().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "a35782cc2736f5cb7283eccebeb7eac7cdf2a1ef",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ParentTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ParentTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Parent}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ParentTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Parent().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Parent().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Parent thing = new Parent();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Parent().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "b6b54acb869db980a6bf39439c924b3d1de8327e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginConfigurationTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code PluginConfiguration}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PluginConfigurationTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new PluginConfiguration().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new PluginConfiguration().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        PluginConfiguration thing = new PluginConfiguration();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new PluginConfiguration().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "0cd16a666b50ad032f4d4166f81337164f9c6400",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginContainerTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code PluginContainer}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PluginContainerTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new PluginContainer().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new PluginContainer().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        PluginContainer thing = new PluginContainer();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new PluginContainer().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "6b14cfb971622b167cad0f8d3302f18a2e64208c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginExecutionTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code PluginExecution}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PluginExecutionTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new PluginExecution().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new PluginExecution().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        PluginExecution thing = new PluginExecution();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new PluginExecution().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "08a83858f6f51858d0c0e226eea41e8a848ce15e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginManagementTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code PluginManagement}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PluginManagementTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new PluginManagement().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new PluginManagement().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        PluginManagement thing = new PluginManagement();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new PluginManagement().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "3a9deb4866f5291f0b9622f45a4db420bf52d36b",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PluginTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PluginTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Plugin}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PluginTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Plugin().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Plugin().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Plugin thing = new Plugin();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Plugin().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "441ead26da46dd8877b7dfeb95668b83dabb1ca9",
                "filename": "maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/PrerequisitesTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Prerequisites}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class PrerequisitesTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Prerequisites().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Prerequisites().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Prerequisites thing = new Prerequisites();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Prerequisites().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "4b950c8c7ae1e6cdf922ad41ed68c7b884cee454",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ProfileTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Profile}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ProfileTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Profile().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Profile().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Profile thing = new Profile();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Profile().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "c016a26d9de7ec86f69c712ad1e1772d3d9efaba",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RelocationTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Relocation}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class RelocationTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Relocation().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Relocation().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Relocation thing = new Relocation();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Relocation().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "cac2bc0436a2280cb6f2d8de1d9ca4cd91e0f8f3",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportPluginTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code ReportPlugin}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ReportPluginTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new ReportPlugin().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new ReportPlugin().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        ReportPlugin thing = new ReportPlugin();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new ReportPlugin().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "2839a9bbc027a9814b239af4d72d471984f6de72",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportSetTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code ReportSet}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ReportSetTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new ReportSet().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new ReportSet().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        ReportSet thing = new ReportSet();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new ReportSet().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "6c3d8a1d4803967a3d42d41a6e846d667f7a7c6e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ReportingTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Reporting}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ReportingTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Reporting().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Reporting().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Reporting thing = new Reporting();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Reporting().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "ef9919df5842d9ea9cd947c30843cd82bb92fe8e",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RepositoryPolicyTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code RepositoryPolicy}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class RepositoryPolicyTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new RepositoryPolicy().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new RepositoryPolicy().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        RepositoryPolicy thing = new RepositoryPolicy();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new RepositoryPolicy().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "8113a59c1866f644dd49065e004d680aabe572e4",
                "filename": "maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/RepositoryTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Repository}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class RepositoryTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Repository().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Repository().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Repository thing = new Repository();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Repository().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "c906bbe18c2b65dc5104e3103105e4788b1ec7fd",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ResourceTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Resource}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ResourceTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Resource().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Resource().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Resource thing = new Resource();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Resource().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "fc76fcae21ebbaa74059cb18dc6d02398ae8697c",
                "filename": "maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/ScmTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/ScmTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Scm}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class ScmTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Scm().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Scm().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Scm thing = new Scm();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Scm().toString() );\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "0626f79f039f33a2a721ddad994da93276ea4a6a",
                "filename": "maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "blob_url": "https://github.com/apache/maven/blob/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "raw_url": "https://github.com/apache/maven/raw/04b358629ca1add9d3e8fdb261637a6008323938/maven-model/src/test/java/org/apache/maven/model/SiteTest.java",
                "status": "added",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/test/java/org/apache/maven/model/SiteTest.java?ref=04b358629ca1add9d3e8fdb261637a6008323938",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.maven.model;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests {@code Site}.\n+ * \n+ * @author Benjamin Bentmann\n+ * @version $Id$\n+ */\n+public class SiteTest\n+    extends TestCase\n+{\n+\n+    public void testHashCodeNullSafe()\n+    {\n+        new Site().hashCode();\n+    }\n+\n+    public void testEqualsNullSafe()\n+    {\n+        assertFalse( new Site().equals( null ) );\n+    }\n+\n+    public void testEqualsIdentity()\n+    {\n+        Site thing = new Site();\n+        assertTrue( thing.equals( thing ) );\n+    }\n+\n+    public void testToStringNullSafe()\n+    {\n+        assertNotNull( new Site().toString() );\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Use latest plexus-container-default, to correct a NPE with ant-based mojos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@667207 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/be00b00c703b8d9defed15e3687708ae8ddd9f34",
        "parent": "https://github.com/apache/maven/commit/db3a5a12d94c6978ab5d39d0d130caae6d1e2aa3",
        "bug_id": "maven_90",
        "file": [
            {
                "sha": "a48dc309b5863c0d0825d08c6431556ece74fbd7",
                "filename": "pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/be00b00c703b8d9defed15e3687708ae8ddd9f34/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/be00b00c703b8d9defed15e3687708ae8ddd9f34/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/pom.xml?ref=be00b00c703b8d9defed15e3687708ae8ddd9f34",
                "patch": "@@ -223,7 +223,7 @@ under the License.\n   </modules>\n \n   <properties>\n-    <plexusVersion>1.0-alpha-46-SNAPSHOT</plexusVersion>\n+    <plexusVersion>1.0-alpha-48</plexusVersion>\n     <wagonVersion>1.0-beta-2</wagonVersion>\n   </properties>\n   ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "report plugin map flushing shall be synchronized to prevent NPEs in multithreaded envs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@650807 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/12a125bcadf49ede9698d92a74ee4b5327fc12aa",
        "parent": "https://github.com/apache/maven/commit/5900250b450406df801a91062a2fda97fe030ad5",
        "bug_id": "maven_91",
        "file": [
            {
                "sha": "19549f71bfca500383dd4f1589af4110134066cb",
                "filename": "maven-model/src/main/mdo/maven.mdo",
                "blob_url": "https://github.com/apache/maven/blob/12a125bcadf49ede9698d92a74ee4b5327fc12aa/maven-model/src/main/mdo/maven.mdo",
                "raw_url": "https://github.com/apache/maven/raw/12a125bcadf49ede9698d92a74ee4b5327fc12aa/maven-model/src/main/mdo/maven.mdo",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/mdo/maven.mdo?ref=12a125bcadf49ede9698d92a74ee4b5327fc12aa",
                "patch": "@@ -3208,7 +3208,7 @@\n     /**\n      * Reset the <code>reportPluginMap</code> field to <code>null</code>\n      */\n-    public void flushReportPluginMap()\n+    public synchronized void flushReportPluginMap()\n     {\n         this.reportPluginMap = null;\n     }\n@@ -3217,7 +3217,7 @@\n      * @return a Map of plugins field with <code>ReportPlugin#getKey()</code> as key\n      * @see org.apache.maven.model.ReportPlugin#getKey()\n      */\n-    public java.util.Map getReportPluginsAsMap()\n+    public synchronized java.util.Map getReportPluginsAsMap()\n     {\n         if ( reportPluginMap == null )\n         {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MEVENIDE-618 synchronize the flushPluginMap and getPluginsAsMap to prevent NPEs in multi thread access.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@643878 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/30ea33aefbb94badfa39456365d2d2b232ada8b3",
        "parent": "https://github.com/apache/maven/commit/7442d682d170ee5635ad7d5aeef9f7db13d149b9",
        "bug_id": "maven_92",
        "file": [
            {
                "sha": "06aa186713dcbf7717c183db16fe8f0718517d09",
                "filename": "maven-model/src/main/mdo/maven.mdo",
                "blob_url": "https://github.com/apache/maven/blob/30ea33aefbb94badfa39456365d2d2b232ada8b3/maven-model/src/main/mdo/maven.mdo",
                "raw_url": "https://github.com/apache/maven/raw/30ea33aefbb94badfa39456365d2d2b232ada8b3/maven-model/src/main/mdo/maven.mdo",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/mdo/maven.mdo?ref=30ea33aefbb94badfa39456365d2d2b232ada8b3",
                "patch": "@@ -834,7 +834,7 @@\n     /**\n      * Reset the <code>pluginsMap</code> field to <code>null</code>\n      */\n-    public void flushPluginMap()\n+    public synchronized void flushPluginMap()\n     {\n         this.pluginMap = null;\n     }\n@@ -843,7 +843,7 @@\n      * @return a Map of plugins field with <code>Plugins#getKey()</code> as key\n      * @see org.apache.maven.model.Plugin#getKey()\n      */\n-    public java.util.Map getPluginsAsMap()\n+    public synchronized java.util.Map getPluginsAsMap()\n     {\n         if ( pluginMap == null )\n         {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixing NPE in execution request. Apparently, bootstrap was not run after these were changed.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@588034 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/9d94f8d310c9456f849bcce81ddc9431fc91b609",
        "parent": "https://github.com/apache/maven/commit/16c064c4bcd3c715a574bf47810673532b15342c",
        "bug_id": "maven_93",
        "file": [
            {
                "sha": "6caa25218ca64affda1c56c5f066b60a15a4eafa",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 25,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=9d94f8d310c9456f849bcce81ddc9431fc91b609",
                "patch": "@@ -39,7 +39,7 @@\n     implements MavenExecutionRequest\n {\n     private ArtifactRepository localRepository;\n-    \n+\n     private File localRepositoryPath;\n \n     private boolean offline = false;\n@@ -81,7 +81,7 @@\n     private boolean useReactor = false;\n \n     private boolean recursive = true;\n-    \n+\n     private File pom;\n \n     private String reactorFailureBehavior = REACTOR_FAIL_FAST;\n@@ -111,7 +111,7 @@\n     private List remoteRepositories;\n \n     /**\n-     * Suppress SNAPSHOT updates. \n+     * Suppress SNAPSHOT updates.\n      * @issue MNG-2681\n      */\n     private boolean noSnapshotUpdates;\n@@ -276,14 +276,14 @@ public MavenExecutionRequest setLocalRepository( ArtifactRepository localReposit\n \n     public MavenExecutionRequest setLocalRepositoryPath( File localRepository )\n     {\n-        this.localRepositoryPath = localRepository;\n+        localRepositoryPath = localRepository;\n \n         return this;\n     }\n \n     public MavenExecutionRequest setLocalRepositoryPath( String localRepository )\n     {\n-        this.localRepositoryPath = new File( localRepository );\n+        localRepositoryPath = new File( localRepository );\n \n         return this;\n     }\n@@ -316,7 +316,7 @@ public MavenExecutionRequest setProperty( String key, String value )\n \n     public MavenExecutionRequest setReactorFailureBehavior( String failureBehavior )\n     {\n-        this.reactorFailureBehavior = failureBehavior;\n+        reactorFailureBehavior = failureBehavior;\n \n         return this;\n     }\n@@ -363,7 +363,7 @@ public MavenExecutionRequest addEventMonitor( EventMonitor monitor )\n \n     public MavenExecutionRequest setUseReactor( boolean reactorActive )\n     {\n-        this.useReactor = reactorActive;\n+        useReactor = reactorActive;\n \n         return this;\n     }\n@@ -376,7 +376,10 @@ public boolean useReactor()\n     /** @deprecated use {@link #setPom(File)} */\n     public MavenExecutionRequest setPomFile( String pomFilename )\n     {\n-        this.pom = new File( pomFilename );\n+        if ( pomFilename != null )\n+        {\n+            pom = new File( pomFilename );\n+        }\n \n         return this;\n     }\n@@ -390,7 +393,7 @@ public MavenExecutionRequest setPom( File pom )\n \n     public MavenExecutionRequest setInteractiveMode( boolean interactive )\n     {\n-        this.interactiveMode = interactive;\n+        interactiveMode = interactive;\n \n         return this;\n     }\n@@ -438,7 +441,7 @@ public MavenExecutionRequest setGlobalChecksumPolicy( String globalChecksumPolic\n     }\n \n     // ----------------------------------------------------------------------------\n-    // Settings equivalents \n+    // Settings equivalents\n     // ----------------------------------------------------------------------------\n \n     public List getProxies()\n@@ -591,7 +594,7 @@ public MavenExecutionRequest addRemoteRepository( ArtifactRepository repository\n             remoteRepositories = new ArrayList();\n         }\n \n-        remoteRepositories.add( repository ); \n+        remoteRepositories.add( repository );\n \n         return this;\n     }",
                "deletions": 11
            },
            {
                "sha": "5d3e7fc3db1c179c901326b95e7bc0d888045089",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/MavenExecutionRequest.java?ref=9d94f8d310c9456f849bcce81ddc9431fc91b609",
                "patch": "@@ -109,9 +109,8 @@\n     List getEventMonitors();\n \n     // Pom\n-    /** @deprecated use {@link #setPom(File)} */\n     MavenExecutionRequest setPomFile( String pomFilename );\n-    /** @deprecated use {@link #getPom()} */\n+\n     String getPomFile();\n \n     MavenExecutionRequest setPom( File pom );",
                "deletions": 2
            },
            {
                "sha": "f29dc9b496bac92a48bea30687970d4a731d5c8f",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/CLIRequestUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-embedder/src/main/java/org/apache/maven/cli/CLIRequestUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/9d94f8d310c9456f849bcce81ddc9431fc91b609/maven-embedder/src/main/java/org/apache/maven/cli/CLIRequestUtils.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/CLIRequestUtils.java?ref=9d94f8d310c9456f849bcce81ddc9431fc91b609",
                "patch": "@@ -193,14 +193,13 @@ else if ( quiet )\n \n         Properties executionProperties = getExecutionProperties( commandLine );\n \n-        return new DefaultMavenExecutionRequest()\n+        MavenExecutionRequest request = new DefaultMavenExecutionRequest()\n             .setBaseDirectory( baseDirectory )\n             .setGoals( goals )\n             .setProperties( executionProperties ) // optional\n             .setReactorFailureBehavior( reactorFailureBehaviour ) // default: fail fast\n             .setRecursive( recursive ) // default: true\n             .setUseReactor( useReactor ) // default: false\n-            .setPomFile( alternatePomFile ) // optional\n             .setShowErrors( showErrors ) // default: false\n             .setInteractiveMode( interactive ) // default: false\n             .setOffline( offline ) // default: false\n@@ -212,6 +211,13 @@ else if ( quiet )\n             .setUpdateSnapshots( updateSnapshots ) // default: false\n             .setNoSnapshotUpdates( noSnapshotUpdates ) // default: false\n             .setGlobalChecksumPolicy( globalChecksumPolicy ); // default: warn\n+\n+        if ( alternatePomFile != null )\n+        {\n+            request.setPom( new File( alternatePomFile ) );\n+        }\n+\n+        return request;\n     }\n \n     // ----------------------------------------------------------------------",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-1849 Fix Extension.hashCode() throwing NPE if groupId or artifactId is null\nSubmitted by: David Hawkins\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@543381 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/6db368df4eaf8d2c1e5cd61b4f86eeffb780c484",
        "parent": "https://github.com/apache/maven/commit/6cb79190cdb8883b6330a621a2befbca05f43d75",
        "bug_id": "maven_94",
        "file": [
            {
                "sha": "44233ad0e9ed27424fb99ae96794262226f789a4",
                "filename": "maven-model/src/main/mdo/maven.mdo",
                "blob_url": "https://github.com/apache/maven/blob/6db368df4eaf8d2c1e5cd61b4f86eeffb780c484/maven-model/src/main/mdo/maven.mdo",
                "raw_url": "https://github.com/apache/maven/raw/6db368df4eaf8d2c1e5cd61b4f86eeffb780c484/maven-model/src/main/mdo/maven.mdo",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-model/src/main/mdo/maven.mdo?ref=6db368df4eaf8d2c1e5cd61b4f86eeffb780c484",
                "patch": "@@ -3888,9 +3888,9 @@\n     public int hashCode()\n     {\n         int result = 17;\n-        result = 37 * result + getArtifactId().hashCode();\n-        result = 37 * result + getGroupId().hashCode();\n-        result = 37 * result + getVersion() != null ? getVersion().hashCode() : 0;\n+        result = 37 * result + getArtifactId() != null ? getArtifactId().hashCode() : 0;                                                    \n+        result = 37 * result + getGroupId() != null ? getGroupId().hashCode() : 0;                                                          \n+        result = 37 * result + getVersion() != null ? getVersion().hashCode() : 0;         \n         return result;\n     }\n             ]]>",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Fixing NPE's related to a reactor manager that doesn't exist (in the case of a build error, f.e.).\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@496406 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/4e51a3d1850c619e04c93e7b8e2ea4622f70f6de",
        "parent": "https://github.com/apache/maven/commit/01b08e86d1c69519f6c1a70915572a31fadae58e",
        "bug_id": "maven_95",
        "file": [
            {
                "sha": "ef1a798b5c55a4d73a8c1426d5ea2aa43b6c3e59",
                "filename": "maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "blob_url": "https://github.com/apache/maven/blob/4e51a3d1850c619e04c93e7b8e2ea4622f70f6de/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "raw_url": "https://github.com/apache/maven/raw/4e51a3d1850c619e04c93e7b8e2ea4622f70f6de/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/DefaultMaven.java?ref=4e51a3d1850c619e04c93e7b8e2ea4622f70f6de",
                "patch": "@@ -126,14 +126,16 @@ public MavenExecutionResult execute( MavenExecutionRequest request )\n \n         // Either the build was successful, or it was a fail_at_end/fail_never reactor build\n \n+        ReactorManager reactorManager = result.getReactorManager();\n+        \n         // TODO: should all the logging be left to the CLI?\n-        logReactorSummary( result.getReactorManager() );\n+        logReactorSummary( reactorManager );\n \n-        if ( result.getReactorManager().hasBuildFailures() )\n+        if ( reactorManager != null && reactorManager.hasBuildFailures() )\n         {\n-            logErrors( result.getReactorManager(), request.isShowErrors() );\n+            logErrors( reactorManager, request.isShowErrors() );\n \n-            if ( !result.getReactorManager().FAIL_NEVER.equals( result.getReactorManager().getFailureBehavior() ) )\n+            if ( !ReactorManager.FAIL_NEVER.equals( reactorManager.getFailureBehavior() ) )\n             {\n                 dispatcher.dispatchError( event, request.getBaseDirectory(), null );\n \n@@ -153,7 +155,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )\n             }\n         }\n \n-        logSuccess( result.getReactorManager() );\n+        logSuccess( reactorManager );\n \n         stats( request.getStartTime() );\n \n@@ -608,7 +610,7 @@ protected void logSuccess( ReactorManager rm )\n \n     private void logReactorSummary( ReactorManager rm )\n     {\n-        if ( rm.hasMultipleProjects() && rm.executedMultipleProjects() )\n+        if ( rm != null && rm.hasMultipleProjects() && rm.executedMultipleProjects() )\n         {\n             getLogger().info( \"\" );\n             getLogger().info( \"\" );",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-2733 When request.setPomFile( file ) is used, takes its basedir for the execution request so that request.getBasedir() doesn't NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@491524 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/23e2504d23325b034969f4977ea2c6ac7cf5785d",
        "parent": "https://github.com/apache/maven/commit/cb381ffd76f2b561290766e625be814a026b4717",
        "bug_id": "maven_96",
        "file": [
            {
                "sha": "c45b077e31af66efd86cae67ee14ab5489d79216",
                "filename": "maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "blob_url": "https://github.com/apache/maven/blob/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "raw_url": "https://github.com/apache/maven/raw/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/DefaultMaven.java?ref=23e2504d23325b034969f4977ea2c6ac7cf5785d",
                "patch": "@@ -311,7 +311,7 @@ private MavenExecutionResult doExecute( MavenExecutionRequest request,\n             lifecycleExecutor.execute( session, rm, dispatcher );\n         }\n         catch ( Exception e )\n-        {\n+        {                        \n             executionExceptions.add( new BuildFailureException( e.getMessage(), e ) );\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "85b70290c5acc71b3f06c3045dd3988783fb89ab",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "blob_url": "https://github.com/apache/maven/blob/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "raw_url": "https://github.com/apache/maven/raw/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenExecutionRequest.java?ref=23e2504d23325b034969f4977ea2c6ac7cf5785d",
                "patch": "@@ -125,6 +125,11 @@ public MavenExecutionRequest setSettingsFile( String settingsFile )\n \n     public String getBaseDirectory()\n     {\n+        if ( basedir == null )\n+        {\n+            return null;\n+        }\n+\n         return basedir.getAbsolutePath();\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "ac3b13fb74fea52284a4deee616566bf9716f6b0",
                "filename": "maven-embedder/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/pom.xml?ref=23e2504d23325b034969f4977ea2c6ac7cf5785d",
                "patch": "@@ -27,7 +27,7 @@\n   <artifactId>maven-embedder</artifactId>\n   <name>Maven Embedder</name>\n   <properties>\n-    <bundleVersion>2.1.0.v20061231-1908</bundleVersion>\n+    <bundleVersion>2.1.0.v20061231-1929</bundleVersion>\n   </properties>\n   <build>\n     <resources>",
                "deletions": 1
            },
            {
                "sha": "f69592528ecbf7ad680bc74b57afc40b757311dc",
                "filename": "maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java",
                "blob_url": "https://github.com/apache/maven/blob/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java",
                "raw_url": "https://github.com/apache/maven/raw/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/embedder/execution/DefaultMavenExecutionRequestDefaultsPopulator.java?ref=23e2504d23325b034969f4977ea2c6ac7cf5785d",
                "patch": "@@ -144,6 +144,13 @@ else if ( request.isNoSnapshotUpdates() )\n             throw new MavenEmbedderException( \"Unable to configure Maven for execution\", e );\n         }\n \n+        // BaseDirectory in MavenExecutionRequest\n+\n+        if ( request.getPomFile() != null && request.getBaseDirectory() == null )\n+        {\n+            request.setBasedir( new File( request.getPomFile() ) );\n+        }\n+\n         return request;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "5b697a9ce2ea37f5ed02387eaaf518e57ca639d3",
                "filename": "maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "blob_url": "https://github.com/apache/maven/blob/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "raw_url": "https://github.com/apache/maven/raw/23e2504d23325b034969f4977ea2c6ac7cf5785d/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java",
                "status": "modified",
                "changes": 32,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/test/java/org/apache/maven/embedder/MavenEmbedderTest.java?ref=23e2504d23325b034969f4977ea2c6ac7cf5785d",
                "patch": "@@ -54,12 +54,12 @@ public void testMavenEmbedder()\n     // Goal/Phase execution tests\n     // ----------------------------------------------------------------------\n \n-    public void testPhaseExecution()\n+    public void testSimplePhaseExecutionUsingABaseDirectory()\n         throws Exception\n     {\n         File testDirectory = new File( basedir, \"src/test/embedder-test-project\" );\n \n-        File targetDirectory = new File( basedir, \"target/embedder-test-project\" );\n+        File targetDirectory = new File( basedir, \"target/embedder-test-project0\" );\n \n         FileUtils.copyDirectoryStructure( testDirectory, targetDirectory );\n \n@@ -69,6 +69,34 @@ public void testPhaseExecution()\n \n         MavenExecutionResult result = maven.execute( request );\n \n+        MavenProject project = result.getMavenProject();\n+\n+        assertEquals( \"embedder-test-project\", project.getArtifactId() );\n+\n+        File jar = new File( targetDirectory, \"target/embedder-test-project-1.0-SNAPSHOT.jar\" );\n+\n+        assertTrue( jar.exists() );\n+    }\n+\n+    public void testSimplePhaseExecutionUsingAPomFile()\n+        throws Exception\n+    {\n+        File testDirectory = new File( basedir, \"src/test/embedder-test-project\" );\n+\n+        File targetDirectory = new File( basedir, \"target/embedder-test-project1\" );\n+\n+        FileUtils.copyDirectoryStructure( testDirectory, targetDirectory );\n+\n+        MavenExecutionRequest request = new DefaultMavenExecutionRequest()\n+            .setPomFile( new File( targetDirectory, \"pom.xml\" ).getAbsolutePath() )\n+            .setGoals( Arrays.asList( new String[]{ \"package\" } ) );\n+\n+        MavenExecutionResult result = maven.execute( request );\n+\n+        MavenProject project = result.getMavenProject();\n+\n+        assertEquals( \"embedder-test-project\", project.getArtifactId() );\n+\n         File jar = new File( targetDirectory, \"target/embedder-test-project-1.0-SNAPSHOT.jar\" );\n \n         assertTrue( jar.exists() );",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "PR: MNG-1232\nSubmitted by: Jerome Lacoste\navoid NPE in error reporting under some circumstances\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@330207 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/d848ba2acdd2d1f74669f92d99688bb86c278af0",
        "parent": "https://github.com/apache/maven/commit/20ecf7400f97eb454f9fba0eeb8580a5f9686909",
        "bug_id": "maven_97",
        "file": [
            {
                "sha": "49a9ea3ae6a015e75fe797fe24a3855b0ca33f5b",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/PluginConfigurationException.java",
                "blob_url": "https://github.com/apache/maven/blob/d848ba2acdd2d1f74669f92d99688bb86c278af0/maven-core/src/main/java/org/apache/maven/plugin/PluginConfigurationException.java",
                "raw_url": "https://github.com/apache/maven/raw/d848ba2acdd2d1f74669f92d99688bb86c278af0/maven-core/src/main/java/org/apache/maven/plugin/PluginConfigurationException.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/PluginConfigurationException.java?ref=d848ba2acdd2d1f74669f92d99688bb86c278af0",
                "patch": "@@ -269,7 +269,10 @@ public String buildConfigurationDiagnosticMessage( ComponentConfigurationExcepti\n         if ( failedConfiguration != null )\n         {\n             String value = failedConfiguration.getValue( null );\n-            addParameterUsageInfo( value, message );\n+            if ( value != null )\n+            {\n+                addParameterUsageInfo( value, message );\n+            }\n         }\n \n         message.append( \"\\n\\nCause: \" ).append( cce.getMessage() );",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "PR: MNG-1160\nfix up some deployment repository determination logic, and avoid NPE in the process\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@312810 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9",
        "parent": "https://github.com/apache/maven/commit/d3f5c3d7555d76887abef3bf4de5d36e5a75137a",
        "bug_id": "maven_98",
        "file": [
            {
                "sha": "f778e731aa7ae1a010428ea867ada3d28e3d84cd",
                "filename": "maven-artifact-ant/sample-build-test.pom",
                "blob_url": "https://github.com/apache/maven/blob/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/sample-build-test.pom",
                "raw_url": "https://github.com/apache/maven/raw/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/sample-build-test.pom",
                "status": "added",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/sample-build-test.pom?ref=8a6aae6db4f048400b3fe3f78f1869150cdd6dd9",
                "patch": "@@ -0,0 +1,6 @@\n+<project>\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+  <groupId>org.apache.maven.test</groupId>\r\n+  <artifactId>sample-build-test</artifactId>\r\n+  <version>2.0-beta-4-SNAPSHOT</version>\r\n+</project>\r",
                "deletions": 0
            },
            {
                "sha": "e072640e4ff4919141e506c579427f0c83feffcb",
                "filename": "maven-artifact-ant/sample.build.xml",
                "blob_url": "https://github.com/apache/maven/blob/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/sample.build.xml",
                "raw_url": "https://github.com/apache/maven/raw/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/sample.build.xml",
                "status": "modified",
                "changes": 13,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/sample.build.xml?ref=8a6aae6db4f048400b3fe3f78f1869150cdd6dd9",
                "patch": "@@ -70,7 +70,7 @@\n \n   <target name=\"foo\" depends=\"initTaskDefs\">\n     <artifact:dependencies pathId=\"dependency.classpath\" filesetId=\"dependency.fileset\">\n-      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-2\">\n+      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-4\">\n         <exclusion groupId=\"junit\" artifactId=\"junit\"/>\n       </dependency>\n       <dependency groupId=\"plexus\" artifactId=\"plexus-container-default\" version=\"1.0-alpha-6-SNAPSHOT\"/>\n@@ -164,7 +164,7 @@\n     <artifact:remoteRepository id=\"deploy.repository\" url=\"scm:svn:${scm.url}\" layout=\"default\"/>\n \n     <artifact:dependencies pathId=\"dependency.classpath\">\n-      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-2\"/>\n+      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-4\"/>\n       <dependency groupId=\"plexus\" artifactId=\"plexus-container-default\" version=\"1.0-alpha-6-SNAPSHOT\"/>\n       <localRepository refid=\"local.repository\"/>\n     </artifact:dependencies>\n@@ -183,7 +183,7 @@\n     <artifact:localRepository id=\"local.repository.scm\" location=\"${basedir}/target/local-repo-scm\" layout=\"default\"/>\n \n     <artifact:dependencies pathId=\"dependency.classpath.scm\">\n-      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-2\"/>\n+      <dependency groupId=\"org.apache.maven.wagon\" artifactId=\"wagon-provider-test\" version=\"1.0-alpha-4\"/>\n       <dependency groupId=\"plexus\" artifactId=\"plexus-container-default\" version=\"1.0-alpha-6-SNAPSHOT\"/>\n       <localRepository refid=\"local.repository.scm\"/>\n       <remoteRepository refid=\"deploy.repository\"/>\n@@ -202,5 +202,12 @@\n       <pom refid=\"invalid-ref\" />\n     </artifact:dependencies>\n   </target>\n+\n+  <target name=\"test-no-dist-mgmt\" depends=\"initTaskDefs\">\n+    <artifact:deploy file=\"sample-build-test.pom\">\n+      <pom file=\"sample-build-test.pom\" />\n+      <remoteRepository refid=\"deploy.repository\" />\n+    </artifact:deploy>  \n+  </target>\n </project>\n ",
                "deletions": 3
            },
            {
                "sha": "504b2e215ee59f661273dbd5c549923a6c0286ed",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DeployTask.java",
                "blob_url": "https://github.com/apache/maven/blob/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DeployTask.java",
                "raw_url": "https://github.com/apache/maven/raw/8a6aae6db4f048400b3fe3f78f1869150cdd6dd9/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DeployTask.java",
                "status": "modified",
                "changes": 45,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DeployTask.java?ref=8a6aae6db4f048400b3fe3f78f1869150cdd6dd9",
                "patch": "@@ -21,6 +21,7 @@\n import org.apache.maven.artifact.deployer.ArtifactDeploymentException;\n import org.apache.maven.artifact.metadata.ArtifactMetadata;\n import org.apache.maven.artifact.repository.ArtifactRepository;\n+import org.apache.maven.model.DistributionManagement;\n import org.apache.maven.project.MavenProjectBuilder;\n import org.apache.maven.project.artifact.ProjectArtifactMetadata;\n import org.apache.tools.ant.BuildException;\n@@ -54,35 +55,47 @@ public void execute()\n             throw new BuildException( \"A POM element is required to deploy to the repository\" );\n         }\n \n-        if ( remoteRepository == null )\n+        Artifact artifact = createArtifact( pom );\n+\n+        DistributionManagement distributionManagement = pom.getDistributionManagement();\n+\n+        if ( remoteSnapshotRepository == null && remoteRepository == null )\n         {\n-            if ( pom.getDistributionManagement() == null || pom.getDistributionManagement().getRepository() == null )\n+            if ( distributionManagement != null )\n             {\n-                throw new BuildException( \"A distributionManagement element is required in your POM to deploy\" );\n+                if ( distributionManagement.getSnapshotRepository() != null )\n+                {\n+                    remoteSnapshotRepository = createAntRemoteRepositoryBase(\n+                        distributionManagement.getSnapshotRepository() );\n+                }\n+                if ( distributionManagement.getRepository() != null )\n+                {\n+                    remoteRepository = createAntRemoteRepositoryBase( distributionManagement.getRepository() );\n+                }\n             }\n-\n-            remoteRepository = createAntRemoteRepositoryBase( pom.getDistributionManagement().getRepository() );\n         }\n \n         if ( remoteSnapshotRepository == null )\n         {\n-            if ( pom.getDistributionManagement().getSnapshotRepository() != null )\n-            {\n-                remoteSnapshotRepository = createAntRemoteRepositoryBase(\n-                    pom.getDistributionManagement().getSnapshotRepository() );\n-            }\n+            remoteSnapshotRepository = remoteRepository;\n         }\n \n-        // Deploy the POM\n-        Artifact artifact = createArtifact( pom );\n-\n-        ArtifactRepository deploymentRepository = createRemoteArtifactRepository( remoteRepository );\n-\n-        if ( remoteSnapshotRepository != null && artifact.isSnapshot() )\n+        ArtifactRepository deploymentRepository = null;\n+        if ( artifact.isSnapshot() && remoteSnapshotRepository != null )\n         {\n             deploymentRepository = createRemoteArtifactRepository( remoteSnapshotRepository );\n         }\n+        else if ( remoteRepository != null )\n+        {\n+            deploymentRepository = createRemoteArtifactRepository( remoteRepository );\n+        }\n+        else\n+        {\n+            throw new BuildException(\n+                \"A distributionManagement element or remoteRepository element is required to deploy\" );\n+        }\n \n+        // Deploy the POM\n         boolean isPomArtifact = \"pom\".equals( pom.getPackaging() );\n         if ( !isPomArtifact )\n         {",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Resolving: MNG-1022...Adding TestProfileInjector to avoid injecting profiles for tests, and still guard against NPEs when profiles exist.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@291751 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea",
        "parent": "https://github.com/apache/maven/commit/945af4835915ac254924a8be367925a979f12d78",
        "bug_id": "maven_99",
        "file": [
            {
                "sha": "cc00d4ed4574a197746af0e0793d273fd68cc71f",
                "filename": "maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "blob_url": "https://github.com/apache/maven/blob/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "raw_url": "https://github.com/apache/maven/raw/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java?ref=b1c59f6d19e93c18a7daeccccda47af6fd59b0ea",
                "patch": "@@ -23,6 +23,7 @@\n import org.codehaus.plexus.util.xml.Xpp3Dom;\n \n import java.io.File;\n+import java.util.Iterator;\n import java.util.List;\n \n /**\n@@ -53,12 +54,22 @@ public void testProjectBuilder()\n \n         // Plugin0 [plexus]\n \n-        Plugin plugin = (Plugin) plugins.get( 0 );\n-\n-        assertEquals( \"org.apache.maven.plugins\", plugin.getGroupId() );\n-\n-        assertEquals( \"maven-plexus-plugin\", plugin.getArtifactId() );\n-\n+        String key = \"org.apache.maven.plugins:maven-plexus-plugin\";\n+        \n+        Plugin plugin = null;\n+        for ( Iterator it = plugins.iterator(); it.hasNext(); )\n+        {\n+            Plugin check = (Plugin) it.next();\n+            \n+            if ( key.equals( check.getKey() ) )\n+            {\n+                plugin = check;\n+                break;\n+            }\n+        }\n+        \n+        assertNotNull( plugin );\n+        \n         assertEquals( \"1.0\", plugin.getVersion() );\n \n         Xpp3Dom configuration = (Xpp3Dom) plugin.getConfiguration();",
                "deletions": 6
            },
            {
                "sha": "5e759de54d32c58e150457afc9b6b39c5c385286",
                "filename": "maven-project/src/test/java/org/apache/maven/project/injection/TestProfileInjector.java",
                "blob_url": "https://github.com/apache/maven/blob/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/java/org/apache/maven/project/injection/TestProfileInjector.java",
                "raw_url": "https://github.com/apache/maven/raw/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/java/org/apache/maven/project/injection/TestProfileInjector.java",
                "status": "added",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/java/org/apache/maven/project/injection/TestProfileInjector.java?ref=b1c59f6d19e93c18a7daeccccda47af6fd59b0ea",
                "patch": "@@ -0,0 +1,15 @@\n+package org.apache.maven.project.injection;\n+\n+import org.apache.maven.model.Model;\n+import org.apache.maven.model.Profile;\n+\n+public class TestProfileInjector\n+    implements ProfileInjector\n+{\n+\n+    public void inject( Profile profile, Model model )\n+    {\n+        // do nothing.\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "e8192d2bc406ef3f71224a42abd555c84d9f845a",
                "filename": "maven-project/src/test/resources/org/apache/maven/project/ProjectClasspathTest.xml",
                "blob_url": "https://github.com/apache/maven/blob/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/resources/org/apache/maven/project/ProjectClasspathTest.xml",
                "raw_url": "https://github.com/apache/maven/raw/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/resources/org/apache/maven/project/ProjectClasspathTest.xml",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/resources/org/apache/maven/project/ProjectClasspathTest.xml?ref=b1c59f6d19e93c18a7daeccccda47af6fd59b0ea",
                "patch": "@@ -14,6 +14,11 @@\n       </requirements>\n     </component>\n     -->\n+    <component>\n+      <role>org.apache.maven.project.injection.ProfileInjector</role>\n+      <role-hint>test</role-hint>\n+      <implementation>org.apache.maven.project.injection.TestProfileInjector</implementation>\n+    </component>\n     <component>\n       <role>org.apache.maven.project.TestArtifactResolver</role>\n       <implementation>org.apache.maven.project.TestArtifactResolver</implementation>\n@@ -43,6 +48,10 @@\n         <requirement>\n           <role>org.apache.maven.project.injection.ModelDefaultsInjector</role>\n         </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.injection.ProfileInjector</role>\n+          <role-hint>test</role-hint>\n+        </requirement>\n         <requirement>\n           <role>org.apache.maven.project.interpolation.ModelInterpolator</role>\n         </requirement>",
                "deletions": 0
            },
            {
                "sha": "e8192d2bc406ef3f71224a42abd555c84d9f845a",
                "filename": "maven-project/src/test/resources/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.xml",
                "blob_url": "https://github.com/apache/maven/blob/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/resources/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.xml",
                "raw_url": "https://github.com/apache/maven/raw/b1c59f6d19e93c18a7daeccccda47af6fd59b0ea/maven-project/src/test/resources/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.xml",
                "status": "added",
                "changes": 79,
                "additions": 79,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/resources/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.xml?ref=b1c59f6d19e93c18a7daeccccda47af6fd59b0ea",
                "patch": "@@ -0,0 +1,79 @@\n+<plexus>\n+  <components>\n+    <!-- Due to PLX-108, have to work around it...\n+    <component>\n+      <role>org.apache.maven.artifact.ArtifactResolver</role>\n+      <implementation>org.apache.maven.project.TestArtifactResolvertion>\n+      <requirements>\n+        <requirement>\n+          <role>org.apache.maven.artifact.manager.WagonManager</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>\n+        </requirement>\n+      </requirements>\n+    </component>\n+    -->\n+    <component>\n+      <role>org.apache.maven.project.injection.ProfileInjector</role>\n+      <role-hint>test</role-hint>\n+      <implementation>org.apache.maven.project.injection.TestProfileInjector</implementation>\n+    </component>\n+    <component>\n+      <role>org.apache.maven.project.TestArtifactResolver</role>\n+      <implementation>org.apache.maven.project.TestArtifactResolver</implementation>\n+      <requirements>\n+        <requirement>\n+          <role>org.apache.maven.artifact.manager.WagonManager</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.repository.ArtifactRepositoryFactory</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.resolver.ArtifactCollector</role>\n+        </requirement>\n+      </requirements>\n+    </component>\n+    <component>\n+      <role>org.apache.maven.project.MavenProjectBuilder</role>\n+      <role-hint>test</role-hint>\n+      <implementation>org.apache.maven.project.TestProjectBuilder</implementation>\n+      <requirements>\n+        <requirement>\n+          <role>org.apache.maven.profiles.MavenProfilesBuilder</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.injection.ModelDefaultsInjector</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.injection.ProfileInjector</role>\n+          <role-hint>test</role-hint>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.interpolation.ModelInterpolator</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.inheritance.ModelInheritanceAssembler</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.validation.ModelValidator</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.project.path.PathTranslator</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.factory.ArtifactFactory</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.resolver.ArtifactResolver</role>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.artifact.repository.ArtifactRepositoryFactory</role>\n+        </requirement>\n+      </requirements>\n+    </component>\n+  </components>\n+</plexus>\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-695: Added more tests on anonymousConnection, devConnection and scmUrl to prevent NPE. Added the test case num 11.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@230612 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/08da2ff2484d8ba053883e98273af8c25d37d7d1",
        "parent": "https://github.com/apache/maven/commit/f862da60b6b5487af1006688e631123ebde20e0e",
        "bug_id": "maven_100",
        "file": [
            {
                "sha": "d94905136a33afcd2ccf984ed9e28590608493c2",
                "filename": "maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/ScmReport.java",
                "blob_url": "https://github.com/apache/maven/blob/08da2ff2484d8ba053883e98273af8c25d37d7d1/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/ScmReport.java",
                "raw_url": "https://github.com/apache/maven/raw/08da2ff2484d8ba053883e98273af8c25d37d7d1/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/ScmReport.java",
                "status": "modified",
                "changes": 35,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-project-info-reports-plugin/src/main/java/org/apache/maven/report/projectinfo/ScmReport.java?ref=08da2ff2484d8ba053883e98273af8c25d37d7d1",
                "patch": "@@ -196,6 +196,19 @@ public void renderBody()\n             anonymousConnection = scm.getConnection();\n             devConnection = scm.getDeveloperConnection();\n \n+            if ( StringUtils.isEmpty( anonymousConnection ) &&\n+                StringUtils.isEmpty( devConnection ) &&\n+                StringUtils.isEmpty( scm.getUrl() ) )\n+            {\n+                startSection( getTitle() );\n+\n+                paragraph( getBundle( locale ).getString( \"report.scm.noscm\" ) );\n+\n+                endSection();\n+\n+                return;\n+            }\n+            \n             ScmRepository anonymousRepository = getScmRepository( anonymousConnection );\n             ScmRepository devRepository = getScmRepository( devConnection );\n \n@@ -264,7 +277,7 @@ private void renderWebAccesSection( String scmUrl )\n         {\n             startSection( getBundle( locale ).getString( \"report.scm.webaccess.title\" ) );\n \n-            if ( scmUrl == null )\n+            if ( StringUtils.isEmpty( scmUrl ) )\n             {\n                 paragraph( getBundle( locale ).getString( \"report.scm.webaccess.nourl\" ) );\n             }\n@@ -288,7 +301,8 @@ private void renderAnonymousAccessSection( ScmRepository anonymousRepository )\n         {\n             if ( ( isScmSystem( anonymousRepository, \"clearcase\" ) )\n                 || ( isScmSystem( anonymousRepository, \"perforce\" ) )\n-                || ( isScmSystem( anonymousRepository, \"starteam\" ) ) )\n+                || ( isScmSystem( anonymousRepository, \"starteam\" ) ) \n+                || ( StringUtils.isEmpty( anonymousConnection ) ) )\n             {\n                 return;\n             }\n@@ -313,6 +327,11 @@ else if ( ( anonymousRepository != null ) && ( isScmSystem( anonymousRepository,\n             {\n                 paragraph( getBundle( locale ).getString( \"report.scm.anonymousaccess.general.intro\" ) );\n \n+                if ( anonymousConnection.length() < 4 )\n+                {\n+                    throw new IllegalArgumentException( \"The source repository connection is too short.\" );\n+                }\n+\n                 verbatimText( anonymousConnection.substring( 4 ) );\n             }\n \n@@ -326,6 +345,11 @@ else if ( ( anonymousRepository != null ) && ( isScmSystem( anonymousRepository,\n          */\n         private void renderDeveloperAccessSection( ScmRepository devRepository )\n         {\n+            if ( StringUtils.isEmpty( devConnection ) )\n+            {\n+                return;\n+            }\n+            \n             startSection( getBundle( locale ).getString( \"report.scm.devaccess.title\" ) );\n \n             if ( ( devRepository != null ) && ( isScmSystem( devRepository, \"clearcase\" ) ) )\n@@ -365,6 +389,11 @@ else if ( ( devRepository != null ) && ( isScmSystem( devRepository, \"svn\" ) ) )\n             {\n                 paragraph( getBundle( locale ).getString( \"report.scm.devaccess.general.intro\" ) );\n \n+                if ( devConnection.length() < 4 )\n+                {\n+                    throw new IllegalArgumentException( \"The source repository connection is too short.\" );\n+                }\n+\n                 verbatimText( devConnection.substring( 4 ) );\n             }\n \n@@ -622,7 +651,7 @@ private void developerAccessSVN( SvnScmProviderRepository svnRepo )\n          */\n         public ScmRepository getScmRepository( String scmUrl )\n         {\n-            if ( scmUrl == null )\n+            if ( StringUtils.isEmpty( scmUrl ) )\n             {\n                 return null;\n             }",
                "deletions": 3
            },
            {
                "sha": "facf24045c4ab06d58c15f407ef8a29ada47db94",
                "filename": "maven-plugins/maven-project-info-reports-plugin/src/test/projects/project-info-reports-plugin-test11/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/08da2ff2484d8ba053883e98273af8c25d37d7d1/maven-plugins/maven-project-info-reports-plugin/src/test/projects/project-info-reports-plugin-test11/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/08da2ff2484d8ba053883e98273af8c25d37d7d1/maven-plugins/maven-project-info-reports-plugin/src/test/projects/project-info-reports-plugin-test11/pom.xml",
                "status": "added",
                "changes": 56,
                "additions": 56,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-project-info-reports-plugin/src/test/projects/project-info-reports-plugin-test11/pom.xml?ref=08da2ff2484d8ba053883e98273af8c25d37d7d1",
                "patch": "@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n+\n+<!--\n+/*\n+ * Copyright 2001-2005 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+ -->\n+\n+<project>\n+  <modelVersion>4.0.0</modelVersion>\n+  <groupId>org.apache.maven.report.projectinfo.test11</groupId>\n+  <artifactId>project-info-reports-plugin-test11</artifactId>\n+  <packaging>jar</packaging>\n+  <version>1.0-SNAPSHOT</version>\n+  <inceptionYear>2005</inceptionYear>\n+  <name>Maven ProjectInfo Report Test11</name>\n+  <description>MNG-695 developerConnection is empty</description>\n+  <url>http://maven.apache.org</url>\n+  <scm>\n+    <connection>scm:cvs:pserver:anoncvs@cvs.apache.org:/home/cvspublic:maven-plugins/dist</connection>\n+    <developerConnection/>\n+    <url>http://cvs.apache.org/</url>\n+  </scm>\n+  <developers>\n+    <developer>\n+      <id>vsiveton</id>\n+      <name>Vincent Siveton</name>\n+      <email>vsiveton@apache.org</email>\n+      <organization>Apache Software Foundation</organization>\n+      <roles>\n+        <role>Java Developer</role>\n+      </roles>\n+      <timezone>-5</timezone>\n+    </developer>\n+  </developers>\n+  <reporting>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-project-info-reports-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </reporting>\n+</project>",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Upgraded to plexus-site-renderer-1.0-alpha-2 and corrected a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@219253 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/5f412ebb409d507dc52a7239e133e3735a6b4b30",
        "parent": "https://github.com/apache/maven/commit/21e050e5fa6c92e0b6bcbba46e4b820093c531c3",
        "bug_id": "maven_101",
        "file": [
            {
                "sha": "cd3c623a255e3f442d5456da939d04a8a33a47ac",
                "filename": "maven-plugins/maven-site-plugin/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-site-plugin/pom.xml?ref=5f412ebb409d507dc52a7239e133e3735a6b4b30",
                "patch": "@@ -48,7 +48,7 @@\n     <dependency>\n       <groupId>plexus</groupId>\n       <artifactId>plexus-site-renderer</artifactId>\n-      <version>1.0-alpha-1</version>\n+      <version>1.0-alpha-2-20050715.080727-2</version>\n     </dependency>\n     <dependency>\n       <groupId>org.apache.maven.wagon</groupId>",
                "deletions": 1
            },
            {
                "sha": "a407dde7af0201840ca5a8016bdbb3825b88fff1",
                "filename": "maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java",
                "blob_url": "https://github.com/apache/maven/blob/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java",
                "raw_url": "https://github.com/apache/maven/raw/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-site-plugin/src/main/java/org/apache/maven/doxia/DoxiaMojo.java?ref=5f412ebb409d507dc52a7239e133e3735a6b4b30",
                "patch": "@@ -548,6 +548,11 @@ public boolean accept(File file) {\n             }\n         });\n         \n+        if ( ( directories == null ) || ( directories.length  == 0 ) )\n+        {\n+            return false;\n+        }\n+        \n         List indexFound = new ArrayList();\n         for ( int i = 0; i < directories.length; i++ )\n         {",
                "deletions": 0
            },
            {
                "sha": "ece47f98f36164571e9b137b4063cc34251f6f7b",
                "filename": "maven-plugins/maven-site-plugin/src/main/resources/org/apache/maven/doxia/maven-site.vm",
                "blob_url": "https://github.com/apache/maven/blob/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/main/resources/org/apache/maven/doxia/maven-site.vm",
                "raw_url": "https://github.com/apache/maven/raw/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/main/resources/org/apache/maven/doxia/maven-site.vm",
                "status": "modified",
                "changes": 59,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-site-plugin/src/main/resources/org/apache/maven/doxia/maven-site.vm?ref=5f412ebb409d507dc52a7239e133e3735a6b4b30",
                "patch": "@@ -39,27 +39,26 @@\n   #end\n #end\n \n+#macro ( displayTree $display $item)\n+  #if ( $item.getChildren() && $item.getChildCount() > 0 )\n+    #foreach( $subitem in $item.getChildren() )\n+      #set ( $subitemHref = $PathTool.calculateLink( $subitem.getAttribute( \"href\" ), $relativePath ) )\n+      #set ( $subitemHref = $$subitemHref.replaceAll( \"\\\\\", \"/\" ) )\n+\n+      #if ( $currentFileName == $subitemHref ) \n+        #set ( $display = true )\n+      #end\n+          \n+      #displayTree($display $subitem)\n+    #end\n+  #end\n+#end\n+        \n #macro ( menuItem $item )\n   #set ( $collapse = \"none\" )\n   #set ( $currentItemHref = $PathTool.calculateLink( $item.getAttribute( \"href\" ), $relativePath ) )\n   #set ( $currentFileName = $currentFileName.replaceAll( \"\\\\\", \"/\" ) )\n   #set ( $currentItemHref = $currentItemHref.replaceAll( \"\\\\\", \"/\" ) )\n-  \n-  #set ( $currentFileNameLastSlash = $currentFileName.lastIndexOf( \"/\" ) )\n-  #if ( $currentFileNameLastSlash != -1)\n-    #set ( $currentFileNameTmp = $currentFileName.substring( 0, $currentFileNameLastSlash ) )\n-  #else\n-    #set ( $currentFileNameTmp = $currentFileName.substring( 0, $currentFileName.lengh() ) )\n-  #end\n-\n-  #set ( $currentItemHrefLastSlash = $currentItemHref.lastIndexOf( \"/\" ) )\n-  #if ( $currentItemHrefLastSlash != -1)\n-    #set ( $currentItemHrefTmp = $currentItemHref.substring( 0, $currentItemHrefLastSlash ) )\n-  #else\n-    #set ( $currentItemHrefTmp = $currentItemHref.substring( 0, $currentItemHref.lengh() ) )\n-  #end\n-\n-  #set ( $tree = $currentFileNameTmp && $currentItemHrefTmp && $currentFileNameTmp.startsWith( $currentItemHrefTmp ) )\n \n   #if ( $item.getChildCount() > 0 )\n     #if ( ( $item.getAttribute( \"collapse\" ) ) && ( $item.getAttribute( \"collapse\" ).equalsIgnoreCase( \"false\" ) ) )\n@@ -68,31 +67,29 @@\n       ## By default collapsed\n       #set ( $collapse = \"collapsed\" )\n     #end\n-\n-    #if ( $currentFileName == $currentItemHref )\n-      #set ( $collapse = \"expanded\" )\n-    #end\n     \n-    #if ( $tree )\n+    #if ( $currentFileName == $currentItemHref ) \n       #set ( $collapse = \"expanded\" )\n     #end\n   #end\n-  <li class=\"$collapse\" $currentFileName $currentItemHref>\n+  <li class=\"$collapse\">\n     #if ( $currentFileName == $currentItemHref ) \n       <strong><a href=\"$currentItemHref\">$item.getAttribute( \"name\" )</a></strong>\n     #else\n       <a href=\"$currentItemHref\">$item.getAttribute( \"name\" )</a>\n     #end\n   </li>\n-  #if ( $item.getChildren() )\n-    #if ( $item.getChildCount() > 0 )\n-      #if ( $collapse == \"expanded\" || $tree )\n-        <ul>\n-          #foreach( $subitem in $item.getChildren() )\n-            #menuItem( $subitem )\n-          #end\n-        </ul>\n-      #end\n+  #if ( $item.getChildren() && $item.getChildCount() > 0 )\n+    #set ( $display = false )\n+    #set ( $itemTmp = $item )\n+    #displayTree($display $itemTmp)\n+\n+    #if ( $collapse == \"expanded\" || $display )\n+      <ul>\n+        #foreach( $subitem in $item.getChildren() )\n+          #menuItem( $subitem )\n+        #end\n+      </ul>\n     #end\n   #end\n #end",
                "deletions": 31
            },
            {
                "sha": "2cb261a6269fc45291526ee7950f71008a9b92ae",
                "filename": "maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/index.apt",
                "blob_url": "https://github.com/apache/maven/blob/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/index.apt",
                "raw_url": "https://github.com/apache/maven/raw/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/index.apt",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/index.apt?ref=5f412ebb409d507dc52a7239e133e3735a6b4b30",
                "patch": "@@ -9,4 +9,4 @@\n \n Site Plugin Index\n \n- From /theta/index.apt\n+ From /gamma/index.apt",
                "deletions": 1
            },
            {
                "sha": "a7217b32685496ef88f433a8ff4dd7dd77c87c43",
                "filename": "maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/two/index.apt",
                "blob_url": "https://github.com/apache/maven/blob/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/two/index.apt",
                "raw_url": "https://github.com/apache/maven/raw/5f412ebb409d507dc52a7239e133e3735a6b4b30/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/two/index.apt",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-site-plugin/src/test/projects/site-plugin-test6/src/site/apt/gamma/two/index.apt?ref=5f412ebb409d507dc52a7239e133e3735a6b4b30",
                "patch": "@@ -9,4 +9,4 @@\n  \n Site Plugin Index\n \n- From /theta/two/index.apt\n+ From /gamma/two/index.apt",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@179987 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/40d47927dee5a419ad71add6a80789bfd07e52ee",
        "parent": "https://github.com/apache/maven/commit/177692f82ca6659ba6022849ae991371e76ac3b3",
        "bug_id": "maven_102",
        "file": [
            {
                "sha": "b27782b76833fc304a6affd0fdf6aad0370e39a1",
                "filename": "maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java",
                "blob_url": "https://github.com/apache/maven/blob/40d47927dee5a419ad71add6a80789bfd07e52ee/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java",
                "raw_url": "https://github.com/apache/maven/raw/40d47927dee5a419ad71add6a80789bfd07e52ee/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-tools/maven-plugin-tools-api/src/main/java/org/apache/maven/tools/plugin/generator/PluginDescriptorGenerator.java?ref=40d47927dee5a419ad71add6a80789bfd07e52ee",
                "patch": "@@ -76,10 +76,13 @@ public void execute( File destinationDirectory, PluginDescriptor pluginDescripto\n             \n             w.startElement( \"mojos\" );\n \n-            for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )\n+            if ( pluginDescriptor.getMojos() != null )\n             {\n-                MojoDescriptor descriptor = (MojoDescriptor) it.next();\n-                processMojoDescriptor( descriptor, w );\n+                for ( Iterator it = pluginDescriptor.getMojos().iterator(); it.hasNext(); )\n+                {\n+                    MojoDescriptor descriptor = (MojoDescriptor) it.next();\n+                    processMojoDescriptor( descriptor, w );\n+                }\n             }\n \n             w.endElement();\n@@ -362,4 +365,4 @@ public void element( XMLWriter w, String name, String value )\n \n         w.endElement();\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixing a small bug that would cause a NPE if a plugin doesn't contain any mojos.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@180000 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/d34ec0926af852258fe24a44615e85c226794a05",
        "parent": "https://github.com/apache/maven/commit/40d47927dee5a419ad71add6a80789bfd07e52ee",
        "bug_id": "maven_103",
        "file": [
            {
                "sha": "44fe5629f4a5fc9c63b2ba2430c19880a48b6e44",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/d34ec0926af852258fe24a44615e85c226794a05/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/d34ec0926af852258fe24a44615e85c226794a05/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 39,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=d34ec0926af852258fe24a44615e85c226794a05",
                "patch": "@@ -251,30 +251,33 @@ private void processPluginPhases( Plugin plugin, MavenSession session, Map phase\n \n             Map goalMap = plugin.getGoalsAsMap();\n             \n-            for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )\n+            if ( pluginDescriptor.getMojos() != null )\n             {\n-                MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();\n-\n-                // TODO: remove later\n-                if ( mojoDescriptor.getGoal() == null )\n+                for ( Iterator j = pluginDescriptor.getMojos().iterator(); j.hasNext(); )\n                 {\n-                    throw new LifecycleExecutionException(\n-                        \"The plugin \" + artifactId + \" was built with an older version of Maven\" );\n-                }\n+                    MojoDescriptor mojoDescriptor = (MojoDescriptor) j.next();\n+\n+                    // TODO: remove later\n+                    if ( mojoDescriptor.getGoal() == null )\n+                    {\n+                        throw new LifecycleExecutionException(\n+                            \"The plugin \" + artifactId + \" was built with an older version of Maven\" );\n+                    }\n                 \n-                Goal goal = (Goal) goalMap.get( mojoDescriptor.getGoal() );\n+                    Goal goal = (Goal) goalMap.get( mojoDescriptor.getGoal() );\n \n-                if( goalMap.isEmpty() )\n-                {\n-                    configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );\n-                }\n-                else if ( goal != null )\n-                {\n-                    // We have to check to see that the inheritance rules have been applied before binding this mojo.\n-                    if( goal.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )\n+                    if( goalMap.isEmpty() )\n                     {\n                         configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );\n                     }\n+                    else if ( goal != null )\n+                    {\n+                        // We have to check to see that the inheritance rules have been applied before binding this mojo.\n+                        if( goal.isInheritanceApplied() || mojoDescriptor.isInheritedByDefault() )\n+                        {\n+                            configureMojoPhaseBinding( mojoDescriptor, phaseMap, session.getSettings() );\n+                        }\n+                    }\n                 }\n             }\n         }\n@@ -450,4 +453,4 @@ public List getPhases()\n         return phases;\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "maven",
        "message": "avoid NPE if there are not report plugins defined in the POM when generating the site.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@168565 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/3f031d5722ec5799c1fb72711867dda8b02b4b23",
        "parent": "https://github.com/apache/maven/commit/57284e462cb9f55931774a5b9caa453d7deb42e7",
        "bug_id": "maven_104",
        "file": [
            {
                "sha": "e2d4ddda3aa43dd60b05eed9250371067b85a0a5",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=3f031d5722ec5799c1fb72711867dda8b02b4b23",
                "patch": "@@ -200,7 +200,7 @@ private void injectHandlerPluginConfiguration( MavenProject project, String grou\n     private void processPluginConfiguration( MavenProject project, MavenSession mavenSession, Map phaseMap )\n         throws LifecycleExecutionException, ArtifactResolutionException\n     {\n-        for ( Iterator i = project.getPlugins().iterator(); i.hasNext(); )\n+        for ( Iterator i = project.getBuildPlugins().iterator(); i.hasNext(); )\n         {\n             Plugin plugin = (Plugin) i.next();\n ",
                "deletions": 1
            },
            {
                "sha": "ad3a8b46ee10793c59520aa7ab717a2112889196",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=3f031d5722ec5799c1fb72711867dda8b02b4b23",
                "patch": "@@ -152,7 +152,7 @@ public PluginDescriptor verifyPlugin( String groupId, String artifactId, String\n \n             org.apache.maven.model.Plugin pluginConfig = null;\n \n-            for ( Iterator it = project.getPlugins().iterator(); it.hasNext(); )\n+            for ( Iterator it = project.getBuildPlugins().iterator(); it.hasNext(); )\n             {\n                 org.apache.maven.model.Plugin plugin = (org.apache.maven.model.Plugin) it.next();\n ",
                "deletions": 1
            },
            {
                "sha": "3bfdc79479b8f8f2c377b21e8b055376dae5edf5",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "blob_url": "https://github.com/apache/maven/blob/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "raw_url": "https://github.com/apache/maven/raw/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java",
                "status": "modified",
                "changes": 13,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/PluginParameterExpressionEvaluator.java?ref=3f031d5722ec5799c1fb72711867dda8b02b4b23",
                "patch": "@@ -28,6 +28,7 @@\n import java.io.File;\n import java.util.Iterator;\n import java.util.Map;\n+import java.util.List;\n \n /**\n  * @author <a href=\"mailto:jason@maven.org\">Jason van Zyl</a>\n@@ -84,11 +85,15 @@ public Object evaluate( String expr )\n             try\n             {\n                 PluginManager pluginManager = (PluginManager) context.lookup( role );\n-                for ( Iterator it = context.getProject().getReports().getPlugins().iterator(); it.hasNext(); )\n+                List reportPlugins = context.getProject().getReportPlugins();\n+                if ( reportPlugins != null )\n                 {\n-                    org.apache.maven.model.Plugin plugin = (org.apache.maven.model.Plugin) it.next();\n-                    pluginManager.verifyPlugin( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(),\n-                                                context );\n+                    for ( Iterator it = reportPlugins.iterator(); it.hasNext(); )\n+                    {\n+                        org.apache.maven.model.Plugin plugin = (org.apache.maven.model.Plugin) it.next();\n+                        pluginManager.verifyPlugin( plugin.getGroupId(), plugin.getArtifactId(), plugin.getVersion(),\n+                                                    context );\n+                    }\n                 }\n             }\n             catch ( ComponentLookupException cle )",
                "deletions": 4
            },
            {
                "sha": "ed1bd73b79953432f967eb9448833efcaa9572ae",
                "filename": "maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 16,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/MavenProject.java?ref=3f031d5722ec5799c1fb72711867dda8b02b4b23",
                "patch": "@@ -677,7 +677,16 @@ public List getRepositories()\n     // Plugins\n     // ----------------------------------------------------------------------\n \n-    public List getPlugins()\n+    public List getReportPlugins()\n+    {\n+        if ( model.getReports() == null )\n+        {\n+            return null;\n+        }\n+        return model.getReports().getPlugins();\n+\n+    }\n+    public List getBuildPlugins()\n     {\n         if ( model.getBuild() == null )\n         {\n@@ -811,9 +820,9 @@ public Xpp3Dom getGoalConfiguration( String pluginGroupId, String pluginArtifact\n         // for now I have to iterate through and see what we have.\n         // ----------------------------------------------------------------------\n \n-        if ( getPlugins() != null )\n+        if ( getBuildPlugins() != null )\n         {\n-            for ( Iterator iterator = getPlugins().iterator(); iterator.hasNext(); )\n+            for ( Iterator iterator = getBuildPlugins().iterator(); iterator.hasNext(); )\n             {\n                 Plugin plugin = (Plugin) iterator.next();\n \n@@ -845,4 +854,5 @@ public List getPluginRepositories()\n     {\n         return model.getPluginRepositories();\n     }\n+\n }",
                "deletions": 3
            },
            {
                "sha": "d29e424cab4fd689393e6035a7e21e4682fd3d89",
                "filename": "maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "blob_url": "https://github.com/apache/maven/blob/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "raw_url": "https://github.com/apache/maven/raw/3f031d5722ec5799c1fb72711867dda8b02b4b23/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/java/org/apache/maven/project/canonical/CanonicalProjectBuilderTest.java?ref=3f031d5722ec5799c1fb72711867dda8b02b4b23",
                "patch": "@@ -49,7 +49,7 @@ public void testProjectBuilder()\n         // Plugins\n         // ----------------------------------------------------------------------\n \n-        List plugins = project.getPlugins();\n+        List plugins = project.getBuildPlugins();\n \n         // Plugin0 [plexus]\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "maven",
        "message": "PR: MNG-316\nSubmitted by:\tKenney Westerhof\nReviewed by:\tBrett Porter\nfix NPE when there is no default plugin configuration\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163981 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/06ebdedc0cc8998886e8f5ed00da9febe1f42b2a",
        "parent": "https://github.com/apache/maven/commit/d23c299e0f41df9c7a8df251d38d47784e9bbcd5",
        "bug_id": "maven_105",
        "file": [
            {
                "sha": "85078ad0b6a6b59b10c3e43304cdcf610afecf80",
                "filename": "maven-core/src/main/java/org/apache/maven/util/Xpp3DomUtils.java",
                "blob_url": "https://github.com/apache/maven/blob/06ebdedc0cc8998886e8f5ed00da9febe1f42b2a/maven-core/src/main/java/org/apache/maven/util/Xpp3DomUtils.java",
                "raw_url": "https://github.com/apache/maven/raw/06ebdedc0cc8998886e8f5ed00da9febe1f42b2a/maven-core/src/main/java/org/apache/maven/util/Xpp3DomUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/util/Xpp3DomUtils.java?ref=06ebdedc0cc8998886e8f5ed00da9febe1f42b2a",
                "patch": "@@ -30,6 +30,11 @@ private static void mergeIntoXpp3Dom( Xpp3Dom dominant, Xpp3Dom recessive )\n     {\n         // TODO: how to mergeXpp3Dom lists rather than override?\n         // TODO: share this as some sort of assembler, implement a walk interface?\n+        if ( recessive == null )\n+        {\n+            return;\n+        }\n+\n         Xpp3Dom[] children = recessive.getChildren();\n         for ( int i = 0; i < children.length; i++ )\n         {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixing license\no Prevent a NPE with a better exception.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163211 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/985d5c867c4b75707a4b27e00fe5979da2bc9902",
        "parent": "https://github.com/apache/maven/commit/f279ac17c273f14221ef6b8b2c88f215743a378c",
        "bug_id": "maven_106",
        "file": [
            {
                "sha": "4372d20bff9b12a95e8d8ff72b14edced2e8e4e7",
                "filename": "maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "blob_url": "https://github.com/apache/maven/blob/985d5c867c4b75707a4b27e00fe5979da2bc9902/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "raw_url": "https://github.com/apache/maven/raw/985d5c867c4b75707a4b27e00fe5979da2bc9902/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java",
                "status": "modified",
                "changes": 41,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/plugin/DefaultPluginManager.java?ref=985d5c867c4b75707a4b27e00fe5979da2bc9902",
                "patch": "@@ -1,16 +1,28 @@\n package org.apache.maven.plugin;\n \n /*\n- * Copyright 2001-2004 The Apache Software Foundation. Licensed under the Apache\n- * License, Version 2.0 (the \"License\"); you may not use this file except in\n- * compliance with the License. You may obtain a copy of the License at\n- * http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law\n- * or agreed to in writing, software distributed under the License is\n- * distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied. See the License for the specific language\n- * governing permissions and limitations under the License.\n+ * Copyright 2001-2004 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.DefaultArtifact;\n import org.apache.maven.artifact.MavenMetadataSource;\n@@ -22,6 +34,7 @@\n import org.apache.maven.plugin.descriptor.MojoDescriptor;\n import org.apache.maven.plugin.descriptor.PluginDescriptor;\n import org.apache.maven.plugin.descriptor.PluginDescriptorBuilder;\n+\n import org.codehaus.plexus.ArtifactEnabledContainer;\n import org.codehaus.plexus.PlexusConstants;\n import org.codehaus.plexus.PlexusContainer;\n@@ -35,13 +48,6 @@\n import org.codehaus.plexus.personality.plexus.lifecycle.phase.Initializable;\n import org.codehaus.plexus.util.dag.CycleDetectedException;\n \n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n public class DefaultPluginManager\n     extends AbstractLogEnabled\n     implements PluginManager, ComponentDiscoveryListener, Initializable, Contextualizable\n@@ -183,6 +189,11 @@ public void verifyPluginForGoal( String goalName ) throws Exception\n             // Now, we need to resolve the plugins for this goal's prereqs.\n             MojoDescriptor mojoDescriptor = getMojoDescriptor( goalName );\n \n+            if ( mojoDescriptor == null )\n+            {\n+                throw new Exception( \"Could not find a mojo descriptor for goal: '\" + goalName + \"'.\" );\n+            }\n+\n             List prereqs = mojoDescriptor.getPrereqs();\n \n             if ( prereqs != null )",
                "deletions": 15
            }
        ]
    },
    {
        "repo": "maven",
        "message": "[MNG-5390] mvn -rf (no argument) results in NPE\n\nCreated a simple primordial logger that implements the error methods required between CLI parsing and logger initialization. I don't want to have to look to see if the logger is null.",
        "commit": "https://github.com/apache/maven/commit/d5e5717dd7955a036d0e991db1db71d964f97a4c",
        "parent": "https://github.com/apache/maven/commit/4c8b3009d1e6f7f2df221f0cfc7a4b9ca36f50a9",
        "bug_id": "maven_107",
        "file": [
            {
                "sha": "78b054c0a95833aeab3b4e8280b9bd499ba37605",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
                "blob_url": "https://github.com/apache/maven/blob/d5e5717dd7955a036d0e991db1db71d964f97a4c/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
                "raw_url": "https://github.com/apache/maven/raw/d5e5717dd7955a036d0e991db1db71d964f97a4c/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/MavenCli.java?ref=d5e5717dd7955a036d0e991db1db71d964f97a4c",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.maven.cli.event.DefaultEventSpyContext;\n import org.apache.maven.cli.event.ExecutionEventLogger;\n import org.apache.maven.cli.logging.Slf4jLoggerManager;\n+import org.apache.maven.cli.logging.Slf4jStdoutLogger;\n import org.apache.maven.cli.transfer.ConsoleMavenTransferListener;\n import org.apache.maven.cli.transfer.QuietMavenTransferListener;\n import org.apache.maven.cli.transfer.Slf4jMavenTransferListener;\n@@ -262,6 +263,12 @@ private void initialize( CliRequest cliRequest )\n     private void cli( CliRequest cliRequest )\n         throws Exception\n     {\n+        //\n+        // Parsing errors can happen during the processing of the arguments and we prefer not having to check if the logger is null\n+        // and make construct this so we can use an SLF4J logger everywhere\n+        //\n+        slf4jLogger = new Slf4jStdoutLogger();\n+\n         CLIManager cliManager = new CLIManager();\n \n         try",
                "deletions": 0
            },
            {
                "sha": "53025a0daa66098c220ed354cf2b1b0e6713bb26",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/logging/PrintStreamLogger.java",
                "blob_url": "https://github.com/apache/maven/blob/4c8b3009d1e6f7f2df221f0cfc7a4b9ca36f50a9/maven-embedder/src/main/java/org/apache/maven/cli/logging/PrintStreamLogger.java",
                "raw_url": "https://github.com/apache/maven/raw/4c8b3009d1e6f7f2df221f0cfc7a4b9ca36f50a9/maven-embedder/src/main/java/org/apache/maven/cli/logging/PrintStreamLogger.java",
                "status": "removed",
                "changes": 187,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/logging/PrintStreamLogger.java?ref=4c8b3009d1e6f7f2df221f0cfc7a4b9ca36f50a9",
                "patch": "@@ -1,187 +0,0 @@\n-package org.apache.maven.cli.logging;\n-\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-import java.io.PrintStream;\n-\n-import org.apache.maven.Maven;\n-import org.codehaus.plexus.logging.AbstractLogger;\n-import org.codehaus.plexus.logging.Logger;\n-\n-/**\n- * Logs to a user-supplied {@link PrintStream}.\n- * \n- * @author Benjamin Bentmann\n- */\n-public class PrintStreamLogger\n-    extends AbstractLogger\n-{\n-\n-    public interface Provider\n-    {\n-        PrintStream getStream();\n-    }\n-\n-    private Provider provider;\n-\n-    private static final String FATAL_ERROR = \"[FATAL] \";\n-\n-    private static final String ERROR = \"[ERROR] \";\n-\n-    private static final String WARNING = \"[WARNING] \";\n-\n-    private static final String INFO = \"[INFO] \";\n-\n-    private static final String DEBUG = \"[DEBUG] \";\n-\n-    public PrintStreamLogger( Provider provider )\n-    {\n-        super( Logger.LEVEL_INFO, Maven.class.getName() );\n-\n-        if ( provider == null )\n-        {\n-            throw new IllegalArgumentException( \"output stream provider missing\" );\n-        }\n-        this.provider = provider;\n-    }\n-\n-    public PrintStreamLogger( PrintStream out )\n-    {\n-        super( Logger.LEVEL_INFO, Maven.class.getName() );\n-\n-        setStream( out );\n-    }\n-\n-    public void setStream( final PrintStream out )\n-    {\n-        if ( out == null )\n-        {\n-            throw new IllegalArgumentException( \"output stream missing\" );\n-        }\n-\n-        this.provider = new Provider()\n-        {\n-            public PrintStream getStream()\n-            {\n-                return out;\n-            }\n-        };\n-    }\n-\n-    public void debug( String message, Throwable throwable )\n-    {\n-        if ( isDebugEnabled() )\n-        {\n-            PrintStream out = provider.getStream();\n-\n-            out.print( DEBUG );\n-            out.println( message );\n-\n-            if ( null != throwable )\n-            {\n-                throwable.printStackTrace( out );\n-            }\n-        }\n-    }\n-\n-    public void info( String message, Throwable throwable )\n-    {\n-        if ( isInfoEnabled() )\n-        {\n-            PrintStream out = provider.getStream();\n-\n-            out.print( INFO );\n-            out.println( message );\n-\n-            if ( null != throwable )\n-            {\n-                throwable.printStackTrace( out );\n-            }\n-        }\n-    }\n-\n-    public void warn( String message, Throwable throwable )\n-    {\n-        if ( isWarnEnabled() )\n-        {\n-            PrintStream out = provider.getStream();\n-\n-            out.print( WARNING );\n-            out.println( message );\n-\n-            if ( null != throwable )\n-            {\n-                throwable.printStackTrace( out );\n-            }\n-        }\n-    }\n-\n-    public void error( String message, Throwable throwable )\n-    {\n-        if ( isErrorEnabled() )\n-        {\n-            PrintStream out = provider.getStream();\n-\n-            out.print( ERROR );\n-            out.println( message );\n-\n-            if ( null != throwable )\n-            {\n-                throwable.printStackTrace( out );\n-            }\n-        }\n-    }\n-\n-    public void fatalError( String message, Throwable throwable )\n-    {\n-        if ( isFatalErrorEnabled() )\n-        {\n-            PrintStream out = provider.getStream();\n-\n-            out.print( FATAL_ERROR );\n-            out.println( message );\n-\n-            if ( null != throwable )\n-            {\n-                throwable.printStackTrace( out );\n-            }\n-        }\n-    }\n-\n-    public void close()\n-    {\n-        PrintStream out = provider.getStream();\n-\n-        if ( out == System.out || out == System.err )\n-        {\n-            out.flush();\n-        }\n-        else\n-        {\n-            out.close();\n-        }\n-    }\n-\n-    public Logger getChildLogger( String arg0 )\n-    {\n-        return this;\n-    }\n-\n-}",
                "deletions": 187
            },
            {
                "sha": "f1a27ae5117c1b58000570c143bf7cdf1ef21810",
                "filename": "maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jStdoutLogger.java",
                "blob_url": "https://github.com/apache/maven/blob/d5e5717dd7955a036d0e991db1db71d964f97a4c/maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jStdoutLogger.java",
                "raw_url": "https://github.com/apache/maven/raw/d5e5717dd7955a036d0e991db1db71d964f97a4c/maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jStdoutLogger.java",
                "status": "added",
                "changes": 284,
                "additions": 284,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/cli/logging/Slf4jStdoutLogger.java?ref=d5e5717dd7955a036d0e991db1db71d964f97a4c",
                "patch": "@@ -0,0 +1,284 @@\n+package org.apache.maven.cli.logging;\n+\n+import java.io.PrintStream;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.Marker;\n+\n+public class Slf4jStdoutLogger\n+    implements Logger\n+{\n+    private static final String ERROR = \"[ERROR] \";\n+\n+    private PrintStream out = System.out;\n+\n+    //\n+    // These are the only methods we need in our primordial logger\n+    //    \n+    public void error( String msg )\n+    {\n+        out.print( ERROR );\n+        out.println( msg );\n+    }\n+\n+    public void error( String msg, Throwable t )\n+    {\n+        error( msg );\n+\n+        if ( null != t )\n+        {\n+            t.printStackTrace( out );\n+        }        \n+    }    \n+\n+    //\n+    // Don't need any of this\n+    //    \n+    public String getName()\n+    {\n+        return null;\n+    }\n+\n+    public boolean isTraceEnabled()\n+    {\n+        return false;\n+    }\n+\n+    public void trace( String msg )\n+    {\n+    }\n+\n+    public void trace( String format, Object arg )\n+    {\n+    }\n+\n+    public void trace( String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void trace( String format, Object... arguments )\n+    {\n+    }\n+\n+    public void trace( String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isTraceEnabled( Marker marker )\n+    {\n+        return false;\n+    }\n+\n+    public void trace( Marker marker, String msg )\n+    {\n+    }\n+\n+    public void trace( Marker marker, String format, Object arg )\n+    {\n+    }\n+\n+    public void trace( Marker marker, String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void trace( Marker marker, String format, Object... argArray )\n+    {\n+    }\n+\n+    public void trace( Marker marker, String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isDebugEnabled()\n+    {\n+        return false;\n+    }\n+\n+    public void debug( String msg )\n+    {\n+    }\n+\n+    public void debug( String format, Object arg )\n+    {\n+    }\n+\n+    public void debug( String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void debug( String format, Object... arguments )\n+    {\n+    }\n+\n+    public void debug( String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isDebugEnabled( Marker marker )\n+    {\n+        return false;\n+    }\n+\n+    public void debug( Marker marker, String msg )\n+    {\n+    }\n+\n+    public void debug( Marker marker, String format, Object arg )\n+    {\n+    }\n+\n+    public void debug( Marker marker, String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void debug( Marker marker, String format, Object... arguments )\n+    {\n+    }\n+\n+    public void debug( Marker marker, String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isInfoEnabled()\n+    {\n+        return false;\n+    }\n+\n+    public void info( String msg )\n+    {\n+    }\n+\n+    public void info( String format, Object arg )\n+    {\n+    }\n+\n+    public void info( String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void info( String format, Object... arguments )\n+    {\n+    }\n+\n+    public void info( String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isInfoEnabled( Marker marker )\n+    {\n+        return false;\n+    }\n+\n+    public void info( Marker marker, String msg )\n+    {\n+    }\n+\n+    public void info( Marker marker, String format, Object arg )\n+    {\n+    }\n+\n+    public void info( Marker marker, String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void info( Marker marker, String format, Object... arguments )\n+    {\n+    }\n+\n+    public void info( Marker marker, String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isWarnEnabled()\n+    {\n+        return false;\n+    }\n+\n+    public void warn( String msg )\n+    {\n+    }\n+\n+    public void warn( String format, Object arg )\n+    {\n+    }\n+\n+    public void warn( String format, Object... arguments )\n+    {\n+    }\n+\n+    public void warn( String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void warn( String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isWarnEnabled( Marker marker )\n+    {\n+        return false;\n+    }\n+\n+    public void warn( Marker marker, String msg )\n+    {\n+    }\n+\n+    public void warn( Marker marker, String format, Object arg )\n+    {\n+    }\n+\n+    public void warn( Marker marker, String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void warn( Marker marker, String format, Object... arguments )\n+    {\n+    }\n+\n+    public void warn( Marker marker, String msg, Throwable t )\n+    {\n+    }\n+\n+    public boolean isErrorEnabled()\n+    {\n+        return false;\n+    }\n+\n+    public void error( String format, Object arg )\n+    {\n+    }\n+\n+    public void error( String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void error( String format, Object... arguments )\n+    {\n+    }\n+\n+    public boolean isErrorEnabled( Marker marker )\n+    {\n+        return false;\n+    }\n+\n+    public void error( Marker marker, String msg )\n+    {\n+    }\n+\n+    public void error( Marker marker, String format, Object arg )\n+    {\n+    }\n+\n+    public void error( Marker marker, String format, Object arg1, Object arg2 )\n+    {\n+    }\n+\n+    public void error( Marker marker, String format, Object... arguments )\n+    {\n+    }\n+\n+    public void error( Marker marker, String msg, Throwable t )\n+    {\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Made plugin version resolution more robust and ensured we fail fast upon resolution failure instead of some NPE in later execution steps\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@797239 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/f48d77ce5e3b1b8b0dfffd869fb16855ca5f07e1",
        "parent": "https://github.com/apache/maven/commit/54c39d9a0ff90b5a26a7814635d1653f91c79a34",
        "bug_id": "maven_108",
        "file": [
            {
                "sha": "6543ae7b6a76483b25cfcc63b9d69cc723a7d324",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/f48d77ce5e3b1b8b0dfffd869fb16855ca5f07e1/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/f48d77ce5e3b1b8b0dfffd869fb16855ca5f07e1/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 13,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=f48d77ce5e3b1b8b0dfffd869fb16855ca5f07e1",
                "patch": "@@ -700,22 +700,24 @@ private void resolvePluginVersion( Plugin plugin, ArtifactRepository localReposi\n         }\n \n         if ( artifactMetadataFile.exists() )\n-        {                    \n+        {\n+            logger.debug( \"Extracting version for plugin \" + plugin.getKey() + \" from \" + artifactMetadataFile );\n+\n             try\n             {\n                 Metadata pluginMetadata = readMetadata( artifactMetadataFile );\n \n                 String release = pluginMetadata.getVersioning().getRelease();\n \n-                if ( release != null )\n+                if ( StringUtils.isNotEmpty( release ) )\n                 {\n                     plugin.setVersion( release );\n                 }\n                 else\n                 {\n                     String latest = pluginMetadata.getVersioning().getLatest();\n-                    \n-                    if ( latest != null )\n+\n+                    if ( StringUtils.isNotEmpty( latest ) )\n                     {\n                         plugin.setVersion( latest );\n                     }\n@@ -726,7 +728,8 @@ private void resolvePluginVersion( Plugin plugin, ArtifactRepository localReposi\n                 logger.warn( \"Error reading plugin metadata: \", e );\n             }\n         }\n-        else\n+\n+        if ( StringUtils.isEmpty( plugin.getVersion() ) )\n         {\n             throw new PluginNotFoundException( plugin, remoteRepositories );\n         }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "maven",
        "message": "cleaning up NPE in the realm manager, and adding clear() method calls to the embedder to cleanup the realm manager after it's used, to try to keep the number of open realms to a minimum...\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@592222 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a1f995029a0ffd682f31c127809531fe15c45432",
        "parent": "https://github.com/apache/maven/commit/d206986023487cdc0cd0dbb9a4b0b5b64e3b34b0",
        "bug_id": "maven_109",
        "file": [
            {
                "sha": "9b7e3d1dcc06620f64899358f7ea905883b0fe87",
                "filename": "maven-core/src/main/aspect/org/apache/maven/compat/plugin/Maven20xCompatAspect.aj",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/aspect/org/apache/maven/compat/plugin/Maven20xCompatAspect.aj",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/aspect/org/apache/maven/compat/plugin/Maven20xCompatAspect.aj",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/aspect/org/apache/maven/compat/plugin/Maven20xCompatAspect.aj?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -37,7 +37,6 @@ import org.codehaus.plexus.context.Context;\n import org.codehaus.plexus.context.ContextException;\n \n import java.io.IOException;\n-import java.io.PrintStream;\n import java.util.Iterator;\n import java.util.Collection;\n import java.util.Set;\n@@ -129,6 +128,8 @@ public privileged aspect Maven20xCompatAspect\n         && this( mgr )\n         && notHere();\n \n+    // We use the same hack here to make sure that plexus 1.1 is available for extensions that do\n+    // not declare plexus-utils but need it. MNG-2900\n     Set around( DefaultExtensionManager mgr ): extDepArtifactsResolved( mgr )\n     {\n         Set result = proceed( mgr );",
                "deletions": 1
            },
            {
                "sha": "ad18426cb1923c2a886420e51df9e2b55298dbb4",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/DefaultMavenRealmManager.java",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenRealmManager.java",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenRealmManager.java",
                "status": "modified",
                "changes": 175,
                "additions": 105,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/DefaultMavenRealmManager.java?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -22,16 +22,18 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n public class DefaultMavenRealmManager\n     implements MavenRealmManager\n {\n \n-    private Map extensionComponents = new HashMap();\n     private Map pluginArtifacts = new HashMap();\n+    private Set managedRealmIds = new HashSet();\n \n     private final ClassWorld world;\n     private final PlexusContainer container;\n@@ -47,8 +49,27 @@ public DefaultMavenRealmManager( PlexusContainer container,\n \n     public void clear()\n     {\n-        extensionComponents.clear();\n-        pluginArtifacts.clear();\n+        Collection realms = new HashSet( world.getRealms() );\n+        for ( Iterator it = realms.iterator(); it.hasNext(); )\n+        {\n+            ClassRealm realm = (ClassRealm) it.next();\n+            String id = realm.getId();\n+\n+            if ( managedRealmIds.contains( id ) )\n+            {\n+                try\n+                {\n+                    world.disposeRealm( id );\n+                }\n+                catch ( NoSuchRealmException e )\n+                {\n+                    // cannot happen.\n+                }\n+            }\n+        }\n+\n+        managedRealmIds.clear();\n+//        pluginArtifacts.clear();\n     }\n \n     public boolean hasExtensionRealm( Artifact extensionArtifact )\n@@ -73,6 +94,7 @@ public ClassRealm createExtensionRealm( Artifact extensionArtifact,\n         try\n         {\n             realm = container.getContainerRealm().createChildRealm( id );\n+            managedRealmIds.add( id );\n         }\n         catch ( DuplicateRealmException e )\n         {\n@@ -92,101 +114,112 @@ public void importExtensionsIntoProjectRealm( String projectGroupId,\n         throws RealmManagementException\n     {\n         String extensionRealmId = RealmUtils.createExtensionRealmId( extensionArtifact );\n-        List componentSetDescriptors = (List) extensionComponents.get( extensionRealmId );\n \n-        // don't re-discover components once this is done once.\n-        if ( componentSetDescriptors == null )\n+        if ( extensionArtifact.getFile() == null )\n+        {\n+            throw new RealmManagementException( extensionRealmId, \"Cannot import project extensions; extension artifact has no associated file that can be scanned for extension components (extension: \" + extensionArtifact.getId() + \")\" );\n+        }\n+\n+        ClassWorld discoveryWorld = new ClassWorld();\n+\n+        List componentSetDescriptors;\n+        try\n         {\n-            ClassWorld discoveryWorld = new ClassWorld();\n+            // Create an entire new ClassWorld, ClassRealm for discovering\n+            // the immediate components of the extension artifact, so we don't pollute the\n+            // container with component descriptors or realms that don't have any meaning beyond discovery.\n+            ClassRealm discoveryRealm;\n             try\n             {\n-                // Create an entire new ClassWorld, ClassRealm for discovering\n-                // the immediate components of the extension artifact, so we don't pollute the\n-                // container with component descriptors or realms that don't have any meaning beyond discovery.\n-                ClassRealm discoveryRealm = new ClassRealm( discoveryWorld, \"discovery\" );\n-                try\n-                {\n-                    discoveryRealm.addURL( extensionArtifact.getFile().toURL() );\n-                }\n-                catch ( MalformedURLException e )\n-                {\n-                    throw new RealmManagementException( extensionRealmId, extensionArtifact, \"Unable to generate URL from extension artifact file: \" + extensionArtifact.getFile() + \" for local-component discovery.\", e );\n-                }\n+                discoveryRealm = discoveryWorld.newRealm( \"discovery: \" + extensionRealmId );\n+            }\n+            catch ( DuplicateRealmException e )\n+            {\n+                throw new RealmManagementException( extensionRealmId, \"Unable to create temporary ClassRealm for local-component discovery.\", e );\n+            }\n+\n+            try\n+            {\n+                discoveryRealm.addURL( extensionArtifact.getFile().toURL() );\n+            }\n+            catch ( MalformedURLException e )\n+            {\n+                throw new RealmManagementException( extensionRealmId, extensionArtifact, \"Unable to generate URL from extension artifact file: \" + extensionArtifact.getFile() + \" for local-component discovery.\", e );\n+            }\n \n-                ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();\n-                discoverer.setManager( new DummyDiscovererManager() );\n+            ComponentDiscoverer discoverer = new DefaultComponentDiscoverer();\n+            discoverer.setManager( new DummyDiscovererManager() );\n \n-                try\n-                {\n-                    // Find the extension component descriptors that exist ONLY in the immediate extension\n-                    // artifact...this prevents us from adding plexus-archiver components to the mix, for instance,\n-                    // when the extension uses that dependency.\n-                    componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );\n-                    extensionComponents.put( extensionRealmId, componentSetDescriptors );\n-                }\n-                catch ( PlexusConfigurationException e )\n-                {\n-                    throw new RealmManagementException( extensionRealmId, \"Unable to discover components in extension artifact: \" + extensionArtifact.getId(), e );\n-                }\n+            try\n+            {\n+                // Find the extension component descriptors that exist ONLY in the immediate extension\n+                // artifact...this prevents us from adding plexus-archiver components to the mix, for instance,\n+                // when the extension uses that dependency.\n+                componentSetDescriptors = discoverer.findComponents( container.getContext(), discoveryRealm );\n             }\n-            finally\n+            catch ( PlexusConfigurationException e )\n             {\n-                Collection realms = discoveryWorld.getRealms();\n-                for ( Iterator it = realms.iterator(); it.hasNext(); )\n+                throw new RealmManagementException( extensionRealmId, \"Unable to discover components in extension artifact: \" + extensionArtifact.getId(), e );\n+            }\n+\n+            ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );\n+\n+            for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )\n+            {\n+                ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();\n+                for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )\n                 {\n-                    ClassRealm realm = (ClassRealm) it.next();\n+                    // For each component in the extension artifact:\n+                    ComponentDescriptor comp = (ComponentDescriptor) compIt.next();\n+                    String implementation = comp.getImplementation();\n+\n                     try\n                     {\n-                        discoveryWorld.disposeRealm( realm.getId() );\n+                        logger.debug( \"Importing: \" + implementation + \"\\nwith role: \" + comp.getRole() + \"\\nand hint: \" + comp.getRoleHint() + \"\\nfrom extension realm: \" + extensionRealmId + \"\\nto project realm: \" + realm.getId() );\n+\n+                        // Import the extension component's implementation class into the project-level\n+                        // realm.\n+                        realm.importFrom( extensionRealmId, implementation );\n+\n+                        // Set the realmId to be used in looking up this extension component to the\n+                        // project-level realm, since we now have a restricted import\n+                        // that allows most of the extension to stay hidden, and the\n+                        // specific local extension components are still accessible\n+                        // from the project-level realm.\n+                        comp.setRealmId( realm.getId() );\n+\n+                        // Finally, add the extension component's descriptor (with projectRealm\n+                        // set as the lookup realm) to the container.\n+                        container.addComponentDescriptor( comp );\n                     }\n                     catch ( NoSuchRealmException e )\n                     {\n+                        throw new RealmManagementException( extensionRealmId, \"Failed to create import for component: \" + implementation + \" from extension realm: \" + extensionRealmId + \" to project realm: \" + realm.getId(), e );\n+                    }\n+                    catch ( ComponentRepositoryException e )\n+                    {\n+                        String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );\n+                        throw new RealmManagementException( extensionRealmId, \"Unable to discover components from imports to project: \" + projectId + \" from extension artifact: \" + extensionArtifact.getId(), e );\n                     }\n                 }\n             }\n         }\n-\n-        ClassRealm realm = getProjectRealm( projectGroupId, projectArtifactId, projectVersion, true );\n-\n-        for ( Iterator it = componentSetDescriptors.iterator(); it.hasNext(); )\n+        finally\n         {\n-            ComponentSetDescriptor compSet = (ComponentSetDescriptor) it.next();\n-            for ( Iterator compIt = compSet.getComponents().iterator(); compIt.hasNext(); )\n+            Collection realms = discoveryWorld.getRealms();\n+            for ( Iterator it = realms.iterator(); it.hasNext(); )\n             {\n-                // For each component in the extension artifact:\n-                ComponentDescriptor comp = (ComponentDescriptor) compIt.next();\n-                String implementation = comp.getImplementation();\n-\n+                ClassRealm realm = (ClassRealm) it.next();\n                 try\n                 {\n-                    logger.debug( \"Importing: \" + implementation + \"\\nwith role: \" + comp.getRole() + \"\\nand hint: \" + comp.getRoleHint() + \"\\nfrom extension realm: \" + extensionRealmId + \"\\nto project realm: \" + realm.getId() );\n-\n-                    // Import the extension component's implementation class into the project-level\n-                    // realm.\n-                    realm.importFrom( extensionRealmId, implementation );\n-\n-                    // Set the realmId to be used in looking up this extension component to the\n-                    // project-level realm, since we now have a restricted import\n-                    // that allows most of the extension to stay hidden, and the\n-                    // specific local extension components are still accessible\n-                    // from the project-level realm.\n-                    comp.setRealmId( realm.getId() );\n-\n-                    // Finally, add the extension component's descriptor (with projectRealm\n-                    // set as the lookup realm) to the container.\n-                    container.addComponentDescriptor( comp );\n+                    discoveryWorld.disposeRealm( realm.getId() );\n                 }\n                 catch ( NoSuchRealmException e )\n                 {\n-                    throw new RealmManagementException( extensionRealmId, \"Failed to create import for component: \" + implementation + \" from extension realm: \" + extensionRealmId + \" to project realm: \" + realm.getId(), e );\n-                }\n-                catch ( ComponentRepositoryException e )\n-                {\n-                    String projectId = RealmUtils.createProjectId( projectGroupId, projectArtifactId, projectVersion );\n-                    throw new RealmManagementException( extensionRealmId, \"Unable to discover components from imports to project: \" + projectId + \" from extension artifact: \" + extensionArtifact.getId(), e );\n                 }\n             }\n         }\n+\n     }\n \n     public ClassRealm getProjectRealm( String projectGroupId, String projectArtifactId, String projectVersion )\n@@ -210,6 +243,7 @@ private ClassRealm getProjectRealm( String projectGroupId, String projectArtifac\n                 try\n                 {\n                     realm = container.getContainerRealm().createChildRealm( id );\n+                    managedRealmIds.add( id );\n                 }\n                 catch ( DuplicateRealmException duplicateError )\n                 {\n@@ -286,6 +320,7 @@ public ClassRealm createPluginRealm( Plugin plugin,\n         try\n         {\n             realm = world.newRealm( id );\n+//            managedRealmIds.add( id );\n         }\n         catch ( DuplicateRealmException e )\n         {",
                "deletions": 70
            },
            {
                "sha": "255d9171186ae058e4de8d4f4c1fed33252416c4",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/RealmManagementException.java",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/execution/RealmManagementException.java",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/execution/RealmManagementException.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/RealmManagementException.java?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -56,6 +56,12 @@ public RealmManagementException( String realmId,\n         this.realmId = realmId;\n     }\n \n+    public RealmManagementException( String realmId, String message )\n+    {\n+        super( message );\n+        this.realmId = realmId;\n+    }\n+\n     public String getRealmId()\n     {\n         return realmId;",
                "deletions": 0
            },
            {
                "sha": "b38ca90999d76800018ee839533cc53cb48fdc0b",
                "filename": "maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "status": "modified",
                "changes": 176,
                "additions": 86,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -194,47 +194,47 @@ public void addPluginAsExtension( Plugin plugin,\n         if ( ( pluginArtifact != null )\n              && coreFilter.include( pluginArtifact ) )\n         {\n-            if ( !realmManager.hasExtensionRealm( pluginArtifact ) )\n-            {\n-                MavenProject dummyProject = new MavenProject( originatingModel );\n-                EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );\n-                MavenSession session = new MavenSession( container, request, dispatcher, null );\n+            MavenProject dummyProject = new MavenProject( originatingModel );\n+            EventDispatcher dispatcher = new DefaultEventDispatcher( request.getEventMonitors() );\n+            MavenSession session = new MavenSession( container, request, dispatcher, null );\n \n-                PluginDescriptor pd;\n-                try\n-                {\n-                    pd = pluginManager.verifyPlugin( plugin, dummyProject, session );\n-                    pluginArtifact = pd.getPluginArtifact();\n-                }\n-                catch ( ArtifactResolutionException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( ArtifactNotFoundException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( PluginNotFoundException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( PluginVersionResolutionException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( InvalidPluginException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( PluginManagerException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n-                catch ( PluginVersionNotFoundException e )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n-                }\n+            PluginDescriptor pd;\n+            try\n+            {\n+                pd = pluginManager.verifyPlugin( plugin, dummyProject, session );\n+                pluginArtifact = pd.getPluginArtifact();\n+            }\n+            catch ( ArtifactResolutionException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( ArtifactNotFoundException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( PluginNotFoundException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( PluginVersionResolutionException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( InvalidPluginException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( PluginManagerException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n+            catch ( PluginVersionNotFoundException e )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension plugin: \" + pluginArtifact, pluginArtifact, groupId, artifactId, version, e );\n+            }\n \n+            if ( !realmManager.hasExtensionRealm( pluginArtifact ) )\n+            {\n                 try\n                 {\n                     realmManager.createExtensionRealm( pluginArtifact, pd.getArtifacts() );\n@@ -300,71 +300,67 @@ private void addExtension( Artifact extensionArtifact,\n         if ( ( extensionArtifact != null )\n              && coreFilter.include( extensionArtifact ) )\n         {\n-            if ( !realmManager.hasExtensionRealm( extensionArtifact ) )\n-            {\n-                ArtifactFilter filter =\n-                    new ProjectArtifactExceptionFilter( coreFilter, projectArtifact );\n+            ArtifactFilter filter =\n+                new ProjectArtifactExceptionFilter( coreFilter, projectArtifact );\n \n-                ResolutionGroup resolutionGroup;\n+            ResolutionGroup resolutionGroup;\n \n-                ArtifactRepository localRepository = request.getLocalRepository();\n+            ArtifactRepository localRepository = request.getLocalRepository();\n \n-                try\n-                {\n-                    resolutionGroup = artifactMetadataSource.retrieve( extensionArtifact, localRepository, remoteRepositories );\n-                }\n-                catch ( ArtifactMetadataRetrievalException e )\n-                {\n-                    throw new ExtensionManagerException( \"Unable to download metadata from repository for extension artifact '\" +\n-                        extensionArtifact.getId() + \"': \" + e.getMessage(), extensionArtifact, projectGroupId, projectArtifactId, projectVersion, e );\n-                }\n-\n-                // We use the same hack here to make sure that plexus 1.1 is available for extensions that do\n-                // not declare plexus-utils but need it. MNG-2900\n-//                DefaultPluginManager.checkPlexusUtils( resolutionGroup, artifactFactory );\n-\n-                Set dependencies = new LinkedHashSet();\n-\n-                dependencies.add( extensionArtifact );\n-                dependencies.addAll( resolutionGroup.getArtifacts() );\n+            try\n+            {\n+                resolutionGroup = artifactMetadataSource.retrieve( extensionArtifact, localRepository, remoteRepositories );\n+            }\n+            catch ( ArtifactMetadataRetrievalException e )\n+            {\n+                throw new ExtensionManagerException( \"Unable to download metadata from repository for extension artifact '\" +\n+                    extensionArtifact.getId() + \"': \" + e.getMessage(), extensionArtifact, projectGroupId, projectArtifactId, projectVersion, e );\n+            }\n \n-                ArtifactResolutionRequest dependencyReq = new ArtifactResolutionRequest().setArtifact( projectArtifact )\n-                                                                               .setArtifactDependencies( dependencies )\n-                                                                               .setFilter( filter )\n-                                                                               .setLocalRepository( localRepository )\n-                                                                               .setRemoteRepostories( remoteRepositories )\n-                                                                               .setMetadataSource( artifactMetadataSource );\n+            Set dependencies = new LinkedHashSet();\n \n-                // TODO: Make this work with managed dependencies, or an analogous management section in the POM.\n-                ArtifactResolutionResult result = artifactResolver.resolve( dependencyReq );\n+            dependencies.add( extensionArtifact );\n+            dependencies.addAll( resolutionGroup.getArtifacts() );\n \n-                if ( result.hasCircularDependencyExceptions() || result.hasErrorArtifactExceptions()\n-                     || result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() )\n-                {\n-                    throw new ExtensionManagerException( \"Failed to resolve extension: \" + extensionArtifact, extensionArtifact, projectGroupId, projectArtifactId, projectVersion, result );\n-                }\n+            ArtifactResolutionRequest dependencyReq = new ArtifactResolutionRequest().setArtifact( projectArtifact )\n+                                                                           .setArtifactDependencies( dependencies )\n+                                                                           .setFilter( filter )\n+                                                                           .setLocalRepository( localRepository )\n+                                                                           .setRemoteRepostories( remoteRepositories )\n+                                                                           .setMetadataSource( artifactMetadataSource );\n \n-                Set resultArtifacts = new LinkedHashSet();\n-                for ( Iterator iterator = result.getArtifacts().iterator(); iterator.hasNext(); )\n-                {\n-                    Artifact a = (Artifact) iterator.next();\n+            // TODO: Make this work with managed dependencies, or an analogous management section in the POM.\n+            ArtifactResolutionResult result = artifactResolver.resolve( dependencyReq );\n \n+            if ( result.hasCircularDependencyExceptions() || result.hasErrorArtifactExceptions()\n+                 || result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() )\n+            {\n+                throw new ExtensionManagerException( \"Failed to resolve extension: \" + extensionArtifact, extensionArtifact, projectGroupId, projectArtifactId, projectVersion, result );\n+            }\n \n-                    if ( activeArtifactResolver != null )\n-                    {\n-                        a = activeArtifactResolver.replaceWithActiveArtifact( a );\n-                    }\n+            Set resultArtifacts = new LinkedHashSet();\n+            for ( Iterator iterator = result.getArtifacts().iterator(); iterator.hasNext(); )\n+            {\n+                Artifact a = (Artifact) iterator.next();\n \n-                    getLogger().debug( \"Adding: \" + a.getFile() + \" to classpath for extension: \" + extensionArtifact.getId() );\n-                    resultArtifacts.add( a );\n-                }\n \n-                // TODO: This shouldn't be required, now that we're checking the core filter before getting here.\n-                if ( !extensionArtifact.isResolved() || ( extensionArtifact.getFile() == null ) )\n+                if ( activeArtifactResolver != null )\n                 {\n-                    throw new ExtensionManagerException( \"Extension artifact was not resolved, or has no file associated with it.\", extensionArtifact, projectGroupId, projectArtifactId, projectVersion );\n+                    a = activeArtifactResolver.replaceWithActiveArtifact( a );\n                 }\n \n+                getLogger().debug( \"Adding: \" + a.getFile() + \" to classpath for extension: \" + extensionArtifact.getId() );\n+                resultArtifacts.add( a );\n+            }\n+\n+            // TODO: This shouldn't be required, now that we're checking the core filter before getting here.\n+            if ( !extensionArtifact.isResolved() || ( extensionArtifact.getFile() == null ) )\n+            {\n+                throw new ExtensionManagerException( \"Extension artifact was not resolved, or has no file associated with it.\", extensionArtifact, projectGroupId, projectArtifactId, projectVersion );\n+            }\n+\n+            if ( !realmManager.hasExtensionRealm( extensionArtifact ) )\n+            {\n                 try\n                 {\n                     realmManager.createExtensionRealm( extensionArtifact, resultArtifacts );",
                "deletions": 90
            },
            {
                "sha": "85c5c6ec2999d8f42c43947b401a0bf6c411ac0f",
                "filename": "maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java",
                "status": "added",
                "changes": 81,
                "additions": 81,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/execution/DefaultMavenRealmManagerTest.java?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -0,0 +1,81 @@\n+package org.apache.maven.execution;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.apache.maven.artifact.factory.ArtifactFactory;\n+import org.codehaus.plexus.PlexusTestCase;\n+import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n+import org.codehaus.plexus.logging.Logger;\n+import org.codehaus.plexus.logging.console.ConsoleLogger;\n+\n+import java.io.File;\n+import java.net.URL;\n+import java.util.Collections;\n+\n+public class DefaultMavenRealmManagerTest\n+    extends PlexusTestCase\n+{\n+\n+    private ArtifactFactory factory;\n+\n+    protected void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        factory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );\n+    }\n+\n+    public void test_ReuseSingleExtensionRealmFromMultipleProjectRealms_UsingTwoManagerInstances()\n+        throws RealmManagementException, ComponentLookupException\n+    {\n+        ClassLoader cloader = Thread.currentThread().getContextClassLoader();\n+        URL jarResource = cloader.getResource( \"org/apache/maven/execution/test-extension-1.jar\" );\n+\n+        Artifact ext1 = factory.createBuildArtifact( \"org.group\", \"artifact-ext\", \"1\", \"jar\" );\n+        Artifact ext2 = factory.createBuildArtifact( \"org.group\", \"artifact-ext\", \"1\", \"jar\" );\n+\n+        assertNotSame( ext1, ext2 );\n+\n+        ext1.setFile( new File( jarResource.getPath() ) );\n+        ext1.setResolved( true );\n+\n+        ext2.setFile( new File( jarResource.getPath() ) );\n+        ext2.setResolved( true );\n+\n+        Logger logger = new ConsoleLogger( Logger.LEVEL_DEBUG, \"test\" );\n+        DefaultMavenRealmManager mgr1 = new DefaultMavenRealmManager( getContainer(), logger );\n+\n+        assertFalse( mgr1.hasExtensionRealm( ext1 ) );\n+\n+        mgr1.createExtensionRealm( ext1, Collections.EMPTY_SET );\n+\n+        assertTrue( mgr1.hasExtensionRealm( ext1 ) );\n+\n+        String pAid1 = \"artifact-project1\";\n+        String pAid2 = \"artifact-project1\";\n+\n+        assertNotNull( ext1.getFile() );\n+\n+        mgr1.importExtensionsIntoProjectRealm( \"org.group\", pAid1, \"2\", ext1 );\n+\n+        String targetClass = ArtifactFactory.ROLE;\n+\n+        Object result1 = getContainer().lookup( targetClass, \"test\", mgr1.getProjectRealm( \"org.group\", pAid1, \"2\" ) );\n+\n+        assertNotNull( result1 );\n+\n+        DefaultMavenRealmManager mgr2 = new DefaultMavenRealmManager( getContainer(), logger );\n+\n+        assertNotNull( ext2.getFile() );\n+\n+        assertTrue( mgr2.hasExtensionRealm( ext2 ) );\n+\n+        // ext2 doesn't have a file associated with it, but it SHOULD succeed anyway.\n+        mgr2.importExtensionsIntoProjectRealm( \"org.group\", pAid2, \"2\", ext2 );\n+\n+        Object result2 = getContainer().lookup( targetClass, \"test\", mgr2.getProjectRealm( \"org.group\", pAid2, \"2\" ) );\n+\n+        assertNotNull( result2 );\n+\n+        assertEquals( result1.getClass().getName(), result2.getClass().getName() );\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "0272ee3cd22ef11fcaabc8d5f98b1faeec3f8865",
                "filename": "maven-core/src/test/resources/org/apache/maven/execution/test-extension-1.jar",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/test/resources/org/apache/maven/execution/test-extension-1.jar",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-core/src/test/resources/org/apache/maven/execution/test-extension-1.jar",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/resources/org/apache/maven/execution/test-extension-1.jar?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "deletions": 0
            },
            {
                "sha": "6baf3848adaeaa6c41565ebeac292ae8463b588a",
                "filename": "maven-embedder/pom.xml",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-embedder/pom.xml",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-embedder/pom.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/pom.xml?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -170,7 +170,7 @@ under the License.\n        -->\n       <id>tycho</id>\n       <properties>\n-        <bundleVersion>2.1.0.v20070901-1427</bundleVersion>\n+        <bundleVersion>2.1.0.v20071105-1933</bundleVersion>\n       </properties>\n       <build>\n         <resources>",
                "deletions": 1
            },
            {
                "sha": "8a42a5b7dcbbf31777b9cb3fda947149d1dbc2f2",
                "filename": "maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java",
                "blob_url": "https://github.com/apache/maven/blob/a1f995029a0ffd682f31c127809531fe15c45432/maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java",
                "raw_url": "https://github.com/apache/maven/raw/a1f995029a0ffd682f31c127809531fe15c45432/maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java",
                "status": "modified",
                "changes": 157,
                "additions": 89,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-embedder/src/main/java/org/apache/maven/embedder/MavenEmbedder.java?ref=a1f995029a0ffd682f31c127809531fe15c45432",
                "patch": "@@ -328,6 +328,19 @@ protected void verifyPlugin( Plugin plugin,\n     // ----------------------------------------------------------------------\n \n     public MavenProject readProject( File mavenProject )\n+    throws ProjectBuildingException, ExtensionScanningException\n+    {\n+        try\n+        {\n+            return readProject( mavenProject, request );\n+        }\n+        finally\n+        {\n+            request.getRealmManager().clear();\n+        }\n+    }\n+\n+    private MavenProject readProject( File mavenProject, MavenExecutionRequest request )\n         throws ProjectBuildingException, ExtensionScanningException\n     {\n         getLogger().info( \"Scanning for extensions: \" + mavenProject );\n@@ -350,89 +363,96 @@ public MavenExecutionResult readProjectWithDependencies( MavenExecutionRequest r\n \n         try\n         {\n-            request = populator.populateDefaults( request, configuration );\n+            try\n+            {\n+                request = populator.populateDefaults( request, configuration );\n \n-            // This is necessary to make the MavenEmbedderProjectWithExtensionReadingTest work which uses\n-            // a custom type for a dependency like this:\n-            //\n-            // <dependency>\n-            //   <groupId>junit</groupId>\n-            //   <artifactId>junit</artifactId>\n-            //   <version>3.8.1</version>\n-            //   <scope>test</scope>\n-            //   <type>mkleint</type>\n-            // </dependency>\n-            //\n-            // If the artifact handlers are not loaded up-front then this dependency element is not\n-            // registered as an artifact and is not added to the classpath elements.\n+                // This is necessary to make the MavenEmbedderProjectWithExtensionReadingTest work which uses\n+                // a custom type for a dependency like this:\n+                //\n+                // <dependency>\n+                //   <groupId>junit</groupId>\n+                //   <artifactId>junit</artifactId>\n+                //   <version>3.8.1</version>\n+                //   <scope>test</scope>\n+                //   <type>mkleint</type>\n+                // </dependency>\n+                //\n+                // If the artifact handlers are not loaded up-front then this dependency element is not\n+                // registered as an artifact and is not added to the classpath elements.\n \n-            MavenProject project = readProject( request.getPom() );\n+                MavenProject project = readProject( request.getPom(), request );\n \n-//            Map handlers = findArtifactTypeHandlers( project );\n+//                Map handlers = findArtifactTypeHandlers( project );\n \n-            //TODO: ok this is crappy, now there are active collections so when new artifact handlers\n-            // enter the system they should be available.\n+                //TODO: ok this is crappy, now there are active collections so when new artifact handlers\n+                // enter the system they should be available.\n \n-//            artifactHandlerManager.addHandlers( handlers );\n-        }\n-        catch ( MavenEmbedderException e )\n-        {\n-            return result.addUnknownException( e );\n-        }\n-        catch ( ProjectBuildingException e )\n-        {\n-            return result.addProjectBuildingException( e );\n-        }\n-        catch ( ExtensionScanningException e )\n-        {\n-            return result.addExtensionScanningException( e );\n-        }\n+//                artifactHandlerManager.addHandlers( handlers );\n+            }\n+            catch ( MavenEmbedderException e )\n+            {\n+                return result.addUnknownException( e );\n+            }\n+            catch ( ProjectBuildingException e )\n+            {\n+                return result.addProjectBuildingException( e );\n+            }\n+            catch ( ExtensionScanningException e )\n+            {\n+                return result.addExtensionScanningException( e );\n+            }\n \n-        ReactorManager reactorManager = maven.createReactorManager( request, result );\n+            ReactorManager reactorManager = maven.createReactorManager( request, result );\n \n-        if ( result.hasExceptions() )\n-        {\n-            return result;\n-        }\n+            if ( result.hasExceptions() )\n+            {\n+                return result;\n+            }\n \n-        MavenProjectBuildingResult projectBuildingResult;\n+            MavenProjectBuildingResult projectBuildingResult;\n \n-        try\n-        {\n-            projectBuildingResult = mavenProjectBuilder.buildWithDependencies(\n-                request.getPom(),\n-                request.getLocalRepository(),\n-                request.getProfileManager() );\n-        }\n-        catch ( ProjectBuildingException e )\n-        {\n-            return result.addProjectBuildingException( e );\n-        }\n+            try\n+            {\n+                projectBuildingResult = mavenProjectBuilder.buildWithDependencies(\n+                    request.getPom(),\n+                    request.getLocalRepository(),\n+                    request.getProfileManager() );\n+            }\n+            catch ( ProjectBuildingException e )\n+            {\n+                return result.addProjectBuildingException( e );\n+            }\n \n-        if ( reactorManager.hasMultipleProjects() )\n-        {\n-            result.setProject( projectBuildingResult.getProject() );\n+            if ( reactorManager.hasMultipleProjects() )\n+            {\n+                result.setProject( projectBuildingResult.getProject() );\n \n-            result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );\n-        }\n-        else\n-        {\n-            result.setProject( projectBuildingResult.getProject() );\n+                result.setTopologicallySortedProjects( reactorManager.getSortedProjects() );\n+            }\n+            else\n+            {\n+                result.setProject( projectBuildingResult.getProject() );\n \n-            result.setTopologicallySortedProjects( Arrays.asList( new MavenProject[]{ projectBuildingResult.getProject()} ) );\n-        }\n+                result.setTopologicallySortedProjects( Arrays.asList( new MavenProject[]{ projectBuildingResult.getProject()} ) );\n+            }\n \n-        result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );\n+            result.setArtifactResolutionResult( projectBuildingResult.getArtifactResolutionResult() );\n \n-        // From this I could produce something that would help IDE integrators create importers:\n-        // - topo sorted list of projects\n-        // - binary dependencies\n-        // - source dependencies (projects in the reactor)\n-        //\n-        // We could create a layer approach here. As to do anything you must resolve a projects artifacts,\n-        // and with that set you could then subsequently execute goals for each of those project.\n+            // From this I could produce something that would help IDE integrators create importers:\n+            // - topo sorted list of projects\n+            // - binary dependencies\n+            // - source dependencies (projects in the reactor)\n+            //\n+            // We could create a layer approach here. As to do anything you must resolve a projects artifacts,\n+            // and with that set you could then subsequently execute goals for each of those project.\n \n-        return result;\n+            return result;\n+        }\n+        finally\n+        {\n+            request.getRealmManager().clear();\n+        }\n     }\n \n     // ----------------------------------------------------------------------\n@@ -786,6 +806,7 @@ public MavenExecutionResult execute( MavenExecutionRequest request )\n         finally\n         {\n             loggerManager.setThresholds( oldThreshold );\n+            request.getRealmManager().clear();\n         }\n     }\n ",
                "deletions": 68
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Adding a couple unit tests for the project-level session, and fixing potential NPE when an extension is declared that already exists in the core distribution.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@588136 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/b11111f75a0ccf5bc92e53368462fad9d6563859",
        "parent": "https://github.com/apache/maven/commit/f4a9342c7f345ce28e969b1362904f557429a626",
        "bug_id": "maven_110",
        "file": [
            {
                "sha": "1f4acfadcba0c7e2300c2e02d4a3f7142f4b3974",
                "filename": "maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "blob_url": "https://github.com/apache/maven/blob/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "raw_url": "https://github.com/apache/maven/raw/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java",
                "status": "modified",
                "changes": 53,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/extension/DefaultExtensionManager.java?ref=b11111f75a0ccf5bc92e53368462fad9d6563859",
                "patch": "@@ -28,8 +28,7 @@\n import org.apache.maven.artifact.metadata.ArtifactMetadataSource;\n import org.apache.maven.artifact.metadata.ResolutionGroup;\n import org.apache.maven.artifact.repository.ArtifactRepository;\n-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n-import org.apache.maven.artifact.resolver.ArtifactResolutionException;\n+import org.apache.maven.artifact.resolver.ArtifactResolutionRequest;\n import org.apache.maven.artifact.resolver.ArtifactResolutionResult;\n import org.apache.maven.artifact.resolver.ArtifactResolver;\n import org.apache.maven.artifact.resolver.filter.ArtifactFilter;\n@@ -65,9 +64,8 @@\n \n import java.net.MalformedURLException;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Iterator;\n+import java.util.LinkedHashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -207,11 +205,19 @@ private void addExtension( Artifact extensionArtifact,\n             projectSessions.put( projectId, projectSession );\n         }\n \n-        // if the extension is null, or if it's already been added to the current project-session, skip it.\n-        if ( ( extensionArtifact != null ) && !projectSession.containsExtensionRealm( extensionArtifact ) )\n+        ArtifactFilter coreFilter = artifactFilterManager.getArtifactFilter();\n+\n+        // if the extension is null,\n+        // if it's already been added to the current project-session,\n+        // or if it's excluded by the core filter,\n+        //\n+        // skip it.\n+        if ( ( extensionArtifact != null )\n+             && !projectSession.containsExtensionRealm( extensionArtifact )\n+             && coreFilter.include( extensionArtifact ) )\n         {\n             ArtifactFilter filter =\n-                new ProjectArtifactExceptionFilter( artifactFilterManager.getArtifactFilter(), projectArtifact );\n+                new ProjectArtifactExceptionFilter( coreFilter, projectArtifact );\n \n             ResolutionGroup resolutionGroup;\n \n@@ -229,25 +235,32 @@ private void addExtension( Artifact extensionArtifact,\n             // not declare plexus-utils but need it. MNG-2900\n             DefaultPluginManager.checkPlexusUtils( resolutionGroup, artifactFactory );\n \n-            Set dependencies = new HashSet( resolutionGroup.getArtifacts() );\n+            Set dependencies = new LinkedHashSet();\n \n             dependencies.add( extensionArtifact );\n+            dependencies.addAll( resolutionGroup.getArtifacts() );\n+\n+            ArtifactResolutionRequest dependencyReq = new ArtifactResolutionRequest().setArtifact( projectArtifact )\n+                                                                           .setArtifactDependencies( dependencies )\n+                                                                           .setFilter( filter )\n+                                                                           .setLocalRepository( localRepository )\n+                                                                           .setRemoteRepostories( remoteRepositories )\n+                                                                           .setMetadataSource( artifactMetadataSource );\n \n             // TODO: Make this work with managed dependencies, or an analogous management section in the POM.\n-            ArtifactResolutionResult result;\n-            try\n-            {\n-                result = artifactResolver.resolveTransitively( dependencies, projectArtifact,\n-                                                      Collections.EMPTY_MAP, localRepository, remoteRepositories,\n-                                                      artifactMetadataSource, filter );\n-            }\n-            catch ( ArtifactResolutionException e )\n+            ArtifactResolutionResult result = artifactResolver.resolve( dependencyReq );\n+\n+            if ( result.hasCircularDependencyExceptions() || result.hasErrorArtifactExceptions()\n+                 || result.hasMetadataResolutionExceptions() || result.hasVersionRangeViolations() )\n             {\n-                throw new ExtensionManagerException( \"Unable to resolve one or more extension artifacts for: \" + extensionArtifact.getId(), extensionArtifact, projectId, e );\n+                throw new ExtensionManagerException( \"Failed to resolve extension: \" + extensionArtifact, extensionArtifact, projectId, result );\n             }\n-            catch ( ArtifactNotFoundException e )\n+\n+            Set resultArtifacts = result.getArtifacts();\n+\n+            if ( !extensionArtifact.isResolved() || ( extensionArtifact.getFile() == null ) )\n             {\n-                throw new ExtensionManagerException( \"One or more extension artifacts is missing for: \" + extensionArtifact.getId(), extensionArtifact, projectId, e );\n+                throw new ExtensionManagerException( \"Extension artifact was not resolved, or has no file associated with it.\", extensionArtifact, projectId );\n             }\n \n             ClassRealm extensionRealm;\n@@ -260,7 +273,7 @@ private void addExtension( Artifact extensionArtifact,\n                 throw new ExtensionManagerException( \"Unable to create extension ClassRealm for extension: \" + extensionArtifact.getId() + \" within session for project: \" + projectId, extensionArtifact, projectId, e );\n             }\n \n-            for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )\n+            for ( Iterator i = resultArtifacts.iterator(); i.hasNext(); )\n             {\n                 Artifact a = (Artifact) i.next();\n ",
                "deletions": 20
            },
            {
                "sha": "2f1d2dae85689c1ad1f4cb614a001e10d3171a00",
                "filename": "maven-core/src/main/java/org/apache/maven/extension/ExtensionManagerException.java",
                "blob_url": "https://github.com/apache/maven/blob/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/main/java/org/apache/maven/extension/ExtensionManagerException.java",
                "raw_url": "https://github.com/apache/maven/raw/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/main/java/org/apache/maven/extension/ExtensionManagerException.java",
                "status": "modified",
                "changes": 35,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/extension/ExtensionManagerException.java?ref=b11111f75a0ccf5bc92e53368462fad9d6563859",
                "patch": "@@ -2,8 +2,7 @@\n \n import org.apache.maven.artifact.Artifact;\n import org.apache.maven.artifact.metadata.ArtifactMetadataRetrievalException;\n-import org.apache.maven.artifact.resolver.ArtifactNotFoundException;\n-import org.apache.maven.artifact.resolver.ArtifactResolutionException;\n+import org.apache.maven.artifact.resolver.ArtifactResolutionResult;\n import org.codehaus.plexus.PlexusContainerException;\n import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;\n import org.codehaus.plexus.classworlds.realm.NoSuchRealmException;\n@@ -18,6 +17,7 @@\n \n     private Artifact extensionArtifact;\n     private final String projectId;\n+    private ArtifactResolutionResult resolutionResult;\n \n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n@@ -42,7 +42,7 @@ public ExtensionManagerException( String message,\n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n                                       String projectId,\n-                                      ArtifactResolutionException cause )\n+                                      MalformedURLException cause )\n     {\n         super( message, cause );\n         this.extensionArtifact = extensionArtifact;\n@@ -52,27 +52,25 @@ public ExtensionManagerException( String message,\n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n                                       String projectId,\n-                                      ArtifactNotFoundException cause )\n+                                      PlexusConfigurationException cause )\n     {\n         super( message, cause );\n         this.extensionArtifact = extensionArtifact;\n         this.projectId = projectId;\n     }\n \n     public ExtensionManagerException( String message,\n-                                      Artifact extensionArtifact,\n                                       String projectId,\n-                                      MalformedURLException cause )\n+                                      DuplicateRealmException cause )\n     {\n         super( message, cause );\n-        this.extensionArtifact = extensionArtifact;\n         this.projectId = projectId;\n     }\n \n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n                                       String projectId,\n-                                      PlexusConfigurationException cause )\n+                                      NoSuchRealmException cause )\n     {\n         super( message, cause );\n         this.extensionArtifact = extensionArtifact;\n@@ -81,7 +79,7 @@ public ExtensionManagerException( String message,\n \n     public ExtensionManagerException( String message,\n                                       String projectId,\n-                                      DuplicateRealmException cause )\n+                                      PlexusContainerException cause )\n     {\n         super( message, cause );\n         this.projectId = projectId;\n@@ -90,29 +88,31 @@ public ExtensionManagerException( String message,\n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n                                       String projectId,\n-                                      NoSuchRealmException cause )\n+                                      ComponentRepositoryException cause )\n     {\n         super( message, cause );\n         this.extensionArtifact = extensionArtifact;\n         this.projectId = projectId;\n     }\n \n     public ExtensionManagerException( String message,\n-                                      String projectId,\n-                                      PlexusContainerException cause )\n+                                      Artifact extensionArtifact,\n+                                      String projectId )\n     {\n-        super( message, cause );\n+        super( message );\n+        this.extensionArtifact = extensionArtifact;\n         this.projectId = projectId;\n     }\n \n     public ExtensionManagerException( String message,\n                                       Artifact extensionArtifact,\n                                       String projectId,\n-                                      ComponentRepositoryException cause )\n+                                      ArtifactResolutionResult result )\n     {\n-        super( message, cause );\n+        super( message );\n         this.extensionArtifact = extensionArtifact;\n         this.projectId = projectId;\n+        resolutionResult = result;\n     }\n \n     public Artifact getExtensionArtifact()\n@@ -125,4 +125,9 @@ public String getProjectId()\n         return projectId;\n     }\n \n+    public ArtifactResolutionResult getArtifactResolutionResult()\n+    {\n+        return resolutionResult;\n+    }\n+\n }",
                "deletions": 15
            },
            {
                "sha": "fd103f728c0c7b317993075493a9717baee9a11f",
                "filename": "maven-core/src/test/java/org/apache/maven/execution/MavenProjectSessionTest.java",
                "blob_url": "https://github.com/apache/maven/blob/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/test/java/org/apache/maven/execution/MavenProjectSessionTest.java",
                "raw_url": "https://github.com/apache/maven/raw/b11111f75a0ccf5bc92e53368462fad9d6563859/maven-core/src/test/java/org/apache/maven/execution/MavenProjectSessionTest.java",
                "status": "added",
                "changes": 164,
                "additions": 164,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/execution/MavenProjectSessionTest.java?ref=b11111f75a0ccf5bc92e53368462fad9d6563859",
                "patch": "@@ -0,0 +1,164 @@\n+package org.apache.maven.execution;\n+\n+import org.apache.maven.artifact.Artifact;\n+import org.codehaus.plexus.PlexusContainerException;\n+import org.codehaus.plexus.PlexusTestCase;\n+import org.codehaus.plexus.classworlds.realm.DuplicateRealmException;\n+import org.easymock.MockControl;\n+\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+\n+public class MavenProjectSessionTest\n+    extends PlexusTestCase\n+{\n+\n+    private Set mockControls = new HashSet();\n+\n+    private void replay()\n+    {\n+        for ( Iterator it = mockControls.iterator(); it.hasNext(); )\n+        {\n+            MockControl ctl = (MockControl) it.next();\n+            ctl.replay();\n+        }\n+    }\n+\n+    private void verify()\n+    {\n+        for ( Iterator it = mockControls.iterator(); it.hasNext(); )\n+        {\n+            MockControl ctl = (MockControl) it.next();\n+            ctl.verify();\n+        }\n+    }\n+\n+    public void testAddExtensionRealmThenContainsExtensionRealm_ReturnTrue()\n+        throws PlexusContainerException\n+    {\n+        String projectId = \"org.test:test-project1:1\";\n+\n+        MavenProjectSession session = new MavenProjectSession( projectId, getContainer() );\n+\n+        ArtifactMock extMock = new ArtifactMock( \"org.test.dep\", \"ext1\", \"2\" );\n+\n+        replay();\n+\n+        try\n+        {\n+            session.createExtensionRealm( extMock.artifact );\n+        }\n+        catch ( DuplicateRealmException e )\n+        {\n+            e.printStackTrace();\n+\n+            fail( \"ClassRealm for extension should not exist yet.\" );\n+        }\n+\n+        assertTrue( \"Should return true for containsExtensionRealm after extension is added.\", session.containsExtensionRealm( extMock.artifact ) );\n+\n+        verify();\n+    }\n+\n+    public void testConstructDisposeConstruct_OneExtension_NoDuplicateRealmException()\n+        throws PlexusContainerException\n+    {\n+        String projectId = \"org.test:test-project1:1\";\n+\n+        MavenProjectSession session = new MavenProjectSession( projectId, getContainer() );\n+\n+        ArtifactMock extMock = new ArtifactMock( \"org.test.dep\", \"ext1\", \"2\" );\n+\n+        replay();\n+\n+        try\n+        {\n+            session.createExtensionRealm( extMock.artifact );\n+        }\n+        catch ( DuplicateRealmException e )\n+        {\n+            e.printStackTrace();\n+\n+            fail( \"ClassRealm for extension should not exist yet.\" );\n+        }\n+\n+        session.dispose();\n+\n+        session = new MavenProjectSession( projectId, getContainer() );\n+\n+        try\n+        {\n+            session.createExtensionRealm( extMock.artifact );\n+        }\n+        catch ( DuplicateRealmException e )\n+        {\n+            e.printStackTrace();\n+\n+            fail( \"Should have disposed ClassRealm for extension.\" );\n+        }\n+\n+        verify();\n+    }\n+\n+    public void testAddSameExtensionTwice_DuplicateRealmException()\n+        throws PlexusContainerException\n+    {\n+        String projectId = \"org.test:test-project1:1\";\n+\n+        MavenProjectSession session = new MavenProjectSession( projectId, getContainer() );\n+\n+        ArtifactMock extMock = new ArtifactMock( \"org.test.dep\", \"ext1\", \"2\" );\n+\n+        replay();\n+\n+        try\n+        {\n+            session.createExtensionRealm( extMock.artifact );\n+        }\n+        catch ( DuplicateRealmException e )\n+        {\n+            e.printStackTrace();\n+\n+            fail( \"ClassRealm for extension should not exist yet.\" );\n+        }\n+\n+        try\n+        {\n+            session.createExtensionRealm( extMock.artifact );\n+            fail( \"Should not allow same extension to be added twice.\" );\n+        }\n+        catch ( DuplicateRealmException e )\n+        {\n+        }\n+\n+        verify();\n+    }\n+\n+    private class ArtifactMock\n+    {\n+        private MockControl ctl;\n+\n+        private Artifact artifact;\n+\n+        public ArtifactMock( String groupId,\n+                             String artifactId,\n+                             String version )\n+        {\n+            ctl = MockControl.createControl( Artifact.class );\n+            artifact = (Artifact) ctl.getMock();\n+\n+            artifact.getGroupId();\n+            ctl.setReturnValue( groupId, MockControl.ZERO_OR_MORE );\n+\n+            artifact.getArtifactId();\n+            ctl.setReturnValue( artifactId, MockControl.ZERO_OR_MORE );\n+\n+            artifact.getVersion();\n+            ctl.setReturnValue( version, MockControl.ZERO_OR_MORE );\n+\n+            mockControls.add( ctl );\n+        }\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "MNG-2746 fixing an obvious NPE when parent path is a directory and pom is not found. Also reported in MNGECLIPSE-184 and CONTINUUM-1000\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@494085 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/bf7d7a01a028640ff558bd872591f929795922d9",
        "parent": "https://github.com/apache/maven/commit/bb6b84a02a8c97d76ef73f9a2f74682ee6a5c5bb",
        "bug_id": "maven_111",
        "file": [
            {
                "sha": "84f51fb5a80a5d7feec477be8b818d94be31bc52",
                "filename": "maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/bf7d7a01a028640ff558bd872591f929795922d9/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/bf7d7a01a028640ff558bd872591f929795922d9/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/DefaultMavenProjectBuilder.java?ref=bf7d7a01a028640ff558bd872591f929795922d9",
                "patch": "@@ -1092,20 +1092,22 @@ else if ( StringUtils.isEmpty( parentModel.getVersion() ) )\n                         {\n                             getLogger().debug( \"Parent-POM: \" + parentModel.getId() + \" for project: \" + project.getId() + \" cannot be loaded from relative path: \" + parentDescriptor + \"; path does not exist.\" );\n                         }\n-\n-                        parentDescriptor = null;\n                     }\n                 }\n \n-                try\n-                {\n-                    parentDescriptor = parentDescriptor.getCanonicalFile();\n-                }\n-                catch ( IOException e )\n+                if ( parentDescriptor != null )\n                 {\n-                    getLogger().debug( \"Failed to canonicalize potential parent POM: \\'\" + parentDescriptor + \"\\'\", e );\n+                    try\n+                    {\n+                        parentDescriptor = parentDescriptor.getCanonicalFile();\n+                    }\n+                    catch ( IOException e )\n+                    {\n+                        getLogger().debug( \"Failed to canonicalize potential parent POM: \\'\" + parentDescriptor + \"\\'\",\n+                                           e );\n \n-                    parentDescriptor = null;\n+                        parentDescriptor = null;\n+                    }\n                 }\n \n                 if ( parentDescriptor != null && parentDescriptor.exists() )",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "maven",
        "message": "(Merging 389199:389201 from branch.)\n\no Cleaned up example in the comment-header of the plugin-metadata.mdo\no Added code to initialize a dummy Model instance in MavenProject, to avoid NPEs in things like getId().\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@389203 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5",
        "parent": "https://github.com/apache/maven/commit/02fd611c548d3c712a4fe7ee170da3130250393b",
        "bug_id": "maven_112",
        "file": [
            {
                "sha": "671665628e1b52dd1e3a97195a5e9a10d894283b",
                "filename": "maven-plugin-tools/maven-plugin-tools-model/src/main/mdo/plugin-metadata.mdo",
                "blob_url": "https://github.com/apache/maven/blob/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-plugin-tools/maven-plugin-tools-model/src/main/mdo/plugin-metadata.mdo",
                "raw_url": "https://github.com/apache/maven/raw/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-plugin-tools/maven-plugin-tools-model/src/main/mdo/plugin-metadata.mdo",
                "status": "modified",
                "changes": 81,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-tools/maven-plugin-tools-model/src/main/mdo/plugin-metadata.mdo?ref=cedf9e04bc786e2e377337d3a65029c0ccb1a4f5",
                "patch": "@@ -1,40 +1,51 @@\n <!--\n-  <pluginMetadata>\n-    <mojos>\n-      <mojo goal=\"myGoal\" \n-            phase=\"compile\"\n-            requiresDependencyResolution=\"compile\"\n-            requiresProject=\"true\"\n-            requiresReports=\"true\"\n-            requiresOnline=\"true\"\n-            inheritByDefault=\"true\"\n-            requiresDirectInvocation=\"true\"\n-            aggregator=\"true\">\n+<pluginMetadata>\n+  <mojos>\n+    <mojo>\n+      <goal>myGoal</goal>\n+      <phase>compile</phase>\n+      <requiresDependencyResolution>compile</requiresDependencyResolution>\n+      <requiresProject>true</requiresProject>\n+      <requiresReports>true</requiresReports>\n+      <requiresOnline>true</requiresOnline>\n+      <inheritByDefault>true</inheritByDefault>\n+      <requiresDirectInvocation>true</requiresDirectInvocation>\n+      <aggregator>true</aggregator>\n   \n-        <execute phase=\"initialize\" lifecycle=\"mine\" goal=\"some:goal\"/>\n-        <components>\n-          <component role=\"stuff\" hint=\"more\"/>\n-        </components>\n-        <parameters>\n-          <parameter name=\"nom\" \n-                     property=\"prop\" \n-                     required=\"true\" \n-                     readonly=\"true\" \n-                     expression=\"${my.property}\" \n-                     defaultValue=\"${project.artifactId}\"\n-                     type=\"org.apache.maven.project.MavenProject\"\n-                     alias=\"otherProp\">\n-            <description>Test parameter</description>\n-            <deprecated>Use something else</deprecated>\n-          </parameter>\n-        </parameters>\n-        <description>\n-          This is a test.\n-        </description>\n-        <deprecated>Use another mojo</deprecated>\n-      </mojo>\n-    </mojos>\n-  </pluginMetadata>\n+      <execute>\n+        <phase>initialize</phase>\n+        <lifecycle>mine</lifecycle>\n+        <goal>goal</goal>\n+      </execute>\n+\n+      <components>\n+        <component>\n+          <role>stuff</role>\n+          <hint>more</hint>\n+        </component>\n+      </components>\n+\n+      <parameters>\n+        <parameter>\n+          <name>nom</name> \n+          <property>prop</property> \n+          <required>true</required>\n+          <readonly>true</readonly> \n+          <expression>${my.property}</expression> \n+          <defaultValue>${project.artifactId}</defaultValue>\n+          <type>org.apache.maven.project.MavenProject</type>\n+          <alias>otherProp</alias>\n+          <description>Test parameter</description>\n+          <deprecated>Use something else</deprecated>\n+        </parameter>\n+      </parameters>\n+      <description>\n+        This is a test.\n+      </description>\n+      <deprecated>Use another mojo</deprecated>\n+    </mojo>\n+  </mojos>\n+</pluginMetadata>\n   -->\n <model>\n   <id>plugin-metadata</id>",
                "deletions": 35
            },
            {
                "sha": "2e80f2f3cc9429e77fc498a6d7a6d6c17ace9ee0",
                "filename": "maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "blob_url": "https://github.com/apache/maven/blob/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "raw_url": "https://github.com/apache/maven/raw/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-project/src/main/java/org/apache/maven/project/MavenProject.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/main/java/org/apache/maven/project/MavenProject.java?ref=cedf9e04bc786e2e377337d3a65029c0ccb1a4f5",
                "patch": "@@ -78,6 +78,12 @@\n  */\n public class MavenProject\n {\n+    public static final String EMPTY_PROJECT_GROUP_ID = \"unknown\";\n+    \n+    public static final String EMPTY_PROJECT_ARTIFACT_ID = \"empty-project\";\n+    \n+    public static final String EMPTY_PROJECT_VERSION = \"0\";\n+    \n     private Model model;\n \n     private MavenProject parent;\n@@ -139,6 +145,17 @@\n     \n     private Map moduleAdjustments;\n \n+    public MavenProject()\n+    {\n+        Model model = new Model();\n+        \n+        model.setGroupId( EMPTY_PROJECT_GROUP_ID );\n+        model.setArtifactId( EMPTY_PROJECT_ARTIFACT_ID );\n+        model.setVersion( EMPTY_PROJECT_VERSION );\n+        \n+        this.model = model;\n+    }\n+\n     public MavenProject( Model model )\n     {\n         this.model = model;",
                "deletions": 0
            },
            {
                "sha": "79c57c447174247c4a1de99f8388e3928ca1bede",
                "filename": "maven-project/src/test/java/org/apache/maven/project/MavenProjectTest.java",
                "blob_url": "https://github.com/apache/maven/blob/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-project/src/test/java/org/apache/maven/project/MavenProjectTest.java",
                "raw_url": "https://github.com/apache/maven/raw/cedf9e04bc786e2e377337d3a65029c0ccb1a4f5/maven-project/src/test/java/org/apache/maven/project/MavenProjectTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-project/src/test/java/org/apache/maven/project/MavenProjectTest.java?ref=cedf9e04bc786e2e377337d3a65029c0ccb1a4f5",
                "patch": "@@ -24,6 +24,15 @@\n public class MavenProjectTest\n     extends AbstractMavenProjectTestCase\n {\n+    \n+    public void testEmptyConstructor()\n+    {\n+        MavenProject project = new MavenProject();\n+        \n+        assertEquals( MavenProject.EMPTY_PROJECT_GROUP_ID + \":\" + MavenProject.EMPTY_PROJECT_ARTIFACT_ID + \":jar:\"\n+            + MavenProject.EMPTY_PROJECT_VERSION, project.getId() );\n+    }\n+    \n     public void testCopyConstructor() throws Exception\n     {\n         File f = getFileForClasspathResource( \"canonical-pom.xml\" );",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "maven",
        "message": "(Merged from 385635.) [MNG-2146] Added code to guard against NPE when maven.home and org.apache.maven.global-plugin-registry are both missing from the sysprops.\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@385637 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/a6983a59abbc3f3b86b0959d122b3e52fe7f2f32",
        "parent": "https://github.com/apache/maven/commit/0b856d893b0d267e051efb80f0a2e80b0221dc90",
        "bug_id": "maven_113",
        "file": [
            {
                "sha": "fd543baeb509accb0dc35c675de54ea9b8bfc1e9",
                "filename": "maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java",
                "blob_url": "https://github.com/apache/maven/blob/a6983a59abbc3f3b86b0959d122b3e52fe7f2f32/maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java",
                "raw_url": "https://github.com/apache/maven/raw/a6983a59abbc3f3b86b0959d122b3e52fe7f2f32/maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugin-registry/src/main/java/org/apache/maven/plugin/registry/DefaultPluginRegistryBuilder.java?ref=a6983a59abbc3f3b86b0959d122b3e52fe7f2f32",
                "patch": "@@ -58,7 +58,8 @@ public void initialize()\n \n         getLogger().debug( \"Building Maven user-level plugin registry from: '\" + userRegistryFile.getAbsolutePath() + \"'\" );\n \n-        if ( System.getProperty( \"maven.home\" ) != null )\n+        if ( System.getProperty( \"maven.home\" ) != null ||\n+             System.getProperty( MavenPluginRegistryBuilder.ALT_GLOBAL_PLUGIN_REG_LOCATION ) != null )\n         {\n             globalRegistryFile = getFile( globalRegistryPath, \"maven.home\", MavenPluginRegistryBuilder.ALT_GLOBAL_PLUGIN_REG_LOCATION );\n \n@@ -94,7 +95,7 @@ private PluginRegistry readPluginRegistry( File registryFile )\n     {\n         PluginRegistry registry = null;\n \n-        if ( registryFile.exists() && registryFile.isFile() )\n+        if ( registryFile != null && registryFile.exists() && registryFile.isFile() )\n         {\n             FileReader reader = null;\n             try",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "maven",
        "message": "PR: MNG-833\nSubmitted by: Christoph Sturm\nReviewed by: Brett Porter\no fix NPE\no allow linking of projects in the reactor as modules\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@267532 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/82ac502e78e333c9a776096909aa9cc1b3565b57",
        "parent": "https://github.com/apache/maven/commit/6a5e89785edbae446326941686f8db54fdb3e6de",
        "bug_id": "maven_114",
        "file": [
            {
                "sha": "60cc7bae7929da7103972b418e6c0a08187426b2",
                "filename": "maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java",
                "blob_url": "https://github.com/apache/maven/blob/82ac502e78e333c9a776096909aa9cc1b3565b57/maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java",
                "raw_url": "https://github.com/apache/maven/raw/82ac502e78e333c9a776096909aa9cc1b3565b57/maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java",
                "status": "modified",
                "changes": 48,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-plugins/maven-idea-plugin/src/main/java/org/apache/maven/plugin/idea/IdeaMojo.java?ref=82ac502e78e333c9a776096909aa9cc1b3565b57",
                "patch": "@@ -110,9 +110,9 @@ private void rewriteWorkspace()\n     private void rewriteProject()\n         throws MojoExecutionException\n     {\n+        File projectFile = new File( project.getBasedir(), project.getArtifactId() + \".ipr\" );\n         try\n         {\n-            File projectFile = new File( project.getBasedir(), project.getArtifactId() + \".ipr\" );\n             Reader reader;\n             if ( projectFile.exists() )\n             {\n@@ -162,7 +162,8 @@ private void rewriteProject()\n             else\n             {\n                 Xpp3Dom m = createElement( modules, \"module\" );\n-                String modulePath = new File( project.getBasedir(), project.getArtifactId() + \".iml\" ).getAbsolutePath();\n+                String modulePath = new File( project.getBasedir(),\n+                                              project.getArtifactId() + \".iml\" ).getAbsolutePath();\n                 m.setAttribute( \"filepath\", \"$PROJECT_DIR$/\" + toRelative( project.getBasedir(), modulePath ) );\n             }\n \n@@ -178,20 +179,20 @@ private void rewriteProject()\n         }\n         catch ( XmlPullParserException e )\n         {\n-            throw new MojoExecutionException( \"Error parsing existing IML file\", e );\n+            throw new MojoExecutionException( \"Error parsing existing IPR file: \" + projectFile.getAbsolutePath(), e );\n         }\n         catch ( IOException e )\n         {\n-            throw new MojoExecutionException( \"Error parsing existing IML file\", e );\n+            throw new MojoExecutionException( \"Error parsing existing IPR file: \" + projectFile.getAbsolutePath(), e );\n         }\n     }\n \n     private void rewriteModule()\n         throws MojoExecutionException\n     {\n+        File moduleFile = new File( project.getBasedir(), project.getArtifactId() + \".iml\" );\n         try\n         {\n-            File moduleFile = new File( project.getBasedir(), project.getArtifactId() + \".iml\" );\n             Reader reader;\n             if ( moduleFile.exists() )\n             {\n@@ -214,11 +215,11 @@ private void rewriteModule()\n \n             // TODO: how can we let the WAR/EJBs plugin hook in and provide this?\n             // TODO: merge in ejb-module, etc.\n-            if ( project.getPackaging().equals( \"war\" ) )\n+            if ( \"war\".equals( project.getPackaging() ) )\n             {\n                 addWebModule( module );\n             }\n-            else if ( project.getPackaging().equals( \"ejb\" ) )\n+            else if ( \"ejb\".equals( project.getPackaging() ) )\n             {\n                 module.setAttribute( \"type\", \"J2EE_EJB_MODULE\" );\n             }\n@@ -264,20 +265,27 @@ else if ( project.getPackaging().equals( \"ejb\" ) )\n             for ( Iterator i = project.getArtifacts().iterator(); i.hasNext(); )\n             {\n                 Artifact a = (Artifact) i.next();\n-                // TODO: resolve projects in reactor as references\n-\n                 Xpp3Dom dep = createElement( component, \"orderEntry\" );\n-                dep.setAttribute( \"type\", \"module-library\" );\n \n-                dep = createElement( dep, \"library\" );\n-                dep.setAttribute( \"name\", a.getArtifactId() );\n+                if ( a.getFile() != null )\n+                {\n+                    dep.setAttribute( \"type\", \"module-library\" );\n+                    dep = createElement( dep, \"library\" );\n+                    dep.setAttribute( \"name\", a.getArtifactId() );\n \n-                Xpp3Dom el = createElement( dep, \"CLASSES\" );\n-                el = createElement( el, \"root\" );\n-                el.setAttribute( \"url\", \"jar://\" + a.getFile().getAbsolutePath().replace( '\\\\', '/' ) + \"!/\" );\n+                    Xpp3Dom el = createElement( dep, \"CLASSES\" );\n+                    el = createElement( el, \"root\" );\n+                    File file = a.getFile();\n+                    el.setAttribute( \"url\", \"jar://\" + file.getAbsolutePath().replace( '\\\\', '/' ) + \"!/\" );\n \n-                createElement( dep, \"JAVADOC\" );\n-                createElement( dep, \"SOURCES\" );\n+                    createElement( dep, \"JAVADOC\" );\n+                    createElement( dep, \"SOURCES\" );\n+                }\n+                else\n+                {\n+                    dep.setAttribute( \"type\", \"module\" );\n+                    dep.setAttribute( \"module-name\", a.getArtifactId() );\n+                }\n             }\n \n             FileWriter writer = new FileWriter( moduleFile );\n@@ -292,11 +300,11 @@ else if ( project.getPackaging().equals( \"ejb\" ) )\n         }\n         catch ( XmlPullParserException e )\n         {\n-            throw new MojoExecutionException( \"Error parsing existing IML file\", e );\n+            throw new MojoExecutionException( \"Error parsing existing IML file \" + moduleFile.getAbsolutePath(), e );\n         }\n         catch ( IOException e )\n         {\n-            throw new MojoExecutionException( \"Error parsing existing IML file\", e );\n+            throw new MojoExecutionException( \"Error parsing existing IML file \" + moduleFile.getAbsolutePath(), e );\n         }\n     }\n \n@@ -419,7 +427,7 @@ private void removeOldDependencies( Xpp3Dom component )\n         for ( int i = children.length - 1; i >= 0; i-- )\n         {\n             Xpp3Dom child = children[i];\n-            if ( child.getName().equals( \"orderEntry\" ) && child.getAttribute( \"type\" ).equals( \"module-library\" ) )\n+            if ( \"orderEntry\".equals( child.getName() ) && \"module-library\".equals( child.getAttribute( \"type\" ) ) )\n             {\n                 component.removeChild( i );\n             }",
                "deletions": 20
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixing a NullPointerException in the value extractor if the specified getter\n  didn't exists. The value extractor will now return null if the getter doesn't\n  exists.\no Properly implemented the method caching in the value exctrator.\no Changed the RegexBasedModelInterpolator so it would properly handle null\n  values. It used to convert null to \"null\" and then insert that, now it will\n  leave the expression as is.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@163696 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/16ea6ce332bf399267bfc2c449496e23736433b2",
        "parent": "https://github.com/apache/maven/commit/39a96456cddd9049a639679d4a9dad653294ea07",
        "bug_id": "maven_115",
        "file": [
            {
                "sha": "a8ae1c89ace14c1b4fd34ce4a780654fe722dfe9",
                "filename": "maven-core/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java",
                "blob_url": "https://github.com/apache/maven/blob/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java",
                "raw_url": "https://github.com/apache/maven/raw/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java",
                "status": "modified",
                "changes": 37,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolator.java?ref=16ea6ce332bf399267bfc2c449496e23736433b2",
                "patch": "@@ -1,20 +1,19 @@\n package org.apache.maven.project.interpolation;\n \n-/* ====================================================================\n- *   Copyright 2001-2004 The Apache Software Foundation.\n+/*\n+ * Copyright 2001-2005 The Apache Software Foundation.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n- * ====================================================================\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n \n import org.apache.maven.model.Model;\n@@ -32,12 +31,12 @@\n \n /**\n  * @author jdcasey Created on Feb 3, 2005\n+ * @version $Id$\n  */\n public class RegexBasedModelInterpolator\n     extends AbstractLogEnabled\n     implements ModelInterpolator\n {\n-\n     private static final Pattern EXPRESSION_PATTERN = Pattern.compile( \"\\\\$\\\\{(pom|project\\\\.)?([^}]+)\\\\}\" );\n \n     /**\n@@ -89,10 +88,11 @@ private String interpolateInternal( String src, Model model )\n             String wholeExpr = matcher.group( 0 );\n             String realExpr = matcher.group( 2 );\n \n-            String value = null;\n+            Object value = null;\n+\n             try\n             {\n-                value = String.valueOf( ReflectionValueExtractor.evaluate( realExpr, model ) );\n+                value = ReflectionValueExtractor.evaluate( realExpr, model );\n             }\n             catch ( Exception e )\n             {\n@@ -105,15 +105,14 @@ private String interpolateInternal( String src, Model model )\n \n             if ( value != null )\n             {\n-                result = StringUtils.replace( result, wholeExpr, value );\n+                result = StringUtils.replace( result, wholeExpr, String.valueOf( value ) );\n                 // could use:\n-                // result = matcher.replaceFirst( value );\n-                // but this could result in multiple lookups of value, and replaceAll is not correct behaviour \n+                // result = matcher.replaceFirst( stringValue );\n+                // but this could result in multiple lookups of stringValue, and replaceAll is not correct behaviour\n                 matcher.reset( result );\n             }\n         }\n \n         return result;\n     }\n-\n }\n\\ No newline at end of file",
                "deletions": 19
            },
            {
                "sha": "487d89f0ce868f13ba5523c9c0bf5fd565c24d17",
                "filename": "maven-core/src/main/java/org/apache/maven/util/introspection/ReflectionValueExtractor.java",
                "blob_url": "https://github.com/apache/maven/blob/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/main/java/org/apache/maven/util/introspection/ReflectionValueExtractor.java",
                "raw_url": "https://github.com/apache/maven/raw/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/main/java/org/apache/maven/util/introspection/ReflectionValueExtractor.java",
                "status": "modified",
                "changes": 48,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/util/introspection/ReflectionValueExtractor.java?ref=16ea6ce332bf399267bfc2c449496e23736433b2",
                "patch": "@@ -1,43 +1,41 @@\n package org.apache.maven.util.introspection;\n \n-/* ====================================================================\n- *   Copyright 2001-2004 The Apache Software Foundation.\n+/*\n+ * Copyright 2001-2005 The Apache Software Foundation.\n  *\n- *   Licensed under the Apache License, Version 2.0 (the \"License\");\n- *   you may not use this file except in compliance with the License.\n- *   You may obtain a copy of the License at\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n  *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n  *\n- *   Unless required by applicable law or agreed to in writing, software\n- *   distributed under the License is distributed on an \"AS IS\" BASIS,\n- *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *   See the License for the specific language governing permissions and\n- *   limitations under the License.\n- * ====================================================================\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n \n-import org.codehaus.plexus.util.StringUtils;\n-\n import java.lang.reflect.Method;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.StringTokenizer;\n \n+import org.codehaus.plexus.util.StringUtils;\n+\n /**\n  * Using simple dotted expressions extract the values from a MavenProject\n  * instance, For example we might want to extract a value like:\n  * project.build.sourceDirectory\n- * \n+ *\n  * @author <a href=\"mailto:jason@maven.org\">Jason van Zyl </a>\n- * @version $Id: ReflectionValueExtractor.java,v 1.2 2005/03/01 07:05:33 brett\n- *          Exp $\n+ * @version $Id$\n  */\n public class ReflectionValueExtractor\n {\n-    private static Class[] args = new Class[0];\n+    private static Class[] args = new Class[ 0 ];\n \n-    private static Object[] params = new Object[0];\n+    private static Object[] params = new Object[ 0 ];\n \n     private static ClassMap classMap;\n \n@@ -48,7 +46,8 @@ private ReflectionValueExtractor()\n     }\n \n     // TODO: don't throw Exception\n-    public static Object evaluate( String expression, Object root ) throws Exception\n+    public static Object evaluate( String expression, Object root )\n+        throws Exception\n     {\n         // ----------------------------------------------------------------------\n         // Remove the leading \"project\" token\n@@ -75,6 +74,11 @@ public static Object evaluate( String expression, Object root ) throws Exception\n \n             Method method = classMap.findMethod( methodName, args );\n \n+            if ( method == null )\n+            {\n+                return null;\n+            }\n+\n             value = method.invoke( value, params );\n         }\n \n@@ -88,8 +92,10 @@ private static ClassMap getClassMap( Class clazz )\n         if ( classMap == null )\n         {\n             classMap = new ClassMap( clazz );\n+\n+            classMaps.put( clazz, classMap );\n         }\n \n         return classMap;\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 21
            },
            {
                "sha": "6abfedfb99c9199c9d8356959654c69815d62b21",
                "filename": "maven-core/src/test/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolatorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/test/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolatorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/test/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolatorTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/project/interpolation/RegexBasedModelInterpolatorTest.java?ref=16ea6ce332bf399267bfc2c449496e23736433b2",
                "patch": "@@ -16,17 +16,18 @@\n  * limitations under the License.\n  */\n \n-import junit.framework.TestCase;\n import org.apache.maven.model.Dependency;\n import org.apache.maven.model.Model;\n \n+import junit.framework.TestCase;\n+\n /**\n  * @author jdcasey\n+ * @version $Id$\n  */\n public class RegexBasedModelInterpolatorTest\n     extends TestCase\n {\n-\n     public void testShouldInterpolateDependencyVersionToSetSameAsProjectVersion()\n         throws ModelInterpolationException\n     {\n@@ -75,5 +76,4 @@ public void testTwoReferences()\n \n         assertEquals( \"foo-3.8.1\", ( (Dependency) out.getDependencies().get( 0 ) ).getVersion() );\n     }\n-\n-}\n\\ No newline at end of file\n+}",
                "deletions": 4
            },
            {
                "sha": "829c9319aa44fbf3f6388b5cf465c90113af313f",
                "filename": "maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java",
                "blob_url": "https://github.com/apache/maven/blob/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java",
                "raw_url": "https://github.com/apache/maven/raw/16ea6ce332bf399267bfc2c449496e23736433b2/maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/test/java/org/apache/maven/util/introspection/ReflectionValueExtractorTest.java?ref=16ea6ce332bf399267bfc2c449496e23736433b2",
                "patch": "@@ -33,15 +33,11 @@\n {\n     private MavenProject project;\n \n-    private MavenProjectBuilder builder;\n-\n     protected void setUp()\n         throws Exception\n     {\n         super.setUp();\n \n-        builder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n-\n         File f = getFileForClasspathResource( \"pom.xml\" );\n \n         project = getProject( f );\n@@ -88,4 +84,10 @@ public void testValueExtraction()\n \n         assertNotNull( build );\n     }\n+\n+    public void testValueExtractorWithAInvalidExpression()\n+        throws Exception\n+    {\n+        assertNull( ReflectionValueExtractor.evaluate( \"project.foo\", project ) );\n+    }\n }",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Changed ReactorManager's api for blackList and other methods that require\nan 'id' to use MavenProject instead. \nIn some parts of the code a DAG is constructed using a version-less key,\nand in the api what the id should be is unspecified.\nThis could result in NPE's (it does!) because the code in plexus-utils\nassumes a known id (vertex in the DAG) is supplied.\n\nSo, moved the project.getId() calls outside of ReactorManager into the\nReactorManager, so that there's just one place where the decision is made on\nhow to generate an id (DAG vertex label) from a project. This centralizes\nthat knowledge for increased maintainability and reduced chances on NPE's.\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@279334 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/69c6305347b9680b0aba2c93586d1b3d46e5ba02",
        "parent": "https://github.com/apache/maven/commit/7b6f292c73db67e179033e6a051871754cb4a725",
        "bug_id": "maven_116",
        "file": [
            {
                "sha": "d10f537104138267cb151748fe7eadf710af9fd8",
                "filename": "maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "blob_url": "https://github.com/apache/maven/blob/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "raw_url": "https://github.com/apache/maven/raw/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/DefaultMaven.java",
                "status": "modified",
                "changes": 52,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/DefaultMaven.java?ref=69c6305347b9680b0aba2c93586d1b3d46e5ba02",
                "patch": "@@ -79,7 +79,7 @@\n     // ----------------------------------------------------------------------\n \n     protected MavenProjectBuilder projectBuilder;\n-    \n+\n     protected LifecycleExecutor lifecycleExecutor;\n \n     protected PlexusContainer container;\n@@ -126,9 +126,9 @@ public MavenExecutionResponse execute( MavenExecutionRequest request )\n         dispatcher.dispatchStart( event, request.getBaseDirectory() );\n \n         ReactorManager rm;\n-        \n+\n         ProfileManager globalProfileManager = request.getGlobalProfileManager();\n-        \n+\n         try\n         {\n             loadSettingsProfiles( globalProfileManager, request.getSettings() );\n@@ -137,7 +137,7 @@ public MavenExecutionResponse execute( MavenExecutionRequest request )\n \n             List projects = collectProjects( files, request.getLocalRepository(), request.isRecursive(),\n                                         request.getSettings(), globalProfileManager );\n-            \n+\n             // the reasoning here is that the list is still unsorted according to dependency, so the first project\n             // SHOULD BE the top-level, or the one we want to start with if we're doing an aggregated build.\n \n@@ -146,11 +146,11 @@ public MavenExecutionResponse execute( MavenExecutionRequest request )\n                 MavenProject superProject = projectBuilder.buildStandaloneSuperProject( request.getLocalRepository() );\n                 projects.add( superProject );\n             }\n-            \n+\n             rm = new ReactorManager( projects );\n-            \n+\n             String requestFailureBehavior = request.getFailureBehavior();\n-            \n+\n             if ( requestFailureBehavior != null )\n             {\n                 rm.setFailureBehavior( requestFailureBehavior );\n@@ -196,7 +196,7 @@ public MavenExecutionResponse execute( MavenExecutionRequest request )\n                     if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) && ( exception instanceof ReactorException ) )\n                     {\n                         logFailure( response, exception, null );\n-                        \n+\n                         if ( rm.hasMultipleProjects() )\n                         {\n                             writeReactorSummary( rm );\n@@ -262,22 +262,22 @@ private void writeReactorSummary( ReactorManager rm )\n         // o project-name...........FAILED\n         // o project2-name..........SKIPPED (dependency build failed or was skipped)\n         // o project-3-name.........SUCCESS\n-        \n+\n         line();\n         getLogger().info( \"Reactor Summary:\" );\n         line();\n-        \n+\n         for ( Iterator it = rm.getProjectsSortedByDependency().iterator(); it.hasNext(); )\n         {\n             MavenProject project = (MavenProject) it.next();\n-            \n+\n             String id = project.getId();\n-            \n-            if ( rm.hasBuildFailure( id ) )\n+\n+            if ( rm.hasBuildFailure( project ) )\n             {\n                 logReactorSummaryLine( project.getName(), \"FAILED\" );\n             }\n-            else if ( rm.isBlackListed( id ) )\n+            else if ( rm.isBlackListed( project ) )\n             {\n                 logReactorSummaryLine( project.getName(), \"SKIPPED (dependency build failed or was skipped)\" );\n             }\n@@ -286,28 +286,28 @@ else if ( rm.isBlackListed( id ) )\n                 logReactorSummaryLine( project.getName(), \"SUCCESS\" );\n             }\n         }\n-        \n+\n         getLogger().info( \"\" );\n         getLogger().info( \"\" );\n     }\n \n     private void logReactorSummaryLine( String name, String status )\n     {\n         StringBuffer messageBuffer = new StringBuffer();\n-        \n+\n         messageBuffer.append( name );\n-        \n+\n         int dotCount = 65;\n-        \n+\n         dotCount -= name.length();\n-        \n+\n         for ( int i = 0; i < dotCount; i++ )\n         {\n             messageBuffer.append( '.' );\n         }\n-        \n+\n         messageBuffer.append( status );\n-        \n+\n         getLogger().info( messageBuffer.toString() );\n     }\n \n@@ -399,7 +399,7 @@ private void loadSettingsProfiles( ProfileManager profileManager, Settings setti\n         if ( settingsProfiles != null && !settingsProfiles.isEmpty() )\n         {\n             List settingsActiveProfileIds = settings.getActiveProfiles();\n-            \n+\n             profileManager.explicitlyActivate( settingsActiveProfileIds );\n \n             for ( Iterator it = settings.getProfiles().iterator(); it.hasNext(); )\n@@ -411,9 +411,9 @@ private void loadSettingsProfiles( ProfileManager profileManager, Settings setti\n                 profileManager.addProfile( profile );\n             }\n         }\n-        \n+\n     }\n-    \n+\n     // ----------------------------------------------------------------------\n     // Methods used by all execution request handlers\n     // ----------------------------------------------------------------------\n@@ -585,7 +585,7 @@ protected void logSuccess( MavenExecutionResponse r, ReactorManager rm )\n         {\n             writeReactorSummary( rm );\n         }\n-        \n+\n         line();\n \n         getLogger().info( \"BUILD SUCCESSFUL\" );\n@@ -618,7 +618,7 @@ protected void line()\n     {\n         getLogger().info( \"----------------------------------------------------------------------------\" );\n     }\n-    \n+\n     protected static String formatTime( long ms )\n     {\n         long secs = ms / MS_PER_SEC;",
                "deletions": 26
            },
            {
                "sha": "2a72cc9ad94766bd018a094f1aaa7e7f0691df56",
                "filename": "maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java",
                "blob_url": "https://github.com/apache/maven/blob/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java",
                "raw_url": "https://github.com/apache/maven/raw/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java",
                "status": "modified",
                "changes": 75,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/execution/ReactorManager.java?ref=69c6305347b9680b0aba2c93586d1b3d46e5ba02",
                "patch": "@@ -20,27 +20,27 @@\n \n public class ReactorManager\n {\n-    \n+\n     public static final String FAIL_FAST = \"fail-fast\";\n \n     public static final String FAIL_AT_END = \"fail-at-end\";\n \n     public static final String FAIL_NEVER = \"fail-never\";\n-    \n+\n     private DAG reactorDag;\n-    \n+\n     private Map projectMap;\n-    \n+\n     private List projectsByDependency;\n \n     private List blackList = new ArrayList();\n \n     private MavenProject topLevelProject;\n-    \n+\n     private Map buildFailuresByProject = new HashMap();\n-    \n+\n     private String failureBehavior = FAIL_FAST;\n-    \n+\n     public ReactorManager( List projects )\n         throws CycleDetectedException\n     {\n@@ -136,10 +136,10 @@ public ReactorManager( List projects )\n \n             projectsByDependency.add( projectMap.get( id ) );\n         }\n-        \n+\n         projectsByDependency = Collections.unmodifiableList( projectsByDependency );\n     }\n-    \n+\n     public void setFailureBehavior( String failureBehavior )\n     {\n         if ( FAIL_FAST.equals( failureBehavior ) || FAIL_AT_END.equals( failureBehavior ) || FAIL_NEVER.equals( failureBehavior ) )\n@@ -152,33 +152,39 @@ public void setFailureBehavior( String failureBehavior )\n                 + FAIL_AT_END + \"\\', \\'\" + FAIL_NEVER + \"\\').\" );\n         }\n     }\n-    \n+\n     public String getFailureBehavior()\n     {\n         return failureBehavior;\n     }\n-    \n+\n     public List getProjectsSortedByDependency()\n     {\n         return projectsByDependency;\n     }\n-    \n+\n     // TODO: !![jc; 28-jul-2005] check this; if we're using '-r' and there are aggregator tasks, this will result in weirdness.\n     public MavenProject getTopLevelProject()\n     {\n         if ( topLevelProject == null )\n         {\n             List projectsByFile = new ArrayList( projectsByDependency );\n-            \n+\n             Collections.sort(projectsByFile, new ByProjectFileComparator() );\n-            \n+\n             topLevelProject = (MavenProject) projectsByFile.get( 0 );\n         }\n-        \n+\n         return topLevelProject;\n     }\n-    \n-    public void blackList( String id )\n+\n+    public void blackList( MavenProject project )\n+    {\n+        blackList(\n+            ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );\n+    }\n+\n+    private void blackList( String id )\n     {\n         if ( !blackList.contains( id ) )\n         {\n@@ -197,45 +203,46 @@ public void blackList( String id )\n             }\n         }\n     }\n-    \n-    public boolean isBlackListed( String id )\n+\n+    public boolean isBlackListed( MavenProject project )\n     {\n-        return blackList.contains( id );\n+        return blackList.contains(\n+            ArtifactUtils.versionlessKey( project.getGroupId(), project.getArtifactId() ) );\n     }\n-    \n+\n     public void registerBuildFailure( MavenProject project, Exception error, String task )\n     {\n         buildFailuresByProject.put( project.getId(), new BuildFailure( error, task ) );\n     }\n-    \n+\n     public boolean hasBuildFailures()\n     {\n         return !buildFailuresByProject.isEmpty();\n     }\n-    \n-    public boolean hasBuildFailure( String id )\n+\n+    public boolean hasBuildFailure( MavenProject project )\n     {\n-        return buildFailuresByProject.containsKey( id );\n+        return buildFailuresByProject.containsKey( project.getId() );\n     }\n-    \n+\n     public boolean hasMultipleProjects()\n     {\n         return projectsByDependency.size() > 1;\n     }\n-    \n+\n     private static class ByProjectFileComparator implements Comparator\n     {\n \n         public int compare( Object first, Object second )\n         {\n             MavenProject p1 = (MavenProject) first;\n             MavenProject p2 = (MavenProject) second;\n-            \n+\n             String p1Path = p1.getFile().getAbsolutePath();\n             String p2Path = p2.getFile().getAbsolutePath();\n-            \n+\n             int comparison = p1Path.length() - p2Path.length();\n-            \n+\n             if ( comparison > 0 )\n             {\n                 return 1;\n@@ -250,23 +257,23 @@ else if ( comparison < 0 )\n             }\n         }\n     }\n-    \n+\n     private static class BuildFailure\n     {\n         private Exception cause;\n         private String task;\n-        \n+\n         BuildFailure( Exception cause, String task )\n         {\n             this.cause = cause;\n             this.task = task;\n         }\n-        \n+\n         String getTask()\n         {\n             return task;\n         }\n-        \n+\n         Exception getCause()\n         {\n             return cause;",
                "deletions": 34
            },
            {
                "sha": "b33637182586bcf18a3114dfbebf84250a428a7f",
                "filename": "maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "blob_url": "https://github.com/apache/maven/blob/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "raw_url": "https://github.com/apache/maven/raw/69c6305347b9680b0aba2c93586d1b3d46e5ba02/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-core/src/main/java/org/apache/maven/lifecycle/DefaultLifecycleExecutor.java?ref=69c6305347b9680b0aba2c93586d1b3d46e5ba02",
                "patch": "@@ -177,7 +177,7 @@ private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSes\n \n             if ( segment.aggregate() )\n             {\n-                if ( !rm.isBlackListed( project.getId() ) )\n+                if ( !rm.isBlackListed( project ) )\n                 {\n                     line();\n \n@@ -246,7 +246,7 @@ private void executeTaskSegments( List taskSegments, ReactorManager rm, MavenSes\n                 {\n                     MavenProject currentProject = (MavenProject) projectIterator.next();\n \n-                    if ( !rm.isBlackListed( currentProject.getId() ) )\n+                    if ( !rm.isBlackListed( currentProject ) )\n                     {\n                         line();\n \n@@ -335,8 +335,9 @@ else if ( ReactorManager.FAIL_AT_END.equals( rm.getFailureBehavior() ) )\n         {\n             rm.registerBuildFailure( project, e, task );\n \n-            rm.blackList( project.getId() );\n+            rm.blackList( project );\n         }\n+        // FIXME: how about the other cases?\n     }\n \n     private List segmentTaskListByAggregationNeeds( List tasks, MavenSession session, MavenProject project )",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "maven",
        "message": "Resolving issue: MNG-467 (patch from Kenney Westerhof applied, with minor formatting modifications)\nResolving issue: MNG-503 (another patch from Kenney Westerhof applied)\n\no Tracked down the potential NPE when using a list of dependencies in the DependencyTask (it needs a Pom in order to create an originating artifact)...creating a dummy Pom instance when the list of dependencies is supplied, since I assume the originatingArtifact is used for tracking/graphing purposes. This new method, called createDummyPom() is in AbstractArtifactTask, so it's available for use in InstallTask and DeployTask if necessary...\n\nThanks, Kenney!\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@191744 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/748de75a58d926146da3cee92276d6085817624c",
        "parent": "https://github.com/apache/maven/commit/fd3e9fe9e29b5a6d361320f8a629a28803c4436b",
        "bug_id": "maven_117",
        "file": [
            {
                "sha": "d8f9d56ac9dfa6acd84eb898030b9a0a67beabe9",
                "filename": "maven-artifact-ant/sample.build.xml",
                "blob_url": "https://github.com/apache/maven/blob/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/sample.build.xml",
                "raw_url": "https://github.com/apache/maven/raw/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/sample.build.xml",
                "status": "modified",
                "changes": 45,
                "additions": 39,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/sample.build.xml?ref=748de75a58d926146da3cee92276d6085817624c",
                "patch": "@@ -1,13 +1,46 @@\n-<project name=\"foo\" xmlns:artifact=\"antlib:org.apache.maven.artifact.ant\" default=\"foo\">\n-  <target name=\"test-pom\">\n+<project name=\"foo\" default=\"foo\" xmlns:artifact=\"urn:maven-artifact-ant\">\n+  <!--\n+    You either need to run the the 'initTaskDefs' task below and\n+    define the artifact namespace like above (choose anything you\n+    like except strings that start with 'antlib:'),\n+    and be sure to supply the path to the maven-artifact-ant jars\n+\n+    OR\n+\n+    just define the artifact namespace as follows:\n+\n+      xmlns:artifact=\"antlib:org.apache.maven.artifact.ant\"\n+\n+    and be sure to add the maven-artifact-ant jars to the ant\n+    classpath (either by setting the CLASSPATH environment variable\n+    before calling ant, or place the jars in the $ANT_HOME/lib directory).\n+\n+  -->\n+\n+  <target name=\"initTaskDefs\">\n+    <!-- don't forget to set the value! -->\n+    <property name=\"maven.artifact-ant.lib.dir\" value=\"${user.home}/work/opensource/m2/maven-artifact-ant/target/\"/>\n+    <path id=\"maven.classpath\">\n+      <pathelement location=\"${maven.artifact-ant.lib.dir}/maven-artifact-ant-2.0-SNAPSHOT-dep.jar\"/>\n+      <pathelement location=\"${maven.artifact-ant.lib.dir}maven-artifact-ant-2.0-SNAPSHOT.jar\"/>\n+    </path>\n+\n+    <typedef resource=\"org/apache/maven/artifact/ant/antlib.xml\"\n+      uri=\"urn:maven-artifact-ant\"\n+    >\n+      <classpath refid=\"maven.classpath\"/>\n+    </typedef>\n+  </target>\n+\n+  <target name=\"test-pom\" depends=\"initTaskDefs\">\n     <artifact:pom file=\"pom.xml\" id=\"my.maven.project\"/>\n \n-    <echo>Artifact ID = ${my.maven.project:artifactId}</echo>\n+    <echo>Artifact ID = ${my.maven.project.artifactId}</echo>\n \n-    <echo>Parent Artifact ID = ${my.maven.project:parent.artifactId}</echo>\n+    <echo>Parent Artifact ID = ${my.maven.project.parent.artifactId}</echo>\n   </target>\n \n-  <target name=\"foo\">\n+  <target name=\"foo\" depends=\"initTaskDefs\">\n     <artifact:localRepository id=\"local.repository\" location=\"${basedir}/target/local-repo\" layout=\"default\"/>\n \n     <artifact:remoteRepository id=\"deploy.repository\" url=\"file://${basedir}/target/deployment-repo\" layout=\"legacy\"/>\n@@ -51,7 +84,7 @@\n     </artifact:deploy>\n   </target>\n \n-  <target name=\"test-scm\">\n+  <target name=\"test-scm\" depends=\"initTaskDefs\">\n     <mkdir dir=\"target\" />\n \n     <pathconvert targetos=\"unix\" property=\"repo.path.unix\">",
                "deletions": 6
            },
            {
                "sha": "ec27252e581eb594f11c129f67cb210c84afa5f0",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "blob_url": "https://github.com/apache/maven/blob/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "raw_url": "https://github.com/apache/maven/raw/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java",
                "status": "modified",
                "changes": 35,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/AbstractArtifactTask.java?ref=748de75a58d926146da3cee92276d6085817624c",
                "patch": "@@ -27,11 +27,16 @@\n import org.apache.maven.settings.Server;\n import org.apache.maven.settings.Settings;\n import org.apache.maven.settings.io.xpp3.SettingsXpp3Reader;\n+import org.apache.maven.model.Model;\n import org.apache.maven.profiles.activation.ProfileActivationUtils;\n+import org.apache.maven.project.MavenProject;\n import org.apache.maven.project.MavenProjectBuilder;\n import org.apache.tools.ant.BuildException;\n import org.apache.tools.ant.Project;\n import org.apache.tools.ant.Task;\n+import org.codehaus.classworlds.ClassRealm;\n+import org.codehaus.classworlds.ClassWorld;\n+import org.codehaus.classworlds.DuplicateRealmException;\n import org.codehaus.plexus.PlexusContainerException;\n import org.codehaus.plexus.component.repository.exception.ComponentLifecycleException;\n import org.codehaus.plexus.component.repository.exception.ComponentLookupException;\n@@ -251,14 +256,24 @@ private synchronized Embedder getEmbedder()\n             if ( embedder == null )\n             {\n                 embedder = new Embedder();\n+\n                 try\n                 {\n-                    embedder.start();\n+                    ClassWorld classWorld = new ClassWorld();\n+                    \n+                    ClassRealm classRealm = classWorld.newRealm( \"plexus.core\", getClass().getClassLoader() );\n+                    \n+                    embedder.start( classWorld );\n                 }\n                 catch ( PlexusContainerException e )\n                 {\n                     throw new BuildException( \"Unable to start embedder\", e );\n                 }\n+                catch ( DuplicateRealmException e )\n+                {\n+                    throw new BuildException( \"Unable to create embedder ClassRealm\", e );\n+                }\n+                \n                 getProject().addReference( Embedder.class.getName(), embedder );\n             }\n         }\n@@ -289,6 +304,24 @@ public Pom buildPom( MavenProjectBuilder projectBuilder, ArtifactRepository loca\n         return pom;\n     }\n \n+    protected Pom createDummyPom()\n+    {\n+        Model mavenModel = new Model();\n+        \n+        mavenModel.setGroupId( \"unspecified\" );\n+        mavenModel.setArtifactId( \"unspecified\" );\n+        mavenModel.setVersion( \"0.0\" );\n+        mavenModel.setPackaging( \"jar\" );\n+        \n+        MavenProject mavenProject = new MavenProject( mavenModel );\n+        \n+        Pom pom = new Pom();\n+        \n+        pom.setMavenProject( mavenProject );\n+        \n+        return pom;\n+    }\n+\n     public void addPom( Pom pom )\n     {\n         this.pom = pom;",
                "deletions": 1
            },
            {
                "sha": "c3194c5f21989142d2adf6013a11bd24861518f8",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "blob_url": "https://github.com/apache/maven/blob/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "raw_url": "https://github.com/apache/maven/raw/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/DependenciesTask.java?ref=748de75a58d926146da3cee92276d6085817624c",
                "patch": "@@ -81,6 +81,12 @@ public void execute()\n                 remoteRepositories.add( createAntRemoteRepository( pomRepository ) );\n             }\n         }\n+        else\n+        {\n+            // we have to have some sort of Pom object in order to satisfy the requirements for building the\n+            // originating Artifact below...\n+            pom = createDummyPom();\n+        }\n \n         Set artifacts = metadataSource.createArtifacts( dependencies, null, null );\n ",
                "deletions": 0
            },
            {
                "sha": "138dbd4129744b2903593b046a280f50126a2204",
                "filename": "maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/Pom.java",
                "blob_url": "https://github.com/apache/maven/blob/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/Pom.java",
                "raw_url": "https://github.com/apache/maven/raw/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/Pom.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/java/org/apache/maven/artifact/ant/Pom.java?ref=748de75a58d926146da3cee92276d6085817624c",
                "patch": "@@ -91,6 +91,11 @@ protected Pom getInstance()\n         }\n         return instance;\n     }\n+    \n+    public void setMavenProject( MavenProject mavenProject )\n+    {\n+        getInstance().mavenProject = mavenProject;\n+    }\n \n     public File getFile()\n     {",
                "deletions": 0
            },
            {
                "sha": "1365b7f53d9e5106e191f115e047a365ae09cb20",
                "filename": "maven-artifact-ant/src/main/resources/META-INF/plexus/components.xml",
                "blob_url": "https://github.com/apache/maven/blob/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/resources/META-INF/plexus/components.xml",
                "raw_url": "https://github.com/apache/maven/raw/748de75a58d926146da3cee92276d6085817624c/maven-artifact-ant/src/main/resources/META-INF/plexus/components.xml",
                "status": "modified",
                "changes": 22,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/maven-artifact-ant/src/main/resources/META-INF/plexus/components.xml?ref=748de75a58d926146da3cee92276d6085817624c",
                "patch": "@@ -229,7 +229,7 @@\n           <role>org.apache.maven.artifact.repository.ArtifactRepositoryFactory</role>\n         </requirement>\n         <requirement>\n-          <role>org.apache.maven.profiless.activation.ProfileActivationCalculator</role>\n+          <role>org.apache.maven.profiles.activation.ProfileActivationCalculator</role>\n         </requirement>\n       </requirements>\n     </component>\n@@ -239,48 +239,48 @@\n      |\n      -->\n     <component>\n-      <role>org.apache.maven.profiless.activation.ProfileActivationCalculator</role>\n-      <implementation>org.apache.maven.profiless.activation.ProfileActivationCalculator</implementation>\n+      <role>org.apache.maven.profiles.activation.ProfileActivationCalculator</role>\n+      <implementation>org.apache.maven.profiles.activation.ProfileActivationCalculator</implementation>\n     </component>\n     <!--\n      |\n      |\n      |\n      -->\n     <component>\n-      <role>org.apache.maven.profiless.activation.ProfileActivator</role>\n+      <role>org.apache.maven.profiles.activation.ProfileActivator</role>\n       <role-hint>always-on</role-hint>\n-      <implementation>org.apache.maven.profiless.activation.AlwaysOnProfileActivator</implementation>\n+      <implementation>org.apache.maven.profiles.activation.AlwaysOnProfileActivator</implementation>\n     </component>\n     <!--\n      |\n      |\n      |\n      -->\n     <component>\n-      <role>org.apache.maven.profiless.activation.ProfileActivator</role>\n+      <role>org.apache.maven.profiles.activation.ProfileActivator</role>\n       <role-hint>jdk-prefix</role-hint>\n-      <implementation>org.apache.maven.profiless.activation.JdkPrefixProfileActivator</implementation>\n+      <implementation>org.apache.maven.profiles.activation.JdkPrefixProfileActivator</implementation>\n     </component>\n     <!--\n      |\n      |\n      |\n      -->\n     <component>\n-      <role>org.apache.maven.profiless.activation.ProfileActivator</role>\n+      <role>org.apache.maven.profiles.activation.ProfileActivator</role>\n       <role-hint>system-property</role-hint>\n-      <implementation>org.apache.maven.profiless.activation.SystemPropertyProfileActivator</implementation>\n+      <implementation>org.apache.maven.profiles.activation.SystemPropertyProfileActivator</implementation>\n     </component>\n     <!--\n      |\n      |\n      |\n      -->\n     <component>\n-      <role>org.apache.maven.profiless.activation.ProfileActivator</role>\n+      <role>org.apache.maven.profiles.activation.ProfileActivator</role>\n       <role-hint>explicit-listing</role-hint>\n-      <implementation>org.apache.maven.profiless.activation.ExplicitListingProfileActivator</implementation>\n+      <implementation>org.apache.maven.profiles.activation.ExplicitListingProfileActivator</implementation>\n     </component>\n     <!--\n      |",
                "deletions": 11
            }
        ]
    },
    {
        "repo": "maven",
        "message": "o Fixed NPE in LegacyArtifactDiscoverer when the resulting Artifact from the buildArtifact() method is null (was an errant debug statement)\no Removed requirement and attempt at copying wagon-http-lightweight when ./install.sh runs.\no Cleaned up the output from ./repoclean.sh to remove a couple debug lines\no Fixed components.xml to comply with the new component refactorings (simplified RepositoryCleaner using two new processing phases: DiscoveryPhase and RewritePhase, with NO common interface)\n\nWe should be ready to process mixed bags of m1 and m2 poms in the same source repo now!\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/components/trunk@169330 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/maven/commit/17c195e01d7d3e543024f98619edcda45605cf7f",
        "parent": "https://github.com/apache/maven/commit/637c0f815bcb9ba7c5232a517415c8f3e2e5ef04",
        "bug_id": "maven_118",
        "file": [
            {
                "sha": "9c19232c64537991a991168520f8a390e1126c74",
                "filename": "sandbox/repoclean/install.sh",
                "blob_url": "https://github.com/apache/maven/blob/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/install.sh",
                "raw_url": "https://github.com/apache/maven/raw/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/install.sh",
                "status": "modified",
                "changes": 2,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/sandbox/repoclean/install.sh?ref=17c195e01d7d3e543024f98619edcda45605cf7f",
                "patch": "@@ -65,8 +65,6 @@ ret=$?; if [ $ret != 0 ]; then exit $ret; fi\n \n     cp -f $2/org/apache/maven/wagon/wagon-file/1.0-alpha-2/wagon-file-1.0-alpha-2.jar $1/lib\n \n-    cp -f $2/org/apache/maven/wagon/wagon-http-lightweight/1.0-alpha-2/wagon-http-lightweight-1.0-alpha-2.jar $1/lib\n-\n     echo \"Copying startup script, and changing its permissions to '+x'...\"\n     echo \"\"\n     ",
                "deletions": 2
            },
            {
                "sha": "a004aefb0e72399adf07242cdffdb1a0884d1bcd",
                "filename": "sandbox/repoclean/src/main/bash/repoclean.sh",
                "blob_url": "https://github.com/apache/maven/blob/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/bash/repoclean.sh",
                "raw_url": "https://github.com/apache/maven/raw/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/bash/repoclean.sh",
                "status": "modified",
                "changes": 7,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/sandbox/repoclean/src/main/bash/repoclean.sh?ref=17c195e01d7d3e543024f98619edcda45605cf7f",
                "patch": "@@ -2,19 +2,14 @@\n \n mypath=`which $0`\n \n-echo \"mypath: $mypath\"\n-\n mydir=`pwd`\n \n if [ \"\" != \"$mypath\" ]; then\n \n-  echo \"Setting mydir based on mypath...\"\n   mydir=`dirname $mypath`\n \n fi\n \n-echo \"mydir: $mydir\"\n-\n CP=$mydir/lib/repoclean-1.0-SNAPSHOT.jar\n \n for lib in `ls -1 $mydir/lib | grep -v 'repoclean'`\n@@ -46,4 +41,4 @@ if [ -z \"$JAVA_HOME\" ]; then\n   JAVA_HOME=/usr/local/java\n fi\n \n-nice -n 19 $JAVA_HOME/bin/java -Xmx128M -Xms64M -Xincgc $JAVA_OPTS -classpath ${CP} org.apache.maven.tools.repoclean.Main $* | tee repoclean-log.txt\n+nice -n 19 $JAVA_HOME/bin/java -Xmx128M -Xms64M -Xincgc $JAVA_OPTS -classpath ${CP} org.apache.maven.tools.repoclean.Main $*",
                "deletions": 6
            },
            {
                "sha": "cd0eb83f82e0f4687f288311eb6d30d33660ea56",
                "filename": "sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java",
                "blob_url": "https://github.com/apache/maven/blob/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java",
                "raw_url": "https://github.com/apache/maven/raw/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/sandbox/repoclean/src/main/java/org/apache/maven/tools/repoclean/discover/LegacyArtifactDiscoverer.java?ref=17c195e01d7d3e543024f98619edcda45605cf7f",
                "patch": "@@ -18,6 +18,7 @@\n import org.apache.maven.artifact.factory.ArtifactFactory;\n import org.apache.maven.tools.repoclean.report.PathLister;\n import org.apache.maven.tools.repoclean.report.Reporter;\n+import org.codehaus.plexus.util.StringUtils;\n \n import java.io.File;\n import java.util.ArrayList;\n@@ -293,18 +294,23 @@ else if ( lastAvceToken.endsWith( \".zip\" ) )\n             }\n             else\n             {\n-                result = artifactFactory.createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME, type );\n+                if ( StringUtils.isNotEmpty( groupId ) && StringUtils.isNotEmpty( artifactId )\n+                    && StringUtils.isNotEmpty( version ) && StringUtils.isNotEmpty( type ) )\n+                {\n+                    result = artifactFactory\n+                        .createArtifact( groupId, artifactId, version, Artifact.SCOPE_RUNTIME, type );\n+                }\n             }\n \n-            getLogger().debug(\n-                               \"Resulting artifact is: \" + result.getId() + \" and has classifier of: \"\n-                                   + result.getClassifier() + \"\\n\\n\" );\n+//            getLogger().debug(\n+//                               \"Resulting artifact is: \" + result + \" and has classifier of: \"\n+//                                   + result.getClassifier() + \"\\n\\n\" );\n \n             return result;\n         }\n         catch ( RuntimeException e )\n         {\n-            getLogger().error( \"While parsing artifact path: \\'\" + path + \"\\'...\\n\\n\", e );\n+            getLogger().error( \"While parsing artifact path: \\'\" + path + \"\\'...\", e );\n \n             throw e;\n         }",
                "deletions": 5
            },
            {
                "sha": "027592348c624d36f567589c1775100849156123",
                "filename": "sandbox/repoclean/src/main/resources/META-INF/plexus/components.xml",
                "blob_url": "https://github.com/apache/maven/blob/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/resources/META-INF/plexus/components.xml",
                "raw_url": "https://github.com/apache/maven/raw/17c195e01d7d3e543024f98619edcda45605cf7f/sandbox/repoclean/src/main/resources/META-INF/plexus/components.xml",
                "status": "modified",
                "changes": 38,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/maven/contents/sandbox/repoclean/src/main/resources/META-INF/plexus/components.xml?ref=17c195e01d7d3e543024f98619edcda45605cf7f",
                "patch": "@@ -5,18 +5,44 @@\n       <implementation>org.apache.maven.tools.repoclean.RepositoryCleaner</implementation>\n       <requirements>\n         <requirement>\n-          <role>org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout</role>\n-          <role-hint>alpha-bridging</role-hint>\n-          <field-name>bridgingLayout</field-name>\n+          <role>org.apache.maven.tools.repoclean.index.ArtifactIndexer</role>\n         </requirement>\n         <requirement>\n-          <role>org.apache.maven.tools.repoclean.digest.DigestVerifier</role>\n+          <role>org.codehaus.plexus.mailsender.MailSender</role>\n         </requirement>\n         <requirement>\n-          <role>org.apache.maven.tools.repoclean.index.ArtifactIndexer</role>\n+          <role>org.apache.maven.tools.repoclean.phase.DiscoveryPhase</role>\n         </requirement>\n         <requirement>\n-          <role>org.codehaus.plexus.mailsender.MailSender</role>\n+          <role>org.apache.maven.tools.repoclean.phase.RewritePhase</role>\n+        </requirement>\n+      </requirements>\n+    </component>\n+    <!--\n+     |\n+     |\n+     |\n+     -->\n+    <component>\n+      <role>org.apache.maven.tools.repoclean.phase.DiscoveryPhase</role>\n+      <implementation>org.apache.maven.tools.repoclean.phase.DiscoveryPhase</implementation>\n+    </component>\n+    <!--\n+     |\n+     |\n+     |\n+     -->\n+    <component>\n+      <role>org.apache.maven.tools.repoclean.phase.RewritePhase</role>\n+      <implementation>org.apache.maven.tools.repoclean.phase.RewritePhase</implementation>\n+      <requirements>\n+        <requirement>\n+          <role>org.apache.maven.artifact.repository.layout.ArtifactRepositoryLayout</role>\n+          <role-hint>alpha-bridging</role-hint>\n+          <field-name>bridgingLayout</field-name>\n+        </requirement>\n+        <requirement>\n+          <role>org.apache.maven.tools.repoclean.digest.DigestVerifier</role>\n         </requirement>\n       </requirements>\n     </component>",
                "deletions": 6
            }
        ]
    }
]