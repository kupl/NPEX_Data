{
    "netbeans_0bcf9fe": {
        "bug_id": "netbeans_0bcf9fe",
        "commit": "https://github.com/apache/netbeans/commit/0bcf9fefe1012f1456446038f1645b3610e66b36",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/netbeans/blob/0bcf9fefe1012f1456446038f1645b3610e66b36/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java?ref=0bcf9fefe1012f1456446038f1645b3610e66b36",
                "deletions": 0,
                "filename": "platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "patch": "@@ -138,6 +138,9 @@ public void run() {\n                 }\n             }\n         }\n+        if (evaluator == null) {\n+            return Collections.singletonList(Proxy.NO_PROXY);\n+        }\n         try {\n             return evaluator.findProxyForURL(u);\n         } catch (PacValidationException ex) {",
                "raw_url": "https://github.com/apache/netbeans/raw/0bcf9fefe1012f1456446038f1645b3610e66b36/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "sha": "992e9c1ab4911c94f894b78bf2669812ce1e8d4a",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if PAC cannot be resolved, e.g. UnknownHostException if the proxy url is configured but not reachable.",
        "parent": "https://github.com/apache/netbeans/commit/ab4e095492d8837c0237e77790f90fcefed9e954",
        "repo": "netbeans",
        "unit_tests": [
            "ProxyAutoConfigTest.java"
        ]
    },
    "netbeans_29109ed": {
        "bug_id": "netbeans_29109ed",
        "commit": "https://github.com/apache/netbeans/commit/29109edc539886c294c2f91edf1a145687e9d45c",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/nbproject/project.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/nbproject/project.xml?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 0,
                "filename": "groovy/gradle.java/nbproject/project.xml",
                "patch": "@@ -305,6 +305,25 @@\n                     </run-dependency>\n                 </dependency>\n             </module-dependencies>\n+            <test-dependencies>\n+                <test-type>\n+                    <name>unit</name>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.libs.junit4</code-name-base>\n+                        <compile-dependency/>\n+                    </test-dependency>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.modules.nbjunit</code-name-base>\n+                        <recursive/>\n+                        <compile-dependency/>\n+                    </test-dependency>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.modules.gradle</code-name-base>\n+                        <compile-dependency/>\n+                        <test/>\n+                    </test-dependency>\n+                </test-type>\n+            </test-dependencies>\n             <public-packages>\n                 <package>org.netbeans.modules.gradle.java.api</package>\n                 <package>org.netbeans.modules.gradle.java.api.output</package>",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/nbproject/project.xml",
                "sha": "b2c293fb04873e1f12f6f798723c10222624920e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 4,
                "filename": "groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "patch": "@@ -48,20 +48,26 @@\n  * @author Laszlo Kishalmi\n  */\n @ProjectServiceProvider(service = OutputProcessorFactory.class, projectType = NbGradleProject.GRADLE_PLUGIN_TYPE + \"/java-base\")\n-public class JavaCompilerProcessorFactory implements OutputProcessorFactory {\n+public final class JavaCompilerProcessorFactory implements OutputProcessorFactory {\n \n     @Override\n     public Set<? extends OutputProcessor> createOutputProcessors(RunConfig cfg) {\n         return new HashSet<>(Arrays.asList(new StackTraceProcessor(cfg)));\n     }\n \n-    private static class StackTraceProcessor implements OutputProcessor {\n+    static class StackTraceProcessor implements OutputProcessor {\n \n         private static final Pattern STACKTRACE_PATTERN = Pattern.compile(\"(.*)at ((\\\\w[\\\\w\\\\.]*)/)?(\\\\w[\\\\w\\\\.\\\\$<>]*)\\\\((\\\\w+)\\\\.java\\\\:([0-9]+)\\\\)(.*)\");\n         private static final IOColors.OutputType OUT_TYPE = IOColors.OutputType.ERROR;\n         private final Project project;\n         private final ClassPath classPath;\n \n+        // Used in unittest only\n+        StackTraceProcessor() {\n+            project = null;\n+            classPath = null;\n+        }\n+\n         private StackTraceProcessor(RunConfig cfg) {\n             project = cfg.getProject();\n             ProjectSourcesClassPathProvider cpProvider = project.getLookup().lookup(ProjectSourcesClassPathProvider.class);\n@@ -78,15 +84,15 @@ public boolean processLine(OutputDisplayer out, String line) {\n             Matcher m = STACKTRACE_PATTERN.matcher(line);\n             if (m.matches()) {\n                 String prefix = m.group(1);\n-                String modulePrefix = m.group(2);\n+                String modulePrefix = m.group(2) != null ? m.group(2) : \"\"; //NOI18N\n                 //String module = m.group(3);\n                 String method = m.group(4);\n                 String fileName = m.group(5);\n                 String lineNum = m.group(6);\n                 String postfix = m.group(7);\n \n                 int ppos = method.indexOf(fileName);\n-                if ((ppos >= 0) && (project != null)) {\n+                if (ppos >= 0) {\n                     String pack = method.substring(0, ppos).replace('.', '/');\n                     String javaName = pack + fileName + \".java\"; //NOI18N\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "sha": "0b9d64792dcc815bf87548e023a4a30cd06939e5",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 0,
                "filename": "groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.java.output;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.netbeans.modules.gradle.api.output.OutputDisplayerMock;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class JavaCompilerProcessorFactoryTest {\n+\n+    private final String JAVA_8_STACKTRACE_1  = \"        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\";\n+    private final String JAVA_9_STACKTRACE_1  = \"        at jdk.zipfs/jdk.nio.zipfs.JarFileSystem.getVersionMap(JarFileSystem.java:137)\";\n+    private final String JAVA_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1: error: class, interface, or enum expected\";\n+\n+    @Test\n+    public void testStackTraceProcessor1() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(stp.processLine(od, JAVA_8_STACKTRACE_1));\n+        assertEquals(JAVA_8_STACKTRACE_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(outputs[2].text, \"\");\n+        assertEquals(outputs[3].text, \"org.junit.jupiter.api.AssertionUtils.fail\");\n+        assertEquals(outputs[5].text, \"AssertionUtils.java:55\");\n+        assertNotNull(outputs[5].action);\n+    }\n+\n+    @Test\n+    public void testStackTraceProcessor2() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(stp.processLine(od, JAVA_9_STACKTRACE_1));\n+        assertEquals(JAVA_9_STACKTRACE_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(outputs[2].text, \"jdk.zipfs/\");\n+        assertEquals(outputs[3].text, \"jdk.nio.zipfs.JarFileSystem.getVersionMap\");\n+        assertEquals(outputs[5].text, \"JarFileSystem.java:137\");\n+        assertNotNull(outputs[5].action);\n+    }\n+\n+    @Test\n+    public void testStackTraceProcessor3() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(stp.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "sha": "df2e3ce7229e9f68f522522197f50445d2038759",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 12,
                "filename": "groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "patch": "@@ -42,21 +42,23 @@ public static Runnable openFileAt(final FileObject file, final int line, final i\n \n             @Override\n             public void run() {\n-                try {\n-                    DataObject data = DataObject.find(file);\n-                    if (data != null) {\n-                        EditorCookie cookie = data.getLookup().lookup(EditorCookie.class);\n-                        if (cookie != null) {\n-                            try {\n-                                cookie.getLineSet().getOriginal(line - 1).show(Line.ShowOpenType.REUSE, Line.ShowVisibilityType.FOCUS, col - 1);\n-                            } catch (IndexOutOfBoundsException ex) {\n-                                cookie.open();\n+                if (file != null) {\n+                    try {\n+                        DataObject data = DataObject.find(file);\n+                        if (data != null) {\n+                            EditorCookie cookie = data.getLookup().lookup(EditorCookie.class);\n+                            if (cookie != null) {\n+                                try {\n+                                    cookie.getLineSet().getOriginal(line - 1).show(Line.ShowOpenType.REUSE, Line.ShowVisibilityType.FOCUS, col - 1);\n+                                } catch (IndexOutOfBoundsException ex) {\n+                                    cookie.open();\n+                                }\n+\n                             }\n \n                         }\n-\n+                    } catch (DataObjectNotFoundException ex) {\n                     }\n-                } catch (DataObjectNotFoundException ex) {\n                 }\n             }\n \n@@ -73,7 +75,7 @@ public void run() {\n \n         };\n     }\n-    \n+\n     public static Runnable displayStatusText(final String text) {\n         return new Runnable() {\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "sha": "44518f20bec214f1ebc080d8a98c4412707365a2",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 44,
                "filename": "groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "patch": "@@ -54,16 +54,16 @@\n     private static final OutputProcessor JAVAC_PROCESSOR = new JavaCompilerProcessor();\n     private static final OutputProcessor GROOVYC_PROCESSOR = new GroovyCompilerProcessor();\n \n-    \n+\n     @Override\n     public Set<? extends OutputProcessor> createOutputProcessors(RunConfig cfg) {\n         return new HashSet<>(Arrays.asList(URL_PROCESSOR, GRADLE_PROCESSOR, JAVAC_PROCESSOR, GROOVYC_PROCESSOR));\n     }\n \n-    private static final class URLOutputProcessor implements OutputProcessor {\n+    static final class URLOutputProcessor implements OutputProcessor {\n+\n+        private static final Pattern URL_PATTERN = Pattern.compile(\"(((https?|ftp|file)://|file:/)[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\");\n \n-        private static final Pattern URL_PATTERN = Pattern.compile(\"((https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\");\n-        \n         @Override\n         public boolean processLine(OutputDisplayer out, String line) {\n             Matcher m = URL_PATTERN.matcher(line);\n@@ -84,10 +84,10 @@ public boolean processLine(OutputDisplayer out, String line) {\n             }\n             return last > 0;\n         }\n-        \n+\n     }\n \n-    private static class GradleOutputProcessor implements OutputProcessor {\n+    static class GradleOutputProcessor implements OutputProcessor {\n \n         private static final Pattern GRADLE_ERROR = Pattern.compile(\"(Build file|Script) '(.*)\\\\.gradle' line: ([0-9]+)\");\n \n@@ -100,21 +100,19 @@ public boolean processLine(OutputDisplayer out, String line) {\n \n                 File gradleFile = FileUtil.normalizeFile(new File( buildFile + \".gradle\"));\n                 FileObject file = FileUtil.toFileObject(gradleFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(\"Script '\" + buildFile + \".gradle' line: \" + lineNum, OutputListeners.openFileAt(file, l, 1));\n-                    return true;\n+                int l = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(\"Script '\" + buildFile + \".gradle' line: \" + lineNum, OutputListeners.openFileAt(file, l, 1));\n+                return true;\n             }\n             return false;\n-        }    \n+        }\n     }\n \n-    private static class JavaCompilerProcessor implements OutputProcessor {\n+    static class JavaCompilerProcessor implements OutputProcessor {\n \n         private static final Pattern JAVA_ERROR = Pattern.compile(\"(.*)\\\\.java\\\\:([0-9]+)\\\\: (error|warning)\\\\:(.*)\");\n \n@@ -129,25 +127,24 @@ public boolean processLine(OutputDisplayer out, String line) {\n \n                 File javaFile = FileUtil.normalizeFile(new File(classBase + \".java\"));\n                 FileObject file = FileUtil.toFileObject(javaFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(classBase + \".java:\" + lineNum, OutputListeners.openFileAt(file, l, 1));\n-                    out.print(\": \" + type + \":\" + text);\n-                    return true;\n+                int l = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(classBase + \".java:\" + lineNum, OutputListeners.openFileAt(file, l, 1));\n+                out.print(\": \" + type + \":\" + text);\n+                return true;\n             }\n             return false;\n         }\n \n     }\n \n-    private static class GroovyCompilerProcessor implements OutputProcessor {\n+    static class GroovyCompilerProcessor implements OutputProcessor {\n \n-        private static final Pattern GROOVY_ERROR = Pattern.compile(\"(.*)\\\\.groovy\\\\: ([0-9]+)\\\\: (.*)( at line: ([0-9]+) column: ([0-9]+). File: (.*) @ (.*))?\");\n+        private static final Pattern GROOVY_ERROR = Pattern.compile(\"(.*)\\\\.groovy\\\\: ([0-9]+)\\\\: (.+)\");\n+        private static final Pattern COLUMN_INFO = Pattern.compile(\" @ line ([0-9]+), column ([0-9]+)\\\\.$\");\n \n         @Override\n         public boolean processLine(OutputDisplayer out, String line) {\n@@ -157,29 +154,29 @@ public boolean processLine(OutputDisplayer out, String line) {\n                 String text = m.group(3);\n                 String lineNum = m.group(2);\n                 String colNum = \"1\";\n-                if (m.group(4) != null) {\n-                    lineNum = m.group(5);\n-                    colNum = m.group(6);\n+\n+                Matcher colm = COLUMN_INFO.matcher(text);\n+                if (colm.find()) {\n+                    lineNum = colm.group(1);\n+                    colNum = colm.group(2);\n                 }\n \n-                File javaFile = FileUtil.normalizeFile(new File(classBase + \".groovy\"));\n-                FileObject file = FileUtil.toFileObject(javaFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    int c = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                        c = Integer.parseInt(colNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(classBase + \".groovy:\" + lineNum + ':' + colNum, OutputListeners.openFileAt(file, l, c));\n-                    out.print(\": \" + text);\n-                    return true;\n+                File groovyFile = FileUtil.normalizeFile(new File(classBase + \".groovy\"));\n+                FileObject file = FileUtil.toFileObject(groovyFile);\n+                int l = 1;\n+                int c = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                    c = Integer.parseInt(colNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(classBase + \".groovy: \" + lineNum, OutputListeners.openFileAt(file, l, c));\n+                out.print(\": \" + text);\n+                return true;\n             }\n             return false;\n         }\n \n     }\n-    \n+\n }",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "sha": "d7c9dbb27f8d0da33fa5382c2ac7d4315ec006fa",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 0,
                "filename": "groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.api.output;\n+\n+import java.util.ArrayList;\n+import org.openide.windows.IOColors;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class OutputDisplayerMock extends OutputDisplayer {\n+\n+    private final ArrayList<OutputItem> items = new ArrayList<>();\n+\n+    @Override\n+    protected void doPrint(CharSequence text, Runnable action, IOColors.OutputType type) {\n+        items.add(new OutputItem(text.toString(), action, type));\n+    }\n+\n+    public OutputItem[] getOutputs() {\n+        return items.toArray(new OutputItem[items.size()]);\n+    }\n+\n+    public String getOutput() {\n+        StringBuilder sb = new StringBuilder();\n+        for (OutputItem item : items) {\n+            sb.append(item);\n+        }\n+        return sb.toString();\n+    }\n+\n+    public class OutputItem {\n+        public final String text;\n+        public final Runnable action;\n+        public final IOColors.OutputType type;\n+\n+        public OutputItem(String text, Runnable action, IOColors.OutputType type) {\n+            this.text = text;\n+            this.action = action;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return text;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "sha": "9515ce527e87f1b77e590b33f12a76382d7e3c66",
                "status": "added"
            },
            {
                "additions": 215,
                "blob_url": "https://github.com/apache/netbeans/blob/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "changes": 215,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java?ref=29109edc539886c294c2f91edf1a145687e9d45c",
                "deletions": 0,
                "filename": "groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "patch": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.output;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.netbeans.modules.gradle.api.output.OutputDisplayerMock;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class GradleProcessorFactoryTest {\n+\n+    private static final String JAVA_8_STACKTRACE_1  = \"        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\";\n+\n+    private static final String JAVA_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1: error: class, interface, or enum expected\";\n+    private static final String JAVA_COMPILE_ERROR_2 = \"D:\\\\Users\\\\netbeans\\\\NetBeansProjects\\\\gradleproject3\\\\common\\\\src\\\\main\\\\java\\\\gradleproject3\\\\common\\\\NewClass1.java:1: error: class, interface, or enum expected\";\n+\n+    private static final String GRADLE_SCRIPT_ERROR_1= \"Script '/home/netbeans/NetBeansProjects/gradleproject6/build.gradle' line: 6\";\n+\n+    private static final String GROOVY_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 33: unable to resolve class Prject\";\n+    private static final String GROOVY_COMPILE_ERROR_2 = \"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 43: expecting anything but ''\\\\n''; got it anyway @ line 43, column 28.\";\n+\n+    private static final String URL_PATTERN_1 = \"https://netbeans.apache.org/\";\n+    private static final String URL_PATTERN_2 = \"Hello https://netbeans.apache.org\";\n+    private static final String URL_PATTERN_3 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/\";\n+    private static final String URL_PATTERN_4 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/ and file:/home/netbeans \";\n+    private static final String URL_PATTERN_5 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/ and file:///home/netbeans \";\n+\n+    @Test\n+    public void testJavaCompilerProcessor1() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(jcp.processLine(od, JAVA_COMPILE_ERROR_1));\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1\", outputs[0].text);\n+        assertEquals(\": error: class, interface, or enum expected\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor2() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(jcp.processLine(od, JAVA_COMPILE_ERROR_2));\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"D:\\\\Users\\\\netbeans\\\\NetBeansProjects\\\\gradleproject3\\\\common\\\\src\\\\main\\\\java\\\\gradleproject3\\\\common\\\\NewClass1.java:1\", outputs[0].text);\n+        assertEquals(\": error: class, interface, or enum expected\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor3() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(jcp.processLine(od, GROOVY_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor4() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(jcp.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor1() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(gcp.processLine(od, GROOVY_COMPILE_ERROR_1));\n+        assertEquals(GROOVY_COMPILE_ERROR_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 33\", outputs[0].text);\n+        assertNotNull(outputs[0].action);\n+        assertEquals(\": unable to resolve class Prject\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor2() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(gcp.processLine(od, GROOVY_COMPILE_ERROR_2));\n+        assertEquals(GROOVY_COMPILE_ERROR_2, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 43\", outputs[0].text);\n+        assertNotNull(outputs[0].action);\n+        assertEquals(\": expecting anything but ''\\\\n''; got it anyway @ line 43, column 28.\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor3() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(gcp.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor1() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor2() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor3() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_1));\n+        assertEquals(URL_PATTERN_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(3, outputs.length);\n+        assertNotNull(outputs[1].action);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor4() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_2));\n+        assertEquals(URL_PATTERN_2, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertNotNull(outputs[1].action);\n+        assertEquals(3, outputs.length);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor5() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_3));\n+        assertEquals(URL_PATTERN_3, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(5, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor6() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_4));\n+        assertEquals(URL_PATTERN_4, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(7, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+        assertNotNull(outputs[5].action);\n+        assertEquals(\"file:/home/netbeans\", outputs[5].text);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor7() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_5));\n+        assertEquals(URL_PATTERN_5, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(7, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+        assertNotNull(outputs[5].action);\n+        assertEquals(\"file:///home/netbeans\", outputs[5].text);\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor1() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, GRADLE_SCRIPT_ERROR_1));\n+        assertEquals(GRADLE_SCRIPT_ERROR_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(1, outputs.length);\n+        assertEquals(GRADLE_SCRIPT_ERROR_1, outputs[0].text);\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor2() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor3() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/29109edc539886c294c2f91edf1a145687e9d45c/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "sha": "50f36515df351b86e0841ed27ec617d06f534d1d",
                "status": "added"
            }
        ],
        "message": "[NETBEANS-2753] Fixed NPE on Java Stacktrace processing. Added some unit tests for Gradle Output processors.",
        "parent": "https://github.com/apache/netbeans/commit/91c93f4b54f154a04fee5061042d37f37820f8f8",
        "repo": "netbeans",
        "unit_tests": [
            "JavaCompilerProcessorFactoryTest.java",
            "GradleProcessorFactoryTest.java"
        ]
    },
    "netbeans_40b6820": {
        "bug_id": "netbeans_40b6820",
        "commit": "https://github.com/apache/netbeans/commit/40b6820b7ac67ccd40e6a2836608e4be047ae388",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/build.xml",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/build.xml?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/build.xml",
                "patch": "@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+\n+<project basedir=\".\" default=\"build\" name=\"java/ant.hints\">\n+    <description>Builds, tests, and runs the project org.netbeans.modules.ant.hints</description>\n+    <import file=\"../../nbbuild/templates/projectized.xml\"/>\n+</project>",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/build.xml",
                "sha": "cea076486d61235bb72f27f91e495c620285b409",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/manifest.mf",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/manifest.mf?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/manifest.mf",
                "patch": "@@ -0,0 +1,6 @@\n+Manifest-Version: 1.0\n+OpenIDE-Module: org.netbeans.modules.ant.hints/1\n+OpenIDE-Module-Specification-Version: 1.0\n+OpenIDE-Module-Localizing-Bundle: org/netbeans/modules/ant/hints/Bundle.properties\n+OpenIDE-Module-Layer: org/netbeans/modules/ant/hints/layer.xml\n+AutoUpdate-Show-In-Client: false",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/manifest.mf",
                "sha": "09e0a7e8bade4b4b83a24b73d627c5fd9fe9be0a",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/nbproject/project.properties",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/nbproject/project.properties?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/nbproject/project.properties",
                "patch": "@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+is.eager=true\n+javac.source=1.8",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/nbproject/project.properties",
                "sha": "2fe9adf290437cbded30a54f7ee4f30edc36cf09",
                "status": "added"
            },
            {
                "additions": 143,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/nbproject/project.xml",
                "changes": 143,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/nbproject/project.xml?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/nbproject/project.xml",
                "patch": "@@ -0,0 +1,143 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<project xmlns=\"http://www.netbeans.org/ns/project/1\">\n+    <type>org.netbeans.modules.apisupport.project</type>\n+    <configuration>\n+        <data xmlns=\"http://www.netbeans.org/ns/nb-module-project/3\">\n+            <code-name-base>org.netbeans.modules.ant.hints</code-name-base>\n+            <module-dependencies>\n+                <dependency>\n+                    <code-name-base>org.netbeans.api.annotations.common</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.33</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.libs.javacapi</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>8.27</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.modules.editor.mimelookup</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.20</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.modules.java.hints.legacy.spi</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.0</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.modules.java.source.base</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>1.0</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.modules.project.ant</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.73</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.modules.projectapi</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>1</release-version>\n+                        <specification-version>1.73</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.netbeans.spi.editor.hints</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <release-version>0</release-version>\n+                        <specification-version>1.48</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.openide.filesystems</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>9.0</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.openide.modules</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>7.7</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.openide.util</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>9.13</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.openide.util.lookup</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>8.0</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+                <dependency>\n+                    <code-name-base>org.openide.util.ui</code-name-base>\n+                    <build-prerequisite/>\n+                    <compile-dependency/>\n+                    <run-dependency>\n+                        <specification-version>9.3</specification-version>\n+                    </run-dependency>\n+                </dependency>\n+            </module-dependencies>\n+            <test-dependencies/>\n+            <public-packages/>\n+        </data>\n+    </configuration>\n+</project>",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/nbproject/project.xml",
                "sha": "7da0176faf0a03c84880c224d961036c45a9094c",
                "status": "added"
            },
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/Bundle.properties",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/src/org/netbeans/modules/ant/hints/Bundle.properties?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/src/org/netbeans/modules/ant/hints/Bundle.properties",
                "patch": "@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+OpenIDE-Module-Display-Category=Ant\n+OpenIDE-Module-Name=Ant Hints\n+OpenIDE-Module-Long-Description=Providing Ant Hints set for common mistakes and best practices\n+org-netbeans-modules-java-hints/rules/hints/ant=Ant",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/Bundle.properties",
                "sha": "26cf804fbbaed6384f1f0a209adce0a7e6c26673",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/Bundle.properties",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/Bundle.properties?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/src/org/netbeans/modules/ant/hints/errors/Bundle.properties",
                "patch": "@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+\n+FIX_EnablePreviewFeature=Enable Preview Feature",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/Bundle.properties",
                "sha": "c30ea1d755ea45b9b84cc4ee168fbc55c332e3cb",
                "status": "added"
            },
            {
                "additions": 219,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/EnablePreviewAntProj.java",
                "changes": 219,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/EnablePreviewAntProj.java?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/src/org/netbeans/modules/ant/hints/errors/EnablePreviewAntProj.java",
                "patch": "@@ -0,0 +1,219 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.ant.hints.errors;\n+\n+import com.sun.source.util.TreePath;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.lang.model.SourceVersion;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.java.source.CompilationInfo;\n+import org.netbeans.api.project.FileOwnerQuery;\n+import org.netbeans.modules.java.hints.spi.ErrorRule;\n+import org.netbeans.spi.editor.hints.ChangeInfo;\n+import org.netbeans.spi.editor.hints.Fix;\n+import org.openide.filesystems.FileObject;\n+import org.openide.util.NbBundle;\n+import org.openide.util.Parameters;\n+import org.netbeans.api.project.Project;\n+import org.netbeans.api.project.ProjectManager;\n+import org.netbeans.spi.project.support.ant.AntProjectHelper;\n+import org.openide.util.EditableProperties;\n+import org.openide.util.Mutex;\n+import org.openide.util.MutexException;\n+\n+/**\n+ * Handle error rule \"compiler.err.preview.feature.disabled.plural\" and provide\n+ * the fix for Ant type project.\n+ *\n+ * @author arusinha\n+ */\n+public class EnablePreviewAntProj implements ErrorRule<Void> {\n+\n+    private static final Set<String> ERROR_CODES = new HashSet<String>(Arrays.asList(\n+            \"compiler.err.preview.feature.disabled.plural\")); // NOI18N\n+    private static final String ENABLE_PREVIEW_FLAG = \"--enable-preview\";   // NOI18N\n+    private static final String JAVAC_COMPILER_ARGS = \"javac.compilerargs\"; // NOI18N\n+    private static final String RUN_JVMARGS = \"run.jvmargs\"; // NOI18N\n+\n+    @Override\n+    public Set<String> getCodes() {\n+        return Collections.unmodifiableSet(ERROR_CODES);\n+    }\n+\n+    @Override\n+    @NonNull\n+    public List<Fix> run(CompilationInfo compilationInfo, String diagnosticKey, int offset, TreePath treePath, Data<Void> data) {\n+\n+        if (SourceVersion.latest() != compilationInfo.getSourceVersion()) {\n+            return Collections.<Fix>emptyList();\n+        }\n+\n+        final FileObject file = compilationInfo.getFileObject();\n+        Fix fix = null;\n+        if (file != null) {\n+            final Project prj = FileOwnerQuery.getOwner(file);\n+\n+            if (isAntProject(prj)) {\n+                fix = new EnablePreviewAntProj.ResolveAntFix(prj);\n+            } else {\n+                fix = null;\n+            }\n+        }\n+        return (fix != null) ? Collections.<Fix>singletonList(fix) : Collections.<Fix>emptyList();\n+    }\n+\n+    @Override\n+    public String getId() {\n+        return EnablePreviewAntProj.class.getName();\n+    }\n+\n+    @Override\n+    public String getDisplayName() {\n+        return NbBundle.getMessage(EnablePreviewAntProj.class, \"FIX_EnablePreviewFeature\"); // NOI18N\n+    }\n+\n+    public String getDescription() {\n+        return NbBundle.getMessage(EnablePreviewAntProj.class, \"FIX_EnablePreviewFeature\"); // NOI18N\n+    }\n+\n+    @Override\n+    public void cancel() {\n+    }\n+\n+    private static final class ResolveAntFix implements Fix {\n+\n+        private final Project prj;\n+\n+        ResolveAntFix(@NonNull final Project prj) {\n+            Parameters.notNull(\"prj\", prj); //NOI18N\n+            this.prj = prj;\n+        }\n+\n+        @Override\n+        public String getText() {\n+            return NbBundle.getMessage(EnablePreviewAntProj.class, \"FIX_EnablePreviewFeature\");  // NOI18N\n+        }\n+\n+        @Override\n+        public ChangeInfo implement() throws Exception {\n+\n+            EditableProperties ep = getEditableProperties(prj, AntProjectHelper.PROJECT_PROPERTIES_PATH);\n+\n+            String compilerArgs = ep.getProperty(JAVAC_COMPILER_ARGS);\n+            compilerArgs = compilerArgs != null ? compilerArgs + \" \" + ENABLE_PREVIEW_FLAG : ENABLE_PREVIEW_FLAG;\n+\n+            String runJVMArgs = ep.getProperty(RUN_JVMARGS);\n+            if (!runJVMArgs.contains(ENABLE_PREVIEW_FLAG)) {\n+                runJVMArgs = runJVMArgs != null ? runJVMArgs + \" \" + ENABLE_PREVIEW_FLAG : ENABLE_PREVIEW_FLAG;\n+            }\n+\n+            ep.setProperty(JAVAC_COMPILER_ARGS, compilerArgs);\n+            ep.setProperty(RUN_JVMARGS, runJVMArgs);\n+            storeEditableProperties(prj, AntProjectHelper.PROJECT_PROPERTIES_PATH, ep);\n+            return null;\n+        }\n+\n+    }\n+\n+    private static void storeEditableProperties(final Project prj, final String propertiesPath, final EditableProperties ep)\n+            throws IOException {\n+        try {\n+            ProjectManager.mutex().writeAccess(new Mutex.ExceptionAction<Void>() {\n+                @Override\n+                public Void run() throws IOException {\n+                    FileObject propertiesFo = prj.getProjectDirectory().getFileObject(propertiesPath);\n+                    if (propertiesFo != null) {\n+                        OutputStream os = null;\n+                        try {\n+                            os = propertiesFo.getOutputStream();\n+                            ep.store(os);\n+                        } finally {\n+                            if (os != null) {\n+                                os.close();\n+                            }\n+                        }\n+                    }\n+                    return null;\n+                }\n+            });\n+        } catch (MutexException ex) {\n+        }\n+    }\n+\n+    private static EditableProperties getEditableProperties(final Project prj, final String propertiesPath)\n+            throws IOException {\n+        try {\n+            return ProjectManager.mutex().readAccess(new Mutex.ExceptionAction<EditableProperties>() {\n+                @Override\n+                public EditableProperties run() throws IOException {\n+                    FileObject propertiesFo = prj.getProjectDirectory().getFileObject(propertiesPath);\n+                    EditableProperties ep = null;\n+                    if (propertiesFo != null) {\n+                        InputStream is = null;\n+                        ep = new EditableProperties(false);\n+                        try {\n+                            is = propertiesFo.getInputStream();\n+                            ep.load(is);\n+                        } finally {\n+                            if (is != null) {\n+                                is.close();\n+                            }\n+                        }\n+                    }\n+                    return ep;\n+                }\n+            });\n+        } catch (MutexException ex) {\n+            return null;\n+        }\n+    }\n+\n+    private boolean isAntProject(Project prj) {\n+        if (prj == null) {\n+            return false;\n+        }\n+        FileObject prjDir = prj.getProjectDirectory();\n+        if (prjDir == null) {\n+            return false;\n+        }\n+        List<FileObject> antProjectFiles = new ArrayList();\n+        antProjectFiles.add(prjDir.getFileObject(\"build.xml\"));   // NOI18N\n+        antProjectFiles.add(prjDir.getFileObject(\"nbproject/project.properties\"));   // NOI18N\n+        antProjectFiles.add(prjDir.getFileObject(\"nbproject/project.xml\"));   // NOI18N\n+        boolean isAntProject = true;\n+        for (FileObject file : antProjectFiles) {\n+            if (!(file != null && file.isValid())) {\n+                isAntProject = false;\n+                break;\n+            }\n+        }\n+\n+        return isAntProject;\n+\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/errors/EnablePreviewAntProj.java",
                "sha": "c884782c725cc4f376270b9bea44b44d98cbb38d",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/layer.xml",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/ant.hints/src/org/netbeans/modules/ant/hints/layer.xml?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/ant.hints/src/org/netbeans/modules/ant/hints/layer.xml",
                "patch": "@@ -0,0 +1,32 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+\n+    Licensed to the Apache Software Foundation (ASF) under one\n+    or more contributor license agreements.  See the NOTICE file\n+    distributed with this work for additional information\n+    regarding copyright ownership.  The ASF licenses this file\n+    to you under the Apache License, Version 2.0 (the\n+    \"License\"); you may not use this file except in compliance\n+    with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+    Unless required by applicable law or agreed to in writing,\n+    software distributed under the License is distributed on an\n+    \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+    KIND, either express or implied.  See the License for the\n+    specific language governing permissions and limitations\n+    under the License.\n+\n+-->\n+<!DOCTYPE filesystem PUBLIC \"-//NetBeans//DTD Filesystem 1.1//EN\" \"http://www.netbeans.org/dtds/filesystem-1_1.dtd\">\n+<filesystem>\n+    <folder name=\"org-netbeans-modules-java-hints\">\n+        <folder name=\"rules\">\n+            <folder name=\"errors\">\n+                <file name=\"org-netbeans-modules-ant-hints-errors-EnablePreviewAntProj.instance\"/>\n+            </folder>\n+        </folder>\n+    </folder>\n+\n+</filesystem>",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/ant.hints/src/org/netbeans/modules/ant/hints/layer.xml",
                "sha": "5e050e8bfffefcddd9939a629f81faa6b9d958e4",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/java.hints.legacy.spi/nbproject/project.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.hints.legacy.spi/nbproject/project.xml?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "java/java.hints.legacy.spi/nbproject/project.xml",
                "patch": "@@ -126,6 +126,7 @@\n             </module-dependencies>\n             <friend-packages>\n                 <friend>org.netbeans.modules.apisupport.ant</friend>\n+                <friend>org.netbeans.modules.ant.hints</friend>\n                 <friend>org.netbeans.modules.javadoc</friend>\n                 <friend>org.netbeans.modules.javahints</friend>\n                 <friend>org.netbeans.modules.maven.hints</friend>",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/java.hints.legacy.spi/nbproject/project.xml",
                "sha": "33301bdba1da64d238be70e50805ff3b9b68b3b7",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/maven.hints/src/org/netbeans/modules/maven/hints/errors/EnablePreviewMavenProj.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/maven.hints/src/org/netbeans/modules/maven/hints/errors/EnablePreviewMavenProj.java?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 1,
                "filename": "java/maven.hints/src/org/netbeans/modules/maven/hints/errors/EnablePreviewMavenProj.java",
                "patch": "@@ -166,8 +166,15 @@ public void run() throws IOException {\n     }\n \n     private boolean isMavenProject(Project prj) {\n+        if (prj == null) {\n+            return false;\n+        }\n+        FileObject prjDir = prj.getProjectDirectory();\n+        if (prjDir == null) {\n+            return false;\n+        }\n \n-        FileObject pom = prj.getProjectDirectory().getFileObject(\"pom.xml\");\n+        FileObject pom = prjDir.getFileObject(\"pom.xml\");\n         return (pom != null) && pom.isValid();\n \n     }",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/java/maven.hints/src/org/netbeans/modules/maven/hints/errors/EnablePreviewMavenProj.java",
                "sha": "08b39165ac56d79676797d5c7a29b26165c2869e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/40b6820b7ac67ccd40e6a2836608e4be047ae388/nbbuild/cluster.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/nbbuild/cluster.properties?ref=40b6820b7ac67ccd40e6a2836608e4be047ae388",
                "deletions": 0,
                "filename": "nbbuild/cluster.properties",
                "patch": "@@ -565,6 +565,7 @@ nb.cluster.java=\\\n         ant.debugger,\\\n         ant.freeform,\\\n         ant.grammar,\\\n+        ant.hints,\\\n         ant.kit,\\\n         api.debugger.jpda,\\\n         api.java,\\",
                "raw_url": "https://github.com/apache/netbeans/raw/40b6820b7ac67ccd40e6a2836608e4be047ae388/nbbuild/cluster.properties",
                "sha": "5eb4cbe022f013d1a3b8d9aff67951967b74552b",
                "status": "modified"
            }
        ],
        "message": "[NETBEANS-3078]:Provided Error Hint to turn on Preview Features in An\u2026 (#1487)\n\n* [NETBEANS-3078]:Provided Error Hint to turn on Preview Features in Ant Java projects\r\n\r\n* [NETBEANS-3078]:Fix for NPE on opening single source file",
        "parent": "https://github.com/apache/netbeans/commit/f5c28b0dc8b6ae662ebe7af455af787759ddc19a",
        "repo": "netbeans",
        "unit_tests": [
            "BundleTest.java",
            "BundleTest.java"
        ]
    },
    "netbeans_7fe2d37": {
        "bug_id": "netbeans_7fe2d37",
        "commit": "https://github.com/apache/netbeans/commit/7fe2d3774f700650f532d15118d69e572d81c74e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/7fe2d3774f700650f532d15118d69e572d81c74e/lexer.nbbridge/nbproject/project.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/lexer.nbbridge/nbproject/project.properties?ref=7fe2d3774f700650f532d15118d69e572d81c74e",
                "deletions": 1,
                "filename": "lexer.nbbridge/nbproject/project.properties",
                "patch": "@@ -16,6 +16,6 @@\n # under the License.\n is.eager=true\n javac.compilerargs=-Xlint:unchecked\n-javac.source=1.6\n+javac.source=1.8\n javadoc.arch=${basedir}/arch.xml\n spec.version.base=1.35.0",
                "raw_url": "https://github.com/apache/netbeans/raw/7fe2d3774f700650f532d15118d69e572d81c74e/lexer.nbbridge/nbproject/project.properties",
                "sha": "40c44bdf155b96419ac60b5f090015a4593a0e82",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/netbeans/blob/7fe2d3774f700650f532d15118d69e572d81c74e/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java?ref=7fe2d3774f700650f532d15118d69e572d81c74e",
                "deletions": 1,
                "filename": "lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "patch": "@@ -19,6 +19,8 @@\n \n package org.netbeans.modules.lexer.nbbridge;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import org.netbeans.api.editor.mimelookup.MimeLookup;\n import org.netbeans.api.editor.mimelookup.MimePath;\n import org.netbeans.api.lexer.InputAttributes;\n@@ -28,6 +30,8 @@\n import org.netbeans.spi.lexer.LanguageEmbedding;\n import org.netbeans.spi.lexer.LanguageProvider;\n import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n \n /**\n  *\n@@ -36,18 +40,50 @@\n @org.openide.util.lookup.ServiceProvider(service=org.netbeans.spi.lexer.LanguageProvider.class)\n public final class MimeLookupLanguageProvider extends LanguageProvider {\n     \n+    private final Map<String, Lookup.Result<Language>> langLkpResultsMap = \n+                  new HashMap<>();\n+    private final Map<String, Lookup.Result<LanguagesEmbeddingMap>> embeddingsLkpResultsMap = \n+                  new HashMap<>();\n+    private final String LOCK = new String(\"MimeLookupLanguageProvider.LOCK\"); //NOI18N\n+ \n     public MimeLookupLanguageProvider() {\n         super();\n     }\n \n     public Language<?> findLanguage(String mimeType) {\n         Lookup lookup = MimeLookup.getLookup(MimePath.parse(mimeType));\n+ \n+        //268649: add lookup listener for Language.class\n+        synchronized (LOCK) {\n+            Lookup.Result result = langLkpResultsMap.get(mimeType);\n+            if (result == null) {\n+                result = lookup.lookup(new Lookup.Template(Language.class));\n+                result.addLookupListener((LookupEvent evt) -> {\n+                    firePropertyChange(PROP_LANGUAGE);\n+                });\n+                langLkpResultsMap.put(mimeType, result);\n+            }\n+        } \n         return (Language<?>)lookup.lookup(Language.class);\n     }\n \n     public LanguageEmbedding<?> findLanguageEmbedding(\n     Token<?> token, LanguagePath languagePath, InputAttributes inputAttributes) {\n-        Lookup lookup = MimeLookup.getLookup(MimePath.parse(languagePath.mimePath()));\n+        String mimePath = languagePath.mimePath();\n+        Lookup lookup = MimeLookup.getLookup(MimePath.parse(mimePath));\n+        \n+        //268649: add lookup listener for LanguagesEmbeddingMap.class            \n+        synchronized (LOCK) {\n+            Lookup.Result result = embeddingsLkpResultsMap.get(mimePath);\n+            if (result == null) {\n+                result = lookup.lookup(new Lookup.Template(LanguagesEmbeddingMap.class));\n+                result.addLookupListener((LookupEvent evt) -> {\n+                    firePropertyChange(PROP_EMBEDDED_LANGUAGE);\n+                });\n+                embeddingsLkpResultsMap.put(mimePath, result);\n+            }\n+        }\n+\n         LanguagesEmbeddingMap map = lookup.lookup(LanguagesEmbeddingMap.class);\n         return map == null ? null : map.getLanguageEmbeddingForTokenName(token.id().name());\n     }",
                "raw_url": "https://github.com/apache/netbeans/raw/7fe2d3774f700650f532d15118d69e572d81c74e/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "sha": "d82b1f71cdeaf21e30ba3815a156aed34998ad7e",
                "status": "modified"
            }
        ],
        "message": "#268649-NPE opening JS file in JsStructureScanner.folds",
        "parent": "https://github.com/apache/netbeans/commit/e0ee00578ea26326b73681993c12df669c174f40",
        "repo": "netbeans",
        "unit_tests": [
            "MimeLookupLanguageProviderTest.java"
        ]
    },
    "netbeans_8971234": {
        "bug_id": "netbeans_8971234",
        "commit": "https://github.com/apache/netbeans/commit/89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.actions/src/org/netbeans/modules/editor/actions/Bundle.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.actions/src/org/netbeans/modules/editor/actions/Bundle.properties?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "ide/editor.actions/src/org/netbeans/modules/editor/actions/Bundle.properties",
                "patch": "@@ -44,6 +44,7 @@ caret-next-word=Insertion Point to Next Word\n caret-previous-word=Insertion Point to Previous Word\n selection-next-word=Extend Selection to Next Word\n selection-previous-word=Extend Selection to Previous Word\n+toggle-inline-hints=Show Inline &Hints\n toggle-lines-view=Show &Indent Guide Lines\n clipboard-lines=Paste as Lines\n remove-last-caret=Remove Last Caret",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.actions/src/org/netbeans/modules/editor/actions/Bundle.properties",
                "sha": "17b02bc04830f82648103c679bb8613a315e9751",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.actions/src/org/netbeans/modules/editor/actions/ShowInlineHintsAction.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.actions/src/org/netbeans/modules/editor/actions/ShowInlineHintsAction.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "ide/editor.actions/src/org/netbeans/modules/editor/actions/ShowInlineHintsAction.java",
                "patch": "@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.editor.actions;\n+\n+import java.awt.event.ActionEvent;\n+import javax.swing.AbstractAction;\n+import org.netbeans.api.editor.EditorActionRegistration;\n+\n+@EditorActionRegistration(name=\"toggle-inline-hints\",\n+                          menuPath=\"View\",\n+                          menuPosition=899,\n+                          preferencesKey=ShowInlineHintsAction.KEY_LINES,\n+                          preferencesDefault=ShowInlineHintsAction.DEF_LINES)\n+public class ShowInlineHintsAction extends AbstractAction {\n+    public static final String KEY_LINES = \"enable.inline.hints\";\n+    public static final boolean DEF_LINES = false;\n+    @Override\n+    public void actionPerformed(ActionEvent e) {\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.actions/src/org/netbeans/modules/editor/actions/ShowInlineHintsAction.java",
                "sha": "a97a8efeaa1bda03618f4f741cf65343e0be1825",
                "status": "added"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/apichanges.xml",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/apichanges.xml?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "ide/editor.lib2/apichanges.xml",
                "patch": "@@ -83,6 +83,21 @@ is the proper place.\n     <!-- ACTUAL CHANGES BEGIN HERE: -->\n \n     <changes>\n+        <change id=\"PrependedTextOpt\">\n+            <summary>Prepended text for highlights</summary>\n+            <version major=\"2\" minor=\"24\"/>\n+            <date day=\"14\" month=\"5\" year=\"2019\"/>\n+            <author login=\"jlahoda\"/>\n+            <compatibility binary=\"compatible\" source=\"compatible\" semantic=\"compatible\" addition=\"yes\" deprecation=\"no\" deletion=\"no\" modification=\"no\" />\n+            <description>\n+                <p>If AttributeSet returned from HighlightsSequence contains key \"virtual-text-prepend\"\n+                   with a value of type String, the UI may optionally render the value as a\n+                   virtual text before the text of the highlight. It is recommended to make the\n+                   span of length 1, to avoid problems when the AttributeSet with \"virtual-test-prepend\"\n+                   is merged with other AttributeSets, which could lead to duplication.</p>\n+            </description>\n+            <class name=\"HighlightsSequence\" package=\"org.netbeans.spi.editor.highlighting\"/>\n+        </change>\n         <change id=\"EditorActionRegistration.category\">\n             <summary>Added category to EditorActionRegistration</summary>\n             <version major=\"2\" minor=\"15\"/>",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/apichanges.xml",
                "sha": "03211f4ff7229dfdec90661bf0d0331c0c3cde9f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/nbproject/project.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/nbproject/project.properties?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "ide/editor.lib2/nbproject/project.properties",
                "patch": "@@ -18,7 +18,7 @@\n is.autoload=true\n javac.source=1.7\n javac.compilerargs=-Xlint:unchecked\n-spec.version.base=2.23.0\n+spec.version.base=2.24.0\n \n javadoc.arch=${basedir}/arch.xml\n javadoc.apichanges=${basedir}/apichanges.xml",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/nbproject/project.properties",
                "sha": "f3f622d22629b35a0538ab532c211008e1469041",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 2,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java",
                "patch": "@@ -20,6 +20,7 @@\n package org.netbeans.modules.editor.lib2.highlighting;\n \n import java.awt.Font;\n+import java.util.Objects;\n import java.util.logging.Logger;\n import javax.swing.text.AttributeSet;\n import org.netbeans.lib.editor.util.ArrayUtilities;\n@@ -117,9 +118,10 @@ public void add(HighlightItem item) {\n      * @param wsEndOffset whitespace end offset must be lower than or equal to maxEndOffset\n      *  and when exceeded a first whitespace char in docText means that the cutting will end there.\n      * @param docText document text in order properly handle wsEndOffset parameter.\n+     * @param usePrependText reflect the prepended text setting.\n      * @return either simple or compound attribute set.\n      */\n-    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText) {\n+    public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOffset, CharSequence docText, boolean usePrependText) {\n         assert (maxEndOffset <= endOffset()) :\n                 \"maxEndOffset=\" + maxEndOffset + \" > endOffset()=\" + endOffset() + \", \" + this; // NOI18N\n         HighlightItem item = get(0);\n@@ -157,12 +159,14 @@ public AttributeSet cutSameFont(Font defaultFont, int maxEndOffset, int wsEndOff\n \n         // Extends beyond first highlight\n         Font firstFont = ViewUtils.getFont(firstAttrs, defaultFont);\n+        Object firstPrependText = usePrependText && firstAttrs != null ? firstAttrs.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND) : null;\n         int index = 1;\n         while (true) {\n             item = get(index);\n             AttributeSet attrs = item.getAttributes();\n             Font font = ViewUtils.getFont(attrs, defaultFont);\n-            if (!font.equals(firstFont)) { // Stop at itemEndOffset\n+            Object prependText = usePrependText && attrs != null ? attrs.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND) : null;\n+            if (!font.equals(firstFont) || !Objects.equals(firstPrependText, prependText)) { // Stop at itemEndOffset\n                 if (index == 1) { // Just single attribute set\n                     cutStartItems(1);\n                     startOffset = itemEndOffset; // end offset of first item",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsList.java",
                "sha": "a97a9598ed37e208c9077c70be0aa10a24f97c19",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/DocumentViewOp.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/DocumentViewOp.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/DocumentViewOp.java",
                "patch": "@@ -291,6 +291,7 @@\n     private Map<Font,FontInfo> fontInfos = new HashMap<Font, FontInfo>(4);\n     \n     private Font defaultFont;\n+    private Font defaultHintFont;\n     \n     private boolean fontRenderContextFromPaint;\n \n@@ -314,6 +315,7 @@\n     boolean asTextField;\n     \n     private boolean guideLinesEnable;\n+    private boolean inlineHintsEnable;\n     \n     private int indentLevelSize;\n     \n@@ -921,10 +923,13 @@ public void run() {\n         // Line height correction\n         float lineHeightCorrectionOrig = rowHeightCorrection;\n         rowHeightCorrection = prefs.getFloat(SimpleValueNames.LINE_HEIGHT_CORRECTION, 1.0f);\n+        boolean inlineHintsEnableOrig = inlineHintsEnable;\n+        inlineHintsEnable = Boolean.TRUE.equals(prefs.getBoolean(\"enable.inline.hints\", false)); // NOI18N\n         boolean updateMetrics = (rowHeightCorrection != lineHeightCorrectionOrig);\n         boolean releaseChildren = nonInitialUpdate && \n                 ((nonPrintableCharactersVisible != nonPrintableCharactersVisibleOrig) ||\n-                 (rowHeightCorrection != lineHeightCorrectionOrig));  \n+                 (rowHeightCorrection != lineHeightCorrectionOrig) ||\n+                 (inlineHintsEnable != inlineHintsEnableOrig));\n         indentLevelSize = getIndentSize();\n         tabSize = prefs.getInt(SimpleValueNames.TAB_SIZE, EditorPreferencesDefaults.defaultTabSize);\n         if (updateMetrics) {\n@@ -1060,6 +1065,7 @@ private void updateCharMetrics() { // Update default row height and other params\n             fontInfos.put(null, defaultFontInfo); // Alternative way to find default font info\n             updateRowHeight(defaultFontInfo, true);\n             defaultFont = font;\n+            defaultHintFont = font.deriveFont((float) (font.getSize2D() * 0.75));\n             defaultCharWidth = defaultFontInfo.charWidth;\n             \n             tabTextLayout = null;\n@@ -1165,6 +1171,10 @@ public boolean isGuideLinesEnable() {\n         return guideLinesEnable && !asTextField;\n     }\n \n+    public boolean isInlineHintsEnable() {\n+        return inlineHintsEnable;\n+    }\n+\n     public int getIndentLevelSize() {\n         return indentLevelSize;\n     }\n@@ -1259,6 +1269,10 @@ public Font getDefaultFont() {\n         return defaultFont;\n     }\n \n+    public Font getDefaultHintFont() {\n+        return defaultHintFont;\n+    }\n+\n     public float getDefaultRowHeight() {\n         checkSettingsInfo();\n         return defaultRowHeightInt;",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/DocumentViewOp.java",
                "sha": "80f1b9ac14d1641ee18115e8e61041d4c0dded3e",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/HighlightsViewFactory.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/HighlightsViewFactory.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 9,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/HighlightsViewFactory.java",
                "patch": "@@ -28,6 +28,8 @@\n import javax.swing.text.AttributeSet;\n import javax.swing.text.Element;\n import javax.swing.text.View;\n+import org.netbeans.api.annotations.common.NonNull;\n+import org.netbeans.api.annotations.common.NullAllowed;\n import org.netbeans.lib.editor.util.CharSequenceUtilities;\n import org.netbeans.lib.editor.util.swing.DocumentUtilities;\n import org.netbeans.modules.editor.lib2.highlighting.DirectMergeContainer;\n@@ -188,7 +190,7 @@ public EditorView createView(int startOffset, int limitOffset, boolean forcedLim\n         }\n         if (startOffset == lineEndOffset - 1) {\n             AttributeSet attrs = hList.cutSingleChar();\n-            return new NewlineView(attrs);\n+            return wrapWithPrependedText(new NewlineView(attrs), attrs);\n         } else { // Regular view with possible highlight(s) or tab view\n             updateTabsAndHighlightsAndRTL(startOffset);\n             if (charType == TAB_CHAR_TYPE) {\n@@ -198,7 +200,7 @@ public EditorView createView(int startOffset, int limitOffset, boolean forcedLim\n                     limitOffset = tabsEndOffset;\n                 }\n                 attrs = hList.cut(limitOffset);\n-                return new TabView(limitOffset - startOffset, attrs);\n+                return wrapWithPrependedText(new TabView(limitOffset - startOffset, attrs), attrs);\n \n             } else { // Create regular view with either LTR or RTL text\n                 limitOffset = Math.min(limitOffset, nextTabOrRTLOffset); // nextTabOrRTLOffset < lineEndOffset \n@@ -216,11 +218,13 @@ public EditorView createView(int startOffset, int limitOffset, boolean forcedLim\n                     }\n                             \n                 }\n-                AttributeSet attrs = hList.cutSameFont(defaultFont, limitOffset, wsEndOffset, docText);\n+                boolean inlineHints = documentView().op.isInlineHintsEnable();\n+                AttributeSet attrs = hList.cutSameFont(defaultFont, limitOffset, wsEndOffset, docText, inlineHints);\n                 int length = hList.startOffset() - startOffset;\n-                HighlightsView view = new HighlightsView(length, attrs);\n-                if (origView instanceof HighlightsView && origView.getLength() == length) { // Reuse\n-                    HighlightsView origHView = (HighlightsView) origView;\n+                EditorView view = wrapWithPrependedText(new HighlightsView(length, attrs), attrs);\n+                EditorView origViewUnwrapped = origView instanceof PrependedTextView ? ((PrependedTextView) origView).getDelegate() : origView;\n+                if (origViewUnwrapped != null && origViewUnwrapped.getClass() == HighlightsView.class && origViewUnwrapped.getLength() == length) {\n+                    HighlightsView origHView = (HighlightsView) origViewUnwrapped;\n                     TextLayout origTextLayout = origHView.getTextLayout();\n                     if (origTextLayout != null) {\n                         if (ViewHierarchyImpl.CHECK_LOG.isLoggable(Level.FINE)) {\n@@ -235,11 +239,12 @@ public EditorView createView(int startOffset, int limitOffset, boolean forcedLim\n                             }\n                         }\n                         Font font = ViewUtils.getFont(attrs, defaultFont);\n-                        Font origFont = ViewUtils.getFont(origView.getAttributes(), defaultFont);\n+                        Font origFont = ViewUtils.getFont(origViewUnwrapped.getAttributes(), defaultFont);\n                         if (font != null && font.equals(origFont)) {\n                             float origWidth = origHView.getWidth();\n-                            view.setTextLayout(origTextLayout, origWidth);\n-                            view.setBreakInfo(origHView.getBreakInfo());\n+                            HighlightsView hv = (HighlightsView) (view instanceof PrependedTextView ? ((PrependedTextView) view).getDelegate() : view);\n+                            hv.setTextLayout(origTextLayout, origWidth);\n+                            hv.setBreakInfo(origHView.getBreakInfo());\n                             ViewStats.incrementTextLayoutReused(length);\n                         }\n                     }\n@@ -249,6 +254,16 @@ public EditorView createView(int startOffset, int limitOffset, boolean forcedLim\n         }\n     }\n \n+    private @NonNull EditorView wrapWithPrependedText(@NonNull EditorView origView, @NullAllowed AttributeSet attrs) {\n+        boolean inlineHints = documentView().op.isInlineHintsEnable();\n+\n+        if (attrs != null && inlineHints && attrs.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND) instanceof String) {\n+            return new PrependedTextView(documentView().op, attrs, origView);\n+        }\n+\n+        return origView;\n+    }\n+\n     private void updateTabsAndHighlightsAndRTL(int offset) {\n         if (offset >= nextTabOrRTLOffset) { // Update nextTabOrRTLOffset\n             // Determine situation right at offset",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/HighlightsViewFactory.java",
                "sha": "fce916dd5bbacc0481e3bb5fdd9e6b715136ab94",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ParagraphViewChildren.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ParagraphViewChildren.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 2,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ParagraphViewChildren.java",
                "patch": "@@ -168,8 +168,8 @@ void replace(ParagraphView pView, int index, int removeCount, View[] addedViews)\n                 view.setRawEndOffset(relEndOffset); // Below offset-gap\n                 view.setParent(pView);\n                 // Possibly assign text layout\n-                if (view instanceof HighlightsView) {\n-                    HighlightsView hView = (HighlightsView) view;\n+                if (view instanceof HighlightsView || (view instanceof PrependedTextView && ((PrependedTextView) view).getDelegate() instanceof HighlightsView)) {\n+                    HighlightsView hView = (HighlightsView) (view instanceof HighlightsView ? view : ((PrependedTextView) view).getDelegate());\n                     // Fill in text layout if necessary\n                     if (hView.getTextLayout() == null) { // Fill in text layout\n                         if (docText == null) {",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ParagraphViewChildren.java",
                "sha": "38c2787ed78b81d117dcb9f3b783251b2d7e122d",
                "status": "modified"
            },
            {
                "additions": 155,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/PrependedTextView.java",
                "changes": 155,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/PrependedTextView.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/PrependedTextView.java",
                "patch": "@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.netbeans.modules.editor.lib2.view;\n+\n+import java.awt.Color;\n+import java.awt.Font;\n+import java.awt.Graphics2D;\n+import java.awt.Rectangle;\n+import java.awt.Shape;\n+import java.awt.font.TextLayout;\n+import java.awt.geom.Rectangle2D;\n+import javax.swing.text.AttributeSet;\n+import javax.swing.text.Position;\n+import javax.swing.text.Position.Bias;\n+import javax.swing.text.View;\n+import org.netbeans.spi.editor.highlighting.HighlightsSequence;\n+\n+/**\n+ * TODO\n+ */\n+public final class PrependedTextView extends EditorView {\n+\n+    private final AttributeSet attributes;\n+    private final EditorView delegate;\n+    private final TextLayout prependedTextLayout;\n+    private final double leftShift;\n+    private final double prependedTextWidth;\n+\n+    public PrependedTextView(DocumentViewOp op, AttributeSet attributes, EditorView delegate) {\n+        super(null);\n+        this.attributes = attributes;\n+        this.delegate = delegate;\n+        Font font = ViewUtils.getFont(attributes, op.getDefaultHintFont());\n+        prependedTextLayout = op.createTextLayout((String) attributes.getAttribute(ViewUtils.KEY_VIRTUAL_TEXT_PREPEND), font);\n+        Rectangle2D textBounds = prependedTextLayout.getBounds(); //TODO: allocation!\n+        double em = op.getDefaultCharWidth();\n+        leftShift = em / 2;\n+        prependedTextWidth = Math.ceil(textBounds.getWidth() + em);\n+    }\n+\n+    @Override\n+    public float getPreferredSpan(int axis) {\n+        float superSpan = delegate.getPreferredSpan(axis);\n+        if (axis == View.X_AXIS) {\n+            superSpan += prependedTextWidth;\n+        }\n+        return superSpan;\n+    }\n+\n+    @Override\n+    public AttributeSet getAttributes() {\n+        return attributes;\n+    }\n+    \n+    @Override\n+    public Shape modelToViewChecked(int offset, Shape alloc, Bias bias) {\n+        Shape res = delegate.modelToViewChecked(offset, alloc, bias);\n+        Rectangle2D rect = ViewUtils.shapeAsRect(res);\n+        rect.setRect(rect.getX() + prependedTextWidth, rect.getY(), rect.getWidth(), rect.getHeight());\n+        return rect;\n+    }\n+\n+    @Override\n+    public void paint(Graphics2D g, Shape hViewAlloc, Rectangle clipBounds) {\n+        Rectangle2D span = ViewUtils.shapeAsRect(hViewAlloc);\n+        span.setRect(span.getX() + prependedTextWidth, span.getY(), span.getWidth() - prependedTextWidth, span.getHeight());\n+        delegate.paint(g, span, clipBounds);\n+        span.setRect(span.getX() - prependedTextWidth, span.getY(), prependedTextWidth, span.getHeight());\n+\n+        HighlightsSequence highlights = getDocumentView().getPaintHighlights(this, 0);\n+\n+        if (highlights.moveNext()) {\n+            AttributeSet attrs = highlights.getAttributes();\n+            HighlightsViewUtils.fillBackground(g, span, attrs, getDocumentView().getTextComponent());\n+            HighlightsViewUtils.paintBackgroundHighlights(g, span, attrs, getDocumentView()); //TODO: clear some attributes (like boxes)???\n+        }\n+\n+        g.setColor(Color.gray);\n+        span.setRect(span.getX() + leftShift, span.getY(), prependedTextWidth - 2 * leftShift, span.getHeight());\n+        HighlightsViewUtils.paintTextLayout(g, span, prependedTextLayout, getDocumentView());\n+    }\n+\n+    ParagraphView getParagraphView() {\n+        return (ParagraphView) getParent();\n+    }\n+\n+    DocumentView getDocumentView() {\n+        ParagraphView paragraphView = getParagraphView();\n+        return (paragraphView != null) ? paragraphView.getDocumentView() : null;\n+    }\n+\n+    @Override\n+    public int getRawEndOffset() {\n+        return delegate.getRawEndOffset();\n+    }\n+\n+    @Override\n+    public void setRawEndOffset(int offset) {\n+        delegate.setRawEndOffset(offset);\n+    }\n+\n+    @Override\n+    public int viewToModelChecked(double x, double y, Shape alloc, Position.Bias[] biasReturn) {\n+        Rectangle2D bounds = ViewUtils.shapeAsRect(alloc);\n+        bounds.setRect(bounds.getX() + prependedTextWidth, bounds.getY(),\n+                       bounds.getWidth() - prependedTextWidth, bounds.getHeight());\n+        if (x <= bounds.getX()) {\n+            return getStartOffset();\n+        }\n+        return delegate.viewToModelChecked(x, y, bounds, biasReturn);\n+    }\n+\n+    @Override\n+    public int getLength() {\n+        return delegate.getLength();\n+    }\n+\n+    @Override\n+    public int getStartOffset() {\n+        return delegate.getStartOffset();\n+    }\n+\n+    @Override\n+    public int getEndOffset() {\n+        return delegate.getEndOffset();\n+    }\n+\n+    @Override\n+    public void setParent(View parent) {\n+        super.setParent(parent);\n+        delegate.setParent(parent);\n+    }\n+\n+    EditorView getDelegate() {\n+        return delegate;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/PrependedTextView.java",
                "sha": "472c8f2bc63f2536e0eb3257d87050a6208b0eef",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ViewUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ViewUtils.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ViewUtils.java",
                "patch": "@@ -43,7 +43,9 @@\n  */\n \n public final class ViewUtils {\n-    \n+\n+    public static final String KEY_VIRTUAL_TEXT_PREPEND = \"virtual-text-prepend\"; //NOI18N\n+\n     private ViewUtils() { // No instances\n     }\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/src/org/netbeans/modules/editor/lib2/view/ViewUtils.java",
                "sha": "bda7b075175957a5f46fbb18e4f4b75c7bd3b4b1",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/test/unit/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsListTest.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/ide/editor.lib2/test/unit/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsListTest.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 11,
                "filename": "ide/editor.lib2/test/unit/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsListTest.java",
                "patch": "@@ -26,6 +26,7 @@\n import javax.swing.text.StyleConstants;\n import org.junit.Test;\n import org.netbeans.api.editor.settings.AttributesUtilities;\n+import org.netbeans.modules.editor.lib2.view.ViewUtils;\n import org.netbeans.spi.editor.highlighting.HighlightsContainer;\n import org.netbeans.spi.editor.highlighting.support.OffsetsBag;\n \n@@ -67,7 +68,7 @@ public void testSimple() throws Exception {\n \n         HighlightsList hList = highlightsListSimple(doc);\n         // Fetch first\n-        AttributeSet attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        AttributeSet attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert (attrs instanceof CompoundAttributes) : \"Non-CompoundAttributes attrs=\" + attrs;\n         CompoundAttributes cAttrs = (CompoundAttributes) attrs;\n         assert (cAttrs.startOffset() == 0) : \"startOffset=\" + cAttrs.startOffset();\n@@ -78,21 +79,21 @@ public void testSimple() throws Exception {\n         assertItem(items[2], 6, null);\n         // Fetch next\n         assert (hList.startOffset() == 6);\n-        attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert attrs == attrSets[1];\n         assert (hList.startOffset() == 8);\n-        attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == null);\n         assert (hList.startOffset() == 10);\n         \n         \n         hList = highlightsListSimple(doc);\n-        attrs = hList.cutSameFont(defaultFont, 2, 2, null);\n+        attrs = hList.cutSameFont(defaultFont, 2, 2, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == null);\n-        attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert (hList.startOffset() == 6);\n         assert (attrs instanceof CompoundAttributes) : \"Non-CompoundAttributes attrs=\" + attrs;\n         cAttrs = (CompoundAttributes) attrs;\n@@ -103,38 +104,38 @@ public void testSimple() throws Exception {\n         assertItem(items[1], 6, null);\n         \n         hList = highlightsListSimple(doc);\n-        attrs = hList.cutSameFont(defaultFont, 3, 3, null);\n+        attrs = hList.cutSameFont(defaultFont, 3, 3, null, false);\n         cAttrs = (CompoundAttributes) attrs;\n         assert (cAttrs.startOffset() == 0) : \"startOffset=\" + cAttrs.startOffset();\n         items = cAttrs.highlightItems();\n         assert (items.length == 2);\n         assertItem(items[0], 2, null);\n         assertItem(items[1], 3, attrSets[0]);\n         // Next\n-        attrs = hList.cutSameFont(defaultFont, 5, 5, null);\n+        attrs = hList.cutSameFont(defaultFont, 5, 5, null, false);\n         cAttrs = (CompoundAttributes) attrs;\n         assert (cAttrs.startOffset() == 3) : \"startOffset=\" + cAttrs.startOffset();\n         items = cAttrs.highlightItems();\n         assert (items.length == 2);\n         assertItem(items[0], 4, attrSets[0]);\n         assertItem(items[1], 5, null);\n         // Next\n-        attrs = hList.cutSameFont(defaultFont, 7, 7, null);\n+        attrs = hList.cutSameFont(defaultFont, 7, 7, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == null);\n         assert (hList.startOffset() == 6);\n         // Next\n-        attrs = hList.cutSameFont(defaultFont, 7, 7, null);\n+        attrs = hList.cutSameFont(defaultFont, 7, 7, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == attrSets[1]);\n         assert (hList.startOffset() == 7);\n         // Next\n-        attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == attrSets[1]);\n         assert (hList.startOffset() == 8);\n         // Next\n-        attrs = hList.cutSameFont(defaultFont, 10, 10, null);\n+        attrs = hList.cutSameFont(defaultFont, 10, 10, null, false);\n         assert !(attrs instanceof CompoundAttributes);\n         assert (attrs == null);\n         assert (hList.startOffset() == 10);\n@@ -151,6 +152,93 @@ private HighlightsList highlightsListSimple(Document doc) {\n         return reader.highlightsList();\n     }\n     \n+    @Test\n+    public void testSplitPrependText() throws Exception {\n+        Document doc = document();\n+\n+        OffsetsBag bag = new OffsetsBag(doc);\n+        AttributeSet attrs1 = AttributesUtilities.createImmutable(\n+                StyleConstants.Foreground, Color.RED,\n+                StyleConstants.FontFamily, fontNames[0]);\n+        AttributeSet attrs2 = AttributesUtilities.createImmutable(\n+                StyleConstants.Foreground, Color.RED,\n+                StyleConstants.FontFamily, fontNames[0],\n+                ViewUtils.KEY_VIRTUAL_TEXT_PREPEND, \"test\");\n+        AttributeSet attrs3 = AttributesUtilities.createImmutable(\n+                StyleConstants.Foreground, Color.RED,\n+                StyleConstants.FontFamily, fontNames[1]);\n+\n+        bag.addHighlight(0, 2, attrs1);\n+        bag.addHighlight(2, 4, attrs2);\n+        bag.addHighlight(4, 6, attrs1);\n+        bag.addHighlight(8, 10, attrs3);\n+\n+        int end = 14;\n+        DirectMergeContainer dmc = new DirectMergeContainer(new HighlightsContainer[]{ bag }, true);\n+\n+        {\n+        HighlightsReader reader = new HighlightsReader(dmc, 0, end);\n+        reader.readUntil(end);\n+        HighlightsList hList = reader.highlightsList();\n+\n+        // Fetch first\n+        AttributeSet attrs = hList.cutSameFont(defaultFont, end, end, null, false);\n+        assert (attrs instanceof CompoundAttributes) : \"Non-CompoundAttributes attrs=\" + attrs;\n+        CompoundAttributes cAttrs = (CompoundAttributes) attrs;\n+        assert (cAttrs.startOffset() == 0) : \"startOffset=\" + cAttrs.startOffset();\n+        HighlightItem[] items = cAttrs.highlightItems();\n+        assert (items.length == 4);\n+        assertItem(items[0], 2, attrs1);\n+        assertItem(items[1], 4, attrs2);\n+        assertItem(items[2], 6, attrs1);\n+        assertItem(items[3], 8, null);\n+        // Fetch next\n+        assert (hList.startOffset() == 8);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, false);\n+        assert !(attrs instanceof CompoundAttributes);\n+        assert attrs == attrs3;\n+        assert (hList.startOffset() == 10);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, false);\n+        assert !(attrs instanceof CompoundAttributes);\n+        assert (attrs == null);\n+        assert (hList.startOffset() == 14);\n+        }\n+\n+        {\n+        HighlightsReader reader = new HighlightsReader(dmc, 0, end);\n+        reader.readUntil(end);\n+        HighlightsList hList = reader.highlightsList();\n+\n+        // Fetch first\n+        AttributeSet attrs = hList.cutSameFont(defaultFont, end, end, null, true);\n+        assert !(attrs instanceof CompoundAttributes) : \"CompoundAttributes attrs=\" + attrs;\n+        assert attrs == attrs1;\n+        assert (hList.startOffset() == 2);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, true);\n+        assert !(attrs instanceof CompoundAttributes);\n+        assert (attrs == attrs2);\n+        assert (hList.startOffset() == 4);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, true);\n+        assert (attrs instanceof CompoundAttributes) : \"Non-CompoundAttributes attrs=\" + attrs;\n+        CompoundAttributes cAttrs = (CompoundAttributes) attrs;\n+        assert (cAttrs.startOffset() == 4) : \"startOffset=\" + cAttrs.startOffset();\n+        HighlightItem[] items = cAttrs.highlightItems();\n+        assert (items.length == 2);\n+        assertItem(items[0], 6, attrs1);\n+        assertItem(items[1], 8, null);\n+        // Fetch next\n+        assert (hList.startOffset() == 8);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, true);\n+        assert !(attrs instanceof CompoundAttributes);\n+        assert attrs == attrs3;\n+        assert (hList.startOffset() == 10);\n+        attrs = hList.cutSameFont(defaultFont, end, end, null, true);\n+        assert !(attrs instanceof CompoundAttributes);\n+        assert (attrs == null);\n+        assert (hList.startOffset() == 14);\n+        }\n+    }\n+\n     private static void assertItem(HighlightItem item, int endOffset, AttributeSet attrs) {\n         assert (item.getEndOffset() == endOffset) : \"itemEndOffset=\" + item.getEndOffset() + \" != endOffset=\" + endOffset; // NOI18N\n         assert (item.getAttributes() == attrs) : \"itemAttrs=\" + item.getAttributes() + \" != attrs=\" + attrs; // NOI18N",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/ide/editor.lib2/test/unit/src/org/netbeans/modules/editor/lib2/highlighting/HighlightsListTest.java",
                "sha": "86e06938767b34c0904b43fb90928b09ff5a5a94",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/nbproject/project.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/nbproject/project.properties?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "java/java.editor.base/nbproject/project.properties",
                "patch": "@@ -16,7 +16,7 @@\n # under the License.\n spec.version.base=2.70.0\n is.autoload=true\n-javac.source=1.7\n+javac.source=1.8\n javac.compilerargs=-Xlint -Xlint:-serial\n \n test.config.semantic.includes=\\",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/nbproject/project.properties",
                "sha": "8d8f77e133abe943ec9c8788781d7c40a442a67a",
                "status": "modified"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 2,
                "filename": "java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java",
                "patch": "@@ -27,6 +27,7 @@\n import com.sun.source.tree.ExportsTree;\n import com.sun.source.tree.IdentifierTree;\n import com.sun.source.tree.LambdaExpressionTree;\n+import com.sun.source.tree.LiteralTree;\n import com.sun.source.tree.MemberReferenceTree;\n import com.sun.source.tree.MemberSelectTree;\n import com.sun.source.tree.MethodInvocationTree;\n@@ -319,7 +320,7 @@ protected boolean process(CompilationInfo info, final Document doc, ErrorDescrip\n             return true;\n         \n         if (computeUnusedImports) {\n-            setter.setHighlights(doc, imports);\n+            setter.setHighlights(doc, imports, v.preText);\n         }\n \n         setter.setColorings(doc, newColoring);\n@@ -406,6 +407,7 @@ public String toString() {\n         private Map<Element, List<Use>> type2Uses;        \n         private Map<Tree, List<Token>> tree2Tokens;\n         private List<Token> contextKeywords;\n+        private Map<int[], String> preText;\n         private TokenList tl;\n         private long memberSelectBypass = -1;        \n         private SourcePositions sourcePositions;\n@@ -419,6 +421,7 @@ private DetectorVisitor(org.netbeans.api.java.source.CompilationInfo info, final\n             type2Uses = new HashMap<Element, List<Use>>();\n             tree2Tokens = new IdentityHashMap<Tree, List<Token>>();\n             contextKeywords = new ArrayList<>();\n+            preText = new HashMap<>();\n \n             tl = new TokenList(info, doc, cancel);\n             \n@@ -1060,11 +1063,33 @@ public Void visitMemberReference(MemberReferenceTree node, Void p) {\n             return null;\n         }\n \n+        @Override\n+        public Void visitLiteral(LiteralTree node, Void p) {\n+            TreePath pp = getCurrentPath().getParentPath();\n+            if (pp.getLeaf() != null &&\n+                pp.getLeaf().getKind() == Kind.METHOD_INVOCATION) {\n+                MethodInvocationTree inv = (MethodInvocationTree) pp.getLeaf();\n+                int pos = inv.getArguments().indexOf(node);\n+                if (pos != (-1)) {\n+                    Element invoked = info.getTrees().getElement(pp);\n+                    if (invoked != null && (invoked.getKind() == ElementKind.METHOD || invoked.getKind() == ElementKind.CONSTRUCTOR)) {\n+                        long start = sourcePositions.getStartPosition(info.getCompilationUnit(), node);\n+                        long end = start + 1;\n+                        ExecutableElement invokedMethod = (ExecutableElement) invoked;\n+                        pos = Math.min(pos, invokedMethod.getParameters().size() - 1);\n+                        preText.put(new int[] {(int) start, (int) end},\n+                                    invokedMethod.getParameters().get(pos).getSimpleName() + \":\");\n+                    }\n+                }\n+            }\n+            return super.visitLiteral(node, p);\n+        }\n+\n     }\n \n     public static interface ErrorDescriptionSetter {\n         \n-        public void setHighlights(Document doc, Collection<int[]> highlights);\n+        public void setHighlights(Document doc, Collection<int[]> highlights, Map<int[], String> preText);\n         public void setColorings(Document doc, Map<Token, Coloring> colorings);\n     }    \n }",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/src/org/netbeans/modules/java/editor/base/semantic/SemanticHighlighterBase.java",
                "sha": "58c7a053ed7fb6405e4b7694f9f6c2f5ea06e4cf",
                "status": "modified"
            },
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/DetectorTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/DetectorTest.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/DetectorTest.java",
                "patch": "@@ -252,6 +252,53 @@ public void testGenericBoundIsClassUse() throws Exception {\n         performTest(\"GenericBoundIsClassUse\");\n     }\n \n+    public void testParameterNames() throws Exception {\n+        setShowPrependedText(true);\n+        performTest(\"Test.java\",\n+                    \"package test;\" +\n+                    \"public class Test {\" +\n+                    \"    public void api(String param1, int param2, int param3, float param4, Object... param5) {\" +\n+                    \"    }\" +\n+                    \"    private int getValue() {\" +\n+                    \"        return -1;\" +\n+                    \"    }\" +\n+                    \"    private void test() {\" +\n+                    \"        api(\\\"\\\", 2, getValue(), 1.0f);\" +\n+                    \"        api(\\\"\\\", 2, getValue(), 1.0f, null);\" +\n+                    \"        api(\\\"\\\", 2, getValue(), 1.0f, null, null);\" +\n+                    \"    }\" +\n+                    \"}\",\n+                    \"[PUBLIC, CLASS, DECLARATION], 0:26-0:30\\n\" +\n+                    \"[PUBLIC, METHOD, DECLARATION], 0:48-0:51\\n\" +\n+                    \"[PUBLIC, CLASS], 0:52-0:58\\n\" +\n+                    \"[PARAMETER, DECLARATION], 0:59-0:65\\n\" +\n+                    \"[PARAMETER, DECLARATION], 0:71-0:77\\n\" +\n+                    \"[PARAMETER, DECLARATION], 0:83-0:89\\n\" +\n+                    \"[PARAMETER, DECLARATION], 0:97-0:103\\n\" +\n+                    \"[PUBLIC, CLASS], 0:105-0:111\\n\" +\n+                    \"[PARAMETER, DECLARATION], 0:115-0:121\\n\" +\n+                    \"[PRIVATE, METHOD, DECLARATION], 0:145-0:153\\n\" +\n+                    \"[PRIVATE, METHOD, UNUSED, DECLARATION], 0:197-0:201\\n\" +\n+                    \"[PUBLIC, METHOD], 0:213-0:216\\n\" +\n+                    \"[param1:], 0:217-0:218\\n\" +\n+                    \"[param2:], 0:221-0:222\\n\" +\n+                    \"[PRIVATE, METHOD], 0:224-0:232\\n\" +\n+                    \"[param4:], 0:236-0:237\\n\" +\n+                    \"[PUBLIC, METHOD], 0:250-0:253\\n\" +\n+                    \"[param1:], 0:254-0:255\\n\" +\n+                    \"[param2:], 0:258-0:259\\n\" +\n+                    \"[PRIVATE, METHOD], 0:261-0:269\\n\" +\n+                    \"[param4:], 0:273-0:274\\n\" +\n+                    \"[param5:], 0:279-0:280\\n\" +\n+                    \"[PUBLIC, METHOD], 0:293-0:296\\n\" +\n+                    \"[param1:], 0:297-0:298\\n\" +\n+                    \"[param2:], 0:301-0:302\\n\" +\n+                    \"[PRIVATE, METHOD], 0:304-0:312\\n\" +\n+                    \"[param4:], 0:316-0:317\\n\" +\n+                    \"[param5:], 0:322-0:323\\n\" +\n+                    \"[param5:], 0:328-0:329\\n\");\n+    }\n+\n     @RandomlyFails\n     public void testBLE91246() throws Exception {\n         final boolean wasThrown[] = new boolean[1];\n@@ -411,6 +458,19 @@ protected boolean process(CompilationInfo info, Document doc) {\n         });\n     }\n     \n+    private void performTest(String fileName, String content, String expected) throws Exception {\n+        performTest(fileName, content, new Performer() {\n+            public void compute(CompilationController parameter, Document doc, final ErrorDescriptionSetter setter) {\n+                new SemanticHighlighterBase() {\n+                    @Override\n+                    protected boolean process(CompilationInfo info, Document doc) {\n+                        return process(info, doc, setter);\n+                    }\n+                }.process(parameter, doc);\n+            }\n+        }, false, expected);\n+    }\n+\n     private FileObject testSourceFO;\n     \n     static {",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/DetectorTest.java",
                "sha": "1f25ff4d3cbd5db700adf6db232d9bf5ac932098",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/HighlightImpl.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/HighlightImpl.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/HighlightImpl.java",
                "patch": "@@ -40,6 +40,7 @@\n     private int start;\n     private int end;\n     private Collection<ColoringAttributes> colorings;\n+    private String textPrepend;\n     \n     public HighlightImpl(Document doc, Token token, Collection<ColoringAttributes> colorings) {\n         this.doc       = doc;\n@@ -55,6 +56,14 @@ public HighlightImpl(Document doc, int start, int end, Collection<ColoringAttrib\n         this.colorings = colorings;\n     }\n     \n+    public HighlightImpl(Document doc, int start, int end, String textPrepend) {\n+        this.doc = doc;\n+        this.start = start;\n+        this.end = end;\n+        this.colorings = ColoringAttributes.empty();\n+        this.textPrepend = textPrepend;\n+    }\n+\n     public int getStart() {\n         return start;\n     }\n@@ -88,7 +97,15 @@ private String coloringsToString() {\n                 result.append(attribute.name());\n             }\n         }\n-        \n+\n+        if (textPrepend != null) {\n+            if (!first) {\n+                result.append(\", \");\n+            }\n+\n+            result.append(textPrepend);\n+        }\n+\n         result.append(\"]\");\n         \n         return result.toString();",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/HighlightImpl.java",
                "sha": "dffd3e5ec01b11de2b6eb74876d1c4da03b2e993",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/MarkOccDetTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/MarkOccDetTest.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/MarkOccDetTest.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.netbeans.modules.java.editor.base.semantic;\n \n+import java.util.Collections;\n import java.util.List;\n import javax.swing.text.Document;\n import javax.swing.text.StyledDocument;\n@@ -354,7 +355,7 @@ protected void process(CompilationInfo info, Document doc, SchedulerEvent event)\n                 }.processImpl(info, MarkOccurencesSettings.getCurrentNode(), doc, offset);\n                 \n                 if (spans != null) {\n-                    setter.setHighlights(doc, spans);\n+                    setter.setHighlights(doc, spans, Collections.<int[], String>emptyMap());\n                 }\n             }\n         }, doCompileRecursively);",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/MarkOccDetTest.java",
                "sha": "cd07ba613aa4532ce6055ba32dc40c48f63b670e",
                "status": "modified"
            },
            {
                "additions": 88,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/TestBase.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/TestBase.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 37,
                "filename": "java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/TestBase.java",
                "patch": "@@ -26,6 +26,8 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.io.StringWriter;\n import java.io.Writer;\n import java.net.URL;\n import java.util.ArrayList;\n@@ -95,23 +97,76 @@ protected void performTest(String fileName, final Performer performer) throws Ex\n     }\n     \n     protected void performTest(String fileName, final Performer performer, boolean doCompileRecursively) throws Exception {\n+        performTest(() -> {\n+            File wd = getWorkDir();\n+            File testSource = new File(wd, \"test/\" + fileName + \".java\");\n+\n+            testSource.getParentFile().mkdirs();\n+\n+            File dataFolder = new File(getDataDir(), \"org/netbeans/modules/java/editor/base/semantic/data/\");\n+\n+            for (File f : dataFolder.listFiles()) {\n+                copyToWorkDir(f, new File(wd, \"test/\" + f.getName()));\n+            }\n+\n+            return FileUtil.toFileObject(testSource);\n+        }, performer, doCompileRecursively,\n+        actual -> {\n+            File output = new File(getWorkDir(), getName() + \".out\");\n+            try (Writer out2File = new FileWriter(output)) {\n+                out2File.append(actual);\n+            }\n+\n+            boolean wasException = true;\n+\n+            try {\n+                File goldenFile = getGoldenFile();\n+                File diffFile = new File(getWorkDir(), getName() + \".diff\");\n+\n+                assertFile(output, goldenFile, diffFile);\n+                wasException = false;\n+            } finally {\n+                if (wasException && SHOW_GUI_DIFF) {\n+                    try {\n+                        String name = getClass().getName();\n+\n+                        name = name.substring(name.lastIndexOf('.') + 1);\n+\n+                        ShowGoldenFiles.run(name, getName(), fileName);\n+\n+                    } catch (Exception e) {\n+                        e.printStackTrace();\n+                    }\n+                }\n+            }\n+        });\n+    }\n+\n+    protected void performTest(String filename, String content, final Performer performer, boolean doCompileRecursively, String expected) throws Exception {\n+        performTest(() -> {\n+            FileObject wd = FileUtil.toFileObject(getWorkDir());\n+            FileObject result = FileUtil.createData(wd, filename);\n+\n+            try (Writer out = new OutputStreamWriter(result.getOutputStream())) {\n+                out.write(content);\n+            }\n+\n+            return result;\n+        }, performer, doCompileRecursively,\n+        actual -> {\n+            assertEquals(expected, actual);\n+        });\n+    }\n+\n+    protected void performTest(Input input, final Performer performer, boolean doCompileRecursively, Validator validator) throws Exception {\n         SourceUtilsTestUtil.prepareTest(new String[] {\"org/netbeans/modules/java/editor/resources/layer.xml\"}, new Object[] {new MIMEResolverImpl()});\n         \n \tFileObject scratch = SourceUtilsTestUtil.makeScratchDir(this);\n \tFileObject cache   = scratch.createFolder(\"cache\");\n \t\n         File wd         = getWorkDir();\n-        File testSource = new File(wd, \"test/\" + fileName + \".java\");\n-        \n-        testSource.getParentFile().mkdirs();\n-        \n-        File dataFolder = new File(getDataDir(), \"org/netbeans/modules/java/editor/base/semantic/data/\");\n-        \n-        for (File f : dataFolder.listFiles()) {\n-            copyToWorkDir(f, new File(wd, \"test/\" + f.getName()));\n-        }\n-        \n-        testSourceFO = FileUtil.toFileObject(testSource);\n+\n+        testSourceFO = input.prepare();\n \n         assertNotNull(testSourceFO);\n \n@@ -123,7 +178,7 @@ protected void performTest(String fileName, final Performer performer, boolean d\n         \n         testBuildTo.mkdirs();\n         \n-        FileObject srcRoot = FileUtil.toFileObject(testSource.getParentFile());\n+        FileObject srcRoot = testSourceFO.getParent();\n         SourceUtilsTestUtil.prepareTest(srcRoot,FileUtil.toFileObject(testBuildTo), cache);\n         \n         if (doCompileRecursively) {\n@@ -162,8 +217,7 @@ public void run(CompilationController parameter) {\n \t\n         l.await();\n                 \n-        File output = new File(getWorkDir(), getName() + \".out\");\n-        Writer out = new FileWriter(output);\n+        StringWriter out = new StringWriter();\n         \n         for (HighlightImpl h : highlights) {\n             out.write(h.getHighlightTestData());\n@@ -172,29 +226,8 @@ public void run(CompilationController parameter) {\n         }\n         \n         out.close();\n-                \n-        boolean wasException = true;\n         \n-        try {\n-            File goldenFile = getGoldenFile();\n-            File diffFile = new File(getWorkDir(), getName() + \".diff\");\n-            \n-            assertFile(output, goldenFile, diffFile);\n-            wasException = false;\n-        } finally {\n-            if (wasException && SHOW_GUI_DIFF) {\n-                try {\n-                    String name = getClass().getName();\n-                    \n-                    name = name.substring(name.lastIndexOf('.') + 1);\n-                    \n-                    ShowGoldenFiles.run(name, getName(), fileName);\n-                    \n-                } catch (Exception e) {\n-                    e.printStackTrace();\n-                }\n-            }\n-        }\n+        validator.validate(out.toString());\n     }\n     \n     protected ColoringAttributes getColoringAttribute() {\n@@ -239,6 +272,12 @@ protected final void setSourceLevel(String sourceLevel) {\n         this.sourceLevel = sourceLevel;\n     }\n \n+    private boolean showPrependedText;\n+\n+    protected final void setShowPrependedText(boolean showPrependedText) {\n+        this.showPrependedText = showPrependedText;\n+    }\n+\n     final class ErrorDescriptionSetterImpl implements SemanticHighlighterBase.ErrorDescriptionSetter {\n         private final Set<HighlightImpl> highlights = new TreeSet<HighlightImpl>(new Comparator<HighlightImpl>() {\n             public int compare(HighlightImpl o1, HighlightImpl o2) {\n@@ -251,10 +290,15 @@ public void setErrors(Document doc, List<ErrorDescription> errs, List<TreePathHa\n         }\n     \n         @Override\n-        public void setHighlights(Document doc, Collection<int[]> highlights) {\n+        public void setHighlights(Document doc, Collection<int[]> highlights, Map<int[], String> preText) {\n             for (int[] h : highlights) {\n                 this.highlights.add(new HighlightImpl(doc, h[0], h[1], EnumSet.of(getColoringAttribute())));\n             }\n+            if (showPrependedText) {\n+                for (Entry<int[], String> e : preText.entrySet()) {\n+                    this.highlights.add(new HighlightImpl(doc, e.getKey()[0], e.getKey()[1], e.getValue()));\n+                }\n+            }\n         }\n \n         @Override\n@@ -273,4 +317,11 @@ public String findMIMEType(FileObject fo) {\n         }\n     }\n     \n+    protected interface Input {\n+        public FileObject prepare() throws Exception;\n+    }\n+\n+    protected interface Validator {\n+        public void validate(String actual) throws Exception;\n+    }\n }",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor.base/test/unit/src/org/netbeans/modules/java/editor/base/semantic/TestBase.java",
                "sha": "7b2aca547a2bc064e555956a8d990bc3543c5ad6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor/src/org/netbeans/modules/java/editor/semantic/HighlightsLayerFactoryImpl.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor/src/org/netbeans/modules/java/editor/semantic/HighlightsLayerFactoryImpl.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 0,
                "filename": "java/java.editor/src/org/netbeans/modules/java/editor/semantic/HighlightsLayerFactoryImpl.java",
                "patch": "@@ -38,6 +38,7 @@\n         return new HighlightsLayer[] {\n             HighlightsLayer.create(SemanticHighlighter.class.getName() + \"-1\", ZOrder.SYNTAX_RACK.forPosition(1000), false,semantic),\n             HighlightsLayer.create(SemanticHighlighter.class.getName() + \"-2\", ZOrder.SYNTAX_RACK.forPosition(1500), false, SemanticHighlighter.getImportHighlightsBag(context.getDocument())),\n+            HighlightsLayer.create(SemanticHighlighter.class.getName() + \"-3\", ZOrder.SYNTAX_RACK.forPosition(1600), false, SemanticHighlighter.getPreTextBag(context.getDocument())),\n             //the mark occurrences layer should be \"above\" current row and \"below\" the search layers:\n             HighlightsLayer.create(MarkOccurrencesHighlighter.class.getName(), ZOrder.SHOW_OFF_RACK.forPosition(20), true, MarkOccurrencesHighlighter.getHighlightsBag(context.getDocument())),\n             //\"above\" mark occurrences, \"below\" search layers:",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor/src/org/netbeans/modules/java/editor/semantic/HighlightsLayerFactoryImpl.java",
                "sha": "03a98b4267ec101d658f4be157c6ea46d90beacb",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/netbeans/blob/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor/src/org/netbeans/modules/java/editor/semantic/SemanticHighlighter.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.editor/src/org/netbeans/modules/java/editor/semantic/SemanticHighlighter.java?ref=89712349b8367ba74d1bc3d956ebe9c98d91cd3c",
                "deletions": 1,
                "filename": "java/java.editor/src/org/netbeans/modules/java/editor/semantic/SemanticHighlighter.java",
                "patch": "@@ -23,12 +23,14 @@\n import java.util.IdentityHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Map.Entry;\n import java.util.Set;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n import javax.swing.SwingUtilities;\n import javax.swing.text.Document;\n+import org.netbeans.api.editor.settings.AttributesUtilities;\n \n import org.netbeans.api.java.source.CompilationInfo;\n import org.netbeans.api.java.source.TreePathHandle;\n@@ -60,7 +62,7 @@ protected boolean process(final CompilationInfo info, final Document doc) {\n         \n         public void setErrors(Document doc, List<ErrorDescription> errors, List<TreePathHandle> allUnusedImports) {}\n         \n-        public void setHighlights(final Document doc, final Collection<int[]> highlights) {\n+        public void setHighlights(final Document doc, final Collection<int[]> highlights, Map<int[], String> preText) {\n             SwingUtilities.invokeLater(new Runnable() {\n                 public void run() {\n                     OffsetsBag bag = new OffsetsBag(doc);\n@@ -69,6 +71,12 @@ public void run() {\n                         bag.addHighlight(highlight[0], highlight[1], ColoringManager.getColoringImpl(unused));\n                     }\n                     getImportHighlightsBag(doc).setHighlights(bag);\n+                    \n+                    OffsetsBag preTextBag = new OffsetsBag(doc);\n+                    for (Entry<int[], String> e : preText.entrySet()) {\n+                        preTextBag.addHighlight(e.getKey()[0], e.getKey()[1], AttributesUtilities.createImmutable(\"virtual-text-prepend\", e.getValue()));\n+                    }\n+                    getPreTextBag(doc).setHighlights(preTextBag);\n                 }\n             });\n         }\n@@ -109,4 +117,21 @@ static OffsetsBag getImportHighlightsBag(Document doc) {\n         return bag;\n     }\n \n+    private static final Object KEY_PRE_TEXT = new Object();\n+    static OffsetsBag getPreTextBag(Document doc) {\n+        OffsetsBag bag = (OffsetsBag) doc.getProperty(KEY_PRE_TEXT);\n+        \n+        if (bag == null) {\n+            doc.putProperty(KEY_PRE_TEXT, bag = new OffsetsBag(doc));\n+            \n+            Object stream = doc.getProperty(Document.StreamDescriptionProperty);\n+            \n+            if (stream instanceof DataObject) {\n+//                TimesCollector.getDefault().reportReference(((DataObject) stream).getPrimaryFile(), \"ImportsHighlightsBag\", \"[M] Imports Highlights Bag\", bag);\n+            }\n+        }\n+        \n+        return bag;\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/netbeans/raw/89712349b8367ba74d1bc3d956ebe9c98d91cd3c/java/java.editor/src/org/netbeans/modules/java/editor/semantic/SemanticHighlighter.java",
                "sha": "065d8f80b04504a3df77b91eea8a1d1659d33dde",
                "status": "modified"
            }
        ],
        "message": "Inline parameter name hints for Java (#1247)\n\n* A crude prototype of inline (parameter) hints.\r\n\r\n* Improving appearance of the inline hints.\r\n\r\n* Generalizing highlighting test infrastructure.\r\n\r\n* Adding option to disable/enable the inline hints.\r\n\r\n* Preventing NPE while preparing compound highlights, adding simple tests.\r\n\r\n* Adding simple tests for the parameter name hints.\r\n\r\n* Fixing varargs usage.\r\n\r\n* Improving the view structure by creating a wrapper view over the existing highlight view.\r\n\r\n* Cleaning the views implementation.\r\n\r\n* Fix behavior of String literals which contain embedded escape sequences.\r\n\r\n* Resolving review comments Junichi",
        "parent": "https://github.com/apache/netbeans/commit/af00a5b578d484cda12e06258fd2830d882e0fee",
        "repo": "netbeans",
        "unit_tests": [
            "BundleTest.java",
            "HighlightsListTest.java",
            "TestHighlightsViewFactory.java"
        ]
    },
    "netbeans_8b7f076": {
        "bug_id": "netbeans_8b7f076",
        "commit": "https://github.com/apache/netbeans/commit/8b7f076e1dfc363ad8ab5cc06bba4f729e9884bc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/8b7f076e1dfc363ad8ab5cc06bba4f729e9884bc/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java?ref=8b7f076e1dfc363ad8ab5cc06bba4f729e9884bc",
                "deletions": 1,
                "filename": "platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "patch": "@@ -521,7 +521,7 @@ public static boolean isSoftwareVirtualAdapter(NetworkInterface nif) {\n             // (above from VirtualBox source code)\n             //\n             byte[] macAddress = nif.getHardwareAddress();\n-            if (macAddress != null & macAddress.length >= 3) {\n+            if (macAddress != null && macAddress.length >= 3) {\n                 if ((macAddress[0] == 0x0A || macAddress[0] == 0x08) &&\n                         (macAddress[1] == 0x00) &&\n                         (macAddress[2] == 0x27)) {                ",
                "raw_url": "https://github.com/apache/netbeans/raw/8b7f076e1dfc363ad8ab5cc06bba4f729e9884bc/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "sha": "a2a57cfe1f9532700337033eea082dbb45d5370d",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1189 from lbruun/NETBEANS-1775-fix\n\n[NETBEANS-1775] Fix for NPE",
        "parent": "https://github.com/apache/netbeans/commit/11e08db2accb068c1e16cc33c30d0e54ce1d5505",
        "repo": "netbeans",
        "unit_tests": [
            "LocalAddressUtilsTest.java"
        ]
    },
    "netbeans_a640484": {
        "bug_id": "netbeans_a640484",
        "commit": "https://github.com/apache/netbeans/commit/a640484d9e7fc5176aa137313699696eca533e4b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/a640484d9e7fc5176aa137313699696eca533e4b/lexer.nbbridge/nbproject/project.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/lexer.nbbridge/nbproject/project.properties?ref=a640484d9e7fc5176aa137313699696eca533e4b",
                "deletions": 1,
                "filename": "lexer.nbbridge/nbproject/project.properties",
                "patch": "@@ -16,6 +16,6 @@\n # under the License.\n is.eager=true\n javac.compilerargs=-Xlint:unchecked\n-javac.source=1.6\n+javac.source=1.8\n javadoc.arch=${basedir}/arch.xml\n spec.version.base=1.35.0",
                "raw_url": "https://github.com/apache/netbeans/raw/a640484d9e7fc5176aa137313699696eca533e4b/lexer.nbbridge/nbproject/project.properties",
                "sha": "40c44bdf155b96419ac60b5f090015a4593a0e82",
                "status": "modified"
            },
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/netbeans/blob/a640484d9e7fc5176aa137313699696eca533e4b/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java?ref=a640484d9e7fc5176aa137313699696eca533e4b",
                "deletions": 1,
                "filename": "lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "patch": "@@ -19,6 +19,8 @@\n \n package org.netbeans.modules.lexer.nbbridge;\n \n+import java.util.HashMap;\n+import java.util.Map;\n import org.netbeans.api.editor.mimelookup.MimeLookup;\n import org.netbeans.api.editor.mimelookup.MimePath;\n import org.netbeans.api.lexer.InputAttributes;\n@@ -28,6 +30,8 @@\n import org.netbeans.spi.lexer.LanguageEmbedding;\n import org.netbeans.spi.lexer.LanguageProvider;\n import org.openide.util.Lookup;\n+import org.openide.util.LookupEvent;\n+import org.openide.util.LookupListener;\n \n /**\n  *\n@@ -36,18 +40,50 @@\n @org.openide.util.lookup.ServiceProvider(service=org.netbeans.spi.lexer.LanguageProvider.class)\n public final class MimeLookupLanguageProvider extends LanguageProvider {\n     \n+    private final Map<String, Lookup.Result<Language>> langLkpResultsMap = \n+                  new HashMap<>();\n+    private final Map<String, Lookup.Result<LanguagesEmbeddingMap>> embeddingsLkpResultsMap = \n+                  new HashMap<>();\n+    private final String LOCK = new String(\"MimeLookupLanguageProvider.LOCK\"); //NOI18N\n+ \n     public MimeLookupLanguageProvider() {\n         super();\n     }\n \n     public Language<?> findLanguage(String mimeType) {\n         Lookup lookup = MimeLookup.getLookup(MimePath.parse(mimeType));\n+ \n+        //268649: add lookup listener for Language.class\n+        synchronized (LOCK) {\n+            Lookup.Result result = langLkpResultsMap.get(mimeType);\n+            if (result == null) {\n+                result = lookup.lookup(new Lookup.Template(Language.class));\n+                result.addLookupListener((LookupEvent evt) -> {\n+                    firePropertyChange(PROP_LANGUAGE);\n+                });\n+                langLkpResultsMap.put(mimeType, result);\n+            }\n+        } \n         return (Language<?>)lookup.lookup(Language.class);\n     }\n \n     public LanguageEmbedding<?> findLanguageEmbedding(\n     Token<?> token, LanguagePath languagePath, InputAttributes inputAttributes) {\n-        Lookup lookup = MimeLookup.getLookup(MimePath.parse(languagePath.mimePath()));\n+        String mimePath = languagePath.mimePath();\n+        Lookup lookup = MimeLookup.getLookup(MimePath.parse(mimePath));\n+        \n+        //268649: add lookup listener for LanguagesEmbeddingMap.class            \n+        synchronized (LOCK) {\n+            Lookup.Result result = embeddingsLkpResultsMap.get(mimePath);\n+            if (result == null) {\n+                result = lookup.lookup(new Lookup.Template(LanguagesEmbeddingMap.class));\n+                result.addLookupListener((LookupEvent evt) -> {\n+                    firePropertyChange(PROP_EMBEDDED_LANGUAGE);\n+                });\n+                embeddingsLkpResultsMap.put(mimePath, result);\n+            }\n+        }\n+\n         LanguagesEmbeddingMap map = lookup.lookup(LanguagesEmbeddingMap.class);\n         return map == null ? null : map.getLanguageEmbeddingForTokenName(token.id().name());\n     }",
                "raw_url": "https://github.com/apache/netbeans/raw/a640484d9e7fc5176aa137313699696eca533e4b/lexer.nbbridge/src/org/netbeans/modules/lexer/nbbridge/MimeLookupLanguageProvider.java",
                "sha": "d82b1f71cdeaf21e30ba3815a156aed34998ad7e",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #620 from rtaneja1/rtaneja/donation2_merge268649\n\n#268649-NPE at JsStructureScanner.folds while opening .js file",
        "parent": "https://github.com/apache/netbeans/commit/dc04a3e144276f2ce83991be0a92cc2c657e97a3",
        "repo": "netbeans",
        "unit_tests": [
            "MimeLookupLanguageProviderTest.java"
        ]
    },
    "netbeans_a6ed963": {
        "bug_id": "netbeans_a6ed963",
        "commit": "https://github.com/apache/netbeans/commit/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/netbeans/blob/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/CordovaPerformer.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/webcommon/cordova/src/org/netbeans/modules/cordova/CordovaPerformer.java?ref=a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
                "deletions": 9,
                "filename": "webcommon/cordova/src/org/netbeans/modules/cordova/CordovaPerformer.java",
                "patch": "@@ -171,6 +171,7 @@ private ExecutorTask perform(final String target, final Project project, final b\n         if (provider != null &&\n                 \"ios_1\".equals(provider.getActiveBrowser().getId()) && \n                 (target.equals(BuildPerformer.RUN_IOS) || target.equals(BuildPerformer.BUILD_IOS)) &&\n+                PlatformManager.getPlatform(PlatformManager.IOS_TYPE) != null &&\n                 PlatformManager.getPlatform(PlatformManager.IOS_TYPE).getProvisioningProfilePath() == null\n                 ) {\n             throw new IllegalStateException(Bundle.ERR_NO_Provisioning());\n@@ -324,15 +325,16 @@ private Properties properties(Project p) {\n         props.put(PROP_ANDROID_PROJECT_ACTIVITY, activity);//NOI18N\n         \n         MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n+        if (iosPlatform != null) {\n+            final String provisioningProfilePath = iosPlatform.getProvisioningProfilePath();\n+            if (provisioningProfilePath != null) {\n+                props.put(PROP_PROVISIONING_PROFILE, provisioningProfilePath);\n+            }\n+            final String codeSignIdentity = iosPlatform.getCodeSignIdentity();\n \n-        final String provisioningProfilePath = iosPlatform.getProvisioningProfilePath();\n-        if (provisioningProfilePath != null) {\n-            props.put(PROP_PROVISIONING_PROFILE, provisioningProfilePath);\n-        }\n-        final String codeSignIdentity = iosPlatform.getCodeSignIdentity();\n-\n-        if (codeSignIdentity != null) {\n-            props.put(PROP_CERTIFICATE_NAME, codeSignIdentity);\n+            if (codeSignIdentity != null) {\n+                props.put(PROP_CERTIFICATE_NAME, codeSignIdentity);\n+            }\n         }\n \n         //workaround for some strange behavior of ant execution in netbeans\n@@ -349,7 +351,7 @@ private Properties properties(Project p) {\n \n             props.put(PROP_CONFIG, mobileConfig.getId());\n             mobileConfig.getDevice().addProperties(props);\n-            if (mobileConfig.getId().equals(\"ios\")) { // NOI18N\n+            if (mobileConfig.getId().equals(\"ios\") && iosPlatform != null) { // NOI18N\n                 boolean sdkVerified = false;\n                 try {\n                     for (SDK sdk:iosPlatform.getSDKs()) {",
                "raw_url": "https://github.com/apache/netbeans/raw/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/CordovaPerformer.java",
                "sha": "132a7f8d0d6ba0530d91b812ee789afe0cf24c61",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/netbeans/blob/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/options/MobilePlatformsPanel.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/webcommon/cordova/src/org/netbeans/modules/cordova/options/MobilePlatformsPanel.java?ref=a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
                "deletions": 6,
                "filename": "webcommon/cordova/src/org/netbeans/modules/cordova/options/MobilePlatformsPanel.java",
                "patch": "@@ -24,6 +24,7 @@\n import java.net.MalformedURLException;\n import java.net.URL;\n import java.util.Collection;\n+import java.util.Collections;\n import javax.swing.DefaultComboBoxModel;\n import javax.swing.JLabel;\n import javax.swing.SwingUtilities;\n@@ -49,7 +50,7 @@\n     private final MobilePlatformsOptionsPanelController controller;\n     private DocumentListener documentL;\n     private String codeSignIdentity;\n-    private Collection<? extends ProvisioningProfile> provisioningProfiles;\n+    private Collection<? extends ProvisioningProfile> provisioningProfiles = Collections.emptyList();\n     private String provisioningProfilePath;\n     private boolean inited = false;\n     private RequestProcessor.Task versionTask;\n@@ -273,9 +274,11 @@ private void cordovaVersionBrowseActionPerformed(java.awt.event.ActionEvent evt)\n \n     void load() {\n         final MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n-        codeSignIdentity = iosPlatform.getCodeSignIdentity();\n-        provisioningProfiles = iosPlatform.getProvisioningProfiles();\n-        provisioningProfilePath = iosPlatform.getProvisioningProfilePath();\n+        if (iosPlatform != null) {\n+            codeSignIdentity = iosPlatform.getCodeSignIdentity();\n+            provisioningProfiles = iosPlatform.getProvisioningProfiles();\n+            provisioningProfilePath = iosPlatform.getProvisioningProfilePath();\n+        }\n         SwingUtilities.invokeLater(new Runnable() {\n             @Override\n             public void run() {\n@@ -309,8 +312,12 @@ public void run() {\n     void setupComponenets() {\n         if (!inited) {\n             removeAll();\n-            initComponents();            \n-            \n+            initComponents();\n+            MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n+            if (iosPlatform == null) {\n+                iOSPanel.setVisible(false);\n+            }\n+\n             cordovaPathField.getDocument().addDocumentListener(new DocumentListener() {\n                 @Override\n                 public void insertUpdate(DocumentEvent e) {",
                "raw_url": "https://github.com/apache/netbeans/raw/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/options/MobilePlatformsPanel.java",
                "sha": "66b586d0477df1eab3e081ccc3ea69bb4ba0d3ac",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/netbeans/blob/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/project/CordovaPanel.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/webcommon/cordova/src/org/netbeans/modules/cordova/project/CordovaPanel.java?ref=a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
                "deletions": 0,
                "filename": "webcommon/cordova/src/org/netbeans/modules/cordova/project/CordovaPanel.java",
                "patch": "@@ -22,6 +22,8 @@\n import javax.swing.event.DocumentEvent;\n import javax.swing.event.DocumentListener;\n import org.netbeans.modules.cordova.CordovaPerformer;\n+import org.netbeans.modules.cordova.platforms.api.PlatformManager;\n+import org.netbeans.modules.cordova.platforms.spi.MobilePlatform;\n import org.netbeans.modules.cordova.updatetask.SourceConfig;\n import org.netbeans.modules.cordova.wizard.CordovaTemplate;\n import org.openide.util.NbBundle;\n@@ -71,6 +73,10 @@ private void fireChange() {\n     public CordovaPanel() {\n         this(null);\n         platformsPane.setVisible(true);\n+        MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n+        if (iosPlatform == null) {\n+            iOSPanel.setVisible(false);\n+        }\n     }\n     \n     public void setControlsEnabled(boolean enabled) {",
                "raw_url": "https://github.com/apache/netbeans/raw/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/project/CordovaPanel.java",
                "sha": "2053510cda1aba48ff4d29484951efa3ae7c7718",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/netbeans/blob/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/wizard/CordovaProjectExtender.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/webcommon/cordova/src/org/netbeans/modules/cordova/wizard/CordovaProjectExtender.java?ref=a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
                "deletions": 2,
                "filename": "webcommon/cordova/src/org/netbeans/modules/cordova/wizard/CordovaProjectExtender.java",
                "patch": "@@ -22,6 +22,7 @@\n import org.netbeans.modules.cordova.platforms.spi.Device;\n import java.io.File;\n import java.io.IOException;\n+import org.netbeans.modules.cordova.platforms.spi.MobilePlatform;\n import org.netbeans.modules.cordova.project.ConfigUtils;\n import org.netbeans.modules.web.clientproject.api.ClientSideModule;\n import org.netbeans.modules.web.clientproject.spi.ClientProjectExtender;\n@@ -67,7 +68,8 @@ public static void createMobileConfigs(FileObject projectRoot) throws IOExceptio\n             ios.put(ConfigUtils.DISPLAY_NAME_PROP, Bundle.LBL_iPhoneSimulator());\n             ios.put(Device.TYPE_PROP, PlatformManager.IOS_TYPE);\n             ios.put(Device.DEVICE_PROP, Device.EMULATOR);\n-            ios.put(\"ios.build.sdk\", PlatformManager.getPlatform(PlatformManager.IOS_TYPE).getPrefferedTarget().getIdentifier()); // NOI18N\n+            MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n+            ios.put(\"ios.build.sdk\", iosPlatform == null ? \"\" : iosPlatform.getPrefferedTarget().getIdentifier()); // NOI18N\n             ios.put(\"ios.build.arch\", \"i386\"); // NOI18N\n \n             ConfigUtils.createConfigFile(projectRoot, PlatformManager.IOS_TYPE, ios);//NOI18N\n@@ -82,7 +84,8 @@ public static void createMobileConfigs(FileObject projectRoot) throws IOExceptio\n             iosdev.put(ConfigUtils.DISPLAY_NAME_PROP, Bundle.LBL_iPhoneDevice());\n             iosdev.put(Device.TYPE_PROP, PlatformManager.IOS_TYPE);\n             iosdev.put(Device.DEVICE_PROP, Device.DEVICE);\n-            String sim = PlatformManager.getPlatform(PlatformManager.IOS_TYPE).getPrefferedTarget().getIdentifier();\n+            MobilePlatform iosPlatform = PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n+            String sim = iosPlatform == null ? \"\" : iosPlatform.getPrefferedTarget().getIdentifier();\n             iosdev.put(\"ios.build.sdk\", sim.replace(\"iphonesimulator\", \"iphoneos\")); // NOI18N\n             iosdev.put(\"ios.build.arch\", sim.startsWith(\"iphonesimulator6\")?\"armv6 armv7\":\"armv7 armv7s\"); // NOI18N\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/src/org/netbeans/modules/cordova/wizard/CordovaProjectExtender.java",
                "sha": "c520f7b658c3eb07986f0b8982027a6aaa466e3b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/netbeans/blob/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/test/unit/src/org/netbeans/modules/web/clientproject/cordova/AndroidPlatformTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/webcommon/cordova/test/unit/src/org/netbeans/modules/web/clientproject/cordova/AndroidPlatformTest.java?ref=a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371",
                "deletions": 2,
                "filename": "webcommon/cordova/test/unit/src/org/netbeans/modules/web/clientproject/cordova/AndroidPlatformTest.java",
                "patch": "@@ -180,8 +180,10 @@ private int getPid() throws IOException {\n     @Test\n     public void testListSdks() throws Exception {\n         MobilePlatform instance = org.netbeans.modules.cordova.platforms.api.PlatformManager.getPlatform(PlatformManager.IOS_TYPE);\n-        for (SDK sdks: instance.getSDKs()) {\n-            System.out.println(sdks);\n+        if (instance != null) {\n+            for (SDK sdks : instance.getSDKs()) {\n+                System.out.println(sdks);\n+            }\n         }\n     }\n     ",
                "raw_url": "https://github.com/apache/netbeans/raw/a6ed9637ccadbd6e47fd2bac34a0d2b73c9d6371/webcommon/cordova/test/unit/src/org/netbeans/modules/web/clientproject/cordova/AndroidPlatformTest.java",
                "sha": "a3609839b76ef480a421bcf01cb3c2a6aea5df1d",
                "status": "modified"
            }
        ],
        "message": "[NETBEANS-1342] Hide the panel for iOS in the Mobile Platforms Options (#953)\n\n* [NETBEANS-1342] Hide the panel for iOS in the Mobile Platforms Options\r\n\r\nJust hide the panel because the cordova.platforms.ios module is not available (see #856)\r\n\r\n* Prevent NPE\r\n\r\nJust check whether PlatformManager.getPlatform(PlatformManager.IOS_TYPE) is null\r\n\r\n* Hide iOSPanel in the CordovaPanel",
        "parent": "https://github.com/apache/netbeans/commit/a520c261a9c8bdde81988b09813452812a13d8e7",
        "repo": "netbeans",
        "unit_tests": [
            "CordovaPerformerTest.java"
        ]
    },
    "netbeans_b3601d6": {
        "bug_id": "netbeans_b3601d6",
        "commit": "https://github.com/apache/netbeans/commit/b3601d6958c12eda5031ffda5abe34ff00603a3e",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/netbeans/blob/b3601d6958c12eda5031ffda5abe34ff00603a3e/java/java.source.base/src/org/netbeans/modules/java/source/pretty/ImportAnalysis2.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java/java.source.base/src/org/netbeans/modules/java/source/pretty/ImportAnalysis2.java?ref=b3601d6958c12eda5031ffda5abe34ff00603a3e",
                "deletions": 2,
                "filename": "java/java.source.base/src/org/netbeans/modules/java/source/pretty/ImportAnalysis2.java",
                "patch": "@@ -258,7 +258,7 @@ private void addImport(ImportTree imp) {\n \n     //Note: this method should return either \"orig\" or a IdentifierTree or MemberSelectTree\n     //no other tree type is not allowed - see ImmutableTreeTranslator.translateStable(Tree)\n-    public ExpressionTree resolveImport(MemberSelectTree orig, Element element) {\n+    public ExpressionTree resolveImport(MemberSelectTree orig, final Element element) {\n         if (visibleThroughClasses == null || element == null || cs != null && cs.useFQNs()) {\n             //may happen for package clause\n             return orig;\n@@ -390,7 +390,7 @@ private boolean checkPackagesForStarImport(String pkgName, CodeStyle cs) {\n     }\n \n     private PackageElement getPackageOf(Element el) {\n-        while (el.getKind() != ElementKind.PACKAGE) el = el.getEnclosingElement();\n+        while ((el != null) && (el.getKind() != ElementKind.PACKAGE)) el = el.getEnclosingElement();\n \n         return (PackageElement) el;\n     }",
                "raw_url": "https://github.com/apache/netbeans/raw/b3601d6958c12eda5031ffda5abe34ff00603a3e/java/java.source.base/src/org/netbeans/modules/java/source/pretty/ImportAnalysis2.java",
                "sha": "e88ef5d79e27518dfbe38f8c7bbb7f04d54b151c",
                "status": "modified"
            }
        ],
        "message": "[NETBEANS-2980] Fix potential NPE on ImportAnalysis2.getPackage()",
        "parent": "https://github.com/apache/netbeans/commit/18203cea4e5776d25893de172929c9b64603cab0",
        "repo": "netbeans",
        "unit_tests": [
            "ImportAnalysis2Test.java"
        ]
    },
    "netbeans_cc23fcf": {
        "bug_id": "netbeans_cc23fcf",
        "commit": "https://github.com/apache/netbeans/commit/cc23fcf0e4c9d626109237d078c942661d80f00b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/cc23fcf0e4c9d626109237d078c942661d80f00b/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java?ref=cc23fcf0e4c9d626109237d078c942661d80f00b",
                "deletions": 1,
                "filename": "platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "patch": "@@ -521,7 +521,7 @@ public static boolean isSoftwareVirtualAdapter(NetworkInterface nif) {\n             // (above from VirtualBox source code)\n             //\n             byte[] macAddress = nif.getHardwareAddress();\n-            if (macAddress != null & macAddress.length >= 3) {\n+            if (macAddress != null && macAddress.length >= 3) {\n                 if ((macAddress[0] == 0x0A || macAddress[0] == 0x08) &&\n                         (macAddress[1] == 0x00) &&\n                         (macAddress[2] == 0x27)) {                ",
                "raw_url": "https://github.com/apache/netbeans/raw/cc23fcf0e4c9d626109237d078c942661d80f00b/platform/core.network/src/org/netbeans/core/network/utils/LocalAddressUtils.java",
                "sha": "a2a57cfe1f9532700337033eea082dbb45d5370d",
                "status": "modified"
            }
        ],
        "message": "[NETBEANS-1775] Fix for NPE\n\nSimple typo: '&' should have been '&&'. This caused an NPE\nwhen NetBeans was used with a VPN connection.",
        "parent": "https://github.com/apache/netbeans/commit/11e08db2accb068c1e16cc33c30d0e54ce1d5505",
        "repo": "netbeans",
        "unit_tests": [
            "LocalAddressUtilsTest.java"
        ]
    },
    "netbeans_d305cd1": {
        "bug_id": "netbeans_d305cd1",
        "commit": "https://github.com/apache/netbeans/commit/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1",
        "file": [
            {
                "additions": 211,
                "blob_url": "https://github.com/apache/netbeans/blob/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/CachedHiDPIIcon.java",
                "changes": 211,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/openide.util.ui/src/org/openide/util/CachedHiDPIIcon.java?ref=d305cd16e9a4ab88a71ced7e7b8622d26542b2f1",
                "deletions": 0,
                "filename": "platform/openide.util.ui/src/org/openide/util/CachedHiDPIIcon.java",
                "patch": "@@ -0,0 +1,211 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util;\n+\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Image;\n+import java.awt.geom.AffineTransform;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.Map;\n+import java.util.Objects;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+\n+/**\n+ * Abstract base class for {@link javax.swing.Icon} implementations that need to cache scaled bitmap\n+ * representations for HiDPI displays. Bitmaps for multiple HiDPI scaling factors can be cached at\n+ * the same time, e.g. for multi-monitor setups.\n+ */\n+abstract class CachedHiDPIIcon extends ImageIcon {\n+    /**\n+     * The maximum size of the cache, as a multiple of the size of the icon at 100% scaling. For\n+     * example, storing three images at 100%, 150%, and 200% scaling, respectively, yields a total\n+     * cache size of 1.0^2 + 1.5^2 + 2^2 = 7.2.\n+     */\n+    private static final double MAX_CACHE_SIZE = 10.0;\n+    private final int width;\n+    private final int height;\n+    /**\n+     * Cache map with least-recently-used iteration order.\n+     */\n+    private final Map<CachedImageKey, Image> cache =\n+            new LinkedHashMap<CachedImageKey, Image>(16, 0.75f, true);\n+    /**\n+     * Total size of the images currently in the cache, in the same units as\n+     * {@link #MAX_CACHE_SIZE}.\n+     */\n+    private double cacheSize = 0.0;\n+\n+    /**\n+     * Constructor to be used by subclasses.\n+     */\n+    protected CachedHiDPIIcon(int width, int height) {\n+        if (width < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        if (height < 0) {\n+            throw new IllegalArgumentException();\n+        }\n+        this.width = width;\n+        this.height = height;\n+    }\n+\n+    private synchronized Image getScaledImageCached(Component c, CachedImageKey key) {\n+        Image ret = cache.get(key);\n+        if (ret != null) {\n+            return ret;\n+        }\n+        final double scale = key.getScale();\n+        final int deviceWidth = (int) Math.ceil(getIconWidth() * scale);\n+        final int deviceHeight = (int) Math.ceil(getIconHeight() * scale);\n+        final Image img =\n+                createImage(c, key.getGraphicsConfiguration(), deviceWidth, deviceHeight, scale);\n+        final double imgSize = key.getSize();\n+        if (imgSize <= MAX_CACHE_SIZE) {\n+            /* Evict least-recently-used images from the cache until we have space for the latest\n+            image. */\n+            final Iterator<CachedImageKey> iter = cache.keySet().iterator();\n+            while (cacheSize + imgSize > MAX_CACHE_SIZE && iter.hasNext()) {\n+                CachedImageKey removeKey = iter.next();\n+                iter.remove();\n+                cacheSize -= removeKey.getSize();\n+            }\n+            cache.put(key, img);\n+            cacheSize += imgSize;\n+        }\n+        return img;\n+    }\n+\n+    @Override\n+    public final void paintIcon(Component c, Graphics g0, int x, int y) {\n+        final Graphics2D g = (Graphics2D) g0;\n+        CachedImageKey key = CachedImageKey.create(g);\n+        final AffineTransform oldTransform = g.getTransform();\n+        try {\n+            g.translate(x, y);\n+            Image scaledImage = getScaledImageCached(c, key);\n+            /* Scale the image down to its logical dimensions, then draw it at the device pixel\n+            boundary. In VectorIcon, we tried to be a lot more conservative, taking great care not\n+            to draw on any device pixels that were only partially bounded by the icon (due to\n+            non-integral scaling factors, e.g. 150%). That was probably overkill; it's a lot easier\n+            to assume that partially bounded pixels are OK to draw on, since all icon bitmaps of a\n+            given scaling factor then end up being the same number of device pixels wide and tall.\n+            And we need consistent dimensions to be able keep cached images in any case. For these\n+            reasons, round the X and Y translations (which denote the position in device pixels)\n+            _down_ here.*/\n+            AffineTransform tx2 = g.getTransform();\n+            g.setTransform(new AffineTransform(1, 0, 0, 1,\n+                    (int) tx2.getTranslateX(),\n+                    (int) tx2.getTranslateY()));\n+            g.drawImage(scaledImage, 0, 0, null);\n+        } finally {\n+            g.setTransform(oldTransform);\n+        }\n+    }\n+\n+    @Override\n+    public final int getIconWidth() {\n+        return width;\n+    }\n+\n+    @Override\n+    public final int getIconHeight() {\n+        return height;\n+    }\n+\n+    /**\n+     * Create a scaled image containing the graphics of this icon. The result may be cached.\n+     *\n+     * @param c the component that was passed to {@link Icon#paintIcon(Component,Graphics,int,int)}.\n+     *        The cache will <em>not</em> be invalidated if {@code c} or its state changes, so \n+     *        subclasses should avoid depending on it if possible. This parameter exists mainly to\n+     *        ensure compatibility with existing Icon implementations that may be used as delegates.\n+     *        Future implementations might also elect to simply pass a dummy Component instance\n+     *        here.\n+     * @param graphicsConfiguration the configuration of the surface on which the image will be\n+     * painted\n+     * @param deviceWidth the required width of the image, with scaling already applied\n+     * @param deviceHeight the required height of the image, with scaling already applied\n+     * @param scale the HiDPI scaling factor detected in {@code graphicsConfiguration}\n+     */\n+    protected abstract Image createImage(Component c, GraphicsConfiguration graphicsConfiguration,\n+            int deviceWidth, int deviceHeight, double scale);\n+\n+    private static final class CachedImageKey {\n+        private final GraphicsConfiguration gconf;\n+        private final double scale;\n+\n+        public CachedImageKey(GraphicsConfiguration gconf, double scale) {\n+            Parameters.notNull(\"gconf\", gconf);\n+            if (scale <= 0.0) {\n+                throw new IllegalArgumentException();\n+            }\n+            this.gconf = gconf;\n+            this.scale = scale;\n+        }\n+\n+        public static CachedImageKey create(Graphics2D g) {\n+            final AffineTransform tx = g.getTransform();\n+            final int txType = tx.getType();\n+            final double scale;\n+            if (txType == AffineTransform.TYPE_UNIFORM_SCALE ||\n+                txType == (AffineTransform.TYPE_UNIFORM_SCALE | AffineTransform.TYPE_TRANSLATION))\n+            {\n+                scale = tx.getScaleX();\n+            } else {\n+                scale = 1.0;\n+            }\n+            return new CachedImageKey(g.getDeviceConfiguration(), scale);\n+        }\n+\n+        public double getScale() {\n+            return scale;\n+        }\n+\n+        /**\n+         * Get the size of this image as a multiple of the original image's size at 100% scaling.\n+         */\n+        public double getSize() {\n+            return Math.pow(getScale(), 2.0);\n+        }\n+\n+        public GraphicsConfiguration getGraphicsConfiguration() {\n+            return gconf;\n+        }\n+\n+        @Override\n+        public int hashCode() {\n+            return Objects.hash(gconf, scale);\n+        }\n+\n+        @Override\n+        public boolean equals(Object obj) {\n+            if (!(obj instanceof CachedImageKey)) {\n+                return false;\n+            }\n+            final CachedImageKey other = (CachedImageKey) obj;\n+            return this.gconf.equals(other.gconf) &&\n+                   this.scale == other.scale;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/CachedHiDPIIcon.java",
                "sha": "ecce663bcc761bd4656eb28751121f6b48b5edea",
                "status": "added"
            },
            {
                "additions": 79,
                "blob_url": "https://github.com/apache/netbeans/blob/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/FilteredIcon.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/openide.util.ui/src/org/openide/util/FilteredIcon.java?ref=d305cd16e9a4ab88a71ced7e7b8622d26542b2f1",
                "deletions": 0,
                "filename": "platform/openide.util.ui/src/org/openide/util/FilteredIcon.java",
                "patch": "@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.openide.util;\n+\n+import java.awt.Component;\n+import java.awt.Graphics;\n+import java.awt.Graphics2D;\n+import java.awt.GraphicsConfiguration;\n+import java.awt.Image;\n+import java.awt.Rectangle;\n+import java.awt.Toolkit;\n+import java.awt.Transparency;\n+import java.awt.image.BufferedImage;\n+import java.awt.image.FilteredImageSource;\n+import java.awt.image.RGBImageFilter;\n+import javax.swing.Icon;\n+import javax.swing.ImageIcon;\n+\n+/**\n+ * A filtered variation of a provided delegate icon. Any kind of delegate implementation can be\n+ * used. In particular, this class preserves the full fidelity of HiDPI icons, such as instances\n+ * of {@link VectorIcon}, or {@link ImageIcon} instances delegating to a\n+ * {@code java.awt.image.MultiResolutionImage} (available since Java 9 and above).\n+ *\n+ * <p>Note that state passed through the {code Component} parameter of the\n+ * {@link Icon#paintIcon(Component,Graphics,int,int)} method will only be current as of the time the\n+ * icon is initially entered into the cache.\n+ */\n+final class FilteredIcon extends CachedHiDPIIcon {\n+    private final RGBImageFilter filter;\n+    private final Icon delegate;\n+\n+    private FilteredIcon(RGBImageFilter filter, Icon delegate) {\n+        super(delegate.getIconWidth(), delegate.getIconHeight());\n+        Parameters.notNull(\"filter\", filter);\n+        Parameters.notNull(\"delegate\", delegate);\n+        this.filter = filter;\n+        this.delegate = delegate;\n+    }\n+\n+    public static Icon create(RGBImageFilter filter, Icon delegate) {\n+        return new FilteredIcon(filter, delegate);\n+    }\n+\n+    @Override\n+    protected Image createImage(\n+            Component c, GraphicsConfiguration graphicsConfiguration,\n+            int deviceWidth, int deviceHeight, double scale)\n+    {\n+        final BufferedImage img = graphicsConfiguration.createCompatibleImage(\n+                deviceWidth, deviceHeight, Transparency.TRANSLUCENT);\n+        final Graphics2D imgG = img.createGraphics();\n+        try {\n+            imgG.clip(new Rectangle(0, 0, img.getWidth(), img.getHeight()));\n+            imgG.scale(scale, scale);\n+            delegate.paintIcon(c, imgG, 0, 0);\n+        } finally {\n+            imgG.dispose();\n+        }\n+        return Toolkit.getDefaultToolkit().createImage(\n+                new FilteredImageSource(img.getSource(), filter));\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/FilteredIcon.java",
                "sha": "94499eb8a2cc284103ffda0821cb5caaffe7217b",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/netbeans/blob/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/ImageUtilities.java",
                "changes": 62,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/openide.util.ui/src/org/openide/util/ImageUtilities.java?ref=d305cd16e9a4ab88a71ced7e7b8622d26542b2f1",
                "deletions": 44,
                "filename": "platform/openide.util.ui/src/org/openide/util/ImageUtilities.java",
                "patch": "@@ -19,7 +19,6 @@\n \n package org.openide.util;\n \n-import java.awt.Color;\n import java.awt.Component;\n import java.awt.Graphics;\n import java.awt.HeadlessException;\n@@ -31,8 +30,6 @@\n import java.awt.image.ColorModel;\n import java.awt.image.FilteredImageSource;\n import java.awt.image.ImageObserver;\n-import java.awt.image.ImageProducer;\n-import java.awt.image.IndexColorModel;\n import java.awt.image.RGBImageFilter;\n import java.awt.image.WritableRaster;\n import java.io.IOException;\n@@ -138,6 +135,10 @@ public static final Image loadImage(String resourceID) {\n      * @return icon's Image or null if the icon cannot be loaded\n      */\n     public static final Image loadImage(String resource, boolean localized) {\n+        // Avoid a NPE that could previously occur in the isDarkLaF case only. See NETBEANS-2401.\n+        if (resource == null) {\n+            return null;\n+        }\n         Image image = null;\n         if( isDarkLaF() ) {\n             image = getIcon(addDarkSuffix(resource), localized);\n@@ -149,8 +150,7 @@ public static final Image loadImage(String resource, boolean localized) {\n             // only non _dark images need filtering\n             RGBImageFilter imageFilter = getImageIconFilter();\n             if (null != image && null != imageFilter) {\n-                image = Toolkit.getDefaultToolkit()\n-                        .createImage(new FilteredImageSource(image.getSource(), imageFilter));\n+                image = createFilteredImage(imageFilter, image);\n             }\n         }\n         return image;\n@@ -342,7 +342,10 @@ public static final Image addToolTipToImage(Image image, String text) {\n      */\n     public static Icon createDisabledIcon(Icon icon)  {\n         Parameters.notNull(\"icon\", icon);\n-        return new LazyDisabledIcon(icon2Image(icon));\n+        /* FilteredIcon's Javadoc mentions a caveat about the Component parameter that is passed to\n+        Icon.paintIcon. It's not really a problem; previous implementations had the same\n+        behavior. */\n+        return FilteredIcon.create(DisabledButtonFilter.INSTANCE, icon);\n     }\n \n     /**\n@@ -353,7 +356,14 @@ public static Icon createDisabledIcon(Icon icon)  {\n      */\n     public static Image createDisabledImage(Image image)  {\n         Parameters.notNull(\"image\", image);\n-        return LazyDisabledIcon.createDisabledImage(image);\n+        return createFilteredImage(DisabledButtonFilter.INSTANCE, image);\n+    }\n+\n+    private static Image createFilteredImage(RGBImageFilter filter, Image image) {\n+        Parameters.notNull(\"filter\", filter);\n+        Parameters.notNull(\"image\", image);\n+        return Toolkit.getDefaultToolkit().createImage(\n+                new FilteredImageSource(image.getSource(), filter));\n     }\n \n     /**\n@@ -880,44 +890,8 @@ public Object getProperty(String name, ImageObserver observer) {\n         }\n     }\n \n-    private static class LazyDisabledIcon implements Icon {\n-\n-        /** Shared instance of filter for disabled icons */\n-        private static final RGBImageFilter DISABLED_BUTTON_FILTER = new DisabledButtonFilter();\n-        private Image img;\n-        private Icon disabledIcon;\n-\n-        public LazyDisabledIcon(Image img) {\n-            assert null != img;\n-            this.img = img;\n-        }\n-\n-        public void paintIcon(Component c, Graphics g, int x, int y) {\n-            getDisabledIcon().paintIcon(c, g, x, y);\n-        }\n-\n-        public int getIconWidth() {\n-            return getDisabledIcon().getIconWidth();\n-        }\n-\n-        public int getIconHeight() {\n-            return getDisabledIcon().getIconHeight();\n-        }\n-\n-        private synchronized Icon getDisabledIcon() {\n-            if (null == disabledIcon) {\n-                disabledIcon = new ImageIcon(createDisabledImage(img));\n-            }\n-            return disabledIcon;\n-        }\n-\n-        static Image createDisabledImage(Image img) {\n-            ImageProducer prod = new FilteredImageSource(img.getSource(), DISABLED_BUTTON_FILTER);\n-            return Toolkit.getDefaultToolkit().createImage(prod);\n-        }\n-    }\n-\n     private static class DisabledButtonFilter extends RGBImageFilter {\n+        public static final RGBImageFilter INSTANCE = new DisabledButtonFilter();\n \n         DisabledButtonFilter() {\n             canFilterIndexColorModel = true;",
                "raw_url": "https://github.com/apache/netbeans/raw/d305cd16e9a4ab88a71ced7e7b8622d26542b2f1/platform/openide.util.ui/src/org/openide/util/ImageUtilities.java",
                "sha": "4a46b6ad2d9430b618374b25294c8101f0ea7941",
                "status": "modified"
            }
        ],
        "message": "[NETBEANS-1586] Make ImageUtilities.createDisabledIcon work with HiDPI icons\n\nIntroduced a FilteredIcon class which extends from a new CachedHiDPIIcon class.\nThe CachedHiDPIIcon class will be used again in the future; it was originally\ndesigned for an SVG-based Icon implementation, which will be contributed\nseparately in the future. It is generic enough to work with any kind of custom\nIcon implementation that needs caching.\n\nAlso make color filtering of icons for dark themes work with HiDPI icons, using\nthe same FilteredIcon class.\n\nAlso improved a null handling case in ImageUtilities.loadImage. Passing a null\nresource used to be valid before (yielding a null return value), but caused a\nNPE on dark LAFs. Since it worked in the common non-dark case, it should\narguably work in the dark case as well. This might fix NETBEANS-2401, or it\nmight just lead to an NPE elsewhere in that case.",
        "parent": "https://github.com/apache/netbeans/commit/d7d467c342a7ab4d0759f67c276d4d75ef8fb275",
        "repo": "netbeans",
        "unit_tests": [
            "ImageUtilitiesTest.java"
        ]
    },
    "netbeans_d39ec0d": {
        "bug_id": "netbeans_d39ec0d",
        "commit": "https://github.com/apache/netbeans/commit/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/nbproject/project.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/nbproject/project.xml?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 0,
                "filename": "groovy/gradle.java/nbproject/project.xml",
                "patch": "@@ -305,6 +305,25 @@\n                     </run-dependency>\n                 </dependency>\n             </module-dependencies>\n+            <test-dependencies>\n+                <test-type>\n+                    <name>unit</name>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.libs.junit4</code-name-base>\n+                        <compile-dependency/>\n+                    </test-dependency>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.modules.nbjunit</code-name-base>\n+                        <recursive/>\n+                        <compile-dependency/>\n+                    </test-dependency>\n+                    <test-dependency>\n+                        <code-name-base>org.netbeans.modules.gradle</code-name-base>\n+                        <compile-dependency/>\n+                        <test/>\n+                    </test-dependency>\n+                </test-type>\n+            </test-dependencies>\n             <public-packages>\n                 <package>org.netbeans.modules.gradle.java.api</package>\n                 <package>org.netbeans.modules.gradle.java.api.output</package>",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/nbproject/project.xml",
                "sha": "b2c293fb04873e1f12f6f798723c10222624920e",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 4,
                "filename": "groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "patch": "@@ -48,20 +48,26 @@\n  * @author Laszlo Kishalmi\n  */\n @ProjectServiceProvider(service = OutputProcessorFactory.class, projectType = NbGradleProject.GRADLE_PLUGIN_TYPE + \"/java-base\")\n-public class JavaCompilerProcessorFactory implements OutputProcessorFactory {\n+public final class JavaCompilerProcessorFactory implements OutputProcessorFactory {\n \n     @Override\n     public Set<? extends OutputProcessor> createOutputProcessors(RunConfig cfg) {\n         return new HashSet<>(Arrays.asList(new StackTraceProcessor(cfg)));\n     }\n \n-    private static class StackTraceProcessor implements OutputProcessor {\n+    static class StackTraceProcessor implements OutputProcessor {\n \n         private static final Pattern STACKTRACE_PATTERN = Pattern.compile(\"(.*)at ((\\\\w[\\\\w\\\\.]*)/)?(\\\\w[\\\\w\\\\.\\\\$<>]*)\\\\((\\\\w+)\\\\.java\\\\:([0-9]+)\\\\)(.*)\");\n         private static final IOColors.OutputType OUT_TYPE = IOColors.OutputType.ERROR;\n         private final Project project;\n         private final ClassPath classPath;\n \n+        // Used in unittest only\n+        StackTraceProcessor() {\n+            project = null;\n+            classPath = null;\n+        }\n+\n         private StackTraceProcessor(RunConfig cfg) {\n             project = cfg.getProject();\n             ProjectSourcesClassPathProvider cpProvider = project.getLookup().lookup(ProjectSourcesClassPathProvider.class);\n@@ -78,15 +84,15 @@ public boolean processLine(OutputDisplayer out, String line) {\n             Matcher m = STACKTRACE_PATTERN.matcher(line);\n             if (m.matches()) {\n                 String prefix = m.group(1);\n-                String modulePrefix = m.group(2);\n+                String modulePrefix = m.group(2) != null ? m.group(2) : \"\"; //NOI18N\n                 //String module = m.group(3);\n                 String method = m.group(4);\n                 String fileName = m.group(5);\n                 String lineNum = m.group(6);\n                 String postfix = m.group(7);\n \n                 int ppos = method.indexOf(fileName);\n-                if ((ppos >= 0) && (project != null)) {\n+                if (ppos >= 0) {\n                     String pack = method.substring(0, ppos).replace('.', '/');\n                     String javaName = pack + fileName + \".java\"; //NOI18N\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactory.java",
                "sha": "0b9d64792dcc815bf87548e023a4a30cd06939e5",
                "status": "modified"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 0,
                "filename": "groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.java.output;\n+\n+import static org.junit.Assert.*;\n+import org.junit.Test;\n+import org.netbeans.modules.gradle.api.output.OutputDisplayerMock;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class JavaCompilerProcessorFactoryTest {\n+\n+    private final String JAVA_8_STACKTRACE_1  = \"        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\";\n+    private final String JAVA_9_STACKTRACE_1  = \"        at jdk.zipfs/jdk.nio.zipfs.JarFileSystem.getVersionMap(JarFileSystem.java:137)\";\n+    private final String JAVA_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1: error: class, interface, or enum expected\";\n+\n+    @Test\n+    public void testStackTraceProcessor1() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(stp.processLine(od, JAVA_8_STACKTRACE_1));\n+        assertEquals(JAVA_8_STACKTRACE_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(outputs[2].text, \"\");\n+        assertEquals(outputs[3].text, \"org.junit.jupiter.api.AssertionUtils.fail\");\n+        assertEquals(outputs[5].text, \"AssertionUtils.java:55\");\n+        assertNotNull(outputs[5].action);\n+    }\n+\n+    @Test\n+    public void testStackTraceProcessor2() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(stp.processLine(od, JAVA_9_STACKTRACE_1));\n+        assertEquals(JAVA_9_STACKTRACE_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(outputs[2].text, \"jdk.zipfs/\");\n+        assertEquals(outputs[3].text, \"jdk.nio.zipfs.JarFileSystem.getVersionMap\");\n+        assertEquals(outputs[5].text, \"JarFileSystem.java:137\");\n+        assertNotNull(outputs[5].action);\n+    }\n+\n+    @Test\n+    public void testStackTraceProcessor3() {\n+        JavaCompilerProcessorFactory.StackTraceProcessor stp = new JavaCompilerProcessorFactory.StackTraceProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(stp.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle.java/test/unit/src/org/netbeans/modules/gradle/java/output/JavaCompilerProcessorFactoryTest.java",
                "sha": "df2e3ce7229e9f68f522522197f50445d2038759",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 12,
                "filename": "groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "patch": "@@ -42,21 +42,23 @@ public static Runnable openFileAt(final FileObject file, final int line, final i\n \n             @Override\n             public void run() {\n-                try {\n-                    DataObject data = DataObject.find(file);\n-                    if (data != null) {\n-                        EditorCookie cookie = data.getLookup().lookup(EditorCookie.class);\n-                        if (cookie != null) {\n-                            try {\n-                                cookie.getLineSet().getOriginal(line - 1).show(Line.ShowOpenType.REUSE, Line.ShowVisibilityType.FOCUS, col - 1);\n-                            } catch (IndexOutOfBoundsException ex) {\n-                                cookie.open();\n+                if (file != null) {\n+                    try {\n+                        DataObject data = DataObject.find(file);\n+                        if (data != null) {\n+                            EditorCookie cookie = data.getLookup().lookup(EditorCookie.class);\n+                            if (cookie != null) {\n+                                try {\n+                                    cookie.getLineSet().getOriginal(line - 1).show(Line.ShowOpenType.REUSE, Line.ShowVisibilityType.FOCUS, col - 1);\n+                                } catch (IndexOutOfBoundsException ex) {\n+                                    cookie.open();\n+                                }\n+\n                             }\n \n                         }\n-\n+                    } catch (DataObjectNotFoundException ex) {\n                     }\n-                } catch (DataObjectNotFoundException ex) {\n                 }\n             }\n \n@@ -73,7 +75,7 @@ public void run() {\n \n         };\n     }\n-    \n+\n     public static Runnable displayStatusText(final String text) {\n         return new Runnable() {\n ",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/src/org/netbeans/modules/gradle/api/output/OutputListeners.java",
                "sha": "44518f20bec214f1ebc080d8a98c4412707365a2",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "changes": 85,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 44,
                "filename": "groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "patch": "@@ -54,16 +54,16 @@\n     private static final OutputProcessor JAVAC_PROCESSOR = new JavaCompilerProcessor();\n     private static final OutputProcessor GROOVYC_PROCESSOR = new GroovyCompilerProcessor();\n \n-    \n+\n     @Override\n     public Set<? extends OutputProcessor> createOutputProcessors(RunConfig cfg) {\n         return new HashSet<>(Arrays.asList(URL_PROCESSOR, GRADLE_PROCESSOR, JAVAC_PROCESSOR, GROOVYC_PROCESSOR));\n     }\n \n-    private static final class URLOutputProcessor implements OutputProcessor {\n+    static final class URLOutputProcessor implements OutputProcessor {\n+\n+        private static final Pattern URL_PATTERN = Pattern.compile(\"(((https?|ftp|file)://|file:/)[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\");\n \n-        private static final Pattern URL_PATTERN = Pattern.compile(\"((https?|ftp|file)://[-a-zA-Z0-9+&@#/%?=~_|!:,.;]*[-a-zA-Z0-9+&@#/%=~_|])\");\n-        \n         @Override\n         public boolean processLine(OutputDisplayer out, String line) {\n             Matcher m = URL_PATTERN.matcher(line);\n@@ -84,10 +84,10 @@ public boolean processLine(OutputDisplayer out, String line) {\n             }\n             return last > 0;\n         }\n-        \n+\n     }\n \n-    private static class GradleOutputProcessor implements OutputProcessor {\n+    static class GradleOutputProcessor implements OutputProcessor {\n \n         private static final Pattern GRADLE_ERROR = Pattern.compile(\"(Build file|Script) '(.*)\\\\.gradle' line: ([0-9]+)\");\n \n@@ -100,21 +100,19 @@ public boolean processLine(OutputDisplayer out, String line) {\n \n                 File gradleFile = FileUtil.normalizeFile(new File( buildFile + \".gradle\"));\n                 FileObject file = FileUtil.toFileObject(gradleFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(\"Script '\" + buildFile + \".gradle' line: \" + lineNum, OutputListeners.openFileAt(file, l, 1));\n-                    return true;\n+                int l = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(\"Script '\" + buildFile + \".gradle' line: \" + lineNum, OutputListeners.openFileAt(file, l, 1));\n+                return true;\n             }\n             return false;\n-        }    \n+        }\n     }\n \n-    private static class JavaCompilerProcessor implements OutputProcessor {\n+    static class JavaCompilerProcessor implements OutputProcessor {\n \n         private static final Pattern JAVA_ERROR = Pattern.compile(\"(.*)\\\\.java\\\\:([0-9]+)\\\\: (error|warning)\\\\:(.*)\");\n \n@@ -129,25 +127,24 @@ public boolean processLine(OutputDisplayer out, String line) {\n \n                 File javaFile = FileUtil.normalizeFile(new File(classBase + \".java\"));\n                 FileObject file = FileUtil.toFileObject(javaFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(classBase + \".java:\" + lineNum, OutputListeners.openFileAt(file, l, 1));\n-                    out.print(\": \" + type + \":\" + text);\n-                    return true;\n+                int l = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(classBase + \".java:\" + lineNum, OutputListeners.openFileAt(file, l, 1));\n+                out.print(\": \" + type + \":\" + text);\n+                return true;\n             }\n             return false;\n         }\n \n     }\n \n-    private static class GroovyCompilerProcessor implements OutputProcessor {\n+    static class GroovyCompilerProcessor implements OutputProcessor {\n \n-        private static final Pattern GROOVY_ERROR = Pattern.compile(\"(.*)\\\\.groovy\\\\: ([0-9]+)\\\\: (.*)( at line: ([0-9]+) column: ([0-9]+). File: (.*) @ (.*))?\");\n+        private static final Pattern GROOVY_ERROR = Pattern.compile(\"(.*)\\\\.groovy\\\\: ([0-9]+)\\\\: (.+)\");\n+        private static final Pattern COLUMN_INFO = Pattern.compile(\" @ line ([0-9]+), column ([0-9]+)\\\\.$\");\n \n         @Override\n         public boolean processLine(OutputDisplayer out, String line) {\n@@ -157,29 +154,29 @@ public boolean processLine(OutputDisplayer out, String line) {\n                 String text = m.group(3);\n                 String lineNum = m.group(2);\n                 String colNum = \"1\";\n-                if (m.group(4) != null) {\n-                    lineNum = m.group(5);\n-                    colNum = m.group(6);\n+\n+                Matcher colm = COLUMN_INFO.matcher(text);\n+                if (colm.find()) {\n+                    lineNum = colm.group(1);\n+                    colNum = colm.group(2);\n                 }\n \n-                File javaFile = FileUtil.normalizeFile(new File(classBase + \".groovy\"));\n-                FileObject file = FileUtil.toFileObject(javaFile);\n-                if (file != null) {\n-                    int l = 1;\n-                    int c = 1;\n-                    try {\n-                        l = Integer.parseInt(lineNum);\n-                        c = Integer.parseInt(colNum);\n-                    } catch (NumberFormatException ex) {\n-                    }\n-                    out.print(classBase + \".groovy:\" + lineNum + ':' + colNum, OutputListeners.openFileAt(file, l, c));\n-                    out.print(\": \" + text);\n-                    return true;\n+                File groovyFile = FileUtil.normalizeFile(new File(classBase + \".groovy\"));\n+                FileObject file = FileUtil.toFileObject(groovyFile);\n+                int l = 1;\n+                int c = 1;\n+                try {\n+                    l = Integer.parseInt(lineNum);\n+                    c = Integer.parseInt(colNum);\n+                } catch (NumberFormatException ex) {\n                 }\n+                out.print(classBase + \".groovy: \" + lineNum, OutputListeners.openFileAt(file, l, c));\n+                out.print(\": \" + text);\n+                return true;\n             }\n             return false;\n         }\n \n     }\n-    \n+\n }",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/src/org/netbeans/modules/gradle/output/GradleProcessorFactory.java",
                "sha": "d7c9dbb27f8d0da33fa5382c2ac7d4315ec006fa",
                "status": "modified"
            },
            {
                "additions": 65,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "changes": 65,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 0,
                "filename": "groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "patch": "@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.api.output;\n+\n+import java.util.ArrayList;\n+import org.openide.windows.IOColors;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class OutputDisplayerMock extends OutputDisplayer {\n+\n+    private final ArrayList<OutputItem> items = new ArrayList<>();\n+\n+    @Override\n+    protected void doPrint(CharSequence text, Runnable action, IOColors.OutputType type) {\n+        items.add(new OutputItem(text.toString(), action, type));\n+    }\n+\n+    public OutputItem[] getOutputs() {\n+        return items.toArray(new OutputItem[items.size()]);\n+    }\n+\n+    public String getOutput() {\n+        StringBuilder sb = new StringBuilder();\n+        for (OutputItem item : items) {\n+            sb.append(item);\n+        }\n+        return sb.toString();\n+    }\n+\n+    public class OutputItem {\n+        public final String text;\n+        public final Runnable action;\n+        public final IOColors.OutputType type;\n+\n+        public OutputItem(String text, Runnable action, IOColors.OutputType type) {\n+            this.text = text;\n+            this.action = action;\n+            this.type = type;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return text;\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/api/output/OutputDisplayerMock.java",
                "sha": "9515ce527e87f1b77e590b33f12a76382d7e3c66",
                "status": "added"
            },
            {
                "additions": 215,
                "blob_url": "https://github.com/apache/netbeans/blob/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "changes": 215,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java?ref=d39ec0dc8658bb332c3a315b66a3b8b0df03aca5",
                "deletions": 0,
                "filename": "groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "patch": "@@ -0,0 +1,215 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.netbeans.modules.gradle.output;\n+\n+import org.junit.Test;\n+import static org.junit.Assert.*;\n+import org.netbeans.modules.gradle.api.output.OutputDisplayerMock;\n+\n+/**\n+ *\n+ * @author lkishalmi\n+ */\n+public class GradleProcessorFactoryTest {\n+\n+    private static final String JAVA_8_STACKTRACE_1  = \"        at org.junit.jupiter.api.AssertionUtils.fail(AssertionUtils.java:55)\";\n+\n+    private static final String JAVA_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1: error: class, interface, or enum expected\";\n+    private static final String JAVA_COMPILE_ERROR_2 = \"D:\\\\Users\\\\netbeans\\\\NetBeansProjects\\\\gradleproject3\\\\common\\\\src\\\\main\\\\java\\\\gradleproject3\\\\common\\\\NewClass1.java:1: error: class, interface, or enum expected\";\n+\n+    private static final String GRADLE_SCRIPT_ERROR_1= \"Script '/home/netbeans/NetBeansProjects/gradleproject6/build.gradle' line: 6\";\n+\n+    private static final String GROOVY_COMPILE_ERROR_1 = \"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 33: unable to resolve class Prject\";\n+    private static final String GROOVY_COMPILE_ERROR_2 = \"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 43: expecting anything but ''\\\\n''; got it anyway @ line 43, column 28.\";\n+\n+    private static final String URL_PATTERN_1 = \"https://netbeans.apache.org/\";\n+    private static final String URL_PATTERN_2 = \"Hello https://netbeans.apache.org\";\n+    private static final String URL_PATTERN_3 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/\";\n+    private static final String URL_PATTERN_4 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/ and file:/home/netbeans \";\n+    private static final String URL_PATTERN_5 = \"https://netbeans.apache.org then look at ftp://netbeans.apache.org/ and file:///home/netbeans \";\n+\n+    @Test\n+    public void testJavaCompilerProcessor1() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(jcp.processLine(od, JAVA_COMPILE_ERROR_1));\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/gradleproject3/common/src/main/java/gradleproject3/common/NewClass1.java:1\", outputs[0].text);\n+        assertEquals(\": error: class, interface, or enum expected\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor2() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(jcp.processLine(od, JAVA_COMPILE_ERROR_2));\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"D:\\\\Users\\\\netbeans\\\\NetBeansProjects\\\\gradleproject3\\\\common\\\\src\\\\main\\\\java\\\\gradleproject3\\\\common\\\\NewClass1.java:1\", outputs[0].text);\n+        assertEquals(\": error: class, interface, or enum expected\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor3() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(jcp.processLine(od, GROOVY_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testJavaCompilerProcessor4() {\n+        GradleProcessorFactory.JavaCompilerProcessor jcp = new GradleProcessorFactory.JavaCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(jcp.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor1() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(gcp.processLine(od, GROOVY_COMPILE_ERROR_1));\n+        assertEquals(GROOVY_COMPILE_ERROR_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 33\", outputs[0].text);\n+        assertNotNull(outputs[0].action);\n+        assertEquals(\": unable to resolve class Prject\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor2() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(gcp.processLine(od, GROOVY_COMPILE_ERROR_2));\n+        assertEquals(GROOVY_COMPILE_ERROR_2, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(\"/home/netbeans/NetBeansProjects/netbeans/groovy/gradle/netbeans-gradle-tooling/src/main/groovy/org/netbeans/modules/gradle/tooling/NetBeansExplodedWarPlugin.groovy: 43\", outputs[0].text);\n+        assertNotNull(outputs[0].action);\n+        assertEquals(\": expecting anything but ''\\\\n''; got it anyway @ line 43, column 28.\", outputs[1].text);\n+    }\n+\n+    @Test\n+    public void testGroovyCompilerProcessor3() {\n+        GradleProcessorFactory.GroovyCompilerProcessor gcp = new GradleProcessorFactory.GroovyCompilerProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(gcp.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor1() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor2() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor3() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_1));\n+        assertEquals(URL_PATTERN_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(3, outputs.length);\n+        assertNotNull(outputs[1].action);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor4() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_2));\n+        assertEquals(URL_PATTERN_2, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertNotNull(outputs[1].action);\n+        assertEquals(3, outputs.length);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor5() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_3));\n+        assertEquals(URL_PATTERN_3, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(5, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor6() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_4));\n+        assertEquals(URL_PATTERN_4, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(7, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+        assertNotNull(outputs[5].action);\n+        assertEquals(\"file:/home/netbeans\", outputs[5].text);\n+    }\n+\n+    @Test\n+    public void testURLOutputProcessor7() {\n+        GradleProcessorFactory.URLOutputProcessor uop = new GradleProcessorFactory.URLOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, URL_PATTERN_5));\n+        assertEquals(URL_PATTERN_5, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(7, outputs.length);\n+        assertEquals(\" then look at \", outputs[2].text);\n+        assertNotNull(outputs[1].action);\n+        assertNotNull(outputs[3].action);\n+        assertNotNull(outputs[5].action);\n+        assertEquals(\"file:///home/netbeans\", outputs[5].text);\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor1() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertTrue(uop.processLine(od, GRADLE_SCRIPT_ERROR_1));\n+        assertEquals(GRADLE_SCRIPT_ERROR_1, od.getOutput());\n+        OutputDisplayerMock.OutputItem[] outputs = od.getOutputs();\n+        assertEquals(1, outputs.length);\n+        assertEquals(GRADLE_SCRIPT_ERROR_1, outputs[0].text);\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor2() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_COMPILE_ERROR_1));\n+    }\n+\n+    @Test\n+    public void testGradleOutputProcessor3() {\n+        GradleProcessorFactory.GradleOutputProcessor uop = new GradleProcessorFactory.GradleOutputProcessor();\n+        OutputDisplayerMock od = new OutputDisplayerMock();\n+        assertFalse(uop.processLine(od, JAVA_8_STACKTRACE_1));\n+    }\n+}",
                "raw_url": "https://github.com/apache/netbeans/raw/d39ec0dc8658bb332c3a315b66a3b8b0df03aca5/groovy/gradle/test/unit/src/org/netbeans/modules/gradle/output/GradleProcessorFactoryTest.java",
                "sha": "50f36515df351b86e0841ed27ec617d06f534d1d",
                "status": "added"
            }
        ],
        "message": "Merge pull request #1340 from lkishalmi/NETBEANS-2753\n\n[NETBEANS-2753] Fixed NPE on Java Stacktrace processing.",
        "parent": "https://github.com/apache/netbeans/commit/9bb7769200b89e46ccd1a3c9cf93712449d82bdf",
        "repo": "netbeans",
        "unit_tests": [
            "JavaCompilerProcessorFactoryTest.java",
            "GradleProcessorFactoryTest.java"
        ]
    },
    "netbeans_d65f278": {
        "bug_id": "netbeans_d65f278",
        "commit": "https://github.com/apache/netbeans/commit/d65f2789d496ed57095ce9e243edb7cec2adaa32",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/d65f2789d496ed57095ce9e243edb7cec2adaa32/java.source.base/src/org/netbeans/modules/java/source/PostFlowAnalysis.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/java.source.base/src/org/netbeans/modules/java/source/PostFlowAnalysis.java?ref=d65f2789d496ed57095ce9e243edb7cec2adaa32",
                "deletions": 1,
                "filename": "java.source.base/src/org/netbeans/modules/java/source/PostFlowAnalysis.java",
                "patch": "@@ -160,7 +160,7 @@ public void visitMethodDef(JCMethodDecl tree) {\n     public void visitNewClass(JCNewClass tree) {\n         super.visitNewClass(tree);\n         Symbol c = tree.constructor != null ? tree.constructor.owner : null;\n-        if (c != null && c.hasOuterInstance()) {\n+        if (c != null && c != syms.noSymbol && c.hasOuterInstance()) {\n             if (tree.encl == null && c.isLocal()) {\n                 checkThis(tree.pos(), c.type.getEnclosingType().tsym);\n             }",
                "raw_url": "https://github.com/apache/netbeans/raw/d65f2789d496ed57095ce9e243edb7cec2adaa32/java.source.base/src/org/netbeans/modules/java/source/PostFlowAnalysis.java",
                "sha": "edf0f313725bacc2959bf7729d5819a5ce03ab71",
                "status": "modified"
            }
        ],
        "message": "Preventing NPE.",
        "parent": "https://github.com/apache/netbeans/commit/1c8c1e52e5abb48eb05aaff392ea630d9e04cb83",
        "repo": "netbeans",
        "unit_tests": [
            "PostFlowAnalysisTest.java"
        ]
    },
    "netbeans_d83c8a8": {
        "bug_id": "netbeans_d83c8a8",
        "commit": "https://github.com/apache/netbeans/commit/d83c8a8f47a9abad9a2174a78907e8764d06ba46",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/netbeans/blob/d83c8a8f47a9abad9a2174a78907e8764d06ba46/groovy/gradle/src/org/netbeans/modules/gradle/api/execute/GradleCommandLine.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/groovy/gradle/src/org/netbeans/modules/gradle/api/execute/GradleCommandLine.java?ref=d83c8a8f47a9abad9a2174a78907e8764d06ba46",
                "deletions": 1,
                "filename": "groovy/gradle/src/org/netbeans/modules/gradle/api/execute/GradleCommandLine.java",
                "patch": "@@ -96,7 +96,7 @@\n         RECOMPILE_SCRIPTS(UNSUPPORTED, \"--recompile-scripts\"),\n         VERSION(UNSUPPORTED, \"--version\", \"-v\");\n \n-        private Set<Flag> incompatible;\n+        private Set<Flag> incompatible = Collections.emptySet();\n         private final Argument.Kind kind;\n         private final List<String> flags;\n         static {",
                "raw_url": "https://github.com/apache/netbeans/raw/d83c8a8f47a9abad9a2174a78907e8764d06ba46/groovy/gradle/src/org/netbeans/modules/gradle/api/execute/GradleCommandLine.java",
                "sha": "574bffec30c85688dcc0f1574cab6ec3fdc12b50",
                "status": "modified"
            }
        ],
        "message": "Trivial fix for NPE on some Gradle Action execution",
        "parent": "https://github.com/apache/netbeans/commit/a760f722373cff71180b0a5c9843373dabb19e95",
        "repo": "netbeans",
        "unit_tests": [
            "GradleCommandLineTest.java"
        ]
    },
    "netbeans_eff347e": {
        "bug_id": "netbeans_eff347e",
        "commit": "https://github.com/apache/netbeans/commit/eff347e09da3940ce63487cdeee7a6553089a58f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/netbeans/blob/eff347e09da3940ce63487cdeee7a6553089a58f/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/netbeans/contents/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java?ref=eff347e09da3940ce63487cdeee7a6553089a58f",
                "deletions": 0,
                "filename": "platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "patch": "@@ -138,6 +138,9 @@ public void run() {\n                 }\n             }\n         }\n+        if (evaluator == null) {\n+            return Collections.singletonList(Proxy.NO_PROXY);\n+        }\n         try {\n             return evaluator.findProxyForURL(u);\n         } catch (PacValidationException ex) {",
                "raw_url": "https://github.com/apache/netbeans/raw/eff347e09da3940ce63487cdeee7a6553089a58f/platform/core.network/src/org/netbeans/core/network/proxy/ProxyAutoConfig.java",
                "sha": "992e9c1ab4911c94f894b78bf2669812ce1e8d4a",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1382 from akuhtz/fix-pac-npe\n\nFix NPE if PAC cannot be resolved",
        "parent": "https://github.com/apache/netbeans/commit/7337d1eab5bfe20f59ae0b7d5b547ab6033691d8",
        "repo": "netbeans",
        "unit_tests": [
            "ProxyAutoConfigTest.java"
        ]
    }
}