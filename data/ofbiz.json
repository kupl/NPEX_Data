{
    "ofbiz_3a0a201": {
        "bug_id": "ofbiz_3a0a201",
        "commit": "https://github.com/apache/ofbiz/commit/3a0a201c34dc3cad8c001d030c80e57f5b605da1",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/ofbiz/blob/3a0a201c34dc3cad8c001d030c80e57f5b605da1/framework/base/src/base/org/ofbiz/base/util/StringUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/base/org/ofbiz/base/util/StringUtil.java?ref=3a0a201c34dc3cad8c001d030c80e57f5b605da1",
                "deletions": 0,
                "filename": "framework/base/src/base/org/ofbiz/base/util/StringUtil.java",
                "patch": "@@ -41,6 +41,10 @@\n     \n     public static final String module = StringUtil.class.getName();\n \n+    public static String internString(String value) {\n+        return value != null ? value.intern() : null;\n+    }\n+\n     /** \n      * Replaces all occurances of oldString in mainString with newString\n      * @param mainString The original string",
                "raw_url": "https://github.com/apache/ofbiz/raw/3a0a201c34dc3cad8c001d030c80e57f5b605da1/framework/base/src/base/org/ofbiz/base/util/StringUtil.java",
                "sha": "c00d4390074337fe079960f6cc4deebef8c2d984",
                "status": "modified"
            }
        ],
        "message": "Add internString(), which protects against NPE.  Closes\n https://issues.apache.org/jira/browse/OFBIZ-1307.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@585578 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/ddbcbed6d17d1e214646c9691c8c9ee667ed995f",
        "repo": "ofbiz",
        "unit_tests": [
            "StringUtilTests.java"
        ]
    },
    "ofbiz_55bf970": {
        "bug_id": "ofbiz_55bf970",
        "commit": "https://github.com/apache/ofbiz/commit/55bf970b48e0c2842c769e52c9a6f57681cae9b5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ofbiz/blob/55bf970b48e0c2842c769e52c9a6f57681cae9b5/framework/base/src/org/ofbiz/base/util/UtilHttp.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/org/ofbiz/base/util/UtilHttp.java?ref=55bf970b48e0c2842c769e52c9a6f57681cae9b5",
                "deletions": 1,
                "filename": "framework/base/src/org/ofbiz/base/util/UtilHttp.java",
                "patch": "@@ -113,7 +113,7 @@\n      */\n     public static Map<String, Object> getParameterMap(HttpServletRequest request, Set<? extends String> nameSet, Boolean onlyIncludeOrSkip) {\n         boolean onlyIncludeOrSkipPrim = onlyIncludeOrSkip == null ? true : onlyIncludeOrSkip.booleanValue();\n-        Map<String, Object> paramMap = FastMap.newInstance();\n+        Map<String, Object> paramMap = new HashMap<String, Object>();\n \n         // add all the actual HTTP request parameters\n         Enumeration<String> e = UtilGenerics.cast(request.getParameterNames());",
                "raw_url": "https://github.com/apache/ofbiz/raw/55bf970b48e0c2842c769e52c9a6f57681cae9b5/framework/base/src/org/ofbiz/base/util/UtilHttp.java",
                "sha": "5a50d497fb3f0bb16342c49f559f38b76c518f72",
                "status": "modified"
            }
        ],
        "message": "\"Login out on a cluster handled by DeltaManager causes a NPE\" https://issues.apache.org/jira/browse/OFBIZ-4289\n\nUses a HashMap instead of a FastMap here because else we get this kind of error when OFBiz is shut down:\n\n2012-06-12 10:35:29,921 (OFBiz_Shutdown_Hook) [ StandardSession.java:1567:WARN ] Cannot serialize session attribute LAST_VIEW_PARAMS for session 00C48D0D76821C98403482FAE8B77C24.jvm1\njava.io.NotSerializableException: net.sf.json.JSONObject\nat java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1164)\nat java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:330)\nat javolution.util.FastMap.writeObject(FastMap.java:1513)\n\nNote: to test the above you need to set apps-distributable to true and put some <distributable/> in the web.xml files of the applications to test\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@1355660 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/1f7beafb3a8604ff20c204bf0cac769d68aa69d2",
        "repo": "ofbiz",
        "unit_tests": [
            "UtilHttpTests.java"
        ]
    },
    "ofbiz_8074d39": {
        "bug_id": "ofbiz_8074d39",
        "commit": "https://github.com/apache/ofbiz/commit/8074d39e801a41deb46b2f7f851fceaebd4900f3",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/ofbiz/blob/8074d39e801a41deb46b2f7f851fceaebd4900f3/framework/base/src/base/org/ofbiz/base/util/ObjectType.java",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/base/org/ofbiz/base/util/ObjectType.java?ref=8074d39e801a41deb46b2f7f851fceaebd4900f3",
                "deletions": 23,
                "filename": "framework/base/src/base/org/ofbiz/base/util/ObjectType.java",
                "patch": "@@ -426,7 +426,7 @@ public static boolean instanceOf(Class<?> objectClass, Class<?> typeClass) {\n     }\n \n     public static Object simpleTypeConvert(Object obj, String type, String format, Locale locale, boolean noTypeFail) throws GeneralException {\n-        return simpleTypeConvert(obj, type, format, UtilDateTime.getDefaultTimeZone(), locale, noTypeFail);\n+        return simpleTypeConvert(obj, type, format, null, locale, noTypeFail);\n     }\n \n     /** \n@@ -457,6 +457,14 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             return obj;\n         }\n \n+        if (timeZone == null) {\n+            timeZone = TimeZone.getDefault();\n+        }\n+\n+        if (locale == null) {\n+            locale = Locale.getDefault();\n+        }\n+\n         String fromType = null;\n \n         if ((type.equals(\"List\") || type.equals(\"java.util.List\")) && obj.getClass().isArray()) {\n@@ -496,7 +504,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 str = StringUtil.removeSpaces(str);\n                 try {\n-                    NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                    NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                     Number tempNum = nf.parse(str);\n                     return new BigDecimal(tempNum.toString());\n                 } catch (ParseException e) {\n@@ -505,7 +513,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Double\".equals(type) || \"java.lang.Double\".equals(type)) {\n                 str = StringUtil.removeSpaces(str);\n                 try {\n-                    NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                    NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                     Number tempNum = nf.parse(str);\n \n                     return Double.valueOf(tempNum.doubleValue());\n@@ -515,7 +523,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Float\".equals(type) || \"java.lang.Float\".equals(type)) {\n                 str = StringUtil.removeSpaces(str);\n                 try {\n-                    NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                    NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                     Number tempNum = nf.parse(str);\n \n                     return Float.valueOf(tempNum.floatValue());\n@@ -525,7 +533,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Long\".equals(type) || \"java.lang.Long\".equals(type)) {\n                 str = StringUtil.removeSpaces(str);\n                 try {\n-                    NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                    NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                     nf.setMaximumFractionDigits(0);\n                     Number tempNum = nf.parse(str);\n \n@@ -536,7 +544,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Integer\".equals(type) || \"java.lang.Integer\".equals(type)) {\n                 str = StringUtil.removeSpaces(str);\n                 try {\n-                    NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                    NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                     nf.setMaximumFractionDigits(0);\n                     Number tempNum = nf.parse(str);\n \n@@ -547,9 +555,9 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Date\".equals(type) || \"java.sql.Date\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toDateFormat(UtilDateTime.DATE_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toDateFormat(UtilDateTime.DATE_FORMAT, timeZone, locale);\n                 } else {\n-                    df = UtilDateTime.toDateFormat(format, timeZone, null);\n+                    df = UtilDateTime.toDateFormat(format, timeZone, locale);\n                 }\n                 try {\n                     Date fieldDate = df.parse(str);\n@@ -560,9 +568,9 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Time\".equals(type) || \"java.sql.Time\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toTimeFormat(UtilDateTime.TIME_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toTimeFormat(UtilDateTime.TIME_FORMAT, timeZone, locale);\n                 } else {\n-                    df = UtilDateTime.toTimeFormat(format, timeZone, null);\n+                    df = UtilDateTime.toTimeFormat(format, timeZone, locale);\n                 }\n                 try {\n                     Date fieldDate = df.parse(str);\n@@ -573,7 +581,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             } else if (\"Timestamp\".equals(type) || \"java.sql.Timestamp\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toDateTimeFormat(UtilDateTime.DATE_TIME_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toDateTimeFormat(UtilDateTime.DATE_TIME_FORMAT, timeZone, locale);\n                     // if time is missing add zeros\n                     if (str.length() > 0 && !str.contains(\":\")) {\n                     \tstr = str + \" 00:00:00.00\";\n@@ -591,7 +599,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n                         }\n                     }\n                 } else {\n-                    df = UtilDateTime.toDateTimeFormat(format, timeZone, null);\n+                    df = UtilDateTime.toDateTimeFormat(format, timeZone, locale);\n                 }\n                 try {\n                     Date fieldDate = df.parse(str);\n@@ -626,7 +634,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             Double dbl = (Double) obj;\n \n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n-                NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                 return nf.format(dbl.doubleValue());\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 return new BigDecimal(dbl.doubleValue());\n@@ -654,7 +662,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             Float flt = (Float) obj;\n \n             if (\"String\".equals(type)) {\n-                NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                 return nf.format(flt.doubleValue());\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 return new BigDecimal(flt.doubleValue());\n@@ -682,7 +690,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             Long lng = (Long) obj;\n \n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n-                NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                 return nf.format(lng.longValue());\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 return BigDecimal.valueOf(lng.longValue());\n@@ -709,7 +717,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             fromType = \"Integer\";\n             Integer intgr = (Integer) obj;\n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n-                NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                 return nf.format(intgr.longValue());\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 return BigDecimal.valueOf(intgr.longValue());\n@@ -736,7 +744,7 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             fromType = \"BigDecimal\";\n             BigDecimal bigDec = (BigDecimal) obj;\n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n-                NumberFormat nf = locale == null ? NumberFormat.getNumberInstance() : NumberFormat.getNumberInstance(locale);\n+                NumberFormat nf = NumberFormat.getNumberInstance(locale);\n                 return nf.format(bigDec.doubleValue());\n             } else if (\"BigDecimal\".equals(type) || \"java.math.BigDecimal\".equals(type)) {\n                 return obj;\n@@ -765,9 +773,9 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toDateFormat(UtilDateTime.DATE_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toDateFormat(UtilDateTime.DATE_FORMAT, timeZone, locale);\n                 } else {\n-                    df = UtilDateTime.toDateFormat(format, timeZone, null);\n+                    df = UtilDateTime.toDateFormat(format, timeZone, locale);\n                 }\n                 return df.format(new java.util.Date(dte.getTime()));\n             } else if (\"Date\".equals(type) || \"java.sql.Date\".equals(type)) {\n@@ -794,9 +802,9 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toTimeFormat(UtilDateTime.TIME_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toTimeFormat(UtilDateTime.TIME_FORMAT, timeZone, locale);\n                 } else {\n-                    df = UtilDateTime.toTimeFormat(format, timeZone, null);\n+                    df = UtilDateTime.toTimeFormat(format, timeZone, locale);\n                 }\n                 return df.format(new java.util.Date(tme.getTime()));\n             } else if (\"Date\".equals(type) || \"java.sql.Date\".equals(type)) {\n@@ -823,9 +831,9 @@ public static Object simpleTypeConvert(Object obj, String type, String format, T\n             if (\"String\".equals(type) || \"java.lang.String\".equals(type)) {\n                 DateFormat df = null;\n                 if (format == null || format.length() == 0) {\n-                    df = UtilDateTime.toDateTimeFormat(UtilDateTime.DATE_TIME_FORMAT, timeZone, null);\n+                    df = UtilDateTime.toDateTimeFormat(UtilDateTime.DATE_TIME_FORMAT, timeZone, locale);\n                 } else {\n-                    df = UtilDateTime.toDateTimeFormat(format, timeZone, null);\n+                    df = UtilDateTime.toDateTimeFormat(format, timeZone, locale);\n                 }\n                 return df.format(new java.util.Date(tme.getTime()));\n             } else if (\"Date\".equals(type) || \"java.sql.Date\".equals(type)) {",
                "raw_url": "https://github.com/apache/ofbiz/raw/8074d39e801a41deb46b2f7f851fceaebd4900f3/framework/base/src/base/org/ofbiz/base/util/ObjectType.java",
                "sha": "39a2814f4c3799aac01bf537c1674b75d8ec9bd2",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE reported by Jacopo on the dev mailing list.\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@662825 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/fc6e672d817d02c0ae432769b8ce485989dbe8b9",
        "repo": "ofbiz",
        "unit_tests": [
            "ObjectTypeTests.java"
        ]
    },
    "ofbiz_b08bfae": {
        "bug_id": "ofbiz_b08bfae",
        "commit": "https://github.com/apache/ofbiz/commit/b08bfae6e32227f9a4367d057a41b0910ef0bb4d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/ofbiz/blob/b08bfae6e32227f9a4367d057a41b0910ef0bb4d/applications/accounting/widget/BillingAccountForms.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/applications/accounting/widget/BillingAccountForms.xml?ref=b08bfae6e32227f9a4367d057a41b0910ef0bb4d",
                "deletions": 2,
                "filename": "applications/accounting/widget/BillingAccountForms.xml",
                "patch": "@@ -46,7 +46,7 @@ under the License.\n         <field name=\"fromDate\"><display/></field>\n         <field name=\"thruDate\"><display/></field>\n         <field name=\"partyId\"><display/></field>\n-        <field name=\"roleTypeId\"><display-entity entity-name=\"RoleType\"/></field>\n+        <field name=\"roleTypeId\" title=\"${uiLabelMap.AccountingRoleType}\"><display-entity entity-name=\"RoleType\"/></field>\n     </form>\n \n     <form name=\"ListBillingAccountInvoices\" type=\"list\" list-name=\"billingAccountInvoices\" paginate-target=\"BillingAccountInvoices\" default-entity-name=\"Invoice\"\n@@ -100,7 +100,7 @@ under the License.\n     <form name=\"EditBillingAccount\" type=\"single\" target=\"updateBillingAccount\" title=\"\"\n         header-row-style=\"header-row\" default-table-style=\"basic-table\">\n         <actions>\n-            <set field=\"availableBalance\" value=\"${bsh:org.ofbiz.accounting.payment.BillingAccountWorker.getBillingAccountBalance(billingAccount)}\" type=\"BigDecimal\"/>\n+            <set field=\"availableBalance\" value=\"${bsh:billingAccount != null ? org.ofbiz.accounting.payment.BillingAccountWorker.getBillingAccountBalance(billingAccount) : 0}\" type=\"BigDecimal\"/>\n         </actions>\n         <alt-target use-when=\"billingAccount==null\" target=\"createBillingAccount\"/>\n         <auto-fields-service service-name=\"updateBillingAccount\" map-name=\"billingAccount\"/>",
                "raw_url": "https://github.com/apache/ofbiz/raw/b08bfae6e32227f9a4367d057a41b0910ef0bb4d/applications/accounting/widget/BillingAccountForms.xml",
                "sha": "3c2e6519e8a8328a369ba30aba884371fffcb39e",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/ofbiz/blob/b08bfae6e32227f9a4367d057a41b0910ef0bb4d/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java?ref=b08bfae6e32227f9a4367d057a41b0910ef0bb4d",
                "deletions": 5,
                "filename": "framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "patch": "@@ -290,10 +290,10 @@ public void appendElement(StringBuilder buffer, Map<String, ? extends Object> co\n                         buffer.append(scriptResult);\n                     }\n                 } else {\n-                    Debug.logWarning(\"BSH scriplet evaluated to null [\" + scriptlet + \"], got no return so inserting nothing.\", module);\n+                    Debug.logWarning(\"BSH scriptlet evaluated to null [\" + scriptlet + \"], got no return so inserting nothing.\", module);\n                 }\n             } catch (EvalError e) {\n-                Debug.logWarning(e, \"Error evaluating BSH scriplet [\" + scriptlet + \"], inserting nothing; error was: \" + e.toString(), module);\n+                Debug.logWarning(e, \"Error evaluating BSH scriptlet [\" + scriptlet + \"], inserting nothing; error was: \" + e.toString(), module);\n             }\n         }\n     }\n@@ -407,7 +407,7 @@ public void handleVariable(String original, int start, int end) {\n         }\n \n         public void handleBsh(String original, int start, int end) {\n-            //run the scriplet and append the result\n+            //run the scriptlet and append the result\n             String scriptlet = original.substring(start, end);\n             try {\n                 Object scriptResult = BshUtil.eval(scriptlet, UtilMisc.makeMapWritable(context));\n@@ -418,10 +418,10 @@ public void handleBsh(String original, int start, int end) {\n                         targetBuffer.append(scriptResult);\n                     }\n                 } else {\n-                    Debug.logWarning(\"BSH scriplet evaluated to null [\" + scriptlet + \"], got no return so inserting nothing.\", module);\n+                    Debug.logWarning(\"BSH scriptlet evaluated to null [\" + scriptlet + \"], got no return so inserting nothing.\", module);\n                 }\n             } catch (EvalError e) {\n-                Debug.logWarning(e, \"Error evaluating BSH scriplet [\" + scriptlet + \"], inserting nothing; error was: \" + e.toString(), module);\n+                Debug.logWarning(e, \"Error evaluating BSH scriptlet [\" + scriptlet + \"], inserting nothing; error was: \" + e.toString(), module);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/ofbiz/raw/b08bfae6e32227f9a4367d057a41b0910ef0bb4d/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "sha": "547f4f67e52cb2b66438e5263c1f7f48417d25cf",
                "status": "modified"
            }
        ],
        "message": "Fix an NPE, some typos and a label\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@670108 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/9f5f3c9fe7c276838f3ee20b9003aa0eea84c69b",
        "repo": "ofbiz",
        "unit_tests": [
            "FlexibleStringExpanderTests.java"
        ]
    },
    "ofbiz_eb425ac": {
        "bug_id": "ofbiz_eb425ac",
        "commit": "https://github.com/apache/ofbiz/commit/eb425ac4478c2f804fdb3319cc2689005b1c423c",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ofbiz/blob/eb425ac4478c2f804fdb3319cc2689005b1c423c/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java?ref=eb425ac4478c2f804fdb3319cc2689005b1c423c",
                "deletions": 6,
                "filename": "framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "patch": "@@ -120,18 +120,22 @@ public String expandString(Map<String, ? extends Object> context, TimeZone timeZ\n             return this.orig == null ? \"\" : this.orig;\n         }\n         if (locale == null) {\n-            locale = (Locale) context.get(\"locale\");\n-            if (locale == null && context.containsKey(\"autoUserLogin\")) {\n-                locale = UtilMisc.ensureLocale(((Map) context.get(\"autoUserLogin\")).get(\"lastLocale\"));\n+            if (context != null) {\n+                locale = (Locale) context.get(\"locale\");\n+                if (locale == null && context.containsKey(\"autoUserLogin\")) {\n+                    locale = UtilMisc.ensureLocale(((Map) context.get(\"autoUserLogin\")).get(\"lastLocale\"));\n+                }\n             }\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n         }\n         if (timeZone == null) {\n-            timeZone = (TimeZone) context.get(\"timeZone\");\n-            if (timeZone == null && context.containsKey(\"autoUserLogin\")) {\n-                timeZone = UtilDateTime.toTimeZone((String)((Map) context.get(\"autoUserLogin\")).get(\"lastTimeZone\"));\n+            if (context != null) {\n+                timeZone = (TimeZone) context.get(\"timeZone\");\n+                if (timeZone == null && context.containsKey(\"autoUserLogin\")) {\n+                    timeZone = UtilDateTime.toTimeZone((String)((Map) context.get(\"autoUserLogin\")).get(\"lastTimeZone\"));\n+                }\n             }\n             if (timeZone == null) {\n                 timeZone = TimeZone.getDefault();",
                "raw_url": "https://github.com/apache/ofbiz/raw/eb425ac4478c2f804fdb3319cc2689005b1c423c/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "sha": "fa8f3ee3c1b1c47625f66516c26257fa1fc4b463",
                "status": "modified"
            }
        ],
        "message": "NPE fix\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@688296 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/61db4e6370c080f8a1c662360801be4035915768",
        "repo": "ofbiz",
        "unit_tests": [
            "FlexibleStringExpanderTests.java"
        ]
    },
    "ofbiz_eb773c6": {
        "bug_id": "ofbiz_eb773c6",
        "commit": "https://github.com/apache/ofbiz/commit/eb773c62c06b7d1b47dd56a6ae4d3e33f9e681db",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/ofbiz/blob/eb773c62c06b7d1b47dd56a6ae4d3e33f9e681db/framework/base/src/base/org/ofbiz/base/util/collections/FlexibleMapAccessor.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/base/org/ofbiz/base/util/collections/FlexibleMapAccessor.java?ref=eb773c62c06b7d1b47dd56a6ae4d3e33f9e681db",
                "deletions": 7,
                "filename": "framework/base/src/base/org/ofbiz/base/util/collections/FlexibleMapAccessor.java",
                "patch": "@@ -214,14 +214,17 @@ public void put(Map base, Object value) {\n                 lst = FastList.newInstance();\n                 base.put(this.extName, lst);\n             }\n-            //if brackets are empty, append to list\n-            if (this.isAddAtEnd) {\n-                lst.add(value);\n-            } else {\n-                if (this.isAddAtIndex) {\n-                    lst.add(this.listIndex, value);\n+            //if brackets are empty, append to list, but only if it's not null (avoid NPEs with FastList)\n+            if (value != null) {\n+            \t// note that we are checking for null AFTER checking/creating the list itself, so that it will exist after referenced the first time\n+                if (this.isAddAtEnd) {\n+                    lst.add(value);\n                 } else {\n-                    lst.set(this.listIndex, value);\n+                    if (this.isAddAtIndex) {\n+                        lst.add(this.listIndex, value);\n+                    } else {\n+                        lst.set(this.listIndex, value);\n+                    }\n                 }\n             }\n         } else {",
                "raw_url": "https://github.com/apache/ofbiz/raw/eb773c62c06b7d1b47dd56a6ae4d3e33f9e681db/framework/base/src/base/org/ofbiz/base/util/collections/FlexibleMapAccessor.java",
                "sha": "a105053883c1d9799c2dc76d3e00d6ca00ff046b",
                "status": "modified"
            }
        ],
        "message": "Small change to not add null values to lists, will always throw an NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@589967 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/425a271552adf3975f945cb7b5c61c93208375fa",
        "repo": "ofbiz",
        "unit_tests": [
            "FlexibleMapAccessorTests.java"
        ]
    },
    "ofbiz_eff5f89": {
        "bug_id": "ofbiz_eff5f89",
        "commit": "https://github.com/apache/ofbiz/commit/eff5f89d3907edb6cd0294c6ae393319a6b07aa1",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/ofbiz/blob/eff5f89d3907edb6cd0294c6ae393319a6b07aa1/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java?ref=eff5f89d3907edb6cd0294c6ae393319a6b07aa1",
                "deletions": 62,
                "filename": "framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "patch": "@@ -77,25 +77,17 @@ public String getOriginal() {\n         return this.orig;\n     }\n \n-    /** \n-     * This expands the pre-parsed String given the context passed in. Note that\n-     * pre-parsing can only parse the top-level place-holders and if there are \n-     * nested expansions they will be done on the fly instead of pre-parsed because\n-     * they are dependent on the context which isn't known until expansion time.\n-     * \n+    /** This expands the pre-parsed String given the context passed in. A\n+     * null context argument will return the original String.\n      * @param context A context Map containing the variable values\n      * @return The original String expanded by replacing varaible place holders.\n      */    \n     public String expandString(Map<String, ? extends Object> context) {\n         return this.expandString(context, null, null);\n     }\n     \n-    /** \n-     * This expands the pre-parsed String given the context passed in. Note that\n-     * pre-parsing can only parse the top-level place-holders and if there are \n-     * nested expansions they will be done on the fly instead of pre-parsed because\n-     * they are dependent on the context which isn't known until expansion time.\n-     * \n+    /** This expands the pre-parsed String given the context passed in. A\n+     * null context argument will return the original String.\n      * @param context A context Map containing the variable values\n      * @param locale the current set locale\n      * @return The original String expanded by replacing varaible place holders.\n@@ -104,38 +96,30 @@ public String expandString(Map<String, ? extends Object> context, Locale locale)\n         return this.expandString(context, null, locale);\n     }\n     \n-    /** \n-     * This expands the pre-parsed String given the context passed in. Note that\n-     * pre-parsing can only parse the top-level place-holders and if there are \n-     * nested expansions they will be done on the fly instead of pre-parsed because\n-     * they are dependent on the context which isn't known until expansion time.\n-     * \n+    /** This expands the pre-parsed String given the context passed in. A\n+     * null context argument will return the original String.\n      * @param context A context Map containing the variable values\n      * @param timeZone the current set time zone\n      * @param locale the current set locale\n      * @return The original String expanded by replacing varaible place holders.\n      */    \n     public String expandString(Map<String, ? extends Object> context, TimeZone timeZone, Locale locale) {\n-        if (this.strElems == null) {\n+        if (this.strElems == null || context == null) {\n             return this.orig == null ? \"\" : this.orig;\n         }\n         if (locale == null) {\n-            if (context != null) {\n-                locale = (Locale) context.get(\"locale\");\n-                if (locale == null && context.containsKey(\"autoUserLogin\")) {\n-                    locale = UtilMisc.ensureLocale(((Map) context.get(\"autoUserLogin\")).get(\"lastLocale\"));\n-                }\n+            locale = (Locale) context.get(\"locale\");\n+            if (locale == null && context.containsKey(\"autoUserLogin\")) {\n+                locale = UtilMisc.ensureLocale(((Map) context.get(\"autoUserLogin\")).get(\"lastLocale\"));\n             }\n             if (locale == null) {\n                 locale = Locale.getDefault();\n             }\n         }\n         if (timeZone == null) {\n-            if (context != null) {\n-                timeZone = (TimeZone) context.get(\"timeZone\");\n-                if (timeZone == null && context.containsKey(\"autoUserLogin\")) {\n-                    timeZone = UtilDateTime.toTimeZone((String)((Map) context.get(\"autoUserLogin\")).get(\"lastTimeZone\"));\n-                }\n+            timeZone = (TimeZone) context.get(\"timeZone\");\n+            if (timeZone == null && context.containsKey(\"autoUserLogin\")) {\n+                timeZone = UtilDateTime.toTimeZone((String)((Map) context.get(\"autoUserLogin\")).get(\"lastTimeZone\"));\n             }\n             if (timeZone == null) {\n                 timeZone = TimeZone.getDefault();\n@@ -178,17 +162,9 @@ public static FlexibleStringExpander getInstance(String original) {\n         return fse;\n     }\n     \n-    /**\n-     * Does on-the-fly parsing and expansion of the original String using\n-     * varaible values from the passed context. Variables are denoted with\n-     * the \"${}\" syntax and the variable name inside the curly-braces can use\n-     * the \".\" (dot) syntax to access sub-Map entries and the \"[]\" square-brace\n-     * syntax to access List elements.\n-     * It Also supports the execution of bsh files by using the 'bsh:' prefix.\n-     * Further it is possible to control the output by specifying the suffix \n-     *     '?currency(XXX)' to format the output according the current locale\n-     *     and specified (XXX) currency\n-     * \n+    /** Does on-the-fly parsing and expansion of the original String using\n+     * variable values from the passed context. A null context argument will\n+     * return the original String.\n      * @param original The original String that will be expanded\n      * @param context A context Map containing the variable values\n      * @return The original String expanded by replacing varaible place holders.\n@@ -197,17 +173,9 @@ public static String expandString(String original, Map<String, ? extends Object>\n         return expandString(original, context, null, null);\n     }\n     \n-    /**\n-     * Does on-the-fly parsing and expansion of the original String using\n-     * varaible values from the passed context. Variables are denoted with\n-     * the \"${}\" syntax and the variable name inside the curly-braces can use\n-     * the \".\" (dot) syntax to access sub-Map entries and the \"[]\" square-brace\n-     * syntax to access List elements.\n-     * It Also supports the execution of bsh files by using the 'bsh:' prefix.\n-     * Further it is possible to control the output by specifying the suffix \n-     *     '?currency(XXX)' to format the output according the current locale\n-     *     and specified (XXX) currency\n-     * \n+    /** Does on-the-fly parsing and expansion of the original String using\n+     * variable values from the passed context. A null context argument will\n+     * return the original String.\n      * @param original The original String that will be expanded\n      * @param context A context Map containing the variable values\n      * @return The original String expanded by replacing varaible place holders.\n@@ -216,17 +184,9 @@ public static String expandString(String original, Map<String, ? extends Object>\n         return expandString(original, context, null, locale);\n     }\n     \n-    /**\n-     * Does on-the-fly parsing and expansion of the original String using\n-     * varaible values from the passed context. Variables are denoted with\n-     * the \"${}\" syntax and the variable name inside the curly-braces can use\n-     * the \".\" (dot) syntax to access sub-Map entries and the \"[]\" square-brace\n-     * syntax to access List elements.\n-     * It Also supports the execution of bsh files by using the 'bsh:' prefix.\n-     * Further it is possible to control the output by specifying the suffix \n-     *     '?currency(XXX)' to format the output according the current locale\n-     *     and specified (XXX) currency\n-     * \n+    /** Does on-the-fly parsing and expansion of the original String using\n+     * variable values from the passed context. A null context argument will\n+     * return the original String.\n      * @param original The original String that will be expanded\n      * @param context A context Map containing the variable values\n      * @return The original String expanded by replacing varaible place holders.",
                "raw_url": "https://github.com/apache/ofbiz/raw/eff5f89d3907edb6cd0294c6ae393319a6b07aa1/framework/base/src/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "sha": "55f85d20d9d997ff8048893263e9c863f621f978",
                "status": "modified"
            }
        ],
        "message": "Simplified Scott's FlexibleStringExpander NPE fix and updated the JavaDocs.\n\nMany thanks to Scott for catching that, and many thanks to David Jones for his suggestions on the refactor.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@688348 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/a9fc92fcc4917e4ef3ab465462512496c5f26008",
        "repo": "ofbiz",
        "unit_tests": [
            "FlexibleStringExpanderTests.java"
        ]
    },
    "ofbiz_fd0c04b": {
        "bug_id": "ofbiz_fd0c04b",
        "commit": "https://github.com/apache/ofbiz/commit/fd0c04be7ac4344577cb55da8f127aa5677125b9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/ofbiz/blob/fd0c04be7ac4344577cb55da8f127aa5677125b9/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/ofbiz/contents/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java?ref=fd0c04be7ac4344577cb55da8f127aa5677125b9",
                "deletions": 1,
                "filename": "framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "patch": "@@ -84,7 +84,7 @@ public String getOriginal() {\n      * @return The original String expanded by replacing varaible place holders.\n      */    \n     public String expandString(Map<String, ? extends Object> context) {\n-        return this.expandString(context, (Locale) context.get(\"locale\"));\n+        return this.expandString(context, context != null ? (Locale) context.get(\"locale\") : null);\n     }\n     \n     /** ",
                "raw_url": "https://github.com/apache/ofbiz/raw/fd0c04be7ac4344577cb55da8f127aa5677125b9/framework/base/src/base/org/ofbiz/base/util/string/FlexibleStringExpander.java",
                "sha": "ce9b30ea15c6ed8c20378bfb52f6e5aafa9ef825",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE introduced in a recent commit, reported by BJ Freeman\n\ngit-svn-id: https://svn.apache.org/repos/asf/ofbiz/trunk@658420 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/ofbiz/commit/11acdcacc2cd76331398486f3f2dc6808e5f9e69",
        "repo": "ofbiz",
        "unit_tests": [
            "FlexibleStringExpanderTests.java"
        ]
    }
}