[{"commit": "https://github.com/apache/openejb/commit/90624cc19eaf039ec12abfd6cb403dec6af76a4a", "parent": "https://github.com/apache/openejb/commit/c295e187a8a829fe714ee8bce6f665cdcdc6bed7", "message": "NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1432057 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/90624cc19eaf039ec12abfd6cb403dec6af76a4a/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java", "blob_url": "https://github.com/apache/openejb/blob/90624cc19eaf039ec12abfd6cb403dec6af76a4a/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java", "sha": "762ad1230b75270a458439e32470b5188bd3fc29", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=90624cc19eaf039ec12abfd6cb403dec6af76a4a", "patch": "@@ -205,7 +205,7 @@ public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webA\n                 }\n \n                 if (deploymentWithApplication) { // don't do it if we detected we should use old deployment\n-                    if (appSkipped) {\n+                    if (appSkipped || application == null) {\n                         application = new InternalApplication(application);\n \n                         for (final String clazz : webApp.restClass) {", "filename": "openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/60453935706fda06620bda1b631a78710e483cd1", "parent": "https://github.com/apache/openejb/commit/8fe9c6349f532cb6793bb193fbf27427c5758e84", "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1427557 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_2", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/60453935706fda06620bda1b631a78710e483cd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java", "blob_url": "https://github.com/apache/openejb/blob/60453935706fda06620bda1b631a78710e483cd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java", "sha": "6d6874ecfef75a702d58af19f0fdea581c3df7f2", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java?ref=60453935706fda06620bda1b631a78710e483cd1", "patch": "@@ -308,7 +308,7 @@ private void cmd(final List<String> additionalArgs, final String cmd, final bool\n \n                 if (\"start\".equals(cmd)) {\n                     server = process;\n-                } else if (\"stop\".equals(cmd)) {\n+                } else if (\"stop\".equals(cmd) && server != null) {\n                     server.waitFor();\n                 }\n ", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/RemoteServer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae", "parent": "https://github.com/apache/openejb/commit/805ee296026313b96981cf39d2df084e3c5f6bdd", "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1425860 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_3", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java", "blob_url": "https://github.com/apache/openejb/blob/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java", "sha": "fb0201cf2e440d6d4e1c24deee24b0fef408674f", "changes": 6, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae", "patch": "@@ -79,11 +79,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             logger.info(\"Set the '\"+VALIDATION_LEVEL+\"' system property to \"+ join(\" or \", levels) +\" for increased validation details.\");\n         }\n \n-        validationFailedException = new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n-\n-        if (validationFailedException != null) throw validationFailedException;\n-\n-        return appModule;\n+        throw  new ValidationFailedException(\"Module failed validation. \" + uberContext.getModuleType() + \"(name=\" + uberContext.getName() + \")\", uberContext, validationFailedException);\n     }\n \n     private void logResults(ValidationContext context, Level level) {", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java"}, {"additions": 11, "raw_url": "https://github.com/apache/openejb/raw/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java", "blob_url": "https://github.com/apache/openejb/blob/6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java", "sha": "3b56543648f34c8d5d36b07f3692553b399a3b51", "changes": 13, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java?ref=6eb2aa65dd130ffd66f3d65d5f887ade3ef9afae", "patch": "@@ -17,15 +17,24 @@\n package org.apache.openejb.config.rules;\n \n import org.apache.openejb.config.EjbModule;\n+import org.apache.xbean.finder.IAnnotationFinder;\n \n import javax.inject.Inject;\n \n public class CheckCdiEnabled extends ValidationBase {\n     public void validate(EjbModule ejbModule) {\n+        if (ejbModule.getFinder() == null) {\n+            return;\n+        }\n+\n         if (ejbModule.getBeans() == null\n-                && (!ejbModule.getFinder().findAnnotatedMethods(Inject.class).isEmpty()\n-                || !ejbModule.getFinder().findAnnotatedFields(Inject.class).isEmpty())) {\n+                && hasAtInject(ejbModule.getFinder())) {\n             warn(ejbModule.getModuleId(), \"cdi.notEnabled\", ejbModule.getModuleId());\n         }\n     }\n+\n+    private static boolean hasAtInject(final IAnnotationFinder finder) {\n+        return !finder.findAnnotatedMethods(Inject.class).isEmpty()\n+                || !finder.findAnnotatedFields(Inject.class).isEmpty();\n+    }\n }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckCdiEnabled.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/12d0a157400f3019bcd19e15201495728bd5b476", "parent": "https://github.com/apache/openejb/commit/6ba241dda114171bb23f343a9645392ecf024c16", "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1423851 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_4", "file": [{"additions": 2, "raw_url": "https://github.com/apache/openejb/raw/12d0a157400f3019bcd19e15201495728bd5b476/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java", "blob_url": "https://github.com/apache/openejb/blob/12d0a157400f3019bcd19e15201495728bd5b476/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java", "sha": "aae109062f8926a67b872806ab9300cbe3cbc3e1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java?ref=12d0a157400f3019bcd19e15201495728bd5b476", "patch": "@@ -99,7 +99,7 @@ private boolean isIn(final PersistenceUnit value, final WebModule war) {\n     }\n \n     private WebModule extractWebApp(final URI moduleUri) {\n-        if (module == null) {\n+        if (module == null || module.getJarLocation() == null) {\n             return null;\n         }\n \n@@ -113,7 +113,7 @@ private WebModule extractWebApp(final URI moduleUri) {\n         }\n \n         for (WebModule webModule : module.getWebModules()) {\n-            if (isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n+            if (webModule.getJarLocation() != null && isParent(new File(webModule.getJarLocation()), moduleFile, appModuleFile)) {\n                 return webModule;\n             }\n         }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/PersistenceUnitLinkResolver.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/85e1c6375d6831e534bff74d8a591ea3a30c0386", "parent": "https://github.com/apache/openejb/commit/6f74b81d77c3222a7b8dbce52fc0cc215019b9b6", "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1400832 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_5", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/85e1c6375d6831e534bff74d8a591ea3a30c0386/openejb/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java", "blob_url": "https://github.com/apache/openejb/blob/85e1c6375d6831e534bff74d8a591ea3a30c0386/openejb/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java", "sha": "3e72179da538ec70b3a9c62e89f4e9d2a41d6d52", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java?ref=85e1c6375d6831e534bff74d8a591ea3a30c0386", "patch": "@@ -282,7 +282,9 @@ private void addProperties(final File conf, final boolean legacySchema, final Fi\n                 if (EnvProps.extractConfigurationFiles()) {\n \n                     final String rawPropsContent = (String) props.get(Properties.class);\n-                    IO.copy(IO.read(rawPropsContent), serviceConfig);\n+                    if (rawPropsContent != null) {\n+                        IO.copy(IO.read(rawPropsContent), serviceConfig);\n+                    }\n \n                 } else {\n                     props.put(\"disabled\", \"true\");", "filename": "openejb/server/openejb-server/src/main/java/org/apache/openejb/server/ServiceManager.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/ca4702b8b54497ca8a406ca8754409c1edf90b88", "parent": "https://github.com/apache/openejb/commit/dabc8efd0d569af4372c899bc723f799fbca9b3d", "message": "avoiding NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1365496 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_6", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/ca4702b8b54497ca8a406ca8754409c1edf90b88/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java", "blob_url": "https://github.com/apache/openejb/blob/ca4702b8b54497ca8a406ca8754409c1edf90b88/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java", "sha": "55aeca7056a595f71d587c49d46e2e88e163f258", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java?ref=ca4702b8b54497ca8a406ca8754409c1edf90b88", "patch": "@@ -186,7 +186,9 @@ public void start() throws Exception {\n         properties.setProperty(\"openejb.home\", catalinaBase);\n         properties.setProperty(\"openejb.base\", catalinaBase);\n         properties.setProperty(\"openejb.servicemanager.enabled\", \"false\");\n-        properties.putAll(configuration.getProperties());\n+        if (configuration.getProperties() != null) {\n+            properties.putAll(configuration.getProperties());\n+        }\n \n         try {\n             ClassLoader classLoader = Thread.currentThread().getContextClassLoader();", "filename": "openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Container.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/7c687383a58c83d472ec5d78244135a887dfdb8b", "parent": "https://github.com/apache/openejb/commit/9a859cb532e49ceff8b9473f898bdd77052069bc", "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1360040 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_7", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/7c687383a58c83d472ec5d78244135a887dfdb8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "blob_url": "https://github.com/apache/openejb/blob/7c687383a58c83d472ec5d78244135a887dfdb8b/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "sha": "15a1be44b909fe695969c60e7fbf5a8e110c007f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=7c687383a58c83d472ec5d78244135a887dfdb8b", "patch": "@@ -808,7 +808,7 @@ private Beans mergeBeansXml(final Beans current, final URL url) {\n                 current.getInterceptors().addAll(beans.getInterceptors());\n             }\n             // check is done here since later we lost the data of the origin\n-            ReadDescriptors.checkDuplicatedByBeansXml(beans, current);\n+            ReadDescriptors.checkDuplicatedByBeansXml(beans, returnValue);\n         } catch (OpenEJBException e) {\n             logger.error(\"Unable to read beans.xml from :\" + url.toExternalForm());\n         }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c", "parent": "https://github.com/apache/openejb/commit/955ea8d9dd0956127bb0e47073e3e7976ce32faf", "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1341276 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_8", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java", "blob_url": "https://github.com/apache/openejb/blob/1bb2ff3e77f01a14829bd15515bc0afc0c199f0c/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java", "sha": "5fc40d09dc1e7bd287e58ba87bd9659d81f6825b", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java?ref=1bb2ff3e77f01a14829bd15515bc0afc0c199f0c", "patch": "@@ -784,7 +784,7 @@ private void discardInstance(ThreadContext threadContext) {\n         }\n \n         Instance instance = checkedOutInstances.remove(primaryKey);\n-        if (!containsExtendedPersistenceContext(instance.beanContext)) {\n+        if (instance != null && !containsExtendedPersistenceContext(instance.beanContext)) {\n             cache.remove(primaryKey);\n         }\n ", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/core/stateful/StatefulContainer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/a74bfb9924bebf67c70797a3de7641c5623c056b", "parent": "https://github.com/apache/openejb/commit/8a2dd902d818da76b7ff3c9d7c25478eff75f022", "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@603579 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_9", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/a74bfb9924bebf67c70797a3de7641c5623c056b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java", "blob_url": "https://github.com/apache/openejb/blob/a74bfb9924bebf67c70797a3de7641c5623c056b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java", "sha": "29f313436d9f9f8ab64b514d54dea55e3eedf48a", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java?ref=a74bfb9924bebf67c70797a3de7641c5623c056b", "patch": "@@ -191,7 +191,7 @@ private void processPersistenceRefs(JndiConsumer component, AppModule appModule,\n \n     private PersistenceUnit processPersistenceRef(LinkResolver<PersistenceUnit> persistenceUnits, PersistenceRef ref, URI moduleURI, String componentName, ValidationContext validation) {\n \n-        if (ref.getMappedName().startsWith(\"jndi:\")){\n+        if (ref.getMappedName() != null && ref.getMappedName().startsWith(\"jndi:\")){\n             return null;\n         }\n ", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AutoConfig.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/1f23e1b2a847dd6e4c44bc45ffd44f59d0376168", "parent": "https://github.com/apache/openejb/commit/b6f329a92f325f1fc90b8060859ff434ee7e4b8b", "message": "fix NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445649 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_10", "file": [{"additions": 8, "raw_url": "https://github.com/apache/openejb/raw/1f23e1b2a847dd6e4c44bc45ffd44f59d0376168/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBReferenceBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/1f23e1b2a847dd6e4c44bc45ffd44f59d0376168/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBReferenceBuilder.java", "sha": "0d0eb0ab957a83daa2152e9eeaeac520c154fbcd", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBReferenceBuilder.java?ref=1f23e1b2a847dd6e4c44bc45ffd44f59d0376168", "patch": "@@ -188,14 +188,18 @@ private ObjectName getImplicitMatch(boolean isSession, NamingContext context, bo\n     private boolean matchesProxyInfo(GBeanData data, boolean isRemote, String home, String remote) {\n         ProxyInfo proxyInfo = (ProxyInfo) data.getAttribute(\"proxyInfo\");\n         if (isRemote) {\n-            return proxyInfo.getHomeInterface().getName().equals(home)\n-                    && proxyInfo.getRemoteInterface().getName().equals(remote);\n+            return matches(proxyInfo.getHomeInterface(), home)\n+                    && matches(proxyInfo.getRemoteInterface(), remote);\n         } else {\n-            return proxyInfo.getLocalHomeInterface().getName().equals(home)\n-                    && proxyInfo.getLocalInterface().getName().equals(remote);\n+            return matches(proxyInfo.getLocalHomeInterface(), home)\n+                    && matches(proxyInfo.getLocalInterface(), remote);\n         }\n     }\n \n+    private boolean matches(Class clazz, String name) {\n+        return clazz != null && clazz.getName().equals(name);\n+    }\n+\n     public static final GBeanInfo GBEAN_INFO;\n \n     static {", "filename": "openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBReferenceBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/f640a1049bb600c283f7933806d4d869bc48c286", "parent": "https://github.com/apache/openejb/commit/c7a8fa4baaa9fc053a0b66d246d3954cef63827f", "message": "TOMEE-723 avoiding NPE in property placeholder\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1431710 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_11", "file": [{"additions": 9, "raw_url": "https://github.com/apache/openejb/raw/f640a1049bb600c283f7933806d4d869bc48c286/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java", "blob_url": "https://github.com/apache/openejb/blob/f640a1049bb600c283f7933806d4d869bc48c286/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java", "sha": "58f6799631e4330dc2ed481a91b42ee218a0e04f", "changes": 12, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java?ref=f640a1049bb600c283f7933806d4d869bc48c286", "patch": "@@ -16,9 +16,10 @@\n  */\n package org.apache.openejb.util;\n \n+import org.apache.openejb.loader.SystemInstance;\n+\n import java.util.Map;\n import java.util.Properties;\n-import org.apache.openejb.loader.SystemInstance;\n \n public final class PropertyPlaceHolderHelper {\n     private static final String PREFIX = \"${\";\n@@ -48,11 +49,16 @@ public static String value(final String key) {\n     }\n \n     public static Properties holds(final Properties properties) {\n-        final Properties updated = new Properties();\n+        // we can put null values in SuperProperties, since properties is often of this type we need to tolerate it\n+        final Properties updated = new SuperProperties();\n+        if (properties == null) {\n+            return updated;\n+        }\n+\n         for (Map.Entry<Object, Object> entry : properties.entrySet()) {\n             final Object rawValue = entry.getValue();\n             if (rawValue instanceof String) {\n-                updated.put(entry.getKey(), value(rawValue.toString()));\n+                updated.put(entry.getKey(), value((String) rawValue));\n             } else {\n                 updated.put(entry.getKey(), rawValue);\n             }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/util/PropertyPlaceHolderHelper.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/32084710a57c93cbb924c9fa86232cd1d1434088", "parent": "https://github.com/apache/openejb/commit/ce8be273d310ab46a40b022345208cb75cc1287f", "message": "avoiding NPE + setting right address to JAXRSServerFactoryBean\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1430039 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_12", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/32084710a57c93cbb924c9fa86232cd1d1434088/openejb/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java", "blob_url": "https://github.com/apache/openejb/blob/32084710a57c93cbb924c9fa86232cd1d1434088/openejb/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java", "sha": "c67749453547dff5d9986b9c54987c3946bd5271", "changes": 14, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java?ref=32084710a57c93cbb924c9fa86232cd1d1434088", "patch": "@@ -56,7 +56,6 @@\n import javax.xml.bind.Marshaller;\n import java.lang.reflect.Field;\n import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -290,11 +289,18 @@ public void deployApplication(final Application application, final String prefix\n     }\n \n     private static String forceLength(final String httpMethod, final int l) {\n+        final String http;\n+        if (httpMethod == null) { // subresourcelocator implies null http method\n+            http = \"\";\n+        } else {\n+            http = httpMethod;\n+        }\n+\n         final StringBuilder builder = new StringBuilder();\n-        for (int i = 0; i < l - httpMethod.length(); i++) {\n+        for (int i = 0; i < l - http.length(); i++) {\n             builder.append(\" \");\n         }\n-        return builder.append(httpMethod).toString();\n+        return builder.append(http).toString();\n     }\n \n     public static String toGenericString(final Method mtd) {\n@@ -362,7 +368,7 @@ private JAXRSServerFactoryBean newFactory(String prefix) {\n         final JAXRSServerFactoryBean factory = new JAXRSServerFactoryBean();\n         factory.setDestinationFactory(transportFactory);\n         factory.setBus(transportFactory.getBus());\n-        factory.setAddress(prefix);\n+        factory.setAddress(prefix.substring(0, prefix.length() - wildcard.length()));\n         return factory;\n     }\n ", "filename": "openejb/server/openejb-cxf-rs/src/main/java/org/apache/openejb/server/cxf/rs/CxfRsHttpListener.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/d1a5a2bae050666dce25483545a8b0f9ef90d47f", "parent": "https://github.com/apache/openejb/commit/2c6e3fb4bfad7f674a2cb5b33302b4aa305d756b", "message": "avoiding NPE and fixing implementation of request#getRequestedSessionId\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1429688 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_13", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/d1a5a2bae050666dce25483545a8b0f9ef90d47f/openejb/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java", "blob_url": "https://github.com/apache/openejb/blob/d1a5a2bae050666dce25483545a8b0f9ef90d47f/openejb/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java", "sha": "03a7b2914ae99520221fd60e4f907efe4f8af5c6", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java?ref=d1a5a2bae050666dce25483545a8b0f9ef90d47f", "patch": "@@ -233,7 +233,10 @@ public String getRemoteUser() {\n \n     @Override\n     public String getRequestedSessionId() {\n-        return session.getId();\n+        if (session != null) {\n+            return session.getId();\n+        }\n+        return null;\n     }\n \n     @Override", "filename": "openejb/server/openejb-http/src/main/java/org/apache/openejb/server/httpd/HttpRequestImpl.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/638990f60985adb04395a653fe69b472d3ca54fe", "parent": "https://github.com/apache/openejb/commit/b9986a203a7ac81b5101c3070687ad3ca5a6029e", "message": "avoiding npe + some more jaxrs test\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1427453 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_14", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java", "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java", "sha": "66405c519994f784c80b9b3a53c1b991186e605a", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java?ref=638990f60985adb04395a653fe69b472d3ca54fe", "patch": "@@ -327,6 +327,10 @@ public PersistenceClassFileTransformer(ClassTransformer classTransformer) {\n     // not the shouldSkip() method from UrlClassLoaderFirst since we skip more here\n     // we just need JPA stuff so all the tricks we have for the server part are useless\n     public static boolean isServerClass(final String name) {\n+        if (name == null) {\n+            return false;\n+        }\n+\n         for (String prefix : URLClassLoaderFirst.FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;\n@@ -369,6 +373,7 @@ public static boolean isServerClass(final String name) {\n                 if (apache.startsWith(\"juli.\")) return true;\n                 if (apache.startsWith(\"webbeans.\")) return true;\n                 if (apache.startsWith(\"cxf.\")) return true;\n+                if (apache.startsWith(\"activemq.\")) return true;\n \n                 if (apache.startsWith(\"commons.\")) {\n                     final String commons = apache.substring(\"commons.\".length());", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/persistence/PersistenceUnitInfoImpl.java"}, {"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java", "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java", "sha": "72b8b447adc30799e19e46edecf098f2762ff9ad", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java?ref=638990f60985adb04395a653fe69b472d3ca54fe", "patch": "@@ -169,6 +169,10 @@ public static boolean canBeLoadedFromSystem(final String name) {\n     // /!\\ please check org.apache.openejb.persistence.PersistenceUnitInfoImpl.isServerClass() too\n     // when updating this method\n     public static boolean shouldSkip(final String name) {\n+        if (name == null) { // can happen with rest servlet definition or errors\n+            return false;\n+        }\n+\n         for (String prefix : FORCED_SKIP) {\n             if (name.startsWith(prefix)) {\n                 return true;", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/util/classloader/URLClassLoaderFirst.java"}, {"additions": 82, "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java", "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java", "sha": "5e6db17a351001046aa1b4c422a086f5b16b0452", "changes": 82, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java?ref=638990f60985adb04395a653fe69b472d3ca54fe", "patch": "@@ -0,0 +1,82 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.ServerWebApplicationException;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.*;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import javax.ws.rs.core.Response;\n+import java.io.InputStream;\n+import java.io.StringWriter;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSRoutingTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", NoClassAtPathApplication.class.getName());\n+    }\n+\n+    @Test\n+    public void routing() {\n+        assertEquals(\"routing\", WebClient.create(BASE_URL).path(\"routing\").get(String.class));\n+    }\n+\n+    public static class NoClassAtPathApplication extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public NoClassAtPathApplication() {\n+            classes.add(FirstService.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static class FirstService {\n+        @Path(\"routing\")\n+        @GET\n+        public String routing() {\n+            return \"routing\";\n+        }\n+    }\n+}", "filename": "openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSRoutingTest.java"}, {"additions": 83, "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java", "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java", "sha": "44417f03461322a7d8b89680cd3bf83eeda98881", "changes": 83, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java?ref=638990f60985adb04395a653fe69b472d3ca54fe", "patch": "@@ -0,0 +1,83 @@\n+/*\n+ *     Licensed to the Apache Software Foundation (ASF) under one or more\n+ *     contributor license agreements.  See the NOTICE file distributed with\n+ *     this work for additional information regarding copyright ownership.\n+ *     The ASF licenses this file to You under the Apache License, Version 2.0\n+ *     (the \"License\"); you may not use this file except in compliance with\n+ *     the License.  You may obtain a copy of the License at\n+ *\n+ *        http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *     Unless required by applicable law or agreed to in writing, software\n+ *     distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *     WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *     See the License for the specific language governing permissions and\n+ *     limitations under the License.\n+ */\n+package org.apache.openejb.server.cxf.rs;\n+\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.openejb.jee.WebApp;\n+import org.apache.openejb.junit.ApplicationComposer;\n+import org.apache.openejb.junit.Classes;\n+import org.apache.openejb.junit.EnableServices;\n+import org.apache.openejb.junit.Module;\n+import org.apache.openejb.server.cxf.rs.beans.MyExpertRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.MyFirstRestClass;\n+import org.apache.openejb.server.cxf.rs.beans.RestWithInjections;\n+import org.apache.openejb.server.cxf.rs.beans.SimpleEJB;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+import javax.ws.rs.GET;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.core.Application;\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+@EnableServices(\"jax-rs\")\n+@RunWith(ApplicationComposer.class)\n+public class JAXRSWithInterfaceTest {\n+    public static final String BASE_URL = \"http://localhost:4204/foo/\";\n+\n+    @Module\n+    @Classes({ RestWithInjections.class, SimpleEJB.class, MyExpertRestClass.class, MyFirstRestClass.class })\n+    public WebApp war() {\n+        return new WebApp()\n+                .contextRoot(\"foo\")\n+                .addServlet(\"REST Application\", Application.class.getName())\n+                .addInitParam(\"REST Application\", \"javax.ws.rs.Application\", InterfaceApp.class.getName());\n+    }\n+\n+    @Test\n+    public void itf() {\n+        assertEquals(\"itf\", WebClient.create(BASE_URL).path(\"itf\").get(String.class));\n+    }\n+\n+    public static class InterfaceApp extends Application {\n+        private final Set<Class<?>> classes = new HashSet<Class<?>>();\n+\n+        public InterfaceApp() {\n+            classes.add(Impl.class);\n+        }\n+\n+        @Override\n+        public Set<Class<?>> getClasses() {\n+            return classes;\n+        }\n+    }\n+\n+    public static interface Itf {\n+        @Path(\"itf\")\n+        @GET\n+        String itf();\n+    }\n+\n+    public static class Impl implements Itf {\n+        public String itf() {\n+            return \"itf\";\n+        }\n+    }\n+}", "filename": "openejb/server/openejb-cxf-rs/src/test/java/org/apache/openejb/server/cxf/rs/JAXRSWithInterfaceTest.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java", "blob_url": "https://github.com/apache/openejb/blob/638990f60985adb04395a653fe69b472d3ca54fe/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java", "sha": "2d6859bea73bded948bba0790ffb25ffa0614e88", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java?ref=638990f60985adb04395a653fe69b472d3ca54fe", "patch": "@@ -71,7 +71,7 @@\n     private List<DeployedService> services = new ArrayList<DeployedService>();\n     private String virtualHost;\n     private boolean enabled = true;\n-    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\");\n+    private String wildcard = SystemInstance.get().getProperty(\"openejb.rest.wildcard\", \".*\"); // embedded = regex, tomee = servlet\n \n     public void afterApplicationCreated(final AppInfo appInfo, final WebAppInfo webApp) {\n         final WebContext webContext = containerSystem.getWebContext(webApp.moduleId);", "filename": "openejb/server/openejb-rest/src/main/java/org/apache/openejb/server/rest/RESTService.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/012de1c95fbeac5da73bfaa239aeae60691b93c7", "parent": "https://github.com/apache/openejb/commit/4cc058e4df456420e4ba4980a8e7e6bde83bb1ab", "message": "avoiding NPE (mainly coming from custom test classes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1407969 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_15", "file": [{"additions": 14, "raw_url": "https://github.com/apache/openejb/raw/012de1c95fbeac5da73bfaa239aeae60691b93c7/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/012de1c95fbeac5da73bfaa239aeae60691b93c7/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "sha": "0370a2264824f7769d3558d2c45867adf81be6c6", "changes": 26, "status": "modified", "deletions": 12, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=012de1c95fbeac5da73bfaa239aeae60691b93c7", "patch": "@@ -1476,20 +1476,22 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n                 addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n             }\n \n-            for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n-                for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n-                    if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n-                            && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n-                        // no need of meta currently since JPA providers doesn't support it\n-                        final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n-                        final List<String> existingClasses = pu.getClazz();\n-                        for (Class<?> clazz : classes) {\n-                            final String name = clazz.getName();\n-                            if (!existingClasses.contains(name)) {\n-                                pu.getClazz().add(name);\n+            if (ejbModule.getAppModule() != null) {\n+                for (PersistenceModule pm : ejbModule.getAppModule().getPersistenceModules()) {\n+                    for (org.apache.openejb.jee.jpa.unit.PersistenceUnit pu : pm.getPersistence().getPersistenceUnit()) {\n+                        if ((pu.isExcludeUnlistedClasses() == null || !pu.isExcludeUnlistedClasses())\n+                                && \"true\".equalsIgnoreCase(pu.getProperties().getProperty(OPENEJB_JPA_AUTO_SCAN))) {\n+                            // no need of meta currently since JPA providers doesn't support it\n+                            final List<Class<?>> classes = finder.findAnnotatedClasses(Entity.class);\n+                            final List<String> existingClasses = pu.getClazz();\n+                            for (Class<?> clazz : classes) {\n+                                final String name = clazz.getName();\n+                                if (!existingClasses.contains(name)) {\n+                                    pu.getClazz().add(name);\n+                                }\n                             }\n+                            pu.setScanned(true);\n                         }\n-                        pu.setScanned(true);\n                     }\n                 }\n             }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/16b34358123e207f7c7263982e2b2c7f0e63796b", "parent": "https://github.com/apache/openejb/commit/5b998566856a667cbaf163652beef886ee7ec310", "message": "avoiding NPE in tomcat datasource creator\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1402801 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_16", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/16b34358123e207f7c7263982e2b2c7f0e63796b/openejb/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java", "blob_url": "https://github.com/apache/openejb/blob/16b34358123e207f7c7263982e2b2c7f0e63796b/openejb/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java", "sha": "c6260105d52fa7b7bd68ff4b7db1d6dc080c1235", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java?ref=16b34358123e207f7c7263982e2b2c7f0e63796b", "patch": "@@ -149,6 +149,10 @@ private void updateProperties(final SuperProperties properties, final Properties\n             }\n         }\n \n+        if (!converted.containsKey(\"Password\")) {\n+            converted.setProperty(\"password\", \"\");\n+        }\n+\n         final String currentUrl = properties.getProperty(\"url\");\n         if (currentUrl != null) {\n             try {", "filename": "openejb/tomee/tomee-jdbc/src/main/java/org/apache/tomee/jdbc/TomEEDataSourceCreator.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb", "parent": "https://github.com/apache/openejb/commit/49a050c227d101db276ac039b83e1607422b60d3", "message": "TOMEE-439 avoiding NPE when appInfo was not built\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1392659 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_17", "file": [{"additions": 41, "raw_url": "https://github.com/apache/openejb/raw/2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java", "sha": "a493636b98273c6b048bea2c9a4375b83b939c26", "changes": 55, "status": "modified", "deletions": 14, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java?ref=2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb", "patch": "@@ -156,7 +156,7 @@\n     /**\n      * Context information for web applications\n      */\n-    private final TreeMap<String, ContextInfo> infos = new TreeMap<String, ContextInfo>();\n+    private final Map<String, ContextInfo> infos = new HashMap<String, ContextInfo>();\n     /**\n      * Global listener for Tomcat fired events.\n      */\n@@ -481,10 +481,13 @@ public void deployWar(final StandardContext standardContext, final String host,\n         }\n     }\n \n-    public AppInfo standaAloneWebAppInfo(final String path) {\n+    public synchronized ContextInfo standaAloneWebAppInfo(final String path) {\n         for (ContextInfo info : infos.values()) {\n-            if (info.appInfo.webAppAlone && (path.equals(info.appInfo.path) || path.equals(info.appInfo.path + \".war\"))) {\n-                return info.appInfo;\n+            if (info.appInfo != null\n+                && (info.appInfo.webAppAlone && (path.equals(info.appInfo.path) || path.equals(info.appInfo.path + \".war\")))) {\n+                return info;\n+            } else if (info.standardContext != null && (path.equals(info.standardContext.getDocBase()) || path.equals(info.standardContext.getDocBase() + \".war\"))) {\n+                return info;\n             }\n         }\n         return null;\n@@ -1317,7 +1320,7 @@ public void destroy(final StandardContext standardContext) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public void afterStop(final StandardServer standardServer) {\n+    public synchronized void afterStop(final StandardServer standardServer) {\n         // clean ear based webapps after shutdown\n         for (final ContextInfo contextInfo : infos.values()) {\n             if (contextInfo != null && contextInfo.deployer != null) {\n@@ -1643,21 +1646,29 @@ private String getId(final String host, final String context) {\n      */\n     public ContextInfo getContextInfo(final StandardContext standardContext) {\n         final String id = getId(standardContext);\n-        return infos.get(id);\n+        final ContextInfo value;\n+        synchronized (infos) {\n+            value = infos.get(id);\n+        }\n+        return value;\n     }\n \n     /**\n      * Gets context info for given web app info.\n      *\n      * @return context info\n      */\n-    private ContextInfo getContextInfo(final String webAppHost, final String webAppContextRoot) {\n+    private synchronized ContextInfo getContextInfo(final String webAppHost, final String webAppContextRoot) {\n         String host = webAppHost;\n         if (host == null) {\n             host = defaultHost;\n         }\n         final String id = host + \"/\" + webAppContextRoot;\n-        return infos.get(id);\n+        final ContextInfo value;\n+        synchronized (infos) {\n+            value = infos.get(id);\n+        }\n+        return value;\n     }\n \n     /**\n@@ -1672,12 +1683,17 @@ private ContextInfo addContextInfo(final String host, final StandardContext stan\n         if (!contextRoot.startsWith(\"/\")) {\n             contextRoot = \"/\" + contextRoot;\n         }\n+\n         final String id = host + contextRoot;\n-        ContextInfo contextInfo = infos.get(id);\n-        if (contextInfo == null) {\n-            contextInfo = new ContextInfo();\n-            contextInfo.standardContext = standardContext;\n-            infos.put(id, contextInfo);\n+\n+        ContextInfo contextInfo;\n+        synchronized (infos) {\n+            contextInfo = infos.get(id);\n+            if (contextInfo == null) {\n+                contextInfo = new ContextInfo();\n+                contextInfo.standardContext = standardContext;\n+                infos.put(id, contextInfo);\n+            }\n         }\n         return contextInfo;\n     }\n@@ -1689,7 +1705,9 @@ private ContextInfo addContextInfo(final String host, final StandardContext stan\n      */\n     private void removeContextInfo(final StandardContext standardContext) {\n         final String id = getId(standardContext);\n-        infos.remove(id);\n+        synchronized (infos) {\n+            infos.remove(id);\n+        }\n     }\n \n     public static class ContextInfo {\n@@ -1699,6 +1717,15 @@ private void removeContextInfo(final StandardContext standardContext) {\n         public HostConfig deployer;\n         public Host host;\n         public LinkResolver<EntityManagerFactory> emfLinkResolver;\n+\n+        @Override\n+        public String toString() {\n+            return \"ContextInfo{\"\n+                    + \"appInfo = \" + appInfo + \", \"\n+                    + \"deployer = \" + deployer + \", \"\n+                    + \"host = \" + host\n+                + \"}\";\n+        }\n     }\n \n     private static class DeployedApplication {", "filename": "openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/TomcatWebAppBuilder.java"}, {"additions": 6, "raw_url": "https://github.com/apache/openejb/raw/2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java", "sha": "7497948e58b2075682832e79ae2ccb37a448256c", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java?ref=2bd5ff3ecc8a1ea78b150a1edcb66bdc29956edb", "patch": "@@ -23,7 +23,6 @@\n import org.apache.openejb.assembler.classic.WebAppBuilder;\n import org.apache.openejb.assembler.classic.WebAppInfo;\n import org.apache.openejb.loader.SystemInstance;\n-import org.apache.tomee.catalina.TomEERuntimeException;\n import org.apache.tomee.catalina.TomcatWebAppBuilder;\n \n import java.io.File;\n@@ -37,7 +36,12 @@ public AppInfo deploy(final String context, final File file) {\n         } catch (Exception e) {\n             throw new OpenEJBRuntimeException(e);\n         }\n-        return tomcatWebAppBuilder.standaAloneWebAppInfo(file.getAbsolutePath());\n+\n+        final TomcatWebAppBuilder.ContextInfo info = tomcatWebAppBuilder.standaAloneWebAppInfo(file.getAbsolutePath());\n+        if (info == null) { // error\n+            return null;\n+        }\n+        return info.appInfo;\n     }\n \n     private AppInfo fakeInfo(final File file, final String context) {", "filename": "openejb/tomee/tomee-catalina/src/main/java/org/apache/tomee/catalina/deployment/TomcatWebappDeployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5", "parent": "https://github.com/apache/openejb/commit/4aaef00a46af74371c3efd6039b7e3e9df81361f", "message": "Avoid NPE during emptyList forEach\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1377486 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_18", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java", "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java", "sha": "6506cf50fb131ce4186b96085d686d7ecfe09a13", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5", "patch": "@@ -29,6 +29,8 @@\n import java.net.URL;\n import java.util.*;\n \n+import static org.apache.openejb.util.CollectionsUtil.safe;\n+\n \n public class CheckDescriptorLocation extends ValidationBase {\n \n@@ -40,13 +42,13 @@ public void validate(AppModule appModule){\n \n         List<String> validated = new ArrayList<String>();\n \n-        for(WebModule webModule:appModule.getWebModules())\n+        for(WebModule webModule: safe(appModule.getWebModules()))\n         {\n             validated.add(webModule.getModuleId());\n             validateWebModule(webModule);\n         }\n \n-        for(EjbModule ejbModule:appModule.getEjbModules())\n+        for(EjbModule ejbModule: safe(appModule.getEjbModules()))\n         {\n             //without this check, CheckDescriptorLocationTest#testWarWithDescriptorInRoot() would fail\n             if(!validated.contains(ejbModule.getModuleId()))\n@@ -57,6 +59,9 @@ public void validate(AppModule appModule){\n \n     }\n \n+\n+\n+\n     private void validateWebModule(DeploymentModule webModule) {\n         URL baseUrl = null;\n         this.module= webModule;", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/rules/CheckDescriptorLocation.java"}, {"additions": 32, "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java", "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java", "sha": "e6849714f2da4e1b40ecd6a3433072bcfa21d6f9", "changes": 32, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5", "patch": "@@ -0,0 +1,32 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtil\r\n+{\r\n+    public static <T> List<T> safe(List<T> list)\r\n+    {\r\n+        if(list==null)\r\n+        {   return Collections.emptyList();\r\n+        }\r\n+        return list;\r\n+    }\r\n+}\r", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/util/CollectionsUtil.java"}, {"additions": 36, "raw_url": "https://github.com/apache/openejb/raw/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java", "blob_url": "https://github.com/apache/openejb/blob/c5c7c0c7c4d0083c63a85f46e479c7a536da62a5/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java", "sha": "2001f22ca1b2f858709032913185121807fd2fbb", "changes": 36, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java?ref=c5c7c0c7c4d0083c63a85f46e479c7a536da62a5", "patch": "@@ -0,0 +1,36 @@\n+/**\r\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ * contributor license agreements.  See the NOTICE file distributed with\r\n+ * this work for additional information regarding copyright ownership.\r\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ * (the \"License\"); you may not use this file except in compliance with\r\n+ * the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.openejb.util;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+import java.util.List;\r\n+\r\n+public class CollectionsUtilTest {\r\n+\r\n+    @Test\r\n+    public void safeIterationForNullList()\r\n+    {\r\n+        List<String> stringList =null;\r\n+        for(String string: CollectionsUtil.safe(stringList))\r\n+        {\r\n+        }\r\n+\r\n+        //PASS: No NPE thrown\r\n+    }\r\n+}\r", "filename": "openejb/container/openejb-core/src/test/java/org/apache/openejb/util/CollectionsUtilTest.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/57339ae9100bfd27b7253b9f603fe44775eae09f", "parent": "https://github.com/apache/openejb/commit/f92a5fd84c44d228973e93431edbb4dc1a06694d", "message": "NPE (last commit check)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1359943 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_19", "file": [{"additions": 9, "raw_url": "https://github.com/apache/openejb/raw/57339ae9100bfd27b7253b9f603fe44775eae09f/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java", "blob_url": "https://github.com/apache/openejb/blob/57339ae9100bfd27b7253b9f603fe44775eae09f/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java", "sha": "feb20bd2ce9d7ddb4f8bf2cd5d04eea4e8ddca04", "changes": 9, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java?ref=57339ae9100bfd27b7253b9f603fe44775eae09f", "patch": "@@ -202,14 +202,23 @@ private Alternatives getAlternatives() {\n     }\n \n     public List<String> getDuplicatedInterceptors() {\n+        if (duplicatedInterceptors == null) {\n+            duplicatedInterceptors = new ArrayList<String>();\n+        }\n         return duplicatedInterceptors;\n     }\n \n     public List<String> getDuplicatedDecorators() {\n+        if (duplicatedDecorators == null) {\n+            duplicatedDecorators = new ArrayList<String>();\n+        }\n         return duplicatedDecorators;\n     }\n \n     public Alternatives getDuplicatedAlternatives() {\n+        if (duplicatedAlternatives == null) {\n+            duplicatedAlternatives = new Alternatives();\n+        }\n         return duplicatedAlternatives;\n     }\n }", "filename": "openejb/container/openejb-jee/src/main/java/org/apache/openejb/jee/Beans.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/3bd55efd17e8e901dfdfb52d8c855253b644623c", "parent": "https://github.com/apache/openejb/commit/c7ae0375222730902d3e47e465426e60c33aaded", "message": "avoiding NPE when file is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1351171 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_20", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/3bd55efd17e8e901dfdfb52d8c855253b644623c/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java", "blob_url": "https://github.com/apache/openejb/blob/3bd55efd17e8e901dfdfb52d8c855253b644623c/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java", "sha": "84b0019ffe318eb38e620669001f88f41edc8de7", "changes": 10, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java?ref=3bd55efd17e8e901dfdfb52d8c855253b644623c", "patch": "@@ -71,9 +71,13 @@ public void setHost(String host) {\n     }\n \n     public void setServerXml(String file) {\n-        final File sXml = new File(file);\n-        if (sXml.exists()) {\n-            serverXml = sXml;\n+        if (file == null) {\n+            serverXml = null;\n+        } else {\n+            final File sXml = new File(file);\n+            if (sXml.exists()) {\n+                serverXml = sXml;\n+            }\n         }\n     }\n ", "filename": "openejb/tomee/tomee-embedded/src/main/java/org/apache/tomee/embedded/Configuration.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/0ce49ffa934eb80b7b1be4cae9cec60493a33cfe", "parent": "https://github.com/apache/openejb/commit/3da46c583b10ac8d75b2a8477b57bccd14df5355", "message": "commons-lang3 instead of 2 + npe checking\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1348154 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_21", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/0ce49ffa934eb80b7b1be4cae9cec60493a33cfe/openejb/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java", "blob_url": "https://github.com/apache/openejb/blob/0ce49ffa934eb80b7b1be4cae9cec60493a33cfe/openejb/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java", "sha": "b97a44cee25763b263ea2f0513b926424898ceb1", "changes": 12, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java?ref=0ce49ffa934eb80b7b1be4cae9cec60493a33cfe", "patch": "@@ -17,7 +17,7 @@\n \r\n package org.apache.tomee.webapp.servlet;\r\n \r\n-import org.apache.commons.lang.StringEscapeUtils;\r\n+import org.apache.commons.lang3.StringEscapeUtils;\r\n import org.apache.tomee.webapp.JsonExecutor;\r\n \r\n import javax.servlet.ServletException;\r\n@@ -43,9 +43,11 @@ public void call(Map<String, Object> json) throws Exception {\n \r\n                 final File[] files = logFolder.listFiles();\r\n                 final Set<String> names = new TreeSet<String>();\r\n-                for (File file : files) {\r\n-                    if (file.length() > 0) {\r\n-                        names.add(file.getName());\r\n+                if (files != null) {\r\n+                    for (File file : files) {\r\n+                        if (file.length() > 0) {\r\n+                            names.add(file.getName());\r\n+                        }\r\n                     }\r\n                 }\r\n \r\n@@ -85,7 +87,7 @@ public void call(Map<String, Object> json) throws Exception {\n \r\n         if (escapeHtml) {\r\n             while ((line = br.readLine()) != null) {\r\n-                addLine.add(StringEscapeUtils.escapeHtml(line));\r\n+                addLine.add(StringEscapeUtils.escapeHtml4(line));\r\n             }\r\n         } else {\r\n             while ((line = br.readLine()) != null) {\r", "filename": "openejb/tomee/tomee-webapp/src/main/java/org/apache/tomee/webapp/servlet/LogServlet.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e", "parent": "https://github.com/apache/openejb/commit/34829fee1dbc5b3a3d111bb84ecda5001cf74db8", "message": "avoiding NPE when the servlet cant be added\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1343695 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_22", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java", "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java", "sha": "b8852d5deb60089d4d706cef9c54b0ecfa6589a6", "changes": 14, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e", "patch": "@@ -171,7 +171,15 @@ public void addServlets(final HTTPContext httpContext, final AppInfo appInfo) {\n         for (WebAppInfo webApps : appInfo.webApps) {\n             for (ServletInfo servlet : webApps.servlets) {\n                 // weird but arquillianurl doesn't match the servlet url but its context\n-                httpContext.add(new Servlet(servlet.servletClass, webApps.contextRoot));\n+                String clazz = servlet.servletClass;\n+                if (clazz == null) {\n+                    clazz = servlet.servletName;\n+                    if (clazz == null) {\n+                        continue;\n+                    }\n+                }\n+\n+                httpContext.add(new Servlet(clazz, webApps.contextRoot));\n                 /*\n                 for (String mapping : servlet.mappings) {\n                     httpContext.add(new Servlet(servlet.servletClass, startWithSlash(uniqueSlash(webApps.contextRoot, mapping))));\n@@ -231,9 +239,7 @@ public ProtocolMetaData deploy(Archive<?> archive) throws DeploymentException {\n             httpContext.add(new Servlet(\"ArquillianServletRunner\", arquillianServlet));\n             addServlets(httpContext, appInfo);\n \n-            // we should probably get all servlets and add them to the context\n-            final ProtocolMetaData metadata = new ProtocolMetaData().addContext(httpContext);\n-            return metadata;\n+            return new ProtocolMetaData().addContext(httpContext);\n         } catch (Exception e) {\n             e.printStackTrace();\n             throw new DeploymentException(\"Unable to deploy\", e);", "filename": "openejb/arquillian/arquillian-tomee-common/src/main/java/org/apache/openejb/arquillian/common/TomEEContainer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/openejb/raw/34829fee1dbc5b3a3d111bb84ecda5001cf74db8/openejb/arquillian/arquillian-tomee-extensions/pom.xml", "blob_url": "https://github.com/apache/openejb/blob/34829fee1dbc5b3a3d111bb84ecda5001cf74db8/openejb/arquillian/arquillian-tomee-extensions/pom.xml", "sha": "15941019865c600bd1aa42da171c665cb0587564", "changes": 22, "status": "removed", "deletions": 22, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/arquillian-tomee-extensions/pom.xml?ref=34829fee1dbc5b3a3d111bb84ecda5001cf74db8", "patch": "@@ -1,22 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n-         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-  <parent>\n-    <artifactId>arquillian</artifactId>\n-    <groupId>org.apache.openejb</groupId>\n-    <version>1.1.0-SNAPSHOT</version>\n-  </parent>\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <artifactId>arquillian-tomee-extensions</artifactId>\n-  <name>OpenEJB :: Arquillian Adaptors Parent :: TomEE Extensions</name>\n-\n-  <dependencies>\n-    <dependency>\n-      <groupId>org.jboss.arquillian.container</groupId>\n-      <artifactId>arquillian-container-test-impl-base</artifactId>\n-      <version>${version.arquillian}</version>\n-    </dependency>\n-  </dependencies>\n-</project>", "filename": "openejb/arquillian/arquillian-tomee-extensions/pom.xml"}, {"additions": 0, "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/pom.xml", "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/arquillian/pom.xml", "sha": "f27b508a288750f7fd6513840a7b765f866852b4", "changes": 1, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/arquillian/pom.xml?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e", "patch": "@@ -48,6 +48,5 @@\n     <module>arquillian-tomee-moviefun-example</module>\n     <module>arquillian-openejb-embedded-4</module>\n     <module>ziplock</module>\n-    <module>arquillian-tomee-extensions</module>\n   </modules>\n </project>", "filename": "openejb/arquillian/pom.xml"}, {"additions": 14, "raw_url": "https://github.com/apache/openejb/raw/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java", "blob_url": "https://github.com/apache/openejb/blob/fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java", "sha": "60e8a9234a78a66fa83dc3185bbbd0ff72a12aff", "changes": 16, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java?ref=fe60a8ffb2253c4fa09c78c3aea0d58908e62b4e", "patch": "@@ -323,8 +323,14 @@ public void afterApplicationCreated(WebAppInfo webApp) {\n         }\n \n         for (ServletInfo servlet : webApp.servlets) {\n+            if (servlet.servletName == null) {\n+                continue;\n+            }\n+\n             PortInfo portInfo = ports.get(servlet.servletName);\n-            if (portInfo == null) continue;\n+            if (portInfo == null) {\n+                continue;\n+            }\n \n             try {\n                 ClassLoader classLoader = webContext.getClassLoader();\n@@ -396,8 +402,14 @@ public void beforeApplicationDestroyed(AppInfo appInfo) {\n                 }\n \n                 for (ServletInfo servlet : webApp.servlets) {\n+                    if (servlet.servletClass == null) {\n+                        continue;\n+                    }\n+\n                     PortInfo portInfo = ports.get(servlet.servletClass);\n-                    if (portInfo == null) continue;\n+                    if (portInfo == null) {\n+                        continue;\n+                    }\n \n                     // remove wsdl addresses from global registry\n                     String address = servletAddresses.remove(webApp.moduleId + \".\" + servlet.servletName);", "filename": "openejb/server/openejb-webservices/src/main/java/org/apache/openejb/server/webservices/WsService.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/2cc273f54f9baeabac629e140cb7cac5a0d92fd1", "parent": "https://github.com/apache/openejb/commit/0fbcbb92feee8a7678ddf6e5c4ccf0f930d61497", "message": "avoiding NPE when scanning jaxrs @Provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1342746 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_23", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/2cc273f54f9baeabac629e140cb7cac5a0d92fd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/2cc273f54f9baeabac629e140cb7cac5a0d92fd1/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "sha": "c9921b87b4ad74a8f123232fef853408f2b33b53", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=2cc273f54f9baeabac629e140cb7cac5a0d92fd1", "patch": "@@ -1438,7 +1438,9 @@ public EjbModule deploy(EjbModule ejbModule) throws OpenEJBException {\n \n             // ejb can be rest bean and only then in standalone so scan providers here too\n             // adding them to app since they should be in the app classloader\n-            addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            if (ejbModule.getAppModule() != null) {\n+                addJaxRsProviders(finder, ejbModule.getAppModule().getJaxRsProviders(), Provider.class);\n+            }\n \n             return ejbModule;\n         }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/da21e11d6b0f3c6d57ed6cc7757546fe60633580", "parent": "https://github.com/apache/openejb/commit/398771af213ed6bc0a8585f8b21754451b7a25c3", "message": "avoiding NPE in MBeanDeployer\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1298185 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_24", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java", "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java", "sha": "0af49b9f36113e6437f86232f64f6973bceac11a", "changes": 7, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580", "patch": "@@ -18,9 +18,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Map;\n+import java.util.Properties;\n import java.util.Set;\n-import java.util.TreeMap;\n import java.util.TreeSet;\n \n /**\n@@ -41,6 +40,6 @@\n     public final JndiEncInfo globalJndiEnc = new JndiEncInfo();\n     public final JndiEncInfo appJndiEnc = new JndiEncInfo();\n     public String cmpMappingsXml;\n-    public Map<String, String> jmx = new TreeMap<String, String>();\n-    public Set<String> mbeans = new TreeSet<String>();\n+    public final Properties jmx = new Properties();\n+    public final Set<String> mbeans = new TreeSet<String>();\n }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/AppInfo.java"}, {"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "sha": "5d087c7c5de33a4365b34f6f560d399a73c537ec", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580", "patch": "@@ -909,7 +909,7 @@ public AppContext createApplication(AppInfo appInfo, ClassLoader classLoader, bo\n         }\n     }\n \n-    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Map<String, String> appMbeans, final String id) {\n+    private static void deployMBean(final BeanManager bm, final ClassLoader cl, final String mbeanClass, final Properties appMbeans, final String id) {\n         final Class<?> clazz;\n         try {\n             clazz = cl.loadClass(mbeanClass);\n@@ -1291,9 +1291,9 @@ public synchronized void destroyApplication(AppInfo appInfo) throws UndeployExce\n \n         // mbeans\n         MBeanServer server = LocalMBeanServer.get();\n-        for (String objectName : appInfo.jmx.values()) {\n+        for (Object objectName : appInfo.jmx.values()) {\n             try {\n-              ObjectName on = new ObjectName(objectName);\n+              ObjectName on = new ObjectName((String) objectName);\n               if (server.isRegistered(on)) {\n                       server.unregisterMBean(on);\n               }", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java", "sha": "07ea3c1501d9809804e177c6d2b51ede18b0af52", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580", "patch": "@@ -102,7 +102,7 @@ public AppInfo build(AppModule appModule) throws OpenEJBException {\n         appInfo.path = appModule.getJarLocation();\n         appInfo.standaloneModule = appModule.isStandaloneModule();\n         appInfo.watchedResources.addAll(appModule.getWatchedResources());\n-        appInfo.mbeans = appModule.getAdditionalLibMbeans();\n+        appInfo.mbeans.addAll(appModule.getAdditionalLibMbeans());\n \n         if (appInfo.appId == null) throw new IllegalArgumentException(\"AppInfo.appId cannot be null\");\n         if (appInfo.path == null) appInfo.path = appInfo.appId;", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java"}, {"additions": 8, "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java", "sha": "602d4f2de87eb7cc6f0deed32f153defdaa8e144", "changes": 8, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580", "patch": "@@ -43,6 +43,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // there is an ejbmodule by webapp so we should't need to go through the webapp\n \n         for (EjbModule ejbModule : appModule.getEjbModules()) {\n+            if (ejbModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : ejbModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final Class<?> realClass = clazz.get();\n                 final String name = clazz.get().getName();\n@@ -55,6 +59,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n             }\n         }\n         for (ClientModule clientModule : appModule.getClientModules()) {\n+            if (clientModule.getFinder() == null) {\n+                continue;\n+            }\n+\n             for (Annotated<Class<?>> clazz : clientModule.getFinder().findMetaAnnotatedClasses(MBean.class)) {\n                 final String name = clazz.get().getName();\n                 if (done.contains(name)) {", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/MBeanDeployer.java"}, {"additions": 2, "raw_url": "https://github.com/apache/openejb/raw/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java", "blob_url": "https://github.com/apache/openejb/blob/da21e11d6b0f3c6d57ed6cc7757546fe60633580/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java", "sha": "acde838e568255944c97f3ad8be5e99df871b420", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java?ref=da21e11d6b0f3c6d57ed6cc7757546fe60633580", "patch": "@@ -90,8 +90,8 @@ public void resetList() {\n     @Test\n     public void mbeans() throws Exception {\n         final Set<String> parsed = new HashSet<String>();\n-        for (String name : appInfo.jmx.values()) {\n-            final ObjectName on = new ObjectName(name);\n+        for (Object name : appInfo.jmx.values()) {\n+            final ObjectName on = new ObjectName((String) name);\n             final String cn = on.getCanonicalName();\n             if (cn.contains(\"name=Empty\")) {\n                 assertTrue(cn.startsWith(\"openejb.user.mbeans\"));", "filename": "openejb/container/openejb-core/src/test/java/org/apache/openejb/config/MBeanDeployerTest.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/33bf16b3d8125f9ccfb367fd058b5304bd566c01", "parent": "https://github.com/apache/openejb/commit/143588e7a6582b75d825b186bbfce9d68c2adf3c", "message": "avoiding NPE when bundle was not found\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1227092 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_25", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/33bf16b3d8125f9ccfb367fd058b5304bd566c01/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "blob_url": "https://github.com/apache/openejb/blob/33bf16b3d8125f9ccfb367fd058b5304bd566c01/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "sha": "65823bd42179ab56de85dbb3e5eb07a33bf567a6", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=33bf16b3d8125f9ccfb367fd058b5304bd566c01", "patch": "@@ -115,7 +115,7 @@ private void deploy(Bundle bundle) {\n                         bundleDump = findFelixJar(bundle.getBundleContext());\n                     }\n \n-                    if (!bundleDump.exists()) {\n+                    if (bundleDump == null || !bundleDump.exists()) {\n                         LOGGER.warn(\"can't find bundle {}\", bundle.getBundleId());\n                         return;\n                     }", "filename": "openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/1544643857220991309dbe51e8a7d7201b83ee8b", "parent": "https://github.com/apache/openejb/commit/5fad339bc751425640972c13ab796b1a6849f08b", "message": "Fix NPE when building geornimo mejb plugin.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1166504 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_26", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openejb/raw/1544643857220991309dbe51e8a7d7201b83ee8b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/1544643857220991309dbe51e8a7d7201b83ee8b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java", "sha": "f3f0f0e20ca78b775b6b87c022203e4cde03ac7a", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java?ref=1544643857220991309dbe51e8a7d7201b83ee8b", "patch": "@@ -451,6 +451,9 @@ else if (type == Double.class) {\n         }\n \n         OpenEjbConfiguration config = SystemInstance.get().getComponent(OpenEjbConfiguration.class);\n+        \n+        if(config !=null){\n+            \n         for (ResourceInfo resource : config.facilities.resources) {\n             String jndiName = resource.jndiName;\n             if (jndiName != null && !jndiName.isEmpty()) {\n@@ -460,7 +463,8 @@ else if (type == Double.class) {\n                 bindings.put(boundName, reference);\n             }\n         }\n-\n+        \n+       }\n         return bindings;\n     }\n ", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/JndiEncBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/a7de83afb6fa2c2f8e0d845642d01a2b5937a388", "parent": "https://github.com/apache/openejb/commit/75eef4eb4ccd7e7b534f8fde09d296546f920596", "message": "avoiding a NPE in ReadDescriptors (for ConfigurationFactoryTest)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1161255 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_27", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/a7de83afb6fa2c2f8e0d845642d01a2b5937a388/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java", "blob_url": "https://github.com/apache/openejb/blob/a7de83afb6fa2c2f8e0d845642d01a2b5937a388/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java", "sha": "c49a5fd5885df17f6f3d253b76bde7fce21c2b46", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java?ref=a7de83afb6fa2c2f8e0d845642d01a2b5937a388", "patch": "@@ -137,7 +137,7 @@ private void readValidationConfigType(Module module) throws OpenEJBException {\n             return;\n         }\n         URL url = (URL) module.getAltDDs().get(\"validation.xml\");\n-        if (url == null) { // library but not a module case\n+        if (url == null && module.getClassLoader() != null) { // library but not a module case\n             url = module.getClassLoader().getResource(\"META-INF/validation.xml\");\n             if (url != null) {\n                 module.getAltDDs().put(\"validation.xml\", url);", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReadDescriptors.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/b28a611c1debb58449d60d3ec602dce59ed7c36b", "parent": "https://github.com/apache/openejb/commit/2c130135e007d31af682149bd594a34fa734c4ed", "message": "Add NPE protection for operations on ThreadContext.getThreadContext().\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1127767 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_28", "file": [{"additions": 9, "raw_url": "https://github.com/apache/openejb/raw/b28a611c1debb58449d60d3ec602dce59ed7c36b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java", "blob_url": "https://github.com/apache/openejb/blob/b28a611c1debb58449d60d3ec602dce59ed7c36b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java", "sha": "4a1b3b9968359bdaf4c093fdce6069291225f9a0", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java?ref=b28a611c1debb58449d60d3ec602dce59ed7c36b", "patch": "@@ -31,11 +31,14 @@\n import org.apache.openejb.core.Operation;\n import org.apache.openejb.core.ThreadContext;\n import org.apache.openejb.util.Classes;\n+import org.apache.openejb.util.LogCategory;\n+import org.apache.openejb.util.Logger;\n \n /**\n  * @version $Rev$ $Date$\n  */\n public class InterceptorStack {\n+    private static final Logger logger = Logger.getInstance(LogCategory.OPENEJB, \"org.apache.openejb.util.resources\");\n     private final Object beanInstance;\n     private final List<Interceptor> interceptors;\n     private final Method targetMethod;\n@@ -122,11 +125,15 @@ public InvocationContext createInvocationContext(Object... parameters) {\n     public Object invoke(Object... parameters) throws Exception {\n         try {\n             InvocationContext invocationContext = createInvocationContext(parameters);\n-            ThreadContext.getThreadContext().set(InvocationContext.class, invocationContext);\n+            if (ThreadContext.getThreadContext() != null) {\n+                ThreadContext.getThreadContext().set(InvocationContext.class, invocationContext);\n+            }\n             Object value = invocationContext.proceed();\n             return value;\n         } finally {\n-            ThreadContext.getThreadContext().remove(InvocationContext.class);\n+            if (ThreadContext.getThreadContext() != null) {\n+                ThreadContext.getThreadContext().remove(InvocationContext.class);\n+            }\n         }\n     }\n ", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/interceptor/InterceptorStack.java"}, {"additions": 12, "raw_url": "https://github.com/apache/openejb/raw/b28a611c1debb58449d60d3ec602dce59ed7c36b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java", "blob_url": "https://github.com/apache/openejb/blob/b28a611c1debb58449d60d3ec602dce59ed7c36b/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java", "sha": "99241df20d21b86fe0e93133fd3bf3f016947fe2", "changes": 17, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java?ref=b28a611c1debb58449d60d3ec602dce59ed7c36b", "patch": "@@ -157,20 +157,27 @@ public void freeInstance(Instance instance, boolean ignoredInstanceCount) {\n         }\n \n         ThreadContext callContext = ThreadContext.getThreadContext();\n-        Operation originalOperation = callContext.getCurrentOperation();\n-        BaseContext.State[] originalAllowedStates = callContext.getCurrentAllowedStates();\n+        \n+        Operation originalOperation = callContext == null ? null : callContext.getCurrentOperation();\n+        BaseContext.State[] originalAllowedStates = callContext == null ? null : callContext.getCurrentAllowedStates();\n+\n         try {\n             // call post destroy method\n-            callContext.setCurrentOperation(Operation.PRE_DESTROY);\n+            if (callContext != null) {\n+                callContext.setCurrentOperation(Operation.PRE_DESTROY);\n+            }\n             Method remove = instance.bean instanceof MessageDrivenBean ? MessageDrivenBean.class.getMethod(\"ejbRemove\") : null;\n             List<InterceptorData> callbackInterceptors = beanContext.getCallbackInterceptors();\n             InterceptorStack interceptorStack = new InterceptorStack(instance.bean, remove, Operation.PRE_DESTROY, callbackInterceptors, instance.interceptors);\n             interceptorStack.invoke();\n         } catch (Throwable re) {\n             MdbInstanceFactory.logger.error(\"The bean instance \" + instance.bean + \" threw a system exception:\" + re, re);\n         } finally {\n-            callContext.setCurrentOperation(originalOperation);\n-            callContext.setCurrentAllowedStates(originalAllowedStates);\n+            \n+            if (callContext != null) {\n+                callContext.setCurrentOperation(originalOperation);\n+                callContext.setCurrentAllowedStates(originalAllowedStates);\n+            }\n         }\n     }\n ", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/mdb/MdbInstanceFactory.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/fd4a16253846b09a2ae7deb032fb49cca9676fb6", "parent": "https://github.com/apache/openejb/commit/76edf90656838958f87e5d3e2cbf61d6642c3d65", "message": "Fix NPE as it might not have remote but RemoteInterfaces\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1104022 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_29", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/fd4a16253846b09a2ae7deb032fb49cca9676fb6/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java", "blob_url": "https://github.com/apache/openejb/blob/fd4a16253846b09a2ae7deb032fb49cca9676fb6/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java", "sha": "2ae1934c4f21fea493307c71ac6611e8bfc60253", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java?ref=fd4a16253846b09a2ae7deb032fb49cca9676fb6", "patch": "@@ -41,8 +41,8 @@\n  * @version $Rev$ $Date$\n  */\n public class MethodInfoUtil {\n-    \n-    \n+\n+\n     /**\n      * Finds the nearest java.lang.reflect.Method with the given NamedMethodInfo\n      * Callbacks can be private so class.getMethod() cannot be used.  Searching\n@@ -85,7 +85,7 @@ public static Method toMethod(Class clazz, NamedMethodInfo info) {\n         }\n \n         throw noSuchMethod;\n-    }    \n+    }\n \n     public static List<Method> matchingMethods(Method signature, Class clazz) {\n         List<Method> list = new ArrayList<Method>();\n@@ -277,14 +277,18 @@ private static Class getClassForParam(String className, ClassLoader cl) throws C\n                     } else if (methodInfo.methodIntf.equals(\"Home\")) {\n                         methods.addAll(matchingMethods(methodInfo, beanContext.getHomeInterface()));\n                     } else if (methodInfo.methodIntf.equals(\"Remote\")) {\n-                        methods.addAll(matchingMethods(methodInfo, beanContext.getRemoteInterface()));\n+                        if (beanContext.getRemoteInterface() != null) {\n+                            methods.addAll(matchingMethods(methodInfo, beanContext.getRemoteInterface()));\n+                        }\n                         for (Class intf : beanContext.getBusinessRemoteInterfaces()) {\n                             methods.addAll(matchingMethods(methodInfo, intf));\n                         }\n                     } else if (methodInfo.methodIntf.equals(\"LocalHome\")) {\n                         methods.addAll(matchingMethods(methodInfo, beanContext.getLocalHomeInterface()));\n                     } else if (methodInfo.methodIntf.equals(\"Local\")) {\n-                        methods.addAll(matchingMethods(methodInfo, beanContext.getLocalInterface()));\n+                        if (beanContext.getLocalInterface() != null) {\n+                            methods.addAll(matchingMethods(methodInfo, beanContext.getLocalInterface()));\n+                        }\n                         for (Class intf : beanContext.getBusinessRemoteInterfaces()) {\n                             methods.addAll(matchingMethods(methodInfo, intf));\n                         }\n@@ -356,7 +360,7 @@ private static boolean containerMethod(Method method) {\n             Method method = iterator.next();\n             if (containerMethod(method)) iterator.remove();\n         }\n-        \n+\n         return methods;\n     }\n ", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/03ae98926e47b6b9c9a19b2bd34bec6c2305f5e1", "parent": "https://github.com/apache/openejb/commit/66736bfd0cbd15bae23149389bd68185e6723243", "message": "OPENEJB-1536 Potential NPE in TimerData (Patch from Shawn Jiang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1098914 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_30", "file": [{"additions": 2, "raw_url": "https://github.com/apache/openejb/raw/03ae98926e47b6b9c9a19b2bd34bec6c2305f5e1/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java", "blob_url": "https://github.com/apache/openejb/blob/03ae98926e47b6b9c9a19b2bd34bec6c2305f5e1/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java", "sha": "9ecd602610bf8d6c8074d20456e2ef7b4b9fe6b4", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java?ref=03ae98926e47b6b9c9a19b2bd34bec6c2305f5e1", "patch": "@@ -78,8 +78,8 @@ public TimerData(long id, EjbTimerServiceImpl timerService, String deploymentId,\n         this.timerService = timerService;\n         this.deploymentId = deploymentId;\n         this.primaryKey = primaryKey;\n-        this.info =timerConfig.getInfo();\n-        this.persistent = timerConfig.isPersistent();\n+        this.info = timerConfig == null ? null : timerConfig.getInfo();\n+        this.persistent = timerConfig == null ? false : timerConfig.isPersistent();\n         this.timer = new TimerImpl(this);\n         this.timeoutMethod = timeoutMethod;\n     }", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/timer/TimerData.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/72def64de239f25276b9b8ed4be2eab19c6e17e6", "parent": "https://github.com/apache/openejb/commit/3a5944ebf8aec4f446786913ea52bf2816f845ab", "message": "A NPE fix for SimpleCdiTest\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@992069 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_31", "file": [{"additions": 6, "raw_url": "https://github.com/apache/openejb/raw/72def64de239f25276b9b8ed4be2eab19c6e17e6/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java", "blob_url": "https://github.com/apache/openejb/blob/72def64de239f25276b9b8ed4be2eab19c6e17e6/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java", "sha": "39e0651363fcd5c1cdeccfc6ca92ed2ad411bb96", "changes": 10, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java?ref=72def64de239f25276b9b8ed4be2eab19c6e17e6", "patch": "@@ -73,14 +73,16 @@ public void buildInjections(Set<Class<?>> managedBeanClasses) throws OpenEJBExce\n             deployer.deploy(cdiInfo);\n \n             JndiEncInfoBuilder infoBuilder = new JndiEncInfoBuilder(appModule);\n-            JndiEncInfo encInfo = new JndiEncInfo();\n-            infoBuilder.build(cdiInfo, cdiInfo.getBeanName(), appModule.path, null, encInfo);\n+            JndiEncInfo moduleJndiEnc = new JndiEncInfo();\n+            JndiEncInfo jndiEnc = new JndiEncInfo();\n+            infoBuilder.build(cdiInfo, cdiInfo.getBeanName(), appModule.path, moduleJndiEnc, jndiEnc);\n \n             InjectionBuilder builder = new InjectionBuilder(classLoader);\n-            List<Injection> injections = builder.buildInjections(encInfo);\n+            List<Injection> injections = builder.buildInjections(jndiEnc);\n \n             cdiInfo.setInjections(injections);\n-            JndiEncBuilder encBuilder = new JndiEncBuilder(encInfo, injections, appModule.path, classLoader);\n+            // TODO: handle app/global/module namespaces?\n+            JndiEncBuilder encBuilder = new JndiEncBuilder(jndiEnc, injections, appModule.path, classLoader);\n             this.contexts.put(cdiInfo, encBuilder.build(JndiEncBuilder.JndiScope.comp));\n         }\n     }", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/CdiResourceInjectionService.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/5c89a523e3649ba35ad0170758859290bbc45298", "parent": "https://github.com/apache/openejb/commit/49c0b5ac3bc40b5e7dd0325974a311ded5db70b0", "message": "avoid a possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@957646 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_32", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/5c89a523e3649ba35ad0170758859290bbc45298/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java", "blob_url": "https://github.com/apache/openejb/blob/5c89a523e3649ba35ad0170758859290bbc45298/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java", "sha": "167cf840ea09f2a8e419c7df61f1b08c826ed5e5", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java?ref=5c89a523e3649ba35ad0170758859290bbc45298", "patch": "@@ -132,7 +132,7 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n         // TODO: This should not be necessary, but having an empty <attributes/> tag\n         // causes some of the unit tests to fail.  Not sure why.  Should be fixed.\n         for (Entity entity : appModule.getCmpMappings().getEntity()) {\n-            if (entity.getAttributes().isEmpty()){\n+            if (entity.getAttributes() != null && entity.getAttributes().isEmpty()){\n                 entity.setAttributes(null);\n             }\n         }", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/CmpJpaConversion.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/6e89279aa062f97e98616e4ba280c54fa9849079", "parent": "https://github.com/apache/openejb/commit/63a0657d9fcd7ad91b4312be036e691b0fc3ae5a", "message": "Avoid NPE (it seems to have broken Geronimo build today)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@606054 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_33", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/6e89279aa062f97e98616e4ba280c54fa9849079/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java", "blob_url": "https://github.com/apache/openejb/blob/6e89279aa062f97e98616e4ba280c54fa9849079/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java", "sha": "83bcbadebdb0677ebb70bec580a4b413d0a0f519", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java?ref=6e89279aa062f97e98616e4ba280c54fa9849079", "patch": "@@ -230,8 +230,10 @@ public void convertMdbConfigs(EjbJar ejbJar, OpenejbJarType openejbJarType) {\n \n     public void mergeEntityMappings(String moduleId, EntityMappings entityMappings, OpenejbJar openejbJar, OpenejbJarType openejbJarType) {\n         Map<String, EntityData> entities =  new TreeMap<String, EntityData>();\n-        for (Entity entity : entityMappings.getEntity()) {\n-            entities.put(entity.getDescription(), new EntityData(entity));\n+        if (entityMappings != null) {\n+            for (Entity entity : entityMappings.getEntity()) {\n+                entities.put(entity.getDescription(), new EntityData(entity));\n+            }\n         }\n         for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n             if (!(enterpriseBean instanceof EntityBeanType)) {", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/OpenEjb2Conversion.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/e1849be01eeb77f421727a3b1c1ea9eb231498c5", "parent": "https://github.com/apache/openejb/commit/c653aee3239e0932281cdd4971e0035015eddb9a", "message": "Updated to fix the NPE for WebAdmin's Configuration feature.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445816 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_34", "file": [{"additions": 2, "raw_url": "https://github.com/apache/openejb/raw/e1849be01eeb77f421727a3b1c1ea9eb231498c5/openejb1/modules/webadmin/src/java/org/openejb/webadmin/main/ConfigBean.java", "blob_url": "https://github.com/apache/openejb/blob/e1849be01eeb77f421727a3b1c1ea9eb231498c5/openejb1/modules/webadmin/src/java/org/openejb/webadmin/main/ConfigBean.java", "sha": "3940368ded90277a750130f81925ad82c62b9d39", "changes": 2, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb1/modules/webadmin/src/java/org/openejb/webadmin/main/ConfigBean.java?ref=e1849be01eeb77f421727a3b1c1ea9eb231498c5", "patch": "@@ -168,6 +168,8 @@ public void writeBody(PrintWriter body) throws IOException {\n \t\t\tconfigurationData = getConfigurationObject();\n \t\t\thandleFile = createHandle(configurationData);\n \t\t\ttry {\n+\t\t\t\tconfigLocation = ConfigUtils.searchForConfiguration();\n+\t\t\t\t\n \t\t\t\topenejb = ConfigUtils.readConfig(configLocation);\n \t\t\t} catch (OpenEJBException e) {\n \t\t\t\tthrow new IOException(e.getMessage());", "filename": "openejb1/modules/webadmin/src/java/org/openejb/webadmin/main/ConfigBean.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/932d7cd011b110049154afbf3fae02452007a8bc", "parent": "https://github.com/apache/openejb/commit/6c06c59c502a038f7dcbf39977316e659acb7113", "message": "Remove an NPE possibility\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445692 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_35", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/932d7cd011b110049154afbf3fae02452007a8bc/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/EntityBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/932d7cd011b110049154afbf3fae02452007a8bc/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/EntityBuilder.java", "sha": "238e8dfd92836841736ba57f69b91f413fc652f0", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/EntityBuilder.java?ref=932d7cd011b110049154afbf3fae02452007a8bc", "patch": "@@ -158,7 +158,7 @@ protected ObjectName getTssBeanObjectName(OpenejbEntityBeanType openejbEntityBea\n             } else if (openejbEntityBean.isSetTssLink()) {\n                 String tssBeanLink = openejbEntityBean.getTssLink().trim();\n                 //todo check this is correct\n-                URI moduleURI = null;\n+                URI moduleURI = URI.create(\"\");\n                 String moduleType = null;\n                 tssBeanObjectName = earContext.getRefContext().locateComponentName(tssBeanLink, moduleURI, moduleType, NameFactory.CORBA_TSS, earContext.getJ2eeContext(), earContext, \"TSS GBean\");\n             } else if (openejbEntityBean.isSetTss()) {", "filename": "openejb2/modules/openejb-builder/src/java/org/openejb/deployment/EntityBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/0b096a781758293c774ada3f9bce57f7f9dc2f51", "parent": "https://github.com/apache/openejb/commit/956bb99438ebe17c25fae771bd3274eb02c2609d", "message": "GERONIMO-813 ServiceContextInterceptor NPE fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445597 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_36", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/0b096a781758293c774ada3f9bce57f7f9dc2f51/openejb2/modules/core/src/java/org/openejb/corba/sunorb/ServiceContextInterceptor.java", "blob_url": "https://github.com/apache/openejb/blob/0b096a781758293c774ada3f9bce57f7f9dc2f51/openejb2/modules/core/src/java/org/openejb/corba/sunorb/ServiceContextInterceptor.java", "sha": "0d79f217964a44cdd63f320cb37efad0444a9282", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/java/org/openejb/corba/sunorb/ServiceContextInterceptor.java?ref=0b096a781758293c774ada3f9bce57f7f9dc2f51", "patch": "@@ -49,6 +49,7 @@\n import javax.net.ssl.SSLSocket;\n \n import com.sun.corba.se.interceptor.RequestInfoExt;\n+import com.sun.corba.se.connection.Connection;\n import org.apache.commons.logging.Log;\n import org.apache.commons.logging.LogFactory;\n import org.omg.CORBA.LocalObject;\n@@ -77,12 +78,15 @@ public void receive_request_service_contexts(ServerRequestInfo ri) {\n         if (log.isDebugEnabled()) log.debug(\"Looking for SSL Session\");\n \n         RequestInfoExt riExt = (RequestInfoExt) ri;\n-        Socket socket = riExt.connection().getSocket();\n-        if (socket instanceof SSLSocket) {\n-            if (log.isDebugEnabled()) log.debug(\"Found SSL Session\");\n-            SSLSocket sslSocket = (SSLSocket) socket;\n-\n-            SSLSessionManager.setSSLSession(ri.request_id(), sslSocket.getSession());\n+        Connection connection = riExt.connection();\n+        if (connection != null) {\n+            Socket socket = connection.getSocket();\n+            if (socket instanceof SSLSocket) {\n+                if (log.isDebugEnabled()) log.debug(\"Found SSL Session\");\n+                SSLSocket sslSocket = (SSLSocket) socket;\n+\n+                SSLSessionManager.setSSLSession(ri.request_id(), sslSocket.getSession());\n+            }\n         }\n     }\n ", "filename": "openejb2/modules/core/src/java/org/openejb/corba/sunorb/ServiceContextInterceptor.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/9b686430284761c7056b4f312a7019b82e939b23", "parent": "https://github.com/apache/openejb/commit/106806a22a54bba10871f8a33f26d578450c7fd9", "message": "Fixed NPE since AssemblyDescriptor may not be set.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445056 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_37", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openejb/raw/9b686430284761c7056b4f312a7019b82e939b23/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/9b686430284761c7056b4f312a7019b82e939b23/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java", "sha": "3711a825d519b0ca1a68c7b06254e9a92cdb311a", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java?ref=9b686430284761c7056b4f312a7019b82e939b23", "patch": "@@ -455,9 +455,11 @@ public String addGBeans(EARContext earContext, Module module, ClassLoader cl) th\n     private static Set collectRoleNames(EjbJarType ejbJar) {\n         Set roleNames = new HashSet();\n \n-        SecurityRoleType[] securityRoles = ejbJar.getAssemblyDescriptor().getSecurityRoleArray();\n-        for (int i=0; i<securityRoles.length; i++) {\n-            roleNames.add(securityRoles[i].getRoleName().getStringValue());\n+        if( ejbJar.isSetAssemblyDescriptor() ) {\n+\t        SecurityRoleType[] securityRoles = ejbJar.getAssemblyDescriptor().getSecurityRoleArray();\n+\t        for (int i=0; i<securityRoles.length; i++) {\n+\t            roleNames.add(securityRoles[i].getRoleName().getStringValue());\n+\t        }\n         }\n \n         return roleNames;", "filename": "openejb2/modules/openejb-builder/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/2e8093a41817b2bc3b0009108f1d8bf71981c73f", "parent": "https://github.com/apache/openejb/commit/ea458aadfacc972f50069d45e1a63fbc2c9c6c33", "message": "Hints on where to remove NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@444910 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_38", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/2e8093a41817b2bc3b0009108f1d8bf71981c73f/openejb2/modules/core/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/2e8093a41817b2bc3b0009108f1d8bf71981c73f/openejb2/modules/core/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java", "sha": "07e3d6c362ab35b7e64cd86d916c604bfde14ce4", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java?ref=2e8093a41817b2bc3b0009108f1d8bf71981c73f", "patch": "@@ -415,16 +415,19 @@ public void addGBeans(EARContext earContext, Module module, ClassLoader cl) thro\n \n         // create an index of the openejb ejb configurations by ejb-name\n         Map openejbBeans = new HashMap();\n+        //TODO NPE if enterprise-beans or session is missing\n         OpenejbSessionBeanType[] openejbSessionBeans = openejbEjbJar.getEnterpriseBeans().getSessionArray();\n         for (int i = 0; i < openejbSessionBeans.length; i++) {\n             OpenejbSessionBeanType sessionBean = openejbSessionBeans[i];\n             openejbBeans.put(sessionBean.getEjbName(), sessionBean);\n         }\n+        //TODO NPE as above\n         OpenejbEntityBeanType[] openejbEntityBeans = openejbEjbJar.getEnterpriseBeans().getEntityArray();\n         for (int i = 0; i < openejbEntityBeans.length; i++) {\n             OpenejbEntityBeanType entityBean = openejbEntityBeans[i];\n             openejbBeans.put(entityBean.getEjbName(), entityBean);\n         }\n+        //TODO NPE as above\n         OpenejbMessageDrivenBeanType[] openejbMessageDrivenBeans = openejbEjbJar.getEnterpriseBeans().getMessageDrivenArray();\n         for (int i = 0; i < openejbMessageDrivenBeans.length; i++) {\n             OpenejbMessageDrivenBeanType messageDrivenBean = openejbMessageDrivenBeans[i];", "filename": "openejb2/modules/core/src/java/org/openejb/deployment/OpenEJBModuleBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/0cd2dfb635e700b2e9da5890cdb014c42785b731", "parent": "https://github.com/apache/openejb/commit/24a5acfb79ecd626f175989c0b0694e018ab6642", "message": "OPENEJB-1912 OPENEJB-1913 OPENEJB-1914 osgi rework (logs, NPE in deployer, bundle file search)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1395157 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_39", "file": [{"additions": 6, "raw_url": "https://github.com/apache/openejb/raw/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "blob_url": "https://github.com/apache/openejb/blob/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "sha": "da2f1f73dd585d8909e0d0a1218298d76da962b8", "changes": 14, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=0cd2dfb635e700b2e9da5890cdb014c42785b731", "patch": "@@ -42,7 +42,6 @@\n import org.apache.openejb.assembler.classic.event.AssemblerDestroyed;\n import org.apache.openejb.assembler.monitoring.JMXContainer;\n import org.apache.openejb.async.AsynchronousPool;\n-import org.apache.openejb.cdi.AsmFactory;\n import org.apache.openejb.cdi.CdiAppContextsService;\n import org.apache.openejb.cdi.CdiBuilder;\n import org.apache.openejb.cdi.CdiResourceInjectionService;\n@@ -153,8 +152,6 @@\n import java.lang.reflect.Method;\n import java.net.MalformedURLException;\n import java.net.URL;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n@@ -1879,11 +1876,12 @@ public void createConnectionManager(ConnectionManagerInfo serviceInfo) throws Op\n \n     public void createSecurityService(SecurityServiceInfo serviceInfo) throws OpenEJBException {\n \n-        ObjectRecipe serviceRecipe = createRecipe(serviceInfo);\n-\n-        Object service = serviceRecipe.create();\n-\n-        logUnusedProperties(serviceRecipe, serviceInfo);\n+        Object service = SystemInstance.get().getComponent(SecurityService.class);\n+        if (service == null) {\n+            ObjectRecipe serviceRecipe = createRecipe(serviceInfo);\n+            service = serviceRecipe.create();\n+            logUnusedProperties(serviceRecipe, serviceInfo);\n+        }\n \n         Class interfce = serviceInterfaces.get(serviceInfo.service);\n         checkImplementation(interfce, service.getClass(), serviceInfo.service, serviceInfo.id);", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java"}, {"additions": 2, "raw_url": "https://github.com/apache/openejb/raw/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java", "blob_url": "https://github.com/apache/openejb/blob/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java", "sha": "1ceeefb330bd045de01cbedfc6bf6099cefa4fc0", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java?ref=0cd2dfb635e700b2e9da5890cdb014c42785b731", "patch": "@@ -48,7 +48,7 @@\n \n     @Override\n     public void start(final BundleContext context) throws Exception {\n-        LOGGER.info(\"Starting OpenEJB for bundle #{0}\", context.getBundle().getBundleId());\n+        LOGGER.info(\"Starting OpenEJB for bundle #{}\", context.getBundle().getBundleId());\n \n         Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n \n@@ -146,7 +146,7 @@ public void stop(final BundleContext context) throws Exception {\n \n     private static void invoke(final Object serviceManager, final String name) throws OpenEJBException, InvocationTargetException, IllegalAccessException {\n         if (serviceManager == null) {\n-            LOGGER.warn(\"can't invoke method {0} since the service manager is null\", name);\n+            LOGGER.warn(\"can't invoke method {} since the service manager is null\", name);\n             return;\n         }\n ", "filename": "openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Activator.java"}, {"additions": 43, "raw_url": "https://github.com/apache/openejb/raw/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "blob_url": "https://github.com/apache/openejb/blob/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "sha": "da64c7db7a795eb3bf69e72739548ddc636a8dd4", "changes": 56, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=0cd2dfb635e700b2e9da5890cdb014c42785b731", "patch": "@@ -92,16 +92,21 @@ public void bundleChanged(final BundleEvent event) {\n                 } catch (NullPointerException npe) {\n                     // can happen when shutting down an OSGi server\n                     // because of all stop events\n-                    LOGGER.warn(\"can't undeploy bundle #{0}\", event.getBundle().getBundleId());\n+                    LOGGER.warn(\"can't undeploy bundle #{}\", event.getBundle().getBundleId());\n                 }\n                 deploy(event.getBundle());\n                 break;\n         }\n     }\n \n     private void deploy(final Bundle bundle) {\n+        if (bundle.getBundleContext() == null) {\n+            return;\n+        }\n+\n         final ClassLoader oldCl = Thread.currentThread().getContextClassLoader();\n         final ClassLoader osgiCl = new OSGIClassLoader(bundle, OpenEJBBundleContextHolder.get().getBundle());\n+\n         Thread.currentThread().setContextClassLoader(osgiCl);\n \n         try {\n@@ -118,11 +123,11 @@ private void deploy(final Bundle bundle) {\n                     }\n \n                     if (bundleDump == null || !bundleDump.exists()) {\n-                        LOGGER.warn(\"can't find bundle {0}\", bundle.getBundleId());\n+                        LOGGER.warn(\"can't find bundle {}\", bundle.getBundleId());\n                         return;\n                     }\n \n-                    LOGGER.info(\"looking bundle {0} in {1}\", bundle.getBundleId(), bundleDump);\n+                    LOGGER.info(\"looking bundle {} in {}\", bundle.getBundleId(), bundleDump);\n                     final AppModule appModule = new OSGiDeploymentLoader(bundle).load(bundleDump);\n                     LOGGER.info(\"deploying bundle #\" + bundle.getBundleId() + \" as an EJBModule\");\n \n@@ -170,6 +175,31 @@ private static File findFelixJar(final BundleContext bundleContext) {\n         int max = 0;\n         File out;\n         File f = null;\n+\n+        final File[] files = root.listFiles();\n+        if (files == null) {\n+            return null;\n+        }\n+\n+        for (File current : files) {\n+            if (current.getName().startsWith(\"version\")) {\n+                final String v = current.getName().substring(\"version\".length());\n+                if (!v.contains(\".\")) {\n+                    continue;\n+                }\n+\n+                final int idx = v.indexOf('.');\n+                final int cMin = Integer.parseInt(v.substring(0, idx));\n+                final int cMax = Integer.parseInt(v.substring(idx + 1, v.length()));\n+\n+                if (cMax > max || (cMax == max && cMin > min)) {\n+                    f = current;\n+                    min = cMin;\n+                    max = cMax;\n+                }\n+            }\n+        }\n+\n         do {\n             do {\n                 out = f;\n@@ -202,15 +232,15 @@ private void undeploy(final Bundle bundle) {\n                     assembler.destroyApplication(paths.remove(bundle));\n                 }\n             } catch (IllegalStateException ise) {\n-                LOGGER.error(\"Can't undeploy bundle #{0}\", bundle.getBundleId());\n+                LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId());\n             } catch (UndeployException e) {\n-                LOGGER.error(\"Can't undeploy bundle #{0}\", bundle.getBundleId(), e);\n+                LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId(), e);\n             } catch (NoSuchApplicationException e) {\n-                LOGGER.error(\"Can't undeploy non existing bundle #{0}\", bundle.getBundleId(), e);\n+                LOGGER.error(\"Can't undeploy non existing bundle #{}\", bundle.getBundleId(), e);\n             }\n         }\n \n-        LOGGER.info(\"[Deployer] Bundle {0} has been stopped\", bundle.getSymbolicName());\n+        LOGGER.info(\"[Deployer] Bundle {} has been stopped\", bundle.getSymbolicName());\n     }\n \n     /**\n@@ -229,19 +259,19 @@ private void registerService(final Bundle bundle, final AppContext appContext) {\n \n             try {\n                 if (beanContext.getBusinessRemoteInterface() != null) {\n-                    LOGGER.info(\"registering remote bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering remote bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, beanContext.getBusinessRemoteInterfaces());\n                 }\n                 if (beanContext.getBusinessLocalInterface() != null) {\n-                    LOGGER.info(\"registering local bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering local bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, beanContext.getBusinessLocalInterfaces());\n                 }\n                 if (beanContext.isLocalbean()) {\n-                    LOGGER.info(\"registering local view bean: {0}\", beanContext.getEjbName());\n+                    LOGGER.info(\"registering local view bean: {}\", beanContext.getEjbName());\n                     registerService(beanContext, context, Arrays.asList(beanContext.getBusinessLocalBeanInterface()));\n                 }\n             } catch (Exception e) {\n-                LOGGER.error(\"[Deployer] can't register: {0}\", beanContext.getEjbName());\n+                LOGGER.error(\"[Deployer] can't register: {}\", beanContext.getEjbName());\n             }\n         }\n     }\n@@ -257,9 +287,9 @@ private void registerService(final BeanContext beanContext, final BundleContext\n             try {\n                 final Object service = ProxyEJB.simpleProxy(beanContext, itfs);\n                 registrations.get(context.getBundle()).add(context.registerService(str(itfs), service, new Properties()));\n-                LOGGER.info(\"EJB registered: {0} for interfaces {1}\", beanContext.getEjbName(), interfaces);\n+                LOGGER.info(\"EJB registered: {} for interfaces {}\", beanContext.getEjbName(), interfaces);\n             } catch (IllegalArgumentException iae) {\n-                LOGGER.error(\"can't register: {0} for interfaces {1}\", beanContext.getEjbName(), interfaces);\n+                LOGGER.error(\"can't register: {} for interfaces {}\", beanContext.getEjbName(), interfaces);\n             }\n         }\n     }", "filename": "openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java", "blob_url": "https://github.com/apache/openejb/blob/0cd2dfb635e700b2e9da5890cdb014c42785b731/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java", "sha": "7b16fa20298909ca1132d13c9b8980bbf93823d3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java?ref=0cd2dfb635e700b2e9da5890cdb014c42785b731", "patch": "@@ -49,7 +49,7 @@ public void afterBeanDiscovery(@Observes final AfterBeanDiscovery abd) {\n                 for (ServiceReference service  : services) {\n                     final Class<?> clazz = serviceClass(service);\n                     abd.addBean(new OSGiServiceBean<Object>(service));\n-                    LOGGER.debug(\"added service {0} as a CDI Application scoped bean\", clazz.getName());\n+                    LOGGER.debug(\"added service {} as a CDI Application scoped bean\", clazz.getName());\n                 }\n             }\n         }", "filename": "openejb/osgi/openejb-core-osgi/src/main/java/org/apache/openejb/core/osgi/impl/RegisterOSGIServicesExtension.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/f6ef6a9b6826318d3279ec88f0ca07d90344baa5", "parent": "https://github.com/apache/openejb/commit/a3da141b5b602fd9b308b2abeff65b6bba87ecad", "message": "TOMEE-383 avoiding NPE when a pojo ws is deployed without interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1374804 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_40", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openejb/raw/f6ef6a9b6826318d3279ec88f0ca07d90344baa5/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java", "blob_url": "https://github.com/apache/openejb/blob/f6ef6a9b6826318d3279ec88f0ca07d90344baa5/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java", "sha": "64793d279c62cea29961ad95fdbf1846ce889bce", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java?ref=f6ef6a9b6826318d3279ec88f0ca07d90344baa5", "patch": "@@ -41,14 +41,17 @@ public synchronized void addPort(String serviceId, QName serviceQName, String po\n \n         // create portAddress\n         PortAddress portAddress = portsById.get(portId);\n-        if (portAddress != null) {\n+        if (portAddress != null) { // shouldn't happen but better to avoid NPE here\n             throw new OpenEJBException(\"A webservice port with qname \" + portAddress.getPortQName() + \" is already registered to the portId \" + portId);\n         }\n         portAddress = new PortAddress(portId, serviceQName, portQName, address, portInterface);\n         portsById.put(portId, portAddress);\n \n         // portsByInterface\n-        Map<String, PortAddress> ports = portsByInterface.get(portInterface);\n+        Map<String, PortAddress> ports = null;\n+        if (portInterface != null) { // localbean have no interface\n+            ports = portsByInterface.get(portInterface);\n+        }\n         if (ports == null) {\n             ports = new TreeMap<String, PortAddress>();\n             portsByInterface.put(portInterface, ports);", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/core/webservices/PortAddressRegistryImpl.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/da18a8d89b049d24844ee37c2db10e5deb2db42c", "parent": "https://github.com/apache/openejb/commit/99ba75c962be8ce0f635477544f87088c99b34af", "message": "trying to avoid NPE (appears on builbot) + logging a warning if a a war is deployed without extension\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1373184 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_41", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java", "sha": "e249e0b46712d70c0a4fbe6e6ad978b680405bae", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java?ref=da18a8d89b049d24844ee37c2db10e5deb2db42c", "patch": "@@ -81,6 +81,9 @@ public static ValidatorFactory buildFactory(ValidationInfo config, ClassLoader c\n                 factory = Validation.buildDefaultValidatorFactory();\n             } else {\n                 Configuration<?> configuration = getConfig(config);\n+                if (configuration == null) {\n+                    configuration = getConfig(config);\n+                }\n                 try {\n                     factory = configuration.buildValidatorFactory();\n                 } catch (ValidationException ve) {", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/ValidatorBuilder.java"}, {"additions": 14, "raw_url": "https://github.com/apache/openejb/raw/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "blob_url": "https://github.com/apache/openejb/blob/da18a8d89b049d24844ee37c2db10e5deb2db42c/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "sha": "74363546a66edd30ec357af0db60dd376cb554b2", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=da18a8d89b049d24844ee37c2db10e5deb2db42c", "patch": "@@ -84,6 +84,7 @@\n import java.util.jar.JarEntry;\n import java.util.jar.JarFile;\n import java.util.jar.Manifest;\n+import java.util.zip.ZipEntry;\n \n import static org.apache.openejb.config.NewLoaderLogic.applyBuiltinExcludes;\n import static org.apache.openejb.config.TldScanner.scanForTagLibs;\n@@ -1538,6 +1539,19 @@ public boolean accept(final String annotationName) {\n \n             if (classFinder.find(filter)) {\n                 cls = EjbModule.class;\n+                // if it is a war just throw an error\n+                try {\n+                    final File ar = URLs.toFile(urls);\n+                    if (!ar.isDirectory() && !ar.getName().endsWith(\"ar\")) { // guess no archive extension, check it is not a hidden war\n+                        final JarFile war = new JarFile(ar);\n+                        final ZipEntry entry = war.getEntry(\"WEB-INF/\");\n+                        if (entry != null) {\n+                            logger.warning(\"you deployed \" + urls.toExternalForm() + \", it seems it is a war with no extension, please rename it\");\n+                        }\n+                    }\n+                } catch (Exception ignored) {\n+                    // no-op\n+                }\n             }\n \n             if (otherTypes.size() > 0) {", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/33fa25d76d98329c2a11f2146b020d9e0573ee2b", "parent": "https://github.com/apache/openejb/commit/7c687383a58c83d472ec5d78244135a887dfdb8b", "message": "TOMEE-278 just a NPE check which can happen with badly package apps\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1360457 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_42", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/33fa25d76d98329c2a11f2146b020d9e0573ee2b/openejb/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java", "blob_url": "https://github.com/apache/openejb/blob/33fa25d76d98329c2a11f2146b020d9e0573ee2b/openejb/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java", "sha": "da26f3bd38d08e7ae04761f7eaa9d71463a87980", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java?ref=33fa25d76d98329c2a11f2146b020d9e0573ee2b", "patch": "@@ -372,7 +372,10 @@ private void deployManagedBeans(Set<Class<?>> beanClasses, List<BeanContext> ejb\n         final Map<Class<?>, AnnotatedType<?>> annotatedTypes = new LinkedHashMap<Class<?>, AnnotatedType<?>>();\n         for (Class<?> implClass : managedBeans) { // create all annotated types first to be sure extensions can use it during the fire\n             //Define annotation type\n-            annotatedTypes.put(implClass, webBeansContext.getAnnotatedElementFactory().newAnnotatedType(implClass));\n+            final AnnotatedType<?> at = webBeansContext.getAnnotatedElementFactory().newAnnotatedType(implClass);\n+            if (at != null) {\n+                annotatedTypes.put(implClass, at);\n+            }\n         }\n         for (Map.Entry<Class<?>, AnnotatedType<?>> implClass : annotatedTypes.entrySet()) {\n             //Fires ProcessAnnotatedType", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/cdi/OpenEJBLifecycle.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/1d676036c6e3f617b9025138773bdbf99913c2db", "parent": "https://github.com/apache/openejb/commit/30b95404da7685dd9aee6777127363a9542b7be2", "message": "fixing NPE when we don't find the webapp from the listener\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1291835 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_43", "file": [{"additions": 8, "raw_url": "https://github.com/apache/openejb/raw/1d676036c6e3f617b9025138773bdbf99913c2db/openejb/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java", "blob_url": "https://github.com/apache/openejb/blob/1d676036c6e3f617b9025138773bdbf99913c2db/openejb/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java", "sha": "a913ffbba081e5e1274792f751547d97e6bae872", "changes": 14, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java?ref=1d676036c6e3f617b9025138773bdbf99913c2db", "patch": "@@ -70,12 +70,14 @@ public void lifecycleEvent(LifecycleEvent event) {\n             if (webappDir == null && event.getSource() instanceof StandardServer) {\n                 final StandardServer server = (StandardServer) event.getSource();\n                 webappDir = tryToFindAndExtractWar(server);\n-                final File exploded = extractDirectory(webappDir);\n-                if (webappDir != null) {\n-                    extract(webappDir, exploded);\n+                if (webappDir != null) { // we are using webapp startup\n+                    final File exploded = extractDirectory(webappDir);\n+                    if (webappDir != null) {\n+                        extract(webappDir, exploded);\n+                    }\n+                    webappDir = exploded;\n+                    TomcatHelper.setServer(server);\n                 }\n-                webappDir = exploded;\n-                TomcatHelper.setServer(server);\n             }\n             if (webappDir != null) {\n                 final Properties properties = new Properties();\n@@ -93,7 +95,7 @@ public void lifecycleEvent(LifecycleEvent event) {\n         }\n     }\n \n-    private File extractDirectory(final File webappDir) {\n+    private static File extractDirectory(final File webappDir) {\n         File exploded = new File(webappDir.getAbsolutePath().replace(\".war\", \"\"));\n         int i = 0;\n         while (exploded.exists()) {", "filename": "openejb/tomee/tomee-loader/src/main/java/org/apache/tomee/loader/OpenEJBListener.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/c7b482d2fec02c9dd843e2289b833aa8d3582382", "parent": "https://github.com/apache/openejb/commit/6abc96fe79d6d2b6958ca93de623c6596e288272", "message": "simply logging NPE when bundleevent.updated is sent and the OSGi container is shutting down\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1222283 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_44", "file": [{"additions": 11, "raw_url": "https://github.com/apache/openejb/raw/c7b482d2fec02c9dd843e2289b833aa8d3582382/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "blob_url": "https://github.com/apache/openejb/blob/c7b482d2fec02c9dd843e2289b833aa8d3582382/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "sha": "c530d68fc26a22d591efb44f8422bd2111185ff8", "changes": 13, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=c7b482d2fec02c9dd843e2289b833aa8d3582382", "patch": "@@ -79,7 +79,13 @@ public void bundleChanged(BundleEvent event) {\n                 undeploy(event.getBundle());\n                 break;\n             case BundleEvent.UPDATED:\n-                undeploy(event.getBundle());\n+                try {\n+                    undeploy(event.getBundle());\n+                } catch (NullPointerException npe) {\n+                    // can happen when shutting down an OSGi server\n+                    // because of all stop events\n+                    LOGGER.warn(\"can't undeploy bundle #{}\", event.getBundle().getBundleId());\n+                }\n                 deploy(event.getBundle());\n                 break;\n         }\n@@ -168,7 +174,10 @@ private void undeploy(Bundle bundle) {\n \n         if (paths.containsKey(bundle)) {\n             try {\n-                SystemInstance.get().getComponent(Assembler.class).destroyApplication(paths.remove(bundle));\n+                Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n+                if (assembler != null) { // openejb stopped before bundles when shuttind down the OSGi container\n+                    assembler.destroyApplication(paths.remove(bundle));\n+                }\n             } catch (IllegalStateException ise) {\n                 LOGGER.error(\"Can't undeploy bundle #{}\", bundle.getBundleId());\n             } catch (UndeployException e) {", "filename": "openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/cc78d4aa8dbcd3f9d016a65925b14f64cb7cff3f", "parent": "https://github.com/apache/openejb/commit/88e415eaf25acdf33f16a2a464fad6d08881f2e3", "message": "osgi bundle.findEntries can return null, avoid the NPE which can happen\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1205946 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_45", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/cc78d4aa8dbcd3f9d016a65925b14f64cb7cff3f/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "blob_url": "https://github.com/apache/openejb/blob/cc78d4aa8dbcd3f9d016a65925b14f64cb7cff3f/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java", "sha": "a284fba7dcc75ba37d1282d0023a8ba5751b5b87", "changes": 20, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java?ref=cc78d4aa8dbcd3f9d016a65925b14f64cb7cff3f", "patch": "@@ -16,11 +16,6 @@\n  */\n package org.apache.openejb.core.osgi.impl;\n \n-import java.io.File;\n-import java.net.URL;\n-import java.util.Enumeration;\n-import java.util.Properties;\n-\n import org.apache.openejb.assembler.classic.AppInfo;\n import org.apache.openejb.assembler.classic.Assembler;\n import org.apache.openejb.assembler.classic.EjbJarInfo;\n@@ -34,6 +29,11 @@\n import org.osgi.framework.BundleEvent;\n import org.osgi.framework.BundleListener;\n \n+import java.io.File;\n+import java.net.URL;\n+import java.util.Enumeration;\n+import java.util.Properties;\n+\n /**\n  * @version $Rev$ $Date$\n  */\n@@ -54,9 +54,9 @@ private void deploy(Bundle bundle) {\n         System.out.println(String.format(\"[Deployer] Bundle %s has been started\", bundle.getSymbolicName()));\n \n         System.out.println(String.format(\"[Deployer] Checking whether it's an EJB module\"));\n-        Enumeration<?> e = bundle.findEntries(\"META-INF\", \"ejb-jar.xml\", false);\n-        if (e.hasMoreElements()) {\n-            URL ejbJarUrl = (URL) e.nextElement();\n+        Enumeration<URL> e = bundle.findEntries(\"META-INF\", \"ejb-jar.xml\", false);\n+        if (e != null && e.hasMoreElements()) {\n+            URL ejbJarUrl = e.nextElement();\n \n             System.out.println(\"[Deployer] It's an EJB module: \" + ejbJarUrl);\n \n@@ -73,7 +73,7 @@ private void deploy(Bundle bundle) {\n                     ConfigurationFactory configurationFactory = new ConfigurationFactory();\n                     AppInfo appInfo = configurationFactory.configureApplication(appModule);\n \n-                    Assembler assembler = (Assembler) SystemInstance.get().getComponent(Assembler.class);\n+                    Assembler assembler = SystemInstance.get().getComponent(Assembler.class);\n                     System.out.println(assembler);\n                     System.out.println(appInfo);\n                     assembler.createApplication(appInfo);\n@@ -115,7 +115,7 @@ private void registerService(Bundle bundle, AppInfo appInfo) {\n         for (EjbJarInfo ejbJarInfo : appInfo.ejbJars) {\n             for (EnterpriseBeanInfo ejbInfo : ejbJarInfo.enterpriseBeans) {\n                 try {\n-                    context.registerService(ejbInfo.businessRemote.toArray(new String[0]), bundle.loadClass(\n+                    context.registerService(ejbInfo.businessRemote.toArray(new String[ejbInfo.businessRemote.size()]), bundle.loadClass(\n                             ejbInfo.ejbClass).newInstance(), new Properties());\n                     System.out.println(String.format(\n                             \"[Deployer] Service object %s registered under the class names: %s\", ejbInfo.ejbClass,", "filename": "openejb/container/openejb-osgi/src/main/java/org/apache/openejb/core/osgi/impl/Deployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc", "parent": "https://github.com/apache/openejb/commit/30db9245e5d3421fb5014b85f97aed3dd14699b8", "message": "avoiding NPE when a custom mdb container uses badly defined activation properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1203155 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_46", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/ed51a27e9ded92bf94f86cd09590e0a5e521d5dc/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "sha": "dc438489a407a9af0649798cb445c89fac57bb6c", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=ed51a27e9ded92bf94f86cd09590e0a5e521d5dc", "patch": "@@ -827,7 +827,13 @@ void process(ClassLoader cl, String cls, Object object) {\n \n \t\tprivate String getConfigPropertyType(javax.resource.spi.ConfigProperty annotation, Class<?> type) {\n \t\t\tClass<?> t = (annotation == null) ? null : annotation.type();\n-\t\t\tif (t == null || t.equals(Object.class)) {\n+            if (t == null && type != null) {\n+                return type.getName();\n+            } else if (t == null) {\n+                return null;\n+            }\n+\n+\t\t\tif (t.equals(Object.class)) {\n \t\t\t\tt = type;\n \t\t\t}\n             if (t == null) { // t == null && type == null", "filename": "openejb/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c", "parent": "https://github.com/apache/openejb/commit/071417e3bd16bf4c48be7c0d24ef3ec863968788", "message": "OPENEJB-1515 NPE in MethodScheduleBuilder.build(BeanContext, EnterpriseBeanInfo) (Patch from Shawn Jiang)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1098934 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_47", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java", "sha": "c1e46766815858aba1bbe37d98e68fa5ae0ddd6f", "changes": 44, "status": "modified", "deletions": 37, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java?ref=b7f7e2896fb1d1d28a7e3131fa5641ece33f742c", "patch": "@@ -173,7 +173,7 @@ public BeanContext build() throws OpenEJBException {\n             StatefulBeanInfo statefulBeanInfo = (StatefulBeanInfo) bean;\n \n             for (InitMethodInfo init : statefulBeanInfo.initMethods) {\n-                Method beanMethod = toMethod(ejbClass, init.beanMethod);\n+                Method beanMethod = MethodInfoUtil.toMethod(ejbClass, init.beanMethod);\n                 List<Method> methods = new ArrayList<Method>();\n \n                 if (home != null) methods.addAll(Arrays.asList(home.getMethods()));\n@@ -191,7 +191,7 @@ public BeanContext build() throws OpenEJBException {\n             }\n \n             for (RemoveMethodInfo removeMethod : statefulBeanInfo.removeMethods) {\n-                Method method = toMethod(ejbClass, removeMethod.beanMethod);\n+                Method method = MethodInfoUtil.toMethod(ejbClass, removeMethod.beanMethod);\n                 deployment.getRemoveMethods().add(method);\n                 deployment.setRetainIfExeption(method, removeMethod.retainIfException);\n             }\n@@ -276,7 +276,7 @@ public BeanContext build() throws OpenEJBException {\n         //we could directly check the matching bean method.\n         if (ejbType == BeanType.STATELESS || ejbType == BeanType.SINGLETON || ejbType == BeanType.STATEFUL) {\n             for (NamedMethodInfo methodInfo : bean.asynchronous) {\n-                Method method = toMethod(ejbClass, methodInfo);\n+                Method method = MethodInfoUtil.toMethod(ejbClass, methodInfo);\n                 deployment.getMethodContext(deployment.getMatchingBeanMethod(method)).setAsynchronous(true);\n             }\n             for (String className : bean.asynchronousClasses) {\n@@ -349,9 +349,9 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n         try {\n             if (TimedObject.class.isAssignableFrom(ejbClass)) {\n                 timeout = ejbClass.getMethod(\"ejbTimeout\", Timer.class);\n-            } else if (info.methodParams != null) {\n+            } else {\n                 try {\n-                    timeout = toMethod(ejbClass, info);\n+                    timeout = MethodInfoUtil.toMethod(ejbClass, info);\n                 } catch (IllegalStateException e) {\n                     //Spec 18.2.5.3 [102] For the compatibility of timeout method signature, if method-params is  not set, it is also required to search the method signaure below :\n                     //void <METHOD> (Timer timer)\n@@ -360,13 +360,13 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n                     // not get 'Callback method does not exist' runtime exceptions and instead\n                     // get a validation failure.  Then we can explicitly add the (Timer) param\n                     // if the fallback method does exist.\n-                    if (info.methodParams.size() == 0) {\n+                    if (info.methodParams == null) {\n                         NamedMethodInfo candidateInfo = new NamedMethodInfo();\n                         candidateInfo.className = info.className;\n                         candidateInfo.id = info.id;\n                         candidateInfo.methodName = info.methodName;\n                         candidateInfo.methodParams = Arrays.asList(Timer.class.getName());\n-                        timeout = toMethod(ejbClass, candidateInfo);\n+                        timeout = MethodInfoUtil.toMethod(ejbClass, candidateInfo);\n                     }\n                 }\n             }\n@@ -377,36 +377,6 @@ private Method getTimeout(Class ejbClass, NamedMethodInfo info) {\n         return timeout;\n     }\n \n-    private Method toMethod(Class clazz, NamedMethodInfo info) {\n-        List<Class> parameterTypes = new ArrayList<Class>();\n-\n-        if (info.methodParams != null){\n-            for (String paramType : info.methodParams) {\n-                try {\n-                    parameterTypes.add(Classes.forName(paramType, clazz.getClassLoader()));\n-                } catch (ClassNotFoundException cnfe) {\n-                    throw new IllegalStateException(\"Parameter class could not be loaded for type \" + paramType, cnfe);\n-                }\n-            }\n-        }\n-\n-        Class[] parameters = parameterTypes.toArray(new Class[parameterTypes.size()]);\n-\n-        IllegalStateException noSuchMethod = null;\n-        while (clazz != null) {\n-            try {\n-                return clazz.getDeclaredMethod(info.methodName, parameters);\n-            } catch (NoSuchMethodException e) {\n-                if (noSuchMethod == null) {\n-                    noSuchMethod = new IllegalStateException(\"Callback method does not exist: \" + clazz.getName() + \".\" + info.methodName, e);\n-                }\n-                clazz = clazz.getSuperclass();\n-            }\n-        }\n-\n-        throw noSuchMethod;\n-    }\n-\n \n     private Class loadClass(String className, String messageCode) throws OpenEJBException {\n         Class clazz = load(className, messageCode);", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/EnterpriseBeanBuilder.java"}, {"additions": 49, "raw_url": "https://github.com/apache/openejb/raw/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java", "blob_url": "https://github.com/apache/openejb/blob/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java", "sha": "eb5166cba67fed17825b939da1ad2300e5bcd619", "changes": 49, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java?ref=b7f7e2896fb1d1d28a7e3131fa5641ece33f742c", "patch": "@@ -17,13 +17,17 @@\n package org.apache.openejb.assembler.classic;\n \n import org.apache.openejb.BeanContext;\n+import org.apache.openejb.util.Classes;\n import org.apache.openejb.util.Join;\n+import org.apache.openejb.util.SetAccessible;\n \n import javax.ejb.EJBLocalObject;\n import javax.ejb.EJBObject;\n import javax.ejb.EJBHome;\n import javax.ejb.EJBLocalHome;\n+\n import static java.util.Arrays.asList;\n+\n import java.util.Comparator;\n import java.util.List;\n import java.util.ArrayList;\n@@ -37,6 +41,51 @@\n  * @version $Rev$ $Date$\n  */\n public class MethodInfoUtil {\n+    \n+    \n+    /**\n+     * Finds the nearest java.lang.reflect.Method with the given NamedMethodInfo\n+     * Callbacks can be private so class.getMethod() cannot be used.  Searching\n+     * starts by looking in the specified class, if the method is not found searching continues with\n+     * the immediate parent and continues recurssively until the method is found or java.lang.Object\n+     * is reached.  If the method is not found a IllegalStateException is thrown.\n+     *\n+     * @param clazz\n+     * @param methodName\n+     * @param parameterTypes\n+     * @return\n+     * @throws IllegalStateException if the method is not found in this class or any of its parent classes\n+     */\n+    public static Method toMethod(Class clazz, NamedMethodInfo info) {\n+        List<Class> parameterTypes = new ArrayList<Class>();\n+\n+        if (info.methodParams != null){\n+            for (String paramType : info.methodParams) {\n+                try {\n+                    parameterTypes.add(Classes.forName(paramType, clazz.getClassLoader()));\n+                } catch (ClassNotFoundException cnfe) {\n+                    throw new IllegalStateException(\"Parameter class could not be loaded for type \" + paramType, cnfe);\n+                }\n+            }\n+        }\n+\n+        Class[] parameters = parameterTypes.toArray(new Class[parameterTypes.size()]);\n+\n+        IllegalStateException noSuchMethod = null;\n+        while (clazz != null) {\n+            try {\n+                Method method = clazz.getDeclaredMethod(info.methodName, parameters);\n+                return SetAccessible.on(method);\n+            } catch (NoSuchMethodException e) {\n+                if (noSuchMethod == null) {\n+                    noSuchMethod = new IllegalStateException(\"Callback method does not exist: \" + clazz.getName() + \".\" + info.methodName, e);\n+                }\n+                clazz = clazz.getSuperclass();\n+            }\n+        }\n+\n+        throw noSuchMethod;\n+    }    \n \n     public static List<Method> matchingMethods(Method signature, Class clazz) {\n         List<Method> list = new ArrayList<Method>();", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodInfoUtil.java"}, {"additions": 57, "raw_url": "https://github.com/apache/openejb/raw/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/b7f7e2896fb1d1d28a7e3131fa5641ece33f742c/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java", "sha": "cbb23ceea3947358fd333750ce9514cd0e23ea80", "changes": 128, "status": "modified", "deletions": 71, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java?ref=b7f7e2896fb1d1d28a7e3131fa5641ece33f742c", "patch": "@@ -17,99 +17,85 @@\n package org.apache.openejb.assembler.classic;\n \n import org.apache.openejb.BeanContext;\n+import org.apache.openejb.MethodContext;\n import org.apache.openejb.util.Logger;\n import org.apache.openejb.util.LogCategory;\n-import org.apache.openejb.util.Classes;\n-import org.apache.openejb.util.SetAccessible;\n import org.apache.openejb.core.timer.ScheduleData;\n import javax.ejb.ScheduleExpression;\n import javax.ejb.TimerConfig;\n-import java.util.List;\n import java.lang.reflect.Method;\n \n public class MethodScheduleBuilder {\n \n     public static final Logger logger = Logger.getInstance(LogCategory.OPENEJB_STARTUP, MethodScheduleBuilder.class.getPackage().getName());\n \n     public void build(BeanContext beanContext, EnterpriseBeanInfo beanInfo) {\n+        \n         Class<?> clazz = beanContext.getBeanClass();\n-\n+        \n         for (MethodScheduleInfo info : beanInfo.methodScheduleInfos) {\n-            Method method;\n-            try {\n-                method = getMethod(clazz, info.method.methodName, toClasses(info.method.methodParams, clazz.getClassLoader()));\n-            } catch (NoSuchMethodException e) {\n-                // method doesn't exist\n-                logger.warning(\"Schedule method does not exist: \"+info.method.methodName, e);\n-                continue;\n-            } catch (ClassNotFoundException e) {\n-                logger.warning(\"Schedule method param cannot be loaded.\", e);\n-                continue;\n-            }\n-\n-            if (info.method.className == null || method.getDeclaringClass().getName().equals(info.method.className)){\n-\n-                for (ScheduleInfo scheduleInfo : info.schedules) {\n+            \n+            Method timeoutMethodOfSchedule = null;\n+            \n+            if (info.method.methodParams == null) {\n+                \n+                logger.info(\"Schedule timeout method with 'null' method parameters is invalid: \" + info.method.methodName);\n+\n+            } else {\n+\n+                try {\n+                    timeoutMethodOfSchedule = MethodInfoUtil.toMethod(clazz, info.method);\n+                } catch (IllegalStateException e) {\n+                    // method doesn't exist\n+                    logger.warning(\"Schedule method does not exist: \" + info.method.methodName, e);\n+                    continue;\n+                }\n \n-                    ScheduleExpression expr = new ScheduleExpression();\n-                    expr.second(scheduleInfo.second == null ? \"0\" : scheduleInfo.second);\n-                    expr.minute(scheduleInfo.minute == null ? \"0\" : scheduleInfo.minute);\n-                    expr.hour(scheduleInfo.hour == null ? \"0\" : scheduleInfo.hour);\n-                    expr.dayOfWeek(scheduleInfo.dayOfWeek == null ? \"*\" : scheduleInfo.dayOfWeek);\n-                    expr.dayOfMonth(scheduleInfo.dayOfMonth == null ? \"*\" : scheduleInfo.dayOfMonth);\n-                    expr.month(scheduleInfo.month == null ? \"*\" : scheduleInfo.month);\n-                    expr.year(scheduleInfo.year == null ? \"*\" : scheduleInfo.year);\n-                    expr.timezone(scheduleInfo.timezone);\n-                    expr.start(scheduleInfo.start);\n-                    expr.end(scheduleInfo.end);\n+            }\n+            \n+            MethodContext methodContext = null;\n+            \n+            if (timeoutMethodOfSchedule == null && beanContext.getEjbTimeout() != null) {\n+                methodContext = beanContext.getMethodContext(beanContext.getEjbTimeout());\n+            } else if (info.method.className == null\n+                    || timeoutMethodOfSchedule.getDeclaringClass().getName().equals(info.method.className)) {\n \n-                    TimerConfig config = new TimerConfig();\n-                    config.setInfo(scheduleInfo.info);\n-                    config.setPersistent(scheduleInfo.persistent);\n+                methodContext = beanContext.getMethodContext(timeoutMethodOfSchedule);\n \n-                    beanContext.getMethodContext(method).getSchedules().add(new ScheduleData(config, expr));\n-                }\n             }\n+            \n+            this.addSchedulesToMethod(methodContext, info);\n         }\n     }\n-\n-    private Class<?>[] toClasses(List<String> params, ClassLoader classLoader) throws ClassNotFoundException {\n-        Class<?>[] paramsArray = new Class[params.size()];\n-        for (int j = 0; j < paramsArray.length; j++) {\n-            String methodParam = params.get(j);\n-            paramsArray[j] = Classes.forName(methodParam, classLoader);\n-\n+    \n+    private void addSchedulesToMethod(MethodContext methodContext, MethodScheduleInfo info){\n+        \n+        if (methodContext == null) {\n+            return;\n         }\n-        return paramsArray;\n-    }\n-\n-\n-\n-    /**\n-     * Finds the nearest java.lang.reflect.Method with the given\n-     * name and parameters.  Callbacks can be private so class.getMethod() cannot be used.  Searching\n-     * starts by looking in the specified class, if the method is not found searching continues with\n-     * the immediate parent and continues recurssively until the method is found or java.lang.Object\n-     * is reached.  If the method is not found a NoSuchMethodException is thrown.\n-     *\n-     * @param clazz\n-     * @param methodName\n-     * @param parameterTypes\n-     * @return\n-     * @throws NoSuchMethodException if the method is not found in this class or any of its parent classes\n-     */\n-    private Method getMethod(Class<?> clazz, String methodName, Class<?>... parameterTypes) throws NoSuchMethodException {\n-        NoSuchMethodException original = null;\n-        while (clazz != null){\n-            try {\n-                Method method = clazz.getDeclaredMethod(methodName, parameterTypes);\n-                return SetAccessible.on(method);\n-            } catch (NoSuchMethodException e) {\n-                if (original == null) original = e;\n-            }\n-            clazz = clazz.getSuperclass();\n+        \n+        for (ScheduleInfo scheduleInfo : info.schedules) {\n+\n+            ScheduleExpression expr = new ScheduleExpression();\n+            expr.second(scheduleInfo.second == null ? \"0\" : scheduleInfo.second);\n+            expr.minute(scheduleInfo.minute == null ? \"0\" : scheduleInfo.minute);\n+            expr.hour(scheduleInfo.hour == null ? \"0\" : scheduleInfo.hour);\n+            expr.dayOfWeek(scheduleInfo.dayOfWeek == null ? \"*\" : scheduleInfo.dayOfWeek);\n+            expr.dayOfMonth(scheduleInfo.dayOfMonth == null ? \"*\" : scheduleInfo.dayOfMonth);\n+            expr.month(scheduleInfo.month == null ? \"*\" : scheduleInfo.month);\n+            expr.year(scheduleInfo.year == null ? \"*\" : scheduleInfo.year);\n+            expr.timezone(scheduleInfo.timezone);\n+            expr.start(scheduleInfo.start);\n+            expr.end(scheduleInfo.end);\n+\n+            TimerConfig config = new TimerConfig();\n+            config.setInfo(scheduleInfo.info);\n+            config.setPersistent(scheduleInfo.persistent);\n+\n+            methodContext.getSchedules().add(new ScheduleData(config, expr));\n         }\n-        throw original;\n+        \n     }\n \n+\n }", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/MethodScheduleBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/e815e2e475eb2f01801ecf0bccd589fc998df6cc", "parent": "https://github.com/apache/openejb/commit/e2d41adbfe160782c07bdc9c2ddc3aef1fa27bf8", "message": "Change the module name by the module id in the map to avoid NPE when not running in Tomcat.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1057107 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_48", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/e815e2e475eb2f01801ecf0bccd589fc998df6cc/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "blob_url": "https://github.com/apache/openejb/blob/e815e2e475eb2f01801ecf0bccd589fc998df6cc/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java", "sha": "b394e52f0a34c2a1c7bec824da02e9b12fc89725", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java?ref=e815e2e475eb2f01801ecf0bccd589fc998df6cc", "patch": "@@ -611,15 +611,16 @@ protected void addWebModule(AppModule appModule, URL warUrl, ClassLoader parentC\n         ClassLoader webClassLoader = webModule.getClassLoader();\n \n         // get include/exclude properties from context-param\n+        // using a Set instead of a list would be easier ...\n         Options contextParams = new Options(getContextParams(webModule.getWebApp().getContextParam()));\n         String include = contextParams.get(CLASSPATH_INCLUDE, \"\");\n         String exclude = contextParams.get(CLASSPATH_EXCLUDE, \".*\");\n         Set<RequireDescriptors> requireDescriptors = contextParams.getAll(CLASSPATH_REQUIRE_DESCRIPTOR, RequireDescriptors.CLIENT);\n         boolean filterDescriptors = contextParams.get(CLASSPATH_FILTER_DESCRIPTORS, false);\n         boolean filterSystemApps = contextParams.get(CLASSPATH_FILTER_SYSTEMAPPS, true);\n \n-        contextParams.getProperties().put(moduleName, warPath);\n-        FileUtils base = new FileUtils(moduleName, moduleName, contextParams.getProperties());\n+        contextParams.getProperties().put(webModule.getModuleId(), warPath);\n+        FileUtils base = new FileUtils(webModule.getModuleId(), webModule.getModuleId(), contextParams.getProperties());\n         DeploymentsResolver.loadFromClasspath(base, urls, webClassLoader, include, exclude, requireDescriptors, filterDescriptors, filterSystemApps);\n \n         // we need to exclude previously deployed modules", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/DeploymentLoader.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/2ade72e64f34adfadc67c56a6087ab0900f2e0f3", "parent": "https://github.com/apache/openejb/commit/a178c7ce1bf24a553ef05a86b4330ed920d79385", "message": "pass an empty application id to prevent NPEs and to ensure proper global jndi names are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@988313 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_49", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/2ade72e64f34adfadc67c56a6087ab0900f2e0f3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java", "blob_url": "https://github.com/apache/openejb/blob/2ade72e64f34adfadc67c56a6087ab0900f2e0f3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java", "sha": "e6ba1c33fb24cb4e6c2158b32cf9992c63a478fe", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=2ade72e64f34adfadc67c56a6087ab0900f2e0f3", "patch": "@@ -547,6 +547,9 @@ public AppInfo configureApplication(File jarFile) throws OpenEJBException {\n      * @throws OpenEJBException on error\n      */\n     public AppInfo configureApplication(ClassLoader classLoader, String id, List<File> jarFiles) throws OpenEJBException {\n+        if (id == null) {\n+            id = \"\";\n+        }\n         Application application = new Application();\n         application.setApplicationName(id);\n         AppModule collection = new AppModule(classLoader, id, application, false);", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/477fcdc2a522e9faa7891b5689ca84f542dd87d8", "parent": "https://github.com/apache/openejb/commit/b034cc4e9f8c2cc9dd9825c41be620ac61f96921", "message": "Fix the issue with OpenEJB.deploy throwing NPE because setComponent set Assembler the class not Assembler the interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@831551 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_50", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "blob_url": "https://github.com/apache/openejb/blob/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java", "sha": "c558595822e6e4d994ffa372c63d8342f1710692", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java?ref=477fcdc2a522e9faa7891b5689ca84f542dd87d8", "patch": "@@ -200,7 +200,7 @@ public Assembler(JndiFactory jndiFactory) {\n \n         SystemInstance system = SystemInstance.get();\n \n-        system.setComponent(Assembler.class, this);\n+        system.setComponent(org.apache.openejb.spi.Assembler.class, this);\n \n         containerSystem = new CoreContainerSystem(jndiFactory);\n         system.setComponent(ContainerSystem.class, containerSystem);", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/assembler/classic/Assembler.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java", "blob_url": "https://github.com/apache/openejb/blob/477fcdc2a522e9faa7891b5689ca84f542dd87d8/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java", "sha": "122ea9b6037f595f134e13f40e56e4ff3b58d8ee", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java?ref=477fcdc2a522e9faa7891b5689ca84f542dd87d8", "patch": "@@ -60,7 +60,7 @@ protected void setUp() throws Exception {\n \n         // Copied from org.apache.openejb.SomeoneBrokeSurefireAndThisIsADirtyHackForItTest that's now gone\n         System.setProperty(\"openejb.assembler\", org.apache.openejb.assembler.classic.Assembler.class.getName());\n-        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-*.*\");\n+        System.setProperty(\"openejb.deployments.classpath.include\", \".*openejb-itests-[^a].*-.*\");\n         System.setProperty(\"openejb.deployments.classpath.filter.descriptors\", \"true\");\n         System.setProperty(\"openejb.deployments.classpath.filter.systemapps\", \"false\");\n         System.setProperty(\"openejb.deployments.classpath.ear\", \"false\");", "filename": "openejb3/container/openejb-core/src/test/java/org/apache/openejb/iTest.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/a5291b4cede0dfd49022a5b6af4fea15898640e3", "parent": "https://github.com/apache/openejb/commit/a6e9a418c1e3c931e4d32227934f8b83fa00ad3f", "message": "Fix for OPENEJB-1021: NPE in AppInfoBuilder.configureWebserviceSecurity()\nNot sure if it's a good fix\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@767242 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_51", "file": [{"additions": 32, "raw_url": "https://github.com/apache/openejb/raw/a5291b4cede0dfd49022a5b6af4fea15898640e3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java", "blob_url": "https://github.com/apache/openejb/blob/a5291b4cede0dfd49022a5b6af4fea15898640e3/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java", "sha": "ca6b0a45c8aabbe51b5bfeeb03c7e8328a8025fc", "changes": 52, "status": "modified", "deletions": 20, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java?ref=a5291b4cede0dfd49022a5b6af4fea15898640e3", "patch": "@@ -76,6 +76,7 @@\n import java.util.ArrayList;\n import java.util.Set;\n import java.util.LinkedHashSet;\n+import java.util.HashMap;\n import java.net.URL;\n import java.io.File;\n import java.io.IOException;\n@@ -250,29 +251,40 @@ void configureWebserviceSecurity(EjbJarInfo ejbJarInfo, EjbModule ejbModule) {\n \n         OpenejbJarType openejbJarType = (OpenejbJarType) altDD;\n \n+\n+        Map<String, org.apache.openejb.jee.oejb2.EnterpriseBean> beans = new HashMap<String, org.apache.openejb.jee.oejb2.EnterpriseBean>();\n+        for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : openejbJarType.getEnterpriseBeans()) {\n+            beans.put(enterpriseBean.getEjbName(), enterpriseBean);\n+        }\n+\n         List<PortInfo> infoList = ejbJarInfo.portInfos;\n         for (PortInfo portInfo : infoList) {\n-            String link = portInfo.serviceLink;\n-\n-            List<org.apache.openejb.jee.oejb2.EnterpriseBean> enterpriseBeans = openejbJarType.getEnterpriseBeans();\n-            for (org.apache.openejb.jee.oejb2.EnterpriseBean enterpriseBean : enterpriseBeans) {\n-                if (link.equals(enterpriseBean.getEjbName()) && enterpriseBean instanceof SessionBeanType) {\n-                    SessionBeanType sessionBean = (SessionBeanType) enterpriseBean;\n-                    WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n-                    portInfo.realmName = webServiceSecurityType.getRealmName();\n-                    portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n-                    if (webServiceSecurityType.getTransportGuarantee() != null) {\n-                        portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n-                    } else {\n-                        portInfo.transportGuarantee = \"NONE\";\n-                    }\n \n-                    if (webServiceSecurityType.getAuthMethod() != null) {\n-                        portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n-                    } else {\n-                        portInfo.authMethod = \"NONE\";\n-                    }\n-                }\n+            org.apache.openejb.jee.oejb2.EnterpriseBean bean = beans.get(portInfo.serviceLink);\n+\n+            if (bean == null) continue; /* TODO: throw something? */\n+            if (!(bean instanceof SessionBeanType)) continue; /* TODO: throw something? */\n+\n+            SessionBeanType sessionBean = (SessionBeanType) bean;\n+            WebServiceSecurityType webServiceSecurityType = sessionBean.getWebServiceSecurity();\n+\n+            if (webServiceSecurityType == null) {\n+                //TODO: this ok?\n+                continue;\n+            }\n+\n+            portInfo.realmName = webServiceSecurityType.getRealmName();\n+            portInfo.securityRealmName = webServiceSecurityType.getSecurityRealmName();\n+            if (webServiceSecurityType.getTransportGuarantee() != null) {\n+                portInfo.transportGuarantee = webServiceSecurityType.getTransportGuarantee().value();\n+            } else {\n+                portInfo.transportGuarantee = \"NONE\";\n+            }\n+\n+            if (webServiceSecurityType.getAuthMethod() != null) {\n+                portInfo.authMethod = webServiceSecurityType.getAuthMethod().value();\n+            } else {\n+                portInfo.authMethod = \"NONE\";\n             }\n         }\n     }", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AppInfoBuilder.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/4289fd7fae4c7065afea3f6845421bbc6304acde", "parent": "https://github.com/apache/openejb/commit/ba6492d7fc97aab1605cf1f2248ba3a15dc7b6cb", "message": "OPENEJB-735 NPE in AnnotationDeployer if null member is passed into buildResource()\n\nContributed by: Joe Bohn\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@604145 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_52", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/4289fd7fae4c7065afea3f6845421bbc6304acde/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "blob_url": "https://github.com/apache/openejb/blob/4289fd7fae4c7065afea3f6845421bbc6304acde/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java", "sha": "e3221e4d45ae6d0b468e9f15eb52ae8cf16aa5ea", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java?ref=4289fd7fae4c7065afea3f6845421bbc6304acde", "patch": "@@ -1380,7 +1380,7 @@ private void buildResource(JndiConsumer consumer, Resource resource, Member memb\n             JndiReference reference = consumer.getEnvEntryMap().get(refName);\n             if (reference == null) {\n \n-                { // Little quick validation for common mistake\n+                if (member != null) { // Little quick validation for common mistake\n                     Class type = member.getType();\n                     boolean shouldReturn = false;\n                     if (EntityManager.class.isAssignableFrom(type)){", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/AnnotationDeployer.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/6872ef0ed6458feeb75785fb8571cb8529f7f442", "parent": "https://github.com/apache/openejb/commit/9c0e46ceb960196f7adcee05f6f39757778c3075", "message": "GERONIMO-3481, there may be no running OpenEjbConfiguration so avoid NPEs, and allow construction of ConfigurationFactory with a known sys configuration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@579046 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_53", "file": [{"additions": 14, "raw_url": "https://github.com/apache/openejb/raw/6872ef0ed6458feeb75785fb8571cb8529f7f442/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java", "blob_url": "https://github.com/apache/openejb/blob/6872ef0ed6458feeb75785fb8571cb8529f7f442/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java", "sha": "6cdddc4ea3380efc6f0fa013dc82d01f9955864f", "changes": 19, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java?ref=6872ef0ed6458feeb75785fb8571cb8529f7f442", "patch": "@@ -101,6 +101,11 @@ public ConfigurationFactory() {\n         this(false);\n     }\n \n+    public ConfigurationFactory(boolean offline, OpenEjbConfiguration configuration) {\n+        this(offline);\n+        sys = configuration;\n+    }\n+\n     public static class Chain implements DynamicDeployer{\n         private final List<DynamicDeployer> chain = new ArrayList<DynamicDeployer>();\n \n@@ -670,9 +675,11 @@ private Properties getSystemProperties(String serviceId) {\n         List<String> resourceIds = new ArrayList<String>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n-            if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n-                resourceIds.add(resourceInfo.id);\n+        if (runningConfig != null) {\n+            for (ResourceInfo resourceInfo : runningConfig.facilities.resources) {\n+                if (isResourceType(resourceInfo.service, resourceInfo.types, type)) {\n+                    resourceIds.add(resourceInfo.id);\n+                }\n             }\n         }\n \n@@ -744,8 +751,10 @@ private boolean isResourceType(String service, List<String> types, String type)\n         List<ContainerInfo> containers = new ArrayList<ContainerInfo>();\n \n         OpenEjbConfiguration runningConfig = getRunningConfig();\n-        for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n-            containers.add(containerInfo);\n+        if (runningConfig != null) {\n+            for (ContainerInfo containerInfo : runningConfig.containerSystem.containers) {\n+                containers.add(containerInfo);\n+            }\n         }\n \n         if (sys != null) {", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ConfigurationFactory.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/4fe0ae9b2694147ee2b1fd001f1aebbea302b79e", "parent": "https://github.com/apache/openejb/commit/4c16b681e64a9c883092cc7fd54d10b38e8cd8d1", "message": "Fix NPE when there is no validationFailedException -- i.e. when the deploy *should* work... ;-)\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@574781 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_54", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openejb/raw/4fe0ae9b2694147ee2b1fd001f1aebbea302b79e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java", "blob_url": "https://github.com/apache/openejb/blob/4fe0ae9b2694147ee2b1fd001f1aebbea302b79e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java", "sha": "eb872f2d35c20c7efd1e73735b62f1f97110bc67", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java?ref=4fe0ae9b2694147ee2b1fd001f1aebbea302b79e", "patch": "@@ -41,7 +41,10 @@ public AppModule deploy(AppModule appModule) throws OpenEJBException {\n \n         validationFailedException = logResults(appModule, validationFailedException);\n \n-        throw validationFailedException;\n+        if (validationFailedException != null)\n+            throw validationFailedException;\n+\n+        return appModule;\n     }\n \n     private ValidationFailedException logResults(DeploymentModule module, ValidationFailedException validationFailedException) {", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/config/ReportValidationResults.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/e314a130c7904227d34638f0e464af05ea0a6dfd", "parent": "https://github.com/apache/openejb/commit/18912d9732f3f46e5fbe9e4dfd5c4e05a32e4caa", "message": "Fixed NPE caused by unidirctional relationships not having a related field name\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@505504 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_55", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openejb/raw/e314a130c7904227d34638f0e464af05ea0a6dfd/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java", "blob_url": "https://github.com/apache/openejb/blob/e314a130c7904227d34638f0e464af05ea0a6dfd/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java", "sha": "9c51b15de7dae14dc5e96a3d2be4ea44929b94b3", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java?ref=e314a130c7904227d34638f0e464af05ea0a6dfd", "patch": "@@ -365,7 +365,11 @@ private void initCmrFields(MethodVisitor mv, CmrField cmrField) {\n         mv.visitLdcInsn(cmrField.getType());\n \n         // arg3: String relatedProperty\n-        mv.visitLdcInsn(cmrField.getRelatedName());\n+        if (cmrField.getRelatedName() != null) {\n+            mv.visitLdcInsn(cmrField.getRelatedName());\n+        } else {\n+            mv.visitInsn(ACONST_NULL);\n+        }\n \n         // invoke\n         mv.visitMethodInsn(INVOKESPECIAL,", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/core/cmp/cmp2/Cmp2Generator.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/607b917753708a8ce8f6e3c5672c0c48c6c66eaa", "parent": "https://github.com/apache/openejb/commit/29928a4eb69f0fd2ae1e3075629237fc3332553c", "message": "GERONIMO-1599 HOWLLog throws NPE because XidFactory is missing\n\nExtract XidFactory from TransactionManagerImpl.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445979 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_56", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java", "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java", "sha": "ba6d54ebc3c0f9716d40e339088091175df4e060", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa", "patch": "@@ -82,6 +82,7 @@\n  * @version $Revision$ $Date$\n  */\n public class E2EIntegrationTest extends TestCase {\n+\n     private NodeInfo node1;\n     private NodeInfo node2;\n ", "filename": "openejb2/modules/core/src/test/org/openejb/cluster/server/E2EIntegrationTest.java"}, {"additions": 6, "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/spring/spring.xml", "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/spring/spring.xml", "sha": "4425cf9c1100b6a511ccf950476db64081ffe13b", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/spring/spring.xml?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa", "patch": "@@ -1,10 +1,15 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n <!DOCTYPE beans PUBLIC \"-//SPRING//DTD BEAN//EN\" \"http://www.springframework.org/dtd/spring-beans.dtd\">\n <beans>\n+\n+  <bean id=\"XidFactory\" class=\"org.apache.geronimo.transaction.manager.XidFactoryImpl\">\n+  </bean>\n+\n   <bean id=\"TransactionManager\" class=\"org.apache.geronimo.transaction.manager.TransactionManagerImpl\">\n     <constructor-arg index=\"0\" value=\"100\"/>\n-    <constructor-arg index=\"1\"><null/></constructor-arg>\n+    <constructor-arg index=\"1\" ref=\"XidFactory\"/>\n     <constructor-arg index=\"2\"><null/></constructor-arg>\n+    <constructor-arg index=\"3\"><null/></constructor-arg>\n   </bean>\n \n   <bean id=\"TransactionContextManager\" class=\"org.apache.geronimo.transaction.context.TransactionContextManager\">", "filename": "openejb2/modules/core/src/test/org/openejb/spring/spring.xml"}, {"additions": 3, "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java", "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java", "sha": "7229ecfc818c18974c159905589b25f6e32349b6", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa", "patch": "@@ -71,6 +71,7 @@\n import org.apache.geronimo.transaction.context.TransactionContextManager;\n import org.apache.geronimo.transaction.context.UserTransactionImpl;\n import org.apache.geronimo.transaction.manager.TransactionManagerImpl;\n+import org.apache.geronimo.transaction.manager.XidFactoryImpl;\n import org.apache.geronimo.core.service.InvocationResult;\n import org.apache.geronimo.core.service.Invocation;\n import org.openejb.ExtendedEjbDeployment;\n@@ -113,7 +114,8 @@ public TimerServiceImplTest() {\n \n     protected void setUp() throws Exception {\n         super.setUp();\n-        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, null, null);\n+        TransactionManagerImpl transactionManager = new TransactionManagerImpl(10 * 1000, \n+                new XidFactoryImpl(\"WHAT DO WE CALL IT?\".getBytes()), null, null);\n         transactionContextManager = new TransactionContextManager(transactionManager, transactionManager);\n         executableWorkFactory = new TransactionalExecutorTaskFactory(transactionContextManager, 1);\n         threadPool = new ThreadPool(5, \"TestPool\", 10000, this.getClass().getClassLoader(), \"test:type=ThreadPool\");", "filename": "openejb2/modules/core/src/test/org/openejb/timer/TimerServiceImplTest.java"}, {"additions": 7, "raw_url": "https://github.com/apache/openejb/raw/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java", "blob_url": "https://github.com/apache/openejb/blob/607b917753708a8ce8f6e3c5672c0c48c6c66eaa/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java", "sha": "73860b74126d7d9918e523df8daff4ca8569600b", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java?ref=607b917753708a8ce8f6e3c5672c0c48c6c66eaa", "patch": "@@ -73,6 +73,7 @@\n import org.apache.geronimo.timer.vm.VMStoreThreadPooledTransactionalTimer;\n import org.apache.geronimo.transaction.context.TransactionContextManagerGBean;\n import org.apache.geronimo.transaction.manager.TransactionManagerImplGBean;\n+import org.apache.geronimo.transaction.manager.XidFactoryImplGBean;\n import org.openejb.deployment.mdb.mockra.MockActivationSpec;\n import org.openejb.deployment.mdb.mockra.MockResourceAdapter;\n import org.openejb.slsb.DefaultStatelessEjbContainer;\n@@ -101,6 +102,7 @@\n     public static final ObjectName BMP_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Bmp,j2eeType=EjbContainer\");\n     public static final ObjectName CMP_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Cmp,j2eeType=EjbContainer\");\n     public static final ObjectName MDB_EJB_CONTAINER_NAME = JMXUtil.getObjectName(\"geronimo.test:name=Mdb,j2eeType=EjbContainer\");\n+    public static final ObjectName XIDFACTORY_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=\" + NameFactory.XID_FACTORY);\n     public static final ObjectName TRANSACTIONMANAGER_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=TransactionManager\");\n     public static final ObjectName TRANSACTIONCONTEXTMANAGER_NAME = JMXUtil.getObjectName(j2eeDomainName + \":type=TransactionContextManager\");\n     public static final ObjectName TRACKEDCONNECTIONASSOCIATOR_NAME = JMXUtil.getObjectName(\"geronimo.test:role=TrackedConnectionAssociator\");\n@@ -127,10 +129,15 @@\n     public static Kernel setUpKernelWithTransactionManager() throws Exception {\n         Kernel kernel = KernelHelper.getPreparedKernel();\n \n+        GBeanData xidFacGBean = new GBeanData(XIDFACTORY_NAME, XidFactoryImplGBean.GBEAN_INFO);\n+        xidFacGBean.setAttribute(\"tmId\", \"WHAT DO WE CALL IT?\".getBytes());\n+        start(kernel, xidFacGBean);\n+        \n         GBeanData tmGBean = new GBeanData(TRANSACTIONMANAGER_NAME, TransactionManagerImplGBean.GBEAN_INFO);\n         Set rmpatterns = new HashSet();\n         rmpatterns.add(ObjectName.getInstance(\"geronimo.server:j2eeType=JCAManagedConnectionFactory,*\"));\n         tmGBean.setAttribute(\"defaultTransactionTimeoutSeconds\", new Integer(100));\n+        tmGBean.setReferencePattern(\"XidFactory\", XIDFACTORY_NAME);\n         tmGBean.setReferencePatterns(\"ResourceManagers\", rmpatterns);\n         start(kernel, tmGBean);\n ", "filename": "openejb2/modules/openejb-builder/src/test/org/openejb/deployment/DeploymentHelper.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/af212b3bd6dbefef2800838073890343a7272ea6", "parent": "https://github.com/apache/openejb/commit/a357e1a95616a06e3e3810b257436549d2a63452", "message": "I started getting NPE's because these fields were never set ?!?\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445646 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_57", "file": [{"additions": 10, "raw_url": "https://github.com/apache/openejb/raw/af212b3bd6dbefef2800838073890343a7272ea6/openejb2/modules/core/src/java/org/openejb/corba/CSSBean.java", "blob_url": "https://github.com/apache/openejb/blob/af212b3bd6dbefef2800838073890343a7272ea6/openejb2/modules/core/src/java/org/openejb/corba/CSSBean.java", "sha": "9bd0b1c35cd7312a0652a4f8f584335c6521235e", "changes": 10, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/java/org/openejb/corba/CSSBean.java?ref=af212b3bd6dbefef2800838073890343a7272ea6", "patch": "@@ -197,6 +197,16 @@ public void setCssProps(Properties cssProps) {\n \n     public void doStart() throws Exception {\n \n+        if (cssConfig == null) {\n+            cssConfig = new CSSConfig();\n+        }\n+        if (cssArgs == null) {\n+            cssArgs = new ArrayList();\n+        }\n+        if (cssProps == null) {\n+            cssProps = new Properties();\n+        }\n+\n         if (nssConfig == null) {\n             if (log.isDebugEnabled()) log.debug(\"Defaulting NSS config to be CSS config\");\n             nssConfig = cssConfig;", "filename": "openejb2/modules/core/src/java/org/openejb/corba/CSSBean.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/291f5c2a3bb60f6c52b5846be388eaf1d0ef3000", "parent": "https://github.com/apache/openejb/commit/1b9529511273c049b9536cb826e89d60c30185ed", "message": "MDBs do not have a proxy factory.  NPE was being thrown due to not checking\nfor proxy factory being null.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openejb/trunk@445189 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_58", "file": [{"additions": 28, "raw_url": "https://github.com/apache/openejb/raw/291f5c2a3bb60f6c52b5846be388eaf1d0ef3000/openejb2/modules/core/src/java/org/openejb/EJBContextImpl.java", "blob_url": "https://github.com/apache/openejb/blob/291f5c2a3bb60f6c52b5846be388eaf1d0ef3000/openejb2/modules/core/src/java/org/openejb/EJBContextImpl.java", "sha": "f242a4c03668f1f995f4eb7282b9dcb8a199c874", "changes": 45, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb2/modules/core/src/java/org/openejb/EJBContextImpl.java?ref=291f5c2a3bb60f6c52b5846be388eaf1d0ef3000", "patch": "@@ -147,43 +147,54 @@ public boolean isCallerInRole(Identity identity) {\n \n     public abstract static class EJBContextState {\n         public EJBHome getEJBHome(EJBInstanceContext context) {\n-            EJBHome home = context.getProxyFactory().getEJBHome();\n-            if (home == null) {\n-                throw new IllegalStateException(\"getEJBHome is not allowed if no home interface is defined\");\n+            if( context.getProxyFactory() !=null ) {\n+                EJBHome home = context.getProxyFactory().getEJBHome();\n+                if (home != null) {\n+                    return home;\n+                }\n             }\n-            return home;\n+            throw new IllegalStateException(\"getEJBHome is not allowed if no home interface is defined\");\n         }\n \n         public EJBLocalHome getEJBLocalHome(EJBInstanceContext context) {\n-            EJBLocalHome localHome = context.getProxyFactory().getEJBLocalHome();\n-            if (localHome == null) {\n-                throw new IllegalStateException(\"getEJBLocalHome is not allowed if no local localHome interface is defined\");\n+            if( context.getProxyFactory() !=null ) {\n+                EJBLocalHome localHome = context.getProxyFactory().getEJBLocalHome();\n+                if (localHome != null) {\n+                    return localHome;\n+                }\n             }\n-            return localHome;\n+            throw new IllegalStateException(\"getEJBLocalHome is not allowed if no local localHome interface is defined\");\n         }\n \n         public EJBObject getEJBObject(EJBInstanceContext context) {\n-            EJBObject remote = context.getProxyFactory().getEJBObject(context.getId());\n-            if (remote == null) {\n-                throw new IllegalStateException(\"getEJBObject is not allowed if no remote interface is defined\");\n+            if( context.getProxyFactory() !=null ) {\n+                EJBObject remote = context.getProxyFactory().getEJBObject(context.getId());\n+                if (remote != null) {\n+                    return remote;\n+                }\n             }\n-            return remote;\n+            throw new IllegalStateException(\"getEJBObject is not allowed if no remote interface is defined\");\n         }\n \n         public EJBLocalObject getEJBLocalObject(EJBInstanceContext context) {\n-            EJBLocalObject local = context.getProxyFactory().getEJBLocalObject(context.getId());\n-            if (local == null) {\n-                throw new IllegalStateException(\"getEJBLocalObject is not allowed if no local interface is defined\");\n+            if( context.getProxyFactory() !=null ) {\n+                EJBLocalObject local = context.getProxyFactory().getEJBLocalObject(context.getId());\n+                if (local != null) {\n+                    return local;\n+                }\n             }\n-            return local;\n+            throw new IllegalStateException(\"getEJBLocalObject is not allowed if no local interface is defined\");\n         }\n \n         public Principal getCallerPrincipal() {\n             return ContextManager.getCurrentPrincipal();\n         }\n \n         public boolean isCallerInRole(String s, EJBInstanceContext context) {\n-            return ContextManager.isCallerInRole(context.getProxyFactory().getEJBName(), s);\n+            if( context.getProxyFactory() !=null ) {\n+                return ContextManager.isCallerInRole(context.getProxyFactory().getEJBName(), s);\n+            }\n+            throw new IllegalStateException(\"isCallerInRole is not allowed if no local or remote interface is defined\");\n         }\n \n         public UserTransaction getUserTransaction(UserTransaction userTransaction) {", "filename": "openejb2/modules/core/src/java/org/openejb/EJBContextImpl.java"}], "repo": "openejb"}, {"commit": "https://github.com/apache/openejb/commit/04088555b137795c2fab3284cd6d5b2f8c561d6e", "parent": "https://github.com/apache/openejb/commit/07099a3b6fddbfd7e424b40c7369327501eae025", "message": "In progress.  All needs reworking still, but at least this will avoid the ConcurrentModificationException we're seeing in the CI system and the NPE we're seeing in the TCK\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openejb/trunk@1083675 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openejb_59", "file": [{"additions": 15, "raw_url": "https://github.com/apache/openejb/raw/04088555b137795c2fab3284cd6d5b2f8c561d6e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java", "blob_url": "https://github.com/apache/openejb/blob/04088555b137795c2fab3284cd6d5b2f8c561d6e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java", "sha": "c8d46a7b8bb87919febd7b6ea0b00c377f9f6d61", "changes": 20, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java?ref=04088555b137795c2fab3284cd6d5b2f8c561d6e", "patch": "@@ -41,6 +41,7 @@\n import javax.naming.Context;\n import javax.persistence.EntityManagerFactory;\n \n+import org.apache.openejb.cdi.OWBInjector;\n import org.apache.openejb.core.ExceptionType;\n import org.apache.openejb.core.InstanceContext;\n import org.apache.openejb.core.Operation;\n@@ -60,7 +61,6 @@\n import org.apache.openejb.util.LogCategory;\n import org.apache.openejb.util.Logger;\n import org.apache.webbeans.config.WebBeansContext;\n-import org.apache.webbeans.inject.OWBInjector;\n import org.apache.xbean.recipe.ConstructionException;\n \n \n@@ -1118,8 +1118,13 @@ public InstanceContext newInstance() throws Exception {\n             final Object bean = injectionProcessor.createInstance();\n \n             // TODO we likely don't want to create a new one each time -- investigate the destroy() method\n-            OWBInjector beanInjector = new OWBInjector(webBeansContext);\n-            beanInjector.inject(bean);\n+            try {\n+                OWBInjector beanInjector = new OWBInjector(webBeansContext);\n+                beanInjector.inject(bean);\n+            } catch (Throwable t) {\n+                // TODO handle this differently\n+                // this is temporary till the injector can be rewritten\n+            }\n \n             // Create interceptors\n             final HashMap<String, Object> interceptorInstances = new HashMap<String, Object>();\n@@ -1141,8 +1146,13 @@ public InstanceContext newInstance() throws Exception {\n                     final Object interceptorInstance = interceptorInjector.createInstance();\n \n                     // TODO we likely don't want to create a new one each time -- investigate the destroy() method\n-                    OWBInjector interceptorCdiInjector = new OWBInjector(webBeansContext);\n-                    interceptorCdiInjector.inject(interceptorInstance);\n+                    try {\n+                        OWBInjector interceptorCdiInjector = new OWBInjector(webBeansContext);\n+                        interceptorCdiInjector.inject(interceptorInstance);\n+                    } catch (Throwable t) {\n+                        // TODO handle this differently\n+                        // this is temporary till the injector can be rewritten\n+                    }\n \n                     interceptorInstances.put(clazz.getName(), interceptorInstance);\n                 } catch (ConstructionException e) {", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/BeanContext.java"}, {"additions": 292, "raw_url": "https://github.com/apache/openejb/raw/04088555b137795c2fab3284cd6d5b2f8c561d6e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java", "blob_url": "https://github.com/apache/openejb/blob/04088555b137795c2fab3284cd6d5b2f8c561d6e/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java", "sha": "43f84777a4a3671153d50dae7d41de6ff2ac2645", "changes": 292, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openejb/contents/openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java?ref=04088555b137795c2fab3284cd6d5b2f8c561d6e", "patch": "@@ -0,0 +1,292 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package org.apache.openejb.cdi;\n+\n+import org.apache.webbeans.component.EventBean;\n+import org.apache.webbeans.component.InjectionPointBean;\n+import org.apache.webbeans.component.InjectionTargetWrapper;\n+import org.apache.webbeans.component.InstanceBean;\n+import org.apache.webbeans.config.WebBeansContext;\n+import org.apache.webbeans.container.BeanManagerImpl;\n+import org.apache.webbeans.container.InjectionResolver;\n+import org.apache.webbeans.context.creational.CreationalContextImpl;\n+import org.apache.webbeans.util.ClassUtil;\n+import org.apache.webbeans.util.WebBeansAnnotatedTypeUtil;\n+import org.apache.webbeans.util.WebBeansUtil;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.event.Event;\n+import javax.enterprise.inject.spi.AnnotatedParameter;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.Bean;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.inject.Provider;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.lang.reflect.ParameterizedType;\n+import java.lang.reflect.Type;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+\n+/**\n+ * @version $Rev$ $Date$\n+ */\n+public final class OWBInjector {\n+\n+    /**\n+     * Creational context to hold dependent instances\n+     */\n+    private CreationalContextImpl<?> ownerCreationalContext = null;\n+\n+    /**\n+     * Underlying javaee instance\n+     */\n+    private Object javaEEInstance;\n+\n+    private final WebBeansContext webBeansContext;\n+\n+    public OWBInjector() {\n+        this(WebBeansContext.getInstance());\n+    }\n+\n+    /**\n+     * Creates a new instance\n+     *\n+     * @param webBeansContext\n+     */\n+    public OWBInjector(WebBeansContext webBeansContext) {\n+        //No operation\n+        this.webBeansContext = webBeansContext;\n+    }\n+\n+    /**\n+     * Inject dependencies of given instance.\n+     *\n+     * @param javaEeComponentInstance instance\n+     * @return this injector\n+     * @throws Exception if exception occurs\n+     */\n+    public OWBInjector inject(Object javaEeComponentInstance) throws Exception {\n+        return inject(javaEeComponentInstance, null);\n+    }\n+\n+    /**\n+     * Inject dependencies of given instance.\n+     *\n+     * @param javaEeComponentInstance instance\n+     * @param creationalContext       context\n+     * @return this injector\n+     * @throws Exception if exception occurs\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public OWBInjector inject(Object javaEeComponentInstance, CreationalContext<?> creationalContext) throws Exception {\n+        BeanManagerImpl beanManager = webBeansContext.getBeanManagerImpl();\n+        try {\n+            this.javaEEInstance = javaEeComponentInstance;\n+            if (creationalContext == null) {\n+                this.ownerCreationalContext = (CreationalContextImpl<?>) beanManager.createCreationalContext(null);\n+            }\n+\n+            Class<Object> injectableComponentClass = (Class<Object>) javaEeComponentInstance.getClass();\n+\n+            //Look for custom InjectionTarget\n+            InjectionTargetWrapper<Object> wrapper = beanManager.getInjectionTargetWrapper(injectableComponentClass);\n+            if (wrapper != null) {\n+                wrapper.inject(javaEeComponentInstance, (CreationalContext<Object>) this.ownerCreationalContext);\n+                return this;\n+            }\n+\n+            AnnotatedType<Object> annotated = (AnnotatedType<Object>) beanManager.createAnnotatedType(injectableComponentClass);\n+            Set<InjectionPoint> injectionPoints = WebBeansAnnotatedTypeUtil.getJavaEeComponentInstanceInjectionPoints(webBeansContext, annotated);\n+            if (injectionPoints != null && injectionPoints.size() > 0) {\n+                for (InjectionPoint injectionPoint : injectionPoints) {\n+                    if (injectionPoint.getMember() instanceof Method) {\n+                        Method method = (Method) injectionPoint.getMember();\n+\n+                        //Get injected method arguments\n+                        List<Object> parameters = getInjectedMethodParameterReferences(injectionPoint, beanManager, injectionPoints);\n+\n+                        //Set method\n+                        ClassUtil.callInstanceMethod(method, javaEeComponentInstance, parameters.toArray(new Object[parameters.size()]));\n+\n+                    } else if (injectionPoint.getMember() instanceof Field) {\n+                        //Get injected object ref\n+                        Object object = getInjectedObjectReference(injectionPoint, beanManager);\n+\n+                        //Set field\n+                        Field field = (Field) injectionPoint.getMember();\n+                        ClassUtil.setField(javaEeComponentInstance, field, object);\n+                    }\n+                }\n+\n+                return this;\n+            }\n+\n+\n+        }\n+        catch (Exception e) {\n+            throw e;\n+        }\n+\n+        return null;\n+    }\n+\n+    /**\n+     * Release dependents.\n+     */\n+    @SuppressWarnings(\"unchecked\")\n+    public void destroy() {\n+        BeanManagerImpl beanManager = webBeansContext.getBeanManagerImpl();\n+\n+        //Look for custom InjectionTarget\n+        InjectionTargetWrapper<Object> wrapper = beanManager.getInjectionTargetWrapper((Class<Object>) javaEEInstance.getClass());\n+        if (wrapper != null) {\n+            wrapper.dispose(javaEEInstance);\n+            this.javaEEInstance = null;\n+            this.ownerCreationalContext = null;\n+        } else {\n+            if (this.ownerCreationalContext != null) {\n+                this.ownerCreationalContext.release();\n+                this.ownerCreationalContext = null;\n+            }\n+        }\n+    }\n+\n+    /**\n+     * Gets injected object reference.\n+     *\n+     * @param injectionPoint injection point of javaee instance\n+     * @param beanManager    bean manager implementation\n+     * @return injected reference\n+     */\n+    private Object getInjectedObjectReference(InjectionPoint injectionPoint, BeanManagerImpl beanManager) {\n+        Object object = null;\n+\n+        //Injected contextual beam\n+        InjectionResolver injectionResolver = beanManager.getInjectionResolver();\n+\n+        Bean<?> injectedBean = (Bean<?>) injectionResolver.getInjectionPointBean(injectionPoint);\n+\n+        if (isInstanceProviderInjection(injectionPoint)) {\n+            InstanceBean.local.set(injectionPoint);\n+        } else if (isEventProviderInjection(injectionPoint)) {\n+            EventBean.local.set(injectionPoint);\n+        } else if (WebBeansUtil.isDependent(injectedBean)) {\n+            if (!InjectionPoint.class.isAssignableFrom(ClassUtil.getClass(injectionPoint.getType()))) {\n+                InjectionPointBean.local.set(injectionPoint);\n+            }\n+        }\n+\n+        object = beanManager.getInjectableReference(injectionPoint, ownerCreationalContext);\n+\n+        return object;\n+    }\n+\n+    /**\n+     * Gets initializer method parameters.\n+     *\n+     * @param injectionPoint  javaee component\n+     *                        injection point\n+     * @param beanManager     bean manager\n+     * @param injectionPoints all injection points\n+     * @return injected method injected arguments\n+     */\n+    private List<Object> getInjectedMethodParameterReferences(InjectionPoint injectionPoint, BeanManagerImpl beanManager, Set<InjectionPoint> injectionPoints) {\n+        Method method = (Method) injectionPoint.getMember();\n+        List<InjectionPoint> injectedPoints = getInjectedPoints(method, injectionPoints);\n+        List<Object> list = new ArrayList<Object>();\n+        for (int i = 0; i < injectedPoints.size(); i++) {\n+            for (InjectionPoint point : injectedPoints) {\n+                AnnotatedParameter<?> parameter = (AnnotatedParameter<?>) point.getAnnotated();\n+                if (parameter.getPosition() == i) {\n+                    Object instance = getInjectedObjectReference(injectionPoint, beanManager);\n+                    list.add(instance);\n+                    break;\n+                }\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    /**\n+     * Gets injection point of given methods.\n+     *\n+     * @param method          injection point member\n+     * @param injectionPoints all injection points\n+     * @return method injection points\n+     */\n+    private List<InjectionPoint> getInjectedPoints(Method method, Set<InjectionPoint> injectionPoints) {\n+        List<InjectionPoint> points = new ArrayList<InjectionPoint>();\n+\n+        for (InjectionPoint ip : injectionPoints) {\n+            if (ip.getMember().equals(method)) {\n+                points.add(ip);\n+            }\n+        }\n+\n+        return points;\n+\n+    }\n+\n+    /**\n+     * Returns true if injection point is instance injection point\n+     * false otherwise.\n+     *\n+     * @param injectionPoint injection point\n+     * @return true if injection point is instance injection point\n+     */\n+    private boolean isInstanceProviderInjection(InjectionPoint injectionPoint) {\n+        Type type = injectionPoint.getType();\n+\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType pt = (ParameterizedType) type;\n+            Class<?> clazz = (Class<?>) pt.getRawType();\n+\n+            if (Provider.class.isAssignableFrom(clazz)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+    /**\n+     * Returns true if injection point is event injection point\n+     * false otherwise.\n+     *\n+     * @param injectionPoint injection point\n+     * @return true if injection point is event injection point\n+     */\n+    private boolean isEventProviderInjection(InjectionPoint injectionPoint) {\n+        Type type = injectionPoint.getType();\n+\n+        if (type instanceof ParameterizedType) {\n+            ParameterizedType pt = (ParameterizedType) type;\n+            Class<?> clazz = (Class<?>) pt.getRawType();\n+\n+            if (clazz.isAssignableFrom(Event.class)) {\n+                return true;\n+            }\n+        }\n+\n+        return false;\n+    }\n+\n+\n+}", "filename": "openejb3/container/openejb-core/src/main/java/org/apache/openejb/cdi/OWBInjector.java"}], "repo": "openejb"}]
