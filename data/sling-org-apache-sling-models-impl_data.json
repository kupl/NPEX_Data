[
    {
        "repo": "sling-org-apache-sling-models-impl",
        "message": "SLING-3879 - fixing NPE in PathInjector. Thanks Stefan for the patch!\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1620296 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-models-impl/commit/5e6f11676fa7c207a80b842509c2509cdf7affc7",
        "parent": "https://github.com/apache/sling-org-apache-sling-models-impl/commit/45af5c63fdb6a111bd364499ed644eb950525424",
        "bug_id": "sling-org-apache-sling-models-impl_1",
        "file": [
            {
                "sha": "2dbfecfe382d3cbec6ed451e32b46cacd8a8cdc7",
                "filename": "src/main/java/org/apache/sling/models/impl/injectors/ResourcePathInjector.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/main/java/org/apache/sling/models/impl/injectors/ResourcePathInjector.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/main/java/org/apache/sling/models/impl/injectors/ResourcePathInjector.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/main/java/org/apache/sling/models/impl/injectors/ResourcePathInjector.java?ref=5e6f11676fa7c207a80b842509c2509cdf7affc7",
                "patch": "@@ -66,7 +66,9 @@ public Object getValue(Object adaptable, String name, Type declaredType, Annotat\n             if (resourcePath == null && name != null) {\n                 // try to get from value map\n                 ValueMap map = getValueMap(adaptable);\n-                resourcePath = map.get(name, String.class);\n+                if (map != null) {\n+                    resourcePath = map.get(name, String.class);\n+                }\n             }\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "b9d48054ca3752367b05d2abda5f3d2a18c19eb7",
                "filename": "src/test/java/org/apache/sling/models/impl/ResourcePathInjectionTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/impl/ResourcePathInjectionTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/impl/ResourcePathInjectionTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/impl/ResourcePathInjectionTest.java?ref=5e6f11676fa7c207a80b842509c2509cdf7affc7",
                "patch": "@@ -25,13 +25,15 @@\n import java.util.Hashtable;\n import java.util.Map;\n \n+import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.api.resource.ResourceResolver;\n import org.apache.sling.api.resource.ValueMap;\n import org.apache.sling.api.wrappers.ValueMapDecorator;\n import org.apache.sling.models.impl.injectors.ResourcePathInjector;\n import org.apache.sling.models.impl.injectors.SelfInjector;\n import org.apache.sling.models.impl.injectors.ValueMapInjector;\n+import org.apache.sling.models.testmodels.classes.ResourcePathAllOptionalModel;\n import org.apache.sling.models.testmodels.classes.ResourcePathModel;\n import org.junit.Before;\n import org.junit.Test;\n@@ -107,4 +109,25 @@ public void testPathInjection() {\n         assertEquals(byPropertyValueResource2, model.getByDerefProperty2());\n     }\n \n+    @Test\n+    public void testPathInjectionWithNonResourceAdaptable() {\n+        SlingHttpServletRequest nonResourceAdaptable = mock(SlingHttpServletRequest.class);\n+        ResourcePathModel model = factory.getAdapter(nonResourceAdaptable, ResourcePathModel.class);\n+        // should be null because mandatory fields could not be injected\n+        assertNull(model);\n+    }\n+\n+    @Test\n+    public void testOptionalPathInjectionWithNonResourceAdaptable() {\n+        SlingHttpServletRequest nonResourceAdaptable = mock(SlingHttpServletRequest.class);\n+        ResourcePathAllOptionalModel model = factory.getAdapter(nonResourceAdaptable, ResourcePathAllOptionalModel.class);\n+        // should not be null because resource paths fields are optional\n+        assertNotNull(model);\n+        // but the field itself are null\n+        assertNull(model.getFromPath());\n+        assertNull(model.getByDerefProperty());\n+        assertNull(model.getFromPath2());\n+        assertNull(model.getByDerefProperty2());\n+   }\n+\n }\n\\ No newline at end of file",
                "deletions": 0
            },
            {
                "sha": "d3e97cb8aa598e8c0845cf91bbe95a8f02693ff0",
                "filename": "src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathAllOptionalModel.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathAllOptionalModel.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathAllOptionalModel.java",
                "status": "added",
                "changes": 66,
                "additions": 66,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathAllOptionalModel.java?ref=5e6f11676fa7c207a80b842509c2509cdf7affc7",
                "patch": "@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.sling.models.testmodels.classes;\n+\n+import javax.inject.Inject;\n+import javax.inject.Named;\n+\n+import org.apache.sling.api.SlingHttpServletRequest;\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.models.annotations.Model;\n+import org.apache.sling.models.annotations.Optional;\n+import org.apache.sling.models.annotations.Path;\n+import org.apache.sling.models.annotations.injectorspecific.ResourcePath;\n+\n+@Model(adaptables = {Resource.class, SlingHttpServletRequest.class})\n+public class ResourcePathAllOptionalModel {\n+\n+    @Inject\n+    @Path(\"/some/path\")\n+    @Optional\n+    private Resource fromPath;\n+\n+    @Inject\n+    @Named(\"propertyContainingAPath\")\n+    @Optional\n+    private Resource derefProperty;\n+\n+    @ResourcePath(path = \"/some/path2\", optional=true)\n+    private Resource fromPath2;\n+\n+    @ResourcePath(name = \"anotherPropertyContainingAPath\", optional=true)\n+    private Resource derefProperty2;\n+\n+    public Resource getFromPath() {\n+        return fromPath;\n+    }\n+\n+    public Resource getByDerefProperty() {\n+        return derefProperty;\n+    }\n+\n+    public Resource getFromPath2() {\n+        return fromPath2;\n+    }\n+\n+    public Resource getByDerefProperty2() {\n+        return derefProperty2;\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "ec23150be84314d68084d95f368a8753d50fb111",
                "filename": "src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathModel.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathModel.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/5e6f11676fa7c207a80b842509c2509cdf7affc7/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathModel.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/testmodels/classes/ResourcePathModel.java?ref=5e6f11676fa7c207a80b842509c2509cdf7affc7",
                "patch": "@@ -21,12 +21,13 @@\n import javax.inject.Inject;\n import javax.inject.Named;\n \n+import org.apache.sling.api.SlingHttpServletRequest;\n import org.apache.sling.api.resource.Resource;\n import org.apache.sling.models.annotations.Model;\n import org.apache.sling.models.annotations.Path;\n import org.apache.sling.models.annotations.injectorspecific.ResourcePath;\n \n-@Model(adaptables = Resource.class)\n+@Model(adaptables = {Resource.class, SlingHttpServletRequest.class})\n public class ResourcePathModel {\n \n     @Inject",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "sling-org-apache-sling-models-impl",
        "message": "SLING-3429 - fix NPE in OSGiServiceInjector which impacted multi-valued properties\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1573637 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/sling-org-apache-sling-models-impl/commit/a666ecfd4d90a3a85d0832d37034cd57ea5f8503",
        "parent": "https://github.com/apache/sling-org-apache-sling-models-impl/commit/fe7d4e16654be709d973d8200cd0c3605bf89c7e",
        "bug_id": "sling-org-apache-sling-models-impl_2",
        "file": [
            {
                "sha": "59a96363af1554a977d22edb089c78c9e30f55c7",
                "filename": "src/main/java/org/apache/sling/models/impl/injectors/OSGiServiceInjector.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/main/java/org/apache/sling/models/impl/injectors/OSGiServiceInjector.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/main/java/org/apache/sling/models/impl/injectors/OSGiServiceInjector.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/main/java/org/apache/sling/models/impl/injectors/OSGiServiceInjector.java?ref=a666ecfd4d90a3a85d0832d37034cd57ea5f8503",
                "patch": "@@ -148,6 +148,9 @@ private Object getValue(Object adaptable, Type type, String filterString, Dispos\n             Class<?> injectedClass = (Class<?>) type;\n             if (injectedClass.isArray()) {\n                 Object[] services = getServices(adaptable, injectedClass.getComponentType(), filterString, callbackRegistry);\n+                if (services == null) {\n+                    return null;\n+                }\n                 Object arr = Array.newInstance(injectedClass.getComponentType(), services.length);\n                 for (int i = 0; i < services.length; i++) {\n                     Array.set(arr, i, services[i]);\n@@ -168,6 +171,9 @@ private Object getValue(Object adaptable, Type type, String filterString, Dispos\n \n             Class<?> serviceType = (Class<?>) ptype.getActualTypeArguments()[0];\n             Object[] services = getServices(adaptable, serviceType, filterString, callbackRegistry);\n+            if (services == null) {\n+                return null;\n+            }\n             return Arrays.asList(services);\n         } else {\n             log.warn(\"Cannot handle type {}\", type);",
                "deletions": 0
            },
            {
                "sha": "981200326ab408e14c4acbb7c4a4d6e860513414",
                "filename": "src/test/java/org/apache/sling/models/impl/OSGiInjectionTest.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/impl/OSGiInjectionTest.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/impl/OSGiInjectionTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/impl/OSGiInjectionTest.java?ref=a666ecfd4d90a3a85d0832d37034cd57ea5f8503",
                "patch": "@@ -30,6 +30,8 @@\n import org.apache.sling.models.testmodels.classes.ArrayOSGiModel;\n import org.apache.sling.models.testmodels.classes.CollectionOSGiModel;\n import org.apache.sling.models.testmodels.classes.ListOSGiModel;\n+import org.apache.sling.models.testmodels.classes.OptionalArrayOSGiModel;\n+import org.apache.sling.models.testmodels.classes.OptionalListOSGiModel;\n import org.apache.sling.models.testmodels.classes.RequestOSGiModel;\n import org.apache.sling.models.testmodels.classes.SetOSGiModel;\n import org.apache.sling.models.testmodels.classes.SimpleOSGiModel;\n@@ -160,6 +162,29 @@ public void testArrayOSGiModel() throws Exception {\n         verifyNoMoreInteractions(res);\n     }\n \n+    @Test\n+    public void testOptionalArrayOSGiModel() throws Exception {\n+\n+        Resource res = mock(Resource.class);\n+\n+        OptionalArrayOSGiModel model = factory.getAdapter(res, OptionalArrayOSGiModel.class);\n+        assertNotNull(model);\n+        assertNull(model.getServices());\n+\n+        verifyNoMoreInteractions(res);\n+    }\n+\n+    @Test\n+    public void testOptionalListOSGiModel() throws Exception {\n+        Resource res = mock(Resource.class);\n+\n+        OptionalListOSGiModel model = factory.getAdapter(res, OptionalListOSGiModel.class);\n+        assertNotNull(model);\n+        assertNull(model.getServices());\n+\n+        verifyNoMoreInteractions(res);\n+    }\n+\n     @Test\n     public void testCollectionOSGiModel() throws Exception {\n         ServiceReference ref1 = mock(ServiceReference.class);",
                "deletions": 0
            },
            {
                "sha": "84aac68dda827771dc7722a5452a96c692d2b95c",
                "filename": "src/test/java/org/apache/sling/models/testmodels/classes/OptionalArrayOSGiModel.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/testmodels/classes/OptionalArrayOSGiModel.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/testmodels/classes/OptionalArrayOSGiModel.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/testmodels/classes/OptionalArrayOSGiModel.java?ref=a666ecfd4d90a3a85d0832d37034cd57ea5f8503",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.sling.models.testmodels.classes;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.models.annotations.Model;\n+import org.apache.sling.models.annotations.Optional;\n+import org.apache.sling.models.testmodels.interfaces.ServiceInterface;\n+\n+@Model(adaptables = Resource.class)\n+public class OptionalArrayOSGiModel {\n+    \n+    @Inject @Optional\n+    private ServiceInterface[] services;\n+    \n+    public ServiceInterface[] getServices() {\n+        return services;\n+    }\n+\n+}",
                "deletions": 0
            },
            {
                "sha": "b8a2146a97d258eec7557ad90b280376b8bc05a3",
                "filename": "src/test/java/org/apache/sling/models/testmodels/classes/OptionalListOSGiModel.java",
                "blob_url": "https://github.com/apache/sling-org-apache-sling-models-impl/blob/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/testmodels/classes/OptionalListOSGiModel.java",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-models-impl/raw/a666ecfd4d90a3a85d0832d37034cd57ea5f8503/src/test/java/org/apache/sling/models/testmodels/classes/OptionalListOSGiModel.java",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-models-impl/contents/src/test/java/org/apache/sling/models/testmodels/classes/OptionalListOSGiModel.java?ref=a666ecfd4d90a3a85d0832d37034cd57ea5f8503",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.sling.models.testmodels.classes;\n+\n+import java.util.List;\n+\n+import javax.inject.Inject;\n+\n+import org.apache.sling.api.resource.Resource;\n+import org.apache.sling.models.annotations.Model;\n+import org.apache.sling.models.annotations.Optional;\n+import org.apache.sling.models.testmodels.interfaces.ServiceInterface;\n+\n+@Model(adaptables = Resource.class)\n+public class OptionalListOSGiModel {\n+    \n+    @Inject @Optional\n+    private List<ServiceInterface> services;\n+    \n+    public List<ServiceInterface> getServices() {\n+        return services;\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    }
]