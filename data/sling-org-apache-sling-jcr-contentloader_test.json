{
    "sling-org-apache-sling-jcr-contentloader_d3d01bd": {
        "bug_id": "sling-org-apache-sling-jcr-contentloader_d3d01bd",
        "commit": "https://github.com/apache/sling-org-apache-sling-jcr-contentloader/commit/d3d01bd47d5acf3a2219509359506964dc72e956",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-jcr-contentloader/blob/d3d01bd47d5acf3a2219509359506964dc72e956/src/main/java/org/apache/sling/jcr/contentloader/internal/readers/XmlReader.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-jcr-contentloader/contents/src/main/java/org/apache/sling/jcr/contentloader/internal/readers/XmlReader.java?ref=d3d01bd47d5acf3a2219509359506964dc72e956",
                "deletions": 10,
                "filename": "src/main/java/org/apache/sling/jcr/contentloader/internal/readers/XmlReader.java",
                "patch": "@@ -156,10 +156,10 @@ public ContentReader getReader() throws IOException {\n \n \n     /**\n-     * @see org.apache.sling.jcr.contentloader.internal.ContentReader#parse(java.net.URL, org.apache.sling.jcr.contentloader.internal.ContentCreator)\n+     * @see org.apache.sling.jcr.contentloader.internal.ContentReader#parse(URL, org.apache.sling.jcr.contentloader.internal.ContentCreator)\n      */\n-    public synchronized void parse(java.net.URL url, ContentCreator creator)\n-            throws IOException, RepositoryException {\n+    public synchronized void parse(final URL url, final ContentCreator creator)\n+    throws IOException, RepositoryException {\n         BufferedInputStream bufferedInput = null;\n         try {\n             // We need to buffer input, so that we can reset the stream if we encounter an XSL stylesheet reference\n@@ -172,8 +172,11 @@ public synchronized void parse(java.net.URL url, ContentCreator creator)\n         }\n     }\n \n-    private void parseInternal(InputStream bufferedInput, ContentCreator creator, java.net.URL xmlLocation) throws XmlPullParserException, IOException, RepositoryException {\n-        final StringBuffer contentBuffer = new StringBuffer();\n+    private void parseInternal(final InputStream bufferedInput,\n+                               final ContentCreator creator,\n+                               final URL xmlLocation)\n+    throws XmlPullParserException, IOException, RepositoryException {\n+        final StringBuilder contentBuffer = new StringBuilder();\n         // Mark the beginning of the stream. We assume that if there's an XSL processing instruction,\n         // it will occur in the first gulp - which makes sense, as processing instructions must be\n         // specified before the root elemeent of an XML file.\n@@ -223,7 +226,7 @@ private void parseInternal(InputStream bufferedInput, ContentCreator creator, ja\n                 } else if (ELEM_FILE_NAME.equals(currentElement) && ELEM_FILE_NAMESPACE.equals(this.xmlParser.getNamespace())) {\n                     int attributeCount = this.xmlParser.getAttributeCount();\n                     if (attributeCount < 2 || attributeCount > 3) {\n-                        throw new IOException(\"File element must have these attributes: url, mimeType and lastModified\");\n+                        throw new IOException(\"File element must have these attributes: url, mimeType and lastModified: \" + xmlLocation);\n                     }\n                     try {\n                         AttributeMap attributes = AttributeMap.getInstance();\n@@ -232,7 +235,7 @@ private void parseInternal(InputStream bufferedInput, ContentCreator creator, ja\n                         FileDescription.SHARED.setValues(attributes);\n                         attributes.clear();\n                     } catch (ParseException e) {\n-                        IOException ioe = new IOException(\"Error parsing file description\");\n+                        IOException ioe = new IOException(\"Error parsing file description: \" + xmlLocation);\n                         ioe.initCause(e);\n                         throw ioe;\n                     }\n@@ -257,12 +260,21 @@ private void parseInternal(InputStream bufferedInput, ContentCreator creator, ja\n                     }\n \n                 } else if (ELEM_VALUE.equals(qName)) {\n+                    if ( currentProperty == null ) {\n+                        throw new IOException(\"XML file does not seem to contain valid content xml. Unexpected \" + ELEM_VALUE + \" element in : \" + xmlLocation);\n+                    }\n                     currentProperty.addValue(content);\n \n                 } else if (ELEM_VALUES.equals(qName)) {\n+                    if ( currentProperty == null ) {\n+                        throw new IOException(\"XML file does not seem to contain valid content xml. Unexpected \" + ELEM_VALUE + \" element in : \" + xmlLocation);\n+                    }\n                     currentProperty.isMultiValue = true;\n \n                 } else if (ELEM_TYPE.equals(qName)) {\n+                    if ( currentProperty == null ) {\n+                        throw new IOException(\"XML file does not seem to contain valid content xml. Unexpected \" + ELEM_VALUE + \" element in : \" + xmlLocation);\n+                    }\n                     currentProperty.type = content;\n \n                 } else if (ELEM_NODE.equals(qName)) {\n@@ -271,13 +283,13 @@ private void parseInternal(InputStream bufferedInput, ContentCreator creator, ja\n \n                 } else if (ELEM_PRIMARY_NODE_TYPE.equals(qName)) {\n                     if ( currentNode == null ) {\n-                        throw new IOException(\"Element is not allowed at this location: \" + qName);\n+                        throw new IOException(\"Element is not allowed at this location: \" + qName + \" in \" + xmlLocation);\n                     }\n                     currentNode.primaryNodeType = content;\n \n                 } else if (ELEM_MIXIN_NODE_TYPE.equals(qName)) {\n                     if ( currentNode == null ) {\n-                        throw new IOException(\"Element is not allowed at this location: \" + qName);\n+                        throw new IOException(\"Element is not allowed at this location: \" + qName + \" in \" + xmlLocation);\n                     }\n                     currentNode.addMixinType(content);\n                 }\n@@ -321,7 +333,7 @@ public XslTransformerStream(InputStream inputXml, String xslHref, URL xmlLocatio\n          * @throws IOException\n          */\n         public void startTransform() throws IOException {\n-            final URL xslResource = new java.net.URL(xmlLocation, this.xslHref);\n+            final URL xslResource = new URL(xmlLocation, this.xslHref);\n \n /*\n             if (xslResource == null) {",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-jcr-contentloader/raw/d3d01bd47d5acf3a2219509359506964dc72e956/src/main/java/org/apache/sling/jcr/contentloader/internal/readers/XmlReader.java",
                "sha": "8cd74e111513c3984968bbf04cf5d4693949fd8a",
                "status": "modified"
            }
        ],
        "message": "SLING-1325 : Bundle deploy fails utterly if any XML files contains an element named \"type\" - throw exception now instead of an NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@903115 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-jcr-contentloader/commit/c99132897c63799973c0d09164f2117814324c71",
        "patched_files": [
            "XmlReader.java"
        ],
        "repo": "sling-org-apache-sling-jcr-contentloader",
        "unit_tests": [
            "XmlReaderTest.java"
        ]
    }
}