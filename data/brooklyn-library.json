{
    "brooklyn-library_08e185c": {
        "bug_id": "brooklyn-library_08e185c",
        "commit": "https://github.com/apache/brooklyn-library/commit/08e185c2a11d466a1198625764c641905830d5d2",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java?ref=08e185c2a11d466a1198625764c641905830d5d2",
                "deletions": 3,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "patch": "@@ -25,10 +25,12 @@\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n+import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.location.basic.PortRanges;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.net.Cidr;\n \n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -52,12 +54,11 @@\n \n     @SetFromFlag(\"reverseLookupNetwork\")\n     ConfigKey<String> REVERSE_LOOKUP_NETWORK = new BasicConfigKey<String>(String.class,\n-            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone (defaults to server address /24)\");\n+            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone\");\n \n     @SetFromFlag(\"subnet\")\n     ConfigKey<String> MANAGEMENT_CIDR = new BasicConfigKey<String>(String.class,\n-            \"bind.access.cidr\", \"Subnet CIDR allowed to access DNS\", \"0.0.0.0/0\");\n-            // TODO should default be a /0, or 'any', or use brooklyn management CIDR?\n+            \"bind.access.cidr\", \"Subnet CIDR or ACL allowed to access DNS\", \"0.0.0.0/0\");\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @SetFromFlag(\"hostnameSensor\")\n@@ -82,6 +83,14 @@\n             \"bind.template.named-conf\", \"The BIND named configuration file (as FreeMarker template)\",\n             \"classpath://brooklyn/entity/network/bind/named.conf\");\n \n+    /* Reverse lookup attributes. */\n+\n+    AttributeSensor<Cidr> REVERSE_LOOKUP_CIDR = new BasicAttributeSensor<Cidr>(Cidr.class,\n+            \"bind.reverse-lookup.cidr\", \"The network CIDR that hosts must have for reverse lookup entriers to be added (default uses server address /24)\");\n+\n+    AttributeSensor<String> REVERSE_LOOKUP_DOMAIN = new BasicAttributeSensor<String>(String.class,\n+            \"bind.reverse-lookup.domain\", \"The in-addr.arpa reverse lookup domain name\");\n+\n     /* Configuration applicable to clients of the BIND DNS service. */\n \n     @SetFromFlag(\"replaceResolvConf\")",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "sha": "271e898bac199988041f3e2eee2b5712b633937b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java?ref=08e185c2a11d466a1198625764c641905830d5d2",
                "deletions": 16,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "patch": "@@ -16,8 +16,6 @@\n package brooklyn.entity.network.bind;\n \n import java.io.ByteArrayInputStream;\n-import java.net.InetAddress;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -67,7 +65,6 @@\n     private Multimap<Location, Entity> entityLocations = HashMultimap.create();\n     private ConcurrentMap<String, String> addressMappings = Maps.newConcurrentMap();\n     private ConcurrentMap<String, String> reverseMappings = Maps.newConcurrentMap();\n-    private Cidr reverseNetwork;\n \n     public BindDnsServerImpl() {\n         super();\n@@ -89,11 +86,12 @@ public long getSerial() {\n         return serial.incrementAndGet();\n     }\n \n+    public Cidr getReverseLookupNetwork() {\n+        return getAttribute(REVERSE_LOOKUP_CIDR);\n+    }\n+\n     public String getReverseLookupDomain() {\n-        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n-        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n-        reverseNetwork = new Cidr(reverse + \"/24\");\n-        return Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \" .in-addr.arpa\";\n+        return getAttribute(REVERSE_LOOKUP_DOMAIN);\n     }\n \n     @Override\n@@ -134,6 +132,12 @@ public void disconnectSensors() {\n \n     @Override\n     protected void preStart() {\n+        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n+        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n+        setAttribute(REVERSE_LOOKUP_CIDR, new Cidr(reverse + \"/24\"));\n+        String reverseLookupDomain = Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \".in-addr.arpa\";\n+        setAttribute(REVERSE_LOOKUP_DOMAIN, reverseLookupDomain);\n+\n         Map<?, ?> flags = MutableMap.builder()\n                 .put(\"name\", \"Address tracker\")\n                 .put(\"sensorsToTrack\", ImmutableSet.of(getConfig(HOSTNAME_SENSOR)))\n@@ -142,14 +146,16 @@ protected void preStart() {\n             @Override\n             protected void onEntityChange(Entity member) { added(member); }\n             @Override\n-            protected void onEntityAdded(Entity member) { added(member); }\n+            protected void onEntityAdded(Entity member) {\n+                if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n+            }\n             @Override\n             protected void onEntityRemoved(Entity member) { removed(member); }\n         };\n \n         // For any entities that have already come up\n         for (Entity member : entities.getMembers()) {\n-            added(member);\n+            if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n         }\n \n         addPolicy(policy);\n@@ -171,7 +177,7 @@ public void added(Entity member) {\n                 if (!entityLocations.containsKey(machine)) {\n                     entityLocations.put(machine, member);\n                     addressMappings.putIfAbsent(address, hostname);\n-                    if (reverseNetwork.contains(new Cidr(address + \"/32\"))) {\n+                    if (getReverseLookupNetwork().contains(new Cidr(address + \"/32\"))) {\n                         String octet = Iterables.get(Splitter.on('.').split(address), 3);\n                         reverseMappings.putIfAbsent(hostname, octet);\n                     }\n@@ -181,8 +187,6 @@ public void added(Entity member) {\n                     configure(machine);\n                     LOG.info(\"{} added at location {} with name {}\", new Object[] { member, machine, hostname });\n                 }\n-            } else {\n-                LOG.warn(\"added({}) called but entity not ready\", member);\n             }\n         }\n     }\n@@ -208,12 +212,10 @@ private Location findLocation(Entity member) {\n                     return entry.getKey();\n                 }\n             }\n-            return null;\n-        } else {\n-            return null;\n         }\n+        return null;\n     }\n-    \n+\n     public void update() {\n         Optional<Location> location = Iterables.tryFind(getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n         SshMachineLocation machine = (SshMachineLocation) location.get();",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "sha": "6ab00b68adf0e39a92ce61eeb5260b6c4935ae91",
                "status": "modified"
            }
        ],
        "message": "Review changes for #810 including fix for NPE and adding new reverse lookup attributes",
        "parent": "https://github.com/apache/brooklyn-library/commit/cd3e70ff53fdc46f96d65dfc837ad561b804d5c4",
        "repo": "brooklyn-library",
        "unit_tests": [
            "TestBindDnsServerImpl.java"
        ]
    }
}