{
    "brooklyn-library_08e185c": {
        "bug_id": "brooklyn-library_08e185c",
        "commit": "https://github.com/apache/brooklyn-library/commit/08e185c2a11d466a1198625764c641905830d5d2",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java?ref=08e185c2a11d466a1198625764c641905830d5d2",
                "deletions": 3,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "patch": "@@ -25,10 +25,12 @@\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n+import brooklyn.event.basic.BasicAttributeSensor;\n import brooklyn.event.basic.BasicConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.location.basic.PortRanges;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.net.Cidr;\n \n import com.google.common.base.Predicate;\n import com.google.common.base.Predicates;\n@@ -52,12 +54,11 @@\n \n     @SetFromFlag(\"reverseLookupNetwork\")\n     ConfigKey<String> REVERSE_LOOKUP_NETWORK = new BasicConfigKey<String>(String.class,\n-            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone (defaults to server address /24)\");\n+            \"bind.reverse-lookup.address\", \"Network address for reverse lookup zone\");\n \n     @SetFromFlag(\"subnet\")\n     ConfigKey<String> MANAGEMENT_CIDR = new BasicConfigKey<String>(String.class,\n-            \"bind.access.cidr\", \"Subnet CIDR allowed to access DNS\", \"0.0.0.0/0\");\n-            // TODO should default be a /0, or 'any', or use brooklyn management CIDR?\n+            \"bind.access.cidr\", \"Subnet CIDR or ACL allowed to access DNS\", \"0.0.0.0/0\");\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @SetFromFlag(\"hostnameSensor\")\n@@ -82,6 +83,14 @@\n             \"bind.template.named-conf\", \"The BIND named configuration file (as FreeMarker template)\",\n             \"classpath://brooklyn/entity/network/bind/named.conf\");\n \n+    /* Reverse lookup attributes. */\n+\n+    AttributeSensor<Cidr> REVERSE_LOOKUP_CIDR = new BasicAttributeSensor<Cidr>(Cidr.class,\n+            \"bind.reverse-lookup.cidr\", \"The network CIDR that hosts must have for reverse lookup entriers to be added (default uses server address /24)\");\n+\n+    AttributeSensor<String> REVERSE_LOOKUP_DOMAIN = new BasicAttributeSensor<String>(String.class,\n+            \"bind.reverse-lookup.domain\", \"The in-addr.arpa reverse lookup domain name\");\n+\n     /* Configuration applicable to clients of the BIND DNS service. */\n \n     @SetFromFlag(\"replaceResolvConf\")",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServer.java",
                "sha": "271e898bac199988041f3e2eee2b5712b633937b",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java?ref=08e185c2a11d466a1198625764c641905830d5d2",
                "deletions": 16,
                "filename": "software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "patch": "@@ -16,8 +16,6 @@\n package brooklyn.entity.network.bind;\n \n import java.io.ByteArrayInputStream;\n-import java.net.InetAddress;\n-import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentMap;\n import java.util.concurrent.atomic.AtomicLong;\n@@ -67,7 +65,6 @@\n     private Multimap<Location, Entity> entityLocations = HashMultimap.create();\n     private ConcurrentMap<String, String> addressMappings = Maps.newConcurrentMap();\n     private ConcurrentMap<String, String> reverseMappings = Maps.newConcurrentMap();\n-    private Cidr reverseNetwork;\n \n     public BindDnsServerImpl() {\n         super();\n@@ -89,11 +86,12 @@ public long getSerial() {\n         return serial.incrementAndGet();\n     }\n \n+    public Cidr getReverseLookupNetwork() {\n+        return getAttribute(REVERSE_LOOKUP_CIDR);\n+    }\n+\n     public String getReverseLookupDomain() {\n-        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n-        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n-        reverseNetwork = new Cidr(reverse + \"/24\");\n-        return Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \" .in-addr.arpa\";\n+        return getAttribute(REVERSE_LOOKUP_DOMAIN);\n     }\n \n     @Override\n@@ -134,6 +132,12 @@ public void disconnectSensors() {\n \n     @Override\n     protected void preStart() {\n+        String reverse = getConfig(REVERSE_LOOKUP_NETWORK);\n+        if (Strings.isBlank(reverse)) reverse = getAttribute(ADDRESS);\n+        setAttribute(REVERSE_LOOKUP_CIDR, new Cidr(reverse + \"/24\"));\n+        String reverseLookupDomain = Joiner.on('.').join(Iterables.skip(Lists.reverse(Lists.newArrayList(Splitter.on('.').split(reverse))), 1)) + \".in-addr.arpa\";\n+        setAttribute(REVERSE_LOOKUP_DOMAIN, reverseLookupDomain);\n+\n         Map<?, ?> flags = MutableMap.builder()\n                 .put(\"name\", \"Address tracker\")\n                 .put(\"sensorsToTrack\", ImmutableSet.of(getConfig(HOSTNAME_SENSOR)))\n@@ -142,14 +146,16 @@ protected void preStart() {\n             @Override\n             protected void onEntityChange(Entity member) { added(member); }\n             @Override\n-            protected void onEntityAdded(Entity member) { added(member); }\n+            protected void onEntityAdded(Entity member) {\n+                if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n+            }\n             @Override\n             protected void onEntityRemoved(Entity member) { removed(member); }\n         };\n \n         // For any entities that have already come up\n         for (Entity member : entities.getMembers()) {\n-            added(member);\n+            if (Strings.isNonBlank(member.getAttribute(getConfig(HOSTNAME_SENSOR)))) added(member); // Ignore, unless hostname set\n         }\n \n         addPolicy(policy);\n@@ -171,7 +177,7 @@ public void added(Entity member) {\n                 if (!entityLocations.containsKey(machine)) {\n                     entityLocations.put(machine, member);\n                     addressMappings.putIfAbsent(address, hostname);\n-                    if (reverseNetwork.contains(new Cidr(address + \"/32\"))) {\n+                    if (getReverseLookupNetwork().contains(new Cidr(address + \"/32\"))) {\n                         String octet = Iterables.get(Splitter.on('.').split(address), 3);\n                         reverseMappings.putIfAbsent(hostname, octet);\n                     }\n@@ -181,8 +187,6 @@ public void added(Entity member) {\n                     configure(machine);\n                     LOG.info(\"{} added at location {} with name {}\", new Object[] { member, machine, hostname });\n                 }\n-            } else {\n-                LOG.warn(\"added({}) called but entity not ready\", member);\n             }\n         }\n     }\n@@ -208,12 +212,10 @@ private Location findLocation(Entity member) {\n                     return entry.getKey();\n                 }\n             }\n-            return null;\n-        } else {\n-            return null;\n         }\n+        return null;\n     }\n-    \n+\n     public void update() {\n         Optional<Location> location = Iterables.tryFind(getLocations(), Predicates.instanceOf(SshMachineLocation.class));\n         SshMachineLocation machine = (SshMachineLocation) location.get();",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/08e185c2a11d466a1198625764c641905830d5d2/software/network/src/main/java/brooklyn/entity/network/bind/BindDnsServerImpl.java",
                "sha": "6ab00b68adf0e39a92ce61eeb5260b6c4935ae91",
                "status": "modified"
            }
        ],
        "message": "Review changes for #810 including fix for NPE and adding new reverse lookup attributes",
        "parent": "https://github.com/apache/brooklyn-library/commit/cd3e70ff53fdc46f96d65dfc837ad561b804d5c4",
        "repo": "brooklyn-library",
        "unit_tests": [
            "TestBindDnsServerImpl.java"
        ]
    },
    "brooklyn-library_113d039": {
        "bug_id": "brooklyn-library_113d039",
        "commit": "https://github.com/apache/brooklyn-library/commit/113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
                "deletions": 9,
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "patch": "@@ -8,12 +8,14 @@\n import brooklyn.entity.basic.MethodEffector;\n import brooklyn.entity.basic.SoftwareProcess;\n import brooklyn.entity.proxying.ImplementedBy;\n+import brooklyn.entity.webapp.WebAppService;\n import brooklyn.entity.webapp.WebAppServiceConstants;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensorAndConfigKey;\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n \n @ImplementedBy(CouchbaseNodeImpl.class)\n public interface CouchbaseNode extends SoftwareProcess {\n@@ -78,27 +80,33 @@\n             \"Retrieved from pools/nodes/<current node>/interestingStats/cmd_get\");\n     AttributeSensor<Integer> CURR_ITEMS_TOT = Sensors.newIntegerSensor(\"couchbase.stats.curr.items.tot\", \n             \"Retrieved from pools/nodes/<current node>/interestingStats/curr_items_tot\");\n+\n     \n-    // this class is added because the ROOT_URL relies on a static initialization which unfortunately\n-    // can't be added to\n-    // an interface.\n     class RootUrl {\n-        public static final AttributeSensor<String> ROOT_URL = Sensors.newStringSensor(\"webapp.url\", \"URL\");\n-\n+        public static final AttributeSensor<String> ROOT_URL = WebAppService.ROOT_URL;\n+        \n         static {\n-            RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+            // ROOT_URL does not need init because it refers to something already initialized\n             RendererHints.register(COUCHBASE_WEB_ADMIN_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+\n+            RendererHints.register(COUCH_DOCS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_DOCS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(MEM_USED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_ACTUAL_DISK_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n+            RendererHints.register(COUCH_VIEWS_DATA_SIZE, RendererHints.displayValue(ByteSizeStrings.metric()));\n         }\n     }\n+    \n+    // this long-winded reference is done just to trigger the initialization above\n+    AttributeSensor<String> ROOT_URL = RootUrl.ROOT_URL;\n \n-    public static final MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n-    public static final MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n+    MethodEffector<Void> SERVER_ADD = new MethodEffector<Void>(CouchbaseNode.class, \"serverAdd\");\n+    MethodEffector<Void> REBALANCE = new MethodEffector<Void>(CouchbaseNode.class, \"rebalance\");\n \n     @Effector(description = \"add a server to a cluster\")\n     public void serverAdd(@EffectorParam(name = \"serverHostname\") String serverToAdd, @EffectorParam(name = \"username\") String username, @EffectorParam(name = \"password\") String password);\n \n     @Effector(description = \"rebalance the couchbase cluster\")\n     public void rebalance();\n \n-\n }",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNode.java",
                "sha": "46b49f5cd5fb10cd194ea0f4a7502174a7bf9f71",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "changes": 93,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
                "deletions": 52,
                "filename": "software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "patch": "@@ -8,6 +8,7 @@\n \n import brooklyn.entity.basic.Attributes;\n import brooklyn.entity.basic.SoftwareProcessImpl;\n+import brooklyn.event.AttributeSensor;\n import brooklyn.event.SensorEvent;\n import brooklyn.event.SensorEventListener;\n import brooklyn.event.feed.http.HttpFeed;\n@@ -19,6 +20,9 @@\n import brooklyn.location.cloud.CloudLocationConfig;\n import brooklyn.util.collections.MutableSet;\n import brooklyn.util.config.ConfigBag;\n+import brooklyn.util.guava.Functionals;\n+import brooklyn.util.guava.MaybeFunctions;\n+import brooklyn.util.guava.TypeTokens;\n import brooklyn.util.http.HttpToolResponse;\n \n import com.google.common.base.Function;\n@@ -88,26 +92,35 @@ public void rebalance() {\n         getDriver().rebalance();\n     }\n \n+    protected final static Function<HttpToolResponse, JsonElement> GET_THIS_NODE_STATS = Functionals.chain(\n+        HttpValueFunctions.jsonContents(), \n+        JsonFunctions.walk(\"nodes\"), \n+        new Function<JsonElement, JsonElement>() {\n+            @Override public JsonElement apply(JsonElement input) {\n+                JsonArray nodes = input.getAsJsonArray();\n+                for (JsonElement element : nodes) {\n+                    JsonElement thisNode = element.getAsJsonObject().get(\"thisNode\");\n+                    if (thisNode!=null && Boolean.TRUE.equals(thisNode.getAsBoolean())) {\n+                        return element.getAsJsonObject().get(\"interestingStats\");\n+                    }\n+                }\n+                return null;\n+        }}\n+    );\n+    \n+    protected final static <T> HttpPollConfig<T> getSensorFromNodeStat(AttributeSensor<T> sensor, String ...jsonPath) {\n+        return new HttpPollConfig<T>(sensor)\n+            .onSuccess(Functionals.chain(GET_THIS_NODE_STATS, \n+                MaybeFunctions.<JsonElement>wrap(), \n+                JsonFunctions.walkM(jsonPath), \n+                JsonFunctions.castM(TypeTokens.getRawRawType(sensor.getTypeToken()), null)))\n+            .onFailureOrException(Functions.<T>constant(null));\n+    }\n \n     public void connectSensors() {\n         super.connectSensors();\n         connectServiceUpIsRunning();\n-        \n-        Function<HttpToolResponse, JsonElement> getThisNodesStats = HttpValueFunctions.chain(\n-            HttpValueFunctions.jsonContents(), \n-            JsonFunctions.walk(\"nodes\"), \n-            new Function<JsonElement, JsonElement>() {\n-                @Override public JsonElement apply(JsonElement input) {\n-                    JsonArray nodes = input.getAsJsonArray();\n-                    for (JsonElement element : nodes) {\n-                        if (Boolean.TRUE.equals(element.getAsJsonObject().get(\"thisNode\").getAsBoolean())) {\n-                            return element.getAsJsonObject().get(\"interestingStats\");\n-                        }\n-                    }\n-                    return null;\n-            }}\n-        );\n-        \n+                \n         Integer rawPort = getAttribute(CouchbaseNode.COUCHBASE_WEB_ADMIN_PORT);\n         Preconditions.checkNotNull(rawPort, \"HTTP_PORT sensors not set for %s; is an acceptable port available?\", this);\n         HostAndPort hp = BrooklynAccessUtils.getBrooklynAccessibleAddress(this, rawPort);\n@@ -119,42 +132,18 @@ public void connectSensors() {\n             .period(1000)\n             .baseUri(adminUrl + \"/pools/nodes/\")\n             .credentialsIfNotNull(getConfig(CouchbaseNode.COUCHBASE_ADMIN_USERNAME), getConfig(CouchbaseNode.COUCHBASE_ADMIN_PASSWORD))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.OPS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ops\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_docs_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.EP_BG_FETCHED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"ep_bg_fetched\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.MEM_USED)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"mem_used\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_actual_disk_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.VB_REPLICA_CURR_ITEMS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"vb_replica_curr_items\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.COUCH_VIEWS_DATA_SIZE)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"couch_views_data_size\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.GET_HITS)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"get_hits\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CMD_GET)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"cmd_get\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n-            .poll(new HttpPollConfig<Integer>(CouchbaseNode.CURR_ITEMS_TOT)\n-                    .onSuccess(HttpValueFunctions.chain(getThisNodesStats, JsonFunctions.walk(\"curr_items_tot\"), JsonFunctions.cast(Integer.class)))\n-                    .onFailureOrException(Functions.<Integer>constant(null)))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.OPS, \"ops\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_DATA_SIZE, \"couch_docs_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_DOCS_ACTUAL_DISK_SIZE, \"couch_docs_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.EP_BG_FETCHED, \"ep_bg_fetched\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.MEM_USED, \"mem_used\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_ACTUAL_DISK_SIZE, \"couch_views_actual_disk_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS, \"curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.VB_REPLICA_CURR_ITEMS, \"vb_replica_curr_items\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.COUCH_VIEWS_DATA_SIZE, \"couch_views_data_size\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.GET_HITS, \"get_hits\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CMD_GET, \"cmd_get\"))\n+            .poll(getSensorFromNodeStat(CouchbaseNode.CURR_ITEMS_TOT, \"curr_items_tot\"))\n             .build();\n     }\n ",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/nosql/src/main/java/brooklyn/entity/nosql/couchbase/CouchbaseNodeImpl.java",
                "sha": "06d9c187688fc6e83e67f3561749e028f71de1d0",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
                "deletions": 2,
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "patch": "@@ -1,9 +1,11 @@\n package brooklyn.entity.webapp;\n \n+import brooklyn.config.render.RendererHints;\n import brooklyn.entity.group.DynamicCluster;\n import brooklyn.entity.proxying.ImplementedBy;\n import brooklyn.event.AttributeSensor;\n import brooklyn.event.basic.BasicAttributeSensor;\n+import brooklyn.util.time.Duration;\n \n /**\n  * DynamicWebAppClusters provide cluster-wide aggregates of entity attributes.  Currently totals and averages:\n@@ -29,10 +31,17 @@\n     public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n \n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = ApplyDisplayHints.TOTAL_PROCESSING_TIME_PER_NODE;\n \n     public static final AttributeSensor<Double> PROCESSING_TIME_FRACTION_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n             Double.class, \"webapp.reqs.processingTime.fraction.windowed.perNode\", \"Fraction of time spent processing reported by webserver (percentage, over time window) averaged over all nodes\");\n \n+    class ApplyDisplayHints {\n+        public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n+            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node (millis)\");\n+        static {\n+            RendererHints.register(TOTAL_PROCESSING_TIME_PER_NODE, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        }\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppCluster.java",
                "sha": "19f320d4ef5594deb7ac1f374395eb650300b95f",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
                "deletions": 7,
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "patch": "@@ -23,12 +23,8 @@\n     public static final AttributeSensor<Integer> ERROR_COUNT_PER_NODE = new BasicAttributeSensor<Integer>(\n             Integer.class, \"webapp.reqs.errors.perNode\", \"Fabric entity request error average\");\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.last.perNode\", \"Reqs/sec (last datapoint) averaged over all nodes\");\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_LAST_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_LAST_PER_NODE;\n+    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = DynamicWebAppCluster.REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE;\n+    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = DynamicWebAppCluster.TOTAL_PROCESSING_TIME_PER_NODE;\n \n-    public static final AttributeSensor<Double> REQUESTS_PER_SECOND_IN_WINDOW_PER_NODE = new BasicAttributeSensor<Double>(\n-            Double.class, \"webapp.reqs.perSec.windowed.perNode\", \"Reqs/sec (over time window) averaged over all nodes\");\n-\n-    public static final AttributeSensor<Integer> TOTAL_PROCESSING_TIME_PER_NODE = new BasicAttributeSensor<Integer>(\n-            Integer.class, \"webapp.reqs.processingTime.perNode\", \"Total processing time per node\");\n }",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/DynamicWebAppFabric.java",
                "sha": "b1c75cfc9d3cc63c0dda56536244def7413640e3",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/brooklyn-library/blob/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/brooklyn-library/contents/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java?ref=113d0392c00cdcb6810bc58780b9b846ad2c4e8a",
                "deletions": 0,
                "filename": "software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "patch": "@@ -10,6 +10,8 @@\n import brooklyn.event.basic.PortAttributeSensorAndConfigKey;\n import brooklyn.event.basic.Sensors;\n import brooklyn.util.flags.SetFromFlag;\n+import brooklyn.util.text.ByteSizeStrings;\n+import brooklyn.util.time.Duration;\n \n import com.google.common.collect.ImmutableList;\n \n@@ -71,5 +73,9 @@\n \n     static {\n         RendererHints.register(ROOT_URL, new RendererHints.NamedActionWithUrl(\"Open\"));\n+        RendererHints.register(WebAppServiceConstants.TOTAL_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.MAX_PROCESSING_TIME, RendererHints.displayValue(Duration.millisToStringRounded()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_RECEIVED, RendererHints.displayValue(ByteSizeStrings.metric()));\n+        RendererHints.register(WebAppServiceConstants.BYTES_SENT, RendererHints.displayValue(ByteSizeStrings.metric()));\n     }\n }",
                "raw_url": "https://github.com/apache/brooklyn-library/raw/113d0392c00cdcb6810bc58780b9b846ad2c4e8a/software/webapp/src/main/java/brooklyn/entity/webapp/WebAppServiceConstants.java",
                "sha": "91a46e2cd91158aeeddcb8d2b2d8b07069aed1a4",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #1474 from ahgittin/couchbase\n\nCouchbase code tidy, nicer way to define sensors, and prevent NPE's, using new `Functionals`",
        "parent": "https://github.com/apache/brooklyn-library/commit/70f2e77d071e6e662b908a67ab8ca3cd498f465a",
        "repo": "brooklyn-library",
        "unit_tests": [
            "DynamicWebAppClusterTest.java",
            "DynamicWebAppFabricTest.java"
        ]
    }
}