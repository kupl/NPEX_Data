[{"commit": "https://github.com/apache/maven-shared-utils/commit/125ddcc18c531f0fa55bb479db89889f3cacf03c", "parent": "https://github.com/apache/maven-shared-utils/commit/76fecb1945c7d8bcbee555b24d4a02f2b5e34f4c", "message": "[MSHARED-434] NPE due to concurrent calls in close() method of StreamFeeder class\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/shared/trunk@1703274 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "maven-shared-utils_1", "file": [{"additions": 1, "raw_url": "https://github.com/apache/maven-shared-utils/raw/125ddcc18c531f0fa55bb479db89889f3cacf03c/src/main/java/org/apache/maven/shared/utils/cli/AbstractStreamHandler.java", "blob_url": "https://github.com/apache/maven-shared-utils/blob/125ddcc18c531f0fa55bb479db89889f3cacf03c/src/main/java/org/apache/maven/shared/utils/cli/AbstractStreamHandler.java", "sha": "979e86151d6232a4019627947cc139850b5c3d70", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/maven-shared-utils/contents/src/main/java/org/apache/maven/shared/utils/cli/AbstractStreamHandler.java?ref=125ddcc18c531f0fa55bb479db89889f3cacf03c", "patch": "@@ -25,7 +25,7 @@\n class AbstractStreamHandler\n     extends Thread\n {\n-    private boolean done;\n+    private volatile boolean done;\n \n     private volatile boolean disabled;\n ", "filename": "src/main/java/org/apache/maven/shared/utils/cli/AbstractStreamHandler.java"}, {"additions": 32, "raw_url": "https://github.com/apache/maven-shared-utils/raw/125ddcc18c531f0fa55bb479db89889f3cacf03c/src/main/java/org/apache/maven/shared/utils/cli/StreamFeeder.java", "blob_url": "https://github.com/apache/maven-shared-utils/blob/125ddcc18c531f0fa55bb479db89889f3cacf03c/src/main/java/org/apache/maven/shared/utils/cli/StreamFeeder.java", "sha": "8409eebb14179bcdc6ef4a87cb34ceb9abe427c8", "changes": 75, "status": "modified", "deletions": 43, "contents_url": "https://api.github.com/repos/apache/maven-shared-utils/contents/src/main/java/org/apache/maven/shared/utils/cli/StreamFeeder.java?ref=125ddcc18c531f0fa55bb479db89889f3cacf03c", "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.concurrent.atomic.AtomicReference;\n \n /**\n  * Read from an InputStream and write the output to an OutputStream.\n@@ -32,10 +33,8 @@\n class StreamFeeder\n     extends AbstractStreamHandler\n {\n-    private InputStream input;\n-\n-    private OutputStream output;\n-\n+    private final AtomicReference<InputStream> input;\n+    private final AtomicReference<OutputStream> output;\n \n     /**\n      * Create a new StreamFeeder\n@@ -45,34 +44,32 @@\n      */\n     public StreamFeeder( InputStream input, OutputStream output )\n     {\n-        this.input = input;\n-\n-        this.output = output;\n+        this.input = new AtomicReference<InputStream>( input );\n+        this.output = new AtomicReference<OutputStream>( output );\n     }\n \n     // ----------------------------------------------------------------------\n     // Runnable implementation\n     // ----------------------------------------------------------------------\n \n+    @Override\n     public void run()\n     {\n         try\n         {\n             feed();\n         }\n-        catch ( Throwable ex )\n+        catch ( Throwable e )\n         {\n-            // Catched everything so the streams will be closed and flagged as done.\n+            // Catch everything so the streams will be closed and flagged as done.\n         }\n         finally\n         {\n             close();\n \n             synchronized ( this )\n             {\n-                setDone();\n-\n-                this.notifyAll();\n+                notifyAll();\n             }\n         }\n     }\n@@ -83,37 +80,30 @@ public void run()\n \n     public void close()\n     {\n-        if ( input != null )\n+        setDone();\n+        final InputStream is = input.getAndSet( null );\n+        if ( is != null )\n         {\n-            synchronized ( input )\n+            try\n             {\n-                try\n-                {\n-                    input.close();\n-                }\n-                catch ( IOException ex )\n-                {\n-                    // ignore\n-                }\n-\n-                input = null;\n+                is.close();\n+            }\n+            catch ( IOException ex )\n+            {\n+                // ignore\n             }\n         }\n \n-        if ( output != null )\n+        final OutputStream os = output.getAndSet( null );\n+        if ( os != null )\n         {\n-            synchronized ( output )\n+            try\n             {\n-                try\n-                {\n-                    output.close();\n-                }\n-                catch ( IOException ex )\n-                {\n-                    // ignore\n-                }\n-\n-                output = null;\n+                os.close();\n+            }\n+            catch ( IOException ex )\n+            {\n+                // ignore\n             }\n         }\n     }\n@@ -122,21 +112,20 @@ public void close()\n     //\n     // ----------------------------------------------------------------------\n \n+    @SuppressWarnings( \"checkstyle:innerassignment\" )\n     private void feed()\n         throws IOException\n     {\n-        int data = input.read();\n-\n-        while ( !isDone() && data != -1 )\n+        InputStream is = input.get();\n+        OutputStream os = output.get();\n+        if ( is != null && os != null )\n         {\n-            synchronized ( output )\n+            for ( int data; !isDone() && ( data = is.read() ) != -1; )\n             {\n                 if ( !isDisabled() )\n                 {\n-                    output.write( data );\n+                    os.write( data );\n                 }\n-\n-                data = input.read();\n             }\n         }\n     }", "filename": "src/main/java/org/apache/maven/shared/utils/cli/StreamFeeder.java"}], "repo": "maven-shared-utils"}]
