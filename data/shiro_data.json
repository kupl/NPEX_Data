[
    {
        "repo": "shiro",
        "message": "[SHIRO-685]\u00a0Potential NullPointerException if PermissionResolver return null/empty string",
        "commit": "https://github.com/apache/shiro/commit/d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022",
        "parent": "https://github.com/apache/shiro/commit/6891aaf74e0b61296e4c47439bf333ada7b0032e",
        "bug_id": "shiro_1",
        "file": [
            {
                "sha": "8f69a2495a363d14bd15af374abf59a3e5cd931a",
                "filename": "core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "blob_url": "https://github.com/apache/shiro/blob/d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "raw_url": "https://github.com/apache/shiro/raw/d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java?ref=d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.shiro.subject.PrincipalCollection;\n import org.apache.shiro.util.CollectionUtils;\n import org.apache.shiro.util.Initializable;\n+import org.apache.shiro.util.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -431,8 +432,10 @@ protected void clearCachedAuthorizationInfo(PrincipalCollection principals) {\n         if (resolver != null && !CollectionUtils.isEmpty(stringPerms)) {\n             perms = new LinkedHashSet<Permission>(stringPerms.size());\n             for (String strPermission : stringPerms) {\n-                Permission permission = resolver.resolvePermission(strPermission);\n-                perms.add(permission);\n+                if (StringUtils.clean(strPermission) != null) {\n+                    Permission permission = resolver.resolvePermission(strPermission);\n+                    perms.add(permission);\n+                }\n             }\n         }\n         return perms;",
                "deletions": 2
            },
            {
                "sha": "c78d66919f4c0cabeb825a8d661529b510d70694",
                "filename": "core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "blob_url": "https://github.com/apache/shiro/blob/d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "raw_url": "https://github.com/apache/shiro/raw/d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "status": "modified",
                "changes": 56,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java?ref=d7d33bfbd0a1d3f41b288d1ae8bf8f6fefe35022",
                "patch": "@@ -18,23 +18,37 @@\n  */\n package org.apache.shiro.realm;\n \n-import org.apache.shiro.authc.*;\n+import java.security.Principal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationInfo;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.SimpleAccount;\n+import org.apache.shiro.authc.SimpleAuthenticationInfo;\n+import org.apache.shiro.authc.UsernamePasswordToken;\n import org.apache.shiro.authc.credential.AllowAllCredentialsMatcher;\n import org.apache.shiro.authz.AuthorizationInfo;\n import org.apache.shiro.authz.Permission;\n import org.apache.shiro.authz.SimpleAuthorizationInfo;\n import org.apache.shiro.authz.UnauthorizedException;\n import org.apache.shiro.authz.permission.RolePermissionResolver;\n import org.apache.shiro.authz.permission.WildcardPermission;\n+import org.apache.shiro.authz.permission.WildcardPermissionResolver;\n import org.apache.shiro.subject.PrincipalCollection;\n import org.apache.shiro.subject.SimplePrincipalCollection;\n import org.junit.After;\n-import static org.junit.Assert.*;\n import org.junit.Before;\n import org.junit.Test;\n \n-import java.security.Principal;\n-import java.util.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n \n /**\n@@ -214,6 +228,40 @@ public void testRealmWithRolePermissionResolver()\n         assertTrue( realm.isPermitted( pCollection, \"other:bar:foo\" ) );\n     }\n \n+    @Test\n+    public void testRealmWithEmptyOrNullPermissions() {\n+        Principal principal = new UsernamePrincipal(\"rolePermResolver\");\n+        PrincipalCollection pCollection = new SimplePrincipalCollection(principal, \"testRealmWithRolePermissionResolver\");\n+\n+        AuthorizingRealm realm = new AllowAllRealm();\n+        realm.setRolePermissionResolver( new RolePermissionResolver()\n+        {\n+            public Collection<Permission> resolvePermissionsInRole( String roleString )\n+            {\n+                Collection<Permission> permissions = new HashSet<Permission>();\n+                if( roleString.equals( ROLE ))\n+                {\n+                    permissions.add( new WildcardPermission( ROLE + \":perm1\" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \":perm2\" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \": \" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \":\\t\" ) );\n+                    permissions.add( new WildcardPermission( \"other:*:foo\" ) );\n+                }\n+                return permissions;\n+            }\n+        });\n+\n+        realm.setPermissionResolver(new WildcardPermissionResolver());\n+        SimpleAuthorizationInfo authorizationInfo = (SimpleAuthorizationInfo) realm.getAuthorizationInfo(pCollection);\n+        assertNotNull(authorizationInfo);\n+        authorizationInfo.addStringPermission(\"\");\n+        authorizationInfo.addStringPermission(\" \");\n+        authorizationInfo.addStringPermission(\"\\t\");\n+        authorizationInfo.addStringPermission(null);\n+        Collection<Permission> permissions = realm.getPermissions(authorizationInfo);\n+        assertEquals(permissions.size(), 4);\n+    }\n+\n     private void assertArrayEquals(boolean[] expected, boolean[] actual) {\n         if (expected.length != actual.length) {\n             fail(\"Expected array of length [\" + expected.length + \"] but received array of length [\" + actual.length + \"]\");",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "Merge pull request #132 from fpapon/SHIRO-685\n\n[SHIRO-685]\u00a0Potential NullPointerException if PermissionResolver retu\u2026",
        "commit": "https://github.com/apache/shiro/commit/9d2908e656456e43485ff89600e8ec3b42d4d354",
        "parent": "https://github.com/apache/shiro/commit/483b9587f3379a4e341f75967a86ebba37e678c8",
        "bug_id": "shiro_2",
        "file": [
            {
                "sha": "8f69a2495a363d14bd15af374abf59a3e5cd931a",
                "filename": "core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "blob_url": "https://github.com/apache/shiro/blob/9d2908e656456e43485ff89600e8ec3b42d4d354/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "raw_url": "https://github.com/apache/shiro/raw/9d2908e656456e43485ff89600e8ec3b42d4d354/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/main/java/org/apache/shiro/realm/AuthorizingRealm.java?ref=9d2908e656456e43485ff89600e8ec3b42d4d354",
                "patch": "@@ -26,6 +26,7 @@\n import org.apache.shiro.subject.PrincipalCollection;\n import org.apache.shiro.util.CollectionUtils;\n import org.apache.shiro.util.Initializable;\n+import org.apache.shiro.util.StringUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -431,8 +432,10 @@ protected void clearCachedAuthorizationInfo(PrincipalCollection principals) {\n         if (resolver != null && !CollectionUtils.isEmpty(stringPerms)) {\n             perms = new LinkedHashSet<Permission>(stringPerms.size());\n             for (String strPermission : stringPerms) {\n-                Permission permission = resolver.resolvePermission(strPermission);\n-                perms.add(permission);\n+                if (StringUtils.clean(strPermission) != null) {\n+                    Permission permission = resolver.resolvePermission(strPermission);\n+                    perms.add(permission);\n+                }\n             }\n         }\n         return perms;",
                "deletions": 2
            },
            {
                "sha": "c78d66919f4c0cabeb825a8d661529b510d70694",
                "filename": "core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "blob_url": "https://github.com/apache/shiro/blob/9d2908e656456e43485ff89600e8ec3b42d4d354/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "raw_url": "https://github.com/apache/shiro/raw/9d2908e656456e43485ff89600e8ec3b42d4d354/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java",
                "status": "modified",
                "changes": 56,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/test/java/org/apache/shiro/realm/AuthorizingRealmTest.java?ref=9d2908e656456e43485ff89600e8ec3b42d4d354",
                "patch": "@@ -18,23 +18,37 @@\n  */\n package org.apache.shiro.realm;\n \n-import org.apache.shiro.authc.*;\n+import java.security.Principal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.shiro.authc.AuthenticationException;\n+import org.apache.shiro.authc.AuthenticationInfo;\n+import org.apache.shiro.authc.AuthenticationToken;\n+import org.apache.shiro.authc.SimpleAccount;\n+import org.apache.shiro.authc.SimpleAuthenticationInfo;\n+import org.apache.shiro.authc.UsernamePasswordToken;\n import org.apache.shiro.authc.credential.AllowAllCredentialsMatcher;\n import org.apache.shiro.authz.AuthorizationInfo;\n import org.apache.shiro.authz.Permission;\n import org.apache.shiro.authz.SimpleAuthorizationInfo;\n import org.apache.shiro.authz.UnauthorizedException;\n import org.apache.shiro.authz.permission.RolePermissionResolver;\n import org.apache.shiro.authz.permission.WildcardPermission;\n+import org.apache.shiro.authz.permission.WildcardPermissionResolver;\n import org.apache.shiro.subject.PrincipalCollection;\n import org.apache.shiro.subject.SimplePrincipalCollection;\n import org.junit.After;\n-import static org.junit.Assert.*;\n import org.junit.Before;\n import org.junit.Test;\n \n-import java.security.Principal;\n-import java.util.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n \n /**\n@@ -214,6 +228,40 @@ public void testRealmWithRolePermissionResolver()\n         assertTrue( realm.isPermitted( pCollection, \"other:bar:foo\" ) );\n     }\n \n+    @Test\n+    public void testRealmWithEmptyOrNullPermissions() {\n+        Principal principal = new UsernamePrincipal(\"rolePermResolver\");\n+        PrincipalCollection pCollection = new SimplePrincipalCollection(principal, \"testRealmWithRolePermissionResolver\");\n+\n+        AuthorizingRealm realm = new AllowAllRealm();\n+        realm.setRolePermissionResolver( new RolePermissionResolver()\n+        {\n+            public Collection<Permission> resolvePermissionsInRole( String roleString )\n+            {\n+                Collection<Permission> permissions = new HashSet<Permission>();\n+                if( roleString.equals( ROLE ))\n+                {\n+                    permissions.add( new WildcardPermission( ROLE + \":perm1\" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \":perm2\" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \": \" ) );\n+                    permissions.add( new WildcardPermission( ROLE + \":\\t\" ) );\n+                    permissions.add( new WildcardPermission( \"other:*:foo\" ) );\n+                }\n+                return permissions;\n+            }\n+        });\n+\n+        realm.setPermissionResolver(new WildcardPermissionResolver());\n+        SimpleAuthorizationInfo authorizationInfo = (SimpleAuthorizationInfo) realm.getAuthorizationInfo(pCollection);\n+        assertNotNull(authorizationInfo);\n+        authorizationInfo.addStringPermission(\"\");\n+        authorizationInfo.addStringPermission(\" \");\n+        authorizationInfo.addStringPermission(\"\\t\");\n+        authorizationInfo.addStringPermission(null);\n+        Collection<Permission> permissions = realm.getPermissions(authorizationInfo);\n+        assertEquals(permissions.size(), 4);\n+    }\n+\n     private void assertArrayEquals(boolean[] expected, boolean[] actual) {\n         if (expected.length != actual.length) {\n             fail(\"Expected array of length [\" + expected.length + \"] but received array of length [\" + actual.length + \"]\");",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "SHIRO-473 Fix NPE thrown from DefaultAnnotationResolver.getAnnotation",
        "commit": "https://github.com/apache/shiro/commit/3ca513f1f2f0472251b73c16c1507034a7028b24",
        "parent": "https://github.com/apache/shiro/commit/08a860f5ac0fcf9c64309981bdac6325a3360876",
        "bug_id": "shiro_3",
        "file": [
            {
                "sha": "d7fd4aec7a22e9c0196009b28b98d94f28fb2a3b",
                "filename": "core/src/main/java/org/apache/shiro/aop/DefaultAnnotationResolver.java",
                "blob_url": "https://github.com/apache/shiro/blob/3ca513f1f2f0472251b73c16c1507034a7028b24/core/src/main/java/org/apache/shiro/aop/DefaultAnnotationResolver.java",
                "raw_url": "https://github.com/apache/shiro/raw/3ca513f1f2f0472251b73c16c1507034a7028b24/core/src/main/java/org/apache/shiro/aop/DefaultAnnotationResolver.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/main/java/org/apache/shiro/aop/DefaultAnnotationResolver.java?ref=3ca513f1f2f0472251b73c16c1507034a7028b24",
                "patch": "@@ -59,6 +59,11 @@ public Annotation getAnnotation(MethodInvocation mi, Class<? extends Annotation>\n \r\n         }\r\n         Annotation annotation = m.getAnnotation(clazz);\r\n-        return annotation == null ? mi.getThis().getClass().getAnnotation(clazz) : annotation;\r\n+        if (annotation == null ) {\r\n+            Object miThis = mi.getThis();\r\n+            //SHIRO-473 - miThis could be null for static methods, just return null\r\n+            annotation = miThis != null ? miThis.getClass().getAnnotation(clazz) : null;\r\n+        }\r\n+        return annotation;\r\n     }\r\n }\r",
                "deletions": 1
            },
            {
                "sha": "1b2916c5e48b95b8db702462295afa49f11e443a",
                "filename": "core/src/test/java/org/apache/shiro/aop/AnnotationResolverTest.java",
                "blob_url": "https://github.com/apache/shiro/blob/3ca513f1f2f0472251b73c16c1507034a7028b24/core/src/test/java/org/apache/shiro/aop/AnnotationResolverTest.java",
                "raw_url": "https://github.com/apache/shiro/raw/3ca513f1f2f0472251b73c16c1507034a7028b24/core/src/test/java/org/apache/shiro/aop/AnnotationResolverTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/core/src/test/java/org/apache/shiro/aop/AnnotationResolverTest.java?ref=3ca513f1f2f0472251b73c16c1507034a7028b24",
                "patch": "@@ -60,5 +60,15 @@ public void testAnnotationFoundFromMethod() throws SecurityException, NoSuchMeth\n         replay(methodInvocation);\r\n \tassertNotNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));\r\n     }\r\n+\r\n+    @Test\r\n+    public void testNullMethodInvocation() throws SecurityException, NoSuchMethodException {\r\n+        MethodInvocation methodInvocation = createMock(MethodInvocation.class);\r\n+        Method method = MyFixture.class.getDeclaredMethod(\"operateThis\");\r\n+        expect(methodInvocation.getMethod()).andReturn(method);\r\n+        expect(methodInvocation.getThis()).andReturn(null);\r\n+        replay(methodInvocation);\r\n+        assertNull(annotationResolver.getAnnotation(methodInvocation, RequiresUser.class));\r\n+    }\r\n }\r\n \r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "JSEC-122 - fixed NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@711065 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/8b4324cb359375f8b5b9538a7b5021a39c9d0873",
        "parent": "https://github.com/apache/shiro/commit/8e2b39e9c73a8215520688017acd77cbe2f47dbc",
        "bug_id": "shiro_4",
        "file": [
            {
                "sha": "0a442cb52c518edbafc83db955f2bc25c859beed",
                "filename": "src/org/jsecurity/authc/SimpleAuthenticationInfo.java",
                "blob_url": "https://github.com/apache/shiro/blob/8b4324cb359375f8b5b9538a7b5021a39c9d0873/src/org/jsecurity/authc/SimpleAuthenticationInfo.java",
                "raw_url": "https://github.com/apache/shiro/raw/8b4324cb359375f8b5b9538a7b5021a39c9d0873/src/org/jsecurity/authc/SimpleAuthenticationInfo.java",
                "status": "modified",
                "changes": 33,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/authc/SimpleAuthenticationInfo.java?ref=8b4324cb359375f8b5b9538a7b5021a39c9d0873",
                "patch": "@@ -70,38 +70,43 @@ public void setCredentials(Object credentials) {\n \n     @SuppressWarnings(\"unchecked\")\n     public void merge(AuthenticationInfo info) {\n-        if (info == null || info.getPrincipals() == null) {\n+        if (info == null || info.getPrincipals() == null || info.getPrincipals().isEmpty()) {\n             return;\n         }\n \n         if (this.principals == null) {\n-            this.principals = new SimplePrincipalCollection();\n-        }\n-\n-        if (this.principals instanceof MutablePrincipalCollection) {\n-            ((MutablePrincipalCollection) this.principals).addAll(info.getPrincipals());\n+            this.principals = info.getPrincipals();\n         } else {\n-            throw new IllegalStateException(\"Attempt to merge authentication info, but PrincipalCollection is not an \" +\n-                    \"instance of MutablePrincipalCollection.\");\n+            if (this.principals instanceof MutablePrincipalCollection) {\n+                ((MutablePrincipalCollection) this.principals).addAll(info.getPrincipals());\n+            } else {\n+                this.principals = new SimplePrincipalCollection(this.principals);\n+            }\n         }\n \n         Object thisCredentials = getCredentials();\n         Object otherCredentials = info.getCredentials();\n \n+        if (otherCredentials == null) {\n+            return;\n+        }\n+\n+        if (thisCredentials == null) {\n+            this.credentials = otherCredentials;\n+            return;\n+        }\n+\n         if (!(thisCredentials instanceof Collection)) {\n             Set newSet = new HashSet();\n-            if (thisCredentials != null) {\n-                newSet.add(thisCredentials);\n-                setCredentials(newSet);\n-            }\n+            newSet.add(thisCredentials);\n+            setCredentials(newSet);\n         }\n \n         // At this point, the credentials should be a collection\n         Collection credentialCollection = (Collection) getCredentials();\n         if (otherCredentials instanceof Collection) {\n             credentialCollection.addAll((Collection) otherCredentials);\n-\n-        } else if (otherCredentials != null) {\n+        } else {\n             credentialCollection.add(otherCredentials);\n         }\n     }",
                "deletions": 14
            },
            {
                "sha": "2d449c80dbf52face34d4af5ae7c4fabe3427c3e",
                "filename": "test/org/jsecurity/authc/SimpleAuthenticationInfoTest.java",
                "blob_url": "https://github.com/apache/shiro/blob/8b4324cb359375f8b5b9538a7b5021a39c9d0873/test/org/jsecurity/authc/SimpleAuthenticationInfoTest.java",
                "raw_url": "https://github.com/apache/shiro/raw/8b4324cb359375f8b5b9538a7b5021a39c9d0873/test/org/jsecurity/authc/SimpleAuthenticationInfoTest.java",
                "status": "added",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/test/org/jsecurity/authc/SimpleAuthenticationInfoTest.java?ref=8b4324cb359375f8b5b9538a7b5021a39c9d0873",
                "patch": "@@ -0,0 +1,45 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.jsecurity.authc;\r\n+\r\n+import org.junit.Test;\r\n+\r\n+/**\r\n+ * @author Les Hazlewood\r\n+ * @since 0.9\r\n+ */\r\n+public class SimpleAuthenticationInfoTest {\r\n+\r\n+    @Test\r\n+    public void testMergeWithEmptyInstances() {\r\n+        SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n+        SimpleAuthenticationInfo local = new SimpleAuthenticationInfo();\r\n+        aggregate.merge(local);\r\n+    }\r\n+\r\n+    /**\r\n+     * Verifies fix for JSEC-122\r\n+     */\r\n+    @Test\r\n+    public void testMergeWithAggregateNullCredentials() {\r\n+        SimpleAuthenticationInfo aggregate = new SimpleAuthenticationInfo();\r\n+        SimpleAuthenticationInfo local = new SimpleAuthenticationInfo(\"username\", \"password\", \"testRealm\");\r\n+        aggregate.merge(local);\r\n+    }\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "adjusted for potential NPE, updated JavaDoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710985 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/316d6b36db1e16d83e2b80fd07a40969bd1ccede",
        "parent": "https://github.com/apache/shiro/commit/cc8fc6dc4d44e450b27ce9a80f684d4f1611fe1b",
        "bug_id": "shiro_5",
        "file": [
            {
                "sha": "a5e1ee841265bdaa3846db62819058068bbca89b",
                "filename": "src/org/jsecurity/util/ClassUtils.java",
                "blob_url": "https://github.com/apache/shiro/blob/316d6b36db1e16d83e2b80fd07a40969bd1ccede/src/org/jsecurity/util/ClassUtils.java",
                "raw_url": "https://github.com/apache/shiro/raw/316d6b36db1e16d83e2b80fd07a40969bd1ccede/src/org/jsecurity/util/ClassUtils.java",
                "status": "modified",
                "changes": 41,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/util/ClassUtils.java?ref=316d6b36db1e16d83e2b80fd07a40969bd1ccede",
                "patch": "@@ -74,37 +74,54 @@ public static InputStream getResourceAsStream(String name) {\n         return is;\n     }\n \n-    public static Class forName(String fullyQualified) throws UnknownClassException {\n+    /**\n+     * Attempts to load the specified class name from the current thread's\n+     * {@link Thread#getContextClassLoader() context class loader}, then the\n+     * current ClassLoader (<code>ClassUtils.class.getClassLoader()</code>), then the system/application\n+     * ClassLoader (<code>ClassLoader.getSystemClassLoader()</code>, in that order.  If any of them cannot locate\n+     * the specified class, an <code>UnknownClassException</code> is thrown (our RuntimeException equivalent of\n+     * the JRE's <code>ClassNotFoundException</code>.\n+     *\n+     * @param fqcn the fully qualified class name to load\n+     * @return the located class\n+     * @throws UnknownClassException if the class cannot be found.\n+     */\n+    public static Class forName(String fqcn) throws UnknownClassException {\n         Class clazz = null;\n         ClassLoader cl = Thread.currentThread().getContextClassLoader();\n-        try {\n-            clazz = cl.loadClass(fullyQualified);\n-        } catch (ClassNotFoundException e) {\n-            if (log.isTraceEnabled()) {\n-                log.trace(\"Unable to load class named [\" + fullyQualified + \"] from the thread context ClassLoader.  \" +\n-                        \"Trying the current ClassLoader...\");\n+        if (cl != null) {\n+            try {\n+                clazz = cl.loadClass(fqcn);\n+            } catch (ClassNotFoundException e) {\n+                if (log.isTraceEnabled()) {\n+                    log.trace(\"Unable to load class named [\" + fqcn +\n+                            \"] from the thread context ClassLoader.  Trying the current ClassLoader...\");\n+                }\n             }\n+        }\n+        if (clazz == null) {\n             cl = ClassUtils.class.getClassLoader();\n             try {\n-                clazz = cl.loadClass(fullyQualified);\n+                clazz = cl.loadClass(fqcn);\n             } catch (ClassNotFoundException e1) {\n                 if (log.isTraceEnabled()) {\n-                    log.trace(\"Unable to load class named [\" + fullyQualified + \"] from the current ClassLoader.  \" +\n+                    log.trace(\"Unable to load class named [\" + fqcn + \"] from the current ClassLoader.  \" +\n                             \"Trying the system/application ClassLoader...\");\n                 }\n                 cl = ClassLoader.getSystemClassLoader();\n                 try {\n-                    clazz = cl.loadClass(fullyQualified);\n+                    clazz = cl.loadClass(fqcn);\n                 } catch (ClassNotFoundException ignored) {\n                     if (log.isTraceEnabled()) {\n-                        log.trace(\"Unable to load class named [\" + fullyQualified + \"] from the \" +\n+                        log.trace(\"Unable to load class named [\" + fqcn + \"] from the \" +\n                                 \"system/application ClassLoader.\");\n                     }\n                 }\n             }\n         }\n+\n         if (clazz == null) {\n-            String msg = \"Unable to load class named [\" + fullyQualified + \"] from the thread context, current, or \" +\n+            String msg = \"Unable to load class named [\" + fqcn + \"] from the thread context, current, or \" +\n                     \"system/application ClassLoaders.  All heuristics have been exausted.  Class could not be found.\";\n             throw new UnknownClassException(msg);\n         }",
                "deletions": 12
            },
            {
                "sha": "7ba18fca2e4c1de259c53072cbd5dcebdf134cc0",
                "filename": "src/org/jsecurity/util/UnknownClassException.java",
                "blob_url": "https://github.com/apache/shiro/blob/316d6b36db1e16d83e2b80fd07a40969bd1ccede/src/org/jsecurity/util/UnknownClassException.java",
                "raw_url": "https://github.com/apache/shiro/raw/316d6b36db1e16d83e2b80fd07a40969bd1ccede/src/org/jsecurity/util/UnknownClassException.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/util/UnknownClassException.java?ref=316d6b36db1e16d83e2b80fd07a40969bd1ccede",
                "patch": "@@ -21,6 +21,9 @@\n import org.jsecurity.JSecurityException;\n \n /**\n+ * The JSecurity framework's <code>RuntimeException</code> equivalent of the JDK's\n+ * <code>ClassNotFoundException</code>, to maintain a RuntimeException paradigm.\n+ *\n  * @author Les Hazlewood\n  * @since 0.1\n  */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "enabled one more username null check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710952 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/1425926a0d032d6f3153db87d2709a371bec110a",
        "parent": "https://github.com/apache/shiro/commit/06d61339196a57e30f60ba10e36d1aa96d20f0dc",
        "bug_id": "shiro_6",
        "file": [
            {
                "sha": "7d03db9a2c050d90f71b4c9ebb08cfee25944f7c",
                "filename": "src/org/jsecurity/realm/ldap/DefaultLdapContextFactory.java",
                "blob_url": "https://github.com/apache/shiro/blob/1425926a0d032d6f3153db87d2709a371bec110a/src/org/jsecurity/realm/ldap/DefaultLdapContextFactory.java",
                "raw_url": "https://github.com/apache/shiro/raw/1425926a0d032d6f3153db87d2709a371bec110a/src/org/jsecurity/realm/ldap/DefaultLdapContextFactory.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/realm/ldap/DefaultLdapContextFactory.java?ref=1425926a0d032d6f3153db87d2709a371bec110a",
                "patch": "@@ -223,7 +223,7 @@ public LdapContext getLdapContext(String username, String password) throws Namin\n         env.put(Context.REFERRAL, referral);\n \n         // Only pool connections for system contexts\n-        if (usePooling && username.equals(systemUsername)) {\n+        if (usePooling && username != null && username.equals(systemUsername)) {\n             // Enable connection pooling\n             env.put(SUN_CONNECTION_POOLING_PROPERTY, \"true\");\n         }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "Fixed NPE and classpath dependency for sample app\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710924 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/55857926e40314683a00bf6108f714c66a1d01d5",
        "parent": "https://github.com/apache/shiro/commit/c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
        "bug_id": "shiro_7",
        "file": [
            {
                "sha": "f9bfcb413e9d7ec5d1dbd04da23264a5abeb4ee0",
                "filename": "samples/quickstart/WEB-INF/web.xml",
                "blob_url": "https://github.com/apache/shiro/blob/55857926e40314683a00bf6108f714c66a1d01d5/samples/quickstart/WEB-INF/web.xml",
                "raw_url": "https://github.com/apache/shiro/raw/55857926e40314683a00bf6108f714c66a1d01d5/samples/quickstart/WEB-INF/web.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/samples/quickstart/WEB-INF/web.xml?ref=55857926e40314683a00bf6108f714c66a1d01d5",
                "patch": "@@ -8,7 +8,7 @@\n     <filter>\n         <filter-name>JSecurityFilter</filter-name>\n         <filter-class>org.jsecurity.web.servlet.JSecurityFilter</filter-class>\n-        <!-- <init-param><param-name>config</param-name><param-value>\n+        <init-param><param-name>config</param-name><param-value>\n \n             # The JSecurityFilter configuration is very powerful and flexible, while still remaining succinct.\n             # Please read the comprehensive example, with full comments and explanations, in the JavaDoc:\n@@ -21,7 +21,7 @@\n             [urls]\n             /account/** = authc\n             /remoting/** = authc, roles[b2bClient], perms[remote:invoke:\"lan,wan\"]\n-        </param-value></init-param> -->\n+        </param-value></init-param>\n     </filter>\n \n     <filter-mapping>",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "Fixed NPE and classpath dependency for sample app\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710923 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
        "parent": "https://github.com/apache/shiro/commit/7cd6d467881a10461e3cbdfaf50a54207b0458e6",
        "bug_id": "shiro_8",
        "file": [
            {
                "sha": "5f13b556c342b510fc628a0882eb88cda3906569",
                "filename": "ivy.xml",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/ivy.xml",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/ivy.xml",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/ivy.xml?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -33,6 +33,7 @@\n         <dependency org=\"net.sourceforge.retroweaver\" name=\"retroweaver\" rev=\"2.0.5\" conf=\"compile\"/>\n         <dependency org=\"net.sourceforge.retroweaver\" name=\"retroweaver-rt\" rev=\"2.0.5\" conf=\"compile\"/>        \n         <dependency org=\"net.sf.ehcache\" name=\"ehcache\" rev=\"1.4.1\" transitive=\"false\" conf=\"compile,samples\"/>\n+        <dependency org=\"backport-util-concurrent\" name=\"backport-util-concurrent\" rev=\"3.1\" transitive=\"false\" conf=\"samples\"/>\n         <dependency org=\"quartz\" name=\"quartz\" rev=\"1.5.2\" transitive=\"false\" conf=\"compile\"/>\n         <dependency org=\"org.springframework\" name=\"spring\" rev=\"2.5.1\" transitive=\"false\" conf=\"compile,samples\"/>\n         <dependency org=\"org.springframework\" name=\"spring-webmvc\" rev=\"2.5.1\" transitive=\"false\" conf=\"samples\"/>",
                "deletions": 0
            },
            {
                "sha": "733c9e32b1f28bbeab91d765b2c5c677545599b6",
                "filename": "samples/quickstart/WEB-INF/web.xml",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/samples/quickstart/WEB-INF/web.xml",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/samples/quickstart/WEB-INF/web.xml",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/samples/quickstart/WEB-INF/web.xml?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -8,7 +8,7 @@\n     <filter>\n         <filter-name>JSecurityFilter</filter-name>\n         <filter-class>org.jsecurity.web.servlet.JSecurityFilter</filter-class>\n-        <init-param><param-name>config</param-name><param-value>\n+        <!-- <init-param><param-name>config</param-name><param-value>\n \n             # The JSecurityFilter configuration is very powerful and flexible, while still remaining succinct.\n             # Please read the comprehensive example, with full comments and explanations, in the JavaDoc:\n@@ -21,7 +21,7 @@\n             [urls]\n             /account/** = authc\n             /remoting/** = authc, roles[b2bClient], perms[remote:invoke:\"lan,wan\"]\n-        </param-value></init-param>\n+        </param-value></init-param> -->\n     </filter>\n \n     <filter-mapping>",
                "deletions": 2
            },
            {
                "sha": "238cfe867500fefc96a4599048fc3597287ff4e3",
                "filename": "src/org/jsecurity/config/ReflectionBuilder.java",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/config/ReflectionBuilder.java",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/config/ReflectionBuilder.java",
                "status": "modified",
                "changes": 32,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/config/ReflectionBuilder.java?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -27,18 +27,20 @@\n import java.util.Scanner;\r\n \r\n /**\r\n- * @since 0.9\r\n  * @author Les Hazlewood\r\n+ * @since 0.9\r\n  */\r\n public class ReflectionBuilder {\r\n \r\n     protected transient final Log log = LogFactory.getLog(getClass());\r\n \r\n-    protected Map<String,Object> objects = new LinkedHashMap<String,Object>();\r\n+    protected Map<String, Object> objects;\r\n \r\n-    public ReflectionBuilder(){}\r\n+    public ReflectionBuilder() {\r\n+        setObjects(new LinkedHashMap<String, Object>());\r\n+    }\r\n \r\n-    public ReflectionBuilder( Map<String,Object> defaults ) {\r\n+    public ReflectionBuilder(Map<String, Object> defaults) {\r\n         setObjects(defaults);\r\n     }\r\n \r\n@@ -50,7 +52,7 @@ public void setObjects(Map<String, Object> objects) {\n         this.objects = objects;\r\n     }\r\n \r\n-    private static String[] splitKeyValue( String line ) {\r\n+    private static String[] splitKeyValue(String line) {\r\n         try {\r\n             return StringUtils.splitKeyValue(line);\r\n         } catch (ParseException e) {\r\n@@ -93,12 +95,11 @@ public void setObjects(Map<String, Object> objects) {\n         return objects;\r\n     }\r\n \r\n-    public Map<String,Object> buildObjects( Map<String,String> kvPairs ) {\r\n-        if ( kvPairs == null || kvPairs.isEmpty() ) {\r\n-            return null;\r\n-        }\r\n-        for( Map.Entry<String,String> entry : kvPairs.entrySet() ) {\r\n-            applyProperty(entry.getKey(), entry.getValue(), objects );\r\n+    public Map<String, Object> buildObjects(Map<String, String> kvPairs) {\r\n+        if (kvPairs != null && !kvPairs.isEmpty()) {\r\n+            for (Map.Entry<String, String> entry : kvPairs.entrySet()) {\r\n+                applyProperty(entry.getKey(), entry.getValue(), objects);\r\n+            }\r\n         }\r\n \r\n         return objects;\r\n@@ -152,12 +153,13 @@ public void applyProperty(Object object, String propertyName, String value) {\n         } catch (Exception e) {\r\n             //perhaps the value was a reference to an object already defined:\r\n \r\n-            Object o = ( objects != null && !objects.isEmpty() ? objects.get(value) : null );\r\n-            if ( o != null ) {\r\n+            Object o = (objects != null && !objects.isEmpty() ? objects.get(value) : null);\r\n+            if (o != null) {\r\n                 try {\r\n-                    BeanUtils.setProperty(object, propertyName, o );\r\n+                    BeanUtils.setProperty(object, propertyName, o);\r\n                     return;\r\n-                } catch (Exception ignored) {}\r\n+                } catch (Exception ignored) {\r\n+                }\r\n             }\r\n \r\n             String msg = \"Unable to set property [\" + propertyName + \"] with value [\" + value + \"]\";\r",
                "deletions": 15
            },
            {
                "sha": "8b80a4c188b287a7767792b92f68e0b676b3ded8",
                "filename": "src/org/jsecurity/crypto/hash/AbstractHash.java",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/crypto/hash/AbstractHash.java",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/crypto/hash/AbstractHash.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/crypto/hash/AbstractHash.java?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -32,7 +32,7 @@\n  * can be useful.\n  * \n  * <p>This class and its subclasses support hashing with additional capabilities of salting and multiple iterations via\n- * overloaded constructors</tt>.\n+ * overloaded constructors</p>.\n  *\n  * @author Les Hazlewood\n  * @since 0.9",
                "deletions": 1
            },
            {
                "sha": "7af2bc89d8260fc0e6c408d0a36d0c5d807d8f9d",
                "filename": "src/org/jsecurity/io/IniResource.java",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/io/IniResource.java",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/io/IniResource.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/io/IniResource.java?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -38,26 +38,28 @@\n \r\n     protected Map<String, Map<String,String>> sections = new LinkedHashMap<String, Map<String,String>>();\r\n \r\n-    public IniResource(){}\r\n+    public IniResource(){\r\n+    }\r\n \r\n     public IniResource(String configBodyOrResourcePath) {\r\n-        super(configBodyOrResourcePath);\r\n+        load(configBodyOrResourcePath);\r\n     }\r\n \r\n     public IniResource(String configBodyOrResourcePath, String charsetName) {\r\n-        super(configBodyOrResourcePath, charsetName);\r\n+        setCharsetName(charsetName);\r\n+        load( configBodyOrResourcePath );\r\n     }\r\n \r\n     public IniResource(InputStream is) {\r\n-        super(is);\r\n+        load(is);\r\n     }\r\n \r\n     public IniResource(Reader r) {\r\n-        super(r);\r\n+        load(r);\r\n     }\r\n \r\n     public IniResource(Scanner s) {\r\n-        super(s);\r\n+        load(s);\r\n     }\r\n \r\n     public Map<String, Map<String, String>> getSections() {\r",
                "deletions": 6
            },
            {
                "sha": "cf7ca1ca590f13b3d1edb578aa93f7270cd6a400",
                "filename": "src/org/jsecurity/io/TextResource.java",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/io/TextResource.java",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/src/org/jsecurity/io/TextResource.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/io/TextResource.java?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -64,8 +64,8 @@ public void load( String configBodyOrResourcePath ) {\n         try {\r\n             super.load(configBodyOrResourcePath);\r\n         } catch ( Exception e ) {\r\n-            if ( log.isDebugEnabled() ) {\r\n-                log.debug( \"Unable to load text resource from the string argument.  Attempting to use the string \" +\r\n+            if ( log.isTraceEnabled() ) {\r\n+                log.trace( \"Unable to load text resource from the string argument.  Attempting to use the string \" +\r\n                         \"argument as the text resource itself...\", e );\r\n             }\r\n             StringReader sr = new StringReader(configBodyOrResourcePath);\r",
                "deletions": 2
            },
            {
                "sha": "869968fa862a9f4b2a376f58b8c5a6b5d91fd911",
                "filename": "test/org/jsecurity/web/servlet/JSecurityFilterTest.java",
                "blob_url": "https://github.com/apache/shiro/blob/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/test/org/jsecurity/web/servlet/JSecurityFilterTest.java",
                "raw_url": "https://github.com/apache/shiro/raw/c6fb056edc840bda4fb3a3bf219de87439b2b3d6/test/org/jsecurity/web/servlet/JSecurityFilterTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/test/org/jsecurity/web/servlet/JSecurityFilterTest.java?ref=c6fb056edc840bda4fb3a3bf219de87439b2b3d6",
                "patch": "@@ -17,7 +17,6 @@\n \n import static org.easymock.EasyMock.*;\n import org.jsecurity.mgt.SecurityManager;\n-import org.junit.Before;\n import org.junit.Test;\n \n import javax.servlet.FilterConfig;\n@@ -33,16 +32,14 @@\n     private FilterConfig mockFilterConfig;\n     private ServletContext mockServletContext;\n \n-    @Before\n-    public void setUp() throws Exception {\n+    protected void setUp(String config) {\n         mockFilterConfig = createMock(FilterConfig.class);\n         mockServletContext = createMock(ServletContext.class);\n \n         expect(mockFilterConfig.getServletContext()).andReturn(mockServletContext);\n         expect(mockFilterConfig.getInitParameter(JSecurityFilter.CONFIG_CLASS_NAME_INIT_PARAM_NAME)).andReturn(null).once();\n-        expect(mockFilterConfig.getInitParameter(JSecurityFilter.CONFIG_INIT_PARAM_NAME)).andReturn(null).once();\n+        expect(mockFilterConfig.getInitParameter(JSecurityFilter.CONFIG_INIT_PARAM_NAME)).andReturn(config).once();\n \n-        //expect(mockServletContext.getAttribute(SecurityManagerListener.SECURITY_MANAGER_CONTEXT_KEY)).andReturn(null).atLeastOnce();\n         mockServletContext.setAttribute(eq(SecurityManagerListener.SECURITY_MANAGER_CONTEXT_KEY),isA(SecurityManager.class));\n     }\n \n@@ -74,6 +71,14 @@ protected void replayAndVerify() throws Exception {\n \n     @Test\n     public void testDefaultConfig() throws Exception {\n+        setUp(null);\n+        replayAndVerify();\n+    }\n+\n+    @Test\n+    public void testSimpleConfig() throws Exception {\n+        setUp(\"[interceptors]\\n\" +\n+                \"authc.successUrl = /index.jsp\");\n         replayAndVerify();\n     }\n }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "fixed some NPEs and added logging\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710579 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/caa9b27b6b0ef84f74c09c226167b0044546126b",
        "parent": "https://github.com/apache/shiro/commit/e521b8a90422a1d0c6886949146f68d5ada422af",
        "bug_id": "shiro_9",
        "file": [
            {
                "sha": "1e348fe477f04655926e1b10d27aca223c070777",
                "filename": "src/org/jsecurity/context/support/DelegatingSecurityContext.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/context/support/DelegatingSecurityContext.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/context/support/DelegatingSecurityContext.java",
                "status": "modified",
                "changes": 15,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/context/support/DelegatingSecurityContext.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -63,7 +63,7 @@\n  */\n public class DelegatingSecurityContext implements SecurityContext {\n \n-    protected List<Principal> principals;\n+    protected List<Principal> principals = new ArrayList<Principal>();\n     protected boolean authenticated;\n     protected InetAddress inetAddress = null;\n     protected Session session = null;\n@@ -79,14 +79,21 @@\n     }\n \n     private static List<Principal> toList( List<Principal> ps ) {\n-        List<Principal> principals = new ArrayList<Principal>( ps != null ? ps.size() : 1 );\n-        principals.addAll( ps );\n+        List<Principal> principals = null;\n+        if ( ps == null ) {\n+            principals = new ArrayList<Principal>();\n+        } else if ( ps.isEmpty() ) {\n+            principals = ps;\n+        } else {\n+            principals = new ArrayList<Principal>( ps.size() );\n+            principals.addAll( ps );\n+        }\n         return principals;\n     }\n \n     public DelegatingSecurityContext( Principal principal, boolean authenticated, InetAddress inetAddress,\n                                       Session session, SecurityManager securityManager ) {\n-        this( toList( principal ), authenticated, inetAddress, session, securityManager );\n+        this( toList( principal), authenticated, inetAddress, session, securityManager );\n     }\n \n     public DelegatingSecurityContext( List<Principal> principals, boolean authenticated, InetAddress inetAddress,",
                "deletions": 4
            },
            {
                "sha": "c2ab980a5dc8696ffb397cb23e6037a30f515c26",
                "filename": "src/org/jsecurity/session/support/quartz/QuartzSessionValidationScheduler.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/session/support/quartz/QuartzSessionValidationScheduler.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/session/support/quartz/QuartzSessionValidationScheduler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/session/support/quartz/QuartzSessionValidationScheduler.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -202,8 +202,8 @@ public void stopSessionValidation() {\n                 log.debug( \"Quartz session validation job stopped successfully.\" );\n             }\n         } catch ( SchedulerException e ) {\n-            if ( log.isInfoEnabled() ) {\n-                log.info( \"Could not cleanly remove SessionValidationJob from Quartz scheduler.  \" +\n+            if ( log.isDebugEnabled() ) {\n+                log.debug( \"Could not cleanly remove SessionValidationJob from Quartz scheduler.  \" +\n                     \"Ignoring and stopping.\", e );\n             }\n         }",
                "deletions": 2
            },
            {
                "sha": "17822d1271307469eb99c068bfb31996988cdc96",
                "filename": "src/org/jsecurity/web/servlet/WebInterceptorFilter.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/servlet/WebInterceptorFilter.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/servlet/WebInterceptorFilter.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/servlet/WebInterceptorFilter.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -75,6 +75,9 @@ public void init() throws Exception {\n      * @throws Exception in the case of an error\n      */\n     protected void onInit() throws Exception {\n+        if ( log.isTraceEnabled() ) {\n+            log.trace( \"onInit called.\" );\n+        }\n     }\n \n     /**\n@@ -95,18 +98,33 @@ public void doFilterInternal( HttpServletRequest request, HttpServletResponse re\n         try {\n \n             boolean continueChain = interceptor.preHandle( request, response );\n+            if ( log.isTraceEnabled() ) {\n+                log.trace( \"Invked interceptor.preHandle method.  Continuing chain?: [\" + continueChain + \"]\" );\n+            }\n \n             if ( continueChain ) {\n                 chain.doFilter( request, response );\n+                if ( log.isTraceEnabled() ) {\n+                    log.trace( \"Completed chain execution.\" );\n+                }\n             }\n \n             interceptor.postHandle( request, response );\n+            if ( log.isTraceEnabled() ) {\n+                log.trace( \"Successfully invoked interceptor.postHandle method\" );\n+            }\n \n         } catch ( Exception e ) {\n             exception = e;\n+            if ( log.isTraceEnabled() ) {\n+                log.trace( \"Encountered exception in interceptor method delegation.\", exception );\n+            }\n         } finally {\n             try {\n                 interceptor.afterCompletion( request, response, exception );\n+                if ( log.isTraceEnabled() ) {\n+                    log.trace( \"Successfully invoked interceptor.afterCompletion method.\" );\n+                }\n             } catch ( Exception e ) {\n                 if ( log.isErrorEnabled() ) {\n                     log.error( \"WebInterceptor [\" + interceptor + \"] afterCompletion method threw an exception: \", e );",
                "deletions": 0
            },
            {
                "sha": "7f31c56ec28803fca892bceefa196f0cc724c9f2",
                "filename": "src/org/jsecurity/web/support/AbstractWebStore.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/AbstractWebStore.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/AbstractWebStore.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/support/AbstractWebStore.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -169,7 +169,9 @@ public final T retrieveValue( HttpServletRequest request, HttpServletResponse re\n         T value = null;\n         if ( isCheckRequestParams() ) {\n             value = getFromRequestParam( request );\n-        } else {\n+        }\n+        \n+        if ( value == null ) {\n             value = onRetrieveValue( request, response );\n         }\n         return value;",
                "deletions": 1
            },
            {
                "sha": "9c6f2e12e9937ca9373b3f723867cdc576ff8a83",
                "filename": "src/org/jsecurity/web/support/CookieStore.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/CookieStore.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/CookieStore.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/support/CookieStore.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -18,6 +18,7 @@\n \n     private String path = null; //null means set it on the request context root\n     private int maxAge = -1;\n+    private boolean secure = false;\n \n     public CookieStore() {\n     }\n@@ -124,6 +125,14 @@ public void setMaxAge( int maxAge ) {\n         this.maxAge = maxAge;\n     }\n \n+    public boolean isSecure() {\n+        return secure;\n+    }\n+\n+    public void setSecure( boolean secure ) {\n+        this.secure = secure;\n+    }\n+\n     /**\n      * Returns the cookie with the given name from the request or <tt>null</tt> if no cookie\n      * with that name could be found.\n@@ -136,8 +145,10 @@ public void setMaxAge( int maxAge ) {\n     private static Cookie getCookie( HttpServletRequest request, String cookieName ) {\n         Cookie cookies[] = request.getCookies();\n         if ( cookies != null ) {\n+            System.out.println( \"Request has cookies.\" );\n             for ( Cookie cookie : cookies ) {\n-                if ( cookieName.equals( cookie.getName() ) ) {\n+                System.out.println( \"Cookie name: \" + cookie.getName() );\n+                if ( cookie.getName().equals( cookieName ) ) {\n                     return cookie;\n                 }\n             }\n@@ -179,6 +190,9 @@ public void onStoreValue( T value, HttpServletRequest request, HttpServletRespon\n         Cookie idCookie = new Cookie( name, stringValue );\n         idCookie.setMaxAge( maxAge );\n         idCookie.setPath( path );\n+        if ( isSecure() ) {\n+            idCookie.setSecure( true );\n+        }\n \n         response.addCookie( idCookie );\n         if ( log.isTraceEnabled() ) {",
                "deletions": 1
            },
            {
                "sha": "c208287979a19a97356690079c43b34fa290f0f9",
                "filename": "src/org/jsecurity/web/support/DefaultWebSessionFactory.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/DefaultWebSessionFactory.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/DefaultWebSessionFactory.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/support/DefaultWebSessionFactory.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -50,7 +50,7 @@\n  */\n public class DefaultWebSessionFactory extends SecurityWebSupport implements WebSessionFactory {\n \n-    public static final String DEFAULT_SESSION_ID_COOKIE_NAME = \"sessionId\";\n+    public static final String DEFAULT_SESSION_ID_COOKIE_NAME = \"jsecSessionId\";\n \n     protected transient final Log log = LogFactory.getLog( getClass() );\n \n@@ -66,6 +66,7 @@\n \n     protected WebStore<Serializable> idStore =\n         new CookieStore<Serializable>( DEFAULT_SESSION_ID_COOKIE_NAME, CookieStore.INDEFINITE );\n+        //new HttpSessionStore<Serializable>( DEFAULT_SESSION_ID_COOKIE_NAME, true );\n \n     protected boolean requireSessionOnRequest = false;\n     protected boolean createNewSessionWhenInvalid = true;\n@@ -227,10 +228,10 @@ protected void storeSessionId( Session session, HttpServletRequest request, Http\n             throw new IllegalStateException( msg );\n         }\n         //ensure that the id has been set in the idStore, or if it already has, that it is not different than the\n-        //'real' thread-bound session:\n+        //'real' session value:\n         Serializable existingId = retrieveSessionId( request, response );\n-        if ( existingId == null || !existingId.equals( currentId ) ) {\n-            getIdStore().storeValue( existingId, request, response );\n+        if ( existingId == null || !currentId.equals( existingId ) ) {\n+            getIdStore().storeValue( currentId, request, response );\n         }\n     }\n ",
                "deletions": 4
            },
            {
                "sha": "0fee524a42ced6dec68ede5c3ebd834d9d358909",
                "filename": "src/org/jsecurity/web/support/SecurityContextWebInterceptor.java",
                "blob_url": "https://github.com/apache/shiro/blob/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/SecurityContextWebInterceptor.java",
                "raw_url": "https://github.com/apache/shiro/raw/caa9b27b6b0ef84f74c09c226167b0044546126b/src/org/jsecurity/web/support/SecurityContextWebInterceptor.java",
                "status": "modified",
                "changes": 19,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/support/SecurityContextWebInterceptor.java?ref=caa9b27b6b0ef84f74c09c226167b0044546126b",
                "patch": "@@ -135,6 +135,9 @@ public void setAuthenticatedStore( WebStore<Boolean> authenticatedStore ) {\n \n     protected void ensurePrincipalsStore() {\n         if ( getPrincipalsStore() == null ) {\n+            if ( log.isDebugEnabled() ) {\n+                log.debug( \"Initializing default Principals WebStore...\" );\n+            }\n             AbstractWebStore<List<Principal>> store = null;\n             if ( isPreferHttpSessionStorage() ) {\n                 store = new HttpSessionStore<List<Principal>>( PRINCIPALS_SESSION_KEY, false );\n@@ -143,18 +146,22 @@ protected void ensurePrincipalsStore() {\n             }\n             store.setMutable( false ); //don't allow SecurityContexts to change the principals they were created from (security risk)\n             store.init();\n-            setPrincipalsStore( principalsStore );\n+            setPrincipalsStore( store );\n         }\n     }\n \n     protected void ensureAuthenticatedStore() {\n         if ( getAuthenticatedStore() == null ) {\n+            if ( log.isDebugEnabled() ) {\n+                log.debug( \"Initializing default Authenticated token WebStore...\" );\n+            }\n             AbstractWebStore<Boolean> store = null;\n             if ( isPreferHttpSessionStorage() ) {\n                 store = new HttpSessionStore<Boolean>( AUTHENTICATED_SESSION_KEY, false );\n             } else {\n                 store = new SessionStore<Boolean>( AUTHENTICATED_SESSION_KEY, false );\n             }\n+            store.init();\n             setAuthenticatedStore( store );\n         }\n     }\n@@ -166,6 +173,9 @@ public void init() {\n             throw new IllegalStateException( msg );\n         }\n         if ( getWebSessionFactory() == null ) {\n+            if ( log.isDebugEnabled() ) {\n+                log.debug( \"Initializing default WebSessionFactory instance...\" );\n+            }\n             DefaultWebSessionFactory factory = new DefaultWebSessionFactory();\n             factory.setSessionFactory( securityManager );\n \n@@ -192,7 +202,12 @@ public void init() {\n     protected boolean isAuthenticated( ServletRequest servletRequest, ServletResponse servletResponse ) {\n         HttpServletRequest request = (HttpServletRequest)servletRequest;\n         HttpServletResponse response = (HttpServletResponse)servletResponse;\n-        return getAuthenticatedStore().retrieveValue( request, response );\n+        Boolean value = getAuthenticatedStore().retrieveValue( request, response );\n+        if ( value != null ) {\n+            return value;\n+        } else {\n+            return false;\n+        }\n     }\n \n     protected SecurityContext buildSecurityContext( List<Principal> principals, boolean authenticated,",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "ensured rolesPermissions map was not null to avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@710304 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/c7cc9965b7b45b60b0992c7e4ec66b42de284bc7",
        "parent": "https://github.com/apache/shiro/commit/1898a0b2626cd88cb24edeb471b60f22059cc708",
        "bug_id": "shiro_10",
        "file": [
            {
                "sha": "435cdf6f634a3571c434b750c07890cc3b81efbc",
                "filename": "jsecurity/ri/business/src/org/jsecurity/ri/authc/module/dao/MemoryAuthenticationDAO.java",
                "blob_url": "https://github.com/apache/shiro/blob/c7cc9965b7b45b60b0992c7e4ec66b42de284bc7/jsecurity/ri/business/src/org/jsecurity/ri/authc/module/dao/MemoryAuthenticationDAO.java",
                "raw_url": "https://github.com/apache/shiro/raw/c7cc9965b7b45b60b0992c7e4ec66b42de284bc7/jsecurity/ri/business/src/org/jsecurity/ri/authc/module/dao/MemoryAuthenticationDAO.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/jsecurity/ri/business/src/org/jsecurity/ri/authc/module/dao/MemoryAuthenticationDAO.java?ref=c7cc9965b7b45b60b0992c7e4ec66b42de284bc7",
                "patch": "@@ -32,6 +32,7 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import java.util.HashMap;\n \n /**\n  * A simple implementation of the {@link AuthenticationDAO} interface that\n@@ -75,7 +76,7 @@\n      *     java.io.FilePermission,/myDir/myFile,read,write\"</tt>\n      * </p>\n      */\n-    private Map<String,String> rolesPermissionsMap;\n+    private Map<String,String> rolesPermissionsMap = new HashMap<String,String>();\n \n     /*--------------------------------------------\n     |         C O N S T R U C T O R S           |",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "shiro",
        "message": "Throw exception when request/response isn't set on WebUtils so that you get a nice error instead of a NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/jsecurity/trunk@711068 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/shiro/commit/24c6437570cab1a3239d88566fb4918f3c8377d6",
        "parent": "https://github.com/apache/shiro/commit/e33e5039e69720d99bab61c53c1ea327929e0e4b",
        "bug_id": "shiro_11",
        "file": [
            {
                "sha": "b6af3ddef49aedfe3cc4b63e1c64bae2341a7a8d",
                "filename": "src/org/jsecurity/web/WebRememberMeManager.java",
                "blob_url": "https://github.com/apache/shiro/blob/24c6437570cab1a3239d88566fb4918f3c8377d6/src/org/jsecurity/web/WebRememberMeManager.java",
                "raw_url": "https://github.com/apache/shiro/raw/24c6437570cab1a3239d88566fb4918f3c8377d6/src/org/jsecurity/web/WebRememberMeManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/WebRememberMeManager.java?ref=24c6437570cab1a3239d88566fb4918f3c8377d6",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.jsecurity.web;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.jsecurity.codec.Base64;\n import org.jsecurity.subject.AbstractRememberMeManager;\n import org.jsecurity.web.attr.CookieAttribute;\n@@ -58,6 +60,8 @@\n      */\n     public static final String DEFAULT_REMEMBER_ME_COOKIE_NAME = \"rememberMe\";\n \n+    private static final Log log = LogFactory.getLog(WebRememberMeManager.class);\n+\n     protected WebAttribute<String> identityAttribute = null;\n \n     public WebRememberMeManager() {",
                "deletions": 0
            },
            {
                "sha": "a9b01ca46c0302a379bcae2a8e892bc9a0791367",
                "filename": "src/org/jsecurity/web/WebUtils.java",
                "blob_url": "https://github.com/apache/shiro/blob/24c6437570cab1a3239d88566fb4918f3c8377d6/src/org/jsecurity/web/WebUtils.java",
                "raw_url": "https://github.com/apache/shiro/raw/24c6437570cab1a3239d88566fb4918f3c8377d6/src/org/jsecurity/web/WebUtils.java",
                "status": "modified",
                "changes": 27,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/shiro/contents/src/org/jsecurity/web/WebUtils.java?ref=24c6437570cab1a3239d88566fb4918f3c8377d6",
                "patch": "@@ -53,6 +53,15 @@\n \n     private static final Log log = LogFactory.getLog(WebUtils.class);\n \n+\n+    /**\n+     * Message displayed when a servlet request or response is not bound to the current thread context.\n+     */\n+    private static final String NOT_BOUND_ERROR_MESSAGE =\n+            \"Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  \" +\n+            \"This could also happen when running integration tests that don't properly call WebUtils.bind().\";\n+\n+\n     public static final String SERVLET_REQUEST_KEY = ServletRequest.class.getName() + \"_JSECURITY_THREAD_CONTEXT_KEY\";\n     public static final String SERVLET_RESPONSE_KEY = ServletResponse.class.getName() + \"_JSECURITY_THREAD_CONTEXT_KEY\";\n \n@@ -300,10 +309,15 @@ public static void unbindInetAddressFromThread() {\n      * This method only returns the bound value if it exists - it does not remove it\n      * from the thread.  To remove it, one must call {@link #unbindServletRequest() unbindServletRequest} instead.\n      *\n-     * @return the ServletRequest bound to the thread, or <tt>null</tt> if there isn't one bound.\n+     * @return the ServletRequest bound to the thread.  Never returns null.\n+     * @throws IllegalStateException if no servlet request is bound in the thread context.\n      */\n     public static ServletRequest getServletRequest() {\n-        return (ServletRequest) ThreadContext.get(SERVLET_REQUEST_KEY);\n+        ServletRequest request = (ServletRequest) ThreadContext.get(SERVLET_REQUEST_KEY);\n+        if( request == null ) {\n+            throw new IllegalStateException( \"No ServletRequest found in ThreadContext. \" + NOT_BOUND_ERROR_MESSAGE );\n+        }        \n+        return request;\n     }\n \n     /**\n@@ -353,10 +367,15 @@ public static ServletRequest unbindServletRequest() {\n      * This method only returns the bound value if it exists - it does not remove it\n      * from the thread.  To remove it, one must call {@link #unbindServletResponse() unbindServletResponse} instead.\n      *\n-     * @return the ServletResponse bound to the thread, or <tt>null</tt> if there isn't one bound.\n+     * @return the ServletResponse bound to the thread.  Never returns null.\n+     * @throws IllegalStateException if no servlet response is bound in the thread context.\n      */\n     public static ServletResponse getServletResponse() {\n-        return (ServletResponse) ThreadContext.get(SERVLET_RESPONSE_KEY);\n+        ServletResponse response = (ServletResponse) ThreadContext.get(SERVLET_RESPONSE_KEY);\n+        if( response == null ) {\n+            throw new IllegalStateException( \"No ServletResponse found in ThreadContext. \" + NOT_BOUND_ERROR_MESSAGE );\n+        }\n+        return response;\n     }\n \n     /**",
                "deletions": 4
            }
        ]
    }
]