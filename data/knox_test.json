{
    "knox_197e996": {
        "bug_id": "knox_197e996",
        "commit": "https://github.com/apache/knox/commit/197e9960d2724056f257ddb64980a62b40cf8d6a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/knox/blob/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java?ref=197e9960d2724056f257ddb64980a62b40cf8d6a",
                "deletions": 4,
                "filename": "gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "patch": "@@ -274,10 +274,14 @@ private void addRoleIfMember(final String userDn, final SearchResult group,\n     }\n     finally {\n       try {\n-        attributeEnum.close();\n+        if (attributeEnum != null) {\n+          attributeEnum.close();\n+        }\n       }\n       finally {\n-        e.close();\n+        if (e != null) {\n+          e.close();\n+        }\n       }\n     }\n   }\n@@ -474,7 +478,9 @@ boolean isUserMemberOfDynamicGroup(LdapName userLdapDn, String memberUrl,\n     finally {\n       if (searchResultEnum != null) {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         }\n         finally {\n           LdapUtils.closeContext(systemLdapCtx);\n@@ -534,7 +540,9 @@ protected String getUserDn(String principal) throws IllegalArgumentException, Il\n         throw new IllegalArgumentException(\"Hit NamingException: \" + e.getMessage());\n       } finally {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         } catch (NamingException e) {\n         }\n         finally {",
                "raw_url": "https://github.com/apache/knox/raw/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "sha": "1cf9fd88280fcf0ffd78710e4fe54fb927c219b2",
                "status": "modified"
            }
        ],
        "message": "KNOX-459 - added null checks to the closing of resultEnums to avoid NPEs",
        "parent": "https://github.com/apache/knox/commit/868e5715e4a3fe21c08cedfd58ba5cd67ff65fe1",
        "patched_files": [
            "KnoxLdapRealm.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "KnoxLdapRealmTest.java"
        ]
    },
    "knox_3004ba8": {
        "bug_id": "knox_3004ba8",
        "commit": "https://github.com/apache/knox/commit/3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
        "file": [
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
                "deletions": 22,
                "filename": "gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "patch": "@@ -30,7 +30,6 @@\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n \n import java.io.UnsupportedEncodingException;\n-import java.util.List;\n import java.util.Map;\n import java.util.StringTokenizer;\n \n@@ -60,37 +59,51 @@ public UrlRewriteStepStatus process( UrlRewriteContext context ) throws Exceptio\n     Builder newUrl = new Builder( currUrl );\n     Map<String,Query> map = newUrl.getQuery();\n     Query query = map.remove( ENCRYPTED_PARAMETER_NAME );\n+    UrlRewriteStepStatus status = UrlRewriteStepStatus.FAILURE;\n+    status = getUrlRewriteStepStatus(context, newUrl, map, query, status);\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, Query query, UrlRewriteStepStatus status) throws UnsupportedEncodingException {\n     if( query != null ) {\n       String value = query.getFirstValue().getPattern();\n       value = decode( value );\n-      StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n-      while( outerParser.hasMoreTokens() ) {\n-        String pair = outerParser.nextToken();\n-        StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n-        if( innerParser.hasMoreTokens() ) {\n-          String paramName = innerParser.nextToken();\n-          if( innerParser.hasMoreTokens() ) {\n-            String paramValue = innerParser.nextToken();\n-            // Need to remove from the clear parameters any param name in the encoded params.\n-            // If we don't then someone could override something in the encoded param.\n-            map.remove( paramName );\n-            newUrl.addQuery( paramName, \"\", paramValue, true );\n-          } else {\n-            newUrl.addQuery( paramName, \"\", null, true );\n-          }\n-        }\n-      }\n-      context.setCurrentUrl( newUrl.build() );\n-      context.getParameters().resolve( \"gateway.name\" );\n+      status = getUrlRewriteStepStatus(context, newUrl, map, status, value);\n+    }\n+    return status;\n+  }\n+\n+  private UrlRewriteStepStatus getUrlRewriteStepStatus(UrlRewriteContext context, Builder newUrl, Map<String, Query> map, UrlRewriteStepStatus status, String value) {\n+    if( value != null ) {\n+       StringTokenizer outerParser = new StringTokenizer( value, \"&\" );\n+       while( outerParser.hasMoreTokens() ) {\n+         String pair = outerParser.nextToken();\n+         StringTokenizer innerParser = new StringTokenizer( pair, \"=\" );\n+         if( innerParser.hasMoreTokens() ) {\n+           String paramName = innerParser.nextToken();\n+           if( innerParser.hasMoreTokens() ) {\n+             String paramValue = innerParser.nextToken();\n+             // Need to remove from the clear parameters any param name in the encoded params.\n+             // If we don't then someone could override something in the encoded param.\n+             map.remove( paramName );\n+             newUrl.addQuery( paramName, \"\", paramValue, true );\n+           } else {\n+             newUrl.addQuery( paramName, \"\", null, true );\n+           }\n+         }\n+       }\n+       context.setCurrentUrl( newUrl.build() );\n+       context.getParameters().resolve( \"gateway.name\" );\n+       status = UrlRewriteStepStatus.SUCCESS;\n     }\n-    return UrlRewriteStepStatus.SUCCESS;\n+    return status;\n   }\n \n   @Override\n   public void destroy() {\n   }\n \n-  private String decode( String string ) throws UnsupportedEncodingException {\n+  String decode( String string ) throws UnsupportedEncodingException {\n     byte[] bytes = Base64.decodeBase64( string );\n     EncryptionResult result = EncryptionResult.fromByteArray(bytes);\n     byte[] clear = cryptoService.decryptForCluster(clusterName, ",
                "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/main/java/org/apache/hadoop/gateway/securequery/SecureQueryDecryptProcessor.java",
                "sha": "0687cb4a98b5c1c32059daf2170ebeda3edfd148",
                "status": "modified"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/knox/blob/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java?ref=3004ba8b9b78d603e04d8c6f2313b0b527fdd252",
                "deletions": 0,
                "filename": "gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "patch": "@@ -27,9 +27,11 @@\n import org.apache.hadoop.gateway.util.urltemplate.Parser;\n import org.apache.hadoop.gateway.util.urltemplate.Query;\n import org.apache.hadoop.gateway.util.urltemplate.Template;\n+import org.apache.hadoop.gateway.filter.rewrite.spi.UrlRewriteStepStatus;\n import org.easymock.Capture;\n import org.easymock.EasyMock;\n import org.junit.Test;\n+import org.junit.Assert;\n \n import java.util.Arrays;\n \n@@ -108,4 +110,70 @@ public void testEncryptDecrypt() throws Exception {\n     assertThat( query, nullValue() );\n   }\n \n+  @Test\n+  public void testEncryptBadDecrypt() throws Exception {\n+    Query query;\n+    Template origTemplate = Parser.parseLiteral( \"http://host:0/path/file?query-param-name=query-param-value\" );\n+\n+    // Test encryption.  Results are left in encTemplate\n+\n+    AliasService as = EasyMock.createNiceMock( AliasService.class );\n+    String secret = \"sdkjfhsdkjfhsdfs\";\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+    CryptoService cryptoService = new DefaultCryptoService();\n+    ((DefaultCryptoService)cryptoService).setAliasService(as);\n+    GatewayServices gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+\n+    UrlRewriteEnvironment encEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( encEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    UrlRewriteContext encContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( encContext.getCurrentUrl() ).andReturn( origTemplate );\n+    Capture<Template> encTemplate = new Capture<Template>();\n+    encContext.setCurrentUrl( EasyMock.capture( encTemplate ) );\n+    EasyMock.replay( gatewayServices, as, encEnvironment, encContext );\n+\n+    SecureQueryEncryptDescriptor descriptor = new SecureQueryEncryptDescriptor();\n+    SecureQueryEncryptProcessor processor = new SecureQueryEncryptProcessor();\n+    processor.initialize( encEnvironment, descriptor );\n+    processor.process( encContext );\n+\n+    assertThat( encTemplate, notNullValue() );\n+    query = encTemplate.getValue().getQuery().get( \"_\" );\n+    assertThat( query.getFirstValue().getPattern().length(), greaterThan( 1 ) );\n+    query = encTemplate.getValue().getQuery().get( \"query-param-name\" );\n+    assertThat( query, nullValue() );\n+\n+    // Test decryption with decode returning null\n+\n+    gatewayServices = EasyMock.createNiceMock( GatewayServices.class );\n+    EasyMock.expect( gatewayServices.getService( GatewayServices.CRYPTO_SERVICE ) ).andReturn( cryptoService );\n+    as = EasyMock.createNiceMock( AliasService.class );\n+    EasyMock.expect( as.getPasswordFromAliasForCluster(\"test-cluster-name\", \"encryptQueryString\")).andReturn( secret.toCharArray() ).anyTimes();\n+\n+    UrlRewriteEnvironment decEnvironment = EasyMock.createNiceMock( UrlRewriteEnvironment.class );\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_SERVICES_ATTRIBUTE ) ).andReturn( gatewayServices ).anyTimes();\n+    EasyMock.expect( decEnvironment.getAttribute( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( \"test-cluster-name\" ).anyTimes();\n+    Params decParams = EasyMock.createNiceMock( Params.class );\n+    EasyMock.expect( decParams.resolve( GatewayServices.GATEWAY_CLUSTER_ATTRIBUTE ) ).andReturn( Arrays.asList(\"test-cluster-name\") ).anyTimes();\n+    UrlRewriteContext decContext = EasyMock.createNiceMock( UrlRewriteContext.class );\n+    EasyMock.expect( decContext.getCurrentUrl() ).andReturn( encTemplate.getValue() );\n+    EasyMock.expect( decContext.getParameters() ).andReturn( decParams );\n+    Capture<Template> decTemplate = new Capture<Template>();\n+    decContext.setCurrentUrl( EasyMock.capture( decTemplate ) );\n+    SecureQueryDecryptDescriptor descriptor1 = new SecureQueryDecryptDescriptor();\n+    SecureQueryDecryptProcessor decProcessor =\n+       EasyMock.createMockBuilder(\n+          SecureQueryDecryptProcessor.class ).addMockedMethod( SecureQueryDecryptProcessor.class.getDeclaredMethod(\"decode\", String.class )).createMock();\n+    EasyMock.expect( decProcessor.decode(EasyMock.anyObject(String.class))).andReturn( null );\n+    EasyMock.replay( gatewayServices, as, decEnvironment, decParams, decContext, decProcessor );\n+\n+    decProcessor.initialize( decEnvironment, descriptor1 );\n+    UrlRewriteStepStatus status = decProcessor.process( decContext );\n+\n+    Assert.assertTrue((status == UrlRewriteStepStatus.FAILURE));\n+  }\n+\n+\n }",
                "raw_url": "https://github.com/apache/knox/raw/3004ba8b9b78d603e04d8c6f2313b0b527fdd252/gateway-provider-rewrite-step-secure-query/src/test/java/org/apache/hadoop/gateway/securequery/SecureQueryEncryptDecryptProcessorTest.java",
                "sha": "453aeb9df901eb7f2956fced1f6162375cf6729a",
                "status": "modified"
            }
        ],
        "message": "KNOX-965 - SecureQueryDecryptProcessor decode call could return null thus it would get a NPE (Jeffrey E Rodriguez via lmccay)",
        "parent": "https://github.com/apache/knox/commit/315a0ba9b1fd72999666c46ce300b808acb33d63",
        "patched_files": [
            "SecureQueryDecryptProcessor.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "SecureQueryEncryptDecryptProcessorTest.java"
        ]
    },
    "knox_5298548": {
        "bug_id": "knox_5298548",
        "commit": "https://github.com/apache/knox/commit/529854861c9882f6124ab1a84909f5aa1a813676",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/knox/blob/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java?ref=529854861c9882f6124ab1a84909f5aa1a813676",
                "deletions": 10,
                "filename": "gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "patch": "@@ -24,11 +24,11 @@\n import org.apache.knox.gateway.util.IpAddressValidator;\n \n /**\n+ *\n  */\n public class AclParser {\n   private static AclsAuthorizationMessages log = MessagesFactory.get( AclsAuthorizationMessages.class );\n \n-  public String resourceRole;\n   public ArrayList<String> users;\n   public ArrayList<String> groups;\n   public boolean anyUser = true;\n@@ -37,6 +37,9 @@\n \n \n   public AclParser() {\n+    users = new ArrayList<>();\n+    groups = new ArrayList<>();\n+    ipv = new IpAddressValidator(null);\n   }\n   \n   public void parseAcls(String resourceRole, String acls) throws InvalidACLException {\n@@ -45,34 +48,27 @@ public void parseAcls(String resourceRole, String acls) throws InvalidACLExcepti\n       if (parts.length != 3) {\n         log.invalidAclsFoundForResource(resourceRole);\n         throw new InvalidACLException(\"Invalid ACLs specified for requested resource: \" + resourceRole);\n-      }\n-      else {\n+      } else {\n         log.aclsFoundForResource(resourceRole);\n       }\n       parseUserAcls(parts);\n       \n       parseGroupAcls(parts);\n \n       parseIpAddressAcls(parts);\n-    }\n-    else {\n+    } else {\n       log.noAclsFoundForResource(resourceRole);\n-      users = new ArrayList<String>();\n-      groups = new ArrayList<String>();\n-      ipv = new IpAddressValidator(null);\n     }\n   }\n \n   private void parseUserAcls(String[] parts) {\n-    users = new ArrayList<String>();\n     Collections.addAll(users, parts[0].split(\",\"));\n     if (!users.contains(\"*\")) {\n       anyUser = false;\n     }\n   }\n \n   private void parseGroupAcls(String[] parts) {\n-    groups = new ArrayList<String>();\n     Collections.addAll(groups, parts[1].split(\",\"));\n     if (!groups.contains(\"*\")) {\n       anyGroup = false;",
                "raw_url": "https://github.com/apache/knox/raw/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "sha": "9df4059965786e53bb22dc46eee63cce0fdb8a04",
                "status": "modified"
            }
        ],
        "message": "KNOX-1387 - NPE in AclsAuthorizationFilter",
        "parent": "https://github.com/apache/knox/commit/c3851dd8686003400fec75132526e08c18455510",
        "patched_files": [
            "AclParser.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "AclParserTest.java"
        ]
    },
    "knox_6e56ea0": {
        "bug_id": "knox_6e56ea0",
        "commit": "https://github.com/apache/knox/commit/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/knox/blob/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java?ref=6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d",
                "deletions": 5,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "patch": "@@ -476,11 +476,12 @@ public void start() throws ServiceLifecycleException {\n \n   @Override\n   public void stop() throws ServiceLifecycleException {\n-    try {\n-      remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n-    } catch (final Exception e) {\n-      LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY,\n-          e.toString());\n+    if(remoteClient != null) {\n+      try {\n+        remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n+      } catch (final Exception e) {\n+        LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY, e.toString());\n+      }\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/knox/raw/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "sha": "9ba5d0bd774207b3b91b61243f024d619af1d8cf",
                "status": "modified"
            }
        ],
        "message": "KNOX-1251 - Fix NPE in RemoteAliasService#stop()",
        "parent": "https://github.com/apache/knox/commit/5ecb51e3c32941d3dfe85f323003f48cc737c519",
        "patched_files": [
            "RemoteAliasService.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "RemoteAliasServiceTest.java"
        ]
    },
    "knox_7861f20": {
        "bug_id": "knox_7861f20",
        "commit": "https://github.com/apache/knox/commit/7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/CHANGES",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -10,6 +10,7 @@ Release Notes - Apache Knox - Version 0.9.0\n     * [KNOX-678] - Malformed UTF-8 characters in JSON Response\n     * [KNOX-680] - Update Knox's HttpClient dependency to latest version\n ** Bug\n+    * [KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.8.0",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/CHANGES",
                "sha": "a757eaa4f1a2b1af104de075d7eddce468d3663f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 6,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "patch": "@@ -211,11 +211,14 @@ public String nextElement() {\n \n   @Override\n   public ServletInputStream getInputStream() throws IOException {\n-    MimeType mimeType = getMimeType();\n-    UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n-    InputStream stream = UrlRewriteStreamFilterFactory.create(\n-        mimeType, null, super.getInputStream(), rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n-    return new UrlRewriteRequestStream( stream );\n+    ServletInputStream input = super.getInputStream();\n+    if( getContentLength() != 0 ) {\n+      MimeType mimeType = getMimeType();\n+      UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n+      InputStream stream = UrlRewriteStreamFilterFactory.create( mimeType, null, input, rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n+      input = new UrlRewriteRequestStream( stream );\n+    }\n+    return input;\n   }\n \n   @Override\n@@ -226,7 +229,11 @@ public BufferedReader getReader() throws IOException {\n   @Override\n   public int getContentLength() {\n     // The rewrite might change the content length so return the default of -1 to indicate the length is unknown.\n-    return -1;\n+    int contentLength = super.getContentLength();\n+    if( contentLength > 0 ) {\n+      contentLength = -1;\n+    }\n+    return contentLength;\n   }\n \n   private UrlRewriteFilterContentDescriptor getRewriteFilterConfig( String filterName, MimeType mimeType ) {",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "sha": "fd6cd2428c193275611307d31b96053fe981f0a1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 2,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "patch": "@@ -120,10 +120,12 @@ public int read( char[] destBuffer, int destOffset, int destCount ) throws IOExc\n         try {\n           XMLEvent event = parser.nextEvent();\n           processEvent( event );\n+        } catch( IOException e ) {\n+          throw e;\n         } catch( RuntimeException e ) {\n           throw e;\n-        } catch( Exception e ) {\n-          throw e instanceof IOException ? (IOException)e : new IOException( e );\n+        } catch ( Exception e ) {\n+          throw new RuntimeException( e );\n         }\n         available = buffer.length() - offset;\n       } else {",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "sha": "cfaebd2a1731a590635f845b457ae1fe2049c03b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test-utils/src/main/java/org/apache/hadoop/test/mock/MockResponseProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test-utils/src/main/java/org/apache/hadoop/test/mock/MockResponseProvider.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 0,
                "filename": "gateway-test-utils/src/main/java/org/apache/hadoop/test/mock/MockResponseProvider.java",
                "patch": "@@ -115,6 +115,8 @@ public MockResponseProvider characterEncoding( String charset ) {\n   public void apply( HttpServletResponse response ) throws IOException {\n     if( statusCode != null ) {\n       response.setStatus( statusCode );\n+    } else {\n+      response.setStatus( HttpServletResponse.SC_OK );\n     }\n     if( errorCode != null ) {\n       if( errorMsg != null ) {\n@@ -148,8 +150,10 @@ public void apply( HttpServletResponse response ) throws IOException {\n     if( contentLength != null ) {\n       response.setContentLength( contentLength );\n     }\n+    response.flushBuffer();\n     if( entity != null ) {\n       response.getOutputStream().write( entity );\n+      response.getOutputStream().flush();\n       response.getOutputStream().close();\n     }\n   }",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test-utils/src/main/java/org/apache/hadoop/test/mock/MockResponseProvider.java",
                "sha": "b2dd206cad9a9609a2a17054b52aa05722b24173",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayAppFuncTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayAppFuncTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 4,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayAppFuncTest.java",
                "patch": "@@ -29,7 +29,6 @@\n import java.util.Properties;\n import java.util.UUID;\n \n-import com.jayway.restassured.RestAssured;\n import org.apache.commons.io.FileUtils;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n import org.apache.hadoop.gateway.security.ldap.SimpleLdapDirectoryServer;\n@@ -50,8 +49,6 @@\n import org.slf4j.LoggerFactory;\n \n import static com.jayway.restassured.RestAssured.given;\n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n import static org.hamcrest.CoreMatchers.equalTo;\n@@ -87,7 +84,6 @@\n   @BeforeClass\n   public static void setupSuite() throws Exception {\n     LOG_ENTER();\n-    RestAssured.config = newConfig().connectionConfig(connectionConfig().closeIdleConnectionsAfterEachResponse());\n     //appenders = NoOpAppender.setUp();\n     setupLdap();\n     setupGateway();",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayAppFuncTest.java",
                "sha": "4bd956d539f837287b64529016591db2467ba53e",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayBasicFuncTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayBasicFuncTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 5,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayBasicFuncTest.java",
                "patch": "@@ -26,15 +26,13 @@\n import java.io.StringWriter;\n import java.net.InetAddress;\n import java.net.InetSocketAddress;\n-import java.net.ServerSocket;\n import java.net.URI;\n import java.nio.charset.Charset;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Map.Entry;\n import javax.ws.rs.core.MediaType;\n \n-import com.jayway.restassured.RestAssured;\n import com.jayway.restassured.http.ContentType;\n import com.jayway.restassured.response.Cookie;\n import com.jayway.restassured.response.Header;\n@@ -67,8 +65,6 @@\n import org.slf4j.LoggerFactory;\n \n import static com.jayway.restassured.RestAssured.given;\n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n import static org.hamcrest.CoreMatchers.anyOf;\n@@ -133,7 +129,6 @@\n   public static void setupSuite() throws Exception {\n     //Log.setLog( new NoOpLogger() );\n     LOG_ENTER();\n-    RestAssured.config = newConfig().connectionConfig(connectionConfig().dontCloseIdleConnectionsAfterEachResponse() );\n     GatewayTestConfig config = new GatewayTestConfig();\n     config.setGatewayPath( \"gateway\" );\n     driver.setResourceBase(GatewayBasicFuncTest.class);",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayBasicFuncTest.java",
                "sha": "2df67dd306b6a72350af58e0b50b900def5e246d",
                "status": "modified"
            },
            {
                "additions": 118,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "changes": 145,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 27,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "patch": "@@ -26,8 +26,8 @@\n import java.util.Properties;\n import java.util.UUID;\n \n-import com.jayway.restassured.RestAssured;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n import org.apache.hadoop.gateway.security.ldap.SimpleLdapDirectoryServer;\n import org.apache.hadoop.gateway.services.DefaultGatewayServices;\n@@ -37,10 +37,22 @@\n import org.apache.hadoop.test.TestUtils;\n import org.apache.hadoop.test.category.ReleaseTest;\n import org.apache.hadoop.test.mock.MockServer;\n+import org.apache.http.HttpHost;\n import org.apache.http.HttpStatus;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n import org.apache.log4j.Appender;\n import org.hamcrest.MatcherAssert;\n-import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.BeforeClass;\n import org.junit.Test;\n@@ -49,14 +61,15 @@\n import org.slf4j.LoggerFactory;\n \n import static com.jayway.restassured.RestAssured.given;\n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n+import static org.hamcrest.CoreMatchers.endsWith;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n+import static org.xmlmatchers.XmlMatchers.hasXPath;\n+import static org.xmlmatchers.transform.XmlConverters.the;\n \n @Category(ReleaseTest.class)\n public class GatewayMultiFuncTest {\n@@ -70,13 +83,10 @@\n   private static GatewayServer gateway;\n   private static int gatewayPort;\n   private static String gatewayUrl;\n-  private static String clusterUrl;\n   private static SimpleLdapDirectoryServer ldap;\n   private static TcpTransport ldapTransport;\n-  private static int ldapPort;\n   private static Properties params;\n   private static TopologyService topos;\n-  private static MockServer mockWebHdfs;\n \n   @BeforeClass\n   public static void setupSuite() throws Exception {\n@@ -97,12 +107,6 @@ public static void cleanupSuite() throws Exception {\n     LOG_EXIT();\n   }\n \n-  @After\n-  public void cleanupTest() throws Exception {\n-    FileUtils.cleanDirectory( new File( config.getGatewayTopologyDir() ) );\n-    FileUtils.cleanDirectory( new File( config.getGatewayDeploymentDir() ) );\n-  }\n-\n   public static void setupLdap() throws Exception {\n     URL usersUrl = TestUtils.getResourceUrl( DAT, \"users.ldif\" );\n     ldapTransport = new TcpTransport( 0 );\n@@ -136,14 +140,9 @@ public static void setupGateway() throws Exception {\n     File deployDir = new File( config.getGatewayDeploymentDir() );\n     deployDir.mkdirs();\n \n-    setupMockServers();\n     startGatewayServer();\n   }\n \n-  public static void setupMockServers() throws Exception {\n-    mockWebHdfs = new MockServer( \"WEBHDFS\", true );\n-  }\n-\n   public static void startGatewayServer() throws Exception {\n     services = new DefaultGatewayServices();\n     Map<String,String> options = new HashMap<String,String>();\n@@ -161,13 +160,11 @@ public static void startGatewayServer() throws Exception {\n \n     gatewayPort = gateway.getAddresses()[0].getPort();\n     gatewayUrl = \"http://localhost:\" + gatewayPort + \"/\" + config.getGatewayPath();\n-    clusterUrl = gatewayUrl + \"/test-topology\";\n \n     LOG.info( \"Gateway port = \" + gateway.getAddresses()[ 0 ].getPort() );\n \n     params = new Properties();\n     params.put( \"LDAP_URL\", \"ldap://localhost:\" + ldapTransport.getAcceptor().getLocalAddress().getPort() );\n-    params.put( \"WEBHDFS_URL\", \"http://localhost:\" + mockWebHdfs.getPort() );\n   }\n \n   @Test( timeout = TestUtils.MEDIUM_TIMEOUT )\n@@ -176,52 +173,146 @@ public void testDefaultJsonMimeTypeHandlingKnox678() throws Exception {\n \n     MockServer mock = new MockServer( \"REPEAT\", true );\n \n+    params = new Properties();\n+    params.put( \"LDAP_URL\", \"ldap://localhost:\" + ldapTransport.getAcceptor().getLocalAddress().getPort() );\n     params.put( \"MOCK_SERVER_PORT\", mock.getPort() );\n \n     String topoStr = TestUtils.merge( DAT, \"topologies/test-knox678-utf8-chars-topology.xml\", params );\n-    File topoFile = new File( config.getGatewayTopologyDir(), \"topology.xml\" );\n+    File topoFile = new File( config.getGatewayTopologyDir(), \"knox678.xml\" );\n     FileUtils.writeStringToFile( topoFile, topoStr );\n \n     topos.reloadTopologies();\n \n     String uname = \"guest\";\n     String pword = uname + \"-password\";\n \n-    mock.expect().respond().contentType( \"application/json\" ).content( \"{\\\"msg\\\":\\\"H\\u00eallo\\\"}\", Charset.forName( \"UTF8\" ) );\n+    mock.expect().method( \"GET\" )\n+        .respond().contentType( \"application/json\" ).contentLength( -1 ).content( \"{\\\"msg\\\":\\\"H\\u00eallo\\\"}\", Charset.forName( \"UTF8\" ) );\n     given()\n         //.log().all()\n         .auth().preemptive().basic( uname, pword )\n         .expect()\n         //.log().all()\n         .statusCode( HttpStatus.SC_OK )\n         .body( \"msg\", is( \"H\\u00eallo\" ) )\n-        .when().get( gatewayUrl + \"/topology/repeat\" );\n+        .when().get( gatewayUrl + \"/knox678/repeat\" );\n     assertThat( mock.isEmpty(), is(true) );\n \n-    mock.expect().respond().contentType( \"application/json\" ).content( \"{\\\"msg\\\":\\\"H\\u00eallo\\\"}\", Charset.forName( \"UTF8\" ) );\n+    mock.expect().method( \"GET\" )\n+        .respond().contentType( \"application/json\" ).contentLength( -1 ).content( \"{\\\"msg\\\":\\\"H\\u00eallo\\\"}\", Charset.forName( \"UTF8\" ) );\n     given()\n         //.log().all()\n         .auth().preemptive().basic( uname, pword )\n         .expect()\n         //.log().all()\n         .statusCode( HttpStatus.SC_OK )\n         .body( \"msg\", is( \"H\\u00eallo\" ) )\n-        .when().get( gatewayUrl + \"/topology/repeat\" );\n+        .when().get( gatewayUrl + \"/knox678/repeat\" );\n     assertThat( mock.isEmpty(), is(true) );\n \n-    mock.expect().respond().contentType( \"application/octet-stream\" ).content( \"H\\u00eallo\".getBytes() );\n+    mock.expect().method( \"GET\" )\n+        .respond().contentType( \"application/octet-stream\" ).contentLength( -1 ).content( \"H\\u00eallo\".getBytes() );\n     byte[] body = given()\n         //.log().all()\n         .auth().preemptive().basic( uname, pword )\n         .expect()\n         //.log().all()\n         .statusCode( HttpStatus.SC_OK )\n         //.contentType( \"application/octet-stream\" )\n-        .when().get( gatewayUrl + \"/topology/repeat\" ).andReturn().asByteArray();\n+        .when().get( gatewayUrl + \"/knox678/repeat\" ).andReturn().asByteArray();\n     assertThat( body, is(equalTo(\"H\\u00eallo\".getBytes())) );\n     assertThat( mock.isEmpty(), is(true) );\n \n+    mock.stop();\n+\n+    LOG_EXIT();\n+  }\n+\n+  @Test( timeout = TestUtils.MEDIUM_TIMEOUT )\n+  public void testPostWithContentTypeKnox681() throws Exception {\n+    LOG_ENTER();\n+\n+    MockServer mock = new MockServer( \"REPEAT\", true );\n+\n+    params = new Properties();\n+    params.put( \"MOCK_SERVER_PORT\", mock.getPort() );\n+    params.put( \"LDAP_URL\", \"ldap://localhost:\" + ldapTransport.getAcceptor().getLocalAddress().getPort() );\n+\n+    String topoStr = TestUtils.merge( DAT, \"topologies/test-knox678-utf8-chars-topology.xml\", params );\n+    File topoFile = new File( config.getGatewayTopologyDir(), \"knox681.xml\" );\n+    FileUtils.writeStringToFile( topoFile, topoStr );\n+\n+    topos.reloadTopologies();\n+\n+    mock\n+        .expect()\n+        .method( \"PUT\" )\n+        .pathInfo( \"/repeat-context/\" )\n+        .respond()\n+        .status( HttpStatus.SC_CREATED )\n+        .content( \"{\\\"name\\\":\\\"value\\\"}\".getBytes() )\n+        .contentLength( -1 )\n+        .contentType( \"application/json; charset=UTF-8\" )\n+        .header( \"Location\", gatewayUrl + \"/knox681/repeat\" );\n+\n+    String uname = \"guest\";\n+    String pword = uname + \"-password\";\n+\n+    HttpHost targetHost = new HttpHost( \"localhost\", gatewayPort, \"http\" );\n+    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+    credsProvider.setCredentials(\n+        new AuthScope( targetHost.getHostName(), targetHost.getPort() ),\n+        new UsernamePasswordCredentials( uname, pword ) );\n+\n+    AuthCache authCache = new BasicAuthCache();\n+    BasicScheme basicAuth = new BasicScheme();\n+    authCache.put( targetHost, basicAuth );\n+\n+    HttpClientContext context = HttpClientContext.create();\n+    context.setCredentialsProvider( credsProvider );\n+    context.setAuthCache( authCache );\n+\n+    CloseableHttpClient client = HttpClients.createDefault();\n+    HttpPut request = new HttpPut( gatewayUrl + \"/knox681/repeat\" );\n+    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n+    request.addHeader( \"Content-Type\", \"application/json\" );\n+    CloseableHttpResponse response = client.execute( request, context );\n+    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n+    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/knox681/repeat\" ) );\n+    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/json; charset=UTF-8\") );\n+    String body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n+    assertThat( body, is( \"{\\\"name\\\":\\\"value\\\"}\" ) );\n+    response.close();\n+    client.close();\n+\n+    mock\n+        .expect()\n+        .method( \"PUT\" )\n+        .pathInfo( \"/repeat-context/\" )\n+        .respond()\n+        .status( HttpStatus.SC_CREATED )\n+        .content( \"<test-xml/>\".getBytes() )\n+        .contentType( \"application/xml; charset=UTF-8\" )\n+        .header( \"Location\", gatewayUrl + \"/knox681/repeat\" );\n+\n+    client = HttpClients.createDefault();\n+    request = new HttpPut( gatewayUrl + \"/knox681/repeat\" );\n+    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n+    request.addHeader( \"Content-Type\", \"application/xml\" );\n+    response = client.execute( request, context );\n+    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n+    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/knox681/repeat\" ) );\n+    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/xml; charset=UTF-8\") );\n+    body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n+    assertThat( the(body), hasXPath( \"/test-xml\" ) );\n+    response.close();\n+    client.close();\n+\n+    mock.stop();\n+\n     LOG_EXIT();\n   }\n \n }\n+\n+",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "sha": "3271dabe81b4a04150762c329c62d346896f1f06",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySampleFuncTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySampleFuncTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 5,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySampleFuncTest.java",
                "patch": "@@ -17,7 +17,6 @@\n  */\n package org.apache.hadoop.gateway;\n \n-import com.jayway.restassured.RestAssured;\n import com.mycila.xmltool.XMLDoc;\n import com.mycila.xmltool.XMLTag;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n@@ -41,16 +40,13 @@\n import java.io.FileOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.ServerSocket;\n import java.net.URL;\n import java.util.Enumeration;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.UUID;\n \n import static com.jayway.restassured.RestAssured.given;\n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n import static org.hamcrest.CoreMatchers.is;\n@@ -73,7 +69,6 @@\n   @BeforeClass\n   public static void setupSuite() throws Exception {\n     LOG_ENTER();\n-    RestAssured.config = newConfig().connectionConfig(connectionConfig().closeIdleConnectionsAfterEachResponse());\n     //appenders = NoOpAppender.setUp();\n     setupLdap();\n     setupGateway();",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySampleFuncTest.java",
                "sha": "d59f194e9d29b97e88a40c3e3c4aeb71c7bda341",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySslFuncTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySslFuncTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 4,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySslFuncTest.java",
                "patch": "@@ -40,7 +40,6 @@\n import javax.net.ssl.X509TrustManager;\n import javax.xml.transform.stream.StreamSource;\n \n-import com.jayway.restassured.RestAssured;\n import org.apache.commons.io.FileUtils;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n import org.apache.hadoop.gateway.security.ldap.SimpleLdapDirectoryServer;\n@@ -75,8 +74,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n import static org.hamcrest.CoreMatchers.notNullValue;\n@@ -108,7 +105,6 @@\n   @BeforeClass\n   public static void setupSuite() throws Exception {\n     LOG_ENTER();\n-    RestAssured.config = newConfig().connectionConfig(connectionConfig().closeIdleConnectionsAfterEachResponse());\n     //appenders = NoOpAppender.setUp();\n     setupLdap();\n     setupGateway();",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewaySslFuncTest.java",
                "sha": "163b209403654735fdf3c355fa7c1cf9097d5365",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 0,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "patch": "@@ -178,6 +178,7 @@ public void testOozieRewriteRulesForValuesRelativeToServiceRegistry() throws Exc\n     HttpServletRequest servletRequest = EasyMock.createNiceMock( HttpServletRequest.class );\n     EasyMock.expect( servletRequest.getInputStream() ).andReturn( new MockServletInputStream( TestUtils.getResourceStream( OozieServiceDefinitionTest.class, testResource ) ) ).anyTimes();\n     EasyMock.expect( servletRequest.getContentType() ).andReturn( \"text/xml\" ).anyTimes();\n+    EasyMock.expect( servletRequest.getContentLength() ).andReturn( -1 ).anyTimes();\n \n     FilterConfig filterConfig = EasyMock.createNiceMock( FilterConfig.class );\n     EasyMock.expect( filterConfig.getServletContext() ).andReturn( servletContext ).anyTimes();",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "sha": "5acd34e94d2c7ff75771ea4a568e5af39ef5f419",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml?ref=7861f20e5c318b5dcfe28949b68d5c8d82b4b390",
                "deletions": 1,
                "filename": "gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "patch": "@@ -49,6 +49,6 @@\n     </gateway>\n     <service>\n         <role>REPEAT</role>\n-        <url>http://localhost:${MOCK_SERVER_PORT}/repeat-context</url>\n+        <url>http://localhost:$MOCK_SERVER_PORT/repeat-context</url>\n     </service>\n </topology>",
                "raw_url": "https://github.com/apache/knox/raw/7861f20e5c318b5dcfe28949b68d5c8d82b4b390/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "sha": "7a0a9164903d3f4cd0225dbdaaf0ae1d122136d2",
                "status": "modified"
            }
        ],
        "message": "[KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException",
        "parent": "https://github.com/apache/knox/commit/3a7799fbff76003b5f11ac314ae31a8b7c568c63",
        "patched_files": [
            "test-knox678-utf8-chars-topology.xml",
            "MockResponseProvider.java",
            "UrlRewriteRequest.java",
            "CHANGES",
            "XmlFilterReader.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "GatewayAppFuncTest.java",
            "GatewaySslFuncTest.java",
            "OozieServiceDefinitionTest.java",
            "GatewayMultiFuncTest.java",
            "XmlFilterReaderTest.java",
            "GatewaySampleFuncTest.java",
            "GatewayBasicFuncTest.java"
        ]
    },
    "knox_7d83917": {
        "bug_id": "knox_7d83917",
        "commit": "https://github.com/apache/knox/commit/7d839171a7c2ecda217732718ae5aedf4d429fba",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -10,6 +10,7 @@ Release Notes - Apache Knox - Version 0.6.0\n \n ** Improvement\n   * [KNOX-462] - Proper error message when root tag of topology file incorrect\n+  * [KNOX-501] - Avoid NPE in case of passing invalid argument to KnoxCli.\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.5.1",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES",
                "sha": "9f2677a954955f2382539a4eeb838aaf825297cf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 3,
                "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "patch": "@@ -89,10 +89,12 @@ public int run(String[] args) throws Exception {\n       if (exitCode != 0) {\n         return exitCode;\n       }\n-      if (command.validate()) {\n-          initializeServices( command instanceof MasterCreateCommand );\n-          command.execute();\n+      if (command != null && command.validate()) {\n+        initializeServices( command instanceof MasterCreateCommand );\n+        command.execute();\n       } else {\n+        out.println(\"ERROR: Invalid Command\" + \"\\n\" + \"Unrecognized option:\" + args[0] + \"\\n\"\n+            + \"A fatal exception has occurred. Program will exit.\");\n         exitCode = -2;\n       }\n     } catch (Exception e) {",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "sha": "8366f2ee061965a09057483a8af57208466b04ec",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 0,
                "filename": "gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "patch": "@@ -119,6 +119,17 @@ public void testListAndDeleteOfAliasForInvalidClusterName() throws Exception {\n \n   }\n \n+  @Test\n+  public void testForInvalidArgument() throws Exception {\n+    outContent.reset();\n+    String[] args1 = { \"--value\", \"testvalue1\", \"--master\", \"master\" };\n+    KnoxCLI cli = new KnoxCLI();\n+    cli.setConf(new GatewayConfigImpl());\n+    int rc = cli.run(args1);\n+    assertEquals(-2, rc);\n+    assertTrue(outContent.toString().contains(\"ERROR: Invalid Command\"));\n+  }\n+\n   @Test\n   public void testListAndDeleteOfAliasForValidClusterName() throws Exception {\n     outContent.reset();",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "sha": "82f380adbacb92414fe1424bad191b4dd0d59e97",
                "status": "modified"
            }
        ],
        "message": "KNOX-501: Avoid NPE , in case of passing invalid argument to KnoxCli.\nContributed by J.Andreina.",
        "parent": "https://github.com/apache/knox/commit/2192932e012186ca8dc5777bdcc1b14d162c9128",
        "patched_files": [
            "KnoxCLI.java",
            "CHANGES"
        ],
        "repo": "knox",
        "unit_tests": [
            "KnoxCLITest.java"
        ]
    },
    "knox_8a65451": {
        "bug_id": "knox_8a65451",
        "commit": "https://github.com/apache/knox/commit/8a6545109f257977838e015820ca9f1ca18aac74",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/CHANGES",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -10,6 +10,7 @@ Release Notes - Apache Knox - Version 0.9.0\n     * [KNOX-678] - Malformed UTF-8 characters in JSON Response\n     * [KNOX-680] - Update Knox's HttpClient dependency to latest version\n ** Bug\n+    * [KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.8.0",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/CHANGES",
                "sha": "a757eaa4f1a2b1af104de075d7eddce468d3663f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 6,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "patch": "@@ -211,11 +211,14 @@ public String nextElement() {\n \n   @Override\n   public ServletInputStream getInputStream() throws IOException {\n-    MimeType mimeType = getMimeType();\n-    UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n-    InputStream stream = UrlRewriteStreamFilterFactory.create(\n-        mimeType, null, super.getInputStream(), rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n-    return new UrlRewriteRequestStream( stream );\n+    ServletInputStream input = super.getInputStream();\n+    if( getContentLength() != 0 ) {\n+      MimeType mimeType = getMimeType();\n+      UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n+      InputStream stream = UrlRewriteStreamFilterFactory.create( mimeType, null, input, rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n+      input = new UrlRewriteRequestStream( stream );\n+    }\n+    return input;\n   }\n \n   @Override\n@@ -226,7 +229,11 @@ public BufferedReader getReader() throws IOException {\n   @Override\n   public int getContentLength() {\n     // The rewrite might change the content length so return the default of -1 to indicate the length is unknown.\n-    return -1;\n+    int contentLength = super.getContentLength();\n+    if( contentLength > 0 ) {\n+      contentLength = -1;\n+    }\n+    return contentLength;\n   }\n \n   private UrlRewriteFilterContentDescriptor getRewriteFilterConfig( String filterName, MimeType mimeType ) {",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "sha": "fd6cd2428c193275611307d31b96053fe981f0a1",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 2,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "patch": "@@ -120,10 +120,12 @@ public int read( char[] destBuffer, int destOffset, int destCount ) throws IOExc\n         try {\n           XMLEvent event = parser.nextEvent();\n           processEvent( event );\n+        } catch( IOException e ) {\n+          throw e;\n         } catch( RuntimeException e ) {\n           throw e;\n-        } catch( Exception e ) {\n-          throw e instanceof IOException ? (IOException)e : new IOException( e );\n+        } catch ( Exception e ) {\n+          throw new RuntimeException( e );\n         }\n         available = buffer.length() - offset;\n       } else {",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "sha": "cfaebd2a1731a590635f845b457ae1fe2049c03b",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 3,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "patch": "@@ -26,8 +26,8 @@\n import java.util.Properties;\n import java.util.UUID;\n \n-import com.jayway.restassured.RestAssured;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.IOUtils;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n import org.apache.hadoop.gateway.security.ldap.SimpleLdapDirectoryServer;\n import org.apache.hadoop.gateway.services.DefaultGatewayServices;\n@@ -37,7 +37,20 @@\n import org.apache.hadoop.test.TestUtils;\n import org.apache.hadoop.test.category.ReleaseTest;\n import org.apache.hadoop.test.mock.MockServer;\n+import org.apache.http.HttpHost;\n import org.apache.http.HttpStatus;\n+import org.apache.http.auth.AuthScope;\n+import org.apache.http.auth.UsernamePasswordCredentials;\n+import org.apache.http.client.AuthCache;\n+import org.apache.http.client.CredentialsProvider;\n+import org.apache.http.client.methods.CloseableHttpResponse;\n+import org.apache.http.client.methods.HttpPut;\n+import org.apache.http.client.protocol.HttpClientContext;\n+import org.apache.http.impl.auth.BasicScheme;\n+import org.apache.http.impl.client.BasicAuthCache;\n+import org.apache.http.impl.client.BasicCredentialsProvider;\n+import org.apache.http.impl.client.CloseableHttpClient;\n+import org.apache.http.impl.client.HttpClients;\n import org.apache.log4j.Appender;\n import org.hamcrest.MatcherAssert;\n import org.junit.After;\n@@ -49,14 +62,15 @@\n import org.slf4j.LoggerFactory;\n \n import static com.jayway.restassured.RestAssured.given;\n-import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n-import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n+import static org.hamcrest.CoreMatchers.endsWith;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n+import static org.xmlmatchers.XmlMatchers.hasXPath;\n+import static org.xmlmatchers.transform.XmlConverters.the;\n \n @Category(ReleaseTest.class)\n public class GatewayMultiFuncTest {\n@@ -225,4 +239,86 @@ public void testDefaultJsonMimeTypeHandlingKnox678() throws Exception {\n     LOG_EXIT();\n   }\n \n+  @Test( timeout = TestUtils.MEDIUM_TIMEOUT )\n+  public void testPostWithContentTypeKnox681() throws Exception {\n+    LOG_ENTER();\n+\n+    MockServer mock = new MockServer( \"REPEAT\", true );\n+\n+    params.put( \"MOCK_SERVER_PORT\", mock.getPort() );\n+\n+    String topoStr = TestUtils.merge( DAT, \"topologies/test-knox678-utf8-chars-topology.xml\", params );\n+    File topoFile = new File( config.getGatewayTopologyDir(), \"topology.xml\" );\n+    FileUtils.writeStringToFile( topoFile, topoStr );\n+\n+    topos.reloadTopologies();\n+\n+    mock\n+        .expect()\n+        .method( \"PUT\" )\n+        .pathInfo( \"/repeat-context/\" )\n+        .respond()\n+        .status( HttpStatus.SC_CREATED )\n+        .content( \"{\\\"name\\\":\\\"value\\\"}\".getBytes() )\n+        .contentType( \"application/json; charset=UTF-8\" )\n+        .header( \"Location\", gatewayUrl + \"/topology/repeat\" );\n+\n+    String uname = \"guest\";\n+    String pword = uname + \"-password\";\n+\n+    HttpHost targetHost = new HttpHost( \"localhost\", gatewayPort, \"http\" );\n+    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n+    credsProvider.setCredentials(\n+        new AuthScope( targetHost.getHostName(), targetHost.getPort() ),\n+        new UsernamePasswordCredentials( uname, pword ) );\n+\n+    AuthCache authCache = new BasicAuthCache();\n+    BasicScheme basicAuth = new BasicScheme();\n+    authCache.put( targetHost, basicAuth );\n+\n+    HttpClientContext context = HttpClientContext.create();\n+    context.setCredentialsProvider( credsProvider );\n+    context.setAuthCache( authCache );\n+\n+    CloseableHttpClient client = HttpClients.createDefault();\n+    HttpPut request = new HttpPut( gatewayUrl + \"/topology/repeat\" );\n+    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n+    request.addHeader( \"Content-Type\", \"application/json\" );\n+    CloseableHttpResponse response = client.execute( request, context );\n+    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n+    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/topology/repeat\" ) );\n+    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/json; charset=UTF-8\") );\n+    String body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n+    assertThat( body, is( \"{\\\"name\\\":\\\"value\\\"}\" ) );\n+    response.close();\n+    client.close();\n+\n+    mock\n+        .expect()\n+        .method( \"PUT\" )\n+        .pathInfo( \"/repeat-context/\" )\n+        .respond()\n+        .status( HttpStatus.SC_CREATED )\n+        .content( \"<test-xml/>\".getBytes() )\n+        .contentType( \"application/xml; charset=UTF-8\" )\n+        .header( \"Location\", gatewayUrl + \"/topology/repeat\" );\n+\n+    client = HttpClients.createDefault();\n+    request = new HttpPut( gatewayUrl + \"/topology/repeat\" );\n+    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n+    request.addHeader( \"Content-Type\", \"application/xml\" );\n+    response = client.execute( request, context );\n+    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n+    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/topology/repeat\" ) );\n+    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/xml; charset=UTF-8\") );\n+    body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n+    assertThat( the(body), hasXPath( \"/test-xml\" ) );\n+    response.close();\n+    client.close();\n+\n+    LOG_EXIT();\n+  }\n+\n }\n+\n+",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "sha": "cb3a1a13ab5527d0d5a17b413b79f30c4f9a0c3f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 0,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "patch": "@@ -181,6 +181,7 @@ public void testOozieRewriteRulesForValuesRelativeToServiceRegistry() throws Exc\n     HttpServletRequest servletRequest = EasyMock.createNiceMock( HttpServletRequest.class );\n     EasyMock.expect( servletRequest.getInputStream() ).andReturn( new MockServletInputStream( TestUtils.getResourceStream( OozieServiceDefinitionTest.class, testResource ) ) ).anyTimes();\n     EasyMock.expect( servletRequest.getContentType() ).andReturn( \"text/xml\" ).anyTimes();\n+    EasyMock.expect( servletRequest.getContentLength() ).andReturn( -1 ).anyTimes();\n \n     FilterConfig filterConfig = EasyMock.createNiceMock( FilterConfig.class );\n     EasyMock.expect( filterConfig.getServletContext() ).andReturn( servletContext ).anyTimes();",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "sha": "6a91a87aaadfc72e1aaff31042fd01add0bac7a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml?ref=8a6545109f257977838e015820ca9f1ca18aac74",
                "deletions": 1,
                "filename": "gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "patch": "@@ -49,6 +49,6 @@\n     </gateway>\n     <service>\n         <role>REPEAT</role>\n-        <url>http://localhost:${MOCK_SERVER_PORT}/repeat-context</url>\n+        <url>http://localhost:$MOCK_SERVER_PORT/repeat-context</url>\n     </service>\n </topology>",
                "raw_url": "https://github.com/apache/knox/raw/8a6545109f257977838e015820ca9f1ca18aac74/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "sha": "7a0a9164903d3f4cd0225dbdaaf0ae1d122136d2",
                "status": "modified"
            }
        ],
        "message": "[KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException",
        "parent": "https://github.com/apache/knox/commit/5f0bfdf8791c28b8ed804bc81ad48c2e1223ea15",
        "patched_files": [
            "test-knox678-utf8-chars-topology.xml",
            "CHANGES",
            "XmlFilterReader.java",
            "UrlRewriteRequest.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "OozieServiceDefinitionTest.java",
            "GatewayMultiFuncTest.java",
            "XmlFilterReaderTest.java"
        ]
    },
    "knox_8bee259": {
        "bug_id": "knox_8bee259",
        "commit": "https://github.com/apache/knox/commit/8bee25912d72500a800e1759185ef5330cc3a995",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/CHANGES",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 1,
                "filename": "CHANGES",
                "patch": "@@ -10,7 +10,6 @@ Release Notes - Apache Knox - Version 0.9.0\n     * [KNOX-678] - Malformed UTF-8 characters in JSON Response\n     * [KNOX-680] - Update Knox's HttpClient dependency to latest version\n ** Bug\n-    * [KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.8.0",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/CHANGES",
                "sha": "06efd2db57db751873f08a3052eb0c303237f86a",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 13,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "patch": "@@ -211,14 +211,11 @@ public String nextElement() {\n \n   @Override\n   public ServletInputStream getInputStream() throws IOException {\n-    ServletInputStream input = super.getInputStream();\n-    if( getContentLength() != 0 ) {\n-      MimeType mimeType = getMimeType();\n-      UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n-      InputStream stream = UrlRewriteStreamFilterFactory.create( mimeType, null, input, rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n-      input = new UrlRewriteRequestStream( stream );\n-    }\n-    return input;\n+    MimeType mimeType = getMimeType();\n+    UrlRewriteFilterContentDescriptor filterContentConfig = getRewriteFilterConfig( bodyFilterName, mimeType );\n+    InputStream stream = UrlRewriteStreamFilterFactory.create(\n+        mimeType, null, super.getInputStream(), rewriter, this, UrlRewriter.Direction.IN, filterContentConfig );\n+    return new UrlRewriteRequestStream( stream );\n   }\n \n   @Override\n@@ -229,11 +226,7 @@ public BufferedReader getReader() throws IOException {\n   @Override\n   public int getContentLength() {\n     // The rewrite might change the content length so return the default of -1 to indicate the length is unknown.\n-    int contentLength = super.getContentLength();\n-    if( contentLength > 0 ) {\n-      contentLength = -1;\n-    }\n-    return contentLength;\n+    return -1;\n   }\n \n   private UrlRewriteFilterContentDescriptor getRewriteFilterConfig( String filterName, MimeType mimeType ) {",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/UrlRewriteRequest.java",
                "sha": "4197d6557ca1814ac8bc3528a23af626f7f7080e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 4,
                "filename": "gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "patch": "@@ -120,12 +120,10 @@ public int read( char[] destBuffer, int destOffset, int destCount ) throws IOExc\n         try {\n           XMLEvent event = parser.nextEvent();\n           processEvent( event );\n-        } catch( IOException e ) {\n-          throw e;\n         } catch( RuntimeException e ) {\n           throw e;\n-        } catch ( Exception e ) {\n-          throw new RuntimeException( e );\n+        } catch( Exception e ) {\n+          throw e instanceof IOException ? (IOException)e : new IOException( e );\n         }\n         available = buffer.length() - offset;\n       } else {",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/gateway-provider-rewrite/src/main/java/org/apache/hadoop/gateway/filter/rewrite/impl/xml/XmlFilterReader.java",
                "sha": "fe1682c62b47d18d14ab7b0256404fb97a61a847",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 99,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "patch": "@@ -26,8 +26,8 @@\n import java.util.Properties;\n import java.util.UUID;\n \n+import com.jayway.restassured.RestAssured;\n import org.apache.commons.io.FileUtils;\n-import org.apache.commons.io.IOUtils;\n import org.apache.directory.server.protocol.shared.transport.TcpTransport;\n import org.apache.hadoop.gateway.security.ldap.SimpleLdapDirectoryServer;\n import org.apache.hadoop.gateway.services.DefaultGatewayServices;\n@@ -37,20 +37,7 @@\n import org.apache.hadoop.test.TestUtils;\n import org.apache.hadoop.test.category.ReleaseTest;\n import org.apache.hadoop.test.mock.MockServer;\n-import org.apache.http.HttpHost;\n import org.apache.http.HttpStatus;\n-import org.apache.http.auth.AuthScope;\n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.client.AuthCache;\n-import org.apache.http.client.CredentialsProvider;\n-import org.apache.http.client.methods.CloseableHttpResponse;\n-import org.apache.http.client.methods.HttpPut;\n-import org.apache.http.client.protocol.HttpClientContext;\n-import org.apache.http.impl.auth.BasicScheme;\n-import org.apache.http.impl.client.BasicAuthCache;\n-import org.apache.http.impl.client.BasicCredentialsProvider;\n-import org.apache.http.impl.client.CloseableHttpClient;\n-import org.apache.http.impl.client.HttpClients;\n import org.apache.log4j.Appender;\n import org.hamcrest.MatcherAssert;\n import org.junit.After;\n@@ -62,15 +49,14 @@\n import org.slf4j.LoggerFactory;\n \n import static com.jayway.restassured.RestAssured.given;\n+import static com.jayway.restassured.config.ConnectionConfig.connectionConfig;\n+import static com.jayway.restassured.config.RestAssuredConfig.newConfig;\n import static org.apache.hadoop.test.TestUtils.LOG_ENTER;\n import static org.apache.hadoop.test.TestUtils.LOG_EXIT;\n-import static org.hamcrest.CoreMatchers.endsWith;\n import static org.hamcrest.CoreMatchers.equalTo;\n import static org.hamcrest.CoreMatchers.notNullValue;\n import static org.hamcrest.core.Is.is;\n import static org.junit.Assert.assertThat;\n-import static org.xmlmatchers.XmlMatchers.hasXPath;\n-import static org.xmlmatchers.transform.XmlConverters.the;\n \n @Category(ReleaseTest.class)\n public class GatewayMultiFuncTest {\n@@ -239,86 +225,4 @@ public void testDefaultJsonMimeTypeHandlingKnox678() throws Exception {\n     LOG_EXIT();\n   }\n \n-  @Test( timeout = TestUtils.MEDIUM_TIMEOUT )\n-  public void testPostWithContentTypeKnox681() throws Exception {\n-    LOG_ENTER();\n-\n-    MockServer mock = new MockServer( \"REPEAT\", true );\n-\n-    params.put( \"MOCK_SERVER_PORT\", mock.getPort() );\n-\n-    String topoStr = TestUtils.merge( DAT, \"topologies/test-knox678-utf8-chars-topology.xml\", params );\n-    File topoFile = new File( config.getGatewayTopologyDir(), \"topology.xml\" );\n-    FileUtils.writeStringToFile( topoFile, topoStr );\n-\n-    topos.reloadTopologies();\n-\n-    mock\n-        .expect()\n-        .method( \"PUT\" )\n-        .pathInfo( \"/repeat-context/\" )\n-        .respond()\n-        .status( HttpStatus.SC_CREATED )\n-        .content( \"{\\\"name\\\":\\\"value\\\"}\".getBytes() )\n-        .contentType( \"application/json; charset=UTF-8\" )\n-        .header( \"Location\", gatewayUrl + \"/topology/repeat\" );\n-\n-    String uname = \"guest\";\n-    String pword = uname + \"-password\";\n-\n-    HttpHost targetHost = new HttpHost( \"localhost\", gatewayPort, \"http\" );\n-    CredentialsProvider credsProvider = new BasicCredentialsProvider();\n-    credsProvider.setCredentials(\n-        new AuthScope( targetHost.getHostName(), targetHost.getPort() ),\n-        new UsernamePasswordCredentials( uname, pword ) );\n-\n-    AuthCache authCache = new BasicAuthCache();\n-    BasicScheme basicAuth = new BasicScheme();\n-    authCache.put( targetHost, basicAuth );\n-\n-    HttpClientContext context = HttpClientContext.create();\n-    context.setCredentialsProvider( credsProvider );\n-    context.setAuthCache( authCache );\n-\n-    CloseableHttpClient client = HttpClients.createDefault();\n-    HttpPut request = new HttpPut( gatewayUrl + \"/topology/repeat\" );\n-    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n-    request.addHeader( \"Content-Type\", \"application/json\" );\n-    CloseableHttpResponse response = client.execute( request, context );\n-    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n-    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/topology/repeat\" ) );\n-    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/json; charset=UTF-8\") );\n-    String body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n-    assertThat( body, is( \"{\\\"name\\\":\\\"value\\\"}\" ) );\n-    response.close();\n-    client.close();\n-\n-    mock\n-        .expect()\n-        .method( \"PUT\" )\n-        .pathInfo( \"/repeat-context/\" )\n-        .respond()\n-        .status( HttpStatus.SC_CREATED )\n-        .content( \"<test-xml/>\".getBytes() )\n-        .contentType( \"application/xml; charset=UTF-8\" )\n-        .header( \"Location\", gatewayUrl + \"/topology/repeat\" );\n-\n-    client = HttpClients.createDefault();\n-    request = new HttpPut( gatewayUrl + \"/topology/repeat\" );\n-    request.addHeader( \"X-XSRF-Header\", \"jksdhfkhdsf\" );\n-    request.addHeader( \"Content-Type\", \"application/xml\" );\n-    response = client.execute( request, context );\n-    assertThat( response.getStatusLine().getStatusCode(), is( HttpStatus.SC_CREATED ) );\n-    assertThat( response.getFirstHeader( \"Location\" ).getValue(), endsWith(\"/gateway/topology/repeat\" ) );\n-    assertThat( response.getFirstHeader( \"Content-Type\" ).getValue(), is(\"application/xml; charset=UTF-8\") );\n-    body = new String( IOUtils.toByteArray( response.getEntity().getContent() ), Charset.forName( \"UTF-8\" ) );\n-    assertThat( the(body), hasXPath( \"/test-xml\" ) );\n-    response.close();\n-    client.close();\n-\n-    LOG_EXIT();\n-  }\n-\n }\n-\n-",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/java/org/apache/hadoop/gateway/GatewayMultiFuncTest.java",
                "sha": "8c29ce5caf055f4155905435071a4354d6f08949",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 1,
                "filename": "gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "patch": "@@ -181,7 +181,6 @@ public void testOozieRewriteRulesForValuesRelativeToServiceRegistry() throws Exc\n     HttpServletRequest servletRequest = EasyMock.createNiceMock( HttpServletRequest.class );\n     EasyMock.expect( servletRequest.getInputStream() ).andReturn( new MockServletInputStream( TestUtils.getResourceStream( OozieServiceDefinitionTest.class, testResource ) ) ).anyTimes();\n     EasyMock.expect( servletRequest.getContentType() ).andReturn( \"text/xml\" ).anyTimes();\n-    EasyMock.expect( servletRequest.getContentLength() ).andReturn( -1 ).anyTimes();\n \n     FilterConfig filterConfig = EasyMock.createNiceMock( FilterConfig.class );\n     EasyMock.expect( filterConfig.getServletContext() ).andReturn( servletContext ).anyTimes();",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/java/org/apache/hadoop/gateway/OozieServiceDefinitionTest.java",
                "sha": "b2f982bac3ce3340b2bf409a92f3aba49d19cae8",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml?ref=8bee25912d72500a800e1759185ef5330cc3a995",
                "deletions": 1,
                "filename": "gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "patch": "@@ -49,6 +49,6 @@\n     </gateway>\n     <service>\n         <role>REPEAT</role>\n-        <url>http://localhost:$MOCK_SERVER_PORT/repeat-context</url>\n+        <url>http://localhost:${MOCK_SERVER_PORT}/repeat-context</url>\n     </service>\n </topology>",
                "raw_url": "https://github.com/apache/knox/raw/8bee25912d72500a800e1759185ef5330cc3a995/gateway-test/src/test/resources/org/apache/hadoop/gateway/GatewayMultiFuncTest/topologies/test-knox678-utf8-chars-topology.xml",
                "sha": "fbbab487b89a4cece040c635cc4db66263974a99",
                "status": "modified"
            }
        ],
        "message": "Revert \"[KNOX-681] - A PUT with Content-Type application/xml but no body causes NullPointerException\"\n\nThis reverts commit 8a6545109f257977838e015820ca9f1ca18aac74.",
        "parent": "https://github.com/apache/knox/commit/8a6545109f257977838e015820ca9f1ca18aac74",
        "patched_files": [
            "test-knox678-utf8-chars-topology.xml",
            "CHANGES",
            "XmlFilterReader.java",
            "UrlRewriteRequest.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "OozieServiceDefinitionTest.java",
            "GatewayMultiFuncTest.java",
            "XmlFilterReaderTest.java"
        ]
    },
    "knox_9b611ae": {
        "bug_id": "knox_9b611ae",
        "commit": "https://github.com/apache/knox/commit/9b611aea89a7ff0ef9205e071e076c92b4afccdf",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/pom.xml?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 0,
                "filename": "gateway-server/pom.xml",
                "patch": "@@ -354,6 +354,10 @@\n             <groupId>com.sun.xml.bind</groupId>\n             <artifactId>jaxb-impl</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.knox</groupId>\n+            <artifactId>gateway-util-configinjector</artifactId>\n+        </dependency>\n \n         <!-- ********** ********** ********** ********** ********** ********** -->\n         <!-- ********** Test Dependencies                           ********** -->",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml",
                "sha": "1d43d9ba48457b31d385b016f44ba58b9b6d2948",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 3,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "patch": "@@ -17,10 +17,18 @@\n  */\n package org.apache.knox.gateway.services.security.impl;\n \n+import org.apache.knox.gateway.GatewayServer;\n+import org.apache.knox.gateway.config.ConfigurationException;\n import org.apache.knox.gateway.security.RemoteAliasServiceProvider;\n-import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientServiceProvider;\n+import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientService;\n+import org.apache.knox.gateway.services.GatewayServices;\n+import org.apache.knox.gateway.services.ServiceType;\n+import org.apache.knox.gateway.services.config.client.RemoteConfigurationRegistryClientService;\n import org.apache.knox.gateway.services.security.AliasService;\n import org.apache.knox.gateway.services.security.MasterService;\n+import org.apache.knox.gateway.util.KnoxCLI;\n+\n+import java.util.Locale;\n \n public class ZookeeperRemoteAliasServiceProvider implements RemoteAliasServiceProvider {\n   @Override\n@@ -30,7 +38,21 @@ public String getType() {\n \n   @Override\n   public AliasService newInstance(AliasService localAliasService, MasterService ms) {\n-    return new ZookeeperRemoteAliasService(localAliasService, ms,\n-        new ZooKeeperClientServiceProvider().newInstance());\n+\n+    final GatewayServices services = GatewayServer.getGatewayServices() != null ? GatewayServer.getGatewayServices() : KnoxCLI.getGatewayServices();\n+\n+    if(services != null) {\n+      final RemoteConfigurationRegistryClientService registryClientService = services\n+          .getService(ServiceType.REMOTE_REGISTRY_CLIENT_SERVICE);\n+\n+      /* Check to see if we already have ZooKeeperClientService instance, if so use it */\n+      if (registryClientService instanceof ZooKeeperClientService) {\n+        return new ZookeeperRemoteAliasService(localAliasService, ms,\n+            registryClientService);\n+\n+      }\n+    }\n+\n+    throw new ConfigurationException(String.format(Locale.ROOT,\"%s service not configured\", ZooKeeperClientService.TYPE));\n   }\n }",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "sha": "52c4462fb86b8b6d1d3169e2ee98dd282c13063e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 1,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "patch": "@@ -171,7 +171,7 @@ public int run(String[] args) throws Exception {\n     return exitCode;\n   }\n \n-  GatewayServices getGatewayServices() {\n+  public static synchronized GatewayServices getGatewayServices() {\n     return services;\n   }\n ",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "sha": "daae9f3c482e2f5b259e09493e40c7f334a428e0",
                "status": "modified"
            }
        ],
        "message": "KNOX-1851 - Fix NPE in Zookeeper Remote Alias Service (#86)",
        "parent": "https://github.com/apache/knox/commit/07d4af68bfec827d182c8e3a0967b680cad9b883",
        "patched_files": [
            "pom.xml",
            "KnoxCLI.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "KnoxCLITest.java"
        ]
    },
    "knox_b3923f2": {
        "bug_id": "knox_b3923f2",
        "commit": "https://github.com/apache/knox/commit/b3923f29ddfee3b10ed99097480aefacb3878f04",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/pom.xml?ref=b3923f29ddfee3b10ed99097480aefacb3878f04",
                "deletions": 0,
                "filename": "gateway-provider-security-jwt/pom.xml",
                "patch": "@@ -76,5 +76,10 @@\n             <artifactId>gateway-test-utils</artifactId>\n             <scope>test</scope>\n         </dependency>\n+        <dependency>\n+            <groupId>org.slf4j</groupId>\n+            <artifactId>slf4j-api</artifactId>\n+            <scope>test</scope>\n+        </dependency>\n     </dependencies>\n </project>",
                "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/pom.xml",
                "sha": "7fa0ba502d64b8a23cc4f726b9581a9eda34819d",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04",
                "deletions": 13,
                "filename": "gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java",
                "patch": "@@ -39,8 +39,11 @@\n import java.text.ParseException;\n \n public class SSOCookieFederationFilter extends AbstractJWTFilter {\n+  public static final String XHR_HEADER = \"X-Requested-With\";\n+  public static final String XHR_VALUE = \"XMLHttpRequest\";\n+\n   private static final String GATEWAY_PATH = \"gateway.path\";\n-public static final String SSO_COOKIE_NAME = \"sso.cookie.name\";\n+  public static final String SSO_COOKIE_NAME = \"sso.cookie.name\";\n   public static final String SSO_EXPECTED_AUDIENCES = \"sso.expected.audiences\";\n   public static final String SSO_AUTHENTICATION_PROVIDER_URL = \"sso.authentication.provider.url\";\n   public static final String SSO_VERIFICATION_PEM = \"sso.token.verification.pem\";\n@@ -50,13 +53,11 @@\n \n   private static final String ORIGINAL_URL_QUERY_PARAM = \"originalUrl=\";\n   private static final String DEFAULT_SSO_COOKIE_NAME = \"hadoop-jwt\";\n-  private static final String XHR_HEADER = \"X-Requested-With\";\n-  private static final String XHR_VALUE = \"XMLHttpRequest\";\n   private static JWTMessages log = MessagesFactory.get( JWTMessages.class );\n \n   private String cookieName;\n   private String authenticationProviderUrl;\n-private String gatewayPath;\n+  private String gatewayPath;\n \n   @Override\n   public void init( FilterConfig filterConfig ) throws ServletException {\n@@ -130,19 +131,20 @@ public void doFilter(ServletRequest request, ServletResponse response, FilterCha\n   }\n \n   @Override\n-  protected void handleValidationError(HttpServletRequest request, HttpServletResponse response, int status,\n-                                       String error) throws IOException {\n-    String loginURL = constructLoginURL(request);\n-\n+  protected void handleValidationError(HttpServletRequest request, HttpServletResponse response,\n+                                       int status, String error) throws IOException {\n     /* We don't need redirect if this is a XHR request */\n-    if (request.getHeader(XHR_HEADER) != null && request.getHeader(XHR_HEADER)\n-        .equalsIgnoreCase(XHR_VALUE)) {\n-      final byte[] data = error.getBytes(StandardCharsets.UTF_8);\n+    if (request.getHeader(XHR_HEADER) != null &&\n+            request.getHeader(XHR_HEADER).equalsIgnoreCase(XHR_VALUE)) {\n       response.setStatus(HttpServletResponse.SC_UNAUTHORIZED);\n       response.setContentType(MimeTypes.Type.TEXT_PLAIN.toString());\n-      response.setContentLength(data.length);\n-      response.getOutputStream().write(data);\n+      if(error != null && !error.isEmpty()) {\n+        final byte[] data = error.getBytes(StandardCharsets.UTF_8);\n+        response.setContentLength(data.length);\n+        response.getOutputStream().write(data);\n+      }\n     } else {\n+      String loginURL = constructLoginURL(request);\n       response.sendRedirect(loginURL);\n     }\n ",
                "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/main/java/org/apache/knox/gateway/provider/federation/jwt/filter/SSOCookieFederationFilter.java",
                "sha": "cbdbbd1cfd8552a7ba2355f4bedc10be02342686",
                "status": "modified"
            },
            {
                "additions": 273,
                "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java",
                "changes": 292,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04",
                "deletions": 19,
                "filename": "gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java",
                "patch": "@@ -43,8 +43,10 @@\n import javax.servlet.FilterConfig;\n import javax.servlet.ServletContext;\n import javax.servlet.ServletException;\n+import javax.servlet.ServletOutputStream;\n import javax.servlet.ServletRequest;\n import javax.servlet.ServletResponse;\n+import javax.servlet.WriteListener;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import java.net.InetAddress;\n@@ -127,7 +129,21 @@ public void testValidJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -159,7 +175,21 @@ public void testValidAudienceJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -193,7 +223,21 @@ public void testInvalidAudienceJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -223,7 +267,21 @@ public void testValidAudienceJWTWhitespace() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -255,7 +313,21 @@ public void testNoTokenAudience() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -284,7 +356,21 @@ public void testNoAudienceConfigured() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -316,7 +402,21 @@ public void testEmptyAudienceConfigured() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -351,7 +451,21 @@ public void testValidVerificationPEM() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -371,7 +485,7 @@ public void testExpiredJWT() throws Exception {\n       handler.init(new TestFilterConfig(props));\n \n       SignedJWT jwt = getJWT(AbstractJWTFilter.JWT_DEFAULT_ISSUER, \"alice\",\n-                             new Date(new Date().getTime() - 1000), privateKey);\n+          new Date(new Date().getTime() - 1000), privateKey);\n \n       HttpServletRequest request = EasyMock.createNiceMock(HttpServletRequest.class);\n       setTokenOnRequest(request, jwt);\n@@ -382,7 +496,21 @@ public void testExpiredJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -410,7 +538,21 @@ public void testValidJWTNoExpiration() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -441,7 +583,21 @@ public void testUnableToParseJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -476,7 +632,21 @@ public void testFailedSignatureValidationJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL).anyTimes();\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -517,7 +687,21 @@ public void testInvalidVerificationPEM() throws Exception {\n       EasyMock.expect(request.getQueryString()).andReturn(null);\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -545,7 +729,21 @@ public void testInvalidIssuer() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -574,7 +772,21 @@ public void testValidIssuerViaConfig() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -606,7 +818,21 @@ public void testRS512SignatureAlgorithm() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -637,7 +863,21 @@ public void testInvalidSignatureAlgorithm() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);\n@@ -668,7 +908,21 @@ public void testNotBeforeJWT() throws Exception {\n       HttpServletResponse response = EasyMock.createNiceMock(HttpServletResponse.class);\n       EasyMock.expect(response.encodeRedirectURL(SERVICE_URL)).andReturn(\n           SERVICE_URL);\n-      EasyMock.replay(request);\n+      EasyMock.expect(response.getOutputStream()).andAnswer(() -> new ServletOutputStream() {\n+        @Override\n+        public void write(int b) {\n+        }\n+\n+        @Override\n+        public void setWriteListener(WriteListener arg0) {\n+        }\n+\n+        @Override\n+        public boolean isReady() {\n+          return false;\n+        }\n+      }).anyTimes();\n+      EasyMock.replay(request, response);\n \n       TestFilterChain chain = new TestFilterChain();\n       handler.doFilter(request, response, chain);",
                "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/AbstractJWTFilterTest.java",
                "sha": "e46d2b922d1b0d322172ed5ab194b87ba0b4c670",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/knox/blob/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java?ref=b3923f29ddfee3b10ed99097480aefacb3878f04",
                "deletions": 0,
                "filename": "gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java",
                "patch": "@@ -17,12 +17,15 @@\n  */\n package org.apache.knox.gateway.provider.federation;\n \n+import static org.apache.knox.gateway.provider.federation.jwt.filter.SSOCookieFederationFilter.XHR_HEADER;\n+import static org.apache.knox.gateway.provider.federation.jwt.filter.SSOCookieFederationFilter.XHR_VALUE;\n import static org.junit.Assert.fail;\n \n import java.security.Principal;\n import java.util.Properties;\n import java.util.Date;\n import java.util.Set;\n+import java.util.concurrent.ThreadLocalRandom;\n \n import javax.servlet.ServletException;\n import javax.servlet.http.Cookie;\n@@ -39,8 +42,12 @@\n import org.junit.Test;\n \n import com.nimbusds.jwt.SignedJWT;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SSOCookieProviderTest extends AbstractJWTFilterTest {\n+  private static Logger LOGGER = LoggerFactory.getLogger(SSOCookieProviderTest.class);\n+\n   private static final String SERVICE_URL = \"https://localhost:8888/resource\";\n \n   @Before\n@@ -53,6 +60,11 @@ public void setUp() {\n   protected void setTokenOnRequest(HttpServletRequest request, SignedJWT jwt) {\n     Cookie cookie = new Cookie(\"hadoop-jwt\", jwt.serialize());\n     EasyMock.expect(request.getCookies()).andReturn(new Cookie[] { cookie });\n+\n+    if(ThreadLocalRandom.current().nextBoolean()) {\n+      LOGGER.info(\"Using XHR header for request\");\n+      EasyMock.expect(request.getHeader(XHR_HEADER)).andReturn(XHR_VALUE).anyTimes();\n+    }\n   }\n \n   @Override",
                "raw_url": "https://github.com/apache/knox/raw/b3923f29ddfee3b10ed99097480aefacb3878f04/gateway-provider-security-jwt/src/test/java/org/apache/knox/gateway/provider/federation/SSOCookieProviderTest.java",
                "sha": "4555461f67be924b5bb436cf5c5eef0d24b1e7a6",
                "status": "modified"
            }
        ],
        "message": "KNOX-2070 - SSOCookieFederationFilter NPE (#170)\n\nSigned-off-by: Kevin Risden <krisden@apache.org>",
        "parent": "https://github.com/apache/knox/commit/1bdbdee67be13cc3b83605350536ffc246fb722e",
        "patched_files": [
            "pom.xml",
            "SSOCookieFederationFilter.java",
            "AbstractJWTFilter.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "AbstractJWTFilterTest.java",
            "SSOCookieProviderTest.java"
        ]
    },
    "knox_c061d20": {
        "bug_id": "knox_c061d20",
        "commit": "https://github.com/apache/knox/commit/c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
                "deletions": 13,
                "filename": "gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "patch": "@@ -80,19 +80,21 @@ public synchronized void setURLs(List<String> urls) {\n   @Override\n   public synchronized void markFailed(String url) {\n     String top = urls.peek();\n-    boolean pushToBottom = false;\n-    URI topUri = URI.create(top);\n-    URI incomingUri = URI.create(url);\n-    String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n-    String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n-    if ( topHostPort.equals(incomingHostPort) ) {\n-      pushToBottom = true;\n-    }\n-    //put the failed url at the bottom\n-    if ( pushToBottom ) {\n-      String failed = urls.poll();\n-      urls.offer(failed);\n-      LOG.markedFailedUrl(failed, urls.peek());\n+    if (top != null) {\n+      boolean pushToBottom = false;\n+      URI topUri = URI.create(top);\n+      URI incomingUri = URI.create(url);\n+      String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n+      String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n+      if (topHostPort.equals(incomingHostPort)) {\n+        pushToBottom = true;\n+      }\n+      //put the failed url at the bottom\n+      if (pushToBottom) {\n+        String failed = urls.poll();\n+        urls.offer(failed);\n+        LOG.markedFailedUrl(failed, urls.peek());\n+      }\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "sha": "8ee59a77f71e6bc7910a42d36d5dfdf6f9d3d4ae",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
                "deletions": 0,
                "filename": "gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n public class DefaultURLManagerTest {\n \n@@ -89,4 +90,20 @@ public void testMarkingFailedURL() {\n       assertEquals(url3, manager.getActiveURL());\n    }\n \n+   /**\n+    * KNOX-1283\n+    */\n+   @Test\n+   public void testMarkFailedWithEmptyURLs() {\n+      ArrayList<String> urls = new ArrayList<>();\n+      DefaultURLManager manager = new DefaultURLManager();\n+      manager.setURLs(urls);\n+      assertTrue(manager.getURLs().isEmpty());\n+      try {\n+         manager.markFailed(\"http://localhost:8080\");\n+      } catch (NullPointerException e) {\n+         fail(\"Empty URL list should not result in NPE.\");\n+      }\n+   }\n+\n }",
                "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "sha": "84defbcb69177b24b448b114275f486fe1af911e",
                "status": "modified"
            }
        ],
        "message": "KNOX-1283 - DefaultURLManager markFailed method throws NPE if urls is empty",
        "parent": "https://github.com/apache/knox/commit/12a1fd65d97ec5c584bad12c9960d58870aa974d",
        "patched_files": [
            "DefaultURLManager.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "DefaultURLManagerTest.java"
        ]
    },
    "knox_c211d05": {
        "bug_id": "knox_c211d05",
        "commit": "https://github.com/apache/knox/commit/c211d05e98c82d57eb0af61487a76f0ddd99660d",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/knox/blob/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java?ref=c211d05e98c82d57eb0af61487a76f0ddd99660d",
                "deletions": 20,
                "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "patch": "@@ -128,28 +128,29 @@ public void doFilter( ServletRequest servletRequest, ServletResponse servletResp\n     // if there was no match then look for a default service for the topology\n     if (match == null) {\n       Topology topology = (Topology) servletRequest.getServletContext().getAttribute(\"org.apache.hadoop.gateway.topology\");\n-      String defaultServicePath = topology.getDefaultServicePath();\n-      if (defaultServicePath != null) {\n-        try {\n-          String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n-          match = chains.match(Parser.parseLiteral(newPathWithQuery));\n-          String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n-          String url = origUrl;\n-          if (path.equals(\"/\")) {\n-            url += defaultServicePath;\n-          }\n-          else {\n-            int index = origUrl.indexOf(path);\n-            url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+      if (topology != null) {\n+        String defaultServicePath = topology.getDefaultServicePath();\n+        if (defaultServicePath != null) {\n+          try {\n+            String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n+            match = chains.match(Parser.parseLiteral(newPathWithQuery));\n+            String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n+            String url = origUrl;\n+            if (path.equals(\"/\")) {\n+              url += defaultServicePath;\n+            }\n+            else {\n+              int index = origUrl.indexOf(path);\n+              url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+            }\n+            String contextPath = defaultServicePath;\n+            servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n+                contextPath, \n+                url);\n+          } catch (URISyntaxException e) {\n+            throw new ServletException( e );\n           }\n-          String contextPath = defaultServicePath;\n-          servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n-              contextPath, \n-              url);\n-        } catch (URISyntaxException e) {\n-          throw new ServletException( e );\n         }\n-//        ((HttpServletRequest) servletRequest).getRequestURL();\n       }\n     }\n ",
                "raw_url": "https://github.com/apache/knox/raw/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "sha": "7617ae8b34542b03323cc3f143f9a52cfca1d659",
                "status": "modified"
            }
        ],
        "message": "KNOX-1049 - check for null topology to avoid NPE in tests",
        "parent": "https://github.com/apache/knox/commit/1ee937071b236909a38dc764db451e65a3225ad6",
        "patched_files": [
            "GatewayFilter.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "GatewayFilterTest.java"
        ]
    },
    "knox_e66c2f0": {
        "bug_id": "knox_e66c2f0",
        "commit": "https://github.com/apache/knox/commit/e66c2f07cc688c7a2eb71bd7f7a1fa99e5de0140",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/knox/blob/e66c2f07cc688c7a2eb71bd7f7a1fa99e5de0140/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java?ref=e66c2f07cc688c7a2eb71bd7f7a1fa99e5de0140",
                "deletions": 3,
                "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "patch": "@@ -752,18 +752,17 @@ public void execute() throws Exception {\n           out.println(\"Topology validation unsuccessful\");\n         }\n       } else {\n-        out.println(\"The schema file specified does not exist.\");\n+        out.println(\"The topology file specified does not exist.\");\n       }\n     }\n \n     private boolean validateTopology(String pathToFile) {\n       try {\n-        File xsd = new File(ClassLoader.getSystemResource( \"conf/topology-v1.xsd\" ).getFile());\n         File xml = new File(pathToFile);\n \n         SchemaFactory fact = SchemaFactory\n             .newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\n-        Schema s = fact.newSchema(xsd);\n+        Schema s = fact.newSchema( getClass().getClassLoader().getResource( \"conf/topology-v1.xsd\" ) );\n         Validator validator = s.newValidator();\n         final List<SAXParseException> exceptions = new LinkedList<>();\n         validator.setErrorHandler(new ErrorHandler() {\n@@ -799,6 +798,9 @@ public void error(SAXParseException exception) throws SAXException {\n         out.println(\"There was a fatal error in parsing the xml file.\");\n         out.println(e.getMessage());\n         return false;\n+      } catch (NullPointerException n) {\n+        out.println(\"Error retrieving schema from ClassLoader\");\n+        return false;\n       }\n     }\n   }",
                "raw_url": "https://github.com/apache/knox/raw/e66c2f07cc688c7a2eb71bd7f7a1fa99e5de0140/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "sha": "a163471fd574d51a3894f340c4d5b087673b5248",
                "status": "modified"
            }
        ],
        "message": "KNOX-547: Topology Validation in Knox CLI. Fix schema load from JAR NullPointerException",
        "parent": "https://github.com/apache/knox/commit/ec2eccda4df612dd982e555205209b651c1ed9d0",
        "patched_files": [
            "KnoxCLI.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "KnoxCLITest.java"
        ]
    },
    "knox_fc0e59a": {
        "bug_id": "knox_fc0e59a",
        "commit": "https://github.com/apache/knox/commit/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/knox/blob/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java?ref=fc0e59a9cf6eb77ef7f516591d9cdab5d413332f",
                "deletions": 7,
                "filename": "gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "patch": "@@ -287,13 +287,15 @@ public Cluster discover(GatewayConfig gatewayConfig, ServiceDiscoveryConfig conf\n             String configType = componentServiceConfigs.get(componentName);\n             if (configType != null) {\n                 AmbariCluster.ServiceConfiguration svcConfig = configs.get(configType);\n-                AmbariComponent c = new AmbariComponent(componentName,\n-                                                        svcConfig.getVersion(),\n-                                                        clusterName,\n-                                                        serviceName,\n-                                                        hostNames,\n-                                                        svcConfig.getProperties());\n-                cluster.addComponent(c);\n+                if (svcConfig != null) {\n+                    AmbariComponent c = new AmbariComponent(componentName,\n+                                                            svcConfig.getVersion(),\n+                                                            clusterName,\n+                                                            serviceName,\n+                                                            hostNames,\n+                                                            svcConfig.getProperties());\n+                    cluster.addComponent(c);\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/knox/raw/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "sha": "392909d0480504c97171b43ced354118d4ec3f54",
                "status": "modified"
            }
        ],
        "message": "KNOX-1288 - NPE during service discovery",
        "parent": "https://github.com/apache/knox/commit/1afbbea2eaafbb3e789a4fcd86b8bc132587fc99",
        "patched_files": [
            "AmbariServiceDiscovery.java"
        ],
        "repo": "knox",
        "unit_tests": [
            "AmbariServiceDiscoveryTest.java"
        ]
    }
}