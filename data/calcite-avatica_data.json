[{"commit": "https://github.com/apache/calcite-avatica/commit/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9", "parent": "https://github.com/apache/calcite-avatica/commit/4ad09fa0758ba482f216e5c3bf1a7a2d65fe0392", "message": "[CALCITE-2939] NPE when executeBatch array type (Bake)", "bug_id": "calcite-avatica_1", "file": [{"additions": 6, "raw_url": "https://github.com/apache/calcite-avatica/raw/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java", "sha": "9b98d2abb2e1e6102f5b9443b9d50cbbf3897756", "changes": 6, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java?ref=5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9", "patch": "@@ -359,6 +359,12 @@ private static Object serialToJdbc(ColumnMetaData.Rep type, ColumnMetaData.Rep c\n           copy.add(serialToJdbc(componentRep, null, o, calendar));\n         }\n       }\n+      if (componentRep == null && list.size() > 0) {\n+        componentRep = ((TypedValue) list.get(0)).type;\n+        if (componentRep == null) {\n+          throw new RuntimeException(\"ComponentRep of element must not be null for ARRAYs\");\n+        }\n+      }\n       AvaticaType elementType = new AvaticaType(componentRep.typeId, componentRep.name(),\n           componentRep);\n       return new ArrayFactoryImpl(calendar.getTimeZone()).createArray(elementType, copy);", "filename": "core/src/main/java/org/apache/calcite/avatica/remote/TypedValue.java"}, {"additions": 53, "raw_url": "https://github.com/apache/calcite-avatica/raw/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java", "sha": "d73648d4666c1914541b05c6e1adf7fc628b2591", "changes": 53, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java?ref=5c754cfebdfbb4d2061ef7f3f1e72fa0c98cbdb9", "patch": "@@ -474,6 +474,59 @@ public ArrayTypeTest(Serialization serialization, HttpServer server) {\n     }\n   }\n \n+  @Test public void testBatchInsert() throws Exception {\n+    try (Connection conn = DriverManager.getConnection(url)) {\n+      ScalarType component = ColumnMetaData.scalar(Types.VARCHAR, \"VARCHAR\", Rep.STRING);\n+      List<Array> arrays = new ArrayList<>();\n+      // Construct the data\n+      for (int i = 0; i < 5; i++) {\n+        List<String> elements = new ArrayList<>();\n+        for (int j = 0; j < 5; j++) {\n+          elements.add(i + \"_\" + j);\n+        }\n+        arrays.add(createArray(\"VARCHAR\", component, elements));\n+      }\n+\n+      String tableName = \"test_batch_insert\";\n+      // Drop and create the table\n+      try (Statement stmt = conn.createStatement()) {\n+        assertFalse(stmt.execute(Unsafe.formatLocalString(\"DROP TABLE IF EXISTS %s\", tableName)));\n+        String createTableSql = Unsafe.formatLocalString(\n+                \"CREATE TABLE %s (id integer, vals %s ARRAY)\", tableName, \"VARCHAR\");\n+        assertFalse(stmt.execute(createTableSql));\n+      }\n+\n+      // Insert records, each with an array\n+      final String dml = Unsafe.formatLocalString(\"INSERT INTO %s VALUES (?, ?)\", tableName);\n+      try (PreparedStatement stmt = conn.prepareStatement(dml)) {\n+        int i = 0;\n+        for (Array inputArray : arrays)  {\n+          stmt.setInt(1, i);\n+          stmt.setArray(2, inputArray);\n+          stmt.addBatch();\n+          i++;\n+        }\n+        assertEquals(i, stmt.executeBatch().length);\n+      }\n+\n+      // Read the records\n+      try (Statement stmt = conn.createStatement()) {\n+        ResultSet results = stmt.executeQuery(\n+                Unsafe.formatLocalString(\"SELECT * FROM %s\", tableName));\n+        assertNotNull(\"Expected a ResultSet\", results);\n+        int i = 0;\n+        for (Array expectedArray : arrays) {\n+          assertTrue(results.next());\n+          assertEquals(i++, results.getInt(1));\n+          Array actualArray = results.getArray(2);\n+\n+          PRIMITIVE_LIST_VALIDATOR.validate(expectedArray, actualArray);\n+        }\n+        assertFalse(\"Expected no more records\", results.next());\n+      }\n+    }\n+  }\n+\n   /**\n    * Creates a JDBC {@link Array} from a list of values.\n    *", "filename": "server/src/test/java/org/apache/calcite/avatica/remote/ArrayTypeTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "parent": "https://github.com/apache/calcite-avatica/commit/26fddf2a641aebf943f18b7da8f81397955f4e59", "message": "[CALCITE-1212] Fix NPE on some Cassandra projects", "bug_id": "calcite-avatica_2", "file": [{"additions": 1, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java", "sha": "c7d0973d3972f36cba683682eff39595c88c1004", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -28,7 +28,7 @@\n  */\n public enum CassandraMethod {\n   CASSANDRA_QUERYABLE_QUERY(CassandraTable.CassandraQueryable.class, \"query\",\n-      List.class, List.class, List.class, String.class);\n+      List.class, List.class, List.class, List.class, String.class);\n \n   public final Method method;\n ", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraMethod.java"}, {"additions": 5, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java", "sha": "5e55e461ffb72b31bd1667eca95dd3e904da6e06", "changes": 15, "status": "modified", "deletions": 10, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -28,8 +28,9 @@\n import org.apache.calcite.rex.RexNode;\n import org.apache.calcite.util.Pair;\n \n-import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Implementation of {@link org.apache.calcite.rel.core.Project}\n@@ -60,17 +61,11 @@ public void implement(Implementor implementor) {\n         new CassandraRules.RexToCassandraTranslator(\n             (JavaTypeFactory) getCluster().getTypeFactory(),\n             CassandraRules.cassandraFieldNames(getInput().getRowType()));\n-    final List<String> fields = new ArrayList<String>();\n+    final Map<String, String> fields = new LinkedHashMap<String, String>();\n     for (Pair<RexNode, String> pair : getNamedProjects()) {\n       final String name = pair.right;\n-      final String expr = pair.left.accept(translator);\n-\n-      // Alias the field if necessary\n-      if (name.equals(expr)) {\n-        fields.add(name);\n-      } else {\n-        fields.add(name + \" AS \" + expr);\n-      }\n+      final String originalName = pair.left.accept(translator);\n+      fields.put(originalName, name);\n     }\n     implementor.add(fields, null);\n   }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraProject.java"}, {"additions": 5, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java", "sha": "0191fd06b298efb14e4ee840df78ae6663e5071f", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -21,7 +21,9 @@\n import org.apache.calcite.rel.RelNode;\n \n import java.util.ArrayList;\n+import java.util.LinkedHashMap;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression that uses Cassandra calling convention.\n@@ -35,7 +37,7 @@\n   /** Callback for the implementation process that converts a tree of\n    * {@link CassandraRel} nodes into a CQL query. */\n   class Implementor {\n-    final List<String> selectFields = new ArrayList<String>();\n+    final Map<String, String> selectFields = new LinkedHashMap<String, String>();\n     final List<String> whereClause = new ArrayList<String>();\n     String limitValue = null;\n     final List<String> order = new ArrayList<String>();\n@@ -48,9 +50,9 @@\n      * @param fields New fields to be projected from a query\n      * @param predicates New predicates to be applied to the query\n      */\n-    public void add(List<String> fields, List<String> predicates) {\n+    public void add(Map<String, String> fields, List<String> predicates) {\n       if (fields != null) {\n-        selectFields.addAll(fields);\n+        selectFields.putAll(fields);\n       }\n       if (predicates != null) {\n         whereClause.addAll(predicates);", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRel.java"}, {"additions": 11, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java", "sha": "0e0bcb2438b93ec2be85fa3e264eccc29b249d5f", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -249,6 +249,17 @@ private CassandraProjectRule() {\n       super(LogicalProject.class, \"CassandraProjectRule\");\n     }\n \n+    @Override public boolean matches(RelOptRuleCall call) {\n+      LogicalProject project = call.rel(0);\n+      for (RexNode e : project.getProjects()) {\n+        if (!(e instanceof RexInputRef)) {\n+          return false;\n+        }\n+      }\n+\n+      return true;\n+    }\n+\n     public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraRules.java"}, {"additions": 48, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java", "sha": "c786dea45ecdcdde678ad76a07c2afef44f6fddf", "changes": 63, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -22,6 +22,7 @@\n import org.apache.calcite.linq4j.Enumerator;\n import org.apache.calcite.linq4j.QueryProvider;\n import org.apache.calcite.linq4j.Queryable;\n+import org.apache.calcite.linq4j.function.Function1;\n import org.apache.calcite.plan.RelOptCluster;\n import org.apache.calcite.plan.RelOptTable;\n import org.apache.calcite.rel.RelFieldCollation;\n@@ -42,8 +43,8 @@\n import com.datastax.driver.core.ResultSet;\n import com.datastax.driver.core.Session;\n \n-import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n \n@@ -97,6 +98,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n   public Enumerable<Object> query(final Session session) {\n     return query(session, Collections.<Map.Entry<String, Class>>emptyList(),\n+        Collections.<Map.Entry<String, String>>emptyList(),\n         Collections.<String>emptyList(), Collections.<String>emptyList(), null);\n   }\n \n@@ -108,27 +110,56 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n    * @return Enumerator of results\n    */\n   public Enumerable<Object> query(final Session session, List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n+        final List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n     // Build the type of the resulting row based on the provided fields\n     final RelDataTypeFactory typeFactory =\n         new SqlTypeFactoryImpl(RelDataTypeSystem.DEFAULT);\n     final RelDataTypeFactory.FieldInfoBuilder fieldInfo = typeFactory.builder();\n     final RelDataType rowType = protoRowType.apply(typeFactory);\n-    List<String> fieldNames = new ArrayList<String>();\n-    for (Map.Entry<String, Class> field : fields) {\n-      String fieldName = field.getKey();\n-      fieldNames.add(fieldName);\n-      SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n-      fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+\n+    Function1<String, Void> addField = new Function1<String, Void>() {\n+      public Void apply(String fieldName) {\n+        SqlTypeName typeName = rowType.getField(fieldName, true, false).getType().getSqlTypeName();\n+        fieldInfo.add(fieldName, typeFactory.createSqlType(typeName)).nullable(true);\n+        return null;\n+      }\n+    };\n+\n+    if (selectFields.isEmpty()) {\n+      for (Map.Entry<String, Class> field : fields) {\n+        addField.apply(field.getKey());\n+      }\n+    } else {\n+      for (Map.Entry<String, String> field : selectFields) {\n+        addField.apply(field.getKey());\n+      }\n     }\n+\n     final RelProtoDataType resultRowType = RelDataTypeImpl.proto(fieldInfo.build());\n \n     // Construct the list of fields to project\n-    final String selectFields;\n-    if (fields.isEmpty()) {\n-      selectFields = \"*\";\n+    final String selectString;\n+    if (selectFields.isEmpty()) {\n+      selectString = \"*\";\n     } else {\n-      selectFields = Util.toString(fieldNames, \"\", \", \", \"\");\n+      selectString = Util.toString(new Iterable<String>() {\n+        public Iterator<String> iterator() {\n+          final Iterator<Map.Entry<String, String>> selectIterator =\n+              selectFields.iterator();\n+\n+          return new Iterator<String>() {\n+            public boolean hasNext() {\n+              return selectIterator.hasNext();\n+            }\n+\n+            public String next() {\n+              Map.Entry<String, String> entry = selectIterator.next();\n+              return entry.getKey() + \" AS \" + entry.getValue();\n+            }\n+          };\n+        }\n+      }, \"\", \", \", \"\");\n     }\n \n     // Combine all predicates conjunctively\n@@ -140,7 +171,7 @@ public RelDataType getRowType(RelDataTypeFactory typeFactory) {\n \n     // Build and issue the query and return an Enumerator over the results\n     StringBuilder queryBuilder = new StringBuilder(\"SELECT \");\n-    queryBuilder.append(selectFields);\n+    queryBuilder.append(selectString);\n     queryBuilder.append(\" FROM \\\"\" + columnFamily + \"\\\"\");\n     queryBuilder.append(whereClause);\n     if (!order.isEmpty()) {\n@@ -202,8 +233,10 @@ private Session getSession() {\n      */\n     @SuppressWarnings(\"UnusedDeclaration\")\n     public Enumerable<Object> query(List<Map.Entry<String, Class>> fields,\n-        List<String> predicates, List<String> order, String limit) {\n-      return getTable().query(getSession(), fields, predicates, order, limit);\n+        List<Map.Entry<String, String>> selectFields, List<String> predicates,\n+        List<String> order, String limit) {\n+      return getTable().query(getSession(), fields, selectFields, predicates,\n+          order, limit);\n     }\n   }\n }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraTable.java"}, {"additions": 11, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java", "sha": "31bfdcc2913b92db80521fe97927a42f043a4bf9", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -43,7 +43,9 @@\n import com.google.common.collect.Lists;\n \n import java.util.AbstractList;\n+import java.util.ArrayList;\n import java.util.List;\n+import java.util.Map;\n \n /**\n  * Relational expression representing a scan of a table in a Cassandra data source.\n@@ -92,6 +94,14 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n                       }\n                     }),\n                 Pair.class));\n+    List<Map.Entry<String, String>> selectList = new ArrayList<Map.Entry<String, String>>();\n+    for (Map.Entry<String, String> entry\n+            : Pair.zip(cassandraImplementor.selectFields.keySet(),\n+                cassandraImplementor.selectFields.values())) {\n+      selectList.add(entry);\n+    }\n+    final Expression selectFields =\n+        list.append(\"selectFields\", constantArrayList(selectList, Pair.class));\n     final Expression table =\n         list.append(\"table\",\n             cassandraImplementor.table.getExpression(\n@@ -109,7 +119,7 @@ public Result implement(EnumerableRelImplementor implementor, Prefer pref) {\n         list.append(\"enumerable\",\n             Expressions.call(table,\n                 CassandraMethod.CASSANDRA_QUERYABLE_QUERY.method, fields,\n-                predicates, order, limit));\n+                selectFields, predicates, order, limit));\n     if (CalcitePrepareImpl.DEBUG) {\n       System.out.println(\"Cassandra: \" + predicates);\n     }", "filename": "cassandra/src/main/java/org/apache/calcite/adapter/cassandra/CassandraToEnumerableConverter.java"}, {"additions": 17, "raw_url": "https://github.com/apache/calcite-avatica/raw/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/6baa9c4bed1100012ebf4ef9547cbb077f2edaaf/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java", "sha": "e02e4974fb898f3fbef58a670f3b368ecdad13c3", "changes": 17, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java?ref=6baa9c4bed1100012ebf4ef9547cbb077f2edaaf", "patch": "@@ -111,6 +111,23 @@ protected boolean enabled() {\n                 + \"      CassandraFilter(condition=[=(CAST($0):VARCHAR(8) CHARACTER SET \\\"ISO-8859-1\\\" COLLATE \\\"ISO-8859-1$en_US$primary\\\", '!PUBLIC!')])\\n\");\n   }\n \n+  @Test public void testProjectAlias() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select \\\"tweet_id\\\" as \\\"foo\\\" from \\\"userline\\\" \"\n+                + \"where \\\"username\\\" = '!PUBLIC!' limit 1\")\n+        .returns(\"foo=f3c329de-d05b-11e5-b58b-90e2ba530b12\\n\");\n+  }\n+\n+  @Test public void testProjectConstant() {\n+    CalciteAssert.that()\n+        .enable(enabled())\n+        .with(TWISSANDRA)\n+        .query(\"select 'foo' as \\\"bar\\\" from \\\"userline\\\" limit 1\")\n+        .returns(\"bar=foo\\n\");\n+  }\n+\n   @Test public void testLimit() {\n     CalciteAssert.that()\n         .enable(enabled())", "filename": "cassandra/src/test/java/org/apache/calcite/test/CassandraAdapterIT.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/4d8fb0901782ee9cf59af51b989e879ce586beee", "parent": "https://github.com/apache/calcite-avatica/commit/ef2a54c8620751c56059dfb89e9b080ece516ef6", "message": "Fix a NPE.", "bug_id": "calcite-avatica_3", "file": [{"additions": 9, "raw_url": "https://github.com/apache/calcite-avatica/raw/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/4d8fb0901782ee9cf59af51b989e879ce586beee/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java", "sha": "8096eaf640369c3d5d16b97c6d810f8c67f814c4", "changes": 11, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java?ref=4d8fb0901782ee9cf59af51b989e879ce586beee", "patch": "@@ -22,6 +22,8 @@\n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Util;\n \n+import com.google.common.base.Predicates;\n+import com.google.common.collect.Iterables;\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.ImmutableMap;\n \n@@ -53,6 +55,10 @@\n           SqlTypeName.FLOAT,\n           SqlTypeName.DOUBLE);\n \n+  private static final List<SqlTypeName> COMPACT_NUMERIC_TYPES =\n+      ImmutableList.copyOf(\n+          Iterables.filter(NUMERIC_TYPES, Predicates.notNull()));\n+\n   /**\n    * Map from SqlTypeName to corresponding precedence list.\n    *\n@@ -100,8 +106,9 @@ private static SqlTypeExplicitPrecedenceList list(SqlTypeName... array) {\n   }\n \n   private static SqlTypeExplicitPrecedenceList numeric(SqlTypeName typeName) {\n-    int i = getListPosition(typeName, NUMERIC_TYPES);\n-    return new SqlTypeExplicitPrecedenceList(Util.skip(NUMERIC_TYPES, i));\n+    int i = getListPosition(typeName, COMPACT_NUMERIC_TYPES);\n+    return new SqlTypeExplicitPrecedenceList(\n+        Util.skip(COMPACT_NUMERIC_TYPES, i));\n   }\n \n   // implement RelDataTypePrecedenceList", "filename": "core/src/main/java/org/eigenbase/sql/type/SqlTypeExplicitPrecedenceList.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/0ad58ed624dfad43bfcd26881588a9d3482397c1", "parent": "https://github.com/apache/calcite-avatica/commit/3a54e54fadfcf383693555ac753e88edb8f3f5d6", "message": "Add test case for [DRILL-4407] GROUP BY subquery causes Java NPE", "bug_id": "calcite-avatica_4", "file": [{"additions": 11, "raw_url": "https://github.com/apache/calcite-avatica/raw/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq", "blob_url": "https://github.com/apache/calcite-avatica/blob/0ad58ed624dfad43bfcd26881588a9d3482397c1/core/src/test/resources/sql/subquery.iq", "sha": "d4f3a1009807b7d190dd78f250940cc76721945c", "changes": 11, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/sql/subquery.iq?ref=0ad58ed624dfad43bfcd26881588a9d3482397c1", "patch": "@@ -274,6 +274,17 @@ GROUP BY emp.deptno;\n \n !ok\n \n+# [DRILL-4407] Group by subquery causes Java NPE\n+select count(*) as c\n+from \"scott\".emp\n+group by (select deptno from \"scott\".emp where empno = 10);\n+ C\n+----\n+ 14\n+(1 row)\n+\n+!ok\n+\n !if (fixed.calcite1045) {\n # Correlated IN sub-query in WHERE clause of JOIN\n select empno from \"scott\".emp as e", "filename": "core/src/test/resources/sql/subquery.iq"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/65774b056bcd277634e0fc6f678806f15ba05e83", "parent": "https://github.com/apache/calcite-avatica/commit/e48c7627c162726f42e786a0e0b8c3042315491a", "message": "Fix traits in MongoDB adapter, and NPE in JdbcTest", "bug_id": "calcite-avatica_5", "file": [{"additions": 8, "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "sha": "0f0e1627f9a4fecc4a4e4d3d999bb1d632efbf43", "changes": 12, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -192,13 +192,17 @@\n       + \"   ]\\n\"\n       + \"}\";\n \n+  private static final ConnectionSpec SCOTT =\n+      Util.first(CalciteAssert.DB.scott,\n+          CalciteAssert.DatabaseInstance.HSQLDB.scott);\n+\n   public static final String SCOTT_SCHEMA = \"     {\\n\"\n       + \"       type: 'jdbc',\\n\"\n       + \"       name: 'SCOTT',\\n\"\n-      + \"       jdbcDriver: '\" + CalciteAssert.DB.scott.driver + \"',\\n\"\n-      + \"       jdbcUser: '\" + CalciteAssert.DB.scott.username + \"',\\n\"\n-      + \"       jdbcPassword: '\" + CalciteAssert.DB.scott.password + \"',\\n\"\n-      + \"       jdbcUrl: '\" + CalciteAssert.DB.scott.url + \"',\\n\"\n+      + \"       jdbcDriver: '\" + SCOTT.driver + \"',\\n\"\n+      + \"       jdbcUser: '\" + SCOTT.username + \"',\\n\"\n+      + \"       jdbcPassword: '\" + SCOTT.password + \"',\\n\"\n+      + \"       jdbcUrl: '\" + SCOTT.url + \"',\\n\"\n       + \"       jdbcCatalog: null,\\n\"\n       + \"       jdbcSchema: 'SCOTT'\\n\"\n       + \"     }\\n\";", "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java", "sha": "0249cce81aacf8a34a75a71d1bcf7d87578f3bb1", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -239,7 +239,7 @@ public RelNode convert(RelNode rel) {\n       return new MongoFilter(\n           rel.getCluster(),\n           traitSet,\n-          convert(filter.getInput(), traitSet),\n+          convert(filter.getInput(), out),\n           filter.getCondition());\n     }\n   }\n@@ -260,7 +260,7 @@ public RelNode convert(RelNode rel) {\n       final LogicalProject project = (LogicalProject) rel;\n       final RelTraitSet traitSet = project.getTraitSet().replace(out);\n       return new MongoProject(project.getCluster(), traitSet,\n-          convert(project.getInput(), traitSet), project.getProjects(),\n+          convert(project.getInput(), out), project.getProjects(),\n           project.getRowType());\n     }\n   }", "filename": "mongodb/src/main/java/org/apache/calcite/adapter/mongodb/MongoRules.java"}, {"additions": 14, "raw_url": "https://github.com/apache/calcite-avatica/raw/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/65774b056bcd277634e0fc6f678806f15ba05e83/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java", "sha": "bc9a9dcbbac7bdd855cbebba8bfd8b1ac10baf8a", "changes": 19, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java?ref=65774b056bcd277634e0fc6f678806f15ba05e83", "patch": "@@ -530,8 +530,15 @@ public Void apply(ResultSet resultSet) {\n             + \" min(pop) as min_pop, max(pop) as max_pop, sum(pop) as sum_pop\\n\"\n             + \"from zips group by state\")\n         .limit(2)\n-        .returns(\"C=659; STATE=WV; MIN_POP=0; MAX_POP=70185; SUM_POP=1793477\\n\"\n-            + \"C=484; STATE=WA; MIN_POP=2; MAX_POP=50515; SUM_POP=4866692\\n\");\n+        .returns(\"C=195; STATE=AK; MIN_POP=0; MAX_POP=32383; SUM_POP=544698\\n\"\n+            + \"C=567; STATE=AL; MIN_POP=0; MAX_POP=44165; SUM_POP=4040587\\n\")\n+        .queryContains(\n+            mongoChecker(\n+                \"{$project: {STATE: '$state', POP: '$pop'}}\",\n+                \"{$group: {_id: '$STATE', C: {$sum: 1}, MIN_POP: {$min: '$POP'}, MAX_POP: {$max: '$POP'}, SUM_POP: {$sum: '$POP'}}}\",\n+                \"{$project: {STATE: '$_id', C: '$C', MIN_POP: '$MIN_POP', MAX_POP: '$MAX_POP', SUM_POP: '$SUM_POP'}}\",\n+                \"{$project: {C: 1, STATE: 1, MIN_POP: 1, MAX_POP: 1, SUM_POP: 1}}\",\n+                \"{$sort: {STATE: 1}}\"));\n   }\n \n   @Test public void testGroupComposite() {\n@@ -547,9 +554,9 @@ public Void apply(ResultSet resultSet) {\n                 \"{$project: {STATE: '$state', CITY: '$city'}}\",\n                 \"{$group: {_id: {STATE: '$STATE', CITY: '$CITY'}, C: {$sum: 1}}}\",\n                 \"{$project: {_id: 0, STATE: '$_id.STATE', CITY: '$_id.CITY', C: '$C'}}\",\n-                \"{$project: {C: 1, STATE: 1, CITY: 1}}\",\n                 \"{$sort: {C: -1}}\",\n-                \"{$limit: 2}\"));\n+                \"{$limit: 2}\",\n+                \"{$project: {C: 1, STATE: 1, CITY: 1}}\"));\n   }\n \n   @Test public void testDistinctCount() {\n@@ -615,7 +622,9 @@ public Void apply(ResultSet resultSet) {\n             + \"STATE=AL; CITY=ADAMSVILLE; ZERO=0\\n\")\n         .queryContains(\n             mongoChecker(\n-                \"{$project: {STATE: '$state', CITY: '$city', ZERO: {$ifNull: [null, 0]}}}\"));\n+                \"{$project: {CITY: '$city', STATE: '$state'}}\",\n+                \"{$sort: {STATE: 1, CITY: 1}}\",\n+                \"{$project: {STATE: 1, CITY: 1, ZERO: {$ifNull: [null, 0]}}}\"));\n   }\n \n   @Test public void testFilter() {", "filename": "mongodb/src/test/java/org/apache/calcite/test/MongoAdapterTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583", "parent": "https://github.com/apache/calcite-avatica/commit/a6f65dc97ac578c886544b961cb4db40e90bcccf", "message": "[CALCITE-929] Calls to AbstractRelNode may result in NPE\n\nClose apache/incubator-calcite#158", "bug_id": "calcite-avatica_6", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite-avatica/raw/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/ee0e824d1246bb3ac4da3bfd2757d390f8ca6583/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java", "sha": "0e7facdde8f4b91dcec8fd6a845aa2a711ca3554", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java?ref=ee0e824d1246bb3ac4da3bfd2757d390f8ca6583", "patch": "@@ -159,11 +159,11 @@ public String getCorrelVariable() {\n   }\n \n   public boolean isDistinct() {\n-    return RelMetadataQuery.areRowsUnique(this);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areRowsUnique(this));\n   }\n \n   public boolean isKey(ImmutableBitSet columns) {\n-    return RelMetadataQuery.areColumnsUnique(this, columns);\n+    return Boolean.TRUE.equals(RelMetadataQuery.areColumnsUnique(this, columns));\n   }\n \n   public int getId() {", "filename": "core/src/main/java/org/apache/calcite/rel/AbstractRelNode.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/5a6b465b5b67cad20d309abe5d570e5311a03cbb", "parent": "https://github.com/apache/calcite-avatica/commit/8b0a22ee178b5f96cd2982ba75e8b36a2eb2ed5f", "message": "Fix NPE in CachingRelMetadataProvider if arg is null.", "bug_id": "calcite-avatica_7", "file": [{"additions": 11, "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java", "sha": "e3b8f23b8a2f1eaa194b9632af92694ca379322d", "changes": 12, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb", "patch": "@@ -39,6 +39,13 @@\n \n   private final RelOptPlanner planner;\n \n+  private static final Object NULL_SENTINEL = new Object() {\n+    @Override\n+    public String toString() {\n+      return \"{null}\";\n+    }\n+  };\n+\n   //~ Constructors -----------------------------------------------------------\n \n   public CachingRelMetadataProvider(\n@@ -93,7 +100,10 @@ public Object invoke(Object proxy, Method method, Object[] args)\n       builder.add(method);\n       builder.add(metadata.rel());\n       if (args != null) {\n-        builder.add(args);\n+        for (Object arg : args) {\n+          // Replace null values because ImmutableList does not allow them.\n+          builder.add(arg == null ? NULL_SENTINEL : arg);\n+        }\n       }\n       List<Object> key = builder.build();\n ", "filename": "core/src/main/java/org/eigenbase/rel/metadata/CachingRelMetadataProvider.java"}, {"additions": 23, "raw_url": "https://github.com/apache/calcite-avatica/raw/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/5a6b465b5b67cad20d309abe5d570e5311a03cbb/core/src/test/java/org/eigenbase/test/RelMetadataTest.java", "sha": "7b587fe1174b77eb63ac0db775843352bd628efc", "changes": 24, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/eigenbase/test/RelMetadataTest.java?ref=5a6b465b5b67cad20d309abe5d570e5311a03cbb", "patch": "@@ -27,6 +27,8 @@\n import com.google.common.collect.ImmutableList;\n import com.google.common.collect.Iterables;\n \n+import org.hamcrest.CoreMatchers;\n+import org.hamcrest.Matcher;\n import org.junit.Ignore;\n import org.junit.Test;\n \n@@ -62,6 +64,10 @@\n \n   //~ Methods ----------------------------------------------------------------\n \n+  private static Matcher<? super Number> nearTo(Number v, Number epsilon) {\n+    return CoreMatchers.equalTo(v); // TODO: use epsilon\n+  }\n+\n   // ----------------------------------------------------------------------\n   // Tests for getPercentageOriginalRows\n   // ----------------------------------------------------------------------\n@@ -476,7 +482,7 @@ private void checkRelSelectivity(\n     RelNode rel =\n         convertSql(\n             \"select * from (select * from emp union all select * from emp) \"\n-            + \"where deptno = 10\");\n+                + \"where deptno = 10\");\n     checkRelSelectivity(rel, DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n@@ -490,6 +496,22 @@ private void checkRelSelectivity(\n         DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY);\n   }\n \n+  /** Checks that we can cache a metadata request that includes a null\n+   * argument. */\n+  @Test public void testSelectivityAggCached() {\n+    RelNode rel =\n+        convertSql(\n+            \"select deptno, count(*) from emp where deptno > 10 \"\n+            + \"group by deptno having count(*) = 0\");\n+    rel.getCluster().setMetadataProvider(\n+        new CachingRelMetadataProvider(\n+            rel.getCluster().getMetadataProvider(),\n+            rel.getCluster().getPlanner()));\n+    Double result = RelMetadataQuery.getSelectivity(rel, null);\n+    assertThat(result,\n+        nearTo(DEFAULT_COMP_SELECTIVITY * DEFAULT_EQUAL_SELECTIVITY, EPSILON));\n+  }\n+\n   @Test public void testDistinctRowCountTable() {\n     // no unique key information is available so return null\n     RelNode rel = convertSql(\"select * from emp where deptno = 10\");", "filename": "core/src/test/java/org/eigenbase/test/RelMetadataTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/1580bd0fec62d836c9870edc339b0ab99d909cad", "parent": "https://github.com/apache/calcite-avatica/commit/2376ae4a876b421ee19c2b2a05a6bd1d306e442b", "message": "[CALCITE-821] Frameworks gives NPE when FrameworkConfig has no default schema", "bug_id": "calcite-avatica_8", "file": [{"additions": 3, "raw_url": "https://github.com/apache/calcite-avatica/raw/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/1580bd0fec62d836c9870edc339b0ab99d909cad/core/src/main/java/org/apache/calcite/tools/Frameworks.java", "sha": "f3ebe1212b0ed5517660f8ba4f71061157956668", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/tools/Frameworks.java?ref=1580bd0fec62d836c9870edc339b0ab99d909cad", "patch": "@@ -33,6 +33,7 @@\n import org.apache.calcite.sql.parser.SqlParser;\n import org.apache.calcite.sql2rel.SqlRexConvertletTable;\n import org.apache.calcite.sql2rel.StandardConvertletTable;\n+import org.apache.calcite.util.Util;\n \n import com.google.common.base.Preconditions;\n import com.google.common.collect.ImmutableList;\n@@ -107,7 +108,8 @@ public abstract R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n           public R apply(RelOptCluster cluster, RelOptSchema relOptSchema,\n               SchemaPlus rootSchema, CalciteServerStatement statement) {\n             final CalciteSchema schema =\n-                CalciteSchema.from(config.getDefaultSchema());\n+                CalciteSchema.from(\n+                    Util.first(config.getDefaultSchema(), rootSchema));\n             return action.apply(cluster, relOptSchema, schema.root().plus());\n           }\n         });", "filename": "core/src/main/java/org/apache/calcite/tools/Frameworks.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "parent": "https://github.com/apache/calcite-avatica/commit/ca871d3776646e94e6b1a1d61692c6d80777952f", "message": "Test case and NPE patch for [CALCITE-661] Remote fetch in Calcite JDBC driver (Yeong Wei)", "bug_id": "calcite-avatica_9", "file": [{"additions": 3, "raw_url": "https://github.com/apache/calcite-avatica/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java", "sha": "455e55e21f7017a3b9ca21004807a0d60ab13de2", "changes": 5, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "patch": "@@ -471,8 +471,9 @@ public MetaResultSet getTableTypes() {\n     final StatementHandle h = createStatement(ch);\n     final CalciteConnectionImpl calciteConnection = getConnection();\n     CalciteServerStatement statement = calciteConnection.server.getStatement(h);\n-    calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n-        maxRowCount);\n+    h.signature =\n+        calciteConnection.parseQuery(sql, statement.createPrepareContext(),\n+            maxRowCount);\n     return h;\n   }\n ", "filename": "core/src/main/java/org/apache/calcite/jdbc/CalciteMetaImpl.java"}, {"additions": 12, "raw_url": "https://github.com/apache/calcite-avatica/raw/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/88a6c5bdd2437eecabe05181c892957ff6b1ac5c/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java", "sha": "c19216a48eeba9dfd65ec4603384a759f01d6320", "changes": 12, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java?ref=88a6c5bdd2437eecabe05181c892957ff6b1ac5c", "patch": "@@ -408,6 +408,18 @@ public void testAvaticaStatementException() throws Exception {\n     remoteConnection.createStatement().getMoreResults();\n   }\n \n+  @Test public void testRemotePreparedStatement() throws Exception {\n+    final PreparedStatement preparedStatement =\n+        remoteConnection.prepareStatement(\"select * from \\\"hr\\\".\\\"emps\\\"\");\n+    ResultSet resultSet = preparedStatement.executeQuery();\n+    int count = 0;\n+    while (resultSet.next()) {\n+      count += 1;\n+    }\n+    // TODO: implement remote fetch\n+    //assertTrue(count > 0);\n+  }\n+\n   /** A bunch of sample values of various types. */\n   private static final List<Object> SAMPLE_VALUES =\n       ImmutableList.<Object>of(false, true,", "filename": "core/src/test/java/org/apache/calcite/jdbc/CalciteRemoteDriverTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "parent": "https://github.com/apache/calcite-avatica/commit/4c47a15cd156ef6b6aadbda63a896b065b44498c", "message": "Fix NPE using TRIM function with JDBC.\n\nSymbols have a null family.", "bug_id": "calcite-avatica_10", "file": [{"additions": 5, "raw_url": "https://github.com/apache/calcite-avatica/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java", "sha": "b565a496a344e2fad30a98e1849cd764b0b2c2d5", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "patch": "@@ -30,6 +30,7 @@\n import org.eigenbase.sql.fun.SqlStdOperatorTable;\n import org.eigenbase.sql.parser.SqlParserPos;\n import org.eigenbase.sql.type.BasicSqlType;\n+import org.eigenbase.sql.type.SqlTypeName;\n import org.eigenbase.sql.validate.SqlValidatorUtil;\n import org.eigenbase.util.Pair;\n import org.eigenbase.util.Util;\n@@ -117,6 +118,10 @@ SqlNode toSql(RexProgram program, RexNode rex) {\n \n       case LITERAL:\n         final RexLiteral literal = (RexLiteral) rex;\n+        if (literal.getTypeName().equals(SqlTypeName.SYMBOL)) {\n+          return SqlLiteral\n+              .createSymbol((SqlLiteral.SqlSymbol) literal.getValue(), POS);\n+        }\n         switch (literal.getTypeName().getFamily()) {\n         case CHARACTER:\n           return SqlLiteral.createCharString((String) literal.getValue2(), POS);", "filename": "core/src/main/java/net/hydromatic/optiq/impl/jdbc/JdbcImplementor.java"}, {"additions": 14, "raw_url": "https://github.com/apache/calcite-avatica/raw/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "sha": "c117345b55f9eacb338ce118890dcd5cbd64578f", "changes": 14, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=92cb0b67a21cd9bdd6ca622e416ef0d6c4a03e3c", "patch": "@@ -2183,6 +2183,20 @@ private void checkNullableTimestamp(OptiqAssert.Config config) {\n     predicate(\"\\\"name\\\" not in ('a', 'b', null) and \\\"name\\\" is not null\");\n   }\n \n+  @Test public void testTrim() {\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(\\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=Nowmer\\n\");\n+\n+    OptiqAssert.that()\n+        .withModel(FOODMART_MODEL)\n+        .query(\"select trim(leading 'N' from \\\"lname\\\") as \\\"lname\\\" \"\n+            + \"from \\\"customer\\\" where \\\"lname\\\" = 'Nowmer'\")\n+        .returns(\"lname=owmer\\n\");\n+  }\n+\n   private OptiqAssert.AssertQuery predicate(String foo) {\n     return OptiqAssert.that()\n         .with(OptiqAssert.Config.REGULAR)", "filename": "core/src/test/java/net/hydromatic/optiq/test/JdbcTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/387bee8b616623d91103751e8afe6d7c21842446", "parent": "https://github.com/apache/calcite-avatica/commit/5b0e70c7457d23f7cf5ddb74c78395f5ad45476c", "message": "Fix bug where non-existent directory would give NPE. Instead print warning.", "bug_id": "calcite-avatica_11", "file": [{"additions": 4, "raw_url": "https://github.com/apache/calcite-avatica/raw/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/387bee8b616623d91103751e8afe6d7c21842446/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java", "sha": "8640228582add0586a43a4fb0edc66e94d4bd5a7", "changes": 4, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java?ref=387bee8b616623d91103751e8afe6d7c21842446", "patch": "@@ -67,6 +67,10 @@ public boolean accept(File dir, String name) {\n             return name.endsWith(\".csv\");\n           }\n         });\n+    if (files == null) {\n+      System.out.println(\"directory \" + directoryFile + \" not found\");\n+      files = new File[0];\n+    }\n     for (File file : files) {\n       String tableName = file.getName();\n       if (tableName.endsWith(\".csv\")) {", "filename": "src/main/java/net/hydromatic/optiq/impl/csv/CsvSchema.java"}, {"additions": 29, "raw_url": "https://github.com/apache/calcite-avatica/raw/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/387bee8b616623d91103751e8afe6d7c21842446/src/test/java/net/hydromatic/optiq/test/CsvTest.java", "sha": "a7869091924d39c6afc615d3e36e89d7f396cdad", "changes": 29, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/CsvTest.java?ref=387bee8b616623d91103751e8afe6d7c21842446", "patch": "@@ -71,6 +71,35 @@ private void close(Connection connection, Statement statement) {\n     connection.close();\n   }\n \n+  /** Tests an inline schema with a non-existent directory. */\n+  @Test public void testBadDirectory() throws SQLException {\n+    Properties info = new Properties();\n+    info.put(\"model\",\n+        \"inline:\"\n+        + \"{\\n\"\n+        + \"  version: '1.0',\\n\"\n+        + \"   schemas: [\\n\"\n+        + \"     {\\n\"\n+        + \"       type: 'custom',\\n\"\n+        + \"       name: 'bad',\\n\"\n+        + \"       factory: 'net.hydromatic.optiq.impl.csv.CsvSchemaFactory',\\n\"\n+        + \"       operand: {\\n\"\n+        + \"         directory: '/does/not/exist'\\n\"\n+        + \"       }\\n\"\n+        + \"     }\\n\"\n+        + \"   ]\\n\"\n+        + \"}\");\n+\n+    Connection connection =\n+        DriverManager.getConnection(\"jdbc:optiq:\", info);\n+    // must print \"directory ... not found\" to stdout, but not fail\n+    ResultSet tables =\n+        connection.getMetaData().getTables(null, null, null, null);\n+    tables.next();\n+    tables.close();\n+    connection.close();\n+  }\n+\n   /**\n    * Reads from a table.\n    */", "filename": "src/test/java/net/hydromatic/optiq/test/CsvTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/fcdb825e892d39c7f2157e05a68add24bddc82db", "parent": "https://github.com/apache/calcite-avatica/commit/6bf299263c39c353e600c4285f3291f4462d5236", "message": "Fix a type-cast issue in DatabaseMetaData.getColumns(), and an NPE handling a switched CASE expression.", "bug_id": "calcite-avatica_12", "file": [{"additions": 30, "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "sha": "882a39f1b440373c6a7b02f8c96112e84a9161cc", "changes": 32, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -24,12 +24,13 @@\n import net.hydromatic.optiq.*;\n import net.hydromatic.optiq.impl.TableInSchemaImpl;\n import net.hydromatic.optiq.impl.java.MapSchema;\n-\n import net.hydromatic.optiq.runtime.*;\n \n import org.eigenbase.reltype.*;\n import org.eigenbase.util.Pair;\n \n+import com.google.common.collect.ImmutableMap;\n+\n import java.lang.reflect.Field;\n import java.sql.*;\n import java.sql.Types;\n@@ -451,6 +452,28 @@ public String getName() {\n   }\n \n   private static class NamedFieldGetter {\n+    private static final Map<Class, Pair<Integer, String>> MAP =\n+        ImmutableMap.<Class, Pair<Integer, String>>builder()\n+            .put(boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(Boolean.class, Pair.of(Types.BOOLEAN, \"BOOLEAN\"))\n+            .put(byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(Byte.class, Pair.of(Types.TINYINT, \"TINYINT\"))\n+            .put(short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(Short.class, Pair.of(Types.SMALLINT, \"SMALLINT\"))\n+            .put(int.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(Integer.class, Pair.of(Types.INTEGER, \"INTEGER\"))\n+            .put(long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(Long.class, Pair.of(Types.BIGINT, \"BIGINT\"))\n+            .put(float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(Float.class, Pair.of(Types.FLOAT, \"FLOAT\"))\n+            .put(double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(Double.class, Pair.of(Types.DOUBLE, \"DOUBLE\"))\n+            .put(String.class, Pair.of(Types.VARCHAR, \"VARCHAR\"))\n+            .put(java.sql.Date.class, Pair.of(Types.DATE, \"DATE\"))\n+            .put(Time.class, Pair.of(Types.TIME, \"TIME\"))\n+            .put(Timestamp.class, Pair.of(Types.TIMESTAMP, \"TIMESTAMP\"))\n+            .build();\n+\n     private final List<Field> fields = new ArrayList<Field>();\n     private final List<ColumnMetaData> columnNames =\n         new ArrayList<ColumnMetaData>();\n@@ -465,19 +488,24 @@ public NamedFieldGetter(Class clazz, String... names) {\n         } catch (NoSuchFieldException e) {\n           throw new RuntimeException(e);\n         }\n+        Pair<Integer, String> pair = lookupType(field.getType());\n         columnNames.add(\n             new ColumnMetaData(\n                 index, false, true, false, false,\n                 Primitive.is(field.getType())\n                     ? DatabaseMetaData.columnNullable\n                     : DatabaseMetaData.columnNoNulls,\n                 true, -1, name, name, null,\n-                0, 0, null, null, Types.VARCHAR, \"VARCHAR\", true,\n+                0, 0, null, null, pair.left, pair.right, true,\n                 false, false, null, field.getType()));\n         fields.add(field);\n       }\n     }\n \n+    private Pair<Integer, String> lookupType(Class<?> type) {\n+      return MAP.get(type);\n+    }\n+\n     private String uncamel(String name) {\n       StringBuilder buf = new StringBuilder();\n       int nextUpper = -1;", "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java"}, {"additions": 4, "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java", "sha": "47a79e1fd7cad23ed6d9cb8a24e37eb5a25bf610", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -4652,7 +4652,10 @@ public Void visit(SqlCall call)\n                 return null;\n             } else {\n                 for (SqlNode operand : call.operands) {\n-                    operand.accept(this);\n+                    // Operands are occasionally null, e.g. switched CASE arg 0.\n+                    if (operand != null) {\n+                        operand.accept(this);\n+                    }\n                 }\n             }\n             return null;", "filename": "src/main/java/org/eigenbase/sql2rel/SqlToRelConverter.java"}, {"additions": 28, "raw_url": "https://github.com/apache/calcite-avatica/raw/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/fcdb825e892d39c7f2157e05a68add24bddc82db/src/test/java/net/hydromatic/optiq/test/JdbcTest.java", "sha": "9ea8ed5b163dd2687a1e3619387c99fed41c828c", "changes": 28, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/JdbcTest.java?ref=fcdb825e892d39c7f2157e05a68add24bddc82db", "patch": "@@ -435,6 +435,14 @@ public void onStatementClose(OptiqStatement statement) {\n     DatabaseMetaData metaData = connection.getMetaData();\n     ResultSet resultSet = metaData.getColumns(null, null, null, null);\n     assertTrue(resultSet.next()); // there's something\n+    String name = resultSet.getString(4);\n+    int type = resultSet.getInt(5);\n+    String typeName = resultSet.getString(6);\n+    int columnSize = resultSet.getInt(7);\n+    int decimalDigits = resultSet.getInt(9);\n+    int numPrecRadix = resultSet.getInt(10);\n+    int charOctetLength = resultSet.getInt(16);\n+    String isNullable = resultSet.getString(18);\n     resultSet.close();\n     connection.close();\n   }\n@@ -463,6 +471,16 @@ public void onStatementClose(OptiqStatement statement) {\n     connection.close();\n   }\n \n+  /** Tests some queries that have expedited processing because connection pools\n+   * like to use them to check whether the connection is alive.\n+   */\n+  @Test public void testSimple() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\"SELECT 1\")\n+        .returns(\"EXPR$0=1\\n\");\n+  }\n+\n   @Test public void testCloneSchema()\n       throws ClassNotFoundException, SQLException {\n     final OptiqConnection connection = JdbcTest.getConnection(null, false);\n@@ -533,6 +551,16 @@ public void onStatementClose(OptiqStatement statement) {\n             + \"\\n\");\n   }\n \n+  @Test public void testOrderByCase() {\n+    OptiqAssert.assertThat()\n+        .with(OptiqAssert.Config.FOODMART_CLONE)\n+        .query(\n+            \"select \\\"time_by_day\\\".\\\"the_year\\\" as \\\"c0\\\" from \\\"time_by_day\\\" as \\\"time_by_day\\\" group by \\\"time_by_day\\\".\\\"the_year\\\" order by CASE WHEN \\\"time_by_day\\\".\\\"the_year\\\" IS NULL THEN 1 ELSE 0 END, \\\"time_by_day\\\".\\\"the_year\\\" ASC\")\n+        .returns(\n+            \"c0=1997\\n\"\n+            + \"c0=1998\\n\");\n+  }\n+\n   private static final String[] queries = {\n       \"select count(*) from (select 1 as \\\"c0\\\" from \\\"salary\\\" as \\\"salary\\\") as \\\"init\\\"\",\n       \"EXPR$0=21252\\n\",", "filename": "src/test/java/net/hydromatic/optiq/test/JdbcTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/86f5c4e2ff3ba239589cac9d9a961994eef3279b", "parent": "https://github.com/apache/calcite-avatica/commit/160433c8eee622ce7e495b3d44537af60d9bc472", "message": "Fix NPE when executing a DatabaseMetaData method that returns the empty set (e.g. getPrimaryKeys).", "bug_id": "calcite-avatica_13", "file": [{"additions": 2, "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/Meta.java", "sha": "0d8359bff8b627fa1621f5df45bd25e30beca285", "changes": 6, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/Meta.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -128,17 +128,15 @@ private ResultSet createResultSet(\n         final NamedFieldGetter columnGetter)\n     {\n         try {\n-            OptiqResultSet x = connection.driver.factory.newResultSet(\n+            return connection.driver.factory.newResultSet(\n                 connection.createStatement(),\n                 columnGetter.columnNames,\n                 new Function0<Cursor>() {\n                     public Cursor apply() {\n                         return columnGetter.cursor(\n                             ((Enumerable) enumerable).enumerator());\n                     }\n-                });\n-            x.execute();\n-            return x;\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }", "filename": "src/main/java/net/hydromatic/optiq/jdbc/Meta.java"}, {"additions": 1, "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java", "sha": "72efc5311b07adbcbfeca14f1b06172acbc5f348", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -882,7 +882,7 @@ public boolean next() {\n                             }\n                         };\n                     }\n-                });\n+                }).execute();\n         } catch (SQLException e) {\n             throw new RuntimeException(e);\n         }", "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqDatabaseMetaData.java"}, {"additions": 2, "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java", "sha": "bbcc7efb6d96086ee512d0061d451419250cc36b", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -130,7 +130,7 @@ void cancel() {\n      * constructor occurs while the statement is locked, to make sure that\n      * execute/cancel don't happen at the same time.</p>\n      */\n-    void execute() {\n+    OptiqResultSet execute() {\n         // Call driver's callback. It is permitted to throw a RuntimeException.\n         final boolean autoTemp =\n             ConnectionProperty.AUTO_TEMP.getBoolean(\n@@ -151,6 +151,7 @@ public void toBeCompleted() {\n         for (Map.Entry<String, Integer> entry : columnNameMap.entrySet()) {\n             accessorMap.put(entry.getKey(), accessorList.get(entry.getValue()));\n         }\n+        return this;\n     }\n \n     public boolean next() throws SQLException {", "filename": "src/main/java/net/hydromatic/optiq/jdbc/OptiqResultSet.java"}, {"additions": 23, "raw_url": "https://github.com/apache/calcite-avatica/raw/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/86f5c4e2ff3ba239589cac9d9a961994eef3279b/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java", "sha": "7f5b94d21aef890f8643b4cb9fa9aab453ba8539", "changes": 23, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java?ref=86f5c4e2ff3ba239589cac9d9a961994eef3279b", "patch": "@@ -127,6 +127,29 @@ public Object apply(OptiqConnection a0) {\n             );\n     }\n \n+    /** Tests a JDBC method known to be not implemented (as it happens,\n+     * {@link java.sql.DatabaseMetaData#getPrimaryKeys}) that therefore uses\n+     * empty result set. */\n+    public void testEmpty() throws Exception {\n+        assertThat()\n+            .with(OptiqAssert.Config.JDBC_FOODMART2)\n+            .doWithConnection(\n+                new Function1<OptiqConnection, Object>() {\n+                    public Object apply(OptiqConnection a0) {\n+                        try {\n+                            ResultSet rset =\n+                                a0.getMetaData().getPrimaryKeys(\n+                                    null, null, \"sales_fact_1997\");\n+                            assertFalse(rset.next());\n+                        } catch (SQLException e) {\n+                            throw new RuntimeException(e);\n+                        }\n+                        return null;\n+                    }\n+                }\n+            );\n+    }\n+\n     public void testCase() {\n         assertThat()\n             .with(OptiqAssert.Config.JDBC_FOODMART2)", "filename": "src/test/java/net/hydromatic/optiq/test/JdbcFrontJdbcBackTest.java"}], "repo": "calcite-avatica"}, {"commit": "https://github.com/apache/calcite-avatica/commit/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "parent": "https://github.com/apache/calcite-avatica/commit/47e0e7c952aed22dd237529bb459a59580034f91", "message": "[CALCITE-980] Fix AND and OR implementation in Enumerable convention\n\nPreviously it could fail with NPE or return wrong result\n\nfixes #169", "bug_id": "calcite-avatica_14", "file": [{"additions": 55, "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java", "sha": "32c043ca28e4d7c0d1f76f8114f8772d8ac25d8c", "changes": 91, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -55,10 +55,8 @@\n import org.apache.calcite.util.BuiltInMethod;\n import org.apache.calcite.util.Util;\n \n-import com.google.common.base.Function;\n import com.google.common.base.Supplier;\n import com.google.common.collect.ImmutableList;\n-import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n \n import java.lang.reflect.Constructor;\n@@ -428,22 +426,38 @@ public Expression implement(\n       return new CallImplementor() {\n         public Expression implement(\n             RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+          assert call.getOperator() == AND\n+              : \"AND null semantics is supported only for AND operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(false, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldAnd\n           case TRUE:\n+            // AND call should return false iff has FALSEs,\n+            // thus if we convert nulls to true then no harm is made\n+          case FALSE:\n+            // AND call should return false iff has FALSEs or has NULLs,\n+            // thus if we convert nulls to false, no harm is made\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldAnd(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsTrue =\n+                translator.translateList(call2.getOperands(), NullAs.TRUE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasFalse = Expressions.not(Expressions.foldAnd(nullAsTrue));\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasFalse, BOXED_FALSE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_TRUE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing AND: \" + nullAs);\n           }\n-          return Expressions.foldAnd(\n-              Lists.transform(expressions,\n-                  new Function<Expression, Expression>() {\n-                    public Expression apply(Expression e) {\n-                      return nullAs2.handle(e);\n-                    }\n-                  }));\n         }\n       };\n     case OR:\n@@ -456,34 +470,39 @@ public Expression apply(Expression e) {\n       //   : Boolean.TRUE;\n       return new CallImplementor() {\n         public Expression implement(\n-            RexToLixTranslator translator, RexCall call, NullAs nullAs) {\n+            RexToLixTranslator translator, RexCall call, final NullAs nullAs) {\n+          assert call.getOperator() == OR\n+              : \"OR null semantics is supported only for OR operator. Actual operator is \"\n+              + String.valueOf(call.getOperator());\n           final RexCall call2 = call2(harmonize, translator, call);\n-          final NullAs nullAs2 = nullAs == NullAs.TRUE ? NullAs.NULL : nullAs;\n-          final List<Expression> expressions =\n-              translator.translateList(call2.getOperands(), nullAs2);\n           switch (nullAs) {\n-          case NOT_POSSIBLE:\n+          case NOT_POSSIBLE: // Just foldOr\n+          case TRUE:\n+            // This should return false iff all arguments are FALSE,\n+            // thus we convert nulls to TRUE and foldOr\n           case FALSE:\n+            // This should return true iff has TRUE arguments,\n+            // thus we convert nulls to FALSE and foldOr\n+            final List<Expression> expressions =\n+                translator.translateList(call2.getOperands(), nullAs);\n             return Expressions.foldOr(expressions);\n+          case NULL:\n+          case IS_NULL:\n+          case IS_NOT_NULL:\n+            final List<Expression> nullAsFalse =\n+                translator.translateList(call2.getOperands(), NullAs.FALSE);\n+            final List<Expression> nullAsIsNull =\n+                translator.translateList(call2.getOperands(), NullAs.IS_NULL);\n+            Expression hasTrue = Expressions.foldOr(nullAsFalse);\n+            Expression hasNull = Expressions.foldOr(nullAsIsNull);\n+            Expression result = nullAs.handle(\n+                Expressions.condition(hasTrue, BOXED_TRUE_EXPR,\n+                    Expressions.condition(hasNull, NULL_EXPR, BOXED_FALSE_EXPR)));\n+            return result;\n+          default:\n+            throw new IllegalArgumentException(\n+                \"Unknown nullAs when implementing OR: \" + nullAs);\n           }\n-          final Expression t0 = expressions.get(0);\n-          final Expression t1 = expressions.get(1);\n-          if (!nullable(call2, 0) && !nullable(call2, 1)) {\n-            return Expressions.orElse(t0, t1);\n-          }\n-          return optimize(\n-              Expressions.condition(\n-                  Expressions.equal(t0, NULL_EXPR),\n-                  Expressions.condition(\n-                      Expressions.orElse(\n-                          Expressions.equal(t1, NULL_EXPR),\n-                          Expressions.not(t1)),\n-                      NULL_EXPR,\n-                      BOXED_TRUE_EXPR),\n-                  Expressions.condition(\n-                      Expressions.not(t0),\n-                      t1,\n-                      BOXED_TRUE_EXPR)));\n         }\n       };\n     case NOT:", "filename": "core/src/main/java/org/apache/calcite/adapter/enumerable/RexImpTable.java"}, {"additions": 51, "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/JdbcTest.java", "sha": "4c203d671674ae39c5eb46294a98efc5ad3fd725", "changes": 51, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/JdbcTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -4277,6 +4277,57 @@ private void startOfGroupStep3(String startOfGroup) {\n             \"empid=100; deptno=10; name=Bill; salary=10000.0; commission=1000\\n\");\n   }\n \n+  /** Tests CALCITE-980: Not (C='a' or C='b') causes NPE */\n+  @Test public void testWhereOrAndNullable() {\n+    /* Generates the following code:\n+       public boolean moveNext() {\n+         while (inputEnumerator.moveNext()) {\n+           final Object[] current = (Object[]) inputEnumerator.current();\n+           final String inp0_ = current[0] == null ? (String) null : current[0].toString();\n+           final String inp1_ = current[1] == null ? (String) null : current[1].toString();\n+           if (inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"a\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"b\"))\n+               || inp0_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp0_, \"b\")\n+               && (inp1_ != null && org.apache.calcite.runtime.SqlFunctions.eq(inp1_, \"c\"))) {\n+             return true;\n+           }\n+         }\n+         return false;\n+       }\n+     */\n+    CalciteAssert.that()\n+        .with(CalciteAssert.Config.REGULAR)\n+        .query(\"with tst(c) as (values('a'),('b'),('c'),(cast(null as varchar)))\"\n+            + \" select u.c u, v.c v from tst u, tst v where ((u.c = 'a' and v.c = 'b') or (u.c = 'b' and v.c = 'c'))\")\n+        .returnsUnordered(\n+            \"U=a; V=b\",\n+            \"U=b; V=c\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Test public void testBooleansInWhere() throws Exception {\n+    checkRun(\"sql/conditions.oq\");\n+  }\n+\n+  /** Tests CALCITE-980: different flavors of boolean logic */\n+  @Ignore(\"Fails with org.codehaus.commons.compiler.CompileException: Line 16, Column 112:\"\n+      + \" Cannot compare types \\\"int\\\" and \\\"java.lang.String\\\"\\n\")\n+  @Test public void testComparingIntAndString() throws Exception {\n+    // if (((...test.ReflectiveSchemaTest.IntAndString) inputEnumerator.current()).id == \"T\")\n+\n+    CalciteAssert.that()\n+        .withSchema(\"s\",\n+            new ReflectiveSchema(\n+                new ReflectiveSchemaTest.CatchallSchema()))\n+        .query(\"select a.\\\"value\\\", b.\\\"value\\\"\\n\"\n+            + \"  from \\\"bools\\\" a\\n\"\n+            + \"     , \\\"bools\\\" b\\n\"\n+            + \" where b.\\\"value\\\" = 'T'\\n\"\n+            + \" order by 1, 2\")\n+        .returnsUnordered(\n+            \"should fail with 'not a number' sql error while converting text to number\");\n+  }\n+\n   /** Tests the LIKE operator. */\n   @Test public void testLike() {\n     CalciteAssert.that()", "filename": "core/src/test/java/org/apache/calcite/test/JdbcTest.java"}, {"additions": 18, "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java", "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java", "sha": "0ebd616ac5395fed40c4c3f1d9969ffa41a9bd94", "changes": 18, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -798,6 +798,17 @@ public boolean apply(Field v1) {\n     public final BitSet bitSet = new BitSet(0);\n   }\n \n+  /** Table that has integer and string fields */\n+  public static class IntAndString {\n+    public final int id;\n+    public final String value;\n+\n+    public IntAndString(int id, String value) {\n+      this.id = id;\n+      this.value = value;\n+    }\n+  }\n+\n   /** Object whose fields are relations. Called \"catch-all\" because it's OK\n    * if tests add new fields. */\n   public static class CatchallSchema {\n@@ -841,6 +852,13 @@ public boolean apply(Field v1) {\n \n     public final IntHolder[] primesCustomBoxed =\n         new IntHolder[]{new IntHolder(1), new IntHolder(3), new IntHolder(5)};\n+\n+    public final IntAndString[] nullables = new IntAndString[] {\n+      new IntAndString(1, \"A\"), new IntAndString(2, \"B\"), new IntAndString(2, \"C\"),\n+      new IntAndString(3, null)};\n+\n+    public final IntAndString[] bools = new IntAndString[] {\n+      new IntAndString(1, \"T\"), new IntAndString(2, \"F\"), new IntAndString(3, null)};\n   }\n \n   /**", "filename": "core/src/test/java/org/apache/calcite/test/ReflectiveSchemaTest.java"}, {"additions": 259, "raw_url": "https://github.com/apache/calcite-avatica/raw/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq", "blob_url": "https://github.com/apache/calcite-avatica/blob/963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb/core/src/test/resources/sql/conditions.oq", "sha": "f7d7f51c7450c1f26d7423b6e9ec62cd9342ed50", "changes": 259, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/calcite-avatica/contents/core/src/test/resources/sql/conditions.oq?ref=963ba1b1b3d2ab95989d8383e0a855c3ae5e24cb", "patch": "@@ -0,0 +1,259 @@\n+# conditions.oq - conditions\n+#\n+# Licensed to the Apache Software Foundation (ASF) under one or more\n+# contributor license agreements.  See the NOTICE file distributed with\n+# this work for additional information regarding copyright ownership.\n+# The ASF licenses this file to you under the Apache License, Version 2.0\n+# (the \"License\"); you may not use this file except in compliance with\n+# the License.  You may obtain a copy of the License at\n+#\n+# http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing, software\n+# distributed under the License is distributed on an \"AS IS\" BASIS,\n+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+# See the License for the specific language governing permissions and\n+# limitations under the License.\n+#\n+!use catchall\n+!set outputformat mysql\n+\n+# OR test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 or b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 1 |\n+| 1 | 0 |\n+| 1 | 1 |\n+| 1 |   |\n+|   | 1 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 or b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+# AND test\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where a = 1 AND b = 1\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 1 | 1 |\n++---+---+\n+(1 row)\n+\n+!ok\n+\n+with tmp(a, b) as (\n+  values (1, 1), (1, 0), (1, cast(null as int))\n+       , (0, 1), (0, 0), (0, cast(null as int))\n+       , (cast(null as int), 1), (cast(null as int), 0), (cast(null as int), cast(null as int)))\n+select *\n+  from tmp\n+ where not (a = 1 AND b = 1)\n+ order by 1, 2;\n+\n++---+---+\n+| A | B |\n++---+---+\n+| 0 | 0 |\n+| 0 | 1 |\n+| 0 |   |\n+| 1 | 0 |\n+|   | 0 |\n++---+---+\n+(5 rows)\n+\n+!ok\n+\n+# Test cases for CALCITE-980\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' or \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' or \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' or \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n++-------+\n+(2 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where \"value\" = 'A' and \"value\" = 'B' order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (\"value\" = 'A' and \"value\" = 'B') order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+| C     |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a where not (not (\"value\" = 'A' and \"value\" = 'B')) order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where case when not (\"value\" = 'A' or \"value\" = 'B') then 1 else 0 end = 1\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not /* <--diff from above */ (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 1 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| C     |\n++-------+\n+(1 row)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 0 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n+| A     |\n+| B     |\n+|       |\n++-------+\n+(3 rows)\n+\n+!ok\n+\n+select \"value\" from \"nullables\" a\n+ where\n+   case when not (\"value\"='A' or \"value\"='B')\n+     then\n+       case when not (\"value\"='A' or \"value\"='B') then 1 else 2 end\n+     else 0\n+   end = 2 /* <- diff from above*/\n+ order by 1;\n+\n++-------+\n+| value |\n++-------+\n++-------+\n+(0 rows)\n+\n+!ok", "filename": "core/src/test/resources/sql/conditions.oq"}], "repo": "calcite-avatica"}]
