[
    {
        "repo": "servicemix4-specs",
        "message": "[SMX4-1624] NPE in servicemix spec MailcapCommandMap\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk@1545615 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-specs/commit/caab0f5017681d15c4b6687edf537970f9a63dd3",
        "parent": "https://github.com/apache/servicemix4-specs/commit/e46fdadb39a38010f363a90ff138ccf52e2a7c5a",
        "bug_id": "servicemix4-specs_1",
        "file": [
            {
                "sha": "fc2643fa2c25f9651d5d49a8f759cf549767db28",
                "filename": "activation-api-1.1/src/main/java/org/apache/servicemix/specs/activation/Activator.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/caab0f5017681d15c4b6687edf537970f9a63dd3/activation-api-1.1/src/main/java/org/apache/servicemix/specs/activation/Activator.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/caab0f5017681d15c4b6687edf537970f9a63dd3/activation-api-1.1/src/main/java/org/apache/servicemix/specs/activation/Activator.java",
                "status": "modified",
                "changes": 52,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/activation-api-1.1/src/main/java/org/apache/servicemix/specs/activation/Activator.java?ref=caab0f5017681d15c4b6687edf537970f9a63dd3",
                "patch": "@@ -19,9 +19,12 @@\n package org.apache.servicemix.specs.activation;\n \n import java.io.BufferedReader;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.ConcurrentHashMap;\n \n@@ -68,7 +71,11 @@ protected void register(Bundle bundle) {\n                 // ignored\n             }\n \n-            mailcaps.put(bundle.getBundleId(), new MailCap(bundle, url));\n+            try {\n+                mailcaps.put(bundle.getBundleId(), new MailCap(bundle, url));\n+            } catch (IOException ex) {\n+                // ignored\n+            }\n             rebuildCommandMap();\n         }\n     }\n@@ -77,39 +84,44 @@ protected void register(Bundle bundle) {\n     protected void unregister(long bundleId) {\n         MailCap mailcap = mailcaps.remove(bundleId);\n         if (mailcap != null ){\n-            debugPrintln(\"removing mailcap at \" + mailcap.url);\n+            debugPrintln(\"removing mailcap for bundle \" + mailcap.bundle.getBundleId());\n             rebuildCommandMap();\n         }\n     }\n \n     private void rebuildCommandMap() {\n-        OsgiMailcapCommandMap commandMap = new OsgiMailcapCommandMap();\n-        for (MailCap mailcap : mailcaps.values()) {\n-            try {\n-                InputStream is = mailcap.url.openStream();\n-                try {\n-                    BufferedReader br = new BufferedReader(new InputStreamReader(is));\n-                    String line;\n-                    while ((line = br.readLine()) != null) {\n-                        commandMap.addMailcap(line, mailcap.bundle);\n-                    }\n-                } finally {\n-                    is.close();\n+        ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n+        try {\n+            Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n+            OsgiMailcapCommandMap commandMap = new OsgiMailcapCommandMap();\n+            for (MailCap mailcap : mailcaps.values()) {\n+                for (String line : mailcap.lines) {\n+                    commandMap.addMailcap(line, mailcap.bundle);\n                 }\n-            } catch (Exception e) {\n-                // Ignore\n             }\n+            CommandMap.setDefaultCommandMap(commandMap);\n+        } finally {\n+            Thread.currentThread().setContextClassLoader(tccl);\n         }\n-        CommandMap.setDefaultCommandMap(commandMap);\n     }\n \n     private static class MailCap {\n         Bundle bundle;\n-        URL url;\n+        List<String> lines;\n \n-        private MailCap(Bundle bundle, URL url) {\n+        private MailCap(Bundle bundle, URL url) throws IOException {\n             this.bundle = bundle;\n-            this.url = url;\n+            this.lines = new ArrayList<String>();\n+            InputStream is = url.openStream();\n+            try {\n+                BufferedReader br = new BufferedReader(new InputStreamReader(is));\n+                String line;\n+                while ((line = br.readLine()) != null) {\n+                    lines.add(line);\n+                }\n+            } finally {\n+                is.close();\n+            }\n         }\n     }\n ",
                "deletions": 20
            },
            {
                "sha": "9d977a5c08340a7a43473075bf98d594b1e1ff3f",
                "filename": "activator/src/main/java/org/apache/servicemix/specs/activator/Activator.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/caab0f5017681d15c4b6687edf537970f9a63dd3/activator/src/main/java/org/apache/servicemix/specs/activator/Activator.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/caab0f5017681d15c4b6687edf537970f9a63dd3/activator/src/main/java/org/apache/servicemix/specs/activator/Activator.java",
                "status": "modified",
                "changes": 111,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/activator/src/main/java/org/apache/servicemix/specs/activator/Activator.java?ref=caab0f5017681d15c4b6687edf537970f9a63dd3",
                "patch": "@@ -17,11 +17,14 @@\n package org.apache.servicemix.specs.activator;\n \n import java.io.BufferedReader;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n import java.net.URL;\n+import java.util.ArrayList;\n import java.util.Enumeration;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.concurrent.Callable;\n import java.util.concurrent.ConcurrentHashMap;\n@@ -92,6 +95,11 @@ public synchronized void stop(BundleContext bundleContext) throws Exception {\n     }\n \n     public void bundleChanged(BundleEvent event) {\n+        synchronized (this) {\n+            if (bundleContext == null) {\n+                return;\n+            }\n+        }\n         if (event.getType() == BundleEvent.RESOLVED) {\n             register(event.getBundle());\n         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {\n@@ -141,7 +149,11 @@ protected void register(final Bundle bundle) {\n                 // ignored\n             }\n \n-            mailcaps.put(bundle.getBundleId(), new MailCap(bundle, url));\n+            try {\n+                mailcaps.put(bundle.getBundleId(), new MailCap(bundle, url));\n+            } catch (IOException ex) {\n+                // ignored\n+            }\n             rebuildCommandMap();\n         }\n     }\n@@ -156,7 +168,7 @@ protected void unregister(long bundleId) {\n         }\n         MailCap mailcap = mailcaps.remove(bundleId);\n         if (mailcap != null ){\n-            debugPrintln(\"removing mailcap at \" + mailcap.url);\n+            debugPrintln(\"removing mailcap for bundle \" + mailcap.bundle.getBundleId());\n             rebuildCommandMap();\n         }\n     }\n@@ -176,16 +188,26 @@ public BundleFactoryLoader(String factoryId, URL u, Bundle bundle) {\n         public Class call() throws Exception {\n             try {\n                 debugPrintln(\"loading factory for key: \" + factoryId);\n-                \n+\n                 if (clazz == null){\n                     synchronized (this) {\n                         if (clazz == null){\n                             debugPrintln(\"creating factory for key: \" + factoryId);\n                             BufferedReader br = new BufferedReader(new InputStreamReader(u.openStream(), \"UTF-8\"));\n-                            String factoryClassName = br.readLine();\n-                            br.close();\n-                            debugPrintln(\"factory implementation: \" + factoryClassName);\n-                            clazz = bundle.loadClass(factoryClassName);\n+                            try {\n+                                String factoryClassName = br.readLine();\n+                                while (factoryClassName != null) {\n+                                    factoryClassName = factoryClassName.trim();\n+                                    if (factoryClassName.charAt(0) != '#') {\n+                                        debugPrintln(\"factory implementation: \" + factoryClassName);\n+                                        clazz = bundle.loadClass(factoryClassName);\n+                                        return clazz;\n+                                    }\n+                                    factoryClassName = br.readLine();\n+                                }\n+                            } finally {\n+                                br.close();\n+                            }\n                         }\n                     }\n                 }\n@@ -198,46 +220,6 @@ public Class call() throws Exception {\n                 throw e;\n             }\n         }\n-        \n-        \n-        private class MimeFactoryLoader implements Callable<Class> {\n-            private final String mimeType;\n-            private final URL u;\n-            private final Bundle bundle;\n-            private volatile Class<?> clazz;\n-\n-            public MimeFactoryLoader(String mimeType, URL u, Bundle bundle) {\n-                this.mimeType = mimeType;\n-                this.u = u;\n-                this.bundle = bundle;\n-            }\n-\n-            public Class call() throws Exception {\n-                try {\n-                    debugPrintln(\"loading factory for key: \" + mimeType);\n-                    \n-                    if (clazz == null){\n-                        synchronized (this) {\n-                            if (clazz == null){\n-                                debugPrintln(\"creating factory for key: \" + factoryId);\n-                                BufferedReader br = new BufferedReader(new InputStreamReader(u.openStream(), \"UTF-8\"));\n-                                String factoryClassName = br.readLine();\n-                                br.close();\n-                                debugPrintln(\"factory implementation: \" + factoryClassName);\n-                                clazz = bundle.loadClass(factoryClassName);\n-                            }\n-                        }\n-                    }\n-                    return clazz;\n-                } catch (Exception e) {\n-                    debugPrintln(\"exception caught while creating factory: \" + e);\n-                    throw e;\n-                } catch (Error e) {\n-                    debugPrintln(\"error caught while creating factory: \" + e);\n-                    throw e;\n-                }\n-            }\n-        }\n \n         @Override\n         public String toString() {\n@@ -258,41 +240,40 @@ public boolean equals(Object obj) {\n             }\n         }\n     }\n-    \n+\n     private void rebuildCommandMap() {\n         ClassLoader tccl = Thread.currentThread().getContextClassLoader();\n         try {\n             Thread.currentThread().setContextClassLoader(getClass().getClassLoader());\n             OsgiMailcapCommandMap commandMap = new OsgiMailcapCommandMap();\n             for (MailCap mailcap : mailcaps.values()) {\n-                try {\n-                    InputStream is = mailcap.url.openStream();\n-                    try {\n-                        BufferedReader br = new BufferedReader(new InputStreamReader(is));\n-                        String line;\n-                        while ((line = br.readLine()) != null) {\n-                            commandMap.addMailcap(line, mailcap.bundle);\n-                        }\n-                    } finally {\n-                        is.close();\n-                    }\n-                } catch (Exception e) {\n-                    // Ignore\n+                for (String line : mailcap.lines) {\n+                    commandMap.addMailcap(line, mailcap.bundle);\n                 }\n             }\n             CommandMap.setDefaultCommandMap(commandMap);\n         } finally {\n             Thread.currentThread().setContextClassLoader(tccl);\n         }\n     }\n-    \n+\n     private static class MailCap {\n         Bundle bundle;\n-        URL url;\n+        List<String> lines;\n \n-        private MailCap(Bundle bundle, URL url) {\n+        private MailCap(Bundle bundle, URL url) throws IOException {\n             this.bundle = bundle;\n-            this.url = url;\n+            this.lines = new ArrayList<String>();\n+            InputStream is = url.openStream();\n+            try {\n+                BufferedReader br = new BufferedReader(new InputStreamReader(is));\n+                String line;\n+                while ((line = br.readLine()) != null) {\n+                    lines.add(line);\n+                }\n+            } finally {\n+                is.close();\n+            }\n         }\n     }\n }",
                "deletions": 65
            },
            {
                "sha": "42f864dd3d553789ed58bcfa5f1d56359ae6b8e7",
                "filename": "locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/caab0f5017681d15c4b6687edf537970f9a63dd3/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/caab0f5017681d15c4b6687edf537970f9a63dd3/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java?ref=caab0f5017681d15c4b6687edf537970f9a63dd3",
                "patch": "@@ -84,6 +84,11 @@ public synchronized void stop(BundleContext bundleContext) throws Exception {\n     }\n \n     public void bundleChanged(BundleEvent event) {\n+        synchronized (this) {\n+            if (bundleContext == null) {\n+                return;\n+            }\n+        }\n         if (event.getType() == BundleEvent.RESOLVED) {\n             register(event.getBundle());\n         } else if (event.getType() == BundleEvent.UNRESOLVED || event.getType() == BundleEvent.UNINSTALLED) {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "servicemix4-specs",
        "message": "[SMX4-1534]add a NPE guard for MimetypesFileTypeMap\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk@1516344 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-specs/commit/3537340a3658e1e4a7e5145d33eb4a27b4af0b49",
        "parent": "https://github.com/apache/servicemix4-specs/commit/7f60e0909d764c43e709c08df5256003f995c4fc",
        "bug_id": "servicemix4-specs_2",
        "file": [
            {
                "sha": "ed78099347cf546785deb39c464947a658b43aaa",
                "filename": "activation-api-1.1/src/main/java/javax/activation/MimetypesFileTypeMap.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/3537340a3658e1e4a7e5145d33eb4a27b4af0b49/activation-api-1.1/src/main/java/javax/activation/MimetypesFileTypeMap.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/3537340a3658e1e4a7e5145d33eb4a27b4af0b49/activation-api-1.1/src/main/java/javax/activation/MimetypesFileTypeMap.java",
                "status": "added",
                "changes": 184,
                "additions": 184,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/activation-api-1.1/src/main/java/javax/activation/MimetypesFileTypeMap.java?ref=3537340a3658e1e4a7e5145d33eb4a27b4af0b49",
                "patch": "@@ -0,0 +1,184 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *  http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package javax.activation;\n+\n+import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.BufferedReader;\n+import java.io.InputStreamReader;\n+import java.io.FileReader;\n+import java.io.FileInputStream;\n+import java.io.FileNotFoundException;\n+import java.util.Map;\n+import java.util.HashMap;\n+import java.util.StringTokenizer;\n+import java.util.Enumeration;\n+import java.net.URL;\n+\n+/**\n+ * @version $Rev: 467742 $ $Date: 2006-10-25 21:30:38 +0200 (Wed, 25 Oct 2006) $\n+ */\n+public class MimetypesFileTypeMap extends FileTypeMap {\n+    private static final String DEFAULT_TYPE = \"application/octet-stream\";\n+\n+    private final Map types = new HashMap();\n+\n+    public MimetypesFileTypeMap() {\n+        // defaults from /META-INF/mimetypes.default\n+        try {\n+            InputStream is = MimetypesFileTypeMap.class.getResourceAsStream(\"/META-INF/mimetypes.default\");\n+            if (is != null) {\n+                try {\n+                    loadStream(is);\n+                } finally {\n+                    is.close();\n+                }\n+            }\n+        } catch (IOException e) {\n+            // ignore\n+        }\n+\n+        // defaults from resources called /META-INF/mime.types\n+        try {\n+            ClassLoader cl = MimetypesFileTypeMap.class.getClassLoader();\n+            if (cl != null) {\n+                Enumeration e = cl.getResources(\"/META-INF/mime.types\");\n+                while (e.hasMoreElements()) {\n+                    URL url = (URL)e.nextElement();\n+                    try {\n+                        InputStream is = url.openStream();\n+                        try {\n+                            loadStream(is);\n+                        } finally {\n+                            is.close();\n+                        }\n+                    } catch (IOException e1) {\n+                        continue;\n+                    }\n+                }\n+            }\n+        } catch (SecurityException e) {\n+            // ignore\n+        } catch (IOException e) {\n+            // ignore\n+        }\n+\n+        // defaults from ${java.home}/lib/mime.types\n+        try {\n+            File file = new File(System.getProperty(\"java.home\"), \"lib/mime.types\");\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                loadStream(is);\n+            } finally {\n+                is.close();\n+            }\n+        } catch (SecurityException e) {\n+            // ignore\n+        } catch (FileNotFoundException e) {\n+            // ignore\n+        } catch (IOException e) {\n+            // ignore\n+        }\n+\n+        // defaults from ${user.home}/.mime.types\n+        try {\n+            File file = new File(System.getProperty(\"user.home\"), \".mime.types\");\n+            InputStream is = new FileInputStream(file);\n+            try {\n+                loadStream(is);\n+            } finally {\n+                is.close();\n+            }\n+        } catch (SecurityException e) {\n+            // ignore\n+        } catch (FileNotFoundException e) {\n+            // ignore\n+        } catch (IOException e) {\n+            // ignore\n+        }\n+    }\n+\n+    public MimetypesFileTypeMap(String mimeTypeFileName) throws IOException {\n+        this();\n+        BufferedReader reader = new BufferedReader(new FileReader(mimeTypeFileName));\n+        try {\n+            String line;\n+            while ((line = reader.readLine()) != null) {\n+                addMimeTypes(line);\n+            }\n+            reader.close();\n+        } catch (IOException e) {\n+            try {\n+                reader.close();\n+            } catch (IOException e1) {\n+                // ignore to allow original cause through\n+            }\n+            throw e;\n+        }\n+    }\n+\n+    public MimetypesFileTypeMap(InputStream is) {\n+        this();\n+        try {\n+            loadStream(is);\n+        } catch (IOException e) {\n+            // ignore as the spec's signature says we can't throw IOException - doh!\n+        }\n+    }\n+\n+    private void loadStream(InputStream is) throws IOException {\n+        BufferedReader reader = new BufferedReader(new InputStreamReader(is));\n+        String line;\n+        while ((line = reader.readLine()) != null) {\n+            addMimeTypes(line);\n+        }\n+    }\n+\n+    public synchronized void addMimeTypes(String mime_types) {\n+        int hashPos = mime_types.indexOf('#');\n+        if (hashPos != -1) {\n+            mime_types = mime_types.substring(0, hashPos);\n+        }\n+        StringTokenizer tok = new StringTokenizer(mime_types);\n+        if (!tok.hasMoreTokens()) {\n+            return;\n+        }\n+        String contentType = tok.nextToken();\n+        while (tok.hasMoreTokens()) {\n+            String fileType = tok.nextToken();\n+            types.put(fileType, contentType);\n+        }\n+    }\n+\n+    public String getContentType(File f) {\n+        return getContentType(f.getName());\n+    }\n+\n+    public synchronized String getContentType(String filename) {\n+        int index = filename.lastIndexOf('.');\n+        if (index == -1 || index == filename.length()-1) {\n+            return DEFAULT_TYPE;\n+        }\n+        String fileType = filename.substring(index + 1);\n+        String contentType = (String) types.get(fileType);\n+        return contentType == null ? DEFAULT_TYPE : contentType;\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "servicemix4-specs",
        "message": "SM-1438: NPE in the specs when uninstalling bundle\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk@679440 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-specs/commit/87a19445daea0ae1afb2435e8413a4282b029a88",
        "parent": "https://github.com/apache/servicemix4-specs/commit/883db6882d014f47b3e32fd930b60341c6acadb3",
        "bug_id": "servicemix4-specs_3",
        "file": [
            {
                "sha": "cd8a49d294c4e5accabccd3caa553a062bbcc476",
                "filename": "locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/87a19445daea0ae1afb2435e8413a4282b029a88/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/87a19445daea0ae1afb2435e8413a4282b029a88/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/locator/src/main/java/org/apache/servicemix/specs/locator/Activator.java?ref=87a19445daea0ae1afb2435e8413a4282b029a88",
                "patch": "@@ -47,7 +47,7 @@ public synchronized void start(BundleContext bundleContext) throws Exception {\n \n     public synchronized void stop(BundleContext bundleContext) throws Exception {\n         while (!factories.isEmpty()) {\n-            unregister(bundleContext.getBundle(factories.keySet().iterator().next()));\n+            unregister(factories.keySet().iterator().next());\n         }\n         this.bundleContext = null;\n     }\n@@ -56,7 +56,7 @@ public void bundleChanged(BundleEvent event) {\n         if (event.getType() == BundleEvent.RESOLVED) {\n             register(event.getBundle());\n         } else if (event.getType() == BundleEvent.UNRESOLVED) {\n-            unregister(event.getBundle());\n+            unregister(event.getBundle().getBundleId());\n         }\n     }\n \n@@ -92,8 +92,8 @@ public Class call() throws Exception {\n         }\n     }\n \n-    protected void unregister(Bundle bundle) {\n-        Map<String, Callable<Class>> map = factories.remove(bundle.getBundleId());\n+    protected void unregister(long bundleId) {\n+        Map<String, Callable<Class>> map = factories.remove(bundleId);\n         if (map != null) {\n             for (Map.Entry<String, Callable<Class>> entry : map.entrySet()) {\n                 OsgiLocator.unregister(entry.getKey(), entry.getValue());",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "servicemix4-specs",
        "message": "[CXF-1253] Fix NPE in jaxws API when stuck in lib/endorsed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/servicemix/smx4/specs/trunk@1391583 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/servicemix4-specs/commit/4e27f556278a9c45ad70e5db5aa764be02e7bae8",
        "parent": "https://github.com/apache/servicemix4-specs/commit/2532c5895bdc177cfc18722885bd4693b5ca7e8d",
        "bug_id": "servicemix4-specs_4",
        "file": [
            {
                "sha": "a6ad195170d491bf0cb688a499c0506fb224a5de",
                "filename": "jaxws-api-2.2/src/main/java/javax/xml/ws/spi/FactoryFinder.java",
                "blob_url": "https://github.com/apache/servicemix4-specs/blob/4e27f556278a9c45ad70e5db5aa764be02e7bae8/jaxws-api-2.2/src/main/java/javax/xml/ws/spi/FactoryFinder.java",
                "raw_url": "https://github.com/apache/servicemix4-specs/raw/4e27f556278a9c45ad70e5db5aa764be02e7bae8/jaxws-api-2.2/src/main/java/javax/xml/ws/spi/FactoryFinder.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/servicemix4-specs/contents/jaxws-api-2.2/src/main/java/javax/xml/ws/spi/FactoryFinder.java?ref=4e27f556278a9c45ad70e5db5aa764be02e7bae8",
                "patch": "@@ -171,12 +171,18 @@ public Object run() {\n                     ClassLoader classLoader = findClassLoader();\n                     try {\n                         // If we are deployed into an OSGi environment, leverage it\n-                        Class factoryClass = FactoryFinder.class.getClassLoader().loadClass(iFactoryId);\n+                        Class factoryClass = null;\n+                        if (FactoryFinder.class.getClassLoader() != null) {\n+                            factoryClass = FactoryFinder.class.getClassLoader().loadClass(iFactoryId);\n+                        } else {\n+                            factoryClass = Class.forName(iFactoryId);\n+                        }\n                         Class spiClass = org.apache.servicemix.specs.locator.OsgiLocator.locate(factoryClass, iFactoryId);\n                         if (spiClass != null) {\n                             return spiClass.newInstance();\n                         }\n                      } catch (Throwable e) {\n+                        if (debug) e.printStackTrace();\n                      }\n \n                     try {",
                "deletions": 1
            }
        ]
    }
]