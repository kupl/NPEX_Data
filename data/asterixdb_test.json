{
    "asterixdb_02b35a1": {
        "bug_id": "asterixdb_02b35a1",
        "commit": "https://github.com/apache/asterixdb/commit/02b35a1bf98f4168dae91fa68c14d7e062bfd032",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 7,
                "filename": "asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java",
                "patch": "@@ -69,7 +69,7 @@\n \n     public static JobSpecification createDropDatasetJobSpec(CompiledDatasetDropStatement datasetDropStmt,\n             AqlMetadataProvider metadataProvider)\n-                    throws AlgebricksException, HyracksDataException, RemoteException, ACIDException, AsterixException {\n+            throws AlgebricksException, HyracksDataException, RemoteException, ACIDException, AsterixException {\n \n         String dataverseName = null;\n         if (datasetDropStmt.getDataverseName() != null) {\n@@ -222,26 +222,22 @@ public static JobSpecification compactDatasetJobSpec(Dataverse dataverse, String\n             throw new AsterixException(\"Could not find dataset \" + datasetName + \" in dataverse \" + dataverseName);\n         }\n         boolean temp = dataset.getDatasetDetails().isTemp();\n-\n         ARecordType itemType = (ARecordType) metadata.findType(dataset.getItemTypeDataverseName(),\n                 dataset.getItemTypeName());\n+        ARecordType metaItemType = DatasetUtils.getMetaType(metadata, dataset);\n         JobSpecification spec = JobSpecificationUtils.createJobSpecification();\n         IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                 itemType, format.getBinaryComparatorFactoryProvider());\n-        ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+        ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n         int[] blooFilterKeyFields = DatasetUtils.createBloomFilterKeyFields(dataset);\n-\n         ITypeTraits[] filterTypeTraits = DatasetUtils.computeFilterTypeTraits(dataset, itemType);\n         IBinaryComparatorFactory[] filterCmpFactories = DatasetUtils.computeFilterBinaryComparatorFactories(dataset,\n                 itemType, format.getBinaryComparatorFactoryProvider());\n         int[] filterFields = DatasetUtils.createFilterFields(dataset);\n         int[] btreeFields = DatasetUtils.createBTreeFieldsWhenThereisAFilter(dataset);\n-\n         Pair<IFileSplitProvider, AlgebricksPartitionConstraint> splitsAndConstraint = metadata\n                 .splitProviderAndPartitionConstraintsForDataset(dataverseName, datasetName, datasetName, temp);\n-\n         AsterixStorageProperties storageProperties = AsterixAppContextInfo.getInstance().getStorageProperties();\n-\n         Pair<ILSMMergePolicyFactory, Map<String, String>> compactionInfo = DatasetUtils.getMergePolicyFactory(dataset,\n                 metadata.getMetadataTxnContext());\n         LSMTreeIndexCompactOperatorDescriptor compactOp = new LSMTreeIndexCompactOperatorDescriptor(spec,",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/main/java/org/apache/asterix/file/DatasetOperations.java",
                "sha": "905269600204bc754fa1a825f9530a833fc4cc20",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 4,
                "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java",
                "patch": "@@ -48,9 +48,10 @@\n             File.separator);\n \n     protected static final String TEST_CONFIG_FILE_NAME = \"asterix-build-configuration.xml\";\n-\n     protected static AsterixTransactionProperties txnProperties;\n-    private final static TestExecutor testExecutor = new TestExecutor();\n+    private static final TestExecutor testExecutor = new TestExecutor();\n+    private static final boolean cleanupOnStart = true;\n+    private static final boolean cleanupOnStop = true;\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n@@ -60,7 +61,7 @@ public static void setUp() throws Exception {\n             // remove library directory\n             TestLibrarian.removeLibraryDir();\n             testExecutor.setLibrarian(new TestLibrarian());\n-            ExecutionTestUtil.setUp();\n+            ExecutionTestUtil.setUp(cleanupOnStart);\n         } catch (Throwable th) {\n             th.printStackTrace();\n             throw th;\n@@ -71,7 +72,7 @@ public static void setUp() throws Exception {\n     public static void tearDown() throws Exception {\n         // remove library directory\n         TestLibrarian.removeLibraryDir();\n-        ExecutionTestUtil.tearDown();\n+        ExecutionTestUtil.tearDown(cleanupOnStop);\n     }\n \n     @Parameters(name = \"ExecutionTest {index}: {0}\")",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTest.java",
                "sha": "e372d31a62ab8c4ae91c5cdcf7cd295edb24ca67",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 4,
                "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java",
                "patch": "@@ -43,7 +43,7 @@\n \n     protected static TestGroup FailedGroup;\n \n-    public static void setUp() throws Exception {\n+    public static void setUp(boolean cleanup) throws Exception {\n         System.out.println(\"Starting setup\");\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"Starting setup\");\n@@ -53,7 +53,7 @@ public static void setUp() throws Exception {\n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"initializing pseudo cluster\");\n         }\n-        AsterixHyracksIntegrationUtil.init(true);\n+        AsterixHyracksIntegrationUtil.init(cleanup);\n \n         if (LOGGER.isLoggable(Level.INFO)) {\n             LOGGER.info(\"initializing HDFS\");\n@@ -81,9 +81,9 @@ private static void validateBufferCacheState() {\n         }\n     }\n \n-    public static void tearDown() throws Exception {\n+    public static void tearDown(boolean cleanup) throws Exception {\n         // validateBufferCacheState(); <-- Commented out until bug is fixed -->\n-        AsterixHyracksIntegrationUtil.deinit(true);\n+        AsterixHyracksIntegrationUtil.deinit(cleanup);\n         File outdir = new File(PATH_ACTUAL);\n         File[] files = outdir.listFiles();\n         if (files == null || files.length == 0) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/ExecutionTestUtil.java",
                "sha": "d919c92f60f4963e04b629091260e9b05ba768bb",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 3,
                "filename": "asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java",
                "patch": "@@ -51,20 +51,22 @@\n     protected static final String TEST_CONFIG_FILE_NAME = \"asterix-build-configuration.xml\";\n \n     protected static AsterixTransactionProperties txnProperties;\n-    private final static TestExecutor testExecutor = new TestExecutor();\n+    private static final TestExecutor testExecutor = new TestExecutor();\n+    private static final boolean cleanupOnStart = true;\n+    private static final boolean cleanupOnStop = true;\n \n     protected static TestGroup FailedGroup;\n \n     @BeforeClass\n     public static void setUp() throws Exception {\n         File outdir = new File(PATH_ACTUAL);\n         outdir.mkdirs();\n-        ExecutionTestUtil.setUp();\n+        ExecutionTestUtil.setUp(cleanupOnStart);\n     }\n \n     @AfterClass\n     public static void tearDown() throws Exception {\n-        ExecutionTestUtil.tearDown();\n+        ExecutionTestUtil.tearDown(cleanupOnStop);\n         AsterixHyracksIntegrationUtil.removeTestStorageFiles();\n     }\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-app/src/test/java/org/apache/asterix/test/runtime/SqlppExecutionTest.java",
                "sha": "b827a0da77ac999bf06293c38e4a5fff1de251e6",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java",
                "patch": "@@ -85,6 +85,9 @@ public void start(IFrameWriter writer) throws HyracksDataException {\n                 }\n                 tupleForwarder.addTuple(tb);\n             }\n+        } catch (InterruptedException e) {\n+            //TODO: Find out what could cause an interrupted exception beside termination of a job/feed\n+            LOGGER.warn(\"Feed has been interrupted. Closing the feed\");\n         } catch (Exception e) {\n             failed = true;\n             tupleForwarder.flush();",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-external-data/src/main/java/org/apache/asterix/external/dataflow/FeedRecordDataFlowController.java",
                "sha": "387e2dc3e00e3cb0e319199e5c6ce253189f02fd",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql",
                "patch": "@@ -0,0 +1 @@\n+create_and_start.sh",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.1.script.aql",
                "sha": "cc46136086bef2ff6f9d9dd534b382807376299a",
                "status": "added"
            },
            {
                "additions": 58,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed with meta-data and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+\n+drop dataverse KeyVerse if exists;\n+create dataverse KeyVerse;\n+use dataverse KeyVerse;\n+\n+create type DocumentType as open{\n+};\n+\n+create type KVMetaType as open{\n+\"key\":string,\n+bucket:string,\n+vbucket:int32,\n+seq:int64,\n+cas:int64,\n+creationTime:int64,\n+expiration:int32,\n+flags:int32,\n+revSeq:int64,\n+lockTime:int32\n+};\n+\n+create dataset KVStore(DocumentType) with meta(KVMetaType)primary key meta().\"key\";\n+\n+create feed KVChangeStream using adapter(\n+    (\"type-name\"=\"DocumentType\"),\n+    (\"meta-type-name\"=\"KVMetaType\"),\n+    (\"reader\"=\"kv_test\"),\n+    (\"parser\"=\"record-with-metadata\"),\n+    (\"format\"=\"dcp\"),\n+    (\"record-format\"=\"json\"),\n+    (\"change-feed\"=\"true\"),\n+    (\"key-indexes\"=\"0\"),\n+    (\"key-indicators\"=\"1\"),\n+    (\"num-of-records\"=\"1000\")\n+);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.2.ddl.aql",
                "sha": "d3317e41bf2b606dcabdb5cd61482792e64b55c9",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed with meta-data and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+use dataverse KeyVerse;\n+\n+set wait-for-completion-feed \"true\";\n+connect feed KVChangeStream to dataset KVStore;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.3.update.aql",
                "sha": "7faf01340863ead3e1ee0102a892b76a20ce8a0e",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql",
                "patch": "@@ -0,0 +1 @@\n+stop_and_start.sh",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.4.script.aql",
                "sha": "3ba1dc0e2f8a88caa6573165f74ca04503b7e4fc",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Create a change feed and test ingestion of records\n+ * Expected Res : Success\n+ * Date         : 24th Feb 2016\n+ */\n+use dataverse KeyVerse;\n+\n+count(\n+    for $d in dataset KVStore\n+    return $d\n+);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.query.aql",
                "sha": "9db20a9a4aa31fc349c0f5e13a13c63e9ae7862a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql",
                "patch": "@@ -0,0 +1 @@\n+stop_and_delete.sh",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/queries/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.6.script.aql",
                "sha": "10e1a51c440715e1e9b5a320ce7e88ada8219817",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm",
                "patch": "@@ -0,0 +1 @@\n+804\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/results/query_after_restart/dataset-with-meta-record/dataset-with-meta-record.5.adm",
                "sha": "c31da8b3c449ed1fb8c6e37d77083f8a82d74e4a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh",
                "patch": "@@ -0,0 +1 @@\n+$MANAGIX_HOME/bin/managix create -n nc1 -c $MANAGIX_HOME/clusters/local/local.xml;",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/create_and_start.sh",
                "sha": "945f01db9b3d8fd1eed3f07d906e1ac7fb194aa1",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh",
                "patch": "@@ -0,0 +1,3 @@\n+$MANAGIX_HOME/bin/managix stop -n nc1;\n+$MANAGIX_HOME/bin/managix delete -n nc1;\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_delete.sh",
                "sha": "d7deea3de811c5dacc09963570b93350635dc3f1",
                "status": "added"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 0,
                "filename": "asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh",
                "patch": "@@ -0,0 +1,2 @@\n+$MANAGIX_HOME/bin/managix stop -n nc1;\n+$MANAGIX_HOME/bin/managix start -n nc1;",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/scripts/query_after_restart/dataset-with-meta-record/stop_and_start.sh",
                "sha": "1271a2b2062896f7811e995c9f9bc6044deed4bc",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/testsuite.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-installer/src/test/resources/transactionts/testsuite.xml?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 1,
                "filename": "asterix-installer/src/test/resources/transactionts/testsuite.xml",
                "patch": "@@ -17,8 +17,12 @@\n  ! under the License.\n  !-->\n <test-suite xmlns=\"urn:xml.testframework.asterix.apache.org\" ResultOffsetPath=\"results\" QueryOffsetPath=\"queries\" QueryFileExtension=\".aql\">\n-\n   <test-group name=\"query_after_restart\">\n+      <test-case FilePath=\"query_after_restart\">\n+          <compilation-unit name=\"dataset-with-meta-record\">\n+              <output-dir compare=\"Text\">dataset-with-meta-record</output-dir>\n+          </compilation-unit>\n+      </test-case>\n       <test-case FilePath=\"query_after_restart\">\n           <compilation-unit name=\"external_index\">\n               <output-dir compare=\"Text\">external_index</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-installer/src/test/resources/transactionts/testsuite.xml",
                "sha": "0c12426a7e39cff4d0cc8f13aa696c7c7830054f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 12,
                "filename": "asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java",
                "patch": "@@ -700,11 +700,11 @@ private IAdapterFactory getConfiguredAdapterFactory(Dataset dataset, String adap\n                 for (int i = 0; i < numPrimaryKeys; i++) {\n                     bloomFilterKeyFields[i] = i;\n                 }\n-\n-                typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+                // get meta item type\n+                ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+                typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n                 comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset, itemType,\n                         context.getBinaryComparatorFactoryProvider());\n-\n                 filterFields = DatasetUtils.createFilterFields(dataset);\n                 btreeFields = DatasetUtils.createBTreeFieldsWhenThereisAFilter(dataset);\n             }\n@@ -1089,7 +1089,7 @@ public boolean scannerOperatorIsLeaf(IDataSource<AqlSourceId> dataSource) {\n             String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n                     .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), itemTypeName).getDatatype();\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, null);\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                     itemType, context.getBinaryComparatorFactoryProvider());\n \n@@ -1174,12 +1174,10 @@ public boolean scannerOperatorIsLeaf(IDataSource<AqlSourceId> dataSource) {\n             Index primaryIndex = MetadataManager.INSTANCE.getIndex(mdTxnCtx, dataset.getDataverseName(),\n                     dataset.getDatasetName(), dataset.getDatasetName());\n             String indexName = primaryIndex.getIndexName();\n-\n-            String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n-                    .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), itemTypeName).getDatatype();\n-\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n+                    .getDatatype(mdTxnCtx, dataset.getItemTypeDataverseName(), dataset.getItemTypeName()).getDatatype();\n+            ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n \n             IAsterixApplicationContextInfo appContext = (IAsterixApplicationContextInfo) context.getAppContext();\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n@@ -2347,9 +2345,8 @@ public void setLocks(Map<String, Integer> locks) {\n             String itemTypeName = dataset.getItemTypeName();\n             ARecordType itemType = (ARecordType) MetadataManager.INSTANCE\n                     .getDatatype(mdTxnCtx, dataSource.getId().getDataverseName(), itemTypeName).getDatatype();\n-\n-            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType);\n-\n+            ARecordType metaItemType = DatasetUtils.getMetaType(this, dataset);\n+            ITypeTraits[] typeTraits = DatasetUtils.computeTupleTypeTraits(dataset, itemType, metaItemType);\n             IAsterixApplicationContextInfo appContext = (IAsterixApplicationContextInfo) context.getAppContext();\n             IBinaryComparatorFactory[] comparatorFactories = DatasetUtils.computeKeysBinaryComparatorFactories(dataset,\n                     itemType, context.getBinaryComparatorFactoryProvider());",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/AqlMetadataProvider.java",
                "sha": "90ebfb7757db9c2f7aa72fb05f13e6a2359ccfc7",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/asterixdb/blob/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java?ref=02b35a1bf98f4168dae91fa68c14d7e062bfd032",
                "deletions": 6,
                "filename": "asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.asterix.metadata.MetadataException;\n import org.apache.asterix.metadata.MetadataManager;\n import org.apache.asterix.metadata.MetadataTransactionContext;\n+import org.apache.asterix.metadata.declared.AqlMetadataProvider;\n import org.apache.asterix.metadata.entities.CompactionPolicy;\n import org.apache.asterix.metadata.entities.Dataset;\n import org.apache.asterix.metadata.entities.ExternalDatasetDetails;\n@@ -105,11 +106,6 @@\n         return bhffs;\n     }\n \n-    public static ITypeTraits[] computeTupleTypeTraits(Dataset dataset, ARecordType itemType)\n-            throws AlgebricksException {\n-        return computeTupleTypeTraits(dataset, itemType, null);\n-    }\n-\n     public static ITypeTraits[] computeTupleTypeTraits(Dataset dataset, ARecordType itemType, ARecordType metaItemType)\n             throws AlgebricksException {\n         if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n@@ -156,7 +152,7 @@\n \n     public static IBinaryComparatorFactory[] computeFilterBinaryComparatorFactories(Dataset dataset,\n             ARecordType itemType, IBinaryComparatorFactoryProvider comparatorFactoryProvider)\n-                    throws AlgebricksException {\n+            throws AlgebricksException {\n         if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n             return null;\n         }\n@@ -274,4 +270,13 @@ public static void writePropertyTypeRecord(String name, String value, DataOutput\n \n         propertyRecordBuilder.write(out, true);\n     }\n+\n+    public static ARecordType getMetaType(AqlMetadataProvider metadataProvider, Dataset dataset)\n+            throws AlgebricksException {\n+        if (dataset.hasMetaPart()) {\n+            return (ARecordType) metadataProvider.findType(dataset.getMetaItemTypeDataverseName(),\n+                    dataset.getMetaItemTypeName());\n+        }\n+        return null;\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/02b35a1bf98f4168dae91fa68c14d7e062bfd032/asterix-metadata/src/main/java/org/apache/asterix/metadata/utils/DatasetUtils.java",
                "sha": "0ac4f5600b154984b8e6d6959e9ca4dca5f91363",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-1378 Fix NPE on Feed Connect After Restart\n\nThis issue was caused by the way type traits are computed for each\nindex. since we have duplicate code to create the index dataflow\nhelper, we had to fix the way type traits are created in all of\nthese different places. We propably need to do further refactoring\nto have common code for creating index dataflow helper instances.\n\nChange-Id: If8f8696d252868a8cce0afdbaeda0dd046f99186\nReviewed-on: https://asterix-gerrit.ics.uci.edu/766\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/442e49b9f174717035d0f4ebcc0810f5f3f3f29c",
        "patched_files": [
            "FeedRecordDataFlowController.java",
            "DatasetOperations.java",
            "dataset-with-meta-record.java",
            "create_and_start.java",
            "AqlMetadataProvider.java",
            "stop_and_start.java",
            "DatasetUtils.java",
            "stop_and_delete.java",
            "ExecutionTestUtil.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite.java",
            "SqlppExecutionTest.java",
            "ExecutionTest.java"
        ]
    },
    "asterixdb_07048a3": {
        "bug_id": "asterixdb_07048a3",
        "commit": "https://github.com/apache/asterixdb/commit/07048a3b97dab28bcf7555ec900de0712ce9d710",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11",
                "deletions": 27,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql",
                "patch": "@@ -1,27 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-drop dataverse externallibtest if exists;\n-create dataverse externallibtest;\n-use dataverse externallibtest;\n-\n-create type TextType if not exists as open {\n-    id: int32,\n-    text: string\n-};\n-",
                "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.1.ddl.aql",
                "sha": "2dcd24d7c288706825b3a57242f0bf6ca3f6bfeb",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11",
                "deletions": 19,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql",
                "patch": "@@ -1,19 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-install externallibtest testlib target/data/externallib/asterix-external-data-testlib.zip\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.2.lib.aql",
                "sha": "d1e0e87600fcb4996cf70cdb3a98b6f2831f0537",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11",
                "deletions": 28,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql",
                "patch": "@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-use dataverse externallibtest;\n-\n-let $i:={\"id\":1, \"text\":\"lower text\"}\n-return testlib#toUpper($i);\n-\n-let $i:=testlib#toUpper({\"id\":1, \"text\":\"lower text\"})\n-return $i;\n-\n-let $i:= {\"field1\" : testlib#toUpper({\"id\":1, \"text\":\"lower text\"}), \"field2\": 123}\n-return $i;",
                "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.3.query.aql",
                "sha": "5f0b86cd5b3c2cae82eef6d482a5b0c83bf1fea5",
                "status": "removed"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql?ref=04dd5977bd798d3f9538931f77b575eac3afec11",
                "deletions": 19,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql",
                "patch": "@@ -1,19 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-uninstall externallibtest testlib\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/04dd5977bd798d3f9538931f77b575eac3afec11/asterixdb/asterix-app/src/test/resources/runtimets/queries/external-library/upperCase/upperCase.4.lib.aql",
                "sha": "86af80f251c2ea3d7f7c1a6637bc148aaadf517b",
                "status": "removed"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp",
                "patch": "@@ -20,7 +20,11 @@ DROP DATAVERSE externallibtest if exists;\n CREATE DATAVERSE  externallibtest;\n USE externallibtest;\n \n+create type list_element as open{\n+    text: string\n+};\n+\n create type TextType if not exists as open {\n     id: int32,\n-    text: string\n+    text_list: [list_element]\n };\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.1.ddl.sqlpp",
                "sha": "292e4e1b1ab42a9a9a4a1398352908f135f92e7e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 3,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp",
                "patch": "@@ -18,11 +18,11 @@\n  */\n use externallibtest;\n \n-let i={\"id\":1, \"text\":\"lower text\"}\n+let i={\"id\":1, \"text_list\": [{\"text\":\"lower text1\"}, {\"text\":\"lower text2\"}]}\n select value `testlib#toUpper`(i);\n \n-let i=`testlib#toUpper`({\"id\":1, \"text\":\"lower text\"})\n+let i=`testlib#toUpper`({\"id\":1, \"text_list\":[{\"text\":\"lower text\"}]})\n select value i;\n \n-let i= {\"field1\" : `testlib#toUpper`({\"id\":1, \"text\":\"lower text\"}), \"field2\": 123}\n+let i= {\"field1\" : `testlib#toUpper`({\"id\":1, \"text_list\":[{\"text\":\"lower text\"}]}), \"field2\": 123}\n select value i;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/external-library/upperCase/upperCase.3.query.sqlpp",
                "sha": "743d39acd830726f47e54c717ab5e6d7868fc19c",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 3,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm",
                "patch": "@@ -1,3 +1,3 @@\n-{ \"id\": -1, \"text\": \"LOWER TEXT\" }\n-{ \"id\": -1, \"text\": \"LOWER TEXT\" }\n-{ \"field1\": { \"id\": -1, \"text\": \"LOWER TEXT\" }, \"field2\": 123 }\n+{ \"id\": -1, \"text_list\": [ { \"text\": \"lower text1\" }, { \"text\": \"lower text2\" } ], \"element_n\": 2, \"capitalized_list\": [ \"LOWER TEXT1\", \"LOWER TEXT2\" ] }\n+{ \"id\": -1, \"text_list\": [ { \"text\": \"lower text\" } ], \"element_n\": 1, \"capitalized_list\": [ \"LOWER TEXT\" ] }\n+{ \"field1\": { \"id\": -1, \"text_list\": [ { \"text\": \"lower text\" } ], \"element_n\": 1, \"capitalized_list\": [ \"LOWER TEXT\" ] }, \"field2\": 123 }",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/results/external-library/upperCase/upperCase.1.adm",
                "sha": "2efaa4f76be9d7e906ee154ca1de24901903aa66",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 5,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml",
                "patch": "@@ -42,11 +42,6 @@\n         <output-dir compare=\"Text\">getCapital</output-dir>\n       </compilation-unit>\n     </test-case>\n-    <test-case FilePath=\"external-library\">\n-      <compilation-unit name=\"upperCase\">\n-        <output-dir compare=\"Text\">upperCase</output-dir>\n-      </compilation-unit>\n-    </test-case>\n     <test-case FilePath=\"external-library\">\n       <compilation-unit name=\"keyword_detector\">\n         <output-dir compare=\"Text\">keyword_detector</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_it.xml",
                "sha": "e77b32bb9b7107a0c4a0e02ae2960418c0785dbf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 8,
                "filename": "asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java",
                "patch": "@@ -82,8 +82,10 @@\n import org.apache.asterix.om.pointables.AListVisitablePointable;\n import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.AOrderedListType;\n import org.apache.asterix.om.types.ARecordType;\n import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n import org.apache.asterix.om.types.BuiltinType;\n import org.apache.asterix.om.types.EnumDeserializer;\n import org.apache.asterix.om.types.IAType;\n@@ -582,17 +584,12 @@ public JListAccessor(IObjectPool<IJObject, IAType> objectPool) {\n         public IJObject access(AListVisitablePointable pointable, IObjectPool<IJObject, IAType> objectPool,\n                 IAType listType, JObjectPointableVisitor pointableVisitor) throws HyracksDataException {\n             List<IVisitablePointable> items = pointable.getItems();\n-            List<IVisitablePointable> itemTags = pointable.getItemTags();\n             JList list = pointable.ordered() ? new JOrderedList(listType) : new JUnorderedList(listType);\n             IJObject listItem;\n-            int index = 0;\n             for (IVisitablePointable itemPointable : items) {\n-                IVisitablePointable itemTagPointable = itemTags.get(index);\n-                ATypeTag itemTypeTag = EnumDeserializer.ATYPETAGDESERIALIZER\n-                        .deserialize(itemTagPointable.getByteArray()[itemTagPointable.getStartOffset()]);\n-                final IAType fieldType = TypeTagUtil.getBuiltinTypeByTag(itemTypeTag);\n-                typeInfo.reset(fieldType, itemTypeTag);\n-                switch (itemTypeTag) {\n+                final IAType fieldType = ((AbstractCollectionType) listType).getItemType();\n+                typeInfo.reset(fieldType, fieldType.getTypeTag());\n+                switch (typeInfo.getTypeTag()) {\n                     case OBJECT:\n                         listItem = pointableVisitor.visit((ARecordVisitablePointable) itemPointable, typeInfo);\n                         break;",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/main/java/org/apache/asterix/external/library/java/JObjectAccessors.java",
                "sha": "1a6553cf0c58a883b9a76bdbcedc9be021841342",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/asterixdb/blob/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java?ref=07048a3b97dab28bcf7555ec900de0712ce9d710",
                "deletions": 7,
                "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java",
                "patch": "@@ -21,8 +21,10 @@\n import org.apache.asterix.external.api.IExternalScalarFunction;\n import org.apache.asterix.external.api.IFunctionHelper;\n import org.apache.asterix.external.library.java.base.JInt;\n+import org.apache.asterix.external.library.java.base.JOrderedList;\n import org.apache.asterix.external.library.java.base.JRecord;\n import org.apache.asterix.external.library.java.base.JString;\n+import org.apache.asterix.om.types.BuiltinType;\n \n /**\n  * Accepts an input record of type Open{ id: int32, text: string }\n@@ -43,16 +45,23 @@ public void deinitialize() {\n     @Override\n     public void evaluate(IFunctionHelper functionHelper) throws Exception {\n         JRecord inputRecord = (JRecord) functionHelper.getArgument(0);\n+        JOrderedList textList = (JOrderedList) inputRecord.getValueByName(\"text_list\");\n+        JOrderedList capList = new JOrderedList(BuiltinType.ASTRING);\n         JInt id = (JInt) inputRecord.getValueByName(\"id\");\n-        id.setValue(id.getValue() * -1); // for maintaining uniqueness\n-                                         // constraint in the case when\n-                                         // output is re-inserted into source\n-                                         // dataset\n-        JString text = (JString) inputRecord.getValueByName(\"text\");\n-        text.setValue(text.getValue().toUpperCase());\n+        id.setValue(id.getValue() * -1);\n+\n+        for (int iter1 = 0; iter1 < textList.getValue().size(); iter1++) {\n+            JRecord originalElement = (JRecord) textList.getValue().get(iter1);\n+            JString originalText = (JString) originalElement.getValueByName(\"text\");\n+            JString capText = new JString(originalText.getValue().toUpperCase());\n+            capList.getValue().add(capText);\n+        }\n+        JInt element_n = new JInt(textList.size());\n         JRecord result = (JRecord) functionHelper.getResultObject();\n         result.setField(\"id\", id);\n-        result.setField(\"text\", text);\n+        result.setField(\"text_list\", textList);\n+        result.setField(\"element_n\", element_n);\n+        result.setField(\"capitalized_list\", capList);\n         functionHelper.setResult(result);\n     }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/07048a3b97dab28bcf7555ec900de0712ce9d710/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/UpperCaseFunction.java",
                "sha": "398504ac7e5c07938137db510099648b21d2c726",
                "status": "modified"
            }
        ],
        "message": "[NO ISSUE][FUN] Fix type inference in JListAccessor\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\nAs the list element type is available, there is no need to deserialize\nelement types from the data. Doing so, for example, will cause the\nobject type to be fully open type and closed fields to be recognized as\nopen fields. This will further cause NPE in UDFs. Modified the upperCase\ntest case to check this issue.\n\nChange-Id: I4f437857779e5c0af175c695938fbd7208da244d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3264\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>",
        "parent": "https://github.com/apache/asterixdb/commit/04dd5977bd798d3f9538931f77b575eac3afec11",
        "patched_files": [
            "upperCase.java",
            "UpperCaseFunction.java",
            "JObjectAccessors.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_it.java"
        ]
    },
    "asterixdb_0902d2a": {
        "bug_id": "asterixdb_0902d2a",
        "commit": "https://github.com/apache/asterixdb/commit/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5",
        "file": [
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java",
                "changes": 102,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5",
                "deletions": 57,
                "filename": "asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java",
                "patch": "@@ -160,7 +160,7 @@ public static String aqlExtToResExt(String fname) {\n         return fname.substring(0, dot + 1) + EXTENSION_AQL_RESULT;\n     }\n \n-    public static void writeResultsToFile(File actualFile, InputStream resultStream) throws IOException, JSONException {\n+    public static void writeResultsToFile(File actualFile, InputStream resultStream) throws Exception {\n         BufferedWriter writer = new BufferedWriter(new FileWriter(actualFile));\n         try {\n             JsonFactory jsonFactory = new JsonFactory();\n@@ -176,10 +176,10 @@ public static void writeResultsToFile(File actualFile, InputStream resultStream)\n                             writer.write(record);\n                         }\n                     } else {\n-                        String summary = resultParser.getValueAsString();\n                         if (key.equals(\"summary\")) {\n+                            String summary = resultParser.nextTextValue();\n                             writer.write(summary);\n-                            throw new JsonMappingException(\"Could not find results key in the JSON Object\");\n+                            throw new Exception(\"Could not find results key in the JSON Object, result file is at \" + actualFile);\n                         }\n                     }\n                 }\n@@ -377,86 +377,75 @@ public static void executeTest(String actualPath, TestCaseContext testCaseCtx, P\n             for (TestFileContext ctx : testFileCtxs) {\n                 testFile = ctx.getFile();\n                 statement = TestsUtils.readTestFile(testFile);\n+                InputStream resultStream;\n                 try {\n                     switch (ctx.getType()) {\n                         case \"ddl\":\n                             TestsUtils.executeDDL(statement);\n                             break;\n                         case \"update\":\n-\n                             //isDmlRecoveryTest: set IP address\n                             if (isDmlRecoveryTest && statement.contains(\"nc1://\")) {\n                                 statement = statement\n                                         .replaceAll(\"nc1://\", \"127.0.0.1://../../../../../../asterix-app/\");\n-\n                             }\n \n                             TestsUtils.executeUpdate(statement);\n                             break;\n                         case \"query\":\n-                            try {\n-                                // isDmlRecoveryTest: insert Crash and Recovery\n-                                if (isDmlRecoveryTest) {\n-                                    executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator\n-                                            + \"dml_recovery\" + File.separator + \"kill_cc_and_nc.sh\");\n-                                    executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator\n-                                            + \"dml_recovery\" + File.separator + \"stop_and_start.sh\");\n-                                }\n+                            // isDmlRecoveryTest: insert Crash and Recovery\n+                            if (isDmlRecoveryTest) {\n+                                executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator + \"dml_recovery\"\n+                                        + File.separator + \"kill_cc_and_nc.sh\");\n+                                executeScript(pb, pb.environment().get(\"SCRIPT_HOME\") + File.separator + \"dml_recovery\"\n+                                        + File.separator + \"stop_and_start.sh\");\n+                            }\n \n-                                InputStream resultStream = executeQuery(statement);\n-                                expectedResultFile = expectedResultFileCtxs.get(queryCount).getFile();\n+                            resultStream = executeQuery(statement);\n+                            if (queryCount >= expectedResultFileCtxs.size()) {\n+                                throw new IllegalStateException(\"no result file for \" + testFile.toString());\n+                            }\n+                            expectedResultFile = expectedResultFileCtxs.get(queryCount).getFile();\n \n-                                File actualFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \".adm\");\n-                                TestsUtils.writeResultsToFile(actualFile, resultStream);\n+                            File actualFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \".adm\");\n+                            TestsUtils.writeResultsToFile(actualFile, resultStream);\n \n-                                File actualResultFile = testCaseCtx.getActualResultFile(cUnit, new File(actualPath));\n-                                actualResultFile.getParentFile().mkdirs();\n+                            File actualResultFile = testCaseCtx.getActualResultFile(cUnit, new File(actualPath));\n+                            actualResultFile.getParentFile().mkdirs();\n+\n+                            TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n+                                    expectedResultFile, actualFile);\n+                            LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\" + cUnit.getName()\n+                                    + \" PASSED \");\n \n-                                TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n-                                        expectedResultFile, actualFile);\n-                                LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n-                                        + cUnit.getName() + \" PASSED \");\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n                             queryCount++;\n                             break;\n                         case \"mgx\":\n                             executeManagixCommand(statement);\n                             break;\n                         case \"txnqbc\": //qbc represents query before crash\n-                            try {\n-                                InputStream resultStream = executeQuery(statement);\n-                                qbcFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \"_qbc.adm\");\n-                                qbcFile.getParentFile().mkdirs();\n-                                TestsUtils.writeResultsToFile(qbcFile, resultStream);\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n+                            resultStream = executeQuery(statement);\n+                            qbcFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \"_qbc.adm\");\n+                            qbcFile.getParentFile().mkdirs();\n+                            TestsUtils.writeResultsToFile(qbcFile, resultStream);\n                             break;\n                         case \"txnqar\": //qar represents query after recovery\n-                            try {\n-\n-                                InputStream resultStream = executeQuery(statement);\n-\n-                                qarFile = new File(actualPath + File.separator\n-                                        + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n-                                        + cUnit.getName() + \"_qar.adm\");\n-                                qarFile.getParentFile().mkdirs();\n-                                TestsUtils.writeResultsToFile(qarFile, resultStream);\n-\n-                                TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n-                                        qbcFile, qarFile);\n-\n-                                LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n-                                        + cUnit.getName() + \" PASSED \");\n-                            } catch (JsonMappingException e) {\n-                                throw new Exception(\"Test \\\"\" + testFile + \"\\\" FAILED!\\n\");\n-                            }\n+                            resultStream = executeQuery(statement);\n+                            qarFile = new File(actualPath + File.separator\n+                                    + testCaseCtx.getTestCase().getFilePath().replace(File.separator, \"_\") + \"_\"\n+                                    + cUnit.getName() + \"_qar.adm\");\n+                            qarFile.getParentFile().mkdirs();\n+                            TestsUtils.writeResultsToFile(qarFile, resultStream);\n+\n+                            TestsUtils.runScriptAndCompareWithResult(testFile, new PrintWriter(System.err),\n+                                    qbcFile, qarFile);\n+\n+                            LOGGER.info(\"[TEST]: \" + testCaseCtx.getTestCase().getFilePath() + \"/\"\n+                                    + cUnit.getName() + \" PASSED \");\n                             break;\n                         case \"txneu\": //eu represents erroneous update\n                             try {\n@@ -502,5 +491,4 @@ public static void executeTest(String actualPath, TestCaseContext testCaseCtx, P\n             }\n         }\n     }\n-\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-common/src/test/java/edu/uci/ics/asterix/test/aql/TestsUtils.java",
                "sha": "b280ec975e0c541d9316c35d6cfa77564bbab10b",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5",
                "deletions": 44,
                "filename": "asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java",
                "patch": "@@ -60,66 +60,47 @@ public TestCase getTestCase() {\n         return testCase;\n     }\n \n-    public List<TestFileContext> getTestFiles(CompilationUnit cUnit) {\n+    public List<TestFileContext> getFilesInDir(String basePath, String dirName, boolean withType) {\n         List<TestFileContext> testFileCtxs = new ArrayList<TestFileContext>();\n \n         File path = tsRoot;\n-        path = new File(path, testSuite.getQueryOffsetPath());\n+        path = new File(path, basePath);\n         path = new File(path, testCase.getFilePath());\n-        path = new File(path, cUnit.getName());\n+        path = new File(path, dirName);\n \n-        String fileNames[] = path.list();\n-        for (String fName : fileNames) {\n-            if (fName.startsWith(\".\")) {\n-                continue;\n-            }\n-            \n-            File testFile = new File(path, fName);\n-            TestFileContext tfsc = new TestFileContext(testFile);\n-            String[] nameSplits = fName.split(\"\\\\.\");\n-            if (nameSplits.length < 3) {\n-                throw new IllegalArgumentException(\"Test file '\" + cUnit.getName() + File.separatorChar\n-                        + fName + \"' does not have the proper test file name format.\");\n-            }\n-            tfsc.setSeqNum(nameSplits[nameSplits.length - 3]);\n-            tfsc.setType(nameSplits[nameSplits.length - 2]);\n-            testFileCtxs.add(tfsc);\n-        }\n-        Collections.sort(testFileCtxs);\n-        return testFileCtxs;\n-    }\n-\n-    public List<TestFileContext> getExpectedResultFiles(CompilationUnit cUnit) {\n-        List<TestFileContext> resultFileCtxs = new ArrayList<TestFileContext>();\n-\n-        File path = tsRoot;\n-        path = new File(path, testSuite.getResultOffsetPath());\n-        path = new File(path, testCase.getFilePath());\n-        path = new File(path, cUnit.getOutputDir().getValue());\n-\n-        String fileNames[] = path.list();\n-\n-        if (fileNames != null) {\n+        if (path.isDirectory()) {\n+            String fileNames[] = path.list();\n             for (String fName : fileNames) {\n                 if (fName.startsWith(\".\")) {\n                     continue;\n                 }\n-                \n+\n                 File testFile = new File(path, fName);\n                 TestFileContext tfsc = new TestFileContext(testFile);\n                 String[] nameSplits = fName.split(\"\\\\.\");\n-                \n                 if (nameSplits.length < 3) {\n-                    throw new IllegalArgumentException(\"Test file '\" + cUnit.getName() + File.separatorChar\n-                            + fName + \"' does not have the proper test file name format.\");\n+                    throw new IllegalArgumentException(\"Test file '\" + dirName + File.separatorChar + fName\n+                            + \"' does not have the proper test file name format.\");\n                 }\n-                \n-                tfsc.setSeqNum(nameSplits[nameSplits.length - 2]);\n-                resultFileCtxs.add(tfsc);\n+                if (withType) {\n+                    tfsc.setSeqNum(nameSplits[nameSplits.length - 3]);\n+                    tfsc.setType(nameSplits[nameSplits.length - 2]);\n+                } else {\n+                    tfsc.setSeqNum(nameSplits[nameSplits.length - 2]);\n+                }\n+                testFileCtxs.add(tfsc);\n             }\n-            Collections.sort(resultFileCtxs);\n         }\n-        return resultFileCtxs;\n+        Collections.sort(testFileCtxs);\n+        return testFileCtxs;\n+    }\n+\n+    public List<TestFileContext> getTestFiles(CompilationUnit cUnit) {\n+        return getFilesInDir(testSuite.getQueryOffsetPath(), cUnit.getName(), true);\n+    }\n+\n+    public List<TestFileContext> getExpectedResultFiles(CompilationUnit cUnit) {\n+        return getFilesInDir(testSuite.getResultOffsetPath(), cUnit.getOutputDir().getValue(), false);\n     }\n \n     public File getActualResultFile(CompilationUnit cUnit, File actualResultsBase) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/asterix-test-framework/src/main/java/edu/uci/ics/asterix/testframework/context/TestCaseContext.java",
                "sha": "04c10a506a3e5981db87a86912e374b9ee9367e9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/pom.xml?ref=0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5",
                "deletions": 2,
                "filename": "pom.xml",
                "patch": "@@ -31,8 +31,8 @@\n     <metadata.tests>**/metadata/*Test.java</metadata.tests>\n     <execution.tests>**/ExecutionTest.java</execution.tests>\n     <invalid.tests>**/DmlTest.java</invalid.tests>\n-    <global.test.includes>**/*TestSuite.java,**/*Test.java</global.test.includes>\n-    <global.test.excludes>${optimizer.tests},${metadata.tests},${execution.tests},${invalid.tests}</global.test.excludes>\n+    <global.test.includes>**/*TestSuite.java,**/*Test.java,${execution.tests}</global.test.includes>\n+    <global.test.excludes>${optimizer.tests},${metadata.tests},${invalid.tests}</global.test.excludes>\n   </properties>\n \n \t<build>",
                "raw_url": "https://github.com/apache/asterixdb/raw/0902d2adbbb8e0abaf3d3230c4fc08e5d32346f5/pom.xml",
                "sha": "74592ed571ffbf0da492c7d365c50550292b25bf",
                "status": "modified"
            }
        ],
        "message": "some test cleanup\n- avoid NPE when reading the \"summary field\" of the result\n- avoid IndexOutOfBoundsException for missing result files\n- get rid of exception tunneling through JsonMappingException\n- refactor common code into TestCaseContext.getFilesInDir\nmove execution.tests to global.test.includes",
        "parent": "https://github.com/apache/asterixdb/commit/224f2ffe5b12d9ccd31c2d8b1e4fd8fb713cae0d",
        "patched_files": [
            "pom.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "TestsUtils.java",
            "TestCaseContext.java"
        ]
    },
    "asterixdb_0d0a113": {
        "bug_id": "asterixdb_0d0a113",
        "commit": "https://github.com/apache/asterixdb/commit/0d0a113f40014384bcf54b68235581286c9b2c2b",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java",
                "patch": "@@ -64,6 +64,8 @@ private LoggerHolder() {\n     public NodeControllerService[] ncs = new NodeControllerService[0];\n     public IHyracksClientConnection hcc;\n \n+    private static final String DEFAULT_STORAGE_PATH = joinPath(\"target\", \"io\", \"dir\");\n+    private static String storagePath = DEFAULT_STORAGE_PATH;\n     private ConfigManager configManager;\n     private List<String> nodeNames;\n \n@@ -217,8 +219,16 @@ public void stopCC(boolean terminateNCService) throws Exception {\n         }\n     }\n \n+    public static void setStoragePath(String path) {\n+        storagePath = path;\n+    }\n+\n+    public static void restoreDefaultStoragePath() {\n+        storagePath = DEFAULT_STORAGE_PATH;\n+    }\n+\n     protected String getDefaultStoragePath() {\n-        return joinPath(\"target\", \"io\", \"dir\");\n+        return storagePath;\n     }\n \n     public void removeTestStorageFiles() {",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/main/java/org/apache/asterix/api/common/AsterixHyracksIntegrationUtil.java",
                "sha": "279976548d3e77bd3cef1dd7c563f1398fd42443",
                "status": "modified"
            },
            {
                "additions": 173,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java",
                "changes": 173,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java",
                "patch": "@@ -0,0 +1,173 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.test.storage;\n+\n+import static org.apache.hyracks.util.StorageUtil.StorageUnit.MEGABYTE;\n+\n+import java.nio.file.Path;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.apache.asterix.api.common.AsterixHyracksIntegrationUtil;\n+import org.apache.asterix.app.bootstrap.TestNodeController;\n+import org.apache.asterix.app.data.gen.TupleGenerator;\n+import org.apache.asterix.app.data.gen.TupleGenerator.GenerationFunction;\n+import org.apache.asterix.common.config.DatasetConfig.DatasetType;\n+import org.apache.asterix.common.dataflow.LSMInsertDeleteOperatorNodePushable;\n+import org.apache.asterix.common.exceptions.ExceptionUtils;\n+import org.apache.asterix.common.transactions.ITransactionContext;\n+import org.apache.asterix.external.util.DataflowUtils;\n+import org.apache.asterix.file.StorageComponentProvider;\n+import org.apache.asterix.metadata.entities.Dataset;\n+import org.apache.asterix.metadata.entities.Index;\n+import org.apache.asterix.metadata.entities.InternalDatasetDetails;\n+import org.apache.asterix.metadata.entities.InternalDatasetDetails.PartitioningStrategy;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.test.common.TestHelper;\n+import org.apache.commons.lang3.SystemUtils;\n+import org.apache.hyracks.api.comm.VSizeFrame;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+import org.apache.hyracks.api.exceptions.ErrorCode;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.dataflow.common.comm.io.FrameTupleAppender;\n+import org.apache.hyracks.dataflow.common.data.accessors.ITupleReference;\n+import org.apache.hyracks.storage.am.lsm.common.impls.NoMergePolicyFactory;\n+import org.apache.hyracks.util.DiskUtil;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+public class DiskIsFullTest {\n+\n+    private static final IAType[] KEY_TYPES = { BuiltinType.AINT32 };\n+    private static final ARecordType RECORD_TYPE = new ARecordType(\"TestRecordType\", new String[] { \"key\", \"value\" },\n+            new IAType[] { BuiltinType.AINT32, BuiltinType.AINT64 }, false);\n+    private static final GenerationFunction[] RECORD_GEN_FUNCTION =\n+            { GenerationFunction.DETERMINISTIC, GenerationFunction.DETERMINISTIC };\n+    private static final boolean[] UNIQUE_RECORD_FIELDS = { true, false };\n+    private static final ARecordType META_TYPE = null;\n+    private static final GenerationFunction[] META_GEN_FUNCTION = null;\n+    private static final boolean[] UNIQUE_META_FIELDS = null;\n+    private static final int[] KEY_INDEXES = { 0 };\n+    private static final int[] KEY_INDICATOR = { Index.RECORD_INDICATOR };\n+    private static final List<Integer> KEY_INDICATOR_LIST = Arrays.asList(new Integer[] { Index.RECORD_INDICATOR });\n+    private static final int DATASET_ID = 101;\n+    private static final String DATAVERSE_NAME = \"TestDV\";\n+    private static final String DATASET_NAME = \"TestDS\";\n+    private static final String DATA_TYPE_NAME = \"DUMMY\";\n+    private static final String NODE_GROUP_NAME = \"DEFAULT\";\n+    private static final String TEST_DISK_NAME = \"asterixdb_ram_disk\";\n+    private boolean shouldRun = true;\n+\n+    @Before\n+    public void setUp() throws Exception {\n+        if (!SystemUtils.IS_OS_MAC) {\n+            System.out.println(\"Skipping test \" + DiskIsFullTest.class.getName() + \" due to unsupported OS\");\n+            shouldRun = false;\n+            return;\n+        }\n+        System.out.println(\"SetUp: \");\n+        TestHelper.deleteExistingInstanceFiles();\n+        // create RAM disk\n+        final Path ramDiskRoot = DiskUtil.mountRamDisk(TEST_DISK_NAME, 4, MEGABYTE);\n+        // Use RAM disk for storage\n+        AsterixHyracksIntegrationUtil.setStoragePath(ramDiskRoot.toAbsolutePath().toString());\n+    }\n+\n+    @After\n+    public void tearDown() throws Exception {\n+        if (!shouldRun) {\n+            return;\n+        }\n+        System.out.println(\"TearDown\");\n+        TestHelper.deleteExistingInstanceFiles();\n+        DiskUtil.unmountRamDisk(TEST_DISK_NAME);\n+        AsterixHyracksIntegrationUtil.restoreDefaultStoragePath();\n+    }\n+\n+    @Test\n+    public void testDiskIsFull() {\n+        if (!shouldRun) {\n+            return;\n+        }\n+        HyracksDataException expectedException =\n+                HyracksDataException.create(ErrorCode.CANNOT_MODIFY_INDEX_DISK_IS_FULL);\n+        try {\n+            TestNodeController nc = new TestNodeController(null, false);\n+            nc.init();\n+            StorageComponentProvider storageManager = new StorageComponentProvider();\n+            List<List<String>> partitioningKeys = new ArrayList<>();\n+            partitioningKeys.add(Collections.singletonList(\"key\"));\n+            Dataset dataset =\n+                    new Dataset(DATAVERSE_NAME, DATASET_NAME, DATAVERSE_NAME, DATA_TYPE_NAME, NODE_GROUP_NAME, null,\n+                            null,\n+                            new InternalDatasetDetails(null, PartitioningStrategy.HASH, partitioningKeys, null, null,\n+                                    null, false, null, false), null, DatasetType.INTERNAL, DATASET_ID, 0);\n+            try {\n+                nc.createPrimaryIndex(dataset, KEY_TYPES, RECORD_TYPE, META_TYPE, new NoMergePolicyFactory(), null,\n+                        null, storageManager, KEY_INDEXES, KEY_INDICATOR_LIST);\n+                IHyracksTaskContext ctx = nc.createTestContext(false);\n+                nc.newJobId();\n+                ITransactionContext txnCtx = nc.getTransactionManager().getTransactionContext(nc.getTxnJobId(), true);\n+                // Prepare insert operation\n+                LSMInsertDeleteOperatorNodePushable insertOp =\n+                        nc.getInsertPipeline(ctx, dataset, KEY_TYPES, RECORD_TYPE, META_TYPE,\n+                                new NoMergePolicyFactory(), null, null, KEY_INDEXES, KEY_INDICATOR_LIST, storageManager)\n+                                .getLeft();\n+                insertOp.open();\n+                TupleGenerator tupleGenerator =\n+                        new TupleGenerator(RECORD_TYPE, META_TYPE, KEY_INDEXES, KEY_INDICATOR, RECORD_GEN_FUNCTION,\n+                                UNIQUE_RECORD_FIELDS, META_GEN_FUNCTION, UNIQUE_META_FIELDS);\n+                VSizeFrame frame = new VSizeFrame(ctx);\n+                FrameTupleAppender tupleAppender = new FrameTupleAppender(frame);\n+                // Insert records until disk becomes full\n+                int tupleCount = 100000;\n+                while (tupleCount > 0) {\n+                    ITupleReference tuple = tupleGenerator.next();\n+                    try {\n+                        DataflowUtils.addTupleToFrame(tupleAppender, tuple, insertOp);\n+                    } catch (Throwable t) {\n+                        final Throwable rootCause = ExceptionUtils.getRootCause(t);\n+                        rootCause.printStackTrace();\n+                        if (rootCause instanceof HyracksDataException) {\n+                            HyracksDataException cause = (HyracksDataException) rootCause;\n+                            Assert.assertEquals(cause.getErrorCode(), expectedException.getErrorCode());\n+                            Assert.assertEquals(cause.getMessage(), expectedException.getMessage());\n+                            return;\n+                        } else {\n+                            break;\n+                        }\n+                    }\n+                    tupleCount--;\n+                }\n+                Assert.fail(\"Expected exception (\" + expectedException + \") was not thrown\");\n+            } finally {\n+                nc.deInit();\n+            }\n+        } catch (Throwable e) {\n+            e.printStackTrace();\n+            Assert.fail(\"Expected exception (\" + expectedException + \") was not thrown\");\n+        }\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/storage/DiskIsFullTest.java",
                "sha": "58697a99bc9fa19b1d59e2aadad8931a7a619208",
                "status": "added"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 3,
                "filename": "asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.asterix.transaction.management.resource;\n \n+import static org.apache.hyracks.api.exceptions.ErrorCode.CANNOT_CREATE_FILE;\n+\n import java.io.File;\n import java.io.FileInputStream;\n import java.io.FileOutputStream;\n@@ -190,10 +192,12 @@ public synchronized void insert(LocalResource resource) throws HyracksDataExcept\n         FileReference resourceFile = ioManager.resolve(relativePath);\n         if (resourceFile.getFile().exists()) {\n             throw new HyracksDataException(\"Duplicate resource: \" + resourceFile.getAbsolutePath());\n-        } else {\n-            resourceFile.getFile().getParentFile().mkdirs();\n         }\n-        resourceCache.put(resource.getPath(), resource);\n+\n+        final File parent = resourceFile.getFile().getParentFile();\n+        if (!parent.exists() && !parent.mkdirs()) {\n+            throw HyracksDataException.create(CANNOT_CREATE_FILE, parent.getAbsolutePath());\n+        }\n \n         try (FileOutputStream fos = new FileOutputStream(resourceFile.getFile());\n                 ObjectOutputStream oosToFos = new ObjectOutputStream(fos)) {\n@@ -203,6 +207,8 @@ public synchronized void insert(LocalResource resource) throws HyracksDataExcept\n             throw new HyracksDataException(e);\n         }\n \n+        resourceCache.put(resource.getPath(), resource);\n+\n         //if replication enabled, send resource metadata info to remote nodes\n         if (isReplicationEnabled) {\n             createReplicationJob(ReplicationOperation.REPLICATE, resourceFile);",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/asterixdb/asterix-transactions/src/main/java/org/apache/asterix/transaction/management/resource/PersistentLocalResourceRepository.java",
                "sha": "b117cf1d6d1f40ae4558e53fad0489926833d778",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java",
                "patch": "@@ -121,6 +121,7 @@\n     public static final int FOUND_MULTIPLE_TRANSACTIONS = 85;\n     public static final int UNRECOGNIZED_INDEX_COMPONENT_FILE = 86;\n     public static final int UNEQUAL_NUM_FILTERS_TREES = 87;\n+    public static final int CANNOT_MODIFY_INDEX_DISK_IS_FULL = 88;\n \n     // Compilation error codes.\n     public static final int RULECOLLECTION_NOT_INSTANCE_OF_LIST = 10000;",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/exceptions/ErrorCode.java",
                "sha": "e6fbc6f265cc4e0a0971d40b1db520e772bf3bc7",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties",
                "patch": "@@ -104,5 +104,6 @@\n 85 = Found more than one transaction file in %1$s\n 86 = Found an unrecognized index file %1$s\n 87 = Unequal number of trees and filters found in %1$s\n+88 = Cannot modify index (Disk is full)\n \n 10000 = The given rule collection %1$s is not an instance of the List class.",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-api/src/main/resources/errormsg/en.properties",
                "sha": "d2e05e381c8bded26478c7abebfaffd4a3a2d1d1",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 10,
                "filename": "hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java",
                "patch": "@@ -66,28 +66,35 @@ public void open(IHyracksTaskContext ctx) throws HyracksDataException {\n     }\n \n     public void close() throws HyracksDataException {\n-        out.close();\n+        if (out != null) {\n+            out.close();\n+        }\n     }\n \n     public void appendFrame(ByteBuffer buffer) throws HyracksDataException {\n         out.nextFrame(buffer);\n     }\n \n     public void writeOut(IFrameWriter writer, IFrame frame, boolean failed) throws HyracksDataException {\n-        RunFileReader in = out.createReader();\n+        RunFileReader in = null;\n+        if (out != null) {\n+            in = out.createReader();\n+        }\n         writer.open();\n         try {\n             if (failed) {\n                 writer.fail();\n                 return;\n             }\n-            in.open();\n-            try {\n-                while (in.nextFrame(frame)) {\n-                    writer.nextFrame(frame.getBuffer());\n+            if (in != null) {\n+                in.open();\n+                try {\n+                    while (in.nextFrame(frame)) {\n+                        writer.nextFrame(frame.getBuffer());\n+                    }\n+                } finally {\n+                    in.close();\n                 }\n-            } finally {\n-                in.close();\n             }\n         } catch (Exception e) {\n             writer.fail();\n@@ -96,10 +103,10 @@ public void writeOut(IFrameWriter writer, IFrame frame, boolean failed) throws H\n             try {\n                 writer.close();\n             } finally {\n-                if (numConsumers.decrementAndGet() == 0) {\n+                if (numConsumers.decrementAndGet() == 0 && out != null) {\n                     out.getFileReference().delete();\n                 }\n             }\n         }\n     }\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-dataflow-std/src/main/java/org/apache/hyracks/dataflow/std/misc/MaterializerTaskState.java",
                "sha": "31cbaad111562a950b3ec3a486552d0f24bcb6f1",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java",
                "patch": "@@ -144,6 +144,11 @@ public void threadExit(LSMOperationType opType, boolean failedOperation, boolean\n                     throw new IllegalStateException(\"Flush sees an illegal LSM memory compoenent state: \" + state);\n                 }\n                 readerCount--;\n+                if (failedOperation) {\n+                    // if flush failed, return the component state to READABLE_UNWRITABLE\n+                    state = ComponentState.READABLE_UNWRITABLE;\n+                    return;\n+                }\n                 if (readerCount == 0) {\n                     state = ComponentState.INACTIVE;\n                 } else {",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/AbstractLSMMemoryComponent.java",
                "sha": "1ee68d991223fdb082b677286173c437d1cd243f",
                "status": "modified"
            },
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 2,
                "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java",
                "patch": "@@ -47,6 +47,7 @@\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndex;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndexAccessor;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMIndexOperationContext;\n+import org.apache.hyracks.storage.am.lsm.common.api.ILSMMemoryComponent;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMMergePolicy;\n import org.apache.hyracks.storage.am.lsm.common.api.ILSMOperationTracker;\n import org.apache.hyracks.storage.am.lsm.common.api.LSMOperationType;\n@@ -131,6 +132,10 @@ protected boolean getAndEnterComponents(ILSMIndexOperationContext ctx, LSMOperat\n                     // Flush and merge operations should never reach this wait call, because they are always try operations.\n                     // If they fail to enter the components, then it means that there are an ongoing flush/merge operation on\n                     // the same components, so they should not proceed.\n+                    if (opType == LSMOperationType.MODIFICATION) {\n+                        // before waiting, make sure the index is in a modifiable state to avoid waiting forever.\n+                        ensureIndexModifiable();\n+                    }\n                     opTracker.wait();\n                 } catch (InterruptedException e) {\n                     throw new HyracksDataException(e);\n@@ -186,6 +191,7 @@ protected boolean enterComponents(ILSMIndexOperationContext ctx, LSMOperationTyp\n                 break;\n             case MERGE:\n                 lsmIndex.getIOOperationCallback().beforeOperation(LSMOperationType.MERGE);\n+                break;\n             default:\n                 break;\n         }\n@@ -498,15 +504,17 @@ public void flush(ILSMIndexOperationContext ctx, ILSMIOOperation operation) thro\n         }\n \n         ILSMDiskComponent newComponent = null;\n+        boolean failedOperation = false;\n         try {\n             newComponent = lsmIndex.flush(operation);\n             operation.getCallback().afterOperation(LSMOperationType.FLUSH, null, newComponent);\n             lsmIndex.markAsValid(newComponent);\n         } catch (Throwable e) {\n+            failedOperation = true;\n             e.printStackTrace();\n             throw e;\n         } finally {\n-            exitComponents(ctx, LSMOperationType.FLUSH, newComponent, false);\n+            exitComponents(ctx, LSMOperationType.FLUSH, newComponent, failedOperation);\n             operation.getCallback().afterFinalize(LSMOperationType.FLUSH, newComponent);\n         }\n         if (LOGGER.isLoggable(Level.INFO)) {\n@@ -545,15 +553,17 @@ public void merge(ILSMIndexOperationContext ctx, ILSMIOOperation operation) thro\n         }\n \n         ILSMDiskComponent newComponent = null;\n+        boolean failedOperation = false;\n         try {\n             newComponent = lsmIndex.merge(operation);\n             operation.getCallback().afterOperation(LSMOperationType.MERGE, ctx.getComponentHolder(), newComponent);\n             lsmIndex.markAsValid(newComponent);\n         } catch (Throwable e) {\n+            failedOperation = true;\n             e.printStackTrace();\n             throw e;\n         } finally {\n-            exitComponents(ctx, LSMOperationType.MERGE, newComponent, false);\n+            exitComponents(ctx, LSMOperationType.MERGE, newComponent, failedOperation);\n             operation.getCallback().afterFinalize(LSMOperationType.MERGE, newComponent);\n         }\n         if (LOGGER.isLoggable(Level.INFO)) {\n@@ -660,4 +670,23 @@ public void batchOperate(ILSMIndexOperationContext ctx, FrameTupleAccessor acces\n             exit(ctx);\n         }\n     }\n+\n+    /***\n+     * Ensures the index is in a modifiable state\n+     * @throws HyracksDataException if the index is not in a modifiable state\n+     */\n+    private void ensureIndexModifiable() throws HyracksDataException {\n+        // find if there is any memory component which is in a writable state or eventually will be in a writable state\n+        for (ILSMMemoryComponent memoryComponent : lsmIndex.getMemoryComponents()) {\n+            switch (memoryComponent.getState()) {\n+                case INACTIVE:\n+                case READABLE_WRITABLE:\n+                case READABLE_UNWRITABLE_FLUSHING:\n+                    return;\n+                default:\n+                    // continue to the next component\n+            }\n+        }\n+        throw HyracksDataException.create(ErrorCode.CANNOT_MODIFY_INDEX_DISK_IS_FULL);\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-common/src/main/java/org/apache/hyracks/storage/am/lsm/common/impls/LSMHarness.java",
                "sha": "8ff907a30f74e38f4972f24ee85a9408570f034f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/pom.xml?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-util/pom.xml",
                "patch": "@@ -64,6 +64,10 @@\n       <groupId>com.fasterxml.jackson.core</groupId>\n       <artifactId>jackson-core</artifactId>\n     </dependency>\n+    <dependency>\n+      <groupId>org.apache.commons</groupId>\n+      <artifactId>commons-lang3</artifactId>\n+    </dependency>\n   </dependencies>\n \n </project>",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/pom.xml",
                "sha": "3b03fce8a5dfdd305d7e8caafab865051c5d959c",
                "status": "modified"
            },
            {
                "additions": 126,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java",
                "changes": 126,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java",
                "patch": "@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.hyracks.util;\n+\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n+import java.nio.file.Paths;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n+\n+import org.apache.commons.lang3.SystemUtils;\n+\n+public class DiskUtil {\n+\n+    private static final Logger LOGGER = Logger.getLogger(DiskUtil.class.getName());\n+\n+    private DiskUtil() {\n+        throw new AssertionError(\"Util class should not be initialized.\");\n+    }\n+\n+    /**\n+     * Mounts a RAM disk\n+     *\n+     * @param name\n+     * @param size\n+     * @param unit\n+     * @return The root of the mounted disk\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public static Path mountRamDisk(String name, int size, StorageUtil.StorageUnit unit)\n+            throws IOException, InterruptedException {\n+        if (SystemUtils.IS_OS_MAC) {\n+            return mountMacRamDisk(name, (StorageUtil.getIntSizeInBytes(size, unit) * 2) / StorageUtil.BASE);\n+        } else if (SystemUtils.IS_OS_LINUX) {\n+            return mountLinuxRamDisk(name, size + unit.getLinuxUnitTypeInLetter());\n+        }\n+        throw new UnsupportedOperationException(\"Unsupported OS: \" + System.getProperty(\"os.name\"));\n+    }\n+\n+    /**\n+     * Unmounts a disk\n+     *\n+     * @param name\n+     * @throws IOException\n+     * @throws InterruptedException\n+     */\n+    public static void unmountRamDisk(String name) throws IOException, InterruptedException {\n+        if (SystemUtils.IS_OS_MAC) {\n+            unmountMacRamDisk(name);\n+        } else if (SystemUtils.IS_OS_LINUX) {\n+            unmountLinuxRamDisk(name);\n+        }\n+    }\n+\n+    private static Path mountMacRamDisk(String name, long size) throws IOException, InterruptedException {\n+        final String cmd = \"diskutil erasevolume HFS+ '\" + name + \"' `hdiutil attach -nomount ram://\" + size + \"`\";\n+        final ProcessBuilder pb = new ProcessBuilder(\"/bin/sh\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+        return Paths.get(\"/Volumes\", name);\n+    }\n+\n+    private static void unmountMacRamDisk(String name) throws InterruptedException, IOException {\n+        final String cmd = \"diskutil unmount \" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"/bin/sh\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+    }\n+\n+    private static Path mountLinuxRamDisk(String name, String size) throws IOException, InterruptedException {\n+        Path root = Paths.get(\"/tmp\", name);\n+        if (!Files.exists(root)) {\n+            Files.createFile(root);\n+        }\n+        final String cmd = \"mount -o size=\" + size + \" -t tmpfs none /tmp/\" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+        return root;\n+    }\n+\n+    private static void unmountLinuxRamDisk(String name) throws InterruptedException, IOException {\n+        final String cmd = \"umount /tmp/\" + name;\n+        final ProcessBuilder pb = new ProcessBuilder(\"bash\", \"-c\", cmd);\n+        final Process p = pb.start();\n+        watchProcess(p);\n+        p.waitFor();\n+    }\n+\n+    private static void watchProcess(Process p) {\n+        new Thread(() -> {\n+            final BufferedReader input = new BufferedReader(new InputStreamReader(p.getInputStream()));\n+            String line;\n+            try {\n+                while ((line = input.readLine()) != null) {\n+                    LOGGER.info(line);\n+                }\n+            } catch (IOException e) {\n+                LOGGER.log(Level.WARNING, e.getMessage(), e);\n+            }\n+        }).start();\n+    }\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/DiskUtil.java",
                "sha": "9a65d720a4e85b9470ce1ea8fc3dc1c44c90603b",
                "status": "added"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/asterixdb/blob/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java?ref=0d0a113f40014384bcf54b68235581286c9b2c2b",
                "deletions": 8,
                "filename": "hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java",
                "patch": "@@ -23,17 +23,18 @@\n \n public class StorageUtil {\n \n-    private static final int BASE = 1024;\n+    public static final int BASE = 1024;\n \n     public enum StorageUnit {\n-        BYTE(\"B\", 1),\n-        KILOBYTE(\"KB\", BASE),\n-        MEGABYTE(\"MB\", KILOBYTE.multiplier * BASE),\n-        GIGABYTE(\"GB\", MEGABYTE.multiplier * BASE),\n-        TERABYTE(\"TB\", GIGABYTE.multiplier * BASE),\n-        PETABYTE(\"PB\", TERABYTE.multiplier * BASE);\n+        BYTE(\"B\", \"b\", 1),\n+        KILOBYTE(\"KB\", \"kb\", BASE),\n+        MEGABYTE(\"MB\", \"m\", KILOBYTE.multiplier * BASE),\n+        GIGABYTE(\"GB\", \"g\", MEGABYTE.multiplier * BASE),\n+        TERABYTE(\"TB\", \"t\", GIGABYTE.multiplier * BASE),\n+        PETABYTE(\"PB\", \"p\", TERABYTE.multiplier * BASE);\n \n         private final String unitTypeInLetter;\n+        private final String linuxUnitTypeInLetter;\n         private final long multiplier;\n         private static final Map<String, StorageUnit> SUFFIX_TO_UNIT_MAP = new HashMap<>();\n \n@@ -43,8 +44,9 @@\n             }\n         }\n \n-        StorageUnit(String unitTypeInLetter, long multiplier) {\n+        StorageUnit(String unitTypeInLetter, String linuxUnitTypeInLetter, long multiplier) {\n             this.unitTypeInLetter = unitTypeInLetter;\n+            this.linuxUnitTypeInLetter = linuxUnitTypeInLetter;\n             this.multiplier = multiplier;\n         }\n \n@@ -57,6 +59,10 @@ public double toBytes(double value) {\n             return value * multiplier;\n         }\n \n+        public String getLinuxUnitTypeInLetter() {\n+            return linuxUnitTypeInLetter;\n+        }\n+\n         public static StorageUnit lookupBySuffix(String name) {\n             return SUFFIX_TO_UNIT_MAP.get(name);\n         }",
                "raw_url": "https://github.com/apache/asterixdb/raw/0d0a113f40014384bcf54b68235581286c9b2c2b/hyracks-fullstack/hyracks/hyracks-util/src/main/java/org/apache/hyracks/util/StorageUtil.java",
                "sha": "dbfe6f9503fb67090ec2fbbb5450bfb2ea2fe207",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-1995][STO] Abort write txn when index cannot be flushed\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fix LSM memory component state transition on flush/merge failure\n- When index cannot be flushed, abort waiting threads\n- Prevent NPE in MateralizerTaskState when file creation fails\n- Check parent dirs creation for index metadata file\n\nChange-Id: I28592c30c788f4a6f44db8b47a84bc77f6b3f8f3\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1896\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/8b077a536aa7c1bb69f31067ace8f136ffdf5182",
        "patched_files": [
            "en.java",
            "DiskUtil.java",
            "AbstractLSMMemoryComponent.java",
            "StorageUtil.java",
            "AsterixHyracksIntegrationUtil.java",
            "ErrorCode.java",
            "LSMHarness.java",
            "pom.java",
            "MaterializerTaskState.java",
            "PersistentLocalResourceRepository.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "DiskIsFullTest.java",
            "PersistentLocalResourceRepositoryTest.java"
        ]
    },
    "asterixdb_3f83b2c": {
        "bug_id": "asterixdb_3f83b2c",
        "commit": "https://github.com/apache/asterixdb/commit/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql",
                "patch": "@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Bulkload non-empty index.\n+ * Expected Res : Failure\n+ * Date         : 29 July 2016\n+ */\n+drop dataverse OpenTinySocial if exists;\n+create dataverse OpenTinySocial;\n+use dataverse OpenTinySocial;\n+\n+create type FacebookMessageType as {\n+  message-id: int64\n+};\n+\n+create dataset FacebookMessages(FacebookMessageType)\n+primary key message-id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.1.ddl.aql",
                "sha": "963e105d1d2cbfe973f3154c9dd255516c4c7686",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+ * Description  : Bulkload non-empty index.\n+ * Expected Res : Failure\n+ * Date         : 29 July 2016\n+ */\n+use dataverse OpenTinySocial;\n+\n+load dataset FacebookMessages\n+using localfs\n+((\"path\"=\"asterix_nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset FacebookMessages\n+using localfs\n+((\"path\"=\"asterix_nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/queries/load/load_non-empty_index/load_non-empty_index.2.update.aql",
                "sha": "21db9810807dcb5a9eda91ca8bdfd8081fc34497",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "patch": "@@ -6379,6 +6379,12 @@\n       </test-case>-->\n   </test-group>\n   <test-group name=\"load\">\n+    <test-case FilePath=\"load\">\n+      <compilation-unit name=\"load_non-empty_index\">\n+        <output-dir compare=\"Text\">load_non-empty_index</output-dir>\n+        <expected-error>Cannot load an index that is not empty</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"load\">\n       <compilation-unit name=\"dataset-with-meta\">\n         <output-dir compare=\"Text\">dataset-with-meta</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "sha": "0553fba278877203a6612f402d43b6656bf3c657",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java?ref=3f83b2c5cb2526b47e29d1ea8871ed454e8a5509",
                "deletions": 2,
                "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java",
                "patch": "@@ -97,7 +97,10 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n     @Override\n     public void close() throws HyracksDataException {\n         try {\n-            bulkLoader.end();\n+            // bulkloader can be null if an exception is thrown before it is initialized.\n+            if (bulkLoader != null) {\n+                bulkLoader.end();\n+            }\n         } catch (Throwable th) {\n             throw new HyracksDataException(th);\n         } finally {\n@@ -123,4 +126,4 @@ public void fail() throws HyracksDataException {\n             writer.fail();\n         }\n     }\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/3f83b2c5cb2526b47e29d1ea8871ed454e8a5509/hyracks-fullstack/hyracks/hyracks-storage-am-common/src/main/java/org/apache/hyracks/storage/am/common/dataflow/IndexBulkLoadOperatorNodePushable.java",
                "sha": "56cad895e5afe773f131a71dd0d4dd04db224c6f",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-1363: Fix NPE on bulkload failure\n\nChange-Id: Ic1626baa63371834cc2abbe30366df506d817da6\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1033\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>",
        "parent": "https://github.com/apache/asterixdb/commit/5dc73edd313eac8755a51dd603b73f4263e03c82",
        "patched_files": [
            "load_non-empty_index.java",
            "IndexBulkLoadOperatorNodePushable.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite.java"
        ]
    },
    "asterixdb_4053f39": {
        "bug_id": "asterixdb_4053f39",
        "commit": "https://github.com/apache/asterixdb/commit/4053f390af30d7d8cbf906fd874291a28a1b1c0b",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/DeepEqualQueries.xml",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/DeepEqualQueries.xml?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/DeepEqualQueries.xml",
                "patch": "@@ -0,0 +1,28 @@\n+<!--\n+ ! Licensed to the Apache Software Foundation (ASF) under one\n+ ! or more contributor license agreements.  See the NOTICE file\n+ ! distributed with this work for additional information\n+ ! regarding copyright ownership.  The ASF licenses this file\n+ ! to you under the Apache License, Version 2.0 (the\n+ ! \"License\"); you may not use this file except in compliance\n+ ! with the License.  You may obtain a copy of the License at\n+ !\n+ !   http://www.apache.org/licenses/LICENSE-2.0\n+ !\n+ ! Unless required by applicable law or agreed to in writing,\n+ ! software distributed under the License is distributed on an\n+ ! \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ ! KIND, either express or implied.  See the License for the\n+ ! specific language governing permissions and limitations\n+ ! under the License.\n+ !-->\n+    <test-case FilePath=\"comparison/deep_equal\">\n+        <compilation-unit name=\"documentation-example\">\n+            <output-dir compare=\"Text\">documentation-example</output-dir>\n+        </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"comparison/deep_equal\">\n+        <compilation-unit name=\"open-records-example\">\n+            <output-dir compare=\"Text\">open-records-example</output-dir>\n+        </compilation-unit>\n+    </test-case>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/DeepEqualQueries.xml",
                "sha": "83d0061ac9a21f4bb87e24f27c20269384f67c9e",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.1.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.1.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.1.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+let $r1 := {\"id\":1,\n+    \"project\":\"AsterixDB\",\n+    \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+    \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+\n+let $r2 := {\"id\":1,\n+    \"project\":\"AsterixDB\",\n+    \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+    \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+return deep-equal($r1, $r2)\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.1.query.aql",
                "sha": "85e24c3c628217045bf56826cb6baeee397d1352",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.2.query.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.2.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.2.query.aql",
                "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+ deep-equal([\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"], [\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.2.query.aql",
                "sha": "d41702e963c17e9fcf9f171b59f4e59f711333c0",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.3.query.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.3.query.aql",
                "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+deep-equal({{{\"s\":\"Hivestrix\", \"v\":\"0.1.0\"}, \"Preglix\", \"Apache VXQuery\"}}, {{ \"Apache VXQuery\",{\"s\":\"Hivestrix\", \"v\":\"0.1.0\"}, \"Preglix\"}});\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.3.query.aql",
                "sha": "7279b64a105912c94b495d130ca2b80eef94acc6",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.4.query.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.4.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.4.query.aql",
                "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+deep-equal(\"test\",\"test\");\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.4.query.aql",
                "sha": "333c9d673461d4c9e0b5bfd3fe8570b89415a269",
                "status": "added"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.5.query.aql",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.5.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.5.query.aql",
                "patch": "@@ -0,0 +1,19 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+deep-equal([1,2.0,3],[1,2,3.0]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/documentation-example/deep-equal.5.query.aql",
                "sha": "06fa4cdb9e4c2f499e1d24d99ffcab4ccaf4884e",
                "status": "added"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.1.ddl.aql",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.1.ddl.aql",
                "patch": "@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+create dataverse feeds if not exists;\n+use dataverse feeds;\n+\n+drop dataset SourceInfo if exists\n+drop type SourceType if exists\n+create type SourceType as open {\n+   id: int32\n+}\n+\n+create dataset SourceInfo(SourceType)\n+primary key id;\n+\n+drop dataset StreamDocuments if exists\n+drop type StreamType if exists\n+create type StreamType as open {\n+        doc_id: string,\n+        stream_id: string,\n+        title_cleansed: string,\n+        body_cleansed: string,\n+        dir_name: string,\n+        anchor_cleansed: string,\n+        language: string,\n+        schost: string\n+}\n+create dataset StreamDocuments(StreamType)\n+primary key doc_id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.1.ddl.aql",
                "sha": "aa26843e2e4128941543517a68479f0294563718",
                "status": "added"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.2.update.aql",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.2.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.2.update.aql",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+use dataverse feeds;\n+insert into dataset StreamDocuments (\n+       { \"doc_id\": \"doc3\",\n+        \"stream_id\": \"3dd\",\n+        \"title_cleansed\": \"\",\n+        \"body_cleansed\": \"ccc aharon barak born in Israel jeremy mckinnon\",\n+        \"dir_name\": \"2010-11-24-00\",\n+        \"anchor_cleansed\": \"\",\n+        \"language\": \"EN\",\n+        \"schost\": \"http...\",\n+        \"name\":\"social\"\n+});\n+\n+insert into dataset SourceInfo (\n+{\n+\"id\": 1,\n+\"name\":\"social\",\n+\"description\":\"social media data\"\n+}\n+);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.2.update.aql",
                "sha": "2867286e4c671161885f704a70b162b965f8add8",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.3.query.aql",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.3.query.aql",
                "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+use dataverse feeds;\n+for $x in dataset StreamDocuments\n+for $extra in dataset SourceInfo\n+return deep-equal($x,$extra);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/comparison/deep_equal/open-records-example/deep-equal.3.query.aql",
                "sha": "0355e31a22a99cb0fffed48d6d3dbe25e33d4a05",
                "status": "added"
            },
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/RecordsQueries.xml",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/RecordsQueries.xml?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/RecordsQueries.xml",
                "patch": "@@ -129,3 +129,49 @@\n                 <expected-error>org.apache.asterix.common.exceptions.AsterixException</expected-error>\n             </compilation-unit>\n         </test-case>\n+        <!-- RECORD MANIPULATION TESTS -->\n+        <test-case FilePath=\"records/record-merge\">\n+            <compilation-unit name=\"documentation-example\">\n+                <output-dir compare=\"Text\">documentation-example</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-merge\">\n+            <compilation-unit name=\"tiny-social-example-only-records\">\n+                <output-dir compare=\"Text\">tiny-social-example-only-records</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-merge\">\n+            <compilation-unit name=\"highly-nested-open\">\n+                <output-dir compare=\"Text\">highly-nested-open</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-add-fields\">\n+            <compilation-unit name=\"documentation-example\">\n+                <output-dir compare=\"Text\">documentation-example</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-add-fields\">\n+            <compilation-unit name=\"tiny-social-example-only-records\">\n+                <output-dir compare=\"Text\">tiny-social-example-only-records</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-add-fields\">\n+            <compilation-unit name=\"highly-nested-open\">\n+                <output-dir compare=\"Text\">highly-nested-open</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-remove-fields\">\n+            <compilation-unit name=\"documentation-example\">\n+                <output-dir compare=\"Text\">documentation-example</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-remove-fields\">\n+            <compilation-unit name=\"tiny-social-example-only-records\">\n+                <output-dir compare=\"Text\">tiny-social-example-only-records</output-dir>\n+            </compilation-unit>\n+        </test-case>\n+        <test-case FilePath=\"records/record-remove-fields\">\n+            <compilation-unit name=\"highly-nested-open\">\n+                <output-dir compare=\"Text\">highly-nested-open</output-dir>\n+            </compilation-unit>\n+        </test-case>",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/RecordsQueries.xml",
                "sha": "283120fa61d76411793acdc43c2e8b4326d2bd0c",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.1.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.1.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.1.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-add-fields($r1, [{\"field-name\":\"employment-location\", \"field-value\":create-point(30.0,70.0)}])",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.1.query.aql",
                "sha": "5e764297f53b1a88c38b7dc1865d4e91121ff57d",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.2.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.2.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.2.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-add-fields($r1, [{\"field-name\":\"employment-type\", \"field-value\":\"visitor\"}])\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.2.query.aql",
                "sha": "856aed2d65ef54cbfa6f468de38e0810b18faa37",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.3.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.3.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-add-fields($r1, [{\"field-name\":\"employment-years\", \"field-value\":2}])",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/documentation-example/documentation-example.3.query.aql",
                "sha": "aad677b06391aa72189026d1e995ff41abf93e04",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+drop dataverse test if exists;\n+create dataverse test;\n+\n+use dataverse test;\n+\n+create type S as open{\n+    id: int64\n+}\n+\n+create type GS as open{\n+    id: int64,\n+    Genus: string\n+}\n+\n+create type FGS as open{\n+    id: int64,\n+    Family: string\n+}\n+\n+create type OFGS as open{\n+    id: int64,\n+    Order: string\n+}\n+\n+create type COFGS as open{\n+    id: int64,\n+    Class: string\n+}\n+\n+create type PCOFGS as open{\n+    id: int64,\n+    Phylum: string\n+}\n+\n+create type KPCOFGS as open{\n+    id: int64,\n+    Kingdom: string\n+}\n+\n+create type Classification as open{\n+    id: int64\n+}\n+\n+create type Animal as open{\n+    id: int64\n+}\n+\n+create dataset Animals(Animal)\n+primary key id;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "sha": "94556f0f08bb56916ccef5a92454f9e677d92238",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.2.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+load dataset Animals using localfs\n+((\"path\"=\"asterix_nc1://data/classifications/animals.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "sha": "cab8eb7397a51b31072d925524b8cedcc029e0a1",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+let $rec:=[{\"field-name\":\"animal-info\", \"field-value\":\"Test information\"}]\n+for $test in dataset Animals\n+let $result := record-add-fields($test, $rec)\n+order by $result.id\n+return $result;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "sha": "fb937e4b46b7dfeb34beccc89b639dbf3ca98a4f",
                "status": "added"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+\n+drop dataverse TinySocial if exists;\n+create dataverse TinySocial;\n+use dataverse TinySocial;\n+\n+create type TwitterUserType as open {\n+        screen-name: string,\n+        lang: string,\n+        friends_count: int64,\n+        statuses_count: int64,\n+        name: string,\n+        followers_count: int64\n+}\n+\n+create type TweetMessageType as closed {\n+        tweetid: string,\n+        user: TwitterUserType,\n+        sender-location: point?,\n+        send-time: datetime,\n+        referred-topics: {{ string }},\n+        message-text: string\n+}\n+\n+create type EmploymentType as open {\n+        organization-name: string,\n+        start-date: date,\n+        end-date: date?\n+}\n+\n+create type FacebookUserType as closed {\n+        id: int64,\n+        alias: string,\n+        name: string,\n+        user-since: datetime,\n+        friend-ids: {{ int64 }},\n+        employment: [EmploymentType]\n+}\n+\n+create type FacebookMessageType as closed {\n+        message-id: int64,\n+        author-id: int64,\n+        in-response-to: int64?,\n+        sender-location: point?,\n+        message: string\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "sha": "5aedc054d8cdc30ffc269e4922e4d56d1d47d120",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.2.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+\n+use dataverse TinySocial;\n+\n+create dataset FacebookUsers(FacebookUserType)\n+primary key id;\n+\n+create dataset FacebookMessages(FacebookMessageType)\n+primary key message-id;\n+\n+create dataset TwitterUsers(TwitterUserType)\n+primary key screen-name;\n+\n+create dataset TweetMessages(TweetMessageType)\n+primary key tweetid\n+hints(cardinality=100);\n+\n+create index fbUserSinceIdx on FacebookUsers(user-since);\n+create index fbAuthorIdx on FacebookMessages(author-id) type btree;\n+create index fbSenderLocIndex on FacebookMessages(sender-location) type rtree;\n+create index fbMessageIdx on FacebookMessages(message) type keyword;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "sha": "c47f048910550291d24a85b83fb84fd1276e5a88",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.3.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+load dataset FacebookUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset FacebookMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TwitterUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/twu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TweetMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/twm.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "sha": "80f16155ab0ce5ae94776dbe88bcaf8dac0fb30e",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.4.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-add-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+for $r in dataset TweetMessages\n+for $f in dataset FacebookMessages\n+let $result := record-add-fields($r, [{\"field-name\":\"fb-author-id\", \"field-value\":$f.author-id}])\n+order by $result\n+return $result",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-add-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "sha": "ec7c77d31ce04fee873a2e492f5d7d8745a91ed1",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.1.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.1.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.1.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+let $r1 := {\"id\":1, \"project\":\"AsterixDB\",\n+\"address\":{\"city\":\"Irvine\", \"state\":\"CA\"}, \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"]}\n+let $r2 := {\"user_id\": 22, \"employer\": \"UC Irvine\", \"employment-type\": \"visitor\" }\n+let $result := record-merge($r1, $r2)\n+return $result",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.1.query.aql",
                "sha": "7abb6908106f2609e94277f697c11a1ad8029473",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.2.query.aql",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.2.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.2.query.aql",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+              \"project\":\"AsterixDB\",\n+              \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+              \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+\n+        let $r2 := {\"user_id\": 22,\n+              \"employer\": \"UC Irvine\",\n+              \"employment-location\": create-point(30.0,70.0) }\n+        return  record-merge($r1, $r2)\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.2.query.aql",
                "sha": "137cdfbb33a9c6723e57c1131c1cdba238ce07f4",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.3.query.aql",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.3.query.aql",
                "patch": "@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+              \"project\":\"AsterixDB\",\n+              \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+              \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+\n+        let $r2 := {\"user_id\": 22,\n+              \"employer\": \"UC Irvine\",\n+              \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"} }\n+        return  record-merge($r1, $r2)",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/documentation-example/documentation-example.3.query.aql",
                "sha": "92ee00ff4613bc45e71334c0b2a4c4febab6e892",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.1.ddl.aql",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.1.ddl.aql",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+drop dataverse test if exists;\n+create dataverse test;\n+\n+use dataverse test;\n+\n+create type S as open{\n+    id: int64\n+}\n+\n+create type GS as open{\n+    id: int64,\n+    Genus: string\n+}\n+\n+create type FGS as open{\n+    id: int64,\n+    Family: string\n+}\n+\n+create type OFGS as open{\n+    id: int64,\n+    Order: string\n+}\n+\n+create type COFGS as open{\n+    id: int64,\n+    Class: string\n+}\n+\n+create type PCOFGS as open{\n+    id: int64,\n+    Phylum: string\n+}\n+\n+create type KPCOFGS as open{\n+    id: int64,\n+    Kingdom: string\n+}\n+\n+create type Classification as open{\n+    id: int64\n+}\n+\n+create type Animal as open{\n+    id: int64\n+}\n+\n+create dataset Animals(Animal)\n+primary key id;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.1.ddl.aql",
                "sha": "d4af896295655d3f41cf6582671a1b8567781704",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.2.update.aql",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.2.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.2.update.aql",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+load dataset Animals using localfs\n+((\"path\"=\"asterix_nc1://data/classifications/animals.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.2.update.aql",
                "sha": "7db24015626f3671efb3ae6d8316a134bd9345b0",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.3.query.aql",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.3.query.aql",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+let $rec:={\"animal-info\": \"Test information\"}\n+for $test in dataset Animals\n+let $result := record-merge($test, $rec)\n+order by $result.id\n+return $result;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/highly-nested-open/highly-nested-open.3.query.aql",
                "sha": "70a3ad59496eb1c4cc4756ca8f1b85f5fad5fcf1",
                "status": "added"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.1.ddl.aql",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.1.ddl.aql",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+drop dataverse TinySocial if exists;\n+create dataverse TinySocial;\n+use dataverse TinySocial;\n+\n+create type TwitterUserType as open {\n+        screen-name: string,\n+        lang: string,\n+        friends_count: int64,\n+        statuses_count: int64,\n+        name: string,\n+        followers_count: int64\n+}\n+\n+create type TweetMessageType as closed {\n+        tweetid: string,\n+        user: TwitterUserType,\n+        sender-location: point?,\n+        send-time: datetime,\n+        referred-topics: {{ string }},\n+        message-text: string\n+}\n+\n+create type EmploymentType as open {\n+        organization-name: string,\n+        start-date: date,\n+        end-date: date?\n+}\n+\n+create type FacebookUserType as closed {\n+        id: int64,\n+        alias: string,\n+        name: string,\n+        user-since: datetime,\n+        friend-ids: {{ int64 }},\n+        employment: [EmploymentType]\n+}\n+\n+create type FacebookMessageType as closed {\n+        message-id: int64,\n+        author-id: int64,\n+        in-response-to: int64?,\n+        sender-location: point?,\n+        message: string\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.1.ddl.aql",
                "sha": "fbc09c99797390cd72886f5f3083fc1b693bf094",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.2.ddl.aql",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.2.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.2.ddl.aql",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+create dataset FacebookUsers(FacebookUserType)\n+primary key id;\n+\n+create dataset FacebookMessages(FacebookMessageType)\n+primary key message-id;\n+\n+create dataset TwitterUsers(TwitterUserType)\n+primary key screen-name;\n+\n+create dataset TweetMessages(TweetMessageType)\n+primary key tweetid\n+hints(cardinality=100);\n+\n+create index fbUserSinceIdx on FacebookUsers(user-since);\n+create index fbAuthorIdx on FacebookMessages(author-id) type btree;\n+create index fbSenderLocIndex on FacebookMessages(sender-location) type rtree;\n+create index fbMessageIdx on FacebookMessages(message) type keyword;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.2.ddl.aql",
                "sha": "97ee993ccda159cc8f853a086e1eb9844320036b",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.3.update.aql",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.3.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.3.update.aql",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+load dataset FacebookUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset FacebookMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TwitterUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/twu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TweetMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/twm.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.3.update.aql",
                "sha": "5bc4f5c9b4d1bcf4fd84918accc37666867793d6",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.4.query.aql",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.4.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.4.query.aql",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-merge under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+for $r in dataset TweetMessages\n+for $f in dataset FacebookMessages\n+let $result := record-merge($r, $f)\n+order by $result\n+return $result",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-merge/tiny-social-example/tiny-social-example.4.query.aql",
                "sha": "8601155505f8903c0ec800e784ba916b74e7793b",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.1.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.1.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.1.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-remove-fields($r1, [\"project\"])",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.1.query.aql",
                "sha": "9ff79ace256bf914c7c48f82955a895aa5f5df3b",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.2.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.2.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.2.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-remove-fields($r1, [[\"address\", \"city\"]])\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.2.query.aql",
                "sha": "76009124473be5a836c3914c4fdff3ef2fbe8c48",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.3.query.aql",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.3.query.aql",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-remove-fields($r1, [[\"address\", \"state\"], [\"address\", \"city\"]])\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/documentation-example/documentation-example.3.query.aql",
                "sha": "9409891b079310967a0c1f69ed4e98617e514853",
                "status": "added"
            },
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "patch": "@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+drop dataverse test if exists;\n+create dataverse test;\n+\n+use dataverse test;\n+\n+create type S as open{\n+    id: int64\n+}\n+\n+create type GS as open{\n+    id: int64,\n+    Genus: string\n+}\n+\n+create type FGS as open{\n+    id: int64,\n+    Family: string\n+}\n+\n+create type OFGS as open{\n+    id: int64,\n+    Order: string\n+}\n+\n+create type COFGS as open{\n+    id: int64,\n+    Class: string\n+}\n+\n+create type PCOFGS as open{\n+    id: int64,\n+    Phylum: string\n+}\n+\n+create type KPCOFGS as open{\n+    id: int64,\n+    Kingdom: string\n+}\n+\n+create type Classification as open{\n+    id: int64\n+}\n+\n+create type Animal as open{\n+    id: int64\n+}\n+\n+create dataset Animals(Animal)\n+primary key id;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.1.ddl.aql",
                "sha": "d850caa26477ee6e0087191ba80e97e58e9db77a",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.2.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+load dataset Animals using localfs\n+((\"path\"=\"asterix_nc1://data/classifications/animals.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.2.update.aql",
                "sha": "d96edf07a481e69a638f9c8112ee13940a05364d",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.3.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse test;\n+\n+for $test in dataset Animals\n+let $result := record-remove-fields($test, [[\"class\", \"fullClassification\"]])\n+order by $result.id\n+return $result;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/highly-nested-open/highly-nested-open.3.query.aql",
                "sha": "af8c258135218fc17cd2fa9ac95c7aedd18407c6",
                "status": "added"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.1.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+drop dataverse TinySocial if exists;\n+create dataverse TinySocial;\n+use dataverse TinySocial;\n+\n+create type TwitterUserType as open {\n+        screen-name: string,\n+        lang: string,\n+        friends_count: int64,\n+        statuses_count: int64,\n+        name: string,\n+        followers_count: int64\n+}\n+\n+create type TweetMessageType as closed {\n+        tweetid: string,\n+        user: TwitterUserType,\n+        sender-location: point?,\n+        send-time: datetime,\n+        referred-topics: {{ string }},\n+        message-text: string\n+}\n+\n+create type EmploymentType as open {\n+        organization-name: string,\n+        start-date: date,\n+        end-date: date?\n+}\n+\n+create type FacebookUserType as closed {\n+        id: int64,\n+        alias: string,\n+        name: string,\n+        user-since: datetime,\n+        friend-ids: {{ int64 }},\n+        employment: [EmploymentType]\n+}\n+\n+create type FacebookMessageType as closed {\n+        message-id: int64,\n+        author-id: int64,\n+        in-response-to: int64?,\n+        sender-location: point?,\n+        message: string\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.1.ddl.aql",
                "sha": "6ade854cd472f7d5c6514aceda79eb47519e0faf",
                "status": "added"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.2.ddl.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Jun 2015\n+*/\n+use dataverse TinySocial;\n+\n+create dataset FacebookUsers(FacebookUserType)\n+primary key id;\n+\n+create dataset FacebookMessages(FacebookMessageType)\n+primary key message-id;\n+\n+create dataset TwitterUsers(TwitterUserType)\n+primary key screen-name;\n+\n+create dataset TweetMessages(TweetMessageType)\n+primary key tweetid\n+hints(cardinality=100);\n+\n+create index fbUserSinceIdx on FacebookUsers(user-since);\n+create index fbAuthorIdx on FacebookMessages(author-id) type btree;\n+create index fbSenderLocIndex on FacebookMessages(sender-location) type rtree;\n+create index fbMessageIdx on FacebookMessages(message) type keyword;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.2.ddl.aql",
                "sha": "d9e256909d0445bdd114e35eba9f968825437fff",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.3.update.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Jun 2015\n+*/\n+use dataverse TinySocial;\n+\n+load dataset FacebookUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset FacebookMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/fbm.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TwitterUsers using localfs\n+((\"path\"=\"nc1://data/tinysocial/twu.adm\"),(\"format\"=\"adm\"));\n+\n+load dataset TweetMessages using localfs\n+((\"path\"=\"nc1://data/tinysocial/twm.adm\"),(\"format\"=\"adm\"));",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.3.update.aql",
                "sha": "542b97e20bd02c20289ad9d5cfb298802b869405",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.4.query.aql?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/*\n+* Description  : Testing record-remove-fields under different queries.\n+* Expected Res : Success\n+* Date         : 04 Aug 2015\n+*/\n+use dataverse TinySocial;\n+\n+for $r in dataset TweetMessages\n+let $result := record-remove-fields($r, [\"sender-location\", [\"user\", \"screen-name\"]])\n+order by $result\n+return $result",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/queries/records/record-remove-fields/tiny-social-example/tiny-social-example.4.query.aql",
                "sha": "42ab667b30ca71ae1491e5be96144886df75ca99",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.1.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.1.adm",
                "patch": "@@ -0,0 +1 @@\n+true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.1.adm",
                "sha": "f32a5804e292d30bedf68f62d32fb75d87e99fd9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.2.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.2.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.2.adm",
                "patch": "@@ -0,0 +1 @@\n+true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.2.adm",
                "sha": "f32a5804e292d30bedf68f62d32fb75d87e99fd9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.3.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.3.adm",
                "patch": "@@ -0,0 +1 @@\n+true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.3.adm",
                "sha": "f32a5804e292d30bedf68f62d32fb75d87e99fd9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.4.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.4.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.4.adm",
                "patch": "@@ -0,0 +1 @@\n+true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.4.adm",
                "sha": "f32a5804e292d30bedf68f62d32fb75d87e99fd9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.5.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.5.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.5.adm",
                "patch": "@@ -0,0 +1 @@\n+true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/documentation-example/documentation-example.5.adm",
                "sha": "f32a5804e292d30bedf68f62d32fb75d87e99fd9",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/open-records-example/open-records-example.3.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/open-records-example/open-records-example.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/open-records-example/open-records-example.3.adm",
                "patch": "@@ -0,0 +1 @@\n+false\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/comparison/deep_equal/open-records-example/open-records-example.3.adm",
                "sha": "02e4a84d62c4b0fe9cca60bba7b9799f78f1f7ed",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.1.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.1.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"employment-location\": point(\"30.0,70.0\") }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.1.adm",
                "sha": "c5cecbf819e4334731382a768d5f61b806f0f0d3",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.2.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.2.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.2.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"employment-type\": \"visitor\" }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.2.adm",
                "sha": "f0e4583352eb2a5ea3a648d857243f8071842495",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.3.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.3.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"employment-years\": 2 }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/documentation-example/documentation-example.3.adm",
                "sha": "f913d7b14fad620ce585e340e82e1e92474ea849",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/highly-nested-open/highly-nested-open.3.adm",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/highly-nested-open/highly-nested-open.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-add-fields/highly-nested-open/highly-nested-open.3.adm",
                "patch": "@@ -0,0 +1,4 @@\n+{ \"id\": 1, \"animal-info\": \"Test information\", \"class\": { \"id\": 1, \"fullClassification\": { \"id\": 1, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 1, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 1, \"Class\": \"Mammalia\", \"lower\": { \"id\": 1, \"Order\": \"Carnivora\", \"lower\": { \"id\": 1, \"Family\": \"Mustelinae\", \"lower\": { \"id\": 1, \"Genus\": \"Gulo\", \"lower\": { \"id\": 1, \"Species\": \"Gulo\" } } } } } } } } }\n+{ \"id\": 2, \"animal-info\": \"Test information\", \"class\": { \"id\": 2, \"fullClassification\": { \"id\": 2, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 2, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 2, \"Class\": \"Mammalia\", \"lower\": { \"id\": 2, \"Order\": \"Artiodactyla\", \"lower\": { \"id\": 2, \"Family\": \"Giraffidae\", \"lower\": { \"id\": 2, \"Genus\": \"Okapia\", \"lower\": { \"id\": 2, \"Species\": \"Johnstoni\" } } } } } } } } }\n+{ \"id\": 3, \"animal-info\": \"Test information\", \"class\": { \"id\": 3, \"fullClassification\": { \"id\": 3, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 3, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 3, \"Class\": \"Mammalia\", \"lower\": { \"id\": 3, \"Order\": \"Atlantogenata\", \"lower\": { \"id\": 3, \"Family\": \"Afrotheria\", \"lower\": { \"id\": 3, \"Genus\": \"Paenungulata\", \"lower\": { \"id\": 3, \"Species\": \"Hyracoidea\" } } } } } } } } }\n+{ \"id\": 4, \"animal-info\": \"Test information\", \"class\": { \"id\": 4, \"fullClassification\": { \"id\": 4, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 4, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 4, \"Class\": \"Aves\", \"lower\": { \"id\": 4, \"Order\": \"Accipitriformes\", \"lower\": { \"id\": 4, \"Family\": \"Accipitridae\", \"lower\": { \"id\": 4, \"Genus\": \"Buteo\", \"lower\": { \"id\": 4, \"Species\": \"Jamaicensis\" } } } } } } } } }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/highly-nested-open/highly-nested-open.3.adm",
                "sha": "6d783452ba6e746ab695a44feaffcc9224bc6f8c",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/tiny-social-example/tiny-social-example.4.adm",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/tiny-social-example/tiny-social-example.4.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-add-fields/tiny-social-example/tiny-social-example.4.adm",
                "patch": "@@ -0,0 +1,10 @@\n+{ \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 1 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 1 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 1 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 1 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 1 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 2 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 2 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 3 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 3 }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-author-id\": 5 }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-add-fields/tiny-social-example/tiny-social-example.4.adm",
                "sha": "f74a56a2359da0bf0926312f7624577cb33570e5",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.1.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.1.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"user_id\": 22, \"employer\": \"UC Irvine\", \"employment-type\": \"visitor\" }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.1.adm",
                "sha": "828f1d9c2316ba847b339feec8a8d62764b9d3d4",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.2.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.2.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.2.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"user_id\": 22, \"employer\": \"UC Irvine\", \"employment-location\": point(\"30.0,70.0\") }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.2.adm",
                "sha": "c9d7d57a82025fb32122f1781dc9a587f0b343e7",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.3.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.3.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"user_id\": 22, \"employer\": \"UC Irvine\" }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/documentation-example/documentation-example.3.adm",
                "sha": "e4524293f0371120582936b73e4395f58401a42d",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/highly-nested-open/highly-nested-open.3.adm",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-merge/highly-nested-open/highly-nested-open.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-merge/highly-nested-open/highly-nested-open.3.adm",
                "patch": "@@ -0,0 +1,4 @@\n+{ \"id\": 1, \"animal-info\": \"Test information\", \"class\": { \"id\": 1, \"fullClassification\": { \"id\": 1, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 1, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 1, \"Class\": \"Mammalia\", \"lower\": { \"id\": 1, \"Order\": \"Carnivora\", \"lower\": { \"id\": 1, \"Family\": \"Mustelinae\", \"lower\": { \"id\": 1, \"Genus\": \"Gulo\", \"lower\": { \"id\": 1, \"Species\": \"Gulo\" } } } } } } } } }\n+{ \"id\": 2, \"animal-info\": \"Test information\", \"class\": { \"id\": 2, \"fullClassification\": { \"id\": 2, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 2, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 2, \"Class\": \"Mammalia\", \"lower\": { \"id\": 2, \"Order\": \"Artiodactyla\", \"lower\": { \"id\": 2, \"Family\": \"Giraffidae\", \"lower\": { \"id\": 2, \"Genus\": \"Okapia\", \"lower\": { \"id\": 2, \"Species\": \"Johnstoni\" } } } } } } } } }\n+{ \"id\": 3, \"animal-info\": \"Test information\", \"class\": { \"id\": 3, \"fullClassification\": { \"id\": 3, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 3, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 3, \"Class\": \"Mammalia\", \"lower\": { \"id\": 3, \"Order\": \"Atlantogenata\", \"lower\": { \"id\": 3, \"Family\": \"Afrotheria\", \"lower\": { \"id\": 3, \"Genus\": \"Paenungulata\", \"lower\": { \"id\": 3, \"Species\": \"Hyracoidea\" } } } } } } } } }\n+{ \"id\": 4, \"animal-info\": \"Test information\", \"class\": { \"id\": 4, \"fullClassification\": { \"id\": 4, \"Kingdom\": \"Animalia\", \"lower\": { \"id\": 4, \"Phylum\": \"Chordata\", \"lower\": { \"id\": 4, \"Class\": \"Aves\", \"lower\": { \"id\": 4, \"Order\": \"Accipitriformes\", \"lower\": { \"id\": 4, \"Family\": \"Accipitridae\", \"lower\": { \"id\": 4, \"Genus\": \"Buteo\", \"lower\": { \"id\": 4, \"Species\": \"Jamaicensis\" } } } } } } } } }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/highly-nested-open/highly-nested-open.3.adm",
                "sha": "6d783452ba6e746ab695a44feaffcc9224bc6f8c",
                "status": "added"
            },
            {
                "additions": 180,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/tiny-social-example/tiny-social-example.4.adm",
                "changes": 180,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-merge/tiny-social-example/tiny-social-example.4.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-merge/tiny-social-example/tiny-social-example.4.adm",
                "patch": "@@ -0,0 +1,180 @@\n+{ \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" like samsung the platform is good\", \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"sender-location\": point(\"36.21,72.6\"), \"tweetid\": \"7\", \"user\": { \"screen-name\": \"ChangEwing_573\", \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 9, \"fb-message\": \" love at&t its 3G is good:)\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like motorola the speed is good:)\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"sender-location\": point(\"29.72,75.8\"), \"tweetid\": \"3\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" like verizon the 3G is awesome:)\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like samsung the plan is amazing\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love verizon its wireless is good\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 5, \"fb-message\": \" dislike sprint the speed is horrible\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" like iphone the voice-clarity is good:)\", \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"sender-location\": point(\"47.51,83.99\"), \"tweetid\": \"6\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t its plan is terrible\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" can't stand motorola its speed is terrible:(\", \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"sender-location\": point(\"40.09,92.69\"), \"tweetid\": \"5\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" can't stand iphone its platform is terrible\", \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"sender-location\": point(\"37.59,68.42\"), \"tweetid\": \"11\", \"user\": { \"screen-name\": \"NilaMilliron_tw\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" hate verizon its voice-clarity is OMG:(\", \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"sender-location\": point(\"29.15,76.53\"), \"tweetid\": \"10\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" dislike iphone the voice-command is bad:(\" }\n+, { \"message-text\": \" like verizon its shortcut-menu is awesome:)\", \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"sender-location\": point(\"32.84,67.14\"), \"tweetid\": \"2\", \"user\": { \"screen-name\": \"ColineGeyer@63\", \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like samsung the voice-command is amazing:)\", \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"sender-location\": point(\"24.82,94.63\"), \"tweetid\": \"12\", \"user\": { \"screen-name\": \"OliJackson_512\", \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand at&t the network is horrible:(\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 2, \"fb-message\": \" like t-mobile its platform is mind-blowing\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 3, \"fb-message\": \" love sprint its shortcut-menu is awesome:)\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" dislike iphone its touch-screen is horrible\" }\n+, { \"message-text\": \" love t-mobile its customization is good:)\", \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"sender-location\": point(\"47.44,80.65\"), \"tweetid\": \"1\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 7, \"fb-message\": \" like iphone the voicemail-service is awesome\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 6, \"fb-message\": \" love sprint the customization is mind-blowing\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\", \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"sender-location\": point(\"46.05,93.34\"), \"tweetid\": \"8\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" like sprint the voice-command is mind-blowing:)\", \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"sender-location\": point(\"39.28,70.48\"), \"tweetid\": \"4\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 1, \"fb-message\": \" can't stand motorola the touch-screen is terrible\" }\n+, { \"message-text\": \" love verizon its voicemail-service is awesome\", \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"sender-location\": point(\"36.86,74.62\"), \"tweetid\": \"9\", \"user\": { \"screen-name\": \"NathanGiesen@211\", \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"fb-user\": 10, \"fb-message\": \" can't stand t-mobile its voicemail-service is OMG:(\" }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-merge/tiny-social-example/tiny-social-example.4.adm",
                "sha": "ea3c1f5e71986fadd496da27fefb3169ef12ab6a",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.1.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.1.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"id\": 1, \"address\": { \"city\": \"Irvine\", \"state\": \"CA\" }, \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ] }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.1.adm",
                "sha": "8dd39e5fb792d81c0586c6844b676921dabddf0f",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.2.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.2.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.2.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"id\": 1, \"project\": \"AsterixDB\", \"address\": { \"state\": \"CA\" }, \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ] }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.2.adm",
                "sha": "3654f8ca842d31db30850831884dc5050f8c0a8b",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.3.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.3.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"id\": 1, \"project\": \"AsterixDB\", \"related\": [ \"Hivestrix\", \"Preglix\", \"Apache VXQuery\" ], \"address\": {  } }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/documentation-example/documentation-example.3.adm",
                "sha": "d177cade181192f27f5c80681ef2a6f401ebf7f5",
                "status": "added"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/highly-nested-open/highly-nested-open.3.adm",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/highly-nested-open/highly-nested-open.3.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/highly-nested-open/highly-nested-open.3.adm",
                "patch": "@@ -0,0 +1,4 @@\n+{ \"id\": 1, \"class\": { \"id\": 1 } }\n+{ \"id\": 2, \"class\": { \"id\": 2 } }\n+{ \"id\": 3, \"class\": { \"id\": 3 } }\n+{ \"id\": 4, \"class\": { \"id\": 4 } }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/highly-nested-open/highly-nested-open.3.adm",
                "sha": "78194ce6286679e8bbf0f6401f54b8ae930852ec",
                "status": "added"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/tiny-social-example/tiny-social-example.4.adm",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/tiny-social-example/tiny-social-example.4.adm?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/tiny-social-example/tiny-social-example.4.adm",
                "patch": "@@ -0,0 +1,12 @@\n+{ \"tweetid\": \"7\", \"user\": { \"lang\": \"en\", \"friends_count\": 182, \"statuses_count\": 394, \"name\": \"Chang Ewing\", \"followers_count\": 32136 }, \"send-time\": datetime(\"2011-08-25T10:10:00.000Z\"), \"referred-topics\": {{ \"samsung\", \"platform\" }}, \"message-text\": \" like samsung the platform is good\" }\n+, { \"tweetid\": \"3\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2006-11-04T10:10:00.000Z\"), \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"message-text\": \" like motorola the speed is good:)\" }\n+, { \"tweetid\": \"6\", \"user\": { \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"send-time\": datetime(\"2010-05-07T10:10:00.000Z\"), \"referred-topics\": {{ \"iphone\", \"voice-clarity\" }}, \"message-text\": \" like iphone the voice-clarity is good:)\" }\n+, { \"tweetid\": \"5\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2006-08-04T10:10:00.000Z\"), \"referred-topics\": {{ \"motorola\", \"speed\" }}, \"message-text\": \" can't stand motorola its speed is terrible:(\" }\n+, { \"tweetid\": \"11\", \"user\": { \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Nila Milliron\", \"followers_count\": 22649 }, \"send-time\": datetime(\"2008-03-09T10:10:00.000Z\"), \"referred-topics\": {{ \"iphone\", \"platform\" }}, \"message-text\": \" can't stand iphone its platform is terrible\" }\n+, { \"tweetid\": \"10\", \"user\": { \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"send-time\": datetime(\"2008-01-26T10:10:00.000Z\"), \"referred-topics\": {{ \"verizon\", \"voice-clarity\" }}, \"message-text\": \" hate verizon its voice-clarity is OMG:(\" }\n+, { \"tweetid\": \"2\", \"user\": { \"lang\": \"en\", \"friends_count\": 121, \"statuses_count\": 362, \"name\": \"Coline Geyer\", \"followers_count\": 17159 }, \"send-time\": datetime(\"2010-05-13T10:10:00.000Z\"), \"referred-topics\": {{ \"verizon\", \"shortcut-menu\" }}, \"message-text\": \" like verizon its shortcut-menu is awesome:)\" }\n+, { \"tweetid\": \"1\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2008-04-26T10:10:00.000Z\"), \"referred-topics\": {{ \"t-mobile\", \"customization\" }}, \"message-text\": \" love t-mobile its customization is good:)\" }\n+, { \"tweetid\": \"12\", \"user\": { \"lang\": \"en\", \"friends_count\": 445, \"statuses_count\": 164, \"name\": \"Oli Jackson\", \"followers_count\": 22649 }, \"send-time\": datetime(\"2010-02-13T10:10:00.000Z\"), \"referred-topics\": {{ \"samsung\", \"voice-command\" }}, \"message-text\": \" like samsung the voice-command is amazing:)\" }\n+, { \"tweetid\": \"8\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2005-10-14T10:10:00.000Z\"), \"referred-topics\": {{ \"t-mobile\", \"shortcut-menu\" }}, \"message-text\": \" like t-mobile the shortcut-menu is awesome:)\" }\n+, { \"tweetid\": \"4\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2011-12-26T10:10:00.000Z\"), \"referred-topics\": {{ \"sprint\", \"voice-command\" }}, \"message-text\": \" like sprint the voice-command is mind-blowing:)\" }\n+, { \"tweetid\": \"9\", \"user\": { \"lang\": \"en\", \"friends_count\": 39339, \"statuses_count\": 473, \"name\": \"Nathan Giesen\", \"followers_count\": 49416 }, \"send-time\": datetime(\"2012-07-21T10:10:00.000Z\"), \"referred-topics\": {{ \"verizon\", \"voicemail-service\" }}, \"message-text\": \" love verizon its voicemail-service is awesome\" }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/results/records/record-remove-fields/tiny-social-example/tiny-social-example.4.adm",
                "sha": "5f622d77566ecd6067eab7904aa2b2b76c71898a",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 2,
                "filename": "asterix-app/src/test/resources/runtimets/testsuite.xml",
                "patch": "@@ -18,9 +18,10 @@\n  !-->\n <!DOCTYPE test-suite [\n \n-        <!ENTITY RecordsQueries SYSTEM \"queries/records/RecordsQueries.xml\">\n+<!ENTITY RecordsQueries SYSTEM \"queries/records/RecordsQueries.xml\">\n+<!ENTITY DeepEqualQueries SYSTEM \"queries/comparison/deep_equal/DeepEqualQueries.xml\">\n+]>\n \n-        ]>\n <test-suite\n         xmlns=\"urn:xml.testframework.asterix.apache.org\"\n         ResultOffsetPath=\"results\"\n@@ -4417,6 +4418,9 @@\n     <test-group name=\"records\">\n         &RecordsQueries;\n     </test-group>\n+    <test-group name=\"deep-equal\">\n+        &DeepEqualQueries;\n+    </test-group>\n     <test-group name=\"scan\">\n         <test-case FilePath=\"scan\">\n             <compilation-unit name=\"10\">",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "sha": "c4c8fc42fac7cf54fc0d8f7b5975bb56b41f2c55",
                "status": "modified"
            },
            {
                "additions": 387,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-doc/src/site/markdown/aql/functions.md",
                "changes": 679,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-doc/src/site/markdown/aql/functions.md?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 292,
                "filename": "asterix-doc/src/site/markdown/aql/functions.md",
                "patch": "@@ -37,11 +37,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### abs ###\n  * Syntax:\n \n-        abs(numeric_expression)\n+        abs(numeric_value)\n \n  * Computes the absolute value of the argument.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n  * Return Value:\n     * The absolute value of the argument with the same type as the input argument, or `null` if the argument is a `null` value.\n \n@@ -63,11 +63,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### ceiling ###\n  * Syntax:\n \n-        ceiling(numeric_expression)\n+        ceiling(numeric_value)\n \n  * Computes the smallest (closest to negative infinity) number with no fractional part that is not less than the value of the argument. If the argument is already equal to mathematical integer, then the result is the same as the argument.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n  * Return Value:\n     * The ceiling value for the given number in the same type as the input argument, or `null` if the input is `null`.\n \n@@ -89,11 +89,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### floor ###\n  * Syntax:\n \n-        floor(numeric_expression)\n+        floor(numeric_value)\n \n  * Computes the largest (closest to positive infinity) number with no fractional part that is not greater than the value. If the argument is already equal to mathematical integer, then the result is the same as the argument.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n  * Return Value:\n     * The floor value for the given number in the same type as the input argument, or `null` if the input is `null`.\n \n@@ -115,11 +115,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### round ###\n  * Syntax:\n \n-        round(numeric_expression)\n+        round(numeric_value)\n \n  * Computes the number with no fractional part that is closest (and also closest to positive infinity) to the argument.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n  * Return Value:\n     * The rounded value for the given number in the same type as the input argument, or `null` if the input is `null`.\n \n@@ -141,11 +141,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### round-half-to-even ###\n  * Syntax:\n \n-        round-half-to-even(numeric_expression, [precision])\n+        round-half-to-even(numeric_value, [precision])\n \n- * Computes the closest numeric value to `numeric_expression` that is a multiple of ten to the power of minus `precision`. `precision` is optional and by default value `0` is used.\n+ * Computes the closest numeric value to `numeric_value` that is a multiple of ten to the power of minus `precision`. `precision` is optional and by default value `0` is used.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64`/`float`/`double` value.\n     * `precision`: An optional integer field representing the number of digits in the fraction of the the result\n  * Return Value:\n     * The rounded value for the given number in the same type as the input argument, or `null` if the input is `null`.\n@@ -172,24 +172,24 @@ Asterix provides various classes of functions to support operations on numeric,\n ### string-to-codepoint ###\n  * Syntax:\n \n-        string-to-codepoint(string_expression)\n+        string-to-codepoint(string)\n \n- * Converts the string `string_expression` to its code-based representation.\n+ * Converts the string `string` to its code-based representation.\n  * Arguments:\n-    * `string_expression` : A `string` that will be converted.\n+    * `string` : A `string` that will be converted.\n  * Return Value:\n-    * An `OrderedList` of the code points for the string `string_expression`.\n+    * An `OrderedList` of the code points for the string `string`.\n \n ### codepoint-to-string ###\n  * Syntax:\n \n-        codepoint-to-string(list_expression)\n+        codepoint-to-string(list)\n \n- * Converts the ordered code-based representation `list_expression` to the corresponding string.\n+ * Converts the ordered code-based representation `list` to the corresponding string.\n  * Arguments:\n-    * `list_expression` : An `OrderedList` of code-points.\n+    * `list` : An `OrderedList` of code-points.\n  * Return Value:\n-    * A `string` representation of `list_expression`.\n+    * A `string` representation of `list`.\n \n  * Example:\n \n@@ -209,14 +209,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### contains ###\n  * Syntax:\n \n-        contains(string_expression, substring_to_contain)\n+        contains(string, substring_to_contain)\n \n- * Checks whether the string `string_expression` contains the string `substring_to_contain`\n+ * Checks whether the string `string` contains the string `substring_to_contain`\n  * Arguments:\n-    * `string_expression` : A `string` that might contain the given substring.\n+    * `string` : A `string` that might contain the given substring.\n     * `substring_to_contain` : A target `string` that might be contained.\n  * Return Value:\n-    * A `boolean` value, `true` if `string_expression` contains `substring_to_contain`, and `false` otherwise.\n+    * A `boolean` value, `true` if `string` contains `substring_to_contain`, and `false` otherwise.\n  * Note: An [n-gram index](similarity.html#UsingIndexesToSupportSimilarityQueries) can be utilized for this function.\n  * Example:\n \n@@ -237,14 +237,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### like ###\n  * Syntax:\n \n-        like(string_expression, string_pattern)\n+        like(string, string_pattern)\n \n- * Checks whether the string `string_expression` contains the string pattern `string_pattern`. Compared to the `contains` function, the `like` function also supports regular expressions.\n+ * Checks whether the string `string` contains the string pattern `string_pattern`. Compared to the `contains` function, the `like` function also supports regular expressions.\n  * Arguments:\n-    * `string_expression` : A `string` that might contain the pattern or `null`.\n+    * `string` : A `string` that might contain the pattern or `null`.\n     * `string_pattern` : A pattern `string` that might be contained or `null`.\n  * Return Value:\n-    * A `boolean` value, `true` if `string_expression` contains the pattern `string_pattern`, and `false` otherwise.\n+    * A `boolean` value, `true` if `string` contains the pattern `string_pattern`, and `false` otherwise.\n \n  * Example:\n \n@@ -265,14 +265,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### starts-with ###\n  * Syntax:\n \n-        starts-with(string_expression, substring_to_start_with)\n+        starts-with(string, substring_to_start_with)\n \n- * Checks whether the string `string_expression` starts with the string `substring_to_start_with`.\n+ * Checks whether the string `string` starts with the string `substring_to_start_with`.\n  * Arguments:\n-    * `string_expression` : A `string` that might start with the given string.\n+    * `string` : A `string` that might start with the given string.\n     * `substring_to_start_with` : A `string` that might be contained as the starting substring.\n  * Return Value:\n-    * A `boolean`, returns `true` if `string_expression` starts with the string `substring_to_start_with`, and `false` otherwise.\n+    * A `boolean`, returns `true` if `string` starts with the string `substring_to_start_with`, and `false` otherwise.\n \n  * Example:\n \n@@ -294,14 +294,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### ends-with ###\n  * Syntax:\n \n-        ends-with(string_expression, substring_to_end_with)\n+        ends-with(string, substring_to_end_with)\n \n- * Checks whether the string `string_expression` ends with the string `substring_to_end_with`.\n+ * Checks whether the string `string` ends with the string `substring_to_end_with`.\n  * Arguments:\n-    * `string_expression` : A `string` that might end with the given string.\n+    * `string` : A `string` that might end with the given string.\n     * `substring_to_end_with` : A `string` that might be contained as the ending substring.\n  * Return Value:\n-    * A `boolean`, returns `true` if `string_expression` ends with the string `substring_to_end_with`, and `false` otherwise.\n+    * A `boolean`, returns `true` if `string` ends with the string `substring_to_end_with`, and `false` otherwise.\n \n  * Example:\n \n@@ -322,11 +322,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### string-concat ###\n  * Syntax:\n \n-        string-concat(list_expression)\n+        string-concat(list)\n \n- * Concatenates a list of strings `list_expression` into a single string.\n+ * Concatenates a list of strings `list` into a single string.\n  * Arguments:\n-    * `list_expression` : An `OrderedList` or `UnorderedList` of `string`s (could be `null`) to be concatenated.\n+    * `list` : An `OrderedList` or `UnorderedList` of `string`s (could be `null`) to be concatenated.\n  * Return Value:\n     * Returns the concatenated `string` value.\n \n@@ -346,12 +346,12 @@ Asterix provides various classes of functions to support operations on numeric,\n ### string-join ###\n  * Syntax:\n \n-        string-join(list_expression, string_expression)\n+        string-join(list, string)\n \n- * Joins a list of strings `list_expression` with the given separator `string_expression` into a single string.\n+ * Joins a list of strings `list` with the given separator `string` into a single string.\n  * Arguments:\n-    * `list_expression` : An `OrderedList` or `UnorderedList` of strings (could be `null`) to be joined.\n-    * `string_expression` : A `string` as the separator.\n+    * `list` : An `OrderedList` or `UnorderedList` of strings (could be `null`) to be joined.\n+    * `string` : A `string` as the separator.\n  * Return Value:\n     * Returns the joined `String`.\n \n@@ -371,13 +371,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### lowercase ###\n  * Syntax:\n \n-        lowercase(string_expression)\n+        lowercase(string)\n \n- * Converts a given string `string_expression` to its lowercase form.\n+ * Converts a given string `string` to its lowercase form.\n  * Arguments:\n-    * `string_expression` : A `string` to be converted.\n+    * `string` : A `string` to be converted.\n  * Return Value:\n-    * Returns a `string` as the lowercase form of the given `string_expression`.\n+    * Returns a `string` as the lowercase form of the given `string`.\n \n  * Example:\n \n@@ -394,13 +394,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### uppercase ###\n  * Syntax:\n \n- uppercase(string_expression)\n+        uppercase(string)\n \n- * Converts a given string `string_expression` to its uppercase form.\n+ * Converts a given string `string` to its uppercase form.\n  * Arguments:\n-    * `string_expression` : A `string` to be converted.\n+    * `string` : A `string` to be converted.\n  * Return Value:\n-    * Returns a `string` as the uppercase form of the given `string_expression`.\n+    * Returns a `string` as the uppercase form of the given `string`.\n \n  * Example:\n \n@@ -414,42 +414,17 @@ Asterix provides various classes of functions to support operations on numeric,\n \n         ASTERIX\n \n-\n-### uppercase ###\n- * Syntax:\n-\n-        uppercase(string_expression)\n-\n- * Converts a given string `string_expression` to its uppercase form.\n- * Arguments:\n-    * `string_expression` : A `string` to be converted.\n- * Return Value:\n-    * Returns a `string` as the uppercase form of the given `string_expression`.\n-\n- * Example:\n-\n-        use dataverse TinySocial;\n-\n-        let $i := \"asterix\"\n-        return uppercase($i)\n-\n-\n- * The expected result is:\n-\n-        ASTERIX\n-\n-\n ### matches ###\n  * Syntax:\n \n-        matches(string_expression, string_pattern)\n+        matches(string, string_pattern)\n \n- * Checks whether the strings `string_expression` matches the given pattern `string_pattern` (A Java regular expression pattern).\n+ * Checks whether the strings `string` matches the given pattern `string_pattern` (A Java regular expression pattern).\n  * Arguments:\n-    * `string_expression` : A `string` that might contain the pattern.\n+    * `string` : A `string` that might contain the pattern.\n     * `string_pattern` : A pattern `string` to be matched.\n  * Return Value:\n-    * A `boolean`, returns `true` if `string_expression` matches the pattern `string_pattern`, and `false` otherwise.\n+    * A `boolean`, returns `true` if `string` matches the pattern `string_pattern`, and `false` otherwise.\n \n  * Example:\n \n@@ -469,11 +444,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### replace ###\n  * Syntax:\n \n-        replace(string_expression, string_pattern, string_replacement[, string_flags])\n+        replace(string, string_pattern, string_replacement[, string_flags])\n \n- * Checks whether the string `string_expression` matches the given pattern `string_pattern`, and replace the matched pattern `string_pattern` with the new pattern `string_replacement`.\n+ * Checks whether the string `string` matches the given pattern `string_pattern`, and replace the matched pattern `string_pattern` with the new pattern `string_replacement`.\n  * Arguments:\n-    * `string_expression` : A `string` that might contain the pattern.\n+    * `string` : A `string` that might contain the pattern.\n     * `string_pattern` : A pattern `string` to be matched.\n     * `string_replacement` : A pattern `string` to be used as the replacement.\n     * `string_flag` : (Optional) A `string` with flags to be used during replace.\n@@ -498,13 +473,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### string-length ###\n  * Syntax:\n \n-        string-length(string_expression)\n+        string-length(string)\n \n- * Returns the length of the string `string_expression`.\n+ * Returns the length of the string `string`.\n  * Arguments:\n-    * `string_expression` : A `string` or `null` that represents the string to be checked.\n+    * `string` : A `string` or `null` that represents the string to be checked.\n  * Return Value:\n-    * An `int64` that represents the length of `string_expression`.\n+    * An `int64` that represents the length of `string`.\n \n  * Example:\n \n@@ -536,12 +511,12 @@ Asterix provides various classes of functions to support operations on numeric,\n ### substring ###\n  * Syntax:\n \n-        substring(string_expression, offset[, length])\n+        substring(string, offset[, length])\n \n- * Returns the substring from the given string `string_expression` based on the given start offset `offset` with the optional `length`.\n+ * Returns the substring from the given string `string` based on the given start offset `offset` with the optional `length`.\n  * Arguments:\n-    * `string_expression` : A `string` to be extracted.\n-    * `offset` : An `int64` as the starting offset of the substring in `string_expression`.\n+    * `string` : A `string` to be extracted.\n+    * `offset` : An `int64` as the starting offset of the substring in `string`.\n     * `length` : (Optional) An `int64` as the length of the substring.\n  * Return Value:\n     * A `string` that represents the substring.\n@@ -563,11 +538,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### substring-before ###\n  * Syntax:\n \n-        substring-before(string_expression, string_pattern)\n+        substring-before(string, string_pattern)\n \n- * Returns the substring from the given string `string_expression` before the given pattern `string_pattern`.\n+ * Returns the substring from the given string `string` before the given pattern `string_pattern`.\n  * Arguments:\n-    * `string_expression` : A `string` to be extracted.\n+    * `string` : A `string` to be extracted.\n     * `string_pattern` : A `string` pattern to be searched.\n  * Return Value:\n     * A `string` that represents the substring.\n@@ -591,11 +566,11 @@ Asterix provides various classes of functions to support operations on numeric,\n ### substring-after ###\n  * Syntax:\n \n-        substring-after(string_expression, string_pattern)\n+        substring-after(string, string_pattern)\n \n- * Returns the substring from the given string `string_expression` after the given pattern `string_pattern`.\n+ * Returns the substring from the given string `string` after the given pattern `string_pattern`.\n  * Arguments:\n-    * `string_expression` : A `string` to be extracted.\n+    * `string` : A `string` to be extracted.\n     * `string_pattern` : A `string` pattern to be searched.\n  * Return Value:\n     * A `string` that represents the substring.\n@@ -820,14 +795,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### create-line ###\n  * Syntax:\n \n-        create-line(point_expression1, point_expression2)\n+        create-line(point1, point2)\n \n- * Creates the primitive type `line` using `point_expression1` and `point_expression2`.\n+ * Creates the primitive type `line` using `point1` and `point2`.\n  * Arguments:\n-    * `point_expression1` : A `point` that represents the start point of the line.\n-    * `point_expression2` : A `point` that represents the end point of the line.\n+    * `point1` : A `point` that represents the start point of the line.\n+    * `point2` : A `point` that represents the end point of the line.\n  * Return Value:\n-    * A spatial `line` created using the points provided in `point_expression1` and `point_expression2`.\n+    * A spatial `line` created using the points provided in `point1` and `point2`.\n \n  * Example:\n \n@@ -845,14 +820,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### create-rectangle ###\n  * Syntax:\n \n-        create-rectangle(point_expression1, point_expression2)\n+        create-rectangle(point1, point2)\n \n- * Creates the primitive type `rectangle` using `point_expression1` and `point_expression2`.\n+ * Creates the primitive type `rectangle` using `point1` and `point2`.\n  * Arguments:\n-    * `point_expression1` : A `point` that represents the lower-left point of the rectangle.\n-    * `point_expression2` : A `point` that represents the upper-right point of the rectangle.\n+    * `point1` : A `point` that represents the lower-left point of the rectangle.\n+    * `point2` : A `point` that represents the upper-right point of the rectangle.\n  * Return Value:\n-    * A spatial `rectangle` created using the points provided in `point_expression1` and `point_expression2`.\n+    * A spatial `rectangle` created using the points provided in `point1` and `point2`.\n \n  * Example:\n \n@@ -870,14 +845,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### create-circle ###\n  * Syntax:\n \n-        create-circle(point_expression, radius)\n+        create-circle(point, radius)\n \n- * Creates the primitive type `circle` using `point_expression` and `radius`.\n+ * Creates the primitive type `circle` using `point` and `radius`.\n  * Arguments:\n-    * `point_expression` : A `point` that represents the center of the circle.\n+    * `point` : A `point` that represents the center of the circle.\n     * `radius` : A `double` that represents the radius of the circle.\n  * Return Value:\n-    * A spatial `circle` created using the center point and the radius provided in `point_expression` and `radius`.\n+    * A spatial `circle` created using the center point and the radius provided in `point` and `radius`.\n \n  * Example:\n \n@@ -895,13 +870,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### create-polygon ###\n  * Syntax:\n \n-        create-polygon(list_expression)\n+        create-polygon(list)\n \n- * Creates the primitive type `polygon` using the double values provided in the argument `list_expression`. Each two consecutive double values represent a point starting from the first double value in the list. Note that at least six double values should be specified, meaning a total of three points.\n+ * Creates the primitive type `polygon` using the double values provided in the argument `list`. Each two consecutive double values represent a point starting from the first double value in the list. Note that at least six double values should be specified, meaning a total of three points.\n  * Arguments:\n-   * `list_expression` : An OrderedList of doubles representing the points of the polygon.\n+   * `list` : An OrderedList of doubles representing the points of the polygon.\n  * Return Value:\n-   * A `polygon`, represents a spatial simple polygon created using the points provided in `list_expression`.\n+   * A `polygon`, represents a spatial simple polygon created using the points provided in `list`.\n \n  * Example:\n \n@@ -919,13 +894,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### get-x/get-y ###\n  * Syntax:\n \n-        get-x(point_expression) or get-y(point_expression)\n+        get-x(point) or get-y(point)\n \n- * Returns the x or y coordinates of a point `point_expression`.\n+ * Returns the x or y coordinates of a point `point`.\n  * Arguments:\n-    * `point_expression` : A `point`.\n+    * `point` : A `point`.\n  * Return Value:\n-    * A `double` representing the x or y coordinates of the point `point_expression`.\n+    * A `double` representing the x or y coordinates of the point `point`.\n \n  * Example:\n \n@@ -943,13 +918,13 @@ Asterix provides various classes of functions to support operations on numeric,\n ### get-points ###\n  * Syntax:\n \n-        get-points(spatial_expression)\n+        get-points(spatial_object)\n \n- * Returns an ordered list of the points forming the spatial object `spatial_expression`.\n+ * Returns an ordered list of the points forming the spatial object `spatial_object`.\n  * Arguments:\n-    * `spatial_expression` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n+    * `spatial_object` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n  * Return Value:\n-    * An `OrderedList` of the points forming the spatial object `spatial_expression`.\n+    * An `OrderedList` of the points forming the spatial object `spatial_object`.\n \n  * Example:\n \n@@ -998,14 +973,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### spatial-distance ###\n  * Syntax:\n \n-        spatial-distance(point_expression1, point_expression2)\n+        spatial-distance(point1, point2)\n \n- * Returns the Euclidean distance between `point_expression1` and `point_expression2`.\n+ * Returns the Euclidean distance between `point1` and `point2`.\n  * Arguments:\n-    * `point_expression1` : A `point`.\n-    * `point_expression2` : A `point`.\n+    * `point1` : A `point`.\n+    * `point2` : A `point`.\n  * Return Value:\n-    * A `double` as the Euclidean distance between `point_expression1` and `point_expression2`.\n+    * A `double` as the Euclidean distance between `point1` and `point2`.\n \n  * Example:\n \n@@ -1061,14 +1036,14 @@ Asterix provides various classes of functions to support operations on numeric,\n ### spatial-intersect ###\n  * Syntax:\n \n-        spatial-intersect(spatial_expression1, spatial_expression2)\n+        spatial-intersect(spatial_object1, spatial_object2)\n \n  * Checks whether `@arg1` and `@arg2` spatially intersect each other.\n  * Arguments:\n-    * `spatial_expression1` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n-    * `spatial_expression2` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n+    * `spatial_object1` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n+    * `spatial_object2` : A `point`, `line`, `rectangle`, `circle`, or `polygon`.\n  * Return Value:\n-    * A `boolean` representing whether `spatial_expression1` and `spatial_expression2` spatially overlap with each other.\n+    * A `boolean` representing whether `spatial_object1` and `spatial_object2` spatially overlap with each other.\n \n  * Example:\n \n@@ -1089,16 +1064,16 @@ Asterix provides various classes of functions to support operations on numeric,\n ### spatial-cell ###\n  * Syntax:\n \n-        spatial-cell(point_expression1, point_expression2, x_increment, y_increment)\n+        spatial-cell(point1, point2, x_increment, y_increment)\n \n- * Returns the grid cell that `point_expression1` belongs to.\n+ * Returns the grid cell that `point1` belongs to.\n  * Arguments:\n-    * `point_expression1` : A `point` representing the point of interest that its grid cell will be returned.\n-    * `point_expression2` : A `point` representing the origin of the grid.\n+    * `point1` : A `point` representing the point of interest that its grid cell will be returned.\n+    * `point2` : A `point` representing the origin of the grid.\n     * `x_increment` : A `double`, represents X increments.\n     * `y_increment` : A `double`, represents Y increments.\n  * Return Value:\n-    * A `rectangle` representing the grid cell that `point_expression1` belongs to.\n+    * A `rectangle` representing the grid cell that `point1` belongs to.\n \n  * Example:\n \n@@ -1194,7 +1169,7 @@ including [edit distance](http://en.wikipedia.org/wiki/Levenshtein_distance) and\n ### edit-distance-contains ###\n * Syntax:\n \n-edit-distance-contains(expression1, expression2, threshold)\n+        edit-distance-contains(expression1, expression2, threshold)\n \n * Checks whether `expression1` contains `expression2` with an [edit distance](http://en.wikipedia.org/wiki/Levenshtein_distance) within a given threshold.\n \n@@ -1222,14 +1197,14 @@ edit-distance-contains(expression1, expression2, threshold)\n ### similarity-jaccard ###\n  * Syntax:\n \n-        similarity-jaccard(list_expression1, list_expression2)\n+        similarity-jaccard(list1, list2)\n \n- * Returns the [Jaccard similarity](http://en.wikipedia.org/wiki/Jaccard_index) of `list_expression1` and `list_expression2`.\n+ * Returns the [Jaccard similarity](http://en.wikipedia.org/wiki/Jaccard_index) of `list1` and `list2`.\n  * Arguments:\n-    * `list_expression1` : An `UnorderedList` or `OrderedList`.\n-    * `list_expression2` : An `UnorderedList` or `OrderedList`.\n+    * `list1` : An `UnorderedList` or `OrderedList`.\n+    * `list2` : An `UnorderedList` or `OrderedList`.\n  * Return Value:\n-    * A `float` that represents the Jaccard similarity of `list_expression1` and `list_expression2`.\n+    * A `float` that represents the Jaccard similarity of `list1` and `list2`.\n  * Note: A [keyword index](similarity.html#UsingIndexesToSupportSimilarityQueries) can be utilized for this function.\n  * Example:\n \n@@ -1256,18 +1231,18 @@ edit-distance-contains(expression1, expression2, threshold)\n ### similarity-jaccard-check ###\n  * Syntax:\n \n-        similarity-jaccard-check(list_expression1, list_expression2, threshold)\n+        similarity-jaccard-check(list1, list2, threshold)\n \n- * Checks whether `list_expression1` and `list_expression2` have a [Jaccard similarity](http://en.wikipedia.org/wiki/Jaccard_index) greater than or equal to threshold.  Again, the \u201ccheck\u201d version of Jaccard is faster than the \"non-check\" version.\n+ * Checks whether `list1` and `list2` have a [Jaccard similarity](http://en.wikipedia.org/wiki/Jaccard_index) greater than or equal to threshold.  Again, the \u201ccheck\u201d version of Jaccard is faster than the \"non-check\" version.\n \n  * Arguments:\n-    * `list_expression1` : An `UnorderedList` or `OrderedList`.\n-    * `list_expression2` : An `UnorderedList` or `OrderedList`.\n+    * `list1` : An `UnorderedList` or `OrderedList`.\n+    * `list2` : An `UnorderedList` or `OrderedList`.\n     * `threshold` : A `float` that represents the similarity threshold.\n  * Return Value:\n     * An `OrderedList` with two items:\n-     * The first item contains a `boolean` value representing whether `list_expression1` and `list_expression2` are similar.\n-     * The second item contains a `float` that represents the Jaccard similarity of `list_expression1` and `list_expression2` if it is greater than or equal to the threshold, or 0 otherwise.\n+     * The first item contains a `boolean` value representing whether `list1` and `list2` are similar.\n+     * The second item contains a `float` that represents the Jaccard similarity of `list1` and `list2` if it is greater than or equal to the threshold, or 0 otherwise.\n  * Note: A [keyword index](similarity.html#UsingIndexesToSupportSimilarityQueries) can be utilized for this function.\n  * Example:\n \n@@ -1339,11 +1314,11 @@ edit-distance-contains(expression1, expression2, threshold)\n \n  * Syntax:\n \n-        word-tokens(string_expression)\n+        word-tokens(string)\n \n- * Returns a list of word tokens of `string_expression` using non-alphanumeric characters as delimiters.\n+ * Returns a list of word tokens of `string` using non-alphanumeric characters as delimiters.\n  * Arguments:\n-    * `string_expression` : A `string` that will be tokenized.\n+    * `string` : A `string` that will be tokenized.\n  * Return Value:\n     * An `OrderedList` of `string` word tokens.\n \n@@ -1368,11 +1343,11 @@ edit-distance-contains(expression1, expression2, threshold)\n <!--### hashed-word-tokens ###\n  * Syntax:\n \n-        hashed-word-tokens(string_expression)\n+        hashed-word-tokens(string)\n \n- * Returns a list of hashed word tokens of `string_expression`.\n+ * Returns a list of hashed word tokens of `string`.\n  * Arguments:\n-    * `string_expression` : A `string` that will be tokenized.\n+    * `string` : A `string` that will be tokenized.\n  * Return Value:\n    * An `OrderedList` of `int32` hashed tokens.\n \n@@ -1397,11 +1372,11 @@ edit-distance-contains(expression1, expression2, threshold)\n ### counthashed-word-tokens ###\n  * Syntax:\n \n-        counthashed-word-tokens(string_expression)\n+        counthashed-word-tokens(string)\n \n- * Returns a list of hashed word tokens of `string_expression`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n+ * Returns a list of hashed word tokens of `string`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n  * Arguments:\n-    * `string_expression` : A `String` that will be tokenized.\n+    * `string` : A `String` that will be tokenized.\n  * Return Value:\n     * An `OrderedList` of `Int32` hashed tokens.\n  * Example:\n@@ -1425,13 +1400,13 @@ edit-distance-contains(expression1, expression2, threshold)\n ### gram-tokens ###\n  * Syntax:\n \n-        gram-tokens(string_expression, gram_length, boolean_expression)\n+        gram-tokens(string, gram_length, boolean_expression)\n \n- * Returns a list of gram tokens of `string_expression`, which can be obtained by scanning the characters using a sliding window of a fixed length.\n+ * Returns a list of gram tokens of `string`, which can be obtained by scanning the characters using a sliding window of a fixed length.\n  * Arguments:\n-    * `string_expression` : A `String` that will be tokenized.\n+    * `string` : A `String` that will be tokenized.\n     * `gram_length` : An `Int32` as the length of grams.\n-   * `boolean_expression` : A `Boolean` value to indicate whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n+   * `boolean_expression` : A `Boolean` value to indicate whether to generate additional grams by pre- and postfixing `string` with special characters.\n  * Return Value:\n     * An `OrderedList` of String gram tokens.\n \n@@ -1460,13 +1435,13 @@ edit-distance-contains(expression1, expression2, threshold)\n ### hashed-gram-tokens ###\n  * Syntax:\n \n-        hashed-gram-tokens(string_expression, gram_length, boolean_expression)\n+        hashed-gram-tokens(string, gram_length, boolean_expression)\n \n- * Returns a list of hashed gram tokens of `string_expression`.\n+ * Returns a list of hashed gram tokens of `string`.\n  * Arguments:\n-    * `string_expression` : A `String` that will be tokenized.\n+    * `string` : A `String` that will be tokenized.\n     * `gram_length` : An `Int32` as the length of grams.\n-    * `boolean_expression` : A `Boolean` to indicate whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n+    * `boolean_expression` : A `Boolean` to indicate whether to generate additional grams by pre- and postfixing `string` with special characters.\n  * Return Value:\n     * An `OrderedList` of `Int32` hashed gram tokens.\n \n@@ -1497,13 +1472,13 @@ edit-distance-contains(expression1, expression2, threshold)\n ### counthashed-gram-tokens ###\n  * Syntax:\n \n-        counthashed-gram-tokens(string_expression, gram_length, boolean_expression)\n+        counthashed-gram-tokens(string, gram_length, boolean_expression)\n \n- * Returns a list of hashed gram tokens of `string_expression`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n+ * Returns a list of hashed gram tokens of `string`. The hashing mechanism gives duplicate tokens different hash values, based on the occurrence count of that token.\n  * Arguments:\n-    * `string_expression` : A `String` that will be tokenized.\n+    * `string` : A `String` that will be tokenized.\n     * `gram_length` : An `Int32`, length of grams to generate.\n-    * `boolean_expression` : A `Boolean`, whether to generate additional grams by pre- and postfixing `string_expression` with special characters.\n+    * `boolean_expression` : A `Boolean`, whether to generate additional grams by pre- and postfixing `string` with special characters.\n  * Return Value:\n     * An `OrderedList` of `Int32` hashed gram tokens.\n \n@@ -1537,11 +1512,11 @@ edit-distance-contains(expression1, expression2, threshold)\n ### get-year/get-month/get-day/get-hour/get-minute/get-second/get-millisecond ###\n  * Syntax:\n \n-        get-year/get-month/get-day/get-hour/get-minute/get-second/get-millisecond(temporal_expression)\n+        get-year/get-month/get-day/get-hour/get-minute/get-second/get-millisecond(temporal_value)\n \n  * Accessors for accessing fields in a temporal value\n  * Arguments:\n-    * `temporal_expression` : a temporal value represented as one of the following types: `date`, `datetime`, `time`, and `duration`.\n+    * `temporal_value` : a temporal value represented as one of the following types: `date`, `datetime`, `time`, and `duration`.\n  * Return Value:\n     * An `int64` value representing the field to be extracted.\n \n@@ -1563,12 +1538,12 @@ edit-distance-contains(expression1, expression2, threshold)\n ### adjust-datetime-for-timezone ###\n  * Syntax:\n \n-        adjust-datetime-for-timezone(datetime_expression, string_expression)\n+        adjust-datetime-for-timezone(datetime, string)\n \n- * Adjusts the given datetime `datetime_expression` by applying the timezone information `string_expression`.\n+ * Adjusts the given datetime `datetime` by applying the timezone information `string`.\n  * Arguments:\n-    * `datetime_expression` : A `datetime` value to be adjusted.\n-    * `string_expression` : A `string` representing the timezone information.\n+    * `datetime` : A `datetime` value to be adjusted.\n+    * `string` : A `string` representing the timezone information.\n  * Return Value:\n     * A `string` value representing the new datetime after being adjusted by the timezone information.\n \n@@ -1599,12 +1574,12 @@ edit-distance-contains(expression1, expression2, threshold)\n ### adjust-time-for-timezone ###\n  * Syntax:\n \n-        adjust-time-for-timezone(time_expression, string_expression)\n+        adjust-time-for-timezone(time, string)\n \n- * Adjusts the given time `time_expression` by applying the timezone information `string_expression`.\n+ * Adjusts the given time `time` by applying the timezone information `string`.\n  * Arguments:\n-    * `time_expression` : A `time` value to be adjusted.\n-    * `string_expression` : A `string` representing the timezone information.\n+    * `time` : A `time` value to be adjusted.\n+    * `string` : A `string` representing the timezone information.\n  * Return Value:\n     * A `string` value representing the new time after being adjusted by the timezone information.\n \n@@ -1635,14 +1610,14 @@ edit-distance-contains(expression1, expression2, threshold)\n ### calendar-duration-from-datetime ###\n  * Syntax:\n \n-        calendar-duration-from-datetime(datetime_expression, duration_expression)\n+        calendar-duration-from-datetime(datetime, duration_value)\n \n- * Gets a user-friendly representation of the duration `duration_expression` based on the given datetime `datetime_expression`.\n+ * Gets a user-friendly representation of the duration `duration_value` based on the given datetime `datetime`.\n  * Arguments:\n-    * `datetime_expression` : A `datetime` value to be used as the reference time point.\n-    * `duration_expression` : A `duration` value to be converted.\n+    * `datetime` : A `datetime` value to be used as the reference time point.\n+    * `duration_value` : A `duration` value to be converted.\n  * Return Value:\n-    * A `duration` value with the duration as `duration_expression` but with a user-friendly representation.\n+    * A `duration` value with the duration as `duration_value` but with a user-friendly representation.\n \n  * Example:\n \n@@ -1663,11 +1638,11 @@ edit-distance-contains(expression1, expression2, threshold)\n ### get-year-month-duration/get-day-time-duration ###\n  * Syntax:\n \n-        get-year-month-duration/get-day-time-duration(duration_expression)\n+        get-year-month-duration/get-day-time-duration(duration_value)\n \n- * Extracts the correct `duration` subtype from `duration_expression`.\n+ * Extracts the correct `duration` subtype from `duration_value`.\n  * Arguments:\n-    * `duration_expression` : A `duration` value to be converted.\n+    * `duration_value` : A `duration` value to be converted.\n  * Return Value:\n     * A `year-month-duration` value or a `day-time-duration` value.\n \n@@ -1684,11 +1659,11 @@ edit-distance-contains(expression1, expression2, threshold)\n ### months-from-year-month-duration/milliseconds-from-day-time-duration ###\n * Syntax:\n \n-        months-from-year-month-duration/milliseconds-from-day-time-duration(duration_expression)\n+        months-from-year-month-duration/milliseconds-from-day-time-duration(duration_value)\n \n * Extracts the number of months or the number of milliseconds from the `duration` subtype.\n * Arguments:\n-    * `duration_expression` : A `duration` of the correct subtype.\n+    * `duration_value` : A `duration` of the correct subtype.\n * Return Value:\n     * An `int64` representing the number or months/milliseconds.\n \n@@ -1706,13 +1681,13 @@ edit-distance-contains(expression1, expression2, threshold)\n ### duration-from-months/duration-from-ms ###\n * Syntax:\n \n-        duration-from-months/duration-from-ms(number_expression)\n+        duration-from-months/duration-from-ms(number_value)\n \n-* Creates a `duration` from `number_expression`.\n+* Creates a `duration` from `number_value`.\n * Arguments:\n-    * `number_expression` : An `int64` representing the number of months/milliseconds\n+    * `number_value` : An `int64` representing the number of months/milliseconds\n * Return Value:\n-    * A `duration` containing `number_expression` value for months/milliseconds\n+    * A `duration` containing `number_value` value for months/milliseconds\n \n * Example:\n \n@@ -1727,13 +1702,13 @@ edit-distance-contains(expression1, expression2, threshold)\n ### duration-from-interval ###\n * Syntax:\n \n-        duration-from-interval(interval_expression)\n+        duration-from-interval(interval_value)\n \n-* Creates a `duration` from `interval_expression`.\n+* Creates a `duration` from `interval_value`.\n * Arguments:\n-    * `interval_expression` : An `interval` value\n+    * `interval_value` : An `interval` value\n * Return Value:\n-    * A `duration` repesenting the time in the `interval_expression`\n+    * A `duration` repesenting the time in the `interval_value`\n \n * Example:\n \n@@ -1745,7 +1720,7 @@ edit-distance-contains(expression1, expression2, threshold)\n           \"dr2\" : duration-from-interval($itv2),\n           \"dr3\" : duration-from-interval($itv3),\n           \"dr4\" : duration-from-interval(null) }\n-          \n+\n * The expected result is:\n \n         { \"dr1\": day-time-duration(\"P52D\"),\n@@ -1801,22 +1776,22 @@ edit-distance-contains(expression1, expression2, threshold)\n ### get-date-from-datetime ###\n  * Syntax:\n \n-        get-date-from-datetime(datetime_expression)\n+        get-date-from-datetime(datetime)\n \n- * Gets the date value from the given datetime value `datetime_expression`.\n+ * Gets the date value from the given datetime value `datetime`.\n  * Arguments:\n-    * `datetime_expression`: A `datetime` value to be extracted from.\n+    * `datetime`: A `datetime` value to be extracted from.\n  * Return Value:\n     * A `date` value from the datetime.\n \n ### get-time-from-datetime ###\n  * Syntax:\n \n-        get-time-from-datetime(datetime_expression)\n+        get-time-from-datetime(datetime)\n \n- * Get the time value from the given datetime value `datetime_expression`\n+ * Get the time value from the given datetime value `datetime`\n  * Arguments:\n-    * `datetime_expression`: A `datetime` value to be extracted from\n+    * `datetime`: A `datetime` value to be extracted from\n  * Return Value:\n     * A `time` value from the datetime.\n \n@@ -1839,11 +1814,11 @@ edit-distance-contains(expression1, expression2, threshold)\n ### day-of-week ###\n * Syntax:\n \n-        day-of-week(date_expression)\n+        day-of-week(date)\n \n * Finds the day of the week for a given date (1-7)\n * Arguments:\n-    * `date_expression`: A `date` value (Can also be a `datetime`)\n+    * `date`: A `date` value (Can also be a `datetime`)\n * Return Value:\n     * An `int8` representing the day of the week (1-7)\n \n@@ -1861,59 +1836,59 @@ edit-distance-contains(expression1, expression2, threshold)\n ### date-from-unix-time-in-days ###\n  * Syntax:\n \n-        date-from-unix-time-in-days(numeric_expression)\n+        date-from-unix-time-in-days(numeric_value)\n \n- * Gets a date representing the time after `numeric_expression` days since 1970-01-01.\n+ * Gets a date representing the time after `numeric_value` days since 1970-01-01.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the number of days.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the number of days.\n  * Return Value:\n-    * A `date` value as the time after `numeric_expression` days since 1970-01-01.\n+    * A `date` value as the time after `numeric_value` days since 1970-01-01.\n \n ### datetime-from-unix-time-in-ms ###\n  * Syntax:\n \n-        datetime-from-unix-time-in-ms(numeric_expression)\n+        datetime-from-unix-time-in-ms(numeric_value)\n \n- * Gets a datetime representing the time after `numeric_expression` milliseconds since 1970-01-01T00:00:00Z.\n+ * Gets a datetime representing the time after `numeric_value` milliseconds since 1970-01-01T00:00:00Z.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the number of milliseconds.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the number of milliseconds.\n  * Return Value:\n-    * A `datetime` value as the time after `numeric_expression` milliseconds since 1970-01-01T00:00:00Z.\n+    * A `datetime` value as the time after `numeric_value` milliseconds since 1970-01-01T00:00:00Z.\n \n ### datetime-from-unix-time-in-secs ###\n  * Syntax:\n \n-        datetime-from-unix-time-in-secs(numeric_expression)\n+        datetime-from-unix-time-in-secs(numeric_value)\n \n- * Gets a datetime representing the time after `numeric_expression` seconds since 1970-01-01T00:00:00Z.\n+ * Gets a datetime representing the time after `numeric_value` seconds since 1970-01-01T00:00:00Z.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the number of seconds.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the number of seconds.\n  * Return Value:\n-    * A `datetime` value as the time after `numeric_expression` seconds since 1970-01-01T00:00:00Z.\n+    * A `datetime` value as the time after `numeric_value` seconds since 1970-01-01T00:00:00Z.\n \n \n ### datetime-from-date-time ###\n * Syntax:\n \n-datetime-from-date-time(date_expression,time_expression)\n+datetime-from-date-time(date,time)\n \n-* Gets a datetime representing the combination of `date_expression` and `time_expression`\n+* Gets a datetime representing the combination of `date` and `time`\n     * Arguments:\n-    * `date_expression`: A `date` value\n-    * `time_expression` A `time` value\n+    * `date`: A `date` value\n+    * `time` A `time` value\n * Return Value:\n-    * A `datetime` value by combining `date_expression` and `time_expression`\n+    * A `datetime` value by combining `date` and `time`\n \n ### time-from-unix-time-in-ms ###\n  * Syntax:\n \n-        time-from-unix-time-in-ms(numeric_expression)\n+        time-from-unix-time-in-ms(numeric_value)\n \n- * Gets a time representing the time after `numeric_expression` milliseconds since 00:00:00.000Z.\n+ * Gets a time representing the time after `numeric_value` milliseconds since 00:00:00.000Z.\n  * Arguments:\n-    * `numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the number of milliseconds.\n+    * `numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the number of milliseconds.\n  * Return Value:\n-    * A `time` value as the time after `numeric_expression` milliseconds since 00:00:00.000Z.\n+    * A `time` value as the time after `numeric_value` milliseconds since 00:00:00.000Z.\n \n  * Example:\n \n@@ -1933,11 +1908,11 @@ datetime-from-date-time(date_expression,time_expression)\n ### parse-date/parse-time/parse-datetime ###\n * Syntax:\n \n-parse-date/parse-time/parse-datetime(date_expression,formatting_expression)\n+parse-date/parse-time/parse-datetime(date,formatting_expression)\n \n-* Creates a `date/time/date-time` value by treating `date_expression` with formatting `formatting_expression`\n+* Creates a `date/time/date-time` value by treating `date` with formatting `formatting_expression`\n * Arguments:\n-    * `date_expression`: A `string` value representing the `date/time/datetime`. \n+    * `date`: A `string` value representing the `date/time/datetime`.\n     * `formatting_expression` A `string` value providing the formatting for `date_expression`.Characters used to create date expression:\n        * `h` hours\n        * `m` minutes\n@@ -1951,7 +1926,7 @@ parse-date/parse-time/parse-datetime(date_expression,formatting_expression)\n        * `W` weekday\n        * `-`, `'`, `/`, `.`, `,`, `T` seperators for both time and date\n * Return Value:\n-    * A `date/time/date-time` value corresponding to `date_expression`\n+    * A `date/time/date-time` value corresponding to `date`\n \n * Example:\n \n@@ -1966,11 +1941,11 @@ parse-date/parse-time/parse-datetime(date_expression,formatting_expression)\n ### print-date/print-time/print-datetime ###\n * Syntax:\n \n-print-date/print-time/print-datetime(date_expression,formatting_expression)\n+        print-date/print-time/print-datetime(date,formatting_expression)\n \n-* Creates a `string` representing a `date/time/date-time` value of the `date_expression` using the formatting `formatting_expression`\n+* Creates a `string` representing a `date/time/date-time` value of the `date` using the formatting `formatting_expression`\n * Arguments:\n-    * `date_expression`: A `date/time/datetime` value.\n+    * `date`: A `date/time/datetime` value.\n     * `formatting_expression` A `string` value providing the formatting for `date_expression`. Characters used to create date expression:\n        * `h` hours\n        * `m` minutes\n@@ -1984,7 +1959,7 @@ print-date/print-time/print-datetime(date_expression,formatting_expression)\n        * `W` weekday\n        * `-`, `'`, `/`, `.`, `,`, `T` seperators for both time and date\n * Return Value:\n-    * A `string` value corresponding to `date_expression`\n+    * A `string` value corresponding to `date`\n \n * Example:\n \n@@ -2045,18 +2020,18 @@ print-date/print-time/print-datetime(date_expression,formatting_expression)\n ### get-overlapping-interval ###\n  * Syntax:\n \n-        get-overlapping-interval(interval_expression_1, interval_expression_2)\n+        get-overlapping-interval(interval1, interval2)\n \n  * Gets the start/end of the given interval for the specific date/datetime/time type.\n  * Arguments:\n-    * `interval_expression_1`: an `interval` value\n-    * `interval_expression_2`: an `interval` value\n+    * `interval1`: an `interval` value\n+    * `interval2`: an `interval` value\n  * Return Value:\n-    * Returns an `interval` that is overlapping `interval_expression_1` and `interval_expression_2`. If `interval_expression_1` and `interval_expression_2` do not overlap `null` is returned. Note each interval must be of the same type.\n+    * Returns an `interval` that is overlapping `interval1` and `interval2`. If `interval1` and `interval2` do not overlap `null` is returned. Note each interval must be of the same type.\n \n  * Example:\n \n-        { \"overlap1\": get-overlapping-interval(interval-from-time(time(\"11:23:39\"), time(\"18:27:19\")), interval-from-time(time(\"12:23:39\"), time(\"23:18:00\"))), \n+        { \"overlap1\": get-overlapping-interval(interval-from-time(time(\"11:23:39\"), time(\"18:27:19\")), interval-from-time(time(\"12:23:39\"), time(\"23:18:00\"))),\n           \"overlap2\": get-overlapping-interval(interval-from-time(time(\"12:23:39\"), time(\"18:27:19\")), interval-from-time(time(\"07:19:39\"), time(\"09:18:00\"))),\n           \"overlap3\": get-overlapping-interval(interval-from-date(date(\"1980-11-30\"), date(\"1999-09-09\")), interval-from-date(date(\"2013-01-01\"), date(\"2014-01-01\"))),\n           \"overlap4\": get-overlapping-interval(interval-from-date(date(\"1980-11-30\"), date(\"2099-09-09\")), interval-from-date(date(\"2013-01-01\"), date(\"2014-01-01\"))),\n@@ -2065,11 +2040,11 @@ print-date/print-time/print-datetime(date_expression,formatting_expression)\n \n  * The expected result is:\n \n-        { \"overlap1\": interval-time(\"12:23:39.000Z, 18:27:19.000Z\"), \n-          \"overlap2\": null, \n-          \"overlap3\": null, \n-          \"overlap4\": interval-date(\"2013-01-01, 2014-01-01\"), \n-          \"overlap5\": interval-datetime(\"1989-03-04T12:23:39.000Z, 2000-10-30T18:27:19.000Z\"), \n+        { \"overlap1\": interval-time(\"12:23:39.000Z, 18:27:19.000Z\"),\n+          \"overlap2\": null,\n+          \"overlap3\": null,\n+          \"overlap4\": interval-date(\"2013-01-01, 2014-01-01\"),\n+          \"overlap5\": interval-datetime(\"1989-03-04T12:23:39.000Z, 2000-10-30T18:27:19.000Z\"),\n           \"overlap6\": null }\n \n \n@@ -2120,12 +2095,12 @@ See the [Allen's Relations](allens.html).\n ### interval-from-date ###\n  * Syntax:\n \n-        interval-from-date(string_expression1, string_expression2)\n+        interval-from-date(string1, string2)\n \n  * Constructor function for the `interval` type by parsing two date strings.\n  * Arguments:\n-    * `string_expression1` : The `string` value representing the starting date.\n-    * `string_expression2` : The `string` value representing the ending date.\n+    * `string1` : The `string` value representing the starting date.\n+    * `string2` : The `string` value representing the ending date.\n  * Return Value:\n     * An `interval` value between the two dates.\n \n@@ -2142,12 +2117,12 @@ See the [Allen's Relations](allens.html).\n ### interval-from-time ###\n  * Syntax:\n \n-        interval-from-time(string_expression1, string_expression2)\n+        interval-from-time(string1, string2)\n \n  * Constructor function for the `interval` type by parsing two time strings.\n  * Arguments:\n-    * `string_expression1` : The `string` value representing the starting time.\n-    * `string_expression2` : The `string` value representing the ending time.\n+    * `string1` : The `string` value representing the starting time.\n+    * `string2` : The `string` value representing the ending time.\n  * Return Value:\n     * An `interval` value between the two times.\n \n@@ -2164,12 +2139,12 @@ See the [Allen's Relations](allens.html).\n ### interval-from-datetime ###\n  * Syntax:\n \n-        interval-from-datetime(string_expression1, string_expression2)\n+        interval-from-datetime(string1, string2)\n \n  * Constructor function for `interval` type by parsing two datetime strings.\n  * Arguments:\n-    * `string_expression1` : The `string` value representing the starting datetime.\n-    * `string_expression2` : The `string` value representing the ending datetime.\n+    * `string1` : The `string` value representing the starting datetime.\n+    * `string2` : The `string` value representing the ending datetime.\n  * Return Value:\n     * An `interval` value between the two datetimes.\n \n@@ -2213,11 +2188,11 @@ See the [Allen's Relations](allens.html).\n \n  * Syntax:\n \n-        overlap-bins(interval_expression, time-bin-anchor, duration-bin-size)\n+        overlap-bins(interval, time-bin-anchor, duration-bin-size)\n \n- * Returns an ordered list of `interval` values representing each bin that is overlapping the `interval_expression`.\n+ * Returns an ordered list of `interval` values representing each bin that is overlapping the `interval`.\n  * Arguments:\n-    * `interval_expression`: an `interval` value\n+    * `interval`: an `interval` value\n     * `time-bin-anchor`: a date/time/datetime value representing an anchor of a bin starts. The type of this argument should be the same as the first `time-to-bin` argument.\n     * `duration-bin-size`: the duration value representing the size of the bin, in the type of year-month-duration or day-time-duration. The type of this duration should be compatible with the type of `time-to-bin`, so that the arithmetic operation between `time-to-bin` and `duration-bin-size` is well-defined. Currently AsterixDB supports the following arithmetic operations:\n         * datetime +|- year-month-duration\n@@ -2226,7 +2201,7 @@ See the [Allen's Relations](allens.html).\n         * date +|- day-time-duration\n         * time +|- day-time-duration\n   * Return Value:\n-    * A ordered list of `interval` values representing each bin that is overlapping the `interval_expression`. Note that the internal type as `time-to-bin` and `duration-bin-size`.\n+    * A ordered list of `interval` values representing each bin that is overlapping the `interval`. Note that the internal type as `time-to-bin` and `duration-bin-size`.\n \n   * Example:\n \n@@ -2236,11 +2211,11 @@ See the [Allen's Relations](allens.html).\n         return { \"timebins\": overlap-bins($itv1, time(\"00:00:00\"), day-time-duration(\"PT30M\")),\n           \"datebins\": overlap-bins($itv2, date(\"1990-01-01\"), year-month-duration(\"P20Y\")),\n           \"datetimebins\": overlap-bins($itv3, datetime(\"1900-01-01T00:00:00.000\"), year-month-duration(\"P100Y\")) }\n-          \n+\n    * The expected result is:\n \n-        { \"timebins\": [ interval-time(\"17:00:00.000Z, 17:30:00.000Z\"), interval-time(\"17:30:00.000Z, 18:00:00.000Z\"), interval-time(\"18:00:00.000Z, 18:30:00.000Z\"), interval-time(\"18:30:00.000Z, 19:00:00.000Z\") ], \n-          \"datebins\": [ interval-date(\"1970-01-01, 1990-01-01\"), interval-date(\"1990-01-01, 2010-01-01\"), interval-date(\"2010-01-01, 2030-01-01\") ], \n+        { \"timebins\": [ interval-time(\"17:00:00.000Z, 17:30:00.000Z\"), interval-time(\"17:30:00.000Z, 18:00:00.000Z\"), interval-time(\"18:00:00.000Z, 18:30:00.000Z\"), interval-time(\"18:30:00.000Z, 19:00:00.000Z\") ],\n+          \"datebins\": [ interval-date(\"1970-01-01, 1990-01-01\"), interval-date(\"1990-01-01, 2010-01-01\"), interval-date(\"2010-01-01, 2030-01-01\") ],\n           \"datetimebins\": [ interval-datetime(\"1800-01-01T00:00:00.000Z, 1900-01-01T00:00:00.000Z\"), interval-datetime(\"1900-01-01T00:00:00.000Z, 2000-01-01T00:00:00.000Z\"), interval-datetime(\"2000-01-01T00:00:00.000Z, 2100-01-01T00:00:00.000Z\") ] }\n \n \n@@ -2250,62 +2225,152 @@ See the [Allen's Relations](allens.html).\n ### get-record-fields ###\n  * Syntax:\n \n-        get-record-fields(record_expression)\n+        get-record-fields(input_record)\n \n  * Access the record field names, type and open status for a given record.\n  * Arguments:\n-    * `record_expression` : a record value.\n+    * `input_record` : a record value.\n  * Return Value:\n-    * An order list of `record` values that include the field-name `string`, field-type `string`, is-open `boolean` and optional nested `orderedList` for the values of a nested record.\n+    * An order list of `record` values that include the field-name `string`, field-type `string`, is-open `boolean` (used for debug purposes only: `true` if field is open and `false` otherwise), and optional nested `orderedList` for the values of a nested record.\n \n  * Example:\n \n-        let $r1 := {\"id\": 1, \n-            \"project\": \"AsterixDB\", \n-            \"address\": {\"city\": \"Irvine\", \"state\": \"CA\"}, \n+        let $r1 := {\"id\": 1,\n+            \"project\": \"AsterixDB\",\n+            \"address\": {\"city\": \"Irvine\", \"state\": \"CA\"},\n             \"related\": [\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n         return get-record-fields($r1)\n \n  * The expected result is:\n \n-        [ { \"field-name\": \"id\", \"field-type\": \"INT64\", \"is-open\": false }, \n-          { \"field-name\": \"project\", \"field-type\": \"STRING\", \"is-open\": false }, \n-          { \"field-name\": \"address\", \"field-type\": \"RECORD\", \"is-open\": false, \"nested\": [ \n-            { \"field-name\": \"city\", \"field-type\": \"STRING\", \"is-open\": false }, \n-            { \"field-name\": \"state\", \"field-type\": \"STRING\", \"is-open\": false } ] }, \n-          { \"field-name\": \"related\", \"field-type\": \"ORDEREDLIST\", \"is-open\": false, \"list\": [ \n-            { \"field-type\": \"STRING\" }, \n-            { \"field-type\": \"STRING\" }, \n+        [ { \"field-name\": \"id\", \"field-type\": \"INT64\", \"is-open\": false },\n+          { \"field-name\": \"project\", \"field-type\": \"STRING\", \"is-open\": false },\n+          { \"field-name\": \"address\", \"field-type\": \"RECORD\", \"is-open\": false, \"nested\": [\n+            { \"field-name\": \"city\", \"field-type\": \"STRING\", \"is-open\": false },\n+            { \"field-name\": \"state\", \"field-type\": \"STRING\", \"is-open\": false } ] },\n+          { \"field-name\": \"related\", \"field-type\": \"ORDEREDLIST\", \"is-open\": false, \"list\": [\n+            { \"field-type\": \"STRING\" },\n+            { \"field-type\": \"STRING\" },\n             { \"field-type\": \"STRING\" } ] } ]\n \n  ]\n ### get-record-field-value ###\n  * Syntax:\n \n-        get-record-field-value(record_expression, string_expression)\n+        get-record-field-value(input_record, string)\n \n  * Access the field name given in the `string_expression` from the `record_expression`.\n  * Arguments:\n-    * `record_expression` : A `record` value.\n-    * `string_expression` : A `string` representing the top level field name.\n+    * `input_record` : A `record` value.\n+    * `string` : A `string` representing the top level field name.\n  * Return Value:\n     * An `any` value saved in the designated field of the record.\n \n  * Example:\n \n-        let $r1 := {\"id\": 1, \n-            \"project\": \"AsterixDB\", \n-            \"address\": {\"city\": \"Irvine\", \"state\": \"CA\"}, \n+        let $r1 := {\"id\": 1,\n+            \"project\": \"AsterixDB\",\n+            \"address\": {\"city\": \"Irvine\", \"state\": \"CA\"},\n             \"related\": [\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n         return get-record-field-value($r1, \"project\")\n \n  * The expected result is:\n \n         \"AsterixDB\"\n \n+### record-remove-fields ###\n+ * Syntax:\n \n-## <a id=\"OtherFunctions\">Other Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font> ##\n+        record-remove-fields(input_record, field_names)\n+\n+ * Remove indicated fields from a record given a list of field names.\n+ * Arguments:\n+    * `input_record`:  a record value.\n+    * `field_names`: an ordered list of strings and/or ordered list of ordered list of strings.\n+\n+ * Return Value:\n+    * A new record value without the fields listed in the second argument.\n+\n+\n+ * Example:\n+\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return remove-fields($r1, [[\"address\", \"city\"], \"related\"])\n+\n+ * The expected result is:\n+\n+        { \"id\":1,\n+        \"project\":\"AsterixDB\",\n+        \"address\":{\"state\":\"CA\"}}\n+\n+### record-add-fields ###\n+ * Syntax:\n+\n+        record-add-fields(input_record, fields)\n \n+ * Add fields from a record given a list of field names.\n+ * Arguments:\n+    * `input_record` : a record value.\n+    * `fields`: an ordered list of field descriptor records where each record has field-name and  field-value.\n+ * Return Value:\n+    * A new record value with the new fields included.\n+\n+\n+ * Example:\n+\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return record-add-fields($r1, [{\"field-name\":\"employment-location\", \"field-value\":create-point(30.0,70.0)}])\n+\n+ * The expected result is:\n+\n+        {\"id\":1,\n+           \"project\":\"AsterixDB\",\n+           \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+           \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"]\n+           \"employment-location\": point(\"30.0,70.0\")}\n+\n+### record-merge ###\n+ * Syntax:\n+\n+        record-merge(record1, record2)\n+\n+ * Merge two different records into a new record.\n+ * Arguments:\n+    * `record1` : a record value.\n+    * `record2` : a record value.\n+ * Return Value:\n+    * A new record value with fields from both input records. If a field\u2019s names in both records are the same, an exception is issued.\n+\n+\n+ * Example:\n+\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+\n+        let $r2 := {\"user_id\": 22,\n+           \"employer\": \"UC Irvine\",\n+           \"employment-type\": \"visitor\" }\n+        return  record-merge($r1, $r2)\n+\n+ * The expected result is:\n+\n+        {\"id\":1,\n+         \"project\":\"AsterixDB\",\n+         \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+         \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"]\n+         \"user-id\": 22,\n+         \"employer\": \"UC Irvine\",\n+         \"employment-type\": \"visitor\"}\n+\n+## <a id=\"OtherFunctions\">Other Functions</a> <font size=\"4\"><a href=\"#toc\">[Back to TOC]</a></font> ##\n \n ### create-uuid ###\n  * Syntax:\n@@ -2357,13 +2422,13 @@ See the [Allen's Relations](allens.html).\n ### len ###\n  * Syntax:\n \n-    len(list_expression)\n+    len(list)\n \n- * Returns the length of the list list_expression.\n+ * Returns the length of the list list.\n  * Arguments:\n-    * `list_expression` : An `OrderedList`, `UnorderedList` or `null`, represents the list need to be checked.\n+    * `list` : An `OrderedList`, `UnorderedList` or `null`, represents the list need to be checked.\n  * Return Value:\n-    * An `Int32` that represents the length of list_expression.\n+    * An `Int32` that represents the length of list.\n \n  * Example:\n \n@@ -2403,13 +2468,13 @@ See the [Allen's Relations](allens.html).\n ### range ###\n  * Syntax:\n \n-        range(start_numeric_expression, end_numeric_expression)\n+        range(start_numeric_value, end_numeric_value)\n \n-* Generates a series of `int64` values based start the `start_numeric_expression` until the `end_numeric_expression`.\n+* Generates a series of `int64` values based start the `start_numeric_value` until the `end_numeric_value`.\n   The `range` fucntion must be used list argument of a `for` expression.\n * Arguments:\n-   * `start_numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the start value.\n-   * `end_numeric_expression`: A `int8`/`int16`/`int32`/`int64` value representing the max final value.\n+   * `start_numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the start value.\n+   * `end_numeric_value`: A `int8`/`int16`/`int32`/`int64` value representing the max final value.\n * Return Value:\n     * A generated `uuid`.\n * Example:\n@@ -2420,8 +2485,8 @@ See the [Allen's Relations](allens.html).\n  * The expected result is:\n \n         [ 0\n-        , 1 \n-        , 2 \n+        , 1\n+        , 2\n         , 3\n         ]\n \n@@ -2470,3 +2535,33 @@ See the [Allen's Relations](allens.html).\n         3\n \n \n+### deep-equal ###\n+* Syntax:\n+\n+        deep-equal(var1, var2)\n+\n+\n+ * Assess the equality between two variables of any type (e.g., records and lists). Two objects are deeply equal iff both their types and values are equal.\n+ * Arguments:\n+    * `var1` : a data value, such as record and list.\n+    * `var2`: a data value, such as record and list.\n+ * Return Value:\n+    * `true` or `false` depending on the data equality.\n+\n+\n+ * Example:\n+\n+        let $r1 := {\"id\":1,\n+            \"project\":\"AsterixDB\",\n+            \"address\":{\"city\":\"Irvine\", \"state\":\"CA\"},\n+            \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+\n+        let $r2 := {\"id\":1,\n+                    \"project\":\"AsterixDB\",\n+                    \"address\":{\"city\":\"San Diego\", \"state\":\"CA\"},\n+                    \"related\":[\"Hivestrix\", \"Preglix\", \"Apache VXQuery\"] }\n+        return deep-equal($r1, $r2)\n+\n+ * The expected result is:\n+\n+        false\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-doc/src/site/markdown/aql/functions.md",
                "sha": "190768939a4a693da70c8d8bfa158a1248859eec",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/builders/IARecordBuilder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/builders/IARecordBuilder.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 1,
                "filename": "asterix-om/src/main/java/org/apache/asterix/builders/IARecordBuilder.java",
                "patch": "@@ -52,7 +52,7 @@\n     /**\n      * @param name\n      *            The field name.\n-     * @param out\n+     * @param value\n      *            The field value.\n      * @throws AsterixException\n      *             if the field name conflicts with a closed field name",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/builders/IARecordBuilder.java",
                "sha": "ee15d5d9c42cd9cd849546f97f3cc226d8822359",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/formats/nontagged/AqlSerializerDeserializerProvider.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/formats/nontagged/AqlSerializerDeserializerProvider.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 5,
                "filename": "asterix-om/src/main/java/org/apache/asterix/formats/nontagged/AqlSerializerDeserializerProvider.java",
                "patch": "@@ -18,11 +18,6 @@\n  */\n package org.apache.asterix.formats.nontagged;\n \n-import java.io.DataInput;\n-import java.io.DataOutput;\n-import java.io.IOException;\n-import java.io.Serializable;\n-\n import org.apache.asterix.dataflow.data.nontagged.serde.ABinarySerializerDeserializer;\n import org.apache.asterix.dataflow.data.nontagged.serde.ABooleanSerializerDeserializer;\n import org.apache.asterix.dataflow.data.nontagged.serde.ACircleSerializerDeserializer;\n@@ -66,6 +61,11 @@\n import org.apache.hyracks.api.exceptions.HyracksDataException;\n import org.apache.hyracks.dataflow.common.data.marshalling.ShortSerializerDeserializer;\n \n+import java.io.DataInput;\n+import java.io.DataOutput;\n+import java.io.IOException;\n+import java.io.Serializable;\n+\n public class AqlSerializerDeserializerProvider implements ISerializerDeserializerProvider, Serializable {\n \n     private static final long serialVersionUID = 1L;",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/formats/nontagged/AqlSerializerDeserializerProvider.java",
                "sha": "9be8cae85b1b81170db8a2f60cbf1259d17e16af",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/functions/AsterixBuiltinFunctions.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/functions/AsterixBuiltinFunctions.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 8,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/functions/AsterixBuiltinFunctions.java",
                "patch": "@@ -18,12 +18,6 @@\n  */\n package org.apache.asterix.om.functions;\n \n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-\n import org.apache.asterix.common.functions.FunctionConstants;\n import org.apache.asterix.common.functions.FunctionSignature;\n import org.apache.asterix.om.typecomputer.base.IResultTypeComputer;\n@@ -97,7 +91,9 @@\n import org.apache.asterix.om.typecomputer.impl.OrderedListOfAStringTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.OrderedListOfAnyTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.QuadStringStringOrNullTypeComputer;\n+import org.apache.asterix.om.typecomputer.impl.RecordAddFieldsTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.RecordMergeTypeComputer;\n+import org.apache.asterix.om.typecomputer.impl.RecordRemoveFieldsTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.ScalarVersionOfAggregateResultType;\n import org.apache.asterix.om.typecomputer.impl.SubsetCollectionTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.Substring2TypeComputer;\n@@ -117,6 +113,12 @@\n import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n import org.apache.hyracks.algebricks.core.algebra.functions.IFunctionInfo;\n \n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+\n public class AsterixBuiltinFunctions {\n \n     public enum SpatialFilterKind {\n@@ -173,9 +175,17 @@\n     public final static FunctionIdentifier UNORDERED_LIST_CONSTRUCTOR = new FunctionIdentifier(\n             FunctionConstants.ASTERIX_NS, \"unordered-list-constructor\", FunctionIdentifier.VARARGS);\n \n+    public final static FunctionIdentifier DEEP_EQUAL = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"deep-equal\", 2);\n+\n     // records\n     public final static FunctionIdentifier RECORD_MERGE = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n-            \"record-merge\", 3);\n+            \"record-merge\", 2);\n+    public final static FunctionIdentifier REMOVE_FIELDS = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"record-remove-fields\", 2);\n+    public final static FunctionIdentifier ADD_FIELDS = new FunctionIdentifier(FunctionConstants.ASTERIX_NS,\n+            \"record-add-fields\", 2);\n+\n     public final static FunctionIdentifier CLOSED_RECORD_CONSTRUCTOR = new FunctionIdentifier(\n             FunctionConstants.ASTERIX_NS, \"closed-record-constructor\", FunctionIdentifier.VARARGS);\n     public final static FunctionIdentifier OPEN_RECORD_CONSTRUCTOR = new FunctionIdentifier(\n@@ -741,6 +751,9 @@ public static AsterixFunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addPrivateFunction(OR, BinaryBooleanOrNullFunctionTypeComputer.INSTANCE, true);\n         addPrivateFunction(NUMERIC_ADD, NonTaggedNumericAddSubMulDivTypeComputer.INSTANCE, true);\n \n+        // Deep equality\n+        addFunction(DEEP_EQUAL, BinaryBooleanOrNullFunctionTypeComputer.INSTANCE, true);\n+\n         // and then, Asterix builtin functions\n         addPrivateFunction(NOT_NULL, NotNullTypeComputer.INSTANCE, true);\n         addPrivateFunction(ANY_COLLECTION_MEMBER, NonTaggedCollectionMemberResultType.INSTANCE, true);\n@@ -933,7 +946,9 @@ public static AsterixFunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addFunction(WORD_TOKENS, OrderedListOfAStringTypeComputer.INSTANCE, true);\n \n         // records\n-        addPrivateFunction(RECORD_MERGE, RecordMergeTypeComputer.INSTANCE, true);\n+        addFunction(RECORD_MERGE, RecordMergeTypeComputer.INSTANCE, true);\n+        addFunction(ADD_FIELDS, RecordAddFieldsTypeComputer.INSTANCE, true);\n+        addFunction(REMOVE_FIELDS, RecordRemoveFieldsTypeComputer.INSTANCE, true);\n         addPrivateFunction(CLOSED_RECORD_CONSTRUCTOR, ClosedRecordConstructorResultType.INSTANCE, true);\n         addPrivateFunction(OPEN_RECORD_CONSTRUCTOR, OpenRecordConstructorResultType.INSTANCE, true);\n         addPrivateFunction(FIELD_ACCESS_BY_INDEX, FieldAccessByIndexResultType.INSTANCE, true);",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/functions/AsterixBuiltinFunctions.java",
                "sha": "7b8a9fa124c59c899568e628c6b2f45ac7d72227",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/pointables/ARecordVisitablePointable.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/pointables/ARecordVisitablePointable.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 5,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/pointables/ARecordVisitablePointable.java",
                "patch": "@@ -19,11 +19,6 @@\n \n package org.apache.asterix.om.pointables;\n \n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n import org.apache.asterix.common.exceptions.AsterixException;\n import org.apache.asterix.dataflow.data.nontagged.AqlNullWriterFactory;\n import org.apache.asterix.dataflow.data.nontagged.serde.AInt32SerializerDeserializer;\n@@ -40,6 +35,11 @@\n import org.apache.hyracks.api.dataflow.value.INullWriter;\n import org.apache.hyracks.util.string.UTF8StringWriter;\n \n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * This class interprets the binary data representation of a record. One can\n  * call getFieldNames, getFieldTypeTags and getFieldValues to get pointable",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/pointables/ARecordVisitablePointable.java",
                "sha": "03e3895602c1ee6b8c0b6771c01d3bd751683218",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/pointables/cast/ARecordCaster.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/pointables/cast/ARecordCaster.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 8,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/pointables/cast/ARecordCaster.java",
                "patch": "@@ -19,14 +19,6 @@\n \n package org.apache.asterix.om.pointables.cast;\n \n-import java.io.ByteArrayOutputStream;\n-import java.io.DataOutput;\n-import java.io.DataOutputStream;\n-import java.io.IOException;\n-import java.io.PrintStream;\n-import java.util.ArrayList;\n-import java.util.List;\n-\n import org.apache.asterix.builders.RecordBuilder;\n import org.apache.asterix.common.exceptions.AsterixException;\n import org.apache.asterix.common.exceptions.TypeException;\n@@ -55,6 +47,14 @@\n import org.apache.hyracks.data.std.util.ByteArrayAccessibleOutputStream;\n import org.apache.hyracks.util.string.UTF8StringWriter;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.DataOutput;\n+import java.io.DataOutputStream;\n+import java.io.IOException;\n+import java.io.PrintStream;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n /**\n  * This class is to do the runtime type cast for a record. It is ONLY visible to\n  * ACastVisitor.",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/pointables/cast/ARecordCaster.java",
                "sha": "d89ae6a4cedad05dd2ef5749ed69c00b54f4613d",
                "status": "modified"
            },
            {
                "additions": 185,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordAddFieldsTypeComputer.java",
                "changes": 185,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordAddFieldsTypeComputer.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordAddFieldsTypeComputer.java",
                "patch": "@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.om.typecomputer.impl;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+\n+import org.apache.asterix.om.base.AString;\n+import org.apache.asterix.om.base.IAObject;\n+import org.apache.asterix.om.constants.AsterixConstantValue;\n+import org.apache.asterix.om.typecomputer.base.IResultTypeComputer;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AUnionType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.om.types.TypeHelper;\n+import org.apache.commons.lang3.mutable.Mutable;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n+import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractLogicalExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.ConstantExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.IVariableTypeEnvironment;\n+import org.apache.hyracks.algebricks.core.algebra.metadata.IMetadataProvider;\n+\n+public class RecordAddFieldsTypeComputer implements IResultTypeComputer {\n+    public static final RecordAddFieldsTypeComputer INSTANCE = new RecordAddFieldsTypeComputer();\n+\n+    private static final String FIELD_NAME_NAME = \"field-name\";\n+    private static final String FIELD_VALUE_VALUE = \"field-value\";\n+\n+    private RecordAddFieldsTypeComputer() {\n+    }\n+\n+    @Override\n+    public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironment env,\n+            IMetadataProvider<?, ?> metadataProvider) throws AlgebricksException {\n+\n+        AbstractFunctionCallExpression funcExpr = (AbstractFunctionCallExpression) expression;\n+        IAType type0 = (IAType) env.getType(funcExpr.getArguments().get(0).getValue());\n+\n+        ARecordType inputRecordType = TypeComputerUtils.extractRecordType(type0);\n+        if (inputRecordType == null) {\n+            throw new AlgebricksException(\"Input record cannot be null\");\n+        }\n+\n+        AbstractLogicalExpression arg1 = (AbstractLogicalExpression) funcExpr.getArguments().get(1).getValue();\n+        IAType type1 = (IAType) env.getType(arg1);\n+        AOrderedListType inputOrderedListType = TypeComputerUtils.extractOrderedListType(type1);\n+        if (inputOrderedListType == null) {\n+            return inputRecordType;\n+        }\n+\n+        boolean nullable = TypeHelper.canBeNull(type0) || TypeHelper.canBeNull(type1);\n+        Map<String, IAType> additionalFields = new HashMap<>();\n+        List<String> resultFieldNames = new ArrayList<>();\n+        List<IAType> resultFieldTypes = new ArrayList<>();\n+\n+        resultFieldNames.addAll(Arrays.asList(inputRecordType.getFieldNames()));\n+        Collections.sort(resultFieldNames);\n+\n+        for (String fieldName : resultFieldNames) {\n+            try {\n+                if (inputRecordType.getFieldType(fieldName).getTypeTag() == ATypeTag.RECORD) {\n+                    ARecordType nestedType = (ARecordType) inputRecordType.getFieldType(fieldName);\n+                    //Deep Copy prevents altering of input types\n+                    resultFieldTypes.add(nestedType.deepCopy(nestedType));\n+                } else {\n+                    resultFieldTypes.add(inputRecordType.getFieldType(fieldName));\n+                }\n+            } catch (IOException e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        if (!containsVariable(arg1)) {\n+            AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) arg1;\n+            List<Mutable<ILogicalExpression>> args = f.getArguments();\n+\n+            AString fieldName = null;\n+            IAType fieldType = null;\n+\n+            // Iterating through the orderlist input\n+            for (Mutable<ILogicalExpression> arg : args) {\n+                AbstractFunctionCallExpression recConsExpr = (AbstractFunctionCallExpression) arg.getValue();\n+                ARecordType rtype = TypeComputerUtils.extractRecordType((IAType) env.getType(recConsExpr));\n+                if (rtype != null) {\n+                    String[] fn = rtype.getFieldNames();\n+                    IAType[] ft = rtype.getFieldTypes();\n+                    for (int j = 0; j < fn.length; j++) {\n+                        if (fn[j].equals(FIELD_NAME_NAME)) {\n+                            ILogicalExpression fieldNameExpr = recConsExpr.getArguments().get(j).getValue();\n+                            switch (fieldNameExpr.getExpressionTag()) {\n+                                case CONSTANT: // Top fields only\n+                                    IAObject object = ((AsterixConstantValue) ((ConstantExpression) fieldNameExpr)\n+                                            .getValue()).getObject();\n+                                    if (object.getType().getTypeTag() == ATypeTag.STRING) {\n+                                        // Get the actual \"field-name\" string\n+                                        ILogicalExpression recFieldExpr = recConsExpr.getArguments().get(j + 1)\n+                                                .getValue();\n+                                        if (recFieldExpr.getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n+                                            fieldName = (AString) ((AsterixConstantValue) ((ConstantExpression) recFieldExpr)\n+                                                    .getValue()).getObject();\n+                                        }\n+                                    }\n+                                    break;\n+                                default:\n+                                    throw new AlgebricksException(fieldNameExpr + \" is not supported.\");\n+                            }\n+                        } else if (fn[j].equals(FIELD_VALUE_VALUE)) {\n+                            fieldType = ft[j];\n+                        }\n+                    }\n+                    if (fieldName != null) {\n+                        additionalFields.put(fieldName.getStringValue(), fieldType);\n+                    }\n+                }\n+            }\n+\n+            if (!additionalFields.isEmpty()) {\n+                Iterator<Map.Entry<String, IAType>> it = additionalFields.entrySet().iterator();\n+                while (it.hasNext()) {\n+                    Map.Entry<String, IAType> entry = it.next();\n+                    resultFieldNames.add(entry.getKey());\n+                    resultFieldTypes.add(entry.getValue());\n+                }\n+            }\n+        } // If variable ignore, deal with the addition at runtime\n+\n+        String resultTypeName = \"appended(\" + inputRecordType.getTypeName() + \")\";\n+        int n = resultFieldNames.size();\n+        IAType resultType = new ARecordType(resultTypeName, resultFieldNames.toArray(new String[n]),\n+                resultFieldTypes.toArray(new IAType[n]), true);\n+        if (nullable) {\n+            resultType = AUnionType.createNullableType(resultType);\n+        }\n+        return resultType;\n+    }\n+\n+    // Handle variable as input\n+    private boolean containsVariable(ILogicalExpression expression) {\n+        if (expression.getExpressionTag() == LogicalExpressionTag.FUNCTION_CALL) {\n+            AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) expression;\n+            List<Mutable<ILogicalExpression>> args = f.getArguments();\n+            for (Mutable<ILogicalExpression> arg : args) {\n+                ILogicalExpression subExpression = arg.getValue();\n+                switch (subExpression.getExpressionTag()) {\n+                    case VARIABLE:\n+                        return true;\n+                    case CONSTANT:\n+                        return false;\n+                    default: //FUNCTION_CALL\n+                        return containsVariable(subExpression);\n+                }\n+            }\n+        }\n+        return true;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordAddFieldsTypeComputer.java",
                "sha": "4f8d1f287ec637734b914b417e95212c38f14318",
                "status": "added"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordMergeTypeComputer.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordMergeTypeComputer.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 46,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordMergeTypeComputer.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-\n import org.apache.asterix.common.exceptions.AsterixException;\n import org.apache.asterix.om.typecomputer.base.IResultTypeComputer;\n import org.apache.asterix.om.types.ARecordType;\n@@ -44,41 +43,27 @@\n     private RecordMergeTypeComputer() {\n     }\n \n-    public static ARecordType extractRecordType(IAType t) {\n-        if (t.getTypeTag() == ATypeTag.RECORD) {\n-            return (ARecordType) t;\n-        }\n-\n-        if (t.getTypeTag() == ATypeTag.UNION) {\n-            IAType innerType = ((AUnionType) t).getNullableType();\n-            if (innerType.getTypeTag() == ATypeTag.RECORD) {\n-                return (ARecordType) innerType;\n-            }\n-        }\n-\n-        return null;\n-    }\n-\n     @Override\n     public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironment env,\n             IMetadataProvider<?, ?> metadataProvider) throws AlgebricksException {\n         AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) expression;\n         IAType t0 = (IAType) env.getType(f.getArguments().get(0).getValue());\n         IAType t1 = (IAType) env.getType(f.getArguments().get(1).getValue());\n         boolean nullable = TypeHelper.canBeNull(t0) || TypeHelper.canBeNull(t1);\n-        ARecordType recType0 = extractRecordType(t0);\n-        ARecordType recType1 = extractRecordType(t1);\n+        ARecordType recType0 = TypeComputerUtils.extractRecordType(t0);\n+        ARecordType recType1 = TypeComputerUtils.extractRecordType(t1);\n \n         if (recType0 == null || recType1 == null) {\n-            throw new AlgebricksException(\n-                    \"record-merge expects possibly NULL records as arguments, but got (\" + t0 + \", \" + t1 + \")\");\n+            throw new AlgebricksException(\"record-merge expects possibly NULL records as arguments, but got (\" + t0\n+                    + \", \" + t1 + \")\");\n         }\n \n         List<String> resultFieldNames = new ArrayList<>();\n         for (String fieldName : recType0.getFieldNames()) {\n             resultFieldNames.add(fieldName);\n         }\n         Collections.sort(resultFieldNames);\n+\n         List<IAType> resultFieldTypes = new ArrayList<>();\n         for (String fieldName : resultFieldNames) {\n             try {\n@@ -96,70 +81,77 @@ public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironmen\n \n         List<String> additionalFieldNames = new ArrayList<>();\n         List<IAType> additionalFieldTypes = new ArrayList<>();\n-        for (int i = 0; i < recType1.getFieldNames().length; ++i) {\n-            String fieldName = recType1.getFieldNames()[i];\n-            IAType fieldType = recType1.getFieldTypes()[i];\n-            int pos = Collections.binarySearch(resultFieldNames, fieldName);\n+        String fieldNames[] = recType1.getFieldNames();\n+        IAType fieldTypes[] = recType1.getFieldTypes();\n+        for (int i = 0; i < fieldNames.length; ++i) {\n+            int pos = Collections.binarySearch(resultFieldNames, fieldNames[i]);\n             if (pos >= 0) {\n+                IAType resultFieldType = resultFieldTypes.get(pos);\n+                if (resultFieldType.getTypeTag() != fieldTypes[i].getTypeTag()) {\n+                    throw new AlgebricksException(\"Duplicate field \" + fieldNames[i] + \" encountered\");\n+                }\n                 try {\n-                    resultFieldTypes.set(pos, mergedNestedType(fieldType, resultFieldTypes.get(pos)));\n+                    // Assuming fieldTypes[i].getTypeTag() = resultFieldType.getTypeTag()\n+                    if (fieldTypes[i].getTypeTag() == ATypeTag.RECORD) {\n+                        resultFieldTypes.set(pos, mergedNestedType(fieldTypes[i], resultFieldType));\n+                    }\n                 } catch (AsterixException e) {\n                     throw new AlgebricksException(e);\n                 }\n \n             } else {\n-                additionalFieldNames.add(fieldName);\n-                additionalFieldTypes.add(fieldType);\n+                additionalFieldNames.add(fieldNames[i]);\n+                additionalFieldTypes.add(fieldTypes[i]);\n             }\n         }\n \n         resultFieldNames.addAll(additionalFieldNames);\n         resultFieldTypes.addAll(additionalFieldTypes);\n         String resultTypeName = \"merged(\" + recType0.getTypeName() + \", \" + recType1.getTypeName() + \")\";\n         boolean isOpen = recType0.isOpen() || recType1.isOpen();\n-        IAType resultType = null;\n-        resultType = new ARecordType(resultTypeName, resultFieldNames.toArray(new String[] {}),\n-                resultFieldTypes.toArray(new IAType[] {}), isOpen);\n+\n+        IAType resultType = new ARecordType(resultTypeName, resultFieldNames.toArray(new String[] {}),\n+                    resultFieldTypes.toArray(new IAType[] {}), isOpen);\n \n         if (nullable) {\n             resultType = AUnionType.createNullableType(resultType);\n         }\n         return resultType;\n     }\n \n-    IAType mergedNestedType(IAType fieldType1, IAType fieldType0) throws AlgebricksException, AsterixException {\n+    private IAType mergedNestedType(IAType fieldType1, IAType fieldType0) throws AlgebricksException, AsterixException {\n         if (fieldType1.getTypeTag() != ATypeTag.RECORD || fieldType0.getTypeTag() != ATypeTag.RECORD) {\n-            throw new AlgebricksException(\"Duplicate field \\\"\" + fieldType1.getTypeName() + \"\\\" encountered\");\n+            throw new AlgebricksException(\"Duplicate field \" + fieldType1.getTypeName() + \" encountered\");\n         }\n \n-        ARecordType returnType = (ARecordType) fieldType0;\n+        ARecordType resultType = (ARecordType) fieldType0;\n         ARecordType fieldType1Copy = (ARecordType) fieldType1;\n \n         for (int i = 0; i < fieldType1Copy.getFieldTypes().length; i++) {\n             try {\n-                int pos = returnType.getFieldIndex(fieldType1Copy.getFieldNames()[i]);\n+                int pos = resultType.getFieldIndex(fieldType1Copy.getFieldNames()[i]);\n                 if (pos >= 0) {\n-                    if (fieldType1Copy.getFieldTypes()[i].getTypeTag() != ATypeTag.RECORD) {\n-                        break;\n+                    // If a sub-record do merge, else ignore and let the values decide what to do\n+                    if (fieldType1Copy.getFieldTypes()[i].getTypeTag() == ATypeTag.RECORD) {\n+                        IAType[] oldTypes = resultType.getFieldTypes();\n+                        oldTypes[pos] = mergedNestedType(fieldType1Copy.getFieldTypes()[i],\n+                                resultType.getFieldTypes()[pos]);\n+                        resultType = new ARecordType(resultType.getTypeName(), resultType.getFieldNames(), oldTypes,\n+                                resultType.isOpen());\n                     }\n-                    IAType[] oldTypes = returnType.getFieldTypes();\n-                    oldTypes[pos] = mergedNestedType(fieldType1Copy.getFieldTypes()[i],\n-                            returnType.getFieldTypes()[pos]);\n-                    returnType = new ARecordType(returnType.getTypeName(), returnType.getFieldNames(), oldTypes,\n-                            returnType.isOpen());\n                 } else {\n-                    IAType[] combinedFieldTypes = ArrayUtils.addAll(returnType.getFieldTypes().clone(),\n+                    IAType[] combinedFieldTypes = ArrayUtils.addAll(resultType.getFieldTypes().clone(),\n                             fieldType1Copy.getFieldTypes()[i]);\n-                    returnType = new ARecordType(returnType.getTypeName(),\n-                            ArrayUtils.addAll(returnType.getFieldNames(), fieldType1Copy.getFieldNames()[i]),\n-                            combinedFieldTypes, returnType.isOpen());\n+                    resultType = new ARecordType(resultType.getTypeName(), ArrayUtils.addAll(\n+                            resultType.getFieldNames(), fieldType1Copy.getFieldNames()[i]), combinedFieldTypes,\n+                            resultType.isOpen());\n                 }\n \n             } catch (IOException | AsterixException e) {\n                 throw new AlgebricksException(e);\n             }\n         }\n \n-        return returnType;\n+        return resultType;\n     }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordMergeTypeComputer.java",
                "sha": "653b26e2954f2e350b590bb7056a69d259effa88",
                "status": "modified"
            },
            {
                "additions": 328,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordRemoveFieldsTypeComputer.java",
                "changes": 328,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordRemoveFieldsTypeComputer.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordRemoveFieldsTypeComputer.java",
                "patch": "@@ -0,0 +1,328 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.om.typecomputer.impl;\n+\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+\n+import org.apache.asterix.om.base.AOrderedList;\n+import org.apache.asterix.om.base.AString;\n+import org.apache.asterix.om.base.IAObject;\n+import org.apache.asterix.om.constants.AsterixConstantValue;\n+import org.apache.asterix.om.pointables.base.DefaultOpenFieldType;\n+import org.apache.asterix.om.typecomputer.base.IResultTypeComputer;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.commons.lang3.mutable.Mutable;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n+import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractLogicalExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.ConstantExpression;\n+import org.apache.hyracks.algebricks.core.algebra.expressions.IVariableTypeEnvironment;\n+import org.apache.hyracks.algebricks.core.algebra.metadata.IMetadataProvider;\n+\n+/**\n+ * Cases to support:\n+ * remove-fields($record, [\"foo\", [\"bar\", \"access\"]]),\n+ * where [\"bar\", \"access\"] is equivalent to the path bar->access\n+ */\n+public class RecordRemoveFieldsTypeComputer implements IResultTypeComputer {\n+\n+    public static final RecordRemoveFieldsTypeComputer INSTANCE = new RecordRemoveFieldsTypeComputer();\n+\n+    private RecordRemoveFieldsTypeComputer() {\n+    }\n+\n+    private void getPathFromConstantExpression(ILogicalExpression expression, Set<String> fieldNameSet,\n+            List<List<String>> pathList) throws AlgebricksException {\n+        ConstantExpression ce = (ConstantExpression) expression;\n+        if (!(ce.getValue() instanceof AsterixConstantValue)) {\n+            throw new AlgebricksException(\"Expecting a list of strings and found \" + ce.getValue() + \" instead.\");\n+        }\n+        IAObject item = ((AsterixConstantValue) ce.getValue()).getObject();\n+        ATypeTag type = item.getType().getTypeTag();\n+\n+        switch (type) {\n+            case STRING:\n+                String fn = ((AString) item).getStringValue();\n+                fieldNameSet.add(fn);\n+                break;\n+            case ORDEREDLIST:\n+                AOrderedList pathOrdereList = (AOrderedList) item;\n+                String fieldName = ((AString) pathOrdereList.getItem(0)).getStringValue();\n+                fieldNameSet.add(fieldName);\n+                List<String> path = new ArrayList<>();\n+                for (int i = 0; i < pathOrdereList.size(); i++) {\n+                    path.add(((AString) pathOrdereList.getItem(i)).getStringValue());\n+                }\n+                pathList.add(path);\n+                break;\n+            default:\n+                throw new AlgebricksException(\"Unsupport type: \" + type);\n+        }\n+    }\n+\n+    private List<String> getListFromExpression(ILogicalExpression expression) throws AlgebricksException {\n+        AbstractFunctionCallExpression funcExp = (AbstractFunctionCallExpression) expression;\n+        List<Mutable<ILogicalExpression>> args = funcExp.getArguments();\n+\n+        List<String> list = new ArrayList<>();\n+        for (Mutable<ILogicalExpression> arg : args) {\n+            // At this point all elements has to be a constant\n+            // Input list has only one level of nesting (list of list or list of strings)\n+            ConstantExpression ce = (ConstantExpression) arg.getValue();\n+            if (!(ce.getValue() instanceof AsterixConstantValue)) {\n+                throw new AlgebricksException(\"Expecting a list of strings and found \" + ce.getValue() + \" instead.\");\n+            }\n+            IAObject item = ((AsterixConstantValue) ce.getValue()).getObject();\n+            ATypeTag type = item.getType().getTypeTag();\n+            if (type == ATypeTag.STRING) {\n+                list.add(((AString) item).getStringValue());\n+            } else {\n+                throw new AlgebricksException(type + \" is currently not supported. Please check your function call.\");\n+            }\n+        }\n+\n+        return list;\n+    }\n+\n+    private void getPathFromFunctionExpression(ILogicalExpression expression, Set<String> fieldNameSet,\n+            List<List<String>> pathList) throws AlgebricksException {\n+\n+        List<String> path = getListFromExpression(expression);\n+        // Add the path head to remove set\n+        fieldNameSet.add(path.get(0));\n+        pathList.add(path);\n+\n+    }\n+\n+    private void computeTypeFromNonConstantExpression(ILogicalExpression expression, Set<String> fieldNameSet,\n+            List<List<String>> pathList) throws AlgebricksException {\n+        AbstractFunctionCallExpression funcExp = (AbstractFunctionCallExpression) expression;\n+        List<Mutable<ILogicalExpression>> args = funcExp.getArguments();\n+\n+        for (Mutable<ILogicalExpression> arg : args) {\n+            ILogicalExpression le = arg.getValue();\n+            switch (le.getExpressionTag()) {\n+                case CONSTANT:\n+                    getPathFromConstantExpression(le, fieldNameSet, pathList);\n+                    break;\n+                case FUNCTION_CALL:\n+                    getPathFromFunctionExpression(le, fieldNameSet, pathList);\n+                    break;\n+                default:\n+                    throw new AlgebricksException(\"Unsupported expression: \" + le);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public IAType computeType(ILogicalExpression expression, IVariableTypeEnvironment env,\n+            IMetadataProvider<?, ?> metadataProvider) throws AlgebricksException {\n+\n+        AbstractFunctionCallExpression funcExpr = (AbstractFunctionCallExpression) expression;\n+        IAType type0 = (IAType) env.getType(funcExpr.getArguments().get(0).getValue());\n+\n+        List<List<String>> pathList = new ArrayList<>();\n+        Set<String> fieldNameSet = new HashSet<>();\n+        Deque<String> fieldPathStack = new ArrayDeque<>();\n+\n+        ARecordType inputRecordType = NonTaggedFieldAccessByNameResultType.getRecordTypeFromType(type0, expression);\n+        if (inputRecordType == null) {\n+            return BuiltinType.ANY;\n+        }\n+\n+        AbstractLogicalExpression arg1 = (AbstractLogicalExpression) funcExpr.getArguments().get(1).getValue();\n+        IAType inputListType = (IAType) env.getType(arg1);\n+        AOrderedListType inputOrderedListType = TypeComputerUtils.extractOrderedListType(inputListType);\n+        if (inputOrderedListType == null) {\n+            throw new AlgebricksException(\n+                    \"The function 'remove-fields' expects an ordered list as the second argument, but got \"\n+                            + inputListType);\n+        }\n+\n+        ATypeTag tt = inputOrderedListType.getItemType().getTypeTag();\n+        if (tt == ATypeTag.STRING) { // If top-fieldlist\n+            if (setFieldNameSet(arg1, fieldNameSet)) {\n+                return buildOutputType(fieldPathStack, inputRecordType, fieldNameSet, pathList);\n+            } else {\n+                return DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE;\n+            }\n+        } else { // tt == ATypeTag.ANY, meaning the list is nested\n+            computeTypeFromNonConstantExpression(arg1, fieldNameSet, pathList);\n+            IAType resultType = buildOutputType(fieldPathStack, inputRecordType, fieldNameSet, pathList);\n+            return resultType;\n+        }\n+    }\n+\n+    private boolean setFieldNameSet(ILogicalExpression expr, Set<String> fieldNameSet) {\n+        if (expr.getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n+            AOrderedList orderedList = (AOrderedList) (((AsterixConstantValue) ((ConstantExpression) expr).getValue())\n+                    .getObject());\n+            for (int i = 0; i < orderedList.size(); i++) {\n+                AString as = (AString) orderedList.getItem(i);\n+                fieldNameSet.add(as.getStringValue());\n+            }\n+            return true; // Success\n+        }\n+        return false;\n+    }\n+\n+    private void addField(ARecordType inputRecordType,  String fieldName, List<String> resultFieldNames, List<IAType>\n+            resultFieldTypes)\n+            throws AlgebricksException {\n+        try {\n+            resultFieldNames.add(fieldName);\n+            if (inputRecordType.getFieldType(fieldName).getTypeTag() == ATypeTag.RECORD) {\n+                ARecordType nestedType = (ARecordType) inputRecordType.getFieldType(fieldName);\n+                //Deep Copy prevents altering of input types\n+                resultFieldTypes.add(nestedType.deepCopy(nestedType));\n+            } else {\n+                resultFieldTypes.add(inputRecordType.getFieldType(fieldName));\n+            }\n+\n+        } catch (IOException e) {\n+            throw new AlgebricksException(e);\n+        }\n+    }\n+\n+    private IAType buildOutputType(Deque<String> fieldPathStack, ARecordType inputRecordType, Set<String> fieldNameSet,\n+            List<List<String>> pathList) throws AlgebricksException {\n+        IAType resultType;\n+        List<String> resultFieldNames = new ArrayList<>();\n+        List<IAType> resultFieldTypes = new ArrayList<>();\n+\n+        String[] fieldNames = inputRecordType.getFieldNames();\n+        IAType[] fieldTypes = inputRecordType.getFieldTypes();\n+\n+        for (int i = 0; i < fieldNames.length; i++) {\n+            if (!fieldNameSet.contains(fieldNames[i])) { // The main field is to be kept\n+                addField(inputRecordType, fieldNames[i], resultFieldNames, resultFieldTypes);\n+            } else if (!pathList.isEmpty()) { // Further check needed for nested fields\n+                if (fieldTypes[i].getTypeTag() == ATypeTag.RECORD) {\n+                    ARecordType subRecord = (ARecordType) fieldTypes[i];\n+\n+                    fieldPathStack.push(fieldNames[i]);\n+                    subRecord = deepCheckAndCopy(fieldPathStack, subRecord, pathList, inputRecordType.isOpen());\n+                    fieldPathStack.pop();\n+                    if (subRecord != null) {\n+                        resultFieldNames.add(fieldNames[i]);\n+                        resultFieldTypes.add(subRecord);\n+                    }\n+                }\n+            }\n+        }\n+\n+        int n = resultFieldNames.size();\n+        String resultTypeName = \"result-record(\" + inputRecordType.getTypeName() + \")\";\n+\n+        return new ARecordType(resultTypeName, resultFieldNames.toArray(new String[n]),\n+                    resultFieldTypes.toArray(new IAType[n]), true); // Make the output type open always\n+\n+    }\n+\n+    /**\n+     * Comparison elements of two paths\n+     * Note: l2 uses a LIFO insert and removal.\n+     */\n+    private <E> boolean isEqualPaths(List<E> l1, Deque<E> l2) {\n+        if ((l1 == null) || (l2 == null))\n+            return false;\n+\n+        if (l1.size() != l2.size())\n+            return false;\n+\n+        Iterator<E> it2 = l2.iterator();\n+\n+        int len = l1.size();\n+        for (int i = len - 1; i >= 0; i--) {\n+            E o1 = l1.get(i);\n+            E o2 = it2.next();\n+            if (!o1.equals(o2))\n+                return false;\n+        }\n+        return true;\n+    }\n+\n+    private boolean isRemovePath(Deque<String> fieldPath, List<List<String>> pathList) {\n+        for (List<String> removePath : pathList) {\n+            if (isEqualPaths(removePath, fieldPath)) {\n+                return true;\n+            }\n+        }\n+        return false;\n+    }\n+\n+    /*\n+        A method to deep copy a record the path validation\n+             i.e., keep only fields that are valid\n+     */\n+    private ARecordType deepCheckAndCopy(Deque<String> fieldPath, ARecordType srcRecType, List<List<String>>\n+            pathList, boolean isOpen)\n+            throws AlgebricksException {\n+        // Make sure the current path is valid before going further\n+        if (isRemovePath(fieldPath, pathList)) {\n+            return null;\n+        }\n+\n+        String srcFieldNames[] = srcRecType.getFieldNames();\n+        IAType srcFieldTypes[] = srcRecType.getFieldTypes();\n+\n+        List<IAType> destFieldTypes = new ArrayList<>();\n+        List<String> destFieldNames = new ArrayList<>();\n+\n+        for (int i = 0; i < srcFieldNames.length; i++) {\n+            fieldPath.push(srcFieldNames[i]);\n+            if (!isRemovePath(fieldPath, pathList)) {\n+                if (srcFieldTypes[i].getTypeTag() == ATypeTag.RECORD) {\n+                    ARecordType subRecord = (ARecordType) srcFieldTypes[i];\n+                    subRecord = deepCheckAndCopy(fieldPath, subRecord, pathList, isOpen);\n+                    if (subRecord != null) {\n+                        destFieldNames.add(srcFieldNames[i]);\n+                        destFieldTypes.add(subRecord);\n+                    }\n+                } else {\n+                    destFieldNames.add(srcFieldNames[i]);\n+                    destFieldTypes.add(srcFieldTypes[i]);\n+                }\n+            }\n+            fieldPath.pop();\n+        }\n+\n+        int n = destFieldNames.size();\n+        if (n == 0) {\n+            return null;\n+        }\n+        return new ARecordType(srcRecType.getTypeName(), destFieldNames.toArray(new String[n]),\n+                    destFieldTypes.toArray(new IAType[n]), isOpen);\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/RecordRemoveFieldsTypeComputer.java",
                "sha": "9f4d155086682fc2708564a9d60f7b59a29cf32e",
                "status": "added"
            },
            {
                "additions": 75,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TypeComputerUtils.java",
                "changes": 75,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TypeComputerUtils.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TypeComputerUtils.java",
                "patch": "@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.om.typecomputer.impl;\n+\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AUnionType;\n+import org.apache.asterix.om.types.AUnorderedListType;\n+import org.apache.asterix.om.types.IAType;\n+\n+public class TypeComputerUtils {\n+\n+    public static ARecordType extractRecordType(IAType t) {\n+        if (t.getTypeTag() == ATypeTag.RECORD) {\n+            return (ARecordType) t;\n+        }\n+\n+        if (t.getTypeTag() == ATypeTag.UNION) {\n+            IAType innerType = ((AUnionType) t).getUnionList().get(1);\n+            if (innerType.getTypeTag() == ATypeTag.RECORD) {\n+                return (ARecordType) innerType;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static AOrderedListType extractOrderedListType(IAType t) {\n+        if (t.getTypeTag() == ATypeTag.ORDEREDLIST) {\n+            return (AOrderedListType) t;\n+        }\n+\n+        if (t.getTypeTag() == ATypeTag.UNION) {\n+            IAType innerType = ((AUnionType) t).getUnionList().get(1);\n+            if (innerType.getTypeTag() == ATypeTag.ORDEREDLIST) {\n+                return (AOrderedListType) innerType;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public static AUnorderedListType extractUnorderedListType(IAType t) {\n+        if (t.getTypeTag() == ATypeTag.UNORDEREDLIST) {\n+            return (AUnorderedListType) t;\n+        }\n+\n+        if (t.getTypeTag() == ATypeTag.UNION) {\n+            IAType innerType = ((AUnionType) t).getUnionList().get(1);\n+            if (innerType.getTypeTag() == ATypeTag.UNORDEREDLIST) {\n+                return (AUnorderedListType) innerType;\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TypeComputerUtils.java",
                "sha": "cba988b4e60505b8ff8991c7a917c0905a5d89c1",
                "status": "added"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/types/hierachy/ATypeHierarchy.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-om/src/main/java/org/apache/asterix/om/types/hierachy/ATypeHierarchy.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 7,
                "filename": "asterix-om/src/main/java/org/apache/asterix/om/types/hierachy/ATypeHierarchy.java",
                "patch": "@@ -45,13 +45,6 @@\n \n public class ATypeHierarchy {\n \n-    public static enum Domain {\n-        SPATIAL,\n-        NUMERIC,\n-        LIST,\n-        ANY\n-    }\n-\n     private static BitSet typePromotionHierachyMap = new BitSet(ATypeTag.TYPE_COUNT * ATypeTag.TYPE_COUNT);\n     private static BitSet typeDemotionHierachyMap = new BitSet(ATypeTag.TYPE_COUNT * ATypeTag.TYPE_COUNT);\n     private static HashMap<Integer, ITypeConvertComputer> promoteComputerMap = new HashMap<Integer, ITypeConvertComputer>();\n@@ -125,6 +118,10 @@\n         hierarchyDomains.put(ATypeTag.UNORDEREDLIST, Domain.LIST);\n     }\n \n+    public static Domain getTypeDomain(ATypeTag tag) {\n+        return hierarchyDomains.get(tag);\n+    }\n+\n     public static boolean isSameTypeDomain(ATypeTag tag1, ATypeTag tag2, boolean useListDomain) {\n         Domain tagHierarchy1 = hierarchyDomains.get(tag1);\n         Domain tagHierarchy2 = hierarchyDomains.get(tag2);\n@@ -805,4 +802,11 @@ public static double getDoubleValueWithDifferentTypeTagPosition(byte[] bytes, in\n         return value;\n     }\n \n+    public static enum Domain {\n+        SPATIAL,\n+        NUMERIC,\n+        LIST,\n+        ANY\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-om/src/main/java/org/apache/asterix/om/types/hierachy/ATypeHierarchy.java",
                "sha": "0b6b45d6b346bf926a180f604e90a6e76f4d4bd8",
                "status": "modified"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/comparisons/DeepEqualAssessor.java",
                "changes": 83,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/comparisons/DeepEqualAssessor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/comparisons/DeepEqualAssessor.java",
                "patch": "@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.comparisons;\n+\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy.Domain;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.asterix.runtime.evaluators.visitors.DeepEqualityVisitor;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.common.utils.Pair;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+\n+/**\n+ * Use {@link DeepEqualityVisitor} to assess the deep equality between two\n+ * pointable values, including oredered and unordered lists, record values, etc.\n+ * Example: Let IVisitablePointable leftPointable, IVisitablePointable rightPointable be two\n+ * value references. To assess their equality, simply use\n+ * DeepEqualAssessor dea = new DeepEqualAssessor();\n+ * boolean isEqual = dea.isEqual(leftPointable, rightPointable);\n+ */\n+\n+public class DeepEqualAssessor {\n+    private final DeepEqualityVisitor equalityVisitor = new DeepEqualityVisitor();\n+\n+    public boolean isEqual(IVisitablePointable leftPointable, IVisitablePointable rightPointable)\n+            throws AlgebricksException, AsterixException {\n+\n+        if (leftPointable == null || rightPointable == null) {\n+            return false;\n+        }\n+\n+        if (leftPointable.equals(rightPointable)) {\n+            return true;\n+        }\n+\n+        ATypeTag leftTypeTag = PointableHelper.getTypeTag(leftPointable);\n+        ATypeTag rightTypeTag = PointableHelper.getTypeTag(rightPointable);\n+\n+        if (leftTypeTag != rightTypeTag) {\n+            // If types are numeric compare their real values instead\n+            if (ATypeHierarchy.isSameTypeDomain(leftTypeTag, rightTypeTag, false)\n+                    && ATypeHierarchy.getTypeDomain(leftTypeTag) == Domain.NUMERIC) {\n+                try {\n+                    double leftVal = ATypeHierarchy.getDoubleValue(leftPointable.getByteArray(),\n+                            leftPointable.getStartOffset());\n+                    double rightVal = ATypeHierarchy.getDoubleValue(rightPointable.getByteArray(),\n+                            rightPointable.getStartOffset());\n+                    return (leftVal == rightVal);\n+                } catch (HyracksDataException e) {\n+                    throw new AlgebricksException(e);\n+                }\n+\n+            } else {\n+                return false;\n+            }\n+        }\n+\n+        Pair<IVisitablePointable, Boolean> arg = new Pair<IVisitablePointable, Boolean>(rightPointable, Boolean.FALSE);\n+        // Assess the nested equality\n+        leftPointable.accept(equalityVisitor, arg);\n+\n+        return arg.second;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/comparisons/DeepEqualAssessor.java",
                "sha": "b4e03754e2a42564e31ed2563c48bf9db7fce0e5",
                "status": "added"
            },
            {
                "additions": 113,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/DeepEqualityDescriptor.java",
                "changes": 113,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/DeepEqualityDescriptor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/DeepEqualityDescriptor.java",
                "patch": "@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.DataOutput;\n+\n+import org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider;\n+import org.apache.asterix.om.base.ABoolean;\n+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptor;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.pointables.PointableAllocator;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.evaluators.comparisons.DeepEqualAssessor;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\n+import org.apache.hyracks.data.std.api.IDataOutputProvider;\n+import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n+import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n+\n+public class DeepEqualityDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n+        public IFunctionDescriptor createFunctionDescriptor() {\n+            return new DeepEqualityDescriptor();\n+        }\n+    };\n+\n+    private static final long serialVersionUID = 1L;\n+    private IAType inputTypeLeft;\n+    private IAType inputTypeRight;\n+\n+    public void reset(IAType inTypeLeft, IAType inTypeRight) {\n+        this.inputTypeLeft = inTypeLeft;\n+        this.inputTypeRight = inTypeRight;\n+    }\n+\n+    @Override\n+    public ICopyEvaluatorFactory createEvaluatorFactory(final ICopyEvaluatorFactory[] args) {\n+        final ICopyEvaluatorFactory evalFactoryLeft = args[0];\n+        final ICopyEvaluatorFactory evalFactoryRight = args[1];\n+\n+        return new ICopyEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+            private final ISerializerDeserializer boolSerde = AqlSerializerDeserializerProvider.INSTANCE\n+                    .getSerializerDeserializer(BuiltinType.ABOOLEAN);\n+\n+            @Override\n+            public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws AlgebricksException {\n+                final DataOutput out = output.getDataOutput();\n+                final ArrayBackedValueStorage abvsLeft = new ArrayBackedValueStorage();\n+                final ICopyEvaluator evalLeft = evalFactoryLeft.createEvaluator(abvsLeft);\n+\n+                final ArrayBackedValueStorage abvsRight = new ArrayBackedValueStorage();\n+                final ICopyEvaluator evalRight = evalFactoryRight.createEvaluator(abvsRight);\n+                final DeepEqualAssessor deepEqualAssessor = new DeepEqualAssessor();\n+\n+                return new ICopyEvaluator() {\n+                    private final PointableAllocator allocator = new PointableAllocator();\n+                    private final IVisitablePointable pointableLeft = allocator.allocateFieldValue(inputTypeLeft);\n+                    private final IVisitablePointable pointableRight = allocator.allocateFieldValue(inputTypeRight);\n+\n+                    @Override\n+                    public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n+                        try {\n+                            abvsLeft.reset();\n+                            abvsRight.reset();\n+                            evalLeft.evaluate(tuple);\n+                            evalRight.evaluate(tuple);\n+                            pointableLeft.set(abvsLeft);\n+                            pointableRight.set(abvsRight);\n+\n+                            // Using deep equality assessment to assess the equality of the two values\n+                            boolean isEqual = deepEqualAssessor.isEqual(pointableLeft, pointableRight);\n+                            ABoolean result = isEqual ? ABoolean.TRUE : ABoolean.FALSE;\n+\n+                            boolSerde.serialize(result, out);\n+                        } catch (Exception ioe) {\n+                            throw new AlgebricksException(ioe);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return AsterixBuiltinFunctions.DEEP_EQUAL;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/DeepEqualityDescriptor.java",
                "sha": "e6a4232640bf7a28c217970088e74f732af370e3",
                "status": "added"
            },
            {
                "additions": 129,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/PointableHelper.java",
                "changes": 129,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/PointableHelper.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/PointableHelper.java",
                "patch": "@@ -0,0 +1,129 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.DataOutput;\n+import java.io.IOException;\n+\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.EnumDeserializer;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.api.dataflow.value.IBinaryComparator;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.accessors.PointableBinaryComparatorFactory;\n+import org.apache.hyracks.data.std.api.IMutableValueStorage;\n+import org.apache.hyracks.data.std.api.IValueReference;\n+import org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n+import org.apache.hyracks.util.string.UTF8StringWriter;\n+\n+/**\n+ * An utility class for some frequently used methods like checking the equality between two pointables (binary values)\n+ * (e.g., field names), string value of a fieldname pointable, getting the typetag of a pointable, etc.\n+ * Note: To get the typetag of a fieldvalue (i) in a record, it is recommended to use the getFieldTypeTags().get(i)\n+ * method rather than getting it from fhe field value itself.\n+ */\n+\n+public class PointableHelper {\n+    private static final IBinaryComparator STRING_BINARY_COMPARATOR = PointableBinaryComparatorFactory.of(\n+            UTF8StringPointable.FACTORY).createBinaryComparator();\n+    private final UTF8StringWriter utf8Writer;\n+\n+    public PointableHelper() {\n+        utf8Writer = new UTF8StringWriter();\n+    }\n+\n+    public static int compareStringBinValues(IValueReference a, IValueReference b) throws HyracksDataException {\n+        // start+1 and len-1 due to type tag ignore (only interested in String value)\n+        return STRING_BINARY_COMPARATOR.compare(a.getByteArray(), a.getStartOffset() + 1, a.getLength() - 1,\n+                b.getByteArray(), b.getStartOffset() + 1, b.getLength() - 1);\n+    }\n+\n+    public static boolean isEqual(IValueReference a, IValueReference b) throws HyracksDataException {\n+        return (compareStringBinValues(a, b) == 0);\n+    }\n+\n+    public static boolean byteArrayEqual(IValueReference valueRef1, IValueReference valueRef2) {\n+        return byteArrayEqual(valueRef1, valueRef2, 3);\n+    }\n+\n+    public static boolean byteArrayEqual(IValueReference valueRef1, IValueReference valueRef2, int dataOffset) {\n+        if (valueRef1 == null || valueRef2 == null) {\n+            return false;\n+        }\n+        if (valueRef1 == valueRef2) {\n+            return true;\n+        }\n+\n+        int length1 = valueRef1.getLength();\n+        int length2 = valueRef2.getLength();\n+\n+        if (length1 != length2) {\n+            return false;\n+        }\n+\n+        byte[] bytes1 = valueRef1.getByteArray();\n+        byte[] bytes2 = valueRef2.getByteArray();\n+        int start1 = valueRef1.getStartOffset() + dataOffset;\n+        int start2 = valueRef2.getStartOffset() + dataOffset;\n+\n+        int end = start1 + length1 - dataOffset;\n+\n+        for (int i = start1, j = start2; i < end; i++, j++) {\n+            if (bytes1[i] != bytes2[j]) {\n+                return false;\n+            }\n+        }\n+\n+        return true;\n+    }\n+\n+    public static boolean sameType(ATypeTag typeTag, IVisitablePointable visitablePointable) {\n+        return (getTypeTag(visitablePointable) == typeTag);\n+    }\n+\n+    public static ATypeTag getTypeTag(IValueReference visitablePointable) {\n+        byte[] bytes = visitablePointable.getByteArray();\n+        int s = visitablePointable.getStartOffset();\n+        return EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(bytes[s]);\n+    }\n+\n+    /**\n+     * @param str\n+     *            The input string\n+     * @param vs\n+     *            The storage buffer\n+     * @param writeTag\n+     *            Specifying whether a tag for the string should also be written\n+     * @throws AlgebricksException\n+     */\n+    public void serializeString(String str, IMutableValueStorage vs, boolean writeTag) throws AsterixException {\n+        vs.reset();\n+        try {\n+            DataOutput output = vs.getDataOutput();\n+            if (writeTag) {\n+                output.write(ATypeTag.STRING.serialize());\n+            }\n+            utf8Writer.writeUTF8(str, output);\n+        } catch (IOException e) {\n+            throw new AsterixException(\"Could not serialize \" + str);\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/PointableHelper.java",
                "sha": "24e66f2ef0f0e30cafced54bb58f4ab3dfbd6c2d",
                "status": "added"
            },
            {
                "additions": 287,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordAddFieldsDescriptor.java",
                "changes": 287,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordAddFieldsDescriptor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordAddFieldsDescriptor.java",
                "patch": "@@ -0,0 +1,287 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.runtime.evaluators.functions.records;\n+\n+import java.io.IOException;\n+import java.util.List;\n+\n+import org.apache.asterix.builders.RecordBuilder;\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.dataflow.data.nontagged.comparators.ListItemBinaryComparatorFactory;\n+import org.apache.asterix.dataflow.data.nontagged.hash.ListItemBinaryHashFunctionFactory;\n+import org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider;\n+import org.apache.asterix.om.base.ANull;\n+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptor;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.pointables.AListVisitablePointable;\n+import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n+import org.apache.asterix.om.pointables.PointableAllocator;\n+import org.apache.asterix.om.pointables.base.DefaultOpenFieldType;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.typecomputer.impl.TypeComputerUtils;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.EnumDeserializer;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.om.types.runtime.RuntimeRecordTypeInfo;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.BinaryHashMap;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+import org.apache.hyracks.api.dataflow.value.IBinaryComparator;\n+import org.apache.hyracks.api.dataflow.value.IBinaryHashFunction;\n+import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IDataOutputProvider;\n+import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n+import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n+\n+public class RecordAddFieldsDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+\n+    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n+        public IFunctionDescriptor createFunctionDescriptor() {\n+            return new RecordAddFieldsDescriptor();\n+        }\n+    };\n+    private static final long serialVersionUID = 1L;\n+    private ARecordType outRecType;\n+    private ARecordType inRecType;\n+    private AOrderedListType inListType;\n+    private IAType inputFieldListItemType;\n+\n+    public void reset(IAType outType, IAType inType0, IAType inType1) {\n+        outRecType = TypeComputerUtils.extractRecordType(outType);\n+        inRecType = TypeComputerUtils.extractRecordType(inType0);\n+        inListType = TypeComputerUtils.extractOrderedListType(inType1);\n+        inputFieldListItemType = inListType.getItemType();\n+        if (inputFieldListItemType == null || inputFieldListItemType.getTypeTag() == ATypeTag.ANY) {\n+            inputFieldListItemType = DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE;\n+        }\n+    }\n+\n+    @Override\n+    public ICopyEvaluatorFactory createEvaluatorFactory(final ICopyEvaluatorFactory[] args) throws AlgebricksException {\n+        return new ICopyEvaluatorFactory() {\n+\n+            private static final long serialVersionUID = 1L;\n+            private final byte SER_NULL_TYPE_TAG = ATypeTag.NULL.serialize();\n+            private final byte SER_ORDERED_TYPE_TAG = ATypeTag.ORDEREDLIST.serialize();\n+            private final byte SER_RECORD_TYPE_TAG = ATypeTag.RECORD.serialize();\n+\n+            @SuppressWarnings(\"unchecked\")\n+            private final ISerializerDeserializer<ANull> nullSerDe = AqlSerializerDeserializerProvider.INSTANCE\n+                    .getSerializerDeserializer(BuiltinType.ANULL);\n+\n+            @Override\n+            public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws AlgebricksException {\n+                final PointableAllocator allocator = new PointableAllocator();\n+                final IVisitablePointable vp0 = allocator.allocateRecordValue(inRecType);\n+                final IVisitablePointable vp1 = allocator.allocateListValue(inListType);\n+\n+                final ArrayBackedValueStorage abvs0 = new ArrayBackedValueStorage();\n+                final ArrayBackedValueStorage abvs1 = new ArrayBackedValueStorage();\n+\n+                final ICopyEvaluator eval0 = args[0].createEvaluator(abvs0);\n+                final ICopyEvaluator eval1 = args[1].createEvaluator(abvs1);\n+\n+                final ArrayBackedValueStorage fieldNamePointable = new ArrayBackedValueStorage();\n+                final ArrayBackedValueStorage fieldValuePointer = new ArrayBackedValueStorage();\n+                final PointableHelper pointableHelper = new PointableHelper();\n+                try {\n+                    pointableHelper.serializeString(\"field-name\", fieldNamePointable, true);\n+                    pointableHelper.serializeString(\"field-value\", fieldValuePointer, true);\n+                } catch (AsterixException e) {\n+                    throw new AlgebricksException(e);\n+                }\n+\n+                return new ICopyEvaluator() {\n+                    public static final int TABLE_FRAME_SIZE = 32768; // the default 32k frame size\n+                    public static final int TABLE_SIZE = 100; // the default 32k frame size\n+                    private final RecordBuilder recordBuilder = new RecordBuilder();\n+                    private final RuntimeRecordTypeInfo requiredRecordTypeInfo = new RuntimeRecordTypeInfo();\n+\n+                    private final IBinaryHashFunction putHashFunc = ListItemBinaryHashFunctionFactory.INSTANCE\n+                            .createBinaryHashFunction();\n+                    private final IBinaryHashFunction getHashFunc = ListItemBinaryHashFunctionFactory.INSTANCE\n+                            .createBinaryHashFunction();\n+                    private final BinaryHashMap.BinaryEntry keyEntry = new BinaryHashMap.BinaryEntry();\n+                    private final BinaryHashMap.BinaryEntry valEntry = new BinaryHashMap.BinaryEntry();\n+                    private final IVisitablePointable tempValReference = allocator.allocateEmpty();\n+                    private final IBinaryComparator cmp = ListItemBinaryComparatorFactory.INSTANCE\n+                            .createBinaryComparator();\n+                    private BinaryHashMap hashMap = new BinaryHashMap(TABLE_SIZE, TABLE_FRAME_SIZE, putHashFunc,\n+                            getHashFunc, cmp);\n+\n+                    @Override\n+                    public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n+                        recordBuilder.reset(outRecType);\n+                        requiredRecordTypeInfo.reset(outRecType);\n+                        abvs0.reset();\n+                        abvs1.reset();\n+\n+                        eval0.evaluate(tuple);\n+                        eval1.evaluate(tuple);\n+\n+                        if (abvs0.getByteArray()[0] == SER_NULL_TYPE_TAG\n+                                || abvs1.getByteArray()[0] == SER_NULL_TYPE_TAG) {\n+                            try {\n+                                nullSerDe.serialize(ANull.NULL, output.getDataOutput());\n+                            } catch (HyracksDataException e) {\n+                                throw new AlgebricksException(e);\n+                            }\n+                            return;\n+                        }\n+\n+                        // Make sure we get a valid record\n+                        if (abvs0.getByteArray()[0] != SER_RECORD_TYPE_TAG) {\n+                            throw new AlgebricksException(\"Expected an ordederlist of type \" + inRecType + \" but \"\n+                                    + \"got \"\n+                                    + EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(abvs0.getByteArray()[0]));\n+                        }\n+\n+                        // Make sure we get a valid list\n+                        if (abvs1.getByteArray()[0] != SER_ORDERED_TYPE_TAG) {\n+                            throw new AlgebricksException(\"Expected an ordederlist of type \" + inListType + \" but \"\n+                                    + \"got \"\n+                                    + EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(abvs1.getByteArray()[0]));\n+                        }\n+\n+                        vp0.set(abvs0);\n+                        vp1.set(abvs1);\n+\n+                        try {\n+                            ARecordVisitablePointable recordPointable = (ARecordVisitablePointable) vp0;\n+                            AListVisitablePointable listPointable = (AListVisitablePointable) vp1;\n+\n+                            // Initialize our hashmap\n+                            int tableSize = recordPointable.getFieldNames().size() + listPointable.getItems().size();\n+                            // Construct a new hash table only if table size is larger than the default\n+                            // Thus avoiding unnecessary object construction\n+                            if (hashMap == null || tableSize > TABLE_SIZE) {\n+                                hashMap = new BinaryHashMap(tableSize, TABLE_FRAME_SIZE, putHashFunc, getHashFunc, cmp);\n+                            } else {\n+                                hashMap.clear();\n+                            }\n+                            addFields(recordPointable, listPointable);\n+                            recordBuilder.write(output.getDataOutput(), true);\n+                        } catch (IOException | AsterixException e) {\n+                            throw new AlgebricksException(e);\n+                        }\n+                    }\n+\n+                    private void addFields(ARecordVisitablePointable inputRecordPointer,\n+                            AListVisitablePointable listPointable) throws AlgebricksException {\n+                        List<IVisitablePointable> inputRecordFieldNames = inputRecordPointer.getFieldNames();\n+                        List<IVisitablePointable> inputRecordFieldValues = inputRecordPointer.getFieldValues();\n+                        List<IVisitablePointable> inputFields = listPointable.getItems();\n+                        IVisitablePointable namePointable = null;\n+                        IVisitablePointable valuePointable = null;\n+                        int numInputRecordFields = inputRecordFieldNames.size();\n+\n+                        try {\n+                            // Add original record without duplicate checking\n+                            for (int i = 0; i < numInputRecordFields; ++i) {\n+                                IVisitablePointable fnp = inputRecordFieldNames.get(i);\n+                                IVisitablePointable fvp = inputRecordFieldValues.get(i);\n+                                int pos = requiredRecordTypeInfo.getFieldIndex(fnp.getByteArray(),\n+                                        fnp.getStartOffset() + 1, fnp.getLength() - 1);\n+                                if (pos >= 0) {\n+                                    recordBuilder.addField(pos, fvp);\n+                                } else {\n+                                    recordBuilder.addField(fnp, fvp);\n+                                }\n+                                keyEntry.set(fnp.getByteArray(), fnp.getStartOffset(), fnp.getLength());\n+                                valEntry.set(fvp.getByteArray(), fvp.getStartOffset(), fvp.getLength());\n+                                hashMap.put(keyEntry, valEntry);\n+                            }\n+\n+                            // Get the fields from a list of records\n+                            for (int i = 0; i < inputFields.size(); i++) {\n+                                if (!PointableHelper.sameType(ATypeTag.RECORD, inputFields.get(i))) {\n+                                    throw new AsterixException(\"Expected list of record, got \"\n+                                            + PointableHelper.getTypeTag(inputFields.get(i)));\n+                                }\n+                                List<IVisitablePointable> names = ((ARecordVisitablePointable) inputFields.get(i))\n+                                        .getFieldNames();\n+                                List<IVisitablePointable> values = ((ARecordVisitablePointable) inputFields.get(i))\n+                                        .getFieldValues();\n+\n+                                // Get name and value of the field to be added\n+                                // Use loop to account for the cases where users switches the order of the fields\n+                                IVisitablePointable fieldName;\n+                                for (int j = 0; j < names.size(); j++) {\n+                                    fieldName = names.get(j);\n+                                    // if fieldName is \"field-name\" then read the name\n+                                    if (PointableHelper.byteArrayEqual(fieldNamePointable, fieldName)) {\n+                                        namePointable = values.get(j);\n+                                    } else { // otherwise the fieldName is \"field-value\". Thus, read the value\n+                                        valuePointable = values.get(j);\n+                                    }\n+                                }\n+\n+                                if (namePointable == null || valuePointable == null) {\n+                                    throw new AlgebricksException(\"Trying to add a null field name or field value\");\n+                                }\n+\n+                                // Check that the field being added is a valid field\n+                                int pos = requiredRecordTypeInfo.getFieldIndex(namePointable.getByteArray(),\n+                                        namePointable.getStartOffset() + 1, namePointable.getLength() - 1);\n+\n+                                keyEntry.set(namePointable.getByteArray(), namePointable.getStartOffset(),\n+                                        namePointable.getLength());\n+                                // Check if already in our built record\n+                                BinaryHashMap.BinaryEntry entry = hashMap.get(keyEntry);\n+                                if (entry != null) {\n+                                    tempValReference.set(entry.buf, entry.off, entry.len);\n+                                    // If value is not equal throw conflicting duplicate field, otherwise ignore\n+                                    if (!PointableHelper.byteArrayEqual(valuePointable, tempValReference)) {\n+                                        throw new AlgebricksException(\"Conflicting duplicate field found.\");\n+                                    }\n+                                } else {\n+                                    if (pos > -1) {\n+                                        recordBuilder.addField(pos, valuePointable);\n+                                    } else {\n+                                        recordBuilder.addField(namePointable, valuePointable);\n+                                    }\n+                                    valEntry.set(valuePointable.getByteArray(), valuePointable.getStartOffset(),\n+                                            valuePointable.getLength());\n+                                    hashMap.put(keyEntry, valEntry);\n+                                }\n+                            }\n+                        } catch (AsterixException | HyracksDataException e) {\n+                            throw new AlgebricksException(e);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return AsterixBuiltinFunctions.ADD_FIELDS;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordAddFieldsDescriptor.java",
                "sha": "c26dacaeedb65dd81922f838a90f59242b66dc88",
                "status": "added"
            },
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordMergeDescriptor.java",
                "changes": 125,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordMergeDescriptor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 62,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordMergeDescriptor.java",
                "patch": "@@ -18,10 +18,9 @@\n  */\n package org.apache.asterix.runtime.evaluators.functions.records;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.DataInputStream;\n import java.io.IOException;\n-import java.util.Stack;\n+import java.util.ArrayList;\n+import java.util.List;\n \n import org.apache.asterix.builders.RecordBuilder;\n import org.apache.asterix.common.exceptions.AsterixException;\n@@ -32,13 +31,17 @@\n import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n import org.apache.asterix.om.pointables.PointableAllocator;\n+import org.apache.asterix.om.pointables.base.DefaultOpenFieldType;\n import org.apache.asterix.om.pointables.base.IVisitablePointable;\n-import org.apache.asterix.om.typecomputer.impl.RecordMergeTypeComputer;\n+import org.apache.asterix.om.typecomputer.impl.TypeComputerUtils;\n import org.apache.asterix.om.types.ARecordType;\n import org.apache.asterix.om.types.ATypeTag;\n import org.apache.asterix.om.types.BuiltinType;\n import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.om.types.runtime.RuntimeRecordTypeInfo;\n import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.evaluators.comparisons.DeepEqualAssessor;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\n@@ -47,39 +50,34 @@\n import org.apache.hyracks.api.exceptions.HyracksDataException;\n import org.apache.hyracks.data.std.api.IDataOutputProvider;\n import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n-import org.apache.hyracks.data.std.util.ByteArrayAccessibleOutputStream;\n import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n-import org.apache.hyracks.util.string.UTF8StringReader;\n-\n-//The record merge evaluator is used to combine two records with no matching fieldnames\n-//If both records have the same fieldname for a non-record field anywhere in the schema, the merge will fail\n-//This function is performed on a recursive level, meaning that nested records can be combined\n-//for instance if both records have a nested field called \"metadata\"\n-//where metadata from A is {\"comments\":\"this rocks\"}\n-//and metadata from B is {\"index\":7, \"priority\":5}\n-//Records A and B can be combined yielding a nested record called \"metadata\"\n-//That will have all three fields\n-public class RecordMergeDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n-\n-    private static final long serialVersionUID = 1L;\n \n-    private static final byte SER_NULL_TYPE_TAG = ATypeTag.NULL.serialize();\n+/**\n+ * record merge evaluator is used to combine two records with no matching fieldnames\n+ * If both records have the same fieldname for a non-record field anywhere in the schema, the merge will fail\n+ * This function is performed on a recursive level, meaning that nested records can be combined\n+ * for instance if both records have a nested field called \"metadata\"\n+ * where metadata from A is {\"comments\":\"this rocks\"} and metadata from B is {\"index\":7, \"priority\":5}\n+ * Records A and B can be combined yielding a nested record called \"metadata\"\n+ * That will have all three fields\n+ */\n+public class RecordMergeDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n \n     public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n-        @Override\n         public IFunctionDescriptor createFunctionDescriptor() {\n             return new RecordMergeDescriptor();\n         }\n     };\n-\n+    private static final long serialVersionUID = 1L;\n+    private static final byte SER_NULL_TYPE_TAG = ATypeTag.NULL.serialize();\n     private ARecordType outRecType;\n     private ARecordType inRecType0;\n     private ARecordType inRecType1;\n \n     public void reset(IAType outType, IAType inType0, IAType inType1) {\n-        outRecType = RecordMergeTypeComputer.extractRecordType(outType);\n-        inRecType0 = RecordMergeTypeComputer.extractRecordType(inType0);\n-        inRecType1 = RecordMergeTypeComputer.extractRecordType(inType1);\n+        outRecType = TypeComputerUtils.extractRecordType(outType);\n+        inRecType0 = TypeComputerUtils.extractRecordType(inType0);\n+        inRecType1 = TypeComputerUtils.extractRecordType(inType1);\n     }\n \n     @Override\n@@ -88,11 +86,12 @@ public ICopyEvaluatorFactory createEvaluatorFactory(final ICopyEvaluatorFactory[\n \n             private static final long serialVersionUID = 1L;\n \n+            @SuppressWarnings(\"unchecked\")\n+            private final ISerializerDeserializer<ANull> nullSerDe = AqlSerializerDeserializerProvider.INSTANCE\n+                    .getSerializerDeserializer(BuiltinType.ANULL);\n+\n             @Override\n             public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws AlgebricksException {\n-                final ARecordType recType = new ARecordType(outRecType.getTypeName(), outRecType.getFieldNames(),\n-                        outRecType.getFieldTypes(), outRecType.isOpen());\n-\n                 final PointableAllocator pa = new PointableAllocator();\n                 final IVisitablePointable vp0 = pa.allocateRecordValue(inRecType0);\n                 final IVisitablePointable vp1 = pa.allocateRecordValue(inRecType1);\n@@ -103,18 +102,14 @@ public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws A\n                 final ICopyEvaluator eval0 = args[0].createEvaluator(abvs0);\n                 final ICopyEvaluator eval1 = args[1].createEvaluator(abvs1);\n \n+                final List<RecordBuilder> rbStack = new ArrayList<>();\n+\n+                final ArrayBackedValueStorage tabvs = new ArrayBackedValueStorage();\n+\n                 return new ICopyEvaluator() {\n-                    @SuppressWarnings(\"unchecked\")\n-                    final ISerializerDeserializer<ANull> nullSerDe = AqlSerializerDeserializerProvider.INSTANCE\n-                            .getSerializerDeserializer(BuiltinType.ANULL);\n-                    final UTF8StringReader reader = new UTF8StringReader();\n-\n-                    private final Stack<RecordBuilder> rbStack = new Stack<RecordBuilder>();\n-                    private final ArrayBackedValueStorage tabvs = new ArrayBackedValueStorage();\n-                    private final ByteArrayAccessibleOutputStream nameOutputStream = new ByteArrayAccessibleOutputStream();\n-                    private final ByteArrayInputStream namebais = new ByteArrayInputStream(\n-                            nameOutputStream.getByteArray());\n-                    private final DataInputStream namedis = new DataInputStream(namebais);\n+\n+                    private final RuntimeRecordTypeInfo runtimeRecordTypeInfo = new RuntimeRecordTypeInfo();\n+                    private final DeepEqualAssessor deepEqualAssesor = new DeepEqualAssessor();\n \n                     @Override\n                     public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n@@ -141,7 +136,7 @@ public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n                         ARecordVisitablePointable rp1 = (ARecordVisitablePointable) vp1;\n \n                         try {\n-                            mergeFields(recType, rp0, rp1, true, 0);\n+                            mergeFields(outRecType, rp0, rp1, true, 0);\n \n                             rbStack.get(0).write(output.getDataOutput(), true);\n                         } catch (IOException | AsterixException e) {\n@@ -151,39 +146,44 @@ public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n \n                     private void mergeFields(ARecordType combinedType, ARecordVisitablePointable leftRecord,\n                             ARecordVisitablePointable rightRecord, boolean openFromParent, int nestedLevel)\n-                                    throws IOException, AsterixException, AlgebricksException {\n+                            throws IOException, AsterixException, AlgebricksException {\n                         if (rbStack.size() < (nestedLevel + 1)) {\n-                            rbStack.push(new RecordBuilder());\n+                            rbStack.add(new RecordBuilder());\n                         }\n \n                         rbStack.get(nestedLevel).reset(combinedType);\n                         rbStack.get(nestedLevel).init();\n+\n                         //Add all fields from left record\n                         for (int i = 0; i < leftRecord.getFieldNames().size(); i++) {\n                             IVisitablePointable leftName = leftRecord.getFieldNames().get(i);\n                             IVisitablePointable leftValue = leftRecord.getFieldValues().get(i);\n+                            IVisitablePointable leftType = leftRecord.getFieldTypeTags().get(i);\n                             boolean foundMatch = false;\n                             for (int j = 0; j < rightRecord.getFieldNames().size(); j++) {\n                                 IVisitablePointable rightName = rightRecord.getFieldNames().get(j);\n                                 IVisitablePointable rightValue = rightRecord.getFieldValues().get(j);\n-                                if (rightName.equals(leftName)) {\n-                                    //Field was found on the right. Merge Sub Records\n-                                    if (rightValue.getByteArray()[0] != ATypeTag.RECORD.serialize()\n-                                            || leftValue.getByteArray()[0] != ATypeTag.RECORD.serialize()) {\n-                                        //The fields need to be records in order to merge\n-                                        throw new AlgebricksException(\"Duplicate field found\");\n-                                    } else {\n+                                IVisitablePointable rightType = rightRecord.getFieldTypeTags().get(j);\n+                                // Check if same fieldname\n+                                if (PointableHelper.isEqual(leftName, rightName)\n+                                        && !deepEqualAssesor.isEqual(leftValue, rightValue)) {\n+                                    //Field was found on the right and are subrecords, merge them\n+                                    if (PointableHelper.sameType(ATypeTag.RECORD, rightType)\n+                                            && PointableHelper.sameType(ATypeTag.RECORD, leftType)) {\n                                         //We are merging two sub records\n                                         addFieldToSubRecord(combinedType, leftName, leftValue, rightValue,\n                                                 openFromParent, nestedLevel);\n+                                        foundMatch = true;\n+                                    } else {\n+                                        throw new AlgebricksException(\"Duplicate field found\");\n                                     }\n-                                    foundMatch = true;\n                                 }\n                             }\n                             if (!foundMatch) {\n                                 addFieldToSubRecord(combinedType, leftName, leftValue, null, openFromParent,\n                                         nestedLevel);\n                             }\n+\n                         }\n                         //Repeat for right side (ignoring duplicates this time)\n                         for (int j = 0; j < rightRecord.getFieldNames().size(); j++) {\n@@ -203,29 +203,30 @@ private void mergeFields(ARecordType combinedType, ARecordVisitablePointable lef\n                         }\n                     }\n \n-                    //Takes in a record type, field name, and the field values (which are record) from two records\n-                    //Merges them into one record of combinedType\n-                    //And adds that record as a field to the Record in subrb\n-                    //the second value can be null, indicated that you just add the value of left as a field to subrb\n+                    /*\n+                     * Takes in a record type, field name, and the field values (which are record) from two records\n+                     * Merges them into one record of combinedType\n+                     * And adds that record as a field to the Record in subrb\n+                     * the second value can be null, indicated that you just add the value of left as a field to subrb\n+                     *\n+                     */\n                     private void addFieldToSubRecord(ARecordType combinedType, IVisitablePointable fieldNamePointable,\n                             IVisitablePointable leftValue, IVisitablePointable rightValue, boolean openFromParent,\n                             int nestedLevel) throws IOException, AsterixException, AlgebricksException {\n \n-                        nameOutputStream.reset();\n-                        nameOutputStream.write(fieldNamePointable.getByteArray(),\n-                                fieldNamePointable.getStartOffset() + 1, fieldNamePointable.getLength());\n-                        namedis.reset();\n-                        String fieldName = reader.readUTF(namedis);\n+                        runtimeRecordTypeInfo.reset(combinedType);\n+                        int pos = runtimeRecordTypeInfo.getFieldIndex(fieldNamePointable.getByteArray(),\n+                                fieldNamePointable.getStartOffset() + 1, fieldNamePointable.getLength() - 1);\n \n                         //Add the merged field\n-                        if (combinedType.isClosedField(fieldName)) {\n-                            int pos = combinedType.getFieldIndex(fieldName);\n+                        if (combinedType != null && pos >= 0) {\n                             if (rightValue == null) {\n                                 rbStack.get(nestedLevel).addField(pos, leftValue);\n                             } else {\n-                                mergeFields((ARecordType) combinedType.getFieldType(fieldName),\n+                                mergeFields((ARecordType) combinedType.getFieldTypes()[pos],\n                                         (ARecordVisitablePointable) leftValue, (ARecordVisitablePointable) rightValue,\n                                         false, nestedLevel + 1);\n+\n                                 tabvs.reset();\n                                 rbStack.get(nestedLevel + 1).write(tabvs.getDataOutput(), true);\n                                 rbStack.get(nestedLevel).addField(pos, tabvs);\n@@ -234,7 +235,7 @@ private void addFieldToSubRecord(ARecordType combinedType, IVisitablePointable f\n                             if (rightValue == null) {\n                                 rbStack.get(nestedLevel).addField(fieldNamePointable, leftValue);\n                             } else {\n-                                mergeFields((ARecordType) combinedType.getFieldType(fieldName),\n+                                mergeFields(DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE,\n                                         (ARecordVisitablePointable) leftValue, (ARecordVisitablePointable) rightValue,\n                                         false, nestedLevel + 1);\n                                 tabvs.reset();",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordMergeDescriptor.java",
                "sha": "2c1a335d934de215fe98c72a9f134227c3093037",
                "status": "modified"
            },
            {
                "additions": 68,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsDescriptor.java",
                "changes": 68,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsDescriptor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsDescriptor.java",
                "patch": "@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions.records;\n+\n+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptor;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+\n+public class RecordRemoveFieldsDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final byte SER_NULL_TYPE_TAG = ATypeTag.NULL.serialize();\n+    private static final byte SER_ORDEREDLIST_TYPE_TAG = ATypeTag.ORDEREDLIST.serialize();\n+\n+    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n+        public IFunctionDescriptor createFunctionDescriptor() {\n+            return new RecordRemoveFieldsDescriptor();\n+        }\n+    };\n+\n+    private  RecordRemoveFieldsDescriptor() {\n+    }\n+\n+    private ARecordType outputRecordType;\n+    private ARecordType inputRecType;\n+    private AOrderedListType inputListType;\n+\n+    public void reset(IAType outType, IAType inType, IAType inListType) {\n+        outputRecordType = (ARecordType) outType;\n+        inputRecType = (ARecordType) inType;\n+        inputListType = (AOrderedListType) inListType;\n+    }\n+\n+    public ICopyEvaluatorFactory createEvaluatorFactory(final ICopyEvaluatorFactory[] args) throws AlgebricksException {\n+        return new RecordRemoveFieldsEvalFactory(args[0], args[1], outputRecordType, inputRecType, inputListType);\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return AsterixBuiltinFunctions.REMOVE_FIELDS;\n+    }\n+\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsDescriptor.java",
                "sha": "0add4f0e33a9e6e1806e23dc60e69833de0523c6",
                "status": "added"
            },
            {
                "additions": 235,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsEvalFactory.java",
                "changes": 235,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsEvalFactory.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsEvalFactory.java",
                "patch": "@@ -0,0 +1,235 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions.records;\n+\n+import java.io.IOException;\n+import java.util.ArrayDeque;\n+import java.util.ArrayList;\n+import java.util.Deque;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+import org.apache.asterix.builders.RecordBuilder;\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.formats.nontagged.AqlSerializerDeserializerProvider;\n+import org.apache.asterix.om.base.ANull;\n+import org.apache.asterix.om.functions.AsterixBuiltinFunctions;\n+import org.apache.asterix.om.pointables.AListVisitablePointable;\n+import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n+import org.apache.asterix.om.pointables.PointableAllocator;\n+import org.apache.asterix.om.pointables.base.DefaultOpenFieldType;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ARecordType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.EnumDeserializer;\n+import org.apache.asterix.om.types.runtime.RuntimeRecordTypeInfo;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.ICopyEvaluatorFactory;\n+import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IDataOutputProvider;\n+import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n+import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n+\n+class RecordRemoveFieldsEvalFactory implements ICopyEvaluatorFactory {\n+    private static final long serialVersionUID = 1L;\n+\n+    private static final byte SER_NULL_TYPE_TAG = ATypeTag.NULL.serialize();\n+    private static final byte SER_ORDEREDLIST_TYPE_TAG = ATypeTag.ORDEREDLIST.serialize();\n+    private static final byte SER_RECORD_TYPE_TAG = ATypeTag.RECORD.serialize();\n+    @SuppressWarnings(\"unchecked\")\n+    private final ISerializerDeserializer<ANull> nullSerDe = AqlSerializerDeserializerProvider.INSTANCE\n+            .getSerializerDeserializer(BuiltinType.ANULL);\n+    private ICopyEvaluatorFactory inputRecordEvalFactory;\n+    private ICopyEvaluatorFactory removeFieldPathsFactory;\n+    private ARecordType requiredRecType;\n+    private ARecordType inputRecType;\n+    private AOrderedListType inputListType;\n+\n+    public RecordRemoveFieldsEvalFactory(ICopyEvaluatorFactory inputRecordEvalFactory,\n+            ICopyEvaluatorFactory removeFieldPathsFactory, ARecordType requiredRecType, ARecordType inputRecType,\n+            AOrderedListType inputListType) {\n+        this.inputRecordEvalFactory = inputRecordEvalFactory;\n+        this.removeFieldPathsFactory = removeFieldPathsFactory;\n+        this.requiredRecType = requiredRecType;\n+        this.inputRecType = inputRecType;\n+        this.inputListType = inputListType;\n+\n+    }\n+\n+    @Override\n+    public ICopyEvaluator createEvaluator(final IDataOutputProvider output) throws AlgebricksException {\n+\n+        final PointableAllocator pa = new PointableAllocator();\n+        final IVisitablePointable vp0 = pa.allocateRecordValue(inputRecType);\n+        final IVisitablePointable vp1 = pa.allocateListValue(inputListType);\n+        final ArrayBackedValueStorage outInput0 = new ArrayBackedValueStorage();\n+        final ArrayBackedValueStorage outInput1 = new ArrayBackedValueStorage();\n+        final ICopyEvaluator eval0 = inputRecordEvalFactory.createEvaluator(outInput0);\n+        final ICopyEvaluator eval1 = removeFieldPathsFactory.createEvaluator(outInput1);\n+\n+        return new ICopyEvaluator() {\n+            private final RuntimeRecordTypeInfo runtimeRecordTypeInfo = new RuntimeRecordTypeInfo();\n+\n+            private final List<RecordBuilder> rbStack = new ArrayList<>();\n+            private final ArrayBackedValueStorage tabvs = new ArrayBackedValueStorage();\n+            private final Deque<IVisitablePointable> recordPath = new ArrayDeque<>();\n+\n+\n+            @Override\n+            public void evaluate(IFrameTupleReference tuple) throws AlgebricksException {\n+                outInput0.reset();\n+                outInput1.reset();\n+\n+                eval0.evaluate(tuple);\n+                eval1.evaluate(tuple);\n+\n+                if (outInput0.getByteArray()[0] == SER_NULL_TYPE_TAG) {\n+                    try {\n+                        nullSerDe.serialize(ANull.NULL, output.getDataOutput());\n+                    } catch (HyracksDataException e) {\n+                        throw new AlgebricksException(e);\n+                    }\n+                    return;\n+                }\n+\n+                if (outInput0.getByteArray()[0] != SER_RECORD_TYPE_TAG) {\n+                    throw new AlgebricksException(AsterixBuiltinFunctions.REMOVE_FIELDS.getName()\n+                            + \": expects input type \" + inputRecType + \", but got \"\n+                            + EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(outInput0.getByteArray()[0]));\n+                }\n+\n+                if (outInput1.getByteArray()[0] != SER_ORDEREDLIST_TYPE_TAG) {\n+                    throw new AlgebricksException(AsterixBuiltinFunctions.REMOVE_FIELDS.getName()\n+                            + \": expects input type \" + inputListType + \", but got \"\n+                            + EnumDeserializer.ATYPETAGDESERIALIZER.deserialize(outInput1.getByteArray()[0]));\n+                }\n+\n+                vp0.set(outInput0);\n+                vp1.set(outInput1);\n+\n+                ARecordVisitablePointable recordPointable = (ARecordVisitablePointable) vp0;\n+                AListVisitablePointable listPointable = (AListVisitablePointable) vp1;\n+\n+                try {\n+                    recordPath.clear();\n+                    rbStack.clear();\n+                    processRecord(requiredRecType, recordPointable, listPointable, 0);\n+                    rbStack.get(0).write(output.getDataOutput(), true);\n+                } catch (IOException | AsterixException e) {\n+                    throw new AlgebricksException(e);\n+                }\n+            }\n+\n+            private void processRecord(ARecordType requiredType, ARecordVisitablePointable srp,\n+                    AListVisitablePointable inputList, int nestedLevel) throws IOException, AsterixException,\n+                    AlgebricksException {\n+                if (rbStack.size() < (nestedLevel + 1)) {\n+                    rbStack.add(new RecordBuilder());\n+                }\n+\n+                rbStack.get(nestedLevel).reset(requiredType);\n+                rbStack.get(nestedLevel).init();\n+\n+                List<IVisitablePointable> fieldNames = srp.getFieldNames();\n+                List<IVisitablePointable> fieldValues = srp.getFieldValues();\n+                List<IVisitablePointable> fieldTypes = srp.getFieldTypeTags();\n+\n+                for (int i = 0; i < fieldNames.size(); i++) {\n+                    IVisitablePointable subRecFieldName = fieldNames.get(i);\n+                    recordPath.push(subRecFieldName);\n+                    if (isValidPath(inputList)) {\n+                        if (requiredType != null && requiredType.getTypeTag() != ATypeTag.ANY) {\n+                            addKeptFieldToSubRecord(requiredType, subRecFieldName, fieldValues.get(i),\n+                                    fieldTypes.get(i), inputList, nestedLevel);\n+                        } else {\n+                            addKeptFieldToSubRecord(DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE, subRecFieldName,\n+                                    fieldValues.get(i), fieldTypes.get(i), inputList, nestedLevel);\n+                        }\n+                    }\n+                    recordPath.pop();\n+                }\n+            }\n+\n+            private void addKeptFieldToSubRecord(ARecordType requiredType, IVisitablePointable fieldNamePointable,\n+                    IVisitablePointable fieldValuePointable, IVisitablePointable fieldTypePointable,\n+                    AListVisitablePointable inputList, int nestedLevel) throws IOException, AsterixException,\n+                    AlgebricksException {\n+\n+                runtimeRecordTypeInfo.reset(requiredType);\n+                int pos = runtimeRecordTypeInfo.getFieldIndex(fieldNamePointable.getByteArray(),\n+                        fieldNamePointable.getStartOffset() + 1, fieldNamePointable.getLength() - 1);\n+                if (pos >= 0) { // Closed field\n+                    if (PointableHelper.sameType(ATypeTag.RECORD, fieldTypePointable)) {\n+                        processRecord((ARecordType) requiredType.getFieldTypes()[pos],\n+                                (ARecordVisitablePointable) fieldValuePointable, inputList, nestedLevel + 1);\n+                        tabvs.reset();\n+                        rbStack.get(nestedLevel + 1).write(tabvs.getDataOutput(), true);\n+                        rbStack.get(nestedLevel).addField(pos, tabvs);\n+                    } else {\n+                        rbStack.get(nestedLevel).addField(pos, fieldValuePointable);\n+                    }\n+                } else { // Open field\n+                    if (PointableHelper.sameType(ATypeTag.RECORD, fieldTypePointable)) {\n+                        processRecord(null, (ARecordVisitablePointable) fieldValuePointable, inputList, nestedLevel + 1);\n+                        tabvs.reset();\n+                        rbStack.get(nestedLevel + 1).write(tabvs.getDataOutput(), true);\n+                        rbStack.get(nestedLevel).addField(fieldNamePointable, tabvs);\n+                    } else {\n+                        rbStack.get(nestedLevel).addField(fieldNamePointable, fieldValuePointable);\n+                    }\n+                }\n+            }\n+\n+            private boolean isValidPath(AListVisitablePointable inputList) throws HyracksDataException {\n+                List<IVisitablePointable> items = inputList.getItems();\n+                List<IVisitablePointable> typeTags = inputList.getItemTags();\n+\n+                int pathLen = recordPath.size();\n+                for (int i = 0; i < items.size(); i++) {\n+                    IVisitablePointable item = items.get(i);\n+                    if (PointableHelper.sameType(ATypeTag.ORDEREDLIST, typeTags.get(i))) {\n+                        List<IVisitablePointable> inputPathItems = ((AListVisitablePointable) item).getItems();\n+\n+                        if (pathLen == inputPathItems.size()) {\n+                            boolean match = true;\n+                            Iterator<IVisitablePointable> fpi = recordPath.iterator();\n+                            for (int j = inputPathItems.size() - 1; j >= 0; j--) {\n+                                match &= PointableHelper.isEqual(inputPathItems.get(j), fpi.next());\n+                                if (!match)\n+                                    break;\n+                            }\n+                            if (match)\n+                                return false; // Not a valid path for the output record\n+                        }\n+                    } else {\n+                        if (PointableHelper.isEqual(recordPath.getFirst(), item)) {\n+                            return false;\n+                        }\n+                    }\n+                }\n+                return true;\n+            }\n+        };\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/records/RecordRemoveFieldsEvalFactory.java",
                "sha": "a74f05503b3f6b9183d03584a0c0724acc259928",
                "status": "added"
            },
            {
                "additions": 114,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitor.java",
                "changes": 114,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitor.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitor.java",
                "patch": "@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.visitors;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.om.pointables.AFlatValuePointable;\n+import org.apache.asterix.om.pointables.AListVisitablePointable;\n+import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.pointables.visitor.IVisitablePointableVisitor;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy.Domain;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.hyracks.algebricks.common.utils.Pair;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+\n+public class DeepEqualityVisitor implements IVisitablePointableVisitor<Void, Pair<IVisitablePointable, Boolean>> {\n+    private final Map<IVisitablePointable, ListDeepEqualityChecker> lpointableToEquality = new HashMap<>();\n+    private final Map<IVisitablePointable, RecordDeepEqualityChecker> rpointableToEquality = new HashMap<>();\n+\n+    @Override\n+    public Void visit(AListVisitablePointable pointable, Pair<IVisitablePointable, Boolean> arg)\n+            throws AsterixException {\n+        ListDeepEqualityChecker listDeepEqualityChecker = lpointableToEquality.get(pointable);\n+        if (listDeepEqualityChecker == null) {\n+            listDeepEqualityChecker = new ListDeepEqualityChecker();\n+            lpointableToEquality.put(pointable, listDeepEqualityChecker);\n+        }\n+\n+        try {\n+            arg.second = listDeepEqualityChecker.accessList(pointable, arg.first, this);\n+        } catch (Exception e) {\n+            throw new AsterixException(e);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visit(ARecordVisitablePointable pointable, Pair<IVisitablePointable, Boolean> arg)\n+            throws AsterixException {\n+        RecordDeepEqualityChecker recDeepEqualityChecker = rpointableToEquality.get(pointable);\n+        if (recDeepEqualityChecker == null) {\n+            recDeepEqualityChecker = new RecordDeepEqualityChecker();\n+            rpointableToEquality.put(pointable, recDeepEqualityChecker);\n+        }\n+\n+        try {\n+            arg.second = recDeepEqualityChecker.accessRecord(pointable, arg.first, this);\n+        } catch (Exception e) {\n+            throw new AsterixException(e);\n+        }\n+\n+        return null;\n+    }\n+\n+    @Override\n+    public Void visit(AFlatValuePointable pointable, Pair<IVisitablePointable, Boolean> arg) throws AsterixException {\n+\n+        if (pointable.equals(arg.first)) {\n+            arg.second = true;\n+            return null;\n+        }\n+        try {\n+            ATypeTag tt1 = PointableHelper.getTypeTag(pointable);\n+            ATypeTag tt2 = PointableHelper.getTypeTag(arg.first);\n+\n+            if (tt1 != tt2) {\n+                if (!ATypeHierarchy.isSameTypeDomain(tt1, tt2, false)) {\n+                    arg.second = false;\n+                } else {\n+                    // If same domain, check if numberic\n+                    Domain domain = ATypeHierarchy.getTypeDomain(tt1);\n+                    byte b1[] = pointable.getByteArray();\n+                    byte b2[] = arg.first.getByteArray();\n+                    if (domain == Domain.NUMERIC) {\n+                        int s1 = pointable.getStartOffset();\n+                        int s2 = arg.first.getStartOffset();\n+                        arg.second = (ATypeHierarchy.getDoubleValue(b1, s1) == ATypeHierarchy.getDoubleValue(b2, s2));\n+                    } else {\n+                        arg.second = false;\n+                    }\n+                }\n+            } else {\n+                arg.second = PointableHelper.byteArrayEqual(pointable, arg.first, 1);\n+            }\n+        } catch (HyracksDataException e) {\n+            throw new AsterixException(e);\n+        }\n+\n+        return null;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitor.java",
                "sha": "cd2718eebf88e23d6dc5922c359f937048c0ae81",
                "status": "added"
            },
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitorHelper.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitorHelper.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitorHelper.java",
                "patch": "@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.visitors;\n+\n+import java.util.Arrays;\n+\n+import org.apache.asterix.dataflow.data.nontagged.comparators.ListItemBinaryComparatorFactory;\n+import org.apache.asterix.dataflow.data.nontagged.hash.ListItemBinaryHashFunctionFactory;\n+import org.apache.asterix.runtime.evaluators.functions.BinaryHashMap;\n+import org.apache.hyracks.api.dataflow.value.IBinaryComparator;\n+import org.apache.hyracks.api.dataflow.value.IBinaryHashFunction;\n+\n+public class DeepEqualityVisitorHelper {\n+    // Default values\n+    public static final int TABLE_SIZE = 100;\n+    public static final int TABLE_FRAME_SIZE = 32768;\n+\n+    private final ListItemBinaryHashFunctionFactory listItemBinaryHashFunctionFactory = ListItemBinaryHashFunctionFactory.INSTANCE;\n+    private final ListItemBinaryComparatorFactory listItemBinaryComparatorFactory = ListItemBinaryComparatorFactory.INSTANCE;\n+\n+    private final IBinaryHashFunction putHashFunc = listItemBinaryHashFunctionFactory.createBinaryHashFunction();\n+    private final IBinaryHashFunction getHashFunc = listItemBinaryHashFunctionFactory.createBinaryHashFunction();\n+    private IBinaryComparator cmp = listItemBinaryComparatorFactory.createBinaryComparator();\n+    private BinaryHashMap hashMap = null;\n+\n+    public BinaryHashMap initializeHashMap(BinaryHashMap.BinaryEntry valEntry) {\n+        return initializeHashMap(0, 0, valEntry);\n+    }\n+\n+    public BinaryHashMap initializeHashMap(int tableSize, int tableFrameSize, BinaryHashMap.BinaryEntry valEntry) {\n+        if (tableFrameSize != 0 && tableSize != 0) {\n+            hashMap = new BinaryHashMap(tableSize, tableFrameSize, putHashFunc, getHashFunc, cmp);\n+        } else {\n+            hashMap = new BinaryHashMap(TABLE_SIZE, TABLE_FRAME_SIZE, putHashFunc, getHashFunc, cmp);\n+        }\n+\n+        byte[] emptyValBuf = new byte[8];\n+        Arrays.fill(emptyValBuf, (byte) 0);\n+        valEntry.set(emptyValBuf, 0, 8);\n+        return hashMap;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/DeepEqualityVisitorHelper.java",
                "sha": "0e1f34209215430fd4e13d61dc7ec9896138c458",
                "status": "added"
            },
            {
                "additions": 142,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/ListDeepEqualityChecker.java",
                "changes": 142,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/ListDeepEqualityChecker.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/ListDeepEqualityChecker.java",
                "patch": "@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.visitors;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.om.pointables.AListVisitablePointable;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.runtime.evaluators.functions.BinaryHashMap;\n+import org.apache.asterix.runtime.evaluators.functions.BinaryHashMap.BinaryEntry;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.hyracks.algebricks.common.utils.Pair;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.primitive.IntegerPointable;\n+\n+class ListDeepEqualityChecker {\n+    private DeepEqualityVisitor visitor;\n+\n+    private BinaryHashMap hashMap;\n+    private BinaryEntry keyEntry = new BinaryEntry();\n+    private BinaryEntry valEntry = new BinaryEntry();\n+\n+    private final DeepEqualityVisitorHelper deepEqualityVisitorHelper = new DeepEqualityVisitorHelper();\n+    private final Pair<IVisitablePointable, Boolean> itemVisitorArg = new Pair<IVisitablePointable, Boolean>(null, false);\n+\n+    public ListDeepEqualityChecker() {\n+        hashMap = deepEqualityVisitorHelper.initializeHashMap(valEntry);\n+    }\n+\n+    public boolean accessList(IVisitablePointable listPointableLeft, IVisitablePointable listPointableRight,\n+            DeepEqualityVisitor visitor) throws IOException, AsterixException {\n+        this.visitor = visitor;\n+\n+        AListVisitablePointable listLeft = (AListVisitablePointable)listPointableLeft;\n+        List<IVisitablePointable> itemsLeft = listLeft.getItems();\n+        List<IVisitablePointable> itemTagTypesLeft = listLeft.getItemTags();\n+\n+\n+        AListVisitablePointable listRight = (AListVisitablePointable)listPointableRight;\n+        List<IVisitablePointable> itemsRight = listRight.getItems();\n+        List<IVisitablePointable> itemTagTypesRight = listRight.getItemTags();\n+\n+        if (itemsLeft.size() != itemsRight.size()) return false;\n+\n+        boolean isOrderedRight = listLeft.ordered();\n+        if (isOrderedRight != listRight.ordered())\n+            return false;\n+\n+        if( isOrderedRight) {\n+            return processOrderedList(itemsLeft, itemTagTypesLeft, itemsRight, itemTagTypesRight);\n+        } else {\n+            return processUnorderedList(itemsLeft, itemTagTypesLeft, itemsRight, itemTagTypesRight);\n+        }\n+    }\n+\n+    private boolean processOrderedList(List<IVisitablePointable> itemsLeft, List<IVisitablePointable> itemTagTypesLeft,\n+            List<IVisitablePointable> itemsRight, List<IVisitablePointable> itemTagTypesRight)\n+            throws HyracksDataException, AsterixException {\n+        for(int i=0; i<itemsLeft.size(); i++) {\n+            ATypeTag fieldTypeLeft = PointableHelper.getTypeTag(itemTagTypesLeft.get(i));\n+            if(fieldTypeLeft.isDerivedType() && fieldTypeLeft != PointableHelper.getTypeTag(itemTagTypesRight.get(i))) {\n+                return false;\n+            }\n+            itemVisitorArg.first = itemsRight.get(i);\n+            itemsLeft.get(i).accept(visitor, itemVisitorArg);\n+            if (itemVisitorArg.second == false)\n+                return false;\n+        }\n+\n+        return true;\n+    }\n+\n+    private boolean processUnorderedList(List<IVisitablePointable> itemsLeft, List<IVisitablePointable> itemTagTypesLeft,\n+            List<IVisitablePointable> itemsRight, List<IVisitablePointable> itemTagTypesRight)\n+            throws HyracksDataException, AsterixException {\n+\n+        hashMap.clear();\n+        // Build phase: Add items into hash map, starting with first list.\n+        for(int i=0; i<itemsLeft.size(); i++) {\n+            IVisitablePointable item = itemsLeft.get(i);\n+            byte[] buf = item.getByteArray();\n+            int off = item.getStartOffset();\n+            int len = item.getLength();\n+            keyEntry.set(buf, off, len);\n+            IntegerPointable.setInteger(valEntry.buf, 0, i);\n+            hashMap.put(keyEntry, valEntry);\n+        }\n+\n+        return probeHashMap(itemsLeft, itemTagTypesLeft, itemsRight, itemTagTypesRight);\n+    }\n+\n+\n+    private boolean probeHashMap(List<IVisitablePointable> itemsLeft, List<IVisitablePointable> itemTagTypesLeft,\n+            List<IVisitablePointable> itemsRight, List<IVisitablePointable> itemTagTypesRight)\n+            throws HyracksDataException, AsterixException {\n+        // Probe phase: Probe items from second list\n+        for(int indexRight=0; indexRight<itemsRight.size(); indexRight++) {\n+            IVisitablePointable itemRight = itemsRight.get(indexRight);\n+            byte[] buf = itemRight.getByteArray();\n+            int off = itemRight.getStartOffset();\n+            int len = itemRight.getLength();\n+            keyEntry.set(buf, off, len);\n+            BinaryEntry entry = hashMap.get(keyEntry);\n+\n+            // The items doesn't match\n+            if (entry == null) {\n+                return false;\n+            }\n+\n+            int indexLeft = IntegerPointable.getInteger(entry.buf, entry.off);\n+            ATypeTag fieldTypeLeft = PointableHelper.getTypeTag(itemTagTypesLeft.get(indexLeft));\n+            if(fieldTypeLeft.isDerivedType() && fieldTypeLeft != PointableHelper.getTypeTag(itemTagTypesRight.get(indexRight))) {\n+                return false;\n+            }\n+\n+            itemVisitorArg.first = itemRight;\n+            itemsLeft.get(indexLeft).accept(visitor, itemVisitorArg);\n+            if (itemVisitorArg.second == false)\n+                return false;\n+        }\n+        return true;\n+    }\n+}\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/ListDeepEqualityChecker.java",
                "sha": "6d5513d5a2cf34dfd4b925da94e887f700b07a2a",
                "status": "added"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/RecordDeepEqualityChecker.java",
                "changes": 112,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/RecordDeepEqualityChecker.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 0,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/RecordDeepEqualityChecker.java",
                "patch": "@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.visitors;\n+\n+import java.util.List;\n+\n+import org.apache.asterix.common.exceptions.AsterixException;\n+import org.apache.asterix.dataflow.data.nontagged.serde.AInt32SerializerDeserializer;\n+import org.apache.asterix.om.pointables.ARecordVisitablePointable;\n+import org.apache.asterix.om.pointables.base.IVisitablePointable;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.runtime.evaluators.functions.BinaryHashMap;\n+import org.apache.asterix.runtime.evaluators.functions.PointableHelper;\n+import org.apache.hyracks.algebricks.common.utils.Pair;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.primitive.IntegerPointable;\n+\n+class RecordDeepEqualityChecker {\n+    private final Pair<IVisitablePointable, Boolean> nestedVisitorArg = new Pair<IVisitablePointable, Boolean>(null,\n+            false);\n+    private final DeepEqualityVisitorHelper deepEqualityVisitorHelper = new DeepEqualityVisitorHelper();\n+    private DeepEqualityVisitor visitor;\n+    private BinaryHashMap.BinaryEntry keyEntry = new BinaryHashMap.BinaryEntry();\n+    private BinaryHashMap.BinaryEntry valEntry = new BinaryHashMap.BinaryEntry();\n+    private BinaryHashMap hashMap;\n+\n+    public RecordDeepEqualityChecker(int tableSize, int tableFrameSize) {\n+        hashMap = deepEqualityVisitorHelper.initializeHashMap(tableSize, tableFrameSize, valEntry);\n+    }\n+\n+    public RecordDeepEqualityChecker() {\n+        hashMap = deepEqualityVisitorHelper.initializeHashMap(valEntry);\n+    }\n+\n+    public boolean accessRecord(IVisitablePointable recPointableLeft, IVisitablePointable recPointableRight,\n+            DeepEqualityVisitor visitor) throws HyracksDataException, AsterixException {\n+\n+        if (recPointableLeft.equals(recPointableRight)) {\n+            return true;\n+        }\n+\n+        this.visitor = visitor;\n+\n+        hashMap.clear();\n+\n+        ARecordVisitablePointable recLeft = (ARecordVisitablePointable) recPointableLeft;\n+        List<IVisitablePointable> fieldNamesLeft = recLeft.getFieldNames();\n+\n+        ARecordVisitablePointable recRight = (ARecordVisitablePointable) recPointableRight;\n+        List<IVisitablePointable> fieldNamesRight = recRight.getFieldNames();\n+\n+        int sizeLeft = fieldNamesLeft.size();\n+        int sizeRight = fieldNamesRight.size();\n+        if (sizeLeft != sizeRight) {\n+            return false;\n+        }\n+\n+        // Build phase: Add items into hash map, starting with first record.\n+        for (int i = 0; i < sizeLeft; i++) {\n+            IVisitablePointable fieldName = fieldNamesLeft.get(i);\n+            keyEntry.set(fieldName.getByteArray(), fieldName.getStartOffset(), fieldName.getLength());\n+            IntegerPointable.setInteger(valEntry.buf, 0, i);\n+            hashMap.put(keyEntry, valEntry);\n+        }\n+\n+        return compareValues(recLeft.getFieldTypeTags(), recLeft.getFieldValues(), fieldNamesRight,\n+                recRight.getFieldTypeTags(), recRight.getFieldValues());\n+    }\n+\n+    private boolean compareValues(List<IVisitablePointable> fieldTypesLeft, List<IVisitablePointable> fieldValuesLeft,\n+            List<IVisitablePointable> fieldNamesRight, List<IVisitablePointable> fieldTypesRight,\n+            List<IVisitablePointable> fieldValuesRight) throws HyracksDataException, AsterixException {\n+\n+        // Probe phase: Probe items from second record\n+        for (int i = 0; i < fieldNamesRight.size(); i++) {\n+            IVisitablePointable fieldName = fieldNamesRight.get(i);\n+            keyEntry.set(fieldName.getByteArray(), fieldName.getStartOffset(), fieldName.getLength());\n+            BinaryHashMap.BinaryEntry entry = hashMap.get(keyEntry);\n+            if (entry == null) {\n+                return false;\n+            }\n+\n+            int fieldIdLeft = AInt32SerializerDeserializer.getInt(entry.buf, entry.off);\n+            ATypeTag fieldTypeLeft = PointableHelper.getTypeTag(fieldTypesLeft.get(fieldIdLeft));\n+            if (fieldTypeLeft.isDerivedType() && fieldTypeLeft != PointableHelper.getTypeTag(fieldTypesRight.get(i))) {\n+                return false;\n+            }\n+            nestedVisitorArg.first = fieldValuesRight.get(i);\n+            fieldValuesLeft.get(fieldIdLeft).accept(visitor, nestedVisitorArg);\n+            if (nestedVisitorArg.second == false) {\n+                return false;\n+            }\n+        }\n+        return true;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/visitors/RecordDeepEqualityChecker.java",
                "sha": "84e9cf622fb3e31b0b9d049233f69af8d86972f3",
                "status": "added"
            },
            {
                "additions": 59,
                "blob_url": "https://github.com/apache/asterixdb/blob/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/formats/NonTaggedDataFormat.java",
                "changes": 141,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterix-runtime/src/main/java/org/apache/asterix/runtime/formats/NonTaggedDataFormat.java?ref=4053f390af30d7d8cbf906fd874291a28a1b1c0b",
                "deletions": 82,
                "filename": "asterix-runtime/src/main/java/org/apache/asterix/runtime/formats/NonTaggedDataFormat.java",
                "patch": "@@ -168,87 +168,7 @@\n import org.apache.asterix.runtime.evaluators.constructors.AYearMonthDurationConstructorDescriptor;\n import org.apache.asterix.runtime.evaluators.constructors.ClosedRecordConstructorDescriptor;\n import org.apache.asterix.runtime.evaluators.constructors.OpenRecordConstructorDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.AndDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.AnyCollectionMemberDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CastListDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CastRecordDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CodePointToStringDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CountHashedGramTokensDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CountHashedWordTokensDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreateCircleDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreateLineDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreateMBRDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreatePointDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreatePolygonDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreateRectangleDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.CreateUUIDDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.EditDistanceCheckDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.EditDistanceContainsDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.EditDistanceDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.EditDistanceListIsFilterable;\n-import org.apache.asterix.runtime.evaluators.functions.EditDistanceStringIsFilterable;\n-import org.apache.asterix.runtime.evaluators.functions.EmbedTypeDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.FlowRecordDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.FuzzyEqDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.GetItemDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.GramTokensDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.HashedGramTokensDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.HashedWordTokensDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.InjectFailureDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.IsNullDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.IsSystemNullDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.LenDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NotDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NotNullDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericAbsDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericAddDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericCaretDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericCeilingDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericDivideDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericFloorDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericModuloDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericMultiplyDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericRoundDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericRoundHalfToEven2Descriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericRoundHalfToEvenDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericSubDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.NumericUnaryMinusDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.OrDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.OrderedListConstructorDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.PrefixLenJaccardDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.RegExpDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardCheckDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardPrefixCheckDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardPrefixDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardSortedCheckDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SimilarityJaccardSortedDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SpatialAreaDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SpatialCellDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SpatialDistanceDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SpatialIntersectDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringConcatDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringContainsDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringEndsWithDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringEqualDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringJoinDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringLengthDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringLikeDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringLowerCaseDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringMatchesDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringMatchesWithFlagDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringReplaceDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringReplaceWithFlagsDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringStartsWithDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringToCodePointDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.StringUpperCaseDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.Substring2Descriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SubstringAfterDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SubstringBeforeDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SubstringDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.SwitchCaseDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.UnorderedListConstructorDescriptor;\n-import org.apache.asterix.runtime.evaluators.functions.WordTokensDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.*;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryConcatDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryLengthDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.FindBinaryDescriptor;\n@@ -264,7 +184,9 @@\n import org.apache.asterix.runtime.evaluators.functions.records.FieldAccessNestedEvalFactory;\n import org.apache.asterix.runtime.evaluators.functions.records.GetRecordFieldValueDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.records.GetRecordFieldsDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.records.RecordAddFieldsDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.records.RecordMergeDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.records.RecordRemoveFieldsDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.temporal.AdjustDateTimeForTimeZoneDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.temporal.AdjustTimeForTimeZoneDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.temporal.CalendarDuartionFromDateDescriptor;\n@@ -556,6 +478,8 @@ public void registerRuntimeFunctions() throws AlgebricksException {\n         temp.add(ADayTimeDurationConstructorDescriptor.FACTORY);\n         temp.add(AUUIDFromStringConstructorDescriptor.FACTORY);\n \n+        temp.add(DeepEqualityDescriptor.FACTORY);\n+\n         temp.add(CreateUUIDDescriptor.FACTORY);\n         // Spatial\n         temp.add(CreatePointDescriptor.FACTORY);\n@@ -600,7 +524,10 @@ public void registerRuntimeFunctions() throws AlgebricksException {\n         temp.add(SimilarityJaccardPrefixDescriptor.FACTORY);\n         temp.add(SimilarityJaccardPrefixCheckDescriptor.FACTORY);\n \n+        //Record functions\n         temp.add(RecordMergeDescriptor.FACTORY);\n+        temp.add(RecordAddFieldsDescriptor.FACTORY);\n+        temp.add(RecordRemoveFieldsDescriptor.FACTORY);\n         temp.add(SwitchCaseDescriptor.FACTORY);\n         temp.add(RegExpDescriptor.FACTORY);\n         temp.add(InjectFailureDescriptor.FACTORY);\n@@ -936,6 +863,56 @@ public void infer(ILogicalExpression expr, IFunctionDescriptor fd, IVariableType\n                 ((RecordMergeDescriptor) fd).reset(outType, type0, type1);\n             }\n         });\n+\n+        functionTypeInferers.put(AsterixBuiltinFunctions.DEEP_EQUAL, new FunctionTypeInferer() {\n+\n+            @Override public void infer(ILogicalExpression expr, IFunctionDescriptor fd,\n+                    IVariableTypeEnvironment context) throws AlgebricksException {\n+                AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) expr;\n+                IAType type0 = (IAType) context.getType(f.getArguments().get(0).getValue());\n+                IAType type1 = (IAType) context.getType(f.getArguments().get(1).getValue());\n+                ((DeepEqualityDescriptor) fd).reset(type0, type1);\n+            }\n+        });\n+\n+        functionTypeInferers.put(AsterixBuiltinFunctions.ADD_FIELDS, new FunctionTypeInferer() {\n+\n+            @Override public void infer(ILogicalExpression expr, IFunctionDescriptor fd,\n+                    IVariableTypeEnvironment context) throws AlgebricksException {\n+                AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) expr;\n+                IAType outType = (IAType) context.getType(expr);\n+                IAType type0 = (IAType) context.getType(f.getArguments().get(0).getValue());\n+                ILogicalExpression listExpr = f.getArguments().get(1).getValue();\n+                IAType type1 = (IAType) context.getType(listExpr);\n+                if (type0.getTypeTag().equals(ATypeTag.ANY)) {\n+                    type0 = DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE;\n+                }\n+                if (type1.getTypeTag().equals(ATypeTag.ANY)) {\n+                    type1 = DefaultOpenFieldType.NESTED_OPEN_AORDERED_LIST_TYPE;\n+                }\n+                ((RecordAddFieldsDescriptor) fd).reset(outType, type0, type1);\n+            }\n+        });\n+\n+        functionTypeInferers.put(AsterixBuiltinFunctions.REMOVE_FIELDS, new FunctionTypeInferer() {\n+\n+            @Override public void infer(ILogicalExpression expr, IFunctionDescriptor fd,\n+                    IVariableTypeEnvironment context) throws AlgebricksException {\n+                AbstractFunctionCallExpression f = (AbstractFunctionCallExpression) expr;\n+                IAType outType = (IAType) context.getType(expr);\n+                IAType type0 = (IAType) context.getType(f.getArguments().get(0).getValue());\n+                ILogicalExpression le = f.getArguments().get(1).getValue();\n+                IAType type1 = (IAType) context.getType(le);\n+                if (type0.getTypeTag().equals(ATypeTag.ANY)) {\n+                    type0 = DefaultOpenFieldType.NESTED_OPEN_RECORD_TYPE;\n+                }\n+                if (type1.getTypeTag().equals(ATypeTag.ANY)) {\n+                    type1 = DefaultOpenFieldType.NESTED_OPEN_AORDERED_LIST_TYPE;\n+                }\n+                ((RecordRemoveFieldsDescriptor) fd).reset(outType, type0, type1);\n+            }\n+        });\n+\n         functionTypeInferers.put(AsterixBuiltinFunctions.CAST_RECORD, new FunctionTypeInferer() {\n             @Override\n             public void infer(ILogicalExpression expr, IFunctionDescriptor fd, IVariableTypeEnvironment context)\n@@ -1107,6 +1084,7 @@ public void infer(ILogicalExpression expr, IFunctionDescriptor fd, IVariableType\n                 }\n             }\n         });\n+\n     }\n \n     @Override\n@@ -1234,5 +1212,4 @@ public IBinaryHashFunctionFamilyProvider getBinaryHashFunctionFamilyProvider() {\n     public IPredicateEvaluatorFactoryProvider getPredicateEvaluatorFactoryProvider() {\n         return AqlPredicateEvaluatorFactoryProvider.INSTANCE;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4053f390af30d7d8cbf906fd874291a28a1b1c0b/asterix-runtime/src/main/java/org/apache/asterix/runtime/formats/NonTaggedDataFormat.java",
                "sha": "715bba75abc3b76d0d131652db86e456387a7c87",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-1187, ASTERIXDB-1162 and ASTERIXDB-1252 fixes, plus new internal functions\n\nThis change contains the following updates and fixes:\n- New deep-equality function which also handles numeric equality,\ne.g., [2.0, 2, 1.0] == [2, 2, 1].\n- New internal functions for record manipulation, including add and remove fields from records\n- Fixes for ASTERIXDB-1187: The RecordMergeDescriptor does not fully support\nopen record merge. Merging records with open fields results in \"NullPointerException\".\n- Fixes to address issue ASTERIXDB-1162: dealing with closed or partly closed record\nadded to an open record field.\n- Fixes issue ASTERIXDB-1252: Problems with Autogenerated Key\n\nChange-Id: I3621ebdd71c7cd91b50d77a972ad863cea7fcbc2\nReviewed-on: https://asterix-gerrit.ics.uci.edu/298\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/633acc40043b588a546773115811a49e9329144d",
        "patched_files": [
            "highly-nested-open.java",
            "IARecordBuilder.java",
            "RecordsQueries.java",
            "tiny-social-example.java",
            "deep-equal.java",
            "RecordRemoveFieldsDescriptor.java",
            "RecordAddFieldsTypeComputer.java",
            "ATypeHierarchy.java",
            "DeepEqualAssessor.java",
            "DeepEqualityDescriptor.java",
            "RecordRemoveFieldsEvalFactory.java",
            "ARecordVisitablePointable.java",
            "RecordMergeDescriptor.java",
            "DeepEqualQueries.java",
            "open-records-example.java",
            "documentation-example.java",
            "AqlSerializerDeserializerProvider.java",
            "RecordMergeTypeComputer.java",
            "RecordDeepEqualityChecker.java",
            "DeepEqualityVisitor.java",
            "ListDeepEqualityChecker.java",
            "NonTaggedDataFormat.java",
            "AsterixBuiltinFunctions.java",
            "DeepEqualityVisitorHelper.java",
            "functions.java",
            "RecordRemoveFieldsTypeComputer.java",
            "ARecordCaster.java",
            "RecordAddFieldsDescriptor.java",
            "TypeComputerUtils.java",
            "PointableHelper.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite.java"
        ]
    },
    "asterixdb_4af131a": {
        "bug_id": "asterixdb_4af131a",
        "commit": "https://github.com/apache/asterixdb/commit/4af131ada7f104cd8adddcabd8b5eb928f560f68",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java?ref=4af131ada7f104cd8adddcabd8b5eb928f560f68",
                "deletions": 1,
                "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java",
                "patch": "@@ -55,7 +55,7 @@\n \n     public TestTypedAdapter(ITupleParserFactory parserFactory, ARecordType sourceDatatype, IHyracksTaskContext ctx,\n             Map<String, String> configuration, int partition) throws IOException {\n-        super(null);\n+        super(new TestTypedFeedDataFlowController(ctx));\n         pos = new PipedOutputStream();\n         pis = new PipedInputStream(pos);\n         this.configuration = configuration;\n@@ -150,4 +150,5 @@ public boolean pause() {\n     public boolean resume() {\n         return false;\n     }\n+\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedAdapter.java",
                "sha": "effd59fcc087c3203ebf357718b04e09cb178792",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/asterixdb/blob/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java?ref=4af131ada7f104cd8adddcabd8b5eb928f560f68",
                "deletions": 0,
                "filename": "asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.external.library.adapter;\n+\n+import org.apache.asterix.external.dataflow.AbstractFeedDataFlowController;\n+import org.apache.hyracks.api.comm.IFrameWriter;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+\n+class TestTypedFeedDataFlowController extends AbstractFeedDataFlowController {\n+    TestTypedFeedDataFlowController(IHyracksTaskContext ctx) {\n+        super(ctx, null, 0);\n+    }\n+\n+    @Override\n+    public String getStats() {\n+        throw new UnsupportedOperationException();\n+    }\n+\n+    @Override\n+    public void start(IFrameWriter writer) {\n+        throw new UnsupportedOperationException();\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/4af131ada7f104cd8adddcabd8b5eb928f560f68/asterixdb/asterix-external-data/src/test/java/org/apache/asterix/external/library/adapter/TestTypedFeedDataFlowController.java",
                "sha": "708cdd8488fa8e8071bbe506413831ffd72fa441",
                "status": "added"
            }
        ],
        "message": "[NO ISSUE][EXT] Prevent NPE in close() when using TestTypedAdapter\n\nWARN ...CleanupUtils - Failure closing a closeable resource\njava.lang.NullPointerException: null\n  at org.apache.asterix.external.dataset.adapter.FeedAdapter.close(FeedAdapter.java:63)\n\nChange-Id: If2d62ce00858ff9a9f8033bd21d5da5f1f207c56\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2903\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/309c69c57a4fb79028eeee8efd9e179240299f3d",
        "patched_files": [],
        "repo": "asterixdb",
        "unit_tests": [
            "TestTypedFeedDataFlowController.java",
            "TestTypedAdapter.java"
        ]
    },
    "asterixdb_4eaaff5": {
        "bug_id": "asterixdb_4eaaff5",
        "commit": "https://github.com/apache/asterixdb/commit/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java?ref=4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4",
                "deletions": 2,
                "filename": "hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java",
                "patch": "@@ -333,8 +333,10 @@ protected void doStop() throws InterruptedException {\n         } catch (Exception e) {\n             LOGGER.log(Level.ERROR, \"Error while shutting down http server executor\", e);\n         }\n-        channel.close();\n-        channel.closeFuture().sync();\n+        if (channel != null) {\n+            channel.close();\n+            channel.closeFuture().sync();\n+        }\n     }\n \n     public IServlet getServlet(FullHttpRequest request) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/4eaaff59f6ff53bd6a4adbe0127b7127cbbdd7d4/hyracks-fullstack/hyracks/hyracks-http/src/main/java/org/apache/hyracks/http/server/HttpServer.java",
                "sha": "d9902da942921e10e7da92818644bcb17a50104a",
                "status": "modified"
            }
        ],
        "message": "[NO ISSUE][OTH] Ensure HttpServer Channel is Initialized\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Ensure the HttpServer channel is initialized when stopping\n  the server to avoid NPE.\n\nChange-Id: I5b7403e80f6118f99be46d166c6cfbee8d4305ac\nReviewed-on: https://asterix-gerrit.ics.uci.edu/3389\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>",
        "parent": "https://github.com/apache/asterixdb/commit/a93a5c6fe4f83cef973f5caaa540723c96e29ba2",
        "patched_files": [
            "HttpServer.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "HttpServerTest.java"
        ]
    },
    "asterixdb_54a5070": {
        "bug_id": "asterixdb_54a5070",
        "commit": "https://github.com/apache/asterixdb/commit/54a507007e08cd84652774263bd7e1fe9ede8a0f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f",
                "deletions": 1,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java",
                "patch": "@@ -521,7 +521,7 @@ private void startTasks(Map<String, List<TaskAttemptDescriptor>> taskAttemptMap)\n         }\n     }\n \n-    private void abortJob(List<Exception> exceptions) {\n+    public void abortJob(List<Exception> exceptions) {\n         Set<TaskCluster> inProgressTaskClustersCopy = new HashSet<>(inProgressTaskClusters);\n         for (TaskCluster tc : inProgressTaskClustersCopy) {\n             abortTaskCluster(findLastTaskClusterAttempt(tc), TaskClusterAttempt.TaskClusterStatus.ABORTED);",
                "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/executor/JobExecutor.java",
                "sha": "f18a9179b1c7b3c60804ee20858849059b89ccdf",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f",
                "deletions": 3,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java",
                "patch": "@@ -45,7 +45,6 @@\n import org.apache.hyracks.control.cc.cluster.INodeManager;\n import org.apache.hyracks.control.cc.scheduler.FIFOJobQueue;\n import org.apache.hyracks.control.cc.scheduler.IJobQueue;\n-import org.apache.hyracks.control.cc.work.JobCleanupWork;\n import org.apache.hyracks.control.common.controllers.CCConfig;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -318,8 +317,12 @@ private void executeJobInternal(JobRun run) {\n         try {\n             run.getExecutor().startJob();\n         } catch (Exception e) {\n-            ccs.getWorkQueue().schedule(new JobCleanupWork(ccs.getJobManager(), run.getJobId(), JobStatus.FAILURE,\n-                    Collections.singletonList(e)));\n+            LOGGER.log(Level.SEVERE, \"Aborting \" + run.getJobId() + \" due to failure during job start\", e);\n+            final List<Exception> exceptions = Collections.singletonList(e);\n+            // fail the job then abort it\n+            run.setStatus(JobStatus.FAILURE, exceptions);\n+            // abort job will trigger JobCleanupWork\n+            run.getExecutor().abortJob(exceptions);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/job/JobManager.java",
                "sha": "abf1d5793eb3fb1425184881b2690270f1cc3ecc",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f",
                "deletions": 2,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java",
                "patch": "@@ -18,6 +18,7 @@\n  */\n package org.apache.hyracks.control.cc.work;\n \n+import java.util.ArrayList;\n import java.util.List;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -55,8 +56,12 @@ public void run() {\n         } catch (HyracksException e) {\n             // Fail the job with the caught exception during final completion.\n             JobRun run = jobManager.get(jobId);\n-            run.getExceptions().add(e);\n-            run.setStatus(JobStatus.FAILURE, run.getExceptions());\n+            List<Exception> completionException = new ArrayList<>();\n+            if (run.getExceptions() != null && !run.getExceptions().isEmpty()) {\n+                completionException.addAll(run.getExceptions());\n+            }\n+            completionException.add(0, e);\n+            run.setStatus(JobStatus.FAILURE, completionException);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobCleanupWork.java",
                "sha": "502ac50e510e04c84611e73d7e60c56ad66c04d9",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/asterixdb/blob/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java?ref=54a507007e08cd84652774263bd7e1fe9ede8a0f",
                "deletions": 2,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java",
                "patch": "@@ -18,6 +18,8 @@\n  */\n package org.apache.hyracks.control.cc.work;\n \n+import java.util.ArrayList;\n+import java.util.List;\n import java.util.Set;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -67,8 +69,12 @@ public void runWork() {\n                 jobManager.finalComplete(run);\n             } catch (HyracksException e) {\n                 // Fail the job with the caught exception during final completion.\n-                run.getExceptions().add(e);\n-                run.setStatus(JobStatus.FAILURE, run.getExceptions());\n+                List<Exception> completionException = new ArrayList<>();\n+                if (run.getExceptions() != null && !run.getExceptions().isEmpty()) {\n+                    completionException.addAll(run.getExceptions());\n+                }\n+                completionException.add(0, e);\n+                run.setStatus(JobStatus.FAILURE, completionException);\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/asterixdb/raw/54a507007e08cd84652774263bd7e1fe9ede8a0f/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-cc/src/main/java/org/apache/hyracks/control/cc/work/JobletCleanupNotificationWork.java",
                "sha": "5bf721b394925fa162d43fe65a4a713cf461657e",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2003][FAIL] Abort jobs failing during job start\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Prevent NPE or unmodifiable list in JobCleanupWork and\n  JobletCleanupNotificationWork.\n- Abort job if a failure happens during job start\n\nChange-Id: If6fe4ed9084270f9f22ee4b4c71936d679c8b883\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1904\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>",
        "parent": "https://github.com/apache/asterixdb/commit/0d0a113f40014384bcf54b68235581286c9b2c2b",
        "patched_files": [
            "JobManager.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "JobManagerTest.java"
        ]
    },
    "asterixdb_5952778": {
        "bug_id": "asterixdb_5952778",
        "commit": "https://github.com/apache/asterixdb/commit/595277850582341bead228ce84d411b423a8be35",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/595277850582341bead228ce84d411b423a8be35/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java?ref=595277850582341bead228ce84d411b423a8be35",
                "deletions": 2,
                "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "patch": "@@ -1649,14 +1649,18 @@ public void cleanup(String testCase, List<String> badtestcases) throws Exception\n             InputStream resultStream = executeQueryService(\n                     \"select dv.DataverseName from Metadata.`Dataverse` as dv order by dv.DataverseName;\",\n                     getEndpoint(Servlets.QUERY_SERVICE), OutputFormat.CLEAN_JSON);\n-            String out = IOUtils.toString(resultStream);\n+            String out = IOUtils.toString(resultStream, StandardCharsets.UTF_8);\n             ObjectMapper om = new ObjectMapper();\n             om.setConfig(om.getDeserializationConfig().with(DeserializationFeature.ACCEPT_EMPTY_STRING_AS_NULL_OBJECT));\n             JsonNode result;\n             try {\n                 result = om.readValue(out, ObjectNode.class).get(\"results\");\n             } catch (JsonMappingException e) {\n-                result = om.createArrayNode();\n+                LOGGER.warn(\"error mapping response '{}' to json\", out, e);\n+                result = null;\n+            }\n+            if (result == null) {\n+                return;\n             }\n             for (int i = 0; i < result.size(); i++) {\n                 JsonNode json = result.get(i);",
                "raw_url": "https://github.com/apache/asterixdb/raw/595277850582341bead228ce84d411b423a8be35/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "sha": "b75df995e0aac89e861e4ad6ad5741f8479a313e",
                "status": "modified"
            }
        ],
        "message": "[NO ISSUE][TEST] Avoid NPE on empty result from cleanup query\n\nChange-Id: Ic645b0f2c5ff29a6178cfd784fcbffb331386e90\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2406\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/b227a0d37893831f94a971cc116600860d8d23d7",
        "patched_files": [],
        "repo": "asterixdb",
        "unit_tests": [
            "TestExecutor.java"
        ]
    },
    "asterixdb_640705a": {
        "bug_id": "asterixdb_640705a",
        "commit": "https://github.com/apache/asterixdb/commit/640705a79a58518dd78dc60154445868a20558d9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp?ref=640705a79a58518dd78dc60154445868a20558d9",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp",
                "patch": "@@ -28,5 +28,5 @@ declare function abc(y) {\n };\n \n let z =y\n-select element z\n+select element z;\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/user-defined-functions/udf30/udf30.1.query.sqlpp",
                "sha": "ac2562ff428d99b7b7f9dc48c2b1b3c958abe46e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=640705a79a58518dd78dc60154445868a20558d9",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -6534,7 +6534,7 @@\n     <test-case FilePath=\"user-defined-functions\">\n       <compilation-unit name=\"udf30\">\n         <output-dir compare=\"Text\">udf30</output-dir>\n-        <expected-error>Error:</expected-error>\n+        <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Undefined alias (variable) reference for identifier y</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"user-defined-functions\">",
                "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "f2d57047e721b0196f7a8997b9f413784d72d3a4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java?ref=640705a79a58518dd78dc60154445868a20558d9",
                "deletions": 1,
                "filename": "asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java",
                "patch": "@@ -274,7 +274,7 @@ public Expression visit(IndependentSubquery independentSubquery, ILangExpression\n         // variables defined in the parent scope.\n         Scope scope = new Scope(scopeChecker, scopeChecker.getCurrentScope(), true);\n         scopeChecker.pushExistingScope(scope);\n-        independentSubquery.getExpr().accept(this, arg);\n+        independentSubquery.setExpr(independentSubquery.getExpr().accept(this, arg));\n         scopeChecker.removeCurrentScope();\n         return independentSubquery;\n     }",
                "raw_url": "https://github.com/apache/asterixdb/raw/640705a79a58518dd78dc60154445868a20558d9/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/visitor/base/AbstractSqlppExpressionScopingVisitor.java",
                "sha": "dfb15b0646f303a130764037d866f648855ae3ba",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-1515: fix the NPE.\n\nChange-Id: I39412b02d503866588990020af1ea3252e83e1a0\nReviewed-on: https://asterix-gerrit.ics.uci.edu/976\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/7f30303c3c38a08078b8f085f3c183c881aac64d",
        "patched_files": [
            "udf30.java",
            "AbstractSqlppExpressionScopingVisitor.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    },
    "asterixdb_7722e5d": {
        "bug_id": "asterixdb_7722e5d",
        "commit": "https://github.com/apache/asterixdb/commit/7722e5d4d27120685b7a2b0076899409746c2027",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java?ref=7722e5d4d27120685b7a2b0076899409746c2027",
                "deletions": 0,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "patch": "@@ -118,6 +118,10 @@ public static void validateFilterField(ARecordType recordType, List<String> filt\n             }\n             List<String> fieldName = partitioningExprs.get(0);\n             IAType fieldType = recType.getSubFieldType(fieldName);\n+            if (fieldType == null) {\n+                String unTypeField = fieldName.get(0) == null ? \"\" : fieldName.get(0);\n+                throw new CompilationException(ErrorCode.COMPILATION_FIELD_NOT_FOUND, unTypeField);\n+            }\n             partitioningExprTypes.add(fieldType);\n             ATypeTag pkTypeTag = fieldType.getTypeTag();\n             if (pkTypeTag != ATypeTag.UUID) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "sha": "cda9dd325e9dbf9e4f2aae382e7e773c48b7b409",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql?ref=7722e5d4d27120685b7a2b0076899409746c2027",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+// try to create autogenerated key on field not mentioned in type, should fail\n+\n+drop dataverse test if exists;\n+create dataverse test;\n+\n+use dataverse test;\n+\n+create type DBLPType as open {\n+  id: uuid,\n+  dblpid: string,\n+  title: string,\n+  authors: string,\n+  misc: string\n+}\n+\n+create dataset DBLP(DBLPType) primary key not_id autogenerated;",
                "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries/dml/load-with-autogenerated-no-field/load-with-autogenerated-no-field.1.ddl.aql",
                "sha": "a0764a01779c2858dbba4c2f943f0e2a8b77e48d",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp?ref=7722e5d4d27120685b7a2b0076899409746c2027",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+\n+use test;\n+\n+\n+create type test.DBLPType as\n+ closed {\n+  id : uuid,\n+  title : string,\n+  authors : string\n+};\n+\n+create dataset DBLP(DBLPType) primary key not_id autogenerated ;\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/dml/load-with-autogenerated-no-field/load-with-autogenerated-pk_txt_01.1.ddl.sqlpp",
                "sha": "b04d413aca5c1b6313e4521a5ac6c1ec6603037b",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=7722e5d4d27120685b7a2b0076899409746c2027",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "patch": "@@ -1940,6 +1940,12 @@\n         <output-dir compare=\"Text\">load-with-autogenerated-pk_csv_02</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"dml\">\n+      <compilation-unit name=\"load-with-autogenerated-no-field\">\n+        <output-dir compare=\"Text\">load-with-autogenerated-no-field</output-dir>\n+        <expected-error>ASX1014: Field \"not_id\" is not found [CompilationException]</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"dml\">\n       <compilation-unit name=\"load-with-index\">\n         <output-dir compare=\"Text\">load-with-index</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "sha": "8987a7fd5428af543979a9eddf0a940447185491",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=7722e5d4d27120685b7a2b0076899409746c2027",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -1886,6 +1886,12 @@\n         <output-dir compare=\"Text\">load-with-autogenerated-pk_csv_02</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"dml\">\n+      <compilation-unit name=\"load-with-autogenerated-no-field\">\n+        <output-dir compare=\"Text\">load-with-autogenerated-no-field</output-dir>\n+        <expected-error>org.apache.asterix.common.exceptions.AsterixException: ASX1014: Field \"not_id\" is not found</expected-error>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"dml\">\n       <compilation-unit name=\"insert-return-records\">\n         <output-dir compare=\"Text\">insert-return-records</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/7722e5d4d27120685b7a2b0076899409746c2027/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "484e39557c29ca076b1371f3b0dee858c3343ea6",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2159][API] ValidateUtil throws NPE\n\n- user model changes: no\n- storage format changes: no\n- interface change: no\n\nDetails:\n\nFix a case where ValidateUtil throws an NPE instead of using error codes.\n\nChange-Id: If467e484e01e9085f2eb8a943a4178b44a384a02\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2137\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>",
        "parent": "https://github.com/apache/asterixdb/commit/8b6578add5132b1e9ad82545d49cc15fff79d24a",
        "patched_files": [
            "load-with-autogenerated-no-field.java",
            "ValidateUtil.java",
            "load-with-autogenerated-pk_txt_01.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java",
            "testsuite.java"
        ]
    },
    "asterixdb_8026b2d": {
        "bug_id": "asterixdb_8026b2d",
        "commit": "https://github.com/apache/asterixdb/commit/8026b2dc95b0b48949b192409be97ec40ac3fa2d",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/asterixdb/blob/8026b2dc95b0b48949b192409be97ec40ac3fa2d/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/nc/RecoveryManager.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/nc/RecoveryManager.java?ref=8026b2dc95b0b48949b192409be97ec40ac3fa2d",
                "deletions": 12,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/nc/RecoveryManager.java",
                "patch": "@@ -296,7 +296,7 @@ private synchronized void startRecoveryRedoPhase(Set<Integer> partitions, ILogRe\n                 ((INcApplicationContext) (serviceCtx.getApplicationContext())).getIndexCheckpointManagerProvider();\n \n         Map<Long, LocalResource> resourcesMap = localResourceRepository.loadAndGetAllResources();\n-        Map<Long, Long> resourceId2MaxLSNMap = new HashMap<>();\n+        final Map<Long, Long> resourceId2MaxLSNMap = new HashMap<>();\n         TxnEntityId tempKeyTxnEntityId = new TxnEntityId(-1, -1, -1, null, -1, false);\n \n         ILogRecord logRecord = null;\n@@ -399,19 +399,25 @@ private synchronized void startRecoveryRedoPhase(Set<Integer> partitions, ILogRe\n                             // we only need to flush open indexes here (opened by previous update records)\n                             // if an index has no ongoing updates, then it's memory component must be empty\n                             // and there is nothing to flush\n-                            for (IndexInfo iInfo : dsInfo.getIndexes().values()) {\n+                            for (final IndexInfo iInfo : dsInfo.getIndexes().values()) {\n                                 if (iInfo.isOpen() && iInfo.getPartition() == partition) {\n-                                    maxDiskLastLsn = resourceId2MaxLSNMap.get(iInfo.getResourceId());\n-                                    index = iInfo.getIndex();\n-                                    if (logRecord.getLSN() > maxDiskLastLsn\n-                                            && !index.isCurrentMutableComponentEmpty()) {\n-                                        // schedule flush\n-                                        redoFlush(index, logRecord);\n-                                        redoCount++;\n+                                    Long maxLsnBeforeFlush = resourceId2MaxLSNMap.get(iInfo.getResourceId());\n+                                    if (maxLsnBeforeFlush != null) {\n+                                        // If there was at least one update to the resource.\n+                                        // IMPORTANT: Don't remove the check above\n+                                        // This check is to support indexes without transaction logs\n+                                        maxDiskLastLsn = maxLsnBeforeFlush;\n+                                        index = iInfo.getIndex();\n+                                        if (logRecord.getLSN() > maxDiskLastLsn\n+                                                && !index.isCurrentMutableComponentEmpty()) {\n+                                            // schedule flush\n+                                            redoFlush(index, logRecord);\n+                                            redoCount++;\n+                                        } else {\n+                                            // TODO: update checkpoint file?\n+                                        }\n                                     } else {\n-                                        // otherwise, do nothing since this component had no records when flush was\n-                                        // scheduled.. TODO: update checkpoint file? and do the\n-                                        // lsn checks from the checkpoint file\n+                                        // TODO: update checkpoint file?\n                                     }\n                                 }\n                             }",
                "raw_url": "https://github.com/apache/asterixdb/raw/8026b2dc95b0b48949b192409be97ec40ac3fa2d/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/nc/RecoveryManager.java",
                "sha": "adf9960150c56b34814e4291f41dcfde8c30af70",
                "status": "modified"
            }
        ],
        "message": "[NO ISSUE][STO] Skip flush recovery of empty resources\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Before this change, recovery would throw a NullPointerException\n  on recovery of a flush operation on a component without\n  update logs.\n- Since this can happen, we simply check for the case and skip the\n  flush.\n\nChange-Id: Ib01d7513f43830109632760860d34ca3dcddeaee\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2844\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Murtadha Hubail <mhubail@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/6cd3127c4e492b73c29f81763fae70099f30e20e",
        "patched_files": [
            "RecoveryManager.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "RecoveryManagerTest.java"
        ]
    },
    "asterixdb_84ddcb9": {
        "bug_id": "asterixdb_84ddcb9",
        "commit": "https://github.com/apache/asterixdb/commit/84ddcb998e908cf4f8f27275aa6855063c14b3f0",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/asterixdb/blob/84ddcb998e908cf4f8f27275aa6855063c14b3f0/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java?ref=84ddcb998e908cf4f8f27275aa6855063c14b3f0",
                "deletions": 3,
                "filename": "hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java",
                "patch": "@@ -145,7 +145,6 @@ protected void runTest(JobSpecification spec) throws Exception {\n         hcc.waitForCompletion(jobId);\n     }\n \n-\n     protected List<String> readResults(JobSpecification spec, JobId jobId, ResultSetId resultSetId) throws Exception {\n         int nReaders = 1;\n \n@@ -190,13 +189,18 @@ protected boolean runTestAndCompareResults(JobSpecification spec, String[] expec\n             results = readResults(spec, jobId, spec.getResultSetIds().get(i));\n             BufferedReader expectedFile = new BufferedReader(new FileReader(expectedFileNames[i]));\n \n+            //We're expecting some sort of result.\n+            Assert.assertTrue(results != null);\n+            Assert.assertTrue(results.size() > 0);\n+\n             String expectedLine, actualLine;\n             int j = 0;\n             while ((expectedLine = expectedFile.readLine()) != null) {\n                 actualLine = results.get(j).trim();\n                 Assert.assertEquals(expectedLine, actualLine);\n                 j++;\n             }\n+            //We also expect the same amount of results.\n             Assert.assertEquals(j, results.size());\n             expectedFile.close();\n         }\n@@ -212,7 +216,7 @@ protected void runTestAndStoreResult(JobSpecification spec, File file) throws Ex\n         List<String> results;\n         for (int i = 0; i < spec.getResultSetIds().size(); i++) {\n             results = readResults(spec, jobId, spec.getResultSetIds().get(i));\n-            for(String str : results) {\n+            for (String str : results) {\n                 output.write(str);\n             }\n         }\n@@ -229,4 +233,4 @@ protected File createTempFile() throws IOException {\n         outputFiles.add(tempFile);\n         return tempFile;\n     }\n-}\n\\ No newline at end of file\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/84ddcb998e908cf4f8f27275aa6855063c14b3f0/hyracks/hyracks-examples/hyracks-integration-tests/src/test/java/org/apache/hyracks/tests/integration/AbstractIntegrationTest.java",
                "sha": "7a339b774c393ab10d8df1f01b11c56961d45d13",
                "status": "modified"
            }
        ],
        "message": "Fix for ASTERIXDB-1200\n\nFixes an issue where in the Hyracks integration tests,\nif the result size is 0, a NPE is thrown instead of\nan assert passing or failing.\n\nChange-Id: Ib519882b9cbca941addcd66232c176a2eaeecc4b\nReviewed-on: https://asterix-gerrit.ics.uci.edu/524\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/c10677f36fd1de1ce1a984419e29718a1cd82f55",
        "patched_files": [],
        "repo": "asterixdb",
        "unit_tests": [
            "AbstractIntegrationTest.java"
        ]
    },
    "asterixdb_89e6a93": {
        "bug_id": "asterixdb_89e6a93",
        "commit": "https://github.com/apache/asterixdb/commit/89e6a93277205a9dbc76c18e249919a745d224d2",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/asterixdb/blob/89e6a93277205a9dbc76c18e249919a745d224d2/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java?ref=89e6a93277205a9dbc76c18e249919a745d224d2",
                "deletions": 3,
                "filename": "hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java",
                "patch": "@@ -214,9 +214,7 @@ public void next() throws HyracksDataException {\n     public void close() throws HyracksDataException {\n         if (lsmHarness != null) {\n             try {\n-                for (int i = 0; i < rangeCursors.length; i++) {\n-                    rangeCursors[i].close();\n-                }\n+                closeCursors();\n                 rangeCursors = null;\n             } finally {\n                 lsmHarness.endSearch(opCtx);\n@@ -265,4 +263,13 @@ public boolean isExclusiveLatchNodes() {\n         return false;\n     }\n \n+    private void closeCursors() throws HyracksDataException {\n+        if (rangeCursors != null) {\n+            for (int i = 0; i < rangeCursors.length; ++i) {\n+                if (rangeCursors[i] != null) {\n+                    rangeCursors[i].close();\n+                }\n+            }\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/89e6a93277205a9dbc76c18e249919a745d224d2/hyracks-fullstack/hyracks/hyracks-storage-am-lsm-btree/src/main/java/org/apache/hyracks/storage/am/lsm/btree/impls/LSMBTreePointSearchCursor.java",
                "sha": "0f7aa38826cf6e122aaab0193a0f9b91f1e4a0a0",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2135][IDX] Prevent NPE in LSMBTreePointSearchCursor\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Prevent NPE on LSMBTreePointSearchCursor.close\n\nChange-Id: I062c1200d9c5a1a574a1ccdb32be0ac011406d92\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2081\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Ian Maxon <imaxon@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/536c707dc2ffc92a9e2f331b8765697367d9ab3a",
        "patched_files": [
            "LSMBTreePointSearchCursor.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "LSMBTreePointSearchCursorTest.java"
        ]
    },
    "asterixdb_91384f6": {
        "bug_id": "asterixdb_91384f6",
        "commit": "https://github.com/apache/asterixdb/commit/91384f6ca8130bc30d930e437a7b48d525f21312",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java?ref=91384f6ca8130bc30d930e437a7b48d525f21312",
                "deletions": 1,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java",
                "patch": "@@ -84,6 +84,7 @@\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalPlan;\n+import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n import org.apache.hyracks.algebricks.core.algebra.base.LogicalVariable;\n import org.apache.hyracks.algebricks.core.algebra.expressions.AbstractFunctionCallExpression;\n import org.apache.hyracks.algebricks.core.algebra.expressions.AggregateFunctionCallExpression;\n@@ -683,7 +684,8 @@ protected ILogicalExpression translateVariableRef(VariableExpr varExpr) throws C\n         LogicalVariable returnVar;\n         ILogicalOperator returnOperator;\n         SourceLocation sourceLoc = returnExpr.getSourceLocation();\n-        if (returnExpr.getKind() == Kind.VARIABLE_EXPRESSION) {\n+        if (returnExpr.getKind() == Kind.VARIABLE_EXPRESSION\n+                && eo.first.getExpressionTag() == LogicalExpressionTag.VARIABLE) {\n             VariableExpr varExpr = (VariableExpr) returnExpr;\n             returnOperator = eo.second.getValue();\n             returnVar = context.getVar(varExpr.getVar().getId());",
                "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/SqlppExpressionToPlanTranslator.java",
                "sha": "033c92f444c6f744968aee228b9235a010012c30",
                "status": "modified"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp?ref=91384f6ca8130bc30d930e437a7b48d525f21312",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description  : Test fix for ASTERIXDB-2418\n+ * Expected Res : Success\n+ * Date         : Jul 2018\n+ */\n+\n+// requesttype=application/json\n+\n+// param $p_int:json=42\n+\n+select value $p_int\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/statement-params/named_04/named_04.1.query.sqlpp",
                "sha": "720c2f2becd1d0c6a720d47204ef23edecea948c",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm?ref=91384f6ca8130bc30d930e437a7b48d525f21312",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm",
                "patch": "@@ -0,0 +1 @@\n+42\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/results/statement-params/named_04/named_04.1.adm",
                "sha": "f70d7bba4ae1f07682e0358bd7a2068094fc023b",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=91384f6ca8130bc30d930e437a7b48d525f21312",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -6167,6 +6167,11 @@\n         <output-dir compare=\"Text\">named_03</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"statement-params\">\n+      <compilation-unit name=\"named_04\">\n+        <output-dir compare=\"Text\">named_04</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"statement-params\">\n       <compilation-unit name=\"positional_01\">\n         <output-dir compare=\"Text\">positional_01</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/91384f6ca8130bc30d930e437a7b48d525f21312/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "8b0f5a40fcfe51fb3801bc714bf0291af2ab1c99",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-2418][COMP] Fix NPE in SqlppExpressionToPlanTranslator\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE in SqlppExpressionToPlanTranslator for query:\u2028\n  select value $param\n\nChange-Id: Ie3207d077480a90fd00fdd59923ea76e2ca6db25\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2789\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Taewoo Kim <wangsaeu@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/4547639bb4fd8aa098ea5402da445b1c5e36a991",
        "patched_files": [
            "named_04.java",
            "SqlppExpressionToPlanTranslator.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    },
    "asterixdb_98de3eb": {
        "bug_id": "asterixdb_98de3eb",
        "commit": "https://github.com/apache/asterixdb/commit/98de3eb14558ee64da8f2bab4a840dab119df401",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/active/ActiveEntityEventsListener.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/active/ActiveEntityEventsListener.java?ref=98de3eb14558ee64da8f2bab4a840dab119df401",
                "deletions": 2,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/active/ActiveEntityEventsListener.java",
                "patch": "@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.EnumSet;\n-import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.concurrent.ExecutorService;\n@@ -112,7 +111,6 @@ public ActiveEntityEventsListener(IStatementExecutor statementExecutor, ICcAppli\n         this.appCtx = appCtx;\n         this.clusterStateManager = appCtx.getClusterStateManager();\n         this.metadataProvider = new MetadataProvider(appCtx, null);\n-        metadataProvider.setConfig(new HashMap<>());\n         this.hcc = hcc;\n         this.entityId = entityId;\n         this.datasets = datasets;",
                "raw_url": "https://github.com/apache/asterixdb/raw/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/active/ActiveEntityEventsListener.java",
                "sha": "e30272cbf519c3d4b2dffde50644aff2177146b5",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java?ref=98de3eb14558ee64da8f2bab4a840dab119df401",
                "deletions": 2,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "patch": "@@ -261,13 +261,13 @@ public void compileAndExecute(IHyracksClientConnection hcc, IHyracksDataset hdc,\n         FileSplit outputFile = null;\n         IAWriterFactory writerFactory = PrinterBasedWriterFactory.INSTANCE;\n         IResultSerializerFactoryProvider resultSerializerFactoryProvider = ResultSerializerFactoryProvider.INSTANCE;\n-        Map<String, String> config = new HashMap<>();\n         /* Since the system runs a large number of threads, when HTTP requests don't return, it becomes difficult to\n          * find the thread running the request to determine where it has stopped.\n          * Setting the thread name helps make that easier\n          */\n         String threadName = Thread.currentThread().getName();\n         Thread.currentThread().setName(QueryTranslator.class.getSimpleName());\n+        Map<String, String> config = new HashMap<>();\n         try {\n             for (Statement stmt : statements) {\n                 if (sessionConfig.is(SessionConfig.FORMAT_HTML)) {\n@@ -276,10 +276,10 @@ public void compileAndExecute(IHyracksClientConnection hcc, IHyracksDataset hdc,\n                 validateOperation(appCtx, activeDataverse, stmt);\n                 rewriteStatement(stmt); // Rewrite the statement's AST.\n                 MetadataProvider metadataProvider = new MetadataProvider(appCtx, activeDataverse);\n+                metadataProvider.getConfig().putAll(config);\n                 metadataProvider.setWriterFactory(writerFactory);\n                 metadataProvider.setResultSerializerFactoryProvider(resultSerializerFactoryProvider);\n                 metadataProvider.setOutputFile(outputFile);\n-                metadataProvider.setConfig(config);\n                 switch (stmt.getKind()) {\n                     case Statement.Kind.SET:\n                         handleSetStatement(stmt, config);",
                "raw_url": "https://github.com/apache/asterixdb/raw/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "sha": "b97c0146ee4dfc70b86f1a17cb5e801a74ed449d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/active/ActiveEventsListenerTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/active/ActiveEventsListenerTest.java?ref=98de3eb14558ee64da8f2bab4a840dab119df401",
                "deletions": 5,
                "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/active/ActiveEventsListenerTest.java",
                "patch": "@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.EnumSet;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.concurrent.ExecutorService;\n import java.util.concurrent.Executors;\n@@ -117,7 +116,6 @@ public void setUp() throws Exception {\n         Mockito.when(ccService.getExecutor()).thenReturn(executor);\n         locations = new AlgebricksAbsolutePartitionConstraint(nodes);\n         metadataProvider = new MetadataProvider(appCtx, null);\n-        metadataProvider.setConfig(new HashMap<>());\n         clusterController = new TestClusterControllerActor(\"CC\", handler, allDatasets);\n         nodeControllers = new TestNodeControllerActor[2];\n         nodeControllers[0] = new TestNodeControllerActor(nodes[0], clusterController);\n@@ -133,7 +131,6 @@ public void setUp() throws Exception {\n \n     TestUserActor newUser(String name, CcApplicationContext appCtx) {\n         MetadataProvider actorMdProvider = new MetadataProvider(appCtx, null);\n-        actorMdProvider.setConfig(new HashMap<>());\n         return new TestUserActor(\"User: \" + name, actorMdProvider, clusterController);\n     }\n \n@@ -1387,8 +1384,6 @@ public void testSuspendedAllActivities() throws Exception {\n             Mockito.when(ccService.getExecutor()).thenReturn(executor);\n             Mockito.when(ccAppCtx.getStorageComponentProvider()).thenReturn(componentProvider);\n             AlgebricksAbsolutePartitionConstraint locations = new AlgebricksAbsolutePartitionConstraint(nodes);\n-            MetadataProvider metadataProvider = new MetadataProvider(ccAppCtx, null);\n-            metadataProvider.setConfig(new HashMap<>());\n             additionalListeners[i] = listener = new TestEventsListener(clusterController, nodeControllers, jobIdFactory,\n                     entityId, new ArrayList<>(allDatasets), statementExecutor, ccAppCtx, hcc, locations,\n                     new InfiniteRetryPolicyFactory());",
                "raw_url": "https://github.com/apache/asterixdb/raw/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/active/ActiveEventsListenerTest.java",
                "sha": "a256bcf4eb8967c07e1991c217a73440ff86d200",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/MetadataProvider.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/MetadataProvider.java?ref=98de3eb14558ee64da8f2bab4a840dab119df401",
                "deletions": 5,
                "filename": "asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/MetadataProvider.java",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n@@ -143,10 +144,10 @@\n     private final StorageProperties storageProperties;\n     private final Dataverse defaultDataverse;\n     private final LockList locks;\n+    private final Map<String, String> config;\n \n     private MetadataTransactionContext mdTxnCtx;\n     private boolean isWriteTransaction;\n-    private Map<String, String> config;\n     private IAWriterFactory writerFactory;\n     private FileSplit outputFile;\n     private boolean asyncResults;\n@@ -163,16 +164,13 @@ public MetadataProvider(ICcApplicationContext appCtx, Dataverse defaultDataverse\n         this.storageComponentProvider = appCtx.getStorageComponentProvider();\n         storageProperties = appCtx.getStorageProperties();\n         locks = new LockList();\n+        config = new HashMap<>();\n     }\n \n     public String getPropertyValue(String propertyName) {\n         return config.get(propertyName);\n     }\n \n-    public void setConfig(Map<String, String> config) {\n-        this.config = config;\n-    }\n-\n     public void disableBlockingOperator() {\n         blockingOperatorDisabled = true;\n     }",
                "raw_url": "https://github.com/apache/asterixdb/raw/98de3eb14558ee64da8f2bab4a840dab119df401/asterixdb/asterix-metadata/src/main/java/org/apache/asterix/metadata/declared/MetadataProvider.java",
                "sha": "8971a9064294a60c88a1476458a62c35a109def1",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2036] Make MetadataProvider Config final\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\ndetails:\n- Make config map final to avoid NullPointerExceptions\n\nChange-Id: I25ed6433a4e1a267deeedbf22d09c119704e8d7d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1937\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Xikui Wang <xkkwww@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/122a73693e4a6a2484936ed86967e843d4dfa4e1",
        "patched_files": [
            "MetadataProvider.java",
            "ActiveEntityEventsListener.java",
            "QueryTranslator.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "ActiveEventsListenerTest.java"
        ]
    },
    "asterixdb_9d63f62": {
        "bug_id": "asterixdb_9d63f62",
        "commit": "https://github.com/apache/asterixdb/commit/9d63f629aedd21e891a892d18b22811586da1818",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "patch": "@@ -2138,6 +2138,12 @@ private void handleConnectFeedStatement(MetadataProvider metadataProvider, State\n             ARecordType outputType = FeedMetadataUtil.getOutputType(feed, feed.getAdapterConfiguration(),\n                     ExternalDataConstants.KEY_TYPE_NAME);\n             List<FunctionSignature> appliedFunctions = cfs.getAppliedFunctions();\n+            for (FunctionSignature func : appliedFunctions) {\n+                if (MetadataManager.INSTANCE.getFunction(mdTxnCtx, func) == null) {\n+                    throw new CompilationException(ErrorCode.FEED_CONNECT_FEED_APPLIED_INVALID_FUNCTION,\n+                            func.getName());\n+                }\n+            }\n             fc = MetadataManager.INSTANCE.getFeedConnection(metadataProvider.getMetadataTxnContext(), dataverseName,\n                     feedName, datasetName);\n             if (fc != null) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/translator/QueryTranslator.java",
                "sha": "6a2b4e0bef609b8dfd0f89c4c0448f345592f995",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql",
                "patch": "@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop dataverse externallibtest if exists;\n+create dataverse externallibtest;\n+use dataverse externallibtest;\n+\n+create type TweetInputType as closed {\n+  id: string,\n+  username : string,\n+  location : string,\n+  text : string,\n+  timestamp : string\n+}\n+\n+create feed TweetFeed\n+using localfs\n+((\"type-name\"=\"TweetInputType\"),\n+(\"path\"=\"asterix_nc1://data/twitter/obamatweets.adm\"),\n+(\"format\"=\"adm\"));\n+\n+create dataset TweetsFeedIngest(TweetInputType)\n+primary key id;",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.1.ddl.aql",
                "sha": "d294772f40f1b318fa695b8675b1614570b50424",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+use dataverse externallibtest;\n+\n+set wait-for-completion-feed \"true\";\n+\n+connect feed TweetFeed to dataset TweetsFeedIngest\n+apply function function_undefined;\n+\n+start feed TweetFeed;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/queries/feeds/feed-with-undefined-function/feed-with-undefined-function.2.update.aql",
                "sha": "a2a00babf6fcd35188c8ce90c2721008b468fee6",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/results/feeds/feed-with-undefined-function/feed-with-external-function.1.adm",
                "sha": "e69de29bb2d1d6434b8b29ae775ad8c2e48c5391",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "patch": "@@ -273,6 +273,12 @@\n         <output-dir compare=\"Text\">record-reader-with-malformed-input-stream</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"feeds\">\n+      <compilation-unit name=\"feed-with-undefined-function\">\n+        <output-dir compare=\"Text\">feed-with-undefined-function</output-dir>\n+        <expected-error>Cannot find function</expected-error>\n+      </compilation-unit>\n+    </test-case>\n   </test-group>\n   <test-group name=\"upsert\">\n     <test-case FilePath=\"upsert\">",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "sha": "83d55813439079bf9331a6f02574d084bc95f19e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 0,
                "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "patch": "@@ -179,6 +179,7 @@\n     public static final int FEED_METADATA_UTIL_UNEXPECTED_FEED_DATATYPE = 3080;\n     public static final int FEED_METADATA_SOCKET_ADAPTOR_SOCKET_NOT_PROPERLY_CONFIGURED = 3081;\n     public static final int FEED_METADATA_SOCKET_ADAPTOR_SOCKET_INVALID_HOST_NC = 3082;\n+    public static final int FEED_CONNECT_FEED_APPLIED_INVALID_FUNCTION = 3087;\n \n     private ErrorCode() {\n     }",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "sha": "23d67278de9eee563afc5a1d786cf64ed36d1efe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 1,
                "filename": "asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "patch": "@@ -167,4 +167,5 @@\n 3079 = Cannot register runtime, active manager has been shutdown\n 3080 = Unexpected feed datatype '%1$s'\n 3081 = socket is not properly configured\n-3082 = \"Invalid %1$s %2$s as it is not part of the AsterixDB cluster. Valid choices are %3$s\"\n\\ No newline at end of file\n+3082 = \"Invalid %1$s %2$s as it is not part of the AsterixDB cluster. Valid choices are %3$s\"\n+3087 = Cannot find function %1$s\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "sha": "e1a54cf7024b5c5bc1db6db694a8f115cc8bc771",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 7,
                "filename": "asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj",
                "patch": "@@ -818,11 +818,10 @@ boolean IfNotExists() throws ParseException:\n     }\n }\n \n-List<FunctionSignature> ApplyFunction() throws ParseException:\n+void ApplyFunction(List<FunctionSignature> funcSigs) throws ParseException:\n {\n   FunctionName functioName = null;\n   String fqFunctionName = null;\n-  List<FunctionSignature> funcSigs = new ArrayList<FunctionSignature>();\n }\n {\n   <APPLY> <FUNCTION> functioName = FunctionName()\n@@ -837,9 +836,6 @@ List<FunctionSignature> ApplyFunction() throws ParseException:\n       funcSigs.add(new FunctionSignature(functioName.dataverse, fqFunctionName, 1));\n     }\n   )*\n-    {\n-        return funcSigs;\n-    }\n }\n \n String GetPolicy() throws ParseException:\n@@ -1167,14 +1163,14 @@ Statement FeedStatement() throws ParseException:\n   Pair<Identifier,Identifier> datasetNameComponents = null;\n \n   Map<String,String> configuration = null;\n-  List<FunctionSignature> appliedFunctions = null;\n+  List<FunctionSignature> appliedFunctions = new ArrayList<FunctionSignature>();\n   Statement stmt = null;\n   String policy = null;\n }\n {\n   (\n     <CONNECT> <FEED> feedNameComponents = QualifiedName() <TO> <DATASET> datasetNameComponents = QualifiedName()\n-    (appliedFunctions = ApplyFunction())? (policy = GetPolicy())?\n+    (ApplyFunction(appliedFunctions))? (policy = GetPolicy())?\n       {\n         stmt = new ConnectFeedStatement(feedNameComponents, datasetNameComponents, appliedFunctions, policy, getVarCounter());\n       }",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-aql/src/main/javacc/AQL.jj",
                "sha": "b92805b76962166fe3ee60ef12fae19f884e3421",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj?ref=9d63f629aedd21e891a892d18b22811586da1818",
                "deletions": 7,
                "filename": "asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj",
                "patch": "@@ -840,11 +840,10 @@ boolean IfNotExists() throws ParseException:\n     }\n }\n \n-List<FunctionSignature> ApplyFunction() throws ParseException:\n+void ApplyFunction(List<FunctionSignature> funcSigs) throws ParseException:\n {\n   FunctionName functioName = null;\n   String fqFunctionName = null;\n-  List<FunctionSignature> funcSigs = new ArrayList<FunctionSignature>();\n }\n {\n   <APPLY> <FUNCTION> functioName = FunctionName()\n@@ -859,9 +858,6 @@ List<FunctionSignature> ApplyFunction() throws ParseException:\n         funcSigs.add(new FunctionSignature(functioName.dataverse, fqFunctionName, 1));\n       }\n   )*\n-    {\n-        return funcSigs;\n-    }\n }\n \n String GetPolicy() throws ParseException:\n@@ -1254,14 +1250,14 @@ Statement ConnectStatement() throws ParseException:\n   Pair<Identifier,Identifier> datasetNameComponents = null;\n \n   Map<String,String> configuration = null;\n-  List<FunctionSignature> appliedFunctions = null;\n+  List<FunctionSignature> appliedFunctions = new ArrayList<FunctionSignature>();\n   Statement stmt = null;\n   String policy = null;\n }\n {\n   (\n     <FEED> feedNameComponents = QualifiedName() <TO> Dataset() datasetNameComponents = QualifiedName()\n-    (appliedFunctions = ApplyFunction())?  (policy = GetPolicy())?\n+    (ApplyFunction(appliedFunctions))?  (policy = GetPolicy())?\n       {\n         stmt = new ConnectFeedStatement(feedNameComponents, datasetNameComponents, appliedFunctions,\n          policy, getVarCounter());",
                "raw_url": "https://github.com/apache/asterixdb/raw/9d63f629aedd21e891a892d18b22811586da1818/asterixdb/asterix-lang-sqlpp/src/main/javacc/SQLPP.jj",
                "sha": "69bfbc5242aa0c5e15f93e3429b32e556f34cdcc",
                "status": "modified"
            }
        ],
        "message": "Add function signature check to Connect Feed\n\n1. Revise the exception info when apply an unknown function to feed.\n2. Fix the possible NPE in connect feed statement.\n3. Add test case for applying undefined function.\n\nChange-Id: I1462b394d84ea7e1eae5a03f98fe8cd39213eb8e\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1674\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: abdullah alamoudi <bamousaa@gmail.com>",
        "parent": "https://github.com/apache/asterixdb/commit/34fc9ef89967fdccdda8d31d571b0f26ae39f569",
        "patched_files": [
            "en.java",
            "ErrorCode.java",
            "feed-with-undefined-function.java",
            "AQL.java",
            "SQLPP.java",
            "feed-with-external-function.java",
            "QueryTranslator.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite.java"
        ]
    },
    "asterixdb_a7aaf71": {
        "bug_id": "asterixdb_a7aaf71",
        "commit": "https://github.com/apache/asterixdb/commit/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 1,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java",
                "patch": "@@ -182,13 +182,14 @@ private RuleCollections() {\n         normalization.add(new IntroduceDynamicTypeCastRule());\n         normalization.add(new IntroduceDynamicTypeCastForExternalFunctionRule());\n         normalization.add(new IntroduceEnforcedListTypeRule());\n+        // Perform constant folding before common expression extraction\n+        normalization.add(new ConstantFoldingRule(appCtx));\n         normalization.add(new ExtractCommonExpressionsRule());\n \n         // Let PushAggFuncIntoStandaloneAggregateRule run after ExtractCommonExpressionsRule\n         // so that PushAggFunc can happen in fewer places.\n         normalization.add(new PushAggFuncIntoStandaloneAggregateRule());\n         normalization.add(new ListifyUnnestingFunctionRule());\n-        normalization.add(new ConstantFoldingRule(appCtx));\n         normalization.add(new RemoveRedundantSelectRule());\n         normalization.add(new UnnestToDataScanRule());\n         normalization.add(new MetaFunctionToMetaVariableRule());",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/base/RuleCollections.java",
                "sha": "85d1c294d2cfe3b4b0492f060e1389c1d3318bac",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 36,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java",
                "patch": "@@ -18,12 +18,15 @@\n  */\n package org.apache.asterix.optimizer.rules;\n \n-import org.apache.asterix.optimizer.rules.am.AccessMethodUtils;\n+import org.apache.asterix.om.base.AInt32;\n+import org.apache.asterix.om.base.IAObject;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.utils.ConstantExpressionUtil;\n import org.apache.commons.lang3.mutable.Mutable;\n import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalOperator;\n import org.apache.hyracks.algebricks.core.algebra.base.IOptimizationContext;\n-import org.apache.hyracks.algebricks.core.algebra.base.LogicalExpressionTag;\n import org.apache.hyracks.algebricks.core.algebra.base.LogicalOperatorTag;\n import org.apache.hyracks.algebricks.core.algebra.base.PhysicalOperatorTag;\n import org.apache.hyracks.algebricks.core.algebra.operators.logical.AbstractLogicalOperator;\n@@ -89,50 +92,19 @@ private boolean pushLimitIntoOrder(Mutable<ILogicalOperator> opRef, Mutable<ILog\n         PhysicalOptimizationConfig physicalOptimizationConfig = context.getPhysicalOptimizationConfig();\n         LimitOperator limitOp = (LimitOperator) opRef.getValue();\n         OrderOperator orderOp = (OrderOperator) opRef2.getValue();\n-        long topK = -1;\n \n         // We don't push-down LIMIT into in-memory sort.\n         if (orderOp.getPhysicalOperator().getOperatorTag() != PhysicalOperatorTag.STABLE_SORT) {\n             return false;\n         }\n \n-        // Get the LIMIT constant\n-        if (limitOp.getMaxObjects().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n-            // Currently, we support LIMIT with a constant value.\n-            topK = AccessMethodUtils.getInt64Constant(limitOp.getMaxObjects());\n-            // If topK is huge, there is no reason to use topK sort module\n-            // since the original external sort's performance might be better.\n-            if (topK > Integer.MAX_VALUE) {\n-                return false;\n-            }\n-            if (topK < 0) {\n-                topK = 0;\n-            }\n-        } else {\n+        Integer topK = getOutputLimit(limitOp);\n+        if (topK == null) {\n             return false;\n         }\n \n-        // Get the offset constant if there is one. If one presents, then topK = topK + offset.\n-        // This is because we can't apply offset to the external sort.\n-        // Final topK will be applied through LIMIT.\n-        if (limitOp.getOffset().getValue() != null) {\n-            if (limitOp.getOffset().getValue().getExpressionTag() == LogicalExpressionTag.CONSTANT) {\n-                long offset = AccessMethodUtils.getInt64Constant(limitOp.getOffset());\n-                if (offset < 0) {\n-                    offset = 0;\n-                }\n-                // Check the overflow case.\n-                if (offset >= Integer.MAX_VALUE - topK) {\n-                    return false;\n-                }\n-                topK += offset;\n-            } else {\n-                return false;\n-            }\n-        }\n-\n         // Create the new ORDER operator, set the topK value, and replace the current one.\n-        OrderOperator newOrderOp = new OrderOperator(orderOp.getOrderExpressions(), (int) topK);\n+        OrderOperator newOrderOp = new OrderOperator(orderOp.getOrderExpressions(), topK);\n         newOrderOp.setSourceLocation(orderOp.getSourceLocation());\n         newOrderOp.setPhysicalOperator(\n                 new StableSortPOperator(physicalOptimizationConfig.getMaxFramesExternalSort(), newOrderOp.getTopK()));\n@@ -146,4 +118,38 @@ private boolean pushLimitIntoOrder(Mutable<ILogicalOperator> opRef, Mutable<ILog\n         return true;\n     }\n \n+    static Integer getOutputLimit(LimitOperator limitOp) {\n+        // Currently, we support LIMIT with a constant value.\n+        ILogicalExpression maxObjectsExpr = limitOp.getMaxObjects().getValue();\n+        IAObject maxObjectsValue = ConstantExpressionUtil.getConstantIaObject(maxObjectsExpr, ATypeTag.INTEGER);\n+        if (maxObjectsValue == null) {\n+            return null;\n+        }\n+        int topK = ((AInt32) maxObjectsValue).getIntegerValue();\n+        if (topK < 0) {\n+            topK = 0;\n+        }\n+\n+        // Get the offset constant if there is one. If one presents, then topK = topK + offset.\n+        // This is because we can't apply offset to the external sort.\n+        // Final topK will be applied through LIMIT.\n+        ILogicalExpression offsetExpr = limitOp.getOffset().getValue();\n+        if (offsetExpr != null) {\n+            IAObject offsetValue = ConstantExpressionUtil.getConstantIaObject(offsetExpr, ATypeTag.INTEGER);\n+            if (offsetValue == null) {\n+                return null;\n+            }\n+            int offset = ((AInt32) offsetValue).getIntegerValue();\n+            if (offset < 0) {\n+                offset = 0;\n+            }\n+            // Check the overflow case.\n+            if (offset >= Integer.MAX_VALUE - topK) {\n+                return null;\n+            }\n+            topK += offset;\n+        }\n+\n+        return topK;\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoOrderByRule.java",
                "sha": "e64889d0e55dac7c3999fa422f36dd0c1d54237a",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 19,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java",
                "patch": "@@ -25,7 +25,6 @@\n import org.apache.asterix.metadata.declared.DataSource;\n import org.apache.asterix.om.functions.BuiltinFunctions;\n import org.apache.asterix.optimizer.rules.am.AccessMethodJobGenParams;\n-import org.apache.asterix.optimizer.rules.am.AccessMethodUtils;\n import org.apache.commons.lang3.mutable.Mutable;\n import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n@@ -67,7 +66,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         }\n         context.addToDontApplySet(this, op);\n \n-        Long outputLimit = getOutputLimit((LimitOperator) op);\n+        Integer outputLimit = PushLimitIntoOrderByRule.getOutputLimit((LimitOperator) op);\n         if (outputLimit == null) {\n             // we cannot push if limit is not constant\n             return false;\n@@ -77,7 +76,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         if (childOp.getValue().getOperatorTag() == LogicalOperatorTag.EXCHANGE) {\n             childOp = childOp.getValue().getInputs().get(0);\n         }\n-        boolean changed = false;\n+        boolean changed;\n         if (childOp.getValue().getOperatorTag() == LogicalOperatorTag.SELECT) {\n             changed = rewriteSelect(childOp, outputLimit);\n         } else {\n@@ -89,21 +88,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n         return changed;\n     }\n \n-    private Long getOutputLimit(LimitOperator limit) {\n-        if (limit.getMaxObjects().getValue().getExpressionTag() != LogicalExpressionTag.CONSTANT) {\n-            return null;\n-        }\n-        long outputLimit = AccessMethodUtils.getInt64Constant(limit.getMaxObjects());\n-        if (limit.getOffset() != null && limit.getOffset().getValue() != null) {\n-            if (limit.getOffset().getValue().getExpressionTag() != LogicalExpressionTag.CONSTANT) {\n-                return null;\n-            }\n-            outputLimit += AccessMethodUtils.getInt64Constant(limit.getOffset());\n-        }\n-        return outputLimit;\n-    }\n-\n-    private boolean rewriteSelect(Mutable<ILogicalOperator> op, long outputLimit) throws AlgebricksException {\n+    private boolean rewriteSelect(Mutable<ILogicalOperator> op, int outputLimit) {\n         SelectOperator select = (SelectOperator) op.getValue();\n         Set<LogicalVariable> selectedVariables = new HashSet<>();\n         select.getCondition().getValue().getUsedVariables(selectedVariables);\n@@ -131,7 +116,7 @@ private boolean rewriteSelect(Mutable<ILogicalOperator> op, long outputLimit) th\n         return changed;\n     }\n \n-    private boolean setLimitForScanOrUnnestMap(ILogicalOperator op, long outputLimit) throws AlgebricksException {\n+    private boolean setLimitForScanOrUnnestMap(ILogicalOperator op, int outputLimit) {\n         if (op.getOperatorTag() == LogicalOperatorTag.DATASOURCESCAN) {\n             DataSourceScanOperator scan = (DataSourceScanOperator) op;\n             if (isScanPushable(scan, Collections.emptySet())) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/PushLimitIntoPrimarySearchRule.java",
                "sha": "5427ca628551a3d74702bc94471df69bd610cfa3",
                "status": "modified"
            },
            {
                "additions": 50,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 57,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java",
                "patch": "@@ -1085,38 +1085,27 @@ private ILogicalPlan createNestedPlanWithAggregate(LogicalVariable aggOutputVar,\n             ILogicalExpression e = p.first;\n             // now look at the operator\n             if (i < nOps) {\n-                if (OperatorExpr.opIsComparison(ops.get(i))) {\n-                    AbstractFunctionCallExpression c = createComparisonExpression(ops.get(i), sourceLoc);\n-\n-                    // chain the operators\n-                    if (i == 0) {\n-                        c.getArguments().add(new MutableObject<>(e));\n-                        currExpr = c;\n-                        if (op.isBroadcastOperand(i)) {\n-                            BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n-                            bcast.setObject(BroadcastSide.LEFT);\n-                            c.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n-                        }\n-                    } else {\n-                        currExpr.getArguments().add(new MutableObject<>(e));\n-                        c.getArguments().add(new MutableObject<>(currExpr));\n-                        currExpr = c;\n-                        if (i == 1 && op.isBroadcastOperand(i)) {\n-                            BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n-                            bcast.setObject(BroadcastSide.RIGHT);\n-                            c.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n-                        }\n+                OperatorType opType = ops.get(i);\n+                boolean isCmpOp = OperatorExpr.opIsComparison(opType);\n+                AbstractFunctionCallExpression f = createFunctionCallExpressionForBuiltinOperator(opType, sourceLoc);\n+\n+                // chain the operators\n+                if (i == 0) {\n+                    f.getArguments().add(new MutableObject<>(e));\n+                    currExpr = f;\n+                    if (isCmpOp && op.isBroadcastOperand(i)) {\n+                        BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n+                        bcast.setObject(BroadcastSide.LEFT);\n+                        f.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n                     }\n                 } else {\n-                    AbstractFunctionCallExpression f =\n-                            createFunctionCallExpressionForBuiltinOperator(ops.get(i), sourceLoc);\n-                    if (i == 0) {\n-                        f.getArguments().add(new MutableObject<>(e));\n-                        currExpr = f;\n-                    } else {\n-                        currExpr.getArguments().add(new MutableObject<>(e));\n-                        f.getArguments().add(new MutableObject<>(currExpr));\n-                        currExpr = f;\n+                    currExpr.getArguments().add(new MutableObject<>(e));\n+                    f.getArguments().add(new MutableObject<>(currExpr));\n+                    currExpr = f;\n+                    if (isCmpOp && i == 1 && op.isBroadcastOperand(i)) {\n+                        BroadcastExpressionAnnotation bcast = new BroadcastExpressionAnnotation();\n+                        bcast.setObject(BroadcastSide.RIGHT);\n+                        f.getAnnotations().put(BroadcastExpressionAnnotation.BROADCAST_ANNOTATION_KEY, bcast);\n                     }\n                 }\n             } else { // don't forget the last expression...\n@@ -1359,53 +1348,52 @@ private ILogicalPlan createNestedPlanWithAggregate(LogicalVariable aggOutputVar,\n     public Pair<ILogicalOperator, LogicalVariable> visit(LimitClause lc, Mutable<ILogicalOperator> tupSource)\n             throws CompilationException {\n         SourceLocation sourceLoc = lc.getSourceLocation();\n-        Pair<ILogicalExpression, Mutable<ILogicalOperator>> p1 = langExprToAlgExpression(lc.getLimitExpr(), tupSource);\n         LimitOperator opLim;\n+\n+        Pair<ILogicalExpression, Mutable<ILogicalOperator>> p1 = langExprToAlgExpression(lc.getLimitExpr(), tupSource);\n+        AbstractFunctionCallExpression maxObjectsExpr =\n+                createFunctionCallExpression(BuiltinFunctions.TREAT_AS_INTEGER, lc.getLimitExpr().getSourceLocation());\n+        maxObjectsExpr.getArguments().add(new MutableObject<>(p1.first));\n+\n         Expression offset = lc.getOffset();\n         if (offset != null) {\n             Pair<ILogicalExpression, Mutable<ILogicalOperator>> p2 = langExprToAlgExpression(offset, p1.second);\n-            opLim = new LimitOperator(p1.first, p2.first);\n+            AbstractFunctionCallExpression offsetExpr =\n+                    createFunctionCallExpression(BuiltinFunctions.TREAT_AS_INTEGER, lc.getOffset().getSourceLocation());\n+            offsetExpr.getArguments().add(new MutableObject<>(p2.first));\n+            opLim = new LimitOperator(maxObjectsExpr, offsetExpr);\n             opLim.getInputs().add(p2.second);\n             opLim.setSourceLocation(sourceLoc);\n         } else {\n-            opLim = new LimitOperator(p1.first);\n+            opLim = new LimitOperator(maxObjectsExpr);\n             opLim.getInputs().add(p1.second);\n             opLim.setSourceLocation(sourceLoc);\n         }\n         return new Pair<>(opLim, null);\n     }\n \n-    protected AbstractFunctionCallExpression createComparisonExpression(OperatorType t, SourceLocation sourceLoc) {\n-        FunctionIdentifier fi = operatorTypeToFunctionIdentifier(t);\n-        IFunctionInfo finfo = FunctionUtil.getFunctionInfo(fi);\n-        ScalarFunctionCallExpression callExpr = new ScalarFunctionCallExpression(finfo);\n-        callExpr.setSourceLocation(sourceLoc);\n-        return callExpr;\n-    }\n-\n-    private static FunctionIdentifier operatorTypeToFunctionIdentifier(OperatorType t) {\n+    private static AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinOperator(OperatorType t,\n+            SourceLocation sourceLoc) throws CompilationException {\n+        FunctionIdentifier fid;\n         switch (t) {\n             case EQ:\n-                return AlgebricksBuiltinFunctions.EQ;\n+                fid = AlgebricksBuiltinFunctions.EQ;\n+                break;\n             case NEQ:\n-                return AlgebricksBuiltinFunctions.NEQ;\n+                fid = AlgebricksBuiltinFunctions.NEQ;\n+                break;\n             case GT:\n-                return AlgebricksBuiltinFunctions.GT;\n+                fid = AlgebricksBuiltinFunctions.GT;\n+                break;\n             case GE:\n-                return AlgebricksBuiltinFunctions.GE;\n+                fid = AlgebricksBuiltinFunctions.GE;\n+                break;\n             case LT:\n-                return AlgebricksBuiltinFunctions.LT;\n+                fid = AlgebricksBuiltinFunctions.LT;\n+                break;\n             case LE:\n-                return AlgebricksBuiltinFunctions.LE;\n-            default:\n-                throw new IllegalStateException();\n-        }\n-    }\n-\n-    protected AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinOperator(OperatorType t,\n-            SourceLocation sourceLoc) throws CompilationException {\n-        FunctionIdentifier fid;\n-        switch (t) {\n+                fid = AlgebricksBuiltinFunctions.LE;\n+                break;\n             case PLUS:\n                 fid = AlgebricksBuiltinFunctions.NUMERIC_ADD;\n                 break;\n@@ -1440,6 +1428,11 @@ protected AbstractFunctionCallExpression createFunctionCallExpressionForBuiltinO\n                 throw new CompilationException(ErrorCode.COMPILATION_ERROR, sourceLoc,\n                         \"Operator \" + t + \" is not yet implemented\");\n         }\n+        return createFunctionCallExpression(fid, sourceLoc);\n+    }\n+\n+    private static AbstractFunctionCallExpression createFunctionCallExpression(FunctionIdentifier fid,\n+            SourceLocation sourceLoc) {\n         ScalarFunctionCallExpression callExpr = new ScalarFunctionCallExpression(FunctionUtil.getFunctionInfo(fid));\n         callExpr.setSourceLocation(sourceLoc);\n         return callExpr;",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/LangExpressionToPlanTranslator.java",
                "sha": "5410a94ca869eda381930a18440872b9649dd7d9",
                "status": "modified"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test expressions returning floating point numbers\n+ *                 : in limit/offset\n+ * Expected Result : Success\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 7.5/2.5 offset 5/2.5\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_01/limit_type_01.1.query.sqlpp",
                "sha": "c8b2b7a4aee352965ac85bddd7c5eb8a4eb2cdf4",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 5.5/2\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.1.query.sqlpp",
                "sha": "ce55ac9ebbb98650d8a080666e586b991b636dd0",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 1 offset 3.5/2\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.2.query.sqlpp",
                "sha": "e479296d5aab6ca8352c44f0c7f172e070726c87",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit \"2\"\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.3.query.sqlpp",
                "sha": "b870b76f28f1cfd742fe8c5523fde555316414ff",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test floating point type in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 2 offset true\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.4.query.sqlpp",
                "sha": "3e3bfa7215d24bb8b8ba97a6afc843e1a0757772",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test overflow error in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 9999999999\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.5.query.sqlpp",
                "sha": "d783bb14bf2b35af5a1d3ca3cd7d842a266b6c10",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ * Description     : Test overflow error in limit/offset\n+ * Expected Result : Failure\n+ */\n+\n+select value t\n+from [6,5,4,3,2,1] t\n+order by t\n+limit 1 offset 8888888888\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/limit_type_02/limit_type_02.6.query.sqlpp",
                "sha": "991f189fb3745c791e61ce10fae9a745da899b5c",
                "status": "added"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp",
                "patch": "@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+explain select element c\n+from  LineItem as c\n+where (c.l_suppkey < 150)\n+limit 7.5/1.5 offset 7.5/1.5;",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.query.sqlpp",
                "sha": "5673992be9d455c58e7d9206c0188876994a6e2b",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+/* scan and print a delimited text file */\n+\n+use test;\n+\n+explain\n+  select element paper\n+  from  DBLP1 as paper\n+  limit 7.5/1.5 offset 7.5/1.5;",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.query.sqlpp",
                "sha": "fc9d42f8bf68902b52dc558299b7f057d949704c",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm",
                "patch": "@@ -0,0 +1,3 @@\n+3\n+4\n+5\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/limit_type_01/limit_type_01.1.adm",
                "sha": "af6412102d192d12927a67e2fa76c05cc15b2b2c",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm",
                "patch": "@@ -0,0 +1,34 @@\n+distribute result [$$c]\n+-- DISTRIBUTE_RESULT  |UNPARTITIONED|\n+  exchange\n+  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|\n+    limit 5, 5\n+    -- STREAM_LIMIT  |UNPARTITIONED|\n+      project ([$$c])\n+      -- STREAM_PROJECT  |PARTITIONED|\n+        exchange\n+        -- SORT_MERGE_EXCHANGE [$$14(ASC), $$15(ASC) ]  |PARTITIONED|\n+          limit 10\n+          -- STREAM_LIMIT  |PARTITIONED|\n+            exchange\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              unnest-map [$$14, $$15, $$c] <- index-search(\"LineItem\", 0, \"test\", \"LineItem\", FALSE, FALSE, 2, $$19, $$20, 2, $$19, $$20, TRUE, TRUE, TRUE) condition (lt($$c.getField(2), 150)) limit 10\n+              -- BTREE_SEARCH  |PARTITIONED|\n+                exchange\n+                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                  order (ASC, $$19) (ASC, $$20)\n+                  -- STABLE_SORT [$$19(ASC), $$20(ASC)]  |PARTITIONED|\n+                    exchange\n+                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                      project ([$$19, $$20])\n+                      -- STREAM_PROJECT  |PARTITIONED|\n+                        exchange\n+                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                          unnest-map [$$18, $$19, $$20] <- index-search(\"idx_LineItem_suppkey\", 0, \"test\", \"LineItem\", FALSE, FALSE, 0, 1, $$17, TRUE, FALSE, FALSE)\n+                          -- BTREE_SEARCH  |PARTITIONED|\n+                            exchange\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              assign [$$17] <- [150]\n+                              -- ASSIGN  |PARTITIONED|\n+                                empty-tuple-source\n+                                -- EMPTY_TUPLE_SOURCE  |PARTITIONED|",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-lookup/push-limit-to-primary-lookup.5.adm",
                "sha": "d070b2be7954c389d6575b897ae734e89225e3de",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm",
                "patch": "@@ -0,0 +1,20 @@\n+distribute result [$$paper]\n+-- DISTRIBUTE_RESULT  |UNPARTITIONED|\n+  exchange\n+  -- ONE_TO_ONE_EXCHANGE  |UNPARTITIONED|\n+    limit 5, 5\n+    -- STREAM_LIMIT  |UNPARTITIONED|\n+      project ([$$paper])\n+      -- STREAM_PROJECT  |PARTITIONED|\n+        exchange\n+        -- SORT_MERGE_EXCHANGE [$$12(ASC) ]  |PARTITIONED|\n+          limit 10\n+          -- STREAM_LIMIT  |PARTITIONED|\n+            exchange\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              data-scan []<-[$$12, $$paper] <- test.DBLP1 limit 10\n+              -- DATASOURCE_SCAN  |PARTITIONED|\n+                exchange\n+                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                  empty-tuple-source\n+                  -- EMPTY_TUPLE_SOURCE  |PARTITIONED|",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan/push-limit-to-primary-scan.5.adm",
                "sha": "ee3e565427b3be54ed8161c54ada941a8b9e89cd",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -10155,12 +10155,29 @@\n     </test-case>\n   </test-group>\n   <test-group name=\"limit\">\n+    <test-case FilePath=\"limit\">\n+      <compilation-unit name=\"limit_type_01\">\n+        <output-dir compare=\"Text\">limit_type_01</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"limit\">\n+      <compilation-unit name=\"limit_type_02\">\n+        <output-dir compare=\"Text\">limit_type_01</output-dir>\n+        <expected-error>ASX0039: Expected integer value, got 2.75 (in line 28, at column 10)</expected-error>\n+        <expected-error>ASX0039: Expected integer value, got 1.75 (in line 28, at column 19)</expected-error>\n+        <expected-error>ASX1091: Type mismatch: expected value of type integer, but got the value of type string (in line 28, at column 7)</expected-error>\n+        <expected-error>ASX1091: Type mismatch: expected value of type integer, but got the value of type boolean (in line 28, at column 16)</expected-error>\n+        <expected-error>ASX0021: Source value 9999999999 is out of range that integer can hold - integer.MAX_VALUE: 2147483647, integer.MIN_VALUE: -2147483648</expected-error>\n+        <expected-error>ASX0021: Source value 8888888888 is out of range that integer can hold - integer.MAX_VALUE: 2147483647, integer.MIN_VALUE: -2147483648</expected-error>\n+        <source-location>false</source-location>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"limit\">\n       <compilation-unit name=\"push-limit-to-primary-scan\">\n         <output-dir compare=\"Text\">push-limit-to-primary-scan</output-dir>\n       </compilation-unit>\n     </test-case>\n-     <test-case FilePath=\"limit\">\n+    <test-case FilePath=\"limit\">\n        <compilation-unit name=\"push-limit-to-primary-scan-select\">\n          <output-dir compare=\"Text\">push-limit-to-primary-scan-select</output-dir>\n        </compilation-unit>",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "c5775d8d47da421f6f4bb9b98b8827f1670a8a54",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "patch": "@@ -79,6 +79,7 @@\n     public static final int CANNOT_COMPARE_COMPLEX = 36;\n     public static final int TYPE_MISMATCH_GENERIC = 37;\n     public static final int DIFFERENT_LIST_TYPE_ARGS = 38;\n+    public static final int INTEGER_VALUE_EXPECTED = 39;\n \n     public static final int UNSUPPORTED_JRE = 100;\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/exceptions/ErrorCode.java",
                "sha": "f570aa8f4574ab693a98a7a914f1a4a79a675198",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "patch": "@@ -73,6 +73,7 @@\n 35 = Unsupported multiple statements.\n 36 = Cannot compare non-primitive values\n 38 = Input contains different list types\n+39 = Expected integer value, got %1$s\n \n 100 = Unsupported JRE: %1$s\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-common/src/main/resources/asx_errormsg/en.properties",
                "sha": "8c09d75c199617eb3c52f771a21b036935fc7407",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "patch": "@@ -121,6 +121,7 @@\n import org.apache.asterix.om.typecomputer.impl.ToDoubleTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.ToNumberTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.ToObjectTypeComputer;\n+import org.apache.asterix.om.typecomputer.impl.TreatAsTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryBinaryInt64TypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryMinusTypeComputer;\n import org.apache.asterix.om.typecomputer.impl.UnaryStringInt64TypeComputer;\n@@ -1102,6 +1103,9 @@\n     public static final FunctionIdentifier TO_STRING =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"to-string\", 1);\n \n+    public static final FunctionIdentifier TREAT_AS_INTEGER =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"treat-as-integer\", 1);\n+\n     public static final FunctionIdentifier EXTERNAL_LOOKUP =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"external-lookup\", FunctionIdentifier.VARARGS);\n \n@@ -1297,6 +1301,8 @@ public static FunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addFunction(TO_OBJECT, ToObjectTypeComputer.INSTANCE, true);\n         addFunction(TO_STRING, AStringTypeComputer.INSTANCE, true);\n \n+        addPrivateFunction(TREAT_AS_INTEGER, TreatAsTypeComputer.INSTANCE_INTEGER, true);\n+\n         addFunction(IF_INF, IfNanOrInfTypeComputer.INSTANCE, true);\n         addFunction(IF_MISSING, IfMissingTypeComputer.INSTANCE, true);\n         addFunction(IF_MISSING_OR_NULL, IfMissingOrNullTypeComputer.INSTANCE, true);",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "sha": "8f24864ad1cfa1bb6c050b828fcb3cee2c2708e7",
                "status": "modified"
            },
            {
                "additions": 48,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java",
                "patch": "@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.om.typecomputer.impl;\n+\n+import org.apache.asterix.om.exceptions.TypeMismatchException;\n+import org.apache.asterix.om.typecomputer.base.AbstractResultTypeComputer;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.IAType;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.hyracks.algebricks.common.exceptions.AlgebricksException;\n+import org.apache.hyracks.algebricks.core.algebra.base.ILogicalExpression;\n+\n+public class TreatAsTypeComputer extends AbstractResultTypeComputer {\n+    public static final TreatAsTypeComputer INSTANCE_INTEGER = new TreatAsTypeComputer(BuiltinType.AINT32);\n+\n+    private final IAType type;\n+\n+    private TreatAsTypeComputer(IAType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    protected IAType getResultType(ILogicalExpression expr, IAType... strippedInputTypes) throws AlgebricksException {\n+        IAType inputType = strippedInputTypes[0];\n+        if (ATypeHierarchy.isCompatible(inputType.getTypeTag(), type.getTypeTag())) {\n+            return type;\n+        } else {\n+            throw new TypeMismatchException(expr.getSourceLocation(), inputType.getTypeTag(), type.getTypeTag());\n+        }\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/typecomputer/impl/TreatAsTypeComputer.java",
                "sha": "1a5861b0ffa45813e42ca96974f6b6237b82f985",
                "status": "added"
            },
            {
                "additions": 130,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java",
                "changes": 130,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java",
                "patch": "@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.DataOutput;\n+\n+import org.apache.asterix.common.exceptions.ErrorCode;\n+import org.apache.asterix.common.exceptions.RuntimeDataException;\n+import org.apache.asterix.formats.nontagged.SerializerDeserializerProvider;\n+import org.apache.asterix.om.base.AInt32;\n+import org.apache.asterix.om.base.AMutableInt32;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptor;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.om.types.hierachy.ATypeHierarchy;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.exceptions.TypeMismatchException;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.context.IHyracksTaskContext;\n+import org.apache.hyracks.api.dataflow.value.ISerializerDeserializer;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.VoidPointable;\n+import org.apache.hyracks.data.std.util.ArrayBackedValueStorage;\n+import org.apache.hyracks.dataflow.common.data.accessors.IFrameTupleReference;\n+\n+public class TreatAsIntegerDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+    public static final IFunctionDescriptorFactory FACTORY = new IFunctionDescriptorFactory() {\n+        @Override\n+        public IFunctionDescriptor createFunctionDescriptor() {\n+            return new TreatAsIntegerDescriptor();\n+        }\n+    };\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(final IHyracksTaskContext ctx) throws HyracksDataException {\n+\n+                final IScalarEvaluator inputEval = args[0].createScalarEvaluator(ctx);\n+                final IPointable inputArg = new VoidPointable();\n+                final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();\n+                final DataOutput out = resultStorage.getDataOutput();\n+                final AMutableInt32 aInt32 = new AMutableInt32(0);\n+\n+                @SuppressWarnings(\"unchecked\")\n+                final ISerializerDeserializer<AInt32> int32Ser =\n+                        SerializerDeserializerProvider.INSTANCE.getSerializerDeserializer(BuiltinType.AINT32);\n+\n+                return new IScalarEvaluator() {\n+                    @Override\n+                    public void evaluate(IFrameTupleReference tuple, IPointable result) throws HyracksDataException {\n+                        inputEval.evaluate(tuple, inputArg);\n+\n+                        int intValue;\n+                        byte[] bytes = inputArg.getByteArray();\n+                        int startOffset = inputArg.getStartOffset();\n+                        ATypeTag tt = ATypeTag.VALUE_TYPE_MAPPING[bytes[startOffset]];\n+                        switch (tt) {\n+                            case TINYINT:\n+                            case SMALLINT:\n+                            case INTEGER:\n+                            case BIGINT:\n+                                intValue = ATypeHierarchy.getIntegerValue(getIdentifier().getName(), 0, bytes,\n+                                        startOffset, true);\n+                                break;\n+                            case FLOAT:\n+                            case DOUBLE:\n+                                double doubleValue =\n+                                        ATypeHierarchy.getDoubleValue(getIdentifier().getName(), 0, bytes, startOffset);\n+                                intValue = asInt(doubleValue);\n+                                break;\n+                            default:\n+                                throw new TypeMismatchException(sourceLoc, bytes[startOffset],\n+                                        ATypeTag.SERIALIZED_INT8_TYPE_TAG, ATypeTag.SERIALIZED_INT16_TYPE_TAG,\n+                                        ATypeTag.SERIALIZED_INT32_TYPE_TAG, ATypeTag.SERIALIZED_INT64_TYPE_TAG,\n+                                        ATypeTag.SERIALIZED_FLOAT_TYPE_TAG, ATypeTag.SERIALIZED_DOUBLE_TYPE_TAG);\n+                        }\n+\n+                        resultStorage.reset();\n+                        aInt32.setValue(intValue);\n+                        int32Ser.serialize(aInt32, out);\n+                        result.set(resultStorage);\n+                    }\n+\n+                    private int asInt(double d) throws HyracksDataException {\n+                        if (Double.isFinite(d)) {\n+                            long v = (long) d;\n+                            if (v == d && Integer.MIN_VALUE <= v && v <= Integer.MAX_VALUE) {\n+                                return (int) v;\n+                            }\n+                        }\n+                        throw new RuntimeDataException(ErrorCode.INTEGER_VALUE_EXPECTED, sourceLoc, d);\n+                    }\n+                };\n+            }\n+        };\n+\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.TREAT_AS_INTEGER;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/TreatAsIntegerDescriptor.java",
                "sha": "2c3e148dc531f1208c4e30bd81ff283a0f811a0c",
                "status": "added"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java?ref=a7aaf7110c5a3791f3f6a69827e22d6ee26a7175",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "patch": "@@ -281,6 +281,7 @@\n import org.apache.asterix.runtime.evaluators.functions.ToNumberDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.ToObjectDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.ToStringDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.TreatAsIntegerDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.UUIDDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryConcatDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.binary.BinaryLengthDescriptor;\n@@ -790,6 +791,8 @@ public static FunctionCollection createDefaultFunctionCollection() {\n         fc.addGenerated(ToObjectDescriptor.FACTORY);\n         fc.addGenerated(ToStringDescriptor.FACTORY);\n \n+        fc.addGenerated(TreatAsIntegerDescriptor.FACTORY);\n+\n         // Cast function\n         fc.addGenerated(CastTypeDescriptor.FACTORY);\n         fc.addGenerated(CastTypeLaxDescriptor.FACTORY);",
                "raw_url": "https://github.com/apache/asterixdb/raw/a7aaf7110c5a3791f3f6a69827e22d6ee26a7175/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "sha": "04f4a1e781ab1453e998ba0e71f40ae700fff943",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2417][COMP] Fix issues with LIMIT clause\n\n- user model changes: yes\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE in optimizer when limit/offset is non-integer\n- Allow float/double values that are integers in limit/offset\n- Make consistent limit/offset value types (integer) between\n  runtime and optimizer rules\n- Add internal function treat-as-integer() that returns integer\n  if input number conforms to the integer type or fails otherwise\n\nChange-Id: I986fab3e79b072aa2441af293f3e16c3f37bf508\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2788\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/9a987680d3b7b7946df34070262d1b95e8ede054",
        "patched_files": [
            "PushLimitIntoOrderByRule.java",
            "en.java",
            "TreatAsIntegerDescriptor.java",
            "push-limit-to-primary-scan.java",
            "RuleCollections.java",
            "limit_type_01.java",
            "TreatAsTypeComputer.java",
            "push-limit-to-primary-lookup.java",
            "LangExpressionToPlanTranslator.java",
            "limit_type_02.java",
            "FunctionCollection.java",
            "BuiltinFunctions.java",
            "ErrorCode.java",
            "PushLimitIntoPrimarySearchRule.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    },
    "asterixdb_a952e01": {
        "bug_id": "asterixdb_a952e01",
        "commit": "https://github.com/apache/asterixdb/commit/a952e0150efd60d584761af6d8619f15766dab08",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 7,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java",
                "patch": "@@ -220,13 +220,17 @@ private boolean intersectAllSecondaryIndexes(List<Pair<IAccessMethod, Index>> ch\n         List<ILogicalOperator> subRoots = new ArrayList<>();\n         for (Pair<IAccessMethod, Index> pair : chosenIndexes) {\n             AccessMethodAnalysisContext analysisCtx = analyzedAMs.get(pair.first);\n-            subRoots.add(pair.first.createIndexSearchPlan(afterSelectRefs, selectRef, conditionRef,\n-                    subTree.getAssignsAndUnnestsRefs(), subTree, null, pair.second, analysisCtx,\n-                    AccessMethodUtils.retainInputs(subTree.getDataSourceVariables(),\n-                            subTree.getDataSourceRef().getValue(), afterSelectRefs),\n-                    false, subTree.getDataSourceRef().getValue().getInputs().get(0).getValue()\n-                            .getExecutionMode() == ExecutionMode.UNPARTITIONED,\n-                    context, null));\n+            boolean retainInput = AccessMethodUtils.retainInputs(subTree.getDataSourceVariables(),\n+                    subTree.getDataSourceRef().getValue(), afterSelectRefs);\n+            boolean requiresBroadcast = subTree.getDataSourceRef().getValue().getInputs().get(0).getValue()\n+                    .getExecutionMode() == ExecutionMode.UNPARTITIONED;\n+            ILogicalOperator subRoot = pair.first.createIndexSearchPlan(afterSelectRefs, selectRef, conditionRef,\n+                    subTree.getAssignsAndUnnestsRefs(), subTree, null, pair.second, analysisCtx, retainInput, false,\n+                    requiresBroadcast, context, null);\n+            if (subRoot == null) {\n+                return false;\n+            }\n+            subRoots.add(subRoot);\n         }\n         // Connect each secondary index utilization plan to a common intersect operator.\n         ILogicalOperator primaryUnnestOp = connectAll2ndarySearchPlanWithIntersect(subRoots, context);",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/optimizer/rules/am/IntroduceSelectAccessMethodRule.java",
                "sha": "0ea16aeb51845bba525171c49968ac43897f7d11",
                "status": "modified"
            },
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp",
                "changes": 54,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp",
                "patch": "@@ -0,0 +1,54 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ *  Description     : Secondary BTree Index intersection with between operator (ASTERIXDB-2448)\n+ *  Expected Result : Success\n+ */\n+\n+drop  dataverse tpch if exists;\n+create  dataverse tpch;\n+\n+use tpch;\n+\n+create type tpch.OrderType as\n+ closed {\n+  o_orderkey : bigint,\n+  o_custkey : bigint,\n+  o_orderstatus : string,\n+  o_totalprice : double,\n+  o_orderdate : string,\n+  o_orderpriority : string,\n+  o_clerk : string,\n+  o_shippriority : bigint,\n+  o_comment : string\n+};\n+\n+create  dataset Orders(OrderType) primary key o_orderkey;\n+\n+create index idx_custkey on Orders (o_custkey) type btree;\n+\n+create index idx_orderpriority on Orders (o_orderpriority) type btree;\n+\n+select o_custkey, o_orderkey, o_orderstatus from Orders\n+where\n+  o_orderpriority = '1-URGENT' and\n+  o_custkey between 40 and 43\n+order by o_custkey, o_orderkey;\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/queries/btree-index/btree-secondary-68.sqlpp",
                "sha": "af04479b0f8f46025de9207e0fc5c4be81d63776",
                "status": "added"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan",
                "patch": "@@ -0,0 +1,32 @@\n+-- DISTRIBUTE_RESULT  |PARTITIONED|\n+  -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+    -- STREAM_PROJECT  |PARTITIONED|\n+      -- ASSIGN  |PARTITIONED|\n+        -- SORT_MERGE_EXCHANGE [$$25(ASC), $$26(ASC) ]  |PARTITIONED|\n+          -- STABLE_SORT [$$25(ASC), $$26(ASC)]  |PARTITIONED|\n+            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+              -- STREAM_PROJECT  |PARTITIONED|\n+                -- STREAM_SELECT  |PARTITIONED|\n+                  -- ASSIGN  |PARTITIONED|\n+                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                      -- BTREE_SEARCH  |PARTITIONED|\n+                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                          -- INTERSECT  |PARTITIONED|\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              -- STABLE_SORT [$$35(ASC)]  |PARTITIONED|\n+                                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                  -- STREAM_PROJECT  |PARTITIONED|\n+                                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                      -- BTREE_SEARCH  |PARTITIONED|\n+                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                          -- ASSIGN  |PARTITIONED|\n+                                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|\n+                            -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                              -- STABLE_SORT [$$39(ASC)]  |PARTITIONED|\n+                                -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                  -- STREAM_PROJECT  |PARTITIONED|\n+                                    -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                      -- BTREE_SEARCH  |PARTITIONED|\n+                                        -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n+                                          -- ASSIGN  |PARTITIONED|\n+                                            -- EMPTY_TUPLE_SOURCE  |PARTITIONED|",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/optimizerts/results/btree-index/btree-secondary-68.plan",
                "sha": "80def8827b5e8d981787d5afbdce1879a9e1ba95",
                "status": "added"
            },
            {
                "additions": 43,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp",
                "changes": 43,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp",
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+/*\n+ *  Description     : Secondary BTree Index intersection with between operator (ASTERIXDB-2448)\n+ *  Expected Result : Success\n+ */\n+\n+drop  dataverse tpch if exists;\n+create  dataverse tpch;\n+\n+use tpch;\n+\n+create type tpch.OrderType as\n+ closed {\n+  o_orderkey : bigint,\n+  o_custkey : bigint,\n+  o_orderstatus : string,\n+  o_totalprice : double,\n+  o_orderdate : string,\n+  o_orderpriority : string,\n+  o_clerk : string,\n+  o_shippriority : bigint,\n+  o_comment : string\n+};\n+\n+create  dataset Orders(OrderType) primary key o_orderkey;",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.1.ddl.sqlpp",
                "sha": "cb5101204a2d20289a7d72ea49911e8e2632512f",
                "status": "added"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp",
                "patch": "@@ -0,0 +1,23 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+load  dataset Orders using localfs ((`path`=`asterix_nc1://data/tpch0.001/orders.tbl`),(`format`=`delimited-text`),(`delimiter`=`|`)) pre-sorted;\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.2.update.sqlpp",
                "sha": "109732505f0e160c4878bc2e88be00eca701e805",
                "status": "added"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp",
                "patch": "@@ -0,0 +1,24 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+create index idx_custkey on Orders (o_custkey) type btree;\n+\n+create index idx_orderpriority on Orders (o_orderpriority) type btree;",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.3.ddl.sqlpp",
                "sha": "62f4cc0465e9f7639126f081a1a8f0ca174dbe97",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use tpch;\n+\n+select o_custkey, o_orderkey, o_orderstatus from Orders\n+where\n+  o_orderpriority = '1-URGENT' and\n+  o_custkey between 40 and 43\n+order by o_custkey, o_orderkey",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/index-selection/intersection-with-between/intersection-with-between.4.query.sqlpp",
                "sha": "75212af815429c110beef5240cbe58dcb13cb0f6",
                "status": "added"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm",
                "patch": "@@ -0,0 +1,7 @@\n+{ \"o_custkey\": 40, \"o_orderkey\": 323, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 40, \"o_orderkey\": 3653, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 40, \"o_orderkey\": 4934, \"o_orderstatus\": \"O\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 258, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 2596, \"o_orderstatus\": \"O\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 3687, \"o_orderstatus\": \"F\" }\n+{ \"o_custkey\": 43, \"o_orderkey\": 5378, \"o_orderstatus\": \"F\" }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/index-selection/intersection-with-between/intersection-with-between.4.adm",
                "sha": "ad86590bf897e86500dbc6f2e1af868a8f6df8e3",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm",
                "patch": "@@ -20,7 +20,7 @@ distribute result [$$19]\n                   -- ASSIGN  |PARTITIONED|\n                     exchange\n                     -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|\n-                      data-scan []<-[$$22, $$t] <- test.TweetMessages condition (and(le(0, $$t.getField(\"user\").getField(\"friends_count\")), le($$t.getField(\"user\").getField(\"friends_count\"), 150))) limit 2\n+                      data-scan []<-[$$22, $$t] <- test.TweetMessages condition (and(ge($$t.getField(\"user\").getField(\"friends_count\"), 0), le($$t.getField(\"user\").getField(\"friends_count\"), 150))) limit 2\n                       -- DATASOURCE_SCAN  |PARTITIONED|\n                         exchange\n                         -- ONE_TO_ONE_EXCHANGE  |PARTITIONED|",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/results/limit/push-limit-to-primary-scan-select/push-limit-to-primary-scan-select.8.adm",
                "sha": "131b860948da53f546b621386767f36616ab4aec",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -3374,6 +3374,11 @@\n         <output-dir compare=\"Text\">cust-index-age-nullable</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"index-selection\">\n+      <compilation-unit name=\"intersection-with-between\">\n+        <output-dir compare=\"Text\">intersection-with-between</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"index-selection\">\n       <compilation-unit name=\"inverted-index-ngram-contains\">\n         <output-dir compare=\"Text\">inverted-index-ngram-contains</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "904dc6149856f4bd50b598809c13cc57c322eb6a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/asterixdb/blob/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java?ref=a952e0150efd60d584761af6d8619f15766dab08",
                "deletions": 8,
                "filename": "asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java",
                "patch": "@@ -136,13 +136,13 @@ private Expression processBetweenOperator(OperatorExpr operatorExpr, OperatorTyp\n         Expression left = operatorExpr.getExprList().get(1);\n         Expression right = operatorExpr.getExprList().get(2);\n \n-        // Creates the expression left <= target.\n-        Expression leftComparison =\n-                createLessThanExpression(left, target, operatorExpr.getHints(), operatorExpr.getSourceLocation());\n+        // Creates the expression target >= left.\n+        Expression leftComparison = createOperatorExpression(OperatorType.GE, target, left, operatorExpr.getHints(),\n+                operatorExpr.getSourceLocation());\n         // Creates the expression target <= right.\n         Expression targetCopy = (Expression) SqlppRewriteUtil.deepCopy(target);\n-        Expression rightComparison =\n-                createLessThanExpression(targetCopy, right, operatorExpr.getHints(), operatorExpr.getSourceLocation());\n+        Expression rightComparison = createOperatorExpression(OperatorType.LE, targetCopy, right,\n+                operatorExpr.getHints(), operatorExpr.getSourceLocation());\n         OperatorExpr andExpr = new OperatorExpr();\n         andExpr.addOperand(leftComparison);\n         andExpr.addOperand(rightComparison);\n@@ -158,12 +158,12 @@ private Expression processBetweenOperator(OperatorExpr operatorExpr, OperatorTyp\n         }\n     }\n \n-    private Expression createLessThanExpression(Expression lhs, Expression rhs, List<IExpressionAnnotation> hints,\n-            SourceLocation sourceLoc) {\n+    private Expression createOperatorExpression(OperatorType opType, Expression lhs, Expression rhs,\n+            List<IExpressionAnnotation> hints, SourceLocation sourceLoc) {\n         OperatorExpr comparison = new OperatorExpr();\n         comparison.addOperand(lhs);\n         comparison.addOperand(rhs);\n-        comparison.addOperator(OperatorType.LE);\n+        comparison.addOperator(opType);\n         comparison.setSourceLocation(sourceLoc);\n         if (hints != null) {\n             for (IExpressionAnnotation hint : hints) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/a952e0150efd60d584761af6d8619f15766dab08/asterixdb/asterix-lang-sqlpp/src/main/java/org/apache/asterix/lang/sqlpp/rewrites/visitor/OperatorExpressionVisitor.java",
                "sha": "23b4d60cf47408899d57525f4354d1d8a6b97347",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2448][COMP] Fix NullPointerException in IntroduceSelectAccessMethodRule\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Fixed NPE when intersecting two indexes and predicate containing\n  between operator:\n  a) If index intersection plan is not possible then exit the rule\n  b) Rewrite between operator into ge/le pair instead of le/le pair\n\nChange-Id: I34d4cde6adf3785feb6a8280fcdb964a5fb72803\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2937\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/bdb1cb4e1033cabcf81866ca1ebc6e259dc97c10",
        "patched_files": [
            "btree-secondary-68.java",
            "OperatorExpressionVisitor.java",
            "intersection-with-between.java",
            "IntroduceSelectAccessMethodRule.java",
            "push-limit-to-primary-scan-select.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    },
    "asterixdb_b975100": {
        "bug_id": "asterixdb_b975100",
        "commit": "https://github.com/apache/asterixdb/commit/b975100c9001b8b86f976c592f7ab7863111d659",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java?ref=b975100c9001b8b86f976c592f7ab7863111d659",
                "deletions": 3,
                "filename": "asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "patch": "@@ -107,6 +107,10 @@ public static void validateFilterField(ARecordType recType, List<String> filterF\n                     keySourceIndicators);\n             for (int fidx = 0; fidx < partitioningExprTypes.size(); ++fidx) {\n                 IAType fieldType = partitioningExprTypes.get(fidx);\n+                if (fieldType == null) {\n+                    throw new AsterixException(\n+                            \"Type not found for partitioning key \" + partitioningExprs.get(fidx));\n+                }\n                 switch (fieldType.getTypeTag()) {\n                     case INT8:\n                     case INT16:\n@@ -125,10 +129,10 @@ public static void validateFilterField(ARecordType recType, List<String> filterF\n                         break;\n                     case UNION:\n                         throw new AsterixException(\n-                                \"The partitioning key \\\"\" + partitioningExprs.get(fidx) + \"\\\" cannot be nullable\");\n+                                \"The partitioning key \" + partitioningExprs.get(fidx) + \" cannot be nullable\");\n                     default:\n-                        throw new AsterixException(\"The partitioning key \\\"\" + partitioningExprs.get(fidx)\n-                                + \"\\\" cannot be of type \" + fieldType.getTypeTag() + \".\");\n+                        throw new AsterixException(\"The partitioning key \" + partitioningExprs.get(fidx)\n+                                + \" cannot be of type \" + fieldType.getTypeTag() + \".\");\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-algebra/src/main/java/org/apache/asterix/translator/util/ValidateUtil.java",
                "sha": "065b1b0c85732744123b5fb1192002935a49dbd4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659",
                "deletions": 4,
                "filename": "asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml",
                "patch": "@@ -412,13 +412,13 @@\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_255_create_dataset_error_1\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [name]</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_255_create_dataset_error_2\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>Error: The partitioning key \"[open-type]\" cannot be of type RECORD.</expected-error>\n+        <expected-error>Error: The partitioning key [open-type] cannot be of type RECORD.</expected-error>\n       </compilation-unit>\n     </test-case>\n     <!-- Feed datasets are not supported anymore\n@@ -432,13 +432,13 @@\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_266_create_dataset_error_1\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [point]</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">\n       <compilation-unit name=\"issue_266_create_dataset_error_2\">\n         <output-dir compare=\"Text\">none</output-dir>\n-        <expected-error>Error: The partitioning key \"[id]\" cannot be nullable</expected-error>\n+        <expected-error>Error: The partitioning key [id] cannot be nullable</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"exception\">",
                "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/metadata/testsuite.xml",
                "sha": "251e2e4c3f03613ab27ceea38633fba2572d9851",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "patch": "@@ -3179,7 +3179,7 @@\n     <test-case FilePath=\"misc\">\n       <compilation-unit name=\"partition-by-nonexistent-field\"> <!-- Seriously?? 3 expected errors -->\n         <output-dir compare=\"Text\">partition-by-nonexistent-field</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n+        <expected-error>Type not found for partitioning key [id]</expected-error>\n         <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Cannot find dataset</expected-error>\n         <expected-error>org.apache.hyracks.algebricks.common.exceptions.AlgebricksException: Could not find dataset</expected-error>\n       </compilation-unit>",
                "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite.xml",
                "sha": "6c65a62454a9ca8b55560de669d39bd0b18dd6c9",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=b975100c9001b8b86f976c592f7ab7863111d659",
                "deletions": 3,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -3034,9 +3034,9 @@\n     <test-case FilePath=\"misc\">\n       <compilation-unit name=\"partition-by-nonexistent-field\">\n         <output-dir compare=\"Text\">partition-by-nonexistent-field</output-dir>\n-        <expected-error>java.lang.NullPointerException</expected-error>\n-        <expected-error>Cannot find dataset</expected-error>\n-        <expected-error>Cannot find dataset testds in dataverse test nor an alias with name testds</expected-error>\n+        <expected-error>Type not found for partitioning key [id]</expected-error>\n+        <expected-error>Cannot find dataset testds in dataverse test</expected-error>\n+        <expected-error>Cannot find dataset testds in dataverse test nor an alias with name testds!</expected-error>\n       </compilation-unit>\n     </test-case>\n     <test-case FilePath=\"misc\">",
                "raw_url": "https://github.com/apache/asterixdb/raw/b975100c9001b8b86f976c592f7ab7863111d659/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "a89808e20e662c01869851bf7afd1a0e8a256505",
                "status": "modified"
            }
        ],
        "message": "fix NPE in ValidateUtil\n\nChange-Id: I8f623441a3f5b72a9a0621d32d9d1a6aa5567d66\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1139\nReviewed-by: Yingyi Bu <buyingyi@gmail.com>\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>",
        "parent": "https://github.com/apache/asterixdb/commit/6c63834dcda2d2efe2bf1fe25e53945e78b2de86",
        "patched_files": [
            "ValidateUtil.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java",
            "testsuite.java"
        ]
    },
    "asterixdb_d237f0c": {
        "bug_id": "asterixdb_d237f0c",
        "commit": "https://github.com/apache/asterixdb/commit/d237f0c22db8ee316d553b2254f711f328d5aff8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java",
                "patch": "@@ -54,7 +54,7 @@ public void write(IConnectionWriterState writerState) throws NetException {\n             ecodeSent = true;\n             ccb.reportLocalEOS();\n             adjustChannelWritability();\n-        } else if (eos && !eosSent) {\n+        } else if (isPendingCloseWrite()) {\n             writerState.getCommand().setChannelId(channelId);\n             writerState.getCommand().setCommandType(MuxDemuxCommand.CommandType.CLOSE_CHANNEL);\n             writerState.getCommand().setData(0);",
                "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/MessagingChannelWriteInterface.java",
                "sha": "84f7831d496d428343a381f8aeceee0c244c0e93",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java",
                "patch": "@@ -107,6 +107,7 @@ public synchronized IPartition getPartition(PartitionId pid) {\n     public synchronized void registerPartitionRequest(PartitionId partitionId, NetworkOutputChannel writer) {\n         if (failedJobsCache.getIfPresent(partitionId.getJobId()) != null) {\n             writer.abort(AbstractChannelWriteInterface.REMOTE_ERROR_CODE);\n+            return;\n         }\n         List<IPartition> pList = availablePartitionMap.get(partitionId);\n         if (pList != null && !pList.isEmpty()) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/partitions/PartitionManager.java",
                "sha": "7c8fb3471a0d2465ca6c9ce6d7a2741bfcd4a713",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8",
                "deletions": 1,
                "filename": "hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java",
                "patch": "@@ -75,7 +75,7 @@ private boolean computeWritability() {\n         if (writableDataPresent) {\n             return credits > 0;\n         }\n-        if (eos && !eosSent) {\n+        if (isPendingCloseWrite()) {\n             return true;\n         }\n         return ecode.get() == REMOTE_ERROR_CODE && !ecodeSent;\n@@ -116,6 +116,10 @@ public int getCredits() {\n         return credits;\n     }\n \n+    protected boolean isPendingCloseWrite() {\n+        return eos && !eosSent && !ecodeSent;\n+    }\n+\n     private class CloseableBufferAcceptor implements ICloseableBufferAcceptor {\n         @Override\n         public void accept(ByteBuffer buffer) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/AbstractChannelWriteInterface.java",
                "sha": "5c927f95e3ca1ced89b99f2684e11b6f95f99484",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java?ref=d237f0c22db8ee316d553b2254f711f328d5aff8",
                "deletions": 1,
                "filename": "hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java",
                "patch": "@@ -58,7 +58,7 @@ public void write(IConnectionWriterState writerState) throws NetException {\n             ecodeSent = true;\n             ccb.reportLocalEOS();\n             adjustChannelWritability();\n-        } else if (eos && !eosSent) {\n+        } else if (isPendingCloseWrite()) {\n             writerState.getCommand().setChannelId(channelId);\n             writerState.getCommand().setCommandType(MuxDemuxCommand.CommandType.CLOSE_CHANNEL);\n             writerState.getCommand().setData(0);",
                "raw_url": "https://github.com/apache/asterixdb/raw/d237f0c22db8ee316d553b2254f711f328d5aff8/hyracks-fullstack/hyracks/hyracks-net/src/main/java/org/apache/hyracks/net/protocols/muxdemux/FullFrameChannelWriteInterface.java",
                "sha": "3f4618bdc9728293345a1688c57975c586dc3a2d",
                "status": "modified"
            }
        ],
        "message": "[NO ISSUE][NET] Ensure CLOSE Is Not Sent After Channel ERROR\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Currently it is possible to send network channel\n  CLOSE command after a channel ERROR was sent. When this\n  happens and the channel was recycled to be reused\n  on the receiver side, the CLOSE command will result\n  in NPE. There is no need to send a CLOSE command\n  after an ERROR command because when an ERROR command\n  is received, it is treated as ERROR + CLOSE on the\n  receiver side.\n- Avoid registering partition requests for failed jobs.\n\nChange-Id: I17a769a46f4d13220adb22dd255e56dc4ccc458d\nReviewed-on: https://asterix-gerrit.ics.uci.edu/2954\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Murtadha Hubail <mhubail@apache.org>\nReviewed-by: Michael Blow <mblow@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/3a6846942cde2f6e97ab53e01e14a7025ca04814",
        "patched_files": [
            "PartitionManager.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "PartitionManagerTest.java"
        ]
    },
    "asterixdb_da0a4e5": {
        "bug_id": "asterixdb_da0a4e5",
        "commit": "https://github.com/apache/asterixdb/commit/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8",
                "deletions": 1,
                "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java",
                "patch": "@@ -119,7 +119,16 @@ public void join(ByteBuffer buffer, IFrameWriter writer) throws HyracksDataExcep\n                     accessorBuild.reset(buffers.get(bIndex));\n                     int c = tpComparator.compare(accessorProbe, i, accessorBuild, tIndex);\n                     if (c == 0) {\n-                    \tboolean predEval = ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, i, accessorBuild, tIndex) );\n+                    \tboolean predEval = evaluatePredicate(i, tIndex);\n+\t\t\t\t\t\t/*\n+                    \ttry {\n+\t\t\t\t\t\t\tpredEval = ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, i, accessorBuild, tIndex) );\n+\t\t\t\t\t\t} catch (ArrayIndexOutOfBoundsException e) {\n+\t\t\t\t\t\t\tSystem.out.println(\"Hit Array Index out of bound - now we swap\");\n+\t\t\t\t\t\t\te.printStackTrace();\n+\t\t\t\t\t\t\tpredEval = predEvaluator.evaluate(accessorBuild, i, accessorProbe, tIndex);\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\t*/\n                     \tif(predEval){\n                     \t\tmatchFound = true;\n                             appendToResult(i, tIndex, writer);\n@@ -155,6 +164,15 @@ private void flushFrame(ByteBuffer buffer, IFrameWriter writer) throws HyracksDa\n         buffer.position(0);\n         buffer.limit(buffer.capacity());\n     }\n+    \n+    private boolean evaluatePredicate(int tIx1, int tIx2){\n+    \tif(reverseOutputOrder){\t\t//Role Reversal Optimization is triggered\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorBuild, tIx2, accessorProbe, tIx1) );\n+    \t}\n+    \telse {\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorProbe, tIx1, accessorBuild, tIx2) );\n+    \t}\n+    }\n \n     private void appendToResult(int probeSidetIx, int buildSidetIx, IFrameWriter writer) throws HyracksDataException {\n         if (!reverseOutputOrder) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/InMemoryHashJoin.java",
                "sha": "f44d2f1101c7a5b72475a575bea0ceb5c8036d98",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8",
                "deletions": 1,
                "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java",
                "patch": "@@ -49,6 +49,8 @@\n     private final boolean isLeftOuter;\n     private final ArrayTupleBuilder nullTupleBuilder;\n     private final IPredicateEvaluator predEvaluator;\n+    private boolean isReversed;\t\t//Added for handling correct calling for predicate-evaluator upon recursive calls (in OptimizedHybridHashJoin) that cause role-reversal\n+\n     \n     public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessor0, FrameTupleAccessor accessor1,\n             ITuplePairComparator comparators, int memSize, IPredicateEvaluator predEval, boolean isLeftOuter, INullWriter[] nullWriters1)\n@@ -63,6 +65,7 @@ public NestedLoopJoin(IHyracksTaskContext ctx, FrameTupleAccessor accessor0, Fra\n         this.outBuffers = new ArrayList<ByteBuffer>();\n         this.memSize = memSize;\n         this.predEvaluator = predEval;\n+        this.isReversed = false;\n         this.ctx = ctx;\n \n         this.isLeftOuter = isLeftOuter;\n@@ -133,7 +136,7 @@ private void blockJoin(ByteBuffer outerBuffer, ByteBuffer innerBuffer, IFrameWri\n             boolean matchFound = false;\n             for (int j = 0; j < tupleCount1; ++j) {\n                 int c = compare(accessorOuter, i, accessorInner, j);\n-                boolean prdEval = (predEvaluator == null) || (predEvaluator.evaluate(accessorOuter, i, accessorInner, j));\n+                boolean prdEval = evaluatePredicate(i, j);\n                 if (c == 0 && prdEval) {\n                 \tmatchFound = true;\n                     if (!appender.appendConcat(accessorOuter, i, accessorInner, j)) {\n@@ -165,6 +168,15 @@ private void blockJoin(ByteBuffer outerBuffer, ByteBuffer innerBuffer, IFrameWri\n             }\n         }\n     }\n+    \n+    private boolean evaluatePredicate(int tIx1, int tIx2){\n+    \tif(isReversed){\t\t//Role Reversal Optimization is triggered\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorInner, tIx2, accessorOuter, tIx1) );\n+    \t}\n+    \telse {\n+    \t\treturn ( (predEvaluator == null) || predEvaluator.evaluate(accessorOuter, tIx1, accessorInner, tIx2) );\n+    \t}\n+    }\n \n     public void closeCache() throws HyracksDataException {\n         if (runFileWriter != null) {\n@@ -206,4 +218,8 @@ private int compare(FrameTupleAccessor accessor0, int tIndex0, FrameTupleAccesso\n         }\n         return 0;\n     }\n+    \n+    public void setIsReversed(boolean b){\n+    \tthis.isReversed = b;\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/NestedLoopJoin.java",
                "sha": "979ef5912d2adbe54657e7946782cfd983e9e785",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8",
                "deletions": 2,
                "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java",
                "patch": "@@ -99,6 +99,7 @@\n     private int freeFramesCounter; //Used for partition tuning\n     \n     private boolean isTableEmpty;\t//Added for handling the case, where build side is empty (tableSize is 0)\n+    private boolean isReversed;\t\t//Added for handling correct calling for predicate-evaluator upon recursive calls that cause role-reversal\n     \n     public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numOfPartitions, String rel0Name,\n             String rel1Name, int[] keys0, int[] keys1, IBinaryComparator[] comparators, RecordDescriptor buildRd,\n@@ -125,6 +126,7 @@ public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numO\n         this.predEvaluator = predEval;\n         this.isLeftOuter = false;\n         this.nullWriters1 = null;\n+        this.isReversed = false;\n \n     }\n \n@@ -153,7 +155,8 @@ public OptimizedHybridHashJoin(IHyracksTaskContext ctx, int memForJoin, int numO\n         \n         this.predEvaluator = predEval;\n         this.isLeftOuter = isLeftOuter;\n-\n+        this.isReversed = false;\n+        \n         this.nullWriters1 = isLeftOuter ? new INullWriter[nullWriterFactories1.length] : null;\n         if (isLeftOuter) {\n             for (int i = 0; i < nullWriterFactories1.length; i++) {\n@@ -441,7 +444,7 @@ private void createInMemoryJoiner(int inMemTupCount) throws HyracksDataException\n         this.inMemJoiner = new InMemoryHashJoin(ctx, inMemTupCount,\n                 new FrameTupleAccessor(ctx.getFrameSize(), probeRd), probeHpc, new FrameTupleAccessor(\n                         ctx.getFrameSize(), buildRd), buildHpc, new FrameTuplePairComparator(probeKeys, buildKeys,\n-                        comparators), isLeftOuter, nullWriters1, table, predEvaluator);\n+                        comparators), isLeftOuter, nullWriters1, table, predEvaluator, isReversed);\n     }\n \n     private void cacheInMemJoin() throws HyracksDataException {\n@@ -639,4 +642,8 @@ public String debugGetStats() {\n     public boolean isTableEmpty() {\n         return this.isTableEmpty;\n     }\n+    \n+    public void setIsReversed(boolean b){\n+    \tthis.isReversed = b;\n+    }\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoin.java",
                "sha": "6bc810ef02a982a784c7023ad8f4ac13979022d0",
                "status": "modified"
            },
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/asterixdb/blob/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java",
                "changes": 37,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java?ref=da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8",
                "deletions": 14,
                "filename": "hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java",
                "patch": "@@ -19,6 +19,8 @@\n import java.io.IOException;\n import java.nio.ByteBuffer;\n import java.util.BitSet;\n+import java.util.logging.Level;\n+import java.util.logging.Logger;\n \n import edu.uci.ics.hyracks.api.context.IHyracksTaskContext;\n import edu.uci.ics.hyracks.api.dataflow.ActivityId;\n@@ -117,6 +119,8 @@\n     \n     private final boolean isLeftOuter;\n     private final INullWriterFactory[] nullWriterFactories1;\n+    \n+    private static final Logger LOGGER = Logger.getLogger(OptimizedHybridHashJoinOperatorDescriptor.class.getName());\n \n     public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spec, int memsize, int inputsize0,\n             double factor, int[] keys0, int[] keys1, IBinaryHashFunctionFamily[] hashFunctionGeneratorFactories,\n@@ -139,8 +143,6 @@ public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spe\n         this.predEvaluatorFactory = predEvaluatorFactory;\n         this.isLeftOuter = isLeftOuter;\n         this.nullWriterFactories1 = nullWriterFactories1;\n-        \n-\n     }\n \n     public OptimizedHybridHashJoinOperatorDescriptor(IOperatorDescriptorRegistry spec, int memsize, int inputsize0,\n@@ -207,7 +209,7 @@ private int getNumberOfPartitions(int memorySize, int buildSize, double factor,\n     }\n \n     public static class BuildAndPartitionTaskState extends AbstractStateObject {\n-\n+    \t\n         private int memForJoin;\n         private int numOfPartitions;\n         private OptimizedHybridHashJoin hybridHJ;\n@@ -303,6 +305,7 @@ public void nextFrame(ByteBuffer buffer) throws HyracksDataException {\n                 public void close() throws HyracksDataException {\n                     state.hybridHJ.closeBuild();\n                     ctx.setStateObject(state);\n+                    LOGGER.log(Level.WARNING, \"OptimizedHybridHashJoin closed its build phase\");\n                 }\n \n                 @Override\n@@ -323,7 +326,7 @@ public void fail() throws HyracksDataException {\n      * Hybrid Hash Join recursively on them.\n      */\n     private class ProbeAndJoinActivityNode extends AbstractActivityNode {\n-\n+    \t\n         private static final long serialVersionUID = 1L;\n \n         private final ActivityId buildAid;\n@@ -423,9 +426,11 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                             hashFunctionGeneratorFactories).createPartitioner(level);\n                     ITuplePartitionComputer buildHpc = new FieldHashPartitionComputerFamily(buildKeys,\n                             hashFunctionGeneratorFactories).createPartitioner(level);\n-\n+                    \n                     long buildPartSize = ohhj.getBuildPartitionSize(pid) / ctx.getFrameSize();\n                     long probePartSize = ohhj.getProbePartitionSize(pid) / ctx.getFrameSize();\n+                    \n+                    LOGGER.log(Level.WARNING,\"Joining Partition Pairs (pid \"+pid+\") - (level \"+level+\") - BuildSize:\\t\"+buildPartSize+\"\\tProbeSize:\\t\"+probePartSize+\" - MemForJoin \"+(state.memForJoin));\n \n                     //Apply in-Mem HJ if possible\n                     if ((buildPartSize < state.memForJoin) || (probePartSize < state.memForJoin)) {\n@@ -460,7 +465,7 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                     else {\n                         OptimizedHybridHashJoin rHHj;\n                         if (isLeftOuter || buildPartSize < probePartSize) { //Build Side is smaller\n-\n+                        \tLOGGER.log(Level.WARNING,\"\\tApply RecursiveHHJ for (pid \"+pid+\") - (level \"+level+\") [buildSize is smaller]\");\n                             int n = getNumberOfPartitions(state.memForJoin, (int) buildPartSize, fudgeFactor,\n                                     nPartitions);\n                            \n@@ -503,6 +508,7 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                 }\n \n                             } else { //Switch to NLJ (Further recursion seems not to be useful)\n+                            \tLOGGER.log(Level.WARNING,\"\\tSwitched to NLJ for (pid \"+pid+\") - (level \"+level+\") (reverse false) [coming from buildSize was smaller]\");\n                                 for (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n                                     RunFileReader rbrfw = rHHj.getBuildRFReader(rPid);\n                                     RunFileReader rprfw = rHHj.getProbeRFReader(rPid);\n@@ -515,19 +521,21 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     int probeSideInTups = rHHj.getProbePartitionSizeInTup(rPid);\n                                     if (isLeftOuter || buildSideInTups < probeSideInTups) {\n                                         applyNestedLoopJoin(probeRd, buildRd, state.memForJoin, rbrfw, rprfw,\n-                                                nljComparator0);\n+                                                nljComparator0, false);\n                                     } else {\n                                         applyNestedLoopJoin(buildRd, probeRd, state.memForJoin, rprfw, rbrfw,\n-                                                nljComparator1);\n+                                                nljComparator1, false);\n                                     }\n                                 }\n                             }\n                         } else { //Role Reversal (Probe Side is smaller)\n+                        \tLOGGER.log(Level.WARNING,\"\\tApply RecursiveHHJ for (pid \"+pid+\") - (level \"+level+\") WITH REVERSAL [probeSize is smaller]\");\n                             int n = getNumberOfPartitions(state.memForJoin, (int) probePartSize, fudgeFactor,\n                                     nPartitions);\n                             \n                             rHHj = new OptimizedHybridHashJoin(ctx, state.memForJoin, n, BUILD_REL, PROBE_REL,\n                                     buildKeys, probeKeys, comparators, buildRd, probeRd, buildHpc, probeHpc, predEvaluator);\n+                            rHHj.setIsReversed(true);\t//Added to use predicateEvaluator (for inMemoryHashJoin) correctly\n \n                             probeSideReader.open();\n                             rHHj.initBuild();\n@@ -561,7 +569,8 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     joinPartitionPair(rHHj, rprfw, rbrfw, rPid, afterMax, (level + 1));\n                                 }\n                             } else { //Switch to NLJ (Further recursion seems not to be effective)\n-                                for (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n+                            \tLOGGER.log(Level.WARNING,\"\\tSwitched to NLJ for (pid \"+pid+\") - (level \"+level+\") (reverse true) [coming from probeSize was smaller]\");\n+                            \tfor (int rPid = rPStatus.nextSetBit(0); rPid >= 0; rPid = rPStatus.nextSetBit(rPid + 1)) {\n                                     RunFileReader rbrfw = rHHj.getBuildRFReader(rPid);\n                                     RunFileReader rprfw = rHHj.getProbeRFReader(rPid);\n                                     \n@@ -573,10 +582,10 @@ private void joinPartitionPair(OptimizedHybridHashJoin ohhj, RunFileReader build\n                                     long probeSideSize = rprfw.getFileSize();\n                                     if (buildSideSize > probeSideSize) {\n                                         applyNestedLoopJoin(buildRd, probeRd, state.memForJoin, rbrfw, rprfw,\n-                                                nljComparator1);\n+                                                nljComparator1, true);\n                                     } else {\n                                         applyNestedLoopJoin(probeRd, buildRd, state.memForJoin, rprfw, rbrfw,\n-                                                nljComparator0);\n+                                                nljComparator0, true);\n                                     }\n                                 }\n                             }\n@@ -590,7 +599,7 @@ private void applyInMemHashJoin(int[] bKeys, int[] pKeys, int tabSize, RecordDes\n                         RecordDescriptor probeRDesc, ITuplePartitionComputer hpcRepLarger,\n                         ITuplePartitionComputer hpcRepSmaller, RunFileReader bReader, RunFileReader pReader, boolean reverse, int pid)\n                         throws HyracksDataException {\n-\n+                \tLOGGER.log(Level.WARNING,\"\\t(pid \"+pid+\") - applyInMemHashJoin (reversal \"+reverse+\")\");\n                     ISerializableTable table = new SerializableHashTable(tabSize, ctx);\n                     InMemoryHashJoin joiner = new InMemoryHashJoin(ctx, tabSize, new FrameTupleAccessor(\n                             ctx.getFrameSize(), probeRDesc), hpcRepLarger, new FrameTupleAccessor(ctx.getFrameSize(),\n@@ -619,9 +628,9 @@ private void applyInMemHashJoin(int[] bKeys, int[] pKeys, int tabSize, RecordDes\n                 }\n \n                 private void applyNestedLoopJoin(RecordDescriptor outerRd, RecordDescriptor innerRd, int memorySize,\n-                        RunFileReader outerReader, RunFileReader innerReader, ITuplePairComparator nljComparator)\n+                        RunFileReader outerReader, RunFileReader innerReader, ITuplePairComparator nljComparator, boolean reverse)\n                         throws HyracksDataException {\n-\n+                \t\n                     NestedLoopJoin nlj = new NestedLoopJoin(ctx, new FrameTupleAccessor(ctx.getFrameSize(), outerRd),\n                             new FrameTupleAccessor(ctx.getFrameSize(), innerRd), nljComparator, memorySize, predEvaluator, false, null);\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/da0a4e56bffa7c7cb5fd14b5e4d21b4bee8dc5e8/hyracks/hyracks-dataflow-std/src/main/java/edu/uci/ics/hyracks/dataflow/std/join/OptimizedHybridHashJoinOperatorDescriptor.java",
                "sha": "2d3185f401d5fb2b379cc7bcb1f6e74152b2ae48",
                "status": "modified"
            }
        ],
        "message": "Changes to fix NPE in tpch SF=1 with OptzHHJ",
        "parent": "https://github.com/apache/asterixdb/commit/0f63d8bf4dc96d106ef237d227807edfbda0046b",
        "patched_files": [
            "OptimizedHybridHashJoin.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "OptimizedHybridHashJoinTest.java"
        ]
    },
    "asterixdb_db0e80e": {
        "bug_id": "asterixdb_db0e80e",
        "commit": "https://github.com/apache/asterixdb/commit/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.000.ddl.sqlpp",
                "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389",
                "status": "added"
            },
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp",
                "patch": "@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": \"So, 'twas better Betty Botter bought a bit of better butter\", \"f2\": \"\\\\b[Bb]\\\\w+\"},\n+{\"id\": 2, \"f1\": \"So, 'twas better Betty Botter bought a bit of better butter\", \"f2\": \"\\\\b[Bb]\\\\w+ \\\\b[Bb]\\\\w+\"},\n+{\"id\": 3, \"f1\": \"abracadabra\", \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": \"abc\", \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": \"123\"},\n+{\"id\": 6, \"f1\": \"\", \"f2\": \"\"}\n+]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.001.update.sqlpp",
                "sha": "e15e988268aed564d9a74fa5009d207ed44ac9a0",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp",
                "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value regexp_matches(f1, f2) from test order by id asc;",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.002.query.sqlpp",
                "sha": "83f2d9a65701e7f793553c05293cf2c6ac7ba3dd",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/001/regexp_matches.003.ddl.sqlpp",
                "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.000.ddl.sqlpp",
                "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": missing, \"f2\": null},\n+{\"id\": 2, \"f1\": null, \"f2\": missing},\n+{\"id\": 3, \"f1\": null, \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": 13, \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": true}\n+]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.001.update.sqlpp",
                "sha": "d77abf0054b16cb83689ca5f7fc0cd086f86f200",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value [\n+(select value regexp_matches(f1, f2) is missing from test where id = 1)[0],\n+(select value regexp_matches(f1, f2) is missing from test where id = 2)[0],\n+(select value regexp_matches(f1, f2) is null from test where id = 3)[0],\n+(select value regex_matches(f1, f2) is null from test where id = 4)[0],\n+(select value regex_matches(f1, f2) is null from test where id = 5)[0]\n+];",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.002.query.sqlpp",
                "sha": "2ae8bbb5f8aec10637bd6245eeed04569b444097",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/002/regexp_matches.003.ddl.sqlpp",
                "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5",
                "status": "added"
            },
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_matches(\"So, 'twas better Betty Botter bought a bit of better butter\", \"\\\\b[Bb]\\\\w+\"),\n+regexp_matches(\"So, 'twas better Betty Botter bought a bit of better butter\", \"\\\\b[Bb]\\\\w+ \\\\b[Bb]\\\\w+\"),\n+regexp_matches(\"abracadabra\", \"[abc]\"),\n+regex_matches(\"abc\", \"\"),\n+regex_matches(\"abc\", \"123\"),\n+regex_matches(\"\", \"\")\n+];\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/003/regexp_matches.000.query.sqlpp",
                "sha": "a38770474966ec9a6048f9304f4fd5c70c7fec42",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_matches(missing, null) is missing,\n+regexp_matches(null, missing) is missing,\n+regexp_matches(null, \"[abc]\") is null,\n+regexp_matches(13, \"\") is null,\n+regexp_matches(\"abc\", true) is null\n+];\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_matches/004/regexp_matches.000.query.sqlpp",
                "sha": "f127ce36ef28cd88e5fd5d3200f4f08899fd8b70",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.000.ddl.sqlpp",
                "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389",
                "status": "added"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": \"C:\\\\Program Files\\\\asterixdb\\\\server\\\\bin\", \"f2\": \"[\\\\\\\\]\"},\n+{\"id\": 2, \"f1\": \"/opt/asterixdb/bin\", \"f2\": \"/\"},\n+{\"id\": 3, \"f1\": \"a + b - c * d / e < f > g >= h <= i == j\", \"f2\": \"\\\\s*[a-zA-Z]+\\\\s*\"},\n+{\"id\": 4, \"f1\": \"abc\", \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": \"/\"},\n+{\"id\": 6, \"f1\": \"\", \"f2\": \"\"},\n+{\"id\": 7, \"f1\": \"\", \"f2\": \"1\"},\n+{\"id\": 8, \"f1\": \"1\", \"f2\": \"\"},\n+{\"id\": 9, \"f1\": \"1\", \"f2\": \"2\"},\n+{\"id\": 10, \"f1\": \"1\", \"f2\": \"1\"},\n+{\"id\": 11, \"f1\": \"12\", \"f2\": \"1\"},\n+{\"id\": 12, \"f1\": \"12\", \"f2\": \"2\"},\n+{\"id\": 13, \"f1\": \"121\", \"f2\": \"2\"}\n+]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.001.update.sqlpp",
                "sha": "d4f38c577fa725e3cd13e4ab2899ffe7a44844a3",
                "status": "added"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp",
                "patch": "@@ -0,0 +1,22 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value regexp_split(f1, f2) from test order by id asc;",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.002.query.sqlpp",
                "sha": "897b20b070dec6abcc9d64d6441f057802dd7a12",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/001/regexp_split.003.ddl.sqlpp",
                "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5",
                "status": "added"
            },
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp",
                "patch": "@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+use test;\n+\n+drop type test if exists;\n+create type test as open {\n+id: int32\n+};\n+\n+drop dataset test if exists;\n+create dataset test(test) primary key id;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.000.ddl.sqlpp",
                "sha": "dda55b003cb5da98da9d4a35e7a53dcce7a5c389",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+insert into test([\n+{\"id\": 1, \"f1\": missing, \"f2\": null},\n+{\"id\": 2, \"f1\": null, \"f2\": missing},\n+{\"id\": 3, \"f1\": null, \"f2\": \"[abc]\"},\n+{\"id\": 4, \"f1\": 13, \"f2\": \"\"},\n+{\"id\": 5, \"f1\": \"abc\", \"f2\": true}\n+]);\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.001.update.sqlpp",
                "sha": "d77abf0054b16cb83689ca5f7fc0cd086f86f200",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+use test;\n+\n+select value [\n+(select value regexp_split(f1, f2) is missing from test where id = 1)[0],\n+(select value regexp_split(f1, f2) is missing from test where id = 2)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 3)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 4)[0],\n+(select value regexp_split(f1, f2) is null from test where id = 5)[0]\n+];",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.002.query.sqlpp",
                "sha": "bbb8b7b29a16cd309cf2c21325f082fb17943b05",
                "status": "added"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp",
                "patch": "@@ -0,0 +1,20 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test;\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/002/regexp_split.003.ddl.sqlpp",
                "sha": "269f6732679d92c4cf0c1029a3f15370b0a5d8d5",
                "status": "added"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp",
                "patch": "@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_split(\"C:\\\\Program Files\\\\asterixdb\\\\server\\\\bin\", \"[\\\\\\\\]\"),\n+regexp_split(\"/opt/asterixdb/bin\", \"/\"),\n+regexp_split(\"a + b - c * d / e < f > g >= h <= i == j\", \"\\\\s*[a-zA-Z]+\\\\s*\"),\n+regexp_split(\"abc\", \"\"),\n+regexp_split(\"abc\", \"/\"),\n+regexp_split(\"\", \"\"),\n+regex_split(\"\", \"1\"),\n+regex_split(\"1\", \"\"),\n+regex_split(\"1\", \"2\"),\n+regex_split(\"1\", \"1\"),\n+regex_split(\"12\", \"1\"),\n+regex_split(\"12\", \"2\"),\n+regex_split(\"121\", \"2\")\n+];\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/003/regexp_split.000.query.sqlpp",
                "sha": "a48af939696750297c75ee19fec5ed7cf959641b",
                "status": "added"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp",
                "changes": 26,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp",
                "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+[\n+regexp_split(missing, null) is missing,\n+regexp_split(null, missing) is missing,\n+regexp_split(null, \"[abc]\") is null,\n+regexp_split(13, \"\") is null,\n+regexp_split(\"abc\", true) is null\n+];\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/string/regexp_split/004/regexp_split.000.query.sqlpp",
                "sha": "69d0ca7119d5caf174e3e9c697407683b79d641b",
                "status": "added"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm",
                "patch": "@@ -0,0 +1,6 @@\n+[ \"better\", \"Betty\", \"Botter\", \"bought\", \"bit\", \"better\", \"butter\" ]\n+[ \"better Betty\", \"Botter bought\", \"better butter\" ]\n+[ \"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\", \"a\" ]\n+[ \"\", \"\", \"\", \"\" ]\n+[  ]\n+[ \"\" ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/001/regexp_matches.002.adm",
                "sha": "1aa8d8cb3dc9f93899accf5b7d004411128c1092",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm",
                "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/002/regexp_matches.002.adm",
                "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm",
                "patch": "@@ -0,0 +1 @@\n+[ [ \"better\", \"Betty\", \"Botter\", \"bought\", \"bit\", \"better\", \"butter\" ], [ \"better Betty\", \"Botter bought\", \"better butter\" ], [ \"a\", \"b\", \"a\", \"c\", \"a\", \"a\", \"b\", \"a\" ], [ \"\", \"\", \"\", \"\" ], [  ], [ \"\" ] ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/003/regexp_matches.000.adm",
                "sha": "32f80be1264233e28f3615942a20fade5026f0d8",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm",
                "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_matches/004/regexp_matches.000.adm",
                "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840",
                "status": "added"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm",
                "patch": "@@ -0,0 +1,13 @@\n+[ \"C:\", \"Program Files\", \"asterixdb\", \"server\", \"bin\" ]\n+[ \"\", \"opt\", \"asterixdb\", \"bin\" ]\n+[ \"\", \"+\", \"-\", \"*\", \"/\", \"<\", \">\", \">=\", \"<=\", \"==\" ]\n+[ \"a\", \"b\", \"c\" ]\n+[ \"abc\" ]\n+[ \"\" ]\n+[ \"\" ]\n+[ \"1\" ]\n+[ \"1\" ]\n+[  ]\n+[ \"\", \"2\" ]\n+[ \"1\" ]\n+[ \"1\", \"1\" ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/001/regexp_split.002.adm",
                "sha": "96a4a2ec56b58dc944c40e2150d428beaa6c03bd",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm",
                "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/002/regexp_split.002.adm",
                "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm",
                "patch": "@@ -0,0 +1 @@\n+[ [ \"C:\", \"Program Files\", \"asterixdb\", \"server\", \"bin\" ], [ \"\", \"opt\", \"asterixdb\", \"bin\" ], [ \"\", \"+\", \"-\", \"*\", \"/\", \"<\", \">\", \">=\", \"<=\", \"==\" ], [ \"a\", \"b\", \"c\" ], [ \"abc\" ], [ \"\" ], [ \"\" ], [ \"1\" ], [ \"1\" ], [  ], [ \"\", \"2\" ], [ \"1\" ], [ \"1\", \"1\" ] ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/003/regexp_split.000.adm",
                "sha": "796e5447581bbc4aafb82f14360fc4ca8bd791db",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm",
                "patch": "@@ -0,0 +1 @@\n+[ true, true, true, true, true ]\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/results/string/regexp_split/004/regexp_split.000.adm",
                "sha": "2f00e1db14e05d30e8dbf790e2edaa9673888840",
                "status": "added"
            },
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -9212,6 +9212,26 @@\n         <output-dir compare=\"Text\">regexp_like_with_flag/regex_like_with_flag</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/001\">\n+        <output-dir compare=\"Text\">regexp_matches/001</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/002\">\n+        <output-dir compare=\"Text\">regexp_matches/002</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/003\">\n+        <output-dir compare=\"Text\">regexp_matches/003</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_matches/004\">\n+        <output-dir compare=\"Text\">regexp_matches/004</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"string\">\n       <compilation-unit name=\"regexp_position/offset0/regexp_position\">\n         <output-dir compare=\"Text\">regexp_position/offset0/regexp_position</output-dir>\n@@ -9332,6 +9352,26 @@\n         <output-dir compare=\"Text\">regexp_position_with_flag/offset1/regex_pos1_with_flag</output-dir>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/001\">\n+        <output-dir compare=\"Text\">regexp_split/001</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/002\">\n+        <output-dir compare=\"Text\">regexp_split/002</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/003\">\n+        <output-dir compare=\"Text\">regexp_split/003</output-dir>\n+      </compilation-unit>\n+    </test-case>\n+    <test-case FilePath=\"string\">\n+      <compilation-unit name=\"regexp_split/004\">\n+        <output-dir compare=\"Text\">regexp_split/004</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"string\">\n       <compilation-unit name=\"repeat\">\n         <output-dir compare=\"Text\">repeat</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "201ec6b4c57036128b36f3754aafe7f7e72652af",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java",
                "patch": "@@ -70,6 +70,8 @@\n         addFunctionMapping(\"regex_position1\", \"regexp-position1\");\n         addFunctionMapping(\"regexp_pos1\", \"regexp-position1\");\n         addFunctionMapping(\"regex_replace\", \"regexp-replace\");\n+        addFunctionMapping(\"regex_matches\", \"regexp-matches\");\n+        addFunctionMapping(\"regex_split\", \"regexp-split\");\n \n         // Type functions.\n         addFunctionMapping(\"isnull\", \"is-null\"); // isnull, internal: is-null",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-lang-common/src/main/java/org/apache/asterix/lang/common/util/CommonFunctionMapUtil.java",
                "sha": "c87f4dcfdbb6f8475dcaf2d0dbf0f4ca5dadc5e4",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "patch": "@@ -440,6 +440,10 @@\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-replace\", 3);\n     public static final FunctionIdentifier STRING_REGEXP_REPLACE_WITH_FLAG =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-replace\", 4);\n+    public static final FunctionIdentifier STRING_REGEXP_MATCHES =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-matches\", 2);\n+    public static final FunctionIdentifier STRING_REGEXP_SPLIT =\n+            new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"regexp-split\", 2);\n     public static final FunctionIdentifier STRING_LOWERCASE =\n             new FunctionIdentifier(FunctionConstants.ASTERIX_NS, \"lowercase\", 1);\n     public static final FunctionIdentifier STRING_UPPERCASE =\n@@ -1744,6 +1748,8 @@ public static FunctionInfo lookupFunction(FunctionIdentifier fid) {\n         addFunction(STRING_REGEXP_REPLACE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n         addFunction(STRING_REGEXP_REPLACE_WITH_FLAG, AStringTypeComputer.INSTANCE_NULLABLE, true);\n         addFunction(STRING_REPLACE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n+        addFunction(STRING_REGEXP_MATCHES, UniformInputTypeComputer.STRING_STRING_LIST_INSTANCE, true);\n+        addFunction(STRING_REGEXP_SPLIT, UniformInputTypeComputer.STRING_STRING_LIST_INSTANCE, true);\n         addFunction(STRING_REPLACE_WITH_LIMIT, AStringTypeComputer.INSTANCE_NULLABLE, true);\n         addFunction(STRING_REVERSE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);\n         addFunction(SUBSTRING_BEFORE, UniformInputTypeComputer.STRING_STRING_INSTANCE, true);",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-om/src/main/java/org/apache/asterix/om/functions/BuiltinFunctions.java",
                "sha": "94303a722a56b6d8c9b2450f12ba65836c7a8c3a",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 5,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java",
                "patch": "@@ -46,8 +46,8 @@\n     // Argument pointables.\n     private final IPointable argPtrLeft = new VoidPointable();\n     private final IPointable argPtrSecond = new VoidPointable();\n-    private final UTF8StringPointable leftPtr = new UTF8StringPointable();\n-    private final UTF8StringPointable rightPtr = new UTF8StringPointable();\n+    private final UTF8StringPointable leftStringPointable = new UTF8StringPointable();\n+    private final UTF8StringPointable rightStringPointable = new UTF8StringPointable();\n \n     // For results.\n     protected final ArrayBackedValueStorage resultStorage = new ArrayBackedValueStorage();\n@@ -100,12 +100,12 @@ public void evaluate(IFrameTupleReference tuple, IPointable resultPointable) thr\n         }\n \n         // Sets StringUTF8Pointables.\n-        leftPtr.set(bytes0, offset0 + 1, len0 - 1);\n-        rightPtr.set(bytes1, offset1 + 1, len1 - 1);\n+        leftStringPointable.set(bytes0, offset0 + 1, len0 - 1);\n+        rightStringPointable.set(bytes1, offset1 + 1, len1 - 1);\n \n         // The actual processing.\n         try {\n-            process(leftPtr, rightPtr, resultPointable);\n+            process(leftStringPointable, rightStringPointable, resultPointable);\n         } catch (IOException e) {\n             throw HyracksDataException.create(e);\n         }",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/AbstractBinaryStringEval.java",
                "sha": "2fc8654da6467aaa1aff05a176086868c0c93ada",
                "status": "modified"
            },
            {
                "additions": 111,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java",
                "changes": 111,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java",
                "patch": "@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.IOException;\n+\n+import org.apache.asterix.builders.IAsterixListBuilder;\n+import org.apache.asterix.builders.OrderedListBuilder;\n+import org.apache.asterix.common.annotations.MissingNullInOutFunction;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.utils.RegExpMatcher;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n+import org.apache.hyracks.data.std.util.GrowableArray;\n+import org.apache.hyracks.data.std.util.UTF8StringBuilder;\n+\n+/**\n+ * This function takes 2 arguments, a string, and a pattern\n+ */\n+@MissingNullInOutFunction\n+public class StringRegExpMatchesDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final IFunctionDescriptorFactory FACTORY = StringRegExpMatchesDescriptor::new;\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(IEvaluatorContext ctx) throws HyracksDataException {\n+                return new AbstractBinaryStringEval(ctx, args[0], args[1], getIdentifier(), sourceLoc) {\n+                    private final RegExpMatcher matcher = new RegExpMatcher();\n+\n+                    private final UTF8StringBuilder stringBuilder = new UTF8StringBuilder();\n+                    private final GrowableArray stringBuilderArray = new GrowableArray();\n+\n+                    private final IAsterixListBuilder listBuilder = new OrderedListBuilder();\n+                    private final AbstractCollectionType collectionType =\n+                            new AOrderedListType(BuiltinType.ASTRING, BuiltinType.ASTRING.getTypeName());\n+\n+                    @Override\n+                    protected void process(UTF8StringPointable srcPtr, UTF8StringPointable patternPtr,\n+                            IPointable result) throws HyracksDataException {\n+                        matcher.build(srcPtr, patternPtr);\n+\n+                        // Result is a list of type strings\n+                        listBuilder.reset(collectionType);\n+\n+                        try {\n+                            // Add all the matches to the builder\n+                            while (matcher.find()) {\n+                                String match = matcher.group();\n+                                stringBuilderArray.reset();\n+\n+                                // Estimated length is number of characters + 1 (1 byte for string length)\n+                                stringBuilder.reset(stringBuilderArray, match.length() + 1);\n+                                stringBuilder.appendString(match);\n+                                stringBuilder.finish();\n+\n+                                resultStorage.reset();\n+                                dataOutput.writeByte(ATypeTag.SERIALIZED_STRING_TYPE_TAG);\n+                                dataOutput.write(stringBuilderArray.getByteArray(), 0, stringBuilderArray.getLength());\n+                                listBuilder.addItem(resultStorage);\n+                            }\n+\n+                            resultStorage.reset();\n+                            listBuilder.write(dataOutput, true);\n+                            result.set(resultStorage);\n+                        } catch (IOException ex) {\n+                            throw HyracksDataException.create(ex);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.STRING_REGEXP_MATCHES;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpMatchesDescriptor.java",
                "sha": "595203bd58519f3b527ff6629e3a59264f5b4c77",
                "status": "added"
            },
            {
                "additions": 108,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java",
                "changes": 108,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java",
                "patch": "@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.asterix.runtime.evaluators.functions;\n+\n+import java.io.IOException;\n+\n+import org.apache.asterix.builders.IAsterixListBuilder;\n+import org.apache.asterix.builders.OrderedListBuilder;\n+import org.apache.asterix.common.annotations.MissingNullInOutFunction;\n+import org.apache.asterix.om.functions.BuiltinFunctions;\n+import org.apache.asterix.om.functions.IFunctionDescriptorFactory;\n+import org.apache.asterix.om.types.AOrderedListType;\n+import org.apache.asterix.om.types.ATypeTag;\n+import org.apache.asterix.om.types.AbstractCollectionType;\n+import org.apache.asterix.om.types.BuiltinType;\n+import org.apache.asterix.runtime.evaluators.base.AbstractScalarFunctionDynamicDescriptor;\n+import org.apache.hyracks.algebricks.core.algebra.functions.FunctionIdentifier;\n+import org.apache.hyracks.algebricks.runtime.base.IEvaluatorContext;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluator;\n+import org.apache.hyracks.algebricks.runtime.base.IScalarEvaluatorFactory;\n+import org.apache.hyracks.api.exceptions.HyracksDataException;\n+import org.apache.hyracks.data.std.api.IPointable;\n+import org.apache.hyracks.data.std.primitive.UTF8StringPointable;\n+import org.apache.hyracks.data.std.util.GrowableArray;\n+import org.apache.hyracks.data.std.util.UTF8StringBuilder;\n+\n+/**\n+ * This function takes 2 arguments, a string, and a pattern\n+ */\n+@MissingNullInOutFunction\n+public class StringRegExpSplitDescriptor extends AbstractScalarFunctionDynamicDescriptor {\n+    private static final long serialVersionUID = 1L;\n+\n+    public static final IFunctionDescriptorFactory FACTORY = StringRegExpSplitDescriptor::new;\n+\n+    @Override\n+    public IScalarEvaluatorFactory createEvaluatorFactory(final IScalarEvaluatorFactory[] args) {\n+        return new IScalarEvaluatorFactory() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public IScalarEvaluator createScalarEvaluator(IEvaluatorContext ctx) throws HyracksDataException {\n+                return new AbstractBinaryStringEval(ctx, args[0], args[1], getIdentifier(), sourceLoc) {\n+\n+                    private final UTF8StringBuilder stringBuilder = new UTF8StringBuilder();\n+                    private final GrowableArray stringBuilderArray = new GrowableArray();\n+\n+                    private final IAsterixListBuilder listBuilder = new OrderedListBuilder();\n+                    private final AbstractCollectionType collectionType =\n+                            new AOrderedListType(BuiltinType.ASTRING, BuiltinType.ASTRING.getTypeName());\n+\n+                    @Override\n+                    protected void process(UTF8StringPointable srcPtr, UTF8StringPointable patternPtr,\n+                            IPointable result) throws HyracksDataException {\n+                        String[] splits = srcPtr.toString().split(patternPtr.toString());\n+\n+                        // Result is a list of type strings\n+                        listBuilder.reset(collectionType);\n+\n+                        try {\n+                            // Add all the splits to the builder\n+                            for (String split : splits) {\n+                                stringBuilderArray.reset();\n+\n+                                // Estimated length is number of characters + 1 (1 byte for string length)\n+                                stringBuilder.reset(stringBuilderArray, split.length() + 1);\n+                                stringBuilder.appendString(split);\n+                                stringBuilder.finish();\n+\n+                                resultStorage.reset();\n+                                dataOutput.writeByte(ATypeTag.SERIALIZED_STRING_TYPE_TAG);\n+                                dataOutput.write(stringBuilderArray.getByteArray(), 0, stringBuilderArray.getLength());\n+                                listBuilder.addItem(resultStorage);\n+                            }\n+\n+                            resultStorage.reset();\n+                            listBuilder.write(dataOutput, true);\n+                            result.set(resultStorage);\n+                        } catch (IOException ex) {\n+                            throw HyracksDataException.create(ex);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+    }\n+\n+    @Override\n+    public FunctionIdentifier getIdentifier() {\n+        return BuiltinFunctions.STRING_REGEXP_SPLIT;\n+    }\n+}",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/StringRegExpSplitDescriptor.java",
                "sha": "da6a20649e9052bfdd0356588d15cec5587a8cc7",
                "status": "added"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java",
                "patch": "@@ -151,6 +151,16 @@ public boolean find() {\n         return matcher.find();\n     }\n \n+    /**\n+     * Returns the matched string. This should be called after checking that the find()\n+     * method returns true.\n+     *\n+     * @return The matched string\n+     */\n+    public String group() {\n+        return matcher.group();\n+    }\n+\n     /**\n      * @return the first matched position of the regular expression pattern in the source string.\n      */",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/evaluators/functions/utils/RegExpMatcher.java",
                "sha": "778df5b19346aba68eeb1907190f67744d18fcec",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "patch": "@@ -417,12 +417,14 @@\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpContainsWithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpLikeDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpLikeWithFlagDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.StringRegExpMatchesDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionOffset1Descriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionOffset1WithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpPositionWithFlagDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpReplaceDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRegExpReplaceWithFlagDescriptor;\n+import org.apache.asterix.runtime.evaluators.functions.StringRegExpSplitDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringRepeatDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringReplaceDescriptor;\n import org.apache.asterix.runtime.evaluators.functions.StringReplaceWithLimitDescriptor;\n@@ -999,6 +1001,8 @@ public static FunctionCollection createDefaultFunctionCollection() {\n         fc.add(StringRegExpPositionOffset1WithFlagDescriptor.FACTORY);\n         fc.add(StringRegExpReplaceDescriptor.FACTORY);\n         fc.add(StringRegExpReplaceWithFlagDescriptor.FACTORY);\n+        fc.add(StringRegExpMatchesDescriptor.FACTORY);\n+        fc.add(StringRegExpSplitDescriptor.FACTORY);\n         fc.add(StringInitCapDescriptor.FACTORY);\n         fc.add(StringTrimDescriptor.FACTORY);\n         fc.add(StringLTrimDescriptor.FACTORY);",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/functions/FunctionCollection.java",
                "sha": "515518d5b9154116e254607dd1b1ec7cec40a301",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/asterixdb/blob/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java?ref=db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java",
                "patch": "@@ -45,6 +45,9 @@ public CharSequence subSequence(int start, int end) {\n         if (end != start) {\n             carSeq.buf = new char[carSeq.length];\n             System.arraycopy(buf, start, carSeq.buf, 0, carSeq.length);\n+        } else {\n+            // subSequence with start = end will return an empty char[]\n+            carSeq.buf = new char[0];\n         }\n         return carSeq;\n     }",
                "raw_url": "https://github.com/apache/asterixdb/raw/db0e80ee91adab00bdcb2a34aa649e1ebfb41a9d/hyracks-fullstack/hyracks/hyracks-data/hyracks-data-std/src/main/java/org/apache/hyracks/data/std/util/UTF8CharSequence.java",
                "sha": "71ca6521fcaee8ae1a8287c00c3be43e944a2ce4",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2680][FUN] Add support to regexp_matches() and regexp_split()\n\n- user model changes: yes\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Added support to regexp_matches().\n- Added support to regexp_split().\n- Added test cases for regexp_matches().\n- Added test cases for regexp_split().\n- Changed behavior of UTF8CharSequence when\n  subSequence is called with start = end, originally\n  it returns a null char[] array which causes an NPE,\n  now it returns an empty char[].\n\nChange-Id: Iccf5ba14f5c8b8cf4bcd6dd6e412bb515d68dd74\nReviewed-on: https://asterix-gerrit.ics.uci.edu/c/asterixdb/+/4243\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Hussain Towaileb <hussainht@gmail.com>\nReviewed-by: Dmitry Lychagin <dmitry.lychagin@couchbase.com>",
        "parent": "https://github.com/apache/asterixdb/commit/314e279fa24f7786f11e681173b3a15ec597270a",
        "patched_files": [
            "StringRegExpMatchesDescriptor.java",
            "AbstractBinaryStringEval.java",
            "CommonFunctionMapUtil.java",
            "UTF8CharSequence.java",
            "StringRegExpSplitDescriptor.java",
            "RegExpMatcher.java",
            "FunctionCollection.java",
            "BuiltinFunctions.java",
            "regexp_matches.java",
            "regexp_split.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    },
    "asterixdb_e0d8e50": {
        "bug_id": "asterixdb_e0d8e50",
        "commit": "https://github.com/apache/asterixdb/commit/e0d8e5078f90823e8dd51052317a7da1c08cc9f9",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9",
                "deletions": 7,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java",
                "patch": "@@ -92,6 +92,11 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n         ClusterControllerService ccSrv = (ClusterControllerService) ccSrvContext.getControllerService();\n         CCApplication ccApp = (CCApplication) ccSrv.getApplication();\n         CCMessageBroker messageBroker = (CCMessageBroker) ccSrvContext.getMessageBroker();\n+        final String rejectionReason = getRejectionReason(ccSrv);\n+        if (rejectionReason != null) {\n+            sendRejection(rejectionReason, messageBroker);\n+            return;\n+        }\n         CCExtensionManager ccExtMgr = (CCExtensionManager) ccAppCtx.getExtensionManager();\n         ILangCompilationProvider compilationProvider = ccExtMgr.getCompilationProvider(lang);\n         IStorageComponentProvider storageComponentProvider = ccAppCtx.getStorageComponentProvider();\n@@ -100,16 +105,9 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n \n         ccSrv.getExecutor().submit(() -> {\n             ExecuteStatementResponseMessage responseMsg = new ExecuteStatementResponseMessage(requestMessageId);\n-\n             try {\n-                final IClusterManagementWork.ClusterState clusterState = ClusterStateManager.INSTANCE.getState();\n-                if (clusterState != IClusterManagementWork.ClusterState.ACTIVE) {\n-                    throw new IllegalStateException(\"Cannot execute request, cluster is \" + clusterState);\n-                }\n-\n                 IParser parser = compilationProvider.getParserFactory().createParser(statementsText);\n                 List<Statement> statements = parser.parse();\n-\n                 StringWriter outWriter = new StringWriter(256);\n                 PrintWriter outPrinter = new PrintWriter(outWriter);\n                 SessionOutput.ResultDecorator resultPrefix = ResultUtil.createPreResultDecorator();\n@@ -148,6 +146,27 @@ public void handle(ICcApplicationContext ccAppCtx) throws HyracksDataException,\n         });\n     }\n \n+    private String getRejectionReason(ClusterControllerService ccSrv) {\n+        if (ccSrv.getNodeManager().getNodeControllerState(requestNodeId) == null) {\n+            return \"Node is not registerted with the CC\";\n+        }\n+        final IClusterManagementWork.ClusterState clusterState = ClusterStateManager.INSTANCE.getState();\n+        if (clusterState != IClusterManagementWork.ClusterState.ACTIVE) {\n+            return \"Cannot execute request, cluster is \" + clusterState;\n+        }\n+        return null;\n+    }\n+\n+    private void sendRejection(String reason, CCMessageBroker messageBroker) {\n+        ExecuteStatementResponseMessage responseMsg = new ExecuteStatementResponseMessage(requestMessageId);\n+        responseMsg.setError(new Exception(reason));\n+        try {\n+            messageBroker.sendApplicationMessageToNC(responseMsg, requestNodeId);\n+        } catch (Exception e) {\n+            LOGGER.log(Level.WARNING, e.toString(), e);\n+        }\n+    }\n+\n     @Override\n     public String toString() {\n         return String.format(\"%s(id=%s, from=%s): %s\", getClass().getSimpleName(), requestMessageId, requestNodeId,",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/app/message/ExecuteStatementRequestMessage.java",
                "sha": "9faa9e9a09265664248143e1a46b44d76cb2e7fc",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java",
                "patch": "@@ -69,7 +69,13 @@ public void receivedMessage(IMessage message, String nodeId) throws Exception {\n     public void sendApplicationMessageToNC(INcAddressedMessage msg, String nodeId) throws Exception {\n         INodeManager nodeManager = ccs.getNodeManager();\n         NodeControllerState state = nodeManager.getNodeControllerState(nodeId);\n-        state.getNodeController().sendApplicationMessageToNC(JavaSerializationUtils.serialize(msg), null, nodeId);\n+        if (state != null) {\n+            state.getNodeController().sendApplicationMessageToNC(JavaSerializationUtils.serialize(msg), null, nodeId);\n+        } else {\n+            if (LOGGER.isLoggable(Level.WARNING)) {\n+                LOGGER.warning(\"Couldn't send message to unregistered node (\" + nodeId + \")\");\n+            }\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-app/src/main/java/org/apache/asterix/messaging/CCMessageBroker.java",
                "sha": "0eade416d072d0927f5b7ddaec045defbf7387e5",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9",
                "deletions": 1,
                "filename": "asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java",
                "patch": "@@ -100,11 +100,20 @@ boolean waitForState(ClusterState waitForState, long timeout, TimeUnit unit)\n \n     /**\n      * Register the specified node partitions with the specified nodeId with this cluster state manager\n+     * then calls {@link IClusterStateManager#refreshState()}\n+     *\n+     * @param nodeId\n+     * @param nodePartitions\n+     * @throws AsterixException\n      */\n     void registerNodePartitions(String nodeId, ClusterPartition[] nodePartitions) throws AsterixException;\n \n     /**\n      * De-register the specified node's partitions from this cluster state manager\n+     * then calls {@link IClusterStateManager#refreshState()}\n+     *\n+     * @param nodeId\n+     * @throws HyracksDataException\n      */\n-    void deregisterNodePartitions(String nodeId);\n+    void deregisterNodePartitions(String nodeId) throws HyracksDataException;\n }",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-common/src/main/java/org/apache/asterix/common/cluster/IClusterStateManager.java",
                "sha": "30675cd631ccbcbca68def98685009d07fd82829",
                "status": "modified"
            },
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java?ref=e0d8e5078f90823e8dd51052317a7da1c08cc9f9",
                "deletions": 1,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "patch": "@@ -154,6 +154,12 @@ public synchronized void updateClusterPartition(Integer partitionNum, String act\n     @Override\n     public synchronized void refreshState() throws HyracksDataException {\n         resetClusterPartitionConstraint();\n+        if (clusterPartitions.isEmpty()) {\n+            LOGGER.info(\"Cluster does not have any registered partitions\");\n+            setState(ClusterState.UNUSABLE);\n+            return;\n+        }\n+\n         for (ClusterPartition p : clusterPartitions.values()) {\n             if (!p.isActive()) {\n                 setState(ClusterState.UNUSABLE);\n@@ -368,10 +374,16 @@ public synchronized void registerNodePartitions(String nodeId, ClusterPartition[\n             clusterPartitions.put(nodePartition.getPartitionId(), nodePartition);\n         }\n         node2PartitionsMap.put(nodeId, nodePartitions);\n+        //TODO fix exception propagation from refreshState\n+        try {\n+            refreshState();\n+        } catch (HyracksDataException e) {\n+            throw new AsterixException(e);\n+        }\n     }\n \n     @Override\n-    public synchronized void deregisterNodePartitions(String nodeId) {\n+    public synchronized void deregisterNodePartitions(String nodeId) throws HyracksDataException {\n         ClusterPartition[] nodePartitions = node2PartitionsMap.remove(nodeId);\n         if (nodePartitions == null) {\n             LOGGER.info(\"deregisterNodePartitions unknown node \" + nodeId + \" (already removed?)\");\n@@ -382,6 +394,7 @@ public synchronized void deregisterNodePartitions(String nodeId) {\n             for (ClusterPartition nodePartition : nodePartitions) {\n                 clusterPartitions.remove(nodePartition.getPartitionId());\n             }\n+            refreshState();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0d8e5078f90823e8dd51052317a7da1c08cc9f9/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "sha": "8156a231d3ae1529282964c6f2a2ed10ebe68d4a",
                "status": "modified"
            }
        ],
        "message": "[ASTERIXDB-2019][CLUS] Update cluster state on partitions changes\n\n- user model changes: no\n- storage format changes: no\n- interface changes: no\n\nDetails:\n- Set the cluster to UNUSABLE when no partitions are registered\n- Update cluster state after partitions register/de-register\n- Reject unregistered nodes queries on CC\n- Avoid NPE when trying to send to a node that was de-registered\n\nChange-Id: I7d11733a1dcd86136e157d80517bff4abcfc776b\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1918\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nContrib: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Michael Blow <mblow@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/f94f63d3f8e52cdb099cce365b9fb053050969cf",
        "patched_files": [
            "ClusterStateManager.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "ClusterStateManagerTest.java"
        ]
    },
    "asterixdb_e0e85a3": {
        "bug_id": "asterixdb_e0e85a3",
        "commit": "https://github.com/apache/asterixdb/commit/e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 1,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java",
                "patch": "@@ -123,7 +123,7 @@ public void start(IServiceContext serviceCtx, String[] args) throws Exception {\n                 .create(ClusterProperties.INSTANCE.getCluster(), repStrategy, ccServiceCtx);\n         ExternalLibraryUtils.setUpExternaLibraries(libraryManager, false);\n         componentProvider = new StorageComponentProvider();\n-        GlobalRecoveryManager.instantiate((HyracksConnection) getHcc(), componentProvider);\n+        GlobalRecoveryManager.instantiate(ccServiceCtx, getHcc(), componentProvider);\n         appCtx = new CcApplicationContext(ccServiceCtx, getHcc(), libraryManager, resourceIdManager,\n                 () -> MetadataManager.INSTANCE, GlobalRecoveryManager.instance(), ftStrategy,\n                 new ActiveLifecycleListener());",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/CCApplication.java",
                "sha": "bf7d5ebfa66547f29f4c653c2d0bd0e819fa3a1d",
                "status": "modified"
            },
            {
                "additions": 126,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java",
                "changes": 250,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 124,
                "filename": "asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java",
                "patch": "@@ -45,7 +45,8 @@\n import org.apache.asterix.metadata.utils.ExternalIndexingOperations;\n import org.apache.asterix.metadata.utils.MetadataConstants;\n import org.apache.asterix.runtime.utils.ClusterStateManager;\n-import org.apache.hyracks.api.client.HyracksConnection;\n+import org.apache.hyracks.api.application.ICCServiceContext;\n+import org.apache.hyracks.api.client.IHyracksClientConnection;\n import org.apache.hyracks.api.job.JobId;\n import org.apache.hyracks.api.job.JobSpecification;\n \n@@ -55,10 +56,13 @@\n     private static GlobalRecoveryManager instance;\n     private static ClusterState state;\n     private final IStorageComponentProvider componentProvider;\n-    private HyracksConnection hcc;\n+    private final ICCServiceContext ccServiceCtx;\n+    private IHyracksClientConnection hcc;\n \n-    private GlobalRecoveryManager(HyracksConnection hcc, IStorageComponentProvider componentProvider) {\n+    private GlobalRecoveryManager(ICCServiceContext ccServiceCtx, IHyracksClientConnection hcc,\n+                                  IStorageComponentProvider componentProvider) {\n         setState(ClusterState.UNUSABLE);\n+        this.ccServiceCtx = ccServiceCtx;\n         this.hcc = hcc;\n         this.componentProvider = componentProvider;\n     }\n@@ -97,142 +101,140 @@ public void startGlobalRecovery(ICcApplicationContext appCtx) {\n         final ClusterState newState = ClusterStateManager.INSTANCE.getState();\n         boolean needToRecover = !newState.equals(state) && (newState == ClusterState.ACTIVE);\n         if (needToRecover) {\n-            Thread recoveryThread = new Thread(new Runnable() {\n-                @Override\n-                public void run() {\n-                    LOGGER.info(\"Starting AsterixDB's Global Recovery\");\n-                    MetadataTransactionContext mdTxnCtx = null;\n-                    try {\n-                        Thread.sleep(4000);\n-                        MetadataManager.INSTANCE.init();\n-                        // Loop over datasets\n-                        mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                        List<Dataverse> dataverses = MetadataManager.INSTANCE.getDataverses(mdTxnCtx);\n-                        for (Dataverse dataverse : dataverses) {\n-                            if (!dataverse.getDataverseName().equals(MetadataConstants.METADATA_DATAVERSE_NAME)) {\n-                                MetadataProvider metadataProvider =\n-                                        new MetadataProvider(appCtx, dataverse, componentProvider);\n-                                try {\n-                                    List<Dataset> datasets = MetadataManager.INSTANCE.getDataverseDatasets(mdTxnCtx,\n-                                            dataverse.getDataverseName());\n-                                    for (Dataset dataset : datasets) {\n-                                        if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n-                                            // External dataset\n-                                            // Get indexes\n-                                            List<Index> indexes = MetadataManager.INSTANCE.getDatasetIndexes(mdTxnCtx,\n-                                                    dataset.getDataverseName(), dataset.getDatasetName());\n-                                            // Get the state of the dataset\n-                                            ExternalDatasetDetails dsd =\n-                                                    (ExternalDatasetDetails) dataset.getDatasetDetails();\n-                                            TransactionState datasetState = dsd.getState();\n-                                            if (!indexes.isEmpty()) {\n-                                                if (datasetState == TransactionState.BEGIN) {\n-                                                    List<ExternalFile> files = MetadataManager.INSTANCE\n-                                                            .getDatasetExternalFiles(mdTxnCtx, dataset);\n-                                                    // if persumed abort, roll backward\n-                                                    // 1. delete all pending files\n-                                                    for (ExternalFile file : files) {\n-                                                        if (file.getPendingOp() != ExternalFilePendingOp.NO_OP) {\n-                                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n-                                                        }\n-                                                    }\n-                                                }\n-                                                // 2. clean artifacts in NCs\n-                                                metadataProvider.setMetadataTxnContext(mdTxnCtx);\n-                                                JobSpecification jobSpec = ExternalIndexingOperations\n-                                                        .buildAbortOp(dataset, indexes, metadataProvider);\n-                                                executeHyracksJob(jobSpec);\n-                                                // 3. correct the dataset state\n-                                                ((ExternalDatasetDetails) dataset.getDatasetDetails())\n-                                                        .setState(TransactionState.COMMIT);\n-                                                MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n-                                                MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                                                mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                                            } else if (datasetState == TransactionState.READY_TO_COMMIT) {\n-                                                List<ExternalFile> files = MetadataManager.INSTANCE\n-                                                        .getDatasetExternalFiles(mdTxnCtx, dataset);\n-                                                // if ready to commit, roll forward\n-                                                // 1. commit indexes in NCs\n-                                                metadataProvider.setMetadataTxnContext(mdTxnCtx);\n-                                                JobSpecification jobSpec = ExternalIndexingOperations\n-                                                        .buildRecoverOp(dataset, indexes, metadataProvider);\n-                                                executeHyracksJob(jobSpec);\n-                                                // 2. add pending files in metadata\n-                                                for (ExternalFile file : files) {\n-                                                    if (file.getPendingOp() == ExternalFilePendingOp.ADD_OP) {\n-                                                        MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n-                                                        file.setPendingOp(ExternalFilePendingOp.NO_OP);\n-                                                        MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, file);\n-                                                    } else if (file.getPendingOp() == ExternalFilePendingOp.DROP_OP) {\n-                                                        // find original file\n-                                                        for (ExternalFile originalFile : files) {\n-                                                            if (originalFile.getFileName().equals(file.getFileName())) {\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        file);\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                                break;\n-                                                            }\n-                                                        }\n-                                                    } else if (file.getPendingOp() == ExternalFilePendingOp.APPEND_OP) {\n-                                                        // find original file\n-                                                        for (ExternalFile originalFile : files) {\n-                                                            if (originalFile.getFileName().equals(file.getFileName())) {\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        file);\n-                                                                MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                                originalFile.setSize(file.getSize());\n-                                                                MetadataManager.INSTANCE.addExternalFile(mdTxnCtx,\n-                                                                        originalFile);\n-                                                            }\n-                                                        }\n-                                                    }\n-                                                    // 3. correct the dataset state\n-                                                    ((ExternalDatasetDetails) dataset.getDatasetDetails())\n-                                                            .setState(TransactionState.COMMIT);\n-                                                    MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n-                                                    MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                                                    mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n-                                                }\n-                                            }\n-                                        }\n-                                    }\n-                                } finally {\n-                                    metadataProvider.getLocks().unlock();\n-                                }\n-                            }\n-                        }\n-                        MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n-                    } catch (Exception e) {\n-                        // This needs to be fixed <-- Needs to shutdown the system -->\n-                        /*\n-                         * Note: Throwing this illegal state exception will terminate this thread\n-                         * and feeds listeners will not be notified.\n-                         */\n-                        LOGGER.log(Level.SEVERE, \"Global recovery was not completed successfully: \", e);\n+            setState(newState);\n+            ccServiceCtx.getControllerService().getExecutor().submit(() -> {\n+                LOGGER.info(\"Starting Global Recovery\");\n+                MetadataTransactionContext mdTxnCtx = null;\n+                try {\n+                    MetadataManager.INSTANCE.init();\n+                    // Loop over datasets\n+                    mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                    for (Dataverse dataverse : MetadataManager.INSTANCE.getDataverses(mdTxnCtx)) {\n+                        mdTxnCtx = recoverDataset(appCtx, mdTxnCtx, dataverse);\n+                    }\n+                    MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                } catch (Exception e) {\n+                    // This needs to be fixed <-- Needs to shutdown the system -->\n+                    /*\n+                     * Note: Throwing this illegal state exception will terminate this thread\n+                     * and feeds listeners will not be notified.\n+                     */\n+                    LOGGER.log(Level.SEVERE, \"Global recovery was not completed successfully: \", e);\n+                    if (mdTxnCtx != null) {\n                         try {\n                             MetadataManager.INSTANCE.abortTransaction(mdTxnCtx);\n                         } catch (Exception e1) {\n                             LOGGER.log(Level.SEVERE, \"Exception in aborting\", e1);\n+                            e1.addSuppressed(e);\n                             throw new IllegalStateException(e1);\n                         }\n                     }\n-                    ClusterStateManager.INSTANCE.setGlobalRecoveryCompleted(true);\n-                    LOGGER.info(\"Global Recovery Completed\");\n                 }\n-            }, \"RecoveryThread\");\n-            setState(newState);\n-            recoveryThread.start();\n+                ClusterStateManager.INSTANCE.setGlobalRecoveryCompleted(true);\n+                LOGGER.info(\"Global Recovery Completed\");\n+            });\n+        }\n+    }\n+\n+    private MetadataTransactionContext recoverDataset(ICcApplicationContext appCtx, MetadataTransactionContext mdTxnCtx,\n+                                                      Dataverse dataverse)\n+            throws Exception {\n+        if (!dataverse.getDataverseName().equals(MetadataConstants.METADATA_DATAVERSE_NAME)) {\n+            MetadataProvider metadataProvider = new MetadataProvider(appCtx, dataverse, componentProvider);\n+            try {\n+                List<Dataset> datasets = MetadataManager.INSTANCE.getDataverseDatasets(mdTxnCtx,\n+                        dataverse.getDataverseName());\n+                for (Dataset dataset : datasets) {\n+                    if (dataset.getDatasetType() == DatasetType.EXTERNAL) {\n+                        // External dataset\n+                        // Get indexes\n+                        List<Index> indexes = MetadataManager.INSTANCE.getDatasetIndexes(mdTxnCtx,\n+                                dataset.getDataverseName(), dataset.getDatasetName());\n+                        // Get the state of the dataset\n+                        ExternalDatasetDetails dsd = (ExternalDatasetDetails) dataset.getDatasetDetails();\n+                        TransactionState datasetState = dsd.getState();\n+                        if (!indexes.isEmpty()) {\n+                            if (datasetState == TransactionState.BEGIN) {\n+                                List<ExternalFile> files = MetadataManager.INSTANCE.getDatasetExternalFiles(mdTxnCtx,\n+                                        dataset);\n+                                // if persumed abort, roll backward\n+                                // 1. delete all pending files\n+                                for (ExternalFile file : files) {\n+                                    if (file.getPendingOp() != ExternalFilePendingOp.NO_OP) {\n+                                        MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                    }\n+                                }\n+                            }\n+                            // 2. clean artifacts in NCs\n+                            metadataProvider.setMetadataTxnContext(mdTxnCtx);\n+                            JobSpecification jobSpec = ExternalIndexingOperations.buildAbortOp(dataset, indexes,\n+                                    metadataProvider);\n+                            executeHyracksJob(jobSpec);\n+                            // 3. correct the dataset state\n+                            ((ExternalDatasetDetails) dataset.getDatasetDetails()).setState(TransactionState.COMMIT);\n+                            MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n+                            MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                            mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                        } else if (datasetState == TransactionState.READY_TO_COMMIT) {\n+                            List<ExternalFile> files = MetadataManager.INSTANCE.getDatasetExternalFiles(mdTxnCtx,\n+                                    dataset);\n+                            // if ready to commit, roll forward\n+                            // 1. commit indexes in NCs\n+                            metadataProvider.setMetadataTxnContext(mdTxnCtx);\n+                            JobSpecification jobSpec = ExternalIndexingOperations.buildRecoverOp(dataset, indexes,\n+                                    metadataProvider);\n+                            executeHyracksJob(jobSpec);\n+                            // 2. add pending files in metadata\n+                            for (ExternalFile file : files) {\n+                                if (file.getPendingOp() == ExternalFilePendingOp.ADD_OP) {\n+                                    MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                    file.setPendingOp(ExternalFilePendingOp.NO_OP);\n+                                    MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, file);\n+                                } else if (file.getPendingOp() == ExternalFilePendingOp.DROP_OP) {\n+                                    // find original file\n+                                    for (ExternalFile originalFile : files) {\n+                                        if (originalFile.getFileName().equals(file.getFileName())) {\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, originalFile);\n+                                            break;\n+                                        }\n+                                    }\n+                                } else if (file.getPendingOp() == ExternalFilePendingOp.APPEND_OP) {\n+                                    // find original file\n+                                    for (ExternalFile originalFile : files) {\n+                                        if (originalFile.getFileName().equals(file.getFileName())) {\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, file);\n+                                            MetadataManager.INSTANCE.dropExternalFile(mdTxnCtx, originalFile);\n+                                            originalFile.setSize(file.getSize());\n+                                            MetadataManager.INSTANCE.addExternalFile(mdTxnCtx, originalFile);\n+                                        }\n+                                    }\n+                                }\n+                                // 3. correct the dataset state\n+                                ((ExternalDatasetDetails) dataset.getDatasetDetails())\n+                                        .setState(TransactionState.COMMIT);\n+                                MetadataManager.INSTANCE.updateDataset(mdTxnCtx, dataset);\n+                                MetadataManager.INSTANCE.commitTransaction(mdTxnCtx);\n+                                mdTxnCtx = MetadataManager.INSTANCE.beginTransaction();\n+                            }\n+                        }\n+                    }\n+                }\n+            } finally {\n+                metadataProvider.getLocks().unlock();\n+            }\n         }\n+\n+        return mdTxnCtx;\n     }\n \n     public static GlobalRecoveryManager instance() {\n         return instance;\n     }\n \n-    public static synchronized void instantiate(HyracksConnection hcc, IStorageComponentProvider componentProvider) {\n-        instance = new GlobalRecoveryManager(hcc, componentProvider);\n+    public static synchronized void instantiate(ICCServiceContext ccServiceCtx, IHyracksClientConnection hcc,\n+                                                IStorageComponentProvider componentProvider) {\n+        instance = new GlobalRecoveryManager(ccServiceCtx, hcc, componentProvider);\n     }\n \n     public static synchronized void setState(ClusterState state) {",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/main/java/org/apache/asterix/hyracks/bootstrap/GlobalRecoveryManager.java",
                "sha": "1816a25292d317ac232f7790cd7bbc6f902bafad",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 4,
                "filename": "asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "patch": "@@ -45,6 +45,7 @@\n import java.util.concurrent.Executors;\n import java.util.concurrent.Future;\n import java.util.concurrent.TimeUnit;\n+import java.util.function.Predicate;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n import java.util.regex.Matcher;\n@@ -404,7 +405,12 @@ private static void writeOutputToFile(File actualFile, InputStream resultStream)\n     }\n \n     protected HttpResponse executeAndCheckHttpRequest(HttpUriRequest method) throws Exception {\n-        return checkResponse(executeHttpRequest(method));\n+        return checkResponse(executeHttpRequest(method), code -> code == HttpStatus.SC_OK);\n+    }\n+\n+    protected HttpResponse executeAndCheckHttpRequest(HttpUriRequest method, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n+        return checkResponse(executeHttpRequest(method), responseCodeValidator);\n     }\n \n     protected HttpResponse executeHttpRequest(HttpUriRequest method) throws Exception {\n@@ -418,8 +424,9 @@ protected HttpResponse executeHttpRequest(HttpUriRequest method) throws Exceptio\n         }\n     }\n \n-    protected HttpResponse checkResponse(HttpResponse httpResponse) throws Exception {\n-        if (httpResponse.getStatusLine().getStatusCode() != HttpStatus.SC_OK) {\n+    protected HttpResponse checkResponse(HttpResponse httpResponse, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n+        if (!responseCodeValidator.test(httpResponse.getStatusLine().getStatusCode())) {\n             String errorBody = EntityUtils.toString(httpResponse.getEntity());\n             String exceptionMsg;\n             try {\n@@ -582,8 +589,13 @@ public InputStream executeJSONGet(OutputFormat fmt, URI uri) throws Exception {\n     }\n \n     public InputStream executeJSONPost(OutputFormat fmt, URI uri) throws Exception {\n+        return executeJSONPost(fmt, uri, code -> code == HttpStatus.SC_OK);\n+    }\n+\n+    public InputStream executeJSONPost(OutputFormat fmt, URI uri, Predicate<Integer> responseCodeValidator)\n+            throws Exception {\n         HttpUriRequest request = constructPostMethod(uri, fmt, new ArrayList<>());\n-        HttpResponse response = executeAndCheckHttpRequest(request);\n+        HttpResponse response = executeAndCheckHttpRequest(request, responseCodeValidator);\n         return response.getEntity().getContent();\n     }\n ",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-app/src/test/java/org/apache/asterix/test/common/TestExecutor.java",
                "sha": "e88f64716a95b13c21ca2a1eeb347c7dbc89374f",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 12,
                "filename": "asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "patch": "@@ -26,6 +26,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.SortedMap;\n+import java.util.TreeSet;\n import java.util.concurrent.TimeUnit;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n@@ -41,6 +42,7 @@\n import org.apache.hyracks.api.config.IOption;\n import org.apache.hyracks.api.exceptions.HyracksDataException;\n import org.apache.hyracks.api.exceptions.HyracksException;\n+import org.apache.hyracks.control.cc.ClusterControllerService;\n import org.apache.hyracks.control.common.controllers.NCConfig;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n@@ -303,24 +305,27 @@ public synchronized ObjectNode getClusterStateDescription() {\n         stateDescription.put(\"metadata_node\", currentMetadataNode);\n         ArrayNode ncs = om.createArrayNode();\n         stateDescription.set(\"ncs\", ncs);\n-        for (Map.Entry<String, ClusterPartition[]> entry : node2PartitionsMap.entrySet()) {\n+        for (String node : new TreeSet<>(((ClusterControllerService) appCtx.getServiceContext().getControllerService())\n+                .getNodeManager().getAllNodeIds())) {\n             ObjectNode nodeJSON = om.createObjectNode();\n-            nodeJSON.put(\"node_id\", entry.getKey());\n+            nodeJSON.put(\"node_id\", node);\n             boolean allActive = true;\n             boolean anyActive = false;\n             Set<Map<String, Object>> partitions = new HashSet<>();\n-            for (ClusterPartition part : entry.getValue()) {\n-                HashMap<String, Object> partition = new HashMap<>();\n-                partition.put(\"partition_id\", \"partition_\" + part.getPartitionId());\n-                partition.put(\"active\", part.isActive());\n-                partitions.add(partition);\n-                allActive = allActive && part.isActive();\n-                if (allActive) {\n-                    anyActive = true;\n+            if (node2PartitionsMap.containsKey(node)) {\n+                for (ClusterPartition part : node2PartitionsMap.get(node)) {\n+                    HashMap<String, Object> partition = new HashMap<>();\n+                    partition.put(\"partition_id\", \"partition_\" + part.getPartitionId());\n+                    partition.put(\"active\", part.isActive());\n+                    partitions.add(partition);\n+                    allActive = allActive && part.isActive();\n+                    if (allActive) {\n+                        anyActive = true;\n+                    }\n                 }\n             }\n-            nodeJSON.put(\"state\", failedNodes.contains(entry.getKey()) ? \"FAILED\"\n-                    : allActive ? \"ACTIVE\" : anyActive ? \"PARTIALLY_ACTIVE\" : \"INACTIVE\");\n+            nodeJSON.put(\"state\", failedNodes.contains(node) ? \"FAILED\"\n+                    : allActive && anyActive ? \"ACTIVE\" : anyActive ? \"PARTIALLY_ACTIVE\" : \"INACTIVE\");\n             nodeJSON.putPOJO(\"partitions\", partitions);\n             ncs.add(nodeJSON);\n         }",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/asterixdb/asterix-runtime/src/main/java/org/apache/asterix/runtime/utils/ClusterStateManager.java",
                "sha": "48937f8d9da33688e42a8fff76e7cfc24e001a64",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java",
                "patch": "@@ -22,6 +22,7 @@\n \n import org.apache.hyracks.api.context.ICCContext;\n import org.apache.hyracks.api.job.IJobLifecycleListener;\n+import org.apache.hyracks.api.service.IControllerService;\n \n /**\n  * Service Context at the Cluster Controller for an application.",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/application/ICCServiceContext.java",
                "sha": "94ebcfe01cddf021d02635393f147a6af251d679",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 24,
                "filename": "hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java",
                "patch": "@@ -43,24 +43,19 @@\n     private boolean configured;\n \n     public LifeCycleComponentManager() {\n-        components = new ArrayList<ILifeCycleComponent>();\n+        components = new ArrayList<>();\n         stopInitiated = false;\n         configured = false;\n         stopped = false;\n     }\n \n     @Override\n     public void uncaughtException(Thread t, Throwable e) {\n-        if (LOGGER.isLoggable(Level.SEVERE)) {\n-            LOGGER.severe(\"Uncaught Exception from thread \" + t.getName() + \" message: \" + e.getMessage());\n-            e.printStackTrace();\n-        }\n+        LOGGER.log(Level.SEVERE, \"Uncaught Exception from thread \" + t.getName(), e);\n         try {\n             stopAll(true);\n         } catch (IOException e1) {\n-            if (LOGGER.isLoggable(Level.SEVERE)) {\n-                LOGGER.severe(\"Exception in stopping Asterix. \" + e1.getMessage());\n-            }\n+            LOGGER.log(Level.SEVERE, \"Exception in stopping instance\", e1);\n         }\n     }\n \n@@ -79,31 +74,25 @@ public void startAll() {\n     @Override\n     public synchronized void stopAll(boolean dumpState) throws IOException {\n         if (LOGGER.isLoggable(Level.INFO)) {\n-            LOGGER.severe(\"Attempting to stop \" + this);\n+            LOGGER.info(\"Attempting to stop \" + this);\n         }\n         if (stopped) {\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.severe(\"Lifecycle management was already stopped\");\n-            }\n+            LOGGER.info(\"Lifecycle management was already stopped\");\n             return;\n         }\n         if (stopInitiated) {\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.severe(\"Stop already in progress\");\n-            }\n+            LOGGER.info(\"Stop already in progress\");\n             return;\n         }\n         if (!configured) {\n             if (LOGGER.isLoggable(Level.SEVERE)) {\n-                LOGGER.severe(\"Lifecycle management not configured\" + this);\n+                LOGGER.severe(\"Lifecycle management not configured \" + this);\n             }\n             return;\n         }\n \n         stopInitiated = true;\n-        if (LOGGER.isLoggable(Level.SEVERE)) {\n-            LOGGER.severe(\"Stopping Asterix instance\");\n-        }\n+        LOGGER.severe(\"Stopping instance\");\n \n         FileOutputStream componentDumpStream = null;\n         String componentDumpPath = null;\n@@ -120,14 +109,12 @@ public synchronized void stopAll(boolean dumpState) throws IOException {\n                     componentDumpStream = new FileOutputStream(f);\n                 }\n                 if (LOGGER.isLoggable(Level.INFO)) {\n-                    LOGGER.info(\"Stopping component instance \" + component.getClass().getName() + \" dump state \"\n-                            + dumpState + \" dump path \" + componentDumpPath);\n+                    LOGGER.info(\"Stopping component instance \" + component.getClass().getName() + \"; dump state: \"\n+                            + dumpState + \", dump path: \" + componentDumpPath);\n                 }\n                 component.stop(dumpState, componentDumpStream);\n             } catch (Exception e) {\n-                if (LOGGER.isLoggable(Level.SEVERE)) {\n-                    LOGGER.severe(\"Exception in stopping component \" + component.getClass().getName() + e.getMessage());\n-                }\n+                LOGGER.log(Level.SEVERE, \"Exception in stopping component \" + component.getClass().getName(), e);\n             } finally {\n                 if (componentDumpStream != null) {\n                     componentDumpStream.close();",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-api/src/main/java/org/apache/hyracks/api/lifecycle/LifeCycleComponentManager.java",
                "sha": "4674f9a1b6eb948137cf2593445e8d6d1a7475d7",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 5,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java",
                "patch": "@@ -44,12 +44,7 @@ public static void main(String[] args) {\n             application.registerConfig(configManager);\n             NCConfig ncConfig = new NCConfig(nodeId, configManager);\n             final NodeControllerService ncService = new NodeControllerService(ncConfig, application);\n-            if (LOGGER.isLoggable(Level.INFO)) {\n-                LOGGER.info(\"Setting uncaught exception handler \" + ncService.getLifeCycleComponentManager());\n-            }\n-            Thread.currentThread().setUncaughtExceptionHandler(ncService.getLifeCycleComponentManager());\n             ncService.start();\n-            Runtime.getRuntime().addShutdownHook(new NCShutdownHook(ncService));\n             while (true) {\n                 Thread.sleep(10000);\n             }",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NCDriver.java",
                "sha": "11df079a7dbe721077b1160813746e97cccac95d",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java?ref=e0e85a39e612d9f6c91da5ac6080c741e582a6b5",
                "deletions": 0,
                "filename": "hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java",
                "patch": "@@ -256,6 +256,11 @@ private void init() throws Exception {\n     @Override\n     public void start() throws Exception {\n         LOGGER.log(Level.INFO, \"Starting NodeControllerService\");\n+        if (LOGGER.isLoggable(Level.INFO)) {\n+            LOGGER.info(\"Setting uncaught exception handler \" + getLifeCycleComponentManager());\n+        }\n+        Thread.currentThread().setUncaughtExceptionHandler(getLifeCycleComponentManager());\n+        Runtime.getRuntime().addShutdownHook(new NCShutdownHook(this));\n         ipc = new IPCSystem(new InetSocketAddress(ncConfig.getClusterListenAddress(), ncConfig.getClusterListenPort()),\n                 new NodeControllerIPCI(this), new CCNCFunctions.SerializerDeserializer());\n         ipc.start();",
                "raw_url": "https://github.com/apache/asterixdb/raw/e0e85a39e612d9f6c91da5ac6080c741e582a6b5/hyracks-fullstack/hyracks/hyracks-control/hyracks-control-nc/src/main/java/org/apache/hyracks/control/nc/NodeControllerService.java",
                "sha": "be24dbe8f462581b6e2ce494d4b0ca6f0c9bc85f",
                "status": "modified"
            }
        ],
        "message": "Cleanup Logging, Report Joined Nodes, Misc Cleanup\n\n- Minor refactoring of NodeControllerService startup\n- Cleanup logging in GlobalRecoveryManager / LifeCycleComponentManager\n- Enable TestExecutor to accept non-200 status codes\n- Use ExecutorService for GlobalRecovery thread\n- Eliminate NPE when metadata node goes down before global recovery\n  starts\n\nChange-Id: I87b6b45e1a0cdc7a8b77d80b4e603d927aa60b8a\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1706\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>",
        "parent": "https://github.com/apache/asterixdb/commit/6c6479d0e3f3f774703c8e9afa28259d9bd78bf7",
        "patched_files": [
            "NodeControllerService.java",
            "CCApplication.java",
            "LifeCycleComponentManager.java",
            "ClusterStateManager.java",
            "ICCServiceContext.java",
            "NCDriver.java",
            "GlobalRecoveryManager.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "TestExecutor.java",
            "ClusterStateManagerTest.java"
        ]
    },
    "asterixdb_eb199d3": {
        "bug_id": "asterixdb_eb199d3",
        "commit": "https://github.com/apache/asterixdb/commit/eb199d3a91563968c35786bb9f2b8bbd9da7db16",
        "file": [
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp",
                "patch": "@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+drop  dataverse test if exists;\n+create  dataverse test;\n+\n+use test;\n+\n+create type CustomerType as\n+{\n+  cid : bigint\n+}\n+\n+create type OrderType as\n+{\n+  oid : bigint\n+}\n+\n+create external dataset Customers(CustomerType) using localfs((`path`=`asterix_nc1://data/nontagged/customerData.json`),(`format`=`adm`));\n+\n+create external dataset Orders(OrderType) using localfs((`path`=`asterix_nc1://data/nontagged/orderData.json`),(`format`=`adm`));\n+",
                "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.ddl.sqlpp",
                "sha": "7eb1cd121f9cf536d8969dc7bad9173024a1f654",
                "status": "added"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp",
                "patch": "@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+USE test;\n+\n+SELECT c.name AS cust_name,\n+       c.age AS cust_age,\n+       o.total AS order_total\n+FROM Customers c, Orders o\n+WHERE c.cid = o.cid AND c.age != o.total\n+LIMIT 1\n+;",
                "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/queries_sqlpp/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.2.query.sqlpp",
                "sha": "74e50e39c45ea59982d2e9e5b6bbc6c8cd201c20",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm",
                "patch": "@@ -0,0 +1 @@\n+{ \"cust_name\": \"Jodi Alex\", \"cust_age\": 19, \"order_total\": 7.206 }",
                "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/results/custord/query-ASTERIXDB-1754/query-ASTERIXDB-1754.1.adm",
                "sha": "c18fb3db01fbdf51c351031670cc1c4cfde34d28",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16",
                "deletions": 0,
                "filename": "asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "patch": "@@ -1410,6 +1410,11 @@\n         <expected-error>Cannot resolve ambiguous alias reference for undefined identifier age</expected-error>\n       </compilation-unit>\n     </test-case>\n+    <test-case FilePath=\"custord\">\n+      <compilation-unit name=\"query-ASTERIXDB-1754\">\n+        <output-dir compare=\"Text\">query-ASTERIXDB-1754</output-dir>\n+      </compilation-unit>\n+    </test-case>\n     <test-case FilePath=\"custord\">\n       <compilation-unit name=\"load-test\">\n         <output-dir compare=\"Text\">load-test</output-dir>",
                "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/asterixdb/asterix-app/src/test/resources/runtimets/testsuite_sqlpp.xml",
                "sha": "bd3266ef31a133f65073f0b8a7df6ed0b8067995",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/asterixdb/blob/eb199d3a91563968c35786bb9f2b8bbd9da7db16/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/asterixdb/contents/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java?ref=eb199d3a91563968c35786bb9f2b8bbd9da7db16",
                "deletions": 0,
                "filename": "hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java",
                "patch": "@@ -103,6 +103,7 @@ public boolean rewritePre(Mutable<ILogicalOperator> opRef, IOptimizationContext\n             limitCloneOp.setPhysicalOperator(new StreamLimitPOperator());\n             limitCloneOp.getInputs().add(new MutableObject<ILogicalOperator>(unsafeOp));\n             limitCloneOp.setExecutionMode(unsafeOp.getExecutionMode());\n+            OperatorPropertiesUtil.computeSchemaRecIfNull((AbstractLogicalOperator) unsafeOp);\n             limitCloneOp.recomputeSchema();\n             unsafeOpRef.setValue(limitCloneOp);\n             context.computeAndSetTypeEnvironmentForOperator(limitCloneOp);",
                "raw_url": "https://github.com/apache/asterixdb/raw/eb199d3a91563968c35786bb9f2b8bbd9da7db16/hyracks-fullstack/algebricks/algebricks-rewriter/src/main/java/org/apache/hyracks/algebricks/rewriter/rules/CopyLimitDownRule.java",
                "sha": "372af26e2b4e54d8c212f62e071113fb6fb62871",
                "status": "modified"
            }
        ],
        "message": "ASTERIXDB-1754: fix NPE in CopyLimitDownRule.\n\nChange-Id: Ia9e26912a048c680aa9db7a12cd3933a7acbde37\nReviewed-on: https://asterix-gerrit.ics.uci.edu/1399\nSonar-Qube: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nTested-by: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nBAD: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nIntegration-Tests: Jenkins <jenkins@fulliautomatix.ics.uci.edu>\nReviewed-by: Till Westmann <tillw@apache.org>",
        "parent": "https://github.com/apache/asterixdb/commit/03e940a7781dbdbb654fe13ec7077aae74e1c416",
        "patched_files": [
            "CopyLimitDownRule.java",
            "query-ASTERIXDB-1754.java"
        ],
        "repo": "asterixdb",
        "unit_tests": [
            "testsuite_sqlpp.java"
        ]
    }
}