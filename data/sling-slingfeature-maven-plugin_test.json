{
    "sling-slingfeature-maven-plugin_08091b9": {
        "bug_id": "sling-slingfeature-maven-plugin_08091b9",
        "commit": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/08091b9003ef93a06fede1794c630032a91160c4",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/sling-slingfeature-maven-plugin/blob/08091b9003ef93a06fede1794c630032a91160c4/src/main/java/org/apache/sling/feature/maven/mojos/AbstractRepositoryMojo.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/sling-slingfeature-maven-plugin/contents/src/main/java/org/apache/sling/feature/maven/mojos/AbstractRepositoryMojo.java?ref=08091b9003ef93a06fede1794c630032a91160c4",
                "deletions": 4,
                "filename": "src/main/java/org/apache/sling/feature/maven/mojos/AbstractRepositoryMojo.java",
                "patch": "@@ -25,7 +25,6 @@\n \n import org.apache.commons.io.FileUtils;\n import org.apache.maven.artifact.Artifact;\n-import org.apache.maven.artifact.handler.manager.ArtifactHandlerManager;\n import org.apache.maven.model.Dependency;\n import org.apache.maven.plugin.MojoExecutionException;\n import org.apache.maven.plugin.MojoFailureException;\n@@ -46,9 +45,6 @@\n     @Parameter(defaultValue = \"artifacts\", property = \"repositoryDir\")\n     String repositoryDir;\n \n-    @Component\n-    ArtifactHandlerManager artifactHandlerManager;\n-\n     @Override\n     public abstract void execute() throws MojoExecutionException, MojoFailureException;\n ",
                "raw_url": "https://github.com/apache/sling-slingfeature-maven-plugin/raw/08091b9003ef93a06fede1794c630032a91160c4/src/main/java/org/apache/sling/feature/maven/mojos/AbstractRepositoryMojo.java",
                "sha": "ecc8a80094d2acc9a2299d0275896f6e590f7c95",
                "status": "modified"
            }
        ],
        "message": "SLING-8238 NPE in slingfeature-maven-plugin RepositoryMojo",
        "parent": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/fe1b804a4b1b579e39e5e19ceb7cb18d761a5aae",
        "patched_files": [
            "AbstractRepositoryMojo.java"
        ],
        "repo": "sling-slingfeature-maven-plugin",
        "unit_tests": [
            "AbstractRepositoryMojoTest.java"
        ]
    },
    "sling-slingfeature-maven-plugin_2e42d96": {
        "bug_id": "sling-slingfeature-maven-plugin_2e42d96",
        "commit": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/2e42d967d394c53c88d22d7ac06b0e7712662b27",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/sling-slingfeature-maven-plugin/blob/2e42d967d394c53c88d22d7ac06b0e7712662b27/src/main/java/org/apache/sling/feature/maven/mojos/ApisJarMojo.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/sling-slingfeature-maven-plugin/contents/src/main/java/org/apache/sling/feature/maven/mojos/ApisJarMojo.java?ref=2e42d967d394c53c88d22d7ac06b0e7712662b27",
                "deletions": 2,
                "filename": "src/main/java/org/apache/sling/feature/maven/mojos/ApisJarMojo.java",
                "patch": "@@ -509,8 +509,12 @@ private void buildJavadocClasspath(Set<String> javadocClasspath, ArtifactId arti\n         }\n \n         for (org.apache.maven.artifact.Artifact resolvedArtifact : result.getArtifacts()) {\n-            getLog().debug(\"Adding to javadoc classpath \" + resolvedArtifact);\n-            javadocClasspath.add(resolvedArtifact.getFile().getAbsolutePath());\n+            if (resolvedArtifact.getFile() != null) {\n+                getLog().debug(\"Adding to javadoc classpath \" + resolvedArtifact);\n+                javadocClasspath.add(resolvedArtifact.getFile().getAbsolutePath());\n+            } else {\n+                getLog().debug(\"Ignoring for javadoc classpath \" + resolvedArtifact);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/sling-slingfeature-maven-plugin/raw/2e42d967d394c53c88d22d7ac06b0e7712662b27/src/main/java/org/apache/sling/feature/maven/mojos/ApisJarMojo.java",
                "sha": "2e7d9dd1ed3d500a50e330c289e5e8267354534d",
                "status": "modified"
            }
        ],
        "message": "SLING-8779 : NPE in apis mojo when generating javadoc",
        "parent": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/97ec911490e5c04ec256526135f3ed11b6d5e1a1",
        "patched_files": [
            "ApisJarMojo.java"
        ],
        "repo": "sling-slingfeature-maven-plugin",
        "unit_tests": [
            "ApisJarMojoTest.java"
        ]
    },
    "sling-slingfeature-maven-plugin_3bd5909": {
        "bug_id": "sling-slingfeature-maven-plugin_3bd5909",
        "commit": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/3bd5909770e1d402bec671d839ade67640bdba2d",
        "file": [
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/sling-slingfeature-maven-plugin/blob/3bd5909770e1d402bec671d839ade67640bdba2d/src/main/java/org/apache/sling/feature/maven/Preprocessor.java",
                "changes": 150,
                "contents_url": "https://api.github.com/repos/apache/sling-slingfeature-maven-plugin/contents/src/main/java/org/apache/sling/feature/maven/Preprocessor.java?ref=3bd5909770e1d402bec671d839ade67640bdba2d",
                "deletions": 51,
                "filename": "src/main/java/org/apache/sling/feature/maven/Preprocessor.java",
                "patch": "@@ -200,9 +200,7 @@ private void addDependenciesFromFeature(\n                 continue;\n             }\n \n-            env.logger.debug(\"- adding dependency \" + a.toMvnId());\n-            final Dependency dep = ProjectHelper.toDependency(a, scope);\n-            info.project.getDependencies().add(dep);\n+            this.addDependency(env.logger, info.project, a, scope);\n         }\n         for(final Extension ext : assembledFeature.getExtensions()) {\n             if ( ext.getType() != ExtensionType.ARTIFACTS ) {\n@@ -217,9 +215,7 @@ private void addDependenciesFromFeature(\n                     env.logger.debug(\"- skipping dependency \" + a.toMvnId());\n                     continue;\n                 }\n-                env.logger.debug(\"- adding dependency \" + a.toMvnId());\n-                final Dependency dep = ProjectHelper.toDependency(a, scope);\n-                info.project.getDependencies().add(dep);\n+                this.addDependency(env.logger, info.project, a, scope);\n             }\n         }\n     }\n@@ -333,56 +329,108 @@ protected FeatureProvider createFeatureProvider(final Environment env,\n             final List<Feature> projectFeatures) {\n         return new FeatureProvider() {\n \n+        \tprivate final Set<ArtifactId> processing = new HashSet<>();\n+        \t\n             @Override\n             public Feature provide(final ArtifactId id) {\n-\n-                final Dependency dep = ProjectHelper.toDependency(id, dependencyScope);\n-                if ( !skipAddDependencies ) {\n-\n-                    env.logger.debug(\"- adding feature dependency \" + id.toMvnId());\n-                    info.project.getDependencies().add(dep);\n+                if ( processing.contains(id) ) {\n+                    env.logger.error(\"Unable to get feature \" + id.toMvnId() + \" : Recursive dependency list including project \" + info.project);\n+                    return null;\n                 }\n-\n-                // if it's a project from the current reactor build, we can't resolve it right now\n-                final String key = id.getGroupId() + \":\" + id.getArtifactId();\n-                final FeatureProjectInfo depProjectInfo = env.modelProjects.get(key);\n-                if ( depProjectInfo != null ) {\n-                    env.logger.debug(\"Found reactor \" + id.getType() + \" dependency to project: \" + id);\n-                    // check if it is a feature project\n-                    final FeatureProjectInfo depInfo = depProjectInfo;\n-                    if ( isTest ) {\n-                        process(env, depInfo, FeatureProjectConfig.getTestConfig(depInfo));\n-                    } else {\n-                        process(env, depInfo, FeatureProjectConfig.getMainConfig(depInfo));\n-                    }\n-                    Feature found = null;\n-                    for(final Feature f : (isTest ? depInfo.assembledTestFeatures : depInfo.assembledFeatures).values()) {\n-                        if ( f.getId().equals(id) ) {\n-                            found = f;\n-                            break;\n-                        }\n-                    }\n-\n-                    if ( isTest && found == null ) {\n-                        env.logger.error(\"Unable to get feature \" + id.toMvnId() + \" : Recursive test feature dependency list including project \" + info.project);\n-                    } else if ( !isTest && found == null ) {\n-                        env.logger.error(\"Unable to get feature \" + id.toMvnId() + \" : Recursive feature dependency list including project \" + info.project);\n-                    }\n-                    return found;\n-                } else {\n-                    env.logger.debug(\"Found external \" + id.getType() + \" dependency: \" + id);\n-\n-                    // \"external\" dependency, we can already resolve it\n-                    final File featureFile = ProjectHelper.getOrResolveArtifact(info.project, env.session, env.artifactHandlerManager, env.resolver, id).getFile();\n-                    try (final FileReader r = new FileReader(featureFile)) {\n-                        return FeatureJSONReader.read(r, featureFile.getAbsolutePath());\n-                    } catch ( final IOException ioe) {\n-                        env.logger.error(\"Unable to read feature file from \" + featureFile, ioe);\n-                    }\n+                processing.add(id);\n+                try {\n+\t                if ( !skipAddDependencies ) {\n+\t\n+\t                    addDependency(env.logger, info.project, id, dependencyScope);\n+\t                }\n+\t\n+\t                // if it's a project from the current reactor build, we can't resolve it right now\n+\t                final String key = id.getGroupId() + \":\" + id.getArtifactId();\n+\t                final FeatureProjectInfo depProjectInfo = env.modelProjects.get(key);\n+\t                if ( depProjectInfo != null ) {\n+\t                    env.logger.debug(\"Found reactor \" + id.getType() + \" dependency to project: \" + id);\n+\t                    // check if it is a feature project\n+\t                    final FeatureProjectInfo depInfo = depProjectInfo;\n+\t                    if ( isTest ) {\n+\t                        process(env, depInfo, FeatureProjectConfig.getTestConfig(depInfo));\n+\t                    } else {\n+\t                        process(env, depInfo, FeatureProjectConfig.getMainConfig(depInfo));\n+\t                    }\n+\t                    Feature found = findFeature(isTest ? depInfo.assembledTestFeatures : depInfo.assembledFeatures, id);\n+\t                    if ( found == null ) {\n+\t                    \tif ( isTest ) {\n+\t                    \t\tfound = findFeature(depInfo.features, id);\n+\t                    \t}\n+\t                    \tif ( found == null ) {\n+\t                    \t\tfound = findFeature(isTest ? depInfo.testFeatures : depInfo.features, id);\n+\t                    \t\tif ( found == null && isTest ) {\n+\t                    \t\t\tfound = findFeature(depInfo.features, id);\n+\t                    \t\t}\n+\t                    \t\tif ( found != null ) {\n+\t                                found = FeatureBuilder.assemble(found, new BuilderContext(this));\n+\t                    \t\t}\n+\t                    \t}\n+\t                    }\n+\t\n+\t                    if ( isTest && found == null ) {\n+\t                        env.logger.error(\"Unable to get feature \" + id.toMvnId() + \" : Recursive test feature dependency list including project \" + info.project);\n+\t                    } else if ( !isTest && found == null ) {\n+\t                        env.logger.error(\"Unable to get feature \" + id.toMvnId() + \" : Recursive feature dependency list including project \" + info.project);\n+\t                    }\n+\t                    return found;\n+\t                } else {\n+\t                    env.logger.debug(\"Found external \" + id.getType() + \" dependency: \" + id);\n+\t\n+\t                    // \"external\" dependency, we can already resolve it\n+\t                    final File featureFile = ProjectHelper.getOrResolveArtifact(info.project, env.session, env.artifactHandlerManager, env.resolver, id).getFile();\n+\t                    try (final FileReader r = new FileReader(featureFile)) {\n+\t                        return FeatureJSONReader.read(r, featureFile.getAbsolutePath());\n+\t                    } catch ( final IOException ioe) {\n+\t                        env.logger.error(\"Unable to read feature file from \" + featureFile, ioe);\n+\t                    }\n+\t                }\n+\t\n+\t                return null;\n+                } finally {\n+                \tprocessing.remove(id);\n                 }\n-\n-                return null;\n             }\n         };\n     }\n+    \n+    private void addDependency(final Logger logger, final MavenProject project, final ArtifactId id, final String scope) {\n+    \tboolean found = false;\n+    \tfor(final Dependency d : project.getDependencies()) {\n+    \t\tif ( d.getGroupId().equals(id.getGroupId()) && d.getArtifactId().equals(id.getArtifactId())) {\n+    \t\t\tif ( d.getVersion().equals(id.getVersion()) && d.getType().equals(id.getType())) {\n+    \t\t\t\tif ( d.getClassifier() == null && id.getClassifier() == null ) {\n+    \t\t\t\t\tfound = true;\n+    \t\t\t\t\tbreak;\n+    \t\t\t\t}\n+    \t\t\t\tif ( d.getClassifier() != null && d.getClassifier().equals(id.getClassifier())) {\n+    \t\t\t\t\tfound = true;\n+    \t\t\t\t\tbreak;\n+    \t\t\t\t}\n+    \t\t\t}\n+    \t\t}\n+    \t}\n+    \tif ( !found ) {\n+    \t\tlogger.debug(\"- adding dependency \" + id.toMvnId());\n+    \t\tfinal Dependency dep = ProjectHelper.toDependency(id, scope);\n+    \t\tproject.getDependencies().add(dep);    \n+    \t}\n+    }\n+    \n+    private Feature findFeature(final Map<String, Feature> featureMap, final ArtifactId id) {\n+        Feature found = null;\n+    \tif ( featureMap != null ) {\n+            for(final Feature f : featureMap.values()) {\n+                if ( f.getId().equals(id) ) {\n+                    found = f;\n+                    break;\n+                }\n+            }\n+    \t}\n+\t\treturn found;\n+    }\n }",
                "raw_url": "https://github.com/apache/sling-slingfeature-maven-plugin/raw/3bd5909770e1d402bec671d839ade67640bdba2d/src/main/java/org/apache/sling/feature/maven/Preprocessor.java",
                "sha": "fe908a9e60dc7169ce5564a63db3569320a8ee37",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE during feature resolving and improve algorithm to find non assembled features",
        "parent": "https://github.com/apache/sling-slingfeature-maven-plugin/commit/aa3abc049059108543cd453ac0eb5e7c6c4cf05b",
        "patched_files": [
            "Preprocessor.java"
        ],
        "repo": "sling-slingfeature-maven-plugin",
        "unit_tests": [
            "PreprocessorTest.java"
        ]
    }
}