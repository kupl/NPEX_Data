[{"commit": "https://github.com/apache/openwebbeans/commit/87ccc0e87c907c81a860f85b10618f99963acdc6", "parent": "https://github.com/apache/openwebbeans/commit/5b3d6dd7d712081f8084a062e19bb2a60cc13272", "message": "OWB-1271 wrapping repeatableMethodCache values in Optional to reduce the number of NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1847620 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_1", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/annotation/AnnotationManager.java", "blob_url": "https://github.com/apache/openwebbeans/blob/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/annotation/AnnotationManager.java", "sha": "20ea026743e7933dcaa0f45cd88081be6355f948", "changes": 9, "status": "modified", "deletions": 4, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/annotation/AnnotationManager.java?ref=87ccc0e87c907c81a860f85b10618f99963acdc6", "patch": "@@ -59,6 +59,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.CopyOnWriteArraySet;\n@@ -74,7 +75,7 @@\n         new ConcurrentHashMap<>();\n \n     private CopyOnWriteArraySet<Class<?>> repeatableMethodCheckedTypes = new CopyOnWriteArraySet<>();\n-    private Map<Class<?>, Method> repeatableMethodCache = new ConcurrentHashMap<>();\n+    private Map<Class<?>, Optional<Method>> repeatableMethodCache = new ConcurrentHashMap<>();\n \n     private final BeanManagerImpl beanManagerImpl;\n     private final WebBeansContext webBeansContext;\n@@ -940,17 +941,17 @@ public void clearCaches()\n         repeatableMethodCache.clear();\n     }\n \n-    public Method getRepeatableMethod(Class<?> type)\n+    public Optional<Method> getRepeatableMethod(Class<?> type)\n     {\n         if (repeatableMethodCheckedTypes.contains(type))\n         {\n             return repeatableMethodCache.get(type);\n         }\n \n-        Method method = resolveRepeatableMethod(type);\n+        Optional<Method> method = Optional.ofNullable(resolveRepeatableMethod(type));\n         \n         repeatableMethodCheckedTypes.add(type);\n-        repeatableMethodCache.put(type, method);\n+        repeatableMethodCache.put(type, method); // don't put null here!\n         \n         return method;\n     }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/annotation/AnnotationManager.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/component/creation/BeanAttributesBuilder.java", "blob_url": "https://github.com/apache/openwebbeans/blob/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/component/creation/BeanAttributesBuilder.java", "sha": "6547d1c6487e80a079576f3bd85bf30252e42019", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/component/creation/BeanAttributesBuilder.java?ref=87ccc0e87c907c81a860f85b10618f99963acdc6", "patch": "@@ -303,7 +303,7 @@ private boolean isRepetable(Annotated annotated, Annotation annotation)\n     {\n         return AbstractAnnotated.class.isInstance(annotated) ?\n                 AbstractAnnotated.class.cast(annotated).getRepeatables().contains(annotation.annotationType()) :\n-                webBeansContext.getAnnotationManager().getRepeatableMethod(annotation.annotationType()) != null;\n+                webBeansContext.getAnnotationManager().getRepeatableMethod(annotation.annotationType()).isPresent();\n     }\n \n     /**", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/component/creation/BeanAttributesBuilder.java"}, {"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java", "blob_url": "https://github.com/apache/openwebbeans/blob/87ccc0e87c907c81a860f85b10618f99963acdc6/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java", "sha": "60d1a87d56d30179b61d1eac86d9c52ff3a5146b", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java?ref=87ccc0e87c907c81a860f85b10618f99963acdc6", "patch": "@@ -26,6 +26,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Objects;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Stream;\n \n@@ -98,12 +99,13 @@ protected void buildRepeatableAnnotations(Set<Annotation> annotations)\n                     Class<?> type = a.annotationType();\n                     try\n                     {\n-                        Method repeatableMethod = webBeansContext.getAnnotationManager().getRepeatableMethod(type);\n-                        if (repeatableMethod == null)\n+                        Optional<Method> repeatableMethod =\n+                                webBeansContext.getAnnotationManager().getRepeatableMethod(type);\n+                        if (!repeatableMethod.isPresent())\n                         {\n                             return null;\n                         }\n-                        return (Annotation[]) repeatableMethod.invoke(a);\n+                        return (Annotation[]) repeatableMethod.orElseThrow(IllegalStateException::new).invoke(a);\n                     }\n                     catch (Exception e)\n                     {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/5905c8bc4ac4541ee66147d15177c2d4d05456ef", "parent": "https://github.com/apache/openwebbeans/commit/a5a6a30e103a46174536f07757fbbfc37080ba4e", "message": "OWB-1213 fix NPE when scanning for self-intercepting bean \n\nDid happen on producermethods which return a class with a private ct.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1805243 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_2", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openwebbeans/raw/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java", "blob_url": "https://github.com/apache/openwebbeans/blob/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java", "sha": "fe51899bc0f175a467bb6d3c3a465afe456c983f", "changes": 8, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java?ref=5905c8bc4ac4541ee66147d15177c2d4d05456ef", "patch": "@@ -336,7 +336,13 @@ else if (interceptorBindings != null)\n     private <T> SelfInterceptorBean<T> resolveSelfInterceptorBean(AnnotatedType<T> annotatedType)\n     {\n         BeanAttributesImpl<T> beanAttributes = BeanAttributesBuilder.forContext(webBeansContext).newBeanAttibutes(annotatedType).build();\n-        SelfInterceptorBeanBuilder<T>sibb = new SelfInterceptorBeanBuilder<>(webBeansContext, annotatedType, beanAttributes);\n+        if (beanAttributes == null)\n+        {\n+            // might happen if a proxying rule eefines that this is not a valid bean type.\n+            return null;\n+        }\n+\n+        SelfInterceptorBeanBuilder<T> sibb = new SelfInterceptorBeanBuilder<>(webBeansContext, annotatedType, beanAttributes);\n         sibb.defineSelfInterceptorRules();\n         if (!sibb.isInterceptorEnabled())\n         {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorResolutionService.java"}, {"additions": 7, "raw_url": "https://github.com/apache/openwebbeans/raw/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java", "blob_url": "https://github.com/apache/openwebbeans/blob/5905c8bc4ac4541ee66147d15177c2d4d05456ef/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java", "sha": "6356d34c2bcfc447a5317fc33a19daf83a42a8cd", "changes": 7, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java?ref=5905c8bc4ac4541ee66147d15177c2d4d05456ef", "patch": "@@ -20,6 +20,7 @@\n \n import javax.enterprise.inject.Produces;\n import javax.inject.Named;\n+import java.net.URI;\n \n public class ProducerBean {\n \n@@ -58,4 +59,10 @@ public String getName5() {\n     public boolean isName6() {\n         return true;\n     }\n+\n+    @Produces\n+    public URI createUri()\n+    {\n+        return URI.create(\"http://invalid.invalid\");\n+    }\n }", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/test/producer/ProducerBean.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/22fa44cbd193a6539d57e4e50721e214d62a34b8", "parent": "https://github.com/apache/openwebbeans/commit/cb92b6bd40fe0e6c33d0b4a9968cc8bc56669ee5", "message": "OWB-1163 NPE in BeforeBeanDiscovery#addAnnotatedType if id is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1776283 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_3", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/22fa44cbd193a6539d57e4e50721e214d62a34b8/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/22fa44cbd193a6539d57e4e50721e214d62a34b8/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java", "sha": "128f19c4a52a2c5dc96d874b65516f591ec2f476", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java?ref=22fa44cbd193a6539d57e4e50721e214d62a34b8", "patch": "@@ -1302,6 +1302,11 @@ public void addAdditionalAnnotatedType(Object extension, AnnotatedType<?> annota\n             return;\n         }\n \n+        if (id == null)\n+        {\n+            id = extension.getClass().getName() + annotatedType + AnnotatedElementFactory.OWB_DEFAULT_KEY;\n+        }\n+        \n         webBeansContext.getAnnotatedElementFactory().setAnnotatedType(annotatedType, id);\n         ConcurrentMap<String, AnnotatedType<?>> annotatedTypes = additionalAnnotatedTypes.get(annotatedType.getJavaClass());\n         if (annotatedTypes == null)", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/a713f50075004dc3d9a398811cc94c5f5501e8b1", "parent": "https://github.com/apache/openwebbeans/commit/b8a8101574fc0b09ca2a0bca76b9d748a8c3ac5a", "message": "OWB-1094 possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1705018 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_4", "file": [{"additions": 20, "raw_url": "https://github.com/apache/openwebbeans/raw/a713f50075004dc3d9a398811cc94c5f5501e8b1/webbeans-impl/src/main/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscovery.java", "blob_url": "https://github.com/apache/openwebbeans/blob/a713f50075004dc3d9a398811cc94c5f5501e8b1/webbeans-impl/src/main/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscovery.java", "sha": "0873c02eb35cfb4ebec318e006882aed444f14c8", "changes": 29, "status": "modified", "deletions": 9, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscovery.java?ref=a713f50075004dc3d9a398811cc94c5f5501e8b1", "patch": "@@ -253,6 +253,9 @@ protected void filterExcludedJars(Set<URL> classPathUrls)\n \n     private int isKnownJar(final String path)\n     {\n+        // lazy init - required when using DS CdiTestRunner\n+        initScanningExcludes();\n+\n         for (final String p : scanningExcludes)\n         {\n             final int i = path.indexOf(p);\n@@ -305,21 +308,29 @@ public void init(Object object)\n         String usage = WebBeansContext.currentInstance().getOpenWebBeansConfiguration().getProperty(OpenWebBeansConfiguration.USE_BDA_BEANSXML_SCANNER);\n         isBDAScannerEnabled = Boolean.parseBoolean(usage);\n \n-        String scanningExcludesProperty =\n-                WebBeansContext.currentInstance().getOpenWebBeansConfiguration().getProperty(OpenWebBeansConfiguration.SCAN_EXCLUSION_PATHS);\n-        ArrayList<String> scanningExcludesList = new ArrayList<String>();\n-        if (scanningExcludesProperty != null)\n+        initScanningExcludes();\n+    }\n+\n+    public void initScanningExcludes()\n+    {\n+        if (scanningExcludes == null)\n         {\n-            for (String scanningExclude : scanningExcludesProperty.split(\",\"))\n+            String scanningExcludesProperty =\n+                    WebBeansContext.currentInstance().getOpenWebBeansConfiguration().getProperty(OpenWebBeansConfiguration.SCAN_EXCLUSION_PATHS);\n+            ArrayList<String> scanningExcludesList = new ArrayList<String>();\n+            if (scanningExcludesProperty != null)\n             {\n-                scanningExclude = scanningExclude.trim();\n-                if (!scanningExclude.isEmpty())\n+                for (String scanningExclude : scanningExcludesProperty.split(\",\"))\n                 {\n-                    scanningExcludesList.add(scanningExclude);\n+                    scanningExclude = scanningExclude.trim();\n+                    if (!scanningExclude.isEmpty())\n+                    {\n+                        scanningExcludesList.add(scanningExclude);\n+                    }\n                 }\n             }\n+            scanningExcludes = scanningExcludesList.toArray(new String[scanningExcludesList.size()]);\n         }\n-        scanningExcludes = scanningExcludesList.toArray(new String[scanningExcludesList.size()]);\n     }\n \n     /**", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/corespi/scanner/AbstractMetaDataDiscovery.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/ff761bfc0ce8c9202ceb144c94756cf968a17c57", "parent": "https://github.com/apache/openwebbeans/commit/37424db47587609670c393ddee998f34ac91ee39", "message": "OWB-989 fix potential NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1682380 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_5", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/ff761bfc0ce8c9202ceb144c94756cf968a17c57/webbeans-impl/src/main/java/org/apache/webbeans/xml/DefaultBeanArchiveService.java", "blob_url": "https://github.com/apache/openwebbeans/blob/ff761bfc0ce8c9202ceb144c94756cf968a17c57/webbeans-impl/src/main/java/org/apache/webbeans/xml/DefaultBeanArchiveService.java", "sha": "af2016e801cce04fc3d0f558bed16c3fb7985dff", "changes": 7, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/xml/DefaultBeanArchiveService.java?ref=ff761bfc0ce8c9202ceb144c94756cf968a17c57", "patch": "@@ -221,7 +221,10 @@ private BeanArchiveInformation readBeansXml(URL beansXmlUrl, String beansXmlLoca\n         {\n             try\n             {\n-                xmlStream.close();\n+                if (xmlStream != null)\n+                {\n+                    xmlStream.close();\n+                }\n             }\n             catch (IOException ioe)\n             {\n@@ -454,7 +457,7 @@ else if (WebBeansConstants.WEB_BEANS_XML_IF_SYSTEM_PROPERTY.equalsIgnoreCase(loc\n                     {\n                         final String value = getTrimmedAttribute(condition, \"value\");\n                         final String systProp = System.getProperty(getTrimmedAttribute(condition, \"name\"));\n-                        if ((value == null && systProp == null) || !value.equals(systProp))\n+                        if ((value == null && systProp == null) || !(value != null && value.equals(systProp)))\n                         {\n                             skip = true;\n                             break;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/xml/DefaultBeanArchiveService.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6", "parent": "https://github.com/apache/openwebbeans/commit/414d3cd9b49bf863c3e77bcfd7b404d3b9ad9446", "message": "OWB-989 fix potential NPE and dead code\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1682375 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_6", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/BaseProducerProducer.java", "blob_url": "https://github.com/apache/openwebbeans/blob/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/BaseProducerProducer.java", "sha": "87c53d7c25dfe523b8369d8b16913210ec18502c", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/BaseProducerProducer.java?ref=28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6", "patch": "@@ -127,7 +127,10 @@ public void dispose(T instance)\n             }\n             finally\n             {\n-                parentCreationalContext.release();\n+                if (parentCreationalContext != null)\n+                {\n+                    parentCreationalContext.release();\n+                }\n             }\n         }\n     }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/BaseProducerProducer.java"}, {"additions": 0, "raw_url": "https://github.com/apache/openwebbeans/raw/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/BeanMetadataProducer.java", "blob_url": "https://github.com/apache/openwebbeans/blob/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/BeanMetadataProducer.java", "sha": "edc1ebef45ddadc7fc982c6a27957b34e8b75ade", "changes": 5, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/BeanMetadataProducer.java?ref=28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6", "patch": "@@ -31,11 +31,6 @@\n     @Override\n     protected Contextual<T> produce(Map<Interceptor<?>, ?> interceptors, CreationalContextImpl<Contextual<T>> creationalContext)\n     {\n-        if (!(creationalContext instanceof CreationalContextImpl))\n-        {\n-            // TODO What to do here?\n-            throw new IllegalStateException(\"MetadataProducer does work only with CreationalContextImpl\");\n-        }\n         CreationalContextImpl<T> contextImpl = (CreationalContextImpl<T>)creationalContext;\n         return contextImpl.getBean();\n     }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/BeanMetadataProducer.java"}, {"additions": 3, "raw_url": "https://github.com/apache/openwebbeans/raw/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/EventProducer.java", "blob_url": "https://github.com/apache/openwebbeans/blob/28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6/webbeans-impl/src/main/java/org/apache/webbeans/portable/EventProducer.java", "sha": "7222bad2fbe7eccf06de5d96ad260d6b7fb812a8", "changes": 16, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/EventProducer.java?ref=28418ad94c56b7c04b14c1227cc7b6fc13e3dcf6", "patch": "@@ -79,15 +79,9 @@ public EventProducer(WebBeansContext webBeansContext)\n     protected Event<T> produce(Map<Interceptor<?>, ?> interceptors, CreationalContextImpl<Event<T>> creationalContext)\n     {\n         Event<T> instance = null;\n-        InjectionPoint injectionPoint = null;\n-        //TODO What should we do here if creationalContext is not instanceof CreationalContextImpl?\n-        if (creationalContext instanceof CreationalContextImpl)\n-        {\n-            injectionPoint = ((CreationalContextImpl<Event<T>>)creationalContext).getInjectionPoint();\n-        }\n-\n         Type eventType;\n-        \n+\n+        InjectionPoint injectionPoint = creationalContext.getInjectionPoint();\n         if(injectionPoint != null)\n         {\n             Type[] eventActualTypeArgs;\n@@ -114,12 +108,8 @@ public EventProducer(WebBeansContext webBeansContext)\n             }           \n             finally\n             {\n-                if (creationalContext instanceof CreationalContextImpl)\n-                {\n-                    ((CreationalContextImpl<Event<T>>)creationalContext).removeInjectionPoint();\n-                }\n+                creationalContext.removeInjectionPoint();\n             }\n-            \n         }\n                         \n         return instance;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/EventProducer.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/fa0ff1561592b39ff103b37d66c803bb2be4a4a5", "parent": "https://github.com/apache/openwebbeans/commit/69ef83927e0a345be13bc3e8ade38f31490d8c7e", "message": "OWB-989 don't throw NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1681984 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_7", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/fa0ff1561592b39ff103b37d66c803bb2be4a4a5/webbeans-impl/src/main/java/org/apache/webbeans/logger/WebBeansLoggerFacade.java", "blob_url": "https://github.com/apache/openwebbeans/blob/fa0ff1561592b39ff103b37d66c803bb2be4a4a5/webbeans-impl/src/main/java/org/apache/webbeans/logger/WebBeansLoggerFacade.java", "sha": "26133743a3c2e8612c87b757cf2431388c1c380e", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/logger/WebBeansLoggerFacade.java?ref=fa0ff1561592b39ff103b37d66c803bb2be4a4a5", "patch": "@@ -127,7 +127,7 @@ public static String getTokenString(String messageKey)\n \n         if (WB_BUNDLE == null)\n         {\n-            throw new NullPointerException(\"ResourceBundle can not be null\");\n+            throw new IllegalStateException(\"ResourceBundle can not be null\");\n         }\n         try\n         {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/logger/WebBeansLoggerFacade.java"}, {"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/fa0ff1561592b39ff103b37d66c803bb2be4a4a5/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java", "blob_url": "https://github.com/apache/openwebbeans/blob/fa0ff1561592b39ff103b37d66c803bb2be4a4a5/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java", "sha": "fd2a00a832b60fe39620081e5029f25acccacccb", "changes": 12, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java?ref=fa0ff1561592b39ff103b37d66c803bb2be4a4a5", "patch": "@@ -28,6 +28,7 @@\n import javax.enterprise.inject.spi.Annotated;\n \n import org.apache.webbeans.config.WebBeansContext;\n+import org.apache.webbeans.util.Asserts;\n import org.apache.webbeans.util.GenericsUtil;\n \n /**\n@@ -56,14 +57,9 @@\n      */\n     protected AbstractAnnotated(WebBeansContext webBeansContext, Type baseType)\n     {\n-        if (webBeansContext == null)\n-        {\n-            throw new NullPointerException(\"no WebBeansContext\");\n-        }\n-        if (baseType == null)\n-        {\n-            throw new NullPointerException(\"no base type\");\n-        }\n+        Asserts.assertNotNull(webBeansContext, Asserts.PARAM_NAME_WEBBEANSCONTEXT);\n+        Asserts.assertNotNull(baseType, \"base type\");\n+        \n         this.baseType = baseType;\n         this.webBeansContext = webBeansContext;\n     }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/AbstractAnnotated.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/a46272917d8b4670e8135be981f5fa3242ddced4", "parent": "https://github.com/apache/openwebbeans/commit/4e18ad736e884202bf82b9bc8a6d9ff59a81b1ef", "message": "OWB-989 avoid possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1681977 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_8", "file": [{"additions": 8, "raw_url": "https://github.com/apache/openwebbeans/raw/a46272917d8b4670e8135be981f5fa3242ddced4/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java", "blob_url": "https://github.com/apache/openwebbeans/blob/a46272917d8b4670e8135be981f5fa3242ddced4/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java", "sha": "0c9aa73fc9884faa314128a252d634e6ee924caa", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java?ref=a46272917d8b4670e8135be981f5fa3242ddced4", "patch": "@@ -113,9 +113,14 @@ protected void afterStartApplication(final Object startupObject)\n             setJspELFactory((ServletContext) startupObject, resolver);\n         }\n \n-        // Add BeanManager to the 'javax.enterprise.inject.spi.BeanManager' servlet context attribute\n-        ServletContext servletContext = (ServletContext)(startupObject);\n-        servletContext.setAttribute(BeanManager.class.getName(), getBeanManager());\n+        ServletContext servletContext =  null;\n+        if (startupObject instanceof ServletContext)\n+        {\n+            servletContext = (ServletContext)(startupObject);\n+            \n+            // Add BeanManager to the 'javax.enterprise.inject.spi.BeanManager' servlet context attribute\n+            servletContext.setAttribute(BeanManager.class.getName(), getBeanManager());\n+        }\n \n         // fire @Initialized(ApplicationScoped.class) if any observer for it exists\n         if (webBeansContext.getBeanManagerImpl().getNotificationManager().", "filename": "webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/4d1ebf024da8d84d76590178e50ef3e5b89bfb66", "parent": "https://github.com/apache/openwebbeans/commit/f4a9d220bb0393b8ecd60f59beb3cb49729b1114", "message": "avoid NPE if cc.getbean is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1680825 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_9", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openwebbeans/raw/4d1ebf024da8d84d76590178e50ef3e5b89bfb66/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java", "blob_url": "https://github.com/apache/openwebbeans/blob/4d1ebf024da8d84d76590178e50ef3e5b89bfb66/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java", "sha": "ab0c6e61e5cb3a1f6a3ea618835d5ef439572f40", "changes": 14, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java?ref=4d1ebf024da8d84d76590178e50ef3e5b89bfb66", "patch": "@@ -83,18 +83,10 @@ public T inject(InjectionPoint injectionPoint)\n         \n         //Injection for dependent instance InjectionPoint fields\n         boolean dependentProducer = false;\n-        if(WebBeansUtil.isDependent(injectedBean))\n+        if(WebBeansUtil.isDependent(injectedBean) && !injectionPoint.isTransient() && injectedBean instanceof AbstractProducerBean\n+                    && creationalContext.getBean() != null && beanManager.isPassivatingScope(creationalContext.getBean().getScope()))\n         {\n-            if(!injectionPoint.isTransient())\n-            {\n-                if(injectedBean instanceof AbstractProducerBean)\n-                {\n-                    if(beanManager.isPassivatingScope(creationalContext.getBean().getScope()))\n-                    {\n-                        dependentProducer = true;   \n-                    }\n-                }\n-            }\n+            dependentProducer = true;\n         }\n         \n         CreationalContext<?> injectionPointContext;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/32a416856d8e19e51fb1a9eb82f71cb5e3c54160", "parent": "https://github.com/apache/openwebbeans/commit/22512e1aa0396ac498caa2d528f255987a669ca9", "message": "avoiding NPE in isConversationExistWithGivenId as well\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1648309 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_10", "file": [{"additions": 6, "raw_url": "https://github.com/apache/openwebbeans/raw/32a416856d8e19e51fb1a9eb82f71cb5e3c54160/webbeans-impl/src/main/java/org/apache/webbeans/conversation/ConversationManager.java", "blob_url": "https://github.com/apache/openwebbeans/blob/32a416856d8e19e51fb1a9eb82f71cb5e3c54160/webbeans-impl/src/main/java/org/apache/webbeans/conversation/ConversationManager.java", "sha": "fb44ba6377aedf506d32e6c3229a60b21ee86e89", "changes": 7, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/conversation/ConversationManager.java?ref=32a416856d8e19e51fb1a9eb82f71cb5e3c54160", "patch": "@@ -77,14 +77,19 @@ public void addConversationContext(Conversation conversation, ConversationContex\n      */\n     public boolean isConversationExistWithGivenId(String conversationId)\n     {\n+        if (conversationId == null)\n+        {\n+            return false;\n+        }\n+\n         ConversationImpl conv = null;\n         Set<Conversation> set = conversations.keySet();\n         Iterator<Conversation> it = set.iterator();\n \n         while (it.hasNext())\n         {\n             conv = (ConversationImpl) it.next();\n-            if (conv.getId().equals(conversationId))\n+            if (conversationId.equals(conv.getId()))\n             {\n                 return true;\n             }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/conversation/ConversationManager.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/8683219416647e69ff55c703a5e559493a982aef", "parent": "https://github.com/apache/openwebbeans/commit/472e160a8d0b5594493ee3686d859d8bc7046249", "message": "avoid NPE in InstanceImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1631174 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_11", "file": [{"additions": 0, "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java", "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java", "sha": "4d60b17f395f93b697cb8bd83742d3f88f8f39f5", "changes": 7, "status": "modified", "deletions": 7, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java?ref=8683219416647e69ff55c703a5e559493a982aef", "patch": "@@ -26,17 +26,12 @@\n import javax.enterprise.inject.Instance;\n import javax.enterprise.inject.spi.BeanManager;\n import javax.enterprise.inject.spi.CDI;\n-import javax.enterprise.inject.spi.InjectionPoint;\n import javax.enterprise.util.TypeLiteral;\n-import javax.inject.Inject;\n import java.lang.annotation.Annotation;\n import java.util.Iterator;\n \n public class OwbCDI extends CDI<Object>\n {\n-    @Inject\n-    private Instance<Object> injectionPoint;\n-\n     private WebBeansContext getWebBeansContext()\n     {\n         return WebBeansContext.currentInstance();\n@@ -47,8 +42,6 @@ private WebBeansContext getWebBeansContext()\n         final WebBeansContext webBeansContext = getWebBeansContext();\n         final BeanManagerImpl bm = webBeansContext.getBeanManagerImpl();\n         final CreationalContextImpl<Instance<Object>> creationalContext = bm.createCreationalContext(null);\n-        final InjectionPoint injectionPoint1 = bm.createInjectionTarget(bm.createAnnotatedType(OwbCDI.class)).getInjectionPoints().iterator().next();\n-        creationalContext.putInjectionPoint(injectionPoint1);\n         return new InstanceBean<Object>(webBeansContext).create(creationalContext);\n     }\n ", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/OwbCDI.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java", "sha": "c881207c0ca9984927afe2b6e44477a02e1430d8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java?ref=8683219416647e69ff55c703a5e559493a982aef", "patch": "@@ -163,7 +163,7 @@ public T get()\n \n         InjectionResolver injectionResolver = webBeansContext.getBeanManagerImpl().getInjectionResolver();\n \n-        Bean<?> injectionPointBean = injectionPoint.getBean();\n+        Bean<?> injectionPointBean = injectionPoint != null ? injectionPoint.getBean() : null;\n         Class<?> injectionPointClass = null;\n         if (injectionPointBean != null)\n         {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/openwebbeans/raw/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java", "blob_url": "https://github.com/apache/openwebbeans/blob/8683219416647e69ff55c703a5e559493a982aef/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java", "sha": "4996812a86949af714ab940f14961d304c8e25f4", "changes": 3, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java?ref=8683219416647e69ff55c703a5e559493a982aef", "patch": "@@ -36,6 +36,7 @@ public void run()\n         assertNotNull(CDI.current());\n         assertNotNull(CDI.current().getBeanManager());\n         assertFalse(CDI.current().isUnsatisfied());\n-        assertTrue(CDI.current().isAmbiguous());\n+        assertFalse(CDI.current().isAmbiguous());\n+        assertNotNull(CDI.current().get());\n     }\n }", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/container/OwbCDIProviderTest.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/55f810363646bba3907261ce41fa62881531ed13", "parent": "https://github.com/apache/openwebbeans/commit/a294ad64286519e4636509266b61f812c1c75fcf", "message": "OWB-1012 ProducerMethodProducer must throw IllegalArgumentException instead of NPE  \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1628135 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_12", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/55f810363646bba3907261ce41fa62881531ed13/webbeans-impl/src/main/java/org/apache/webbeans/portable/ProducerMethodProducer.java", "blob_url": "https://github.com/apache/openwebbeans/blob/55f810363646bba3907261ce41fa62881531ed13/webbeans-impl/src/main/java/org/apache/webbeans/portable/ProducerMethodProducer.java", "sha": "adb3aa8bac62ee99e44ec0456913f34eccdbe742", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/ProducerMethodProducer.java?ref=55f810363646bba3907261ce41fa62881531ed13", "patch": "@@ -53,7 +53,10 @@ public ProducerMethodProducer(Bean<P> owner,\n         Asserts.assertNotNull(producerMethod, \"method may not be null\");\n         if (!producerMethod.isStatic())\n         {\n-            Asserts.assertNotNull(owner, \"owner may not be null for non-static producer method\");\n+            if (owner == null)\n+            {\n+                throw new IllegalArgumentException(\"owner may not be null for non-static producer method \" + producerMethod);\n+            }\n         }\n         final OpenWebBeansEjbPlugin ejbPlugin = webBeansContext.getPluginLoader().getEjbPlugin();\n         if (ejbPlugin != null)", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/ProducerMethodProducer.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/e01cc8e545e562502783a0ba0d1b9a71b12990fa", "parent": "https://github.com/apache/openwebbeans/commit/34f1f8bba93cfa0f562cf598cae0899e0868bdd2", "message": "default package is null so avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1617143 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_13", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openwebbeans/raw/e01cc8e545e562502783a0ba0d1b9a71b12990fa/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java", "blob_url": "https://github.com/apache/openwebbeans/blob/e01cc8e545e562502783a0ba0d1b9a71b12990fa/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java", "sha": "23aca33645e61cfdc4ec8730ca8cbca28ad32b3d", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java?ref=e01cc8e545e562502783a0ba0d1b9a71b12990fa", "patch": "@@ -765,6 +765,9 @@ private boolean isVetoed(final Class<?> implClass)\n         }\n \n         Package pckge = implClass.getPackage();\n+        if (pckge == null) {\n+            return false;\n+        }\n         do\n         {\n             // yes we cache result with potentially different classloader but this is not portable by spec", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/config/BeansDeployer.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/64338ed836d29436bfc67f79f8611d4d0d92824c", "parent": "https://github.com/apache/openwebbeans/commit/711860eb9f22abd3113fc9767b4392be057b97e7", "message": "avoiding NPE + few more generics\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1607310 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_14", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java", "sha": "6722b401210ccae3f7ffff4926027d40c7abc25f", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java?ref=64338ed836d29436bfc67f79f8611d4d0d92824c", "patch": "@@ -1247,7 +1247,7 @@ public void addAdditionalScope(ExternalScope additionalScope)\n         final Collection<AnnotatedType<T>> types = new ArrayList<AnnotatedType<T>>(2);\n         types.add(annotatedElementFactory.getAnnotatedType(type));\n         final ConcurrentMap<String, AnnotatedType<?>> aTypes = additionalAnnotatedTypes.get(type);\n-        if (types != null)\n+        if (aTypes != null)\n         {\n             for (final AnnotatedType at : aTypes.values())\n             {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/BeanManagerImpl.java"}, {"additions": 10, "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java", "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java", "sha": "7b663aa284e32164788487edd72e4d9a4d39e2dd", "changes": 11, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java?ref=64338ed836d29436bfc67f79f8611d4d0d92824c", "patch": "@@ -338,6 +338,11 @@ private static boolean isAssignableFrom(boolean isDelegate, WildcardType injecti\n     {\n         for (Type bounds: injectionPointType.getLowerBounds())\n         {\n+            if (!isAssignableFrom(isDelegate, beanType, bounds))\n+            {\n+                return false;\n+            }\n+            /*\n             Set<Type> beanTypeClosure = getTypeClosure(beanType);\n             boolean isAssignable = false;\n             for (Type beanSupertype: beanTypeClosure)\n@@ -352,14 +357,18 @@ private static boolean isAssignableFrom(boolean isDelegate, WildcardType injecti\n             { \n                 return false;\n             }\n+            */\n         }\n         for (Type bounds: injectionPointType.getUpperBounds())\n         {\n             Set<Type> beanTypeClosure = getTypeClosure(beanType);\n             boolean isAssignable = false;\n             for (Type beanSupertype: beanTypeClosure)\n             {\n-                if (isAssignableFrom(isDelegate, bounds, beanSupertype))\n+                if (isAssignableFrom(isDelegate, bounds, beanSupertype)\n+                    || (Class.class.isInstance(bounds)\n+                        && ParameterizedType.class.isInstance(beanSupertype)\n+                        && bounds == ParameterizedType.class.cast(beanSupertype).getRawType()))\n                 {\n                     isAssignable = true;\n                     break;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/util/GenericsUtil.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-tck/testng-dev.xml", "blob_url": "https://github.com/apache/openwebbeans/blob/64338ed836d29436bfc67f79f8611d4d0d92824c/webbeans-tck/testng-dev.xml", "sha": "f69504237f01fc1fa11ce1595a424da8a55eb8c3", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-tck/testng-dev.xml?ref=64338ed836d29436bfc67f79f8611d4d0d92824c", "patch": "@@ -18,7 +18,7 @@\n <suite name=\"JSR-346-TCK\" verbose=\"2\" configfailurepolicy=\"continue\">\n   <test name=\"JSR-346 TCK\">\n     <classes>\n-      <class name=\"org.jboss.cdi.tck.tests.event.observer.wildcardAndTypeVariable.ObserverMethodWithParametertizedTypeTest\" />\n+      <class name=\"org.jboss.cdi.tck.tests.event.resolve.typeWithParameters.CheckTypeParametersWhenResolvingObserversTest\" />\n       <!--\n       <class name=\"org.jboss.cdi.tck.tests.event.parameterized.ParameterizedEventTest\" />\n       <class name=\"org.jboss.cdi.tck.tests.event.fires.FireEventTest\" />", "filename": "webbeans-tck/testng-dev.xml"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/2732091ad157106dbee6b5a2051230a8f4c16a96", "parent": "https://github.com/apache/openwebbeans/commit/e43be1d427e2828bcda0f75b80e03396e7b7ceab", "message": "OWB-902 test for NPE in createNormalScopeProxy\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1528409 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_15", "file": [{"additions": 133, "raw_url": "https://github.com/apache/openwebbeans/raw/2732091ad157106dbee6b5a2051230a8f4c16a96/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java", "blob_url": "https://github.com/apache/openwebbeans/blob/2732091ad157106dbee6b5a2051230a8f4c16a96/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java", "sha": "24cea4e31b826ee4b4c889b3ff69d845f858151b", "changes": 138, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java?ref=2732091ad157106dbee6b5a2051230a8f4c16a96", "patch": "@@ -18,24 +18,152 @@\n  */\n package org.apache.webbeans.newtests.interceptors.factory;\n \n-import javax.inject.Provider;\n-import java.net.URL;\n-import java.net.URLClassLoader;\n-\n+import org.apache.webbeans.component.OwbBean;\n+import org.apache.webbeans.component.WebBeansType;\n import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.newtests.AbstractUnitTest;\n import org.apache.webbeans.newtests.interceptors.factory.beans.ClassInterceptedClass;\n import org.apache.webbeans.newtests.interceptors.factory.beans.SomeBaseClass;\n-import org.apache.webbeans.newtests.interceptors.factory.SubPackageInterceptedClass;\n import org.apache.webbeans.proxy.NormalScopeProxyFactory;\n import org.junit.Assert;\n import org.junit.Test;\n \n+import javax.enterprise.context.ApplicationScoped;\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.InjectionPoint;\n+import javax.enterprise.inject.spi.Producer;\n+import javax.inject.Provider;\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.net.URL;\n+import java.net.URLClassLoader;\n+import java.util.Set;\n+\n+import static org.junit.Assert.assertNotNull;\n+\n /**\n  * Test for the {@link NormalScopeProxyFactory}\n  */\n public class NormalScopeProxyFactoryTest extends AbstractUnitTest\n {\n+    @Test\n+    public void noBeanClassProxy()\n+    {\n+        final WebBeansContext webBeansContext = new WebBeansContext();\n+        final NormalScopeProxyFactory pf = new NormalScopeProxyFactory(webBeansContext);\n+        final Object proxy = pf.createNormalScopeProxy(new OwbBean<Provider>() {\n+            @Override\n+            public Set<Type> getTypes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Set<Annotation> getQualifiers() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<? extends Annotation> getScope() {\n+                return ApplicationScoped.class;\n+            }\n+\n+            @Override\n+            public String getName() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isNullable() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Set<InjectionPoint> getInjectionPoints() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<?> getBeanClass() {\n+                return null; // this is what we test\n+            }\n+\n+            @Override\n+            public Set<Class<? extends Annotation>> getStereotypes() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isAlternative() {\n+                return false;\n+            }\n+\n+            @Override\n+            public Provider create(final CreationalContext<Provider> context) {\n+                return null;\n+            }\n+\n+            @Override\n+            public void destroy(final Provider instance, final CreationalContext<Provider> context) {\n+\n+            }\n+\n+            @Override\n+            public Producer<Provider> getProducer() {\n+                return null;\n+            }\n+\n+            @Override\n+            public WebBeansType getWebBeansType() {\n+                return null;\n+            }\n+\n+            @Override\n+            public Class<Provider> getReturnType() {\n+                return Provider.class;\n+            }\n+\n+            @Override\n+            public void setSpecializedBean(boolean specialized) {\n+\n+            }\n+\n+            @Override\n+            public boolean isSpecializedBean() {\n+                return false;\n+            }\n+\n+            @Override\n+            public void setEnabled(boolean enabled) {\n+\n+            }\n+\n+            @Override\n+            public boolean isEnabled() {\n+                return false;\n+            }\n+\n+            @Override\n+            public String getId() {\n+                return null;\n+            }\n+\n+            @Override\n+            public boolean isPassivationCapable() {\n+                return false;\n+            }\n+\n+            @Override\n+            public boolean isDependent() {\n+                return false;\n+            }\n+\n+            @Override\n+            public WebBeansContext getWebBeansContext() {\n+                return null;\n+            }\n+        });\n+        assertNotNull(proxy);\n+    }\n \n     @Test\n     public void textSimpleProxyCreation() throws Exception", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/interceptors/factory/NormalScopeProxyFactoryTest.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/a994a0cb4de27e2cc75ba8a1ae96908aaf68af67", "parent": "https://github.com/apache/openwebbeans/commit/ca2ff7236c310125d22a35e3331f4759af0d317b", "message": "OWB-890 fix NPE if getBean() returns null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1512821 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_16", "file": [{"additions": 13, "raw_url": "https://github.com/apache/openwebbeans/raw/a994a0cb4de27e2cc75ba8a1ae96908aaf68af67/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java", "blob_url": "https://github.com/apache/openwebbeans/blob/a994a0cb4de27e2cc75ba8a1ae96908aaf68af67/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java", "sha": "ceb216d5c1cf6914884def1d2853875fb3770e0b", "changes": 14, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java?ref=a994a0cb4de27e2cc75ba8a1ae96908aaf68af67", "patch": "@@ -162,7 +162,19 @@ public void checkInjectionPoints(InjectionPoint injectionPoint)\n         Annotation[] qualifiers = new Annotation[injectionPoint.getQualifiers().size()];\n         qualifiers = injectionPoint.getQualifiers().toArray(qualifiers);\n \n-        Set<Bean<?>> beanSet = implResolveByType(type, injectionPoint.getBean().getBeanClass(), qualifiers);\n+        // OWB-890 some 3rd party InjectionPoints return null in getBean();\n+        Class<?> injectionPointClass = Object.class; // the fallback\n+        Bean injectionPointBean = injectionPoint.getBean();\n+        if (injectionPointBean != null)\n+        {\n+            injectionPointClass = injectionPointBean.getBeanClass();\n+        }\n+        if (injectionPointClass == null && type instanceof Class)\n+        {\n+            injectionPointClass = (Class) type;\n+        }\n+\n+        Set<Bean<?>> beanSet = implResolveByType(type, injectionPointClass, qualifiers);\n \n         if (beanSet.isEmpty())\n         {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/56b0a2909c45ccb36e61073f579e95029bafb831", "parent": "https://github.com/apache/openwebbeans/commit/1d97183be12cb4f65943421a39f7307bf34dbed8", "message": "avoiding NPE if extended/integrated\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1468226 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_17", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/56b0a2909c45ccb36e61073f579e95029bafb831/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DefaultInterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/56b0a2909c45ccb36e61073f579e95029bafb831/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DefaultInterceptorHandler.java", "sha": "2753abbaaf0da8478ed93b61a5f13d3493ba427b", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DefaultInterceptorHandler.java?ref=56b0a2909c45ccb36e61073f579e95029bafb831", "patch": "@@ -20,6 +20,7 @@\n \n import java.io.ObjectStreamException;\n import java.lang.reflect.Method;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n \n@@ -106,6 +107,10 @@ public Object invoke(Method method, Object[] parameters)\n         try\n         {\n             List<Interceptor<?>> methodInterceptors = interceptors.get(method);\n+            if (methodInterceptors == null)\n+            {\n+                methodInterceptors = Collections.emptyList();\n+            }\n \n             InterceptorInvocationContext<T> ctx\n                 = new InterceptorInvocationContext<T>(delegate, InterceptionType.AROUND_INVOKE, methodInterceptors, instances, method, parameters);", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/DefaultInterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/18f5b7f7fba0d182fbcd5966b4f97727c5851725", "parent": "https://github.com/apache/openwebbeans/commit/9501b1c57a4c7626e0bc5105927ac1eafa59d6a7", "message": "(OWB-736) NPE while removing dependent beans\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1421883 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_18", "file": [{"additions": 45, "raw_url": "https://github.com/apache/openwebbeans/raw/18f5b7f7fba0d182fbcd5966b4f97727c5851725/webbeans-impl/src/main/java/org/apache/webbeans/context/creational/CreationalContextImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/18f5b7f7fba0d182fbcd5966b4f97727c5851725/webbeans-impl/src/main/java/org/apache/webbeans/context/creational/CreationalContextImpl.java", "sha": "2f6721e2a80c8abf4c20178961467b32463c157f", "changes": 81, "status": "modified", "deletions": 36, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/context/creational/CreationalContextImpl.java?ref=18f5b7f7fba0d182fbcd5966b4f97727c5851725", "patch": "@@ -211,22 +211,25 @@ public Object getDependentInterceptor(Object ownerInstance, Contextual<?> interc\n \n         synchronized(this)\n         {\n-            List<DependentCreationalContext<?>> values = dependentObjects.get(ownerInstance);\n-            if(values != null && !values.isEmpty())\n+            if (dependentObjects != null)\n             {\n-                Iterator<DependentCreationalContext<?>> it = values.iterator();\n-                while(it.hasNext())\n+                List<DependentCreationalContext<?>> values = dependentObjects.get(ownerInstance);\n+                if (values != null && !values.isEmpty())\n                 {\n-                    DependentCreationalContext<?> dc = it.next();\n-                    if(dc.getDependentType().equals(DependentType.INTERCEPTOR) &&\n-                       dc.getContextual().equals(interceptor))\n+                    Iterator<DependentCreationalContext<?>> it = values.iterator();\n+                    while (it.hasNext())\n                     {\n-                        return dc.getInstance();\n+                        DependentCreationalContext<?> dc = it.next();\n+                        if (dc.getDependentType().equals(DependentType.INTERCEPTOR) &&\n+                                dc.getContextual().equals(interceptor))\n+                        {\n+                            return dc.getInstance();\n+                        }\n                     }\n-\n                 }\n             }\n         }\n+        \n         return null;\n     }\n \n@@ -246,18 +249,21 @@ public Object getDependentDecorator(Object ownerInstance, Contextual<?> decorato\n \n         synchronized(this)\n         {\n-            List<DependentCreationalContext<?>> values = dependentObjects.get(ownerInstance);\n-            if (values != null && values.size() > 0)\n+            if (dependentObjects != null)\n             {\n-                Iterator<DependentCreationalContext<?>> it = values.iterator();\n-                while (it.hasNext())\n+                List<DependentCreationalContext<?>> values = dependentObjects.get(ownerInstance);\n+                if (values != null && values.size() > 0)\n                 {\n-                    DependentCreationalContext<?> dc = it.next();\n-\n-                    if(dc.getDependentType().equals(DependentType.DECORATOR) &&\n-                       dc.getContextual().equals(decorator))\n+                    Iterator<DependentCreationalContext<?>> it = values.iterator();\n+                    while (it.hasNext())\n                     {\n-                        return dc.getInstance();\n+                        DependentCreationalContext<?> dc = it.next();\n+\n+                        if (dc.getDependentType().equals(DependentType.DECORATOR) &&\n+                                dc.getContextual().equals(decorator))\n+                        {\n+                            return dc.getInstance();\n+                        }\n                     }\n                 }\n             }\n@@ -278,32 +284,35 @@ public void removeAllDependents()\n \n         synchronized(this)\n         {\n-            Collection<List<DependentCreationalContext<?>>> values = dependentObjects.values();\n-            if(values != null)\n+            if (dependentObjects != null)\n             {\n-                for(List<DependentCreationalContext<?>> value : values)\n+                Collection<List<DependentCreationalContext<?>>> values = dependentObjects.values();\n+                if (values != null)\n                 {\n-                    // this is kind of an emergency valve...\n-                    int maxRemoval = value.size() * 3;\n-                    while(!value.isEmpty() && maxRemoval > 0)\n+                    for (List<DependentCreationalContext<?>> value : values)\n                     {\n-                        // we don't use an iterator because the destroyal might register a \n-                        // fresh PreDestroy interceptor as dependent object...\n-                        DependentCreationalContext<T> dependent = (DependentCreationalContext<T>)value.get(0);\n-                        dependent.getContextual().destroy((T)dependent.getInstance(), this);\n+                        // this is kind of an emergency valve...\n+                        int maxRemoval = value.size() * 3;\n+                        while (!value.isEmpty() && maxRemoval > 0)\n+                        {\n+                            // we don't use an iterator because the destroyal might register a \n+                            // fresh PreDestroy interceptor as dependent object...\n+                            DependentCreationalContext<T> dependent = (DependentCreationalContext<T>) value.get(0);\n+                            dependent.getContextual().destroy((T) dependent.getInstance(), this);\n                         \n-                        value.remove(0);\n-                        maxRemoval--;\n-                    }\n+                            value.remove(0);\n+                            maxRemoval--;\n+                        }\n                     \n-                    if (maxRemoval == 0)\n-                    {\n-                        throw new WebBeansException(\"infinite loop detected while destroying bean \" + contextual);\n+                        if (maxRemoval == 0)\n+                        {\n+                            throw new WebBeansException(\"infinite loop detected while destroying bean \" + contextual);\n+                        }\n                     }\n                 }\n-            }\n \n-            dependentObjects = null;\n+                dependentObjects = null;\n+            }\n         }\n \n         // the instances are managed as normal dependent instances already", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/context/creational/CreationalContextImpl.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/2ac828cc71c811f90586a0f615293647feb73ee4", "parent": "https://github.com/apache/openwebbeans/commit/ce20f477097bf590bda7c66dd82187e1f91a6d62", "message": "OWB-598 fix NPE in InjectionResolver\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1151645 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_19", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openwebbeans/raw/2ac828cc71c811f90586a0f615293647feb73ee4/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java", "blob_url": "https://github.com/apache/openwebbeans/blob/2ac828cc71c811f90586a0f615293647feb73ee4/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java", "sha": "b0ca952283d725cd2f739ea87970cf8d872f54d7", "changes": 9, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java?ref=2ac828cc71c811f90586a0f615293647feb73ee4", "patch": "@@ -237,7 +237,12 @@ public void checkInjectionPoints(InjectionPoint injectionPoint)\n             qualifiers[0] = new AnyLiteral();\n         }\n \n-        Set<Bean<?>> beanSet = implResolveByType(type, injectionPoint.getBean().getBeanClass(), qualifiers);\n+        Class injectionPointClass = null;\n+        if (injectionPoint.getBean() != null)\n+        {\n+            injectionPointClass = injectionPoint.getBean().getBeanClass();\n+        }\n+        Set<Bean<?>> beanSet = implResolveByType(type, injectionPointClass, qualifiers);\n \n         if (beanSet.isEmpty())\n         {\n@@ -718,4 +723,4 @@ private boolean isAltBeanInInjectionPointBDA(String bdaBeansXMLFilePath, Bean<?>\n \n         return result;\n     }\n-}\n\\ No newline at end of file\n+}", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/container/InjectionResolver.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/7a8b51855718eafc0601f02ceee791b81dba723b", "parent": "https://github.com/apache/openwebbeans/commit/cee7efbaa56d603ea7a5733f016a80b65bab10c5", "message": "Set default scope to avoid NPEs in EJB specific processing\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1129933 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_20", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/7a8b51855718eafc0601f02ceee791b81dba723b/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansAnnotatedTypeUtil.java", "blob_url": "https://github.com/apache/openwebbeans/blob/7a8b51855718eafc0601f02ceee791b81dba723b/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansAnnotatedTypeUtil.java", "sha": "2ea1d515393cc601c5d8e55628ee1872e20bb956", "changes": 1, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansAnnotatedTypeUtil.java?ref=7a8b51855718eafc0601f02ceee791b81dba723b", "patch": "@@ -716,6 +716,7 @@ public WebBeansAnnotatedTypeUtil(WebBeansContext webBeansContext)\n                 \n                 //Just creating temporary for getting injected fields\n                 ManagedBean<T> managedBean = new ManagedBean<T>(clazz,WebBeansType.MANAGED, webBeansContext);\n+                managedBean.setImplScopeType(new DependentScopeLiteral());\n                 managedBean.setAnnotatedType(type);\n                             \n                 AnnotatedTypeBeanCreatorImpl<T> managedBeanCreator = new AnnotatedTypeBeanCreatorImpl<T>(managedBean);            ", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansAnnotatedTypeUtil.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/ff55dfedd624cac07a3349b2f198a32ca519e388", "parent": "https://github.com/apache/openwebbeans/commit/f1224302e94c08128d1f962687ec1efd11059614", "message": "OWB-547 avoid NPE in WebContextsService\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1083717 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_21", "file": [{"additions": 23, "raw_url": "https://github.com/apache/openwebbeans/raw/ff55dfedd624cac07a3349b2f198a32ca519e388/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java", "blob_url": "https://github.com/apache/openwebbeans/blob/ff55dfedd624cac07a3349b2f198a32ca519e388/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java", "sha": "318317651d723f026a683b1682d65bcc7dc55a09", "changes": 40, "status": "modified", "deletions": 17, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java?ref=ff55dfedd624cac07a3349b2f198a32ca519e388", "patch": "@@ -103,7 +103,6 @@\n         //Dependent context is always active\n         dependentContext = new DependentContext();\n         dependentContext.setActive(true);\n-\n     }\n \n     /**\n@@ -379,20 +378,25 @@ private void destroyRequestContext(ServletRequestEvent request)\n      */\n     private void initSessionContext(HttpSession session)\n     {\n+        if (session == null)\n+        {\n+            // no session -> no SessionContext\n+            return;\n+        }\n+\n         String sessionId = session.getId();\n         //Current context\n         SessionContext currentSessionContext = sessionCtxManager.getSessionContextWithSessionId(sessionId);\n-        \n+\n         //No current context\n         if (currentSessionContext == null)\n         {\n             currentSessionContext = new SessionContext();\n             sessionCtxManager.addNewSessionContext(sessionId, currentSessionContext);\n         }\n-\n         //Activate\n         currentSessionContext.setActive(true);\n-        \n+\n         //Set thread local\n         sessionContext.set(currentSessionContext);\n     }\n@@ -404,22 +408,24 @@ private void initSessionContext(HttpSession session)\n      */\n     private void destroySessionContext(HttpSession session)\n     {\n-        //Get current session context\n-        SessionContext context = sessionContext.get();\n-\n-        //Destroy context\n-        if (context != null)\n+        if (session != null)\n         {\n-            context.destroy();\n-        }\n+            //Get current session context\n+            SessionContext context = sessionContext.get();\n \n-        //Clear thread locals\n-        sessionContext.set(null);\n-        sessionContext.remove();\n-        \n-        //Remove session from manager\n-        sessionCtxManager.destroySessionContextWithSessionId(session.getId());\n+            //Destroy context\n+            if (context != null)\n+            {\n+                context.destroy();\n+            }\n \n+            //Clear thread locals\n+            sessionContext.set(null);\n+            sessionContext.remove();\n+\n+            //Remove session from manager\n+            sessionCtxManager.destroySessionContextWithSessionId(session.getId());\n+        }\n     }\n \n     /**", "filename": "webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/341d887ad7ebd0f42c8d8af33d3b16bac1bf5ca3", "parent": "https://github.com/apache/openwebbeans/commit/94cab2c05db706c61b8e1cc331b81011fa6c9912", "message": "OWB-503 lazily resolve InterceptorUtil to prevent NPEs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1083103 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_22", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/341d887ad7ebd0f42c8d8af33d3b16bac1bf5ca3/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/341d887ad7ebd0f42c8d8af33d3b16bac1bf5ca3/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "sha": "e1b6f86ae012dd7dc10688138e20f6be7cb6c873", "changes": 4, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java?ref=341d887ad7ebd0f42c8d8af33d3b16bac1bf5ca3", "patch": "@@ -153,8 +153,6 @@\n \n     protected WebBeansContext webBeansContext;\n \n-    protected InterceptorUtil interceptorUtil;\n-\n     /**\n      * Creates a new handler.\n      * @param bean proxied bean\n@@ -163,7 +161,6 @@ protected InterceptorHandler(OwbBean<?> bean)\n     {\n         this.bean = bean;\n         this.webBeansContext = bean.getWebBeansContext();\n-        this.interceptorUtil = webBeansContext.getInterceptorUtil();\n     }\n \n     /**\n@@ -254,6 +251,7 @@ public Object invoke(Object instance, Method method, Method proceed, Object[] ar\n                             }\n         \n                             // Filter both EJB and WebBeans interceptors\n+                            InterceptorUtil interceptorUtil = webBeansContext.getInterceptorUtil();\n                             interceptorUtil.filterCommonInterceptorStackList(filteredInterceptorStack, method);\n                             interceptorUtil.filterOverridenAroundInvokeInterceptor(bean.getBeanClass(), filteredInterceptorStack);\n                             this.interceptedMethodMap.put(method, filteredInterceptorStack);", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/2ad46104dde5ff90d59d9bd84919158a9548dc8d", "parent": "https://github.com/apache/openwebbeans/commit/e1614ab189eaca5d38c90204b5a67cad7504d213", "message": "OWB-461 cleanup: fix possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1072637 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_23", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/2ad46104dde5ff90d59d9bd84919158a9548dc8d/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/2ad46104dde5ff90d59d9bd84919158a9548dc8d/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java", "sha": "b9baccbada7c6441f64be1e7e676a7b8302949e6", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java?ref=2ad46104dde5ff90d59d9bd84919158a9548dc8d", "patch": "@@ -378,6 +378,11 @@ else if (type.equals(InterceptorType.PRE_DESTROY))\n                 throw new IllegalArgumentException(\"Unsupportet InterceptorType: \" + type);\n             }\n \n+            if (method == null)\n+            {\n+                throw new IllegalArgumentException(\"Could not find intercepted Method!\");\n+            }\n+\n             if (!method.isAccessible())\n             {\n                 SecurityUtil.doPrivilegedSetAccessible(method, true);                ", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java"}, {"additions": 2, "raw_url": "https://github.com/apache/openwebbeans/raw/2ad46104dde5ff90d59d9bd84919158a9548dc8d/webbeans-web/src/main/java/org/apache/webbeans/web/context/SessionContextManager.java", "blob_url": "https://github.com/apache/openwebbeans/blob/2ad46104dde5ff90d59d9bd84919158a9548dc8d/webbeans-web/src/main/java/org/apache/webbeans/web/context/SessionContextManager.java", "sha": "260dfa4fc3beb51dd1dee54e9fde807f25aa593a", "changes": 4, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/web/context/SessionContextManager.java?ref=2ad46104dde5ff90d59d9bd84919158a9548dc8d", "patch": "@@ -98,9 +98,9 @@ public void destroyAllSessions()\n             {\n                 sessionContext.destroy();\n             }\n-        }\n-        \n+\n         //Clear map\n         sessionContexts.clear();\n+        }\n     }\n }", "filename": "webbeans-web/src/main/java/org/apache/webbeans/web/context/SessionContextManager.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/e1614ab189eaca5d38c90204b5a67cad7504d213", "parent": "https://github.com/apache/openwebbeans/commit/70430415ff2604d339183ca64f52f4844f8d57f0", "message": "OWB-461 cleanup: fix possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1072632 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_24", "file": [{"additions": 8, "raw_url": "https://github.com/apache/openwebbeans/raw/e1614ab189eaca5d38c90204b5a67cad7504d213/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/e1614ab189eaca5d38c90204b5a67cad7504d213/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java", "sha": "b09501e5c96cf9c8db9bc43167ba9e2e83d8c354", "changes": 11, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java?ref=e1614ab189eaca5d38c90204b5a67cad7504d213", "patch": "@@ -72,9 +72,10 @@\n     private Object ccKey;\n     \n     /**\n-     * Initializes the context.\n-     * \n-     * @param target target object\n+     * Initializes the invocation context.\n+     *\n+     * @param bean the Bean meta info\n+     * @param instance target object\n      * @param method method\n      * @param parameters method parameters\n      * @param datas interceptor stack\n@@ -372,6 +373,10 @@ else if (type.equals(InterceptorType.PRE_DESTROY))\n             {\n                 method = intc.getPreDestroy();\n             }\n+            else\n+            {\n+                throw new IllegalArgumentException(\"Unsupportet InterceptorType: \" + type);\n+            }\n \n             if (!method.isAccessible())\n             {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InvocationContextImpl.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/ba29689239ead99c6aad7de6e56160f0f5995874", "parent": "https://github.com/apache/openwebbeans/commit/0bd084cec9854def3ed5b2f0d2be345ad86dbd97", "message": "OWB-521 fix possible NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1066675 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_25", "file": [{"additions": 14, "raw_url": "https://github.com/apache/openwebbeans/raw/ba29689239ead99c6aad7de6e56160f0f5995874/webbeans-impl/src/main/java/org/apache/webbeans/component/ProducerMethodBean.java", "blob_url": "https://github.com/apache/openwebbeans/blob/ba29689239ead99c6aad7de6e56160f0f5995874/webbeans-impl/src/main/java/org/apache/webbeans/component/ProducerMethodBean.java", "sha": "8da1ca057a05fe9f7bbb03a96f99c8f359c94350", "changes": 22, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/component/ProducerMethodBean.java?ref=ba29689239ead99c6aad7de6e56160f0f5995874", "patch": "@@ -203,10 +203,13 @@ protected T createDefaultInstance(CreationalContext<T> creationalContext)\n             ThreadLocal<Object> injectionTargetInstance = AbstractInjectable.instanceUnderInjection;\n             if(isInjectionToAnotherBean)\n             {\n-                if(oldDependents == null && injectionTargetInstance != null)\n+                if(oldDependents == null)\n                 {\n-                    ((CreationalContextImpl)creationalContext).addDependent(injectionTargetInstance.get(),\n-                                                                            this , instance);\n+                    if (injectionTargetInstance != null && injectionTargetInstance.get() != null)\n+                    {\n+                        ((CreationalContextImpl)creationalContext).\n+                                addDependent(injectionTargetInstance.get(), this , instance);\n+                    }\n                 }\n                 else\n                 {\n@@ -226,8 +229,8 @@ protected T createDefaultInstance(CreationalContext<T> creationalContext)\n                 {\n                     for(DependentCreationalContext<Object> dependent : dependents)\n                     {\n-                        ((CreationalContextImpl)creationalContext).addDependent(instance, dependent.getContextual(),\n-                                                                                dependent.getInstance());\n+                        ((CreationalContextImpl)creationalContext).\n+                                addDependent(instance, dependent.getContextual(), dependent.getInstance());\n                     }\n                 }\n             }\n@@ -243,10 +246,13 @@ protected T createDefaultInstance(CreationalContext<T> creationalContext)\n                     {\n                         if(isInjectionToAnotherBean)\n                         {\n-                            if(oldDependents == null && injectionTargetInstance != null)\n+                            if(oldDependents == null)\n                             {\n-                                ((CreationalContextImpl)creationalContext).addDependent(injectionTargetInstance.get(),\n-                                                                                        this , instance);\n+                                if (injectionTargetInstance != null && injectionTargetInstance.get() != null)\n+                                {\n+                                    ((CreationalContextImpl)creationalContext)\n+                                            .addDependent(injectionTargetInstance.get(), this , instance);\n+                                }\n                             }\n                             else\n                             {", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/component/ProducerMethodBean.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/24745d39317b93445313635d59260624fce9c91e", "parent": "https://github.com/apache/openwebbeans/commit/c1172e8bde0b0905c741a5223b1d936a79d6c02c", "message": "[OWB-480] Avoid a couple NPEs, thanks to David Jencks\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1028230 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_26", "file": [{"additions": 6, "raw_url": "https://github.com/apache/openwebbeans/raw/24745d39317b93445313635d59260624fce9c91e/webbeans-impl/src/main/java/org/apache/webbeans/config/OpenWebBeansConfiguration.java", "blob_url": "https://github.com/apache/openwebbeans/blob/24745d39317b93445313635d59260624fce9c91e/webbeans-impl/src/main/java/org/apache/webbeans/config/OpenWebBeansConfiguration.java", "sha": "27f30a35c061999cb08658b865098dcc98ada72e", "changes": 8, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/config/OpenWebBeansConfiguration.java?ref=24745d39317b93445313635d59260624fce9c91e", "patch": "@@ -44,7 +44,7 @@\n     private final static String DEFAULT_CONFIG_PROPERTIES_NAME = \"META-INF/openwebbeans/openwebbeans.properties\";\n     \n     /**Property of application*/\n-    private Properties configProperties = new Properties();\n+    private final Properties configProperties = new Properties();\n         \n     /**Conversation periodic delay in ms.*/\n     public static final String CONVERSATION_PERIODIC_DELAY = \"org.apache.webbeans.conversation.Conversation.periodicDelay\";\n@@ -214,9 +214,13 @@ private void setPropertyFromSystemProperty(String key, String value)\n     public synchronized void parseConfiguration() throws WebBeansConfigurationException\n     {\n         Properties newConfigProperties = PropertyLoader.getProperties(DEFAULT_CONFIG_PROPERTIES_NAME);\n+        configProperties.clear();\n \n         // set the new one as perfect fit.\n-        configProperties = newConfigProperties;\n+        if(newConfigProperties != null)\n+        {\n+            configProperties.putAll(newConfigProperties);\n+        }\n     }\n     \n ", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/config/OpenWebBeansConfiguration.java"}, {"additions": 11, "raw_url": "https://github.com/apache/openwebbeans/raw/24745d39317b93445313635d59260624fce9c91e/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java", "blob_url": "https://github.com/apache/openwebbeans/blob/24745d39317b93445313635d59260624fce9c91e/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java", "sha": "63ddde32dfbddf646288b971cc93848aca09806f", "changes": 14, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java?ref=24745d39317b93445313635d59260624fce9c91e", "patch": "@@ -105,9 +105,17 @@ protected void afterStartApplication(Object startupObject) throws Exception\n         if(OpenWebBeansConfiguration.getInstance().isJspApplication())\n         {\n             logger.debug(\"Application is configured as JSP. Adding EL Resolver.\");\n-\n-            JspApplicationContext applicationCtx = JspFactory.getDefaultFactory().getJspApplicationContext((ServletContext)(startupObject));\n-            applicationCtx.addELResolver(resolver);\n+            \n+            JspFactory factory = JspFactory.getDefaultFactory();\n+            if (factory != null) \n+            {\n+                JspApplicationContext applicationCtx = factory.getJspApplicationContext((ServletContext)(startupObject));\n+                applicationCtx.addELResolver(resolver);                \n+            }            \n+            else\n+            {\n+                logger.debug(\"Default JSPFactroy instance has not found\");\n+            }\n         }\n \n         // Add BeanManager to the 'javax.enterprise.inject.spi.BeanManager' servlet context attribute", "filename": "webbeans-web/src/main/java/org/apache/webbeans/web/lifecycle/WebContainerLifecycle.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/82d296b5ec6189d1faed1484aa7da46dd762798f", "parent": "https://github.com/apache/openwebbeans/commit/80f0ebb2f78ea00297a2cedc9e993eebe0ec7f3a", "message": "[OWB-381] Fix NPE in AbstractInjectable when injected is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@950749 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_27", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java", "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java", "sha": "3f34608c3b26dd25747a9e07f48bb4b5f15310a8", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f", "patch": "@@ -129,7 +129,7 @@ else if(isEventProviderInjection(injectionPoint))\n         \n         if(dependentProducer)\n         {\n-            if(!Serializable.class.isAssignableFrom(injected.getClass()))\n+            if(injected != null && !Serializable.class.isAssignableFrom(injected.getClass()))\n             {\n                 throw new IllegalProductException(\"If a producer method or field of scope @Dependent returns an serializable object for injection \" +\n                                                         \"into an injection point \"+ injectionPoint +\" that requires a passivation capable dependency\");", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/AbstractInjectable.java"}, {"additions": 26, "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java", "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java", "sha": "b59d6d26c8a90402f5b3719bfd6929f8a943c372", "changes": 26, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f", "patch": "@@ -68,4 +68,30 @@ public void testPersonProducer()\n         \n         shutDownContainer();\n     }\n+    \n+    @Test\n+    @SuppressWarnings(\"unchecked\")\n+    public void testNullPersonProducer()\n+    {\n+        Collection<URL> beanXmls = new ArrayList<URL>();\n+        \n+        Collection<Class<?>> beanClasses = new ArrayList<Class<?>>();\n+        beanClasses.add(Person.class);\n+        beanClasses.add(PersonProducerBean.class);\n+        \n+        startContainer(beanClasses, beanXmls);      \n+        \n+        Set<Bean<?>> beans = getBeanManager().getBeans(\"nullInjectedPersonProducer\");\n+        Assert.assertNotNull(beans);        \n+        Bean<Person> bean = (Bean<Person>)beans.iterator().next();\n+        \n+        Assert.assertTrue(bean instanceof ProducerMethodBean);\n+        \n+        CreationalContext<Person> ctx = getBeanManager().createCreationalContext(bean);\n+        \n+        Object reference = getBeanManager().getReference(bean, Person.class, ctx);\n+        Assert.assertNull(reference);\n+        \n+        shutDownContainer();\n+    }\n }", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/PersonProducerTest.java"}, {"additions": 13, "raw_url": "https://github.com/apache/openwebbeans/raw/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java", "blob_url": "https://github.com/apache/openwebbeans/blob/82d296b5ec6189d1faed1484aa7da46dd762798f/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java", "sha": "af102d9550b86dab827955d3f0d15fd90c794b50", "changes": 15, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java?ref=82d296b5ec6189d1faed1484aa7da46dd762798f", "patch": "@@ -18,7 +18,7 @@\n  */\n package org.apache.webbeans.newtests.promethods.beans;\n \n-import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.context.Dependent;\n import javax.enterprise.inject.Produces;\n import javax.inject.Named;\n \n@@ -27,9 +27,20 @@\n public class PersonProducerBean\n {\n     \n-    @Produces @SessionScoped @Named(\"personProducer\")\n+    @Produces @Named(\"personProducer\")\n     public Person producer()\n     {\n         return new Person();\n     }\n+    \n+    @Produces @Dependent @Named(\"nullPersonProducer\")\n+    public Person nullProducer()\n+    {\n+        return null;\n+    }\n+    \n+    @Produces @Dependent @Named(\"nullInjectedPersonProducer\")\n+    public Person nullInjectedPersonProducer(@Named(\"nullPersonProducer\") Person p){\n+        return p;\n+    }\n }", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/promethods/beans/PersonProducerBean.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/112685239bb169a541f9e54578b998791465de1c", "parent": "https://github.com/apache/openwebbeans/commit/57e961cc9c74b648bf3db6d5603cb5d610f4324c", "message": "OWB-380 fix NPE when handling external Context implementations\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@946334 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_28", "file": [{"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/112685239bb169a541f9e54578b998791465de1c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/112685239bb169a541f9e54578b998791465de1c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "sha": "1f6b53606a56e0179a272a7a1407c1c999dbd571", "changes": 5, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java?ref=112685239bb169a541f9e54578b998791465de1c", "patch": "@@ -170,6 +170,11 @@ protected InterceptorHandler(OwbBean<?> bean)\n      */\n     public Object invoke(Object instance, Method method, Method proceed, Object[] arguments, CreationalContextImpl<?> ownerCreationalContext) throws Exception\n     {\n+        if (instance == null)\n+        {\n+            return null;\n+        }\n+        \n         //Result of invocation\n         Object result = null;\n         ", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java"}, {"additions": 28, "raw_url": "https://github.com/apache/openwebbeans/raw/112685239bb169a541f9e54578b998791465de1c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/112685239bb169a541f9e54578b998791465de1c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "sha": "91d633a32000c7813fd42e2e794db95d3b8029db", "changes": 43, "status": "modified", "deletions": 15, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java?ref=112685239bb169a541f9e54578b998791465de1c", "patch": "@@ -25,6 +25,7 @@\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.context.spi.Contextual;\n import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.UnproxyableResolutionException;\n \n import org.apache.webbeans.component.OwbBean;\n import org.apache.webbeans.context.AbstractContext;\n@@ -66,7 +67,8 @@ private void initiateBeanBag(OwbBean<Object> bean, CreationalContext<Object> cre\n                 AbstractContext owbContext = (AbstractContext)webbeansContext;\n                 owbContext.initContextualBag(bean, creationalContext);\n             }            \n-        }catch(ContextNotActiveException e)\n+        }\n+        catch(ContextNotActiveException e)\n         {\n             //Nothing\n         }\n@@ -79,13 +81,13 @@ private void initiateBeanBag(OwbBean<Object> bean, CreationalContext<Object> cre\n     public Object invoke(Object instance, Method method, Method proceed, Object[] arguments) throws Exception\n     {\n         if (method.getName().equals(\"finalize\") &&\n-            method.getParameterTypes().length == 0\n-        \t&& method.getReturnType().equals(Void.TYPE)) \n+            method.getParameterTypes().length == 0 &&\n+            method.getReturnType().equals(Void.TYPE))\n         {\n-        \t// we should NOT invoke the bean's finalize() from proxied \n-        \t// finalize() method since JVM will invoke it directly. \n-        \t// OWB-366\n-        \treturn null;\n+            // we should NOT invoke the bean's finalize() from proxied\n+            // finalize() method since JVM will invoke it directly.\n+            // OWB-366\n+            return null;\n         }\n \n         //Get instance from context\n@@ -111,7 +113,6 @@ protected Object callAroundInvokes(Method proceed, Object[] arguments, List<Inte\n     \n     /**\n      * Gets instance from context.\n-     * @param bean bean instance\n      * @return the underlying contextual instance, either cached or resolved from the context \n      */\n     protected Object getContextualInstance()\n@@ -122,18 +123,20 @@ protected Object getContextualInstance()\n         Context webbeansContext = getBeanManager().getContext(this.bean.getScope());\n         \n         //Already saved in context?\n-        webbeansInstance=webbeansContext.get(this.bean);\n+        webbeansInstance = webbeansContext.get(this.bean);\n         if (webbeansInstance != null)\n         {\n             // voila, we are finished if we found an existing contextual instance\n             return webbeansInstance;\n         }\n-        else\n+\n+        // finally, we create a new contextual instance\n+        webbeansInstance = webbeansContext.get((Contextual<Object>)this.bean, getContextualCreationalContext());\n+\n+        if (webbeansInstance == null)\n         {\n-            // finally, we create a new contextual instance\n-            webbeansInstance = webbeansContext.get((Contextual<Object>)this.bean, getContextualCreationalContext());   \n+            throw new UnproxyableResolutionException(\"Cannot find a contextual instance of bean \" + bean.toString());\n         }\n-                \n         return webbeansInstance;\n     }\n     \n@@ -158,9 +161,19 @@ protected Object getContextualInstance()\n             {\n                 creationalContext = CreationalContextFactory.getInstance().getCreationalContext(contextual);\n                 owbContext.initContextualBag((OwbBean<Object>)this.bean, creationalContext);\n-            }            \n+            }\n         }\n-                \n+\n+        // for 3rd party contexts (actually all contexts provided via portable extensions)\n+        // we don't have all the stuff of AbstractContext available\n+        // In this case we may safely simply create a fresh CreationalContext, because\n+        // if an 'old' contextual instance exists, it would have been found by the\n+        // preceding call to Context.get(Contextual) (without any CreationalContext)\n+        if(creationalContext == null)\n+        {\n+            creationalContext = CreationalContextFactory.getInstance().getCreationalContext(contextual);\n+        }\n+\n         return creationalContext;\n     }\n }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/372f9ebb4be5ba697bde28c85169bbff153769b4", "parent": "https://github.com/apache/openwebbeans/commit/c84d05d6ba12f8934b2d262c2eca61260c79b395", "message": "[OWB-354] WebContextService may throw NPE in tiered classloading environmemt\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@934189 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_29", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/372f9ebb4be5ba697bde28c85169bbff153769b4/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java", "blob_url": "https://github.com/apache/openwebbeans/blob/372f9ebb4be5ba697bde28c85169bbff153769b4/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java", "sha": "abfe2051a21bf342a659d57429c65a956621c429", "changes": 12, "status": "modified", "deletions": 11, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java?ref=372f9ebb4be5ba697bde28c85169bbff153769b4", "patch": "@@ -116,24 +116,14 @@ public void destroy(Object destroyObject)\n         endContext(Singleton.class, destroyObject);\n         \n         requestContext.remove();\n-        requestContext = null;        \n         dependentContext.remove();\n-        dependentContext = null;\n         sessionContext.remove();\n-        sessionContext = null;\n         conversationContext.remove();\n-        conversationContext = null;\n         applicationContext.remove();\n-        applicationContext = null;\n         singletonContext.remove();\n-        singletonContext = null;\n-        \n+\n         currentApplicationContexts.clear();\n-        currentApplicationContexts = null;\n         currentSingletonContexts.clear();\n-        currentSingletonContexts = null;\n-        sessionCtxManager = null;\n-        conversationManager = null;\n     }    \n     \n     ", "filename": "webbeans-web/src/main/java/org/apache/webbeans/web/context/WebContextsService.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/5ef38646e8dea29e9d803e0f6bfdddf70206820c", "parent": "https://github.com/apache/openwebbeans/commit/1f629684687872526b50d1ba7ba3fff85991c542", "message": "OWB-329 fix NPE with CreationalContext which is not available anymore\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@926527 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_30", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/5ef38646e8dea29e9d803e0f6bfdddf70206820c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/5ef38646e8dea29e9d803e0f6bfdddf70206820c/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "sha": "210d7d13dcc38d0e07d5403a165c4a1eaa6269c7", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java?ref=5ef38646e8dea29e9d803e0f6bfdddf70206820c", "patch": "@@ -97,7 +97,10 @@ protected Object getContextualInstance(OwbBean<Object> bean)\n         if((webbeansInstance=webbeansContext.get(bean)) != null)\n         {\n             CreationalContext<Object> creational = ((AbstractContext)webbeansContext).getCreationalContext(bean);\n-            this.creationalContext = creational;\n+            if (creational != null)\n+            {\n+                this.creationalContext = creational;\n+            }\n         }\n \n         //create a new instance", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/bdc16cfb2df76fa38d452868d2ef811b3a720a9a", "parent": "https://github.com/apache/openwebbeans/commit/be05e56c4ae83f8b76cbce008cd8fa3d29545eb0", "message": "OWB-292 fix NPE in creationalContext handling of InterceptorHandler and NormalScopedBeanInterceptorHandler\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@911875 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_31", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/decorator/WebBeansDecoratorConfig.java", "blob_url": "https://github.com/apache/openwebbeans/blob/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/decorator/WebBeansDecoratorConfig.java", "sha": "f6b77eb71c7b33b30ae813d33c5734d88a111e87", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/decorator/WebBeansDecoratorConfig.java?ref=bdc16cfb2df76fa38d452868d2ef811b3a720a9a", "patch": "@@ -91,7 +91,10 @@ public static void configureDecarotors(AbstractInjectionTargetBean<?> component)\n             decorator.setDelegate(decoratorInstance, delegate);\n             decoratorStack.add(decoratorInstance);\n             \n-            ownerCreationalContext.addDependent(decorator, decoratorInstance, creationalContext);\n+            if (ownerCreationalContext != null)\n+            {\n+            \townerCreationalContext.addDependent(decorator, decoratorInstance, creationalContext);\n+            }\n         }\n \n         return decoratorStack;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/decorator/WebBeansDecoratorConfig.java"}, {"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java", "sha": "24d8c8c9ca275be4798dddeb5c9f7026de923615", "changes": 8, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java?ref=bdc16cfb2df76fa38d452868d2ef811b3a720a9a", "patch": "@@ -42,7 +42,6 @@\n import org.apache.webbeans.decorator.WebBeansDecorator;\n import org.apache.webbeans.decorator.WebBeansDecoratorConfig;\n import org.apache.webbeans.decorator.WebBeansDecoratorInterceptor;\n-import org.apache.webbeans.exception.WebBeansConfigurationException;\n import org.apache.webbeans.exception.WebBeansException;\n import org.apache.webbeans.intercept.ejb.EJBInterceptorConfig;\n import org.apache.webbeans.intercept.webbeans.WebBeansInterceptor;\n@@ -335,11 +334,14 @@ public static void injectInterceptorFields(final List<InterceptorData> stack, Cr\n                         //Setting interceptor proxy instance\n                         intData.setInterceptorInstance(interceptorProxy);\n                         \n-                        ownerCreationalContext.addDependent(interceptor, interceptorProxy, creationalContext);\n+                        if (ownerCreationalContext != null)\n+                        {\n+                        \townerCreationalContext.addDependent(interceptor, interceptorProxy, creationalContext);\n+                        }\n                     }\n \n                 }\n-                catch (WebBeansConfigurationException e1)\n+                catch (WebBeansException e1)\n                 {\n                     throw e1;\n                 }", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/InterceptorHandler.java"}, {"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/bdc16cfb2df76fa38d452868d2ef811b3a720a9a/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java", "sha": "d27618cc409be979236ea20a9d49d222092c06ed", "changes": 6, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java?ref=bdc16cfb2df76fa38d452868d2ef811b3a720a9a", "patch": "@@ -54,9 +54,11 @@ public Object invoke(Object instance, Method method, Method proceed, Object[] ar\n         Context webbeansContext = beanManager.getContext(bean.getScope());\n         Object webbeansInstance = webbeansContext.get(this.bean);\n \n+        CreationalContext<Object> cc = null;\n+\n         if (webbeansInstance == null)\n         {\n-            CreationalContext<Object> cc = creationalContxt.get();\n+            cc = creationalContxt.get();\n \n             if (cc == null)\n             {\n@@ -83,7 +85,7 @@ public Object invoke(Object instance, Method method, Method proceed, Object[] ar\n         }\n \n \n-        return super.invoke(webbeansInstance, method, proceed, arguments, (CreationalContextImpl<?>)creationalContxt.get());\n+        return super.invoke(webbeansInstance, method, proceed, arguments, (CreationalContextImpl<?>) cc);\n     }\n     \n     protected <T> Object callAroundInvokes(Method proceed, Object[] arguments, List<InterceptorData> stack) throws Exception", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/NormalScopedBeanInterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/a9bea2bf953ccdf980c3fad3d446646d29c09a82", "parent": "https://github.com/apache/openwebbeans/commit/020e0c4028b21bce5e1582f8a7a459e6fc79dd3f", "message": "OWB-269 fix NPE when using WebApplicationLifeCycle in Test\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@907609 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_32", "file": [{"additions": 39, "raw_url": "https://github.com/apache/openwebbeans/raw/a9bea2bf953ccdf980c3fad3d446646d29c09a82/webbeans-impl/src/main/java/org/apache/webbeans/lifecycle/WebApplicationLifeCycle.java", "blob_url": "https://github.com/apache/openwebbeans/blob/a9bea2bf953ccdf980c3fad3d446646d29c09a82/webbeans-impl/src/main/java/org/apache/webbeans/lifecycle/WebApplicationLifeCycle.java", "sha": "2f44c19755590bb4656dc382de8e32b3b6b5b686", "changes": 69, "status": "modified", "deletions": 30, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/lifecycle/WebApplicationLifeCycle.java?ref=a9bea2bf953ccdf980c3fad3d446646d29c09a82", "patch": "@@ -157,26 +157,32 @@ public void sessionEnded(HttpSessionEvent event)\n \n     public void applicationStarted(Object startupObject)\n     {\n-        if(startupObject != null && !(ServletContextEvent.class.isAssignableFrom(startupObject.getClass())))\n+        ServletContext servletContext = null;\n+        if(startupObject != null)\n         {\n-            throw new WebBeansException(logger.getTokenString(OWBLogConst.EXCEPT_0001));\n+            if(startupObject instanceof ServletContextEvent)\n+            {\n+                servletContext = ((ServletContextEvent) startupObject).getServletContext();\n+            }\n+            else\n+            {\n+                throw new WebBeansException(logger.getTokenString(OWBLogConst.EXCEPT_0001));\n+            }\n         }\n         \n-        ServletContextEvent event = (ServletContextEvent)startupObject; \n-        \n         // Initalize Application Context\n         logger.info(OWBLogConst.INFO_0002);\n         \n         long begin = System.currentTimeMillis();\n \n         //Application Context initialization\n-        ContextFactory.initApplicationContext(event.getServletContext());\n+        ContextFactory.initApplicationContext(servletContext);\n         \n         //Singleton context\n-        ContextFactory.initSingletonContext(event.getServletContext());\n+        ContextFactory.initSingletonContext(servletContext);\n \n         this.discovery = ServiceLoader.getService(ScannerService.class);\n-        this.discovery.init(event.getServletContext());\n+        this.discovery.init(servletContext);\n \n         // load all optional plugins\n         PluginLoader.getInstance().startUp();\n@@ -200,9 +206,7 @@ public void applicationStarted(Object startupObject)\n         {\n             logger.debug(OWBLogConst.DEBUG_0001);\n             \n-            ServletContext context = event.getServletContext();\n-\n-            JspApplicationContext applicationCtx = JspFactory.getDefaultFactory().getJspApplicationContext(context);\n+            JspApplicationContext applicationCtx = JspFactory.getDefaultFactory().getJspApplicationContext(servletContext);\n             applicationCtx.addELResolver(new WebBeansELResolver());            \n         }\n         \n@@ -213,23 +217,28 @@ public void applicationStarted(Object startupObject)\n \n     public void applicationEnded(Object endObject)\n     {\n-        logger.info(OWBLogConst.INFO_0006);\n-        \n-        if(endObject != null && !(ServletContextEvent.class.isAssignableFrom(endObject.getClass())))\n+        ServletContext servletContext = null;\n+        if(endObject != null)\n         {\n-            throw new WebBeansException(logger.getTokenString(OWBLogConst.EXCEPT_0002));\n+            if(endObject instanceof ServletContextEvent)\n+            {\n+                servletContext = ((ServletContextEvent) endObject).getServletContext();\n+            }\n+            else\n+            {\n+                throw new WebBeansException(logger.getTokenString(OWBLogConst.EXCEPT_0002));\n+            }\n         }\n-        \n-        ServletContextEvent event = (ServletContextEvent)endObject;\n-        \n+        logger.info(OWBLogConst.INFO_0006);\n+\n         //Fire shut down\n         this.rootManager.fireEvent(new BeforeShutdownImpl(), new Annotation[0]);\n                 \n         service.shutdownNow();\n \n-        ContextFactory.destroyApplicationContext(event.getServletContext());\n+        ContextFactory.destroyApplicationContext(servletContext);\n         \n-        ContextFactory.destroySingletonContext(event.getServletContext());\n+        ContextFactory.destroySingletonContext(servletContext);\n \n         jndiService.unbind(WebBeansConstants.WEB_BEANS_MANAGER_JNDI_NAME);\n \n@@ -242,31 +251,31 @@ public void applicationEnded(Object endObject)\n         //Clear singleton list\n         WebBeansFinder.clearInstances();\n                 \n-        logger.info(OWBLogConst.INFO_0008, new Object[]{event.getServletContext().getContextPath()});        \n+        logger.info(OWBLogConst.INFO_0008, new Object[]{servletContext != null ? servletContext.getContextPath() : null});\n     }\n     \n     public void sessionPassivated(HttpSessionEvent event)\n     {\n-    \tlogger.info(OWBLogConst.INFO_0009, new Object[]{event.getSession().getId()});\n+        logger.info(OWBLogConst.INFO_0009, new Object[]{event.getSession().getId()});\n     }\n-    \n+\n     public void sessionActivated(HttpSessionEvent event)\n     {\n-    \tlogger.info(OWBLogConst.INFO_0010, new Object[]{event.getSession().getId()});\n+        logger.info(OWBLogConst.INFO_0010, new Object[]{event.getSession().getId()});\n     }\n-    \n+\n     private static class ConversationCleaner implements Runnable\n     {\n-    \tpublic ConversationCleaner()\n-    \t{\n-    \t\t\n-    \t}\n-    \t\n+        public ConversationCleaner()\n+        {\n+\n+        }\n+\n         public void run()\n         {\n             ConversationManager.getInstance().destroyWithRespectToTimout();\n \n-        }    \t\n+        }\n     }\n \n     @Override", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/lifecycle/WebApplicationLifeCycle.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/1ecfcb810c7eee0b573b3e084d450c041db62811", "parent": "https://github.com/apache/openwebbeans/commit/6bb4299c4ba0ab364b9f7661e7c7517362c9ba46", "message": "initialize extensions with an empty map to prevent NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openwebbeans/trunk@802610 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_33", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/1ecfcb810c7eee0b573b3e084d450c041db62811/webbeans-impl/src/main/java/org/apache/webbeans/portable/events/ExtensionLoader.java", "blob_url": "https://github.com/apache/openwebbeans/blob/1ecfcb810c7eee0b573b3e084d450c041db62811/webbeans-impl/src/main/java/org/apache/webbeans/portable/events/ExtensionLoader.java", "sha": "67129755b4837db3ea31a6eed6528c2b4864d538", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/portable/events/ExtensionLoader.java?ref=1ecfcb810c7eee0b573b3e084d450c041db62811", "patch": "@@ -38,7 +38,7 @@\n public class ExtensionLoader\n {\n     /**Map of extensions*/\n-    private Map<Bean<?>, Object> extensions = null;\n+    private Map<Bean<?>, Object> extensions = Collections.emptyMap();\n     \n     /**\n      * Creates a new loader instance.", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/portable/events/ExtensionLoader.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/2c22a5f98916d9a527b9955e7208dcf96e6f5303", "parent": "https://github.com/apache/openwebbeans/commit/44ceb765ee09b2b509efbf7458f4db20e0ed1f48", "message": "OWB-57 fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openwebbeans/trunk@736834 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_34", "file": [{"additions": 3, "raw_url": "https://github.com/apache/openwebbeans/raw/2c22a5f98916d9a527b9955e7208dcf96e6f5303/webbeans-impl/src/main/java/org/apache/webbeans/event/TransactionalNotifier.java", "blob_url": "https://github.com/apache/openwebbeans/blob/2c22a5f98916d9a527b9955e7208dcf96e6f5303/webbeans-impl/src/main/java/org/apache/webbeans/event/TransactionalNotifier.java", "sha": "b915fcd7d6903df68f990c02aa0b3e8675170ce6", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/event/TransactionalNotifier.java?ref=2c22a5f98916d9a527b9955e7208dcf96e6f5303", "patch": "@@ -103,7 +103,7 @@ public int hashCode()\n     {\n         final int prime = 31;\n         int result = 1;\n-        result = prime * result + ((event.getClass() == null) ? 0 : event.getClass().hashCode());\n+        result = prime * result + ((event == null) ? 0 : event.getClass().hashCode());\n         return result;\n     }\n \n@@ -121,9 +121,9 @@ public boolean equals(Object obj)\n         if (getClass() != obj.getClass())\n             return false;\n         final TransactionalNotifier other = (TransactionalNotifier) obj;\n-        if (event.getClass() == null)\n+        if (event == null)\n         {\n-            if (other.event.getClass() != null)\n+            if (other.event != null)\n                 return false;\n         }\n         else if (!event.getClass().equals(other.event.getClass()))", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/event/TransactionalNotifier.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/8cf77573f002e37f98cb4eff247cd826c3665b9d", "parent": "https://github.com/apache/openwebbeans/commit/c19d2cd3d366d347ea9fa289e2894b73de979dbb", "message": "avoid NPE in Instance + removing constraint on Event types since it was too restrictive\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1606580 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_35", "file": [{"additions": 0, "raw_url": "https://github.com/apache/openwebbeans/raw/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-impl/src/main/java/org/apache/webbeans/event/EventMetadataImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-impl/src/main/java/org/apache/webbeans/event/EventMetadataImpl.java", "sha": "71ec255fa3de89227458d4f3d421ac02c5c47f27", "changes": 5, "status": "modified", "deletions": 5, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/event/EventMetadataImpl.java?ref=8cf77573f002e37f98cb4eff247cd826c3665b9d", "patch": "@@ -34,7 +34,6 @@\n import org.apache.webbeans.annotation.AnyLiteral;\n import org.apache.webbeans.config.WebBeansContext;\n import org.apache.webbeans.util.ArrayUtil;\n-import org.apache.webbeans.util.GenericsUtil;\n \n public class EventMetadataImpl implements EventMetadata, Serializable\n {\n@@ -47,10 +46,6 @@\n     \n     public EventMetadataImpl(Type type, InjectionPoint injectionPoint, Annotation[] qualifiers, WebBeansContext context)\n     {\n-        if (GenericsUtil.containsTypeVariable(type))\n-        {\n-            throw new IllegalArgumentException(\"event type may not contain type variable: \" + type);\n-        }\n         context.getAnnotationManager().checkQualifierConditions(qualifiers);\n         this.type = type;\n         this.injectionPoint = injectionPoint;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/event/EventMetadataImpl.java"}, {"additions": 5, "raw_url": "https://github.com/apache/openwebbeans/raw/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java", "blob_url": "https://github.com/apache/openwebbeans/blob/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java", "sha": "030c6afe56c50936db680a70c7164992802e5c53", "changes": 18, "status": "modified", "deletions": 13, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java?ref=8cf77573f002e37f98cb4eff247cd826c3665b9d", "patch": "@@ -25,14 +25,13 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Type;\n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.HashSet;\n+import java.util.IdentityHashMap;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n \n-import javax.enterprise.context.Dependent;\n import javax.enterprise.context.spi.AlterableContext;\n import javax.enterprise.context.spi.Context;\n import javax.enterprise.context.spi.CreationalContext;\n@@ -124,16 +123,8 @@ public T get()\n             InjectionExceptionUtil.throwUnsatisfiedResolutionException(ClassUtil.getClazz(injectionClazz), injectionPoint, anns);\n         }\n \n-        // since Instance<T> is Dependent, we we gonna use the parent CreationalContext by default\n-        CreationalContextImpl<?> creationalContext = beanManager.createCreationalContext(parentCreationalContext.getContextual());\n+        CreationalContextImpl<?> creationalContext = beanManager.createCreationalContext(bean);\n \n-        boolean isDependentBean = WebBeansUtil.isDependent(bean);\n-\n-        if (!isDependentBean)\n-        {\n-            // but for all NormalScoped beans we will need to create a fresh CreationalContext\n-            creationalContext = beanManager.createCreationalContext(bean);\n-        }\n         if (!(creationalContext instanceof CreationalContextImpl))\n         {\n             creationalContext = webBeansContext.getCreationalContextFactory().wrappedCreationalContext(creationalContext, bean);\n@@ -145,10 +136,10 @@ public T get()\n             final T reference = (T) beanManager.getReference(bean, injectionClazz, creationalContext);\n             if (creationalContexts == null)\n             {\n-                creationalContexts = new HashMap<Object, CreationalContextImpl<?>>();\n+                creationalContexts = new IdentityHashMap<Object, CreationalContextImpl<?>>();\n             }\n             creationalContexts.put(reference, creationalContext);\n-            if (Dependent.class == bean.getScope())\n+            if (WebBeansUtil.isDependent(bean))\n             {\n                 parentCreationalContext.addDependent(bean, reference);\n             }\n@@ -348,6 +339,7 @@ private void readObject(java.io.ObjectInputStream in) throws IOException, ClassN\n         injectionClazz = (Type)inputStream.readObject();\n         qualifierAnnotations = (Set<Annotation>)inputStream.readObject();\n         injectionPoint = (InjectionPoint) inputStream.readObject();\n+        parentCreationalContext = webBeansContext.getBeanManagerImpl().createCreationalContext(null); // TODO: check what we can do\n     }\n     \n     public String toString()", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/inject/instance/InstanceImpl.java"}, {"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-tck/testng-dev.xml", "blob_url": "https://github.com/apache/openwebbeans/blob/8cf77573f002e37f98cb4eff247cd826c3665b9d/webbeans-tck/testng-dev.xml", "sha": "9c52b726d6a60cd38c432c38b2c1c08fc81b0495", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-tck/testng-dev.xml?ref=8cf77573f002e37f98cb4eff247cd826c3665b9d", "patch": "@@ -19,7 +19,7 @@\n   <test name=\"JSR-346 TCK\">\n     <classes>\n       <class\n-          name=\"org.jboss.cdi.tck.tests.lookup.dynamic.destroy.dependent.DestroyingDependentInstanceTest\" />\n+          name=\"org.jboss.cdi.tck.tests.lookup.dynamic.builtin.BuiltinInstanceTest\" />\n     </classes>\n     <groups>\n       <run>", "filename": "webbeans-tck/testng-dev.xml"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/290225643db17bdddda757d45c8a8db54f3361b9", "parent": "https://github.com/apache/openwebbeans/commit/836161c058f9fcfd69ae20363869d3e202f11fb1", "message": "OWB-920 Prevent NPE in WebBeansConfigurationListener.ensureRequestScope() when null context returned from the ContextsService\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1550838 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_36", "file": [{"additions": 4, "raw_url": "https://github.com/apache/openwebbeans/raw/290225643db17bdddda757d45c8a8db54f3361b9/webbeans-web/src/main/java/org/apache/webbeans/servlet/WebBeansConfigurationListener.java", "blob_url": "https://github.com/apache/openwebbeans/blob/290225643db17bdddda757d45c8a8db54f3361b9/webbeans-web/src/main/java/org/apache/webbeans/servlet/WebBeansConfigurationListener.java", "sha": "70873cfb9204a87fb68953d0144cd9ad4002d267", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-web/src/main/java/org/apache/webbeans/servlet/WebBeansConfigurationListener.java?ref=290225643db17bdddda757d45c8a8db54f3361b9", "patch": "@@ -31,6 +31,7 @@\n import javax.enterprise.context.ConversationScoped;\n import javax.enterprise.context.RequestScoped;\n import javax.enterprise.context.SessionScoped;\n+import javax.enterprise.context.spi.Context;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n import javax.servlet.ServletRequestEvent;\n@@ -211,7 +212,9 @@ public void sessionDestroyed(HttpSessionEvent event)\n \n     private boolean ensureRequestScope()\n     {\n-        if (!this.lifeCycle.getContextService().getCurrentContext(RequestScoped.class).isActive())\n+        Context context = this.lifeCycle.getContextService().getCurrentContext(RequestScoped.class);\n+        \n+        if (context == null || !context.isActive())\n         {\n             requestInitialized(null);\n             return true;", "filename": "webbeans-web/src/main/java/org/apache/webbeans/servlet/WebBeansConfigurationListener.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/3ea9c912503d95958063edc3b770c576cb5d2e67", "parent": "https://github.com/apache/openwebbeans/commit/9e7f6362932402ec6a340adbc606c7217ed4dd46", "message": "[OWB-450] Prevent NPE in DependentScopedBeanInterceptorHandler when null creational context is used by EE components\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@996631 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_37", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/3ea9c912503d95958063edc3b770c576cb5d2e67/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DependentScopedBeanInterceptorHandler.java", "blob_url": "https://github.com/apache/openwebbeans/blob/3ea9c912503d95958063edc3b770c576cb5d2e67/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DependentScopedBeanInterceptorHandler.java", "sha": "c905a507cb2153b5a8cf3a2d6468c357ca6f0702", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/intercept/DependentScopedBeanInterceptorHandler.java?ref=3ea9c912503d95958063edc3b770c576cb5d2e67", "patch": "@@ -58,7 +58,7 @@ public DependentScopedBeanInterceptorHandler(OwbBean<?> bean, Object instance, C\n         {\n             //If this creational context is owned by this DependentBean, add it\n             CreationalContextImpl<?> ccImpl = (CreationalContextImpl<?>)creationalContext;\n-            if(ccImpl.getBean().equals(bean))\n+            if(ccImpl.getBean() != null && ccImpl.getBean().equals(bean))\n             {\n                 //Owner of the dependent is itself\n                 ccImpl.addDependent(instance, bean, instance);", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/intercept/DependentScopedBeanInterceptorHandler.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/592af6fca8e6d707942b38de993ceb684c2c5d1e", "parent": "https://github.com/apache/openwebbeans/commit/d53f681bcec264b0547fad8462e5f6c8d60b66c9", "message": "OWB-339 Injecting Non-Contextual Beans Causes NPE in WebBeansUtil\n\nthanks to James Carman!\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@928358 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_38", "file": [{"additions": 7, "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java", "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java", "sha": "67600401943b1a48c0ca75b67d0a1999358fb371", "changes": 15, "status": "modified", "deletions": 8, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e", "patch": "@@ -2640,16 +2640,15 @@ public static Object getObjectFromCreationalContext(Bean<?> bean,CreationalConte\n             throw new IllegalArgumentException(\"Creational context is null\");\n         }\n         \n-        if(cc.getBean().equals(bean))\n+        final Contextual<?> existing = cc.getBean();\n+        if(existing != null && existing.equals(bean))\n         {\n-            return cc.getProxyInstance();   \n-        }            \n-        else\n+            return cc.getProxyInstance();\n+        }\n+\n+        if(cc.getOwnerCreational() != null)\n         {\n-            if(cc.getOwnerCreational() != null)\n-            {\n-                return getObjectFromCreationalContext(bean, cc.getOwnerCreational());   \n-            }\n+            return getObjectFromCreationalContext(bean, cc.getOwnerCreational());\n         }\n         \n         return null;", "filename": "webbeans-impl/src/main/java/org/apache/webbeans/util/WebBeansUtil.java"}, {"additions": 26, "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java", "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java", "sha": "7b1ceb47e6077943bb18ea23ecfef56c359ac5f1", "changes": 26, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e", "patch": "@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import javax.enterprise.context.ApplicationScoped;\n+\n+@ApplicationScoped\n+public class ContextualBean\n+{\n+}", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/ContextualBean.java"}, {"additions": 67, "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java", "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java", "sha": "12a00c3329c726fba2dc2e2bdd69918c3e0bb8b7", "changes": 67, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e", "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import junit.framework.Assert;\n+import org.apache.webbeans.container.BeanManagerImpl;\n+import org.apache.webbeans.newtests.AbstractUnitTest;\n+import org.junit.Test;\n+\n+import javax.enterprise.context.spi.CreationalContext;\n+import javax.enterprise.inject.spi.AnnotatedType;\n+import javax.enterprise.inject.spi.BeanManager;\n+import javax.enterprise.inject.spi.InjectionTarget;\n+import java.net.URL;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+\n+public class InjectNonContextualTest extends AbstractUnitTest\n+{\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> void inject(T instance)\n+    {\n+        BeanManager mgr = BeanManagerImpl.getManager();\n+        AnnotatedType<T> annotatedType = mgr.createAnnotatedType((Class<T>) instance.getClass());\n+        InjectionTarget<T> injectionTarget = mgr.createInjectionTarget(annotatedType);\n+        CreationalContext<T> context = mgr.createCreationalContext(null);\n+        injectionTarget.inject(instance, context);\n+    }\n+\n+\n+    @Test\n+    public void testInjectingNonContextualBean()\n+    {\n+        Collection<URL> beanXmls = new ArrayList<URL>();\n+\n+        Collection<Class<?>> beanClasses = new ArrayList<Class<?>>();\n+        beanClasses.add(ContextualBean.class);\n+        startContainer(beanClasses, beanXmls);\n+        try\n+        {\n+            final NonContextualBean bean = new NonContextualBean();\n+            inject(bean);\n+            Assert.assertNotNull(bean.getContextual());\n+        }\n+        finally\n+        {\n+            shutDownContainer();\n+        }\n+    }\n+\n+}", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/InjectNonContextualTest.java"}, {"additions": 44, "raw_url": "https://github.com/apache/openwebbeans/raw/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java", "blob_url": "https://github.com/apache/openwebbeans/blob/592af6fca8e6d707942b38de993ceb684c2c5d1e/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java", "sha": "499f0cb6c47949e708a78a0b4fe3464b15cd1eab", "changes": 44, "status": "added", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java?ref=592af6fca8e6d707942b38de993ceb684c2c5d1e", "patch": "@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.webbeans.newtests.injection.noncontextual;\n+\n+import javax.inject.Inject;\n+\n+public class NonContextualBean\n+{\n+//**********************************************************************************************************************\n+// Fields\n+//**********************************************************************************************************************\n+\n+    @Inject private ContextualBean contextual;\n+\n+//**********************************************************************************************************************\n+// Getter/Setter Methods\n+//**********************************************************************************************************************\n+\n+    public ContextualBean getContextual()\n+    {\n+        return contextual;\n+    }\n+\n+    public void setContextual(ContextualBean contextual)\n+    {\n+        this.contextual = contextual;\n+    }\n+}", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/newtests/injection/noncontextual/NonContextualBean.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4", "parent": "https://github.com/apache/openwebbeans/commit/77278f0d04eb583fde565e031c622d2e3e862c5b", "message": "OWB-169 NPE in PrimitiveProducerTest fixed by startUp() the PluginLoader\n\nThe PluginLoader has to be initialised before we can use them. I moved the\nstartUp from the TestContext#init() function to it's constructor to make sure\nthis will always be called.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/openwebbeans/trunk@881060 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_39", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java", "blob_url": "https://github.com/apache/openwebbeans/blob/52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java", "sha": "d40c0e46d57e9dec2b5ac3070deb72ba5cf823c6", "changes": 3, "status": "modified", "deletions": 2, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java?ref=52fae3352f62aa0ae632ece1e7bfbb6f01ea88a4", "patch": "@@ -117,6 +117,7 @@ protected TestContext(String clazzName)\n         TestContext.testContexts.add(this);\n         this.manager = new MockManager();\n         this.xmlConfigurator = new WebBeansXMLConfigurator();\n+        PluginLoader.getInstance().startUp();            \n     }\n     \n \n@@ -134,8 +135,6 @@ public void init()\n         initDecorators();\n         initStereoTypes();\n         initDependentContext();            \n-\n-        PluginLoader.getInstance().startUp();            \n     }\n \n     /**", "filename": "webbeans-impl/src/test/java/org/apache/webbeans/common/TestContext.java"}], "repo": "openwebbeans"}, {"commit": "https://github.com/apache/openwebbeans/commit/01f4b1947c120fef76444ea3e1e7a5dd65f2b156", "parent": "https://github.com/apache/openwebbeans/commit/6882f5175497d4547a5177e84004fe3915543440", "message": "OWB-422 Support needed for PrePassivate, PostActivate, and AroundTimeout via EJBInterceptor.\nhttps://issues.apache.org/jira/browse/OWB-422\n\nThis change was checked in to fix a NPE during deserialization due to the logger being null  like so ...\n\n[10/11/10 11:22:51:093 EDT] 00000010 StatefulSessi 1   atActivation: exception raised\n    java.lang.NullPointerException\n\tat org.apache.webbeans.ejb.common.interceptor.OpenWebBeansEjbInterceptor.readObject(OpenWebBeansEjbInterceptor.java:654)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:48)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:25)\n\tat java.lang.reflect.Method.invoke(Method.java:600)\n\tat java.io.ObjectStreamClass.invokeReadObject(ObjectStreamClass.java:1033)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1852)\n\tat java.io.ObjectInputStream.readOrdinaryObject(ObjectInputStream.java:1756)\n\tat java.io.ObjectInputStream.readObject0(ObjectInputStream.java:1332)\n\tat java.io.ObjectInputStream.defaultReadFields(ObjectInputStream.java:1950)\n\tat java.io.ObjectInputStream.readSerialData(ObjectInputStream.java:1874)\n\n\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/openwebbeans/trunk@1021397 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "openwebbeans_40", "file": [{"additions": 1, "raw_url": "https://github.com/apache/openwebbeans/raw/01f4b1947c120fef76444ea3e1e7a5dd65f2b156/webbeans-ejb/src/main/java/org/apache/webbeans/ejb/common/interceptor/OpenWebBeansEjbInterceptor.java", "blob_url": "https://github.com/apache/openwebbeans/blob/01f4b1947c120fef76444ea3e1e7a5dd65f2b156/webbeans-ejb/src/main/java/org/apache/webbeans/ejb/common/interceptor/OpenWebBeansEjbInterceptor.java", "sha": "af66f1dddb26b7c7c5aac5ab539ed6bd46694f55", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/openwebbeans/contents/webbeans-ejb/src/main/java/org/apache/webbeans/ejb/common/interceptor/OpenWebBeansEjbInterceptor.java?ref=01f4b1947c120fef76444ea3e1e7a5dd65f2b156", "patch": "@@ -84,7 +84,7 @@\n     private static final long serialVersionUID = -4317127341083031217L;\n \n     //Logger instance\n-    private final WebBeansLogger logger = WebBeansLogger.getLogger(OpenWebBeansEjbInterceptor.class);\n+    private static final WebBeansLogger logger = WebBeansLogger.getLogger(OpenWebBeansEjbInterceptor.class);\n     \n     /**Thread local for calling bean*/\n     private static transient ThreadLocal<BaseEjbBean<?>> threadLocal = new ThreadLocal<BaseEjbBean<?>>();", "filename": "webbeans-ejb/src/main/java/org/apache/webbeans/ejb/common/interceptor/OpenWebBeansEjbInterceptor.java"}], "repo": "openwebbeans"}]
