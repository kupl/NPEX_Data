{
    "stanbol_19ee985": {
        "bug_id": "stanbol_19ee985",
        "commit": "https://github.com/apache/stanbol/commit/19ee9852de93cd24523219d35912662bd6fbf2e3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/stanbol/blob/19ee9852de93cd24523219d35912662bd6fbf2e3/entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java?ref=19ee9852de93cd24523219d35912662bd6fbf2e3",
                "deletions": 4,
                "filename": "entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java",
                "patch": "@@ -354,15 +354,12 @@ public final Representation update(Representation representation) throws Illegal\n         return added;\n     }\n     protected final Representation store(Representation representation,boolean allowCreate,boolean canNotCreateIsError) throws IllegalArgumentException, YardException{\n-        log.info(\"store Representation \"+representation.getId());\n-//        log.info(\"  > entityhub size: \"+graph.size());\n         if(representation == null) {\n             return null;\n         }\n+        log.info(\"store Representation \" + representation.getId());\n         if(isRepresentation(representation.getId())){\n-//            log.info(\"  > remove previous version\");\n             remove(representation.getId());\n-//            log.info(\"  > entityhub size: \"+graph.size());\n         } else if(!allowCreate){\n             if(canNotCreateIsError) {\n                 throw new IllegalArgumentException(\"Parsed Representation \"+representation.getId()+\" in not managed by this Yard \"+getName()+\"(id=\"+getId()+\")\");",
                "raw_url": "https://github.com/apache/stanbol/raw/19ee9852de93cd24523219d35912662bd6fbf2e3/entityhub/yard/clerezza/src/main/java/org/apache/stanbol/entityhub/yard/clerezza/impl/ClerezzaYard.java",
                "sha": "517ea4b5953f05189cbc7ab571e1451b60a2a29c",
                "status": "modified"
            }
        ],
        "message": "fixed potential NPE in ClerezzaYard\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/stanbol/trunk@1102376 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/stanbol/commit/05c58f6db2d856f0ce5d8c8ea7591c3db4da630d",
        "repo": "stanbol",
        "unit_tests": [
            "ClerezzaYardTest.java"
        ]
    },
    "stanbol_250d599": {
        "bug_id": "stanbol_250d599",
        "commit": "https://github.com/apache/stanbol/commit/250d599350b2fe0019bc470aba76f5addfbabb48",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/EnhancementRDFUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/EnhancementRDFUtils.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/EnhancementRDFUtils.java",
                "patch": "@@ -61,17 +61,19 @@\n      *            enhancements this textAnnotation is related to\n      * @param entity\n      *            the related entity\n+     * @param nameField the field used to extract the name\n      */\n     public static UriRef writeEntityAnnotation(EnhancementEngine engine,\n                                                LiteralFactory literalFactory,\n                                                MGraph graph,\n                                                UriRef contentItemId,\n                                                Collection<NonLiteral> relatedEnhancements,\n-                                               Entity entity) {\n+                                               Entity entity,\n+                                               String nameField) {\n         // 1. check if the returned Entity does has a label -> if not return null\n         // add labels (set only a single label. Use \"en\" if available!\n         Text label = null;\n-        Iterator<Text> labels = entity.getRepresentation().getText(RDFS_LABEL.getUnicodeString());\n+        Iterator<Text> labels = entity.getRepresentation().getText(nameField);\n         while (labels.hasNext()) {\n             Text actLabel = labels.next();\n             if (label == null) {",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/EnhancementRDFUtils.java",
                "sha": "0d8849e67f1d03b665f0de225a94f36ec305af9f",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/LabelBasedEntityTaggingEngine.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/LabelBasedEntityTaggingEngine.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 0,
                "filename": "enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/LabelBasedEntityTaggingEngine.java",
                "patch": "@@ -0,0 +1,36 @@\n+package org.apache.stanbol.enhancer.engines.entitytagging.impl;\n+\n+import java.util.Map;\n+\n+import org.apache.felix.scr.annotations.Component;\n+import org.apache.felix.scr.annotations.ConfigurationPolicy;\n+import org.apache.felix.scr.annotations.Service;\n+import org.apache.stanbol.enhancer.servicesapi.ContentItem;\n+import org.apache.stanbol.enhancer.servicesapi.EngineException;\n+import org.apache.stanbol.enhancer.servicesapi.EnhancementEngine;\n+import org.apache.stanbol.enhancer.servicesapi.ServiceProperties;\n+\n+@Component(configurationFactory = true, policy = ConfigurationPolicy.REQUIRE, // the baseUri is required!\n+    specVersion = \"1.1\", metatype = true, immediate = true)\n+@Service\n+public class LabelBasedEntityTaggingEngine implements EnhancementEngine, ServiceProperties {\n+\n+    @Override\n+    public int canEnhance(ContentItem ci) throws EngineException {\n+        // TODO Auto-generated method stub\n+        return 0;\n+    }\n+\n+    @Override\n+    public void computeEnhancements(ContentItem ci) throws EngineException {\n+    // TODO Auto-generated method stub\n+\n+    }\n+\n+    @Override\n+    public Map<String,Object> getServiceProperties() {\n+        // TODO Auto-generated method stub\n+        return null;\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/LabelBasedEntityTaggingEngine.java",
                "sha": "6b5dd2faea92919449a237172a5cb7211f451110",
                "status": "added"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/NamedEntityTaggingEngine.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/NamedEntityTaggingEngine.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 38,
                "filename": "enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/NamedEntityTaggingEngine.java",
                "patch": "@@ -22,12 +22,15 @@\n import static org.apache.stanbol.enhancer.servicesapi.rdf.Properties.RDF_TYPE;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.Dictionary;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n \n import org.apache.clerezza.rdf.core.LiteralFactory;\n import org.apache.clerezza.rdf.core.MGraph;\n@@ -54,6 +57,8 @@\n import org.apache.stanbol.enhancer.servicesapi.rdf.OntologicalClasses;\n import org.apache.stanbol.enhancer.servicesapi.rdf.Properties;\n import org.apache.stanbol.enhancer.servicesapi.rdf.TechnicalClasses;\n+import org.apache.stanbol.entityhub.servicesapi.Entityhub;\n+import org.apache.stanbol.entityhub.servicesapi.EntityhubException;\n import org.apache.stanbol.entityhub.servicesapi.defaults.NamespaceEnum;\n import org.apache.stanbol.entityhub.servicesapi.model.Entity;\n import org.apache.stanbol.entityhub.servicesapi.query.FieldQuery;\n@@ -77,45 +82,53 @@\n @Component(configurationFactory = true, policy = ConfigurationPolicy.REQUIRE, // the baseUri is required!\n specVersion = \"1.1\", metatype = true, immediate = true)\n @Service\n-public class ReferencedSiteEntityTaggingEnhancementEngine implements EnhancementEngine, ServiceProperties {\n+public class NamedEntityTaggingEngine implements EnhancementEngine, ServiceProperties {\n \n     private final Logger log = LoggerFactory.getLogger(getClass());\n \n-    @Property(value = \"dbpedia\")\n+    @Property//(value = \"dbpedia\")\n     public static final String REFERENCED_SITE_ID = \"org.apache.stanbol.enhancer.engines.entitytagging.referencedSiteId\";\n \n-    @Property(boolValue = true)\n+    @Property//(boolValue = true)\n     public static final String PERSON_STATE = \"org.apache.stanbol.enhancer.engines.entitytagging.personState\";\n \n-    @Property(value = \"dbp-ont:Person\")\n+    @Property//(value = \"dbp-ont:Person\")\n     public static final String PERSON_TYPE = \"org.apache.stanbol.enhancer.engines.entitytagging.personType\";\n \n-    @Property(boolValue = true)\n+    @Property//(boolValue = true)\n     public static final String ORG_STATE = \"org.apache.stanbol.enhancer.engines.entitytagging.organisationState\";\n \n-    @Property(value = \"dbp-ont:Organisation\")\n+    @Property//(value = \"dbp-ont:Organisation\")\n     public static final String ORG_TYPE = \"org.apache.stanbol.enhancer.engines.entitytagging.organisationType\";\n \n-    @Property(boolValue = true)\n+    @Property//(boolValue = true)\n     public static final String PLACE_STATE = \"org.apache.stanbol.enhancer.engines.entitytagging.placeState\";\n \n-    @Property(value = \"dbp-ont:Place\")\n+    @Property//(value = \"dbp-ont:Place\")\n     public static final String PLACE_TYPE = \"org.apache.stanbol.enhancer.engines.entitytagging.placeType\";\n-\n+    /**\n+     * Use the RDFS label as default\n+     */\n     @Property(value = \"rdfs:label\")\n     public static final String NAME_FIELD = \"org.apache.stanbol.enhancer.engines.entitytagging.nameField\";\n \n     /**\n-     * Service of the RICK that manages all the active referenced Site. This Service is used to lookup the\n+     * Service of the Entityhub that manages all the active referenced Site. This Service is used to lookup the\n      * configured Referenced Site when we need to enhance a content item.\n      */\n     @Reference\n     protected ReferencedSiteManager siteManager;\n \n     /**\n-     * This is the configured name of the referenced Site used to find entities. The\n-     * {@link ReferencedSiteManager} service of the RICK is used to get the actual {@link ReferencedSite}\n-     * instance for each request to this Engine.\n+     * Used to lookup Entities if the {@link #REFERENCED_SITE_ID} property is\n+     * set to \"entityhub\" or \"local\"\n+     */\n+    @Reference\n+    protected Entityhub entityhub;\n+    \n+    /**\n+     * This holds the id of the {@link ReferencedSite} used to lookup Entities\n+     * or <code>null</code> if the {@link Entityhub} is used. \n      */\n     protected String referencedSiteID;\n \n@@ -125,6 +138,7 @@\n      */\n     public static final Integer defaultOrder = ORDERING_EXTRACTION_ENHANCEMENT;\n \n+\n     /**\n      * State if text annotations of type {@link OntologicalClasses#DBPEDIA_PERSON} are enhanced by this engine\n      */\n@@ -222,6 +236,10 @@ protected void activate(ComponentContext context) throws ConfigurationException\n             throw new ConfigurationException(REFERENCED_SITE_ID,\n                     \"The ID of the Referenced Site is a required Parameter and MUST NOT be an empty String!\");\n         }\n+        if(Entityhub.ENTITYHUB_IDS.contains(this.referencedSiteID.toLowerCase())){\n+            log.info(\"Init NamedEntityTaggingEngine instance for the Entityhub\");\n+            this.referencedSiteID = null;\n+        }\n         Object state = config.get(PERSON_STATE);\n         personState = state == null ? true : Boolean.parseBoolean(state.toString());\n         state = config.get(ORG_STATE);\n@@ -252,21 +270,28 @@ protected void deactivate(ComponentContext context) {\n     }\n \n     public void computeEnhancements(ContentItem ci) throws EngineException {\n-        ReferencedSite site = siteManager.getReferencedSite(referencedSiteID);\n-        if (site == null) {\n-            String msg = String.format(\n-                \"Unable to enhance %s because Referenced Site %s is currently not active!\", ci.getId(),\n-                referencedSiteID);\n-            log.warn(msg);\n-            // TODO: throwing Exceptions is currently deactivated. We need a more clear\n-            // policy what do to in such situations\n-            // throw new EngineException(msg);\n-            return;\n-        }\n-        if (isOfflineMode() && !site.supportsLocalMode()) {\n-            log.warn(\"Unable to enhance ci {} because OfflineMode is not supported by ReferencedSite {}.\",\n-                ci.getId(), site.getId());\n-            return;\n+        final ReferencedSite site;\n+        if(referencedSiteID != null) { //lookup the referenced site\n+            site = siteManager.getReferencedSite(referencedSiteID);\n+            //ensure that it is present\n+            if (site == null) {\n+                String msg = String.format(\n+                    \"Unable to enhance %s because Referenced Site %s is currently not active!\", ci.getId(),\n+                    referencedSiteID);\n+                log.warn(msg);\n+                // TODO: throwing Exceptions is currently deactivated. We need a more clear\n+                // policy what do to in such situations\n+                // throw new EngineException(msg);\n+                return;\n+            }\n+            //and that it supports offline mode if required\n+            if (isOfflineMode() && !site.supportsLocalMode()) {\n+                log.warn(\"Unable to enhance ci {} because OfflineMode is not supported by ReferencedSite {}.\",\n+                    ci.getId(), site.getId());\n+                return;\n+            }\n+        } else { // null indicates to use the Entityhub to lookup Entities\n+            site = null;\n         }\n         UriRef contentItemId = new UriRef(ci.getId());\n \n@@ -292,20 +317,33 @@ public void computeEnhancements(ContentItem ci) throws EngineException {\n \n         for (Map.Entry<UriRef,List<UriRef>> entry : textAnnotations.entrySet()) {\n             try {\n-                computeEntityRecommentations(site, literalFactory, graph, contentItemId, entry.getKey(),\n+                computeEntityRecommentations(site,literalFactory, graph, contentItemId, entry.getKey(),\n                     entry.getValue());\n-            } catch (ReferencedSiteException e) {\n+            } catch (EntityhubException e) {\n                 throw new EngineException(this, ci, e);\n             }\n         }\n     }\n \n+    /**\n+     * Computes the Enhancements\n+     * @param site The {@link ReferencedSiteException} id or <code>null</code> to\n+     * use the {@link Entityhub}\n+     * @param literalFactory the {@link LiteralFactory} used to create RDF Literals\n+     * @param graph the graph to write the lined entities\n+     * @param contentItemId the id of the contentItem\n+     * @param textAnnotation the text annotation to enhance\n+     * @param subsumedAnnotations other text annotations for the same entity \n+     * @return the suggested {@link Entity entities}\n+     * @throws EntityhubException On any Error while looking up Entities via\n+     * the Entityhub\n+     */\n     protected final Iterable<Entity> computeEntityRecommentations(ReferencedSite site,\n-                                                                LiteralFactory literalFactory,\n-                                                                MGraph graph,\n-                                                                UriRef contentItemId,\n-                                                                UriRef textAnnotation,\n-                                                                List<UriRef> subsumedAnnotations) throws ReferencedSiteException {\n+            LiteralFactory literalFactory,\n+            MGraph graph,\n+            UriRef contentItemId,\n+            UriRef textAnnotation,\n+            List<UriRef> subsumedAnnotations) throws EntityhubException {\n         // First get the required properties for the parsed textAnnotation\n         // ... and check the values\n         String name = EnhancementEngineHelper.getString(graph, textAnnotation, ENHANCER_SELECTED_TEXT);\n@@ -325,7 +363,9 @@ public void computeEnhancements(ContentItem ci) throws EngineException {\n         name = cleanupKeywords(name);\n \n         log.debug(\"Process TextAnnotation \" + name + \" type=\" + type);\n-        FieldQuery query = site.getQueryFactory().createFieldQuery();\n+        FieldQuery query = site == null ? //if site is NULL use the Entityhub\n+                entityhub.getQueryFactory().createFieldQuery() : \n+                    site.getQueryFactory().createFieldQuery();\n         // replace spaces with plus to create an AND search for all words in the name!\n         query.setConstraint(nameField, new TextConstraint(name));// name.replace(' ', '+')));\n         if (OntologicalClasses.DBPEDIA_PERSON.equals(type)) {\n@@ -360,7 +400,9 @@ public void computeEnhancements(ContentItem ci) throws EngineException {\n             }\n         }\n         query.setLimit(this.numSuggestions);\n-        QueryResultList<Entity> results = site.findEntities(query);\n+        QueryResultList<Entity> results = site == null? //if site is NULL\n+                entityhub.findEntities(query) : //use the Entityhub\n+                    site.findEntities(query); //else the referenced site\n         log.debug(\"{} results returned by query {}\", results.size(), query);\n \n         List<NonLiteral> annotationsToRelate = new ArrayList<NonLiteral>();\n@@ -370,7 +412,7 @@ public void computeEnhancements(ContentItem ci) throws EngineException {\n         for (Entity guess : results) {\n             log.debug(\"Adding {} to ContentItem {}\", guess, contentItemId);\n             EnhancementRDFUtils.writeEntityAnnotation(this, literalFactory, graph, contentItemId,\n-                annotationsToRelate, guess);\n+                annotationsToRelate, guess, nameField);\n         }\n         return results;\n     }",
                "previous_filename": "enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/ReferencedSiteEntityTaggingEnhancementEngine.java",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/NamedEntityTaggingEngine.java",
                "sha": "71bdd5f2658712f7234e206e738936ea8c17a0ee",
                "status": "renamed"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/resources/OSGI-INF/metatype/metatype.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/engines/entitytagging/src/main/resources/OSGI-INF/metatype/metatype.properties?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "enhancer/engines/entitytagging/src/main/resources/OSGI-INF/metatype/metatype.properties",
                "patch": "@@ -1,8 +1,8 @@\n #===============================================================================\n #Properties and Options used to configure ReferencedSiteEntityTaggingEnhancementEngine\n #===============================================================================\n-org.apache.stanbol.enhancer.engines.entitytagging.impl.ReferencedSiteEntityTaggingEnhancementEngine.name=Entityhub Referenced Site based Entity-Tagging-Engine\n-org.apache.stanbol.enhancer.engines.entitytagging.impl.ReferencedSiteEntityTaggingEnhancementEngine.description=Enhancement Engine that uses Entities managed by a Entityhub Referenced Site for semantic lifting of TextAnnotations\n+org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine.name=Named Entity Tagging Engine\n+org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine.description=Links named entities (Persons, Organisations, Places) to Entities managed by an Entityhub Referenced Site\n \n org.apache.stanbol.enhancer.engines.entitytagging.referencedSiteId.name=Referenced Site\n org.apache.stanbol.enhancer.engines.entitytagging.referencedSiteId.description=The ID of the Entityhub Referenced Site used for semantic lifting of TextAnnotations",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/main/resources/OSGI-INF/metatype/metatype.properties",
                "sha": "ed47ddc55065caad538b9d4f97fba23a7fbf65c2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/test/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/TestEntityLinkingEnhancementEngine.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/engines/entitytagging/src/test/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/TestEntityLinkingEnhancementEngine.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "enhancer/engines/entitytagging/src/test/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/TestEntityLinkingEnhancementEngine.java",
                "patch": "@@ -63,8 +63,8 @@\n      */\n     public static final String PLACE = \"New Zealand\";\n \n-    static ReferencedSiteEntityTaggingEnhancementEngine entityLinkingEngine\n-            = new ReferencedSiteEntityTaggingEnhancementEngine();\n+    static NamedEntityTaggingEngine entityLinkingEngine\n+            = new NamedEntityTaggingEngine();\n \n     @BeforeClass\n     public static void setUpServices() throws IOException {",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/engines/entitytagging/src/test/java/org/apache/stanbol/enhancer/engines/entitytagging/impl/TestEntityLinkingEnhancementEngine.java",
                "sha": "d3c8f634cd4041db295d8d64c4e6907fd3a469db",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/resource/ContentItemResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/resource/ContentItemResource.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 1,
                "filename": "enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/resource/ContentItemResource.java",
                "patch": "@@ -409,7 +409,7 @@ public String getSummary() {\n                 Resource object = abstracts.next().getObject();\n                 if (object instanceof PlainLiteral) {\n                     PlainLiteral abstract_ = (PlainLiteral) object;\n-                    if (abstract_.getLanguage().equals(new Language(\"en\"))) {\n+                    if (new Language(\"en\").equals(abstract_.getLanguage())) {\n                         return abstract_.getLexicalForm();\n                     }\n                 }",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/enhancer/jersey/src/main/java/org/apache/stanbol/enhancer/jersey/resource/ContentItemResource.java",
                "sha": "b01ad6b35c024ad1cee5c074f18be4240a22365b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityhubImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityhubImpl.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 5,
                "filename": "entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityhubImpl.java",
                "patch": "@@ -402,7 +402,7 @@ private void deleteEntity(Yard yard,Entity entity) throws YardException {\n         }\n     }\n     private void deleteEntities(Yard yard, Collection<String> ids) throws YardException {\n-        FieldQuery fieldQuery = getQueryFavtory().createFieldQuery();\n+        FieldQuery fieldQuery = getQueryFactory().createFieldQuery();\n         Collection<String> toDelete = new HashSet<String>(ids);\n         for(String id : ids){\n             if(id != null && !id.isEmpty()){\n@@ -420,7 +420,7 @@ private void deleteEntities(Yard yard, Collection<String> ids) throws YardExcept\n \n     private void deleteMappingsbyTarget(Yard yard,String id) throws YardException {\n         if(id != null && !id.isEmpty()){\n-            FieldQuery fieldQuery = getQueryFavtory().createFieldQuery();\n+            FieldQuery fieldQuery = getQueryFactory().createFieldQuery();\n             fieldQuery.setConstraint(RdfResourceEnum.mappingTarget.getUri(), new ReferenceConstraint(id));\n             deleteEntities(yard, ModelUtils.asCollection(\n                 yard.findReferences(fieldQuery).iterator()));\n@@ -578,7 +578,7 @@ public Entity getMappingBySource(String reference) throws YardException{\n             log.warn(\"NULL parsed as Reference -> call to getMappingByEntity ignored (return null)\");\n             return null;\n         }\n-        FieldQuery fieldQuery = getQueryFavtory().createFieldQuery();\n+        FieldQuery fieldQuery = getQueryFactory().createFieldQuery();\n         fieldQuery.setConstraint(RdfResourceEnum.mappingSource.getUri(), new ReferenceConstraint(reference));\n         Yard entityhubYard = lookupYard();\n         QueryResultList<Representation> resultList = entityhubYard.findRepresentation(fieldQuery);\n@@ -609,7 +609,7 @@ public Entity getMappingBySource(String reference) throws YardException{\n             log.warn(\"NULL parsed as Reference -> call to getMappingsBySymbol ignored (return null)\");\n             return null;\n         }\n-        FieldQuery fieldQuery = getQueryFavtory().createFieldQuery();\n+        FieldQuery fieldQuery = getQueryFactory().createFieldQuery();\n         fieldQuery.setConstraint(RdfResourceEnum.mappingTarget.getUri(), new ReferenceConstraint(targetId));\n         Yard enttiyhubYard = lookupYard();\n         QueryResultList<Representation> resultList = enttiyhubYard.findRepresentation(fieldQuery);\n@@ -725,7 +725,7 @@ public Entity getMappingById(String id) throws IllegalArgumentException, Entityh\n         }\n     }\n     @Override\n-    public FieldQueryFactory getQueryFavtory() {\n+    public FieldQueryFactory getQueryFactory() {\n         Yard entityhubYard = getYard();\n         return entityhubYard==null? //if no yard available\n                 DefaultQueryFactory.getInstance(): //use the default",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/EntityhubImpl.java",
                "sha": "e03c0548b7ae3b448f255d60a9ab331f56e34650",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/ReferencedSiteImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/ReferencedSiteImpl.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 0,
                "filename": "entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/ReferencedSiteImpl.java",
                "patch": "@@ -612,6 +612,12 @@ protected void activate(final ComponentContext context) throws ConfigurationExce\n         }\n         //NOTE that the constructor also validation of the parsed configuration\n         siteConfiguration = new DefaultSiteConfiguration(config);\n+        if(PROHIBITED_SITE_IDS.contains(siteConfiguration.getId().toLowerCase())){\n+            throw new ConfigurationException(SiteConfiguration.ID, String.format(\n+                \"The ID '%s' of this Referenced Site is one of the following \" +\n+                \"prohibited IDs: {} (case insensitive)\",siteConfiguration.getId(),\n+                PROHIBITED_SITE_IDS));\n+        }\n         log.info(\" > initialise Referenced Site {}\",siteConfiguration.getName());\n         //if the accessUri is the same as the queryUri and both the dereferencer and\n         //the entitySearcher uses the same component, than we need only one component",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/core/src/main/java/org/apache/stanbol/entityhub/core/impl/ReferencedSiteImpl.java",
                "sha": "140ecb100d00d73985542d6a19accbb92b78b367",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/Entityhub.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/Entityhub.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 1,
                "filename": "entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/Entityhub.java",
                "patch": "@@ -16,7 +16,11 @@\n  */\n package org.apache.stanbol.entityhub.servicesapi;\n \n+import java.util.Arrays;\n import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n \n import org.apache.stanbol.entityhub.servicesapi.mapping.FieldMapper;\n import org.apache.stanbol.entityhub.servicesapi.mapping.FieldMapping;\n@@ -46,6 +50,18 @@\n public interface Entityhub {\n \n     String DEFAUTL_ENTITYHUB_PREFIX = \"urn:org.apache.stanbol:entityhub\";\n+    /**\n+     * Protected keys to be used as name for the Entityhub. Such keys MUST NOT\n+     * be used as {@link ReferencedSite#getId() id}s for \n+     * {@link ReferencedSite}s. (case insensitive)<p>\n+     * The protected values are <ul>\n+     * <li><code>\"local\"</code>\n+     * <li><code>\"entityhub\"</code>\n+     * </ul>\n+     */\n+    Set<String> ENTITYHUB_IDS = Collections.unmodifiableSet(\n+        new HashSet<String>(Arrays.asList(\n+            \"local\",\"entityhub\")));\n \n     /**\n      * Getter for the Yard storing the Entities and Mappings managed by this\n@@ -150,7 +166,7 @@\n      * {@link Yard} used by the entity hub.\n      * @return the query factory\n      */\n-    FieldQueryFactory getQueryFavtory();\n+    FieldQueryFactory getQueryFactory();\n     /**\n      * Getter for the FieldMappings configured for this Site\n      * @return The {@link FieldMapping} present for this Site.",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/Entityhub.java",
                "sha": "e9a9c06f0726e0ff06bff3a3eceac2f7c02a2462",
                "status": "modified"
            },
            {
                "additions": 102,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/defaults/NamespaceEnum.java",
                "changes": 118,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/defaults/NamespaceEnum.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 16,
                "filename": "entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/defaults/NamespaceEnum.java",
                "patch": "@@ -19,13 +19,17 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n /**\n  * Defines commonly used name spaces to prevent multiple definitions in several\n  * classes\n  * @author Rupert Westenthaler\n  *\n  */\n public enum NamespaceEnum {\n+    \n     //Namespaces defined by the entityhub\n     entityhubModel(\"entityhub\",\"http://www.iks-project.eu/ontology/rick/model/\"),\n     entityhubQuery(\"entityhub-query\",\"http://www.iks-project.eu/ontology/rick/query/\"),\n@@ -69,18 +73,76 @@\n     geonames(\"http://www.geonames.org/ontology#\"),\n     //copyright and license\n     cc(\"http://creativecommons.org/ns#\"),\n+    //Schema.org (see http://schema.org/docs/schemaorg.owl for the Ontology)\n+    schema(\"http://schema.org/\",true),\n     ;\n-    private String ns;\n-    private String prefix;\n+    /**\n+     * The logger\n+     */\n+    private static final Logger log = LoggerFactory.getLogger(NamespaceEnum.class);\n+\n+    private final String ns;\n+    private final String prefix;\n+    private final boolean defaultPrefix;\n+    /**\n+     * Defines a namespace that used the {@link #name()} as prefix.\n+     * @param ns the namespace. MUST NOT be NULL nor empty\n+     */\n     NamespaceEnum(String ns) {\n-        if(ns == null){\n-            throw new IllegalArgumentException(\"The namespace MUST NOT be NULL\");\n-        }\n-        this.ns = ns;\n+        this(null,ns,false);\n+    }\n+    /**\n+     * Defines a namespace by using the {@link #name()} as prefix. If\n+     * <code>true</code> is parsed a second parameter this namespace is marked\n+     * as the default<p>\n+     * <b>NOTE: </b> Only a single namespace can be defined as default. In case\n+     * multiple namespaces are marked as default the one with the lowest\n+     * {@link #ordinal()} will be used as default. This will be the topmost entry\n+     * in this enumeration.\n+     * @param ns the namespace. MUST NOT be <code>null</code> nor empty\n+     * @param defaultPrefix the default namespace indicator\n+     */\n+    NamespaceEnum(String ns,boolean defaultPrefix) {\n+        this(null,ns,defaultPrefix);\n     }\n+    /**\n+     * Defines a namespace with a customised prefix. This should be used if the\n+     * prefix needs to be different as the {@link #name()} of the enumeration\n+     * entry.\n+     * @param prefix the prefix. If <code>null</code> the {@link #name()} is\n+     * used. MUST NOT be an empty string\n+     * @param ns the namespace. MUST NOT be <code>null</code> nor empty\n+     */\n     NamespaceEnum(String prefix, String ns) {\n-        this(ns);\n-        this.prefix = prefix;\n+        this(prefix,ns,false);\n+    }\n+    /**\n+     * Defines a namespace with a customised prefix. This should be used if the\n+     * prefix needs to be different as the {@link #name()} of the enumeration\n+     * entry.<p>\n+     * <b>NOTE: </b> Only a single namespace can be defined as default. In case\n+     * multiple namespaces are marked as default the one with the lowest\n+     * {@link #ordinal()} will be used as default. This will be the topmost entry\n+     * in this enumeration.\n+     * @param prefix the prefix. If <code>null</code> the {@link #name()} is\n+     * used. MUST NOT be an empty string\n+     * @param ns the namespace. MUST NOT be <code>null</code> nor empty\n+     * @param defaultPrefix the default namespace indicator\n+     */\n+    NamespaceEnum(String prefix, String ns,boolean defaultPrefix) {\n+        if(ns == null || ns.isEmpty()){\n+            throw new IllegalArgumentException(\"The namespace MUST NOT be NULL nor empty\");\n+        }\n+        this.ns = ns;\n+        if(prefix == null){\n+            this.prefix = name();\n+        } else if(prefix.isEmpty()){\n+            throw new IllegalArgumentException(\"The prefix MUST NOT be emtpty.\" +\n+            \t\t\"Use NULL to use the name or parse the prefix to use\");\n+        } else {\n+            this.prefix = prefix;\n+        }\n+        this.defaultPrefix = defaultPrefix;\n     }\n     public String getNamespace(){\n         return ns;\n@@ -95,21 +157,35 @@ public String toString() {\n     /*\n      * ==== Code for Lookup Methods based on Prefix and Namespace ====\n      */\n-    private static Map<String, NamespaceEnum> prefix2Namespace;\n-    private static Map<String, NamespaceEnum> namespace2Prefix;\n+    private final static Map<String, NamespaceEnum> prefix2Namespace;\n+    private final static Map<String, NamespaceEnum> namespace2Prefix;\n+    private final static NamespaceEnum defaultNamespace;\n     static {\n         Map<String,NamespaceEnum> p2n = new HashMap<String, NamespaceEnum>();\n         Map<String,NamespaceEnum> n2p = new HashMap<String, NamespaceEnum>();\n         //The Exceptions are only thrown to check that this Enum is configured\n         //correctly!\n+        NamespaceEnum defaultNs = null;\n         for(NamespaceEnum entry : NamespaceEnum.values()){\n+            if(entry.isDefault()){\n+                if(defaultNs == null){\n+                    defaultNs = entry;\n+                } else {\n+                    log.warn(\"Found multiple default namespace definitions! Will use the one with the lowest ordinal value.\");\n+                    log.warn(\" > used default: prefix:{}, namespace:{}, ordinal:{}\",\n+                        new Object[]{defaultNs.getPrefix(),defaultNs.getNamespace(),defaultNs.ordinal()});\n+                    log.warn(\" > this one    : prefix:{}, namespace:{}, ordinal:{}\",\n+                        new Object[]{entry.getPrefix(),entry.getNamespace(),entry.ordinal()});\n+                }\n+            }\n             if(p2n.containsKey(entry.getPrefix())){\n                 throw new IllegalStateException(\n                         String.format(\"Prefix %s used for multiple namespaces: %s and %s\",\n                                 entry.getPrefix(),\n                                 p2n.get(entry.getPrefix()),\n                                 entry.getNamespace()));\n             } else {\n+                log.debug(\"add {} -> {} mapping\",entry.getPrefix(),entry.getNamespace());\n                 p2n.put(entry.getPrefix(), entry);\n             }\n             if(n2p.containsKey(entry.getNamespace())){\n@@ -119,11 +195,13 @@ public String toString() {\n                                 p2n.get(entry.getNamespace()),\n                                 entry.getNamespace()));\n             } else {\n+                log.debug(\"add {} -> {} mapping\",entry.getNamespace(),entry.getPrefix());\n                 n2p.put(entry.getNamespace(), entry);\n             }\n         }\n         prefix2Namespace = Collections.unmodifiableMap(p2n);\n         namespace2Prefix = Collections.unmodifiableMap(n2p);\n+        defaultNamespace = defaultNs;\n     }\n     /**\n      * Getter for the {@link NamespaceEnum} entry based on the string namespace\n@@ -136,18 +214,18 @@ public static NamespaceEnum forNamespace(String namespace){\n     }\n     /**\n      * Getter for the {@link NamespaceEnum} entry based on the prefix\n-     * @param prefix the prefix\n+     * @param prefix the prefix or <code>null</code> to get the default namespace\n      * @return the {@link NamespaceEnum} entry or <code>null</code> if the prased\n      *    prefix is not present\n      */\n     public static NamespaceEnum forPrefix(String prefix){\n-        return prefix2Namespace.get(prefix);\n+        return prefix == null ? defaultNamespace : prefix2Namespace.get(prefix);\n     }\n     /**\n-     * Lookup if the parsed URI uses one of the registered prefixes of this\n-     * Enumeration. If this is the case, the prefix is replaced by the namespace\n-     * and the full URI is returned. If no prefix is returned, the\n-     * parsed URI is returned\n+     * Lookup if the parsed short URI (e.g \"rdfs:label\") uses one of the \n+     * registered prefixes of this Enumeration of if the parsed short URI uses\n+     * the default namespace (e.g. \"name\"). In case the prefix could not be found\n+     * the parsed URI is returned unchanged\n      * @param shortUri the short URI\n      * @return the full URI if the parsed shortUri uses a prefix defined by this\n      * Enumeration. Otherwise the parsed value.\n@@ -162,7 +240,15 @@ public static String getFullName(String shortUri){\n             if(namespace!= null){\n                 shortUri = namespace.getNamespace()+shortUri.substring(index+1);\n             }\n+        } else if(defaultNamespace != null){\n+            shortUri = defaultNamespace.getNamespace()+shortUri;\n         }\n         return shortUri;\n     }\n+    /**\n+     * @return the defaultPrefix\n+     */\n+    public boolean isDefault() {\n+        return defaultPrefix;\n+    }\n }",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/defaults/NamespaceEnum.java",
                "sha": "c54d71b958162b73f7110e3e02b31f69a524e547",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/site/ReferencedSite.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/site/ReferencedSite.java?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/site/ReferencedSite.java",
                "patch": "@@ -17,7 +17,9 @@\n package org.apache.stanbol.entityhub.servicesapi.site;\n \n import java.io.InputStream;\n+import java.util.Set;\n \n+import org.apache.stanbol.entityhub.servicesapi.Entityhub;\n import org.apache.stanbol.entityhub.servicesapi.mapping.FieldMapper;\n import org.apache.stanbol.entityhub.servicesapi.mapping.FieldMapping;\n import org.apache.stanbol.entityhub.servicesapi.model.Representation;\n@@ -30,10 +32,16 @@\n \n public interface ReferencedSite {\n \n+    /**\n+     * List of {@link #getId() ids} that are not allowed to be used (case\n+     * insensitive) for referenced sites.\n+     */\n+    Set<String> PROHIBITED_SITE_IDS = Entityhub.ENTITYHUB_IDS;\n     /**\n      * The Id of this site. This Method MUST return the same value as\n-     * <code>{@link #getConfiguration()}.getId()</code>. It is only there to\n-     * make it more easy to access the Id of the site\n+     * <code>{@link #getConfiguration()}.getId()</code>.\n+     * The configured ID MUST NOT be <code>null</code>, empty or one of the\n+     * {@link #PROHIBITED_SITE_IDS}.\n      * @return the ID of this site\n      */\n     String getId();",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/generic/servicesapi/src/main/java/org/apache/stanbol/entityhub/servicesapi/site/ReferencedSite.java",
                "sha": "1e4e46426bf38c05d4016da3b6165a588c16b7e8",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/dblp/src/main/resources/indexing/config/indexing.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/indexing/dblp/src/main/resources/indexing/config/indexing.properties?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "entityhub/indexing/dblp/src/main/resources/indexing/config/indexing.properties",
                "patch": "@@ -31,10 +31,10 @@ indexingDestination=org.apache.stanbol.entityhub.indexing.destination.solryard.S\n org.apache.stanbol.entityhub.site.entityPrefix=http://dblp.l3s.de/d2r/resource\n \n org.apache.stanbol.entityhub.site.accessUri=http://dblp.l3s.de/d2r/resource/\n-org.apache.stanbol.entityhub.site.dereferencerType=org.apache.stanbol.entityhub.site.CoolUriDereferencer\n+org.apache.stanbol.entityhub.site.dereferencerType=org.apache.stanbol.entityhub.dereferencer.CoolUriDereferencer\n # The SPARQL endpoint is a d2r server so use a standard sparql server\n org.apache.stanbol.entityhub.site.queryUri=http://dblp.l3s.de/d2r/sparql\n-org.apache.stanbol.entityhub.site.searcherType=org.apache.stanbol.entityhub.site.SparqlSearcher\n+org.apache.stanbol.entityhub.site.searcherType=org.apache.stanbol.entityhub.searcher.SparqlSearcher\n \n # The mappings used when importing an entity form this site to the Entityhub (optional)\n # The value need to point to the file with the mappings within the config directory",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/dblp/src/main/resources/indexing/config/indexing.properties",
                "sha": "ab74241978b61957de0aabcfd681638ffe59c14f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/dbpedia/src/main/resources/indexing/config/indexing.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/indexing/dbpedia/src/main/resources/indexing/config/indexing.properties?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 2,
                "filename": "entityhub/indexing/dbpedia/src/main/resources/indexing/config/indexing.properties",
                "patch": "@@ -49,9 +49,9 @@ org.apache.stanbol.entityhub.site.entityPrefix=http://dbpedia.org/resource/;http\n # Dereferencer should use SPARQL because Cool URI will omit statements for popular\n # Entities. \n org.apache.stanbol.entityhub.site.accessUri=http://dbpedia.org/sparql/\n-org.apache.stanbol.entityhub.site.dereferencerType=org.apache.stanbol.entityhub.site.SparqlDereferencer\n+org.apache.stanbol.entityhub.site.dereferencerType=org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer\n # The SPARQL endpoint of DBpedia supports Virtuoso specific extensions\n-org.apache.stanbol.entityhub.site.searcherType=org.apache.stanbol.entityhub.site.VirtuosoSearcher\n+org.apache.stanbol.entityhub.site.searcherType=org.apache.stanbol.entityhub.searcher.VirtuosoSearcher\n org.apache.stanbol.entityhub.site.queryUri=http://dbpedia.org/sparql\n \n # The mappings used when importing an entity form this site to the Entityhub (optional)",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/dbpedia/src/main/resources/indexing/config/indexing.properties",
                "sha": "dbd8f4312bd41e166738d1e08cd760dd49d1eae5",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/genericrdf/src/main/resources/indexing/config/indexing.properties",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/indexing/genericrdf/src/main/resources/indexing/config/indexing.properties?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 5,
                "filename": "entityhub/indexing/genericrdf/src/main/resources/indexing/config/indexing.properties",
                "patch": "@@ -114,16 +114,16 @@ indexingDestination=org.apache.stanbol.entityhub.indexing.destination.solryard.S\n #org.apache.stanbol.entityhub.site.accessUri=http://example.org/resource\"\n #org.apache.stanbol.entityhub.site.dereferencerType=\n # available EntityDereferencer implementation\n-# - org.apache.stanbol.entityhub.site.CoolUriDereferencer\n-# - org.apache.stanbol.entityhub.site.SparqlDereferencer\n+# - org.apache.stanbol.entityhub.dereferencer.CoolUriDereferencer\n+# - org.apache.stanbol.entityhub.dereferencer.SparqlDereferencer\n \n # (b) search entities (queryUri and EntitySearcher implementation)\n #org.apache.stanbol.entityhub.site.queryUri=http://example.org/sparql\n #org.apache.stanbol.entityhub.site.searcherType=\n # available EntitySearcher implementation\n-# - org.apache.stanbol.entityhub.site.SparqlSearcher (generic SPARQL)\n-# - org.apache.stanbol.entityhub.site.LarqSearcher (Larq SPARQL extensions)\n-# - org.apache.stanbol.entityhub.site.VirtuosoSearcher (Virtuoso SPARQL extensions)\n+# - org.apache.stanbol.entityhub.searcher.SparqlSearcher (generic SPARQL)\n+# - org.apache.stanbol.entityhub.searcher.LarqSearcher (Larq SPARQL extensions)\n+# - org.apache.stanbol.entityhub.searcher.VirtuosoSearcher (Virtuoso SPARQL extensions)\n \n # The referenced site can also specify additional mappings to be used in the\n # case an entity of this site is imported to the Entityhub.",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/entityhub/indexing/genericrdf/src/main/resources/indexing/config/indexing.properties",
                "sha": "843399800347e7c10e91878896f8d713f4b4f537",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-dbpedia.config",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-dbpedia.config?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 0,
                "filename": "launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-dbpedia.config",
                "previous_filename": "launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.ReferencedSiteEntityTaggingEnhancementEngine-DBpedia.config",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-dbpedia.config",
                "sha": "7f7f03a2d797705e1ee3ecb1b6a350bc9a59faef",
                "status": "renamed"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/stanbol/blob/250d599350b2fe0019bc470aba76f5addfbabb48/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-local.config",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-local.config?ref=250d599350b2fe0019bc470aba76f5addfbabb48",
                "deletions": 0,
                "filename": "launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-local.config",
                "patch": "@@ -0,0 +1,8 @@\n+org.apache.stanbol.enhancer.engines.entitytagging.nameField=\"name\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.personType=\"Person\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.personState=B\"true\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.referencedSiteId=\"local\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.placeState=B\"true\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.organisationState=B\"true\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.organisationType=\"Organization\"\r\n+org.apache.stanbol.enhancer.engines.entitytagging.placeType=\"Place\"\r",
                "raw_url": "https://github.com/apache/stanbol/raw/250d599350b2fe0019bc470aba76f5addfbabb48/launchers/full/src/main/resources/resources/config/org.apache.stanbol.enhancer.engines.entitytagging.impl.NamedEntityTaggingEngine-local.config",
                "sha": "a25d8f22b55dc314b2065a9f1aabccf6e6bb1b14",
                "status": "added"
            }
        ],
        "message": "STANBOL-230: Adds support for using the Entityhub for linking Entities for TextAnnotations\n\n* By configuring \"local\" or \"entityhub\" one can now use the Entityhub to suggest Entities for TextAnnotations\n* Because now it is no longer true that only ReferencedSites can be used for entity tagging the engine was renamed to NamedEntityTaggingEngine. All Configuration files (e.g. in the launcher) where adapted to the new name.\n* Added a second default configuration to the full launcher that uses the Entityhub for enhancing Entities. This Configuration uses \"http://schema.org\" types for \"Person\", \"Organization\" and \"Place\" as well as the \"name\" field for lookup.\n* The ids \"local\" and \"entityhub\" are now reserved for the Entityhub and MUST NOT be used as IDs for Referenced Sites.\n* added a list of IDs reserved for the Entityhub to the Entityhub Interface.\n* added a list of prohibited IDs for ReferencedSites to the ReferencedSite interface. Currently only the IDs assigned to the Entityhub are in that list\n\n### other changes\n\n* corrected a type in the Entityhub interface (getQueryFavtory -> getQueryFactory)\n* added \"http://schema.org\" to the NamespaceEnum (prefix is \"schema\")\n* added support for a default namespace to the NamespaceEnum.\n* the NamespaceEnum now uses schema.org as default namespace. This means that the property \"name\" in configurations would be mapped to \"http://schema.org/name\".\n* The \"indexing.properties\" files of all indexing utilities used wrong IDs for EntityDereferencer and EntitySearcher implementations. This is now corrected\n* \"rdfs:label\" was hard coded to retrieve the value for the entity-label property of TextAnnotations. Now the value of the property used to search for entities is used.\n* corrected a bug in ContentItemResource (enhancer.jersey) that caused NPEs in case a Clerezza PlainLiteral had no language defined.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/stanbol/trunk@1137617 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/stanbol/commit/7aa6b74caaca9fdb8ac467e4b229ada7b4732c38",
        "repo": "stanbol",
        "unit_tests": [
            "EntityhubTest.java",
            "ReferencedSiteTest.java"
        ]
    },
    "stanbol_2abf185": {
        "bug_id": "stanbol_2abf185",
        "commit": "https://github.com/apache/stanbol/commit/2abf185a28448d85b367fefe1dfa922b91a62b65",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/stanbol/blob/2abf185a28448d85b367fefe1dfa922b91a62b65/commons/namespaceprefix/service/src/main/java/org/apache/stanbol/commons/namespaceprefix/service/StanbolNamespacePrefixService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/commons/namespaceprefix/service/src/main/java/org/apache/stanbol/commons/namespaceprefix/service/StanbolNamespacePrefixService.java?ref=2abf185a28448d85b367fefe1dfa922b91a62b65",
                "deletions": 1,
                "filename": "commons/namespaceprefix/service/src/main/java/org/apache/stanbol/commons/namespaceprefix/service/StanbolNamespacePrefixService.java",
                "patch": "@@ -309,12 +309,12 @@ protected NamespacePrefixProvider getService(ServiceReference ref){\n     \n     @Deactivate\n     protected void deactivate(ComponentContext ctx) {\n-        bundleContext = null;\n         if(providersTracker != null) {\n             providersTracker.close();\n             providersTracker = null;\n         }\n         mappingsFile = null;\n+        bundleContext = null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/stanbol/raw/2abf185a28448d85b367fefe1dfa922b91a62b65/commons/namespaceprefix/service/src/main/java/org/apache/stanbol/commons/namespaceprefix/service/StanbolNamespacePrefixService.java",
                "sha": "442d18fb3a8e438b480e8814e0a7ff8d24694e60",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/stanbol/blob/2abf185a28448d85b367fefe1dfa922b91a62b65/entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/impl/SesameYardComponent.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/stanbol/contents/entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/impl/SesameYardComponent.java?ref=2abf185a28448d85b367fefe1dfa922b91a62b65",
                "deletions": 1,
                "filename": "entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/impl/SesameYardComponent.java",
                "patch": "@@ -224,7 +224,9 @@ public void removedService(ServiceReference serviceReference, Object o) {\n         \tlog.info(\" - currently used Repository was removed (ref: {})\", serviceReference);\n             unregisterSesameYard();\n         }\n-        List<ServiceReference> others = Arrays.asList(repositoryTracker.getServiceReferences());\n+        ServiceReference[] serviceRefs = repositoryTracker.getServiceReferences();\n+        List<ServiceReference> others = serviceRefs == null ? Collections.<ServiceReference>emptyList() :\n+            Arrays.asList(serviceRefs);\n         if(others.size() > 1){\n         \tCollections.sort(others); //sort by priority\n         }",
                "raw_url": "https://github.com/apache/stanbol/raw/2abf185a28448d85b367fefe1dfa922b91a62b65/entityhub/yard/sesame/src/main/java/org/apache/stanbol/entityhub/yard/sesame/impl/SesameYardComponent.java",
                "sha": "17896144ae6c68ea23d5705b0b56ae564b1e7356",
                "status": "modified"
            }
        ],
        "message": "minor: fixed two NPE in deactivate methods\n\ngit-svn-id: https://svn.apache.org/repos/asf/stanbol/trunk@1599974 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/stanbol/commit/22611633b89ad815b5f6cb1070939ce90f76286d",
        "repo": "stanbol",
        "unit_tests": [
            "StanbolNamespacePrefixServiceTest.java"
        ]
    }
}