[
    {
        "repo": "incubator-pinot",
        "commit": "https://github.com/apache/incubator-pinot/commit/eccf573a636de84e60c85cc331fea0afc172c90c",
        "bug_id": "incubator-pinot_eccf573",
        "message": "In TableConfig, add checks for mandatory fields (#3993)\n\nAdd explicit checks for mandatory fields when serialize/deserialize table config\r\nWithout the explicit checks, it will throw NPE, which is not clear and hard to debug\r\n\r\nAlso change the serialize APIs to be non-static\r\n\r\nAdd unit test and integration test for the changes",
        "parent": "https://github.com/apache/incubator-pinot/commit/d78a8075d64801b258d5634bbcb82121e5f3506f",
        "patched_files": [
            "PinotTableRestletResource.java",
            "LowLevelConsumerRoutingTableBuilder.java",
            "TableConfig.java",
            "DefaultControllerRestApi.java",
            "ClusterStarter.java",
            "PinotHelixResourceManager.java",
            "SegmentCreationJob.java",
            "ControllerSentinelTestV2.java",
            "PinotTenantRestletResource.java",
            "TableQueryQuotaManager.java",
            "PinotTableConfigRestletResource.java",
            "TimeBoundaryService.java",
            "AutoAddInvertedIndex.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/queryquota/TableQueryQuotaManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-broker/src/test/java/org/apache/pinot/broker/queryquota/TableQueryQuotaManagerTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-broker/src/test/java/org/apache/pinot/broker/queryquota/TableQueryQuotaManagerTest.java",
                "deletions": 9,
                "sha": "1b5d7098a2dc800b69a149529bcfce8b0788de31",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/queryquota/TableQueryQuotaManagerTest.java",
                "patch": "@@ -146,7 +146,7 @@ public void testOfflineTableWithNullQuotaButWithRealtimeTableConfigNullQpsConfig\n             .setRetentionTimeUnit(\"DAYS\").setRetentionTimeValue(\"1\").setSegmentPushType(\"APPEND\")\n             .setBrokerTenant(\"testBroker\").setServerTenant(\"testServer\").build();\n     ZKMetadataProvider\n-        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, TableConfig.toZnRecord(realtimeTableConfig));\n+        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, realtimeTableConfig.toZNRecord());\n \n     ExternalView brokerResource = generateBrokerResource(OFFLINE_TABLE_NAME);\n     TableConfig tableConfig = generateDefaultTableConfig(OFFLINE_TABLE_NAME);\n@@ -169,7 +169,7 @@ public void testOfflineTableWithNullQuotaButWithRealtimeTableConfigNotNullQpsCon\n             .setRetentionTimeUnit(\"DAYS\").setRetentionTimeValue(\"1\").setSegmentPushType(\"APPEND\")\n             .setBrokerTenant(\"testBroker\").setServerTenant(\"testServer\").build();\n     ZKMetadataProvider\n-        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, TableConfig.toZnRecord(realtimeTableConfig));\n+        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, realtimeTableConfig.toZNRecord());\n \n     ExternalView brokerResource = generateBrokerResource(REALTIME_TABLE_NAME);\n     TableConfig tableConfig = generateDefaultTableConfig(OFFLINE_TABLE_NAME);\n@@ -205,9 +205,8 @@ public void testBothTableHaveQpsQuotaConfig()\n             .setBrokerTenant(\"testBroker\").setServerTenant(\"testServer\").build();\n \n     ZKMetadataProvider\n-        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, TableConfig.toZnRecord(realtimeTableConfig));\n-    ZKMetadataProvider\n-        .setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, TableConfig.toZnRecord(offlineTableConfig));\n+        .setRealtimeTableConfig(_testPropertyStore, REALTIME_TABLE_NAME, realtimeTableConfig.toZNRecord());\n+    ZKMetadataProvider.setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, offlineTableConfig.toZNRecord());\n \n     // Since each table has 2 online brokers, per broker rate becomes 100.0 / 2 = 50.0\n     _tableQueryQuotaManager.initTableQueryQuota(offlineTableConfig, brokerResource);\n@@ -261,8 +260,7 @@ public void testRealtimeTableWithNullQuotaButWithOfflineTableConfigNullQpsConfig\n         new TableConfig.Builder(TableType.OFFLINE).setTableName(RAW_TABLE_NAME).setQuotaConfig(quotaConfig)\n             .setRetentionTimeUnit(\"DAYS\").setRetentionTimeValue(\"1\").setSegmentPushType(\"APPEND\")\n             .setBrokerTenant(\"testBroker\").setServerTenant(\"testServer\").build();\n-    ZKMetadataProvider\n-        .setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, TableConfig.toZnRecord(offlineTableConfig));\n+    ZKMetadataProvider.setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, offlineTableConfig.toZNRecord());\n \n     ExternalView brokerResource = generateBrokerResource(REALTIME_TABLE_NAME);\n     TableConfig tableConfig = generateDefaultTableConfig(REALTIME_TABLE_NAME);\n@@ -280,8 +278,7 @@ public void testRealtimeTableWithNullQuotaButWithOfflineTableConfigNotNullQpsCon\n         new TableConfig.Builder(TableType.OFFLINE).setTableName(RAW_TABLE_NAME).setQuotaConfig(quotaConfig)\n             .setRetentionTimeUnit(\"DAYS\").setRetentionTimeValue(\"1\").setSegmentPushType(\"APPEND\")\n             .setBrokerTenant(\"testBroker\").setServerTenant(\"testServer\").build();\n-    ZKMetadataProvider\n-        .setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, TableConfig.toZnRecord(offlineTableConfig));\n+    ZKMetadataProvider.setOfflineTableConfig(_testPropertyStore, OFFLINE_TABLE_NAME, offlineTableConfig.toZNRecord());\n \n     ExternalView brokerResource = generateBrokerResource(OFFLINE_TABLE_NAME);\n     TableConfig tableConfig = generateDefaultTableConfig(REALTIME_TABLE_NAME);",
                "changes": 15
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/TimeBoundaryServiceTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-broker/src/test/java/org/apache/pinot/broker/routing/TimeBoundaryServiceTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/TimeBoundaryServiceTest.java",
                "deletions": 2,
                "sha": "31e68398c685769e824701bbd7f79e399289373e",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/TimeBoundaryServiceTest.java",
                "patch": "@@ -125,7 +125,6 @@ private void addingTableToPropertyStore(String tableName)\n       throws Exception {\n     TableConfig tableConfig = new TableConfig.Builder(CommonConstants.Helix.TableType.OFFLINE).setTableName(tableName)\n         .setTimeColumnName(\"timestamp\").setTimeType(\"DAYS\").build();\n-    ZKMetadataProvider\n-        .setOfflineTableConfig(_propertyStore, tableConfig.getTableName(), TableConfig.toZnRecord(tableConfig));\n+    ZKMetadataProvider.setOfflineTableConfig(_propertyStore, tableConfig.getTableName(), tableConfig.toZNRecord());\n   }\n }",
                "changes": 3
            },
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/HighLevelConsumerRoutingTableBuilderTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/HighLevelConsumerRoutingTableBuilderTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/HighLevelConsumerRoutingTableBuilderTest.java",
                "deletions": 2,
                "sha": "225f3f89ee07ca830286beaa4029901108280f51",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/HighLevelConsumerRoutingTableBuilderTest.java",
                "patch": "@@ -49,8 +49,8 @@ public void testHlcRoutingTableBuilder() {\n \n     Random random = new Random();\n \n-    TableConfig tableConfig = new TableConfig();\n-    tableConfig.setTableName(\"tableName\");\n+    TableConfig tableConfig =\n+        new TableConfig.Builder(CommonConstants.Helix.TableType.REALTIME).setTableName(\"tableName\").build();\n     HighLevelConsumerBasedRoutingTableBuilder routingTableBuilder = new HighLevelConsumerBasedRoutingTableBuilder();\n     routingTableBuilder.init(new BaseConfiguration(), tableConfig, null, null);\n ",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/LowLevelConsumerRoutingTableBuilderTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/LowLevelConsumerRoutingTableBuilderTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/LowLevelConsumerRoutingTableBuilderTest.java",
                "deletions": 6,
                "sha": "23be4be07ea7c1b5b8384c621fdf95d3e825db37",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-broker/src/test/java/org/apache/pinot/broker/routing/builder/LowLevelConsumerRoutingTableBuilderTest.java",
                "patch": "@@ -52,8 +52,8 @@ public void testAllOnlineRoutingTable() {\n     final int ITERATIONS = 50;\n     Random random = new Random();\n \n-    TableConfig tableConfig = new TableConfig();\n-    tableConfig.setTableName(\"tableName\");\n+    TableConfig tableConfig =\n+        new TableConfig.Builder(CommonConstants.Helix.TableType.REALTIME).setTableName(\"tableName\").build();\n     LowLevelConsumerRoutingTableBuilder routingTableBuilder = new LowLevelConsumerRoutingTableBuilder();\n     routingTableBuilder.init(new BaseConfiguration(), tableConfig, null, null);\n \n@@ -161,8 +161,8 @@ public void testMultipleConsumingSegments() {\n     final int ONLINE_SEGMENT_COUNT = 8;\n     final int CONSUMING_SEGMENT_COUNT = SEGMENT_COUNT - ONLINE_SEGMENT_COUNT;\n \n-    TableConfig tableConfig = new TableConfig();\n-    tableConfig.setTableName(\"tableName\");\n+    TableConfig tableConfig =\n+        new TableConfig.Builder(CommonConstants.Helix.TableType.REALTIME).setTableName(\"tableName\").build();\n     LowLevelConsumerRoutingTableBuilder routingTableBuilder = new LowLevelConsumerRoutingTableBuilder();\n     routingTableBuilder.init(new BaseConfiguration(), tableConfig, null, null);\n \n@@ -207,8 +207,8 @@ public void testShutdownInProgressServer() {\n     final int SEGMENT_COUNT = 10;\n     final int ONLINE_SEGMENT_COUNT = 8;\n \n-    TableConfig tableConfig = new TableConfig();\n-    tableConfig.setTableName(\"tableName\");\n+    TableConfig tableConfig =\n+        new TableConfig.Builder(CommonConstants.Helix.TableType.REALTIME).setTableName(\"tableName\").build();\n     LowLevelConsumerRoutingTableBuilder routingTableBuilder = new LowLevelConsumerRoutingTableBuilder();\n     routingTableBuilder.init(new BaseConfiguration(), tableConfig, null, null);\n ",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 139,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java",
                "deletions": 96,
                "sha": "2f4ee1c3ff91f97c491d7a70c74c0734171e86bf",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java",
                "patch": "@@ -27,7 +27,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import javax.annotation.Nonnull;\n import javax.annotation.Nullable;\n import org.apache.helix.ZNRecord;\n import org.apache.pinot.common.data.StarTreeIndexSpec;\n@@ -51,6 +50,8 @@\n   public static final String TASK_CONFIG_KEY = \"task\";\n   public static final String ROUTING_CONFIG_KEY = \"routing\";\n \n+  private static final String FIELD_MISSING_MESSAGE_TEMPLATE = \"Mandatory field '%s' is missing\";\n+\n   @ConfigKey(\"name\")\n   @ConfigDoc(value = \"The name for the table.\", mandatory = true, exampleValue = \"myTable\")\n   private String _tableName;\n@@ -81,15 +82,17 @@\n   @NestedConfig\n   private RoutingConfig _routingConfig;\n \n+  /**\n+   * NOTE: DO NOT use this constructor, use builder instead. This constructor is for deserializer only.\n+   */\n   public TableConfig() {\n     // TODO: currently these 2 fields are annotated as non-null. Revisit to see whether that's necessary\n     _tenantConfig = new TenantConfig();\n     _customConfig = new TableCustomConfig();\n   }\n \n-  private TableConfig(@Nonnull String tableName, @Nonnull TableType tableType,\n-      @Nonnull SegmentsValidationAndRetentionConfig validationConfig, @Nonnull TenantConfig tenantConfig,\n-      @Nonnull IndexingConfig indexingConfig, @Nonnull TableCustomConfig customConfig,\n+  private TableConfig(String tableName, TableType tableType, SegmentsValidationAndRetentionConfig validationConfig,\n+      TenantConfig tenantConfig, IndexingConfig indexingConfig, TableCustomConfig customConfig,\n       @Nullable QuotaConfig quotaConfig, @Nullable TableTaskConfig taskConfig, @Nullable RoutingConfig routingConfig) {\n     _tableName = TableNameBuilder.forType(tableType).tableNameWithType(tableName);\n     _tableType = tableType;\n@@ -102,111 +105,147 @@ private TableConfig(@Nonnull String tableName, @Nonnull TableType tableType,\n     _routingConfig = routingConfig;\n   }\n \n-  // For backward compatible\n-  @Deprecated\n-  @Nonnull\n-  public static TableConfig init(@Nonnull String jsonConfigString)\n-      throws IOException {\n-    return fromJsonString(jsonConfigString);\n-  }\n-\n   public static TableConfig fromJsonString(String jsonString)\n       throws IOException {\n-    return fromJSONConfig(JsonUtils.stringToJsonNode(jsonString));\n+    return fromJsonConfig(JsonUtils.stringToJsonNode(jsonString));\n   }\n \n-  @Nonnull\n-  public static TableConfig fromJSONConfig(@Nonnull JsonNode jsonConfig)\n+  public static TableConfig fromJsonConfig(JsonNode jsonConfig)\n       throws IOException {\n-    TableType tableType = TableType.valueOf(jsonConfig.get(TABLE_TYPE_KEY).asText().toUpperCase());\n-    String tableName = TableNameBuilder.forType(tableType).tableNameWithType(jsonConfig.get(TABLE_NAME_KEY).asText());\n+    // Mandatory fields\n+    JsonNode jsonTableType = jsonConfig.get(TABLE_TYPE_KEY);\n+    Preconditions\n+        .checkState(jsonTableType != null && !jsonTableType.isNull(), FIELD_MISSING_MESSAGE_TEMPLATE, TABLE_TYPE_KEY);\n+    TableType tableType = TableType.valueOf(jsonTableType.asText().toUpperCase());\n+\n+    JsonNode jsonTableName = jsonConfig.get(TABLE_NAME_KEY);\n+    Preconditions\n+        .checkState(jsonTableName != null && !jsonTableName.isNull(), FIELD_MISSING_MESSAGE_TEMPLATE, TABLE_NAME_KEY);\n+    String tableName = TableNameBuilder.forType(tableType).tableNameWithType(jsonTableName.asText());\n \n     SegmentsValidationAndRetentionConfig validationConfig =\n         extractChildConfig(jsonConfig, VALIDATION_CONFIG_KEY, SegmentsValidationAndRetentionConfig.class);\n+    Preconditions.checkState(validationConfig != null, FIELD_MISSING_MESSAGE_TEMPLATE, VALIDATION_CONFIG_KEY);\n+\n     TenantConfig tenantConfig = extractChildConfig(jsonConfig, TENANT_CONFIG_KEY, TenantConfig.class);\n+    Preconditions.checkState(tenantConfig != null, FIELD_MISSING_MESSAGE_TEMPLATE, TENANT_CONFIG_KEY);\n+\n     IndexingConfig indexingConfig = extractChildConfig(jsonConfig, INDEXING_CONFIG_KEY, IndexingConfig.class);\n+    Preconditions.checkState(indexingConfig != null, FIELD_MISSING_MESSAGE_TEMPLATE, INDEXING_CONFIG_KEY);\n+\n     TableCustomConfig customConfig = extractChildConfig(jsonConfig, CUSTOM_CONFIG_KEY, TableCustomConfig.class);\n-    QuotaConfig quotaConfig = null;\n-    if (jsonConfig.has(QUOTA_CONFIG_KEY)) {\n-      quotaConfig = extractChildConfig(jsonConfig, QUOTA_CONFIG_KEY, QuotaConfig.class);\n+    Preconditions.checkState(customConfig != null, FIELD_MISSING_MESSAGE_TEMPLATE, CUSTOM_CONFIG_KEY);\n+\n+    // Optional fields\n+    QuotaConfig quotaConfig = extractChildConfig(jsonConfig, QUOTA_CONFIG_KEY, QuotaConfig.class);\n+    if (quotaConfig != null) {\n       quotaConfig.validate();\n     }\n-    TableTaskConfig taskConfig = null;\n-    if (jsonConfig.has(TASK_CONFIG_KEY)) {\n-      taskConfig = extractChildConfig(jsonConfig, TASK_CONFIG_KEY, TableTaskConfig.class);\n-    }\n-    RoutingConfig routingConfig = null;\n-    if (jsonConfig.has(ROUTING_CONFIG_KEY)) {\n-      routingConfig = extractChildConfig(jsonConfig, ROUTING_CONFIG_KEY, RoutingConfig.class);\n-    }\n+\n+    TableTaskConfig taskConfig = extractChildConfig(jsonConfig, TASK_CONFIG_KEY, TableTaskConfig.class);\n+\n+    RoutingConfig routingConfig = extractChildConfig(jsonConfig, ROUTING_CONFIG_KEY, RoutingConfig.class);\n \n     return new TableConfig(tableName, tableType, validationConfig, tenantConfig, indexingConfig, customConfig,\n         quotaConfig, taskConfig, routingConfig);\n   }\n \n   /**\n-   * Extracts the child config from the table config.\n+   * Extracts the child config from the table config. Returns {@code null} if child config does not exist.\n    * <p>\n    * NOTE: for historical reason, we support two kinds of nested config values: normal json and serialized json string\n    */\n+  @Nullable\n   private static <T> T extractChildConfig(JsonNode jsonConfig, String childConfigKey, Class<T> childConfigClass)\n       throws IOException {\n     JsonNode childConfigNode = jsonConfig.get(childConfigKey);\n+    if (childConfigNode == null || childConfigNode.isNull()) {\n+      return null;\n+    }\n     if (childConfigNode.isObject()) {\n       return JsonUtils.jsonNodeToObject(childConfigNode, childConfigClass);\n     } else {\n       return JsonUtils.stringToObject(childConfigNode.asText(), childConfigClass);\n     }\n   }\n \n-  @Nonnull\n-  public static JsonNode toJSONConfig(@Nonnull TableConfig tableConfig) {\n+  public ObjectNode toJsonConfig() {\n+    validate();\n+\n     ObjectNode jsonConfig = JsonUtils.newObjectNode();\n-    jsonConfig.put(TABLE_NAME_KEY, tableConfig._tableName);\n-    jsonConfig.put(TABLE_TYPE_KEY, tableConfig._tableType.toString());\n-    jsonConfig.set(VALIDATION_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._validationConfig));\n-    jsonConfig.set(TENANT_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._tenantConfig));\n-    jsonConfig.set(INDEXING_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._indexingConfig));\n-    jsonConfig.set(CUSTOM_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._customConfig));\n-    if (tableConfig._quotaConfig != null) {\n-      jsonConfig.set(QUOTA_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._quotaConfig));\n+\n+    // Mandatory fields\n+    jsonConfig.put(TABLE_NAME_KEY, _tableName);\n+    jsonConfig.put(TABLE_TYPE_KEY, _tableType.toString());\n+    jsonConfig.set(VALIDATION_CONFIG_KEY, JsonUtils.objectToJsonNode(_validationConfig));\n+    jsonConfig.set(TENANT_CONFIG_KEY, JsonUtils.objectToJsonNode(_tenantConfig));\n+    jsonConfig.set(INDEXING_CONFIG_KEY, JsonUtils.objectToJsonNode(_indexingConfig));\n+    jsonConfig.set(CUSTOM_CONFIG_KEY, JsonUtils.objectToJsonNode(_customConfig));\n+\n+    // Optional fields\n+    if (_quotaConfig != null) {\n+      jsonConfig.set(QUOTA_CONFIG_KEY, JsonUtils.objectToJsonNode(_quotaConfig));\n     }\n-    if (tableConfig._taskConfig != null) {\n-      jsonConfig.set(TASK_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._taskConfig));\n+    if (_taskConfig != null) {\n+      jsonConfig.set(TASK_CONFIG_KEY, JsonUtils.objectToJsonNode(_taskConfig));\n     }\n-    if (tableConfig._routingConfig != null) {\n-      jsonConfig.set(ROUTING_CONFIG_KEY, JsonUtils.objectToJsonNode(tableConfig._routingConfig));\n+    if (_routingConfig != null) {\n+      jsonConfig.set(ROUTING_CONFIG_KEY, JsonUtils.objectToJsonNode(_routingConfig));\n     }\n+\n     return jsonConfig;\n   }\n \n-  @Nonnull\n-  public static TableConfig fromZnRecord(@Nonnull ZNRecord znRecord)\n+  public String toJsonConfigString() {\n+    return toJsonConfig().toString();\n+  }\n+\n+  public static TableConfig fromZnRecord(ZNRecord znRecord)\n       throws IOException {\n     Map<String, String> simpleFields = znRecord.getSimpleFields();\n-    TableType tableType = TableType.valueOf(simpleFields.get(TABLE_TYPE_KEY).toUpperCase());\n-    String tableName = TableNameBuilder.forType(tableType).tableNameWithType(simpleFields.get(TABLE_NAME_KEY));\n+\n+    // Mandatory fields\n+    String tableTypeString = simpleFields.get(TABLE_TYPE_KEY);\n+    Preconditions.checkState(tableTypeString != null, FIELD_MISSING_MESSAGE_TEMPLATE, TABLE_TYPE_KEY);\n+    TableType tableType = TableType.valueOf(tableTypeString.toUpperCase());\n+\n+    String tableNameString = simpleFields.get(TABLE_NAME_KEY);\n+    Preconditions.checkState(tableNameString != null, FIELD_MISSING_MESSAGE_TEMPLATE, TABLE_NAME_KEY);\n+    String tableName = TableNameBuilder.forType(tableType).tableNameWithType(tableNameString);\n+\n+    String validationConfigString = simpleFields.get(VALIDATION_CONFIG_KEY);\n+    Preconditions.checkState(validationConfigString != null, FIELD_MISSING_MESSAGE_TEMPLATE, VALIDATION_CONFIG_KEY);\n     SegmentsValidationAndRetentionConfig validationConfig =\n-        JsonUtils.stringToObject(simpleFields.get(VALIDATION_CONFIG_KEY), SegmentsValidationAndRetentionConfig.class);\n-    TenantConfig tenantConfig = JsonUtils.stringToObject(simpleFields.get(TENANT_CONFIG_KEY), TenantConfig.class);\n-    IndexingConfig indexingConfig =\n-        JsonUtils.stringToObject(simpleFields.get(INDEXING_CONFIG_KEY), IndexingConfig.class);\n-    TableCustomConfig customConfig =\n-        JsonUtils.stringToObject(simpleFields.get(CUSTOM_CONFIG_KEY), TableCustomConfig.class);\n+        JsonUtils.stringToObject(validationConfigString, SegmentsValidationAndRetentionConfig.class);\n+\n+    String tenantConfigString = simpleFields.get(TENANT_CONFIG_KEY);\n+    Preconditions.checkState(tenantConfigString != null, FIELD_MISSING_MESSAGE_TEMPLATE, TENANT_CONFIG_KEY);\n+    TenantConfig tenantConfig = JsonUtils.stringToObject(tenantConfigString, TenantConfig.class);\n+\n+    String indexingConfigString = simpleFields.get(INDEXING_CONFIG_KEY);\n+    Preconditions.checkState(indexingConfigString != null, FIELD_MISSING_MESSAGE_TEMPLATE, INDEXING_CONFIG_KEY);\n+    IndexingConfig indexingConfig = JsonUtils.stringToObject(indexingConfigString, IndexingConfig.class);\n+\n+    String customConfigString = simpleFields.get(CUSTOM_CONFIG_KEY);\n+    Preconditions.checkState(customConfigString != null, FIELD_MISSING_MESSAGE_TEMPLATE, CUSTOM_CONFIG_KEY);\n+    TableCustomConfig customConfig = JsonUtils.stringToObject(customConfigString, TableCustomConfig.class);\n+\n+    // Optional fields\n     QuotaConfig quotaConfig = null;\n     String quotaConfigString = simpleFields.get(QUOTA_CONFIG_KEY);\n     if (quotaConfigString != null) {\n       quotaConfig = JsonUtils.stringToObject(quotaConfigString, QuotaConfig.class);\n       quotaConfig.validate();\n     }\n+\n     TableTaskConfig taskConfig = null;\n     String taskConfigString = simpleFields.get(TASK_CONFIG_KEY);\n     if (taskConfigString != null) {\n       taskConfig = JsonUtils.stringToObject(taskConfigString, TableTaskConfig.class);\n     }\n-    String routingConfigString = simpleFields.get(ROUTING_CONFIG_KEY);\n \n     RoutingConfig routingConfig = null;\n+    String routingConfigString = simpleFields.get(ROUTING_CONFIG_KEY);\n     if (routingConfigString != null) {\n       routingConfig = JsonUtils.stringToObject(routingConfigString, RoutingConfig.class);\n     }\n@@ -215,84 +254,94 @@ public static TableConfig fromZnRecord(@Nonnull ZNRecord znRecord)\n         quotaConfig, taskConfig, routingConfig);\n   }\n \n-  @Nonnull\n-  public static ZNRecord toZnRecord(@Nonnull TableConfig tableConfig) {\n-    ZNRecord znRecord = new ZNRecord(tableConfig.getTableName());\n+  public ZNRecord toZNRecord()\n+      throws JsonProcessingException {\n+    validate();\n+\n     Map<String, String> simpleFields = new HashMap<>();\n-    simpleFields.put(TABLE_NAME_KEY, tableConfig._tableName);\n-    simpleFields.put(TABLE_TYPE_KEY, tableConfig._tableType.toString());\n-    try {\n-      simpleFields.put(VALIDATION_CONFIG_KEY, JsonUtils.objectToString(tableConfig._validationConfig));\n-      simpleFields.put(TENANT_CONFIG_KEY, JsonUtils.objectToString(tableConfig._tenantConfig));\n-      simpleFields.put(INDEXING_CONFIG_KEY, JsonUtils.objectToString(tableConfig._indexingConfig));\n-      simpleFields.put(CUSTOM_CONFIG_KEY, JsonUtils.objectToString(tableConfig._customConfig));\n-      if (tableConfig._quotaConfig != null) {\n-        simpleFields.put(QUOTA_CONFIG_KEY, JsonUtils.objectToString(tableConfig._quotaConfig));\n-      }\n-      if (tableConfig._taskConfig != null) {\n-        simpleFields.put(TASK_CONFIG_KEY, JsonUtils.objectToString(tableConfig._taskConfig));\n-      }\n-      if (tableConfig._routingConfig != null) {\n-        simpleFields.put(ROUTING_CONFIG_KEY, JsonUtils.objectToString(tableConfig._routingConfig));\n-      }\n-    } catch (IOException e) {\n-      throw new RuntimeException(e);\n+\n+    // Mandatory fields\n+    simpleFields.put(TABLE_NAME_KEY, _tableName);\n+    simpleFields.put(TABLE_TYPE_KEY, _tableType.toString());\n+    simpleFields.put(VALIDATION_CONFIG_KEY, JsonUtils.objectToString(_validationConfig));\n+    simpleFields.put(TENANT_CONFIG_KEY, JsonUtils.objectToString(_tenantConfig));\n+    simpleFields.put(INDEXING_CONFIG_KEY, JsonUtils.objectToString(_indexingConfig));\n+    simpleFields.put(CUSTOM_CONFIG_KEY, JsonUtils.objectToString(_customConfig));\n+\n+    // Optional fields\n+    if (_quotaConfig != null) {\n+      simpleFields.put(QUOTA_CONFIG_KEY, JsonUtils.objectToString(_quotaConfig));\n+    }\n+    if (_taskConfig != null) {\n+      simpleFields.put(TASK_CONFIG_KEY, JsonUtils.objectToString(_taskConfig));\n     }\n+    if (_routingConfig != null) {\n+      simpleFields.put(ROUTING_CONFIG_KEY, JsonUtils.objectToString(_routingConfig));\n+    }\n+\n+    ZNRecord znRecord = new ZNRecord(_tableName);\n     znRecord.setSimpleFields(simpleFields);\n     return znRecord;\n   }\n \n-  @Nonnull\n+  /**\n+   * Validates the table config.\n+   * TODO: revisit to see whether all the following fields are mandatory\n+   */\n+  public void validate() {\n+    Preconditions.checkState(_tableName != null, \"Table name is missing\");\n+    Preconditions.checkState(_tableType != null, \"Table type is missing\");\n+    Preconditions.checkState(_validationConfig != null, \"Validation config is missing\");\n+    Preconditions.checkState(_tenantConfig != null, \"Tenant config is missing\");\n+    Preconditions.checkState(_indexingConfig != null, \"Indexing config is missing\");\n+    Preconditions.checkState(_customConfig != null, \"Custom config is missing\");\n+  }\n+\n   public String getTableName() {\n     return _tableName;\n   }\n \n-  public void setTableName(@Nonnull String tableName) {\n+  public void setTableName(String tableName) {\n     _tableName = tableName;\n   }\n \n-  @Nonnull\n   public TableType getTableType() {\n     return _tableType;\n   }\n \n-  public void setTableType(@Nonnull TableType tableType) {\n+  public void setTableType(TableType tableType) {\n     _tableType = tableType;\n   }\n \n-  @Nonnull\n   public SegmentsValidationAndRetentionConfig getValidationConfig() {\n     return _validationConfig;\n   }\n \n-  public void setValidationConfig(@Nonnull SegmentsValidationAndRetentionConfig validationConfig) {\n+  public void setValidationConfig(SegmentsValidationAndRetentionConfig validationConfig) {\n     _validationConfig = validationConfig;\n   }\n \n-  @Nonnull\n   public TenantConfig getTenantConfig() {\n     return _tenantConfig;\n   }\n \n-  public void setTenantConfig(@Nonnull TenantConfig tenantConfig) {\n+  public void setTenantConfig(TenantConfig tenantConfig) {\n     _tenantConfig = tenantConfig;\n   }\n \n-  @Nonnull\n   public IndexingConfig getIndexingConfig() {\n     return _indexingConfig;\n   }\n \n-  public void setIndexingConfig(@Nonnull IndexingConfig indexingConfig) {\n+  public void setIndexingConfig(IndexingConfig indexingConfig) {\n     _indexingConfig = indexingConfig;\n   }\n \n-  @Nonnull\n   public TableCustomConfig getCustomConfig() {\n     return _customConfig;\n   }\n \n-  public void setCustomConfig(@Nonnull TableCustomConfig customConfig) {\n+  public void setCustomConfig(TableCustomConfig customConfig) {\n     _customConfig = customConfig;\n   }\n \n@@ -301,7 +350,7 @@ public QuotaConfig getQuotaConfig() {\n     return _quotaConfig;\n   }\n \n-  public void setQuotaConfig(@Nullable QuotaConfig quotaConfig) {\n+  public void setQuotaConfig(QuotaConfig quotaConfig) {\n     _quotaConfig = quotaConfig;\n   }\n \n@@ -310,7 +359,7 @@ public TableTaskConfig getTaskConfig() {\n     return _taskConfig;\n   }\n \n-  public void setTaskConfig(@Nullable TableTaskConfig taskConfig) {\n+  public void setTaskConfig(TableTaskConfig taskConfig) {\n     _taskConfig = taskConfig;\n   }\n \n@@ -323,16 +372,10 @@ public void setRoutingConfig(RoutingConfig routingConfig) {\n     _routingConfig = routingConfig;\n   }\n \n-  @Nonnull\n-  public String toJSONConfigString()\n-      throws IOException {\n-    return toJSONConfig(this).toString();\n-  }\n-\n   @Override\n   public String toString() {\n     try {\n-      return JsonUtils.objectToPrettyString(toJSONConfig(this));\n+      return JsonUtils.objectToPrettyString(toJsonConfig());\n     } catch (JsonProcessingException e) {\n       throw new RuntimeException(e);\n     }",
                "changes": 235
            },
            {
                "status": "modified",
                "additions": 195,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-common/src/test/java/org/apache/pinot/common/config/TableConfigTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-common/src/test/java/org/apache/pinot/common/config/TableConfigTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-common/src/test/java/org/apache/pinot/common/config/TableConfigTest.java",
                "deletions": 141,
                "sha": "38210942a5bd2025076bddf0569c7278bdae5528",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-common/src/test/java/org/apache/pinot/common/config/TableConfigTest.java",
                "patch": "@@ -18,21 +18,95 @@\n  */\n package org.apache.pinot.common.config;\n \n-import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.node.ObjectNode;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n-import org.apache.helix.ZNRecord;\n import org.apache.pinot.common.data.StarTreeIndexSpec;\n import org.apache.pinot.common.utils.CommonConstants.Helix.TableType;\n import org.apache.pinot.startree.hll.HllConfig;\n-import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import static org.testng.Assert.*;\n+\n \n public class TableConfigTest {\n \n+  @Test\n+  public void testSerializeMandatoryFields()\n+      throws Exception {\n+    TableConfig tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setTableName(null);\n+    testSerializeMandatoryFields(tableConfig, \"Table name\");\n+\n+    tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setTableType(null);\n+    testSerializeMandatoryFields(tableConfig, \"Table type\");\n+\n+    tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setValidationConfig(null);\n+    testSerializeMandatoryFields(tableConfig, \"Validation config\");\n+\n+    tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setTenantConfig(null);\n+    testSerializeMandatoryFields(tableConfig, \"Tenant config\");\n+\n+    tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setIndexingConfig(null);\n+    testSerializeMandatoryFields(tableConfig, \"Indexing config\");\n+\n+    tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    tableConfig.setCustomConfig(null);\n+    testSerializeMandatoryFields(tableConfig, \"Custom config\");\n+  }\n+\n+  private void testSerializeMandatoryFields(TableConfig tableConfig, String expectedMessage)\n+      throws Exception {\n+    try {\n+      tableConfig.toJsonConfig();\n+      fail();\n+    } catch (IllegalStateException e) {\n+      assertTrue(e.getMessage().contains(expectedMessage));\n+    }\n+    try {\n+      tableConfig.toZNRecord();\n+      fail();\n+    } catch (IllegalStateException e) {\n+      assertTrue(e.getMessage().contains(expectedMessage));\n+    }\n+  }\n+\n+  @Test\n+  public void testDeserializeMandatoryFields()\n+      throws Exception {\n+    TableConfig tableConfig = new TableConfig.Builder(TableType.OFFLINE).setTableName(\"myTable\").build();\n+    ObjectNode jsonTableConfig = tableConfig.toJsonConfig();\n+    TableConfig.fromJsonConfig(jsonTableConfig);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.TABLE_TYPE_KEY);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.TABLE_NAME_KEY);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.VALIDATION_CONFIG_KEY);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.TENANT_CONFIG_KEY);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.INDEXING_CONFIG_KEY);\n+\n+    testDeserializeMandatoryFields(jsonTableConfig.deepCopy(), TableConfig.CUSTOM_CONFIG_KEY);\n+  }\n+\n+  private void testDeserializeMandatoryFields(ObjectNode jsonTableConfig, String mandatoryFieldKey)\n+      throws Exception {\n+    jsonTableConfig.remove(mandatoryFieldKey);\n+    try {\n+      TableConfig.fromJsonConfig(jsonTableConfig);\n+      fail();\n+    } catch (IllegalStateException e) {\n+      assertTrue(e.getMessage().contains(mandatoryFieldKey));\n+    }\n+  }\n+\n   @Test\n   public void testSerializeDeserialize()\n       throws Exception {\n@@ -41,136 +115,122 @@ public void testSerializeDeserialize()\n       // No quota config\n       TableConfig tableConfig = tableConfigBuilder.build();\n \n-      Assert.assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n-      Assert.assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n-      Assert.assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n-      Assert.assertNull(tableConfig.getQuotaConfig());\n+      assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n+      assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n+      assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n+      assertNull(tableConfig.getQuotaConfig());\n \n       // Serialize\n-      JsonNode jsonTableConfig = TableConfig.toJSONConfig(tableConfig);\n+      ObjectNode jsonTableConfig = tableConfig.toJsonConfig();\n       // All nested configs should be json objects instead of serialized strings\n-      Assert.assertTrue(jsonTableConfig.get(TableConfig.VALIDATION_CONFIG_KEY) instanceof ObjectNode);\n-      Assert.assertTrue(jsonTableConfig.get(TableConfig.TENANT_CONFIG_KEY) instanceof ObjectNode);\n-      Assert.assertTrue(jsonTableConfig.get(TableConfig.INDEXING_CONFIG_KEY) instanceof ObjectNode);\n-      Assert.assertTrue(jsonTableConfig.get(TableConfig.CUSTOM_CONFIG_KEY) instanceof ObjectNode);\n+      assertTrue(jsonTableConfig.get(TableConfig.VALIDATION_CONFIG_KEY) instanceof ObjectNode);\n+      assertTrue(jsonTableConfig.get(TableConfig.TENANT_CONFIG_KEY) instanceof ObjectNode);\n+      assertTrue(jsonTableConfig.get(TableConfig.INDEXING_CONFIG_KEY) instanceof ObjectNode);\n+      assertTrue(jsonTableConfig.get(TableConfig.CUSTOM_CONFIG_KEY) instanceof ObjectNode);\n \n       // De-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(jsonTableConfig);\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNull(tableConfigToCompare.getQuotaConfig());\n-      Assert.assertNull(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig());\n-      Assert.assertNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n-\n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNull(tableConfigToCompare.getQuotaConfig());\n-      Assert.assertNull(tableConfig.getValidationConfig().getReplicaGroupStrategyConfig());\n-      Assert.assertNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(jsonTableConfig);\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNull(tableConfigToCompare.getQuotaConfig());\n+      assertNull(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig());\n+      assertNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n+\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNull(tableConfigToCompare.getQuotaConfig());\n+      assertNull(tableConfig.getValidationConfig().getReplicaGroupStrategyConfig());\n+      assertNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n     }\n     {\n       // With quota config\n       QuotaConfig quotaConfig = new QuotaConfig();\n       quotaConfig.setStorage(\"30G\");\n       TableConfig tableConfig = tableConfigBuilder.setQuotaConfig(quotaConfig).build();\n \n-      Assert.assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n-      Assert.assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n-      Assert.assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n-      Assert.assertNotNull(tableConfig.getQuotaConfig());\n-      Assert.assertEquals(tableConfig.getQuotaConfig().getStorage(), \"30G\");\n-      Assert.assertNull(tableConfig.getQuotaConfig().getMaxQueriesPerSecond());\n+      assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n+      assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n+      assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n+      assertNotNull(tableConfig.getQuotaConfig());\n+      assertEquals(tableConfig.getQuotaConfig().getStorage(), \"30G\");\n+      assertNull(tableConfig.getQuotaConfig().getMaxQueriesPerSecond());\n \n       // With qps quota\n       quotaConfig.setMaxQueriesPerSecond(\"100.00\");\n       tableConfig = tableConfigBuilder.setQuotaConfig(quotaConfig).build();\n-      Assert.assertNotNull(tableConfig.getQuotaConfig());\n-      Assert.assertNotNull(tableConfig.getQuotaConfig().getMaxQueriesPerSecond());\n-      Assert.assertEquals(tableConfig.getQuotaConfig().getMaxQueriesPerSecond(), \"100.00\");\n+      assertNotNull(tableConfig.getQuotaConfig());\n+      assertNotNull(tableConfig.getQuotaConfig().getMaxQueriesPerSecond());\n+      assertEquals(tableConfig.getQuotaConfig().getMaxQueriesPerSecond(), \"100.00\");\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getQuotaConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getQuotaConfig().getStorage(), tableConfig.getQuotaConfig().getStorage());\n-\n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getQuotaConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getQuotaConfig().getStorage(), tableConfig.getQuotaConfig().getStorage());\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getQuotaConfig());\n+      assertEquals(tableConfigToCompare.getQuotaConfig().getStorage(), tableConfig.getQuotaConfig().getStorage());\n+\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getQuotaConfig());\n+      assertEquals(tableConfigToCompare.getQuotaConfig().getStorage(), tableConfig.getQuotaConfig().getStorage());\n     }\n     {\n       // With tenant config\n       TableConfig tableConfig =\n           tableConfigBuilder.setServerTenant(\"aServerTenant\").setBrokerTenant(\"aBrokerTenant\").build();\n \n-      Assert.assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n-      Assert.assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n-      Assert.assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n-      Assert.assertNotNull(tableConfig.getTenantConfig());\n-      Assert.assertEquals(tableConfig.getTenantConfig().getServer(), \"aServerTenant\");\n-      Assert.assertEquals(tableConfig.getTenantConfig().getBroker(), \"aBrokerTenant\");\n-      Assert.assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n+      assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n+      assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n+      assertEquals(tableConfig.getIndexingConfig().getLoadMode(), \"HEAP\");\n+      assertNotNull(tableConfig.getTenantConfig());\n+      assertEquals(tableConfig.getTenantConfig().getServer(), \"aServerTenant\");\n+      assertEquals(tableConfig.getTenantConfig().getBroker(), \"aBrokerTenant\");\n+      assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n-      Assert.assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n-\n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n-      Assert.assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getTenantConfig());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n+      assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n+\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getTenantConfig());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n+      assertNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n \n       TagOverrideConfig tagOverrideConfig = new TagOverrideConfig();\n       tagOverrideConfig.setRealtimeConsuming(\"aRTConsumingTag_REALTIME\");\n       tableConfig = tableConfigBuilder.setTagOverrideConfig(tagOverrideConfig).build();\n \n-      Assert.assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n-      Assert.assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n-      Assert.assertNotNull(tableConfig.getTenantConfig());\n-      Assert.assertEquals(tableConfig.getTenantConfig().getServer(), \"aServerTenant\");\n-      Assert.assertEquals(tableConfig.getTenantConfig().getBroker(), \"aBrokerTenant\");\n-      Assert.assertNotNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n-      Assert.assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig().getRealtimeConsuming(),\n+      assertEquals(tableConfig.getTableName(), \"myTable_OFFLINE\");\n+      assertEquals(tableConfig.getTableType(), TableType.OFFLINE);\n+      assertNotNull(tableConfig.getTenantConfig());\n+      assertEquals(tableConfig.getTenantConfig().getServer(), \"aServerTenant\");\n+      assertEquals(tableConfig.getTenantConfig().getBroker(), \"aBrokerTenant\");\n+      assertNotNull(tableConfig.getTenantConfig().getTagOverrideConfig());\n+      assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig().getRealtimeConsuming(),\n           \"aRTConsumingTag_REALTIME\");\n-      Assert.assertNull(tableConfig.getTenantConfig().getTagOverrideConfig().getRealtimeCompleted());\n+      assertNull(tableConfig.getTenantConfig().getTagOverrideConfig().getRealtimeCompleted());\n \n       // Serialize then de-serialize\n-      tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n-      Assert.assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig(),\n+      tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getTenantConfig());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n+      assertNotNull(tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n+      assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig(),\n           tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n \n-      znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n-      Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n-      Assert\n-          .assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n-      Assert.assertNotNull(tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n-      Assert.assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig(),\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n+      assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+      assertNotNull(tableConfigToCompare.getTenantConfig());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getServer(), tableConfig.getTenantConfig().getServer());\n+      assertEquals(tableConfigToCompare.getTenantConfig().getBroker(), tableConfig.getTenantConfig().getBroker());\n+      assertNotNull(tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n+      assertEquals(tableConfig.getTenantConfig().getTagOverrideConfig(),\n           tableConfigToCompare.getTenantConfig().getTagOverrideConfig());\n     }\n     {\n@@ -185,36 +245,32 @@ public void testSerializeDeserialize()\n       tableConfig.getValidationConfig().setReplicaGroupStrategyConfig(replicaGroupConfig);\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n       checkTableConfigWithAssignmentConfig(tableConfig, tableConfigToCompare);\n \n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n       checkTableConfigWithAssignmentConfig(tableConfig, tableConfigToCompare);\n     }\n     {\n       // With default StreamConsumptionConfig\n       TableConfig tableConfig = tableConfigBuilder.build();\n-      Assert.assertEquals(\n-          tableConfig.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n+      assertEquals(tableConfig.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n           \"UniformStreamPartitionAssignment\");\n \n       // with streamConsumptionConfig set\n       tableConfig =\n           tableConfigBuilder.setStreamPartitionAssignmentStrategy(\"BalancedStreamPartitionAssignment\").build();\n-      Assert.assertEquals(\n-          tableConfig.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n+      assertEquals(tableConfig.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n           \"BalancedStreamPartitionAssignment\");\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n-      Assert.assertEquals(\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n+      assertEquals(\n           tableConfigToCompare.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n           \"BalancedStreamPartitionAssignment\");\n \n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n-      Assert.assertEquals(\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n+      assertEquals(\n           tableConfigToCompare.getIndexingConfig().getStreamConsumptionConfig().getStreamPartitionAssignmentStrategy(),\n           \"BalancedStreamPartitionAssignment\");\n     }\n@@ -233,11 +289,10 @@ public void testSerializeDeserialize()\n       tableConfig.getIndexingConfig().setStarTreeIndexSpec(starTreeIndexSpec);\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n       checkTableConfigWithStarTreeConfig(tableConfig, tableConfigToCompare);\n \n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n       checkTableConfigWithStarTreeConfig(tableConfig, tableConfigToCompare);\n     }\n     {\n@@ -253,68 +308,67 @@ public void testSerializeDeserialize()\n \n       String hllConfigJson = hllConfig.toJsonString();\n       HllConfig newHllConfig = HllConfig.fromJsonString(hllConfigJson);\n-      Assert.assertEquals(hllConfig.getColumnsToDeriveHllFields(), newHllConfig.getColumnsToDeriveHllFields());\n-      Assert.assertEquals(hllConfig.getHllLog2m(), newHllConfig.getHllLog2m());\n-      Assert.assertEquals(hllConfig.getHllDeriveColumnSuffix(), newHllConfig.getHllDeriveColumnSuffix());\n+      assertEquals(hllConfig.getColumnsToDeriveHllFields(), newHllConfig.getColumnsToDeriveHllFields());\n+      assertEquals(hllConfig.getHllLog2m(), newHllConfig.getHllLog2m());\n+      assertEquals(hllConfig.getHllDeriveColumnSuffix(), newHllConfig.getHllDeriveColumnSuffix());\n \n       TableConfig tableConfig = tableConfigBuilder.build();\n       tableConfig.getValidationConfig().setHllConfig(hllConfig);\n \n       // Serialize then de-serialize\n-      TableConfig tableConfigToCompare = TableConfig.fromJSONConfig(TableConfig.toJSONConfig(tableConfig));\n+      TableConfig tableConfigToCompare = TableConfig.fromJsonConfig(tableConfig.toJsonConfig());\n       checkTableConfigWithHllConfig(tableConfig, tableConfigToCompare);\n \n-      ZNRecord znRecord = TableConfig.toZnRecord(tableConfig);\n-      tableConfigToCompare = TableConfig.fromZnRecord(znRecord);\n+      tableConfigToCompare = TableConfig.fromZnRecord(tableConfig.toZNRecord());\n       checkTableConfigWithHllConfig(tableConfig, tableConfigToCompare);\n     }\n   }\n \n   private void checkTableConfigWithAssignmentConfig(TableConfig tableConfig, TableConfig tableConfigToCompare) {\n     // Check that the segment assignment configuration does exist.\n-    Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-    Assert.assertNotNull(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig());\n-    Assert.assertEquals(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig(),\n+    assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+    assertNotNull(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig());\n+    assertEquals(tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig(),\n         tableConfig.getValidationConfig().getReplicaGroupStrategyConfig());\n \n     // Check that the configurations are correct.\n     ReplicaGroupStrategyConfig strategyConfig =\n         tableConfigToCompare.getValidationConfig().getReplicaGroupStrategyConfig();\n-    Assert.assertTrue(strategyConfig.getMirrorAssignmentAcrossReplicaGroups());\n-    Assert.assertEquals(strategyConfig.getNumInstancesPerPartition(), 5);\n-    Assert.assertEquals(strategyConfig.getPartitionColumn(), \"memberId\");\n+    assertTrue(strategyConfig.getMirrorAssignmentAcrossReplicaGroups());\n+    assertEquals(strategyConfig.getNumInstancesPerPartition(), 5);\n+    assertEquals(strategyConfig.getPartitionColumn(), \"memberId\");\n   }\n \n   private void checkTableConfigWithStarTreeConfig(TableConfig tableConfig, TableConfig tableConfigToCompare)\n       throws Exception {\n     // Check that the segment assignment configuration does exist.\n-    Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-    Assert.assertNotNull(tableConfigToCompare.getIndexingConfig().getStarTreeIndexSpec());\n+    assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+    assertNotNull(tableConfigToCompare.getIndexingConfig().getStarTreeIndexSpec());\n \n     // Check that the configurations are correct.\n     StarTreeIndexSpec starTreeIndexSpec = tableConfigToCompare.getIndexingConfig().getStarTreeIndexSpec();\n \n     Set<String> dims = new HashSet<>();\n     dims.add(\"dims\");\n \n-    Assert.assertEquals(starTreeIndexSpec.getDimensionsSplitOrder(), Collections.singletonList(\"dim\"));\n-    Assert.assertEquals(starTreeIndexSpec.getMaxLeafRecords(), 5);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipMaterializationCardinalityThreshold(), 1);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipMaterializationForDimensions(), dims);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipStarNodeCreationForDimensions(), dims);\n+    assertEquals(starTreeIndexSpec.getDimensionsSplitOrder(), Collections.singletonList(\"dim\"));\n+    assertEquals(starTreeIndexSpec.getMaxLeafRecords(), 5);\n+    assertEquals(starTreeIndexSpec.getSkipMaterializationCardinalityThreshold(), 1);\n+    assertEquals(starTreeIndexSpec.getSkipMaterializationForDimensions(), dims);\n+    assertEquals(starTreeIndexSpec.getSkipStarNodeCreationForDimensions(), dims);\n \n     starTreeIndexSpec = StarTreeIndexSpec.fromJsonString(starTreeIndexSpec.toJsonString());\n-    Assert.assertEquals(starTreeIndexSpec.getDimensionsSplitOrder(), Collections.singletonList(\"dim\"));\n-    Assert.assertEquals(starTreeIndexSpec.getMaxLeafRecords(), 5);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipMaterializationCardinalityThreshold(), 1);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipMaterializationForDimensions(), dims);\n-    Assert.assertEquals(starTreeIndexSpec.getSkipStarNodeCreationForDimensions(), dims);\n+    assertEquals(starTreeIndexSpec.getDimensionsSplitOrder(), Collections.singletonList(\"dim\"));\n+    assertEquals(starTreeIndexSpec.getMaxLeafRecords(), 5);\n+    assertEquals(starTreeIndexSpec.getSkipMaterializationCardinalityThreshold(), 1);\n+    assertEquals(starTreeIndexSpec.getSkipMaterializationForDimensions(), dims);\n+    assertEquals(starTreeIndexSpec.getSkipStarNodeCreationForDimensions(), dims);\n   }\n \n   private void checkTableConfigWithHllConfig(TableConfig tableConfig, TableConfig tableConfigToCompare) {\n     // Check that the segment assignment configuration does exist.\n-    Assert.assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n-    Assert.assertNotNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n+    assertEquals(tableConfigToCompare.getTableName(), tableConfig.getTableName());\n+    assertNotNull(tableConfigToCompare.getValidationConfig().getHllConfig());\n \n     // Check that the configurations are correct.\n     HllConfig hllConfig = tableConfigToCompare.getValidationConfig().getHllConfig();\n@@ -323,8 +377,8 @@ private void checkTableConfigWithHllConfig(TableConfig tableConfig, TableConfig\n     columns.add(\"column\");\n     columns.add(\"column2\");\n \n-    Assert.assertEquals(hllConfig.getColumnsToDeriveHllFields(), columns);\n-    Assert.assertEquals(hllConfig.getHllLog2m(), 9);\n-    Assert.assertEquals(hllConfig.getHllDeriveColumnSuffix(), \"suffix\");\n+    assertEquals(hllConfig.getColumnsToDeriveHllFields(), columns);\n+    assertEquals(hllConfig.getHllLog2m(), 9);\n+    assertEquals(hllConfig.getHllDeriveColumnSuffix(), \"suffix\");\n   }\n }",
                "changes": 336
            },
            {
                "status": "modified",
                "additions": 74,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableConfigRestletResource.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableConfigRestletResource.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableConfigRestletResource.java",
                "deletions": 66,
                "sha": "01d5fdf7ffac74233d369bddf0cd8d2db7e41949",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableConfigRestletResource.java",
                "patch": "@@ -94,93 +94,101 @@ public Response readTableConfiguration(@PathParam(\"tableName\") String tableName,\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"/v2/tables\")\n   public Response createNewTable(String tableConfiguration) {\n-    CombinedConfig config = null;\n-\n     try {\n-      config = Deserializer.deserializeFromString(CombinedConfig.class, tableConfiguration);\n-    } catch (Exception e) {\n-      LOGGER.warn(\"Caught exception while deserializing the table configuration\", e);\n-      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN_TYPE).build();\n-    }\n+      CombinedConfig config;\n \n-    if (config == null) {\n-      LOGGER.warn(\"Failed to deserialize the table configuration: {}\", tableConfiguration);\n-      return Response.serverError().entity(\"Failed to deserialize the table configuration\")\n-          .type(MediaType.TEXT_PLAIN_TYPE).build();\n-    }\n+      try {\n+        config = Deserializer.deserializeFromString(CombinedConfig.class, tableConfiguration);\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Caught exception while deserializing the table configuration\", e);\n+        return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN_TYPE).build();\n+      }\n \n-    if (config.getSchema() != null) {\n-      _resourceManager.addOrUpdateSchema(config.getSchema());\n-    }\n+      if (config == null) {\n+        LOGGER.warn(\"Failed to deserialize the table configuration: {}\", tableConfiguration);\n+        return Response.serverError().entity(\"Failed to deserialize the table configuration\")\n+            .type(MediaType.TEXT_PLAIN_TYPE).build();\n+      }\n \n-    if (config.getOfflineTableConfig() != null) {\n-      _resourceManager.addTable(config.getOfflineTableConfig());\n-    }\n+      if (config.getSchema() != null) {\n+        _resourceManager.addOrUpdateSchema(config.getSchema());\n+      }\n \n-    if (config.getRealtimeTableConfig() != null) {\n-      _resourceManager.addTable(config.getRealtimeTableConfig());\n-    }\n+      if (config.getOfflineTableConfig() != null) {\n+        _resourceManager.addTable(config.getOfflineTableConfig());\n+      }\n \n-    return Response.ok().build();\n+      if (config.getRealtimeTableConfig() != null) {\n+        _resourceManager.addTable(config.getRealtimeTableConfig());\n+      }\n+\n+      return Response.ok().build();\n+    } catch (Exception e) {\n+      throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.INTERNAL_SERVER_ERROR, e);\n+    }\n   }\n \n   @PUT\n   @Produces(MediaType.APPLICATION_JSON)\n   @Path(\"/v2/tables/{tableName}\")\n   public Response updateTable(String tableConfiguration) {\n-    CombinedConfig config = null;\n-\n     try {\n-      config = Deserializer.deserializeFromString(CombinedConfig.class, tableConfiguration);\n-    } catch (Exception e) {\n-      LOGGER.warn(\"Caught exception while deserializing the table configuration\", e);\n-      return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN_TYPE).build();\n-    }\n+      CombinedConfig config;\n \n-    if (config == null) {\n-      LOGGER.warn(\"Failed to deserialize the table configuration: {}\", tableConfiguration);\n-      return Response.serverError().entity(\"Failed to deserialize the table configuration\")\n-          .type(MediaType.TEXT_PLAIN_TYPE).build();\n-    }\n+      try {\n+        config = Deserializer.deserializeFromString(CombinedConfig.class, tableConfiguration);\n+      } catch (Exception e) {\n+        LOGGER.warn(\"Caught exception while deserializing the table configuration\", e);\n+        return Response.serverError().entity(e.getMessage()).type(MediaType.TEXT_PLAIN_TYPE).build();\n+      }\n \n-    if (config.getSchema() != null) {\n-      _resourceManager.addOrUpdateSchema(config.getSchema());\n-    }\n+      if (config == null) {\n+        LOGGER.warn(\"Failed to deserialize the table configuration: {}\", tableConfiguration);\n+        return Response.serverError().entity(\"Failed to deserialize the table configuration\")\n+            .type(MediaType.TEXT_PLAIN_TYPE).build();\n+      }\n \n-    if (config.getOfflineTableConfig() != null) {\n-      if (_resourceManager.getAllTables().contains(config.getOfflineTableConfig().getTableName())) {\n-        try {\n-          _resourceManager\n-              .setExistingTableConfig(config.getOfflineTableConfig(), config.getOfflineTableConfig().getTableName(),\n-                  CommonConstants.Helix.TableType.OFFLINE);\n-        } catch (IOException e) {\n-          LOGGER.warn(\"Failed to update the offline table configuration for table {}\", e,\n-              config.getOfflineTableConfig().getTableName());\n-          return Response.serverError().entity(\"Failed to update the offline table configuration\")\n-              .type(MediaType.TEXT_PLAIN_TYPE).build();\n+      if (config.getSchema() != null) {\n+        _resourceManager.addOrUpdateSchema(config.getSchema());\n+      }\n+\n+      if (config.getOfflineTableConfig() != null) {\n+        if (_resourceManager.getAllTables().contains(config.getOfflineTableConfig().getTableName())) {\n+          try {\n+            _resourceManager\n+                .setExistingTableConfig(config.getOfflineTableConfig(), config.getOfflineTableConfig().getTableName(),\n+                    CommonConstants.Helix.TableType.OFFLINE);\n+          } catch (IOException e) {\n+            LOGGER.warn(\"Failed to update the offline table configuration for table {}\", e,\n+                config.getOfflineTableConfig().getTableName());\n+            return Response.serverError().entity(\"Failed to update the offline table configuration\")\n+                .type(MediaType.TEXT_PLAIN_TYPE).build();\n+          }\n+        } else {\n+          _resourceManager.addTable(config.getOfflineTableConfig());\n         }\n-      } else {\n-        _resourceManager.addTable(config.getOfflineTableConfig());\n       }\n-    }\n \n-    if (config.getRealtimeTableConfig() != null) {\n-      if (_resourceManager.getAllTables().contains(config.getRealtimeTableConfig().getTableName())) {\n-        try {\n-          _resourceManager\n-              .setExistingTableConfig(config.getRealtimeTableConfig(), config.getRealtimeTableConfig().getTableName(),\n-                  CommonConstants.Helix.TableType.REALTIME);\n-        } catch (IOException e) {\n-          LOGGER.warn(\"Failed to update the realtime table configuration for table {}\", e,\n-              config.getRealtimeTableConfig().getTableName());\n-          return Response.serverError().entity(\"Failed to update the realtime table configuration\")\n-              .type(MediaType.TEXT_PLAIN_TYPE).build();\n+      if (config.getRealtimeTableConfig() != null) {\n+        if (_resourceManager.getAllTables().contains(config.getRealtimeTableConfig().getTableName())) {\n+          try {\n+            _resourceManager\n+                .setExistingTableConfig(config.getRealtimeTableConfig(), config.getRealtimeTableConfig().getTableName(),\n+                    CommonConstants.Helix.TableType.REALTIME);\n+          } catch (IOException e) {\n+            LOGGER.warn(\"Failed to update the realtime table configuration for table {}\", e,\n+                config.getRealtimeTableConfig().getTableName());\n+            return Response.serverError().entity(\"Failed to update the realtime table configuration\")\n+                .type(MediaType.TEXT_PLAIN_TYPE).build();\n+          }\n+        } else {\n+          _resourceManager.addTable(config.getRealtimeTableConfig());\n         }\n-      } else {\n-        _resourceManager.addTable(config.getRealtimeTableConfig());\n       }\n-    }\n \n-    return Response.ok().build();\n+      return Response.ok().build();\n+    } catch (Exception e) {\n+      throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.INTERNAL_SERVER_ERROR, e);\n+    }\n   }\n }",
                "changes": 140
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java",
                "deletions": 7,
                "sha": "a3b45e564800e18d776a21bebd5159fc383dfbc0",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java",
                "patch": "@@ -130,7 +130,7 @@ public SuccessResponse addTable(String tableConfigStr) {\n       } else if (e instanceof PinotHelixResourceManager.TableAlreadyExistsException) {\n         throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.CONFLICT, e);\n       } else {\n-        throw e;\n+        throw new ControllerApplicationException(LOGGER, e.getMessage(), Response.Status.INTERNAL_SERVER_ERROR, e);\n       }\n     }\n   }\n@@ -172,14 +172,14 @@ private String listTableConfigs(@Nonnull String tableName, @Nullable String tabl\n           && _pinotHelixResourceManager.hasOfflineTable(tableName)) {\n         TableConfig tableConfig = _pinotHelixResourceManager.getOfflineTableConfig(tableName);\n         Preconditions.checkNotNull(tableConfig);\n-        ret.set(CommonConstants.Helix.TableType.OFFLINE.name(), TableConfig.toJSONConfig(tableConfig));\n+        ret.set(CommonConstants.Helix.TableType.OFFLINE.name(), tableConfig.toJsonConfig());\n       }\n \n       if ((tableTypeStr == null || CommonConstants.Helix.TableType.REALTIME.name().equalsIgnoreCase(tableTypeStr))\n           && _pinotHelixResourceManager.hasRealtimeTable(tableName)) {\n         TableConfig tableConfig = _pinotHelixResourceManager.getRealtimeTableConfig(tableName);\n         Preconditions.checkNotNull(tableConfig);\n-        ret.set(CommonConstants.Helix.TableType.REALTIME.name(), TableConfig.toJSONConfig(tableConfig));\n+        ret.set(CommonConstants.Helix.TableType.REALTIME.name(), tableConfig.toJsonConfig());\n       }\n       return ret.toString();\n     } catch (Exception e) {\n@@ -325,11 +325,9 @@ public String checkTableConfig(String tableConfigStr) {\n       ObjectNode tableConfigValidateStr = JsonUtils.newObjectNode();\n       TableConfig tableConfig = TableConfig.fromJsonString(tableConfigStr);\n       if (tableConfig.getTableType() == CommonConstants.Helix.TableType.OFFLINE) {\n-        tableConfigValidateStr\n-            .set(CommonConstants.Helix.TableType.OFFLINE.name(), TableConfig.toJSONConfig(tableConfig));\n+        tableConfigValidateStr.set(CommonConstants.Helix.TableType.OFFLINE.name(), tableConfig.toJsonConfig());\n       } else {\n-        tableConfigValidateStr\n-            .set(CommonConstants.Helix.TableType.REALTIME.name(), TableConfig.toJSONConfig(tableConfig));\n+        tableConfigValidateStr.set(CommonConstants.Helix.TableType.REALTIME.name(), tableConfig.toJsonConfig());\n       }\n       return tableConfigValidateStr.toString();\n     } catch (Exception e) {",
                "changes": 12
            },
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "deletions": 7,
                "sha": "5e15bff739afcabe254bd69db92a589aaea700c0",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
                "patch": "@@ -1009,7 +1009,8 @@ public Schema getTableSchema(@Nonnull String tableName) {\n    * @throws InvalidTableConfigException\n    * @throws TableAlreadyExistsException for offline tables only if the table already exists\n    */\n-  public void addTable(@Nonnull TableConfig tableConfig) {\n+  public void addTable(@Nonnull TableConfig tableConfig)\n+      throws IOException {\n     final String tableNameWithType = tableConfig.getTableName();\n \n     TenantConfig tenantConfig;\n@@ -1086,8 +1087,7 @@ public void addTable(@Nonnull TableConfig tableConfig) {\n         LOGGER.info(\"successfully added the table : \" + tableNameWithType + \" to the cluster\");\n \n         // lets add table configs\n-        ZKMetadataProvider\n-            .setOfflineTableConfig(_propertyStore, tableNameWithType, TableConfig.toZnRecord(tableConfig));\n+        ZKMetadataProvider.setOfflineTableConfig(_propertyStore, tableNameWithType, tableConfig.toZNRecord());\n \n         _propertyStore.create(ZKMetadataProvider.constructPropertyStorePathForResource(tableNameWithType),\n             new ZNRecord(tableNameWithType), AccessOption.PERSISTENT);\n@@ -1109,8 +1109,7 @@ public void addTable(@Nonnull TableConfig tableConfig) {\n         }\n \n         // lets add table configs\n-        ZKMetadataProvider\n-            .setRealtimeTableConfig(_propertyStore, tableNameWithType, TableConfig.toZnRecord(tableConfig));\n+        ZKMetadataProvider.setRealtimeTableConfig(_propertyStore, tableNameWithType, tableConfig.toZNRecord());\n \n         /*\n          * PinotRealtimeSegmentManager sets up watches on table and segment path. When a table gets created,\n@@ -1248,13 +1247,13 @@ private void createHelixEntriesForHighLevelConsumer(TableConfig config, String r\n   public void setExistingTableConfig(TableConfig config, String tableNameWithType, TableType type)\n       throws IOException {\n     if (type == TableType.REALTIME) {\n-      ZKMetadataProvider.setRealtimeTableConfig(_propertyStore, tableNameWithType, TableConfig.toZnRecord(config));\n+      ZKMetadataProvider.setRealtimeTableConfig(_propertyStore, tableNameWithType, config.toZNRecord());\n       ensureRealtimeClusterIsSetUp(config, tableNameWithType, config.getIndexingConfig());\n     } else if (type == TableType.OFFLINE) {\n       // Update replica group partition assignment to the property store if applicable\n       updateReplicaGroupPartitionAssignment(config);\n \n-      ZKMetadataProvider.setOfflineTableConfig(_propertyStore, tableNameWithType, TableConfig.toZnRecord(config));\n+      ZKMetadataProvider.setOfflineTableConfig(_propertyStore, tableNameWithType, config.toZNRecord());\n       IdealState idealState = _helixAdmin.getResourceIdealState(_helixClusterName, tableNameWithType);\n       final String configReplication = config.getValidationConfig().getReplication();\n       if (configReplication != null && !config.getValidationConfig().getReplication()",
                "changes": 13
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java",
                "deletions": 1,
                "sha": "26a5e464f0cbac822517e46934a0512566d5fccf",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java",
                "patch": "@@ -339,7 +339,7 @@ private boolean updateIndexConfig(String tableName, TableConfig tableConfig)\n     httpURLConnection.setRequestMethod(\"PUT\");\n \n     BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(httpURLConnection.getOutputStream(), \"UTF-8\"));\n-    writer.write(tableConfig.toJSONConfigString());\n+    writer.write(tableConfig.toJsonConfigString());\n     writer.flush();\n \n     BufferedReader reader = new BufferedReader(new InputStreamReader(httpURLConnection.getInputStream(), \"UTF-8\"));",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 17,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTableRestletResourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTableRestletResourceTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTableRestletResourceTest.java",
                "deletions": 17,
                "sha": "5dbe2305ae5e8d0e1c49c3f8bdcfa9826061893c",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTableRestletResourceTest.java",
                "patch": "@@ -109,7 +109,7 @@ public void testCreateTable()\n     TableConfig offlineTableConfig = _offlineBuilder.build();\n     offlineTableConfig.setTableName(\"bad__table__name\");\n     try {\n-      sendPostRequest(_createTableUrl, offlineTableConfig.toJSONConfigString());\n+      sendPostRequest(_createTableUrl, offlineTableConfig.toJsonConfigString());\n       Assert.fail(\"Creation of an OFFLINE table with two underscores in the table name does not fail\");\n     } catch (IOException e) {\n       // Expected 400 Bad Request\n@@ -118,7 +118,7 @@ public void testCreateTable()\n \n     // Create an OFFLINE table with a valid name which should succeed\n     offlineTableConfig.setTableName(\"valid_table_name\");\n-    String offlineTableJSONConfigString = offlineTableConfig.toJSONConfigString();\n+    String offlineTableJSONConfigString = offlineTableConfig.toJsonConfigString();\n     sendPostRequest(_createTableUrl, offlineTableJSONConfigString);\n \n     // Create an OFFLINE table that already exists which should fail\n@@ -134,7 +134,7 @@ public void testCreateTable()\n     offlineTableConfig.getValidationConfig().setReplication(\"abc\");\n     offlineTableConfig.setTableName(\"invalid_replication_table\");\n     try {\n-      sendPostRequest(_createTableUrl, offlineTableConfig.toJSONConfigString());\n+      sendPostRequest(_createTableUrl, offlineTableConfig.toJsonConfigString());\n       Assert.fail(\"Creation of an invalid OFFLINE table does not fail\");\n     } catch (IOException e) {\n       // Expected 400 Bad Request\n@@ -146,7 +146,7 @@ public void testCreateTable()\n     TableConfig realtimeTableConfig = _realtimeBuilder.build();\n     realtimeTableConfig.setTableName(\"bad__table__name\");\n     try {\n-      sendPostRequest(_createTableUrl, realtimeTableConfig.toJSONConfigString());\n+      sendPostRequest(_createTableUrl, realtimeTableConfig.toJsonConfigString());\n       Assert.fail(\"Creation of a REALTIME table with two underscores in the table name does not fail\");\n     } catch (IOException e) {\n       // Expected 400 Bad Request\n@@ -157,7 +157,7 @@ public void testCreateTable()\n     _realtimeBuilder.setSchemaName(\"invalidSchemaName\");\n     TableConfig invalidConfig = _realtimeBuilder.build();\n     try {\n-      sendPostRequest(_createTableUrl, realtimeTableConfig.toJSONConfigString());\n+      sendPostRequest(_createTableUrl, realtimeTableConfig.toJsonConfigString());\n       Assert.fail(\"Creation of a REALTIME table without a valid schema does not fail\");\n     } catch (IOException e) {\n       // Expected 400 Bad Request\n@@ -171,13 +171,13 @@ public void testCreateTable()\n     _realtimeBuilder.setTableName(\"RT_TABLE\");\n     addDummySchema(schemaName);\n     TableConfig diffConfig = _realtimeBuilder.build();\n-    sendPostRequest(_createTableUrl, diffConfig.toJSONConfigString());\n+    sendPostRequest(_createTableUrl, diffConfig.toJsonConfigString());\n \n     // Create a REALTIME table with a valid name and schema which should succeed\n     _realtimeBuilder.setTableName(REALTIME_TABLE_NAME);\n     _realtimeBuilder.setSchemaName(REALTIME_TABLE_NAME);\n     TableConfig config = _realtimeBuilder.build();\n-    String realtimeTableJSONConfigString = config.toJSONConfigString();\n+    String realtimeTableJSONConfigString = config.toJsonConfigString();\n     sendPostRequest(_createTableUrl, realtimeTableJSONConfigString);\n \n     // TODO: check whether we should allow POST request to create REALTIME table that already exists\n@@ -195,7 +195,7 @@ public void testTableMinReplication()\n   private void testTableMinReplicationInternal(String tableName, int tableReplication)\n       throws Exception {\n     String tableJSONConfigString =\n-        _offlineBuilder.setTableName(tableName).setNumReplicas(tableReplication).build().toJSONConfigString();\n+        _offlineBuilder.setTableName(tableName).setNumReplicas(tableReplication).build().toJsonConfigString();\n     sendPostRequest(_createTableUrl, tableJSONConfigString);\n     // table creation should succeed\n     TableConfig tableConfig = getTableConfig(tableName, \"OFFLINE\");\n@@ -204,7 +204,7 @@ private void testTableMinReplicationInternal(String tableName, int tableReplicat\n \n     addDummySchema(tableName);\n     tableJSONConfigString =\n-        _realtimeBuilder.setTableName(tableName).setNumReplicas(tableReplication).build().toJSONConfigString();\n+        _realtimeBuilder.setTableName(tableName).setNumReplicas(tableReplication).build().toJsonConfigString();\n     sendPostRequest(_createTableUrl, tableJSONConfigString);\n     tableConfig = getTableConfig(tableName, \"REALTIME\");\n     Assert.assertEquals(tableConfig.getValidationConfig().getReplicationNumber(),\n@@ -217,15 +217,15 @@ private void testTableMinReplicationInternal(String tableName, int tableReplicat\n   private TableConfig getTableConfig(String tableName, String tableType)\n       throws Exception {\n     String tableConfigString = sendGetRequest(_controllerRequestURLBuilder.forTableGet(tableName));\n-    return TableConfig.fromJSONConfig(JsonUtils.stringToJsonNode(tableConfigString).get(tableType));\n+    return TableConfig.fromJsonConfig(JsonUtils.stringToJsonNode(tableConfigString).get(tableType));\n   }\n \n   @Test\n   public void testUpdateTableConfig()\n       throws Exception {\n     String tableName = \"updateTC\";\n     String tableJSONConfigString =\n-        _offlineBuilder.setTableName(tableName).setNumReplicas(2).build().toJSONConfigString();\n+        _offlineBuilder.setTableName(tableName).setNumReplicas(2).build().toJsonConfigString();\n     sendPostRequest(_createTableUrl, tableJSONConfigString);\n     // table creation should succeed\n     TableConfig tableConfig = getTableConfig(tableName, \"OFFLINE\");\n@@ -236,7 +236,7 @@ public void testUpdateTableConfig()\n     tableConfig.getValidationConfig().setRetentionTimeValue(\"10\");\n \n     JsonNode jsonResponse = JsonUtils.stringToJsonNode(\n-        sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJSONConfigString()));\n+        sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJsonConfigString()));\n     Assert.assertTrue(jsonResponse.has(\"status\"));\n \n     TableConfig modifiedConfig = getTableConfig(tableName, \"OFFLINE\");\n@@ -245,7 +245,7 @@ public void testUpdateTableConfig()\n \n     // Realtime\n     addDummySchema(tableName);\n-    tableJSONConfigString = _realtimeBuilder.setTableName(tableName).setNumReplicas(2).build().toJSONConfigString();\n+    tableJSONConfigString = _realtimeBuilder.setTableName(tableName).setNumReplicas(2).build().toJsonConfigString();\n     sendPostRequest(_createTableUrl, tableJSONConfigString);\n     tableConfig = getTableConfig(tableName, \"REALTIME\");\n     Assert.assertEquals(tableConfig.getValidationConfig().getRetentionTimeValue(), \"5\");\n@@ -255,15 +255,15 @@ public void testUpdateTableConfig()\n     QuotaConfig quota = new QuotaConfig();\n     quota.setStorage(\"10G\");\n     tableConfig.setQuotaConfig(quota);\n-    sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJSONConfigString());\n+    sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJsonConfigString());\n     modifiedConfig = getTableConfig(tableName, \"REALTIME\");\n     Assert.assertNotNull(modifiedConfig.getQuotaConfig());\n     Assert.assertEquals(modifiedConfig.getQuotaConfig().getStorage(), \"10G\");\n     Assert.assertNull(modifiedConfig.getQuotaConfig().getMaxQueriesPerSecond());\n \n     quota.setMaxQueriesPerSecond(\"100.00\");\n     tableConfig.setQuotaConfig(quota);\n-    sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJSONConfigString());\n+    sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJsonConfigString());\n     modifiedConfig = getTableConfig(tableName, \"REALTIME\");\n     Assert.assertNotNull(modifiedConfig.getQuotaConfig().getMaxQueriesPerSecond());\n     Assert.assertEquals(modifiedConfig.getQuotaConfig().getMaxQueriesPerSecond(), \"100.00\");\n@@ -273,7 +273,7 @@ public void testUpdateTableConfig()\n       // table does not exist\n       tableConfig.setTableName(\"noSuchTable_REALTIME\");\n       sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(\"noSuchTable\"),\n-          tableConfig.toJSONConfigString());\n+          tableConfig.toJsonConfigString());\n     } catch (Exception e) {\n       Assert.assertTrue(e instanceof FileNotFoundException);\n       notFoundException = true;\n@@ -304,7 +304,7 @@ public void rebalanceOfflineTable() {\n     // create the table\n     try {\n       TableConfig offlineTableConfig = _offlineBuilder.build();\n-      sendPostRequest(_createTableUrl, offlineTableConfig.toJSONConfigString());\n+      sendPostRequest(_createTableUrl, offlineTableConfig.toJsonConfigString());\n     } catch (Exception e) {\n       Assert.fail(\"Failed to create offline table \" + tableName + \"Error: \" + e.getMessage());\n     }",
                "changes": 34
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResourceTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResourceTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResourceTest.java",
                "deletions": 1,
                "sha": "645b195c22de8e61126eb06126baab5373cc5ed9",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResourceTest.java",
                "patch": "@@ -93,7 +93,7 @@ public void testTableListForTenant()\n \n     TableConfig offlineTableConfig = _offlineBuilder.build();\n     offlineTableConfig.setTableName(\"mytable_OFFLINE\");\n-    String offlineTableJSONConfigString = offlineTableConfig.toJSONConfigString();\n+    String offlineTableJSONConfigString = offlineTableConfig.toJsonConfigString();\n     sendPostRequest(createTableUrl, offlineTableJSONConfigString);\n \n     // Try to make sure both kinds of tags work",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerInstanceToggleTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerInstanceToggleTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerInstanceToggleTest.java",
                "deletions": 1,
                "sha": "25855a84d70d8af2ba569738c9d5f679723a8f64",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerInstanceToggleTest.java",
                "patch": "@@ -59,7 +59,7 @@ public void testInstanceToggle()\n     // Create an offline table\n     String tableJSONConfigString =\n         new TableConfig.Builder(CommonConstants.Helix.TableType.OFFLINE).setTableName(RAW_TABLE_NAME)\n-            .setNumReplicas(NUM_INSTANCES).build().toJSONConfigString();\n+            .setNumReplicas(NUM_INSTANCES).build().toJsonConfigString();\n     sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableJSONConfigString);\n     Assert.assertEquals(\n         _helixAdmin.getResourceIdealState(_helixClusterName, CommonConstants.Helix.BROKER_RESOURCE_INSTANCE)",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerSentinelTestV2.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerSentinelTestV2.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerSentinelTestV2.java",
                "deletions": 1,
                "sha": "1411f147778bcdca9e7085d04e279aa2c5f2349f",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerSentinelTestV2.java",
                "patch": "@@ -57,7 +57,7 @@ public void testOfflineTableLifeCycle()\n     String tableName = \"testTable\";\n     String tableJSONConfigString =\n         new TableConfig.Builder(CommonConstants.Helix.TableType.OFFLINE).setTableName(tableName).setNumReplicas(3)\n-            .build().toJSONConfigString();\n+            .build().toJsonConfigString();\n     sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableJSONConfigString);\n     Assert.assertEquals(\n         _helixAdmin.getResourceIdealState(_helixClusterName, CommonConstants.Helix.BROKER_RESOURCE_INSTANCE)",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/DefaultControllerRestApi.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/DefaultControllerRestApi.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/DefaultControllerRestApi.java",
                "deletions": 1,
                "sha": "089ea6e0f87dc6e036c3ad5240467b48a287fd63",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/DefaultControllerRestApi.java",
                "patch": "@@ -58,7 +58,7 @@ public TableConfig getTableConfig() {\n             .getRetrieveTableConfigHttpURI(pushLocation.getHost(), pushLocation.getPort(), _rawTableName));\n         JsonNode offlineJsonTableConfig = JsonUtils.stringToJsonNode(response.getResponse()).get(OFFLINE);\n         if (offlineJsonTableConfig != null) {\n-          TableConfig offlineTableConfig = TableConfig.fromJSONConfig(offlineJsonTableConfig);\n+          TableConfig offlineTableConfig = TableConfig.fromJsonConfig(offlineJsonTableConfig);\n           LOGGER.info(\"Got table config: {}\", offlineTableConfig);\n           return offlineTableConfig;\n         }",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/SegmentCreationJob.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/SegmentCreationJob.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/SegmentCreationJob.java",
                "deletions": 1,
                "sha": "010be2473e09b12ea7db2569b3bc32f216610ebf",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/SegmentCreationJob.java",
                "patch": "@@ -157,7 +157,7 @@ public void run()\n     TableConfig tableConfig = getTableConfig();\n     if (tableConfig != null) {\n       validateTableConfig(tableConfig);\n-      jobConf.set(JobConfigConstants.TABLE_CONFIG, tableConfig.toJSONConfigString());\n+      jobConf.set(JobConfigConstants.TABLE_CONFIG, tableConfig.toJsonConfigString());\n     }\n     jobConf.set(JobConfigConstants.SCHEMA, getSchema().toSingleLineJsonString());\n ",
                "changes": 2
            },
            {
                "status": "modified",
                "additions": 5,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java",
                "deletions": 6,
                "sha": "9dd75c2df092f9a019350bdbf752846e7871e709",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/ClusterTest.java",
                "patch": "@@ -302,7 +302,7 @@ protected void addOfflineTable(String tableName, String timeColumnName, String t\n             invertedIndexColumns, bloomFilterColumns, taskConfig);\n \n     if (!isUsingNewConfigFormat()) {\n-      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJSONConfigString());\n+      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJsonConfigString());\n     } else {\n       _offlineTableConfig = tableConfig;\n     }\n@@ -317,16 +317,15 @@ protected void updateOfflineTable(String tableName, String timeColumnName, Strin\n             invertedIndexColumns, bloomFilterColumns, taskConfig);\n \n     if (!isUsingNewConfigFormat()) {\n-      sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJSONConfigString());\n+      sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tableName), tableConfig.toJsonConfigString());\n     } else {\n       _offlineTableConfig = tableConfig;\n     }\n   }\n \n   private static TableConfig getOfflineTableConfig(String tableName, String timeColumnName, String timeType,\n       String brokerTenant, String serverTenant, String loadMode, SegmentVersion segmentVersion,\n-      List<String> invertedIndexColumns, List<String> bloomFilterColumns, TableTaskConfig taskConfig)\n-      throws Exception {\n+      List<String> invertedIndexColumns, List<String> bloomFilterColumns, TableTaskConfig taskConfig) {\n     return new TableConfig.Builder(Helix.TableType.OFFLINE).setTableName(tableName).setTimeColumnName(timeColumnName)\n         .setTimeType(timeType).setNumReplicas(3).setBrokerTenant(brokerTenant).setServerTenant(serverTenant)\n         .setLoadMode(loadMode).setSegmentVersion(segmentVersion.toString())\n@@ -430,7 +429,7 @@ protected void addRealtimeTable(String tableName, boolean useLlc, String kafkaBr\n     _realtimeTableConfig = tableConfig;\n \n     if (!isUsingNewConfigFormat()) {\n-      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJSONConfigString());\n+      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), tableConfig.toJsonConfigString());\n     }\n   }\n \n@@ -443,7 +442,7 @@ protected void updateRealtimeTableConfig(String tablename, List<String> inverted\n     config.setBloomFilterColumns(bloomFilterCols);\n \n     sendPutRequest(_controllerRequestURLBuilder.forUpdateTableConfig(tablename),\n-        _realtimeTableConfig.toJSONConfigString());\n+        _realtimeTableConfig.toJsonConfigString());\n   }\n \n   protected void dropRealtimeTable(String tableName)",
                "changes": 11
            },
            {
                "status": "modified",
                "additions": 18,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java",
                "deletions": 0,
                "sha": "172b2fa8396b2f04f59a15d2a006870f940f1a63",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-integration-tests/src/test/java/org/apache/pinot/integration/tests/OfflineClusterIntegrationTest.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.pinot.integration.tests;\n \n import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n import com.google.common.base.Function;\n import com.google.common.collect.ImmutableList;\n import java.io.File;\n@@ -33,6 +34,7 @@\n import java.util.concurrent.TimeUnit;\n import javax.annotation.Nullable;\n import org.apache.commons.io.FileUtils;\n+import org.apache.pinot.common.config.TableConfig;\n import org.apache.pinot.common.utils.CommonConstants;\n import org.apache.pinot.common.utils.JsonUtils;\n import org.apache.pinot.common.utils.ServiceStatus;\n@@ -150,6 +152,22 @@ public void testInstancesStarted() {\n     }\n   }\n \n+  @Test\n+  public void testInvalidTableConfig() {\n+    TableConfig tableConfig =\n+        new TableConfig.Builder(CommonConstants.Helix.TableType.OFFLINE).setTableName(\"badTable\").build();\n+    ObjectNode jsonConfig = tableConfig.toJsonConfig();\n+    // Remove a mandatory field\n+    jsonConfig.remove(TableConfig.VALIDATION_CONFIG_KEY);\n+    try {\n+      sendPostRequest(_controllerRequestURLBuilder.forTableCreate(), jsonConfig.toString());\n+      fail();\n+    } catch (IOException e) {\n+      // Should get response code 400 (BAD_REQUEST)\n+      assertTrue(e.getMessage().startsWith(\"Server returned HTTP response code: 400\"));\n+    }\n+  }\n+\n   @Test\n   public void testInvertedIndexTriggering()\n       throws Exception {",
                "changes": 18
            },
            {
                "status": "modified",
                "additions": 1,
                "raw_url": "https://github.com/apache/incubator-pinot/raw/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-tools/src/main/java/org/apache/pinot/tools/query/comparison/ClusterStarter.java",
                "contents_url": "https://api.github.com/repos/apache/incubator-pinot/contents/pinot-tools/src/main/java/org/apache/pinot/tools/query/comparison/ClusterStarter.java?ref=eccf573a636de84e60c85cc331fea0afc172c90c",
                "filename": "pinot-tools/src/main/java/org/apache/pinot/tools/query/comparison/ClusterStarter.java",
                "deletions": 1,
                "sha": "18dedc42604aad41ed6e06744745618847e7e085",
                "blob_url": "https://github.com/apache/incubator-pinot/blob/eccf573a636de84e60c85cc331fea0afc172c90c/pinot-tools/src/main/java/org/apache/pinot/tools/query/comparison/ClusterStarter.java",
                "patch": "@@ -206,7 +206,7 @@ private void addTable()\n     String tableJSONConfigString =\n         new TableConfig.Builder(CommonConstants.Helix.TableType.OFFLINE).setTableName(_tableName)\n             .setTimeColumnName(_timeColumnName).setTimeType(_timeUnit).setNumReplicas(3).setBrokerTenant(\"broker\")\n-            .setServerTenant(\"server\").build().toJSONConfigString();\n+            .setServerTenant(\"server\").build().toJsonConfigString();\n     sendPostRequest(ControllerRequestURLBuilder.baseUrl(controllerAddress).forTableCreate(), tableJSONConfigString);\n   }\n ",
                "changes": 2
            }
        ],
        "unit_tests": [
            "PinotTenantRestletResourceTest.java",
            "ClusterTest.java",
            "ControllerInstanceToggleTest.java",
            "HighLevelConsumerRoutingTableBuilderTest.java",
            "LowLevelConsumerRoutingTableBuilderTest.java",
            "OfflineClusterIntegrationTest.java",
            "PinotTableRestletResourceTest.java",
            "TableConfigTest.java",
            "TimeBoundaryServiceTest.java",
            "TableQueryQuotaManagerTest.java",
            "PinotHelixResourceManagerTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "pinot-controller/src/test/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResourceTest.java",
        "buggy_files": [
            "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableRestletResource.java",
            "pinot-broker/src/main/java/org/apache/pinot/broker/routing/builder/LowLevelConsumerRoutingTableBuilder.java",
            "pinot-common/src/main/java/org/apache/pinot/common/config/TableConfig.java",
            "pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/DefaultControllerRestApi.java",
            "pinot-tools/src/main/java/org/apache/pinot/tools/query/comparison/ClusterStarter.java",
            "pinot-controller/src/main/java/org/apache/pinot/controller/helix/core/PinotHelixResourceManager.java",
            "pinot-hadoop/src/main/java/org/apache/pinot/hadoop/job/SegmentCreationJob.java",
            "pinot-controller/src/test/java/org/apache/pinot/controller/helix/ControllerSentinelTestV2.java",
            "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTenantRestletResource.java",
            "pinot-broker/src/main/java/org/apache/pinot/broker/queryquota/TableQueryQuotaManager.java",
            "pinot-controller/src/main/java/org/apache/pinot/controller/api/resources/PinotTableConfigRestletResource.java",
            "pinot-broker/src/main/java/org/apache/pinot/broker/routing/TimeBoundaryService.java",
            "pinot-controller/src/main/java/org/apache/pinot/controller/util/AutoAddInvertedIndex.java"
        ],
        "fixed": true
    }
]