{
    "directory-server_0a4e276": {
        "bug_id": "directory-server_0a4e276",
        "commit": "https://github.com/apache/directory-server/commit/0a4e276dc33982ba994abc23dfea44d061c4f96a",
        "file": [
            {
                "additions": 379,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "changes": 393,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 14,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "patch": "@@ -19,23 +19,35 @@\n \n import org.apache.ldap.server.interceptor.BaseInterceptor;\n import org.apache.ldap.server.interceptor.NextInterceptor;\n+import org.apache.ldap.server.interceptor.InterceptorChain;\n import org.apache.ldap.server.jndi.ContextFactoryConfiguration;\n import org.apache.ldap.server.jndi.ServerContext;\n import org.apache.ldap.server.configuration.InterceptorConfiguration;\n import org.apache.ldap.server.partition.ContextPartitionNexus;\n import org.apache.ldap.server.authz.support.ACDFEngine;\n import org.apache.ldap.server.invocation.InvocationStack;\n import org.apache.ldap.server.authn.LdapPrincipal;\n+import org.apache.ldap.server.schema.ConcreteNameComponentNormalizer;\n+import org.apache.ldap.server.subtree.SubentryService;\n import org.apache.ldap.common.filter.ExprNode;\n+import org.apache.ldap.common.aci.MicroOperation;\n+import org.apache.ldap.common.aci.ACIItemParser;\n+import org.apache.ldap.common.aci.ACIItem;\n+import org.apache.ldap.common.exception.LdapNamingException;\n+import org.apache.ldap.common.message.ResultCodeEnum;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.naming.Name;\n import javax.naming.NamingException;\n import javax.naming.NamingEnumeration;\n import javax.naming.directory.Attributes;\n import javax.naming.directory.ModificationItem;\n import javax.naming.directory.SearchControls;\n-import java.util.Iterator;\n-import java.util.Map;\n+import javax.naming.directory.Attribute;\n+import java.util.*;\n+import java.text.ParseException;\n \n \n /**\n@@ -46,61 +58,290 @@\n  */\n public class AuthorizationService extends BaseInterceptor\n {\n+    /** the logger for this class */\n+    private static final Logger log = LoggerFactory.getLogger( AuthorizationService.class );\n+\n+    private static final String ENTRYACI_ATTR = \"entryACI\";\n+    private static final String SUBENTRYACI_ATTR = \"subentryACI\";\n+    private static final String AC_SUBENTRY_ATTR = \"accessControlSubentries\";\n+\n+    /** collection of MicroOperations for the add operation */\n+    private static final Collection ADD_OPS;\n+    /** collection of MicroOperations for the delete operation */\n+    private static final Collection DELETE_OPS;\n+    /** collection of MicroOperations for the compare operation */\n+    private static final Collection COMPARE_OPS;\n+    /** collection of MicroOperations for the search operation */\n+    private static final Collection SEARCH_OPS;\n+    /** collection of MicroOperations for the modify operation */\n+    private static final Collection MODIFY_OPS;\n+    /** collection of MicroOperations for the modifyRdn operation */\n+    private static final Collection MODIFYRDN_OPS;\n+    /** collection of MicroOperations for the browsing */\n+    private static final Collection BROWSE_OPS;\n+\n+    static\n+    {\n+        Set ops = new HashSet();\n+        ops.add( MicroOperation.ADD );\n+        ADD_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.REMOVE );\n+        DELETE_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.COMPARE );\n+        COMPARE_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.RETURN_DN );\n+        ops.add( MicroOperation.FILTER_MATCH );\n+        ops.add( MicroOperation.READ );\n+        SEARCH_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.MODIFY );\n+        MODIFY_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.RENAME );\n+        MODIFYRDN_OPS = Collections.unmodifiableCollection( ops );\n+\n+        ops = new HashSet();\n+        ops.add( MicroOperation.BROWSE );\n+        BROWSE_OPS = Collections.unmodifiableCollection( ops );\n+    }\n+\n     /** the partition nexus */\n     private ContextPartitionNexus nexus;\n     /** a tupleCache that responds to add, delete, and modify attempts */\n     private TupleCache tupleCache;\n     /** a groupCache that responds to add, delete, and modify attempts */\n     private GroupCache groupCache;\n+    /** a normalizing ACIItem parser */\n+    private ACIItemParser aciParser;\n     /** use and instance of the ACDF engine */\n     private ACDFEngine engine;\n+    /** interceptor chain */\n+    private InterceptorChain chain;\n+    /** whether or not this interceptor is activated */\n+    private boolean enabled = false;\n \n \n+    /**\n+     * Initializes this interceptor based service by getting a handle on the nexus, setting up\n+     * the tupe and group membership caches and the ACIItem parser and the ACDF engine.\n+     *\n+     * @param factoryCfg the ContextFactory configuration for the server\n+     * @param cfg the interceptor configuration\n+     * @throws NamingException if there are problems during initialization\n+     */\n     public void init( ContextFactoryConfiguration factoryCfg, InterceptorConfiguration cfg ) throws NamingException\n     {\n         super.init( factoryCfg, cfg );\n \n         nexus = factoryCfg.getPartitionNexus();\n         tupleCache = new TupleCache( factoryCfg );\n         groupCache = new GroupCache( factoryCfg );\n+        aciParser = new ACIItemParser( new ConcreteNameComponentNormalizer(\n+                factoryCfg.getGlobalRegistries().getAttributeTypeRegistry() ) );\n         engine = new ACDFEngine( factoryCfg.getGlobalRegistries().getOidRegistry(),\n                 factoryCfg.getGlobalRegistries().getAttributeTypeRegistry() );\n+        chain = factoryCfg.getInterceptorChain();\n+        enabled = factoryCfg.getStartupConfiguration().isAccessControlEnabled();\n+    }\n+\n+\n+    /**\n+     * Adds perscriptiveACI tuples to a collection of tuples by accessing the\n+     * tupleCache.  The tuple cache is accessed for each A/C subentry\n+     * associated with the protected entry.  Note that subentries are handled\n+     * differently: their parent, the administrative entry is accessed to\n+     * determine the perscriptiveACIs effecting the AP and hence the subentry\n+     * which is considered to be in the same context.\n+     *\n+     * @param tuples the collection of tuples to add to\n+     * @param dn the normalized distinguished name of the protected entry\n+     * @param entry the target entry that access to is being controled\n+     * @throws NamingException if there are problems accessing attribute values\n+     */\n+    private void addPerscriptiveAciTuples( Collection tuples, Name dn, Attributes entry ) throws NamingException\n+    {\n+        /*\n+         * If the protected entry is a subentry, then the entry being evaluated\n+         * for perscriptiveACIs is in fact the administrative entry.  By\n+         * substituting the administrative entry for the actual subentry the\n+         * code below this \"if\" statement correctly evaluates the effects of\n+         * perscriptiveACI on the subentry.  Basically subentries are considered\n+         * to be in the same naming context as their access point so the subentries\n+         * effecting their parent entry applies to them as well.\n+         */\n+        if ( entry.get( \"objectClass\" ).contains( \"subentry\" ) )\n+        {\n+            Name parentDn = ( Name ) dn.clone();\n+            parentDn.remove( dn.size() - 1 );\n+            entry = nexus.lookup( parentDn );\n+        }\n+\n+        Attribute subentries = entry.get( AC_SUBENTRY_ATTR );\n+        if ( subentries == null ) return;\n+        for ( int ii = 0; ii < subentries.size(); ii++ )\n+        {\n+            String subentryDn = ( String ) subentries.get( ii );\n+            tuples.addAll( tupleCache.getACITuples( subentryDn ) );\n+        }\n+    }\n+\n+\n+    /**\n+     * Adds the set of entryACI tuples to a collection of tuples.  The entryACI\n+     * is parsed and tuples are generated on they fly then added to the collection.\n+     *\n+     * @param tuples the collection of tuples to add to\n+     * @param entry the target entry that access to is being regulated\n+     * @throws NamingException if there are problems accessing attribute values\n+     */\n+    private void addEntryAciTuples( Collection tuples, Attributes entry ) throws NamingException\n+    {\n+        Attribute entryAci = entry.get( ENTRYACI_ATTR );\n+        if ( entryAci == null ) return;\n+\n+        for ( int ii = 0; ii < entryAci.size(); ii++ )\n+        {\n+            String aciString = ( String ) entryAci.get( ii );\n+            ACIItem item;\n+\n+            try\n+            {\n+                item = aciParser.parse( aciString );\n+            }\n+            catch ( ParseException e )\n+            {\n+                String msg = \"failed to parse entryACI: \" + aciString ;\n+                log.error( msg, e );\n+                throw new LdapNamingException( msg, ResultCodeEnum.OPERATIONSERROR );\n+            }\n+\n+            tuples.add( item.toTuples() );\n+        }\n+    }\n+\n+\n+    /**\n+     * Adds the set of subentryACI tuples to a collection of tuples.  The subentryACI\n+     * is parsed and tuples are generated on the fly then added to the collection.\n+     *\n+     * @param tuples the collection of tuples to add to\n+     * @param dn the normalized distinguished name of the protected entry\n+     * @param entry the target entry that access to is being regulated\n+     * @throws NamingException if there are problems accessing attribute values\n+     */\n+    private void addSubentryAciTuples( Collection tuples, Name dn, Attributes entry ) throws NamingException\n+    {\n+        // only perform this for subentries\n+        if ( ! entry.get( \"objectClass\" ).contains( \"subentry\" ) ) return;\n+\n+        // get the parent or administrative entry for this subentry since it\n+        // will contain the subentryACI attributes that effect subentries\n+        Name parentDn = ( Name ) dn.clone();\n+        parentDn.remove( dn.size() - 1 );\n+        Attributes administrativeEntry = nexus.lookup( parentDn );\n+        Attribute subentryAci = administrativeEntry.get( SUBENTRYACI_ATTR );\n+\n+        if ( subentryAci == null ) return;\n+\n+        for ( int ii = 0; ii < subentryAci.size(); ii++ )\n+        {\n+            String aciString = ( String ) subentryAci.get( ii );\n+            ACIItem item;\n+\n+            try\n+            {\n+                item = aciParser.parse( aciString );\n+            }\n+            catch ( ParseException e )\n+            {\n+                String msg = \"failed to parse subentryACI: \" + aciString ;\n+                log.error( msg, e );\n+                throw new LdapNamingException( msg, ResultCodeEnum.OPERATIONSERROR );\n+            }\n+\n+            tuples.add( item.toTuples() );\n+        }\n     }\n \n \n-    /*\n+    /* -------------------------------------------------------------------------------\n      * Within every access controled interceptor method we must retrieve the ACITuple\n      * set for all the perscriptiveACIs that apply to the candidate, the target entry\n      * operated upon.  This ACITuple set is gotten from the TupleCache by looking up\n      * the subentries referenced by the accessControlSubentries operational attribute\n      * within the target entry.\n      *\n-     * Then the entry is inspected for an entryACI.  If present a set of ACITuples\n-     * are generated for all the entryACIs within the entry.  This set is combined\n-     * with the ACITuples cached for the perscriptiveACI affecting the target entry.\n+     * Then the entry is inspected for an entryACI.  This is not done for the add op\n+     * since it could introduce a security breech.  So for non-add ops if present a\n+     * set of ACITuples are generated for all the entryACIs within the entry.  This\n+     * set is combined with the ACITuples cached for the perscriptiveACI affecting\n+     * the target entry.\n      *\n      * The union of ACITuples are fed into the engine along with other parameters\n      * to decide where permission is granted or rejected for the specific operation.\n+     * -------------------------------------------------------------------------------\n      */\n \n     public void add( NextInterceptor next, String upName, Name normName, Attributes entry ) throws NamingException\n     {\n+        // Access the principal requesting the operation, and bypass checks if it is the admin\n+        LdapPrincipal user = ( ( ServerContext ) InvocationStack.getInstance().peek().getCaller() ).getPrincipal();\n+        if ( user.getName().equalsIgnoreCase( ContextPartitionNexus.ADMIN_PRINCIPAL ) || ! enabled )\n+        {\n+            next.add( upName, normName, entry );\n+            tupleCache.subentryAdded( upName, normName, entry );\n+            groupCache.groupAdded( upName, normName, entry );\n+            return;\n+        }\n+\n+        // perform checks below here\n+        SubentryService subentryService = ( SubentryService ) chain.get( \"subentryService\" );\n+        Attributes subentryAttrs = subentryService.getSubentryAttributes( normName, entry );\n+        NamingEnumeration attrList = entry.getAll();\n+        while( attrList.hasMore() )\n+        {\n+            subentryAttrs.put( ( Attribute ) attrList.next() );\n+        }\n+\n+        // Assemble all the information required to make an access control decision\n+        Set userGroups = groupCache.getGroups( user.getName() );\n+        Collection tuples = new HashSet();\n+\n+        // note that entryACI should not be considered in adds (it's a security breach)\n+        addPerscriptiveAciTuples( tuples, normName, subentryAttrs );\n+        addSubentryAciTuples( tuples, normName, subentryAttrs );\n+        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), normName, null,\n+            null, ADD_OPS, tuples, subentryAttrs );\n+\n+        // if we've gotten this far then access is granted\n         next.add( upName, normName, entry );\n         tupleCache.subentryAdded( upName, normName, entry );\n         groupCache.groupAdded( upName, normName, entry );\n-\n-        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n-        LdapPrincipal user = ctx.getPrincipal();\n-        Name userGroupName = null;\n-\n-//        engine.checkPermission( next, userGroupName, user.getName(), user.getAuthenticationLevel(), normName, null,\n-//                null, ADD_OPS, aciTuples );\n     }\n \n \n     public void delete( NextInterceptor next, Name name ) throws NamingException\n     {\n         Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, DELETE_OPS, tuples );\n+\n         next.delete( name );\n         tupleCache.subentryDeleted( name, entry );\n         groupCache.groupDeleted( name, entry );\n@@ -110,6 +351,17 @@ public void delete( NextInterceptor next, Name name ) throws NamingException\n     public void modify( NextInterceptor next, Name name, int modOp, Attributes mods ) throws NamingException\n     {\n         Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, MODIFY_OPS, tuples );\n+\n         next.modify( name, modOp, mods );\n         tupleCache.subentryModified( name, modOp, mods, entry );\n         groupCache.groupModified( name, modOp, mods, entry );\n@@ -119,6 +371,17 @@ public void modify( NextInterceptor next, Name name, int modOp, Attributes mods\n     public void modify( NextInterceptor next, Name name, ModificationItem[] mods ) throws NamingException\n     {\n         Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, MODIFY_OPS, tuples );\n+\n         next.modify( name, mods );\n         tupleCache.subentryModified( name, mods, entry );\n         groupCache.groupModified( name, mods, entry );\n@@ -127,18 +390,54 @@ public void modify( NextInterceptor next, Name name, ModificationItem[] mods ) t\n \n     public Attributes getRootDSE( NextInterceptor next ) throws NamingException\n     {\n-        return super.getRootDSE( next );\n+        Attributes entry = super.getRootDSE( next );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(),\n+//                new LdapName(), null, null, SEARCH_OPS, tuples );\n+\n+        return entry;\n     }\n \n \n     public boolean hasEntry( NextInterceptor next, Name name ) throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, BROWSE_OPS, tuples );\n+\n         return next.hasEntry( name );\n     }\n \n \n     public NamingEnumeration list( NextInterceptor next, Name base ) throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( base );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), base, null,\n+//                null, SEARCH_OPS, tuples );\n+\n         return super.list( next, base );\n     }\n \n@@ -163,26 +462,92 @@ public Attributes lookup( NextInterceptor next, Name name ) throws NamingExcepti\n \n     public void modifyRn( NextInterceptor next, Name name, String newRn, boolean deleteOldRn ) throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, MODIFYRDN_OPS, tuples );\n+\n         super.modifyRn( next, name, newRn, deleteOldRn );\n     }\n \n \n     public void move( NextInterceptor next, Name oriChildName, Name newParentName, String newRn, boolean deleteOldRn )\n             throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( oriChildName );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), oriChildName, null,\n+//                null, MODIFYRDN_OPS, tuples );\n+\n         super.move( next, oriChildName, newParentName, newRn, deleteOldRn );\n     }\n \n \n     public void move( NextInterceptor next, Name oriChildName, Name newParentName ) throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( oriChildName );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), oriChildName, null,\n+//                null, MODIFYRDN_OPS, tuples );\n+//\n         super.move( next, oriChildName, newParentName );\n     }\n \n \n     public NamingEnumeration search( NextInterceptor next, Name base, Map env, ExprNode filter,\n                                      SearchControls searchCtls ) throws NamingException\n     {\n+//        Attributes entry = nexus.lookup( base );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), base, null,\n+//                null, SEARCH_OPS, tuples );\n+\n         return super.search( next, base, env, filter, searchCtls );\n     }\n+\n+\n+    public boolean compare( NextInterceptor next, Name name, String oid, Object value ) throws NamingException\n+    {\n+//        Attributes entry = nexus.lookup( name );\n+//        ServerContext ctx = ( ServerContext ) InvocationStack.getInstance().peek().getCaller();\n+//        LdapPrincipal user = ctx.getPrincipal();\n+//        Set userGroups = groupCache.getGroups( user.getName() );\n+//        Collection tuples = new HashSet();\n+//        addPerscriptiveAciTuples( tuples, entry );\n+//        addEntryAciTuples( tuples, entry );\n+//        addSubentryAciTuples( tuples, entry );\n+//\n+//        engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n+//                null, COMPARE_OPS, tuples );\n+\n+        return super.compare(next, name, oid, value);\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "sha": "e16b4958a1699a024a4a945f4aca86532623f0c3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/TupleCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/TupleCache.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/TupleCache.java",
                "patch": "@@ -172,7 +172,7 @@ public void subentryAdded( String upName, Name normName, Attributes entry ) thro\n \n \n     public void subentryDeleted( Name normName, Attributes entry ) throws NamingException\n-    {\n+    {                                                                                      \n         if ( ! hasPrescriptiveACI( entry ) )\n         {\n             return;",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/TupleCache.java",
                "sha": "0e3441bec43c930c447fc439e9f557e67018f249",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/support/ACDFEngine.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/support/ACDFEngine.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 5,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/support/ACDFEngine.java",
                "patch": "@@ -116,13 +116,13 @@ public void checkPermission(\n             NextInterceptor next,\r\n             Collection userGroupNames, Name username, AuthenticationLevel authenticationLevel,\r\n             Name entryName, String attrId, Object attrValue,\r\n-            Collection microOperations, Collection aciTuples ) throws NamingException \r\n+            Collection microOperations, Collection aciTuples, Attributes entry ) throws NamingException\r\n     {\r\n         if( !hasPermission(\r\n                 next,\r\n                 userGroupNames, username, authenticationLevel,\r\n                 entryName, attrId, attrValue,\r\n-                microOperations, aciTuples ) )\r\n+                microOperations, aciTuples, entry ) )\r\n         {\r\n             throw new LdapNoPermissionException();\r\n         }\r\n@@ -148,16 +148,15 @@ public boolean hasPermission(\n             NextInterceptor next, \r\n             Collection userGroupNames, Name userName, AuthenticationLevel authenticationLevel,\r\n             Name entryName, String attrId, Object attrValue,\r\n-            Collection microOperations, Collection aciTuples ) throws NamingException\r\n+            Collection microOperations, Collection aciTuples, Attributes entry ) throws NamingException\r\n     {\r\n         if( entryName == null )\r\n         {\r\n             throw new NullPointerException( \"entryName\" );\r\n         }\r\n         \r\n         Attributes userEntry = next.lookup( userName );\r\n-        Attributes entry = next.lookup( entryName );\r\n-        \r\n+\r\n         // Determine the scope of the requested operation.\r\n         OperationScope scope;\r\n         if( attrId == null )\r",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/authz/support/ACDFEngine.java",
                "sha": "e03c89ed68cf1801a43ff6d09fbf5fad22293004",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/configuration/MutableStartupConfiguration.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/configuration/MutableStartupConfiguration.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/ldap/server/configuration/MutableStartupConfiguration.java",
                "patch": "@@ -70,6 +70,11 @@ public void setContextPartitionConfigurations( Set contextParitionConfigurations\n         super.setContextPartitionConfigurations( contextParitionConfigurations );\n     }\n \n+    public void setAccessControlEnabled( boolean isAccessControlEnabled )\n+    {\n+        super.setAccessControlEnabled( isAccessControlEnabled );\n+    }\n+\n     public void setAllowAnonymousAccess( boolean enableAnonymousAccess )\n     {\n         super.setAllowAnonymousAccess( enableAnonymousAccess );",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/configuration/MutableStartupConfiguration.java",
                "sha": "ab80bf093291e87dc7723bbd7706b2e041f02e40",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/configuration/StartupConfiguration.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/configuration/StartupConfiguration.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/ldap/server/configuration/StartupConfiguration.java",
                "patch": "@@ -54,6 +54,7 @@\n \n     private File workingDirectory = new File( \"server-work\" );\n     private boolean allowAnonymousAccess = true; // allow by default\n+    private boolean accessControlEnabled = false; // turn off by default\n     private Set authenticatorConfigurations; // Set<AuthenticatorConfiguration>\n     private List interceptorConfigurations; // Set<InterceptorConfiguration>\n     \n@@ -268,6 +269,22 @@ protected void setContextPartitionConfigurations( Set contextParitionConfigurati\n         this.contextPartitionConfigurations = newSet;\n     }\n \n+    /**\n+     * Returns <tt>true</tt> if access control checks are enbaled.\n+     */\n+    public boolean isAccessControlEnabled()\n+    {\n+        return accessControlEnabled;\n+    }\n+\n+    /**\n+     * Sets whether to enable basic access control checks or not\n+     */\n+    protected void setAccessControlEnabled( boolean isAccessControlEnabled )\n+    {\n+        this.accessControlEnabled = isAccessControlEnabled;\n+    }\n+\n     /**\n      * Returns <tt>true</tt> if anonymous access is allowed.\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/configuration/StartupConfiguration.java",
                "sha": "12bd44e73a4ef9f8d3c213c3c429ce14b68d2973",
                "status": "modified"
            },
            {
                "additions": 99,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/subtree/SubentryService.java",
                "changes": 115,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/subtree/SubentryService.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 16,
                "filename": "core/src/main/java/org/apache/ldap/server/subtree/SubentryService.java",
                "patch": "@@ -102,11 +102,7 @@ public boolean accept( LdapContext ctx, SearchResult result, SearchControls cont\n                 return true;\n             }\n \n-            if ( objectClasses.contains( SUBENTRY_OBJECTCLASS ) || objectClasses.contains( SUBENTRY_OBJECTCLASS_OID ) )\n-            {\n-                return false;\n-            }\n-            return true;\n+            return !( objectClasses.contains(SUBENTRY_OBJECTCLASS) || objectClasses.contains(SUBENTRY_OBJECTCLASS_OID) );\n         }\n     };\n \n@@ -150,7 +146,7 @@ public void init( ContextFactoryConfiguration factoryCfg, InterceptorConfigurati\n                 Attributes subentry = result.getAttributes();\n                 String dn = result.getName();\n                 String subtree = ( String ) subentry.get( \"subtreeSpecification\" ).get();\n-                SubtreeSpecification ss = null;\n+                SubtreeSpecification ss;\n \n                 try\n                 {\n@@ -219,7 +215,7 @@ public NamingEnumeration search( NextInterceptor nextInterceptor, Name base, Map\n      */\n     private boolean isSubentryVisible( LdapContext ctx ) throws NamingException\n     {\n-        Control[] reqControls = ( Control[] ) ctx.getRequestControls();\n+        Control[] reqControls = ctx.getRequestControls();\n \n         if ( reqControls == null || reqControls.length <= 0 )\n         {\n@@ -246,6 +242,93 @@ private boolean isSubentryVisible( LdapContext ctx ) throws NamingException\n     // -----------------------------------------------------------------------\n \n \n+    /**\n+     * Evaluates the set of subentry subtrees upon an entry and returns the\n+     * operational subentry attributes that will be added to the entry if\n+     * added at the dn specified.\n+     *\n+     * @param dn the normalized distinguished name of the entry\n+     * @param entryAttrs the entry attributes are generated for\n+     * @return the set of subentry op attrs for an entry\n+     * @throws NamingException if there are problems accessing entry information\n+     */\n+    public Attributes getSubentryAttributes( Name dn, Attributes entryAttrs ) throws NamingException\n+    {\n+        Attributes subentryAttrs = new LockableAttributesImpl();\n+        Attribute objectClasses = entryAttrs.get( \"objectClass\" );\n+        Iterator list = subtrees.keySet().iterator();\n+        while ( list.hasNext() )\n+        {\n+            String subentryDnStr = ( String ) list.next();\n+            Name subentryDn = new LdapName( subentryDnStr );\n+            Name apDn = ( Name ) subentryDn.clone();\n+            apDn.remove( apDn.size() - 1 );\n+            SubtreeSpecification ss = ( SubtreeSpecification ) subtrees.get( subentryDn );\n+\n+            if ( evaluator.evaluate( ss, apDn, dn, objectClasses ) )\n+            {\n+                Attribute administrativeRole = nexus.lookup( apDn ).get( \"administrativeRole\" );\n+                NamingEnumeration roles = administrativeRole.getAll();\n+                while ( roles.hasMore() )\n+                {\n+                    Attribute operational;\n+                    String role = ( String ) roles.next();\n+\n+                    if ( role.equalsIgnoreCase( AUTONOUMOUS_AREA ) )\n+                    {\n+                        operational = subentryAttrs.get( AUTONOUMOUS_AREA_SUBENTRY );\n+                        if ( operational == null )\n+                        {\n+                            operational = new LockableAttributeImpl( AUTONOUMOUS_AREA_SUBENTRY );\n+                            subentryAttrs.put( operational );\n+                        }\n+                    }\n+                    else if ( role.equalsIgnoreCase( AC_AREA ) || role.equalsIgnoreCase( AC_INNERAREA ) )\n+                    {\n+                        operational = subentryAttrs.get( AC_SUBENTRY );\n+                        if ( operational == null )\n+                        {\n+                            operational = new LockableAttributeImpl( AC_SUBENTRY );\n+                            subentryAttrs.put( operational );\n+                        }\n+                    }\n+                    else if ( role.equalsIgnoreCase( SCHEMA_AREA ) )\n+                    {\n+                        operational = subentryAttrs.get( SCHEMA_AREA_SUBENTRY );\n+                        if ( operational == null )\n+                        {\n+                            operational = new LockableAttributeImpl( SCHEMA_AREA_SUBENTRY );\n+                            subentryAttrs.put( operational );\n+                        }\n+                    }\n+                    else if ( role.equalsIgnoreCase( COLLECTIVE_AREA ) ||\n+                              role.equalsIgnoreCase( COLLECTIVE_INNERAREA ) )\n+                    {\n+                        operational = subentryAttrs.get( COLLECTIVE_ATTRIBUTE_SUBENTRIES );\n+                        if ( operational == null )\n+                        {\n+                            operational = new LockableAttributeImpl( COLLECTIVE_ATTRIBUTE_SUBENTRIES );\n+                            subentryAttrs.put( operational );\n+                        }\n+                    }\n+                    else\n+                    {\n+                        throw new LdapInvalidAttributeValueException( \"Encountered invalid administrativeRole '\"\n+                                + role + \"' in administrative point of subentry \" + subentryDnStr + \". The values of this attribute\"\n+                                + \" are constrained to autonomousArea, accessControlSpecificArea, accessControlInnerArea,\"\n+                                + \" subschemaAdminSpecificArea, collectiveAttributeSpecificArea, and\"\n+                                + \" collectiveAttributeInnerArea.\", ResultCodeEnum.CONSTRAINTVIOLATION );\n+                    }\n+\n+                    operational.add( subentryDn.toString() );\n+                }\n+            }\n+        }\n+\n+        return subentryAttrs;\n+    }\n+\n+\n     public void add( NextInterceptor next, String upName, Name normName, Attributes entry ) throws NamingException\n     {\n         Attribute objectClasses = entry.get( \"objectClass\" );\n@@ -285,7 +368,7 @@ public void add( NextInterceptor next, String upName, Name normName, Attributes\n              * ----------------------------------------------------------------\n              */\n             String subtree = ( String ) entry.get( \"subtreeSpecification\" ).get();\n-            SubtreeSpecification ss = null;\n+            SubtreeSpecification ss;\n             try\n             {\n                 ss = ssParser.parse( subtree );\n@@ -345,7 +428,7 @@ public void add( NextInterceptor next, String upName, Name normName, Attributes\n                     NamingEnumeration roles = administrativeRole.getAll();\n                     while ( roles.hasMore() )\n                     {\n-                        Attribute operational = null;\n+                        Attribute operational;\n                         String role = ( String ) roles.next();\n \n                         if ( role.equalsIgnoreCase( AUTONOUMOUS_AREA ) )\n@@ -359,7 +442,7 @@ public void add( NextInterceptor next, String upName, Name normName, Attributes\n                         }\n                         else if ( role.equalsIgnoreCase( AC_AREA ) || role.equalsIgnoreCase( AC_INNERAREA ) )\n                         {\n-                            operational = ( Attribute ) entry.get( AC_SUBENTRY ).clone();\n+                            operational = ( Attribute ) entry.get( AC_SUBENTRY );\n                             if ( operational == null )\n                             {\n                                 operational = new LockableAttributeImpl( AC_SUBENTRY );\n@@ -368,7 +451,7 @@ else if ( role.equalsIgnoreCase( AC_AREA ) || role.equalsIgnoreCase( AC_INNERARE\n                         }\n                         else if ( role.equalsIgnoreCase( SCHEMA_AREA ) )\n                         {\n-                            operational = ( Attribute ) entry.get( SCHEMA_AREA_SUBENTRY ).clone();\n+                            operational = ( Attribute ) entry.get( SCHEMA_AREA_SUBENTRY );\n                             if ( operational == null )\n                             {\n                                 operational = new LockableAttributeImpl( SCHEMA_AREA_SUBENTRY );\n@@ -378,7 +461,7 @@ else if ( role.equalsIgnoreCase( SCHEMA_AREA ) )\n                         else if ( role.equalsIgnoreCase( COLLECTIVE_AREA ) ||\n                                   role.equalsIgnoreCase( COLLECTIVE_INNERAREA ) )\n                         {\n-                            operational = ( Attribute ) entry.get( COLLECTIVE_ATTRIBUTE_SUBENTRIES ).clone();\n+                            operational = ( Attribute ) entry.get( COLLECTIVE_ATTRIBUTE_SUBENTRIES );\n                             if ( operational == null )\n                             {\n                                 operational = new LockableAttributeImpl( COLLECTIVE_ATTRIBUTE_SUBENTRIES );\n@@ -777,7 +860,7 @@ public void modify( NextInterceptor next, Name name, int modOp, Attributes mods\n         if ( objectClasses.contains( \"subentry\" ) && mods.get( \"subtreeSpecification\" ) != null )\n         {\n             SubtreeSpecification ssOld = ( SubtreeSpecification ) subtrees.remove( name.toString() );\n-            SubtreeSpecification ssNew = null;\n+            SubtreeSpecification ssNew;\n \n             try\n             {\n@@ -850,7 +933,7 @@ public void modify( NextInterceptor next, Name name, ModificationItem[] mods ) t\n \n         for ( int ii = 0; ii < mods.length; ii++ )\n         {\n-            if ( ( ( String ) mods[ii].getAttribute().getID() ).equalsIgnoreCase( \"subtreeSpecification\" ) )\n+            if ( \"subtreeSpecification\".equalsIgnoreCase( mods[ii].getAttribute().getID() ) )\n             {\n                 isSubtreeSpecificationModification = true;\n                 subtreeMod = mods[ii];\n@@ -860,7 +943,7 @@ public void modify( NextInterceptor next, Name name, ModificationItem[] mods ) t\n         if ( objectClasses.contains( \"subentry\" ) && isSubtreeSpecificationModification )\n         {\n             SubtreeSpecification ssOld = ( SubtreeSpecification ) subtrees.remove( name.toString() );\n-            SubtreeSpecification ssNew = null;\n+            SubtreeSpecification ssNew;\n \n             try\n             {\n@@ -936,7 +1019,7 @@ public void modify( NextInterceptor next, Name name, ModificationItem[] mods ) t\n         NamingEnumeration roles = administrativeRole.getAll();\n         while ( roles.hasMore() )\n         {\n-            Attribute operational = null;\n+            Attribute operational;\n             String role = ( String ) roles.next();\n \n             if ( role.equalsIgnoreCase( AUTONOUMOUS_AREA ) )",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/java/org/apache/ldap/server/subtree/SubentryService.java",
                "sha": "1436587e34ae61623d8e710a135edf625071674c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/schema/apache.schema",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/schema/apache.schema?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 0,
                "filename": "core/src/main/schema/apache.schema",
                "patch": "@@ -112,6 +112,18 @@ attributetype ( 1.2.6.1.4.1.18060.1.1.1.3.12 NAME 'prescriptiveACI'\n   SYNTAX 1.3.6.1.4.1.1466.115.121.1.1\n   USAGE directoryOperation )\n \n+attributetype ( 1.2.6.1.4.1.18060.1.1.1.3.13 NAME 'entryACI'\n+  DESC 'Access control information that applies to a single entry'\n+  EQUALITY directoryStringFirstComponentMatch\n+  SYNTAX 1.3.6.1.4.1.1466.115.121.1.1\n+  USAGE directoryOperation )\n+\n+attributetype ( 1.2.6.1.4.1.18060.1.1.1.3.13 NAME 'subentryACI'\n+  DESC 'Access control information that applies to a single subentry'\n+  EQUALITY directoryStringFirstComponentMatch\n+  SYNTAX 1.3.6.1.4.1.1466.115.121.1.1\n+  USAGE directoryOperation )\n+\n objectclass ( 1.2.6.1.4.1.18060.1.1.1.4.2\n     NAME 'accessControlSubentry'\n     AUXILIARY ",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/main/schema/apache.schema",
                "sha": "52cbabdc290cef84e378d8a30c6db92dc9901852",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsAdminTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsAdminTest.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 12,
                "filename": "core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsAdminTest.java",
                "patch": "@@ -21,14 +21,12 @@\n \n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n-import javax.naming.directory.Attributes;\n-import javax.naming.directory.DirContext;\n-import javax.naming.directory.SearchControls;\n-import javax.naming.directory.SearchResult;\n+import javax.naming.directory.*;\n \n import org.apache.ldap.common.exception.LdapNoPermissionException;\n import org.apache.ldap.common.message.LockableAttributesImpl;\n import org.apache.ldap.server.AbstractAdminTestCase;\n+import org.apache.ldap.server.subtree.SubentryService;\n \n \n /**\n@@ -101,28 +99,20 @@ public void testModifyOnAdminByAdmin() throws NamingException\n     public void testSearchSubtreeByAdmin() throws NamingException\n     {\n         SearchControls controls = new SearchControls();\n-\n         controls.setSearchScope( SearchControls.SUBTREE_SCOPE );\n-\n         HashSet set = new HashSet();\n-\n         NamingEnumeration list = sysRoot.search( \"\", \"(objectClass=*)\", controls );\n \n         while ( list.hasMore() )\n         {\n             SearchResult result = ( SearchResult ) list.next();\n-\n             set.add( result.getName() );\n         }\n \n         assertTrue( set.contains( \"ou=system\" ) );\n-\n         assertTrue( set.contains( \"ou=groups,ou=system\" ) );\n-\n         assertTrue( set.contains( \"ou=users,ou=system\" ) );\n-\n         assertTrue( set.contains( \"uid=akarasulu,ou=users,ou=system\" ) );\n-\n         assertTrue( set.contains( \"uid=admin,ou=system\" ) );\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsAdminTest.java",
                "sha": "ba7bff67aa0965e2b26e9abdf721b48cb611225d",
                "status": "modified"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsNonAdminTest.java",
                "changes": 79,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsNonAdminTest.java?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 6,
                "filename": "core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsNonAdminTest.java",
                "patch": "@@ -18,17 +18,16 @@\n \n \n import java.util.HashSet;\n+import java.util.Hashtable;\n \n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n-import javax.naming.directory.Attributes;\n-import javax.naming.directory.DirContext;\n-import javax.naming.directory.SearchControls;\n-import javax.naming.directory.SearchResult;\n+import javax.naming.directory.*;\n \n import org.apache.ldap.common.exception.LdapNoPermissionException;\n import org.apache.ldap.common.message.LockableAttributesImpl;\n import org.apache.ldap.server.AbstractNonAdminTestCase;\n+import org.apache.ldap.server.subtree.SubentryService;\n \n \n /**\n@@ -40,6 +39,13 @@\n  */\n public class AuthorizationServiceAsNonAdminTest extends AbstractNonAdminTestCase\n {\n+    public AuthorizationServiceAsNonAdminTest()\n+    {\n+        super();\n+        super.configuration.setAccessControlEnabled( true );\n+    }\n+\n+\n     /**\n      * Makes sure a non-admin user cannot delete the admin account.\n      *\n@@ -106,8 +112,7 @@ public void testSearchSubtreeByNonAdmin() throws NamingException\n         controls.setSearchScope( SearchControls.SUBTREE_SCOPE );\n \n         HashSet set = new HashSet();\n-        NamingEnumeration list = sysRoot.search( \"\",\n-                \"(objectClass=*)\", controls );\n+        NamingEnumeration list = sysRoot.search( \"\", \"(objectClass=*)\", controls );\n         while ( list.hasMore() )\n         {\n             SearchResult result = ( SearchResult ) list.next();\n@@ -121,4 +126,66 @@ public void testSearchSubtreeByNonAdmin() throws NamingException\n         assertFalse( set.contains( \"uid=akarasulu,ou=users,ou=system\" ) );\n         assertFalse( set.contains( \"uid=admin,ou=system\" ) );\n     }\n+\n+\n+    private DirContext getAdminContext() throws NamingException\n+    {\n+        Hashtable env = ( Hashtable ) ( ( Hashtable ) sysRoot.getEnvironment() ).clone();\n+        env.put( DirContext.PROVIDER_URL, \"ou=system\" );\n+        env.put( DirContext.SECURITY_AUTHENTICATION, \"simple\" );\n+        env.put( DirContext.SECURITY_PRINCIPAL, \"uid=admin,ou=system\" );\n+        env.put( DirContext.SECURITY_CREDENTIALS, \"secret\" );\n+        return new InitialDirContext( env );\n+    }\n+\n+\n+    public void testGrantAddAllUsers() throws NamingException\n+    {\n+        DirContext adminCtx = getAdminContext();\n+\n+        // modify ou=system to be an AP for an A/C AA\n+        Attributes changes = new BasicAttributes( \"administrativeRole\", SubentryService.AC_AREA, true );\n+        adminCtx.modifyAttributes( \"\", DirContext.ADD_ATTRIBUTE, changes );\n+\n+        // try an add operation which should fail without any ACI\n+        Attributes testEntry = new BasicAttributes( \"ou\", \"testou\", true );\n+        Attribute objectClass = new BasicAttribute( \"objectClass\" );\n+        testEntry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"organizationalUnit\" );\n+\n+        try\n+        {\n+            sysRoot.createSubcontext( \"ou=testou\", testEntry );\n+            fail( \"should never get here due to a permission exception\" );\n+        }\n+        catch ( LdapNoPermissionException e ) {}\n+\n+        // now add a subentry that enables anyone to add an entry below ou=system\n+        Attributes subentry = new BasicAttributes( \"cn\", \"anybodyAdd\", true );\n+        objectClass = new BasicAttribute( \"objectClass\" );\n+        subentry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"subentry\" );\n+        objectClass.add( \"accessControlSubentry\" );\n+        subentry.put( \"subtreeSpecification\", \"{}\" );\n+        subentry.put( \"prescriptiveACI\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { allUsers }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantAdd } } } } }\" );\n+        adminCtx.createSubcontext( \"cn=anybodyAdd\", subentry );\n+\n+        // see if we can now add that test entry which we could not before\n+        testEntry = new BasicAttributes( \"ou\", \"testou\", true );\n+        objectClass = new BasicAttribute( \"objectClass\" );\n+        testEntry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"organizationalUnit\" );\n+        sysRoot.createSubcontext( \"ou=testou\", testEntry );\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/core/src/test/org/apache/ldap/server/authz/AuthorizationServiceAsNonAdminTest.java",
                "sha": "96b871116232b382f4ebd6bede761f5fce8ad4bc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/0a4e276dc33982ba994abc23dfea44d061c4f96a/main/server.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/main/server.xml?ref=0a4e276dc33982ba994abc23dfea44d061c4f96a",
                "deletions": 0,
                "filename": "main/server.xml",
                "patch": "@@ -20,6 +20,7 @@\n   <bean id=\"configuration\" class=\"org.apache.ldap.server.configuration.MutableServerStartupConfiguration\">\n     <property name=\"workingDirectory\"><value>apache.org</value></property>\n     <property name=\"allowAnonymousAccess\"><value>false</value></property>\n+    <property name=\"accessControlEnabled\"><value>false</value></property>\n     <property name=\"ldapPort\"><value>10389</value></property>\n     <property name=\"contextPartitionConfigurations\">\n       <set>",
                "raw_url": "https://github.com/apache/directory-server/raw/0a4e276dc33982ba994abc23dfea44d061c4f96a/main/server.xml",
                "sha": "55d29792c589836791425d0001112cc66f5241fd",
                "status": "modified"
            }
        ],
        "message": "changes ...\n\n o added new accessControlEnabled property to the startup configuration\n   this property controls whether or not the authorization subsystem is\n   enabled or not - by default it is disabled and must be turned on\n o made admin user bypass all permission checks\n o added entryACI and subentryACI to the apache schema\n o implemented and passed tests for authz with add ops .. still need more tests\n o fixed bug in ACDFEngine where on add ops entry lookups in database were \n   failing \n o fixed bug in SubentryService where we were trying to clone null objects \n   and were getting a NPE\n o added public operation in SubentryService to determine the set of subentry\n   operational attributes within an entry that is about to be added ... other\n   services like authz cannot figure this out since they do not have access to\n   the subtree cache.  This service must be offered to other services that need\n   to determine if an entry to be added is included in the collections of \n   subentries.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@306997 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/dacee98ad87ddea82f14dd4d2eb23be3de8946ce",
        "patched_files": [
            "StartupConfiguration.java",
            "ACDFEngine.java",
            "SubentryService.java",
            "server.xml",
            "TupleCache.java",
            "apache.schema",
            "AuthorizationService.java",
            "MutableStartupConfiguration.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SubentryServiceTest.java",
            "AuthorizationServiceAsAdminTest.java",
            "AuthorizationServiceAsNonAdminTest.java"
        ]
    },
    "directory-server_1d92c47": {
        "bug_id": "directory-server_1d92c47",
        "commit": "https://github.com/apache/directory-server/commit/1d92c47fdaff9e06686cb371f3591e134f18cb6b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core-integ/src/test/java/org/apache/directory/server/core/authz/AdministratorsGroupIT.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/authz/AdministratorsGroupIT.java?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 0,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/authz/AdministratorsGroupIT.java",
                "patch": "@@ -76,6 +76,7 @@ boolean canReadAdministrators( DirContext ctx ) throws NamingException\n      * @throws Exception on failures\n      */\n     @Test\n+    @Factory ( AutzIntegUtils.ServiceFactory.class )\n     public void testNonAdminReadAccessToGroups() throws Exception\n     {\n         Name billydDn = createUser( \"billyd\", \"s3kr3t\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core-integ/src/test/java/org/apache/directory/server/core/authz/AdministratorsGroupIT.java",
                "sha": "61bb9aee2ef7c4090e6c2e1569ce2902a1f42ac6",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractOperationContext.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractOperationContext.java?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractOperationContext.java",
                "patch": "@@ -25,6 +25,8 @@\n \n import javax.naming.ldap.Control;\n \n+import org.apache.directory.server.core.invocation.Invocation;\n+import org.apache.directory.server.core.invocation.InvocationStack;\n import org.apache.directory.server.schema.registries.Registries;\n import org.apache.directory.shared.ldap.name.LdapDN;\n \n@@ -55,7 +57,6 @@\n     /** The global registries reference */\n     private Registries registries;\n \n-    \n     /**\n      * Creates a new instance of AbstractOperationContext.\n      *\n@@ -220,4 +221,26 @@ public Registries getRegistries()\n     {\n         return registries;\n     }\n+    \n+    \n+    /**\n+     * Add the invocation into the invocation stack\n+     * \n+     * @param invocation The new invocation.\n+     */\n+    public void push( Invocation invocation )\n+    {\n+        InvocationStack stack = InvocationStack.getInstance();\n+        stack.push( invocation );\n+    }\n+    \n+    \n+    /**\n+     * Remove the invocation fro the invocation stack\n+     */\n+    public void pop()\n+    {\n+        InvocationStack stack = InvocationStack.getInstance();\n+        stack.pop();\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractOperationContext.java",
                "sha": "432328323115db7d6e92c72a9c40c78fb204af14",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/invocation/Invocation.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/invocation/Invocation.java?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 42,
                "filename": "core/src/main/java/org/apache/directory/server/core/invocation/Invocation.java",
                "patch": "@@ -20,10 +20,8 @@\n package org.apache.directory.server.core.invocation;\n \n \n-import java.util.ArrayList;\n import java.util.Collections;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Collection;\n import java.util.Set;\n \n@@ -43,7 +41,6 @@\n {\n     private final Context caller;\n     private final String name;\n-    private final List<Object> parameters;\n     private final Collection<String> bypassed;\n     private final PartitionNexusProxy proxy;\n     \n@@ -58,20 +55,7 @@\n      */\n     public Invocation( PartitionNexusProxy proxy, Context caller, String name )\n     {\n-        this( proxy, caller, name, null, EMPTY_STRING_SET );\n-    }\n-\n-\n-    /**\n-     * Creates a new instance.\n-     *\n-     * @param caller the JNDI {@link Context} that made this invocation\n-     * @param name the name of the called method\n-     * @param parameters the array of parameters passed to the called method\n-     */\n-    public Invocation( PartitionNexusProxy proxy, Context caller, String name, Object[] parameters )\n-    {\n-        this( proxy, caller, name, parameters, EMPTY_STRING_SET );\n+        this( proxy, caller, name, EMPTY_STRING_SET );\n     }\n \n \n@@ -83,8 +67,7 @@ public Invocation( PartitionNexusProxy proxy, Context caller, String name, Objec\n      * @param parameters the array of parameters passed to the called method\n      * @param bypassed the set of bypassed Interceptor names\n      */\n-    public Invocation( PartitionNexusProxy proxy, Context caller, String name, Object[] parameters,\n-        Collection<String> bypassed )\n+    public Invocation( PartitionNexusProxy proxy, Context caller, String name, Collection<String> bypassed )\n     {\n         if ( proxy == null )\n         {\n@@ -101,11 +84,6 @@ public Invocation( PartitionNexusProxy proxy, Context caller, String name, Objec\n             throw new NullPointerException( \"name\" );\n         }\n \n-        if ( parameters == null )\n-        {\n-            parameters = new Object[0];\n-        }\n-\n         if ( bypassed == null )\n         {\n             this.bypassed = EMPTY_STRING_SET;\n@@ -118,15 +96,6 @@ public Invocation( PartitionNexusProxy proxy, Context caller, String name, Objec\n         this.proxy = proxy;\n         this.caller = caller;\n         this.name = name;\n-\n-        List<Object> paramList = new ArrayList<Object>();\n-        \n-        for ( int i = 0; i < parameters.length; i++ )\n-        {\n-            paramList.add( parameters[i] );\n-        }\n-\n-        this.parameters = Collections.unmodifiableList( paramList );\n     }\n \n \n@@ -157,15 +126,6 @@ public String getName()\n     }\n \n \n-    /**\n-     * Returns the list of parameters parameters passed to the called method.\n-     */\n-    public List<Object> getParameters()\n-    {\n-        return parameters;\n-    }\n-\n-\n     /**\n      * Checks to see if an interceptor is bypassed.\n      *",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/invocation/Invocation.java",
                "sha": "ba13103bb0d276ad29c1c937f99a336e5ecb1f9e",
                "status": "modified"
            },
            {
                "additions": 83,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/partition/PartitionNexusProxy.java",
                "changes": 169,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/partition/PartitionNexusProxy.java?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 86,
                "filename": "core/src/main/java/org/apache/directory/server/core/partition/PartitionNexusProxy.java",
                "patch": "@@ -40,11 +40,14 @@\n import org.apache.directory.server.core.authn.AuthenticationInterceptor;\n import org.apache.directory.server.core.authz.AciAuthorizationInterceptor;\n import org.apache.directory.server.core.authz.DefaultAuthorizationInterceptor;\n+import org.apache.directory.server.core.changelog.ChangeLogInterceptor;\n+import org.apache.directory.server.core.collective.CollectiveAttributeInterceptor;\n import org.apache.directory.server.core.entry.ServerEntry;\n import org.apache.directory.server.core.entry.ServerSearchResult;\n import org.apache.directory.server.core.enumeration.SearchResultFilter;\n import org.apache.directory.server.core.enumeration.SearchResultFilteringEnumeration;\n import org.apache.directory.server.core.event.EventInterceptor;\n+import org.apache.directory.server.core.exception.ExceptionInterceptor;\n import org.apache.directory.server.core.interceptor.InterceptorChain;\n import org.apache.directory.server.core.interceptor.context.AddContextPartitionOperationContext;\n import org.apache.directory.server.core.interceptor.context.AddOperationContext;\n@@ -79,7 +82,6 @@\n import org.apache.directory.shared.ldap.filter.ExprNode;\n import org.apache.directory.shared.ldap.name.LdapDN;\n \n-\n /**\n  * A decorator that wraps other {@link PartitionNexus} to enable\n  * {@link InterceptorChain} and {@link InvocationStack} support.\n@@ -106,6 +108,8 @@\n      * safe to use set of bypass instructions to lookup raw entries excluding operational attributes\n      */\n     public static final Collection<String> LOOKUP_EXCLUDING_OPR_ATTRS_BYPASS;\n+    \n+    public static final Collection<String> GET_ROOT_DSE_BYPASS;\n \n     /**\n      * Bypass String to use when ALL interceptors should be skipped\n@@ -186,6 +190,24 @@\n         c.add( EventInterceptor.class.getName() );\n         c.add( TriggerInterceptor.class.getName() );\n         LOOKUP_EXCLUDING_OPR_ATTRS_BYPASS = Collections.unmodifiableCollection( c );\n+        \n+        \n+        c = new HashSet<String>();\n+        c.add( NormalizationInterceptor.class.getName() );\n+        //c.add( AuthenticationInterceptor.class.getName() );\n+        c.add( ChangeLogInterceptor.class.getName() );\n+        c.add( ReferralInterceptor.class.getName() );\n+        c.add( AciAuthorizationInterceptor.class.getName() );\n+        c.add( DefaultAuthorizationInterceptor.class.getName() );\n+        c.add( ExceptionInterceptor.class.getName() );\n+        c.add( OperationalAttributeInterceptor.class.getName() );\n+        c.add( SchemaInterceptor.class.getName() );\n+        c.add( SubentryInterceptor.class.getName() );\n+        c.add( CollectiveAttributeInterceptor.class.getName() );\n+        c.add( EventInterceptor.class.getName() );\n+        c.add( TriggerInterceptor.class.getName() );\n+        GET_ROOT_DSE_BYPASS = Collections.unmodifiableCollection( c );\n+\n     }\n \n \n@@ -316,17 +338,15 @@ public LdapDN getMatchedName( GetMatchedNameOperationContext opContext ) throws\n     public LdapDN getMatchedName( GetMatchedNameOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[] {opContext};\n-        stack.push( new Invocation( this, caller, \"getMatchedName\", args, bypass ) );\n-\n+        opContext.push( new Invocation( this, caller, \"getMatchedName\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().getMatchedName( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -340,16 +360,15 @@ public LdapDN getSuffix( GetSuffixOperationContext opContext ) throws NamingExce\n     public LdapDN getSuffix( GetSuffixOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[] {opContext};\n-        stack.push( new Invocation( this, caller, \"getSuffixDn\", args, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"getSuffixDn\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().getSuffix( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -363,16 +382,15 @@ public LdapDN getSuffix( GetSuffixOperationContext opContext, Collection<String>\n     public Iterator<String> listSuffixes( ListSuffixOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[] {};\n-        stack.push( new Invocation( this, caller, \"listSuffixes\", args, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"listSuffices\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().listSuffixes( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -386,16 +404,15 @@ public boolean compare( CompareOperationContext opContext ) throws NamingExcepti\n     public boolean compare( CompareOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"compare\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"compare\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().compare( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -409,16 +426,15 @@ public void delete( DeleteOperationContext opContext ) throws NamingException\n     public void delete( DeleteOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"delete\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"delete\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().delete( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -432,16 +448,15 @@ public void add( AddOperationContext opContext ) throws NamingException\n     public void add( AddOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"add\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"add\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().add( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -455,17 +470,15 @@ public void modify( ModifyOperationContext opContext ) throws NamingException\n     public void modify( ModifyOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"modify\", new Object[]\n-                {opContext}, bypass ) );\n-\n+        opContext.push( new Invocation( this, caller, \"modify\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().modify( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -480,16 +493,15 @@ public void modify( ModifyOperationContext opContext, Collection<String> bypass\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"list\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"list\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().list( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -550,16 +562,15 @@ public boolean accept( Invocation invocation, ServerSearchResult result, SearchC\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"search\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"search\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().search( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -604,16 +615,15 @@ else if ( ( attrs.size() == 1 ) && ( attrs.contains( SchemaConstants.ALL_OPERATI\n     public ServerEntry lookup( LookupOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"lookup\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"lookup\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().lookup( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -626,16 +636,15 @@ public boolean hasEntry( EntryOperationContext opContext ) throws NamingExceptio\n     public boolean hasEntry( EntryOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"hasEntry\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"hasEntry\", bypass ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().hasEntry( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -649,17 +658,15 @@ public void rename( RenameOperationContext opContext ) throws NamingException\n     public void rename( RenameOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[]\n-                {opContext};\n-        stack.push( new Invocation( this, caller, \"rename\", args, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"rename\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().rename( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -673,16 +680,15 @@ public void move( MoveOperationContext opContext ) throws NamingException\n     public void move( MoveOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"move\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"move\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().move( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -697,17 +703,15 @@ public void moveAndRename( MoveAndRenameOperationContext opContext, Collection<S\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[]\n-                {opContext};\n-        stack.push( new Invocation( this, caller, \"moveAndRename\", args, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"moveAndRename\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().moveAndRename( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -722,36 +726,31 @@ public void bind( BindOperationContext opContext, Collection<String> bypass )\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[]\n-                {opContext};\n-\n-        stack.push( new Invocation( this, caller, \"bind\", args, bypass ) );\n-\n+        opContext.push( new Invocation( this, caller, \"bind\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().bind( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n+\n     public void unbind( UnbindOperationContext opContext, Collection<String> bypass ) throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        Object[] args = new Object[]\n-                {opContext};\n-        stack.push( new Invocation( this, caller, \"unbind\", args, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"unbind\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().unbind( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -776,30 +775,30 @@ public ServerEntry getRootDSE( GetRootDSEOperationContext opContext ) throws Nam\n             {\n                 if ( ROOT_DSE_ALL == null )\n                 {\n-                    ROOT_DSE_ALL = getRootDSE( null, null );\n+                    ROOT_DSE_ALL = getRootDSE( opContext, null );\n                 }\n             }\n \n             return ROOT_DSE_ALL;\n         }\n \n-        return getRootDSE( null, null );\n+        return getRootDSE( opContext, null );\n     }\n \n \n     public ServerEntry getRootDSE( GetRootDSEOperationContext opContext, Collection<String> bypass )\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"getRootDSE\", null, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"getRootDSE\", GET_ROOT_DSE_BYPASS ) );\n+        \n         try\n         {\n             return service.getInterceptorChain().getRootDSE( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -814,16 +813,15 @@ public void addContextPartition( AddContextPartitionOperationContext opContext,\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"addContextPartition\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"addContextPartition\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().addContextPartition( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n \n@@ -838,16 +836,15 @@ public void removeContextPartition( RemoveContextPartitionOperationContext opCon\n             throws NamingException\n     {\n         ensureStarted();\n-        InvocationStack stack = InvocationStack.getInstance();\n-        stack.push( new Invocation( this, caller, \"removeContextPartition\", new Object[]\n-                {opContext}, bypass ) );\n+        opContext.push( new Invocation( this, caller, \"removeContextPartition\", bypass ) );\n+        \n         try\n         {\n             service.getInterceptorChain().removeContextPartition( opContext );\n         }\n         finally\n         {\n-            stack.pop();\n+            opContext.pop();\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/main/java/org/apache/directory/server/core/partition/PartitionNexusProxy.java",
                "sha": "dbbcfc0a85d24b16f2dbca277fbbfb943034024e",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 11,
                "filename": "core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "patch": "@@ -97,7 +97,7 @@ public void testNoBypass() throws NamingException\n         Context ctx = new DeadContext();\n         DirectoryService ds = new MockDirectoryService();\n         PartitionNexusProxy proxy = new PartitionNexusProxy( ctx, ds );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]{ dn } );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\" );\n         InvocationStack.getInstance().push( i );\n \n         try\n@@ -122,8 +122,7 @@ public void testSingleBypass() throws NamingException\n         Context ctx = new DeadContext();\n         DirectoryService ds = new MockDirectoryService();\n         PartitionNexusProxy proxy = new PartitionNexusProxy( ctx, ds );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]\n-            { dn }, Collections.singleton( \"0\" ) );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\", Collections.singleton( \"0\" ) );\n         InvocationStack.getInstance().push( i );\n \n         try\n@@ -151,8 +150,7 @@ public void testAdjacentDoubleBypass() throws NamingException\n         Set<String> bypass = new HashSet<String>();\n         bypass.add( \"0\" );\n         bypass.add( \"1\" );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]\n-            { dn }, bypass );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\", bypass );\n         InvocationStack.getInstance().push( i );\n \n         try\n@@ -180,8 +178,7 @@ public void testFrontAndBackDoubleBypass() throws NamingException\n         Set<String> bypass = new HashSet<String>();\n         bypass.add( \"0\" );\n         bypass.add( \"4\" );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]\n-            { dn }, bypass );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\", bypass );\n         InvocationStack.getInstance().push( i );\n \n         try\n@@ -208,8 +205,7 @@ public void testDoubleBypass() throws NamingException\n         Set<String> bypass = new HashSet<String>();\n         bypass.add( \"1\" );\n         bypass.add( \"3\" );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]\n-            { dn }, bypass );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\", bypass );\n         InvocationStack.getInstance().push( i );\n \n         try\n@@ -233,8 +229,7 @@ public void testCompleteBypass() throws NamingException\n         Context ctx = new DeadContext();\n         DirectoryService ds = new MockDirectoryService();\n         PartitionNexusProxy proxy = new PartitionNexusProxy( ctx, ds );\n-        Invocation i = new Invocation( proxy, ctx, \"lookup\", new Object[]\n-            { dn }, PartitionNexusProxy.BYPASS_ALL_COLLECTION );\n+        Invocation i = new Invocation( proxy, ctx, \"lookup\", PartitionNexusProxy.BYPASS_ALL_COLLECTION );\n         InvocationStack.getInstance().push( i );\n \n         try",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "sha": "908f02039ff7e4f96a136443a85a6acf5fd406ba",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/1d92c47fdaff9e06686cb371f3591e134f18cb6b/pom.xml",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/pom.xml?ref=1d92c47fdaff9e06686cb371f3591e134f18cb6b",
                "deletions": 1,
                "filename": "pom.xml",
                "patch": "@@ -343,7 +343,7 @@\n     <module>jdbm-store</module>\n     <module>btree-base</module>\n     <module>core</module>\n-    <!-- module>core-jndi</module -->\n+    <!--module>core-jndi</module-->\n     <module>core-constants</module>\n     <module>core-shared</module>\n     <module>core-plugin</module>",
                "raw_url": "https://github.com/apache/directory-server/raw/1d92c47fdaff9e06686cb371f3591e134f18cb6b/pom.xml",
                "sha": "60528782c2a9f984ec6a4514740520a728d83f6b",
                "status": "modified"
            }
        ],
        "message": "o Moved the invocation stack handling into the OperationContext\no Added a @Factory into the AdministratorsGroup test to avoid a NPE when the test is run alone\no added a package for core-jndi (not yeat integrated into the build)\no Modify te PartitionNexusProxy to use the OperationContext modification with the Invocation\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@653338 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/5b90fea8ecbc9adc709ad158fbded30d36d37878",
        "patched_files": [
            "pom.xml",
            "InterceptorChain.java",
            "AbstractOperationContext.java",
            "Invocation.java",
            "AdministratorsGroupIT.java",
            "PartitionNexusProxy.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "InterceptorChainTest.java"
        ]
    },
    "directory-server_22c5892": {
        "bug_id": "directory-server_22c5892",
        "commit": "https://github.com/apache/directory-server/commit/22c5892250a722470f57f31d569e96a716fc6ee2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/22c5892250a722470f57f31d569e96a716fc6ee2/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java?ref=22c5892250a722470f57f31d569e96a716fc6ee2",
                "deletions": 2,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.directory.shared.ldap.filter.SearchScope;\n import org.apache.directory.shared.ldap.name.DN;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -76,8 +77,8 @@\n {\n     private static LdapConnection connection;\n \n-    @BeforeClass\n-    public static void setup() throws Exception\n+    @Before\n+    public void setup() throws Exception\n     {\n         connection = new LdapNetworkConnection( \"localhost\", ldapServer.getPort() );\n         DN bindDn = new DN( \"uid=admin,ou=system\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/22c5892250a722470f57f31d569e96a716fc6ee2/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "sha": "9daf20e1ccb368196c61c6065038dedbab158e4d",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE in test\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@961861 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/256005adfba6f7277a46debadf14f0c80a865ed0",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "SearchRequestReturningAttributesTest.java"
        ]
    },
    "directory-server_3128c55": {
        "bug_id": "directory-server_3128c55",
        "commit": "https://github.com/apache/directory-server/commit/3128c55f844c31fd55437cdcb4846c7835ef8c4f",
        "file": [
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/directory-server/blob/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core-integ/src/test/java/org/apache/directory/server/core/jndi/MixedCaseITest.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/jndi/MixedCaseITest.java?ref=3128c55f844c31fd55437cdcb4846c7835ef8c4f",
                "deletions": 30,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/jndi/MixedCaseITest.java",
                "patch": "@@ -20,33 +20,16 @@\n package org.apache.directory.server.core.jndi;\n \n \n-import org.apache.directory.server.core.DefaultDirectoryService;\n-import org.apache.directory.server.core.DirectoryService;\n-import org.apache.directory.server.core.entry.ServerEntry;\n-import org.apache.directory.server.core.integ.CiRunner;\n-import org.apache.directory.server.core.integ.DirectoryServiceFactory;\n import static org.apache.directory.server.core.integ.IntegrationUtils.getContext;\n-import org.apache.directory.server.core.integ.Level;\n-import org.apache.directory.server.core.integ.annotations.Factory;\n-import org.apache.directory.server.core.integ.annotations.CleanupLevel;\n-import org.apache.directory.server.core.partition.Partition;\n-import org.apache.directory.server.xdbm.Index;\n-import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n-import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;\n-import org.apache.directory.server.core.partition.ldif.LdifPartition;\n-import org.apache.directory.server.core.schema.SchemaPartition;\n-import org.apache.directory.shared.ldap.exception.LdapNameNotFoundException;\n-import org.apache.directory.shared.ldap.name.LdapDN;\n-\n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import org.junit.Before;\n-import org.junit.Test;\n-import org.junit.runner.RunWith;\n+import java.io.File;\n+import java.util.HashSet;\n+import java.util.Set;\n \n import javax.naming.NamingEnumeration;\n import javax.naming.directory.Attribute;\n@@ -58,8 +41,31 @@\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n import javax.naming.ldap.LdapContext;\n-import java.util.HashSet;\n-import java.util.Set;\n+\n+import org.apache.directory.server.constants.ServerDNConstants;\n+import org.apache.directory.server.core.DefaultDirectoryService;\n+import org.apache.directory.server.core.DirectoryService;\n+import org.apache.directory.server.core.entry.ServerEntry;\n+import org.apache.directory.server.core.integ.CiRunner;\n+import org.apache.directory.server.core.integ.DirectoryServiceFactory;\n+import org.apache.directory.server.core.integ.Level;\n+import org.apache.directory.server.core.integ.annotations.CleanupLevel;\n+import org.apache.directory.server.core.integ.annotations.Factory;\n+import org.apache.directory.server.core.partition.Partition;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;\n+import org.apache.directory.server.core.partition.ldif.LdifPartition;\n+import org.apache.directory.server.core.schema.SchemaPartition;\n+import org.apache.directory.server.xdbm.Index;\n+import org.apache.directory.shared.ldap.constants.SchemaConstants;\n+import org.apache.directory.shared.ldap.exception.LdapNameNotFoundException;\n+import org.apache.directory.shared.ldap.name.LdapDN;\n+import org.apache.directory.shared.ldap.schema.ldif.extractor.SchemaLdifExtractor;\n+import org.apache.directory.shared.ldap.schema.registries.Registries;\n+import org.apache.directory.shared.schema.loader.ldif.JarLdifSchemaLoader;\n+import org.junit.Before;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n \n \n /**\n@@ -82,26 +88,70 @@\n     {\n         public DirectoryService newInstance() throws Exception\n         {\n-            DefaultDirectoryService service = new DefaultDirectoryService();\n-            SchemaPartition schemaPartition = new SchemaPartition();\n-            schemaPartition.setWrappedPartition( new LdifPartition() );\n-            service.getSchemaService().setSchemaPartition( schemaPartition );\n+            String workingDirectory = System.getProperty( \"workingDirectory\" );\n+\n+            if ( workingDirectory == null )\n+            {\n+                String path = DirectoryServiceFactory.class.getResource( \"\" ).getPath();\n+                int targetPos = path.indexOf( \"target\" );\n+                workingDirectory = path.substring( 0, targetPos + 6 ) + \"/server-work\";\n+            }\n+\n+            DirectoryService service = new DefaultDirectoryService();\n+            service.setWorkingDirectory( new File( workingDirectory ) );\n+            SchemaPartition schemaPartition = service.getSchemaService().getSchemaPartition();\n+            Registries registries = service.getRegistries();\n+            \n+            // Init the LdifPartition\n+            LdifPartition ldifPartition = new LdifPartition();\n+            \n+            ldifPartition.setWorkingDirectory( workingDirectory + \"/schema\" );\n+            \n+            // Extract the schema on disk (a brand new one) and load the registries\n+            SchemaLdifExtractor extractor = new SchemaLdifExtractor( new File( workingDirectory ) );\n+            \n+            schemaPartition.setWrappedPartition( ldifPartition );\n+            schemaPartition.setRegistries( registries );\n+            \n+            JarLdifSchemaLoader loader = new JarLdifSchemaLoader();\n+            loader.loadAllEnabled( registries );\n+            extractor.extractOrCopy();\n+\n             service.getChangeLog().setEnabled( true );\n \n+            // change the working directory to something that is unique\n+            // on the system and somewhere either under target directory\n+            // or somewhere in a temp area of the machine.\n+            \n+            // Inject the System Partition\n+            Partition systemPartition = new JdbmPartition();\n+            systemPartition.setId( \"system\" );\n+            ((JdbmPartition)systemPartition).setCacheSize( 500 );\n+            systemPartition.setSuffix( ServerDNConstants.SYSTEM_DN );\n+            systemPartition.setRegistries( registries );\n+            ((JdbmPartition)systemPartition).setPartitionDir( new File( workingDirectory, \"system\" ) );\n+    \n+            // Add objectClass attribute for the system partition\n+            Set<Index<?,ServerEntry>> indexedAttrs = new HashSet<Index<?,ServerEntry>>();\n+            indexedAttrs.add( \n+                new JdbmIndex<Object,ServerEntry>( SchemaConstants.OBJECT_CLASS_AT ) );\n+            ( ( JdbmPartition ) systemPartition ).setIndexedAttributes( indexedAttrs );\n+            \n+            service.setSystemPartition( systemPartition );\n+\n             JdbmPartition partition = new JdbmPartition();\n             partition.setId( \"apache\" );\n             partition.setSuffix( SUFFIX_DN );\n+            partition.setPartitionDir( new File( workingDirectory, \"apache\" ) );\n \n             HashSet<Index<?, ServerEntry>> indexedAttributes = new HashSet<Index<?, ServerEntry>>();\n             indexedAttributes.add( new JdbmIndex<String,ServerEntry>( \"objectClass\" ) );\n             indexedAttributes.add( new JdbmIndex<String,ServerEntry>( \"ou\" ) );\n             indexedAttributes.add( new JdbmIndex<String,ServerEntry>( \"uid\" ) );\n             partition.setIndexedAttributes( indexedAttributes );\n \n-            Set<Partition> partitions = new HashSet<Partition>();\n-            partitions.add( partition );\n+            service.addPartition( partition );\n \n-            service.setPartitions( partitions );\n             return service;\n         }\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core-integ/src/test/java/org/apache/directory/server/core/jndi/MixedCaseITest.java",
                "sha": "4361706b52f901ad2f07a13a4d64a8c14eeb44c5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java?ref=3128c55f844c31fd55437cdcb4846c7835ef8c4f",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "patch": "@@ -332,13 +332,16 @@ public void setPartitions( Set<? extends Partition> partitions )\n         Set<Partition> cloned = new HashSet<Partition>();\n         cloned.addAll( partitions );\n         Set<String> names = new HashSet<String>();\n+        \n         for ( Partition partition : cloned )\n         {\n             String id = partition.getId();\n+            \n             if ( names.contains( id ) )\n             {\n                 LOG.warn( \"Encountered duplicate partition {} identifier.\", id );\n             }\n+            \n             names.add( id );\n         }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "sha": "a89b979d305d5c67b1a48458186dfc165bb1a2d4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core/src/main/java/org/apache/directory/server/core/partition/DefaultPartitionNexus.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/partition/DefaultPartitionNexus.java?ref=3128c55f844c31fd55437cdcb4846c7835ef8c4f",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/partition/DefaultPartitionNexus.java",
                "patch": "@@ -238,7 +238,7 @@ public void initialize( ) throws Exception\n         {\n             for ( Partition partition : directoryService.getPartitions() )\n             {\n-                //adminDn.normalize( registries.getAttributeTypeRegistry().getNormalizerMapping() );\n+                partition.setRegistries( registries );\n                 CoreSession adminSession = new DefaultCoreSession( \n                     new LdapPrincipal( adminDn, AuthenticationLevel.STRONG ), directoryService );\n     ",
                "raw_url": "https://github.com/apache/directory-server/raw/3128c55f844c31fd55437cdcb4846c7835ef8c4f/core/src/main/java/org/apache/directory/server/core/partition/DefaultPartitionNexus.java",
                "sha": "1a25697768f67c02cefc25cf059b6e4d7f9cd10d",
                "status": "modified"
            }
        ],
        "message": "Added partitions have the registries injected if it's not already done\nFixed a NPE by injecting the working directory in the JDBMPartition\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-schema@813577 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/a39a365c0d5179dd6f54b923658f60603764ac79",
        "patched_files": [
            "DefaultPartitionNexus.java",
            "DefaultDirectoryService.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "MixedCaseITest.java"
        ]
    },
    "directory-server_35eba60": {
        "bug_id": "directory-server_35eba60",
        "commit": "https://github.com/apache/directory-server/commit/35eba60a9c2d4895584b825fccab5a745c4a9198",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/directory-server/blob/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java?ref=35eba60a9c2d4895584b825fccab5a745c4a9198",
                "deletions": 9,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "patch": "@@ -31,7 +31,10 @@\n import org.apache.directory.server.xdbm.Tuple;\n import org.apache.directory.server.xdbm.IndexCursor;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.util.SynchronizedLRUMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.naming.NamingException;\n import java.io.File;\n@@ -48,53 +51,66 @@\n  */\n public class JdbmIndex<K,O> implements Index<K,O>\n {\n+    /** A logger for this class */\n+    private static final Logger LOG = LoggerFactory.getLogger( JdbmIndex.class.getSimpleName() );\n+\n     /**\n      * default duplicate limit before duplicate keys switch to using a btree for values\n      */\n     public static final int DEFAULT_DUPLICATE_LIMIT = 512;\n \n     /**  the key used for the forward btree name */\n     public static final String FORWARD_BTREE = \"_forward\";\n+    \n     /**  the key used for the reverse btree name */\n     public static final String REVERSE_BTREE = \"_reverse\";\n \n     /** the attribute type resolved for this JdbmIndex */\n     private AttributeType attribute;\n+\n     /**\n      * the forward btree where the btree key is the value of the indexed attribute and\n      * the value of the btree is the entry id of the entry containing an attribute with\n      * that value\n      */\n     protected JdbmTable<K, Long> forward;\n+    \n     /**\n      * the reverse btree where the btree key is the entry id of the entry containing a\n      * value for the indexed attribute, and the btree value is the value of the indexed\n      * attribute\n      */\n     protected JdbmTable<Long,K> reverse;\n+    \n     /**\n      * the JDBM record manager for the file containing this index\n      */\n     protected RecordManager recMan;\n+    \n     /**\n      * the normalized value cache for this index\n      * @todo I don't think the keyCache is required anymore since the normalizer\n      * will cache values for us.\n      */\n     protected SynchronizedLRUMap keyCache;\n+    \n     /** the size (number of index entries) for the cache */\n     protected int cacheSize = DEFAULT_INDEX_CACHE_SIZE;\n+    \n     /**\n      * duplicate limit before duplicate keys switch to using a btree for values\n      */\n     protected int numDupLimit = DEFAULT_DUPLICATE_LIMIT;\n+    \n     /**\n      * the attribute identifier set at configuration time for this index which may not\n      * be the OID but an alias name for the attributeType associated with this Index\n      */\n     private String attributeId;\n+    \n     /** whether or not this index has been initialized */\n     protected boolean initialized;\n+    \n     /** a customm working directory path when specified in configuration */\n     protected File wkDirPath;\n \n@@ -136,8 +152,10 @@ public JdbmIndex( String attributeId )\n \n     public void init( AttributeType attributeType, File wkDirPath ) throws IOException\n     {\n-        this.keyCache = new SynchronizedLRUMap( cacheSize );\n-        this.attribute = attributeType;\n+        LOG.debug( \"Initializing an Index for attribute '{}'\", attributeType.getName() );\n+        \n+        keyCache = new SynchronizedLRUMap( cacheSize );\n+        attribute = attributeType;\n \n         if ( attributeId == null )\n         {\n@@ -182,7 +200,9 @@ private void initTables() throws IOException\n \n         try\n         {\n-            comp = new SerializableComparator<K>( attribute.getEquality().getOid() );\n+            MatchingRule mr = attribute.getEquality();\n+            \n+            comp = new SerializableComparator<K>( mr.getOid() );\n         }\n         catch ( NamingException e )\n         {\n@@ -469,8 +489,6 @@ public void drop( Long id ) throws Exception\n     // ------------------------------------------------------------------------\n     // Index Cursor Operations\n     // ------------------------------------------------------------------------\n-\n-\n     @SuppressWarnings(\"unchecked\")\n     public IndexCursor<K, O> reverseCursor() throws Exception\n     {\n@@ -514,8 +532,6 @@ public void drop( Long id ) throws Exception\n     // ------------------------------------------------------------------------\n     // Value Assertion (a.k.a Index Lookup) Methods //\n     // ------------------------------------------------------------------------\n-\n-    \n     /**\n      * @see Index#forward(Object)\n      */\n@@ -626,8 +642,6 @@ public boolean reverseLessOrEq( Long id, K attrVal ) throws Exception\n     // ------------------------------------------------------------------------\n     // Maintenance Methods \n     // ------------------------------------------------------------------------\n-\n-\n     /**\n      * @see org.apache.directory.server.xdbm.Index#close()\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmIndex.java",
                "sha": "deab7d701c881456fe68c89f45dac32d50cfd3b3",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/directory-server/blob/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java?ref=35eba60a9c2d4895584b825fccab5a745c4a9198",
                "deletions": 2,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "patch": "@@ -64,6 +64,7 @@\n import org.apache.directory.shared.ldap.name.LdapDN;\n import org.apache.directory.shared.ldap.name.Rdn;\n import org.apache.directory.shared.ldap.schema.AttributeType;\n+import org.apache.directory.shared.ldap.schema.MatchingRule;\n import org.apache.directory.shared.ldap.util.NamespaceTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -372,9 +373,23 @@ private void setupUserIndices() throws Exception\n             for ( Index<?,E> index : userIndices.values() )\n             {\n                 String oid = oidRegistry.getOid( index.getAttributeId() );\n-                tmp.put( oid, index );\n-                ( ( JdbmIndex ) index ).init( attributeTypeRegistry.lookup( oid ), workingDirectory );\n+                AttributeType attributeType = attributeTypeRegistry.lookup( oid );\n+                \n+                // Check that the attributeType has an EQUALITY matchingRule\n+                MatchingRule mr = attributeType.getEquality();\n+                \n+                if ( mr != null )\n+                {\n+                    ( ( JdbmIndex ) index ).init( attributeTypeRegistry.lookup( oid ), workingDirectory );\n+                    tmp.put( oid, index );\n+                }\n+                else\n+                {\n+                    LOG.error( \"Cannot build an index for attribute '{}', no EQUALITY MatchingRule defined\",\n+                        attributeType.getName() );\n+                }\n             }\n+            \n             userIndices = tmp;\n         }\n         else",
                "raw_url": "https://github.com/apache/directory-server/raw/35eba60a9c2d4895584b825fccab5a745c4a9198/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "sha": "a1001c2ccf53a6b879de7a2e7aaa04336048e3b9",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE when we try to create an index on an attributeType which has no EQUALITY matching rule\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@751899 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/cc4e1268083a3ecd8f604f8cc29df55281aa1aba",
        "patched_files": [
            "JdbmIndex.java",
            "JdbmStore.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "JdbmIndexTest.java",
            "JdbmStoreTest.java"
        ]
    },
    "directory-server_3ad028d": {
        "bug_id": "directory-server_3ad028d",
        "commit": "https://github.com/apache/directory-server/commit/3ad028dad1b498fe384ea2da712e595c4d62c6a4",
        "file": [
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/directory-server/blob/3ad028dad1b498fe384ea2da712e595c4d62c6a4/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java?ref=3ad028dad1b498fe384ea2da712e595c4d62c6a4",
                "deletions": 0,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.directory.shared.ldap.model.name.Dn;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -136,6 +137,41 @@ public void testAsyncBindRequest() throws Exception\n     }\n \n \n+    /**\n+     * Test a successful simple bind request.\n+     */\n+    @Test\n+    public void testSimpleBindRequest() throws Exception\n+    {\n+        BindRequest bindRequest = new BindRequestImpl();\n+        bindRequest.setName( new Dn( \"uid=admin,ou=system\" ) );\n+        bindRequest.setCredentials( \"secret\" );\n+\n+        BindResponse bindResponse = connection.bind( bindRequest );\n+\n+        assertNotNull( bindResponse );\n+        assertEquals( ResultCodeEnum.SUCCESS, bindResponse.getLdapResult().getResultCode() );\n+        assertTrue( connection.isAuthenticated() );\n+    }\n+\n+\n+    /**\n+     * Test a successful anonymous bind request.\n+     */\n+    @Test\n+    @Ignore // TODO : FIXME ! We get a NPE low in the code because the name is null\n+    public void testAnonymousBindRequest() throws Exception\n+    {\n+        BindRequest bindRequest = new BindRequestImpl();\n+\n+        BindResponse bindResponse = connection.bind( bindRequest );\n+\n+        assertNotNull( bindResponse );\n+        assertEquals( ResultCodeEnum.SUCCESS, bindResponse.getLdapResult().getResultCode() );\n+        assertTrue( connection.isAuthenticated() );\n+    }\n+\n+\n     /**\n      * Test an Anonymous BindRequest\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/3ad028dad1b498fe384ea2da712e595c4d62c6a4/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "sha": "93b320a1b57330a7ffb5535885a874bd24af787c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/directory-server/blob/3ad028dad1b498fe384ea2da712e595c4d62c6a4/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/plain/PlainSaslServer.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/plain/PlainSaslServer.java?ref=3ad028dad1b498fe384ea2da712e595c4d62c6a4",
                "deletions": 3,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/plain/PlainSaslServer.java",
                "patch": "@@ -22,6 +22,9 @@\n \n import java.io.IOException;\n \n+import javax.naming.InvalidNameException;\n+import javax.security.sasl.SaslException;\n+\n import org.apache.directory.server.core.CoreSession;\n import org.apache.directory.server.core.interceptor.context.BindOperationContext;\n import org.apache.directory.server.i18n.I18n;\n@@ -34,9 +37,6 @@\n import org.apache.directory.shared.util.StringConstants;\n import org.apache.directory.shared.util.Strings;\n \n-import javax.naming.InvalidNameException;\n-import javax.security.sasl.SaslException;\n-\n \n /**\n  * A SaslServer implementation for PLAIN based SASL mechanism.  This is\n@@ -126,6 +126,11 @@ public String getMechanismName()\n             // - the optional authzId\n             // - the authId\n             // - the password\n+            // The message should have this structure :\n+            // message   = [authzid] '0x00' authcid '0x00' passwd\n+            // authzid   = 1*SAFE ; MUST accept up to 255 octets\n+            // authcid   = 1*SAFE ; MUST accept up to 255 octets\n+            // passwd    = 1*SAFE ; MUST accept up to 255 octets\n             InitialResponse element = InitialResponse.AUTHZID_EXPECTED;\n             String authzId = null;\n             String authcId = null;",
                "raw_url": "https://github.com/apache/directory-server/raw/3ad028dad1b498fe384ea2da712e595c4d62c6a4/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/plain/PlainSaslServer.java",
                "sha": "c5e922e733ea6df0136d69fb50c4e4eba0f97f42",
                "status": "modified"
            }
        ],
        "message": "o Added a tests for a simple bind request and an (ignored atm) anonymous bind request. The Anonymous bind fails because we have a NPE in the BindRequest encoder when the name is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1091679 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/ad6240d74d748bc5c321b420f2aba9aae2d91be9",
        "patched_files": [
            "PlainSaslServer.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SimpleBindRequestTest.java"
        ]
    },
    "directory-server_471f1b0": {
        "bug_id": "directory-server_471f1b0",
        "commit": "https://github.com/apache/directory-server/commit/471f1b02146ef9cff141703b2f7f0160d7d11555",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/471f1b02146ef9cff141703b2f7f0160d7d11555/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java?ref=471f1b02146ef9cff141703b2f7f0160d7d11555",
                "deletions": 1,
                "filename": "jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "patch": "@@ -302,7 +302,11 @@ public synchronized void sync() throws Exception\n         else if ( index instanceof JdbmIndex<?, ?> )\n         {\n             jdbmIndex = ( JdbmIndex<?, E> ) index;\n-            jdbmIndex.setWkDirPath( partitionDir );\n+            \n+            if ( jdbmIndex.getWkDirPath() == null )\n+            {\n+                jdbmIndex.setWkDirPath( partitionDir );\n+            }\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/471f1b02146ef9cff141703b2f7f0160d7d11555/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "sha": "e514cac5c0d4262703d45d7df491c5a8f13e5478",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-config@1028919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/168f46bf91677fd58ba78707fe2bdbad711852a6",
        "patched_files": [
            "JdbmStore.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "JdbmStoreTest.java"
        ]
    },
    "directory-server_4a859c9": {
        "bug_id": "directory-server_4a859c9",
        "commit": "https://github.com/apache/directory-server/commit/4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core-api/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractChangeOperationContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractChangeOperationContext.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 2,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractChangeOperationContext.java",
                "patch": "@@ -21,8 +21,8 @@\n \n \n import org.apache.directory.server.core.CoreSession;\n-import org.apache.directory.server.core.changelog.LogChange;\n import org.apache.directory.server.core.changelog.ChangeLogEvent;\n+import org.apache.directory.server.core.changelog.LogChange;\n import org.apache.directory.shared.ldap.name.LdapDN;\n \n \n@@ -81,6 +81,6 @@ public void setLogChange( LogChange logChange )\n      */\n     public boolean isLogChange()\n     {\n-        return logChange != logChange.FALSE;\n+        return logChange != LogChange.FALSE;\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core-api/src/main/java/org/apache/directory/server/core/interceptor/context/AbstractChangeOperationContext.java",
                "sha": "3e3dcff4910bb17dccb9f8a338f0e6f585e82ab3",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core-api/src/main/java/org/apache/directory/server/core/schema/SchemaPartitionDaoImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/schema/SchemaPartitionDaoImpl.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/schema/SchemaPartitionDaoImpl.java",
                "patch": "@@ -650,7 +650,7 @@ public void enableSchema( String schemaName ) throws Exception\n \n         List<String> names = mr.getNames();\n         \n-        if ( ( names != null ) || ( names.size() > 0 ) )\n+        if ( ( names != null ) && ( names.size() > 0 ) )\n         {\n             for ( String name : names )\n             {",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core-api/src/main/java/org/apache/directory/server/core/schema/SchemaPartitionDaoImpl.java",
                "sha": "85d418e224b2d3a4a013d2873fc846d727d6ca7f",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core/src/main/java/org/apache/directory/server/core/configuration/AttributesPropertyEditor.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/configuration/AttributesPropertyEditor.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 9,
                "filename": "core/src/main/java/org/apache/directory/server/core/configuration/AttributesPropertyEditor.java",
                "patch": "@@ -19,6 +19,15 @@\n  */\n package org.apache.directory.server.core.configuration;\n \n+import java.beans.PropertyEditor;\n+import java.beans.PropertyEditorSupport;\n+import java.io.BufferedReader;\n+import java.io.IOException;\n+import java.io.StringReader;\n+\n+import javax.naming.NamingException;\n+import javax.naming.directory.Attributes;\n+\n import org.apache.directory.server.core.DirectoryService;\n import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n@@ -28,14 +37,6 @@\n import org.apache.directory.shared.ldap.util.AttributeUtils;\n import org.apache.directory.shared.ldap.util.StringTools;\n \n-import javax.naming.NamingException;\n-import javax.naming.directory.Attributes;\n-import java.beans.PropertyEditor;\n-import java.beans.PropertyEditorSupport;\n-import java.io.BufferedReader;\n-import java.io.IOException;\n-import java.io.StringReader;\n-\n \n /**\n  * A JavaBeans {@link PropertyEditor} that can convert {@link Attributes} to\n@@ -68,7 +69,6 @@ public AttributesPropertyEditor( Object source )\n     /**\n      * Returns LDIF string of {@link Attributes} object.\n      */\n-    @SuppressWarnings(\"deprecation\")\n     public String getAsText()\n     {\n         Attributes attrs = (Attributes) getValue();",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core/src/main/java/org/apache/directory/server/core/configuration/AttributesPropertyEditor.java",
                "sha": "afa0eba8d26858d7eb61ebdbbe5f0e4ed093520e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core/src/main/java/org/apache/directory/server/core/subtree/RefinementLeafEvaluator.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/subtree/RefinementLeafEvaluator.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 6,
                "filename": "core/src/main/java/org/apache/directory/server/core/subtree/RefinementLeafEvaluator.java",
                "patch": "@@ -20,18 +20,16 @@\n package org.apache.directory.server.core.subtree;\n \n \n+import java.util.Iterator;\n+\n+import javax.naming.NamingException;\n+\n import org.apache.directory.server.core.entry.ServerAttribute;\n import org.apache.directory.shared.ldap.constants.SchemaConstants;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n-import org.apache.directory.shared.ldap.entry.client.ClientBinaryValue;\n-import org.apache.directory.shared.ldap.entry.client.ClientStringValue;\n import org.apache.directory.shared.ldap.filter.EqualityNode;\n import org.apache.directory.shared.ldap.filter.SimpleNode;\n import org.apache.directory.shared.ldap.schema.registries.OidRegistry;\n-import org.apache.directory.shared.ldap.util.StringTools;\n-\n-import javax.naming.NamingException;\n-import java.util.Iterator;\n \n \n /**",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/core/src/main/java/org/apache/directory/server/core/subtree/RefinementLeafEvaluator.java",
                "sha": "6d8e778041748b5b0457589a48175bc2f96df7fe",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/kerberos-shared/src/main/java/org/apache/directory/server/kerberos/shared/messages/components/Ticket.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/kerberos-shared/src/main/java/org/apache/directory/server/kerberos/shared/messages/components/Ticket.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 6,
                "filename": "kerberos-shared/src/main/java/org/apache/directory/server/kerberos/shared/messages/components/Ticket.java",
                "patch": "@@ -29,14 +29,8 @@\n import org.apache.directory.server.kerberos.shared.KerberosConstants;\n import org.apache.directory.server.kerberos.shared.KerberosUtils;\n import org.apache.directory.server.kerberos.shared.exceptions.ErrorType;\n-import org.apache.directory.server.kerberos.shared.messages.value.AuthorizationData;\n import org.apache.directory.server.kerberos.shared.messages.value.EncryptedData;\n-import org.apache.directory.server.kerberos.shared.messages.value.EncryptionKey;\n-import org.apache.directory.server.kerberos.shared.messages.value.HostAddresses;\n-import org.apache.directory.server.kerberos.shared.messages.value.KerberosTime;\n import org.apache.directory.server.kerberos.shared.messages.value.PrincipalName;\n-import org.apache.directory.server.kerberos.shared.messages.value.TransitedEncoding;\n-import org.apache.directory.server.kerberos.shared.messages.value.flags.TicketFlags;\n import org.apache.directory.shared.asn1.AbstractAsn1Object;\n import org.apache.directory.shared.asn1.ber.tlv.TLV;\n import org.apache.directory.shared.asn1.ber.tlv.UniversalTag;",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/kerberos-shared/src/main/java/org/apache/directory/server/kerberos/shared/messages/components/Ticket.java",
                "sha": "0566f3ed2ef7801a94d1360a49ff37d1a797af87",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/ldap-api-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientAddRequestTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-api-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientAddRequestTest.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 1,
                "filename": "ldap-api-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientAddRequestTest.java",
                "patch": "@@ -32,7 +32,6 @@\n import org.apache.directory.server.core.CoreSession;\n import org.apache.directory.server.core.integ.AbstractLdapTestUnit;\n import org.apache.directory.server.core.integ.FrameworkRunner;\n-import org.apache.directory.server.ldap.LdapServer;\n import org.apache.directory.shared.ldap.client.api.LdapConnection;\n import org.apache.directory.shared.ldap.client.api.exception.LdapException;\n import org.apache.directory.shared.ldap.client.api.listeners.AddListener;",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/ldap-api-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientAddRequestTest.java",
                "sha": "51c80dddbca02ab678ba9047caa1ef3bf0366a72",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/server-tools/src/main/java/org/apache/directory/server/tools/IndexCommand.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-tools/src/main/java/org/apache/directory/server/tools/IndexCommand.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 2,
                "filename": "server-tools/src/main/java/org/apache/directory/server/tools/IndexCommand.java",
                "patch": "@@ -62,7 +62,6 @@ public IndexCommand()\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     private SchemaManager loadSchemaManager() throws Exception\n     {\n         // --------------------------------------------------------------------\n@@ -89,7 +88,7 @@ public void execute( CommandLine cmdline ) throws Exception\n         \n         for ( int ii = 0; ii < partitions.length; ii++ )\n         {\n-            File partitionDirectory = partitionDirectory = new File( getInstanceLayout().getPartitionsDir(), partitions[ii] );\n+            File partitionDirectory = new File( getInstanceLayout().getPartitionsDir(), partitions[ii] );\n             File indexDir = null;\n             \n             if( indexDirPath != null )",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/server-tools/src/main/java/org/apache/directory/server/tools/IndexCommand.java",
                "sha": "7e6d78071521b4de0c2080457757f68dc4eba707",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/LessEqCursor.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/LessEqCursor.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 4,
                "filename": "xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/LessEqCursor.java",
                "patch": "@@ -135,7 +135,6 @@ else if ( compareValue == 0 )\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     public void before( IndexEntry<V, ServerEntry> element ) throws Exception\n     {\n         checkNotClosed( \"before()\" );\n@@ -180,7 +179,6 @@ else if ( compareValue == 0 )\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     public void afterValue( Long id, V value ) throws Exception\n     {\n         checkNotClosed( \"afterValue()\" );\n@@ -217,7 +215,6 @@ public void afterValue( Long id, V value ) throws Exception\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     public void after( IndexEntry<V, ServerEntry> element ) throws Exception\n     {\n         checkNotClosed( \"after()\" );\n@@ -337,7 +334,6 @@ public boolean previous() throws Exception\n     }\n \n \n-    @SuppressWarnings(\"unchecked\")\n     public boolean next() throws Exception\n     {\n         checkNotClosed( \"next()\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/LessEqCursor.java",
                "sha": "a34c97c13e1125d218676c548d5c70b150f8d68f",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/SubstringEvaluator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/SubstringEvaluator.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 1,
                "filename": "xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/SubstringEvaluator.java",
                "patch": "@@ -199,7 +199,6 @@ private boolean evaluateWithIndex( IndexEntry<?,ServerEntry> indexEntry ) throws\n     }\n \n \n-    @SuppressWarnings( { \"UnusedDeclaration\" } )\n     private boolean evaluateWithIndex( ServerEntry entry ) throws Exception\n     {\n         throw new UnsupportedOperationException( \"This is too inefficient without getId() on ServerEntry\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/SubstringEvaluator.java",
                "sha": "f7d14a93810cc77980d04bebaee67de54a35975d",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/OrCursorTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/OrCursorTest.java?ref=4a859c9a6f7a4ae5c7b37538364d3859d2f52349",
                "deletions": 1,
                "filename": "xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/OrCursorTest.java",
                "patch": "@@ -162,7 +162,6 @@ public void destryStore() throws Exception\n \n     \n     @Test\n-    @SuppressWarnings( \"unchecked\" )\n     public void testOrCursorUsingCursorBuilder() throws Exception\n     {\n         String filter = \"(|(cn=J*)(sn=W*))\";",
                "raw_url": "https://github.com/apache/directory-server/raw/4a859c9a6f7a4ae5c7b37538364d3859d2f52349/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/OrCursorTest.java",
                "sha": "78251b4ac1f82bf1fed700c994747cd49bb424f0",
                "status": "modified"
            }
        ],
        "message": "Many fixes :\no potential NPE\no unused imports removal\no useless @SuppressWarnings removal\no unused variable removal\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-schema@896304 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/83426e35e438acff494c3d6c655958ee5dcdbb43",
        "patched_files": [
            "Ticket.java",
            "AttributesPropertyEditor.java",
            "AbstractChangeOperationContext.java",
            "OrCursor.java",
            "IndexCommand.java",
            "RefinementLeafEvaluator.java",
            "LessEqCursor.java",
            "SchemaPartitionDaoImpl.java",
            "SubstringEvaluator.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "TicketTest.java",
            "RefinementLeafEvaluatorTest.java",
            "ClientAddRequestTest.java",
            "OrCursorTest.java"
        ]
    },
    "directory-server_67fa255": {
        "bug_id": "directory-server_67fa255",
        "commit": "https://github.com/apache/directory-server/commit/67fa25501888994efaf3d3320aae31c55b37a73a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "patch": "@@ -1017,7 +1017,7 @@ private Element( String name, Element prevEntry, Element nextEntry, Interceptor\n \n             if ( interceptor == null )\n             {\n-                throw new NullPointerException( \"interceptor\" );\n+                throw new IllegalArgumentException( \"interceptor\" );\n             }\n \n             this.prevEntry = prevEntry;",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "sha": "10451bef7a018c80674214fa2ee8c7270df13aab",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/core-avl/src/main/java/org/apache/directory/server/core/avltree/SingletonOrOrderedSet.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/main/java/org/apache/directory/server/core/avltree/SingletonOrOrderedSet.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 6,
                "filename": "core-avl/src/main/java/org/apache/directory/server/core/avltree/SingletonOrOrderedSet.java",
                "patch": "@@ -43,7 +43,7 @@ public SingletonOrOrderedSet( V singleton )\n     {\n         if ( singleton == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_447 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_447 ) );\n         }\n         \n         this.singleton = singleton;\n@@ -60,7 +60,7 @@ public SingletonOrOrderedSet( AvlTree<V> orderedSet )\n     {\n         if ( orderedSet == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_448 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_448 ) );\n         }\n         \n         this.orderedSet = orderedSet;\n@@ -116,7 +116,7 @@ public V setSingleton( V singleton )\n     {\n         if ( singleton == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_447 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_447 ) );\n         }\n         \n         if ( this.orderedSet != null )\n@@ -142,7 +142,7 @@ public V setSingleton( V singleton )\n     {\n         if ( singleton == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_447 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_447 ) );\n         }\n         \n         if ( this.singleton != null )\n@@ -185,7 +185,7 @@ public V setSingleton( V singleton )\n     {\n         if ( orderedSet == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_448 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_448 ) );\n         }\n         \n         if ( this.singleton != null )\n@@ -211,7 +211,7 @@ public V switchToOrderedSet( AvlTree<V> orderedSet )\n     {\n         if ( orderedSet == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_448 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_448 ) );\n         }\n         \n         if ( this.orderedSet != null )",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/core-avl/src/main/java/org/apache/directory/server/core/avltree/SingletonOrOrderedSet.java",
                "sha": "537b2d6f80b555ee72d2f60cf81017023c6f240e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/core/src/main/java/org/apache/directory/server/core/authz/support/ACDFEngine.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/authz/support/ACDFEngine.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/authz/support/ACDFEngine.java",
                "patch": "@@ -199,7 +199,7 @@ public boolean hasPermission(\n     {\n         if ( entryName == null )\n         {\n-            throw new NullPointerException( \"entryName\" );\n+            throw new IllegalArgumentException( \"entryName\" );\n         }\n \n         Entry userEntry = opContext.lookup( userName, USER_LOOKUP_BYPASS );",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/core/src/main/java/org/apache/directory/server/core/authz/support/ACDFEngine.java",
                "sha": "7c03f4f308efcf94b9a0a009e9350afe9c85521e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 4,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "patch": "@@ -141,7 +141,7 @@ public JdbmTable( SchemaManager schemaManager, String name, int numDupLimit, Rec\n \n         if ( keyComparator == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_591 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_591 ) );\n         }\n         else\n         {\n@@ -150,7 +150,7 @@ public JdbmTable( SchemaManager schemaManager, String name, int numDupLimit, Rec\n \n         if ( valueComparator == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_592 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_592 ) );\n         }\n         else\n         {\n@@ -217,7 +217,7 @@ public JdbmTable( SchemaManager schemaManager, String name, RecordManager manage\n \n         if ( keyComparator == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_591 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_591 ) );\n         }\n         else\n         {\n@@ -1000,7 +1000,7 @@ boolean isKeyUsingBTree( K key ) throws Exception\n     {\n         if ( key == null )\n         {\n-            throw new NullPointerException( \"key is null\" );\n+            throw new IllegalArgumentException( \"key is null\" );\n         }\n \n         if ( ! allowsDuplicates )",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "sha": "6dc859a5e3d0f0db9436a424e4b6a1ecb289d961",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/MarshallerSerializerBridge.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/MarshallerSerializerBridge.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 3,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/MarshallerSerializerBridge.java",
                "patch": "@@ -20,12 +20,12 @@\n package org.apache.directory.server.core.partition.impl.btree.jdbm;\n \n \n-import org.apache.directory.server.core.avltree.Marshaller;\n-\n import java.io.IOException;\n \n import jdbm.helper.Serializer;\n \n+import org.apache.directory.server.core.avltree.Marshaller;\n+\n \n /**\n  * A Marshaller which adapts a JDBM Serializer.\n@@ -47,7 +47,7 @@ public MarshallerSerializerBridge( Serializer serializer )\n     {\n         if ( serializer == null )\n         {\n-            throw new NullPointerException( \"serializer\" );\n+            throw new IllegalArgumentException( \"serializer\" );\n         }\n         this.serializer = serializer;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/MarshallerSerializerBridge.java",
                "sha": "274acb294878d997d5d45c137355db0f3502c75e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/test/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTableWithDuplicatesTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/test/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTableWithDuplicatesTest.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 2,
                "filename": "jdbm-store/src/test/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTableWithDuplicatesTest.java",
                "patch": "@@ -174,7 +174,7 @@ public void testCountOneArg() throws Exception\n     }\n \n \n-    @Test( expected = NullPointerException.class )\n+    @Test( expected = IllegalArgumentException.class )\n     public void testNullKeyComparator() throws Exception\n     {\n         assertNotNull( table.getKeyComparator() );\n@@ -187,7 +187,7 @@ public void testNullKeyComparator() throws Exception\n     }\n \n \n-    @Test( expected = NullPointerException.class )\n+    @Test( expected = IllegalArgumentException.class )\n     public void testNullValueComparator() throws Exception\n     {\n         assertNotNull( table.getValueComparator() );",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm-store/src/test/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTableWithDuplicatesTest.java",
                "sha": "a7c2837685f8162115919afbe355664e6cd1014a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm/src/main/java/jdbm/helper/SoftCache.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm/src/main/java/jdbm/helper/SoftCache.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 3,
                "filename": "jdbm/src/main/java/jdbm/helper/SoftCache.java",
                "patch": "@@ -47,12 +47,12 @@\n package jdbm.helper;\n \n \n+import java.lang.ref.Reference;\n import java.lang.ref.ReferenceQueue;\n import java.lang.ref.SoftReference;\n-import java.lang.ref.Reference;\n import java.util.Enumeration;\n-import java.util.Map;\n import java.util.HashMap;\n+import java.util.Map;\n \n import org.apache.directory.server.i18n.I18n;\n \n@@ -136,7 +136,7 @@ public SoftCache( float loadFactor, CachePolicy internal ) throws IllegalArgumen\n     {\n         if ( internal == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_531 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_531 ) );\n         }\n         \n         this.internal = internal;",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/jdbm/src/main/java/jdbm/helper/SoftCache.java",
                "sha": "0c99ed21dc0bbdf15a90c792fc581c917edf071f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/LdapRequestHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/LdapRequestHandler.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 1,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/LdapRequestHandler.java",
                "patch": "@@ -168,7 +168,7 @@ public final void handleMessage( IoSession session, T message ) throws Exception\n                 // Reject all extended operations except StartTls  \n                 InternalExtendedRequest req = ( InternalExtendedRequest ) message;\n                 \n-                if ( ! req.getID().equals( StartTlsHandler.EXTENSION_OID ) )\n+                if ( ! req.getOid().equals( StartTlsHandler.EXTENSION_OID ) )\n                 {\n                     rejectWithoutConfidentiality( session, req.getResultResponse() );\n                     return;",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/LdapRequestHandler.java",
                "sha": "1578ee4f3efbceec4f72fe1597631eb117e5e57d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchAbandonListener.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchAbandonListener.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 1,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchAbandonListener.java",
                "patch": "@@ -50,7 +50,7 @@ public SearchAbandonListener( LdapServer ldapServer, EntryFilteringCursor cursor\n     {\n         if ( ldapServer == null )\n         {\n-            throw new NullPointerException( \"ldapServer\" );\n+            throw new IllegalArgumentException( \"ldapServer\" );\n         }\n         \n         this.ldapServer = ldapServer;",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchAbandonListener.java",
                "sha": "e18008c3c3c9733dd12869dd95863c105eae1e75",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java?ref=67fa25501888994efaf3d3320aae31c55b37a73a",
                "deletions": 1,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "patch": "@@ -127,7 +127,7 @@ protected void responseSent()\n     {\n         if ( response == null )\n         {\n-            throw new NullPointerException( I18n.err( I18n.ERR_666 ) );\n+            throw new IllegalArgumentException( I18n.err( I18n.ERR_666 ) );\n         }\n \n         if ( response.length == 0 )",
                "raw_url": "https://github.com/apache/directory-server/raw/67fa25501888994efaf3d3320aae31c55b37a73a/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "sha": "5ccd6f674d0e68e141a174bd7dcbf12345d791a3",
                "status": "modified"
            }
        ],
        "message": "Replaced the throw new NullPointerException by throw new IllegalArgumentException\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@951408 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/83139581d9a90744f8343a54b32aabf86c5804de",
        "patched_files": [
            "InterceptorChain.java",
            "SingletonOrOrderedSet.java",
            "NtlmSaslServer.java",
            "SoftCache.java",
            "ACDFEngine.java",
            "SearchAbandonListener.java",
            "JdbmTable.java",
            "MarshallerSerializerBridge.java",
            "LdapRequestHandler.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "InterceptorChainTest.java",
            "JdbmTableWithDuplicatesTest.java"
        ]
    },
    "directory-server_6878b4c": {
        "bug_id": "directory-server_6878b4c",
        "commit": "https://github.com/apache/directory-server/commit/6878b4ce816e734013a7e7d8e69ae82a14a22a50",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 0,
                "filename": "server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "patch": "@@ -237,6 +237,7 @@ protected void setUp() throws Exception\n         socketAcceptor = new SocketAcceptor( null );\n         ldapServer = new LdapServer( socketAcceptor, directoryService );\n         ldapServer.setIpPort( port );\n+        configureLdapServer();\n         ldapServer.start();\n \n         setContexts( \"uid=admin,ou=system\", \"secret\" );\n@@ -246,6 +247,10 @@ protected void configureDirectoryService()\n     {\n     }\n \n+    protected void configureLdapServer()\n+    {\n+    }\n+\n     protected void setAllowAnonymousAccess( boolean anonymousAccess )\n     {\n         directoryService.setAllowAnonymousAccess( anonymousAccess );",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "sha": "87852d4e891b6481488286ac53ecb95b2378896f",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/DIRSERVER951ITest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/DIRSERVER951ITest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 9,
                "filename": "server-unit/src/test/java/org/apache/directory/server/DIRSERVER951ITest.java",
                "patch": "@@ -60,13 +60,23 @@\n      * Create context and entries for tests.\n      */\n     public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        super.loadTestLdif( true );\n+        ctx = getWiredContext();\n+        assertNotNull( ctx );\n+    }\n+\n+\n+    @Override\n+    protected void configureDirectoryService()\n     {\n         JdbmPartition systemCfg = new JdbmPartition();\n         systemCfg.setId( \"system\" );\n-        \n+\n         // @TODO need to make this configurable for the system partition\n         systemCfg.setCacheSize( 500 );\n-        \n+\n         systemCfg.setSuffix( PartitionNexus.SYSTEM_PARTITION_SUFFIX );\n \n         // Add indexed attributes for system partition\n@@ -95,16 +105,10 @@ public void setUp() throws Exception\n             NamespaceTools.getRdnValue( \"ou=system\" ) );\n         systemEntry.put( \"uid\", \"testUid\" );\n         systemCfg.setContextEntry( systemEntry );\n-        \n+\n         directoryService.setSystemPartition( systemCfg );\n-        \n-        super.setUp();\n-        super.loadTestLdif( true );\n-        ctx = getWiredContext();\n-        assertNotNull( ctx );\n     }\n \n-\n     /**\n      * Closes context and destroys server.\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/DIRSERVER951ITest.java",
                "sha": "73919b499b35615f17174a816495ed11ac51f1cd",
                "status": "modified"
            },
            {
                "additions": 34,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/MiscTest.java",
                "changes": 60,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/MiscTest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 26,
                "filename": "server-unit/src/test/java/org/apache/directory/server/MiscTest.java",
                "patch": "@@ -20,6 +20,22 @@\n package org.apache.directory.server;\n \n \n+import java.util.HashSet;\n+import java.util.Hashtable;\n+import java.util.Set;\n+\n+import javax.naming.Context;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.NoPermissionException;\n+import javax.naming.OperationNotSupportedException;\n+import javax.naming.directory.Attribute;\n+import javax.naming.directory.Attributes;\n+import javax.naming.directory.DirContext;\n+import javax.naming.directory.InitialDirContext;\n+import javax.naming.directory.SearchControls;\n+import javax.naming.directory.SearchResult;\n+import javax.naming.ldap.InitialLdapContext;\n+\n import netscape.ldap.LDAPAttribute;\n import netscape.ldap.LDAPConnection;\n import netscape.ldap.LDAPException;\n@@ -35,16 +51,6 @@\n import org.apache.directory.shared.ldap.util.ArrayUtils;\n import org.apache.directory.shared.ldap.util.EmptyEnumeration;\n \n-import javax.naming.Context;\n-import javax.naming.NamingEnumeration;\n-import javax.naming.NoPermissionException;\n-import javax.naming.OperationNotSupportedException;\n-import javax.naming.directory.*;\n-import javax.naming.ldap.InitialLdapContext;\n-import java.util.HashSet;\n-import java.util.Hashtable;\n-import java.util.Set;\n-\n \n /**\n  * A set of miscellanous tests.\n@@ -70,15 +76,21 @@ public MiscTest()\n     public void setUp() throws Exception\n     {\n         if ( this.getName().equals( \"testDisableAnonymousBinds\" ) ||\n-             this.getName().equals( \"testCompareWithoutAuthentication\" ) )\n+                this.getName().equals( \"testCompareWithoutAuthentication\" ) )\n         {\n             setAllowAnonymousAccess( false );\n-        }\n-        else if ( this.getName().equals( \"testEnableAnonymousBindsOnRootDSE\" ) )\n+        } else if ( this.getName().equals( \"testEnableAnonymousBindsOnRootDSE\" ) )\n         {\n             setAllowAnonymousAccess( false );\n         }\n-        else if ( this.getName().equals( \"testUserAuthOnMixedCaseSuffix\" ) )\n+        super.setUp();\n+    }\n+\n+\n+    @Override\n+    protected void configureDirectoryService()\n+    {\n+        if ( this.getName().equals( \"testUserAuthOnMixedCaseSuffix\" ) )\n         {\n             Set<Partition> partitions = new HashSet<Partition>();\n             partitions.addAll( directoryService.getPartitions() );\n@@ -96,8 +108,7 @@ else if ( this.getName().equals( \"testUserAuthOnMixedCaseSuffix\" ) )\n             partition.setIndexedAttributes( indexedAttributes );\n             partitions.add( partition );\n             directoryService.setPartitions( partitions );\n-        }\n-        else if ( this.getName().equals( \"testAnonymousBindsEnabledBaseSearch\" ) )\n+        } else if ( this.getName().equals( \"testAnonymousBindsEnabledBaseSearch\" ) )\n         {\n             // allow anonymous access\n             setAllowAnonymousAccess( true );\n@@ -120,11 +131,8 @@ else if ( this.getName().equals( \"testAnonymousBindsEnabledBaseSearch\" ) )\n             partitions.add( partition );\n             directoryService.setPartitions( partitions );\n         }\n-\n-        super.setUp();\n     }\n \n-\n     public void testCompareWithoutAuthentication() throws LDAPException\n     {\n         LDAPConnection conn = new LDAPConnection();\n@@ -135,13 +143,13 @@ public void testCompareWithoutAuthentication() throws LDAPException\n             conn.compare( \"uid=admin,ou=system\", attr );\n             fail( \"Compare success without authentication\" );\n         }\n-        catch( LDAPException e )\n+        catch ( LDAPException e )\n         {\n             assertEquals( \"no permission exception\", 50, e.getLDAPResultCode() );\n         }\n     }\n-    \n-    \n+\n+\n     /**\n      * Test to make sure anonymous binds are disabled when going through\n      * the wire protocol.\n@@ -230,7 +238,7 @@ public void testEnableAnonymousBindsOnRootDSE() throws Exception\n \n \n     /**\n-     * Test to make sure that if anonymous binds are allowed a user may search \n+     * Test to make sure that if anonymous binds are allowed a user may search\n      * within a a partition.\n      *\n      * @throws Exception if anything goes wrong\n@@ -289,7 +297,7 @@ public void testAdminAccessBug() throws Exception\n         SearchControls controls = new SearchControls();\n         controls.setSearchScope( SearchControls.OBJECT_SCOPE );\n         controls.setReturningAttributes( new String[]\n-            { \"+\" } );\n+                {\"+\"} );\n         NamingEnumeration list = ctx.search( \"ou=blah,ou=system\", \"(objectClass=*)\", controls );\n         SearchResult result = ( SearchResult ) list.next();\n         list.close();\n@@ -440,7 +448,7 @@ public String getID()\n         user.put( \"sn\", \"Bush\" );\n         user.put( \"userPassword\", \"Aerial\" );\n         ctx.setRequestControls( new MutableControl[]\n-            { unsupported } );\n+                {unsupported} );\n \n         try\n         {\n@@ -454,6 +462,6 @@ public String getID()\n         DirContext kate = ctx.createSubcontext( \"cn=Kate Bush\", user );\n         assertNotNull( kate );\n         assertTrue( ArrayUtils.isEquals( Asn1StringUtils.getBytesUtf8( \"Aerial\" ), kate.getAttributes( \"\" ).get(\n-            \"userPassword\" ).get() ) );\n+                \"userPassword\" ).get() ) );\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/MiscTest.java",
                "sha": "784a6cdd7146e0d31dd1f177c9df6e00a6b6465c",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/NegationOperatorITest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/NegationOperatorITest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 12,
                "filename": "server-unit/src/test/java/org/apache/directory/server/NegationOperatorITest.java",
                "patch": "@@ -64,23 +64,34 @@\n      * Create context and entries for tests.\n      */\n     public void setUp() throws Exception\n+    {\n+        super.setUp();\n+        loadedEntries = super.loadTestLdif( true );\n+        ctx = getWiredContext();\n+        assertNotNull( ctx );\n+        assertEquals( 5, loadedEntries.size() );\n+    }\n+\n+\n+    @Override\n+    protected void configureDirectoryService()\n     {\n         if ( this.getName().indexOf( \"Indexed\" ) != -1 )\n         {\n             JdbmPartition system = new JdbmPartition();\n             system.setId( \"system\" );\n-            \n+\n             // @TODO need to make this configurable for the system partition\n             system.setCacheSize( 500 );\n-            \n+\n             system.setSuffix( PartitionNexus.SYSTEM_PARTITION_SUFFIX );\n-    \n+\n             // Add indexed attributes for system partition\n             Set<Index> indexedAttrs = new HashSet<Index>();\n             indexedAttrs.add( new JdbmIndex( SchemaConstants.OBJECT_CLASS_AT ) );\n             indexedAttrs.add( new JdbmIndex( SchemaConstants.OU_AT ) );\n             system.setIndexedAttributes( indexedAttrs );\n-    \n+\n             // Add context entry for system partition\n             Attributes systemEntry = new AttributesImpl();\n             Attribute objectClassAttr = new AttributeImpl( SchemaConstants.OBJECT_CLASS_AT );\n@@ -93,18 +104,11 @@ public void setUp() throws Exception\n             systemEntry.put( NamespaceTools.getRdnAttribute( PartitionNexus.SYSTEM_PARTITION_SUFFIX ),\n                 NamespaceTools.getRdnValue( PartitionNexus.SYSTEM_PARTITION_SUFFIX ) );\n             system.setContextEntry( systemEntry );\n-            \n+\n             directoryService.setSystemPartition( system );\n         }\n-        \n-        super.setUp();\n-        loadedEntries = super.loadTestLdif( true );\n-        ctx = getWiredContext();\n-        assertNotNull( ctx );\n-        assertEquals( 5, loadedEntries.size() );\n     }\n \n-\n     /**\n      * Closes context and destroys server.\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/NegationOperatorITest.java",
                "sha": "59431db0c8173c0fcc8f3a26f0d1528eddacc486",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 16,
                "filename": "server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "patch": "@@ -57,6 +57,28 @@\n      * test authentication with.\n      */\n     public void setUp() throws Exception\n+    {\n+        super.setUp();\n+\n+        Hashtable<String, String> env = new Hashtable<String, String>();\n+        env.put( \"java.naming.factory.initial\", \"com.sun.jndi.ldap.LdapCtxFactory\" );\n+        env.put( \"java.naming.provider.url\", \"ldap://localhost:\" + port + \"/dc=example,dc=com\" );\n+        env.put( \"java.naming.security.principal\", \"uid=admin,ou=system\" );\n+        env.put( \"java.naming.security.credentials\", \"secret\" );\n+        env.put( \"java.naming.security.authentication\", \"simple\" );\n+        ctx = new InitialDirContext( env );\n+\n+        Attributes attrs = new AttributesImpl( true );\n+        attrs = getOrgUnitAttributes( \"users\" );\n+        DirContext users = ctx.createSubcontext( \"ou=users\", attrs );\n+\n+        attrs = getPersonAttributes( \"Nelson\", \"Horatio Nelson\", \"hnelson\", \"secret\" );\n+        users.createSubcontext( \"uid=hnelson\", attrs );\n+    }\n+\n+\n+    @Override\n+    protected void configureDirectoryService()\n     {\n         setAllowAnonymousAccess( false );\n         ldapServer.setSaslHost( \"localhost\" );\n@@ -84,24 +106,8 @@ public void setUp() throws Exception\n \n         partitions.add( partition );\n         directoryService.setPartitions( partitions );\n-        super.setUp();\n-\n-        Hashtable<String, String> env = new Hashtable<String, String>();\n-        env.put( \"java.naming.factory.initial\", \"com.sun.jndi.ldap.LdapCtxFactory\" );\n-        env.put( \"java.naming.provider.url\", \"ldap://localhost:\" + port + \"/dc=example,dc=com\" );\n-        env.put( \"java.naming.security.principal\", \"uid=admin,ou=system\" );\n-        env.put( \"java.naming.security.credentials\", \"secret\" );\n-        env.put( \"java.naming.security.authentication\", \"simple\" );\n-        ctx = new InitialDirContext( env );\n-\n-        attrs = getOrgUnitAttributes( \"users\" );\n-        DirContext users = ctx.createSubcontext( \"ou=users\", attrs );\n-\n-        attrs = getPersonAttributes( \"Nelson\", \"Horatio Nelson\", \"hnelson\", \"secret\" );\n-        users.createSubcontext( \"uid=hnelson\", attrs );\n     }\n \n-\n     /**\n      * Tear down.\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "sha": "352b8d0390a7445a907e8cb802bc9e18c4b87ebf",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/directory-server/blob/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/StoredProcedureExecutionITest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/StoredProcedureExecutionITest.java?ref=6878b4ce816e734013a7e7d8e69ae82a14a22a50",
                "deletions": 6,
                "filename": "server-unit/src/test/java/org/apache/directory/server/StoredProcedureExecutionITest.java",
                "patch": "@@ -50,12 +50,6 @@\n     \n     public void setUp() throws Exception\n     {\n-        /////////////////////////////////////////////////////////\n-        // Enable the Stored Procedure Extended Operation Handler\n-        /////////////////////////////////////////////////////////\n-        Set<ExtendedOperationHandler> handlers = new HashSet<ExtendedOperationHandler>( ldapServer.getExtendedOperationHandlers() );\n-        handlers.add( new StoredProcedureExtendedOperationHandler() );\n-        ldapServer.setExtendedOperationHandlers( handlers );\n \n         super.setUp();\n \n@@ -74,6 +68,17 @@ public void setUp() throws Exception\n     }\n \n \n+    @Override\n+    protected void configureLdapServer()\n+    {\n+        /////////////////////////////////////////////////////////\n+        // Enable the Stored Procedure Extended Operation Handler\n+        /////////////////////////////////////////////////////////\n+        Set<ExtendedOperationHandler> handlers = new HashSet<ExtendedOperationHandler>( ldapServer.getExtendedOperationHandlers() );\n+        handlers.add( new StoredProcedureExtendedOperationHandler() );\n+        ldapServer.setExtendedOperationHandlers( handlers );\n+    }\n+\n     public void tearDown() throws Exception\n     {\n         ctx.close();",
                "raw_url": "https://github.com/apache/directory-server/raw/6878b4ce816e734013a7e7d8e69ae82a14a22a50/server-unit/src/test/java/org/apache/directory/server/StoredProcedureExecutionITest.java",
                "sha": "21c5f72ccb599c293a521faaad2a1862eb92333e",
                "status": "modified"
            }
        ],
        "message": "Fix a lot of the NPES\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@584311 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/c402870bcdfcccef9ee7b8d0ba94dd38bc71702a",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "MiscTest.java",
            "DIRSERVER951ITest.java",
            "StoredProcedureExecutionITest.java",
            "NegationOperatorITest.java",
            "SaslBindITest.java",
            "AbstractServerTest.java"
        ]
    },
    "directory-server_6a739a9": {
        "bug_id": "directory-server_6a739a9",
        "commit": "https://github.com/apache/directory-server/commit/6a739a91b41542f77cf697dc00d789d90c358213",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/6a739a91b41542f77cf697dc00d789d90c358213/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/CursorBuilder.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/CursorBuilder.java?ref=6a739a91b41542f77cf697dc00d789d90c358213",
                "deletions": 1,
                "filename": "xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/CursorBuilder.java",
                "patch": "@@ -159,7 +159,12 @@ public CursorBuilder( Store<Attributes> db, EvaluatorBuilder evaluatorBuilder )\n         for ( int ii = 0; ii < children.size(); ii++ )\n         {\n             ExprNode child = children.get( ii );\n-            value = ( Long ) child.get( \"count\" );\n+            Object count = child.get( \"count\" );\n+            if( count == null )\n+            {\n+                continue;\n+            }\n+            value = ( Long ) count;\n             minValue = Math.min( minValue, value );\n \n             if ( minValue == value )",
                "raw_url": "https://github.com/apache/directory-server/raw/6a739a91b41542f77cf697dc00d789d90c358213/xdbm-search/src/main/java/org/apache/directory/server/xdbm/search/impl/CursorBuilder.java",
                "sha": "06060ba4adcc9469e9a4d678403f2bc22e50f12d",
                "status": "modified"
            },
            {
                "additions": 279,
                "blob_url": "https://github.com/apache/directory-server/blob/6a739a91b41542f77cf697dc00d789d90c358213/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/AndCursorTest.java",
                "changes": 279,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/AndCursorTest.java?ref=6a739a91b41542f77cf697dc00d789d90c358213",
                "deletions": 0,
                "filename": "xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/AndCursorTest.java",
                "patch": "@@ -0,0 +1,279 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.server.xdbm.search.impl;\n+\n+import static org.junit.Assert.*;\n+\n+import java.io.File;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+\n+import javax.naming.directory.Attributes;\n+\n+import org.apache.commons.io.FileUtils;\n+import org.apache.directory.server.core.cursor.Cursor;\n+import org.apache.directory.server.core.cursor.InvalidCursorPositionException;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n+import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmStore;\n+import org.apache.directory.server.schema.SerializableComparator;\n+import org.apache.directory.server.schema.bootstrap.ApacheSchema;\n+import org.apache.directory.server.schema.bootstrap.ApachemetaSchema;\n+import org.apache.directory.server.schema.bootstrap.BootstrapSchemaLoader;\n+import org.apache.directory.server.schema.bootstrap.CollectiveSchema;\n+import org.apache.directory.server.schema.bootstrap.CoreSchema;\n+import org.apache.directory.server.schema.bootstrap.Schema;\n+import org.apache.directory.server.schema.bootstrap.SystemSchema;\n+import org.apache.directory.server.schema.registries.AttributeTypeRegistry;\n+import org.apache.directory.server.schema.registries.DefaultOidRegistry;\n+import org.apache.directory.server.schema.registries.DefaultRegistries;\n+import org.apache.directory.server.schema.registries.OidRegistry;\n+import org.apache.directory.server.schema.registries.Registries;\n+import org.apache.directory.server.xdbm.ForwardIndexEntry;\n+import org.apache.directory.server.xdbm.IndexEntry;\n+import org.apache.directory.server.xdbm.Store;\n+import org.apache.directory.server.xdbm.tools.StoreUtils;\n+import org.apache.directory.shared.ldap.constants.SchemaConstants;\n+import org.apache.directory.shared.ldap.filter.AndNode;\n+import org.apache.directory.shared.ldap.filter.ExprNode;\n+import org.apache.directory.shared.ldap.filter.FilterParser;\n+import org.apache.directory.shared.ldap.filter.PresenceNode;\n+import org.apache.directory.shared.ldap.filter.SubstringNode;\n+import org.junit.*;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * \n+ * Test class for AndCursor.\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$, $Date$\n+ */\n+public class AndCursorTest\n+{\n+    private static final Logger LOG = LoggerFactory.getLogger( AndCursorTest.class.getSimpleName() );\n+\n+    File wkdir;\n+    Store<Attributes> store;\n+    Registries registries = null;\n+    AttributeTypeRegistry attributeRegistry;\n+    EvaluatorBuilder evaluatorBuilder;\n+    CursorBuilder cursorBuilder;\n+\n+    public AndCursorTest() throws Exception\n+    {\n+        // setup the standard registries\n+        BootstrapSchemaLoader loader = new BootstrapSchemaLoader();\n+        OidRegistry oidRegistry = new DefaultOidRegistry();\n+        registries = new DefaultRegistries( \"bootstrap\", loader, oidRegistry );\n+        SerializableComparator.setRegistry( registries.getComparatorRegistry() );\n+\n+        // load essential bootstrap schemas\n+        Set<Schema> bootstrapSchemas = new HashSet<Schema>();\n+        bootstrapSchemas.add( new ApachemetaSchema() );\n+        bootstrapSchemas.add( new ApacheSchema() );\n+        bootstrapSchemas.add( new CoreSchema() );\n+        bootstrapSchemas.add( new SystemSchema() );\n+        bootstrapSchemas.add( new CollectiveSchema() );\n+        loader.loadWithDependencies( bootstrapSchemas, registries );\n+        attributeRegistry = registries.getAttributeTypeRegistry();\n+    }\n+\n+\n+    @Before\n+    public void createStore() throws Exception\n+    {\n+        destryStore();\n+\n+        // setup the working directory for the store\n+        wkdir = File.createTempFile( getClass().getSimpleName(), \"db\" );\n+        wkdir.delete();\n+        wkdir = new File( wkdir.getParentFile(), getClass().getSimpleName() );\n+        wkdir.mkdirs();\n+\n+        // initialize the store\n+        store = new JdbmStore<Attributes>();\n+        store.setName( \"example\" );\n+        store.setCacheSize( 10 );\n+        store.setWorkingDirectory( wkdir );\n+        store.setSyncOnWrite( false );\n+\n+        store.addIndex( new JdbmIndex( SchemaConstants.OU_AT_OID ) );\n+        store.addIndex( new JdbmIndex( SchemaConstants.CN_AT_OID ) );\n+        StoreUtils.loadExampleData( store, registries );\n+        \n+        evaluatorBuilder = new EvaluatorBuilder( store, registries );\n+        cursorBuilder = new CursorBuilder( store, evaluatorBuilder );\n+        \n+        LOG.debug( \"Created new store\" );\n+    }\n+\n+    \n+    @After\n+    public void destryStore() throws Exception\n+    {\n+        if ( store != null )\n+        {\n+            store.destroy();\n+        }\n+\n+        store = null;\n+        if ( wkdir != null )\n+        {\n+            FileUtils.deleteDirectory( wkdir );\n+        }\n+\n+        wkdir = null;\n+    }\n+\n+    \n+    @Test\n+    public void testAndCursorWithCursorBuilder() throws Exception\n+    {\n+        String filter = \"(&(cn=J*)(sn=*))\";\n+\n+        ExprNode exprNode = FilterParser.parse( filter );\n+        \n+        Cursor<IndexEntry<?,Attributes>> cursor = cursorBuilder.build( exprNode );\n+        \n+        cursor.beforeFirst();\n+\n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 8, ( long ) cursor.get().getId() );\n+        assertEquals( \"jack daniels\", cursor.get().getValue() );\n+        \n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 6, ( long ) cursor.get().getId() );\n+        assertEquals( \"jim bean\", cursor.get().getValue() );\n+        \n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 5, ( long ) cursor.get().getId() );\n+        assertEquals( \"johnny walker\", cursor.get().getValue() );\n+        \n+        assertFalse( cursor.next() );\n+        assertFalse( cursor.available() );\n+        \n+        cursor.close();\n+        assertTrue( cursor.isClosed() );\n+    }\n+    \n+    \n+    @Test\n+    public void testAndCursorWithManualFilter() throws Exception\n+    {\n+        AndNode andNode = new AndNode();\n+        \n+        List<Evaluator<? extends ExprNode,Attributes>> evaluators = new ArrayList<Evaluator<? extends ExprNode,Attributes>>();\n+        Evaluator<? extends ExprNode, Attributes> eval;\n+        \n+        ExprNode exprNode = new SubstringNode( \"cn\", \"J*\", null );\n+        eval = new SubstringEvaluator( ( SubstringNode ) exprNode, store, registries );\n+        Cursor<IndexEntry<?,Attributes>> wrapped = new SubstringCursor( store, ( SubstringEvaluator ) eval );\n+        \n+        /* adding this results in NPE  adding Presence evaluator not \n+         Substring evaluator but adding Substring cursor as wrapped cursor */\n+        // evaluators.add( eval ); \n+        \n+        andNode.addNode( exprNode );\n+        \n+        exprNode = new PresenceNode( \"sn\" );\n+        eval = new PresenceEvaluator( ( PresenceNode ) exprNode, store, registries );\n+        evaluators.add( eval );\n+        \n+        andNode.addNode( exprNode );\n+        \n+        Cursor<IndexEntry<?,Attributes>> cursor = ( Cursor<IndexEntry<?,Attributes>> ) new AndCursor( wrapped, evaluators ); //cursorBuilder.build( andNode );\n+        \n+        cursor.beforeFirst();\n+\n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 8, ( long ) cursor.get().getId() );\n+        assertEquals( \"jack daniels\", cursor.get().getValue() );\n+        \n+        cursor.first();\n+        \n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 6, ( long ) cursor.get().getId() );\n+        assertEquals( \"jim bean\", cursor.get().getValue() );\n+        \n+        assertTrue( cursor.next() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 5, ( long ) cursor.get().getId() );\n+        assertEquals( \"johnny walker\", cursor.get().getValue() );        \n+        \n+        assertFalse( cursor.next() );\n+        assertFalse( cursor.available() );\n+\n+        cursor.afterLast();\n+        \n+        assertTrue( cursor.previous() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 5, ( long ) cursor.get().getId() );\n+        assertEquals( \"johnny walker\", cursor.get().getValue() );\n+        \n+        cursor.last();\n+        \n+        assertTrue( cursor.previous() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 6, ( long ) cursor.get().getId() );\n+        assertEquals( \"jim bean\", cursor.get().getValue() );\n+        \n+        assertTrue( cursor.previous() );\n+        assertTrue( cursor.available() );\n+        assertEquals( 8, ( long ) cursor.get().getId() );\n+        assertEquals( \"jack daniels\", cursor.get().getValue() );\n+        \n+        assertFalse( cursor.previous() );\n+        assertFalse( cursor.available() );\n+        \n+        assertTrue( cursor.isElementReused() );\n+\n+        try\n+        {\n+            cursor.get();\n+            fail( \"should fail with InvalidCursorPositionException\" );\n+        }\n+        catch( InvalidCursorPositionException ice ) { }\n+        \n+        try\n+        {\n+            cursor.after( new ForwardIndexEntry() );\n+            fail( \"should fail with UnsupportedOperationException \" );\n+        }\n+        catch( UnsupportedOperationException uoe ) {}\n+        \n+        try\n+        {\n+            cursor.before( new ForwardIndexEntry() );\n+            fail( \"should fail with UnsupportedOperationException \" );\n+        }\n+        catch( UnsupportedOperationException uoe ) {}\n+\n+    }\n+    \n+    \n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/6a739a91b41542f77cf697dc00d789d90c358213/xdbm-search/src/test/java/org/apache/directory/server/xdbm/search/impl/AndCursorTest.java",
                "sha": "6d9895b00245f0ff815323d89dfb247b9d548c3b",
                "status": "added"
            }
        ],
        "message": "fixed an NPE in CursorBuilder.buildAndCursor()\nAndCursorTest - added test cases for AndCursor\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/sandbox/akarasulu/bigbang/apacheds@653606 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/281c842057d8f49d5200ac4d59865c6d442e608f",
        "patched_files": [
            "CursorBuilder.java",
            "AndCursor.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "AndCursorTest.java"
        ]
    },
    "directory-server_6bc7fc3": {
        "bug_id": "directory-server_6bc7fc3",
        "commit": "https://github.com/apache/directory-server/commit/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java?ref=6bc7fc3a60b587521bfebfe6fc4d399a4991ba79",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "patch": "@@ -121,10 +121,10 @@ public Tag tag( String description ) throws Exception\n     public void init( DirectoryService service ) throws Exception\n     {\n         workingDirectory = service.getInstanceLayout().getLogDirectory();\n+        this.directoryService = service;\n         loadRevision();\n         loadTags();\n         loadChangeLog();\n-        this.directoryService = service;\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/6bc7fc3a60b587521bfebfe6fc4d399a4991ba79/core/src/main/java/org/apache/directory/server/core/changelog/MemoryChangeLogStore.java",
                "sha": "b787c6388bac61e2eb6cb69d4052e6800d0a413e",
                "status": "modified"
            }
        ],
        "message": "Initilize the DS instance before calling the loadChangeLog method to avoid a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1157269 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/fe567d53189df34eb320ebf70835d488cf6f91c6",
        "patched_files": [
            "MemoryChangeLogStore.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "MemoryChangeLogStoreTest.java"
        ]
    },
    "directory-server_7276466": {
        "bug_id": "directory-server_7276466",
        "commit": "https://github.com/apache/directory-server/commit/7276466efec3571d5e66917264a0732cc49bb887",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/7276466efec3571d5e66917264a0732cc49bb887/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerEntry.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerEntry.java?ref=7276466efec3571d5e66917264a0732cc49bb887",
                "deletions": 3,
                "filename": "core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerEntry.java",
                "patch": "@@ -2282,10 +2282,10 @@ public Entry clone()\n         // now clone all the servrAttributes\n         clone.attributes.clear();\n         \n-        for ( AttributeType key:attributes.keySet() )\n+        for ( EntryAttribute entryAttribute : attributes.values() )\n         {\n-            EntryAttribute value = (ServerAttribute)attributes.get( key ).clone();\n-            clone.attributes.put( key, value );\n+            ServerAttribute value = (ServerAttribute)entryAttribute.clone();\n+            clone.attributes.put( value.getAttributeType(), value );\n         }\n         \n         // We are done !",
                "raw_url": "https://github.com/apache/directory-server/raw/7276466efec3571d5e66917264a0732cc49bb887/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerEntry.java",
                "sha": "b060a6a3e4b550028f5445f0e8cd62100afcb068",
                "status": "modified"
            }
        ],
        "message": "Fixed a bug in the cloning of ServerEntries :we could get some NPE in some corner cases \n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-schema@891319 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/96eaf2cef3dac80d844a911e66e78739d2799e6b",
        "patched_files": [
            "DefaultServerEntry.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "DefaultServerEntryTest.java"
        ]
    },
    "directory-server_73ea31c": {
        "bug_id": "directory-server_73ea31c",
        "commit": "https://github.com/apache/directory-server/commit/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core-integ/src/test/java/org/apache/directory/server/core/authz/SearchAuthorizationIT.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/authz/SearchAuthorizationIT.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 1,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/authz/SearchAuthorizationIT.java",
                "patch": "@@ -133,7 +133,7 @@ private void recursivelyAddSearchData( Dn parent, Entry[] children, final long s\n         for ( int i = 0; ( i < children.length ) && ( count[0] < sizeLimit ); i++ )\n         {\n             Dn childRdn = new Dn();\n-            childRdn = childRdn.addAll( parent );\n+            childRdn = childRdn.add( parent );\n             childRdn = childRdn.add( \"ou=\" + i );\n             childRdns[i] = childRdn;\n             children[i].setDn( childRdn );",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core-integ/src/test/java/org/apache/directory/server/core/authz/SearchAuthorizationIT.java",
                "sha": "532f15027e70021e6ff3633d92b3986cc2f6974a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core-jndi/src/main/java/org/apache/directory/server/core/jndi/ServerContext.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-jndi/src/main/java/org/apache/directory/server/core/jndi/ServerContext.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 2,
                "filename": "core-jndi/src/main/java/org/apache/directory/server/core/jndi/ServerContext.java",
                "patch": "@@ -1614,7 +1614,7 @@ public Name composeName( Name name, Name prefix ) throws NamingException\n         \n         try\n         {\n-            return JndiUtils.toName( JndiUtils.fromName( prefix ).addAll( fqn ) );\n+            return JndiUtils.toName( JndiUtils.fromName( prefix ).add( fqn ) );\n         }\n         catch ( LdapInvalidDnException lide )\n         {\n@@ -1711,7 +1711,7 @@ Dn buildTarget( Dn relativeName ) throws NamingException\n         // Add to left hand side of cloned Dn the relative name arg\n         try\n         {\n-            target = target.addAll( relativeName );\n+            target = target.add( relativeName );\n             target.applySchemaManager( schemaManager );\n         }\n         catch (LdapInvalidDnException lide )",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core-jndi/src/main/java/org/apache/directory/server/core/jndi/ServerContext.java",
                "sha": "88f0a036d3be1644579445427bb34d2b64d7ec12",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "patch": "@@ -105,7 +105,7 @@ private LdapReferralException buildReferralException( Entry parentEntry, Dn chil\n                 // So we have to take the Rdn one by one, and create a\n                 // new Dn with the type and value UP form\n     \n-                Dn urlDn = ldapUrl.getDn().addAll( childDn );\n+                Dn urlDn = ldapUrl.getDn().add( childDn );\n     \n                 ldapUrl.setDn( urlDn );\n                 urls.add( ldapUrl.toString() );\n@@ -155,7 +155,7 @@ private LdapReferralException buildReferralExceptionForSearch( Entry parentEntry\n                     // So we have to take the Rdn one by one, and create a\n                     // new Dn with the type and value UP form\n \n-                    Dn urlDn = ldapUrl.getDn().addAll( childDn );\n+                    Dn urlDn = ldapUrl.getDn().add( childDn );\n \n                     ldapUrl.setDn( urlDn );\n                 }",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "sha": "eac3d6f48e425f496764628ddf2398413423babd",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/subtree/SubentryInterceptor.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/subtree/SubentryInterceptor.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 7,
                "filename": "core/src/main/java/org/apache/directory/server/core/subtree/SubentryInterceptor.java",
                "patch": "@@ -873,7 +873,7 @@ public void add( NextInterceptor next, AddOperationContext addContext ) throws L\n              * ----------------------------------------------------------------\n              */\n             Dn baseDn = apDn;\n-            baseDn = baseDn.addAll( subentry.getSubtreeSpecification().getBase() );\n+            baseDn = baseDn.add( subentry.getSubtreeSpecification().getBase() );\n \n             updateEntries( OperationEnum.ADD, addContext.getSession(), dn, apDn, subentry.getSubtreeSpecification(), baseDn, operationalAttributes );\n \n@@ -961,7 +961,7 @@ public void delete( NextInterceptor next, DeleteOperationContext deleteContext )\n              */\n             Dn apDn = dn.getParent();\n             Dn baseDn = apDn;\n-            baseDn = baseDn.addAll( removedSubentry.getSubtreeSpecification().getBase() );\n+            baseDn = baseDn.add( removedSubentry.getSubtreeSpecification().getBase() );\n \n             // Remove all the references to this removed subentry from all the selected entries\n             updateEntries( OperationEnum.REMOVE, deleteContext.getSession(), dn, apDn, removedSubentry.getSubtreeSpecification(), baseDn, null );\n@@ -1057,7 +1057,7 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n             // search for all entries selected by the old SS and remove references to subentry\n             Dn apName = dn.getParent();\n             Dn oldBaseDn = apName;\n-            oldBaseDn = oldBaseDn.addAll( ssOld.getBase() );\n+            oldBaseDn = oldBaseDn.add( ssOld.getBase() );\n \n             ExprNode filter = new PresenceNode( OBJECT_CLASS_AT );\n             SearchControls controls = new SearchControls();\n@@ -1094,7 +1094,7 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n             subentry = subentryCache.getSubentry( dn );\n             List<EntryAttribute> operationalAttributes = getSubentryOperationalAttributes( dn, subentry );\n             Dn newBaseDn = apName;\n-            newBaseDn = newBaseDn.addAll( ssNew.getBase() );\n+            newBaseDn = newBaseDn.add( ssNew.getBase() );\n \n             searchOperationContext = new SearchOperationContext( modifyContext.getSession(), newBaseDn, filter, controls );\n             searchOperationContext.setAliasDerefMode( AliasDerefMode.NEVER_DEREF_ALIASES );\n@@ -1189,7 +1189,7 @@ public void move( NextInterceptor next, MoveOperationContext moveContext ) throw\n             SubtreeSpecification ss = subentry.getSubtreeSpecification();\n             Dn apName = oldDn.getParent();\n             Dn baseDn = apName;\n-            baseDn = baseDn.addAll( ss.getBase() );\n+            baseDn = baseDn.add( ss.getBase() );\n             Dn newName = newSuperiorDn;\n             newName = newName.add( oldDn.getRdn() );\n             newName.applySchemaManager( schemaManager );\n@@ -1280,7 +1280,7 @@ public void moveAndRename( NextInterceptor next, MoveAndRenameOperationContext m\n             SubtreeSpecification ss = subentry.getSubtreeSpecification();\n             Dn apName = oldDn.getParent();\n             Dn baseDn = apName;\n-            baseDn = baseDn.addAll( ss.getBase() );\n+            baseDn = baseDn.add( ss.getBase() );\n             Dn newName = newSuperiorDn.getParent();\n \n             newName = newName.add( moveAndRenameContext.getNewRdn() );\n@@ -1363,7 +1363,7 @@ public void rename( NextInterceptor next, RenameOperationContext renameContext )\n             SubtreeSpecification ss = subentry.getSubtreeSpecification();\n             Dn apName = oldDn.getParent();\n             Dn baseDn = apName;\n-            baseDn = baseDn.addAll( ss.getBase() );\n+            baseDn = baseDn.add( ss.getBase() );\n             Dn newName = oldDn.getParent();\n \n             newName = newName.add( renameContext.getNewRdn() );",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/subtree/SubentryInterceptor.java",
                "sha": "ab72745d1557a0aa43fad4edb2eca8f5d94f112a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/subtree/SubtreeEvaluator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/subtree/SubtreeEvaluator.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/subtree/SubtreeEvaluator.java",
                "patch": "@@ -78,7 +78,7 @@ public boolean evaluate( SubtreeSpecification subtree, Dn apDn, Dn entryDn, Entr\n         // First construct the subtree base, which is the concatenation of the\n         // AP Dn and the subentry base\n         Dn subentryBaseDn = apDn;\n-        subentryBaseDn = subentryBaseDn.addAll( subtree.getBase() );\n+        subentryBaseDn = subentryBaseDn.add( subtree.getBase() );\n         \n         String s = subentryBaseDn.toString();\n         ",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/core/src/main/java/org/apache/directory/server/core/subtree/SubtreeEvaluator.java",
                "sha": "f57581e676b0d97149485d6a54a84b4d75fc7334",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchHandler.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchHandler.java?ref=73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1",
                "deletions": 2,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchHandler.java",
                "patch": "@@ -1404,7 +1404,7 @@ public Referral getReferralOnAncestorForSearch( LdapSession session, SearchReque\n              * name past the farthest referral Dn which the target name extends.\n              */\n             Dn suffix = req.getBase().getDescendantOf( referralAncestor.getDn() );\n-            Dn refDn = urlDn.addAll( suffix );\n+            Dn refDn = urlDn.add( suffix );\n             \n             ldapUrl.setDn( refDn );\n             ldapUrl.setForceScopeRendering( true );\n@@ -1483,7 +1483,7 @@ public Referral getReferralOnAncestor( LdapSession session, Dn reqTargetDn, Sear\n              * name past the farthest referral Dn which the target name extends.\n              */\n             Dn suffix = req.getBase().getDescendantOf( referralAncestor.getDn() );\n-            urlDn = urlDn.addAll( suffix );\n+            urlDn = urlDn.add( suffix );\n \n             StringBuilder buf = new StringBuilder();\n             buf.append( ldapUrl.getScheme() );",
                "raw_url": "https://github.com/apache/directory-server/raw/73ea31cd3e6f1d8bb03cf8767cb657f3161d0bb1/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/SearchHandler.java",
                "sha": "99c416ef55705a506a644d48895ecf190f88cf44",
                "status": "modified"
            }
        ],
        "message": "o Renamed the addAll( Dn ) method to add( Dn )\no Fixed some potential NPE\no Minor other refactorings\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1085318 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/a03ecc87ec4778c36a2f63535ab63ecd3c3670d1",
        "patched_files": [
            "SubtreeEvaluator.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SubtreeEvaluatorTest.java"
        ]
    },
    "directory-server_7df31ad": {
        "bug_id": "directory-server_7df31ad",
        "commit": "https://github.com/apache/directory-server/commit/7df31adba307611218e0a8cab604f5b68696a4b9",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/directory-server/blob/7df31adba307611218e0a8cab604f5b68696a4b9/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java?ref=7df31adba307611218e0a8cab604f5b68696a4b9",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "patch": "@@ -128,7 +128,7 @@\n      */\n     private Registries registries;\n \n-    private Set binaries;\n+    private Set<String> binaries;\n \n     /**\n      * subschemaSubentry attribute's value from Root DSE\n@@ -179,7 +179,14 @@ public void init( DirectoryServiceConfiguration factoryCfg, InterceptorConfigura\n         topFilter = new TopFilter();\n         filters.add( binaryAttributeFilter );\n         filters.add( topFilter );\n-        binaries = ( Set ) factoryCfg.getEnvironment().get( BINARY_KEY );\n+        binaries = ( Set<String> ) factoryCfg.getEnvironment().get( BINARY_KEY );\n+        \n+        if ( binaries == null )\n+        {\n+            binaries = new HashSet<String>();\n+        }\n+            \n+            \n \n         schemaBaseDN = new LdapDN( \"ou=schema\" );\n         schemaBaseDN.normalize( registries.getAttributeTypeRegistry().getNormalizerMapping() );\n@@ -1722,6 +1729,7 @@ private void filterBinaryAttributes( Attributes entry ) throws NamingException\n             }\n \n             asBinary = !type.getSyntax().isHumanReadible();\n+            asBinary = asBinary || ( ( binaries != null ) && ( binaries.contains( type ) ) );\n             asBinary = asBinary || binaries.contains( type );\n \n             if ( asBinary )",
                "raw_url": "https://github.com/apache/directory-server/raw/7df31adba307611218e0a8cab604f5b68696a4b9/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "sha": "106ed48f204cfd3967a02b596b1436792ce2670c",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE in the code (defensive code added)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@523661 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/2735bb2dc1da99aa07283fdde71d2cede24708c1",
        "patched_files": [
            "SchemaService.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SchemaServiceTest.java"
        ]
    },
    "directory-server_849af47": {
        "bug_id": "directory-server_849af47",
        "commit": "https://github.com/apache/directory-server/commit/849af479da42d6ab42ad921f8728035c8eea21ef",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/directory-server/blob/849af479da42d6ab42ad921f8728035c8eea21ef/server-unit/src/test/java/org/apache/directory/server/PasswordPolicyServiceITest.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/PasswordPolicyServiceITest.java?ref=849af479da42d6ab42ad921f8728035c8eea21ef",
                "deletions": 13,
                "filename": "server-unit/src/test/java/org/apache/directory/server/PasswordPolicyServiceITest.java",
                "patch": "@@ -59,9 +59,27 @@\n      */\n     public void setUp() throws Exception\n     {\n+        super.setUp();\n         setAllowAnonymousAccess( false );\n \n         Attributes attrs;\n+\n+\n+        Hashtable<String, String> env = new Hashtable<String, String>();\n+        env.put( \"java.naming.factory.initial\", \"com.sun.jndi.ldap.LdapCtxFactory\" );\n+        env.put( \"java.naming.provider.url\", \"ldap://localhost:\" + port + \"/dc=example,dc=com\" );\n+        env.put( \"java.naming.security.principal\", \"uid=admin,ou=system\" );\n+        env.put( \"java.naming.security.credentials\", \"secret\" );\n+        env.put( \"java.naming.security.authentication\", \"simple\" );\n+        ctx = new InitialDirContext( env );\n+\n+        attrs = getOrgUnitAttributes( \"users\" );\n+        users = ctx.createSubcontext( \"ou=users\", attrs );\n+    }\n+\n+    protected void configureDirectoryService()\n+    {\n+        Attributes attrs;\n         Set<Partition> partitions = new HashSet<Partition>();\n \n         // Add partition 'example'\n@@ -92,19 +110,6 @@ public void setUp() throws Exception\n \n         list.add( new PasswordPolicyInterceptor() );\n         directoryService.setInterceptors( list );\n-\n-        super.setUp();\n-\n-        Hashtable<String, String> env = new Hashtable<String, String>();\n-        env.put( \"java.naming.factory.initial\", \"com.sun.jndi.ldap.LdapCtxFactory\" );\n-        env.put( \"java.naming.provider.url\", \"ldap://localhost:\" + port + \"/dc=example,dc=com\" );\n-        env.put( \"java.naming.security.principal\", \"uid=admin,ou=system\" );\n-        env.put( \"java.naming.security.credentials\", \"secret\" );\n-        env.put( \"java.naming.security.authentication\", \"simple\" );\n-        ctx = new InitialDirContext( env );\n-\n-        attrs = getOrgUnitAttributes( \"users\" );\n-        users = ctx.createSubcontext( \"ou=users\", attrs );\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/849af479da42d6ab42ad921f8728035c8eea21ef/server-unit/src/test/java/org/apache/directory/server/PasswordPolicyServiceITest.java",
                "sha": "0ea93fe5014b472a5d60d67ede0c6b2bcce76786",
                "status": "modified"
            }
        ],
        "message": "this should fix NPE (untested)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@584303 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/90e4016fd65ca6cd3a27e7a4632b1a95349ddabb",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "PasswordPolicyServiceITest.java"
        ]
    },
    "directory-server_859e0cb": {
        "bug_id": "directory-server_859e0cb",
        "commit": "https://github.com/apache/directory-server/commit/859e0cb55e914e9359e4041162e1d92e3204b211",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/directory-server/blob/859e0cb55e914e9359e4041162e1d92e3204b211/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java?ref=859e0cb55e914e9359e4041162e1d92e3204b211",
                "deletions": 0,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "patch": "@@ -1206,6 +1206,21 @@ public BindResponse bind( BindRequest bindRequest ) throws LdapException, IOExce\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( Dn name ) throws LdapException, IOException\n+    {\n+        byte[] credBytes = StringConstants.EMPTY_BYTES;\n+\n+        BindRequest bindReq = new BindRequestImpl();\n+        bindReq.setName( name );\n+        bindReq.setCredentials( credBytes );\n+\n+        return bind( bindReq );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */\n@@ -1221,6 +1236,15 @@ public BindResponse bind( Dn name, String credentials ) throws LdapException, IO\n     }\n \n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    public BindResponse bind( String name ) throws LdapException, IOException\n+    {\n+        return bind( new Dn( schemaManager, name ), null );\n+    }\n+\n+\n     /**\n      * {@inheritDoc}\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/859e0cb55e914e9359e4041162e1d92e3204b211/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "sha": "0dae4ddcce82d20db62d2134783e137f354c6023",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/directory-server/blob/859e0cb55e914e9359e4041162e1d92e3204b211/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java?ref=859e0cb55e914e9359e4041162e1d92e3204b211",
                "deletions": 6,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.directory.server.core.interceptor.BaseInterceptor;\n import org.apache.directory.server.core.interceptor.NextInterceptor;\n import org.apache.directory.server.core.interceptor.context.BindOperationContext;\n+import org.apache.directory.shared.ldap.model.exception.LdapAuthenticationException;\n import org.apache.directory.shared.ldap.model.exception.LdapException;\n import org.apache.directory.shared.ldap.model.message.BindRequest;\n import org.apache.directory.shared.ldap.model.message.BindRequestImpl;\n@@ -48,7 +49,6 @@\n import org.apache.directory.shared.ldap.model.name.Dn;\n import org.junit.After;\n import org.junit.Before;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -64,9 +64,16 @@\n @ApplyLdifs(\n     {\n         // Entry # 1\n-        \"dn: uid=superuser,ou=system\", \"objectClass: person\", \"objectClass: organizationalPerson\",\n-        \"objectClass: inetOrgPerson\", \"objectClass: top\", \"cn: superuser\", \"sn: administrator\",\n-        \"displayName: Directory Superuser\", \"uid: superuser\", \"userPassword: test\" })\n+        \"dn: uid=superuser,ou=system\", \n+        \"objectClass: person\", \n+        \"objectClass: organizationalPerson\",\n+        \"objectClass: inetOrgPerson\", \n+        \"objectClass: top\", \n+        \"cn: superuser\", \n+        \"sn: administrator\",\n+        \"displayName: Directory Superuser\", \n+        \"uid: superuser\", \n+        \"userPassword: test\" })\n public class SimpleBindRequestTest extends AbstractLdapTestUnit\n {\n     private LdapAsyncConnection connection;\n@@ -159,7 +166,6 @@ public void testSimpleBindRequest() throws Exception\n      * Test a successful anonymous bind request.\n      */\n     @Test\n-    @Ignore // TODO : FIXME ! We get a NPE low in the code because the name is null\n     public void testAnonymousBindRequest() throws Exception\n     {\n         BindRequest bindRequest = new BindRequestImpl();\n@@ -255,7 +261,7 @@ public void testSimpleBindNoNamePassword() throws Exception\n     @Test\n     public void testSimpleBindUnauthenticated() throws Exception\n     {\n-        BindResponse response = connection.bind( \"uid=admin,ou=system\", ( String ) null );\n+        BindResponse response = connection.bind( \"uid=admin,ou=system\" );\n         LdapResult ldapResult = response.getLdapResult();\n         assertEquals( ResultCodeEnum.UNWILLING_TO_PERFORM, ldapResult.getResultCode() );\n         assertEquals( 1, response.getMessageId() );\n@@ -264,6 +270,16 @@ public void testSimpleBindUnauthenticated() throws Exception\n     }\n \n \n+    /**\n+     * Test an bind with no password\n+     */\n+    @Test( expected=LdapAuthenticationException.class )\n+    public void testSimpleBindNoPassword() throws Exception\n+    {\n+        connection.bind( \"uid=admin,ou=system\", ( String ) null );\n+    }\n+\n+\n     /**\n      * Test a valid bind\n      */",
                "raw_url": "https://github.com/apache/directory-server/raw/859e0cb55e914e9359e4041162e1d92e3204b211/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/bind/SimpleBindRequestTest.java",
                "sha": "bb81fb73e2250e65d895f8d40a0868ec4ee719d1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/859e0cb55e914e9359e4041162e1d92e3204b211/server-integ/src/test/java/org/apache/directory/server/operations/bind/SaslBindIT.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/src/test/java/org/apache/directory/server/operations/bind/SaslBindIT.java?ref=859e0cb55e914e9359e4041162e1d92e3204b211",
                "deletions": 0,
                "filename": "server-integ/src/test/java/org/apache/directory/server/operations/bind/SaslBindIT.java",
                "patch": "@@ -232,6 +232,7 @@ public void testSupportedSASLMechanisms() throws Exception\n      * Tests to make sure PLAIN-binds works\n      */\n     @Test\n+    @Ignore // The SASL Plain mechanism is ot supported\n     public void testSaslBindPLAIN() throws Exception\n     {\n         Dn userDn = new Dn( \"uid=hnelson,ou=users,dc=example,dc=com\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/859e0cb55e914e9359e4041162e1d92e3204b211/server-integ/src/test/java/org/apache/directory/server/operations/bind/SaslBindIT.java",
                "sha": "e47b92f9e79984e9b2b2e956c1c062933044f678",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/directory-server/blob/859e0cb55e914e9359e4041162e1d92e3204b211/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java?ref=859e0cb55e914e9359e4041162e1d92e3204b211",
                "deletions": 2,
                "filename": "server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "patch": "@@ -71,8 +71,14 @@\n @ApplyLdifs(\n     {\n         // Entry # 1\n-        \"dn: uid=hnelson,ou=users,ou=system\", \"objectClass: inetOrgPerson\", \"objectClass: organizationalPerson\",\n-        \"objectClass: person\", \"objectClass: top\", \"userPassword: secret\", \"uid: hnelson\", \"cn: Horatio Nelson\",\n+        \"dn: uid=hnelson,ou=users,ou=system\", \n+        \"objectClass: inetOrgPerson\", \n+        \"objectClass: organizationalPerson\",\n+        \"objectClass: person\", \n+        \"objectClass: top\", \n+        \"userPassword: secret\", \n+        \"uid: hnelson\",\n+        \"cn: Horatio Nelson\",\n         \"sn: Nelson\" })\n @CreateDS(allowAnonAccess = true, name = \"SimpleBindIT-class\")\n @CreateLdapServer(transports =",
                "raw_url": "https://github.com/apache/directory-server/raw/859e0cb55e914e9359e4041162e1d92e3204b211/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "sha": "833b081153e3caf28fbbb1ff3a0397000b244ef0",
                "status": "modified"
            }
        ],
        "message": "o Added the bind( Dn ) and bind( String ) method in the LdapConnection interface\no Ignored the SASL PLAIN bind test, it's not working in the LdapNeworkConnection\no The testAnonymousBindReques is not anymore ignored, the NPE ha sbeen fixed\no Added a check in the LdapNetworkConnection.bind( username, password ) methods to forbid a call when the password is null but the username is not\no Fixed a NPE in the BindRequestDecorator class\no Updated the BindRequest Javadoc\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1092743 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/5fa276f9679c60c587032c9bb6c96a7628ed6669",
        "patched_files": [
            "LdapCoreSessionConnection.java",
            "SaslBindIT.java",
            "SimpleBindIT.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SimpleBindRequestTest.java"
        ]
    },
    "directory-server_87c17a6": {
        "bug_id": "directory-server_87c17a6",
        "commit": "https://github.com/apache/directory-server/commit/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/directory-server/blob/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/db/jdbm/JdbmDatabase.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/db/jdbm/JdbmDatabase.java?ref=87c17a6d5d9ec6f9b54379de97cc7600ca5d825a",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/ldap/server/db/jdbm/JdbmDatabase.java",
                "patch": "@@ -38,7 +38,9 @@\n import jdbm.recman.CacheRecordManager;\n import org.apache.ldap.common.MultiException;\n import org.apache.ldap.common.exception.LdapNameNotFoundException;\n+import org.apache.ldap.common.exception.LdapSchemaViolationException;\n import org.apache.ldap.common.message.LockableAttributesImpl;\n+import org.apache.ldap.common.message.ResultCodeEnum;\n import org.apache.ldap.common.name.LdapName;\n import org.apache.ldap.common.schema.AttributeType;\n import org.apache.ldap.common.schema.Normalizer;\n@@ -682,13 +684,22 @@ public void add( String updn, Name dn, Attributes entry ) throws NamingException\n         // don't keep going if we cannot find the parent Id\n         if ( parentId == null )\n         {\n-            throw new LdapNameNotFoundException( \"Id for parent '\" +\n-                    dn.getSuffix( 1 ).toString() + \"' not found!\" );\n+            throw new LdapNameNotFoundException( \"Id for parent '\" + dn.getSuffix( 1 ).toString() + \"' not found!\" );\n+        }\n+\n+        Attribute objectClass = entry.get( \"objectClass\" );\n+\n+        if ( objectClass == null )\n+        {\n+            String msg = \"Entry \" + updn + \" contains no objectClass attribute: \" + entry;\n+\n+            throw new LdapSchemaViolationException( msg, ResultCodeEnum.OBJECTCLASSVIOLATION );\n         }\n \n         // Start adding the system indices\n         // Why bother doing a lookup if this is not an alias.\n-        if ( entry.get( \"objectClass\" ).contains( ALIAS_OBJECT ) ) \n+\n+        if ( entry.get( \"objectClass\" ).contains( ALIAS_OBJECT ) )\n         {\n             addAliasIndices( id, dn, ( String ) entry.get( ALIAS_ATTRIBUTE ).get() );\n         }",
                "raw_url": "https://github.com/apache/directory-server/raw/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/db/jdbm/JdbmDatabase.java",
                "sha": "dfe84a4ca520fca84c0cf354a4b51bc11768ec76",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/prefs/ServerPreferencesFactory.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/prefs/ServerPreferencesFactory.java?ref=87c17a6d5d9ec6f9b54379de97cc7600ca5d825a",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/ldap/server/prefs/ServerPreferencesFactory.java",
                "patch": "@@ -20,6 +20,7 @@\n import java.util.prefs.Preferences;\n import java.util.prefs.PreferencesFactory;\n \n+\n import org.apache.ldap.common.NotImplementedException;\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/prefs/ServerPreferencesFactory.java",
                "sha": "d47d5ae14de915a5cd4ca3b1d58326aefffdd274",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/prefs/ServerSystemPreferences.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/prefs/ServerSystemPreferences.java?ref=87c17a6d5d9ec6f9b54379de97cc7600ca5d825a",
                "deletions": 6,
                "filename": "core/src/main/java/org/apache/ldap/server/prefs/ServerSystemPreferences.java",
                "patch": "@@ -128,9 +128,9 @@ public ServerSystemPreferences( ServerSystemPreferences parent, String name )\n \n \n     /**\n-     * Wrapps this Preferences object as a Dictionary.\n+     * Wrapps this ServerPreferences object as a Dictionary.\n      *\n-     * @return a Dictionary that uses this Preferences object as the underlying backing store\n+     * @return a Dictionary that uses this ServerPreferences object as the underlying backing store\n      */\n     public Dictionary wrapAsDictionary()\n     {\n@@ -139,9 +139,9 @@ public Dictionary wrapAsDictionary()\n \n \n     /**\n-     * Gets access to the LDAP context associated with this Preferences node.\n+     * Gets access to the LDAP context associated with this ServerPreferences node.\n      *\n-     * @return the LDAP context associate with this Preferences node\n+     * @return the LDAP context associate with this ServerPreferences node\n      */\n     LdapContext getLdapContext()\n     {\n@@ -150,10 +150,10 @@ LdapContext getLdapContext()\n \n \n     /**\n-     * Sets up a new Preferences node by injecting the required information\n+     * Sets up a new ServerPreferences node by injecting the required information\n      * such as the node name attribute and the objectClass attribute.\n      *\n-     * @param name the name of the new Preferences node.\n+     * @param name the name of the new ServerPreferences node.\n      */\n     private void setUpNode( String name ) throws NamingException\n     {",
                "raw_url": "https://github.com/apache/directory-server/raw/87c17a6d5d9ec6f9b54379de97cc7600ca5d825a/core/src/main/java/org/apache/ldap/server/prefs/ServerSystemPreferences.java",
                "sha": "cdaff0ad283f9c4f7fc184f551b4aae3111dd28b",
                "status": "modified"
            }
        ],
        "message": "fix npe due to lack of check for attribute and cleaned up javadocs\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/directory/apacheds/trunk@153145 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/71dadf8fd95717b4a5b25893a35a7ac780810db5",
        "patched_files": [
            "ServerPreferencesFactory.java",
            "ServerSystemPreferences.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ServerSystemPreferencesTest.java",
            "ServerPreferencesFactoryTest.java"
        ]
    },
    "directory-server_91e7746": {
        "bug_id": "directory-server_91e7746",
        "commit": "https://github.com/apache/directory-server/commit/91e774615af5089b6aa2a530e94a83eb67f14db4",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/directory-server/blob/91e774615af5089b6aa2a530e94a83eb67f14db4/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java?ref=91e774615af5089b6aa2a530e94a83eb67f14db4",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "patch": "@@ -1687,6 +1687,15 @@ private void check( LdapDN dn, Attributes entry ) throws NamingException\n         // 3-2) or if the AttributeType is COLLECTIVE\n         // 4) We also check that for H-R attributes, we have a valid String in the values\n         Attribute objectClassAttr = entry.get( SchemaConstants.OBJECT_CLASS_AT );\n+        \n+        // Protect the server against a null objectClassAttr\n+        // It can be the case if the user forgot to add it to the entry ...\n+        // In this case, we create an new one, empty\n+        if ( objectClassAttr == null )\n+        {\n+            objectClassAttr = new AttributeImpl( SchemaConstants.OBJECT_CLASS_AT );\n+        }\n+        \n         List<ObjectClass> ocs = new ArrayList<ObjectClass>();\n \n         alterObjectClasses( objectClassAttr );",
                "raw_url": "https://github.com/apache/directory-server/raw/91e774615af5089b6aa2a530e94a83eb67f14db4/core/src/main/java/org/apache/directory/server/core/schema/SchemaService.java",
                "sha": "f6c6d77b81ed3e4da9c4195bf6fe7d2e967d60c7",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE when the user send an Attributes without any \"ObjecClass\" attribute\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@546021 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/42ece7b02d9b79bbba8a4a86eed996ca7557f22a",
        "patched_files": [
            "SchemaService.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SchemaServiceTest.java"
        ]
    },
    "directory-server_a2cd0c6": {
        "bug_id": "directory-server_a2cd0c6",
        "commit": "https://github.com/apache/directory-server/commit/a2cd0c6c191f3cdd7d48412526d0431ecb6cc861",
        "file": [
            {
                "additions": 27,
                "blob_url": "https://github.com/apache/directory-server/blob/a2cd0c6c191f3cdd7d48412526d0431ecb6cc861/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java?ref=a2cd0c6c191f3cdd7d48412526d0431ecb6cc861",
                "deletions": 0,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "patch": "@@ -165,6 +165,33 @@ public void testAsyncSearch() throws Exception\n     }\n \n     \n+    /**\n+     * Test a search with a Substring filter\n+     * @throws Exception\n+     */\n+    @Test\n+    public void testSearchPersonSubstring() throws Exception\n+    {\n+        SearchFuture searchFuture = connection.searchAsync( \"ou=system\", \"(objectclass=*ers*)\", SearchScope.SUBTREE, \"*\",\n+            \"+\" );\n+        int count = 0;\n+        SearchResponse searchResponse = null;\n+        do\n+        {\n+            searchResponse = ( SearchResponse ) searchFuture.get( 100000, TimeUnit.MILLISECONDS );\n+            assertNotNull( searchResponse );\n+            \n+            if ( !( searchResponse instanceof SearchResultDone ) )\n+            {\n+                count++;\n+            }\n+        }\n+        while ( !( searchResponse instanceof SearchResultDone ) );\n+\n+        assertEquals(2, count );\n+    }\n+\n+    \n     @Test\n     public void testSearchWithDerefAlias() throws Exception\n     {",
                "raw_url": "https://github.com/apache/directory-server/raw/a2cd0c6c191f3cdd7d48412526d0431ecb6cc861/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "sha": "2f3f6a5cf7b92f3142027bea38655e9eeed9850b",
                "status": "modified"
            }
        ],
        "message": "Fixed DIRAPI-17 : the Substring filter was not containing the Attribute, leading to a NPE when encoding it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@955090 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/9ae7c1deb8e6b306b411d0650bc58cc5d7c51c08",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "ClientSearchRequestTest.java"
        ]
    },
    "directory-server_af2901c": {
        "bug_id": "directory-server_af2901c",
        "commit": "https://github.com/apache/directory-server/commit/af2901c5ed0fcae63ed93e7d004fee54b64da2e8",
        "file": [
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/directory-server/blob/af2901c5ed0fcae63ed93e7d004fee54b64da2e8/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java?ref=af2901c5ed0fcae63ed93e7d004fee54b64da2e8",
                "deletions": 12,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "patch": "@@ -42,12 +42,13 @@\n import org.apache.directory.server.core.integ.FrameworkRunner;\n import org.apache.directory.shared.ldap.cursor.Cursor;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.filter.SearchScope;\n import org.apache.directory.shared.ldap.message.AliasDerefMode;\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.name.DN;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -70,21 +71,29 @@\n     \"objectClass: top\",\n     \"sn: user1 sn\",\n     \"cn: user1\",\n-    \n+\n     // alias to the above entry\n     \"dn: cn=user1-alias,ou=users,ou=system\",\n     \"objectClass: alias\",\n     \"objectClass: top\",\n     \"objectClass: extensibleObject\",\n     \"aliasedObjectName: cn=user1,ou=users,ou=system\",\n-    \"cn: user1-alias\"\n+    \"cn: user1-alias\",\n+\n+    // Another user\n+    \"dn: cn=elecharny,ou=users,ou=system\",\n+    \"objectClass: person\",\n+    \"objectClass: top\",\n+    \"sn:: RW1tYW51ZWwgTMOpY2hhcm55\",\n+    \"cn: elecharny\"\n+    \n })\n public class ClientSearchRequestTest extends AbstractLdapTestUnit\n {\n-    private static LdapAsyncConnection connection;\n+    private LdapAsyncConnection connection;\n \n-    @BeforeClass\n-    public static void setup() throws Exception\n+    @Before\n+    public void setup() throws Exception\n     {\n         connection = new LdapNetworkConnection( \"localhost\", ldapServer.getPort() );\n         DN bindDn = new DN( \"uid=admin,ou=system\" );\n@@ -95,8 +104,8 @@ public static void setup() throws Exception\n     /**\n      * Close the LdapConnection\n      */\n-    @AfterClass\n-    public static void shutdown()\n+    @After\n+    public void shutdown()\n     {\n         try\n         {\n@@ -155,6 +164,7 @@ public void testAsyncSearch() throws Exception\n             \"+\" );\n         int count = 0;\n         SearchResponse searchResponse = null;\n+        \n         do\n         {\n             searchResponse = ( SearchResponse ) searchFuture.get( 1000, TimeUnit.MILLISECONDS );\n@@ -181,6 +191,7 @@ public void testSearchPersonSubstring() throws Exception\n             \"+\" );\n         int count = 0;\n         SearchResponse searchResponse = null;\n+        \n         do\n         {\n             searchResponse = ( SearchResponse ) searchFuture.get( 100000, TimeUnit.MILLISECONDS );\n@@ -193,7 +204,7 @@ public void testSearchPersonSubstring() throws Exception\n         }\n         while ( !( searchResponse instanceof SearchResultDone ) );\n \n-        assertEquals(2, count );\n+        assertEquals( 3, count );\n     }\n \n     \n@@ -208,22 +219,32 @@ public void testSearchWithDerefAlias() throws Exception\n         \n         int count = 0;\n         Cursor<SearchResponse> cursor = connection.search( searchRequest );\n+        \n         while( cursor.next() )\n         {\n             count++;\n         }\n         \n         // due to dereferencing of aliases we get only one entry\n-        assertEquals( 1, count );\n+        assertEquals( 2, count );\n \n         count = 0;\n         searchRequest.setDerefAliases( AliasDerefMode.NEVER_DEREF_ALIASES );\n         cursor = connection.search( searchRequest );\n+        \n         while( cursor.next() )\n         {\n             count++;\n         }\n         \n-        assertEquals( 2, count );\n+        assertEquals( 3, count );\n+    }\n+    \n+\n+    @Test(expected=LdapException.class)\n+    public void testSearchUTF8() throws Exception\n+    {\n+        connection.search( \"ou=system\", \"(sn=Emmanuel L\ufffdcharny)\", SearchScope.ONELEVEL, \"*\", \"+\" );\n+        fail();\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/af2901c5ed0fcae63ed93e7d004fee54b64da2e8/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "sha": "89c410f4bcc3be4f22fe94fb82915a03305f626c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/directory-server/blob/af2901c5ed0fcae63ed93e7d004fee54b64da2e8/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java?ref=af2901c5ed0fcae63ed93e7d004fee54b64da2e8",
                "deletions": 1,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "patch": "@@ -41,7 +41,6 @@\n import org.apache.directory.shared.ldap.name.DN;\n import org.junit.AfterClass;\n import org.junit.Before;\n-import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/af2901c5ed0fcae63ed93e7d004fee54b64da2e8/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/SearchRequestReturningAttributesTest.java",
                "sha": "b0f5baa846f3bb7327ee27fbd6c76c5393222601",
                "status": "modified"
            }
        ],
        "message": "o Added the handling of exceptionCaucght() events in the client API\no The responseFuture now contains the cause of error if something went wrong during the request sending\no Added a test to demonstrate DIRAPI-20, and prove that it's now fixed.\no Fixed a NPE in some tests by using non static fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-subtree@965671 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/7585f50ecae537a093aca1058ea347390bf89897",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "ClientSearchRequestTest.java",
            "SearchRequestReturningAttributesTest.java"
        ]
    },
    "directory-server_b180cfd": {
        "bug_id": "directory-server_b180cfd",
        "commit": "https://github.com/apache/directory-server/commit/b180cfd4d7e682cff9bc51449a55f1c4a0d6def0",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/directory-server/blob/b180cfd4d7e682cff9bc51449a55f1c4a0d6def0/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java?ref=b180cfd4d7e682cff9bc51449a55f1c4a0d6def0",
                "deletions": 7,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "patch": "@@ -46,8 +46,8 @@\n import org.apache.directory.shared.ldap.message.AliasDerefMode;\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.name.DN;\n-import org.junit.AfterClass;\n-import org.junit.BeforeClass;\n+import org.junit.After;\n+import org.junit.Before;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -81,10 +81,10 @@\n })\n public class ClientSearchRequestTest extends AbstractLdapTestUnit\n {\n-    private static LdapAsyncConnection connection;\n+    private LdapAsyncConnection connection;\n \n-    @BeforeClass\n-    public static void setup() throws Exception\n+    @Before\n+    public void setup() throws Exception\n     {\n         connection = new LdapNetworkConnection( \"localhost\", ldapServer.getPort() );\n         DN bindDn = new DN( \"uid=admin,ou=system\" );\n@@ -95,8 +95,8 @@ public static void setup() throws Exception\n     /**\n      * Close the LdapConnection\n      */\n-    @AfterClass\n-    public static void shutdown()\n+    @After\n+    public void shutdown()\n     {\n         try\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/b180cfd4d7e682cff9bc51449a55f1c4a0d6def0/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/search/ClientSearchRequestTest.java",
                "sha": "ced2624d719e64671e0735b9204c7c1a29bd8d91",
                "status": "modified"
            }
        ],
        "message": "o removed static initialization to avoid NPE while running in eclipse\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@965570 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/c176191f8befd488eab402ec0aa83a732a0bd003",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "ClientSearchRequestTest.java"
        ]
    },
    "directory-server_b3f4b40": {
        "bug_id": "directory-server_b3f4b40",
        "commit": "https://github.com/apache/directory-server/commit/b3f4b4085ea61403cc270e2b2cf872d16e21eef9",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/directory-server/blob/b3f4b4085ea61403cc270e2b2cf872d16e21eef9/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java?ref=b3f4b4085ea61403cc270e2b2cf872d16e21eef9",
                "deletions": 5,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "patch": "@@ -32,9 +32,11 @@\n import static org.junit.Assert.assertTrue;\n \n import org.apache.directory.ldap.client.api.LdapConnection;\n+import org.apache.directory.ldap.client.api.LdapNetworkConnection;\n import org.apache.directory.server.annotations.CreateLdapServer;\n import org.apache.directory.server.annotations.CreateTransport;\n import org.apache.directory.server.core.PasswordPolicyConfiguration;\n+import org.apache.directory.server.core.PpolicyConfigContainer;\n import org.apache.directory.server.core.annotations.CreateDS;\n import org.apache.directory.server.core.authn.AuthenticationInterceptor;\n import org.apache.directory.server.core.authn.PasswordUtil;\n@@ -61,7 +63,6 @@\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.message.control.Control;\n import org.apache.directory.shared.ldap.name.DN;\n-import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Test;\n@@ -103,10 +104,13 @@ public void setPwdPolicy() throws LdapException\n         policyConfig.setPwdGraceAuthNLimit( 5 );\n         policyConfig.setPwdCheckQuality( 2 ); // DO NOT allow the password if its quality can't be checked\n \n+        PpolicyConfigContainer policyContainer = new PpolicyConfigContainer();\n+        policyContainer.setDefaultPolicy( policyConfig );\n+        service.setPwdPolicies( policyContainer );\n+        \n         AuthenticationInterceptor authInterceptor = ( AuthenticationInterceptor ) service\n-            .getInterceptor( AuthenticationInterceptor.class.getName() );\n-        authInterceptor.setPwdPolicyConfig( policyConfig );\n-\n+        .getInterceptor( AuthenticationInterceptor.class.getName() );\n+        \n         authInterceptor.loadPwdPolicyStateAtributeTypes();\n     }\n \n@@ -122,7 +126,7 @@ public void closeConnections()\n     public void testAddUserWithClearTextPwd() throws Exception\n     {\n         LdapConnection connection = getAdminNetworkConnection( ldapServer );\n-\n+        \n         DN userDn = new DN( \"cn=user,ou=system\" );\n         Entry userEntry = LdifUtils.createEntry( userDn, \"ObjectClass: top\", \"ObjectClass: person\", \"cn: user\",\n             \"sn: user_sn\", \"userPassword: 1234\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/b3f4b4085ea61403cc270e2b2cf872d16e21eef9/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "sha": "706ecb5d811f4408519e341c382d8e4bfdc68b1c",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/b3f4b4085ea61403cc270e2b2cf872d16e21eef9/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java?ref=b3f4b4085ea61403cc270e2b2cf872d16e21eef9",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "patch": "@@ -158,7 +158,8 @@\n \n     private AttributeType AT_PWD_GRACE_USE_TIME;\n \n-    \n+    //FIXME should be removed after the config branch merge\n+    private PpolicyConfigContainer policyContainer;\n     \n     /**\n      * the set of interceptors we should *not* go through when pwdpolicy state information is being updated\n@@ -200,6 +201,8 @@ public void init( DirectoryService directoryService ) throws LdapException\n     {\n         this.directoryService = directoryService;\n \n+        directoryService.setPwdPolicies( policyContainer );;\n+        \n         schemaManager = directoryService.getSchemaManager();\n \n         adminSession = directoryService.getAdminSession();\n@@ -1095,9 +1098,8 @@ public void unbind( NextInterceptor next, UnbindOperationContext unbindContext )\n      */\n     public void setPwdPolicyConfig( PasswordPolicyConfiguration policyConfig )\n     {\n-        PpolicyConfigContainer policyContainer = new PpolicyConfigContainer();\n+        policyContainer = new PpolicyConfigContainer();\n         policyContainer.setDefaultPolicy( policyConfig );\n-        directoryService.setPwdPolicies( policyContainer );\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/b3f4b4085ea61403cc270e2b2cf872d16e21eef9/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "sha": "96ce24e0456369f696e58ec29c87cfba64f5949d",
                "status": "modified"
            }
        ],
        "message": "o fixed an NPE issue which can arise when the pwdpolicy is setting and the interceptor was not yet intialized\no updated test case\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1028420 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/2d585c24cda93f19818747521727d72ef8a645a2",
        "patched_files": [
            "AuthenticationInterceptor.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "PasswordPolicyTest.java"
        ]
    },
    "directory-server_b696783": {
        "bug_id": "directory-server_b696783",
        "commit": "https://github.com/apache/directory-server/commit/b696783ca116be74d06369e6a99fcf7c5da36839",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/b696783ca116be74d06369e6a99fcf7c5da36839/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmMechanismHandler.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmMechanismHandler.java?ref=b696783ca116be74d06369e6a99fcf7c5da36839",
                "deletions": 1,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmMechanismHandler.java",
                "patch": "@@ -69,7 +69,7 @@ public SaslServer handleMechanism( IoSession session, BindRequest bindRequest )\n                 initProvider();\n             }\n             \n-            ss = new NtlmSaslServer( provider );\n+            ss = new NtlmSaslServer( provider, bindRequest, session );\n             session.setAttribute( SASL_CONTEXT, ss );\n         }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/b696783ca116be74d06369e6a99fcf7c5da36839/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmMechanismHandler.java",
                "sha": "6ffba1d9c6907696f7bbede1110466d3af00d835",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/directory-server/blob/b696783ca116be74d06369e6a99fcf7c5da36839/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java?ref=b696783ca116be74d06369e6a99fcf7c5da36839",
                "deletions": 2,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "patch": "@@ -21,7 +21,10 @@\n \n \n import org.apache.directory.shared.ldap.constants.SupportedSaslMechanisms;\n+import org.apache.directory.shared.ldap.message.BindRequest;\n+import org.apache.mina.common.IoSession;\n \n+import javax.naming.Context;\n import javax.security.sasl.SaslServer;\n import javax.security.sasl.SaslException;\n \n@@ -40,10 +43,14 @@\n \n     private NegotiationState state = NegotiationState.INITIALIZED;\n     private final NtlmProvider provider;\n+    private final BindRequest request;\n+    private final IoSession session;\n \n-\n-    public NtlmSaslServer( NtlmProvider provider )\n+    \n+    public NtlmSaslServer( NtlmProvider provider, BindRequest request, IoSession session )\n     {\n+        this.session = session;\n+        this.request = request;\n         this.provider = provider;\n     }\n \n@@ -82,10 +89,12 @@ protected void responseSent()\n                 throw new IllegalStateException( \"Cannot send Type 2 challenge before Type 1 response.\" );\n             case TYPE_1_RECEIVED:\n                 state = NegotiationState.TYPE_2_SENT;\n+                break;\n             case TYPE_2_SENT:\n                 throw new IllegalStateException( \"Cannot send Type 2 after it's already sent.\" );\n             case TYPE_3_RECEIVED:\n                 state = NegotiationState.COMPLETED;\n+                break;\n             case COMPLETED:\n                 throw new IllegalStateException( \"Sasl challenge response already completed.\" );\n         }\n@@ -124,6 +133,8 @@ protected void responseSent()\n                 try\n                 {\n                     result = provider.authenticate( response );\n+                    retval = result.getResponse();\n+                    session.setAttribute( Context.SECURITY_PRINCIPAL, request.getName().toString() );\n                 }\n                 catch ( Exception e )\n                 {",
                "raw_url": "https://github.com/apache/directory-server/raw/b696783ca116be74d06369e6a99fcf7c5da36839/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/bind/ntlm/NtlmSaslServer.java",
                "sha": "6e43d2463ad7802ccbd8cbb26a4ab17eaa255596",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/b696783ca116be74d06369e6a99fcf7c5da36839/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java?ref=b696783ca116be74d06369e6a99fcf7c5da36839",
                "deletions": 0,
                "filename": "server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "patch": "@@ -254,8 +254,11 @@ protected void setUp() throws Exception\n         directoryService.startup();\n \n         configureLdapServer();\n+\n+        // TODO shouldn't this be before calling configureLdapServer() ???\n         ldapServer.addExtendedOperationHandler( new StartTlsHandler() );\n         ldapServer.addExtendedOperationHandler( new StoredProcedureExtendedOperationHandler() );\n+\n         ldapServer.start();\n         setContexts( ServerDNConstants.ADMIN_SYSTEM_DN, \"secret\" );\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/b696783ca116be74d06369e6a99fcf7c5da36839/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "sha": "d0bc63feb19b0cd31e6e9a13c8cb4e951b406fcd",
                "status": "modified"
            },
            {
                "additions": 197,
                "blob_url": "https://github.com/apache/directory-server/blob/b696783ca116be74d06369e6a99fcf7c5da36839/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "changes": 198,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java?ref=b696783ca116be74d06369e6a99fcf7c5da36839",
                "deletions": 1,
                "filename": "server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "patch": "@@ -20,17 +20,30 @@\n package org.apache.directory.server;\n \n \n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.net.SocketClient;\n import org.apache.directory.server.core.entry.DefaultServerEntry;\n import org.apache.directory.server.core.entry.ServerEntry;\n import org.apache.directory.server.core.partition.Partition;\n import org.apache.directory.server.core.partition.impl.btree.Index;\n import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmIndex;\n import org.apache.directory.server.core.partition.impl.btree.jdbm.JdbmPartition;\n+import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmAuthenticationResult;\n+import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmMechanismHandler;\n+import org.apache.directory.server.ldap.handlers.bind.ntlm.NtlmProvider;\n import org.apache.directory.server.unit.AbstractServerTest;\n import org.apache.directory.shared.ldap.message.AttributeImpl;\n import org.apache.directory.shared.ldap.message.AttributesImpl;\n+import org.apache.directory.shared.ldap.message.BindRequestImpl;\n+import org.apache.directory.shared.ldap.message.BindResponse;\n+import org.apache.directory.shared.ldap.message.MessageDecoder;\n+import org.apache.directory.shared.ldap.message.MessageEncoder;\n+import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n+import org.apache.directory.shared.ldap.message.spi.BinaryAttributeDetector;\n import org.apache.directory.shared.ldap.name.LdapDN;\n import org.apache.directory.shared.ldap.constants.SupportedSaslMechanisms;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import javax.naming.Context;\n import javax.naming.NamingEnumeration;\n@@ -39,6 +52,7 @@\n import javax.naming.directory.Attributes;\n import javax.naming.directory.DirContext;\n import javax.naming.directory.InitialDirContext;\n+\n import java.util.HashSet;\n import java.util.Hashtable;\n import java.util.Set;\n@@ -53,7 +67,9 @@\n  */\n public class SaslBindITest extends AbstractServerTest\n {\n+    private static final Logger LOG = LoggerFactory.getLogger( SaslBindITest.class );\n     private DirContext ctx;\n+    private BogusNtlmProvider provider;\n \n \n     /**\n@@ -62,6 +78,7 @@\n      */\n     public void setUp() throws Exception\n     {\n+        provider = new BogusNtlmProvider();\n         super.setUp();\n         setAllowAnonymousAccess( false );\n \n@@ -85,7 +102,6 @@ public void setUp() throws Exception\n     @Override\n     protected void configureDirectoryService() throws NamingException\n     {\n-\n         Set<Partition> partitions = new HashSet<Partition>();\n         JdbmPartition partition = new JdbmPartition();\n         partition.setId( \"example\" );\n@@ -114,8 +130,17 @@ protected void configureDirectoryService() throws NamingException\n     protected void configureLdapServer()\n     {\n         ldapServer.setSaslHost( \"localhost\" );\n+        \n+        NtlmMechanismHandler ntlmMechanismHandler = new NtlmMechanismHandler();\n+        ntlmMechanismHandler.setNtlmProvider( provider  );\n+        \n+        ldapServer.removeSaslMechanismHandler( SupportedSaslMechanisms.NTLM );\n+        ldapServer.addSaslMechanismHandler( SupportedSaslMechanisms.NTLM, ntlmMechanismHandler );\n+        ldapServer.removeSaslMechanismHandler( SupportedSaslMechanisms.GSS_SPNEGO );\n+        ldapServer.addSaslMechanismHandler( SupportedSaslMechanisms.GSS_SPNEGO, ntlmMechanismHandler );\n     }\n \n+    \n     /**\n      * Tear down.\n      */\n@@ -495,4 +520,175 @@ public void testSaslCramMd5BindBadPassword()\n             assertTrue( e.getMessage().contains( \"Invalid response\" ) );\n         }\n     }\n+\n+\n+    /**\n+     * Tests that the plumbing for NTLM bind works.\n+     */\n+    public void testNtlmBind() throws Exception\n+    {\n+        NtlmSaslBindClient client = new NtlmSaslBindClient( SupportedSaslMechanisms.NTLM );\n+        BindResponse type2response = client.bindType1( \"type1_test\".getBytes() );\n+        assertEquals( 1, type2response.getMessageId() );\n+        assertEquals( ResultCodeEnum.SASL_BIND_IN_PROGRESS, type2response.getLdapResult().getResultCode() );\n+        assertTrue( ArrayUtils.isEquals( \"type1_test\".getBytes(), provider.getType1Response() ) );\n+        assertTrue( ArrayUtils.isEquals( \"challenge\".getBytes(), type2response.getServerSaslCreds() ) );\n+        \n+        BindResponse finalResponse = client.bindType3( \"type3_test\".getBytes() );\n+        assertEquals( 2, finalResponse.getMessageId() );\n+        assertEquals( ResultCodeEnum.SUCCESS, finalResponse.getLdapResult().getResultCode() );\n+        assertTrue( ArrayUtils.isEquals( \"type3_test\".getBytes(), provider.getType3Response() ) );\n+        assertTrue( ArrayUtils.isEquals( \"results\".getBytes(), finalResponse.getServerSaslCreds() ) );\n+    }\n+\n+\n+    /**\n+     * Tests that the plumbing for NTLM bind works.\n+     */\n+    public void testGssSpnegoBind() throws Exception\n+    {\n+        NtlmSaslBindClient client = new NtlmSaslBindClient( SupportedSaslMechanisms.GSS_SPNEGO );\n+        BindResponse type2response = client.bindType1( \"type1_test\".getBytes() );\n+        assertEquals( 1, type2response.getMessageId() );\n+        assertEquals( ResultCodeEnum.SASL_BIND_IN_PROGRESS, type2response.getLdapResult().getResultCode() );\n+        assertTrue( ArrayUtils.isEquals( \"type1_test\".getBytes(), provider.getType1Response() ) );\n+        assertTrue( ArrayUtils.isEquals( \"challenge\".getBytes(), type2response.getServerSaslCreds() ) );\n+        \n+        BindResponse finalResponse = client.bindType3( \"type3_test\".getBytes() );\n+        assertEquals( 2, finalResponse.getMessageId() );\n+        assertEquals( ResultCodeEnum.SUCCESS, finalResponse.getLdapResult().getResultCode() );\n+        assertTrue( ArrayUtils.isEquals( \"type3_test\".getBytes(), provider.getType3Response() ) );\n+        assertTrue( ArrayUtils.isEquals( \"results\".getBytes(), finalResponse.getServerSaslCreds() ) );\n+    }\n+\n+\n+    class BogusNtlmProvider implements NtlmProvider\n+    {\n+        private byte[] type1response;\n+        private byte[] type3response;\n+        \n+        \n+        public NtlmAuthenticationResult authenticate( byte[] type3response ) throws Exception\n+        {\n+            this.type3response = type3response;\n+            return new NtlmAuthenticationResult( \"results\".getBytes(), true );\n+        }\n+\n+\n+        public byte[] generateChallenge( byte[] type1reponse ) throws Exception\n+        {\n+            this.type1response = type1reponse;\n+            return \"challenge\".getBytes();\n+        }\n+        \n+        \n+        public byte[] getType1Response()\n+        {\n+            return type1response;\n+        }\n+        \n+        \n+        public byte[] getType3Response()\n+        {\n+            return type3response;\n+        }\n+    }\n+\n+\n+    class NtlmSaslBindClient extends SocketClient\n+    {\n+        private final String mechanism;\n+        \n+        \n+        NtlmSaslBindClient( String mechanism ) throws Exception\n+        {\n+            this.mechanism = mechanism;\n+            setDefaultPort( port );\n+            connect( \"localhost\", port );\n+            setTcpNoDelay( false );\n+            \n+            LOG.debug( \"isConnected() = {}\", _isConnected_ );\n+            LOG.debug( \"LocalPort     = {}\", getLocalPort() );\n+            LOG.debug( \"LocalAddress  = {}\", getLocalAddress() );\n+            LOG.debug( \"RemotePort    = {}\", getRemotePort() );\n+            LOG.debug( \"RemoteAddress = {}\", getRemoteAddress() );\n+        }\n+\n+        \n+        BindResponse bindType1( byte[] type1response ) throws Exception\n+        {\n+            if ( ! isConnected() )\n+            {\n+                throw new IllegalStateException( \"Client is not connected.\" );\n+            }\n+            \n+            // Setup the bind request\n+            BindRequestImpl request = new BindRequestImpl( 1 ) ;\n+            request.setName( new LdapDN( \"uid=admin,ou=system\" ) ) ;\n+            request.setSimple( false ) ;\n+            request.setCredentials( type1response ) ;\n+            request.setSaslMechanism( mechanism );\n+            request.setVersion3( true ) ;\n+            \n+            // Setup the ASN1 Enoder and Decoder\n+            MessageEncoder encoder = new MessageEncoder();\n+            MessageDecoder decoder = new MessageDecoder( new BinaryAttributeDetector() {\n+                public boolean isBinary( String attributeId )\n+                {\n+                    return false;\n+                }\n+            } );\n+     \n+            // Send encoded request to server\n+            encoder.encodeBlocking( null, _output_, request );\n+            _output_.flush();\n+            \n+            while ( _input_.available() <= 0 )\n+            {\n+                Thread.sleep( 100 );\n+            }\n+            \n+            // Retrieve the response back from server to my last request.\n+            return ( BindResponse ) decoder.decode( null, _input_ );\n+        }\n+        \n+        \n+        BindResponse bindType3( byte[] type3response ) throws Exception\n+        {\n+            if ( ! isConnected() )\n+            {\n+                throw new IllegalStateException( \"Client is not connected.\" );\n+            }\n+            \n+            // Setup the bind request\n+            BindRequestImpl request = new BindRequestImpl( 2 ) ;\n+            request.setName( new LdapDN( \"uid=admin,ou=system\" ) ) ;\n+            request.setSimple( false ) ;\n+            request.setCredentials( type3response ) ;\n+            request.setSaslMechanism( mechanism );\n+            request.setVersion3( true ) ;\n+            \n+            // Setup the ASN1 Enoder and Decoder\n+            MessageEncoder encoder = new MessageEncoder();\n+            MessageDecoder decoder = new MessageDecoder( new BinaryAttributeDetector() {\n+                public boolean isBinary( String attributeId )\n+                {\n+                    return false;\n+                }\n+            } );\n+     \n+            // Send encoded request to server\n+            encoder.encodeBlocking( null, _output_, request );\n+            \n+            _output_.flush();\n+            \n+            while ( _input_.available() <= 0 )\n+            {\n+                Thread.sleep( 100 );\n+            }\n+            \n+            // Retrieve the response back from server to my last request.\n+            return ( BindResponse ) decoder.decode( null, _input_ );\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/b696783ca116be74d06369e6a99fcf7c5da36839/server-unit/src/test/java/org/apache/directory/server/SaslBindITest.java",
                "sha": "715fc6bd980de62ec7f2d03f6305957ded92914d",
                "status": "modified"
            }
        ],
        "message": "making sasl ntlm and gss-spengo work\n\n o the shared sasl server for these mechanisms now sets the principal into the\n   session which is what is expected - this prevents a NPE from be thrown\n o the shared sasl server needs access to the bind request and the session \n o added simple client for some pass thru plumbing tests without actually using\n   a valid NTLM provider of which all options are LGPL at this point\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@654367 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/18d5101e9177af1656ed0ccb2fa689874bd5d31b",
        "patched_files": [
            "NtlmMechanismHandler.java",
            "NtlmSaslServer.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SaslBindITest.java",
            "AbstractServerTest.java"
        ]
    },
    "directory-server_b858217": {
        "bug_id": "directory-server_b858217",
        "commit": "https://github.com/apache/directory-server/commit/b8582178614e3ee4981cbd8c8bc633ff5df40d49",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/b8582178614e3ee4981cbd8c8bc633ff5df40d49/kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/messages/KrbError.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/messages/KrbError.java?ref=b8582178614e3ee4981cbd8c8bc633ff5df40d49",
                "deletions": 0,
                "filename": "kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/messages/KrbError.java",
                "patch": "@@ -154,6 +154,11 @@ public void setcTime( KerberosTime cTime )\n      */\n     public int getCusec()\n     {\n+        if ( cusec == null )\n+        {\n+            return 0;\n+        }\n+        \n         return cusec;\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/b8582178614e3ee4981cbd8c8bc633ff5df40d49/kerberos-codec/src/main/java/org/apache/directory/shared/kerberos/messages/KrbError.java",
                "sha": "5b02c7f0fca4bb26fcb3b757c1ca6dadcbfe039b",
                "status": "modified"
            },
            {
                "additions": 281,
                "blob_url": "https://github.com/apache/directory-server/blob/b8582178614e3ee4981cbd8c8bc633ff5df40d49/kerberos-codec/src/test/java/org/apache/directory/shared/kerberos/codec/KrbErrorDecoderTest.java",
                "changes": 283,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/kerberos-codec/src/test/java/org/apache/directory/shared/kerberos/codec/KrbErrorDecoderTest.java?ref=b8582178614e3ee4981cbd8c8bc633ff5df40d49",
                "deletions": 2,
                "filename": "kerberos-codec/src/test/java/org/apache/directory/shared/kerberos/codec/KrbErrorDecoderTest.java",
                "patch": "@@ -20,15 +20,19 @@\n \n package org.apache.directory.shared.kerberos.codec;\n \n-import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.*;\n+import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import java.nio.ByteBuffer;\n+import java.util.Arrays;\n \n import org.apache.directory.shared.asn1.ber.Asn1Decoder;\n import org.apache.directory.shared.asn1.codec.DecoderException;\n import org.apache.directory.shared.asn1.codec.EncoderException;\n+import org.apache.directory.shared.kerberos.KerberosMessageType;\n import org.apache.directory.shared.kerberos.codec.krbError.KrbErrorContainer;\n+import org.apache.directory.shared.kerberos.exceptions.ErrorType;\n import org.apache.directory.shared.kerberos.messages.KrbError;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.Test;\n@@ -102,12 +106,200 @@ public void testDecodeKrbError()\n         }\n         catch( DecoderException e )\n         {\n-            e.printStackTrace();\n             fail();\n         }\n         \n         KrbError krbError = container.getKrbError();\n         \n+        String time = \"20101119080043Z\";\n+        assertEquals( 5, krbError.getProtocolVersionNumber() );\n+        assertEquals( KerberosMessageType.KRB_ERROR, krbError.getMessageType() );\n+        assertEquals( time, krbError.getcTime().getDate() );\n+        assertEquals( 1, krbError.getCusec() );\n+        assertEquals( time, krbError.getsTime().getDate() );\n+        assertEquals( 2, krbError.getSusec() );\n+        assertEquals( ErrorType.KDC_ERR_NONE, krbError.getErrorCode() );\n+        assertEquals( \"crealm\", krbError.getcRealm() );\n+        assertEquals( \"cname\", krbError.getcName().getNameString() );\n+        assertEquals( \"realm\", krbError.getRealm() );\n+        assertEquals( \"sname\", krbError.getsName().getNameString() );\n+        assertEquals( \"etext\", krbError.geteText() );\n+        assertTrue( Arrays.equals( new byte[]{0,1}, krbError.geteData() ) );\n+        \n+        int encodedLen = krbError.computeLength();\n+        \n+        assertEquals( streamLen, encodedLen );\n+        \n+        ByteBuffer buffer = ByteBuffer.allocate( streamLen );\n+        try\n+        {\n+            buffer = krbError.encode( buffer );\n+            \n+            assertEquals( decoded, StringTools.dumpBytes( buffer.array() ) );\n+        }\n+        catch( EncoderException e )\n+        {\n+            fail();\n+        }\n+    }\n+    \n+    \n+    @Test\n+    public void testDecodeKrbErrorWithoutCtime()\n+    {\n+        Asn1Decoder decoder = new Asn1Decoder();\n+        \n+        int streamLen = 0x7A;\n+        ByteBuffer stream = ByteBuffer.allocate( streamLen );\n+        stream.put( new byte[]\n+        {\n+                0x7E, (byte)0x78,\n+                  0x30, (byte)0x76,\n+                    (byte)0xA0, 0x03,           // pvno\n+                      0x02, 0x01, 0x05,    \n+                    (byte)0xA1, 0x03,           // msg-type\n+                      0x02, 0x01, 0x1E,\n+                      //\n+                      // NO ctime\n+                      //\n+                    (byte)0xA3, 0x03,           // cusec\n+                      0x02, 0x01, 0x01,\n+                    (byte)0xA4, 0x11,           // stime\n+                      0x18, 0xF, '2', '0', '1', '0', '1', '1', '1', '9', '0', '8', '0', '0', '4', '3', 'Z',\n+                    (byte)0xA5, 0x03,           // susec\n+                      0x02, 0x01, 0x02,\n+                    (byte)0xA6, 0x03,           // error-code\n+                      0x02, 0x01, 0x00,\n+                    (byte)0xA7, 0x08,            // crealm\n+                      0x1B, 0x06, 'c', 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xA8, 0x12,           // cname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 'c', 'n', 'a', 'm', 'e',\n+                    (byte)0xA9, 0x07,           // realm\n+                      0x1B, 0x05, 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xAA, 0x12,           // sname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 's', 'n', 'a', 'm', 'e',\n+                    (byte)0xAB, 0x07,           // e-text\n+                      0x1B, 0x5, 'e', 't', 'e', 'x', 't',\n+                    (byte)0xAC, 0x04,           // e-data\n+                      0x04, 0x02, \n+                        0x00, 0x01\n+        } );\n+        \n+        String decoded = StringTools.dumpBytes( stream.array() );\n+        stream.flip();\n+        \n+        KrbErrorContainer container = new KrbErrorContainer();\n+        container.setStream( stream );\n+        \n+        try\n+        {\n+            decoder.decode( stream, container );\n+        }\n+        catch( DecoderException e )\n+        {\n+            fail();\n+        }\n+        \n+        KrbError krbError = container.getKrbError();\n+        \n+        assertNull( krbError.getcTime() );\n+        \n+        int encodedLen = krbError.computeLength();\n+        \n+        assertEquals( streamLen, encodedLen );\n+        \n+        ByteBuffer buffer = ByteBuffer.allocate( streamLen );\n+        try\n+        {\n+            buffer = krbError.encode( buffer );\n+            \n+            assertEquals( decoded, StringTools.dumpBytes( buffer.array() ) );\n+        }\n+        catch( EncoderException e )\n+        {\n+            fail();\n+        }\n+    }\n+\n+    \n+    @Test\n+    public void testDecodeKrbErrorWithoutCusec()\n+    {\n+        Asn1Decoder decoder = new Asn1Decoder();\n+        \n+        int streamLen = 0x8A;\n+        ByteBuffer stream = ByteBuffer.allocate( streamLen );\n+        stream.put( new byte[]\n+        {\n+                0x7E, (byte)0x81, (byte)0x87,\n+                  0x30, (byte)0x81, (byte)0x84,\n+                    (byte)0xA0, 0x03,           // pvno\n+                      0x02, 0x01, 0x05,    \n+                    (byte)0xA1, 0x03,           // msg-type\n+                      0x02, 0x01, 0x1E,   \n+                    (byte)0xA2, 0x11,           // ctime\n+                      0x18, 0xF, '2', '0', '1', '0', '1', '1', '1', '9', '0', '8', '0', '0', '4', '3', 'Z',\n+                      // NO cuses\n+                    (byte)0xA4, 0x11,           // stime\n+                      0x18, 0xF, '2', '0', '1', '0', '1', '1', '1', '9', '0', '8', '0', '0', '4', '3', 'Z',\n+                    (byte)0xA5, 0x03,           // susec\n+                      0x02, 0x01, 0x02,\n+                    (byte)0xA6, 0x03,           // error-code\n+                      0x02, 0x01, 0x00,\n+                    (byte)0xA7, 0x08,            // crealm\n+                      0x1B, 0x06, 'c', 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xA8, 0x12,           // cname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 'c', 'n', 'a', 'm', 'e',\n+                    (byte)0xA9, 0x07,           // realm\n+                      0x1B, 0x05, 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xAA, 0x12,           // sname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 's', 'n', 'a', 'm', 'e',\n+                    (byte)0xAB, 0x07,           // e-text\n+                      0x1B, 0x5, 'e', 't', 'e', 'x', 't',\n+                    (byte)0xAC, 0x04,           // e-data\n+                      0x04, 0x02, \n+                        0x00, 0x01\n+        } );\n+        \n+        String decoded = StringTools.dumpBytes( stream.array() );\n+        stream.flip();\n+        \n+        KrbErrorContainer container = new KrbErrorContainer();\n+        container.setStream( stream );\n+        \n+        try\n+        {\n+            decoder.decode( stream, container );\n+        }\n+        catch( DecoderException e )\n+        {\n+            fail();\n+        }\n+        \n+        KrbError krbError = container.getKrbError();\n+        \n+        assertEquals( 0, krbError.getCusec() );\n+        \n         int encodedLen = krbError.computeLength();\n         \n         assertEquals( streamLen, encodedLen );\n@@ -124,4 +316,91 @@ public void testDecodeKrbError()\n             fail();\n         }\n     }\n+\n+    @Test\n+    public void testDecodeKrbErrorWithoutCtimeAndCusec()\n+    {\n+        Asn1Decoder decoder = new Asn1Decoder();\n+        \n+        int streamLen = 0x75;\n+        ByteBuffer stream = ByteBuffer.allocate( streamLen );\n+        stream.put( new byte[]\n+        {\n+                0x7E, (byte)0x73,\n+                  0x30, (byte)0x71,\n+                    (byte)0xA0, 0x03,           // pvno\n+                      0x02, 0x01, 0x05,    \n+                    (byte)0xA1, 0x03,           // msg-type\n+                      0x02, 0x01, 0x1E,\n+                      //\n+                      // NO ctime, cusec\n+                      //\n+                    (byte)0xA4, 0x11,           // stime\n+                      0x18, 0xF, '2', '0', '1', '0', '1', '1', '1', '9', '0', '8', '0', '0', '4', '3', 'Z',\n+                    (byte)0xA5, 0x03,           // susec\n+                      0x02, 0x01, 0x02,\n+                    (byte)0xA6, 0x03,           // error-code\n+                      0x02, 0x01, 0x00,\n+                    (byte)0xA7, 0x08,            // crealm\n+                      0x1B, 0x06, 'c', 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xA8, 0x12,           // cname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 'c', 'n', 'a', 'm', 'e',\n+                    (byte)0xA9, 0x07,           // realm\n+                      0x1B, 0x05, 'r', 'e', 'a', 'l', 'm',\n+                    (byte)0xAA, 0x12,           // sname\n+                      0x30, 0x10, \n+                        (byte)0xA0, 0x03,\n+                          0x02, 0x01, 0x00, \n+                        (byte)0xA1, 0x09, \n+                          0x30, 0x07, \n+                            0x1B, 0x05, 's', 'n', 'a', 'm', 'e',\n+                    (byte)0xAB, 0x07,           // e-text\n+                      0x1B, 0x5, 'e', 't', 'e', 'x', 't',\n+                    (byte)0xAC, 0x04,           // e-data\n+                      0x04, 0x02, \n+                        0x00, 0x01\n+        } );\n+        \n+        String decoded = StringTools.dumpBytes( stream.array() );\n+        stream.flip();\n+        \n+        KrbErrorContainer container = new KrbErrorContainer();\n+        container.setStream( stream );\n+        \n+        try\n+        {\n+            decoder.decode( stream, container );\n+        }\n+        catch( DecoderException e )\n+        {\n+            fail();\n+        }\n+        \n+        KrbError krbError = container.getKrbError();\n+        \n+        assertNull( krbError.getcTime() );\n+        assertEquals( 0, krbError.getCusec() );\n+        \n+        int encodedLen = krbError.computeLength();\n+        \n+        assertEquals( streamLen, encodedLen );\n+        \n+        ByteBuffer buffer = ByteBuffer.allocate( streamLen );\n+        try\n+        {\n+            buffer = krbError.encode( buffer );\n+            \n+            assertEquals( decoded, StringTools.dumpBytes( buffer.array() ) );\n+        }\n+        catch( EncoderException e )\n+        {\n+            fail();\n+        }\n+    }\n+\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/b8582178614e3ee4981cbd8c8bc633ff5df40d49/kerberos-codec/src/test/java/org/apache/directory/shared/kerberos/codec/KrbErrorDecoderTest.java",
                "sha": "5cbf45e130d3d704de374ee0142be51bcd0795c8",
                "status": "modified"
            }
        ],
        "message": "o fixed a possible NPE while performing unboxing of cusec value\no added more tests\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1036938 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/8ccf8e83e02540637e5d876937f552826bf28b9d",
        "patched_files": [
            "KrbError.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "KrbErrorDecoderTest.java"
        ]
    },
    "directory-server_bf3befb": {
        "bug_id": "directory-server_bf3befb",
        "commit": "https://github.com/apache/directory-server/commit/bf3befb4fe1952216d6243baa618c3d3e979933f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3befb4fe1952216d6243baa618c3d3e979933f/core-entry/src/main/java/org/apache/directory/server/core/entry/ServerBinaryValue.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-entry/src/main/java/org/apache/directory/server/core/entry/ServerBinaryValue.java?ref=bf3befb4fe1952216d6243baa618c3d3e979933f",
                "deletions": 1,
                "filename": "core-entry/src/main/java/org/apache/directory/server/core/entry/ServerBinaryValue.java",
                "patch": "@@ -370,7 +370,7 @@ public int compareTo( Value<byte[]> value )\n             {\r\n                 Comparator<? super byte[]> comparator = getLdapComparator();\r\n                 \r\n-                if ( comparator == null )\r\n+                if ( comparator != null )\r\n                 {\r\n                     return comparator.compare( getNormalizedValueReference(), binaryValue.getNormalizedValueReference() );\r\n                 }\r",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3befb4fe1952216d6243baa618c3d3e979933f/core-entry/src/main/java/org/apache/directory/server/core/entry/ServerBinaryValue.java",
                "sha": "cd46a65d24e0dd3861bea3df2cb8afc6a005f8b2",
                "status": "modified"
            }
        ],
        "message": "Fixed a potential NPE by inverting a test\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-schema@885290 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/76cdc6d22b401a67279217293a199a646138d00e",
        "patched_files": [
            "ServerBinaryValue.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ServerBinaryValueTest.java"
        ]
    },
    "directory-server_bf3d098": {
        "bug_id": "directory-server_bf3d098",
        "commit": "https://github.com/apache/directory-server/commit/bf3d0982575284c3ae2b5ab19d66be89924c0085",
        "file": [
            {
                "additions": 54,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 7,
                "filename": "core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java",
                "patch": "@@ -489,9 +489,9 @@ public void printTree()\n \n         System.out.println( getRoot() );\n         \n-        visit( getRoot().getRight(), getRoot() );\n+        visit( null, getRoot().getRight(), getRoot() );\n         \n-        visit( getRoot().getLeft(), getRoot() );\n+        visit( null, getRoot().getLeft(), getRoot() );\n     }\n     \n \n@@ -930,7 +930,19 @@ private int getBalance( LinkedAvlNode<K> node )\n     }\n     \n     \n-    private void visit( LinkedAvlNode<K> node, LinkedAvlNode<K> parentNode ) \n+    /**\n+     * Checks that the tree is correct. It must be balanced, and the prev/next\n+     * chain must be equivalent to a depth-first descent on the tree\n+     * \n+     * @return true if the tree is balanced and correct\n+     */\n+    public boolean checkTree()\n+    {\n+        return true;\n+    }\n+    \n+    \n+    private void visit( StringBuilder sb, LinkedAvlNode<K> node, LinkedAvlNode<K> parentNode ) \n     {\n         if( node == null )\n         {\n@@ -944,10 +956,18 @@ private void visit( LinkedAvlNode<K> node, LinkedAvlNode<K> parentNode )\n         \n         for( int i=0; i < parentNode.getDepth(); i++ )\n         {\n-            System.out.print( \"|  \" );\n+            if ( sb != null )\n+            {\n+                sb.append( \"|  \" );\n+            }\n+            else\n+            {\n+                System.out.print( \"|  \" );\n+            }\n         }\n \n         String type = \"\";\n+        \n         if( node == parentNode.left )\n         {\n             type = \"L\";\n@@ -957,16 +977,43 @@ else if( node == parentNode.right )\n             type = \"R\";\n         }\n         \n-        System.out.println( \"|--\" + node + type );\n+        if ( sb != null )\n+        {\n+            sb.append( \"|--\" ).append( node ).append( type ).append( '\\n' );\n+        }\n+        else\n+        {\n+            System.out.println( \"|--\" + node + type );\n+        }\n         \n         if ( node.getRight() != null )\n         {\n-            visit( node.getRight(), node );\n+            visit( sb, node.getRight(), node );\n         }\n         \n         if( node.getLeft() != null )\n         {\n-            visit( node.getLeft(), node );\n+            visit( sb, node.getLeft(), node );\n+        }\n+    }\n+    \n+    public String toString()\n+    {\n+        if( isEmpty() )\n+        {\n+            return \"[]\";\n         }\n+        \n+        getRoot().setDepth( 0 );\n+\n+        StringBuilder sb = new StringBuilder();\n+        \n+        sb.append( getRoot() );\n+        \n+        visit( sb, getRoot().getRight(), getRoot() );\n+        \n+        visit( sb, getRoot().getLeft(), getRoot() );\n+        \n+        return sb.toString();\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTree.java",
                "sha": "3c4e1b3af635e192d3dff67cd7c020f59caf0547",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTreeMarshaller.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTreeMarshaller.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 38,
                "filename": "core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTreeMarshaller.java",
                "patch": "@@ -27,6 +27,12 @@\n import java.io.IOException;\n import java.util.Comparator;\n \n+import org.apache.directory.shared.ldap.util.StringTools;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import sun.reflect.Reflection;\n+\n \n /**\n  * Class to serialize the AvlTree node data.\n@@ -37,6 +43,9 @@\n @SuppressWarnings(\"unchecked\")\n public class AvlTreeMarshaller<E> implements Marshaller<AvlTree<E>>\n {\n+    /** static logger */\n+    private static final Logger LOG = LoggerFactory.getLogger( AvlTreeMarshaller.class );\n+\n     /** used for serialized form of an empty AvlTree */\n     private static final byte[] EMPTY_TREE = new byte[1];\n \n@@ -104,6 +113,18 @@ public AvlTreeMarshaller( Comparator<E> comparator )\n             writeTree( tree.getRoot(), out );\n             out.flush();\n             data = byteStream.toByteArray();\n+            \n+            // Try to deserialize, just to see\n+            try\n+            {\n+                deserialize( data );\n+            }\n+            catch (NullPointerException npe )\n+            {\n+                System.out.println( \"Bad serialization, tree : [\" + StringTools.dumpBytes( data ) + \"]\");\n+                throw npe;\n+            }\n+\n             out.close();\n         }\n         catch( IOException e )\n@@ -164,49 +185,59 @@ private void writeTree( LinkedAvlNode<E> node, DataOutputStream out ) throws IOE\n      */\n     public AvlTree<E> deserialize( byte[] data ) throws IOException\n     {\n-        if ( data == null || data.length == 0 )\n-        {\n-            throw new IOException( \"Null or empty data array is invalid.\" );\n-        }\n+        LOG.debug( \"Deserializing the tree, called by {}\", Reflection.getCallerClass( 2 ).getSimpleName() );\n \n-        if ( data.length == 1 && data[0] == 0 )\n-        {\n-            return new AvlTree<E>( comparator );\n-        }\n-\n-        ByteArrayInputStream bin = new ByteArrayInputStream( data );\n-        DataInputStream din = new DataInputStream( bin );\n-        \n-        byte startByte = din.readByte();\n-        \n-        if( startByte != 0 )\n-        {\n-            throw new IOException(\"wrong AvlTree serialized data format\");\n-        }\n-        \n-        int size = din.readInt();\n-        \n-        LinkedAvlNode[] nodes = new LinkedAvlNode[ size ];\n-        LinkedAvlNode<E> root = readTree( din, null, nodes );\n-        \n-        AvlTree<E> tree = new AvlTree<E>( comparator );\n-        \n-        tree.setRoot( root );\n-        \n-        tree.setFirst( nodes[0] );\n-        \n-        if( nodes.length >= 1 )\n+        try\n         {\n-            tree.setLast( nodes[ nodes.length - 1 ] );\n+            if ( data == null || data.length == 0 )\n+            {\n+                throw new IOException( \"Null or empty data array is invalid.\" );\n+            }\n+    \n+            if ( data.length == 1 && data[0] == 0 )\n+            {\n+                return new AvlTree<E>( comparator );\n+            }\n+    \n+            ByteArrayInputStream bin = new ByteArrayInputStream( data );\n+            DataInputStream din = new DataInputStream( bin );\n+            \n+            byte startByte = din.readByte();\n+            \n+            if( startByte != 0 )\n+            {\n+                throw new IOException(\"wrong AvlTree serialized data format\");\n+            }\n+            \n+            int size = din.readInt();\n+            \n+            LinkedAvlNode[] nodes = new LinkedAvlNode[ size ];\n+            LinkedAvlNode<E> root = readTree( din, null, nodes );\n+            \n+            AvlTree<E> tree = new AvlTree<E>( comparator );\n+            \n+            tree.setRoot( root );\n+            \n+            tree.setFirst( nodes[0] );\n+            \n+            if( nodes.length >= 1 )\n+            {\n+                tree.setLast( nodes[ nodes.length - 1 ] );\n+            }\n+            \n+            for( int i = 0; i < nodes.length - 1; i++ )\n+            {\n+                nodes[ i ].setNext( nodes[ i + 1] );\n+                nodes[ i + 1].setPrevious( nodes[ i ] );\n+            }\n+    \n+            return tree;\n         }\n-        \n-        for( int i = 0; i < nodes.length - 1; i++ )\n+        catch (NullPointerException npe )\n         {\n-            nodes[ i ].setNext( nodes[ i + 1] );\n-            nodes[ i + 1].setPrevious( nodes[ i ] );\n+            System.out.println( \"Bad tree : [\" + StringTools.dumpBytes( data ) + \"]\");\n+            throw npe;\n         }\n-\n-        return tree;\n     }\n \n     ",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/main/java/org/apache/directory/server/core/avltree/AvlTreeMarshaller.java",
                "sha": "c55aaff71366449970f755f49d20a19c37784d08",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/test/java/org/apache/directory/server/core/avltree/AvlTreeTest.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/test/java/org/apache/directory/server/core/avltree/AvlTreeTest.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 0,
                "filename": "core-avl/src/test/java/org/apache/directory/server/core/avltree/AvlTreeTest.java",
                "patch": "@@ -490,4 +490,42 @@ private void traverse( LinkedAvlNode<Integer> startNode, List<LinkedAvlNode<Inte\n       }\n       //3. post-order\n     }\n+\n+\n+    @Test\n+    public void testRemoveEmptyTree()\n+    {\n+        tree.remove( null );\n+        \n+        assertEquals( 0, tree.getSize() );\n+\n+        tree.remove( 1 );\n+        \n+        assertEquals( 0, tree.getSize() );\n+    }\n+\n+\n+    @Test\n+    public void testRemoveOneNode()\n+    {\n+        tree.insert( 1 );\n+        assertEquals( 1, tree.getSize() );\n+        \n+        tree.remove( 1 );\n+        assertEquals( 0, tree.getSize() );\n+    }\n+\n+\n+    @Test\n+    public void testRemoveOneNodeWithRight()\n+    {\n+        tree.insert( 1 );\n+        tree.insert( 2 );\n+        assertEquals( 2, tree.getSize() );\n+        assertEquals( \"1,2\", getInorderForm() );\n+        \n+        tree.remove( 1 );\n+        assertEquals( 1, tree.getSize() );\n+        assertEquals( Integer.valueOf( 2 ), tree.getRoot().getKey() );\n+    }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/core-avl/src/test/java/org/apache/directory/server/core/avltree/AvlTreeTest.java",
                "sha": "13a950151572ba50c6a7e3848abbb815b1dcf525",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "patch": "@@ -265,8 +265,8 @@ public void add( AddOperationContext opContext ) throws Exception\n             pop();\n         }\n \n-        LOG.debug( \"<< AddOperation successfull\" );\n-        LOG_CHANGES.debug( \"<< AddOperation successfull\" );\n+        LOG.debug( \"<< AddOperation successful\" );\n+        LOG_CHANGES.debug( \"<< AddOperation successful\" );\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "sha": "b24e8e036180e035cef03ad9fa018f071b8bd029",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 3,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "patch": "@@ -1160,9 +1160,12 @@ private void addAliasIndices( Long aliasId, LdapDN aliasDn, String aliasTarget )\n \n     /**\n      * {@inheritDoc}\n+     * TODO : We should be able to revert all the changes made to index \n+     * if something went wrong. Also the index should auto-repair : if\n+     * an entry does not exist in the Master table, then the index must be updated to reflect this.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public void add( ServerEntry entry ) throws Exception\n+    public synchronized void add( ServerEntry entry ) throws Exception\n     {\n         if ( entry instanceof ClonedServerEntry )\n         {\n@@ -1210,7 +1213,6 @@ public void add( ServerEntry entry ) throws Exception\n \n         // Start adding the system userIndices\n         // Why bother doing a lookup if this is not an alias.\n-\n         // First, the ObjectClass index\n         for ( Value<?> value : objectClass )\n         {\n@@ -1306,7 +1308,7 @@ public ServerEntry lookup( Long id ) throws Exception\n     /**\n      * {@inheritDoc}\n      */\n-    public void delete( Long id ) throws Exception\n+    public synchronized void delete( Long id ) throws Exception\n     {\n         ServerEntry entry = lookup( id );\n         Long parentId = getParentId( id );",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmStore.java",
                "sha": "ab5bc1da98432555854e55c1a0bea5058f095f23",
                "status": "modified"
            },
            {
                "additions": 248,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "changes": 382,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 134,
                "filename": "jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "patch": "@@ -35,7 +35,10 @@\n import org.apache.directory.shared.ldap.cursor.Cursor;\n import org.apache.directory.shared.ldap.cursor.EmptyCursor;\n import org.apache.directory.shared.ldap.cursor.SingletonCursor;\n+import org.apache.directory.shared.ldap.util.StringTools;\n import org.apache.directory.shared.ldap.util.SynchronizedLRUMap;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n import java.io.IOException;\n import java.util.Comparator;\n@@ -50,30 +53,36 @@\n  */\n public class JdbmTable<K,V> implements Table<K,V>\n {\n-    private static final byte[] EMPTY_BYTES = new byte[0];\n+    /** A logger for this class */\n+    private static final Logger LOG = LoggerFactory.getLogger( JdbmTable.class.getSimpleName() );\n \n     /** the key to store and retreive the count information */\n     private static final String SZSUFFIX = \"_btree_sz\";\n \n     /** the name of this table */\n     private final String name;\n+\n     /** the JDBM record manager for the file this table is managed in */\n     private final RecordManager recMan;\n+    \n     /** whether or not this table allows for duplicates */\n     private final boolean allowsDuplicates;\n+    \n     /** a key comparator for the keys in this Table */\n     private final Comparator<K> keyComparator;\n+    \n     /** a value comparator for the values in this Table */\n     private final Comparator<V> valueComparator;\n \n     /** the current count of entries in this Table */\n     private int count;\n+    \n     /** the wrappedCursor JDBM btree used in this Table */\n     private BTree bt;\n \n-\n     /** the limit at which we start using btree redirection for duplicates */\n     private int numDupLimit = JdbmIndex.DEFAULT_DUPLICATE_LIMIT;\n+\n     /** a cache of duplicate BTrees */\n     private final Map<Long, BTree> duplicateBtrees;\n \n@@ -388,14 +397,14 @@ public V get( K key ) throws Exception\n         jdbm.helper.Tuple tuple = new jdbm.helper.Tuple();\n         tree.browse().getNext( tuple );\n         //noinspection unchecked\n+        \n         return ( V ) tuple.getKey();\n     }\n \n     \n     /**\n      * @see Table#hasGreaterOrEqual(Object,Object)\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public boolean hasGreaterOrEqual( K key, V val ) throws IOException\n     {\n         if ( key == null )\n@@ -410,6 +419,7 @@ public boolean hasGreaterOrEqual( K key, V val ) throws IOException\n         }\n \n         DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n+        \n         if ( values.isAvlTree() )\n         {\n             AvlTree<V> set = values.getAvlTree();\n@@ -419,14 +429,14 @@ public boolean hasGreaterOrEqual( K key, V val ) throws IOException\n \n         // last option is to try a btree with BTreeRedirects\n         BTree tree = getBTree( values.getBTreeRedirect() );\n+        \n         return tree.size() != 0 && btreeHas( tree, val, true );\n     }\n \n \n     /**\n      * @see Table#hasLessOrEqual(Object,Object)\n      */\n-    @SuppressWarnings(\"unchecked\")\n     public boolean hasLessOrEqual( K key, V val ) throws IOException\n     {\n         if ( key == null )\n@@ -441,6 +451,7 @@ public boolean hasLessOrEqual( K key, V val ) throws IOException\n         }\n \n         DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n+        \n         if ( values.isAvlTree() )\n         {\n             AvlTree<V> set = values.getAvlTree();\n@@ -450,6 +461,7 @@ public boolean hasLessOrEqual( K key, V val ) throws IOException\n \n         // last option is to try a btree with BTreeRedirects\n         BTree tree = getBTree( values.getBTreeRedirect() );\n+        \n         return tree.size() != 0 && btreeHas( tree, val, false );\n     }\n \n@@ -547,6 +559,7 @@ public boolean has( K key, V value ) throws IOException\n         }\n         \n         DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n+        \n         if ( values.isAvlTree() )\n         {\n             return values.getAvlTree().find( value ) != null;\n@@ -570,58 +583,92 @@ public boolean has( K key ) throws IOException\n      * java.lang.Object)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public void put( K key, V value ) throws Exception\n+    public synchronized void put( K key, V value ) throws Exception\n     {\n-        if ( value == null || key == null )\n+        try\n         {\n-            throw new IllegalArgumentException( \"null for key or value is not valid\" );\n-        }\n-        \n-        V replaced;\n-\n-        if ( ! allowsDuplicates )\n-        {\n-            replaced = ( V ) bt.insert( key, value, true );\n-\n-            if ( null == replaced )\n+            if ( LOG.isDebugEnabled() )\n             {\n-                count++;\n+                LOG.debug( \"---> Add {} = {}\", name, key );\n             }\n \n-            return;\n-        }\n-        \n-        DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n-        if ( values.isAvlTree() )\n-        {\n-            AvlTree<V> set = values.getAvlTree();\n-            replaced = set.insert( value );\n+            if ( ( value == null ) || ( key == null ) )\n+            {\n+                throw new IllegalArgumentException( \"null for key or value is not valid\" );\n+            }\n             \n-            if ( replaced != null )// if the value already present returns the same value\n+            V replaced;\n+    \n+            if ( ! allowsDuplicates )\n             {\n+                replaced = ( V ) bt.insert( key, value, true );\n+    \n+                if ( null == replaced )\n+                {\n+                    count++;\n+                }\n+    \n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Add ONE {} = {}\", name, key );\n+                }\n+                \n+                return;\n+            }\n+            \n+            DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n+            \n+            if ( values.isAvlTree() )\n+            {\n+                AvlTree<V> set = values.getAvlTree();\n+                replaced = set.insert( value );\n+                \n+                if ( replaced != null )// if the value already present returns the same value\n+                {\n+                    return;\n+                }\n+                if ( set.getSize() > numDupLimit )\n+                {\n+                    BTree tree = convertToBTree( set );\n+                    BTreeRedirect redirect = new BTreeRedirect( tree.getRecid() );\n+                    bt.insert( key, BTreeRedirectMarshaller.INSTANCE.serialize( redirect ), true );\n+                    \n+                    if ( LOG.isDebugEnabled() )\n+                    {\n+                        LOG.debug( \"<--- Add new BTREE {} = {}\", name, key );\n+                    }\n+                }\n+                else\n+                {\n+                    bt.insert( key, marshaller.serialize( set ), true );\n+                    \n+                    if ( LOG.isDebugEnabled() )\n+                    {\n+                        LOG.debug( \"<--- Add AVL {} = {}\", name, key );\n+                    }\n+                }\n+    \n+                count++;\n                 return;\n             }\n-            if ( set.getSize() > numDupLimit )\n+            \n+            BTree tree = getBTree( values.getBTreeRedirect() );\n+            replaced = ( V ) tree.insert( value, StringTools.EMPTY_BYTES, true );\n+            \n+            if ( replaced == null )\n             {\n-                BTree tree = convertToBTree( set );\n-                BTreeRedirect redirect = new BTreeRedirect( tree.getRecid() );\n-                bt.insert( key, BTreeRedirectMarshaller.INSTANCE.serialize( redirect ), true );\n+                count++;\n             }\n-            else\n+            \n+            if ( LOG.isDebugEnabled() )\n             {\n-                bt.insert( key, marshaller.serialize( set ), true );\n+                LOG.debug( \"<--- Add BTREE {} = {}\", name, key );\n             }\n-\n-            count++;\n-            return;\n         }\n-        \n-        BTree tree = getBTree( values.getBTreeRedirect() );\n-        replaced = ( V ) tree.insert( value, EMPTY_BYTES, true );\n-        \n-        if ( replaced == null )\n+        catch ( Exception e )\n         {\n-            count++;\n+            LOG.error( \"Error while adding \" + key + \" on table \" + name, e );\n+            throw e;\n         }\n     }\n     \n@@ -631,110 +678,187 @@ public void put( K key, V value ) throws Exception\n      * java.lang.Object)\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public void remove( K key, V value ) throws IOException\n+    public synchronized void remove( K key, V value ) throws IOException\n     {\n-        if ( key == null )\n+        try\n         {\n-            return;\n-        }\n-\n-        if ( ! allowsDuplicates )\n-        {\n-            V oldValue = ( V ) bt.find( key );\n-        \n-            // Remove the value only if it is the same as value.\n-            if ( ( oldValue != null ) && oldValue.equals( value ) )\n+            if ( LOG.isDebugEnabled() )\n+            {\n+                LOG.debug( \"---> Remove \" + name + \" = \" + key + \", \" + value );\n+            }\n+            \n+            if ( key == null )\n             {\n-                bt.remove( key );\n-                count--;\n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Remove NULL key \" + name );\n+                }\n                 return;\n             }\n-\n-            return;\n-        }\n-\n-        DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n-        \n-        if ( values.isAvlTree() )\n-        {\n-            AvlTree<V> set = values.getAvlTree();\n-\n-            // If removal succeeds then remove if set is empty else replace it\n-            if ( set.remove( value ) != null )\n+    \n+            if ( ! allowsDuplicates )\n             {\n-                if ( set.isEmpty() )\n+                V oldValue = ( V ) bt.find( key );\n+            \n+                // Remove the value only if it is the same as value.\n+                if ( ( oldValue != null ) && oldValue.equals( value ) )\n                 {\n                     bt.remove( key );\n+                    count--;\n+                    \n+                    if ( LOG.isDebugEnabled() )\n+                    {\n+                        LOG.debug( \"<--- Remove ONE \" + name + \" = \" + key + \", \" + value );\n+                    }\n+                    \n+                    return;\n                 }\n-                else\n+    \n+                return;\n+            }\n+    \n+            DupsContainer<V> values = getDupsContainer( ( byte[] ) bt.find( key ) );\n+            \n+            if ( values.isAvlTree() )\n+            {\n+                AvlTree<V> set = values.getAvlTree();\n+    \n+                // If removal succeeds then remove if set is empty else replace it\n+                if ( set.remove( value ) != null )\n                 {\n-                    bt.insert( key, marshaller.serialize( set ), true );\n+                    if ( set.isEmpty() )\n+                    {\n+                        bt.remove( key );\n+                    }\n+                    else\n+                    {\n+                        bt.insert( key, marshaller.serialize( set ), true );\n+                    }\n+                    count--;\n+\n+                    if ( LOG.isDebugEnabled() )\n+                    {\n+                        LOG.debug( \"<--- Remove AVL \" + name + \" = \" + key + \", \" + value );\n+                    }\n+                    \n+                    return;\n                 }\n-                count--;\n+    \n                 return;\n             }\n-\n-            return;\n-        }\n-\n-        // if the number of duplicates falls below the numDupLimit value\n-        BTree tree = getBTree( values.getBTreeRedirect() );\n-        \n-        if ( removeDupFromBTree( tree, value ) )\n-        {\n-            /*\n-             * If we drop below the duplicate limit then we revert from using\n-             * a Jdbm BTree to using an in memory AvlTree.\n-             */\n-            if ( tree.size() <= numDupLimit )\n+    \n+            // if the number of duplicates falls below the numDupLimit value\n+            BTree tree = getBTree( values.getBTreeRedirect() );\n+            \n+            if ( tree.find( value ) != null )\n             {\n-                AvlTree<V> avlTree = convertToAvlTree( tree );\n-                bt.insert( key, marshaller.serialize( avlTree ), true );\n-                recMan.delete( tree.getRecid() );\n+                if ( tree.remove( value ) != null )\n+                {\n+                    /*\n+                     * If we drop below the duplicate limit then we revert from using\n+                     * a Jdbm BTree to using an in memory AvlTree.\n+                     */\n+                    if ( tree.size() <= numDupLimit )\n+                    {\n+                        AvlTree<V> avlTree = convertToAvlTree( tree );\n+                        bt.insert( key, marshaller.serialize( avlTree ), true );\n+                        recMan.delete( tree.getRecid() );\n+                    }\n+                    \n+                    count--;\n+                    \n+                    if ( LOG.isDebugEnabled() )\n+                    {\n+                        LOG.debug( \"<--- Remove BTREE \" + name + \" = \" + key + \", \" + value );\n+                    }\n+                    \n+                    return;\n+                }\n             }\n-            \n-            count--;\n-            return;\n+        }\n+        catch ( Exception e )\n+        {\n+            LOG.error( \"Error while adding \" + key + \", \" + value + \" on table \" + name, e );\n         }\n     }\n \n \n     /**\n      * @see Table#remove(Object)\n      */\n-    public void remove( K key ) throws IOException\n+    public synchronized void remove( K key ) throws IOException\n     {\n-        if ( key == null )\n-        {\n-            return;\n-        }\n-\n-        Object returned = bt.remove( key );\n-\n-        if ( null == returned )\n+        try\n         {\n-            return;\n-        }\n-\n-        if ( ! allowsDuplicates )\n-        {\n-            this.count--;\n-            return;\n-        }\n-\n-        byte[] serialized = ( byte[] ) returned;\n-\n-        if ( BTreeRedirectMarshaller.isRedirect( serialized ) )\n-        {\n-            BTree tree = getBTree( BTreeRedirectMarshaller.INSTANCE.deserialize( serialized ) );\n-            this.count -= tree.size();\n-            return;\n+            if ( LOG.isDebugEnabled() )\n+            {\n+                LOG.debug( \"---> Remove {} = {}\", name, key );\n+            }\n+            \n+            if ( key == null )\n+            {\n+                return;\n+            }\n+    \n+            Object returned = bt.remove( key );\n+    \n+            if ( null == returned )\n+            {\n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Remove AVL {} = {} (not found)\", name, key );\n+                }\n+                \n+                return;\n+            }\n+    \n+            if ( ! allowsDuplicates )\n+            {\n+                this.count--;\n+             \n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Remove ONE {} = {}\", name, key );\n+                }\n+                \n+                return;\n+            }\n+    \n+            byte[] serialized = ( byte[] ) returned;\n+    \n+            if ( BTreeRedirectMarshaller.isRedirect( serialized ) )\n+            {\n+                BTree tree = getBTree( BTreeRedirectMarshaller.INSTANCE.deserialize( serialized ) );\n+                this.count -= tree.size();\n+                \n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Remove BTree {} = {}\", name, key );\n+                }\n+                \n+                return;\n+            }\n+            else\n+            {\n+                AvlTree<V> set = marshaller.deserialize( serialized );\n+                this.count -= set.getSize();\n+    \n+                if ( LOG.isDebugEnabled() )\n+                {\n+                    LOG.debug( \"<--- Remove AVL {} = {}\", name, key );\n+                }\n+                \n+                return;\n+            }\n         }\n-        else\n+        catch ( Exception e )\n         {\n-            AvlTree<V> set = marshaller.deserialize( serialized );\n-            this.count -= set.getSize();\n-            return;\n+            LOG.error(  \"Exception while removing \" + key + \" from index \" + name, e );\n+            \n+            if ( e instanceof IOException )\n+            {\n+                throw (IOException)e;\n+            }\n         }\n     }\n \n@@ -833,7 +957,7 @@ public synchronized void close() throws IOException\n      *\n      * @throws IOException if errors are encountered on the flush\n      */\n-    public void sync() throws IOException\n+    public synchronized void sync() throws IOException\n     {\n         long recId = recMan.getNamedObject( name + SZSUFFIX );\n         recMan.update( recId, count );\n@@ -849,8 +973,6 @@ public void sync() throws IOException\n     // ------------------------------------------------------------------------\n     // Private/Package Utility Methods \n     // ------------------------------------------------------------------------\n-\n-\n     DupsContainer<V> getDupsContainer( byte[] serialized ) throws IOException\n     {\n         if ( serialized == null )\n@@ -928,23 +1050,13 @@ private boolean btreeHas( BTree tree, V key, boolean isGreaterThan ) throws IOEx\n     }\n \n \n-    private boolean removeDupFromBTree( BTree tree, V value ) throws IOException\n-    {\n-        Object removed = null;\n-        if ( tree.find( value ) != null )\n-        {\n-            removed = tree.remove( value );\n-        }\n-        return null != removed;\n-    }\n-\n-\n     @SuppressWarnings(\"unchecked\")\n     private AvlTree<V> convertToAvlTree( BTree bTree ) throws IOException\n     {\n         AvlTree<V> avlTree = new AvlTree<V>( valueComparator );\n         TupleBrowser browser = bTree.browse();\n         jdbm.helper.Tuple tuple = new jdbm.helper.Tuple();\n+        \n         while ( browser.getNext( tuple ) )\n         {\n             avlTree.insert( ( V ) tuple.getKey() );\n@@ -969,10 +1081,12 @@ private BTree convertToBTree( AvlTree<V> avlTree ) throws Exception\n \n         Cursor<V> keys = new AvlTreeCursor<V>( avlTree );\n         keys.beforeFirst();\n+        \n         while ( keys.next() )\n         {\n-            bTree.insert( keys.get(), EMPTY_BYTES, true );\n+            bTree.insert( keys.get(), StringTools.EMPTY_BYTES, true );\n         }\n+        \n         return bTree;\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm-store/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/JdbmTable.java",
                "sha": "51db2a4a8429b77a2a8b89b76d3c71abc601a362",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm/src/main/java/jdbm/recman/CacheRecordManager.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm/src/main/java/jdbm/recman/CacheRecordManager.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 0,
                "filename": "jdbm/src/main/java/jdbm/recman/CacheRecordManager.java",
                "patch": "@@ -267,6 +267,14 @@ public synchronized Object fetch( long recid, Serializer serializer )\n                 throw new WrappedRuntimeException( except );\n             }\n         }\n+        \n+        if ( entry._obj instanceof byte[] )\n+        {\n+            byte[] copy = new byte[((byte[])entry._obj).length];\n+            System.arraycopy( entry._obj, 0, copy, 0, ((byte[])entry._obj).length );\n+            return copy;\n+        }\n+        \n         return entry._obj;\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/jdbm/src/main/java/jdbm/recman/CacheRecordManager.java",
                "sha": "4d2a0af53b21fa1e5ed7bb5d71e5d63ec2b81a3f",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/directory-server/blob/bf3d0982575284c3ae2b5ab19d66be89924c0085/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/LaunchDiagnosticUiHandler.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/LaunchDiagnosticUiHandler.java?ref=bf3d0982575284c3ae2b5ab19d66be89924c0085",
                "deletions": 9,
                "filename": "protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/LaunchDiagnosticUiHandler.java",
                "patch": "@@ -104,15 +104,24 @@ public void handleExtendedOperation( LdapSession requestor, InternalExtendedRequ\n             \n             if ( partition instanceof BTreePartition )\n             {\n-                BTreePartition btPartition = ( BTreePartition ) partition;\n-                PartitionFrame frame = new PartitionFrame( btPartition, service.getRegistries() );\n-                Point pos = getCenteredPosition( frame );\n-                pos.y = launchedWindowCount * 20 + pos.y;\n-                double multiplier = getAspectRatio() * 20.0;\n-                pos.x = ( int ) ( launchedWindowCount * multiplier ) + pos.x;\n-                frame.setLocation( pos );\n-                frame.setVisible( true );\n-                launchedWindowCount++;\n+                try\n+                {\n+                    BTreePartition btPartition = ( BTreePartition ) partition;\n+                    // TODO : If a partition does not have an initial entry associated, we wil:\n+                    // get a NPE : this has to be fixed.\n+                    PartitionFrame frame = new PartitionFrame( btPartition, service.getRegistries() );\n+                    Point pos = getCenteredPosition( frame );\n+                    pos.y = launchedWindowCount * 20 + pos.y;\n+                    double multiplier = getAspectRatio() * 20.0;\n+                    pos.x = ( int ) ( launchedWindowCount * multiplier ) + pos.x;\n+                    frame.setLocation( pos );\n+                    frame.setVisible( true );\n+                    launchedWindowCount++;\n+                }\n+                catch ( Exception e )\n+                {\n+                    // Continue\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/bf3d0982575284c3ae2b5ab19d66be89924c0085/protocol-ldap/src/main/java/org/apache/directory/server/ldap/handlers/extended/LaunchDiagnosticUiHandler.java",
                "sha": "37581bd51a8937d909896eba3e27d2b735d738d0",
                "status": "modified"
            }
        ],
        "message": "o Injected Kiran's patch to move AVL serialization inside JDBM\no Added synchronization in JDBMStore for modification operations and sync()\no The JDBM byte buffers are copied before being returned to the caller, to avoid a modification \nmade on a reference\no Fixed some double update of the oneLevel index (no need to add a (id,id) entry)\no When we can't find the entry, instead of a NPE, an error 32 is generated (NO_SUCH_OBJECT)\no Minor cleanup in JdbmTable\no Added some logs in JdbmTable\no Added some traces if the AVL Tree deserializer detect some bad tree\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@792502 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/f383684370acba67e6fee21ce988ee254457fbad",
        "patched_files": [
            "AvlTreeMarshaller.java",
            "LaunchDiagnosticUiHandler.java",
            "JdbmTable.java",
            "CacheRecordManager.java",
            "DefaultOperationManager.java",
            "JdbmStore.java",
            "AvlTree.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "AvlTreeTest.java",
            "AvlTreeMarshallerTest.java",
            "JdbmStoreTest.java"
        ]
    },
    "directory-server_c43b603": {
        "bug_id": "directory-server_c43b603",
        "commit": "https://github.com/apache/directory-server/commit/c43b60334bef4dbf7fd1e535a3f187537fa7465d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/DirectoryService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/DirectoryService.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/DirectoryService.java",
                "patch": "@@ -36,6 +36,7 @@\n import org.apache.directory.server.core.schema.SchemaService;\n import org.apache.directory.shared.ldap.csn.Csn;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.ldif.LdifEntry;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n@@ -196,7 +197,7 @@\n      *\n      * @return a logical session as a specific user\n      */\n-    CoreSession getSession( DN principalDn, byte[] credentials ) throws Exception;\n+    CoreSession getSession( DN principalDn, byte[] credentials ) throws LdapException;\n \n     \n     /**",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/DirectoryService.java",
                "sha": "c0bfa32cab1557688062d04bb264824e60e885f6",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 2,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "patch": "@@ -78,6 +78,7 @@\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.name.RDN;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n+import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -939,11 +940,14 @@ public BindResponse bind( DN name, String credentials ) throws LdapException, IO\n     {\n         try\n         {\n-            setSession( directoryService.getSession( name, credentials.getBytes() ) );\n+            byte[] credBytes = ( credentials == null ? StringTools.EMPTY_BYTES : StringTools.getBytesUtf8( credentials ) );\n+\n+            setSession( directoryService.getSession( name, credBytes ) );\n         }\n-        catch( Exception e )\n+        catch ( LdapException e )\n         {\n             LOG.warn( e.getMessage(), e );\n+            throw e;\n         }\n         \n         return null;",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/LdapCoreSessionConnection.java",
                "sha": "df9fccfd6a2d73d3acf1453db976c9eeb2a0c52c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/OperationManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/OperationManager.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/OperationManager.java",
                "patch": "@@ -42,6 +42,7 @@\n import org.apache.directory.server.core.interceptor.context.SearchOperationContext;\n import org.apache.directory.server.core.interceptor.context.UnbindOperationContext;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.name.DN;\n \n \n@@ -147,7 +148,7 @@\n     /**\n      * TODO document after determining if this method should be here.\n      */\n-    void bind( BindOperationContext opContext ) throws Exception;\n+    void bind( BindOperationContext opContext ) throws LdapException;\n \n     \n     /**",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/OperationManager.java",
                "sha": "a1a964a2a7135416c2cbc64a8521f0b9088a03b4",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 3,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "patch": "@@ -58,6 +58,7 @@\n import org.apache.directory.server.i18n.I18n;\n import org.apache.directory.shared.ldap.constants.SchemaConstants;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.name.DN;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -770,7 +771,7 @@ public void add( AddOperationContext opContext ) throws Exception\n     }\n \n \n-    public void bind( BindOperationContext opContext ) throws Exception\n+    public void bind( BindOperationContext opContext ) throws LdapException\n     {\n         Element node = getStartingEntry();\n         Interceptor head = node.interceptor;\n@@ -781,9 +782,9 @@ public void bind( BindOperationContext opContext ) throws Exception\n         {\n             head.bind( next, opContext );\n         }\n-        catch ( Exception ne )\n+        catch ( LdapException le )\n         {\n-            throw ne;\n+            throw le;\n         }\n         catch ( Throwable e )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorChain.java",
                "sha": "a53e2375cf68d47faa17526deaff33779aab4d03",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorException.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorException.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 9,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorException.java",
                "patch": "@@ -22,6 +22,8 @@\n \n import javax.naming.NamingException;\n \n+import org.apache.directory.shared.ldap.exception.LdapException;\n+\n \n /**\n  * A {@link NamingException} that wraps uncaught runtime exceptions thrown\n@@ -30,7 +32,7 @@\n  * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n  * @version $Rev$, $Date$\n  */\n-public class InterceptorException extends NamingException\n+public class InterceptorException extends LdapException\n {\n     private static final long serialVersionUID = 3258690996517746233L;\n \n@@ -45,8 +47,9 @@\n      *\n      * @param interceptor the Interceptor causing the failure\n      */\n-    public InterceptorException(Interceptor interceptor)\n+    public InterceptorException( Interceptor interceptor )\n     {\n+        super();\n         this.interceptor = interceptor;\n     }\n \n@@ -57,7 +60,7 @@ public InterceptorException(Interceptor interceptor)\n      * @param interceptor the Interceptor causing the failure\n      * @param explanation String explanation of why the Interceptor failed\n      */\n-    public InterceptorException(Interceptor interceptor, String explanation)\n+    public InterceptorException( Interceptor interceptor, String explanation )\n     {\n         super( explanation );\n         this.interceptor = interceptor;\n@@ -70,10 +73,10 @@ public InterceptorException(Interceptor interceptor, String explanation)\n      * @param interceptor the Interceptor causing the failure\n      * @param rootCause   the root cause of this exception\n      */\n-    public InterceptorException(Interceptor interceptor, Throwable rootCause)\n+    public InterceptorException( Interceptor interceptor, Throwable rootCause )\n     {\n-        this( interceptor );\n-        super.setRootCause( rootCause );\n+        super( rootCause );\n+        this.interceptor = interceptor;\n     }\n \n \n@@ -84,10 +87,10 @@ public InterceptorException(Interceptor interceptor, Throwable rootCause)\n      * @param explanation String explanation of why the Interceptor failed\n      * @param rootCause   the root cause of this exception\n      */\n-    public InterceptorException(Interceptor interceptor, String explanation, Throwable rootCause)\n+    public InterceptorException( Interceptor interceptor, String explanation, Throwable rootCause )\n     {\n-        this( interceptor, explanation );\n-        super.setRootCause( rootCause );\n+        super( explanation, rootCause );\n+        this.interceptor = interceptor;\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-api/src/main/java/org/apache/directory/server/core/interceptor/InterceptorException.java",
                "sha": "3115e36b7ef9dab5c1501ac40eab5b8b25de80c0",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java",
                "patch": "@@ -54,6 +54,7 @@\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.name.RDN;\n import org.apache.directory.shared.ldap.schema.registries.Schema;\n+import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -377,8 +378,10 @@ public static LdapConnection getConnectionAs( DirectoryService dirService, Strin\n     public static LdapConnection getConnectionAs( DirectoryService dirService, DN dn, String password ) throws Exception\n     {\n         Object connectionObj = LdapConnectionFactory.getCoreSessionConnection();\n-        ( ( LdapCoreSessionConnection ) connectionObj ).setSession( dirService.getSession( dn, password.getBytes() ) );\n         \n+        byte[] passwdBytes = password == null ? StringTools.EMPTY_BYTES : StringTools.getBytesUtf8( password );\n+        ( ( LdapCoreSessionConnection ) connectionObj ).setSession( dirService.getSession( dn, passwdBytes ) );\n+\n         return ( LdapConnection )connectionObj;\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/main/java/org/apache/directory/server/core/integ/IntegrationUtils.java",
                "sha": "aad26e1f86644d2da31aede1bd466ac3ca4511fd",
                "status": "modified"
            },
            {
                "additions": 80,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/test/java/org/apache/directory/server/core/authn/SimpleAuthenticationIT.java",
                "changes": 111,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/authn/SimpleAuthenticationIT.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 31,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/authn/SimpleAuthenticationIT.java",
                "patch": "@@ -23,9 +23,9 @@\n import static org.apache.directory.server.core.integ.IntegrationUtils.apply;\n import static org.apache.directory.server.core.integ.IntegrationUtils.getConnectionAs;\n import static org.apache.directory.server.core.integ.IntegrationUtils.getUserAddLdif;\n-import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import org.apache.commons.lang.ArrayUtils;\n import org.apache.directory.ldap.client.api.LdapConnection;\n@@ -37,6 +37,7 @@\n import org.apache.directory.server.core.integ.IntegrationUtils;\n import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.After;\n@@ -208,11 +209,17 @@ public void test11InvalidateCredentialCache() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-\n-        // close and try again now with new password (should fail)\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n+\n+        // close and try again now with new password (should succeed)\n         connection.bind( userDn, \"newpwd\" );\n \n         entry = ( ( SearchResultEntry ) connection.lookup( userDn ) ).getEntry();\n@@ -259,11 +266,17 @@ public void testSHA() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n-        // try again now with new password (should be successfull)\n+        // try again now with new password (should be successful)\n         connection.bind( userDn, \"secret\" );\n         assertTrue( connection.isAuthenticated() );\n         entry = ( ( SearchResultEntry ) connection.lookup( userDn ) ).getEntry();\n@@ -301,11 +314,17 @@ public void testSSHA() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n-        // try again now with new password (should be successfull)\n+        // try again now with new password (should be successful)\n         connection.bind( userDn, \"secret\" );\n         entry = ( ( SearchResultEntry ) connection.lookup( userDn ) ).getEntry();\n         assertNotNull( entry );\n@@ -341,9 +360,15 @@ public void testSSHA4BytesSalt() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n         // try again now with new password (should be successful)\n         connection.bind( userDn, \"test123\" );\n@@ -381,11 +406,17 @@ public void testMD5() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n-        // try again now with new password (should be successfull)\n+        // try again now with new password (should be successful)\n         connection.bind( userDn, \"secret\" );\n         entry = ( ( SearchResultEntry ) connection.lookup( userDn ) ).getEntry();\n         assertNotNull( entry );\n@@ -422,9 +453,15 @@ public void testSMD5() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n         // try again now with new password (should be successful)\n         connection.bind( userDn, \"secret\" );\n@@ -462,11 +499,17 @@ public void testCRYPT() throws Exception\n         // close and try with old password (should fail)\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n \n-        // try again now with new password (should be successfull)\n+        // try again now with new password (should be successful)\n         connection.bind( userDn, \"secret\" );\n         entry = ( ( SearchResultEntry ) connection.lookup( userDn ) ).getEntry();\n         assertNotNull( entry );\n@@ -501,8 +544,14 @@ public void testInvalidateCredentialCacheForUpdatingAnotherUsersPassword() throw\n         connection.modify( modReq );\n         connection.close();\n \n-        connection.bind( userDn, \"test\" );\n-        assertFalse( connection.isAuthenticated() );\n-        connection.close();\n+        try\n+        {\n+            connection.bind( userDn, \"test\" );\n+            fail();\n+        }\n+        catch ( LdapException le )\n+        {\n+            connection.close();\n+        }\n     }\n }",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/test/java/org/apache/directory/server/core/authn/SimpleAuthenticationIT.java",
                "sha": "644b91d02570667079c6c706eefb0c97e622d732",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/test/java/org/apache/directory/server/core/operations/bind/SimpleBindIT.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/operations/bind/SimpleBindIT.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 8,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/operations/bind/SimpleBindIT.java",
                "patch": "@@ -40,11 +40,14 @@\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n \n+import org.apache.directory.ldap.client.api.LdapConnection;\n import org.apache.directory.server.core.DirectoryService;\n import org.apache.directory.server.core.integ.AbstractLdapTestUnit;\n import org.apache.directory.server.core.integ.FrameworkRunner;\n+import org.apache.directory.server.core.integ.IntegrationUtils;\n import org.apache.directory.server.core.jndi.CoreContextFactory;\n import org.apache.directory.shared.ldap.constants.JndiPropertyConstants;\n+import org.apache.directory.shared.ldap.exception.LdapUnwillingToPerformException;\n import org.apache.directory.shared.ldap.message.AliasDerefMode;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -85,7 +88,7 @@\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindUserPassword()\n+    public void testSimpleBindAPrincipalAPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -128,7 +131,7 @@ public void testSimpleBindUserPassword()\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindUserBadPassword()\n+    public void testSimpleBindAPrincipalBadPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -167,7 +170,7 @@ public void testSimpleBindUserBadPassword()\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindBadUserPassword()\n+    public void testSimpleBindBadPrincipalAPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -206,7 +209,7 @@ public void testSimpleBindBadUserPassword()\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindUnknowUserPassword()\n+    public void testSimpleBindUnknowPrincipalAPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -247,7 +250,7 @@ public void testSimpleBindUnknowUserPassword()\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindNoUserNoPassword()\n+    public void testSimpleBindNoPrincipalNoPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -258,7 +261,7 @@ public void testSimpleBindNoUserNoPassword()\n         // Bind on the rootDSE\n         env.put( Context.PROVIDER_URL, \"\" );\n \n-        // Authenticate as admin and password \"secret\"\n+        // Authenticate with no principal and no password : this is an anonymous bind\n         env.put( Context.SECURITY_AUTHENTICATION, \"simple\" );\n         env.put( Context.SECURITY_PRINCIPAL, \"\" );\n         env.put( Context.SECURITY_CREDENTIALS, \"\" );\n@@ -325,7 +328,7 @@ public void testSimpleBindNoUserNoPassword()\n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindUserNoPassword()\n+    public void testSimpleBindAPrincipalNoPassword()\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context\n@@ -357,13 +360,47 @@ public void testSimpleBindUserNoPassword()\n     }\n \n \n+    /**\n+     * covers the Unauthenticated case : we should get a UnwillingToPerform error.\n+     * \n+     * @throws Exception on error\n+     */\n+    @Test\n+    public void testSimpleBindAPrincipalNullPassword() throws Exception\n+    {\n+        try\n+        {\n+            LdapConnection connection = IntegrationUtils.getConnectionAs( service, \"uid=admin,ou=system\", null );\n+            \n+            // We should have failed wilh an LdapUnwillingToPerformException\n+            fail();\n+        }\n+        catch ( LdapUnwillingToPerformException lutpe )\n+        {\n+            // expected\n+        }\n+\n+        LdapConnection connection = IntegrationUtils.getConnectionAs( service, \"uid=admin,ou=system\", \"secret\" );\n+\n+        try\n+        {\n+            connection.bind( \"uid=admin,ou=system\", null );\n+            fail();\n+        }\n+        catch ( LdapUnwillingToPerformException lutpe )\n+        {\n+            // expected\n+        }\n+    }\n+\n+\n     /**\n      * not allowed by the server. We should get a invalidCredentials error.\n      * \n      * @throws Exception on error\n      */\n     @Test\n-    public void testSimpleBindNoUserPassword() throws Exception\n+    public void testSimpleBindNoPrincipalAPassword() throws Exception\n     {\n         // We will bind using JNDI\n         // Set up the environment for creating the initial context",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-integ/src/test/java/org/apache/directory/server/core/operations/bind/SimpleBindIT.java",
                "sha": "9722ad84bc24f8ac396d1a573b16efd40c4da82f",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-mock/src/main/java/org/apache/directory/server/core/MockDirectoryService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-mock/src/main/java/org/apache/directory/server/core/MockDirectoryService.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core-mock/src/main/java/org/apache/directory/server/core/MockDirectoryService.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.directory.server.core.schema.SchemaService;\n import org.apache.directory.shared.ldap.csn.Csn;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.ldif.LdifEntry;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n@@ -368,7 +369,7 @@ public CoreSession getSession( LdapPrincipal principal ) throws Exception\n     }\n \n \n-    public CoreSession getSession( DN principalDn, byte[] credentials ) throws Exception\n+    public CoreSession getSession( DN principalDn, byte[] credentials ) throws LdapException\n     {\n         return null;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-mock/src/main/java/org/apache/directory/server/core/MockDirectoryService.java",
                "sha": "202a985b49b4517aee80b5897f8994b712f31857",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-mock/src/main/java/org/apache/directory/server/core/MockOperationManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-mock/src/main/java/org/apache/directory/server/core/MockOperationManager.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core-mock/src/main/java/org/apache/directory/server/core/MockOperationManager.java",
                "patch": "@@ -41,6 +41,7 @@\n import org.apache.directory.server.core.interceptor.context.RenameOperationContext;\n import org.apache.directory.server.core.interceptor.context.SearchOperationContext;\n import org.apache.directory.server.core.interceptor.context.UnbindOperationContext;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.name.DN;\n \n public class MockOperationManager implements OperationManager\n@@ -57,7 +58,7 @@ public void add( AddOperationContext opContext ) throws Exception\n     }\n \n     \n-    public void bind( BindOperationContext opContext ) throws Exception\n+    public void bind( BindOperationContext opContext ) throws LdapException\n     {\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core-mock/src/main/java/org/apache/directory/server/core/MockOperationManager.java",
                "sha": "718b240f34a209b61c9165bef8e1f06cd3bc2dce",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 2,
                "filename": "core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "patch": "@@ -660,8 +660,7 @@ public CoreSession getSession( LdapPrincipal principal )\n     }\n     \n     \n-    public CoreSession getSession( DN principalDn, byte[] credentials ) \n-        throws Exception\n+    public CoreSession getSession( DN principalDn, byte[] credentials ) throws LdapException\n     {\n         if ( ! started )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/main/java/org/apache/directory/server/core/DefaultDirectoryService.java",
                "sha": "413513c3a68dd9f4855a35bbecf87f3724412818",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "patch": "@@ -53,6 +53,7 @@\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n import org.apache.directory.shared.ldap.entry.Value;\n import org.apache.directory.shared.ldap.exception.LdapAffectMultipleDsaException;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.exception.LdapInvalidDnException;\n import org.apache.directory.shared.ldap.exception.LdapPartialResultException;\n import org.apache.directory.shared.ldap.exception.LdapReferralException;\n@@ -271,7 +272,7 @@ public void add( AddOperationContext opContext ) throws Exception\n     /**\n      * {@inheritDoc}\n      */\n-    public void bind( BindOperationContext opContext ) throws Exception\n+    public void bind( BindOperationContext opContext ) throws LdapException\n     {\n         LOG.debug( \">> BindOperation : {}\", opContext );\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/main/java/org/apache/directory/server/core/DefaultOperationManager.java",
                "sha": "e1345de307140e06f1438a3c4f4190598212e229",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/test/java/org/apache/directory/server/core/authz/support/MaxImmSubFilterTest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/java/org/apache/directory/server/core/authz/support/MaxImmSubFilterTest.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 3,
                "filename": "core/src/test/java/org/apache/directory/server/core/authz/support/MaxImmSubFilterTest.java",
                "patch": "@@ -86,8 +86,9 @@\n import org.apache.directory.shared.ldap.cursor.Cursor;\n import org.apache.directory.shared.ldap.cursor.CursorIterator;\n import org.apache.directory.shared.ldap.entry.DefaultEntry;\n-import org.apache.directory.shared.ldap.entry.Modification;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.entry.Modification;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.ldif.LdifEntry;\n import org.apache.directory.shared.ldap.message.control.Control;\n import org.apache.directory.shared.ldap.name.DN;\n@@ -796,7 +797,7 @@ public CoreSession getSession( LdapPrincipal principal ) throws Exception\n         }\n \n \n-        public CoreSession getSession( DN principalDn, byte[] credentials ) throws Exception\n+        public CoreSession getSession( DN principalDn, byte[] credentials ) throws LdapException\n         {\n             return null;\n         }\n@@ -930,7 +931,7 @@ public void add( AddOperationContext opContext ) throws Exception\n         }\n \n         \n-        public void bind( BindOperationContext opContext ) throws Exception\n+        public void bind( BindOperationContext opContext ) throws LdapException\n         {\n         }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/test/java/org/apache/directory/server/core/authz/support/MaxImmSubFilterTest.java",
                "sha": "b7cb203dbaf5db6bf5402342c659ecf997c10d73",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 1,
                "filename": "core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "patch": "@@ -52,6 +52,7 @@\n import org.apache.directory.shared.ldap.constants.AuthenticationLevel;\n import org.apache.directory.shared.ldap.csn.Csn;\n import org.apache.directory.shared.ldap.entry.Entry;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.ldif.LdifEntry;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n@@ -602,7 +603,7 @@ public CoreSession getSession( LdapPrincipal principal ) throws Exception\n         }\n \n \n-        public CoreSession getSession( DN principalDn, byte[] credentials ) throws Exception\n+        public CoreSession getSession( DN principalDn, byte[] credentials ) throws LdapException\n         {\n             return null;\n         }",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/core/src/test/java/org/apache/directory/server/core/interceptor/InterceptorChainTest.java",
                "sha": "52b56d472010187c711f371a3ab78ce25de18dc4",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/directory-server/blob/c43b60334bef4dbf7fd1e535a3f187537fa7465d/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java?ref=c43b60334bef4dbf7fd1e535a3f187537fa7465d",
                "deletions": 5,
                "filename": "server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "patch": "@@ -192,7 +192,7 @@ public void testSimpleBindBadPassword()\n      * try to connect using a user with an invalid DN: we should get a invalidDNSyntax error.\n      */\n     @Test\n-    public void testSimpleBindBadUserPassword()\n+    public void testSimpleBindBadPrincipalAPassword()\n     {\n         Hashtable<String, String> env = new Hashtable<String, String>();\n         env.put( Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\" );\n@@ -222,7 +222,7 @@ public void testSimpleBindBadUserPassword()\n      * try to connect using a unknown user: we should get a invalidCredentials error.\n      */\n     @Test\n-    public void testSimpleBindUnknowUserPassword()\n+    public void testSimpleBindUnknowPrincipalAPassword()\n     {\n         Hashtable<String, String> env = new Hashtable<String, String>();\n         env.put( Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\" );\n@@ -250,7 +250,7 @@ public void testSimpleBindUnknowUserPassword()\n      * covers the anonymous authentication : we should be able to read the rootDSE, but that's it\n      */\n     @Test\n-    public void testSimpleBindNoUserNoPassword()\n+    public void testSimpleBindNoPrincipalNoPassword()\n     {\n         boolean oldValue = ldapServer.getDirectoryService().isAllowAnonymousAccess();\n         ldapServer.getDirectoryService().setAllowAnonymousAccess( false );\n@@ -336,7 +336,7 @@ public void testSimpleBindNoUserNoPassword()\n      * covers the Unauthenticated case : we should get a UnwillingToPerform error.\n      */\n     @Test\n-    public void testSimpleBindUserNoPassword()\n+    public void testSimpleBindPrincipalNoPassword()\n     {\n         Hashtable<String, String> env = new Hashtable<String, String>();\n         env.put( Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\" );\n@@ -366,7 +366,7 @@ public void testSimpleBindUserNoPassword()\n      * not allowed by the server. We should get a invalidCredentials error.\n      */\n     @Test\n-    public void testSimpleBindNoUserPassword() throws Exception\n+    public void testSimpleBindNoUserAPassword() throws Exception\n     {\n         Hashtable<String, String> env = new Hashtable<String, String>();\n         env.put( Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\" );",
                "raw_url": "https://github.com/apache/directory-server/raw/c43b60334bef4dbf7fd1e535a3f187537fa7465d/server-integ/src/test/java/org/apache/directory/server/operations/bind/SimpleBindIT.java",
                "sha": "62f66f3a4c400abf88f1d31216c6d34505caccf1",
                "status": "modified"
            }
        ],
        "message": "o The DS getSession now throw an LdapException\no Eliminated a potential NPE when transmitting a null password\no The bind() method now throws an LdapException\no Fixed the InterceptorException\no Fixed tests as bind() throws an exception now\no Added tests where we send a null password, to show that DIRSERVER-1309 has been fixed\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@950291 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/3a4227a8cf53a441688639493cbc8ec26ddde69b",
        "patched_files": [
            "InterceptorChain.java",
            "SimpleBindIT.java",
            "SimpleAuthenticationIT.java",
            "LdapCoreSessionConnection.java",
            "MockDirectoryService.java",
            "IntegrationUtils.java",
            "InterceptorException.java",
            "DefaultDirectoryService.java",
            "DefaultOperationManager.java",
            "MaxImmSubFilter.java",
            "OperationManager.java",
            "DirectoryService.java",
            "MockOperationManager.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "InterceptorChainTest.java",
            "MaxImmSubFilterTest.java"
        ]
    },
    "directory-server_cd91e1c": {
        "bug_id": "directory-server_cd91e1c",
        "commit": "https://github.com/apache/directory-server/commit/cd91e1c00ccb9d5c09a63496625eab262c8cfc73",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/cd91e1c00ccb9d5c09a63496625eab262c8cfc73/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java?ref=cd91e1c00ccb9d5c09a63496625eab262c8cfc73",
                "deletions": 1,
                "filename": "server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "patch": "@@ -353,7 +353,7 @@ private void loadLdif( File ldifFile ) throws Exception\n         \r\n         if ( fileEntry != null )\r\n         {\r\n-            String time = fileEntry.get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();\r\n+            String time = ((ClonedServerEntry)fileEntry).getOriginalEntry().get( SchemaConstants.CREATE_TIMESTAMP_AT ).getString();\r\n             LOG.info( \"Load of LDIF file '\" + getCanonical( ldifFile )\r\n                     + \"' skipped.  It has already been loaded on \" + time + \".\" );\r\n         }\r",
                "raw_url": "https://github.com/apache/directory-server/raw/cd91e1c00ccb9d5c09a63496625eab262c8cfc73/server-jndi/src/main/java/org/apache/directory/server/configuration/ApacheDS.java",
                "sha": "f88aacb326319dd33dd8f5ee7b0e6db5ffef2961",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE when trying to read an operational attribute, as we were using the clonedServerEntry, not the original entry.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@691317 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/fbb8eae5913dfcdb7229f2b797cd9a6c9f260f2a",
        "patched_files": [
            "ApacheDS.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ApacheDSTest.java"
        ]
    },
    "directory-server_d079b90": {
        "bug_id": "directory-server_d079b90",
        "commit": "https://github.com/apache/directory-server/commit/d079b906ee168fb7d3a71731e0b1630f37ec7e0e",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/directory-server/blob/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/core/src/main/java/org/apache/directory/server/core/collective/CollectiveAttributesSchemaChecker.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/collective/CollectiveAttributesSchemaChecker.java?ref=d079b906ee168fb7d3a71731e0b1630f37ec7e0e",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/directory/server/core/collective/CollectiveAttributesSchemaChecker.java",
                "patch": "@@ -30,10 +30,10 @@\n import org.apache.directory.server.core.partition.PartitionNexus;\n import org.apache.directory.server.i18n.I18n;\n import org.apache.directory.shared.ldap.constants.SchemaConstants;\n+import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n import org.apache.directory.shared.ldap.entry.Modification;\n import org.apache.directory.shared.ldap.entry.ModificationOperation;\n-import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.exception.LdapInvalidAttributeTypeException;\n import org.apache.directory.shared.ldap.exception.LdapSchemaViolationException;\n@@ -83,6 +83,12 @@ public void checkModify( OperationContext opContext, DN normName, List<Modificat\n         \n         EntryAttribute targetObjectClasses = targetEntry.get( SchemaConstants.OBJECT_CLASS_AT );\n         \n+        if ( targetObjectClasses == null )\n+        {\n+            // This is not allowed \n+            throw new LdapSchemaViolationException( ResultCodeEnum.OTHER, I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, originalEntry.getDn() ));\n+        }\n+        \n         if ( targetObjectClasses.contains( SchemaConstants.COLLECTIVE_ATTRIBUTE_SUBENTRY_OC ) )\n         {\n             return;",
                "raw_url": "https://github.com/apache/directory-server/raw/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/core/src/main/java/org/apache/directory/server/core/collective/CollectiveAttributesSchemaChecker.java",
                "sha": "45473eb492b04e67ba0dd04e1fe9442cefed16c5",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/directory-server/blob/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/core/src/main/java/org/apache/directory/server/core/schema/SchemaChecker.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/schema/SchemaChecker.java?ref=d079b906ee168fb7d3a71731e0b1630f37ec7e0e",
                "deletions": 7,
                "filename": "core/src/main/java/org/apache/directory/server/core/schema/SchemaChecker.java",
                "patch": "@@ -27,9 +27,9 @@\n \n import org.apache.directory.server.i18n.I18n;\n import org.apache.directory.shared.ldap.constants.SchemaConstants;\n+import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n import org.apache.directory.shared.ldap.entry.ModificationOperation;\n-import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.Value;\n import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.exception.LdapSchemaViolationException;\n@@ -88,7 +88,7 @@ public static void preventStructuralClassRemovalOnModifyReplace( SchemaManager s\n         // all the objectClass values in which case we must throw an exception\n         if ( attribute.size() == 0 )\n         {\n-            String msg = I18n.err( I18n.ERR_272, name );\n+            String msg = I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n             \n             if ( log.isInfoEnabled() )\n             {\n@@ -111,7 +111,7 @@ public static void preventStructuralClassRemovalOnModifyReplace( SchemaManager s\n \n         // no structural object classes exist for the entry in the replacement\n         // set for the objectClass attribute so we need to complain about that\n-        String msg = I18n.err( I18n.ERR_272, name );\n+        String msg = I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n         if ( log.isInfoEnabled() )\n         {\n             log.info( msg + \".  Raising LdapSchemaViolationException.\" );\n@@ -152,7 +152,7 @@ public static void preventStructuralClassRemovalOnModifyReplace(\n         // all the objectClass values in which case we must throw an exception\n         if ( objectClass.size() == 0 )\n         {\n-            String msg = I18n.err( I18n.ERR_272, name );\n+            String msg = I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n             if ( log.isInfoEnabled() )\n             {\n                 log.info( msg + \".  Raising LdapSchemaViolationException.\" );\n@@ -173,7 +173,7 @@ public static void preventStructuralClassRemovalOnModifyReplace(\n \n         // no structural object classes exist for the entry in the replacement\n         // set for the objectClass attribute so we need to complain about that\n-        String msg =  I18n.err( I18n.ERR_272, name );\n+        String msg =  I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n         if ( log.isInfoEnabled() )\n         {\n             log.info( msg + \".  Raising LdapSchemaViolationException.\" );\n@@ -232,7 +232,7 @@ public static void preventStructuralClassRemovalOnModifyRemove( SchemaManager sc\n         // all the objectClass values in which case we must throw an exception\n         if ( attribute.size() == 0 )\n         {\n-            String msg =  I18n.err( I18n.ERR_272, name );\n+            String msg =  I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n             \n             if ( log.isInfoEnabled() )\n             {\n@@ -266,7 +266,7 @@ public static void preventStructuralClassRemovalOnModifyRemove( SchemaManager sc\n \n         // no structural object classes exist for the entry after the modifications\n         // to the objectClass attribute so we need to complain about that\n-        String msg =  I18n.err( I18n.ERR_272, name );\n+        String msg =  I18n.err( I18n.ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS, name );\n \n         if ( log.isInfoEnabled() )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/core/src/main/java/org/apache/directory/server/core/schema/SchemaChecker.java",
                "sha": "b534665a68753b059d7682c8fdb9625b44ceebfb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/i18n/src/main/java/org/apache/directory/server/i18n/I18n.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/i18n/src/main/java/org/apache/directory/server/i18n/I18n.java?ref=d079b906ee168fb7d3a71731e0b1630f37ec7e0e",
                "deletions": 1,
                "filename": "i18n/src/main/java/org/apache/directory/server/i18n/I18n.java",
                "patch": "@@ -305,7 +305,7 @@\n     ERR_269( \"ERR_269\" ),\n     ERR_270( \"ERR_270\" ),\n     ERR_271( \"ERR_271\" ),\n-    ERR_272( \"ERR_272\" ),\n+    ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS( \"ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS\" ),\n     ERR_273( \"ERR_273\" ),\n     ERR_274( \"ERR_274\" ),\n     ERR_275( \"ERR_275\" ),",
                "raw_url": "https://github.com/apache/directory-server/raw/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/i18n/src/main/java/org/apache/directory/server/i18n/I18n.java",
                "sha": "2ed0e7db4b1e18c0831c119d871b2c08078a7846",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/i18n/src/main/resources/org/apache/directory/server/i18n/errors.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/i18n/src/main/resources/org/apache/directory/server/i18n/errors.properties?ref=d079b906ee168fb7d3a71731e0b1630f37ec7e0e",
                "deletions": 1,
                "filename": "i18n/src/main/resources/org/apache/directory/server/i18n/errors.properties",
                "patch": "@@ -293,7 +293,7 @@ ERR_268=Cannot find a partition for {0}\n ERR_269=userRoot() in org.apache.directory.server.prefs.ServerPreferencesFactory not implemented!\n ERR_270=Failed to set up node.\n ERR_271=Failed to get SPI.\n-ERR_272=Modify operation leaves no structural objectClass for entry {0}\n+ERR_272_MODIFY_LEAVES_NO_STRUCTURAL_OBJECT_CLASS=Modify operation leaves no structural objectClass for entry {0}\n ERR_273=Modify operation attempts to delete RDN attribute {0} on entry {1} violates schema constraints\n ERR_274=Modify operation attempts to delete RDN attribute values in use for {0} on entry {1} and violates schema constraints\n ERR_275={0} not found in attribute registry!",
                "raw_url": "https://github.com/apache/directory-server/raw/d079b906ee168fb7d3a71731e0b1630f37ec7e0e/i18n/src/main/resources/org/apache/directory/server/i18n/errors.properties",
                "sha": "164e6cc9493b5e74b1da35efff7042a02bfe8481",
                "status": "modified"
            }
        ],
        "message": "o Added a fix for DIRSERVER-1448 : w don't throw anymore a NPE if a modification removes all the OC for an entry.\no The associated error message code has been improved\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@948490 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/06e3ec724aa80abdb894a35abf2f1bf5b6fc2b4b",
        "patched_files": [
            "errors.properties",
            "SchemaChecker.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "SchemaCheckerTest.java"
        ]
    },
    "directory-server_d50cfcc": {
        "bug_id": "directory-server_d50cfcc",
        "commit": "https://github.com/apache/directory-server/commit/d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2/interceptors/authz/src/main/java/org/apache/directory/server/core/authz/AciAuthorizationInterceptor.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/interceptors/authz/src/main/java/org/apache/directory/server/core/authz/AciAuthorizationInterceptor.java?ref=d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2",
                "deletions": 3,
                "filename": "interceptors/authz/src/main/java/org/apache/directory/server/core/authz/AciAuthorizationInterceptor.java",
                "patch": "@@ -376,7 +376,8 @@ private void addPerscriptiveAciTuples( OperationContext opContext, Collection<AC\n         {\n             Dn parentDn = dn.getParent();\n             CoreSession session = opContext.getSession();\n-            LookupOperationContext lookupContext = new LookupOperationContext( session, parentDn, SchemaConstants.ALL_ATTRIBUTES_ARRAY );\n+            LookupOperationContext lookupContext = new LookupOperationContext( session, parentDn,\n+                SchemaConstants.ALL_ATTRIBUTES_ARRAY );\n \n             originalEntry = directoryService.getPartitionNexus().lookup( lookupContext );\n         }\n@@ -1442,8 +1443,8 @@ public boolean accept( SearchOperationContext searchContext, Entry entry ) throw\n \n             return filter( searchContext, normName, entry );\n         }\n-        \n-        \n+\n+\n         /**\n          * {@inheritDoc}\n          */",
                "raw_url": "https://github.com/apache/directory-server/raw/d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2/interceptors/authz/src/main/java/org/apache/directory/server/core/authz/AciAuthorizationInterceptor.java",
                "sha": "3da75032f0d723638ed056577ab674ca9aa3b15f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientModifyDnRequestTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientModifyDnRequestTest.java?ref=d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2",
                "deletions": 1,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientModifyDnRequestTest.java",
                "patch": "@@ -70,7 +70,7 @@\n     @Before\n     public void setup() throws Exception\n     {\n-        connection = (LdapNetworkConnection)LdapApiIntegrationUtils.getPooledAdminConnection( getLdapServer() );\n+        connection = ( LdapNetworkConnection ) LdapApiIntegrationUtils.getPooledAdminConnection( getLdapServer() );\n         session = getLdapServer().getDirectoryService().getAdminSession();\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/d50cfcc32d0a9e8c42f90a33e091ca5dcc2487a2/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/operations/ClientModifyDnRequestTest.java",
                "sha": "71f6ffc272b8582f1a767764eec19202b3b22eb2",
                "status": "modified"
            }
        ],
        "message": "o Added some checks in the LdapNetworkConnection API for async operations so that we don't get NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1442292 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/81c242e4ab7ac33e0272ce07810cc5e0bf6f83f2",
        "patched_files": [
            "AciAuthorizationInterceptor.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ClientModifyDnRequestTest.java"
        ]
    },
    "directory-server_d6b0381": {
        "bug_id": "directory-server_d6b0381",
        "commit": "https://github.com/apache/directory-server/commit/d6b03815121a33c203fc2763cfbb79269a074be6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerAttribute.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerAttribute.java?ref=d6b03815121a33c203fc2763cfbb79269a074be6",
                "deletions": 6,
                "filename": "core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerAttribute.java",
                "patch": "@@ -367,7 +367,7 @@ public void setAttributeType( AttributeType attributeType )\n     {\r\n         if ( attributeType == null )\r\n         {\r\n-            throw new IllegalArgumentException( getErrorMessage( attributeType ) );\r\n+            throw new IllegalArgumentException( \"The AttributeType parameter should not be null\" );\r\n         }\r\n \r\n         this.attributeType = attributeType;\r\n@@ -413,7 +413,7 @@ public DefaultServerAttribute( AttributeType attributeType )\n     {\r\n         if ( attributeType == null )\r\n         {\r\n-            throw new IllegalArgumentException( getErrorMessage( attributeType ) );\r\n+            throw new IllegalArgumentException( \"The AttributeType parameter should not be null\" );\r\n         }\r\n         \r\n         setAttributeType( attributeType );\r\n@@ -427,7 +427,7 @@ public DefaultServerAttribute( String upId, AttributeType attributeType )\n     {\r\n         if ( attributeType == null ) \r\n         {\r\n-            String message = getErrorMessage( attributeType );\r\n+            String message = \"The AttributeType parameter should not be null\";\r\n             LOG.error( message );\r\n             throw new IllegalArgumentException( message );\r\n         }\r\n@@ -472,7 +472,7 @@ public DefaultServerAttribute( String upId, AttributeType attributeType, Value<?\n     {\r\n         if ( attributeType == null )\r\n         {\r\n-            throw new IllegalArgumentException( getErrorMessage( attributeType ) );\r\n+            throw new IllegalArgumentException( \"The AttributeType parameter should not be null\" );\r\n         }\r\n         \r\n         setAttributeType( attributeType );\r\n@@ -497,7 +497,7 @@ public DefaultServerAttribute( String upId, AttributeType attributeType, String.\n     {\r\n         if ( attributeType == null )\r\n         {\r\n-            throw new IllegalArgumentException( getErrorMessage( attributeType ) );\r\n+            throw new IllegalArgumentException( \"The AttributeType parameter should not be null\" );\r\n         }\r\n \r\n         setAttributeType( attributeType );\r\n@@ -522,7 +522,7 @@ public DefaultServerAttribute( String upId, AttributeType attributeType, byte[].\n     {\r\n         if ( attributeType == null )\r\n         {\r\n-            throw new IllegalArgumentException( getErrorMessage( attributeType ) );\r\n+            throw new IllegalArgumentException( \"The AttributeType parameter should not be null\" );\r\n         }\r\n \r\n         setAttributeType( attributeType );\r",
                "raw_url": "https://github.com/apache/directory-server/raw/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/main/java/org/apache/directory/server/core/entry/DefaultServerAttribute.java",
                "sha": "e3661d0241a6648fcb4c2a87d5da566da7382a5d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerBinaryValueTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerBinaryValueTest.java?ref=d6b03815121a33c203fc2763cfbb79269a074be6",
                "deletions": 3,
                "filename": "core-entry/src/test/java/org/apache/directory/server/core/entry/ServerBinaryValueTest.java",
                "patch": "@@ -60,9 +60,9 @@\n  */\n public class ServerBinaryValueTest\n {\n-    static private TestServerEntryUtils.S s;\n-    static private TestServerEntryUtils.AT at;\n-    static private TestServerEntryUtils.MR mr;\n+    private TestServerEntryUtils.S s;\n+    private TestServerEntryUtils.AT at;\n+    private TestServerEntryUtils.MR mr;\n     \n     private static final byte[] BYTES1 = new byte[]{0x01, 0x02, 0x03, 0x04};\n     private static final byte[] BYTES2 = new byte[]{(byte)0x81, (byte)0x82, (byte)0x83, (byte)0x84};",
                "raw_url": "https://github.com/apache/directory-server/raw/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerBinaryValueTest.java",
                "sha": "ca770881ff66763e5ad70a40223bd267ca8bb817",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerStringValueTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerStringValueTest.java?ref=d6b03815121a33c203fc2763cfbb79269a074be6",
                "deletions": 3,
                "filename": "core-entry/src/test/java/org/apache/directory/server/core/entry/ServerStringValueTest.java",
                "patch": "@@ -68,9 +68,9 @@\n  */\r\n public class ServerStringValueTest\r\n {\r\n-    static private TestServerEntryUtils.S s;\r\n-    static private TestServerEntryUtils.AT at;\r\n-    static private TestServerEntryUtils.MR mr;\r\n+    private TestServerEntryUtils.S s;\r\n+    private TestServerEntryUtils.AT at;\r\n+    private TestServerEntryUtils.MR mr;\r\n \r\n     \r\n     /**\r",
                "raw_url": "https://github.com/apache/directory-server/raw/d6b03815121a33c203fc2763cfbb79269a074be6/core-entry/src/test/java/org/apache/directory/server/core/entry/ServerStringValueTest.java",
                "sha": "8763794ec69b9a0d65c1ccb0357f4bc8d2542414",
                "status": "modified"
            }
        ],
        "message": "Using FindBugs, and fixed :\no Potential NPE\no Removed useless incrementations\no Added a method in LdapURL to return a copy of the bytes\no Improved the use of Map iterators\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@637403 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/acc7058fff2b88d7631fca026728707cc50b227c",
        "patched_files": [
            "ServerBinaryValue.java",
            "DefaultServerAttribute.java",
            "ServerStringValue.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ServerBinaryValueTest.java",
            "DefaultServerAttributeTest.java",
            "ServerStringValueTest.java"
        ]
    },
    "directory-server_e1d020a": {
        "bug_id": "directory-server_e1d020a",
        "commit": "https://github.com/apache/directory-server/commit/e1d020a39cd5ba602285c15c8032620cda6588ba",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/directory-server/blob/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/GenerateTicket.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/GenerateTicket.java?ref=e1d020a39cd5ba602285c15c8032620cda6588ba",
                "deletions": 29,
                "filename": "protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/GenerateTicket.java",
                "patch": "@@ -81,7 +81,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n             newTicketBody.setFlag( TicketFlags.PRE_AUTHENT );\n         }\n \n-        if ( request.getKdcOptions().get( KdcOptions.FORWARDABLE ) )\n+        if ( request.getOption( KdcOptions.FORWARDABLE ) )\n         {\n             if ( !config.isForwardableAllowed() )\n             {\n@@ -91,7 +91,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n             newTicketBody.setFlag( TicketFlags.FORWARDABLE );\n         }\n \n-        if ( request.getKdcOptions().get( KdcOptions.PROXIABLE ) )\n+        if ( request.getOption( KdcOptions.PROXIABLE ) )\n         {\n             if ( !config.isProxiableAllowed() )\n             {\n@@ -101,7 +101,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n             newTicketBody.setFlag( TicketFlags.PROXIABLE );\n         }\n \n-        if ( request.getKdcOptions().get( KdcOptions.ALLOW_POSTDATE ) )\n+        if ( request.getOption( KdcOptions.ALLOW_POSTDATE ) )\n         {\n             if ( !config.isPostdateAllowed() )\n             {\n@@ -111,9 +111,9 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n             newTicketBody.setFlag( TicketFlags.MAY_POSTDATE );\n         }\n \n-        if ( request.getKdcOptions().get( KdcOptions.RENEW ) || request.getKdcOptions().get( KdcOptions.VALIDATE )\n-            || request.getKdcOptions().get( KdcOptions.PROXY ) || request.getKdcOptions().get( KdcOptions.FORWARDED )\n-            || request.getKdcOptions().get( KdcOptions.ENC_TKT_IN_SKEY ) )\n+        if ( request.getOption( KdcOptions.RENEW ) || request.getOption( KdcOptions.VALIDATE )\n+            || request.getOption( KdcOptions.PROXY ) || request.getOption( KdcOptions.FORWARDED )\n+            || request.getOption( KdcOptions.ENC_TKT_IN_SKEY ) )\n         {\n             throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n         }\n@@ -137,7 +137,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n          * ticket is set to the authentication server's current time.\"\n          */\n         if ( startTime == null || startTime.lessThan( now ) || startTime.isInClockSkew( config.getAllowableClockSkew() )\n-            && !request.getKdcOptions().get( KdcOptions.POSTDATED ) )\n+            && !request.getOption( KdcOptions.POSTDATED ) )\n         {\n             startTime = now;\n         }\n@@ -148,8 +148,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n          * KDC_ERR_CANNOT_POSTDATE is returned.\"\n          */\n         if ( startTime != null && startTime.greaterThan( now )\n-            && !startTime.isInClockSkew( config.getAllowableClockSkew() )\n-            && !request.getKdcOptions().get( KdcOptions.POSTDATED ) )\n+            && !startTime.isInClockSkew( config.getAllowableClockSkew() ) && !request.getOption( KdcOptions.POSTDATED ) )\n         {\n             throw new KerberosException( ErrorType.KDC_ERR_CANNOT_POSTDATE );\n         }\n@@ -159,7 +158,7 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n          * local realm and if the ticket's starttime is acceptable, it is set as\n          * requested, and the INVALID flag is set in the new ticket.\"\n          */\n-        if ( request.getKdcOptions().get( KdcOptions.POSTDATED ) )\n+        if ( request.getOption( KdcOptions.POSTDATED ) )\n         {\n             if ( !config.isPostdateAllowed() )\n             {\n@@ -182,10 +181,8 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n         }\n \n         /*\n-         new_tkt.endtime := min(till,\n-         new_tkt.starttime+client.max_life,\n-         new_tkt.starttime+server.max_life,\n-         new_tkt.starttime+max_life_for_realm);\n+         * The end time is the minimum of (a) the requested till time or (b)\n+         * the start time plus maximum lifetime as configured in policy.\n          */\n         long endTime = Math.min( till, startTime.getTime() + config.getMaximumTicketLifetime() );\n         KerberosTime kerberosEndTime = new KerberosTime( endTime );\n@@ -215,29 +212,18 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n          */\n         KerberosTime tempRtime = request.getRtime();\n \n-        if ( request.getKdcOptions().get( KdcOptions.RENEWABLE_OK ) && request.getTill().greaterThan( kerberosEndTime ) )\n+        if ( request.getOption( KdcOptions.RENEWABLE_OK ) && request.getTill().greaterThan( kerberosEndTime ) )\n         {\n             if ( !config.isRenewableAllowed() )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n             }\n \n-            request.getKdcOptions().set( KdcOptions.RENEWABLE );\n+            request.setOption( KdcOptions.RENEWABLE );\n             tempRtime = request.getTill();\n         }\n \n-        /*\n-         if (req.kdc-options.RENEWABLE is set) then\n-         set new_tkt.flags.RENEWABLE;\n-         new_tkt.renew-till := min(rtime,\n-         new_tkt.starttime+client.max_rlife,\n-         new_tkt.starttime+server.max_rlife,\n-         new_tkt.starttime+max_rlife_for_realm);\n-         else\n-         omit new_tkt.renew-till;\n-         endif\n-         */\n-        if ( request.getKdcOptions().get( KdcOptions.RENEWABLE ) )\n+        if ( request.getOption( KdcOptions.RENEWABLE ) )\n         {\n             if ( !config.isRenewableAllowed() )\n             {\n@@ -251,11 +237,17 @@ public void execute( NextCommand next, IoSession session, Object message ) throw\n                 tempRtime = KerberosTime.INFINITY;\n             }\n \n+            /*\n+             * The renew-till time is the minimum of (a) the requested renew-till\n+             * time or (b) the start time plus maximum renewable lifetime as\n+             * configured in policy.\n+             */\n             long renewTill = Math.min( tempRtime.getTime(), startTime.getTime() + config.getMaximumRenewableLifetime() );\n             newTicketBody.setRenewTill( new KerberosTime( renewTill ) );\n         }\n \n-        if ( request.getAddresses() != null )\n+        if ( request.getAddresses() != null && request.getAddresses().getAddresses() != null\n+            && request.getAddresses().getAddresses().length > 0 )\n         {\n             newTicketBody.setClientAddresses( request.getAddresses() );\n         }",
                "raw_url": "https://github.com/apache/directory-server/raw/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/authentication/GenerateTicket.java",
                "sha": "55946905b4780a28652004ee907c572332b460a6",
                "status": "modified"
            },
            {
                "additions": 85,
                "blob_url": "https://github.com/apache/directory-server/blob/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/ticketgrant/GenerateTicket.java",
                "changes": 101,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/ticketgrant/GenerateTicket.java?ref=e1d020a39cd5ba602285c15c8032620cda6588ba",
                "deletions": 16,
                "filename": "protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/ticketgrant/GenerateTicket.java",
                "patch": "@@ -137,6 +137,11 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n \n         if ( request.getOption( KdcOptions.FORWARDABLE ) )\n         {\n+            if ( !config.isForwardableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.FORWARDABLE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n@@ -147,13 +152,30 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n \n         if ( request.getOption( KdcOptions.FORWARDED ) )\n         {\n+            if ( !config.isForwardableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.FORWARDABLE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n             }\n \n+            if ( request.getAddresses() != null && request.getAddresses().getAddresses() != null\n+                && request.getAddresses().getAddresses().length > 0 )\n+            {\n+                newTicketBody.setClientAddresses( request.getAddresses() );\n+            }\n+            else\n+            {\n+                if ( !config.isEmptyAddressesAllowed() )\n+                {\n+                    throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+                }\n+            }\n+\n             newTicketBody.setFlag( TicketFlags.FORWARDED );\n-            newTicketBody.setClientAddresses( request.getAddresses() );\n         }\n \n         if ( tgt.getFlag( TicketFlags.FORWARDED ) )\n@@ -163,6 +185,11 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n \n         if ( request.getOption( KdcOptions.PROXIABLE ) )\n         {\n+            if ( !config.isProxiableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.PROXIABLE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n@@ -173,17 +200,39 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n \n         if ( request.getOption( KdcOptions.PROXY ) )\n         {\n+            if ( !config.isProxiableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.PROXIABLE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n             }\n \n+            if ( request.getAddresses() != null && request.getAddresses().getAddresses() != null\n+                && request.getAddresses().getAddresses().length > 0 )\n+            {\n+                newTicketBody.setClientAddresses( request.getAddresses() );\n+            }\n+            else\n+            {\n+                if ( !config.isEmptyAddressesAllowed() )\n+                {\n+                    throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+                }\n+            }\n+\n             newTicketBody.setFlag( TicketFlags.PROXY );\n-            newTicketBody.setClientAddresses( request.getAddresses() );\n         }\n \n         if ( request.getOption( KdcOptions.ALLOW_POSTDATE ) )\n         {\n+            if ( !config.isPostdateAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.MAY_POSTDATE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n@@ -204,14 +253,14 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n          */\n         if ( request.getOption( KdcOptions.POSTDATED ) )\n         {\n-            if ( !tgt.getFlag( TicketFlags.MAY_POSTDATE ) )\n+            if ( !config.isPostdateAllowed() )\n             {\n-                throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n             }\n \n-            if ( !config.isPostdateAllowed() )\n+            if ( !tgt.getFlag( TicketFlags.MAY_POSTDATE ) )\n             {\n-                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+                throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n             }\n \n             newTicketBody.setFlag( TicketFlags.POSTDATED );\n@@ -222,6 +271,11 @@ private void processFlags( KdcConfiguration config, KdcRequest request, Ticket t\n \n         if ( request.getOption( KdcOptions.VALIDATE ) )\n         {\n+            if ( !config.isPostdateAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.INVALID ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n@@ -267,7 +321,7 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n          * ticket is set to the authentication server's current time.\"\n          */\n         if ( startTime == null || startTime.lessThan( now ) || startTime.isInClockSkew( config.getAllowableClockSkew() )\n-            && !request.getKdcOptions().get( KdcOptions.POSTDATED ) )\n+            && !request.getOption( KdcOptions.POSTDATED ) )\n         {\n             startTime = now;\n         }\n@@ -280,7 +334,7 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n          */\n         if ( startTime != null && startTime.greaterThan( now )\n             && !startTime.isInClockSkew( config.getAllowableClockSkew() )\n-            && ( !request.getKdcOptions().get( KdcOptions.POSTDATED ) || !tgt.getFlag( TicketFlags.MAY_POSTDATE ) ) )\n+            && ( !request.getOption( KdcOptions.POSTDATED ) || !tgt.getFlag( TicketFlags.MAY_POSTDATE ) ) )\n         {\n             throw new KerberosException( ErrorType.KDC_ERR_CANNOT_POSTDATE );\n         }\n@@ -290,6 +344,11 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n \n         if ( request.getOption( KdcOptions.RENEW ) )\n         {\n+            if ( !config.isRenewableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             if ( !tgt.getFlag( TicketFlags.RENEWABLE ) )\n             {\n                 throw new KerberosException( ErrorType.KDC_ERR_BADOPTION );\n@@ -328,10 +387,10 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n                 till = request.getTill();\n             }\n \n-            // TODO - config; requires store\n             /*\n-             new_tkt.starttime+client.max_life,\n-             new_tkt.starttime+server.max_life,\n+             * The end time is the minimum of (a) the requested till time or (b)\n+             * the start time plus maximum lifetime as configured in policy or (c)\n+             * the end time of the TGT.\n              */\n             List<KerberosTime> minimizer = new ArrayList<KerberosTime>();\n             minimizer.add( till );\n@@ -344,7 +403,12 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n             if ( request.getOption( KdcOptions.RENEWABLE_OK ) && kerberosEndTime.lessThan( request.getTill() )\n                 && tgt.getFlag( TicketFlags.RENEWABLE ) )\n             {\n-                // we set the RENEWABLE option for later processing                           \n+                if ( !config.isRenewableAllowed() )\n+                {\n+                    throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+                }\n+\n+                // We set the RENEWABLE option for later processing.                           \n                 request.setOption( KdcOptions.RENEWABLE );\n                 long rtime = Math.min( request.getTill().getTime(), tgt.getRenewTill().getTime() );\n                 renewalTime = new KerberosTime( rtime );\n@@ -368,13 +432,18 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n \n         if ( request.getOption( KdcOptions.RENEWABLE ) && tgt.getFlag( TicketFlags.RENEWABLE ) )\n         {\n+            if ( !config.isRenewableAllowed() )\n+            {\n+                throw new KerberosException( ErrorType.KDC_ERR_POLICY );\n+            }\n+\n             newTicketBody.setFlag( TicketFlags.RENEWABLE );\n \n             /*\n-             new_tkt.starttime+client.max_rlife,\n-             new_tkt.starttime+server.max_rlife,\n+             * The renew-till time is the minimum of (a) the requested renew-till\n+             * time or (b) the start time plus maximum renewable lifetime as\n+             * configured in policy or (c) the renew-till time of the TGT.\n              */\n-            // TODO - client and server configurable; requires store\n             List<KerberosTime> minimizer = new ArrayList<KerberosTime>();\n \n             /*\n@@ -385,7 +454,7 @@ private void processTimes( KdcConfiguration config, KdcRequest request, EncTicke\n                 minimizer.add( rtime );\n             }\n \n-            minimizer.add( new KerberosTime( now.getTime() + config.getMaximumRenewableLifetime() ) );\n+            minimizer.add( new KerberosTime( startTime.getTime() + config.getMaximumRenewableLifetime() ) );\n             minimizer.add( tgt.getRenewTill() );\n             newTicketBody.setRenewTill( Collections.min( minimizer ) );\n         }",
                "raw_url": "https://github.com/apache/directory-server/raw/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/main/java/org/apache/directory/server/kerberos/kdc/ticketgrant/GenerateTicket.java",
                "sha": "c875c3f9830495ec964d7f733265b57f5a5c457c",
                "status": "modified"
            },
            {
                "additions": 307,
                "blob_url": "https://github.com/apache/directory-server/blob/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/AuthenticationPolicyTest.java",
                "changes": 307,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/AuthenticationPolicyTest.java?ref=e1d020a39cd5ba602285c15c8032620cda6588ba",
                "deletions": 0,
                "filename": "protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/AuthenticationPolicyTest.java",
                "patch": "@@ -0,0 +1,307 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.server.kerberos.protocol;\n+\n+\n+import org.apache.directory.server.kerberos.kdc.KdcConfiguration;\n+import org.apache.directory.server.kerberos.shared.messages.ErrorMessage;\n+import org.apache.directory.server.kerberos.shared.messages.KdcRequest;\n+import org.apache.directory.server.kerberos.shared.messages.MessageType;\n+import org.apache.directory.server.kerberos.shared.messages.value.KdcOptions;\n+import org.apache.directory.server.kerberos.shared.messages.value.KerberosTime;\n+import org.apache.directory.server.kerberos.shared.messages.value.RequestBodyModifier;\n+import org.apache.directory.server.kerberos.shared.store.PrincipalStore;\n+\n+\n+/**\n+ * Tests configuration of Authentication Service (AS) policy.\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$, $Date$\n+ */\n+public class AuthenticationPolicyTest extends AbstractAuthenticationServiceTest\n+{\n+    private KdcConfiguration config;\n+    private PrincipalStore store;\n+    private KerberosProtocolHandler handler;\n+    private DummySession session;\n+\n+\n+    /**\n+     * Creates a new instance of {@link AuthenticationPolicyTest}.\n+     */\n+    public AuthenticationPolicyTest()\n+    {\n+        config = new KdcConfiguration();\n+        store = new MapPrincipalStoreImpl();\n+        handler = new KerberosProtocolHandler( config, store );\n+        session = new DummySession();\n+    }\n+\n+\n+    /**\n+     * Tests when forwardable tickets are disallowed that requests for\n+     * forwardable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testForwardableTicket() throws Exception\n+    {\n+        // Deny FORWARDABLE tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setForwardableAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.FORWARDABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when proxiable tickets are disallowed that requests for\n+     * proxiable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testProxiableTicket() throws Exception\n+    {\n+        // Deny PROXIABLE tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setProxiableAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.PROXIABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when postdated tickets are disallowed that requests for\n+     * ALLOW-POSTDATE tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testAllowPostdate() throws Exception\n+    {\n+        // Deny POSTDATED tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setPostdateAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.ALLOW_POSTDATE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when postdated tickets are disallowed that requests for\n+     * postdated tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testPostdate() throws Exception\n+    {\n+        // Deny POSTDATED tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setPostdateAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.POSTDATED );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when renewable tickets are disallowed that requests for\n+     * RENEWABLE-OK tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testRenewableOk() throws Exception\n+    {\n+        // Deny RENEWABLE tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setRenewableAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.RENEWABLE_OK );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + KerberosTime.WEEK );\n+        modifier.setTill( requestedEndTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when renewable tickets are disallowed that requests for\n+     * renewable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testRenewableTicket() throws Exception\n+    {\n+        // Deny RENEWABLE tickets in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setRenewableAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.RENEWABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KerberosTime requestedRenewTillTime = new KerberosTime( now + KerberosTime.WEEK / 2 );\n+        modifier.setRtime( requestedRenewTillTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when empty addresses are disallowed that requests with no addresses\n+     * fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testEmptyAddresses() throws Exception\n+    {\n+        // Deny empty addresses in policy.\n+        config.setPaEncTimestampRequired( false );\n+        config.setEmptyAddressesAllowed( false );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setClientName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setServerName( getPrincipalName( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KerberosTime requestedRenewTillTime = new KerberosTime( now + KerberosTime.WEEK / 2 );\n+        modifier.setRtime( requestedRenewTillTime );\n+\n+        KdcRequest message = new KdcRequest( 5, MessageType.KRB_AS_REQ, null, modifier.getRequestBody() );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/AuthenticationPolicyTest.java",
                "sha": "d69e8c969964f4c32fe4acd92aa0fc109952fbe1",
                "status": "added"
            },
            {
                "additions": 693,
                "blob_url": "https://github.com/apache/directory-server/blob/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/TicketGrantingPolicyTest.java",
                "changes": 693,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/TicketGrantingPolicyTest.java?ref=e1d020a39cd5ba602285c15c8032620cda6588ba",
                "deletions": 0,
                "filename": "protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/TicketGrantingPolicyTest.java",
                "patch": "@@ -0,0 +1,693 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one\n+ *  or more contributor license agreements.  See the NOTICE file\n+ *  distributed with this work for additional information\n+ *  regarding copyright ownership.  The ASF licenses this file\n+ *  to you under the Apache License, Version 2.0 (the\n+ *  \"License\"); you may not use this file except in compliance\n+ *  with the License.  You may obtain a copy of the License at\n+ *  \n+ *    http://www.apache.org/licenses/LICENSE-2.0\n+ *  \n+ *  Unless required by applicable law or agreed to in writing,\n+ *  software distributed under the License is distributed on an\n+ *  \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *  KIND, either express or implied.  See the License for the\n+ *  specific language governing permissions and limitations\n+ *  under the License. \n+ *  \n+ */\n+package org.apache.directory.server.kerberos.protocol;\n+\n+\n+import java.net.InetAddress;\n+\n+import javax.security.auth.kerberos.KerberosPrincipal;\n+\n+import org.apache.directory.server.kerberos.kdc.KdcConfiguration;\n+import org.apache.directory.server.kerberos.shared.crypto.encryption.CipherTextHandler;\n+import org.apache.directory.server.kerberos.shared.messages.ErrorMessage;\n+import org.apache.directory.server.kerberos.shared.messages.KdcRequest;\n+import org.apache.directory.server.kerberos.shared.messages.components.EncTicketPartModifier;\n+import org.apache.directory.server.kerberos.shared.messages.components.Ticket;\n+import org.apache.directory.server.kerberos.shared.messages.value.EncryptionKey;\n+import org.apache.directory.server.kerberos.shared.messages.value.HostAddress;\n+import org.apache.directory.server.kerberos.shared.messages.value.HostAddresses;\n+import org.apache.directory.server.kerberos.shared.messages.value.KdcOptions;\n+import org.apache.directory.server.kerberos.shared.messages.value.KerberosTime;\n+import org.apache.directory.server.kerberos.shared.messages.value.RequestBody;\n+import org.apache.directory.server.kerberos.shared.messages.value.RequestBodyModifier;\n+import org.apache.directory.server.kerberos.shared.messages.value.TicketFlags;\n+import org.apache.directory.server.kerberos.shared.store.PrincipalStore;\n+\n+\n+/**\n+ * Tests configuration of Ticket-Granting Service (TGS) policy.\n+ * \n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$, $Date$\n+ */\n+public class TicketGrantingPolicyTest extends AbstractTicketGrantingServiceTest\n+{\n+    private KdcConfiguration config;\n+    private PrincipalStore store;\n+    private KerberosProtocolHandler handler;\n+    private DummySession session;\n+\n+\n+    /**\n+     * Creates a new instance of {@link TicketGrantingPolicyTest}.\n+     */\n+    public TicketGrantingPolicyTest()\n+    {\n+        config = new KdcConfiguration();\n+\n+        /*\n+         * Body checksum verification must be disabled because we are bypassing\n+         * the codecs, where the body bytes are set on the KdcRequest message.\n+         */\n+        config.setBodyChecksumVerified( false );\n+\n+        store = new MapPrincipalStoreImpl();\n+        handler = new KerberosProtocolHandler( config, store );\n+        session = new DummySession();\n+        lockBox = new CipherTextHandler();\n+    }\n+\n+\n+    /**\n+     * Tests when forwardable tickets are disallowed that requests for\n+     * forwardable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testForwardableTicket() throws Exception\n+    {\n+        // Deny FORWARDABLE tickets in policy.\n+        config.setForwardableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.FORWARDABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.FORWARDABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when forwardable tickets are disallowed that requests for\n+     * forwarded tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testForwardedTicket() throws Exception\n+    {\n+        // Deny FORWARDABLE tickets in policy.\n+        config.setForwardableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.FORWARDABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.FORWARDED );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when empty addresses are disallowed and forwarded tickets are requested\n+     * that requests with no addresses fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testForwardedNoAddressesTicket() throws Exception\n+    {\n+        /*\n+         * Test case needs further testing to ensure the localhost address is\n+         * resolved uniformly on different platforms, or else the test case will fail.\n+         */\n+        assertTrue( true );\n+\n+        /*\n+        // Deny empty addresses tickets in policy.\n+        config.setEmptyAddressesAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.FORWARDABLE );\n+\n+        HostAddress[] address =\n+            { new HostAddress( InetAddress.getByAddress( new byte[4] ) ) };\n+        HostAddresses addresses = new HostAddresses( address );\n+        encTicketPartModifier.setClientAddresses( addresses );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.FORWARDED );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+        */\n+    }\n+\n+\n+    /**\n+     * Tests when proxiable tickets are disallowed that requests for\n+     * proxiable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testProxiableTicket() throws Exception\n+    {\n+        // Deny PROXIABLE tickets in policy.\n+        config.setProxiableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.PROXIABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.PROXIABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when proxiable tickets are disallowed that requests for\n+     * proxy tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testProxyTicket() throws Exception\n+    {\n+        // Deny PROXIABLE tickets in policy.\n+        config.setProxiableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.PROXIABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.PROXY );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        HostAddress[] address =\n+            { new HostAddress( InetAddress.getLocalHost() ) };\n+        HostAddresses addresses = new HostAddresses( address );\n+        modifier.setAddresses( addresses );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when empty addresses are disallowed and proxy tickets are requested\n+     * that requests with no addresses fail with the correct error message.\n+     *  \n+     * @throws Exception \n+     */\n+    public void testProxyNoAddressesTicket() throws Exception\n+    {\n+        /*\n+         * Test case needs further testing to ensure the localhost address is\n+         * resolved uniformly on different platforms, or else the test case will fail.\n+         */\n+        assertTrue( true );\n+\n+        /*\n+        // Deny empty addresses tickets in policy.\n+        config.setEmptyAddressesAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.PROXIABLE );\n+\n+        HostAddress[] address =\n+            { new HostAddress( InetAddress.getByAddress( new byte[4] ) ) };\n+        HostAddresses addresses = new HostAddresses( address );\n+        encTicketPartModifier.setClientAddresses( addresses );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.PROXY );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+        */\n+    }\n+\n+\n+    /**\n+     * Tests when postdated tickets are disallowed that requests for\n+     * ALLOW-POSTDATE tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testAllowPostdate() throws Exception\n+    {\n+        // Deny ALLOW_POSTDATE tickets in policy.\n+        config.setPostdateAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.MAY_POSTDATE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.ALLOW_POSTDATE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when postdated tickets are disallowed that requests for\n+     * postdated tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testPostdated() throws Exception\n+    {\n+        // Deny POSTDATED tickets in policy.\n+        config.setPostdateAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.MAY_POSTDATE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.POSTDATED );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when postdated tickets are disallowed that requests for\n+     * validation of invalid tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testValidateInvalidTicket() throws Exception\n+    {\n+        // Deny VALIDATE tickets in policy.\n+        config.setPostdateAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.INVALID );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.VALIDATE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( currentTime + KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when renewable tickets are disallowed that requests for\n+     * renewal of tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testRenewTicket() throws Exception\n+    {\n+        // Deny RENEWABLE tickets in policy.\n+        config.setRenewableAllowed( false );\n+\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String serverPassword = \"randomKey\";\n+\n+        Ticket tgt = getTgt( clientPrincipal, serverPrincipal, serverPassword );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"hnelson\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.RENEW );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long currentTime = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( currentTime + KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when renewable tickets are disallowed that requests for\n+     * RENEWABLE-OK tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testRenewableOk() throws Exception\n+    {\n+        // Deny RENEWABLE tickets in policy.\n+        config.setRenewableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.RENEWABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.RENEWABLE_OK );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + KerberosTime.WEEK );\n+        modifier.setTill( requestedEndTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+\n+\n+    /**\n+     * Tests when renewable tickets are disallowed that requests for\n+     * renewable tickets fail with the correct error message.\n+     * \n+     * @throws Exception \n+     */\n+    public void testRenewableTicket() throws Exception\n+    {\n+        // Deny RENEWABLE tickets in policy.\n+        config.setRenewableAllowed( false );\n+\n+        // Get the mutable ticket part.\n+        KerberosPrincipal clientPrincipal = new KerberosPrincipal( \"hnelson@EXAMPLE.COM\" );\n+        EncTicketPartModifier encTicketPartModifier = getTicketArchetype( clientPrincipal );\n+\n+        // Make changes to test.\n+        encTicketPartModifier.setFlag( TicketFlags.RENEWABLE );\n+\n+        // Seal the ticket for the server.\n+        KerberosPrincipal serverPrincipal = new KerberosPrincipal( \"krbtgt/EXAMPLE.COM@EXAMPLE.COM\" );\n+        String passPhrase = \"randomKey\";\n+        EncryptionKey serverKey = getEncryptionKey( serverPrincipal, passPhrase );\n+        Ticket tgt = getTicket( encTicketPartModifier, serverPrincipal, serverKey );\n+\n+        RequestBodyModifier modifier = new RequestBodyModifier();\n+        modifier.setServerName( getPrincipalName( \"ldap/ldap.example.com@EXAMPLE.COM\" ) );\n+        modifier.setRealm( \"EXAMPLE.COM\" );\n+        modifier.setEType( config.getEncryptionTypes() );\n+        modifier.setNonce( random.nextInt() );\n+\n+        KdcOptions kdcOptions = new KdcOptions();\n+        kdcOptions.set( KdcOptions.RENEWABLE );\n+        modifier.setKdcOptions( kdcOptions );\n+\n+        long now = System.currentTimeMillis();\n+\n+        KerberosTime requestedEndTime = new KerberosTime( now + 1 * KerberosTime.DAY );\n+        modifier.setTill( requestedEndTime );\n+\n+        KerberosTime requestedRenewTillTime = new KerberosTime( now + KerberosTime.WEEK / 2 );\n+        modifier.setRtime( requestedRenewTillTime );\n+\n+        RequestBody requestBody = modifier.getRequestBody();\n+        KdcRequest message = getKdcRequest( tgt, requestBody );\n+\n+        handler.messageReceived( session, message );\n+\n+        ErrorMessage error = ( ErrorMessage ) session.getMessage();\n+        assertEquals( \"KDC policy rejects request\", 12, error.getErrorCode() );\n+    }\n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/e1d020a39cd5ba602285c15c8032620cda6588ba/protocol-kerberos/src/test/java/org/apache/directory/server/kerberos/protocol/TicketGrantingPolicyTest.java",
                "sha": "71f42cf3252208166c3f998b1763f4ae8a45ff00",
                "status": "added"
            }
        ],
        "message": "Further test-driven improvements to protocol-kerberos:\no  Added 7 new tests to Authentication Service (AS) coverage.\no  Added 12 new tests to Ticket-Granting Service (TGS) coverage.\no  Added more robust (anti-NPE) checks for client addresses during ticket generation.\no  Improved comments.\no  Switched to a shorter, more encapsulated form of getting and setting options.\no  Added missing policy checks to TGS per RFC 4120.\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@560081 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/07e18b2dd2120e2e789a60fa03764770c1a050e2",
        "patched_files": [
            "GenerateTicket.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "AuthenticationPolicyTest.java",
            "TicketGrantingPolicyTest.java"
        ]
    },
    "directory-server_e37bdf2": {
        "bug_id": "directory-server_e37bdf2",
        "commit": "https://github.com/apache/directory-server/commit/e37bdf2b1f0d41b83dcda96af54a25a09adbde84",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/directory-server/blob/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/pom.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/pom.xml?ref=e37bdf2b1f0d41b83dcda96af54a25a09adbde84",
                "deletions": 0,
                "filename": "server-integ/pom.xml",
                "patch": "@@ -154,6 +154,12 @@\n       <groupId>org.apache.directory.shared</groupId>\n       <artifactId>shared-ldap-client-api</artifactId>\n     </dependency>  \n+\n+    <dependency>\n+      <groupId>org.apache.directory.shared</groupId>\n+      <artifactId>shared-dsml-engine</artifactId>\n+      <version>${org.apache.directory.shared.version}</version>\n+    </dependency>\n   </dependencies>\n \n   <build>",
                "raw_url": "https://github.com/apache/directory-server/raw/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/pom.xml",
                "sha": "c433dfaaa57d56124c06ece1610a8da464feda9d",
                "status": "modified"
            },
            {
                "additions": 107,
                "blob_url": "https://github.com/apache/directory-server/blob/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/src/test/java/org/apache/directory/dsml/engine/Dsmlv2EngineTest.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/src/test/java/org/apache/directory/dsml/engine/Dsmlv2EngineTest.java?ref=e37bdf2b1f0d41b83dcda96af54a25a09adbde84",
                "deletions": 0,
                "filename": "server-integ/src/test/java/org/apache/directory/dsml/engine/Dsmlv2EngineTest.java",
                "patch": "@@ -0,0 +1,107 @@\n+/*\n+ *   Licensed to the Apache Software Foundation (ASF) under one\n+ *   or more contributor license agreements.  See the NOTICE file\n+ *   distributed with this work for additional information\n+ *   regarding copyright ownership.  The ASF licenses this file\n+ *   to you under the Apache License, Version 2.0 (the\n+ *   \"License\"); you may not use this file except in compliance\n+ *   with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing,\n+ *   software distributed under the License is distributed on an\n+ *   \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ *   KIND, either express or implied.  See the License for the\n+ *   specific language governing permissions and limitations\n+ *   under the License.\n+ *\n+ */\n+\n+package org.apache.directory.dsml.engine;\n+\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+\n+import org.apache.directory.ldap.client.api.LdapConnection;\n+import org.apache.directory.ldap.client.api.LdapNetworkConnection;\n+import org.apache.directory.server.annotations.CreateLdapServer;\n+import org.apache.directory.server.annotations.CreateTransport;\n+import org.apache.directory.server.core.annotations.CreateDS;\n+import org.apache.directory.server.core.integ.AbstractLdapTestUnit;\n+import org.apache.directory.server.core.integ.FrameworkRunner;\n+import org.apache.directory.shared.dsmlv2.Dsmlv2ResponseParser;\n+import org.apache.directory.shared.dsmlv2.engine.Dsmlv2Engine;\n+import org.apache.directory.shared.dsmlv2.reponse.BatchResponseDsml;\n+import org.apache.directory.shared.dsmlv2.reponse.SearchResponse;\n+import org.apache.directory.shared.ldap.codec.api.LdapCodecServiceFactory;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Ignore;\n+import org.junit.Test;\n+import org.junit.runner.RunWith;\n+\n+\n+/**\n+ * Test for demonstrating the NPE generated while processing a search DSML request by Dsmlv2Engine.\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ */\n+@RunWith(FrameworkRunner.class)\n+@CreateDS(name = \"Dsmlv2EngineTest-DS\")\n+@CreateLdapServer(transports =\n+    { @CreateTransport(protocol = \"LDAP\") })\n+public class Dsmlv2EngineTest extends AbstractLdapTestUnit\n+{\n+    private LdapConnection connection;\n+\n+    private Dsmlv2Engine engine;\n+\n+\n+    @Before\n+    public void setup()\n+    {\n+        connection = new LdapNetworkConnection( \"localhost\", ldapServer.getPort() );\n+        engine = new Dsmlv2Engine( connection, \"uid=admin,ou=system\", \"secret\" );\n+    }\n+\n+\n+    @After\n+    public void unbind() throws Exception\n+    {\n+        connection.unBind();\n+        connection.close();\n+    }\n+\n+\n+    //Enable WARN level logging to see the stacktrace\n+    // e.x log4j.rootCategory=WARN, stdout\n+    @Ignore(\"Failes with an NPE at org.apache.directory.shared.ldap.codec.decorators.SearchRequestDecorator.computeLength(SearchRequestDecorator.java:939)\")\n+    @Test\n+    public void testEngineWithDefaultBlockingResponse() throws Exception\n+    {\n+        InputStream dsmlIn = getClass().getClassLoader().getResourceAsStream( \"dsml-search-req.xml\" );\n+\n+        ByteArrayOutputStream byteOut = new ByteArrayOutputStream();\n+\n+        engine.processDSML( dsmlIn, byteOut );\n+\n+        Dsmlv2ResponseParser respParser = new Dsmlv2ResponseParser( LdapCodecServiceFactory.getSingleton() );\n+        System.out.println( byteOut.toString() );\n+        respParser.setInput( byteOut.toString() );\n+\n+        respParser.parseAllResponses();\n+\n+        BatchResponseDsml batchResp = respParser.getBatchResponse();\n+\n+        assertNotNull( batchResp );\n+\n+        SearchResponse searchResp = ( SearchResponse ) batchResp.getCurrentResponse().getDecorated();\n+\n+        assertEquals( 5, searchResp.getSearchResultEntryList().size() );\n+    }\n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/src/test/java/org/apache/directory/dsml/engine/Dsmlv2EngineTest.java",
                "sha": "3a2d5cad029cf2e931a05a381320410510fb9fe4",
                "status": "added"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/directory-server/blob/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/src/test/resources/dsml-search-req.xml",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-integ/src/test/resources/dsml-search-req.xml?ref=e37bdf2b1f0d41b83dcda96af54a25a09adbde84",
                "deletions": 0,
                "filename": "server-integ/src/test/resources/dsml-search-req.xml",
                "patch": "@@ -0,0 +1,18 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+<soap-env:Envelope xmlns:soap-env=\"http://schemas.xmlsoap.org/soap/envelope/\">\n+\t<soap-env:Body>\n+\t\t<dsml:batchRequest xmlns:dsml=\"urn:oasis:names:tc:DSML:2:0:core\"\n+\t\t\txmlns:xsd=\"http://www.w3.org/2001/XMLSchema\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n+\t\t\t<searchRequest dn=\"ou=system\" scope=\"singleLevel\"\n+\t\t\t\tderefAliases=\"neverDerefAliases\" typesOnly=\"false\" >\n+\t\t\t\t<filter>\n+\t\t\t\t\t<present name=\"objectClass\">\n+\t\t\t\t\t</present>\n+\t\t\t\t</filter>\n+\t\t\t\t<attributes>\n+\t\t\t\t  <attribute name=\"*\"/>\n+\t\t\t\t</attributes>\n+\t\t\t</searchRequest>\n+\t\t</dsml:batchRequest>\n+\t</soap-env:Body>\n+</soap-env:Envelope>\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/directory-server/raw/e37bdf2b1f0d41b83dcda96af54a25a09adbde84/server-integ/src/test/resources/dsml-search-req.xml",
                "sha": "17a32c27e404b4ed7c16b0f8c76d9aa5836df385",
                "status": "added"
            }
        ],
        "message": "o added a test to for DSML engine to demonstrate an NPE raised in SearchRequestDecorator while processing a DSML search request\no added a dependency on dsml-engine and added the required test resource\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@1091706 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/3ad028dad1b498fe384ea2da712e595c4d62c6a4",
        "patched_files": [
            "pom.xml",
            "dsml-search-req.xml"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "Dsmlv2EngineTest.java"
        ]
    },
    "directory-server_e8996a8": {
        "bug_id": "directory-server_e8996a8",
        "commit": "https://github.com/apache/directory-server/commit/e8996a8b9bf820dc7981f3b91ce860e7c2189965",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/directory-server/blob/e8996a8b9bf820dc7981f3b91ce860e7c2189965/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java?ref=e8996a8b9bf820dc7981f3b91ce860e7c2189965",
                "deletions": 7,
                "filename": "core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "patch": "@@ -39,7 +39,6 @@\n import org.apache.directory.ldap.client.api.message.ModifyResponse;\n import org.apache.directory.server.annotations.CreateLdapServer;\n import org.apache.directory.server.annotations.CreateTransport;\n-import org.apache.directory.server.core.annotations.CreateDS;\n import org.apache.directory.server.core.authn.AuthenticationInterceptor;\n import org.apache.directory.server.core.authn.PasswordPolicyConfiguration;\n import org.apache.directory.server.core.authn.PasswordUtil;\n@@ -54,12 +53,14 @@\n import org.apache.directory.shared.ldap.entry.DefaultEntry;\n import org.apache.directory.shared.ldap.entry.Entry;\n import org.apache.directory.shared.ldap.entry.EntryAttribute;\n+import org.apache.directory.shared.ldap.exception.LdapException;\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.message.control.Control;\n import org.apache.directory.shared.ldap.name.DN;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.junit.After;\n import org.junit.Before;\n+import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n \n@@ -75,7 +76,6 @@\n         @CreateTransport( protocol = \"LDAP\" ), \n         @CreateTransport( protocol = \"LDAPS\" ) \n     })\n-@CreateDS( enableChangeLog=false )\n public class PasswordPolicyTest extends AbstractLdapTestUnit\n {\n     private PasswordPolicyConfiguration policyConfig;\n@@ -86,7 +86,7 @@\n \n \n     @Before\n-    public void setPwdPolicy()\n+    public void setPwdPolicy() throws LdapException\n     {\n         policyConfig = new PasswordPolicyConfiguration();\n         \n@@ -104,6 +104,8 @@ public void setPwdPolicy()\n         AuthenticationInterceptor authInterceptor = ( AuthenticationInterceptor ) service\n             .getInterceptor( AuthenticationInterceptor.class.getName() );\n         authInterceptor.setPwdPolicyConfig( policyConfig );\n+        \n+        authInterceptor.loadPwdPolicyStateAtributeTypes();\n     }\n \n \n@@ -191,7 +193,7 @@ public void testAddUserWithHashedPwd() throws Exception\n         assertNotNull( userConnection );\n         assertTrue( userConnection.isAuthenticated() );\n     }\n-    \n+\n     \n     @Test\n     public void testPwdMinAge() throws Exception\n@@ -200,11 +202,11 @@ public void testPwdMinAge() throws Exception\n         \n         LdapConnection connection = getAdminNetworkConnection( ldapServer );\n         \n-        DN userDn = new DN( \"cn=user,ou=system\" );\n+        DN userDn = new DN( \"cn=userMinAge,ou=system\" );\n         Entry userEntry = new DefaultEntry( userDn );\n         userEntry.add( SchemaConstants.OBJECT_CLASS, SchemaConstants.PERSON_OC );\n-        userEntry.add( SchemaConstants.CN_AT, \"user\" );\n-        userEntry.add( SchemaConstants.SN_AT, \"user_sn\" );\n+        userEntry.add( SchemaConstants.CN_AT, \"userMinAge\" );\n+        userEntry.add( SchemaConstants.SN_AT, \"userMinAge_sn\" );\n         userEntry.add( SchemaConstants.USER_PASSWORD_AT, \"12345\".getBytes() );\n \n         AddRequest addReq = new AddRequest( userEntry );",
                "raw_url": "https://github.com/apache/directory-server/raw/e8996a8b9bf820dc7981f3b91ce860e7c2189965/core-integ/src/test/java/org/apache/directory/server/core/authn/ppolicy/PasswordPolicyTest.java",
                "sha": "23368f40275fc38c9c43c81e15d14214e882f236",
                "status": "modified"
            },
            {
                "additions": 152,
                "blob_url": "https://github.com/apache/directory-server/blob/e8996a8b9bf820dc7981f3b91ce860e7c2189965/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "changes": 229,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java?ref=e8996a8b9bf820dc7981f3b91ce860e7c2189965",
                "deletions": 77,
                "filename": "core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "patch": "@@ -30,6 +30,9 @@\n import static org.apache.directory.shared.ldap.constants.PasswordPolicySchemaConstants.PWD_HISTORY_AT;\n import static org.apache.directory.shared.ldap.constants.PasswordPolicySchemaConstants.PWD_LAST_SUCCESS_AT;\n import static org.apache.directory.shared.ldap.constants.PasswordPolicySchemaConstants.PWD_RESET_AT;\n+import static org.apache.directory.shared.ldap.entry.ModificationOperation.ADD_ATTRIBUTE;\n+import static org.apache.directory.shared.ldap.entry.ModificationOperation.REMOVE_ATTRIBUTE;\n+import static org.apache.directory.shared.ldap.entry.ModificationOperation.REPLACE_ATTRIBUTE;\n \n import java.util.ArrayList;\n import java.util.Arrays;\n@@ -48,6 +51,11 @@\n import org.apache.directory.server.core.DefaultCoreSession;\n import org.apache.directory.server.core.DirectoryService;\n import org.apache.directory.server.core.LdapPrincipal;\n+import org.apache.directory.server.core.authz.AciAuthorizationInterceptor;\n+import org.apache.directory.server.core.authz.DefaultAuthorizationInterceptor;\n+import org.apache.directory.server.core.collective.CollectiveAttributeInterceptor;\n+import org.apache.directory.server.core.event.EventInterceptor;\n+import org.apache.directory.server.core.exception.ExceptionInterceptor;\n import org.apache.directory.server.core.filtering.EntryFilteringCursor;\n import org.apache.directory.server.core.interceptor.BaseInterceptor;\n import org.apache.directory.server.core.interceptor.Interceptor;\n@@ -67,6 +75,11 @@\n import org.apache.directory.server.core.interceptor.context.RenameOperationContext;\n import org.apache.directory.server.core.interceptor.context.SearchOperationContext;\n import org.apache.directory.server.core.interceptor.context.UnbindOperationContext;\n+import org.apache.directory.server.core.normalization.NormalizationInterceptor;\n+import org.apache.directory.server.core.operational.OperationalAttributeInterceptor;\n+import org.apache.directory.server.core.schema.SchemaInterceptor;\n+import org.apache.directory.server.core.subtree.SubentryInterceptor;\n+import org.apache.directory.server.core.trigger.TriggerInterceptor;\n import org.apache.directory.server.i18n.I18n;\n import org.apache.directory.shared.ldap.codec.controls.ppolicy.PasswordPolicyErrorEnum;\n import org.apache.directory.shared.ldap.codec.controls.ppolicy.PasswordPolicyRequestControl;\n@@ -90,13 +103,13 @@\n import org.apache.directory.shared.ldap.exception.LdapUnwillingToPerformException;\n import org.apache.directory.shared.ldap.message.ResultCodeEnum;\n import org.apache.directory.shared.ldap.name.DN;\n+import org.apache.directory.shared.ldap.schema.AttributeType;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n import org.apache.directory.shared.ldap.util.DateUtils;\n import org.apache.directory.shared.ldap.util.StringTools;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-\n /**\n  * An {@link Interceptor} that authenticates users.\n  *\n@@ -122,11 +135,46 @@\n \n     private CoreSession adminSession;\n \n-    private boolean pwdPolicyEnabled = false;\n-\n     private Set<DN> pwdResetSet = new HashSet<DN>();\n \n+    // pwdpolicy state attribute types\n+    private AttributeType AT_PWD_RESET;\n+    \n+    private AttributeType AT_PWD_CHANGED_TIME;\n+    \n+    private AttributeType AT_PWD_HISTORY;\n+\n+    private AttributeType AT_PWD_FAILURE_TIME;\n+    \n+    private AttributeType AT_PWD_ACCOUNT_LOCKED_TIME;\n+    \n+    private AttributeType AT_PWD_LAST_SUCCESS;\n+    \n+    private AttributeType AT_PWD_GRACE_USE_TIME;\n \n+    /**\n+     * the set of interceptors we should *not* go through when pwdpolicy state information is being updated\n+     */\n+    private static final Collection<String> BYPASS_INTERCEPTORS;\n+\n+    static\n+    {\n+        Set<String> c = new HashSet<String>();\n+        c.add( NormalizationInterceptor.class.getName() );\n+        c.add( AuthenticationInterceptor.class.getName() );\n+        c.add( AciAuthorizationInterceptor.class.getName() );\n+        c.add( DefaultAuthorizationInterceptor.class.getName() );\n+        c.add( ExceptionInterceptor.class.getName() );\n+        c.add( OperationalAttributeInterceptor.class.getName() );\n+        c.add( SchemaInterceptor.class.getName() );\n+        c.add( SubentryInterceptor.class.getName() );\n+        c.add( CollectiveAttributeInterceptor.class.getName() );\n+        c.add( EventInterceptor.class.getName() );\n+        c.add( TriggerInterceptor.class.getName() );\n+        BYPASS_INTERCEPTORS = Collections.unmodifiableCollection( c );\n+    }\n+\n+    \n     /**\n      * Creates an authentication service interceptor.\n      */\n@@ -146,11 +194,8 @@ public void init( DirectoryService directoryService ) throws LdapException\n \n         adminSession = directoryService.getAdminSession();\n \n-        if ( policyConfig != null )\n-        {\n-            pwdPolicyEnabled = true;\n-        }\n-\n+        loadPwdPolicyStateAtributeTypes();\n+        \n         if ( authenticators == null )\n         {\n             setDefaultAuthenticators();\n@@ -215,7 +260,6 @@ public void destroy()\n     private void register( Authenticator authenticator, DirectoryService directoryService ) throws LdapException\n     {\n         authenticator.init( directoryService );\n-        authenticator.setPwdPolicyConfig( policyConfig );\n \n         Collection<Authenticator> authenticatorList = getAuthenticators( authenticator.getAuthenticatorType() );\n \n@@ -303,24 +347,21 @@ public void add( NextInterceptor next, AddOperationContext addContext ) throws L\n             String pwdChangedTime = DateUtils.getGeneralizedTime();\n             if( ( policyConfig.getPwdMinAge() > 0 ) || ( policyConfig.getPwdMaxAge() > 0 ) )\n             {\n-                EntryAttribute pwdChangedTimeAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_CHANGED_TIME_AT ) );\n+                EntryAttribute pwdChangedTimeAt = new DefaultEntryAttribute( AT_PWD_CHANGED_TIME );\n                 pwdChangedTimeAt.add( pwdChangedTime );\n                 entry.add( pwdChangedTimeAt );\n             }\n \n             if ( policyConfig.isPwdMustChange() && addContext.getSession().isAnAdministrator() )\n             {\n-                EntryAttribute pwdMustChangeAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_RESET_AT ) );\n-                pwdMustChangeAt.add( \"TRUE\" );\n-                entry.add( pwdMustChangeAt );\n+                EntryAttribute pwdResetAt = new DefaultEntryAttribute( AT_PWD_RESET );\n+                pwdResetAt.add( \"TRUE\" );\n+                entry.add( pwdResetAt );\n             }\n \n             if ( policyConfig.getPwdInHistory() > 0 )\n             {\n-                EntryAttribute pwdHistoryAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_HISTORY_AT ) );\n+                EntryAttribute pwdHistoryAt = new DefaultEntryAttribute( AT_PWD_HISTORY );\n                 byte[] pwdHistoryVal = new PasswordHistory( pwdChangedTime, userPassword.get() ).getHistoryValue();\n                 pwdHistoryAt.add( pwdHistoryVal );\n                 entry.add( pwdHistoryAt );\n@@ -567,14 +608,14 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n \n             pwdHistoryAt = new DefaultEntryAttribute( pwdHistoryAt.getAttributeType() );\n             pwdHistoryAt.add( newPwdHist.getHistoryValue() );\n-            pwdAddHistMod = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE, pwdHistoryAt );\n+            pwdAddHistMod = new DefaultModification( ADD_ATTRIBUTE, pwdHistoryAt );\n \n             if ( pwdHistSet.size() > histSize )\n             {\n                 pwdHistoryAt = new DefaultEntryAttribute( pwdHistoryAt.getAttributeType() );\n                 PasswordHistory remPwdHist = ( PasswordHistory ) pwdHistSet.toArray()[histSize - 1];\n                 pwdHistoryAt.add( remPwdHist.getHistoryValue() );\n-                pwdRemHistMod = new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE, pwdHistoryAt );\n+                pwdRemHistMod = new DefaultModification( REMOVE_ATTRIBUTE, pwdHistoryAt );\n             }\n         }\n \n@@ -586,11 +627,9 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n             List<Modification> mods = new ArrayList<Modification>();\n             if ( ( policyConfig.getPwdMinAge() > 0 ) || ( policyConfig.getPwdMaxAge() > 0 ) )\n             {\n-                EntryAttribute pwdChangedTimeAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_CHANGED_TIME_AT ) );\n+                EntryAttribute pwdChangedTimeAt = new DefaultEntryAttribute( AT_PWD_CHANGED_TIME );\n                 pwdChangedTimeAt.add( pwdChangedTime );\n-                Modification pwdChangedTimeMod = new DefaultModification( ModificationOperation.REPLACE_ATTRIBUTE,\n-                    pwdChangedTimeAt );\n+                Modification pwdChangedTimeMod = new DefaultModification( REPLACE_ATTRIBUTE, pwdChangedTimeAt );\n                 mods.add( pwdChangedTimeMod );\n             }\n \n@@ -607,19 +646,17 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n             boolean removeFromPwdResetSet = false;\n             if ( policyConfig.isPwdMustChange() )\n             {\n-                EntryAttribute pwdMustChangeAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_RESET_AT ) );\n+                EntryAttribute pwdMustChangeAt = new DefaultEntryAttribute( AT_PWD_RESET );\n                 Modification pwdMustChangeMod = null;\n \n                 if ( modifyContext.getSession().isAnAdministrator() )\n                 {\n                     pwdMustChangeAt.add( \"TRUE\" );\n-                    pwdMustChangeMod = new DefaultModification( ModificationOperation.REPLACE_ATTRIBUTE,\n-                        pwdMustChangeAt );\n+                    pwdMustChangeMod = new DefaultModification( REPLACE_ATTRIBUTE, pwdMustChangeAt );\n                 }\n                 else\n                 {\n-                    pwdMustChangeMod = new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE, pwdMustChangeAt );\n+                    pwdMustChangeMod = new DefaultModification( REMOVE_ATTRIBUTE, pwdMustChangeAt );\n                     removeFromPwdResetSet = true;\n                 }\n \n@@ -629,17 +666,17 @@ public void modify( NextInterceptor next, ModifyOperationContext modifyContext )\n             EntryAttribute pwdFailureTimeAt = entry.get( PWD_FAILURE_TIME_AT );\n             if ( pwdFailureTimeAt != null )\n             {\n-                mods.add( new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE, pwdFailureTimeAt ) );\n+                mods.add( new DefaultModification( REMOVE_ATTRIBUTE, pwdFailureTimeAt ) );\n             }\n \n             EntryAttribute pwdGraceUseTimeAt = entry.get( PWD_GRACE_USE_TIME_AT );\n             if ( pwdGraceUseTimeAt != null )\n             {\n-                mods.add( new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE, pwdGraceUseTimeAt ) );\n+                mods.add( new DefaultModification( REMOVE_ATTRIBUTE, pwdGraceUseTimeAt ) );\n             }\n \n-            directoryService.getAdminSession().modify( modifyContext.getDn(), mods );\n-\n+//            directoryService.getAdminSession().modify( modifyContext.getDn(), mods );\n+            \n             if ( removeFromPwdResetSet )\n             {\n                 pwdResetSet.remove( userDn );\n@@ -804,6 +841,8 @@ public void bind( NextInterceptor next, BindOperationContext bindContext ) throw\n         {\n             try\n             {\n+                authenticator.setPwdPolicyConfig( policyConfig );\n+                \n                 // perform the authentication\n                 LdapPrincipal principal = authenticator.authenticate( bindContext );\n \n@@ -863,13 +902,12 @@ public void bind( NextInterceptor next, BindOperationContext bindContext ) throw\n                 LOG.info( \"Cannot bind to the server \" );\n             }\n \n-            if ( pwdPolicyEnabled )\n+            if ( policyConfig != null )\n             {\n                 EntryAttribute pwdFailTimeAt = bindContext.getEntry().get( PWD_FAILURE_TIME_AT );\n                 if ( pwdFailTimeAt == null )\n                 {\n-                    pwdFailTimeAt = new DefaultEntryAttribute(\n-                        schemaManager.lookupAttributeTypeRegistry( PWD_FAILURE_TIME_AT ) );\n+                    pwdFailTimeAt = new DefaultEntryAttribute( AT_PWD_FAILURE_TIME );\n                 }\n                 else\n                 {\n@@ -878,8 +916,7 @@ public void bind( NextInterceptor next, BindOperationContext bindContext ) throw\n \n                 String failureTime = DateUtils.getGeneralizedTime();\n                 pwdFailTimeAt.add( failureTime );\n-                Modification pwdFailTimeMod = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE,\n-                    pwdFailTimeAt );\n+                Modification pwdFailTimeMod = new DefaultModification( ADD_ATTRIBUTE, pwdFailTimeAt );\n \n                 List<Modification> mods = new ArrayList<Modification>();\n                 mods.add( pwdFailTimeMod );\n@@ -888,11 +925,9 @@ public void bind( NextInterceptor next, BindOperationContext bindContext ) throw\n \n                 if ( policyConfig.isPwdLockout() && ( numFailures >= policyConfig.getPwdMaxFailure() ) )\n                 {\n-                    EntryAttribute pwdAccountLockedTimeAt = new DefaultEntryAttribute(\n-                        schemaManager.lookupAttributeTypeRegistry( PWD_ACCOUNT_LOCKED_TIME_AT ) );\n+                    EntryAttribute pwdAccountLockedTimeAt = new DefaultEntryAttribute( AT_PWD_ACCOUNT_LOCKED_TIME );\n                     pwdAccountLockedTimeAt.add( failureTime );\n-                    Modification pwdAccountLockedMod = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE,\n-                        pwdAccountLockedTimeAt );\n+                    Modification pwdAccountLockedMod = new DefaultModification( ADD_ATTRIBUTE, pwdAccountLockedTimeAt );\n                     mods.add( pwdAccountLockedMod );\n \n                     pwdRespCtrl.setPasswordPolicyError( PasswordPolicyErrorEnum.ACCOUNT_LOCKED );\n@@ -918,66 +953,80 @@ else if ( policyConfig.getPwdMinDelay() > 0 )\n                     }\n                 }\n \n-                adminSession.modify( dn, Collections.singletonList( pwdFailTimeMod ) );\n+                //adminSession.modify( dn, Collections.singletonList( pwdFailTimeMod ) );\n+                ModifyOperationContext bindModCtx = new ModifyOperationContext( adminSession );\n+                bindModCtx.setByPassed( BYPASS_INTERCEPTORS );\n+                bindModCtx.setDn( dn );\n+                bindModCtx.setModItems( Collections.singletonList( pwdFailTimeMod ) );\n+                directoryService.getOperationManager().modify( bindModCtx );\n             }\n \n             String upDn = ( dn == null ? \"\" : dn.getName() );\n             throw new LdapAuthenticationException( I18n.err( I18n.ERR_229, upDn ) );\n         }\n-        else if ( pwdPolicyEnabled )\n+        else if ( policyConfig != null )\n         {\n             List<Modification> mods = new ArrayList<Modification>();\n \n             if ( policyConfig.getPwdMaxIdle() > 0 )\n             {\n-                EntryAttribute pwdLastSuccesTimeAt = new DefaultEntryAttribute(\n-                    schemaManager.lookupAttributeTypeRegistry( PWD_LAST_SUCCESS_AT ) );\n+                EntryAttribute pwdLastSuccesTimeAt = new DefaultEntryAttribute( AT_PWD_LAST_SUCCESS );\n                 pwdLastSuccesTimeAt.add( DateUtils.getGeneralizedTime() );\n-                Modification pwdLastSuccesTimeMod = new DefaultModification( ModificationOperation.REPLACE_ATTRIBUTE,\n-                    pwdLastSuccesTimeAt );\n+                Modification pwdLastSuccesTimeMod = new DefaultModification( REPLACE_ATTRIBUTE, pwdLastSuccesTimeAt );\n                 mods.add( pwdLastSuccesTimeMod );\n             }\n \n-            EntryAttribute pwdFailTimeAt = new DefaultEntryAttribute(\n-                schemaManager.lookupAttributeTypeRegistry( PWD_FAILURE_TIME_AT ) );\n-            Modification pwdFailTimeMod = new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE,\n-                pwdFailTimeAt );\n-            mods.add( pwdFailTimeMod );\n+            EntryAttribute pwdFailTimeAt = userEntry.get( AT_PWD_FAILURE_TIME );\n+            if( pwdFailTimeAt != null )\n+            {\n+                Modification pwdFailTimeMod = new DefaultModification( REMOVE_ATTRIBUTE, pwdFailTimeAt );\n+                mods.add( pwdFailTimeMod );\n+            }\n \n-            EntryAttribute pwdAccLockedTimeAt = new DefaultEntryAttribute(\n-                schemaManager.lookupAttributeTypeRegistry( PWD_ACCOUNT_LOCKED_TIME_AT ) );\n-            Modification pwdAccLockedTimeMod = new DefaultModification( ModificationOperation.REMOVE_ATTRIBUTE,\n-                pwdAccLockedTimeAt );\n-            mods.add( pwdAccLockedTimeMod );\n+            EntryAttribute pwdAccLockedTimeAt = userEntry.get( AT_PWD_ACCOUNT_LOCKED_TIME );\n+            if( pwdAccLockedTimeAt != null )\n+            {\n+                Modification pwdAccLockedTimeMod = new DefaultModification( REMOVE_ATTRIBUTE, pwdAccLockedTimeAt );\n+                mods.add( pwdAccLockedTimeMod );\n+            }\n \n             // checking the expiration time *after* performing authentication, do we need to care about millisecond precision?\n             if ( ( policyConfig.getPwdMaxAge() > 0 ) && ( policyConfig.getPwdGraceAuthNLimit() > 0 ) )\n             {\n                 EntryAttribute pwdChangeTimeAttr = userEntry.get( PWD_CHANGED_TIME_AT );\n-                boolean expired = PasswordUtil\n-                    .isPwdExpired( pwdChangeTimeAttr.getString(), policyConfig.getPwdMaxAge() );\n-                if ( expired )\n+                if( pwdChangeTimeAttr != null )\n                 {\n-                    EntryAttribute pwdGraceUseAttr = userEntry.get( PWD_GRACE_USE_TIME_AT );\n-                    if ( pwdGraceUseAttr != null )\n-                    {\n-                        pwdRespCtrl.setGraceAuthNsRemaining( policyConfig.getPwdGraceAuthNLimit()\n-                            - ( pwdGraceUseAttr.size() + 1 ) );\n-                    }\n-                    else\n+                    boolean expired = PasswordUtil\n+                    .isPwdExpired( pwdChangeTimeAttr.getString(), policyConfig.getPwdMaxAge() );\n+                    if ( expired )\n                     {\n-                        pwdGraceUseAttr = new DefaultEntryAttribute(\n-                            schemaManager.lookupAttributeTypeRegistry( PWD_GRACE_USE_TIME_AT ) );\n+                        EntryAttribute pwdGraceUseAttr = userEntry.get( PWD_GRACE_USE_TIME_AT );\n+                        if ( pwdGraceUseAttr != null )\n+                        {\n+                            pwdRespCtrl.setGraceAuthNsRemaining( policyConfig.getPwdGraceAuthNLimit()\n+                                - ( pwdGraceUseAttr.size() + 1 ) );\n+                        }\n+                        else\n+                        {\n+                            pwdGraceUseAttr = new DefaultEntryAttribute( AT_PWD_GRACE_USE_TIME );\n+                        }\n+                        \n+                        pwdGraceUseAttr.add( DateUtils.getGeneralizedTime() );\n+                        Modification pwdGraceUseMod = new DefaultModification( ADD_ATTRIBUTE, pwdGraceUseAttr );\n+                        mods.add( pwdGraceUseMod );\n                     }\n-\n-                    pwdGraceUseAttr.add( DateUtils.getGeneralizedTime() );\n-                    Modification pwdGraceUseMod = new DefaultModification( ModificationOperation.ADD_ATTRIBUTE,\n-                        pwdGraceUseAttr );\n-                    mods.add( pwdGraceUseMod );\n                 }\n             }\n \n-            adminSession.modify( dn, mods );\n+            if( !mods.isEmpty() )\n+            {\n+                //adminSession.modify( dn, mods );\n+                ModifyOperationContext bindModCtx = new ModifyOperationContext( adminSession );\n+                bindModCtx.setByPassed( BYPASS_INTERCEPTORS );\n+                bindModCtx.setDn( dn );\n+                bindModCtx.setModItems( mods );\n+                directoryService.getOperationManager().modify( bindModCtx );\n+            }\n \n             if ( isPPolicyReqCtrlPresent )\n             {\n@@ -1017,6 +1066,32 @@ public void setPwdPolicyConfig( PasswordPolicyConfiguration policyConfig )\n         this.policyConfig = policyConfig;\n     }\n \n+    public void loadPwdPolicyStateAtributeTypes() throws LdapException\n+    {\n+        if ( policyConfig != null )\n+        {\n+            AT_PWD_RESET = schemaManager.lookupAttributeTypeRegistry( PWD_RESET_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_RESET );\n+            \n+            AT_PWD_CHANGED_TIME = schemaManager.lookupAttributeTypeRegistry( PWD_CHANGED_TIME_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_CHANGED_TIME );\n+            \n+            AT_PWD_HISTORY = schemaManager.lookupAttributeTypeRegistry( PWD_HISTORY_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_HISTORY );\n+            \n+            AT_PWD_FAILURE_TIME = schemaManager.lookupAttributeTypeRegistry( PWD_FAILURE_TIME_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_FAILURE_TIME );\n+            \n+            AT_PWD_ACCOUNT_LOCKED_TIME = schemaManager.lookupAttributeTypeRegistry( PWD_ACCOUNT_LOCKED_TIME_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_ACCOUNT_LOCKED_TIME );\n+            \n+            AT_PWD_LAST_SUCCESS = schemaManager.lookupAttributeTypeRegistry( PWD_LAST_SUCCESS_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_LAST_SUCCESS );\n+            \n+            AT_PWD_GRACE_USE_TIME = schemaManager.lookupAttributeTypeRegistry( PWD_GRACE_USE_TIME_AT );\n+            PWD_POLICY_STATE_ATTRIBUTE_TYPES.add( AT_PWD_GRACE_USE_TIME );\n+        }\n+    }\n \n     // ---------- private methods ----------------\n \n@@ -1261,11 +1336,11 @@ private PwdModDetailsHolder getPwdModDetails( ModifyOperationContext modifyConte\n                 pwdModDetails.setPwdModPresent( true );\n                 ModificationOperation op = m.getOperation();\n \n-                if ( op == ModificationOperation.REMOVE_ATTRIBUTE )\n+                if ( op == REMOVE_ATTRIBUTE )\n                 {\n                     pwdModDetails.setDelete( true );\n                 }\n-                else if ( op == ModificationOperation.REPLACE_ATTRIBUTE || op == ModificationOperation.ADD_ATTRIBUTE )\n+                else if ( op == REPLACE_ATTRIBUTE || op == ADD_ATTRIBUTE )\n                 {\n                     pwdModDetails.setAddOrReplace( true );\n                     pwdModDetails.setNewPwd( at.getBytes() );",
                "raw_url": "https://github.com/apache/directory-server/raw/e8996a8b9bf820dc7981f3b91ce860e7c2189965/core/src/main/java/org/apache/directory/server/core/authn/AuthenticationInterceptor.java",
                "sha": "04c6657edb524083ed5d82424806870d4588a0b2",
                "status": "modified"
            }
        ],
        "message": "o removed many redundant AT lookups\no fixed some NPE bugs\no used the ModifyOperationContext to bypass the interceptor chain when the pwdpolicy state information needs to be updated\no removed the @CreateDS to use a default DS instance with changelog enabled\no @Ignored a test \n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@964358 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/b6c451e6401b5b3689be330f04ef4e3978859985",
        "patched_files": [
            "AuthenticationInterceptor.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "PasswordPolicyTest.java"
        ]
    },
    "directory-server_f042e15": {
        "bug_id": "directory-server_f042e15",
        "commit": "https://github.com/apache/directory-server/commit/f042e1564af6dcff28640fce18ff32b44c71482a",
        "file": [
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "changes": 110,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 55,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "patch": "@@ -35,7 +35,6 @@\n import org.apache.ldap.common.aci.ACIItem;\n import org.apache.ldap.common.exception.LdapNamingException;\n import org.apache.ldap.common.message.ResultCodeEnum;\n-import org.apache.ldap.common.util.NamespaceTools;\n \n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -524,7 +523,7 @@ private void checkLookupAccess( NextInterceptor next, LdapPrincipal user, Name d\n \n     public Attributes lookup( NextInterceptor next, Name dn, String[] attrIds ) throws NamingException\n     {\n-        Attributes entry = nexus.lookup( dn, attrIds );\n+        Attributes entry = nexus.lookup( dn );\n         LdapPrincipal user = ( ( ServerContext ) InvocationStack.getInstance().peek().getCaller() ).getPrincipal();\n \n         if ( user.getName().equalsIgnoreCase( DirectoryPartitionNexus.ADMIN_PRINCIPAL ) || ! enabled )\n@@ -579,32 +578,32 @@ public void modifyRn( NextInterceptor next, Name name, String newRn, boolean del\n         engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(), name, null,\n                 null, Collections.singleton( MicroOperation.RENAME ), tuples, entry );\n \n-        if ( deleteOldRn )\n-        {\n-            String oldRn = name.get( name.size() - 1 );\n-            if ( NamespaceTools.hasCompositeComponents( oldRn ) )\n-            {\n-                String[] comps = NamespaceTools.getCompositeComponents( oldRn );\n-                for ( int ii = 0; ii < comps.length; ii++ )\n-                {\n-                    String id = NamespaceTools.getRdnAttribute( comps[ii] );\n-                    String value = NamespaceTools.getRdnValue( comps[ii] );\n-                    engine.checkPermission( next, userGroups, user.getJndiName(),\n-                            user.getAuthenticationLevel(), name, id,\n-                            value, Collections.singleton( MicroOperation.REMOVE ),\n-                            tuples, entry );\n-                }\n-            }\n-            else\n-            {\n-                String id = NamespaceTools.getRdnAttribute( oldRn );\n-                String value = NamespaceTools.getRdnValue( oldRn );\n-                engine.checkPermission( next, userGroups, user.getJndiName(),\n-                        user.getAuthenticationLevel(), name, id,\n-                        value, Collections.singleton( MicroOperation.REMOVE ),\n-                        tuples, entry );\n-            }\n-        }\n+//        if ( deleteOldRn )\n+//        {\n+//            String oldRn = name.get( name.size() - 1 );\n+//            if ( NamespaceTools.hasCompositeComponents( oldRn ) )\n+//            {\n+//                String[] comps = NamespaceTools.getCompositeComponents( oldRn );\n+//                for ( int ii = 0; ii < comps.length; ii++ )\n+//                {\n+//                    String id = NamespaceTools.getRdnAttribute( comps[ii] );\n+//                    String value = NamespaceTools.getRdnValue( comps[ii] );\n+//                    engine.checkPermission( next, userGroups, user.getJndiName(),\n+//                            user.getAuthenticationLevel(), name, id,\n+//                            value, Collections.singleton( MicroOperation.REMOVE ),\n+//                            tuples, entry );\n+//                }\n+//            }\n+//            else\n+//            {\n+//                String id = NamespaceTools.getRdnAttribute( oldRn );\n+//                String value = NamespaceTools.getRdnValue( oldRn );\n+//                engine.checkPermission( next, userGroups, user.getJndiName(),\n+//                        user.getAuthenticationLevel(), name, id,\n+//                        value, Collections.singleton( MicroOperation.REMOVE ),\n+//                        tuples, entry );\n+//            }\n+//        }\n \n         next.modifyRn( name, newRn, deleteOldRn );\n         tupleCache.subentryRenamed( name, newName );\n@@ -635,8 +634,9 @@ public void move( NextInterceptor next, Name oriChildName, Name newParentName, S\n         addSubentryAciTuples( tuples, oriChildName, entry );\n \n         Collection perms = new HashSet();\n-        perms.add( MicroOperation.RENAME );\n+        perms.add( MicroOperation.IMPORT );\n         perms.add( MicroOperation.EXPORT );\n+        perms.add( MicroOperation.RENAME );\n         engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(),\n                 oriChildName, null, null, perms, tuples, entry );\n \n@@ -647,32 +647,32 @@ public void move( NextInterceptor next, Name oriChildName, Name newParentName, S\n         engine.checkPermission( next, userGroups, user.getJndiName(), user.getAuthenticationLevel(),\n                 oriChildName, null, null, Collections.singleton( MicroOperation.IMPORT ), tuples, entry );\n \n-        if ( deleteOldRn )\n-        {\n-            String oldRn = oriChildName.get( oriChildName.size() - 1 );\n-            if ( NamespaceTools.hasCompositeComponents( oldRn ) )\n-            {\n-                String[] comps = NamespaceTools.getCompositeComponents( oldRn );\n-                for ( int ii = 0; ii < comps.length; ii++ )\n-                {\n-                    String id = NamespaceTools.getRdnAttribute( comps[ii] );\n-                    String value = NamespaceTools.getRdnValue( comps[ii] );\n-                    engine.checkPermission( next, userGroups, user.getJndiName(),\n-                            user.getAuthenticationLevel(), oriChildName, id,\n-                            value, Collections.singleton( MicroOperation.REMOVE ),\n-                            tuples, entry );\n-                }\n-            }\n-            else\n-            {\n-                String id = NamespaceTools.getRdnAttribute( oldRn );\n-                String value = NamespaceTools.getRdnValue( oldRn );\n-                engine.checkPermission( next, userGroups, user.getJndiName(),\n-                        user.getAuthenticationLevel(), oriChildName, id,\n-                        value, Collections.singleton( MicroOperation.REMOVE ),\n-                        tuples, entry );\n-            }\n-        }\n+//        if ( deleteOldRn )\n+//        {\n+//            String oldRn = oriChildName.get( oriChildName.size() - 1 );\n+//            if ( NamespaceTools.hasCompositeComponents( oldRn ) )\n+//            {\n+//                String[] comps = NamespaceTools.getCompositeComponents( oldRn );\n+//                for ( int ii = 0; ii < comps.length; ii++ )\n+//                {\n+//                    String id = NamespaceTools.getRdnAttribute( comps[ii] );\n+//                    String value = NamespaceTools.getRdnValue( comps[ii] );\n+//                    engine.checkPermission( next, userGroups, user.getJndiName(),\n+//                            user.getAuthenticationLevel(), oriChildName, id,\n+//                            value, Collections.singleton( MicroOperation.REMOVE ),\n+//                            tuples, entry );\n+//                }\n+//            }\n+//            else\n+//            {\n+//                String id = NamespaceTools.getRdnAttribute( oldRn );\n+//                String value = NamespaceTools.getRdnValue( oldRn );\n+//                engine.checkPermission( next, userGroups, user.getJndiName(),\n+//                        user.getAuthenticationLevel(), oriChildName, id,\n+//                        value, Collections.singleton( MicroOperation.REMOVE ),\n+//                        tuples, entry );\n+//            }\n+//        }\n \n         next.move( oriChildName, newParentName, newRn, deleteOldRn );\n         tupleCache.subentryRenamed( oriChildName, newName );",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/AuthorizationService.java",
                "sha": "e60115a8b31bf91b4d12d5220946ba79b1b60b05",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/GroupCache.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/GroupCache.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/GroupCache.java",
                "patch": "@@ -132,6 +132,21 @@ private Attribute getMemberAttribute( Attributes entry )\n     {\n         Attribute oc = entry.get( OC_ATTR );\n \n+        if ( oc == null )\n+        {\n+            if ( entry.get( MEMBER_ATTR ) != null )\n+            {\n+                return entry.get( MEMBER_ATTR );\n+            }\n+\n+            if ( entry.get( UNIQUEMEMBER_ATTR ) != null )\n+            {\n+                return entry.get( UNIQUEMEMBER_ATTR );\n+            }\n+\n+            return null;\n+        }\n+\n         if ( oc.contains( GROUPOFNAMES_OC ) )\n         {\n             return entry.get( MEMBER_ATTR );\n@@ -320,7 +335,7 @@ public void groupModified( Name name, ModificationItem[] mods, Attributes entry\n      */\n     public void groupModified( Name name, int modOp, Attributes mods, Attributes entry ) throws NamingException\n     {\n-        Attribute members = getMemberAttribute( entry );\n+        Attribute members = getMemberAttribute( mods );\n \n         if ( members == null )\n         {\n@@ -353,6 +368,12 @@ public Set getGroups( String member ) throws NamingException\n         {\n             String group = ( String ) list.next();\n             Set members = ( Set ) groups.get( group );\n+\n+            if ( members == null )\n+            {\n+                continue;\n+            }\n+\n             if ( members.contains( member ) )\n             {\n                 if ( memberGroups == null )",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/GroupCache.java",
                "sha": "7279bf8f4717837c86b6828b1f7eec6464099b09",
                "status": "modified"
            },
            {
                "additions": 53,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/OldAuthorizationService.java",
                "changes": 81,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/OldAuthorizationService.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 28,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/OldAuthorizationService.java",
                "patch": "@@ -76,6 +76,8 @@\n      * the name parser used by this service\n      */\n     private DnParser dnParser;\n+    private boolean enabled = true;\n+\n \n \n     /**\n@@ -90,6 +92,9 @@ public void init( DirectoryServiceConfiguration factoryCfg, InterceptorConfigura\n     {\n         AttributeTypeRegistry atr = factoryCfg.getGlobalRegistries().getAttributeTypeRegistry();\n         dnParser = new DnParser( new ConcreteNameComponentNormalizer( atr ) );\n+\n+        // disable this static module if basic access control mechanisms are enabled\n+        enabled = ! factoryCfg.getStartupConfiguration().isAccessControlEnabled();\n     }\n \n \n@@ -99,6 +104,12 @@ public void init( DirectoryServiceConfiguration factoryCfg, InterceptorConfigura\n \n     public void delete( NextInterceptor nextInterceptor, Name name ) throws NamingException\n     {\n+        if ( !enabled )\n+        {\n+            nextInterceptor.delete( name );\n+            return;\n+        }\n+\n         Name principalDn = getPrincipal().getJndiName();\n \n         if ( name.toString().equals( \"\" ) )\n@@ -162,7 +173,11 @@ public boolean hasEntry( NextInterceptor nextInterceptor, Name name ) throws Nam\n      */\n     public void modify( NextInterceptor nextInterceptor, Name name, int modOp, Attributes attrs ) throws NamingException\n     {\n-        protectModifyAlterations( name );\n+        if ( enabled )\n+        {\n+            protectModifyAlterations( name );\n+        }\n+\n         nextInterceptor.modify( name, modOp, attrs );\n     }\n \n@@ -175,7 +190,10 @@ public void modify( NextInterceptor nextInterceptor, Name name, int modOp, Attri\n      */\n     public void modify( NextInterceptor nextInterceptor, Name name, ModificationItem[] items ) throws NamingException\n     {\n-        protectModifyAlterations( name );\n+        if ( enabled )\n+        {\n+            protectModifyAlterations( name );\n+        }\n         nextInterceptor.modify( name, items );\n     }\n \n@@ -192,13 +210,6 @@ private void protectModifyAlterations( Name dn ) throws LdapNoPermissionExceptio\n \n         if ( !principalDn.equals( ADMIN_DN ) )\n         {\n-            if ( dn == ADMIN_DN || dn.equals( ADMIN_DN ) )\n-            {\n-                String msg = \"User \" + principalDn;\n-                msg += \" does not have permission to modify the admin account.\";\n-                throw new LdapNoPermissionException( msg );\n-            }\n-\n             if ( dn.size() > 2 && dn.startsWith( USER_BASE_DN ) )\n             {\n                 String msg = \"User \" + principalDn;\n@@ -232,14 +243,20 @@ private void protectModifyAlterations( Name dn ) throws LdapNoPermissionExceptio\n \n     public void modifyRn( NextInterceptor nextInterceptor, Name name, String newRn, boolean deleteOldRn ) throws NamingException\n     {\n-        protectDnAlterations( name );\n+        if ( enabled )\n+        {\n+            protectDnAlterations( name );\n+        }\n         nextInterceptor.modifyRn( name, newRn, deleteOldRn );\n     }\n \n \n     public void move( NextInterceptor nextInterceptor, Name oriChildName, Name newParentName ) throws NamingException\n     {\n-        protectDnAlterations( oriChildName );\n+        if ( enabled )\n+        {\n+            protectDnAlterations( oriChildName );\n+        }\n         nextInterceptor.move( oriChildName, newParentName );\n     }\n \n@@ -248,7 +265,10 @@ public void move( NextInterceptor nextInterceptor,\n             Name oriChildName, Name newParentName, String newRn,\n             boolean deleteOldRn ) throws NamingException\n     {\n-        protectDnAlterations( oriChildName );\n+        if ( enabled )\n+        {\n+            protectDnAlterations( oriChildName );\n+        }\n         nextInterceptor.move( oriChildName, newParentName, newRn, deleteOldRn );\n     }\n \n@@ -294,9 +314,9 @@ private void protectDnAlterations( Name dn ) throws LdapNoPermissionException\n     public Attributes lookup( NextInterceptor nextInterceptor, Name name ) throws NamingException\n     {\n         Attributes attributes = nextInterceptor.lookup( name );\n-        if ( attributes == null )\n+        if ( ! enabled || attributes == null )\n         {\n-            return null;\n+            return attributes;\n         }\n \n         protectLookUp( name );\n@@ -307,9 +327,9 @@ public Attributes lookup( NextInterceptor nextInterceptor, Name name ) throws Na\n     public Attributes lookup( NextInterceptor nextInterceptor, Name name, String[] attrIds ) throws NamingException\n     {\n         Attributes attributes = nextInterceptor.lookup( name, attrIds );\n-        if ( attributes == null )\n+        if ( ! enabled || attributes == null )\n         {\n-            return null;\n+            return attributes;\n         }\n \n         protectLookUp( name );\n@@ -375,31 +395,36 @@ public NamingEnumeration search( NextInterceptor nextInterceptor,\n             SearchControls searchCtls ) throws NamingException\n     {\n         NamingEnumeration e = nextInterceptor.search( base, env, filter, searchCtls );\n+        if ( !enabled )\n+        {\n+            return e;\n+        }\n         //if ( searchCtls.getReturningAttributes() != null )\n         //{\n         //    return null;\n         //}\n         \n-        LdapContext ctx =\n-            ( LdapContext ) InvocationStack.getInstance().peek().getCaller();\n+        LdapContext ctx = ( LdapContext ) InvocationStack.getInstance().peek().getCaller();\n         return new SearchResultFilteringEnumeration( e, searchCtls, ctx,\n-                new SearchResultFilter()\n+            new SearchResultFilter()\n+            {\n+                public boolean accept( LdapContext ctx, SearchResult result, SearchControls controls )\n+                        throws NamingException\n                 {\n-                    public boolean accept( LdapContext ctx, SearchResult result,\n-                                           SearchControls controls )\n-                            throws NamingException\n-                    {\n-                        return OldAuthorizationService.this.isSearchable( ctx, result );\n-                    }\n-                } );\n+                    return OldAuthorizationService.this.isSearchable( ctx, result );\n+                }\n+            });\n     }\n \n \n     public NamingEnumeration list( NextInterceptor nextInterceptor, Name base ) throws NamingException\n     {\n         NamingEnumeration e = nextInterceptor.list( base );\n-        LdapContext ctx =\n-            ( LdapContext ) InvocationStack.getInstance().peek().getCaller();\n+        if ( !enabled )\n+        {\n+            return e;\n+        }\n+        LdapContext ctx = ( LdapContext ) InvocationStack.getInstance().peek().getCaller();\n         \n         return new SearchResultFilteringEnumeration( e, null, ctx,\n             new SearchResultFilter()",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/OldAuthorizationService.java",
                "sha": "748f69a4c05b87fcb10e0869210f636b4ec84e8f",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/support/MicroOperationFilter.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/main/java/org/apache/ldap/server/authz/support/MicroOperationFilter.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 4,
                "filename": "core/src/main/java/org/apache/ldap/server/authz/support/MicroOperationFilter.java",
                "patch": "@@ -40,7 +40,11 @@\n  */\n public class MicroOperationFilter implements ACITupleFilter\n {\n-    public Collection filter( Collection tuples, OperationScope scope, NextInterceptor next, Collection userGroupNames, Name userName, Attributes userEntry, AuthenticationLevel authenticationLevel, Name entryName, String attrId, Object attrValue, Attributes entry, Collection microOperations ) throws NamingException\n+    public Collection filter( Collection tuples, OperationScope scope, NextInterceptor next,\n+                              Collection userGroupNames, Name userName, Attributes userEntry,\n+                              AuthenticationLevel authenticationLevel, Name entryName, String attrId,\n+                              Object attrValue, Attributes entry, Collection microOperations )\n+            throws NamingException\n     {\n         if( tuples.size() == 0 )\n         {\n@@ -50,13 +54,20 @@ public Collection filter( Collection tuples, OperationScope scope, NextIntercept\n         for( Iterator i = tuples.iterator(); i.hasNext(); )\n         {\n             ACITuple tuple = ( ACITuple ) i.next();\n-            boolean retain = false;\n+\n+            /*\n+             * The ACITuple must contain all the MicroOperations specified within the\n+             * microOperations argument.  Just matching a single microOperation is not\n+             * enough.  All must be matched to retain the ACITuple.\n+             */\n+\n+            boolean retain = true;\n             for( Iterator j = microOperations.iterator(); j.hasNext(); )\n             {\n                 MicroOperation microOp = ( MicroOperation ) j.next();\n-                if( tuple.getMicroOperations().contains( microOp ) )\n+                if( ! tuple.getMicroOperations().contains( microOp ) )\n                 {\n-                    retain = true;\n+                    retain = false;\n                     break;\n                 }\n             }",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/main/java/org/apache/ldap/server/authz/support/MicroOperationFilter.java",
                "sha": "9fb182c4de748d779e02ddf72ea8dbb0070d3607",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/AbstractAuthorizationTest.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/AbstractAuthorizationTest.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 1,
                "filename": "core/src/test/org/apache/ldap/server/authz/AbstractAuthorizationTest.java",
                "patch": "@@ -113,6 +113,20 @@ public Name createGroup( String cn, String firstMemberDn ) throws NamingExceptio\n     }\n \n \n+    /**\n+     * Deletes a user with a specific UID under ou=users,ou=system.\n+     *\n+     * @param uid the RDN value for the user to delete\n+     * @throws NamingException if there are problems removing the user\n+     * i.e. user does not exist\n+     */\n+    public void deleteUser( String uid ) throws NamingException\n+    {\n+        DirContext adminCtx = getContextAsAdmin();\n+        adminCtx.destroySubcontext( \"uid=\"+uid+\",ou=users\" );\n+    }\n+\n+\n     /**\n      * Creates a simple user as an inetOrgPerson under the ou=users,ou=system\n      * container.  The user's RDN attribute is the uid argument.  This argument\n@@ -159,6 +173,23 @@ public void addUserToGroup( String userUid, String groupCn ) throws NamingExcept\n     }\n \n \n+    /**\n+     * Removes a user from a group.\n+     *\n+     * @param userUid the RDN attribute value of the user to remove from the group\n+     * @param groupCn the RDN attribute value of the group to have user removed from\n+     * @throws NamingException if there are problems accessing the group\n+     */\n+    public void removeUserFromGroup( String userUid, String groupCn ) throws NamingException\n+    {\n+        DirContext adminCtx = getContextAsAdmin();\n+        Attributes changes = new BasicAttributes( \"uniqueMember\",\n+                \"uid=\"+userUid+\",ou=users,ou=system\", true );\n+        adminCtx.modifyAttributes( \"cn=\"+groupCn+\",ou=groups\",\n+                DirContext.REMOVE_ATTRIBUTE, changes );\n+    }\n+\n+\n     /**\n      * Gets the context at ou=system as a specific user.\n      *\n@@ -193,6 +224,13 @@ public DirContext getContextAs( Name user, String password, String dn ) throws N\n     }\n \n \n+    public void deleteAccessControlSubentry( String cn ) throws NamingException\n+    {\n+        DirContext adminCtx = getContextAsAdmin();\n+        adminCtx.destroySubcontext( \"cn=\" + cn );\n+    }\n+\n+\n     /**\n      * Creates an access control subentry under ou=system whose subtree covers\n      * the entire naming context.\n@@ -206,7 +244,7 @@ public void createAccessControlSubentry( String cn, String aciItem ) throws Nami\n         DirContext adminCtx = getContextAsAdmin();\n \n         // modify ou=system to be an AP for an A/C AA if it is not already\n-        Attributes ap = adminCtx.getAttributes( \"\" );\n+        Attributes ap = adminCtx.getAttributes( \"\", new String[] { \"administrativeRole\" } );\n         Attribute administrativeRole = ap.get( \"administrativeRole\" );\n         if ( administrativeRole == null || ! administrativeRole.contains( SubentryService.AC_AREA ) )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/AbstractAuthorizationTest.java",
                "sha": "a66fbaffc807e435db128f5e164b7adbccbdf327",
                "status": "modified"
            },
            {
                "additions": 544,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/ModifyAuthorizationTest.java",
                "changes": 544,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/ModifyAuthorizationTest.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 0,
                "filename": "core/src/test/org/apache/ldap/server/authz/ModifyAuthorizationTest.java",
                "patch": "@@ -0,0 +1,544 @@\n+/*\n+ *   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ *\n+ */\n+package org.apache.ldap.server.authz;\n+\n+\n+import org.apache.ldap.common.exception.LdapNoPermissionException;\n+import org.apache.ldap.common.name.LdapName;\n+\n+import javax.naming.NamingException;\n+import javax.naming.NamingEnumeration;\n+import javax.naming.Name;\n+import javax.naming.directory.*;\n+import java.util.List;\n+import java.util.ArrayList;\n+\n+\n+/**\n+ * Tests whether or not authorization around entry modify operations work properly.\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$\n+ */\n+public class ModifyAuthorizationTest extends AbstractAuthorizationTest\n+{\n+    /**\n+     * Checks if an attribute of a simple entry (an organizationalUnit) with an RDN\n+     * relative to ou=system can be modified by a specific non-admin user.  If a\n+     * permission exception is encountered it is caught and false is returned,\n+     * otherwise true is returned.  The entry is deleted after being created just in case\n+     * subsequent calls to this method are made in the same test case: the admin account\n+     * is used to add and delete this test entry so permissions to add and delete are not\n+     * required to test the modify operation by the user.\n+     *\n+     * @param uid the unique identifier for the user (presumed to exist under ou=users,ou=system)\n+     * @param password the password of this user\n+     * @param entryRdn the relative DN, relative to ou=system where entry is created\n+     * for modification test\n+     * @param mods the modifications to make to the entry\n+     * @return true if the modifications can be made by the user at the specified location,\n+     * false otherwise.\n+     * @throws javax.naming.NamingException if there are problems conducting the test\n+     */\n+    public boolean checkCanModifyAs( String uid, String password, String entryRdn, ModificationItem[] mods )\n+            throws NamingException\n+    {\n+        // create the entry with the telephoneNumber attribute to modify\n+        Attributes testEntry = new BasicAttributes( \"ou\", \"testou\", true );\n+        Attribute objectClass = new BasicAttribute( \"objectClass\" );\n+        testEntry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"organizationalUnit\" );\n+        testEntry.put( \"telephoneNumber\", \"867-5309\" );  // jenny don't change your number\n+\n+        DirContext adminContext = getContextAsAdmin();\n+\n+        try\n+        {\n+            // create the entry as admin\n+            LdapName userName = new LdapName( \"uid=\"+uid+\",ou=users,ou=system\" );\n+            adminContext.createSubcontext( entryRdn, testEntry );\n+\n+            // modify the entry as the user\n+            DirContext userContext = getContextAs( userName, password );\n+            userContext.modifyAttributes( entryRdn, mods );\n+\n+            return true;\n+        }\n+        catch ( LdapNoPermissionException e )\n+        {\n+            return false;\n+        }\n+        finally\n+        {\n+            // let's clean up\n+            adminContext.destroySubcontext( entryRdn );\n+        }\n+    }\n+\n+\n+    /**\n+     * Checks if an attribute of a simple entry (an organizationalUnit) with an RDN\n+     * relative to ou=system can be modified by a specific non-admin user.  If a\n+     * permission exception is encountered it is caught and false is returned,\n+     * otherwise true is returned.  The entry is deleted after being created just in case\n+     * subsequent calls to this method are made in the same test case: the admin account\n+     * is used to add and delete this test entry so permissions to add and delete are not\n+     * required to test the modify operation by the user.\n+     *\n+     * @param uid the unique identifier for the user (presumed to exist under ou=users,ou=system)\n+     * @param password the password of this user\n+     * @param entryRdn the relative DN, relative to ou=system where entry is created\n+     * for modification test\n+     * @param mods the attributes to modify in the entry\n+     * @param modOp the modification operation to use for all attributes\n+     * @return true if the modifications can be made by the user at the specified location,\n+     * false otherwise.\n+     * @throws javax.naming.NamingException if there are problems conducting the test\n+     */\n+    public boolean checkCanModifyAs( String uid, String password, String entryRdn, int modOp, Attributes mods )\n+            throws NamingException\n+    {\n+        // create the entry with the telephoneNumber attribute to modify\n+        Attributes testEntry = new BasicAttributes( \"ou\", \"testou\", true );\n+        Attribute objectClass = new BasicAttribute( \"objectClass\" );\n+        testEntry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"organizationalUnit\" );\n+        testEntry.put( \"telephoneNumber\", \"867-5309\" );  // jenny don't change your number\n+\n+        DirContext adminContext = getContextAsAdmin();\n+\n+        try\n+        {\n+            // create the entry as admin\n+            LdapName userName = new LdapName( \"uid=\"+uid+\",ou=users,ou=system\" );\n+            adminContext.createSubcontext( entryRdn, testEntry );\n+\n+            // modify the entry as the user\n+            DirContext userContext = getContextAs( userName, password );\n+            userContext.modifyAttributes( entryRdn, modOp, mods );\n+\n+            return true;\n+        }\n+        catch ( LdapNoPermissionException e )\n+        {\n+            return false;\n+        }\n+        finally\n+        {\n+            // let's clean up\n+            adminContext.destroySubcontext( entryRdn );\n+        }\n+    }\n+\n+\n+    /**\n+     * Checks if a user can modify an attribute of their own entry.  Users are\n+     * presumed to reside under ou=users,ou=system.  If a permission exception is\n+     * encountered it is caught and false is returned, otherwise true is returned.\n+     *\n+     * @param uid the unique identifier for the user (presumed to exist under ou=users,ou=system)\n+     * @param password the password of this user\n+     * @param mods the attributes to modify in the entry\n+     * @param modOp the modification operation to use for all attributes\n+     * @return true if the modifications can be made by the user his/her own entry,\n+     * false otherwise.\n+     * @throws javax.naming.NamingException if there are problems conducting the test\n+     */\n+    public boolean checkCanSelfModify( String uid, String password, int modOp, Attributes mods )\n+            throws NamingException\n+    {\n+        try\n+        {\n+            // modify the entry as the user\n+            Name userEntry = new LdapName( \"uid=\"+uid+\",ou=users,ou=system\" );\n+            DirContext userContext = getContextAs( userEntry, password, userEntry.toString() );\n+            userContext.modifyAttributes( \"\", modOp, mods );\n+            return true;\n+        }\n+        catch ( LdapNoPermissionException e )\n+        {\n+            return false;\n+        }\n+    }\n+\n+\n+    /**\n+     * Checks if a user can modify an attribute of their own entry.  Users are\n+     * presumed to reside under ou=users,ou=system.  If a permission exception is\n+     * encountered it is caught and false is returned, otherwise true is returned.\n+     *\n+     * @param uid the unique identifier for the user (presumed to exist under ou=users,ou=system)\n+     * @param password the password of this user\n+     * @param mods the attributes to modify in the entry\n+     * @return true if the modifications can be made by the user his/her own entry,\n+     * false otherwise.\n+     * @throws javax.naming.NamingException if there are problems conducting the test\n+     */\n+    public boolean checkCanSelfModify( String uid, String password, ModificationItem[] mods )\n+            throws NamingException\n+    {\n+        try\n+        {\n+            // modify the entry as the user\n+            Name userEntry = new LdapName( \"uid=\"+uid+\",ou=users,ou=system\" );\n+            DirContext userContext = getContextAs( userEntry, password, userEntry.toString() );\n+            userContext.modifyAttributes( \"\", mods );\n+            return true;\n+        }\n+        catch ( LdapNoPermissionException e )\n+        {\n+            return false;\n+        }\n+    }\n+\n+\n+    /**\n+     * Converts a set of attributes and a modification operation type into a MoficationItem array.\n+     *\n+     * @param modOp the modification operation to perform\n+     * @param changes the modifications to the attribute\n+     * @return the array of modification items represting the changes\n+     * @throws NamingException if there are problems accessing attributes\n+     */\n+    private ModificationItem[] toItems( int modOp, Attributes changes ) throws NamingException\n+    {\n+        List mods = new ArrayList();\n+        NamingEnumeration list = changes.getAll();\n+        while ( list.hasMore() )\n+        {\n+            Attribute attr = ( Attribute ) list.next();\n+            mods.add( new ModificationItem( modOp, attr ) );\n+        }\n+        ModificationItem[] modArray = new ModificationItem[mods.size()];\n+        return ( ModificationItem[] ) mods.toArray( modArray );\n+    }\n+\n+\n+    public void testSelfModification() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Addition\n+        // ----------------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // create the password modification\n+        ModificationItem[] mods = toItems( DirContext.REPLACE_ATTRIBUTE,\n+                new BasicAttributes( \"userPassword\", \"williams\", true ) );\n+\n+        // try a modify operation which should fail without any ACI\n+        assertFalse( checkCanSelfModify( \"billyd\", \"billyd\", mods ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"selfModifyUserPassword\",\n+                \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { thisEntry }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse, grantRead } }, \" +\n+                        \"{ protectedItems {allAttributeValues {userPassword}}, grantsAndDenials { grantAdd, grantRemove } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI\n+        assertTrue( checkCanSelfModify( \"billyd\", \"billyd\", mods ) );\n+        deleteAccessControlSubentry( \"selfModifyUserPassword\" );\n+    }\n+\n+\n+    /**\n+     * Checks to make sure group membership based userClass works for modify operations.\n+     *\n+     * @throws javax.naming.NamingException if the test encounters an error\n+     */\n+    public void testGrantModifyByAdministrators() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Addition\n+        // ----------------------------------------------------------------------------------\n+\n+        // create the add modifications\n+        ModificationItem[] mods = toItems( DirContext.ADD_ATTRIBUTE,\n+                new BasicAttributes( \"registeredAddress\", \"100 Park Ave.\", true ) );\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try a modify operation which should fail without any ACI\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyAdd\",\n+                \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {registeredAddress}}, grantsAndDenials { grantAdd } } \" +\n+                        \"} } }\" );\n+\n+        // see if we can now add that test entry which we could not before\n+        // add op should still fail since billd is not in the admin group\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+\n+        // now add billyd to the Administrator group and try again\n+        addUserToGroup( \"billyd\", \"Administrators\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+        deleteAccessControlSubentry( \"administratorModifyAdd\" );\n+\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Removal\n+        // ----------------------------------------------------------------------------------\n+\n+        // now let's test to see if we can perform a modify with a delete op\n+        mods = toItems( DirContext.REMOVE_ATTRIBUTE,\n+                new BasicAttributes( \"telephoneNumber\", \"867-5309\", true ) );\n+\n+        // make sure we cannot remove the telephone number from the test entry\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyRemove\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {telephoneNumber}}, grantsAndDenials { grantRemove } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+        deleteAccessControlSubentry( \"administratorModifyRemove\" );\n+\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Replace (requires both grantRemove and grantAdd on attrs)\n+        // ----------------------------------------------------------------------------------\n+\n+        // now let's test to see if we can perform a modify with a delete op\n+        mods = toItems( DirContext.REPLACE_ATTRIBUTE,\n+                new BasicAttributes( \"telephoneNumber\", \"867-5309\", true ) );\n+\n+        // make sure we cannot remove the telephone number from the test entry\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyReplace\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {telephoneNumber}}, grantsAndDenials { grantAdd, grantRemove } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", mods ) );\n+        deleteAccessControlSubentry( \"administratorModifyReplace\" );\n+\n+        /* =================================================================================\n+         *              DO IT ALL OVER AGAIN BUT USE THE OTHER MODIFY METHOD\n+         * ================================================================================= */\n+\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Addition\n+        // ----------------------------------------------------------------------------------\n+\n+        // create the add modifications\n+        Attributes changes = new BasicAttributes( \"registeredAddress\", \"100 Park Ave.\", true );\n+\n+        // try a modify operation which should fail without any ACI\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.ADD_ATTRIBUTE, changes ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyAdd\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {registeredAddress}}, grantsAndDenials { grantAdd } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.ADD_ATTRIBUTE, changes ) );\n+        deleteAccessControlSubentry( \"administratorModifyAdd\" );\n+\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Removal\n+        // ----------------------------------------------------------------------------------\n+\n+        // now let's test to see if we can perform a modify with a delete op\n+        changes = new BasicAttributes( \"telephoneNumber\", \"867-5309\", true );\n+\n+        // make sure we cannot remove the telephone number from the test entry\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.REMOVE_ATTRIBUTE, changes ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyRemove\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {telephoneNumber}}, grantsAndDenials { grantRemove } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.REMOVE_ATTRIBUTE, changes ) );\n+        deleteAccessControlSubentry( \"administratorModifyRemove\" );\n+\n+        // ----------------------------------------------------------------------------------\n+        // Modify with Attribute Replace (requires both grantRemove and grantAdd on attrs)\n+        // ----------------------------------------------------------------------------------\n+\n+        // now let's test to see if we can perform a modify with a delete op\n+        changes = new BasicAttributes( \"telephoneNumber\", \"867-5309\", true );\n+\n+        // make sure we cannot remove the telephone number from the test entry\n+        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.REPLACE_ATTRIBUTE, changes ) );\n+\n+        // Gives grantModify, and grantRead perm to all users in the Administrators group for\n+        // entries and all attribute types and values\n+        createAccessControlSubentry( \"administratorModifyReplace\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { \" +\n+                        \"{ protectedItems {entry}, grantsAndDenials { grantModify, grantBrowse } }, \" +\n+                        \"{ protectedItems {allAttributeValues {telephoneNumber}}, grantsAndDenials { grantAdd, grantRemove } } \" +\n+                        \"} } }\" );\n+\n+        // try a modify operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", DirContext.REPLACE_ATTRIBUTE, changes ) );\n+        deleteAccessControlSubentry( \"administratorModifyReplace\" );\n+    }\n+\n+\n+//    /**\n+//     * Checks to make sure name based userClass works for modify operations.\n+//     *\n+//     * @throws javax.naming.NamingException if the test encounters an error\n+//     */\n+//    public void testGrantModifyByName() throws NamingException\n+//    {\n+//        // create the non-admin user\n+//        createUser( \"billyd\", \"billyd\" );\n+//\n+//        // try an modify operation which should fail without any ACI\n+//        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//\n+//        // now add a subentry that enables user billyd to modify an entry below ou=system\n+//        createAccessControlSubentry( \"billydAdd\", \"{ \" +\n+//                \"identificationTag \\\"addAci\\\", \" +\n+//                \"precedence 14, \" +\n+//                \"authenticationLevel none, \" +\n+//                \"itemOrUserFirst userFirst: { \" +\n+//                \"userClasses { name { \\\"uid=billyd,ou=users,ou=system\\\" } }, \" +\n+//                \"userPermissions { { \" +\n+//                \"protectedItems {entry, allUserAttributeTypesAndValues}, \" +\n+//                \"grantsAndDenials { grantModify, grantRead, grantBrowse } } } } }\" );\n+//\n+//        // should work now that billyd is authorized by name\n+//        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//    }\n+//\n+//\n+//    /**\n+//     * Checks to make sure subtree based userClass works for modify operations.\n+//     *\n+//     * @throws javax.naming.NamingException if the test encounters an error\n+//     */\n+//    public void testGrantModifyBySubtree() throws NamingException\n+//    {\n+//        // create the non-admin user\n+//        createUser( \"billyd\", \"billyd\" );\n+//\n+//        // try a modify operation which should fail without any ACI\n+//        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//\n+//        // now add a subentry that enables user billyd to modify an entry below ou=system\n+//        createAccessControlSubentry( \"billyAddBySubtree\", \"{ \" +\n+//                \"identificationTag \\\"addAci\\\", \" +\n+//                \"precedence 14, \" +\n+//                \"authenticationLevel none, \" +\n+//                \"itemOrUserFirst userFirst: { \" +\n+//                \"userClasses { subtree { { base \\\"ou=users,ou=system\\\" } } }, \" +\n+//                \"userPermissions { { \" +\n+//                \"protectedItems {entry, allUserAttributeTypesAndValues}, \" +\n+//                \"grantsAndDenials { grantModify, grantRead, grantBrowse } } } } }\" );\n+//\n+//        // should work now that billyd is authorized by the subtree userClass\n+//        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//    }\n+//\n+//\n+//    /**\n+//     * Checks to make sure <b>allUsers</b> userClass works for modify operations.\n+//     *\n+//     * @throws javax.naming.NamingException if the test encounters an error\n+//     */\n+//    public void testGrantModifyAllUsers() throws NamingException\n+//    {\n+//        // create the non-admin user\n+//        createUser( \"billyd\", \"billyd\" );\n+//\n+//        // try an add operation which should fail without any ACI\n+//        assertFalse( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//\n+//        // now add a subentry that enables anyone to add an entry below ou=system\n+//        createAccessControlSubentry( \"anybodyAdd\", \"{ \" +\n+//                \"identificationTag \\\"addAci\\\", \" +\n+//                \"precedence 14, \" +\n+//                \"authenticationLevel none, \" +\n+//                \"itemOrUserFirst userFirst: { \" +\n+//                \"userClasses { allUsers }, \" +\n+//                \"userPermissions { { \" +\n+//                \"protectedItems {entry, allUserAttributeTypesAndValues}, \" +\n+//                \"grantsAndDenials { grantModify, grantRead, grantBrowse } } } } }\" );\n+//\n+//        // see if we can now modify that test entry's number which we could not before\n+//        // should work with billyd now that all users are authorized\n+//        assertTrue( checkCanModifyAs( \"billyd\", \"billyd\", \"ou=testou\", \"867-5309\" ) );\n+//    }\n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/ModifyAuthorizationTest.java",
                "sha": "3aa3e232d3241d259b1db00b05ec96e9bf865aa2",
                "status": "added"
            },
            {
                "additions": 482,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/MoveRenameAuthorizationTest.java",
                "changes": 482,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/MoveRenameAuthorizationTest.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 0,
                "filename": "core/src/test/org/apache/ldap/server/authz/MoveRenameAuthorizationTest.java",
                "patch": "@@ -0,0 +1,482 @@\n+/*\n+ *   Copyright 2004 The Apache Software Foundation\n+ *\n+ *   Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *   you may not use this file except in compliance with the License.\n+ *   You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *   Unless required by applicable law or agreed to in writing, software\n+ *   distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *   See the License for the specific language governing permissions and\n+ *   limitations under the License.\n+ *\n+ */\n+package org.apache.ldap.server.authz;\n+\n+\n+import org.apache.ldap.common.exception.LdapNoPermissionException;\n+import org.apache.ldap.common.name.LdapName;\n+\n+import javax.naming.NamingException;\n+import javax.naming.directory.*;\n+\n+\n+/**\n+ * Tests whether or not authorization around entry renames and moves work properly.\n+ *\n+ * @author <a href=\"mailto:dev@directory.apache.org\">Apache Directory Project</a>\n+ * @version $Rev$\n+ */\n+public class MoveRenameAuthorizationTest extends AbstractAuthorizationTest\n+{\n+    /**\n+     * Checks if a simple entry (organizationalUnit) can be renamed at an RDN relative\n+     * to ou=system by a specific non-admin user.  If a permission exception\n+     * is encountered it is caught and false is returned, otherwise true is returned\n+     * when the entry is created.  The entry is deleted after being created just in case\n+     * subsequent calls to this method do not fail: the admin account is used to delete\n+     * this test entry so permissions to delete are not required to delete it by the user.\n+     *\n+     * @param uid the unique identifier for the user (presumed to exist under ou=users,ou=system)\n+     * @param password the password of this user\n+     * @param entryRdn the relative DN, relative to ou=system where entry renames are tested\n+     * @param newRdn the new RDN for the entry under ou=system\n+     * @return true if the entry can be renamed by the user at the specified location, false otherwise\n+     * @throws javax.naming.NamingException if there are problems conducting the test\n+     */\n+    public boolean checkCanRenameAs( String uid, String password, String entryRdn, String newRdn )\n+            throws NamingException\n+    {\n+        Attributes testEntry = new BasicAttributes( \"ou\", \"testou\", true );\n+        Attribute objectClass = new BasicAttribute( \"objectClass\" );\n+        testEntry.put( objectClass );\n+        objectClass.add( \"top\" );\n+        objectClass.add( \"organizationalUnit\" );\n+\n+        DirContext adminContext = getContextAsAdmin();\n+        try\n+        {\n+            // create the new entry as the admin user\n+            adminContext.createSubcontext( entryRdn, testEntry );\n+\n+            LdapName userName = new LdapName( \"uid=\"+uid+\",ou=users,ou=system\" );\n+            DirContext userContext = getContextAs( userName, password );\n+            userContext.rename( entryRdn, newRdn );\n+\n+            // delete the renamed context as the admin user\n+            adminContext.destroySubcontext( newRdn );\n+            return true;\n+        }\n+        catch ( LdapNoPermissionException e )\n+        {\n+            // delete the original context as the admin user since rename\n+            // of newly created test entry did not succeed\n+            adminContext.destroySubcontext( entryRdn );\n+            return false;\n+        }\n+    }\n+\n+\n+    /**\n+     * Checks to make sure group membership based userClass works for renames,\n+     * moves and moves with renames.\n+     *\n+     * @throws javax.naming.NamingException if the test encounters an error\n+     */\n+    public void testGrantByAdministrators() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------\n+        // Test simple RDN change: NO SUBTREE MOVEMENT!\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try the rename operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // Gives grantRename perm to all users in the Administrators group for entries\n+        createAccessControlSubentry( \"grantRenameByAdmin\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantRename, grantBrowse } } } } }\" );\n+\n+        // see if we can now rename that test entry which we could not before\n+        // rename op should still fail since billyd is not in the admin group\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // now add billyd to the Administrator group and try again\n+        addUserToGroup( \"billyd\", \"Administrators\" );\n+\n+        // try a rename operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // now let's cleanup\n+        removeUserFromGroup( \"billyd\", \"Administrators\" );\n+        deleteAccessControlSubentry( \"grantRenameByAdmin\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move and RDN change at the same time.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try an move w/ rdn change which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // Gives grantRename, grantImport, grantExport perm to all users in the Administrators\n+        // group for entries - browse is needed just to read navigate the tree at root\n+        createAccessControlSubentry( \"grantRenameMoveByAdmin\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantRename, grantBrowse } } } } }\" );\n+\n+        // see if we can move and rename the test entry which we could not before\n+        // op should still fail since billyd is not in the admin group\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // now add billyd to the Administrator group and try again\n+        addUserToGroup( \"billyd\", \"Administrators\" );\n+\n+        // try move w/ rdn change which should succeed with ACI and group membership change\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        removeUserFromGroup( \"billyd\", \"Administrators\" );\n+        deleteAccessControlSubentry( \"grantRenameMoveByAdmin\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move ONLY without any RDN changes.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try move operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // Gives grantImport, and grantExport perm to all users in the Administrators group for entries\n+        createAccessControlSubentry( \"grantMoveByAdmin\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { userGroup { \\\"cn=Administrators,ou=groups,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantBrowse } } } } }\" );\n+\n+        // see if we can now move that test entry which we could not before\n+        // op should still fail since billyd is not in the admin group\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // now add billyd to the Administrator group and try again\n+        addUserToGroup( \"billyd\", \"Administrators\" );\n+\n+        // try move operation which should succeed with ACI and group membership change\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        removeUserFromGroup( \"billyd\", \"Administrators\" );\n+        deleteAccessControlSubentry( \"grantMoveByAdmin\" );\n+        deleteUser( \"billyd\" );\n+    }\n+\n+\n+    /**\n+     * Checks to make sure name based userClass works for rename, move, and\n+     * rename with move operation access controls.\n+     *\n+     * @throws javax.naming.NamingException if the test encounters an error\n+     */\n+    public void testGrantByName() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------\n+        // Test simple RDN change: NO SUBTREE MOVEMENT!\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try the rename operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // Gives grantRename perm specifically to the billyd user\n+        createAccessControlSubentry( \"grantRenameByName\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { name { \\\"uid=billyd,ou=users,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantRename, grantBrowse } } } } }\" );\n+\n+        // try a rename operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameByName\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move and RDN change at the same time.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try an move w/ rdn change which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // Gives grantRename, grantImport, grantExport perm to billyd user on entries\n+        createAccessControlSubentry( \"grantRenameMoveByName\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { name { \\\"uid=billyd,ou=users,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantRename, grantBrowse } } } } }\" );\n+\n+        // try move w/ rdn change which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameMoveByName\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move ONLY without any RDN changes.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try move operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // Gives grantImport, and grantExport perm to billyd user for entries\n+        createAccessControlSubentry( \"grantMoveByName\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { name { \\\"uid=billyd,ou=users,ou=system\\\" } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantBrowse } } } } }\" );\n+\n+        // try move operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantMoveByName\" );\n+        deleteUser( \"billyd\" );\n+    }\n+\n+\n+    /**\n+     * Checks to make sure subtree based userClass works for rename, move, and\n+     * rename with move operation access controls.\n+     *\n+     * @throws javax.naming.NamingException if the test encounters an error\n+     */\n+    public void testGrantBySubtree() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------\n+        // Test simple RDN change: NO SUBTREE MOVEMENT!\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try the rename operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // Gives grantRename perm for entries to those users selected by the subtree\n+        createAccessControlSubentry( \"grantRenameByTree\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { subtree { { base \\\"ou=users,ou=system\\\" } } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantRename, grantBrowse } } } } }\" );\n+\n+        // try a rename operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameByTree\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move and RDN change at the same time.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try an move w/ rdn change which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // Gives grantRename, grantImport, grantExport for entries to users selected by subtree\n+        createAccessControlSubentry( \"grantRenameMoveByTree\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { subtree { { base \\\"ou=users,ou=system\\\" } } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantRename, grantBrowse } } } } }\" );\n+\n+        // try move w/ rdn change which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameMoveByTree\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move ONLY without any RDN changes.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try move operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // Gives grantImport, and grantExport perm for entries to subtree selected users\n+        createAccessControlSubentry( \"grantMoveByTree\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { subtree { { base \\\"ou=users,ou=system\\\" } } }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantBrowse } } } } }\" );\n+\n+        // try move operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantMoveByTree\" );\n+        deleteUser( \"billyd\" );\n+    }\n+\n+\n+    /**\n+     * Checks to make sure the <b>anyUser</b> userClass works for rename, move, and\n+     * rename with move operation access controls.\n+     *\n+     * @throws javax.naming.NamingException if the test encounters an error\n+     */\n+    public void testGrantByAnyuser() throws NamingException\n+    {\n+        // ----------------------------------------------------------------------------\n+        // Test simple RDN change: NO SUBTREE MOVEMENT!\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try the rename operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // Gives grantRename perm for entries to any user\n+        createAccessControlSubentry( \"grantRenameByAny\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { allUsers }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantRename, grantBrowse } } } } }\" );\n+\n+        // try a rename operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou\", \"ou=newname\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameByAny\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move and RDN change at the same time.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try an move w/ rdn change which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // Gives grantRename, grantImport, grantExport for entries to any user\n+        createAccessControlSubentry( \"grantRenameMoveByAny\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { allUsers }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantRename, grantBrowse } } } } }\" );\n+\n+        // try move w/ rdn change which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=newname,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantRenameMoveByAny\" );\n+        deleteUser( \"billyd\" );\n+\n+        // ----------------------------------------------------------------------------\n+        // Test move ONLY without any RDN changes.\n+        // ----------------------------------------------------------------------------\n+\n+        // create the non-admin user\n+        createUser( \"billyd\", \"billyd\" );\n+\n+        // try move operation which should fail without any ACI\n+        assertFalse( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // Gives grantImport, and grantExport perm for entries to any user\n+        createAccessControlSubentry( \"grantMoveByAny\", \"{ \" +\n+                \"identificationTag \\\"addAci\\\", \" +\n+                \"precedence 14, \" +\n+                \"authenticationLevel none, \" +\n+                \"itemOrUserFirst userFirst: { \" +\n+                \"userClasses { allUsers }, \" +\n+                \"userPermissions { { \" +\n+                \"protectedItems {entry}, \" +\n+                \"grantsAndDenials { grantExport, grantImport, grantBrowse } } } } }\" );\n+\n+        // try move operation which should succeed with ACI\n+        assertTrue( checkCanRenameAs( \"billyd\", \"billyd\", \"ou=testou,ou=users\", \"ou=testou,ou=groups\" ) );\n+\n+        // now let's cleanup\n+        deleteAccessControlSubentry( \"grantMoveByAny\" );\n+        deleteUser( \"billyd\" );\n+    }\n+}",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/MoveRenameAuthorizationTest.java",
                "sha": "0b9648254e255f50ffd17f5c50eff98cc828f207",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/support/MicroOperationFilterTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core/src/test/org/apache/ldap/server/authz/support/MicroOperationFilterTest.java?ref=f042e1564af6dcff28640fce18ff32b44c71482a",
                "deletions": 0,
                "filename": "core/src/test/org/apache/ldap/server/authz/support/MicroOperationFilterTest.java",
                "patch": "@@ -54,6 +54,7 @@\n         USER_OPERATIONS_A.add( MicroOperation.BROWSE );\r\n         USER_OPERATIONS_B.add( MicroOperation.COMPARE );\r\n         USER_OPERATIONS_B.add( MicroOperation.DISCLOSE_ON_ERROR );\r\n+        TUPLE_OPERATIONS.add( MicroOperation.ADD );\r\n         TUPLE_OPERATIONS.add( MicroOperation.BROWSE );\r\n         TUPLE_OPERATIONS.add( MicroOperation.EXPORT );\r\n     }\r",
                "raw_url": "https://github.com/apache/directory-server/raw/f042e1564af6dcff28640fce18ff32b44c71482a/core/src/test/org/apache/ldap/server/authz/support/MicroOperationFilterTest.java",
                "sha": "257b1984e6db6f874a18961a92902a3b8a5dfcd3",
                "status": "modified"
            }
        ],
        "message": "changes ...\n\n o added rename, move and combined test cases \n o added modify test cases \n o added more utility functions to the AbstractAuthorizationTest \n o commented out code for requiring grantRemove/grantAdd perms on old RDN\n   deletes in modifyRdn operations that change the RDN - this does not \n   comply with X.501 although it makes a lot of sense\n o OldAuthenticationService now disables itself for its static rules when\n   the basic authorization service is enabled.\n o fixed bug in move operation handling to make sure import/export/rename\n   permissions are correctly mandated for respective overloads \n o fixed bug in AbstractAuthorizationTest: was not looking up operational \n   attribute administrativeRole properly to create subentries under ou=system\n o fixed bug in MicroOperationFilter: filter accepted ACI without testing\n   the presence of all required micro operation permissions.\n o fixed bug in GroupCache: group cache was not properly updating the cache on\n   modify operations on groups that are a groupOfNames and groupOfUniqueNames\n o fixed NPE in GroupCache\n o fixed bug in AuthorizationService in lookup(Name, String[]) where the \n   attribute ids where not being used for nexus lookups.\n\nTODO: \n\n o more testing with different kinds of ACI constructs should add to the total\n   number of tests per operation \n o doco badly needed\n o need to make the code not use the nexus for search list and lookups - the \n   next interceptor should be used\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@321394 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/c754fc19d01305d3cc00d2d24a50b4aa3a3726a5",
        "patched_files": [
            "MicroOperationFilter.java",
            "OldAuthorizationService.java",
            "AuthorizationService.java",
            "GroupCache.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "ModifyAuthorizationTest.java",
            "MicroOperationFilterTest.java",
            "MoveRenameAuthorizationTest.java",
            "AbstractAuthorizationTest.java"
        ]
    },
    "directory-server_f29b27f": {
        "bug_id": "directory-server_f29b27f",
        "commit": "https://github.com/apache/directory-server/commit/f29b27fc50328a70f39f0662229ab3bcef203f53",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/f29b27fc50328a70f39f0662229ab3bcef203f53/jdbm/src/main/java/jdbm/btree/BTree.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm/src/main/java/jdbm/btree/BTree.java?ref=f29b27fc50328a70f39f0662229ab3bcef203f53",
                "deletions": 1,
                "filename": "jdbm/src/main/java/jdbm/btree/BTree.java",
                "patch": "@@ -563,7 +563,7 @@ public void readExternal( ObjectInput in ) throws IOException, ClassNotFoundExce\n         bTreeHeight = in.readInt();\n         rootId = in.readLong();\n         pageSize = in.readInt();\n-        nbEntries.set( in.readInt() );\n+        nbEntries = new AtomicInteger( in.readInt() );\n     }\n \n ",
                "raw_url": "https://github.com/apache/directory-server/raw/f29b27fc50328a70f39f0662229ab3bcef203f53/jdbm/src/main/java/jdbm/btree/BTree.java",
                "sha": "6e13ed8d8a26836bb3eca587818e2df9a453d071",
                "status": "modified"
            }
        ],
        "message": "Fixed a NPE I introduced yesterday night.\nRule #1 : always run full build before committing\nRule #2 : don't commit at 4 am if you are too tired to wait 10 minutes for the build to end... \n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@946589 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/9db7285016ede0e35c339ba6b370355898b15529",
        "patched_files": [
            "BTree.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "TestBTree.java"
        ]
    },
    "directory-server_f95b0ac": {
        "bug_id": "directory-server_f95b0ac",
        "commit": "https://github.com/apache/directory-server/commit/f95b0ac682e1f0d3b422849e68f27938554fec1b",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/directory-server/blob/f95b0ac682e1f0d3b422849e68f27938554fec1b/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java?ref=f95b0ac682e1f0d3b422849e68f27938554fec1b",
                "deletions": 5,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java",
                "patch": "@@ -47,7 +47,9 @@\n import org.apache.directory.shared.ldap.filter.EqualityNode;\n import org.apache.directory.shared.ldap.filter.SearchScope;\n import org.apache.directory.shared.ldap.schema.SchemaManager;\n+import org.junit.After;\n import org.junit.AfterClass;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -72,18 +74,21 @@\n     private static LdapConnection connection;\n     \n     \n-    @BeforeClass\n-    public static void bindConnection() throws Exception\n+    @Before\n+    public void bindConnection() throws Exception\n     {\n         connection = new LdapNetworkConnection( \"localhost\", ldapServer.getPort() );\n         connection.bind( ADMIN_DN, \"secret\" );\n     }\n     \n     \n-    @AfterClass\n-    public static void unbindConnection() throws Exception\n+    @After\n+    public void unbindConnection() throws Exception\n     {\n-        connection.close();\n+        if ( connection != null )\n+        {\n+            connection.close();\n+        }\n     }\n     \n     ",
                "raw_url": "https://github.com/apache/directory-server/raw/f95b0ac682e1f0d3b422849e68f27938554fec1b/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapConnectionTest.java",
                "sha": "3a5797436334e53b664b3ddab678a12c7c899c25",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/f95b0ac682e1f0d3b422849e68f27938554fec1b/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapSSLConnectionTest.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapSSLConnectionTest.java?ref=f95b0ac682e1f0d3b422849e68f27938554fec1b",
                "deletions": 2,
                "filename": "ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapSSLConnectionTest.java",
                "patch": "@@ -48,6 +48,7 @@\n import org.apache.directory.server.ldap.handlers.extended.StoredProcedureExtendedOperationHandler;\n import org.apache.directory.shared.ldap.constants.SupportedSaslMechanisms;\n import org.apache.directory.shared.ldap.name.DN;\n+import org.junit.Before;\n import org.junit.BeforeClass;\n import org.junit.Test;\n import org.junit.runner.RunWith;\n@@ -83,8 +84,8 @@\n     private static LdapConnectionConfig config;\n     \n     \n-    @BeforeClass\n-    public static void setup()\n+    @Before\n+    public void setup()\n     {\n         X509TrustManager X509 = new X509TrustManager()\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/f95b0ac682e1f0d3b422849e68f27938554fec1b/ldap-client-test/src/test/java/org/apache/directory/shared/client/api/LdapSSLConnectionTest.java",
                "sha": "e5dae221a473b887a1edeacdac9874f18885ac42",
                "status": "modified"
            }
        ],
        "message": "Fixed some failing tests (NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/trunk@958776 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/a1dc204181bf0895a259dd3fe04214acd6d313d6",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "LdapSSLConnectionTest.java",
            "LdapConnectionTest.java"
        ]
    },
    "directory-server_fd9a6ba": {
        "bug_id": "directory-server_fd9a6ba",
        "commit": "https://github.com/apache/directory-server/commit/fd9a6ba219000fbbdf1e89ab0f46903824963330",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/directory-server/blob/fd9a6ba219000fbbdf1e89ab0f46903824963330/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java?ref=fd9a6ba219000fbbdf1e89ab0f46903824963330",
                "deletions": 10,
                "filename": "server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "patch": "@@ -109,11 +109,6 @@\n             return EMPTY_LIST;\n         }\n         \n-//        if ( ! apacheDS.isStarted() )\n-//        {\n-//            throw new ConfigurationException( \"The server has not been started - cannot add entries.\" );\n-//        }\n-        \n         LdifReader ldifReader = new LdifReader( in );\n         List<Entry> entries = new ArrayList<Entry>();\n         while ( ldifReader.hasNext() )\n@@ -229,17 +224,16 @@ protected void setUp() throws Exception\n         start++;\n         directoryService = new DefaultDirectoryService();\n         directoryService.setShutdownHookEnabled( false );\n+        socketAcceptor = new SocketAcceptor( null );\n+        ldapServer = new LdapServer( socketAcceptor, directoryService );\n+        ldapServer.setIpPort( port = AvailablePortFinder.getNextAvailable( 1024 ) );\n+\n         doDelete( directoryService.getWorkingDirectory() );\n         configureDirectoryService();\n         directoryService.startup();\n-        port = AvailablePortFinder.getNextAvailable( 1024 );\n \n-        socketAcceptor = new SocketAcceptor( null );\n-        ldapServer = new LdapServer( socketAcceptor, directoryService );\n-        ldapServer.setIpPort( port );\n         configureLdapServer();\n         ldapServer.start();\n-\n         setContexts( \"uid=admin,ou=system\", \"secret\" );\n     }\n ",
                "raw_url": "https://github.com/apache/directory-server/raw/fd9a6ba219000fbbdf1e89ab0f46903824963330/server-unit/src/main/java/org/apache/directory/server/unit/AbstractServerTest.java",
                "sha": "3ccc0bc4e3fa0042687d53ae1baaeb7ffe71feed",
                "status": "modified"
            }
        ],
        "message": "fixing some issues with the abstract test which was resulting in NPE due to order of setUp commands\n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/bigbang@584317 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/f3bf61c33232aa1bdf02bc4c169f1ab49ea7a64d",
        "patched_files": [],
        "repo": "directory-server",
        "unit_tests": [
            "AbstractServerTest.java"
        ]
    },
    "directory-server_fdfa437": {
        "bug_id": "directory-server_fdfa437",
        "commit": "https://github.com/apache/directory-server/commit/fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/InterceptorEnum.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/InterceptorEnum.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/InterceptorEnum.java",
                "patch": "@@ -51,7 +51,7 @@\n      * The private constructor\n      * @param methodName The associated interceptor name\n      */\n-    private InterceptorEnum( String name )\n+    InterceptorEnum( String name )\n     {\n         this.name = name;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/InterceptorEnum.java",
                "sha": "90515cf3c973703633b2b044c739b145c083b516",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/OperationEnum.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/OperationEnum.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/OperationEnum.java",
                "patch": "@@ -69,7 +69,7 @@\n      * The private constructor\n      * @param methodName The associated method name\n      */\n-    private OperationEnum( String methodName )\n+    OperationEnum( String methodName )\n     {\n         this.methodName = methodName;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/OperationEnum.java",
                "sha": "ac760a92c488d042082f1e2ee182a949ca122780",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/ReferralHandlingMode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/ReferralHandlingMode.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/ReferralHandlingMode.java",
                "patch": "@@ -50,7 +50,7 @@\n      * @see Context#REFERRAL\n      * @param jndiValue the JNDI Context.REFERRAL key's value\n      */\n-    private ReferralHandlingMode( String jndiValue )\n+    ReferralHandlingMode( String jndiValue )\n     {\n         this.jndiValue = jndiValue;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/ReferralHandlingMode.java",
                "sha": "ce0ad663018f97d6ca9f909971dc626cb4eaeeee",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/authn/ppolicy/CheckQualityEnum.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/authn/ppolicy/CheckQualityEnum.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/authn/ppolicy/CheckQualityEnum.java",
                "patch": "@@ -51,7 +51,7 @@\n     /**\n      * Create a new instance of this enum\n      */\n-    private CheckQualityEnum( int value )\n+    CheckQualityEnum( int value )\n     {\n         this.value = value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/authn/ppolicy/CheckQualityEnum.java",
                "sha": "9fd2de4f89c0f4647f285c5d583fbfdb19307764",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/changelog/RevisionOrder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/changelog/RevisionOrder.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/changelog/RevisionOrder.java",
                "patch": "@@ -34,7 +34,7 @@\n     private final boolean ascending;\n \n \n-    private RevisionOrder( boolean ascending )\n+    RevisionOrder( boolean ascending )\n     {\n         this.ascending = ascending;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/changelog/RevisionOrder.java",
                "sha": "4491442537cb6c6083fa099e5d6dc929851dbfbb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/event/EventType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/event/EventType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/event/EventType.java",
                "patch": "@@ -48,7 +48,7 @@\n     private int mask;\n \n \n-    private EventType( int mask )\n+    EventType( int mask )\n     {\n         this.mask = mask;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/event/EventType.java",
                "sha": "d62442be9b9a198fb76e4ad3a275e75f37a0ada9",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/interceptor/context/BindOperationContext.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/interceptor/context/BindOperationContext.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 2,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/interceptor/context/BindOperationContext.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.directory.api.ldap.model.constants.AuthenticationLevel;\n import org.apache.directory.api.ldap.model.exception.LdapAuthenticationException;\n import org.apache.directory.api.ldap.model.message.MessageTypeEnum;\n+import org.apache.directory.api.ldap.model.name.Dn;\n import org.apache.directory.api.util.Strings;\n import org.apache.directory.server.core.api.CoreSession;\n import org.apache.directory.server.core.api.OperationEnum;\n@@ -88,11 +89,11 @@ public BindOperationContext( CoreSession session )\n     public AuthenticationLevel getAuthenticationLevel() throws LdapAuthenticationException\n     {\n         // First check if the SASL mechanism has been set\n-        if ( ( saslMechanism == null ) )\n+        if ( saslMechanism == null )\n         {\n             // No, it's either a SIMPLE, ANONYMOUS, UNAUTHENT or an error\n             //\n-            if ( dn.isEmpty() )\n+            if ( Dn.isNullOrEmpty( dn ) )\n             {\n                 if ( Strings.isEmpty( credentials ) )\n                 {",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/interceptor/context/BindOperationContext.java",
                "sha": "bcf64c52d8a6a85261caa97846fc4bed32d172e6",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/sp/StoredProcEngine.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-api/src/main/java/org/apache/directory/server/core/api/sp/StoredProcEngine.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-api/src/main/java/org/apache/directory/server/core/api/sp/StoredProcEngine.java",
                "patch": "@@ -46,7 +46,7 @@\n      * <p>\n      * This method should be called before an attempt to invoke a stored procedure via this Engine.\n      */\n-    void setSPUnitEntry( final Entry spUnit );\n+    void setSPUnitEntry( Entry spUnit );\n \n \n     /**",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-api/src/main/java/org/apache/directory/server/core/api/sp/StoredProcEngine.java",
                "sha": "1fe450b40399eb029410b7ddc4c9ace23154423e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlNode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlNode.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlNode.java",
                "patch": "@@ -37,7 +37,7 @@\n     T value = null;\n \n \n-    public AvlNode( AvlNode<T> parent, T value )\n+    AvlNode( AvlNode<T> parent, T value )\n     {\n         this.parent = parent;\n         this.value = value;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlNode.java",
                "sha": "2a8417ca4783988f20f3d063424262f341a45716",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlTreeIterator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlTreeIterator.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlTreeIterator.java",
                "patch": "@@ -36,7 +36,7 @@\n     private boolean initial = true;\n \n \n-    public AvlTreeIterator( AvlNode<T> root )\n+    AvlTreeIterator( AvlNode<T> root )\n     {\n         this.root = root;\n         findNext();",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-avl/src/main/java/org/apache/directory/server/core/avltree/avl/AvlTreeIterator.java",
                "sha": "ad1104581a1a1b947b04c9c3f3ba22048b5af3d1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-shared/src/main/java/org/apache/directory/server/core/shared/SortedEntryComparator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/core-shared/src/main/java/org/apache/directory/server/core/shared/SortedEntryComparator.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "core-shared/src/main/java/org/apache/directory/server/core/shared/SortedEntryComparator.java",
                "patch": "@@ -67,7 +67,7 @@\n      * @param mrOid the OID or name of the matchingrule\n      * @param reverse flag to indicate the sort order\n      */\n-    public SortedEntryComparator( AttributeType at, String mrule, boolean reverse, SchemaManager schemaManager ) throws LdapException\n+    SortedEntryComparator( AttributeType at, String mrule, boolean reverse, SchemaManager schemaManager ) throws LdapException\n     {\n         this.type = at;\n         this.reverse = reverse;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/core-shared/src/main/java/org/apache/directory/server/core/shared/SortedEntryComparator.java",
                "sha": "8856bf94cc852a2c8463733832dafba3698fd2ba",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/interceptors/event/src/main/java/org/apache/directory/server/core/event/DefaultEventService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/interceptors/event/src/main/java/org/apache/directory/server/core/event/DefaultEventService.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "interceptors/event/src/main/java/org/apache/directory/server/core/event/DefaultEventService.java",
                "patch": "@@ -60,7 +60,7 @@\n      * @param directoryService The associated DirectoryService\n      * @param registrations The list of Registrations\n      */\n-    public DefaultEventService( DirectoryService directoryService )\n+    DefaultEventService( DirectoryService directoryService )\n     {\n         this.directoryService = directoryService;\n         SchemaManager schemaManager = directoryService.getSchemaManager();",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/interceptors/event/src/main/java/org/apache/directory/server/core/event/DefaultEventService.java",
                "sha": "84408dc0d258b676cfea993de8da09b4f3278be0",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/DupsCursor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/DupsCursor.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/DupsCursor.java",
                "patch": "@@ -92,7 +92,7 @@\n     private boolean valueAvailable;\n \n \n-    public DupsCursor( JdbmTable<K, V> table )\n+    DupsCursor( JdbmTable<K, V> table )\n     {\n         if ( IS_DEBUG )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/DupsCursor.java",
                "sha": "577199b367d42817cfd3220aac55d0b64f12d0ed",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/NoDupsCursor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/NoDupsCursor.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/NoDupsCursor.java",
                "patch": "@@ -64,7 +64,7 @@\n      * @param table the JDBM Table to build a Cursor over\n      * @throws IOException of there are problems accessing the BTree\n      */\n-    public NoDupsCursor( JdbmTable<K, V> table )\n+    NoDupsCursor( JdbmTable<K, V> table )\n     {\n         if ( IS_DEBUG )\n         {",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/jdbm-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/jdbm/NoDupsCursor.java",
                "sha": "edff4ac6139efc866a4df994ad02004d904ebe7c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/ldif-partition/src/main/java/org/apache/directory/server/core/partition/ldif/SingleFileLdifPartition.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/ldif-partition/src/main/java/org/apache/directory/server/core/partition/ldif/SingleFileLdifPartition.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "ldif-partition/src/main/java/org/apache/directory/server/core/partition/ldif/SingleFileLdifPartition.java",
                "patch": "@@ -414,7 +414,7 @@ private void appendLdif( Entry entry ) throws IOException, LdapException\n         private long len;\n \n \n-        public RandomAccessLdifReader() throws LdapException\n+        RandomAccessLdifReader() throws LdapException\n         {\n             try\n             {",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/ldif-partition/src/main/java/org/apache/directory/server/core/partition/ldif/SingleFileLdifPartition.java",
                "sha": "6dfc46bc71a02d414a2c210c5be3072d59a02423",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/mavibot-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/mavibot/MavibotCursor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/mavibot-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/mavibot/MavibotCursor.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "mavibot-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/mavibot/MavibotCursor.java",
                "patch": "@@ -62,7 +62,7 @@\n      *\n      * @param table the JDBM Table to build a Cursor over\n      */\n-    public MavibotCursor( MavibotTable<K, V> table )\n+    MavibotCursor( MavibotTable<K, V> table )\n     {\n         LOG_CURSOR.debug( \"Creating MavibotCursor {}\", this );\n         this.table = table;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/mavibot-partition/src/main/java/org/apache/directory/server/core/partition/impl/btree/mavibot/MavibotCursor.java",
                "sha": "32910b1c327c9649ea03f3362130fa0848f98246",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dhcp/src/main/java/org/apache/directory/server/dhcp/messages/MessageType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dhcp/src/main/java/org/apache/directory/server/dhcp/messages/MessageType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dhcp/src/main/java/org/apache/directory/server/dhcp/messages/MessageType.java",
                "patch": "@@ -70,7 +70,7 @@ public byte getCode()\n     /**\n      * Private constructor prevents construction outside of this class.\n      */\n-    private MessageType( byte ordinal, String name )\n+    MessageType( byte ordinal, String name )\n     {\n         this.ordinal = ordinal;\n         this.name = name;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dhcp/src/main/java/org/apache/directory/server/dhcp/messages/MessageType.java",
                "sha": "e09785b4c51ff179843d7a676ab2db09c28b4df4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/MessageType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/MessageType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/MessageType.java",
                "patch": "@@ -41,7 +41,7 @@\n     private final byte value;\n \n \n-    private MessageType( int value )\n+    MessageType( int value )\n     {\n         this.value = ( byte ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/MessageType.java",
                "sha": "8206fbc71e55023c53302fe59e1513abb5327465",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/OpCode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/OpCode.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/OpCode.java",
                "patch": "@@ -50,7 +50,7 @@\n     private final byte value;\n \n \n-    private OpCode( int value )\n+    OpCode( int value )\n     {\n         this.value = ( byte ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/OpCode.java",
                "sha": "b1f6329a16c804e3a6f4359f659b361adc02f401",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ProtocolType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ProtocolType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ProtocolType.java",
                "patch": "@@ -164,7 +164,7 @@\n     private final byte value;\n \n \n-    private ProtocolType( int value )\n+    ProtocolType( int value )\n     {\n         this.value = ( byte ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ProtocolType.java",
                "sha": "a22409fc827690ddc03812beab3639f72df2ef4e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordClass.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordClass.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordClass.java",
                "patch": "@@ -53,7 +53,7 @@\n     private final short value;\n \n \n-    private RecordClass( int value )\n+    RecordClass( int value )\n     {\n         this.value = ( short ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordClass.java",
                "sha": "19fade152f3edb842c41d4bde70bd5f53d0bd37b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordType.java",
                "patch": "@@ -194,7 +194,7 @@\n     private final short value;\n \n \n-    private RecordType( int value )\n+    RecordType( int value )\n     {\n         this.value = ( short ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/RecordType.java",
                "sha": "f60c905d7b08f0859e99d2667343a42b9cf6e7cc",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ResponseCode.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ResponseCode.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ResponseCode.java",
                "patch": "@@ -53,7 +53,7 @@\n     private final byte value;\n \n \n-    private ResponseCode( int value )\n+    ResponseCode( int value )\n     {\n         this.value = ( byte ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ResponseCode.java",
                "sha": "a64d2888736c9bb013a43213c25eb7a9a3854d2a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ServiceType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ServiceType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ServiceType.java",
                "patch": "@@ -275,7 +275,7 @@\n     private final byte value;\n \n \n-    private ServiceType( int value )\n+    ServiceType( int value )\n     {\n         this.value = ( byte ) value;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/messages/ServiceType.java",
                "sha": "20c57c249372b051a16c906f5337e4bc23006995",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsCatalog.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsCatalog.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsCatalog.java",
                "patch": "@@ -41,7 +41,7 @@\n      *\n      * @param map\n      */\n-    public DnsCatalog( Map<String, Object> map )\n+    DnsCatalog( Map<String, Object> map )\n     {\n         this.map = map;\n     }",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-dns/src/main/java/org/apache/directory/server/dns/store/jndi/DnsCatalog.java",
                "sha": "582f6a6ee89d0cb456166a0411c7826ef2073e1a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/LeapIndicatorType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/LeapIndicatorType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/LeapIndicatorType.java",
                "patch": "@@ -71,7 +71,7 @@\n     /**\n      * Private constructor prevents construction outside of this class.\n      */\n-    private LeapIndicatorType( int ordinal, String name )\n+    LeapIndicatorType( int ordinal, String name )\n     {\n         this.ordinal = ordinal;\n         this.name = name;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/LeapIndicatorType.java",
                "sha": "4ed6788197b393bd0439a971bea696f1344a910b",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/ModeType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/ModeType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/ModeType.java",
                "patch": "@@ -94,7 +94,7 @@\n     /**\n      * Private constructor prevents construction outside of this class.\n      */\n-    private ModeType( int ordinal, String name )\n+    ModeType( int ordinal, String name )\n     {\n         this.ordinal = ordinal;\n         this.name = name;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/ModeType.java",
                "sha": "0aae530226cbdd9a865d5182756d2716be14e2fb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/StratumType.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/StratumType.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/StratumType.java",
                "patch": "@@ -65,7 +65,7 @@\n     /**\n      * Private constructor prevents construction outside of this class.\n      */\n-    private StratumType( int ordinal, String name )\n+    StratumType( int ordinal, String name )\n     {\n         this.ordinal = ordinal;\n         this.name = name;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-ntp/src/main/java/org/apache/directory/server/ntp/messages/StratumType.java",
                "sha": "bb73640565c808569cf5bdeab3ff47bb0c1ac3f1",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-shared/src/main/java/org/apache/directory/server/protocol/shared/TransportProtocol.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/protocol-shared/src/main/java/org/apache/directory/server/protocol/shared/TransportProtocol.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "protocol-shared/src/main/java/org/apache/directory/server/protocol/shared/TransportProtocol.java",
                "patch": "@@ -32,7 +32,7 @@\n     private final String stringValue;\n \n \n-    private TransportProtocol( int intValue, String stringValue )\n+    TransportProtocol( int intValue, String stringValue )\n     {\n         this.intValue = intValue;\n         this.stringValue = stringValue;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/protocol-shared/src/main/java/org/apache/directory/server/protocol/shared/TransportProtocol.java",
                "sha": "b1296492f0963cbd9aa5c94c1a5a5d7e68b946d4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/server-config/src/main/java/org/apache/directory/server/config/ConfigSchemaConstants.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/server-config/src/main/java/org/apache/directory/server/config/ConfigSchemaConstants.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "server-config/src/main/java/org/apache/directory/server/config/ConfigSchemaConstants.java",
                "patch": "@@ -285,7 +285,7 @@\n \n \n     /** A private constructor */\n-    private ConfigSchemaConstants( String value, String oid )\n+    ConfigSchemaConstants( String value, String oid )\n     {\n         this.value = value;\n         this.oid = oid;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/server-config/src/main/java/org/apache/directory/server/config/ConfigSchemaConstants.java",
                "sha": "52b0b6382e9ec50c420d4796d7256d6f9b5c453a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/directory-server/blob/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/service/src/main/java/org/apache/directory/server/UberjarMain.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/directory-server/contents/service/src/main/java/org/apache/directory/server/UberjarMain.java?ref=fdfa43716a9fe8ff373b928048788b27f3ccb5bc",
                "deletions": 1,
                "filename": "service/src/main/java/org/apache/directory/server/UberjarMain.java",
                "patch": "@@ -73,7 +73,7 @@ public static void main( String[] args ) throws Exception\n         {\n             case START :\n                 // Starts the server\n-                LOG.debug( \"Staring runtime\" );\n+                LOG.debug( \"Starting runtime\" );\n                 instance.start( instanceDirectory );\n \n                 break;",
                "raw_url": "https://github.com/apache/directory-server/raw/fdfa43716a9fe8ff373b928048788b27f3ccb5bc/service/src/main/java/org/apache/directory/server/UberjarMain.java",
                "sha": "6a7ebad17a6c66c93e5e76de2407e792d8546761",
                "status": "modified"
            }
        ],
        "message": "o Fixed some checkstyle error\no Fixed a potential NPE \n\ngit-svn-id: https://svn.apache.org/repos/asf/directory/apacheds/branches/apacheds-value@1770266 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/directory-server/commit/6842891fdb7a96cbcaad27a3c30b4316f6a66a65",
        "patched_files": [
            "RecordClass.java",
            "DupsCursor.java",
            "NoDupsCursor.java",
            "SingleFileLdifPartition.java"
        ],
        "repo": "directory-server",
        "unit_tests": [
            "DupsCursorTest.java",
            "RecordClassTest.java",
            "NoDupsCursorTest.java",
            "SingleFileLdifPartitionTest.java"
        ]
    }
}