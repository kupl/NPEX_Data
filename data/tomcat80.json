{
    "tomcat80_00ee85d": {
        "bug_id": "tomcat80_00ee85d",
        "commit": "https://github.com/apache/tomcat80/commit/00ee85d234cc83d3738c00758a695310fa9b4a52",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/00ee85d234cc83d3738c00758a695310fa9b4a52/java/org/apache/jasper/compiler/Validator.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Validator.java?ref=00ee85d234cc83d3738c00758a695310fa9b4a52",
                "deletions": 6,
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "patch": "@@ -652,6 +652,7 @@ public void visit(Node.UseBean n) throws JasperException {\n             visitBody(n);\n         }\n \n+        @SuppressWarnings(\"null\") // type can't be null after initial test\n         @Override\n         public void visit(Node.PlugIn n) throws JasperException {\n             JspUtil.checkAttributes(\"Plugin\", n, plugInAttrs, err);\n@@ -803,6 +804,7 @@ private boolean containsDeferredSyntax(String value) {\n             return false;\n         }\n \n+        @SuppressWarnings(\"null\") // tagInfo can't be null after initial test\n         @Override\n         public void visit(Node.CustomTag n) throws JasperException {\n \n@@ -1071,9 +1073,6 @@ private void checkXmlAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Attributes attrs = n.getAttributes();\n \n@@ -1279,9 +1278,6 @@ private void checkNamedAttributes(Node.CustomTag n,\n                 throws JasperException {\n \n             TagInfo tagInfo = n.getTagInfo();\n-            if (tagInfo == null) {\n-                err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n-            }\n             TagAttributeInfo[] tldAttrs = tagInfo.getAttributes();\n             Node.Nodes naNodes = n.getNamedAttributeNodes();\n \n@@ -1663,6 +1659,7 @@ public Method resolveFunction(String prefix, String localName) {\n                     this.fmapper = fmapper;\n                 }\n \n+                @SuppressWarnings(\"null\") // c can't be null after catch block\n                 @Override\n                 public void visit(ELNode.Function n) throws JasperException {\n \n@@ -1726,6 +1723,7 @@ public void visit(Node.CustomTag n) throws JasperException {\n                 err.jspError(n, \"jsp.error.missing.tagInfo\", n.getQName());\n             }\n \n+            @SuppressWarnings(\"null\") // tagInfo can't be null here\n             ValidationMessage[] errors = tagInfo.validate(n.getTagData());\n             if (errors != null && errors.length != 0) {\n                 StringBuilder errMsg = new StringBuilder();",
                "raw_url": "https://github.com/apache/tomcat80/raw/00ee85d234cc83d3738c00758a695310fa9b4a52/java/org/apache/jasper/compiler/Validator.java",
                "sha": "0d3a5ad6147a25c30dfaa0caa00dd2439389a929",
                "status": "modified"
            }
        ],
        "message": "Clean-up\n- fix false positive NPE warnings by removing redundant tests and suppressing remaining warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1380380 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/bb797dfa08a2569694eb768545b4de1dcfaf5ae3",
        "repo": "tomcat80",
        "unit_tests": [
            "TestValidator.java"
        ]
    },
    "tomcat80_00f2257": {
        "bug_id": "tomcat80_00f2257",
        "commit": "https://github.com/apache/tomcat80/commit/00f225772e7b9a0397ee2116478ff4ee10294787",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/AbstractResourceSet.java?ref=00f225772e7b9a0397ee2116478ff4ee10294787",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "patch": "@@ -39,7 +39,8 @@\n \n     protected final void checkPath(String path) {\n         if (path == null || path.length() == 0 || path.charAt(0) != '/') {\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"abstractResourceSet.checkPath\", path));\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/AbstractResourceSet.java",
                "sha": "05e14eb705d13530dda9760a17448c25cfa7eb14",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/Cache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/Cache.java?ref=00f225772e7b9a0397ee2116478ff4ee10294787",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/Cache.java",
                "patch": "@@ -145,7 +145,7 @@ protected void backgroundProcess() {\n \n     private boolean noCache(String path) {\n         // Don't cache resources used by the class loader (it has its own cache)\n-        if (path == null || path.startsWith(\"/WEB-INF/classes\") ||\n+        if (path.startsWith(\"/WEB-INF/classes\") ||\n                 path.startsWith(\"/WEB-INF/lib\")) {\n             return true;\n         }",
                "raw_url": "https://github.com/apache/tomcat80/raw/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/Cache.java",
                "sha": "f5abdbf0c3af67a7e08b393b9f91a333cd3b1adf",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/LocalStrings.properties",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/LocalStrings.properties?ref=00f225772e7b9a0397ee2116478ff4ee10294787",
                "deletions": 0,
                "filename": "java/org/apache/catalina/webresources/LocalStrings.properties",
                "patch": "@@ -14,9 +14,12 @@\n # limitations under the License.\n \n abstractArchiveResourceSet.setReadOnlyFalse=Archive based WebResourceSets such as those based on JARs are hard-coded to be read-only and may not be configured to be read-write\n+\n abstractResource.getContentFail=Unable to return [{0}] as a byte array\n abstractResource.getContentTooLarge=Unable to return [{0}] as a byte array since the resource is [{1}] bytes in size which is larger than the maximum size of a byte array\n \n+abstractResourceSet.checkPath=The requested path [{0}] is not valid. It must begin with \"/\".\n+\n cache.addFail=Unable to add the resource at [{0}] to the cache because there was insufficient free space available after evicting expired cache entries - consider increasing the maximum size of the cache\n cache.backgroundEvictFail=The background cache eviction process was unable to free [{0}] percent of the cache for Context [{1}] - consider increasing the maximum size of the cache. After eviction approximately [{2}] KB of data remained in the cache.\n cache.objectMaxSizeTooBig=The value of [{0}]kB for objectMaxSize is larger than the limit of maxSize/20 so has been reduced to [{1}]kB\n@@ -37,6 +40,7 @@ standardRoot.createInvalidFile=Unable to create WebResourceSet from [{0}]\n standardRoot.createNoFileResourceSet=The FileResourceSet feature has not yet been implemented\n standardRoot.createUnknownType=Unable to create WebResourceSet of unknown type [{0}]\n standardRoot.invalidPath=The resource path [{0}] is not valid\n+standardRoot.invalidPathNormal=The resource path [{0}] has been normalized to [{1}] which is not valid\n standardRoot.lockedFile=The web application [{0}] failed to close the file [{1}] opened via the following stack trace\n standardRoot.noContext=A Context has not been configured for this WebResourceRoot\n standardRoot.startInvalidMain=The main resource set specified [{0}] is not valid",
                "raw_url": "https://github.com/apache/tomcat80/raw/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/LocalStrings.properties",
                "sha": "770b5e83125334114b9313d762a6593d2d3de2e6",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=00f225772e7b9a0397ee2116478ff4ee10294787",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -237,7 +237,14 @@ private String validate(String path) {\n             throw new IllegalArgumentException(\n                     sm.getString(\"standardRoot.invalidPath\", path));\n         }\n-        return RequestUtil.normalize(path);\n+\n+        String result = RequestUtil.normalize(path);\n+        if (result == null || result.length() == 0 || !result.startsWith(\"/\")) {\n+            throw new IllegalArgumentException(\n+                    sm.getString(\"standardRoot.invalidPathNormal\", path, result));\n+        }\n+\n+        return result;\n     }\n \n     protected final WebResource getResourceInternal(String path,",
                "raw_url": "https://github.com/apache/tomcat80/raw/00f225772e7b9a0397ee2116478ff4ee10294787/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "0020ddb67e88fe8386547ff6c05d260b80743495",
                "status": "modified"
            }
        ],
        "message": "Better way to avoid NPE in resource cache - don't let the request get that far when we know we are going to fail it anyway.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1573370 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/9531d972240b60a336d3a86e738161623943b042",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat80_011c645": {
        "bug_id": "tomcat80_011c645",
        "commit": "https://github.com/apache/tomcat80/commit/011c6456105a9fc35052043c7aedc3a9814a13e6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/011c6456105a9fc35052043c7aedc3a9814a13e6/java/org/apache/catalina/core/AsyncContextImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/AsyncContextImpl.java?ref=011c6456105a9fc35052043c7aedc3a9814a13e6",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/AsyncContextImpl.java",
                "patch": "@@ -431,6 +431,10 @@ public void setErrorState(Throwable t, boolean fireOnError) {\n         if (result.get()) {\n             // No listener called dispatch() or complete(). This is an error.\n             // SRV.2.3.3.3 (search for \"error dispatch\")\n+            // Take a local copy to avoid threading issues if another thread\n+            // clears this (can happen during error handling with non-container\n+            // threads)\n+            ServletResponse servletResponse = this.servletResponse;\n             if (servletResponse instanceof HttpServletResponse) {\n                 ((HttpServletResponse) servletResponse).setStatus(\n                         HttpServletResponse.SC_INTERNAL_SERVER_ERROR);",
                "raw_url": "https://github.com/apache/tomcat80/raw/011c6456105a9fc35052043c7aedc3a9814a13e6/java/org/apache/catalina/core/AsyncContextImpl.java",
                "sha": "82a37677c0fc52381ce88975499c1fc3b94a2d6b",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE during non-container thread error handling\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1799934 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ff95c6e45429ffa6c98977de5b7441037b6803e5",
        "repo": "tomcat80",
        "unit_tests": [
            "TestAsyncContextImpl.java"
        ]
    },
    "tomcat80_0472c8b": {
        "bug_id": "tomcat80_0472c8b",
        "commit": "https://github.com/apache/tomcat80/commit/0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7/java/org/apache/jasper/resources/LocalStrings.properties",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/resources/LocalStrings.properties?ref=0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7",
                "deletions": 1,
                "filename": "java/org/apache/jasper/resources/LocalStrings.properties",
                "patch": "@@ -402,4 +402,4 @@ org.apache.jasper.compiler.TldCache.servletContextNull=The provided SevletContex\n org.apache.jasper.servlet.JasperInitializer.onStartup=Initializing Jasper for context [{0}]\n org.apache.jasper.servlet.TldScanner.webxmlSkip=Skipping load of TLD for URI {1} from resource path {0} as it has already been defined in <jsp-config>\n org.apache.jasper.servlet.TldScanner.webxmlAdd=Loading TLD for URI {1} from resource path {0}\n-\n+org.apache.jasper.servlet.TldScanner.webxmlFailPathDoesNotExist=Failed to process TLD with path [{0}] and URI [{1}]. The specified path does not exist.",
                "raw_url": "https://github.com/apache/tomcat80/raw/0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7/java/org/apache/jasper/resources/LocalStrings.properties",
                "sha": "cc26ee3847a5aff98468701412ce27b9cb6e7da7",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat80/blob/0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7/java/org/apache/jasper/servlet/TldScanner.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/servlet/TldScanner.java?ref=0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7",
                "deletions": 14,
                "filename": "java/org/apache/jasper/servlet/TldScanner.java",
                "patch": "@@ -175,21 +175,27 @@ protected void scanJspConfig() throws IOException, SAXException {\n             }\n \n             URL url = context.getResource(resourcePath);\n-            TldResourcePath tldResourcePath;\n-            if (resourcePath.endsWith(\".jar\")) {\n-                // if the path points to a jar file, the TLD is presumed to be\n-                // inside at META-INF/taglib.tld\n-                tldResourcePath = new TldResourcePath(\n-                        url, resourcePath, \"META-INF/taglib.tld\");\n+            if (url != null) {\n+                TldResourcePath tldResourcePath;\n+                if (resourcePath.endsWith(\".jar\")) {\n+                    // if the path points to a jar file, the TLD is presumed to be\n+                    // inside at META-INF/taglib.tld\n+                    tldResourcePath = new TldResourcePath(url, resourcePath, \"META-INF/taglib.tld\");\n+                } else {\n+                    tldResourcePath = new TldResourcePath(url, resourcePath);\n+                }\n+                // parse TLD but store using the URI supplied in the descriptor\n+                TaglibXml tld = tldParser.parse(tldResourcePath);\n+                uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n+                tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n+                if (tld.getListeners() != null) {\n+                    listeners.addAll(tld.getListeners());\n+                }\n             } else {\n-                tldResourcePath = new TldResourcePath(url, resourcePath);\n-            }\n-            // parse TLD but store using the URI supplied in the descriptor\n-            TaglibXml tld = tldParser.parse(tldResourcePath);\n-            uriTldResourcePathMap.put(taglibURI, tldResourcePath);\n-            tldResourcePathTaglibXmlMap.put(tldResourcePath, tld);\n-            if (tld.getListeners() != null) {\n-                listeners.addAll(tld.getListeners());\n+                log.warn(Localizer.getMessage(MSG + \".webxmlFailPathDoesNotExist\",\n+                        resourcePath,\n+                        taglibURI));\n+                continue;\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/0472c8b228fdbc4e2ab3362ec83d0e2cc30062b7/java/org/apache/jasper/servlet/TldScanner.java",
                "sha": "8d56b5f1ed5c1420302d9d4e28d7ccfcee8c5347",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55905\nPrevent NPE when the specified tld resource does not exists.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552071 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/8e6eeab4915980d96fd50d4dfb178ca285c98823",
        "repo": "tomcat80",
        "unit_tests": [
            "TestTldScanner.java"
        ]
    },
    "tomcat80_04fb679": {
        "bug_id": "tomcat80_04fb679",
        "commit": "https://github.com/apache/tomcat80/commit/04fb6796596a091c2e38f466da30e65859480d94",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/04fb6796596a091c2e38f466da30e65859480d94/java/org/apache/catalina/core/StandardContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/StandardContext.java?ref=04fb6796596a091c2e38f466da30e65859480d94",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -1875,6 +1875,9 @@ public void setCharsetMapperClass(String mapper) {\n      * @return The work path\n      */ \n     public String getWorkPath() {\n+        if (getWorkDir() == null) {\n+            return null;\n+        }\n         File workDir = new File(getWorkDir());\n         if (!workDir.isAbsolute()) {\n             File catalinaHome = engineBase();",
                "raw_url": "https://github.com/apache/tomcat80/raw/04fb6796596a091c2e38f466da30e65859480d94/java/org/apache/catalina/core/StandardContext.java",
                "sha": "b5b218419bc63ad44290afb5b28e96f2a9b0b2da",
                "status": "modified"
            }
        ],
        "message": "- NPE check (when using JMX, if I remember correctly).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@540979 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/e6b737f75d715bff429fe4b6b32f753803712209",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardContext.java"
        ]
    },
    "tomcat80_0656fc7": {
        "bug_id": "tomcat80_0656fc7",
        "commit": "https://github.com/apache/tomcat80/commit/0656fc7a775bdde7ca883483d71057c149f317ee",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat80/blob/0656fc7a775bdde7ca883483d71057c149f317ee/java/javax/servlet/jsp/PageContext.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/javax/servlet/jsp/PageContext.java?ref=0656fc7a775bdde7ca883483d71057c149f317ee",
                "deletions": 2,
                "filename": "java/javax/servlet/jsp/PageContext.java",
                "patch": "@@ -513,10 +513,18 @@ public BodyContent pushBody() {\n      * @since 2.0\n      */\n     public ErrorData getErrorData() {\n+        int status = 0;\n+        \n+        Integer status_code = (Integer)getRequest().getAttribute( \n+                \"javax.servlet.error.status_code\");\n+        // Avoid NPE if attribute is not set\n+        if (status_code != null) {\n+            status = status_code.intValue();\n+        }\n+\n         return new ErrorData( \n             (Throwable)getRequest().getAttribute( \"javax.servlet.error.exception\" ),\n-            ((Integer)getRequest().getAttribute( \n-                \"javax.servlet.error.status_code\" )).intValue(),\n+            status,\n             (String)getRequest().getAttribute( \"javax.servlet.error.request_uri\" ),\n             (String)getRequest().getAttribute( \"javax.servlet.error.servlet_name\" ) );\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/0656fc7a775bdde7ca883483d71057c149f317ee/java/javax/servlet/jsp/PageContext.java",
                "sha": "b3507fa7ff596be198368dbb58e92cf67a349125",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49196\nAvoid NPE on PageContext.getErrorData()\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@948057 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c695e9d02b6e10c7061b69a24690fe3934a2352f",
        "repo": "tomcat80",
        "unit_tests": [
            "TestPageContext.java"
        ]
    },
    "tomcat80_0975012": {
        "bug_id": "tomcat80_0975012",
        "commit": "https://github.com/apache/tomcat80/commit/0975012593a348dbab56b054c9cbc4d99de08e40",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/0975012593a348dbab56b054c9cbc4d99de08e40/java/org/apache/catalina/realm/JNDIRealm.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=0975012593a348dbab56b054c9cbc4d99de08e40",
                "deletions": 2,
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "patch": "@@ -1929,8 +1929,12 @@ protected synchronized Principal getPrincipal(DirContext context,\n \n         User user = getUser(context, username);\n \n-        return new GenericPrincipal(user.username, user.password ,\n-                getRoles(context, user));\n+        if (user != null) {\n+            return new GenericPrincipal(user.username, user.password,\n+                    getRoles(context, user));\n+        }\n+        \n+        return null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomcat80/raw/0975012593a348dbab56b054c9cbc4d99de08e40/java/org/apache/catalina/realm/JNDIRealm.java",
                "sha": "72a07171c70019f59f3af585b08de710cd42b4de",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=48516\nFix possible NPE when user does not exist in directory\nPatch provided by Kevin Conaway\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898558 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ac0eda7c04944bfd1801af3579c598fd1b1a1c7e",
        "repo": "tomcat80",
        "unit_tests": [
            "TestJNDIRealm.java"
        ]
    },
    "tomcat80_0ab1d39": {
        "bug_id": "tomcat80_0ab1d39",
        "commit": "https://github.com/apache/tomcat80/commit/0ab1d39039d78860653b15d73d46eb403a838ee0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/0ab1d39039d78860653b15d73d46eb403a838ee0/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=0ab1d39039d78860653b15d73d46eb403a838ee0",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "patch": "@@ -83,6 +83,11 @@ protected void doWrite(SendHandler handler, ByteBuffer... buffers) {\n \n \n     public void onWritePossible(boolean useDispatch) {\n+        if (buffers == null) {\n+            // Servlet 3.1 will call the write listener once even if nothing\n+            // was written\n+            return;\n+        }\n         boolean complete = true;\n         try {\n             // If this is false there will be a call back when it is true",
                "raw_url": "https://github.com/apache/tomcat80/raw/0ab1d39039d78860653b15d73d46eb403a838ee0/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "sha": "998bafd59d931d7edfc6a2cce9dae54629af68a6",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if the write listener is called once immediately after being set, even if no data was written (= the app doesn't send any message during the init of the connection).\nI don't think Tomcat does it yet (this doesn't need to be ported to Tomcat 7 since it is not a Servlet 3.1 impl).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1556071 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c252543b4f3b237e780e6feb7b006ed35235ea57",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsRemoteEndpointImplServer.java"
        ]
    },
    "tomcat80_1303e33": {
        "bug_id": "tomcat80_1303e33",
        "commit": "https://github.com/apache/tomcat80/commit/1303e336c1ba34a1b82374347483a2c5fe4221e9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/1303e336c1ba34a1b82374347483a2c5fe4221e9/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=1303e336c1ba34a1b82374347483a2c5fe4221e9",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "patch": "@@ -553,7 +553,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                             m, session, config, null, params, indexInputStream,\n                             true, indexSession, true, maxMessageSize);\n                     results.add(mh);\n-                } else if (decoderMatch.hasMatches()) {\n+                } else if (decoderMatch != null && decoderMatch.hasMatches()) {\n                     if (decoderMatch.getBinaryDecoders().size() > 0) {\n                         MessageHandler mh = new PojoMessageHandlerWholeBinary(\n                                 pojo, m, session, config,",
                "raw_url": "https://github.com/apache/tomcat80/raw/1303e336c1ba34a1b82374347483a2c5fe4221e9/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "sha": "9ade75aa3ec7057f38640c99ebd460349b8b202b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55184\nAvoid NPE.\nPatch provided by Niki Dokovski.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499011 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/753e52c1fc82230138c475ebe9345d0601760810",
        "repo": "tomcat80",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    },
    "tomcat80_18f3157": {
        "bug_id": "tomcat80_18f3157",
        "commit": "https://github.com/apache/tomcat80/commit/18f315750c375c12f1a75d55f867d39ddb9ade57",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/18f315750c375c12f1a75d55f867d39ddb9ade57/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java?ref=18f315750c375c12f1a75d55f867d39ddb9ade57",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "patch": "@@ -375,7 +375,7 @@ public MessageHandlerInfo(Method m, List<DecoderEntry> decoderEntries) {\n                                 m.getName(), m.getDeclaringClass().getName()));\n                     }\n                 } else {\n-                    if (decoderMatch != null || decoderMatch.hasMatches()) {\n+                    if (decoderMatch != null && decoderMatch.hasMatches()) {\n                         throw new IllegalArgumentException(sm.getString(\n                                 \"pojoMethodMapping.duplicateMessageParam\",\n                                 m.getName(), m.getDeclaringClass().getName()));",
                "raw_url": "https://github.com/apache/tomcat80/raw/18f315750c375c12f1a75d55f867d39ddb9ade57/java/org/apache/tomcat/websocket/pojo/PojoMethodMapping.java",
                "sha": "6729ff22c7c902819b4fcad35e686cb9cf952c4d",
                "status": "modified"
            }
        ],
        "message": "Fix logic error that triggered an NPE and associated test failures\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1497308 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/a67468d744261b0b635b46ec5bd91237efa423ac",
        "repo": "tomcat80",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    },
    "tomcat80_2185620": {
        "bug_id": "tomcat80_2185620",
        "commit": "https://github.com/apache/tomcat80/commit/2185620729da216f7d3355e2bb51c4997d30a785",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/2185620729da216f7d3355e2bb51c4997d30a785/java/org/apache/catalina/session/StandardSession.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/session/StandardSession.java?ref=2185620729da216f7d3355e2bb51c4997d30a785",
                "deletions": 1,
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "patch": "@@ -710,7 +710,9 @@ public void expire(boolean notify) {\n                     }\n                 }\n             }\n-            accessCount = null;\n+            if (ACTIVITY_CHECK) {\n+                accessCount.set(0);\n+            }\n             setValid(false);\n \n             /*",
                "raw_url": "https://github.com/apache/tomcat80/raw/2185620729da216f7d3355e2bb51c4997d30a785/java/org/apache/catalina/session/StandardSession.java",
                "sha": "fcec6ee9a21a285714e9c3e4d3dc8111ba78acde",
                "status": "modified"
            }
        ],
        "message": "- Fix NPE on isValid for an expired session when activity check is enabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@465195 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/76b28b54a2c0154abac487e97dc56c57665ae58b",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardSession.java"
        ]
    },
    "tomcat80_2201f74": {
        "bug_id": "tomcat80_2201f74",
        "commit": "https://github.com/apache/tomcat80/commit/2201f74b3a724fad5bb4f55c5b512815509f1a07",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/2201f74b3a724fad5bb4f55c5b512815509f1a07/java/org/apache/catalina/session/StandardSession.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/session/StandardSession.java?ref=2201f74b3a724fad5bb4f55c5b512815509f1a07",
                "deletions": 0,
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "patch": "@@ -1032,6 +1032,8 @@ public Object getAttribute(String name) {\n             throw new IllegalStateException\n                 (sm.getString(\"standardSession.getAttribute.ise\"));\n \n+        if (name == null) return null;\n+\n         return (attributes.get(name));\n \n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/2201f74b3a724fad5bb4f55c5b512815509f1a07/java/org/apache/catalina/session/StandardSession.java",
                "sha": "3f9e4610f12222affa8c32f9f1bdff863c15035a",
                "status": "modified"
            }
        ],
        "message": "Fix bug 45195. NPE when calling getAttribute(null).\nThe spec is unclear but this is a regression from 5.0.x\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@667604 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/2e46ab75c55a091ab63145fac82b81f129af0832",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardSession.java"
        ]
    },
    "tomcat80_283a305": {
        "bug_id": "tomcat80_283a305",
        "commit": "https://github.com/apache/tomcat80/commit/283a30571cdd6a4499052f6b9e667d351e314bf1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/283a30571cdd6a4499052f6b9e667d351e314bf1/java/org/apache/jasper/compiler/Compiler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Compiler.java?ref=283a30571cdd6a4499052f6b9e667d351e314bf1",
                "deletions": 4,
                "filename": "java/org/apache/jasper/compiler/Compiler.java",
                "patch": "@@ -255,10 +255,12 @@ public void init(JspCompilationContext ctxt, JspServletWrapper jsw) {\n             // to be GC'd and save memory.\n             ctxt.setWriter(null);\n \n-            // Need to know if the JSP is an error page at runtime to determine\n-            // which HTTP methods are permitted. Error pages permit any. Normal\n-            // pages only permit GET, POST or HEAD.\n-            jsw.setErrorPage(pageInfo.isErrorPage());\n+            if (jsw != null) {\n+                // Need to know if the JSP is an error page at runtime to determine\n+                // which HTTP methods are permitted. Error pages permit any. Normal\n+                // pages only permit GET, POST or HEAD.\n+                jsw.setErrorPage(pageInfo.isErrorPage());\n+            }\n \n             if (log.isDebugEnabled()) {\n                 t4 = System.currentTimeMillis();",
                "raw_url": "https://github.com/apache/tomcat80/raw/283a30571cdd6a4499052f6b9e667d351e314bf1/java/org/apache/jasper/compiler/Compiler.java",
                "sha": "6d2182273ea420c83c5977ecf890f681c346a046",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when using JspC\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1620822 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/bfc7550283277ad20b347dd94f85abbc3e578059",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCompiler.java"
        ]
    },
    "tomcat80_28f66ce": {
        "bug_id": "tomcat80_28f66ce",
        "commit": "https://github.com/apache/tomcat80/commit/28f66ce9b55e338e2c9fcebb2439200ff1886493",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat80/blob/28f66ce9b55e338e2c9fcebb2439200ff1886493/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=28f66ce9b55e338e2c9fcebb2439200ff1886493",
                "deletions": 5,
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "patch": "@@ -142,18 +142,22 @@ protected long getTimeoutExpiry() {\n \n \n     protected void onTimeout() {\n-        clearHandler(new SocketTimeoutException());\n+        if (handler != null) {\n+            clearHandler(new SocketTimeoutException());\n+        }\n         close();\n     }\n \n \n     private void clearHandler(Throwable t) {\n         SendHandler sh = handler;\n         handler = null;\n-        if (t == null) {\n-            sh.onResult(new SendResult());\n-        } else {\n-            sh.onResult(new SendResult(t));\n+        if (sh != null) {\n+            if (t == null) {\n+                sh.onResult(new SendResult());\n+            } else {\n+                sh.onResult(new SendResult(t));\n+            }\n         }\n     }\n }",
                "raw_url": "https://github.com/apache/tomcat80/raw/28f66ce9b55e338e2c9fcebb2439200ff1886493/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "sha": "8816933e7205dc8491842d46e9d0e2896f959652",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55238\nAvoid possible NPE.\nPatch by Niki Dokovski.\nAlso added a check to onTimeout() to save creating an Exception unnecessarily\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1502265 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/4bd7633b680686cdba4c8a707f6ea64648888f13",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsRemoteEndpointImplServer.java"
        ]
    },
    "tomcat80_2a58500": {
        "bug_id": "tomcat80_2a58500",
        "commit": "https://github.com/apache/tomcat80/commit/2a58500195702d9397d387214d02fad2b12293ac",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat80/blob/2a58500195702d9397d387214d02fad2b12293ac/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=2a58500195702d9397d387214d02fad2b12293ac",
                "deletions": 7,
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "patch": "@@ -179,13 +179,15 @@ protected void postConstruct(Object instance, final Class<?> clazz)\n         // At the end the postconstruct annotated\n         // method is invoked\n         List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);\n-        for (AnnotationCacheEntry entry : annotations) {\n-            if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {\n-                Method postConstruct = (Method) entry.getAccessibleObject();\n-                boolean accessibility = postConstruct.isAccessible();\n-                postConstruct.setAccessible(true);\n-                postConstruct.invoke(instance);\n-                postConstruct.setAccessible(accessibility);\n+        if (annotations != null) {\n+            for (AnnotationCacheEntry entry : annotations) {\n+                if (entry.getType() == AnnotationCacheEntryType.POST_CONSTRUCT) {\n+                    Method postConstruct = (Method) entry.getAccessibleObject();\n+                    boolean accessibility = postConstruct.isAccessible();\n+                    postConstruct.setAccessible(true);\n+                    postConstruct.invoke(instance);\n+                    postConstruct.setAccessible(accessibility);\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/2a58500195702d9397d387214d02fad2b12293ac/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "sha": "a542e3db19058e12311a4964ce7d2a2d259a39e9",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE if JNDI is disabled.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1172546 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/14f40548acf4add3ec3a2e89aed447da5fee3077",
        "repo": "tomcat80",
        "unit_tests": [
            "TestDefaultInstanceManager.java"
        ]
    },
    "tomcat80_2df2b2d": {
        "bug_id": "tomcat80_2df2b2d",
        "commit": "https://github.com/apache/tomcat80/commit/2df2b2d7fd7b652cee7c4428154bf387c2702bbf",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/2df2b2d7fd7b652cee7c4428154bf387c2702bbf/java/org/apache/catalina/connector/Request.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/Request.java?ref=2df2b2d7fd7b652cee7c4428154bf387c2702bbf",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2818,7 +2818,9 @@ protected void parseParameters() {\n                 }\n                 return;\n             }\n-            parameters.processParameters(formData, 0, formData.length);\n+            if (formData != null) {\n+                parameters.processParameters(formData, 0, formData.length);\n+            }\n         }\n \n     }\n@@ -2864,6 +2866,9 @@ protected int readPostBody(byte body[], int len)\n                 body.append(buffer, 0, len);\n             }\n         }\n+        if (body.getLength() == 0) {\n+            return null;\n+        }\n         if (body.getLength() < body.getBuffer().length) {\n             int length = body.getLength();\n             byte[] result = new byte[length];",
                "raw_url": "https://github.com/apache/tomcat80/raw/2df2b2d7fd7b652cee7c4428154bf387c2702bbf/java/org/apache/catalina/connector/Request.java",
                "sha": "4ed0f6061b2c98e1652c71ea421b901c561a4adc",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49424\nAvoid NPE if no input data is provided in a chunked POST request\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@953434 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/2b9ee088b2eeb182bfabe9ad9b680f2e2d98a9d9",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat80_30a5a4e": {
        "bug_id": "tomcat80_30a5a4e",
        "commit": "https://github.com/apache/tomcat80/commit/30a5a4ea8d2888f19138ffd90c312e283f6cc805",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/30a5a4ea8d2888f19138ffd90c312e283f6cc805/java/org/apache/catalina/realm/RealmBase.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/RealmBase.java?ref=30a5a4ea8d2888f19138ffd90c312e283f6cc805",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "patch": "@@ -376,9 +376,10 @@ public Principal authenticate(String username, String clientDigest,\n                                   String md5a2) {\n \n         // In digest auth, digests are always lower case\n-        String md5a1 = getDigest(username, realm).toLowerCase(Locale.ENGLISH);\n+        String md5a1 = getDigest(username, realm);\n         if (md5a1 == null)\n             return null;\n+        md5a1 = md5a1.toLowerCase(Locale.ENGLISH);\n         String serverDigestValue;\n         if (qop == null) {\n             serverDigestValue = md5a1 + \":\" + nonce + \":\" + md5a2;",
                "raw_url": "https://github.com/apache/tomcat80/raw/30a5a4ea8d2888f19138ffd90c312e283f6cc805/java/org/apache/catalina/realm/RealmBase.java",
                "sha": "8a0369a6f10639cf8ef19dfa6052fd6f6e1cea6a",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54438\nFix a regression in the fix for BZ 52953 that triggered an NPE when digested passwords were used and an authentication attempt was made for a user that did not exist in the realm.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1434685 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/a0e1a2f045342df9499c188815ba193920ecef30",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRealmBase.java"
        ]
    },
    "tomcat80_33f2b55": {
        "bug_id": "tomcat80_33f2b55",
        "commit": "https://github.com/apache/tomcat80/commit/33f2b557bc35f0f379a2f201c20ae66e6f5d78d0",
        "file": [
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/tomcat80/blob/33f2b557bc35f0f379a2f201c20ae66e6f5d78d0/java/org/apache/catalina/startup/WebXml.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/WebXml.java?ref=33f2b557bc35f0f379a2f201c20ae66e6f5d78d0",
                "deletions": 18,
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "patch": "@@ -706,15 +706,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeFilter(entry.getValue(),\n                             filters.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeFilter(entry.getValue(),\n-                            temp.getFilters().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictFilter\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getFilters().containsKey(entry.getKey())) {\n+                        if (!(mergeFilter(entry.getValue(),\n+                                temp.getFilters().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictFilter\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getFilters().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }\n@@ -845,15 +849,19 @@ public boolean merge(Set<WebXml> fragments) {\n                     mergeServlet(entry.getValue(),\n                             servlets.get(entry.getKey()), false);\n                 } else {\n-                    if (!(mergeServlet(entry.getValue(),\n-                            temp.getServlets().get(entry.getKey()), true))) {\n-                        log.error(sm.getString(\n-                                \"webXml.mergeConflictServlet\",\n-                                entry.getKey(),\n-                                fragment.getName(),\n-                                fragment.getURL()));\n-\n-                        return false;\n+                    if (temp.getServlets().containsKey(entry.getKey())) {\n+                        if (!(mergeServlet(entry.getValue(),\n+                                temp.getServlets().get(entry.getKey()), true))) {\n+                            log.error(sm.getString(\n+                                    \"webXml.mergeConflictServlet\",\n+                                    entry.getKey(),\n+                                    fragment.getName(),\n+                                    fragment.getURL()));\n+    \n+                            return false;\n+                        }\n+                    } else {\n+                        temp.getServlets().put(entry.getKey(), entry.getValue());\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/tomcat80/raw/33f2b557bc35f0f379a2f201c20ae66e6f5d78d0/java/org/apache/catalina/startup/WebXml.java",
                "sha": "f258459e5de670dd42ccf9682718cdc81bf36588",
                "status": "modified"
            }
        ],
        "message": "Fix a couple of potential NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@888203 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/59167839576902a959bd97fcdf73077be3084f54",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat80_39a5d13": {
        "bug_id": "tomcat80_39a5d13",
        "commit": "https://github.com/apache/tomcat80/commit/39a5d138b59f84575045bf81c79c21a028c8700f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/39a5d138b59f84575045bf81c79c21a028c8700f/java/org/apache/tomcat/util/http/Parameters.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/util/http/Parameters.java?ref=39a5d138b59f84575045bf81c79c21a028c8700f",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/util/http/Parameters.java",
                "patch": "@@ -122,6 +122,9 @@ public void addParameterValues( String key, String[] newValues) {\n         handleQueryParameters();\n         // no \"facade\"\n         ArrayList<String> values = paramHashValues.get(name);\n+        if (values == null) {\n+            return null;\n+        }\n         return values.toArray(new String[values.size()]);\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/39a5d138b59f84575045bf81c79c21a028c8700f/java/org/apache/tomcat/util/http/Parameters.java",
                "sha": "8270e1e55b213d46aa3979f2c2a2271290a5c577",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in parameter re-factoring identified by JSP TCK.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1190481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/7085f3a599852a958412c6a5330e3dda73ba11c7",
        "repo": "tomcat80",
        "unit_tests": [
            "TestParameters.java"
        ]
    },
    "tomcat80_3c61e0a": {
        "bug_id": "tomcat80_3c61e0a",
        "commit": "https://github.com/apache/tomcat80/commit/3c61e0a9f3662ee27a657db78613f30565b89858",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat80/blob/3c61e0a9f3662ee27a657db78613f30565b89858/java/org/apache/jasper/compiler/Node.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Node.java?ref=3c61e0a9f3662ee27a657db78613f30565b89858",
                "deletions": 5,
                "filename": "java/org/apache/jasper/compiler/Node.java",
                "patch": "@@ -831,12 +831,17 @@ public ScriptingElement(String qName, String localName,\n          */\n         public String getText() {\n             String ret = text;\n-            if ((ret == null) && (body != null)) {\n-                StringBuffer buf = new StringBuffer();\n-                for (int i = 0; i < body.size(); i++) {\n-                    buf.append(body.getNode(i).getText());\n+            if (ret == null) {\n+                if (body != null) {\n+                    StringBuffer buf = new StringBuffer();\n+                    for (int i = 0; i < body.size(); i++) {\n+                        buf.append(body.getNode(i).getText());\n+                    }\n+                    ret = buf.toString();\n+                } else {\n+                    // Nulls cause NPEs further down the line\n+                    ret = \"\";\n                 }\n-                ret = buf.toString();\n             }\n             return ret;\n         }",
                "raw_url": "https://github.com/apache/tomcat80/raw/3c61e0a9f3662ee27a657db78613f30565b89858/java/org/apache/jasper/compiler/Node.java",
                "sha": "f4a8d8f8762f6c90a80e3dee1247e2c9bd809ee3",
                "status": "modified"
            }
        ],
        "message": "Fix bug 43758. Return empty string rather than null to prevent the NPEs that happen otherwise.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@607903 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/6930b1a8ac1addc634b41fd932b308db6b4f086f",
        "repo": "tomcat80",
        "unit_tests": [
            "TestNode.java"
        ]
    },
    "tomcat80_47cbff6": {
        "bug_id": "tomcat80_47cbff6",
        "commit": "https://github.com/apache/tomcat80/commit/47cbff667bbf3b6679d626ba45de0fc769884aac",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/47cbff667bbf3b6679d626ba45de0fc769884aac/java/org/apache/el/lang/ELSupport.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/el/lang/ELSupport.java?ref=47cbff667bbf3b6679d626ba45de0fc769884aac",
                "deletions": 1,
                "filename": "java/org/apache/el/lang/ELSupport.java",
                "patch": "@@ -341,7 +341,7 @@ public final static void checkType(final Object obj, final Class type)\n     public final static Object coerceToType(final Object obj, final Class type)\n             throws IllegalArgumentException {\n         if (type == null || Object.class.equals(type) ||\n-                type.equals(obj.getClass())) {\n+                (obj != null && type.equals(obj.getClass()))) {\n             return obj;\n         }\n         if (String.class.equals(type)) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/47cbff667bbf3b6679d626ba45de0fc769884aac/java/org/apache/el/lang/ELSupport.java",
                "sha": "5bddf4fc91bde4bca552c233ccad267ffce59ce0",
                "status": "modified"
            }
        ],
        "message": "Add Remy's NPE fix to trunk.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@653038 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/1b708c4027a1bb56c4e06d62575130b317e59ee8",
        "repo": "tomcat80",
        "unit_tests": [
            "TestELSupport.java"
        ]
    },
    "tomcat80_4a6e2bb": {
        "bug_id": "tomcat80_4a6e2bb",
        "commit": "https://github.com/apache/tomcat80/commit/4a6e2bbab1c34f84d3677c7e9b9d0944efb4f2a7",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tomcat80/blob/4a6e2bbab1c34f84d3677c7e9b9d0944efb4f2a7/java/org/apache/catalina/loader/WebappClassLoader.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=4a6e2bbab1c34f84d3677c7e9b9d0944efb4f2a7",
                "deletions": 6,
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "patch": "@@ -2177,15 +2177,13 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                         ThreadLocal.class);\n             mapRemove.setAccessible(true);\n             Object[] table = (Object[]) internalTableField.get(map);\n+            int staleEntriesCount = 0;\n             if (table != null) {\n                 for (int j =0; j < table.length; j++) {\n                     if (table[j] != null) {\n                         boolean remove = false;\n                         // Check the key\n-                        Field keyField =\n-                            Reference.class.getDeclaredField(\"referent\");\n-                        keyField.setAccessible(true);\n-                        Object key = keyField.get(table[j]);\n+                        Object key = ((Reference<?>) table[j]).get();\n                         if (this.equals(key) || (key != null &&\n                                 this == key.getClass().getClassLoader())) {\n                             remove = true;\n@@ -2200,7 +2198,6 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                             remove = true;\n                         }\n                         if (remove) {\n-                            Object entry = ((Reference<?>) table[j]).get();\n                             Object[] args = new Object[4];\n                             if (key != null) {\n                                 args[0] = key.getClass().getCanonicalName();\n@@ -2221,11 +2218,21 @@ private void clearThreadLocalMap(Object map, Field internalTableField)\n                                         \"webappClassLoader.clearThreadLocal\",\n                                         args));\n                             }\n-                            mapRemove.invoke(map, entry);\n+                            if (key == null) {\n+                              staleEntriesCount++;\n+                            } else {\n+                              mapRemove.invoke(map, key);\n+                            }\n                         }\n                     }\n                 }\n             }\n+            if (staleEntriesCount > 0) {\n+                Method mapRemoveStale =\n+                    map.getClass().getDeclaredMethod(\"expungeStaleEntries\");\n+                mapRemoveStale.setAccessible(true);\n+                mapRemoveStale.invoke(map);\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/4a6e2bbab1c34f84d3677c7e9b9d0944efb4f2a7/java/org/apache/catalina/loader/WebappClassLoader.java",
                "sha": "4e98b1bfad902754c9ab24a644016997cb15400b",
                "status": "modified"
            }
        ],
        "message": "When the key is null (i.e., a stale entry), it cannot be removed with an explicit remove(key) call: you'll get an NPE. Those can be removed with expungeStaleEntries() call.\nAlso, simplified the code: Reference.referent can be accessed by calling get() - no need to use reflection for that.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@909212 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/b34f401246d50720c75f99b11c12939f01c90a1b",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebappClassLoader.java"
        ]
    },
    "tomcat80_4da15b0": {
        "bug_id": "tomcat80_4da15b0",
        "commit": "https://github.com/apache/tomcat80/commit/4da15b07aa5f0c79462c254f75f2c4c14d0136df",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/JspUtil.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/JspUtil.java?ref=4da15b07aa5f0c79462c254f75f2c4c14d0136df",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/JspUtil.java",
                "patch": "@@ -119,6 +119,7 @@ public static void checkAttributes(String typeOfTag, Node n,\n         int tempLength = (attrs == null) ? 0 : attrs.getLength();\n         Vector<String> temp = new Vector<String>(tempLength, 1);\n         for (int i = 0; i < tempLength; i++) {\n+            @SuppressWarnings(\"null\")  // If attrs==null, tempLength == 0\n             String qName = attrs.getQName(i);\n             if ((!qName.equals(\"xmlns\")) && (!qName.startsWith(\"xmlns:\")))\n                 temp.addElement(qName);",
                "raw_url": "https://github.com/apache/tomcat80/raw/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/JspUtil.java",
                "sha": "1383f16d3d109da1c02a96a59a2d3ad1e97e6079",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/PageDataImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/PageDataImpl.java?ref=4da15b07aa5f0c79462c254f75f2c4c14d0136df",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/PageDataImpl.java",
                "patch": "@@ -510,6 +510,7 @@ private void appendPageDirective(Node.PageDirective n) {\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)\n                         && !\"contentType\".equals(attrName)) {\n@@ -530,6 +531,7 @@ private void appendPageDirective(Node.PageDirective n) {\n \n             // append remaining attributes\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (\"import\".equals(attrName) || \"contentType\".equals(attrName)\n                         || \"pageEncoding\".equals(attrName)) {\n@@ -601,6 +603,7 @@ private void appendTagDirective(Node.TagDirective n)\n             Attributes attrs = n.getAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String attrName = attrs.getQName(i);\n                 if (!\"pageEncoding\".equals(attrName)) {\n                     append = true;\n@@ -696,6 +699,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             Attributes attrs = n.getTaglibAttributes();\n             int len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -708,6 +712,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             len = (attrs == null) ? 0 : attrs.getLength();\n             boolean defaultNSSeen = false;\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\").append(value).append(\"\\\"\\n\");\n@@ -724,6 +729,7 @@ private void printAttributes(Node n, boolean addDefaultNS) {\n             attrs = n.getAttributes();\n             len = (attrs == null) ? 0 : attrs.getLength();\n             for (int i=0; i<len; i++) {\n+                @SuppressWarnings(\"null\")  // If attrs==null, len == 0\n                 String name = attrs.getQName(i);\n                 String value = attrs.getValue(i);\n                 buf.append(\"  \").append(name).append(\"=\\\"\");",
                "raw_url": "https://github.com/apache/tomcat80/raw/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/PageDataImpl.java",
                "sha": "665d74393d9042d9ef8be44f36a455bb7734a8b2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/Validator.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Validator.java?ref=4da15b07aa5f0c79462c254f75f2c4c14d0136df",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "patch": "@@ -896,6 +896,7 @@ public void visit(Node.JspElement n) throws JasperException {\n             if (attrs == null) {\n                 err.jspError(n, \"jsp.error.jspelement.missing.name\");\n             }\n+            @SuppressWarnings(\"null\") // Exception will have been thrown above\n             int xmlAttrLen = attrs.getLength();\n \n             Node.Nodes namedAttrs = n.getNamedAttributeNodes();",
                "raw_url": "https://github.com/apache/tomcat80/raw/4da15b07aa5f0c79462c254f75f2c4c14d0136df/java/org/apache/jasper/compiler/Validator.java",
                "sha": "ce6ee9f3b9f9a41b5cbabd0ec743d376328cdbd6",
                "status": "modified"
            }
        ],
        "message": "Fix some false npe warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1154579 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/d158eee63a5cc96df3d597b0814de186afd6287a",
        "repo": "tomcat80",
        "unit_tests": [
            "TestValidator.java"
        ]
    },
    "tomcat80_5051dcd": {
        "bug_id": "tomcat80_5051dcd",
        "commit": "https://github.com/apache/tomcat80/commit/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/WsFrameClient.java?ref=5051dcda5ab12e461bed38ff77d64f9f6aa83ce9",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/WsFrameClient.java",
                "patch": "@@ -37,7 +37,10 @@ public WsFrameClient(ByteBuffer response, AsyncChannelWrapper channel,\n         this.response = response;\n         this.channel = channel;\n         this.handler = new WsFrameClientCompletionHandler();\n+    }\n+\n \n+    void startInputProcessing() {\n         try {\n             processSocketRead();\n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsFrameClient.java",
                "sha": "41cf71287fe18937d559e046ea7a06e1a0d5ead2",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java?ref=5051dcda5ab12e461bed38ff77d64f9f6aa83ce9",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "patch": "@@ -260,9 +260,7 @@ void startMessage(byte opCode, ByteBuffer payload, boolean last,\n         messageParts.add(new MessagePart(opCode, payload, last,\n                 new EndMessageHandler(this, handler)));\n \n-        if (transformation != null) {\n-            messageParts = transformation.sendMessagePart(messageParts);\n-        }\n+        messageParts = transformation.sendMessagePart(messageParts);\n \n         MessagePart mp = messageParts.remove(0);\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsRemoteEndpointImplBase.java",
                "sha": "e4a16e04bad51ca96b4ea09611ea255bb279576c",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=5051dcda5ab12e461bed38ff77d64f9f6aa83ce9",
                "deletions": 6,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -316,22 +316,24 @@ public Session connectToServer(Endpoint endpoint,\n                     sm.getString(\"wsWebSocketContainer.httpRequestFailed\"), e);\n         }\n \n-        // TODO Add extension/transformation support to the client\n-\n         // Switch to WebSocket\n         WsRemoteEndpointImplClient wsRemoteEndpointClient = new WsRemoteEndpointImplClient(channel);\n \n         WsSession wsSession = new WsSession(endpoint, wsRemoteEndpointClient,\n                 this, null, null, null, null, null, subProtocol,\n                 Collections.<String, String> emptyMap(), secure,\n                 clientEndpointConfiguration);\n-        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n-        registerSession(endpoint, wsSession);\n \n-        // Object creation will trigger input processing\n-        @SuppressWarnings(\"unused\")\n         WsFrameClient wsFrameClient = new WsFrameClient(response, channel,\n                 wsSession);\n+        // WsFrame adds the necessary final transformations. Copy the\n+        // completed transformation chain to the remote end point.\n+        wsRemoteEndpointClient.setTransformation(wsFrameClient.getTransformation());\n+\n+        endpoint.onOpen(wsSession, clientEndpointConfiguration);\n+        registerSession(endpoint, wsSession);\n+\n+        wsFrameClient.startInputProcessing();\n \n         return wsSession;\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/5051dcda5ab12e461bed38ff77d64f9f6aa83ce9/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "591e42965df958a2121c2f99a9e8590fbe99dd56",
                "status": "modified"
            }
        ],
        "message": "Fix root cause of NPE when using WebSocket clients.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1606653 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/59a648d056f9d4db4f76360b32cb15c1ad2e73b6",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat80_53a74c9": {
        "bug_id": "tomcat80_53a74c9",
        "commit": "https://github.com/apache/tomcat80/commit/53a74c9f107434f205750a2494a10cebb6c555be",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/53a74c9f107434f205750a2494a10cebb6c555be/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/ApplicationHttpRequest.java?ref=53a74c9f107434f205750a2494a10cebb6c555be",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "patch": "@@ -440,6 +440,10 @@ public String getPathInfo() {\n      */\n     @Override\n     public String getPathTranslated() {\n+        if (getPathInfo() == null) {\n+            return null;\n+        }\n+\n         return getServletContext().getRealPath(getPathInfo());\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/53a74c9f107434f205750a2494a10cebb6c555be/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "sha": "298ba6c58d439e9f287e3f0fd096a1a71259f99f",
                "status": "modified"
            }
        ],
        "message": "Add NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1607931 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/8b407bf98aa2a29932babdc5e3bb3d88b1d16682",
        "repo": "tomcat80",
        "unit_tests": [
            "TestApplicationHttpRequest.java"
        ]
    },
    "tomcat80_545263b": {
        "bug_id": "tomcat80_545263b",
        "commit": "https://github.com/apache/tomcat80/commit/545263b686a4ffdc03b24a5775446254104f22f3",
        "file": [
            {
                "additions": 35,
                "blob_url": "https://github.com/apache/tomcat80/blob/545263b686a4ffdc03b24a5775446254104f22f3/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/filters/RemoteIpFilter.java?ref=545263b686a4ffdc03b24a5775446254104f22f3",
                "deletions": 39,
                "filename": "java/org/apache/catalina/filters/RemoteIpFilter.java",
                "patch": "@@ -156,8 +156,8 @@\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -173,7 +173,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -182,8 +182,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -229,12 +229,12 @@\n  * <strong>Sample with trusted proxies</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -250,7 +250,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -259,8 +259,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -286,12 +286,12 @@\n  * <strong>Sample with internal and trusted proxies</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -307,7 +307,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -316,8 +316,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -344,12 +344,12 @@\n  * <strong>Sample with an untrusted proxy</strong>\n  * </p>\n  * <p>\n- * XForwardedFilter configuration:\n+ * RemoteIpFilter configuration:\n  * </p>\n  * <code><pre>\n  * &lt;filter&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n- *    &lt;filter-class&gt;fr.xebia.servlet.filter.XForwardedFilter&lt;/filter-class&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n+ *    &lt;filter-class&gt;org.apache.catalina.filters.RemoteIpFilter&lt;/filter-class&gt;\n  *    &lt;init-param&gt;\n  *       &lt;param-name&gt;internalProxies&lt;/param-name&gt;&lt;param-value&gt;192\\.168\\.0\\.10, 192\\.168\\.0\\.11&lt;/param-value&gt;\n  *    &lt;/init-param&gt;\n@@ -365,7 +365,7 @@\n  * &lt;/filter&gt;\n  * \n  * &lt;filter-mapping&gt;\n- *    &lt;filter-name&gt;XForwardedFilter&lt;/filter-name&gt;\n+ *    &lt;filter-name&gt;RemoteIpFilter&lt;/filter-name&gt;\n  *    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  *    &lt;dispatcher&gt;REQUEST&lt;/dispatcher&gt;\n  * &lt;/filter-mapping&gt;</pre></code>\n@@ -374,8 +374,8 @@\n  * <table border=\"1\">\n  * <tr>\n  * <th>property</th>\n- * <th>Value Before XForwardedFilter</th>\n- * <th>Value After XForwardedFilter</th>\n+ * <th>Value Before RemoteIpFilter</th>\n+ * <th>Value After RemoteIpFilter</th>\n  * </tr>\n  * <tr>\n  * <td>request.remoteAddr</td>\n@@ -460,19 +460,17 @@ public long getDateHeader(String name) {\n             }\n             if (date == null) {\n                 throw new IllegalArgumentException(value);\n-            } else {\n-                return date.getTime();\n             }\n+            return date.getTime();\n         }\n         \n         @Override\n         public String getHeader(String name) {\n             Map.Entry<String, List<String>> header = getHeaderEntry(name);\n             if (header == null || header.getValue() == null || header.getValue().isEmpty()) {\n                 return null;\n-            } else {\n-                return header.getValue().get(0);\n             }\n+            return header.getValue().get(0);\n         }\n         \n         protected Map.Entry<String, List<String>> getHeaderEntry(String name) {\n@@ -494,19 +492,17 @@ public String getHeader(String name) {\n             Map.Entry<String, List<String>> header = getHeaderEntry(name);\n             if (header == null || header.getValue() == null) {\n                 return Collections.enumeration(Collections.<String>emptyList());\n-            } else {\n-                return Collections.enumeration(header.getValue());\n             }\n+            return Collections.enumeration(header.getValue());\n         }\n         \n         @Override\n         public int getIntHeader(String name) {\n             String value = getHeader(name);\n             if (value == null) {\n                 return -1;\n-            } else {\n-                return Integer.parseInt(value);\n             }\n+            return Integer.parseInt(value);\n         }\n         \n         @Override\n@@ -580,7 +576,7 @@ public void setServerPort(int serverPort) {\n     \n     protected static final String HTTPS_SERVER_PORT_PARAMETER = \"httpsServerPort\";\n     \n-    protected static final String INTERNAL_PROXIES_PARAMETER = \"allowedInternalProxies\";\n+    protected static final String INTERNAL_PROXIES_PARAMETER = \"internalProxies\";\n     \n     /**\n      * Logger\n@@ -756,13 +752,13 @@ public void doFilter(HttpServletRequest request, HttpServletResponse response, F\n             \n             if (log.isDebugEnabled()) {\n                 log.debug(\"Incoming request \" + request.getRequestURI() + \" with originalRemoteAddr '\" + request.getRemoteAddr()\n-                          + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n-                          + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n-                          + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n-                          + request.getHeader(protocolHeader) + \"' will be seen as newRemoteAddr='\" + xRequest.getRemoteAddr()\n-                          + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\" + xRequest.getScheme() + \"', newSecure='\"\n-                          + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\" + xRequest.getHeader(remoteIPHeader) + \", new[\"\n-                          + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n+                        + \"', originalRemoteHost='\" + request.getRemoteHost() + \"', originalSecure='\" + request.isSecure()\n+                        + \"', originalScheme='\" + request.getScheme() + \"', original[\" + remoteIPHeader + \"]='\"\n+                        + request.getHeader(remoteIPHeader) + \", original[\" + protocolHeader + \"]='\"\n+                        + (protocolHeader == null ? null : request.getHeader(protocolHeader)) + \"' will be seen as newRemoteAddr='\"\n+                        + xRequest.getRemoteAddr() + \"', newRemoteHost='\" + xRequest.getRemoteHost() + \"', newScheme='\"\n+                        + xRequest.getScheme() + \"', newSecure='\" + xRequest.isSecure() + \"', new[\" + remoteIPHeader + \"]='\"\n+                        + xRequest.getHeader(remoteIPHeader) + \", new[\" + proxiesHeader + \"]='\" + xRequest.getHeader(proxiesHeader) + \"'\");\n             }\n             chain.doFilter(xRequest, response);\n         } else {",
                "raw_url": "https://github.com/apache/tomcat80/raw/545263b686a4ffdc03b24a5775446254104f22f3/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "sha": "7710febf9e1a3a1158888adaf3b7c2403e824a9d",
                "status": "modified"
            }
        ],
        "message": "Patch provided by Cyrille Le Clerc\n* fix NPE in log statement if protocolHeader has not been defined and the servlet container does not support request.getHeader(null)\n* fix mismatch between javadoc  and code for filter parameter name \"allowedInternalProxies\" -> \"internalProxies\"\n* finish javadoc refactoring \"XForwardedFilter\" -> \"RemoteIpFilter\"\nAlso fix some Eclipse warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@834081 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/1ff0272733a40293f9f6ef73b27edcb4a33599e5",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRemoteIpFilter.java"
        ]
    },
    "tomcat80_55192da": {
        "bug_id": "tomcat80_55192da",
        "commit": "https://github.com/apache/tomcat80/commit/55192da8e61ac69e1155af65f7077b97f3f7880f",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat80/blob/55192da8e61ac69e1155af65f7077b97f3f7880f/java/org/apache/coyote/Response.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/coyote/Response.java?ref=55192da8e61ac69e1155af65f7077b97f3f7880f",
                "deletions": 4,
                "filename": "java/org/apache/coyote/Response.java",
                "patch": "@@ -464,11 +464,14 @@ public void setContentType(String type) {\n \n         this.contentType = m.toStringNoCharset();\n \n-        String charsetValue = m.getCharset().trim();\n+        String charsetValue = m.getCharset();\n \n-        if (charsetValue != null && charsetValue.length() > 0) {\n-            charsetSet = true;\n-            this.characterEncoding = charsetValue;\n+        if (charsetValue != null) {\n+            charsetValue = charsetValue.trim();\n+            if (charsetValue.length() > 0) {\n+                charsetSet = true;\n+                this.characterEncoding = charsetValue;\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/55192da8e61ac69e1155af65f7077b97f3f7880f/java/org/apache/coyote/Response.java",
                "sha": "b2eca8fe7ffa9fa5fc9d4575a156893ae8f8cc38",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1552804 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/78f1151c1ab540f309dfb61a68252c5a75e0d26a",
        "repo": "tomcat80",
        "unit_tests": [
            "TestResponse.java"
        ]
    },
    "tomcat80_5e07426": {
        "bug_id": "tomcat80_5e07426",
        "commit": "https://github.com/apache/tomcat80/commit/5e0742639558185a2a0a63b8ad5d7d75ec6055e0",
        "file": [
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/tomcat80/blob/5e0742639558185a2a0a63b8ad5d7d75ec6055e0/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=5e0742639558185a2a0a63b8ad5d7d75ec6055e0",
                "deletions": 10,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "patch": "@@ -102,9 +102,11 @@ protected String reportFailedQuery(String query, Object[] args, String name, lon\n             long now = System.currentTimeMillis();\n             long delta = now - start;\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.failure(delta, now);\n-            if (isLogFailed() && log.isWarnEnabled()) {\n-                log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.failure(delta, now);\n+                if (isLogFailed() && log.isWarnEnabled()) {\n+                    log.warn(\"Failed Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -115,7 +117,7 @@ protected String reportQuery(String query, Object[] args, final String name, lon\n         String sql = super.reportQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n+            if (qs != null) qs.add(delta, start);\n         }\n         return sql;\n     }\n@@ -125,9 +127,11 @@ protected String reportSlowQuery(String query, Object[] args, String name, long\n         String sql = super.reportSlowQuery(query, args, name, start, delta);\n         if (this.maxQueries > 0 ) {\n             QueryStats qs = this.getQueryStats(sql);\n-            qs.add(delta, start);\n-            if (isLogSlow() && log.isWarnEnabled()) {\n-                log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+            if (qs != null) {\n+                qs.add(delta, start);\n+                if (isLogSlow() && log.isWarnEnabled()) {\n+                    log.warn(\"Slow Query Report SQL=\"+sql+\"; time=\"+delta+\" ms;\");\n+                }\n             }\n         }\n         return sql;\n@@ -145,13 +149,13 @@ public void closeInvoked() {\n     @Override\n     public void prepareStatement(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     @Override\n     public void prepareCall(String sql, long time) {\n         QueryStats qs = getQueryStats(sql);\n-        qs.prepare(time);\n+        if (qs != null) qs.prepare(time);\n     }\n \n     /**\n@@ -186,7 +190,10 @@ public void poolClosed(ConnectionPool pool) {\n     protected QueryStats getQueryStats(String sql) {\n         if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n-        if (queries==null) return null;\n+        if (queries==null) {\n+            if (log.isWarnEnabled()) log.warn(\"Connection has already been closed or abandoned\");\n+            return null;\n+        }\n         QueryStats qs = queries.get(sql);\n         if (qs == null) {\n             qs = new QueryStats(sql);",
                "raw_url": "https://github.com/apache/tomcat80/raw/5e0742639558185a2a0a63b8ad5d7d75ec6055e0/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "sha": "7f7a4021f1c3646d78e49f2fe923b7004f14b4ba",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if connection has been abandoned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1686975 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/fe1a907ae2f8f1ce32570269a4a848ce2416d3ab",
        "repo": "tomcat80",
        "unit_tests": [
            "TestSlowQueryReport.java"
        ]
    },
    "tomcat80_5e6bb3f": {
        "bug_id": "tomcat80_5e6bb3f",
        "commit": "https://github.com/apache/tomcat80/commit/5e6bb3f57008cab73a2dca0046a21108c80da06c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/5e6bb3f57008cab73a2dca0046a21108c80da06c/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/BackgroundProcessManager.java?ref=5e6bb3f57008cab73a2dca0046a21108c80da06c",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "patch": "@@ -71,7 +71,7 @@ public void register(BackgroundProcess process) {\n     public void unregister(BackgroundProcess process) {\n         synchronized (processesLock) {\n             processes.remove(process);\n-            if (processes.size() == 0) {\n+            if (wsBackgroundThread != null && processes.size() == 0) {\n                 wsBackgroundThread.halt();\n                 wsBackgroundThread = null;\n             }",
                "raw_url": "https://github.com/apache/tomcat80/raw/5e6bb3f57008cab73a2dca0046a21108c80da06c/java/org/apache/tomcat/websocket/BackgroundProcessManager.java",
                "sha": "ccb6d868b77052ae0be5a2621a08760585bff352",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/5e6bb3f57008cab73a2dca0046a21108c80da06c/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/WsWebSocketContainer.java?ref=5e6bb3f57008cab73a2dca0046a21108c80da06c",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "patch": "@@ -256,6 +256,10 @@ public Session connectToServer(Endpoint endpoint,\n \n \n     protected void registerSession(Class<?> endpoint, WsSession wsSession) {\n+        if (!wsSession.isOpen()) {\n+            // The session was closed during onOpen. No need to register it.\n+            return;\n+        }\n         synchronized (endPointSessionMapLock) {\n             if (endpointSessionMap.size() == 0) {\n                 BackgroundProcessManager.getInstance().register(this);",
                "raw_url": "https://github.com/apache/tomcat80/raw/5e6bb3f57008cab73a2dca0046a21108c80da06c/java/org/apache/tomcat/websocket/WsWebSocketContainer.java",
                "sha": "b7ff5d6f5fb239276aba824d9b5b0ffb4f9b4623",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54716\nAdditional fix. Avoid NPE on session de-registration.\nBased on a patch by Nick Williams.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1458484 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/928e645c6105d80ed74d858b7188cb057adfa98c",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsWebSocketContainer.java"
        ]
    },
    "tomcat80_6033526": {
        "bug_id": "tomcat80_6033526",
        "commit": "https://github.com/apache/tomcat80/commit/6033526aa54a3b6ceb6a7d2f48db01a403f529a1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/6033526aa54a3b6ceb6a7d2f48db01a403f529a1/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java?ref=6033526aa54a3b6ceb6a7d2f48db01a403f529a1",
                "deletions": 0,
                "filename": "modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "patch": "@@ -149,6 +149,7 @@ public void poolClosed(ConnectionPool pool) {\n     }\n \n     protected QueryStats getQueryStats(String sql) {\n+        if (sql==null) sql = \"\";\n         ConcurrentHashMap<String,QueryStats> queries = SlowQueryReport.this.queries;\n         if (queries==null) return null;\n         QueryStats qs = queries.get(sql);",
                "raw_url": "https://github.com/apache/tomcat80/raw/6033526aa54a3b6ceb6a7d2f48db01a403f529a1/modules/jdbc-pool/src/main/java/org/apache/tomcat/jdbc/pool/interceptor/SlowQueryReport.java",
                "sha": "585ea18bbf4e370d323ed1ccee655761255a00b9",
                "status": "modified"
            }
        ],
        "message": "https://issues.apache.org/bugzilla/show_bug.cgi?id=51582\nFix NPE when the query is not available. This is a temporary work around until we know why SQL is null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1189978 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/8cc3df2973be5f564bbbc1a8f0c5ff51e41da5ae",
        "repo": "tomcat80",
        "unit_tests": [
            "TestSlowQueryReport.java"
        ]
    },
    "tomcat80_61094bf": {
        "bug_id": "tomcat80_61094bf",
        "commit": "https://github.com/apache/tomcat80/commit/61094bf646fa5d81ecde5381aec7555f02925521",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/DataSourceRealm.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/DataSourceRealm.java?ref=61094bf646fa5d81ecde5381aec7555f02925521",
                "deletions": 2,
                "filename": "java/org/apache/catalina/realm/DataSourceRealm.java",
                "patch": "@@ -270,8 +270,9 @@ public void setUserTable( String userTable ) {\n      */\n     public Principal authenticate(String username, String credentials) {\n     \t\n-    \t// No user - can't possibly authenticate, don't bother the database then\n-    \tif (username == null) {\n+    \t// No user or no credentials\n+        // Can't possibly authenticate, don't bother the database then\n+    \tif (username == null || credentials == null) {\n     \t\treturn null;\n     \t}\n         ",
                "raw_url": "https://github.com/apache/tomcat80/raw/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/DataSourceRealm.java",
                "sha": "c6ec6e93aed329c3441d60d1da00f22e085265db",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/JDBCRealm.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/JDBCRealm.java?ref=61094bf646fa5d81ecde5381aec7555f02925521",
                "deletions": 3,
                "filename": "java/org/apache/catalina/realm/JDBCRealm.java",
                "patch": "@@ -393,9 +393,10 @@ public synchronized Principal authenticate(Connection dbConnection,\n                                                String username,\n                                                String credentials) {\n \n-        // No user - can't possibly authenticate\n-        if (username == null) {\n-            return (null);\n+        // No user or no credentials\n+        // Can't possibly authenticate, don't bother the database then\n+        if (username == null || credentials == null) {\n+            return null;\n         }\n \n         // Look up the user's credentials",
                "raw_url": "https://github.com/apache/tomcat80/raw/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/JDBCRealm.java",
                "sha": "05fd1fa888a0d373cabfd89824428bdd60a7b59a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/MemoryRealm.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/MemoryRealm.java?ref=61094bf646fa5d81ecde5381aec7555f02925521",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/MemoryRealm.java",
                "patch": "@@ -147,7 +147,7 @@ public Principal authenticate(String username, String credentials) {\n         GenericPrincipal principal = principals.get(username);\n \n         boolean validated = false;\n-        if (principal != null) {\n+        if (principal != null && credentials != null) {\n             if (hasMessageDigest()) {\n                 // Hex hashes should be compared case-insensitive\n                 validated = (digest(credentials)",
                "raw_url": "https://github.com/apache/tomcat80/raw/61094bf646fa5d81ecde5381aec7555f02925521/java/org/apache/catalina/realm/MemoryRealm.java",
                "sha": "343a8d45d4fc0d1f108722d3b9d0385e48b81f78",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@747834 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/47580377b5d7608e641b772a802c425a875d3dff",
        "repo": "tomcat80",
        "unit_tests": [
            "TestMemoryRealm.java"
        ]
    },
    "tomcat80_66cbdea": {
        "bug_id": "tomcat80_66cbdea",
        "commit": "https://github.com/apache/tomcat80/commit/66cbdeaa71d345aa35c776e9c08921b2929efbc2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/66cbdeaa71d345aa35c776e9c08921b2929efbc2/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=66cbdeaa71d345aa35c776e9c08921b2929efbc2",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -403,7 +403,10 @@ private void registerAuthenticatedSession(WsSession wsSession,\n     private void unregisterAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        wsSessions.remove(wsSession);\n+        // wsSessions will be null if the HTTP session has ended\n+        if (wsSessions != null) {\n+            wsSessions.remove(wsSession);\n+        }\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/66cbdeaa71d345aa35c776e9c08921b2929efbc2/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "4f196825dcd3b43783345bbaf7b851cf60b86bc2",
                "status": "modified"
            }
        ],
        "message": "Fix NPE reported on users list when HTTP session ends\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1546372 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/9b33cb8ad7d2e9c60a51234db274321f15d9ef1c",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat80_6a067b5": {
        "bug_id": "tomcat80_6a067b5",
        "commit": "https://github.com/apache/tomcat80/commit/6a067b521d9a04cac0f75565b1eac00713fc4d6b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/6a067b521d9a04cac0f75565b1eac00713fc4d6b/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/util/FastRemovalDequeue.java?ref=6a067b521d9a04cac0f75565b1eac00713fc4d6b",
                "deletions": 1,
                "filename": "java/org/apache/jasper/util/FastRemovalDequeue.java",
                "patch": "@@ -174,7 +174,7 @@ public synchronized T pop() {\n      * Removes any element of the list and returns its content.\n      **/\n     public synchronized void remove(final Entry element) {\n-        if (!element.getValid()) {\n+        if (element == null || !element.getValid()) {\n             return;\n         }\n         Entry next = element.getNext();",
                "raw_url": "https://github.com/apache/tomcat80/raw/6a067b521d9a04cac0f75565b1eac00713fc4d6b/java/org/apache/jasper/util/FastRemovalDequeue.java",
                "sha": "3a7cc220f182bfd692b74aa515cc47ffecf97791",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54260\nAvoid NPE when using JSP unloading and tag files.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1428355 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/91fc32b77f019a6f75ce4f20b4186973bb1291f3",
        "repo": "tomcat80",
        "unit_tests": [
            "TestFastRemovalDequeue.java"
        ]
    },
    "tomcat80_6c3a42d": {
        "bug_id": "tomcat80_6c3a42d",
        "commit": "https://github.com/apache/tomcat80/commit/6c3a42d78ee5e34e6131f182eab7323a217448d3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/6c3a42d78ee5e34e6131f182eab7323a217448d3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=6c3a42d78ee5e34e6131f182eab7323a217448d3",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -551,7 +551,8 @@ protected void parseSessionCookiesId(org.apache.coyote.Request req, Request requ\n         // context, don't go looking for a session ID in a cookie as a cookie\n         // from a parent context with a session ID may be present which would\n         // overwrite the valid session ID encoded in the URL\n-        if (!((Context)request.getMappingData().context).getCookies())\n+        Context context = (Context) request.getMappingData().context;\n+        if (context != null && !context.getCookies())\n             return;\n         \n         // Parse session id from cookies",
                "raw_url": "https://github.com/apache/tomcat80/raw/6c3a42d78ee5e34e6131f182eab7323a217448d3/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "e3ce60b5e1b031cc02a2ef5a6bc80ad16197221f",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE when no ROOT application is deployed in fix for bug 43839.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@609003 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c88cfbc084c413904056165e3827ae0c041c11d3",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat80_7699864": {
        "bug_id": "tomcat80_7699864",
        "commit": "https://github.com/apache/tomcat80/commit/76998644c2465473e886211fbf9bc42932d07be5",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/76998644c2465473e886211fbf9bc42932d07be5/java/org/apache/catalina/startup/ContextConfig.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=76998644c2465473e886211fbf9bc42932d07be5",
                "deletions": 0,
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "patch": "@@ -2101,6 +2101,9 @@ private void populateJavaClassCache(String className) {\n             String name = className.replace('.', '/') + \".class\";\n             InputStream is =\n                     context.getLoader().getClassLoader().getResourceAsStream(name);\n+            if (is == null) {\n+                return;\n+            }\n             ClassParser parser = new ClassParser(is, null);\n             try {\n                 JavaClass clazz = parser.parse();",
                "raw_url": "https://github.com/apache/tomcat80/raw/76998644c2465473e886211fbf9bc42932d07be5/java/org/apache/catalina/startup/ContextConfig.java",
                "sha": "cf4887b9113bdad2cdc6c9dd8434d1456dc197da",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if class / interface is not present\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1239024 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/858dc0a4f7f8069237abda6454e1536270880b59",
        "repo": "tomcat80",
        "unit_tests": [
            "TestContextConfig.java"
        ]
    },
    "tomcat80_78d7976": {
        "bug_id": "tomcat80_78d7976",
        "commit": "https://github.com/apache/tomcat80/commit/78d7976e2c456b312a9aff971721d47c66ca480f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/78d7976e2c456b312a9aff971721d47c66ca480f/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/filters/RemoteIpFilter.java?ref=78d7976e2c456b312a9aff971721d47c66ca480f",
                "deletions": 2,
                "filename": "java/org/apache/catalina/filters/RemoteIpFilter.java",
                "patch": "@@ -859,8 +859,9 @@ public void doFilter(HttpServletRequest request, HttpServletResponse response, F\n             }\n \n             HttpServletResponse xResponse;\n-            if (!xRequest.getScheme().equals(request.getScheme()) ||\n-                    xRequest.getServerPort() != request.getServerPort()) {\n+            if (xRequest.getScheme() != null &&\n+                    (!xRequest.getScheme().equals(request.getScheme()) ||\n+                    xRequest.getServerPort() != request.getServerPort())) {\n                 xResponse = new XForwardedResponse(response, xRequest.getScheme(), xRequest.getServerPort());\n             } else {\n                 xResponse = response;",
                "raw_url": "https://github.com/apache/tomcat80/raw/78d7976e2c456b312a9aff971721d47c66ca480f/java/org/apache/catalina/filters/RemoteIpFilter.java",
                "sha": "6dc2b31f39cd512dd3fa6ff112010aae705ea019",
                "status": "modified"
            }
        ],
        "message": "Fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1687433 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/d1512649e7996f403be825f949039dd855e455d6",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRemoteIpFilter.java"
        ]
    },
    "tomcat80_7c88cc4": {
        "bug_id": "tomcat80_7c88cc4",
        "commit": "https://github.com/apache/tomcat80/commit/7c88cc41565556909e9461f7875bad86d921f9cd",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/7c88cc41565556909e9461f7875bad86d921f9cd/java/org/apache/tomcat/websocket/server/WsFilter.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsFilter.java?ref=7c88cc41565556909e9461f7875bad86d921f9cd",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsFilter.java",
                "patch": "@@ -78,7 +78,7 @@ public void doFilter(ServletRequest request, ServletResponse response,\n                 !headerContainsToken((HttpServletRequest) request,\n                         Constants.UPGRADE_HEADER_NAME,\n                         Constants.UPGRADE_HEADER_VALUE)) {\n-            // Note an HTTP request that includes a valid upgrade request to\n+            // Not an HTTP request that includes a valid upgrade request to\n             // web socket\n             chain.doFilter(request, response);\n             return;\n@@ -122,6 +122,13 @@ public void doFilter(ServletRequest request, ServletResponse response,\n         }\n         WsMappingResult mappingResult = sc.findMapping(path);\n \n+        if (mappingResult == null) {\n+            // No endpoint registered for the requested path. Let the\n+            // application handle it (it might redirect or forward for example)\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+\n         ServerEndpointConfig sec = mappingResult.getConfig();\n \n         // Origin check",
                "raw_url": "https://github.com/apache/tomcat80/raw/7c88cc41565556909e9461f7875bad86d921f9cd/java/org/apache/tomcat/websocket/server/WsFilter.java",
                "sha": "1770a819789ccd8485b2d3e1cca809c5dfafa21d",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/tomcat80/blob/7c88cc41565556909e9461f7875bad86d921f9cd/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=7c88cc41565556909e9461f7875bad86d921f9cd",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -19,12 +19,14 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Comparator;\n+import java.util.EnumSet;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.SortedSet;\n import java.util.TreeSet;\n import java.util.WeakHashMap;\n \n+import javax.servlet.DispatcherType;\n import javax.servlet.FilterRegistration;\n import javax.servlet.ServletContext;\n import javax.websocket.DeploymentException;\n@@ -111,7 +113,11 @@ public void setServletContext(ServletContext servletContext) {\n \n         FilterRegistration fr = servletContext.addFilter(\n                 WsFilter.class.getName(), WsFilter.class);\n-        fr.addMappingForUrlPatterns(null, false, \"/*\");\n+\n+        EnumSet<DispatcherType> types = EnumSet.of(DispatcherType.REQUEST,\n+                DispatcherType.FORWARD);\n+\n+        fr.addMappingForUrlPatterns(types, false, \"/*\");\n     }\n \n \n@@ -233,6 +239,12 @@ public WsMappingResult findMapping(String path) {\n         SortedSet<TemplatePathMatch> templateMatches =\n                 configTemplateMatchMap.get(key);\n \n+        if (templateMatches == null) {\n+            // No templates with an equal number of segments so there will be\n+            // no matches\n+            return null;\n+        }\n+\n         // List is in alphabetical order of normalised templates.\n         // Correct match is the first one that matches.\n         Map<String,String> pathParams = null;",
                "raw_url": "https://github.com/apache/tomcat80/raw/7c88cc41565556909e9461f7875bad86d921f9cd/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "7102a9561812c17d108821e1d12244472d046358",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54781\nFix NPE if no matching Endpoint is found.\nHandle forwarded requests as well.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1471123 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ff799f439306cd45c4141bb84c85e2dc1fc584c0",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat80_8036b19": {
        "bug_id": "tomcat80_8036b19",
        "commit": "https://github.com/apache/tomcat80/commit/8036b1905fc2cfdfd200873c7c7da1d03ba5dc3b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/8036b1905fc2cfdfd200873c7c7da1d03ba5dc3b/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=8036b1905fc2cfdfd200873c7c7da1d03ba5dc3b",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -347,7 +347,7 @@ protected void unregisterSession(Endpoint endpoint, WsSession wsSession) {\n     private void registerAuthenticatedSession(WsSession wsSession,\n             String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.get(httpSessionId);\n-        if (wsSession == null) {\n+        if (wsSessions == null) {\n             wsSessions = Collections.newSetFromMap(\n                      new ConcurrentHashMap<WsSession,Boolean>());\n              authenticatedSessions.putIfAbsent(httpSessionId, wsSessions);",
                "raw_url": "https://github.com/apache/tomcat80/raw/8036b1905fc2cfdfd200873c7c7da1d03ba5dc3b/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "d111cb4917321692eae7b72265bc657c89787e37",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=55291\nAvoid NPE when registering a session. Patch provided by rstoyanchev.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1505689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f830be1c9709dc0aa1a0859e983f5d3c1abfb1aa",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat80_818a9a9": {
        "bug_id": "tomcat80_818a9a9",
        "commit": "https://github.com/apache/tomcat80/commit/818a9a962bdfab5bf66d330734c0225c0877f64a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat80/blob/818a9a962bdfab5bf66d330734c0225c0877f64a/java/org/apache/catalina/connector/Request.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/Request.java?ref=818a9a962bdfab5bf66d330734c0225c0877f64a",
                "deletions": 3,
                "filename": "java/org/apache/catalina/connector/Request.java",
                "patch": "@@ -2513,9 +2513,13 @@ private void parseParts() {\n                 parts.add(part);\n                 if (part.getFilename() == null) {\n                     try {\n-                        parameters.addParameterValues(part.getName(),\n+                        String encoding = parameters.getEncoding();\n+                        if(encoding == null) {\n+                        \tencoding = Parameters.DEFAULT_ENCODING;\n+                        }\n+ \t\t\t\t\t\tparameters.addParameterValues(part.getName(),\n                                 new String[] {part.getString(\n-                                        parameters.getEncoding())});\n+                                        encoding)});\n                     } catch (UnsupportedEncodingException uee) {\n                         try {\n                             parameters.addParameterValues(part.getName(),\n@@ -2533,7 +2537,7 @@ private void parseParts() {\n         } catch (FileUploadBase.SizeException e) {\n             partsParseException = new IllegalStateException(e);\n         } catch (FileUploadException e) {\n-            partsParseException = new IOException();\n+            partsParseException = new IOException(e);\n         }\n         \n         return;",
                "raw_url": "https://github.com/apache/tomcat80/raw/818a9a962bdfab5bf66d330734c0225c0877f64a/java/org/apache/catalina/connector/Request.java",
                "sha": "f187eacdfc96caed57f84524c4057d2297eb2755",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if no encoding parameter exists at request!\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@939639 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/7b2dc061c7e6483cde3dbc51ee7f7df9f1fc9832",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRequest.java"
        ]
    },
    "tomcat80_81be4f6": {
        "bug_id": "tomcat80_81be4f6",
        "commit": "https://github.com/apache/tomcat80/commit/81be4f6f86eca01102721a3b5de6913b5ef6eb49",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomcat80/blob/81be4f6f86eca01102721a3b5de6913b5ef6eb49/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=81be4f6f86eca01102721a3b5de6913b5ef6eb49",
                "deletions": 5,
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "patch": "@@ -423,11 +423,6 @@ protected void populateAnnotationsCache(Class<?> clazz,\n                             new WeakReference<List<AnnotationCacheEntry>>(\n                                     annotations));\n                 }\n-            } else {\n-                // If the annotations for this class have been cached, the\n-                // annotations for all the super classes will have been cachced\n-                // as well\n-                break;\n             }\n             clazz = clazz.getSuperclass();\n         }",
                "raw_url": "https://github.com/apache/tomcat80/raw/81be4f6f86eca01102721a3b5de6913b5ef6eb49/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "sha": "eaac06f76936b5d27e37ac7727e42ee140deaf3b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=52042\nCorrect threading issue in annotation caching that could lead to an\nNPE if multiple threads were processing the same class hierarchy for\nannotations\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1186042 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/1cbec226c87bda22f05d792e47847e793b24447a",
        "repo": "tomcat80",
        "unit_tests": [
            "TestDefaultInstanceManager.java"
        ]
    },
    "tomcat80_84cac67": {
        "bug_id": "tomcat80_84cac67",
        "commit": "https://github.com/apache/tomcat80/commit/84cac67c7ebdaebe71aa14ab60973379c63720d1",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/84cac67c7ebdaebe71aa14ab60973379c63720d1/java/org/apache/catalina/startup/ContextConfig.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=84cac67c7ebdaebe71aa14ab60973379c63720d1",
                "deletions": 1,
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "patch": "@@ -1191,9 +1191,14 @@ protected InputSource getGlobalWebXmlSource() {\n     protected InputSource getHostWebXmlSource() {\n         String resourceName = getHostConfigPath(Constants.HostWebXml);\n         \n+        // In an embedded environment, configBase might not be set\n+        File configBase = getConfigBase();\n+        if (configBase == null)\n+            return null;\n+        \n         String basePath = null;\n         try {\n-            basePath = getConfigBase().getCanonicalPath();\n+            basePath = configBase.getCanonicalPath();\n         } catch (IOException e) {\n             log.error(sm.getString(\"contectConfig.baseError\"), e);\n             return null;",
                "raw_url": "https://github.com/apache/tomcat80/raw/84cac67c7ebdaebe71aa14ab60973379c63720d1/java/org/apache/catalina/startup/ContextConfig.java",
                "sha": "97f3951c6a53a81b4ade2f45bc90c2d9f46d4ba9",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE when embedded\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@817204 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/5790502e1d2695814392d3fa49e138b1348dd106",
        "repo": "tomcat80",
        "unit_tests": [
            "TestContextConfig.java"
        ]
    },
    "tomcat80_860e0c3": {
        "bug_id": "tomcat80_860e0c3",
        "commit": "https://github.com/apache/tomcat80/commit/860e0c31a8b8f2d158e0ed094480d72188b1a18c",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat80/blob/860e0c31a8b8f2d158e0ed094480d72188b1a18c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java?ref=860e0c31a8b8f2d158e0ed094480d72188b1a18c",
                "deletions": 3,
                "filename": "java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "patch": "@@ -163,11 +163,15 @@ public void reset() throws IOException {\n         if (multiRelease == null) {\n             if (JreCompat.isJre9Available()) {\n                 Manifest manifest = jarInputStream.getManifest();\n-                String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n-                if (mrValue == null) {\n+                if (manifest == null) {\n                     multiRelease = Boolean.FALSE;\n                 } else {\n-                    multiRelease = Boolean.valueOf(mrValue);\n+                    String mrValue = manifest.getMainAttributes().getValue(\"Multi-Release\");\n+                    if (mrValue == null) {\n+                        multiRelease = Boolean.FALSE;\n+                    } else {\n+                        multiRelease = Boolean.valueOf(mrValue);\n+                    }\n                 }\n             } else {\n                 multiRelease = Boolean.FALSE;",
                "raw_url": "https://github.com/apache/tomcat80/raw/860e0c31a8b8f2d158e0ed094480d72188b1a18c/java/org/apache/tomcat/util/scan/AbstractInputStreamJar.java",
                "sha": "e765c463b4eef2c4b52da9a78a380ec8ca6802a9",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE if no manifest is present.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1815327 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/59a6d2fa55ac9b4b0457fe949be50628adf998e1",
        "repo": "tomcat80",
        "unit_tests": [
            "TestAbstractInputStreamJar.java"
        ]
    },
    "tomcat80_881e4d4": {
        "bug_id": "tomcat80_881e4d4",
        "commit": "https://github.com/apache/tomcat80/commit/881e4d4e67d81ad9a297fcc9bae753557a5b0604",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/881e4d4e67d81ad9a297fcc9bae753557a5b0604/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/coyote/http11/AbstractHttp11Processor.java?ref=881e4d4e67d81ad9a297fcc9bae753557a5b0604",
                "deletions": 1,
                "filename": "java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "patch": "@@ -898,7 +898,10 @@ public final void action(ActionCode actionCode, Object param) {\n             break;\n         }\n         case DISPATCH_EXECUTE: {\n-            getEndpoint().executeNonBlockingDispatches(socketWrapper);\n+            SocketWrapper<S> wrapper = socketWrapper;\n+            if (wrapper != null) {\n+                getEndpoint().executeNonBlockingDispatches(wrapper);\n+            }\n             break;\n         }\n         case CLOSE_NOW: {",
                "raw_url": "https://github.com/apache/tomcat80/raw/881e4d4e67d81ad9a297fcc9bae753557a5b0604/java/org/apache/coyote/http11/AbstractHttp11Processor.java",
                "sha": "57f66cb542f1d301e6730d8c55abc6705773c0ae",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE (unlikely but observed while stepping through code investogating BZ 56739)\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1616204 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c5bf93a6dd4d7ba2cc92e948d9c9124fa89db1a9",
        "repo": "tomcat80",
        "unit_tests": [
            "TestAbstractHttp11Processor.java"
        ]
    },
    "tomcat80_8975107": {
        "bug_id": "tomcat80_8975107",
        "commit": "https://github.com/apache/tomcat80/commit/89751070d7066131b84fc57adaf4aa6c0aae237b",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/tomcat80/blob/89751070d7066131b84fc57adaf4aa6c0aae237b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=89751070d7066131b84fc57adaf4aa6c0aae237b",
                "deletions": 12,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -25,6 +25,7 @@\n import javax.servlet.ReadListener;\n import javax.servlet.RequestDispatcher;\n import javax.servlet.SessionTrackingMode;\n+import javax.servlet.WriteListener;\n import javax.servlet.http.HttpServletResponse;\n \n import org.apache.catalina.Context;\n@@ -313,14 +314,15 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n                 Throwable t = (Throwable)req.getAttribute(\n                         RequestDispatcher.ERROR_EXCEPTION);\n                 req.getAttributes().remove(RequestDispatcher.ERROR_EXCEPTION);\n-                if (req.getReadListener() != null) {\n+                ReadListener readListener = req.getReadListener();\n+                if (readListener != null) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n@@ -355,41 +357,42 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n \n             // Check to see if non-blocking writes or reads are being used\n             if (!request.isAsyncDispatching() && request.isAsync()) {\n-                if (res.getWriteListener() != null &&\n-                        status == SocketStatus.OPEN_WRITE) {\n+                WriteListener writeListener = res.getWriteListener();\n+                ReadListener readListener = req.getReadListener();\n+                if (writeListener != null && status == SocketStatus.OPEN_WRITE) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n                         res.onWritePossible();\n-                        if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                        if (request.isFinished() && req.sendAllDataReadEvent() &&\n+                                readListener != null) {\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        res.getWriteListener().onError(t);\n+                        writeListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);\n                     }\n                     success = true;\n-                } else if (req.getReadListener() != null &&\n-                        status == SocketStatus.OPEN_READ) {\n+                } else if (readListener != null && status == SocketStatus.OPEN_READ) {\n                     ClassLoader oldCL =\n                             Thread.currentThread().getContextClassLoader();\n                     ClassLoader newCL =\n                             request.getContext().getLoader().getClassLoader();\n                     try {\n                         Thread.currentThread().setContextClassLoader(newCL);\n-                        req.getReadListener().onDataAvailable();\n+                        readListener.onDataAvailable();\n                         if (request.isFinished() && req.sendAllDataReadEvent()) {\n-                            req.getReadListener().onAllDataRead();\n+                            readListener.onAllDataRead();\n                         }\n                     } catch (Throwable t) {\n                         ExceptionUtils.handleThrowable(t);\n-                        req.getReadListener().onError(t);\n+                        readListener.onError(t);\n                         throw t;\n                     } finally {\n                         Thread.currentThread().setContextClassLoader(oldCL);",
                "raw_url": "https://github.com/apache/tomcat80/raw/89751070d7066131b84fc57adaf4aa6c0aae237b/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "c59b5ffdbf48fdcef108e76cf5bda99fe3ead964",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs if asyncContext is completed by listener\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1545801 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/0e4aa717854539253ed67b4818fb86015a787ab6",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat80_8ea3473": {
        "bug_id": "tomcat80_8ea3473",
        "commit": "https://github.com/apache/tomcat80/commit/8ea34734e24362e84be84325b88690e9e5f87f1a",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/tomcat80/blob/8ea34734e24362e84be84325b88690e9e5f87f1a/java/org/apache/catalina/startup/WebXml.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/WebXml.java?ref=8ea34734e24362e84be84325b88690e9e5f87f1a",
                "deletions": 13,
                "filename": "java/org/apache/catalina/startup/WebXml.java",
                "patch": "@@ -590,9 +590,11 @@ public String toXml() {\n             appendElement(sb, INDENT4, \"enabled\", servletDef.getEnabled());\n             appendElement(sb, INDENT4, \"async-supported\",\n                     servletDef.getAsyncSupported());\n-            sb.append(\"    <run-as>\\n\");\n-            appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n-            sb.append(\"    </run-as>\\n\");\n+            if (servletDef.getRunAs() != null) {\n+                sb.append(\"    <run-as>\\n\");\n+                appendElement(sb, INDENT6, \"role-name\", servletDef.getRunAs());\n+                sb.append(\"    </run-as>\\n\");\n+            }\n             for (SecurityRoleRef roleRef : servletDef.getSecurityRoleRefs()) {\n                 sb.append(\"    <security-role-ref>\\n\");\n                 appendElement(sb, INDENT6, \"role-name\", roleRef.getName());\n@@ -1491,8 +1493,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            if (temp.getSessionConfig().getSessionTimeout() != null) {\n+                sessionConfig.setSessionTimeout(\n+                        temp.getSessionConfig().getSessionTimeout().toString());\n+            }\n         }\n         \n         if (sessionConfig.getCookieName() == null) {\n@@ -1597,8 +1601,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieHttpOnly(\n-                    temp.getSessionConfig().getCookieHttpOnly().toString());\n+            if (temp.getSessionConfig().getCookieHttpOnly() != null) {\n+                sessionConfig.setCookieHttpOnly(\n+                        temp.getSessionConfig().getCookieHttpOnly().toString());\n+            }\n         }\n         if (sessionConfig.getCookieSecure() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1618,8 +1624,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieSecure(\n-                    temp.getSessionConfig().getCookieSecure().toString());\n+            if (temp.getSessionConfig().getCookieSecure() != null) {\n+                sessionConfig.setCookieSecure(\n+                        temp.getSessionConfig().getCookieSecure().toString());\n+            }\n         }\n         if (sessionConfig.getCookieMaxAge() == null) {\n             for (WebXml fragment : fragments) {\n@@ -1639,8 +1647,10 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setCookieMaxAge(\n-                    temp.getSessionConfig().getCookieMaxAge().toString());\n+            if (temp.getSessionConfig().getCookieMaxAge() != null) {\n+                sessionConfig.setCookieMaxAge(\n+                        temp.getSessionConfig().getCookieMaxAge().toString());\n+            }\n         }\n \n         if (sessionConfig.getSessionTrackingModes().size() == 0) {\n@@ -1662,8 +1672,8 @@ public boolean merge(Set<WebXml> fragments) {\n                     }\n                 }\n             }\n-            sessionConfig.setSessionTimeout(\n-                    temp.getSessionConfig().getSessionTimeout().toString());\n+            sessionConfig.getSessionTrackingModes().addAll(\n+                    temp.getSessionConfig().getSessionTrackingModes());\n         }\n         \n         for (WebXml fragment : fragments) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/8ea34734e24362e84be84325b88690e9e5f87f1a/java/org/apache/catalina/startup/WebXml.java",
                "sha": "64d0d91826f6d0968cfc8366c740866a401a8592",
                "status": "modified"
            }
        ],
        "message": "XML output tweaks\nFix some NPEs in the merge of session-config elements\nFix a copy and paste error in the merge of session-config elements\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@894457 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f08f71991df0b26681a2dd22363e48640e1fb90c",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat80_9171061": {
        "bug_id": "tomcat80_9171061",
        "commit": "https://github.com/apache/tomcat80/commit/917106163e077b03a6ec2d4c22a17904aa286611",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/tomcat80/blob/917106163e077b03a6ec2d4c22a17904aa286611/java/org/apache/catalina/deploy/WebXml.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/deploy/WebXml.java?ref=917106163e077b03a6ec2d4c22a17904aa286611",
                "deletions": 3,
                "filename": "java/org/apache/catalina/deploy/WebXml.java",
                "patch": "@@ -1934,7 +1934,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getLoadOnStartup() == null) {\n-            dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            if (src.getLoadOnStartup() != null) {\n+                dest.setLoadOnStartup(src.getLoadOnStartup().toString());\n+            }\n         } else if (src.getLoadOnStartup() != null) {\n             if (failOnConflict &&\n                     !src.getLoadOnStartup().equals(dest.getLoadOnStartup())) {\n@@ -1943,7 +1945,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getEnabled() == null) {\n-            dest.setEnabled(src.getEnabled().toString());\n+            if (src.getEnabled() != null) {\n+                dest.setEnabled(src.getEnabled().toString());\n+            }\n         } else if (src.getEnabled() != null) {\n             if (failOnConflict &&\n                     !src.getEnabled().equals(dest.getEnabled())) {\n@@ -1971,7 +1975,9 @@ private static boolean mergeServlet(ServletDef src, ServletDef dest,\n         }\n         \n         if (dest.getAsyncSupported() == null) {\n-            dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            if (src.getAsyncSupported() != null) {\n+                dest.setAsyncSupported(src.getAsyncSupported().toString());\n+            }\n         } else if (src.getAsyncSupported() != null) {\n             if (failOnConflict &&\n                     !src.getAsyncSupported().equals(dest.getAsyncSupported())) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/917106163e077b03a6ec2d4c22a17904aa286611/java/org/apache/catalina/deploy/WebXml.java",
                "sha": "8b3b528294f3709a01f4af847ab9ea3163999ecf",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@907497 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/8e6eb7dba173480d22de0f8beca422aea807f809",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebXml.java"
        ]
    },
    "tomcat80_9468ff9": {
        "bug_id": "tomcat80_9468ff9",
        "commit": "https://github.com/apache/tomcat80/commit/9468ff9afd028c7cb66abba0ada843ef9dcd0c68",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomcat80/blob/9468ff9afd028c7cb66abba0ada843ef9dcd0c68/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=9468ff9afd028c7cb66abba0ada843ef9dcd0c68",
                "deletions": 3,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -510,6 +510,16 @@ protected boolean postParseRequest(org.apache.coyote.Request req,\n         }\n \n         // Parse session Id\n+        if (!request.getServletContext().getEffectiveSessionTrackingModes()\n+                .contains(SessionTrackingMode.URL)) {\n+            /* \n+             * If we saw an ID in the URL but this is disabled - remove it\n+             * Can't handle it when we parse the URL as we don't have the\n+             * context at that point\n+             */\n+            request.setRequestedSessionId(null);\n+            request.setRequestedSessionURL(false);\n+        }\n         parseSessionCookiesId(req, request);\n         parseSessionSslId(request);\n         return true;\n@@ -543,9 +553,7 @@ protected void parseSessionId(org.apache.coyote.Request req, Request request) {\n         ByteChunk uriBC = req.requestURI().getByteChunk();\n         int semicolon = uriBC.indexOf(match, 0, match.length(), 0);\n \n-        if (semicolon > 0 &&\n-                request.getServletContext().getEffectiveSessionTrackingModes()\n-                        .contains(SessionTrackingMode.URL)) {\n+        if (semicolon > 0) {\n \n             // Parse session ID, and extract it from the decoded request URI\n             int start = uriBC.getStart();",
                "raw_url": "https://github.com/apache/tomcat80/raw/9468ff9afd028c7cb66abba0ada843ef9dcd0c68/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "ad9995784ad66a5d478e67a8b2ece3778b8e56bf",
                "status": "modified"
            }
        ],
        "message": "Fix NPE when not using cookies for session IDs\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@763322 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/4f5ddf594035196fef32b9e3358afc494491e00d",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat80_95aa028": {
        "bug_id": "tomcat80_95aa028",
        "commit": "https://github.com/apache/tomcat80/commit/95aa0280d3e40b166177d483118b3848a25fb699",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/95aa0280d3e40b166177d483118b3848a25fb699/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java?ref=95aa0280d3e40b166177d483118b3848a25fb699",
                "deletions": 2,
                "filename": "java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "patch": "@@ -125,10 +125,13 @@ public void invoke(Request request, Response response) throws IOException,\n \n             // Is this a crawler - cheack the UA headers\n             Enumeration<String> uaHeaders = request.getHeaders(\"user-agent\");\n-            String uaHeader = uaHeaders.nextElement();\n+            String uaHeader = null;\n+            if (uaHeaders.hasMoreElements()) {\n+                uaHeader = uaHeaders.nextElement();\n+            }\n             \n             // If more than one UA header - assume not a bot\n-            if (!uaHeaders.hasMoreElements()) {\n+            if (uaHeader != null && !uaHeaders.hasMoreElements()) {\n \n                 if (log.isDebugEnabled()) {\n                     log.debug(request.hashCode() + \": UserAgent=\" + uaHeader);",
                "raw_url": "https://github.com/apache/tomcat80/raw/95aa0280d3e40b166177d483118b3848a25fb699/java/org/apache/catalina/valves/CrawlerSessionManagerValve.java",
                "sha": "c0f88818a937c0a9acfb104ed69381a2e7f52451",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if no u-a header\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1074159 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/9e6928af15369e67a5b05cf8d8a8682376143fd2",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCrawlerSessionManagerValve.java"
        ]
    },
    "tomcat80_98c01e9": {
        "bug_id": "tomcat80_98c01e9",
        "commit": "https://github.com/apache/tomcat80/commit/98c01e9780dfb628dbb19bea0f07b080bb55c318",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/98c01e9780dfb628dbb19bea0f07b080bb55c318/java/org/apache/jasper/compiler/JspConfig.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/JspConfig.java?ref=98c01e9780dfb628dbb19bea0f07b080bb55c318",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/JspConfig.java",
                "patch": "@@ -83,6 +83,7 @@ private void processWebDotXml() {\n             return;\n         }\n \n+        jspProperties = new Vector<>();\n         Collection<JspPropertyGroupDescriptor> jspPropertyGroups =\n                 jspConfig.getJspPropertyGroups();\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/98c01e9780dfb628dbb19bea0f07b080bb55c318/java/org/apache/jasper/compiler/JspConfig.java",
                "sha": "2d7f05c0af347c75f92813c4c34aa48eb2cfb08b",
                "status": "modified"
            }
        ],
        "message": "Another NPE fox after the switch to obtaining the JspConfigDescription from the ServletContext\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1501926 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/6375510e8e4dd9466fa8a708a9ffa40459342d5f",
        "repo": "tomcat80",
        "unit_tests": [
            "TestJspConfig.java"
        ]
    },
    "tomcat80_9b84320": {
        "bug_id": "tomcat80_9b84320",
        "commit": "https://github.com/apache/tomcat80/commit/9b843201d4ecab087c1d403f3766f1a7fc4bb8a7",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/9b843201d4ecab087c1d403f3766f1a7fc4bb8a7/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/DefaultInstanceManager.java?ref=9b843201d4ecab087c1d403f3766f1a7fc4bb8a7",
                "deletions": 0,
                "filename": "java/org/apache/catalina/core/DefaultInstanceManager.java",
                "patch": "@@ -205,6 +205,10 @@ protected void preDestroy(Object instance, final Class<?> clazz)\n         // At the end the postconstruct annotated\n         // method is invoked\n         List<AnnotationCacheEntry> annotations = annotationCache.get(clazz);\n+        if (annotations == null) {\n+            // instance not created through the instance manager\n+            return;\n+        }\n         for (AnnotationCacheEntry entry : annotations) {\n             if (entry.getType() == AnnotationCacheEntryType.PRE_DESTROY) {\n                 Method preDestroy = (Method) entry.getAccessibleObject();",
                "raw_url": "https://github.com/apache/tomcat80/raw/9b843201d4ecab087c1d403f3766f1a7fc4bb8a7/java/org/apache/catalina/core/DefaultInstanceManager.java",
                "sha": "b354fc26b1a981db821f3b2093c9d68f0f29bc78",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE if instances aren't created through the DefaultInstanceManager but are destroyed through it.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1166752 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ce12d924c83cce186fddabc20d67b8cc746f0203",
        "repo": "tomcat80",
        "unit_tests": [
            "TestDefaultInstanceManager.java"
        ]
    },
    "tomcat80_9bf702b": {
        "bug_id": "tomcat80_9bf702b",
        "commit": "https://github.com/apache/tomcat80/commit/9bf702b76dfa5b6736dcc49486349209ad0b3964",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/9bf702b76dfa5b6736dcc49486349209ad0b3964/java/org/apache/catalina/connector/Connector.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/Connector.java?ref=9bf702b76dfa5b6736dcc49486349209ad0b3964",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/Connector.java",
                "patch": "@@ -765,7 +765,11 @@ public String getURIEncodingLower() {\n       */\n      public void setURIEncoding(String URIEncoding) {\n          this.URIEncoding = URIEncoding;\n-         this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         if (URIEncoding == null) {\n+             URIEncodingLower = null;\n+         } else {\n+             this.URIEncodingLower = URIEncoding.toLowerCase(Locale.US);\n+         }\n          setProperty(\"uRIEncoding\", URIEncoding);\n      }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/9bf702b76dfa5b6736dcc49486349209ad0b3964/java/org/apache/catalina/connector/Connector.java",
                "sha": "05a66365a5177b055e7ad8c776df3843efaf54a4",
                "status": "modified"
            }
        ],
        "message": "FindBugs: Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401092 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/26ad376ce7cb0c5991742414c5bf72da2d4bd30d",
        "repo": "tomcat80",
        "unit_tests": [
            "TestConnector.java"
        ]
    },
    "tomcat80_9ca2e4a": {
        "bug_id": "tomcat80_9ca2e4a",
        "commit": "https://github.com/apache/tomcat80/commit/9ca2e4ad6029d4dbcb812651723aacffee104972",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/9ca2e4ad6029d4dbcb812651723aacffee104972/java/org/apache/juli/FileHandler.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/juli/FileHandler.java?ref=9ca2e4ad6029d4dbcb812651723aacffee104972",
                "deletions": 2,
                "filename": "java/org/apache/juli/FileHandler.java",
                "patch": "@@ -133,8 +133,12 @@ public void publish(LogRecord record) {\n         }\n         \n         try {\n-            writer.write(result);\n-            writer.flush();\n+            if (writer!=null) {\n+                writer.write(result);\n+                writer.flush();\n+            } else {\n+                reportError(\"FileHandler is closed or not yet initialized, unable to log [\"+result+\"]\", null, ErrorManager.WRITE_FAILURE);\n+            }\n         } catch (Exception e) {\n             reportError(null, e, ErrorManager.WRITE_FAILURE);\n             return;",
                "raw_url": "https://github.com/apache/tomcat80/raw/9ca2e4ad6029d4dbcb812651723aacffee104972/java/org/apache/juli/FileHandler.java",
                "sha": "eb23fb564af2f38884597aef7d4dd70aec0eefea",
                "status": "modified"
            }
        ],
        "message": "prevent NPE during shutdown where the logger has been shutdown and delayed resources still trying to log\njava.lang.NullPointerException\n\tat org.apache.juli.FileHandler.publish(FileHandler.java:136)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@666232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/d844bc1c705bbb95d4e93b3672931eb8771c2e64",
        "repo": "tomcat80",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat80_9fab7b2": {
        "bug_id": "tomcat80_9fab7b2",
        "commit": "https://github.com/apache/tomcat80/commit/9fab7b2bfc3f889549ff8a80acc8ee1fc9252e8d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/9fab7b2bfc3f889549ff8a80acc8ee1fc9252e8d/java/org/apache/jasper/compiler/JspConfig.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/JspConfig.java?ref=9fab7b2bfc3f889549ff8a80acc8ee1fc9252e8d",
                "deletions": 3,
                "filename": "java/org/apache/jasper/compiler/JspConfig.java",
                "patch": "@@ -77,9 +77,12 @@ private void processWebDotXml() throws JasperException {\n         try {\n             webXml = new WebXml(ctxt);\n             \n-            ParserUtils pu = new ParserUtils();\n-            TreeNode webApp = pu.parseXMLDocument(webXml.getSystemId(),\n-                    webXml.getInputSource());\n+            TreeNode webApp = null;\n+            if (webXml.getInputSource() != null) {\n+                ParserUtils pu = new ParserUtils();\n+                webApp = pu.parseXMLDocument(webXml.getSystemId(),\n+                        webXml.getInputSource());\n+            }\n \n             if (webApp == null\n                     || getVersion(webApp) < 2.4) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/9fab7b2bfc3f889549ff8a80acc8ee1fc9252e8d/java/org/apache/jasper/compiler/JspConfig.java",
                "sha": "944cda60ee7a1e463b943f9c890a05fc622bc40f",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE in emebedded case when no web.xml is provided at all\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@896622 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/91c5dc50546a4c7098070bf0608655c67371abef",
        "repo": "tomcat80",
        "unit_tests": [
            "TestJspConfig.java"
        ]
    },
    "tomcat80_a1fef66": {
        "bug_id": "tomcat80_a1fef66",
        "commit": "https://github.com/apache/tomcat80/commit/a1fef662d43e056695a16aad03a89298b8b011e4",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/tomcat80/blob/a1fef662d43e056695a16aad03a89298b8b011e4/java/org/apache/catalina/connector/Response.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/Response.java?ref=a1fef662d43e056695a16aad03a89298b8b011e4",
                "deletions": 0,
                "filename": "java/org/apache/catalina/connector/Response.java",
                "patch": "@@ -1009,6 +1009,10 @@ public Void run(){\n      */\n     public void addDateHeader(String name, long value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1036,6 +1040,10 @@ public void addDateHeader(String name, long value) {\n      */\n     public void addHeader(String name, String value) {\n \n+        if (name == null || name.length() == 0 || value == null) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1056,6 +1064,10 @@ public void addHeader(String name, String value) {\n      */\n     public void addIntHeader(String name, int value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1281,6 +1293,10 @@ public void sendRedirect(String location)\n      */\n     public void setDateHeader(String name, long value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1308,6 +1324,10 @@ public void setDateHeader(String name, long value) {\n      */\n     public void setHeader(String name, String value) {\n \n+        if (name == null || name.length() == 0 || value == null) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n \n@@ -1328,6 +1348,10 @@ public void setHeader(String name, String value) {\n      */\n     public void setIntHeader(String name, int value) {\n \n+        if (name == null || name.length() == 0) {\n+            return;\n+        }\n+\n         if (isCommitted())\n             return;\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/a1fef662d43e056695a16aad03a89298b8b011e4/java/org/apache/catalina/connector/Response.java",
                "sha": "dbfbeaa1ed09aa0bc7f500ca4240d7f8c5eafb7c",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=47451\nDon't trigger an NPE if headers with null or zero length name or set or if a null value is specified. Silently ignore any such calls in the same way the calls are ignored if the response has already been committed.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@831774 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/3f97d9b8672859d4273121eb7cfd32fecbfaf99c",
        "repo": "tomcat80",
        "unit_tests": [
            "TestResponse.java"
        ]
    },
    "tomcat80_a32096c": {
        "bug_id": "tomcat80_a32096c",
        "commit": "https://github.com/apache/tomcat80/commit/a32096c97e0e0878242480a584781c2a25af7a36",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/a32096c97e0e0878242480a584781c2a25af7a36/java/org/apache/catalina/realm/JNDIRealm.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/JNDIRealm.java?ref=a32096c97e0e0878242480a584781c2a25af7a36",
                "deletions": 2,
                "filename": "java/org/apache/catalina/realm/JNDIRealm.java",
                "patch": "@@ -2229,14 +2229,16 @@ protected String getDistinguishedName(DirContext context, String base,\n          final private String username;\n          final private String dn;\n          final private String password;\n-         final private List<String> roles;\n+         final private List<String> roles = new ArrayList<String>();\n \n          public User(String username, String dn, String password,\n                  List<String> roles) {\n              this.username = username;\n              this.dn = dn;\n              this.password = password;\n-             this.roles = Collections.unmodifiableList(roles);\n+             if (roles != null) {\n+                 this.roles.addAll(roles);\n+             }\n          }\n     \n          public String getUserName() {",
                "raw_url": "https://github.com/apache/tomcat80/raw/a32096c97e0e0878242480a584781c2a25af7a36/java/org/apache/catalina/realm/JNDIRealm.java",
                "sha": "bf5a21e27431a70ea3d1b96ac5092b379d5cb590",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=49075\nNPE protection if roles is null and roles needs to be modifiable\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@932357 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/10d99058af830ec08da2b51351bbf28c0c35ae31",
        "repo": "tomcat80",
        "unit_tests": [
            "TestJNDIRealm.java"
        ]
    },
    "tomcat80_a3fac35": {
        "bug_id": "tomcat80_a3fac35",
        "commit": "https://github.com/apache/tomcat80/commit/a3fac35988917ddf2a1cd4b71b3387aa2fd17899",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/a3fac35988917ddf2a1cd4b71b3387aa2fd17899/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java?ref=a3fac35988917ddf2a1cd4b71b3387aa2fd17899",
                "deletions": 0,
                "filename": "java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "patch": "@@ -446,6 +446,10 @@ else if (\"declare\".equals(tname)) {\n     private TagLibraryValidator createValidator(ValidatorXml validatorXml)\n             throws JasperException {\n \n+        if (validatorXml == null) {\n+            return null;\n+        }\n+\n         String validatorClass = validatorXml.getValidatorClass();\n \n         Map<String,Object> initParams = new Hashtable<>();",
                "raw_url": "https://github.com/apache/tomcat80/raw/a3fac35988917ddf2a1cd4b71b3387aa2fd17899/java/org/apache/jasper/compiler/TagLibraryInfoImpl.java",
                "sha": "b59ed76762d0573754549f0e0b4b8b800f11600e",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1541958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/7390fc04ee826f4573acde40216b5530b05e1dda",
        "repo": "tomcat80",
        "unit_tests": [
            "TestTagLibraryInfoImpl.java"
        ]
    },
    "tomcat80_a758994": {
        "bug_id": "tomcat80_a758994",
        "commit": "https://github.com/apache/tomcat80/commit/a758994ab119e8e690722fc5d98709247bfcf221",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/a758994ab119e8e690722fc5d98709247bfcf221/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/ApplicationHttpRequest.java?ref=a758994ab119e8e690722fc5d98709247bfcf221",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "patch": "@@ -449,7 +449,7 @@ public String getPathInfo() {\n      */\n     @Override\n     public String getPathTranslated() {\n-        if (getPathInfo() == null) {\n+        if (getPathInfo() == null || getServletContext() == null) {\n             return null;\n         }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/a758994ab119e8e690722fc5d98709247bfcf221/java/org/apache/catalina/core/ApplicationHttpRequest.java",
                "sha": "c0fabf5e6d7464d10b8dbb03243243b1d304bb3b",
                "status": "modified"
            }
        ],
        "message": "kkolinko review: Extend NPE protection\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1608301 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f21f8acdef8e459c25b10d3344343eea8dbd7e18",
        "repo": "tomcat80",
        "unit_tests": [
            "TestApplicationHttpRequest.java"
        ]
    },
    "tomcat80_b396f28": {
        "bug_id": "tomcat80_b396f28",
        "commit": "https://github.com/apache/tomcat80/commit/b396f28e3abadfca0b9f071dde1155a546c4e103",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/b396f28e3abadfca0b9f071dde1155a546c4e103/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/loader/VirtualWebappLoader.java?ref=b396f28e3abadfca0b9f071dde1155a546c4e103",
                "deletions": 2,
                "filename": "java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "patch": "@@ -82,11 +82,10 @@ public void setVirtualClasspath(String path) {\n \n     @Override\n     public void start() throws LifecycleException {\n-\n         // just add any jar/directory set in virtual classpath to the\n         // repositories list before calling start on the standard WebappLoader\n         StringTokenizer tkn = new StringTokenizer(virtualClasspath, \";\");\n-        while (tkn.hasMoreTokens()) {\n+        while (tkn!=null && tkn.hasMoreTokens()) {\n             File file = new File(tkn.nextToken());\n             if (!file.exists()) {\n                 continue;",
                "raw_url": "https://github.com/apache/tomcat80/raw/b396f28e3abadfca0b9f071dde1155a546c4e103/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "sha": "b218e50bd2c49d59aa1e4511c29074762456f359",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if no classpath is set\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@567163 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c681ab19636fb5041f150d453cb7165c7e1c7183",
        "repo": "tomcat80",
        "unit_tests": [
            "TestVirtualWebappLoader.java"
        ]
    },
    "tomcat80_b5d4010": {
        "bug_id": "tomcat80_b5d4010",
        "commit": "https://github.com/apache/tomcat80/commit/b5d40104595e08ddaff20a592c4387049126301a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/b5d40104595e08ddaff20a592c4387049126301a/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=b5d40104595e08ddaff20a592c4387049126301a",
                "deletions": 1,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -500,7 +500,7 @@ public void log(org.apache.coyote.Request req,\n                             request, response, time, true);\n                 } else if (request.mappingData.host != null) {\n                     logged = true;\n-                    ((Context) request.mappingData.context).logAccess(\n+                    ((Host) request.mappingData.host).logAccess(\n                             request, response, time, true);\n                 }\n             }",
                "raw_url": "https://github.com/apache/tomcat80/raw/b5d40104595e08ddaff20a592c4387049126301a/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "428868164369c064569838e5b54b2554ca35dbf3",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=51658\nFix copy/paste error that could trigger an NPE.\nBased on a suggestion by Felix Schumacher\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1158155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/b45452785335a2c442abfb59348e80fbc0ea7594",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat80_b96d85a": {
        "bug_id": "tomcat80_b96d85a",
        "commit": "https://github.com/apache/tomcat80/commit/b96d85aa3485f625749e14d78d5ea442079d2a59",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/b96d85aa3485f625749e14d78d5ea442079d2a59/java/org/apache/catalina/startup/Tomcat.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/Tomcat.java?ref=b96d85aa3485f625749e14d78d5ea442079d2a59",
                "deletions": 1,
                "filename": "java/org/apache/catalina/startup/Tomcat.java",
                "patch": "@@ -668,7 +668,11 @@ public void setSilent(boolean silent) {\n \n     private void silence(Host host, String ctx) {\n         String base = \"org.apache.catalina.core.ContainerBase.[default].[\";\n-        base += host.getName();\n+        if (host == null) {\n+            base += getHost().getName();\n+        } else {\n+            base += host.getName();\n+        }\n         base += \"].[\";\n         base += ctx;\n         base += \"]\";",
                "raw_url": "https://github.com/apache/tomcat80/raw/b96d85aa3485f625749e14d78d5ea442079d2a59/java/org/apache/catalina/startup/Tomcat.java",
                "sha": "dd1385d2bf0599b52eb5b89866a71c512a95ecbe",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1226177 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ca8c65c09b8610536a7ed312db10a7fe0a078d48",
        "repo": "tomcat80",
        "unit_tests": [
            "TestTomcat.java"
        ]
    },
    "tomcat80_b9ea759": {
        "bug_id": "tomcat80_b9ea759",
        "commit": "https://github.com/apache/tomcat80/commit/b9ea75942a6e65ab67ded5005175ab56d4f8d758",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/tomcat80/blob/b9ea75942a6e65ab67ded5005175ab56d4f8d758/java/org/apache/jasper/compiler/Generator.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Generator.java?ref=b9ea75942a6e65ab67ded5005175ab56d4f8d758",
                "deletions": 5,
                "filename": "java/org/apache/jasper/compiler/Generator.java",
                "patch": "@@ -1868,18 +1868,24 @@ public void visit(Node.JspElement n) throws JasperException {\n                 if (attrs[i].isNamedAttribute()) {\n                     NamedAttribute attr = attrs[i].getNamedAttributeNode();\n                     Node.JspAttribute omitAttr = attr.getOmit();\n-                    String omit = attributeValue(omitAttr, false, boolean.class);\n-                    if (\"true\".equals(omit)) {\n-                        continue;\n+                    String omit;\n+                    if (omitAttr == null) {\n+                        omit = \"false\";\n+                    } else {\n+                        omit = attributeValue(omitAttr, false, boolean.class);\n+                        if (\"true\".equals(omit)) {\n+                            continue;\n+                        }\n                     }\n                     value = generateNamedAttributeValue(\n                             attrs[i].getNamedAttributeNode());\n                     if (\"false\".equals(omit)) {\n                         nvp = \" + \\\" \" + attrs[i].getName() + \"=\\\\\\\"\\\" + \" +\n                                 value + \" + \\\"\\\\\\\"\\\"\";\n                     } else {\n-                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" + attrs[i].getName() +\n-                                \"=\\\\\\\"\\\" + \" + value + \" + \\\"\\\\\\\"\\\")\";\n+                        nvp = \" + (Boolean.valueOf(\" + omit + \")?\\\"\\\":\\\" \" +\n+                                attrs[i].getName() + \"=\\\\\\\"\\\" + \" + value +\n+                                \" + \\\"\\\\\\\"\\\")\";\n                     }\n                 } else {\n                     value = attributeValue(attrs[i], false, Object.class);",
                "raw_url": "https://github.com/apache/tomcat80/raw/b9ea75942a6e65ab67ded5005175ab56d4f8d758/java/org/apache/jasper/compiler/Generator.java",
                "sha": "0d4321e10adbe300b26fc378a515bb33f7e092c3",
                "status": "modified"
            }
        ],
        "message": "Fix NPE and TCK failures caused by previous fix for bug 49799.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1003891 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f6e4352c347b3e0f11d5cf75c47922c0a2987c47",
        "repo": "tomcat80",
        "unit_tests": [
            "TestGenerator.java"
        ]
    },
    "tomcat80_bbd6772": {
        "bug_id": "tomcat80_bbd6772",
        "commit": "https://github.com/apache/tomcat80/commit/bbd6772c723490d09dbc60a8cfd567eecee23441",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/tomcat80/blob/bbd6772c723490d09dbc60a8cfd567eecee23441/java/org/apache/catalina/core/StandardContextValve.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/StandardContextValve.java?ref=bbd6772c723490d09dbc60a8cfd567eecee23441",
                "deletions": 7,
                "filename": "java/org/apache/catalina/core/StandardContextValve.java",
                "patch": "@@ -136,13 +136,6 @@ public final void invoke(Request request, Response response)\n \n         // Select the Wrapper to be used for this Request\n         Wrapper wrapper = request.getWrapper();\n-\n-        if (wrapper.isUnavailable()) {\n-            // May be as a result of a reload\n-            // Try and find the new wrapper\n-            wrapper = (Wrapper) container.findChild(wrapper.getName());\n-        }\n-\n         if (wrapper == null) {\n             String requestURI = request.getDecodedRequestURI();\n             notFound(requestURI, response);",
                "raw_url": "https://github.com/apache/tomcat80/raw/bbd6772c723490d09dbc60a8cfd567eecee23441/java/org/apache/catalina/core/StandardContextValve.java",
                "sha": "c473590a0abcdc0bd4171fe0ce76f6ffcb032273",
                "status": "modified"
            }
        ],
        "message": "Revert previous patch to fix obvious potential NPE as pointed out by Remy.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@650645 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f815348a0eaed7152a71906859416b3af813fac8",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardContextValve.java"
        ]
    },
    "tomcat80_bc74aea": {
        "bug_id": "tomcat80_bc74aea",
        "commit": "https://github.com/apache/tomcat80/commit/bc74aeacaa80733ddaca728fdda44e1a92c94711",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/bc74aeacaa80733ddaca728fdda44e1a92c94711/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=bc74aeacaa80733ddaca728fdda44e1a92c94711",
                "deletions": 6,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -367,12 +367,14 @@ private void unregisterAuthenticatedSession(WsSession wsSession,\n     public void closeAuthenticatedSession(String httpSessionId) {\n         Set<WsSession> wsSessions = authenticatedSessions.remove(httpSessionId);\n \n-        for (WsSession wsSession : wsSessions) {\n-            try {\n-                wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n-            } catch (IOException e) {\n-                // Any IOExceptions during close will have been caught and the\n-                // onError method called.\n+        if (wsSessions != null && !wsSessions.isEmpty()) {\n+            for (WsSession wsSession : wsSessions) {\n+                try {\n+                    wsSession.close(AUTHENTICATED_HTTP_SESSION_CLOSED);\n+                } catch (IOException e) {\n+                    // Any IOExceptions during close will have been caught and the\n+                    // onError method called.\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/bc74aeacaa80733ddaca728fdda44e1a92c94711/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "c704d9fd21cc8b1e28272c9700230f6c0fd681ad",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when a background thread tries to expire the HTTP sessions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1499534 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/df74e687dea4ddc8afd05222487702ece4572627",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat80_bea00bb": {
        "bug_id": "tomcat80_bea00bb",
        "commit": "https://github.com/apache/tomcat80/commit/bea00bb9065b096e2b26e2e1603fd2e6ebb50200",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/bea00bb9065b096e2b26e2e1603fd2e6ebb50200/java/org/apache/tomcat/util/res/StringManager.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/util/res/StringManager.java?ref=bea00bb9065b096e2b26e2e1603fd2e6ebb50200",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/util/res/StringManager.java",
                "patch": "@@ -109,7 +109,10 @@ public String getString(String key) {\n         String str = null;\n \n         try {\n-            str = bundle.getString(key);\n+            // Avoid NPE if bundle is null and treat it like an MRE\n+            if (bundle != null) {\n+                str = bundle.getString(key);\n+            }\n         } catch(MissingResourceException mre) {\n             //bad: shouldn't mask an exception the following way:\n             //   str = \"[cannot find message associated with key '\" + key + \"' due to \" + mre + \"]\";",
                "raw_url": "https://github.com/apache/tomcat80/raw/bea00bb9065b096e2b26e2e1603fd2e6ebb50200/java/org/apache/tomcat/util/res/StringManager.java",
                "sha": "4f3eb189e803b275d44db891ed3ede214229e8de",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if bundle is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@898297 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/1d2db306032e5e3ef0d69ed1ee1d3c3dd0e71545",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStringManager.java"
        ]
    },
    "tomcat80_bfda055": {
        "bug_id": "tomcat80_bfda055",
        "commit": "https://github.com/apache/tomcat80/commit/bfda05544d3fe91a5fa06ffd99f48b27ba5fcb8c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/bfda05544d3fe91a5fa06ffd99f48b27ba5fcb8c/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/loader/VirtualWebappLoader.java?ref=bfda05544d3fe91a5fa06ffd99f48b27ba5fcb8c",
                "deletions": 1,
                "filename": "java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "patch": "@@ -57,7 +57,7 @@\n     /**\n      * <code>;</code> separated list of additional path elements.\n      */\n-    private String virtualClasspath;\n+    private String virtualClasspath = \"\";\n \n     /**\n      * Construct a new WebappLoader with no defined parent class loader (so that",
                "raw_url": "https://github.com/apache/tomcat80/raw/bfda05544d3fe91a5fa06ffd99f48b27ba5fcb8c/java/org/apache/catalina/loader/VirtualWebappLoader.java",
                "sha": "2d69c4cee05ad8c69f5e84a525852e0476fba7a5",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in unconfigured VirtualWebappLoader.\nStringTokenizer throws the NPE if the virtualClassPath\nwasn't explicitely configured (null by default).\n\nThis might not be observed in the wild because a\nVirtualWebappLoader without a configured virtualClassPath\nisn't expected. But if you extend the class and add\nfeatures, then this might well happen.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1401472 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/34e0ec91253747c000605210f190b1c96f518df2",
        "repo": "tomcat80",
        "unit_tests": [
            "TestVirtualWebappLoader.java"
        ]
    },
    "tomcat80_c267e9b": {
        "bug_id": "tomcat80_c267e9b",
        "commit": "https://github.com/apache/tomcat80/commit/c267e9bcf0c14e4fa95d2c3aac793a3db5090e55",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/c267e9bcf0c14e4fa95d2c3aac793a3db5090e55/java/org/apache/catalina/core/StandardContext.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/core/StandardContext.java?ref=c267e9bcf0c14e4fa95d2c3aac793a3db5090e55",
                "deletions": 1,
                "filename": "java/org/apache/catalina/core/StandardContext.java",
                "patch": "@@ -5755,7 +5755,7 @@ protected ClassLoader bindThread() {\n         ClassLoader oldContextClassLoader =\n             Thread.currentThread().getContextClassLoader();\n \n-        if (getLoader().getClassLoader() != null) {\n+        if (getLoader() != null && getLoader().getClassLoader() != null) {\n             Thread.currentThread().setContextClassLoader\n                 (getLoader().getClassLoader());\n         }",
                "raw_url": "https://github.com/apache/tomcat80/raw/c267e9bcf0c14e4fa95d2c3aac793a3db5090e55/java/org/apache/catalina/core/StandardContext.java",
                "sha": "ceee4af447aa6a75bcc2e909e76eeb75f3a3ee05",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/c267e9bcf0c14e4fa95d2c3aac793a3db5090e55/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=c267e9bcf0c14e4fa95d2c3aac793a3db5090e55",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -486,7 +486,9 @@ protected void stopInternal() throws LifecycleException {\n             }\n         }\n \n-        main.destroy();\n+        if (main != null) {\n+            main.destroy();\n+        }\n         mainResources.clear();\n \n         for (WebResourceSet webResourceSet : jarResources) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/c267e9bcf0c14e4fa95d2c3aac793a3db5090e55/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "047783c0be32542cb60f028a39d3fa5deec040b4",
                "status": "modified"
            }
        ],
        "message": "Avoid NPEs when attempting to destroy contexts that failed to start.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1482602 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/d6c14fd6bad608a68bc9cff712ee17a5359d86c1",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat80_c2bd6e1": {
        "bug_id": "tomcat80_c2bd6e1",
        "commit": "https://github.com/apache/tomcat80/commit/c2bd6e13f776c37680851bc9863e9ee291e79910",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/c2bd6e13f776c37680851bc9863e9ee291e79910/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java?ref=c2bd6e13f776c37680851bc9863e9ee291e79910",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "patch": "@@ -82,6 +82,7 @@ protected void doWrite(SendHandler handler, ByteBuffer... buffers) {\n \n \n     public void onWritePossible(boolean useDispatch) {\n+        ByteBuffer[] buffers = this.buffers;\n         if (buffers == null) {\n             // Servlet 3.1 will call the write listener once even if nothing\n             // was written",
                "raw_url": "https://github.com/apache/tomcat80/raw/c2bd6e13f776c37680851bc9863e9ee291e79910/java/org/apache/tomcat/websocket/server/WsRemoteEndpointImplServer.java",
                "sha": "fc1fb7ffb98411f695c17cb728ad2631e22d8f53",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE causing failure in TestClose\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1719745 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/fd7e6ee3167b4fb43f2ef81edbb9af3841a00425",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsRemoteEndpointImplServer.java"
        ]
    },
    "tomcat80_c3033ab": {
        "bug_id": "tomcat80_c3033ab",
        "commit": "https://github.com/apache/tomcat80/commit/c3033ab0b34916b3751fb5fb781bbd5764a5cded",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/c3033ab0b34916b3751fb5fb781bbd5764a5cded/java/org/apache/jasper/compiler/Generator.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Generator.java?ref=c3033ab0b34916b3751fb5fb781bbd5764a5cded",
                "deletions": 5,
                "filename": "java/org/apache/jasper/compiler/Generator.java",
                "patch": "@@ -2774,9 +2774,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n                 StringBuffer sb = new StringBuffer(64);\n \n                 TagAttributeInfo tai = attr.getTagAttributeInfo();\n-                String type = tai.getTypeName();\n-                String returnType = JspUtil.toJavaSourceTypeFromTld(attr\n-                        .getExpectedTypeName());\n+                String returnType = JspUtil.toJavaSourceTypeFromTld(attr.getExpectedTypeName());\n \n                 // generate elContext reference\n                 sb.append(getJspContextVar());\n@@ -2807,7 +2805,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n \n                 // depending on type\n                 if (attr.isDeferredInput()\n-                        || ValueExpression.class.getName().equals(type)) {\n+                        || ((tai != null) && ValueExpression.class.getName().equals(tai.getTypeName()))) {\n                     sb.append(\"new org.apache.jasper.el.JspValueExpression(\");\n                     sb.append(quote(mark));\n                     sb.append(',');\n@@ -2841,7 +2839,7 @@ private String evaluateAttribute(TagHandlerInfo handlerInfo,\n                     }\n                     attrValue = sb.toString();\n                 } else if (attr.isDeferredMethodInput()\n-                        || MethodExpression.class.getName().equals(type)) {\n+                        || ((tai != null) && MethodExpression.class.getName().equals(tai.getTypeName()))) {\n                     sb.append(\"new org.apache.jasper.el.JspMethodExpression(\");\n                     sb.append(quote(mark));\n                     sb.append(',');",
                "raw_url": "https://github.com/apache/tomcat80/raw/c3033ab0b34916b3751fb5fb781bbd5764a5cded/java/org/apache/jasper/compiler/Generator.java",
                "sha": "6532f27104d5ffd20bacfe2f3fddffdda9d58610",
                "status": "modified"
            }
        ],
        "message": "- Avoid NPE (quick fix).\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@492182 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/34edfb336d6def59faf4f69ed86fc8d4f1bb23c1",
        "repo": "tomcat80",
        "unit_tests": [
            "TestGenerator.java"
        ]
    },
    "tomcat80_cb6acc8": {
        "bug_id": "tomcat80_cb6acc8",
        "commit": "https://github.com/apache/tomcat80/commit/cb6acc81cfc75ce60698ccc710fe78f909d8c8ed",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/cb6acc81cfc75ce60698ccc710fe78f909d8c8ed/java/org/apache/catalina/realm/RealmBase.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/RealmBase.java?ref=cb6acc81cfc75ce60698ccc710fe78f909d8c8ed",
                "deletions": 0,
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "patch": "@@ -471,6 +471,11 @@ public void backgroundProcess() {\n \n         // Check each defined security constraint\n         String uri = request.getRequestPathMB().toString();\n+        // Bug47080 - in rare cases this may be null\n+        // Mapper treats as '/' do the same to prevent NPE\n+        if (uri == null) {\n+            uri = \"/\";\n+        }\n         \n         String method = request.getMethod();\n         int i;",
                "raw_url": "https://github.com/apache/tomcat80/raw/cb6acc81cfc75ce60698ccc710fe78f909d8c8ed/java/org/apache/catalina/realm/RealmBase.java",
                "sha": "c5de0b11b7c9f229c71023b64cb8b31796c382fe",
                "status": "modified"
            }
        ],
        "message": "Fix 47080: NPE in RealmBase.findSecurityConstraints when uri is null \nhttps://issues.apache.org/bugzilla/show_bug.cgi?id=47080\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@770809 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/6f2a0621257bbc2cc1d5773a3f4e22e2b1385409",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRealmBase.java"
        ]
    },
    "tomcat80_cfca14d": {
        "bug_id": "tomcat80_cfca14d",
        "commit": "https://github.com/apache/tomcat80/commit/cfca14d137fb5ba64720b318cd54dba28e0d43c5",
        "file": [
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/tomcat80/blob/cfca14d137fb5ba64720b318cd54dba28e0d43c5/java/org/apache/tomcat/websocket/Util.java",
                "changes": 30,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/Util.java?ref=cfca14d137fb5ba64720b318cd54dba28e0d43c5",
                "deletions": 14,
                "filename": "java/org/apache/tomcat/websocket/Util.java",
                "patch": "@@ -332,21 +332,23 @@ public static Object coerceToType(Class<?> type, String value) {\n                     throws DeploymentException{\n \n         List<DecoderEntry> result = new ArrayList<>();\n-        for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n-            // Need to instantiate decoder to ensure it is valid and that\n-            // deployment can be failed if it is not\n-            @SuppressWarnings(\"unused\")\n-            Decoder instance;\n-            try {\n-                instance = decoderClazz.newInstance();\n-            } catch (InstantiationException | IllegalAccessException e) {\n-                throw new DeploymentException(\n-                        sm.getString(\"pojoMethodMapping.invalidDecoder\",\n-                                decoderClazz.getName()), e);\n+        if (decoderClazzes != null) {\n+            for (Class<? extends Decoder> decoderClazz : decoderClazzes) {\n+                // Need to instantiate decoder to ensure it is valid and that\n+                // deployment can be failed if it is not\n+                @SuppressWarnings(\"unused\")\n+                Decoder instance;\n+                try {\n+                    instance = decoderClazz.newInstance();\n+                } catch (InstantiationException | IllegalAccessException e) {\n+                    throw new DeploymentException(\n+                            sm.getString(\"pojoMethodMapping.invalidDecoder\",\n+                                    decoderClazz.getName()), e);\n+                }\n+                DecoderEntry entry = new DecoderEntry(\n+                        Util.getDecoderType(decoderClazz), decoderClazz);\n+                result.add(entry);\n             }\n-            DecoderEntry entry = new DecoderEntry(\n-                    Util.getDecoderType(decoderClazz), decoderClazz);\n-            result.add(entry);\n         }\n \n         return result;",
                "raw_url": "https://github.com/apache/tomcat80/raw/cfca14d137fb5ba64720b318cd54dba28e0d43c5/java/org/apache/tomcat/websocket/Util.java",
                "sha": "22d3b4514d1a79e8f2407efd3b3235646a1107a0",
                "status": "modified"
            }
        ],
        "message": "NPE protection. Note NPE only possible with test code.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1630199 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/c9d804dd1c75eb63cb0c7a6e59d85d0c77d67bb1",
        "repo": "tomcat80",
        "unit_tests": [
            "TestUtil.java"
        ]
    },
    "tomcat80_d6e8a14": {
        "bug_id": "tomcat80_d6e8a14",
        "commit": "https://github.com/apache/tomcat80/commit/d6e8a14bce4b95c55007c3b97ee4a707e1e32a1b",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/tomcat80/blob/d6e8a14bce4b95c55007c3b97ee4a707e1e32a1b/java/org/apache/catalina/loader/WebappClassLoader.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=d6e8a14bce4b95c55007c3b97ee4a707e1e32a1b",
                "deletions": 20,
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "patch": "@@ -1794,7 +1794,11 @@ protected boolean openJARs() {\n             return clazz;\n \n         synchronized (this) {\n-            if (entry.binaryContent == null && entry.loadedClass == null)\n+            clazz = entry.loadedClass;\n+            if (clazz != null)\n+                return clazz;\n+\n+            if (entry.binaryContent == null)\n                 throw new ClassNotFoundException(name);\n \n             // Looking up the package\n@@ -1843,26 +1847,22 @@ protected boolean openJARs() {\n     \n             }\n \n-            if (entry.loadedClass == null) {\n-                try {\n-                    clazz = defineClass(name, entry.binaryContent, 0,\n-                            entry.binaryContent.length, \n-                            new CodeSource(entry.codeBase, entry.certificates));\n-                } catch (UnsupportedClassVersionError ucve) {\n-                    throw new UnsupportedClassVersionError(\n-                            ucve.getLocalizedMessage() + \" \" +\n-                            sm.getString(\"webappClassLoader.wrongVersion\",\n-                                    name));\n-                }\n-                entry.loadedClass = clazz;\n-                entry.binaryContent = null;\n-                entry.source = null;\n-                entry.codeBase = null;\n-                entry.manifest = null;\n-                entry.certificates = null;\n-            } else {\n-                clazz = entry.loadedClass;\n+            try {\n+                clazz = defineClass(name, entry.binaryContent, 0,\n+                        entry.binaryContent.length, \n+                        new CodeSource(entry.codeBase, entry.certificates));\n+            } catch (UnsupportedClassVersionError ucve) {\n+                throw new UnsupportedClassVersionError(\n+                        ucve.getLocalizedMessage() + \" \" +\n+                        sm.getString(\"webappClassLoader.wrongVersion\",\n+                                name));\n             }\n+            entry.loadedClass = clazz;\n+            entry.binaryContent = null;\n+            entry.source = null;\n+            entry.codeBase = null;\n+            entry.manifest = null;\n+            entry.certificates = null;\n         }\n         \n         return clazz;",
                "raw_url": "https://github.com/apache/tomcat80/raw/d6e8a14bce4b95c55007c3b97ee4a707e1e32a1b/java/org/apache/catalina/loader/WebappClassLoader.java",
                "sha": "6988bc105ced75b454516bbd3d2d184e2c5f990b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/attachment.cgi?id=23066\nSync issue leads to NPE in rare circumstances\nPatch provided by Konstantin Kolinko\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@730735 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/812c11719f5a0543171a5ff418a87c80371b6b4d",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebappClassLoader.java"
        ]
    },
    "tomcat80_e09418a": {
        "bug_id": "tomcat80_e09418a",
        "commit": "https://github.com/apache/tomcat80/commit/e09418a43bac392d849472164449072dda0b1bcc",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/e09418a43bac392d849472164449072dda0b1bcc/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/PojoMethodMapping.java?ref=e09418a43bac392d849472164449072dda0b1bcc",
                "deletions": 1,
                "filename": "java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "patch": "@@ -19,6 +19,7 @@\n import java.lang.annotation.Annotation;\n import java.lang.reflect.Method;\n import java.nio.ByteBuffer;\n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.HashSet;\n import java.util.Map;\n@@ -155,6 +156,7 @@ public Method getOnError() {\n             }\n         }\n         if (!foundError) {\n+            // TODO i18n\n             throw new IllegalArgumentException();\n         }\n         return result;\n@@ -165,7 +167,12 @@ public Method getOnError() {\n             UriTemplate template, String pathInfo, Session session,\n             Throwable throwable) {\n         Object[] result = new Object[pathParams.length];\n-        Map<String,String> pathValues = template.match(pathInfo);\n+        Map<String,String> pathValues;\n+        if (template != null && pathInfo != null) {\n+            pathValues = template.match(pathInfo);\n+        } else {\n+            pathValues = Collections.EMPTY_MAP;\n+        }\n         for (int i = 0; i < pathParams.length; i++) {\n             Class<?> type = pathParams[i].getType();\n             if (type.equals(Session.class)) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/e09418a43bac392d849472164449072dda0b1bcc/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "sha": "f9abbdf6b8ef9369d575d3cdc40a752e46b3a296",
                "status": "modified"
            }
        ],
        "message": "More NPE avoidance\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1424173 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/5852aebe8c7a1584ba3e0c673736e8abb300842e",
        "repo": "tomcat80",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    },
    "tomcat80_e775419": {
        "bug_id": "tomcat80_e775419",
        "commit": "https://github.com/apache/tomcat80/commit/e775419f0bdf7b226d2af1f3b5d3622d9ec619d4",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/tomcat80/blob/e775419f0bdf7b226d2af1f3b5d3622d9ec619d4/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/server/WsServerContainer.java?ref=e775419f0bdf7b226d2af1f3b5d3622d9ec619d4",
                "deletions": 0,
                "filename": "java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "patch": "@@ -451,6 +451,9 @@ ExecutorService getExecutorService() {\n \n \n     void shutdownExecutor() {\n+        if (executorService == null) {\n+            return;\n+        }\n         executorService.shutdown();\n         try {\n             executorService.awaitTermination(10, TimeUnit.SECONDS);",
                "raw_url": "https://github.com/apache/tomcat80/raw/e775419f0bdf7b226d2af1f3b5d3622d9ec619d4/java/org/apache/tomcat/websocket/server/WsServerContainer.java",
                "sha": "ff3f636e01b3284957340c2bf860662b9b218f11",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE on shutdown if application doesn't use WebSocket\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1551481 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/779c15f2cd38624b1086e1a562d0f9a0e51059c5",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWsServerContainer.java"
        ]
    },
    "tomcat80_e7fa400": {
        "bug_id": "tomcat80_e7fa400",
        "commit": "https://github.com/apache/tomcat80/commit/e7fa400322af857dda52466e3c80fcc2a40a297d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/e7fa400322af857dda52466e3c80fcc2a40a297d/java/org/apache/catalina/mapper/Mapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/mapper/Mapper.java?ref=e7fa400322af857dda52466e3c80fcc2a40a297d",
                "deletions": 1,
                "filename": "java/org/apache/catalina/mapper/Mapper.java",
                "patch": "@@ -740,7 +740,7 @@ private final void internalMap(CharChunk host, CharChunk uri,\n         }\n \n         // Context mapping\n-        if (mappingData.context == null) {\n+        if (mappingData.context == null && contexts != null) {\n             int pos = find(contexts, uri);\n             if (pos == -1) {\n                 return;",
                "raw_url": "https://github.com/apache/tomcat80/raw/e7fa400322af857dda52466e3c80fcc2a40a297d/java/org/apache/catalina/mapper/Mapper.java",
                "sha": "3dd168d5229dacaf2543a01c30cd8374c7ca56de",
                "status": "modified"
            }
        ],
        "message": "Avoid unlikely NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1367330 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/4879b6cdb9b8eeacf757c48a885fe05703b28841",
        "repo": "tomcat80",
        "unit_tests": [
            "TestMapper.java"
        ]
    },
    "tomcat80_e864641": {
        "bug_id": "tomcat80_e864641",
        "commit": "https://github.com/apache/tomcat80/commit/e864641a42063e10cc14cc71682b722743c529c2",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat80/blob/e864641a42063e10cc14cc71682b722743c529c2/java/org/apache/juli/FileHandler.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/juli/FileHandler.java?ref=e864641a42063e10cc14cc71682b722743c529c2",
                "deletions": 3,
                "filename": "java/org/apache/juli/FileHandler.java",
                "patch": "@@ -106,9 +106,13 @@\n \n                 {\n                     SecurityManager s = System.getSecurityManager();\n-                    this.isSecurityEnabled = s != null;\n-                    this.group = isSecurityEnabled ? s.getThreadGroup()\n-                            : Thread.currentThread().getThreadGroup();\n+                    if (s == null) {\n+                        this.isSecurityEnabled = false;\n+                        this.group = Thread.currentThread().getThreadGroup();\n+                    } else {\n+                        this.isSecurityEnabled = true;\n+                        this.group = s.getThreadGroup();\n+                    }\n                 }\n \n                 @Override",
                "raw_url": "https://github.com/apache/tomcat80/raw/e864641a42063e10cc14cc71682b722743c529c2/java/org/apache/juli/FileHandler.java",
                "sha": "8a1233329e2772b97532ea04d31817bc8f0abcfc",
                "status": "modified"
            }
        ],
        "message": "Refactor.\nIt is more verbose but it stops Eclipse complaining about a possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1800314 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/f9127cd06f94a2be4b8857d557801bb6979ec615",
        "repo": "tomcat80",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat80_e87faf4": {
        "bug_id": "tomcat80_e87faf4",
        "commit": "https://github.com/apache/tomcat80/commit/e87faf42a998e7bb59d43ceb3daa7deb15b40b93",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/e87faf42a998e7bb59d43ceb3daa7deb15b40b93/java/org/apache/catalina/realm/RealmBase.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/realm/RealmBase.java?ref=e87faf42a998e7bb59d43ceb3daa7deb15b40b93",
                "deletions": 1,
                "filename": "java/org/apache/catalina/realm/RealmBase.java",
                "patch": "@@ -1200,7 +1200,7 @@ protected String digest(String credentials)  {\n     }\n \n     protected boolean hasMessageDigest() {\n-        return !(getDigest() == null && getDigest().length() > 0);\n+        return getDigest() != null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomcat80/raw/e87faf42a998e7bb59d43ceb3daa7deb15b40b93/java/org/apache/catalina/realm/RealmBase.java",
                "sha": "cedb63a5457f817521ea549e6d31c6fc1f0887af",
                "status": "modified"
            }
        ],
        "message": "Doh! Fix NPE.\nNote digest isn't tested for zero length anywhere else so don't introduce a test here.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1623851 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/ea9f7f787a1ff7aa6b31c25c9441fa337af957a0",
        "repo": "tomcat80",
        "unit_tests": [
            "TestRealmBase.java"
        ]
    },
    "tomcat80_eceef19": {
        "bug_id": "tomcat80_eceef19",
        "commit": "https://github.com/apache/tomcat80/commit/eceef193c57cf3864d943771a32b31097bf8ae43",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/eceef193c57cf3864d943771a32b31097bf8ae43/java/org/apache/juli/FileHandler.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/juli/FileHandler.java?ref=eceef193c57cf3864d943771a32b31097bf8ae43",
                "deletions": 1,
                "filename": "java/org/apache/juli/FileHandler.java",
                "patch": "@@ -562,7 +562,11 @@ public boolean accept(Path path) throws IOException {\n     }\n \n     private String obtainDateFromPath(Path path) {\n-        String date = path.getFileName().toString();\n+        Path fileName = path.getFileName();\n+        if (fileName == null) {\n+            return null;\n+        }\n+        String date = fileName.toString();\n         if (pattern.matcher(date).matches()) {\n             date = date.substring(prefix.length());\n             return date.substring(0, date.length() - suffix.length());",
                "raw_url": "https://github.com/apache/tomcat80/raw/eceef193c57cf3864d943771a32b31097bf8ae43/java/org/apache/juli/FileHandler.java",
                "sha": "5467a32728814c968030a14bede323d70cdf321c",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE.\nReported by FindBugs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1800983 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/edc67a8bfdb0751a61ff75fb8fc55d170bac2108",
        "repo": "tomcat80",
        "unit_tests": [
            "TestFileHandler.java"
        ]
    },
    "tomcat80_edf5091": {
        "bug_id": "tomcat80_edf5091",
        "commit": "https://github.com/apache/tomcat80/commit/edf5091642d2c0d32b49ec5f9dd718d241529f3f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/tomcat80/blob/edf5091642d2c0d32b49ec5f9dd718d241529f3f/java/org/apache/catalina/webresources/StandardRoot.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/webresources/StandardRoot.java?ref=edf5091642d2c0d32b49ec5f9dd718d241529f3f",
                "deletions": 1,
                "filename": "java/org/apache/catalina/webresources/StandardRoot.java",
                "patch": "@@ -592,7 +592,7 @@ public void deregisterTrackedResource(TrackedWebResource trackedResource) {\n     // ----------------------------------------------------------- JMX Lifecycle\n     @Override\n     protected String getDomainInternal() {\n-        return context.getDomain();\n+        return (context != null) ? context.getDomain() : null;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/tomcat80/raw/edf5091642d2c0d32b49ec5f9dd718d241529f3f/java/org/apache/catalina/webresources/StandardRoot.java",
                "sha": "07f90d40f3234bc389ba42f3360a9e496129018b",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE with storeconfig.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1605723 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/d6bea5551b41bc44ddaaa9eb9d294982fba3bf8d",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardRoot.java"
        ]
    },
    "tomcat80_f00eff1": {
        "bug_id": "tomcat80_f00eff1",
        "commit": "https://github.com/apache/tomcat80/commit/f00eff1b9891ca0ca872bb68c826e101502bbfaa",
        "file": [
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/tomcat80/blob/f00eff1b9891ca0ca872bb68c826e101502bbfaa/java/org/apache/catalina/loader/WebappClassLoader.java",
                "changes": 87,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/loader/WebappClassLoader.java?ref=f00eff1b9891ca0ca872bb68c826e101502bbfaa",
                "deletions": 46,
                "filename": "java/org/apache/catalina/loader/WebappClassLoader.java",
                "patch": "@@ -1758,63 +1758,58 @@ protected Class findClassInternal(String name)\n         if (clazz != null)\n             return clazz;\n \n-        synchronized (this) {\n+        synchronized (entry) {\n             if (entry.binaryContent == null && entry.loadedClass == null)\n                 throw new ClassNotFoundException(name);\n-        }\n-\n-        // Looking up the package\n-        String packageName = null;\n-        int pos = name.lastIndexOf('.');\n-        if (pos != -1)\n-            packageName = name.substring(0, pos);\n \n-        Package pkg = null;\n-\n-        if (packageName != null) {\n-\n-            pkg = getPackage(packageName);\n-\n-            // Define the package (if null)\n-            if (pkg == null) {\n-                if (entry.manifest == null) {\n-                    definePackage(packageName, null, null, null, null, null,\n-                                  null, null);\n-                } else {\n-                    definePackage(packageName, entry.manifest, entry.codeBase);\n+            // Looking up the package\n+            String packageName = null;\n+            int pos = name.lastIndexOf('.');\n+            if (pos != -1)\n+                packageName = name.substring(0, pos);\n+        \n+            Package pkg = null;\n+        \n+            if (packageName != null) {\n+                synchronized (this) {\n+                    pkg = getPackage(packageName);\n+            \n+                    // Define the package (if null)\n+                    if (pkg == null) {\n+                        if (entry.manifest == null) {\n+                            definePackage(packageName, null, null, null, null,\n+                                    null, null, null);\n+                        } else {\n+                            definePackage(packageName, entry.manifest,\n+                                    entry.codeBase);\n+                        }\n+                    }\n                 }\n             }\n-\n-        }\n-\n-        // Create the code source object\n-        CodeSource codeSource =\n-            new CodeSource(entry.codeBase, entry.certificates);\n-\n-        if (securityManager != null) {\n-\n-            // Checking sealing\n-            if (pkg != null) {\n-                boolean sealCheck = true;\n-                if (pkg.isSealed()) {\n-                    sealCheck = pkg.isSealed(entry.codeBase);\n-                } else {\n-                    sealCheck = (entry.manifest == null)\n-                        || !isPackageSealed(packageName, entry.manifest);\n+    \n+            if (securityManager != null) {\n+\n+                // Checking sealing\n+                if (pkg != null) {\n+                    boolean sealCheck = true;\n+                    if (pkg.isSealed()) {\n+                        sealCheck = pkg.isSealed(entry.codeBase);\n+                    } else {\n+                        sealCheck = (entry.manifest == null)\n+                            || !isPackageSealed(packageName, entry.manifest);\n+                    }\n+                    if (!sealCheck)\n+                        throw new SecurityException\n+                            (\"Sealing violation loading \" + name + \" : Package \"\n+                             + packageName + \" is sealed.\");\n                 }\n-                if (!sealCheck)\n-                    throw new SecurityException\n-                        (\"Sealing violation loading \" + name + \" : Package \"\n-                         + packageName + \" is sealed.\");\n+    \n             }\n \n-        }\n-\n-        synchronized (this) {\n             if (entry.loadedClass == null) {\n                 clazz = defineClass(name, entry.binaryContent, 0,\n                         entry.binaryContent.length, \n-                        codeSource);\n+                        new CodeSource(entry.codeBase, entry.certificates));\n                 entry.loadedClass = clazz;\n                 entry.binaryContent = null;\n                 entry.source = null;",
                "raw_url": "https://github.com/apache/tomcat80/raw/f00eff1b9891ca0ca872bb68c826e101502bbfaa/java/org/apache/catalina/loader/WebappClassLoader.java",
                "sha": "8b29ffe3343c1b4f93a42de5bb0a5559390308ee",
                "status": "modified"
            }
        ],
        "message": "Port fix bug 37458. Remove the possibility of some NPE and IAE issues.\nNote for Remy - you had some ideas to improve this patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc6.0.x/trunk@471263 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/4a3947eca9504887024b39497a494ede89f00b08",
        "repo": "tomcat80",
        "unit_tests": [
            "TestWebappClassLoader.java"
        ]
    },
    "tomcat80_f03fb0a": {
        "bug_id": "tomcat80_f03fb0a",
        "commit": "https://github.com/apache/tomcat80/commit/f03fb0a95d4097f2252df44c4ac97f7eee892f27",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/tomcat80/blob/f03fb0a95d4097f2252df44c4ac97f7eee892f27/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/connector/CoyoteAdapter.java?ref=f03fb0a95d4097f2252df44c4ac97f7eee892f27",
                "deletions": 4,
                "filename": "java/org/apache/catalina/connector/CoyoteAdapter.java",
                "patch": "@@ -426,10 +426,12 @@ public boolean asyncDispatch(org.apache.coyote.Request req,\n             if (!request.isAsync() && !comet) {\n                 request.finishRequest();\n                 response.finishResponse();\n-                request.getMappingData().context.logAccess(\n-                        request, response,\n-                        System.currentTimeMillis() - req.getStartTime(),\n-                        false);\n+                if (request.getMappingData().context != null) {\n+                    request.getMappingData().context.logAccess(\n+                            request, response,\n+                            System.currentTimeMillis() - req.getStartTime(),\n+                            false);\n+                }\n             }\n \n         } catch (IOException e) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/f03fb0a95d4097f2252df44c4ac97f7eee892f27/java/org/apache/catalina/connector/CoyoteAdapter.java",
                "sha": "296a7cb3b664bf8dba6b9d6725526462da6c0e48",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1574167 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/7ece13100bbdf1bacb564b0c790d9f1f63a8ffea",
        "repo": "tomcat80",
        "unit_tests": [
            "TestCoyoteAdapter.java"
        ]
    },
    "tomcat80_f29d3b3": {
        "bug_id": "tomcat80_f29d3b3",
        "commit": "https://github.com/apache/tomcat80/commit/f29d3b392560f59c1f9a3a0a8d82b6dcee3a8219",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/tomcat80/blob/f29d3b392560f59c1f9a3a0a8d82b6dcee3a8219/java/org/apache/catalina/valves/AccessLogValve.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/valves/AccessLogValve.java?ref=f29d3b392560f59c1f9a3a0a8d82b6dcee3a8219",
                "deletions": 7,
                "filename": "java/org/apache/catalina/valves/AccessLogValve.java",
                "patch": "@@ -46,6 +46,7 @@\n import org.apache.catalina.Globals;\n import org.apache.catalina.LifecycleException;\n import org.apache.catalina.LifecycleState;\n+import org.apache.catalina.Session;\n import org.apache.catalina.connector.Request;\n import org.apache.catalina.connector.Response;\n import org.apache.coyote.RequestInfo;\n@@ -1860,15 +1861,15 @@ public void addElement(CharArrayWriter buf, Date date, Request request,\n         @Override\n         public void addElement(CharArrayWriter buf, Date date, Request request,\n                 Response response, long time) {\n-            if (request != null) {\n-                if (request.getSession(false) != null) {\n-                    buf.append(request.getSessionInternal(false)\n-                            .getIdInternal());\n-                } else {\n+            if (request == null) {\n+                buf.append('-');\n+            } else {\n+                Session session = request.getSessionInternal(false);\n+                if (session == null) {\n                     buf.append('-');\n+                } else {\n+                    buf.append(session.getIdInternal());\n                 }\n-            } else {\n-                buf.append('-');\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/tomcat80/raw/f29d3b392560f59c1f9a3a0a8d82b6dcee3a8219/java/org/apache/catalina/valves/AccessLogValve.java",
                "sha": "b795ddd6117fb4b010957ce99774a307ec878769",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=53993\nAvoid NPE when the session is invalidated\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1397868 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/b4d2185670014983da86d90384ed319d2a491644",
        "repo": "tomcat80",
        "unit_tests": [
            "TestAccessLogValve.java"
        ]
    },
    "tomcat80_f36d5db": {
        "bug_id": "tomcat80_f36d5db",
        "commit": "https://github.com/apache/tomcat80/commit/f36d5db13341a37c86aabb356716b2503230cb63",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/f36d5db13341a37c86aabb356716b2503230cb63/java/org/apache/jasper/compiler/Validator.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/Validator.java?ref=f36d5db13341a37c86aabb356716b2503230cb63",
                "deletions": 1,
                "filename": "java/org/apache/jasper/compiler/Validator.java",
                "patch": "@@ -326,7 +326,7 @@ private String comparePageEncodings(String thePageDirEnc,\n                 Node.PageDirective pageDir) throws JasperException {\n \n             Node.Root root = pageDir.getRoot();\n-            String configEnc = root.getJspConfigPageEncoding().toUpperCase();\n+            String configEnc = root.getJspConfigPageEncoding();\n             String pageDirEnc = thePageDirEnc.toUpperCase();\n \n             /*\n@@ -336,6 +336,7 @@ private String comparePageEncodings(String thePageDirEnc,\n              * \"UTF-16LE\" as identical.\n              */\n             if (configEnc != null) {\n+                configEnc = configEnc.toUpperCase();\n                 if (!pageDirEnc.equals(configEnc)\n                         && (!pageDirEnc.startsWith(\"UTF-16\") || !configEnc\n                                 .startsWith(\"UTF-16\"))) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/f36d5db13341a37c86aabb356716b2503230cb63/java/org/apache/jasper/compiler/Validator.java",
                "sha": "cbc9fd69bd3829e59d2495b4c8ef0e2e964c6160",
                "status": "modified"
            }
        ],
        "message": "Fix NPE reported on the dev list. The other toUpperCase() calls should be safe since the String will be non-null when the method is called.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@657149 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/de1f214f2cde0a82b90f259af1c10c0b4f9b424b",
        "repo": "tomcat80",
        "unit_tests": [
            "TestValidator.java"
        ]
    },
    "tomcat80_f40e4e2": {
        "bug_id": "tomcat80_f40e4e2",
        "commit": "https://github.com/apache/tomcat80/commit/f40e4e2dc135fdc90d122b8c60cfddce5861048d",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/tomcat80/blob/f40e4e2dc135fdc90d122b8c60cfddce5861048d/java/org/apache/catalina/session/StandardSession.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/session/StandardSession.java?ref=f40e4e2dc135fdc90d122b8c60cfddce5861048d",
                "deletions": 1,
                "filename": "java/org/apache/catalina/session/StandardSession.java",
                "patch": "@@ -1753,8 +1753,17 @@ protected boolean exclude(String name, Object value) {\n         if (Constants.excludedAttributeNames.contains(name)) {\n             return true;\n         }\n+\n+        // Manager is required for remaining check\n+        Manager manager = getManager();\n+        if (manager == null) {\n+            // Manager may be null during replication of new sessions in a\n+            // cluster. Avoid the NPE.\n+            return false;\n+        }\n+\n         // Last check so use a short-cut\n-        return !getManager().willAttributeDistribute(name, value);\n+        return !manager.willAttributeDistribute(name, value);\n     }\n \n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/f40e4e2dc135fdc90d122b8c60cfddce5861048d/java/org/apache/catalina/session/StandardSession.java",
                "sha": "b8ba4ca08408492c013891ad3854c3bcc82d8f3c",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when clustering\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/tc8.0.x/trunk@1727671 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/0c65dfcf206332ea684b4378aac6a81ba2a7e956",
        "repo": "tomcat80",
        "unit_tests": [
            "TestStandardSession.java"
        ]
    },
    "tomcat80_f469d86": {
        "bug_id": "tomcat80_f469d86",
        "commit": "https://github.com/apache/tomcat80/commit/f469d86a6738ead7283c974e1c7ee2a81e82f32b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/tomcat80/blob/f469d86a6738ead7283c974e1c7ee2a81e82f32b/java/org/apache/jasper/compiler/ELParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/compiler/ELParser.java?ref=f469d86a6738ead7283c974e1c7ee2a81e82f32b",
                "deletions": 2,
                "filename": "java/org/apache/jasper/compiler/ELParser.java",
                "patch": "@@ -152,7 +152,7 @@ private boolean parseFunction() {\n                 if (hasNext()) {\n                     Token t2 = nextToken();\n                     if (t2 instanceof Id) {\n-                        s1 = s2;\n+                        s1 = s2.trim();\n                         s2 = t2.toString();\n                         if (hasNext()) {\n                             curToken = nextToken();\n@@ -161,7 +161,7 @@ private boolean parseFunction() {\n                 }\n             }\n             if (curToken.toChar() == '(') {\n-                ELexpr.add(new ELNode.Function(s1.trim(), s2.trim()));\n+                ELexpr.add(new ELNode.Function(s1, s2.trim()));\n                 return true;\n             }\n             curToken = original;",
                "raw_url": "https://github.com/apache/tomcat80/raw/f469d86a6738ead7283c974e1c7ee2a81e82f32b/java/org/apache/jasper/compiler/ELParser.java",
                "sha": "c4e22b3ee3d297135b3c61de2f04212c3498f9e5",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE introduced by r1559707 that caused ELParser test to fail.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1559798 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/56f5dd9c8549b135e77ba5fc60d23c140ac6b2cb",
        "repo": "tomcat80",
        "unit_tests": [
            "TestELParser.java"
        ]
    },
    "tomcat80_f4f7c68": {
        "bug_id": "tomcat80_f4f7c68",
        "commit": "https://github.com/apache/tomcat80/commit/f4f7c689ab35decffdd57f50773651ec547c9e46",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/tomcat80/blob/f4f7c689ab35decffdd57f50773651ec547c9e46/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java?ref=f4f7c689ab35decffdd57f50773651ec547c9e46",
                "deletions": 0,
                "filename": "java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "patch": "@@ -155,6 +155,9 @@ private void doCollection(TagPluginContext ctxt) {\n         ctxt.generateJavaSource(\"else if (\" + itemsV + \" instanceof Map)\");\n         ctxt.generateJavaSource(iterV + \"=((Map)\" + itemsV + \").entrySet().iterator();\");\n \n+        // Not null\n+        ctxt.generateJavaSource(\"if (\" + iterV + \" != null) {\");\n+\n         if (hasBegin) {\n             String tV = ctxt.getTemporaryVariableName();\n             ctxt.generateJavaSource(\"for (int \" + tV + \"=\" + beginV + \";\" +\n@@ -196,6 +199,7 @@ private void doCollection(TagPluginContext ctxt) {\n             ctxt.generateJavaSource(\"break;\");\n         }\n         ctxt.generateJavaSource(\"}\"); // while\n+        ctxt.generateJavaSource(\"}\"); // Not Null\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/tomcat80/raw/f4f7c689ab35decffdd57f50773651ec547c9e46/java/org/apache/jasper/tagplugins/jstl/core/ForEach.java",
                "sha": "6c25497bd39baa25ff49376f056dd0e5aa62111b",
                "status": "modified"
            }
        ],
        "message": "Fix https://issues.apache.org/bugzilla/show_bug.cgi?id=54242\nFix NPE in tagPlugins:ForEach when iteration is null. JSTL spec says it should be treated like an empty iteration.\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1427846 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/59f3a1301959ed795aab20b66afed864ac66892c",
        "repo": "tomcat80",
        "unit_tests": [
            "TestForEach.java"
        ]
    },
    "tomcat80_f732501": {
        "bug_id": "tomcat80_f732501",
        "commit": "https://github.com/apache/tomcat80/commit/f7325015a0805d9e9f370e86502883533d83f5f0",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/tomcat80/blob/f7325015a0805d9e9f370e86502883533d83f5f0/java/org/apache/catalina/startup/ContextConfig.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/catalina/startup/ContextConfig.java?ref=f7325015a0805d9e9f370e86502883533d83f5f0",
                "deletions": 10,
                "filename": "java/org/apache/catalina/startup/ContextConfig.java",
                "patch": "@@ -1472,7 +1472,7 @@ public void scan(JarURLConnection urlConn) throws IOException {\n             \n             JarFile jarFile = null;\n             InputStream stream = null;\n-            WebXml fragment = null;\n+            WebXml fragment = new WebXml();\n \n             try {\n                 urlConn.setUseCaches(false);\n@@ -1485,7 +1485,6 @@ public void scan(JarURLConnection urlConn) throws IOException {\n                             urlConn.getJarFileURL().toString() +\n                             File.separatorChar + FRAGMENT_LOCATION);\n                     source.setByteStream(stream);\n-                    fragment = new WebXml();\n                     parseWebXml(source, fragment, true);\n                 }\n             } finally {\n@@ -1503,15 +1502,11 @@ public void scan(JarURLConnection urlConn) throws IOException {\n                         // ignore\n                     }\n                 }\n-                if (fragment == null) {\n-                    fragments.put(urlConn.getURL().toString(), fragment);\n-                } else {\n-                    fragment.setURL(urlConn.getURL());\n-                    if (fragment.getName() == null) {\n-                        fragment.setName(fragment.getURL().toString());\n-                    }\n-                    fragments.put(fragment.getName(), fragment);\n+                fragment.setURL(urlConn.getURL());\n+                if (fragment.getName() == null) {\n+                    fragment.setName(fragment.getURL().toString());\n                 }\n+                fragments.put(fragment.getName(), fragment);\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/tomcat80/raw/f7325015a0805d9e9f370e86502883533d83f5f0/java/org/apache/catalina/startup/ContextConfig.java",
                "sha": "2a1378c6d9164abbd4323e99415eed3596a893fa",
                "status": "modified"
            }
        ],
        "message": "Fix NPEs on startup with relative ordering and provide somewhere to store results of annotation scanning when that is implemented\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@835567 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/dfdd51ada5ed8367a19feb514a9ab41b2623328f",
        "repo": "tomcat80",
        "unit_tests": [
            "TestContextConfig.java"
        ]
    },
    "tomcat80_fdd76a4": {
        "bug_id": "tomcat80_fdd76a4",
        "commit": "https://github.com/apache/tomcat80/commit/fdd76a4f93511cae356403e8db1ce0930b008a5e",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/tomcat80/blob/fdd76a4f93511cae356403e8db1ce0930b008a5e/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/tomcat80/contents/java/org/apache/tomcat/websocket/PojoMethodMapping.java?ref=fdd76a4f93511cae356403e8db1ce0930b008a5e",
                "deletions": 2,
                "filename": "java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "patch": "@@ -117,7 +117,7 @@ public Method getOnError() {\n             Session session) {\n         Set<MessageHandler> result = new HashSet<>();\n         for (MessageMethod messageMethod : onMessage) {\n-            result.add(messageMethod.getMessageHandler(pojo, pathInfo,session));\n+            result.add(messageMethod.getMessageHandler(pojo, pathInfo, session));\n         }\n         return result;\n     }\n@@ -331,7 +331,12 @@ public MessageHandler getMessageHandler(Object pojo, String pathInfo,\n                 Session session) {\n             Object[] params = new Object[m.getParameterTypes().length];\n \n-            Map<String,String> pathParams = template.match(pathInfo);\n+            Map<String,String> pathParams;\n+            if (template == null) {\n+                pathParams = new HashMap<>();\n+            } else {\n+                pathParams = template.match(pathInfo);\n+            }\n \n             for (Map.Entry<Integer,PathParam> entry :\n                     indexPathParams.entrySet()) {",
                "raw_url": "https://github.com/apache/tomcat80/raw/fdd76a4f93511cae356403e8db1ce0930b008a5e/java/org/apache/tomcat/websocket/PojoMethodMapping.java",
                "sha": "457730034d5f9326344d8de62d8dd7237a758a63",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/tomcat/trunk@1422334 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/tomcat80/commit/8824131f6bb8d15445051ddc592d03699194a7a4",
        "repo": "tomcat80",
        "unit_tests": [
            "TestPojoMethodMapping.java"
        ]
    }
}