[
    {
        "repo": "jackrabbit-ocm",
        "message": "JCR-1143 NullPointerException in ClassDescriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk/contrib/jackrabbit-jcr-mapping/jcr-mapping@579257 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/jackrabbit-ocm/commit/90b0b63e91a83bfb24bb9abe1432acc101be38a5",
        "parent": "https://github.com/apache/jackrabbit-ocm/commit/d070dfb3be1dc8c65acaf3c24f52765f4a7188ac",
        "bug_id": "jackrabbit-ocm_1",
        "file": [
            {
                "sha": "0bc319603dcc0e680086731f22d25c67c48cbb7c",
                "filename": "src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "blob_url": "https://github.com/apache/jackrabbit-ocm/blob/90b0b63e91a83bfb24bb9abe1432acc101be38a5/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "raw_url": "https://github.com/apache/jackrabbit-ocm/raw/90b0b63e91a83bfb24bb9abe1432acc101be38a5/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "status": "modified",
                "changes": 108,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-ocm/contents/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java?ref=90b0b63e91a83bfb24bb9abe1432acc101be38a5",
                "patch": "@@ -37,9 +37,9 @@\n  * @author <a href='mailto:the_mindstorm[at]evolva[dot]ro'>Alexandru Popescu</a>\n  */\n public class ClassDescriptor {\n-\t\n+\n \tprivate static final Log log = LogFactory.getLog(ClassDescriptor.class);\n-\t\n+\n     private static final String NODETYPE_PER_HIERARCHY = \"nodetypeperhierarchy\";\n     private static final String NODETYPE_PER_CONCRETECLASS = \"nodetypeperconcreteclass\";\n \n@@ -55,22 +55,22 @@\n     private FieldDescriptor pathFieldDescriptor;\n     private FieldDescriptor uuidFieldDescriptor;\n \n-    private Map fieldDescriptors = new HashMap();    \n-    private Map beanDescriptors = new HashMap();        \n+    private Map fieldDescriptors = new HashMap();\n+    private Map beanDescriptors = new HashMap();\n     private Map collectionDescriptors = new HashMap();\n-        \n+\n     private Map fieldNames = new HashMap();\n \n     private String superClassName;\n-    private String extendsStrategy;    \n-    private boolean isAbstract = false;    \n+    private String extendsStrategy;\n+    private boolean isAbstract = false;\n     private boolean hasDescendant = false;\n-    private boolean hasDiscriminator = true; \n-   \n-       \n+    private boolean hasDiscriminator = true;\n+\n+\n     private boolean isInterface=false;\n     private List interfaces = new ArrayList();\n-    \n+\n     public void setAbstract(boolean flag) {\n         this.isAbstract = flag;\n     }\n@@ -82,25 +82,25 @@ public boolean isAbstract() {\n     public void setInterface(boolean flag) {\n     \t   this.isInterface = flag;\n     }\n-       \n+\n     public boolean isInterface() {\n     \t    return isInterface;\n     }\n-    \n+\n     public boolean hasInterfaces()\n     {\n     \t   return this.interfaces.size() > 0;\n     }\n \n     public void setDiscriminator(boolean flag)\n     {\n-        this.hasDiscriminator = flag;\t\n+        this.hasDiscriminator = flag;\n     }\n-    \n-    public boolean hasDiscriminator() {        \n+\n+    public boolean hasDiscriminator() {\n  \t   return this.hasDiscriminator;\n- }    \n-    \n+ }\n+\n     public boolean usesNodeTypePerHierarchyStrategy() {\n         return NODETYPE_PER_HIERARCHY.equals(this.extendsStrategy);\n     }\n@@ -118,7 +118,7 @@ public String getClassName() {\n     /**\n      * @param className The className to set.\n      */\n-    public void setClassName(String className) {    \t   \n+    public void setClassName(String className) {\n         this.className = className;\n     }\n \n@@ -161,9 +161,9 @@ public void addFieldDescriptor(FieldDescriptor fieldDescriptor) {\n \n     public void addImplementDescriptor(ImplementDescriptor implementDescriptor)\n     {\n-        interfaces.add(implementDescriptor.getInterfaceName());\t\n+        interfaces.add(implementDescriptor.getInterfaceName());\n     }\n-    \n+\n     /**\n      * Get the FieldDescriptor to used for a specific java bean attribute\n      * @param fieldName The java bean attribute name\n@@ -273,13 +273,13 @@ public FieldDescriptor getUuidFieldDescriptor() {\n         }\n \n         return null;\n-    }    \n+    }\n \n     /**\n      * Check if this class has an ID\n      * @return true if the class has an ID\n      */\n-    public boolean hasIdField() {        \n+    public boolean hasIdField() {\n         return (this.idFieldDescriptor != null && ! this.idFieldDescriptor.equals(\"\"));\n     }\n \n@@ -292,12 +292,12 @@ public String getJcrName(String fieldName) {\n         String jcrName =  (String) this.fieldNames.get(fieldName);\n         if (this.isInterface && jcrName == null)\n         {\n-            return this.getJcrNameFromDescendants(this, fieldName);          \n+            return this.getJcrNameFromDescendants(this, fieldName);\n         }\n-        \n+\n         return jcrName;\n     }\n-    \n+\n     private String getJcrNameFromDescendants(ClassDescriptor classDescriptor, String fieldName )\n     {\n         Iterator  descendants = classDescriptor.getDescendantClassDescriptors().iterator();\n@@ -313,9 +313,9 @@ private String getJcrNameFromDescendants(ClassDescriptor classDescriptor, String\n         }\n         return null;\n \n-    \t\n+\n     }\n-    \n+\n     public Map getFieldNames() {\n         return this.fieldNames;\n     }\n@@ -338,7 +338,7 @@ public void setJcrSuperTypes(String superTypes) {\n     \t{\n     \t   this.jcrSuperTypes = superTypes;\n     \t}\n-    \t\n+\n     }\n \n     /**\n@@ -360,7 +360,7 @@ public void setJcrMixinTypes(String[] mixinTypes) {\n             jcrMixinTypes = mixinTypes[0].split(\" *, *\");\n         }\n     }\n-    public void setJcrMixinTypes(String mixinTypes) {                \n+    public void setJcrMixinTypes(String mixinTypes) {\n     \tif (mixinTypes != null && ! mixinTypes.equals(\"\"))\n     \t{\n     \t    jcrMixinTypes = mixinTypes.split(\" *, *\");\n@@ -384,7 +384,7 @@ public void setMappingDescriptor(MappingDescriptor mappingDescriptor) {\n      * Revisit information in this descriptor and fills in more.\n      */\n     public void afterPropertiesSet() {\n-        validateClassName();   \n+        validateClassName();\n         lookupSuperDescriptor();\n         lookupInheritanceSettings();\n \n@@ -393,23 +393,23 @@ public void afterPropertiesSet() {\n \tprivate void validateClassName() {\n \t\ttry {\n             ReflectionUtils.forName(this.className);\n-\t\t} catch (JcrMappingException e) {\t\t\t\n+\t\t} catch (JcrMappingException e) {\n \t\t\t throw new JcrMappingException(\"Class used in descriptor not found : \" + className);\n \t\t}\n \t}\n \n-\t\n+\n \tprivate void lookupSuperDescriptor() {\n         if (null != superClassDescriptor) {\n             this.hasDiscriminator = superClassDescriptor.hasDiscriminator();\n             if (! this.isInterface)\n             {\n                 this.fieldDescriptors = mergeFields(this.fieldDescriptors, this.superClassDescriptor.getFieldDescriptors());\n                 this.beanDescriptors = mergeBeans(this.beanDescriptors, this.superClassDescriptor.getBeanDescriptors());\n-                this.collectionDescriptors = mergeCollections(this.collectionDescriptors, this.superClassDescriptor.getCollectionDescriptors());            \n+                this.collectionDescriptors = mergeCollections(this.collectionDescriptors, this.superClassDescriptor.getCollectionDescriptors());\n                 this.fieldNames.putAll(this.superClassDescriptor.getFieldNames());\n             }\n-        \n+\n         }\n     }\n \n@@ -423,7 +423,7 @@ private void lookupInheritanceSettings() {\n             }\n         }\n     }\n-\t\n+\n \n     /**\n      * @return return the super class name if defined in mapping, or\n@@ -449,29 +449,29 @@ public void setExtend(String className) {\n     public ClassDescriptor getSuperClassDescriptor() {\n         return superClassDescriptor;\n     }\n-    \n+\n     public Collection getDescendantClassDescriptors() {\n     \t     return this.descendantClassDescriptors;\n     }\n-    \n+\n     /**\n      * If the node type per concrete class strategy is used, we need to find a descendant class descriptor assigned to a node type\n      * This method is not used in other situation.\n-     * \n+     *\n      * @param nodeType the node type for which the classdescriptor is required\n      * @return the classdescriptor found or null\n-     * \n-     * @todo : maybe we have to review this implementation to have better performance. \n+     *\n+     * @todo : maybe we have to review this implementation to have better performance.\n      */\n     public ClassDescriptor getDescendantClassDescriptor(String nodeType) {\n         Iterator iterator = this.descendantClassDescriptors.iterator();\n         while (iterator.hasNext()) {\n             ClassDescriptor descendantClassDescriptor = (ClassDescriptor) iterator.next();\n-  \n-            if (descendantClassDescriptor.getJcrType().equals(nodeType)) {\n+\n+            if (nodeType.equals(descendantClassDescriptor.getJcrType())) {\n                 return descendantClassDescriptor;\n             }\n-  \n+\n             if (descendantClassDescriptor.hasDescendants()) {\n                 ClassDescriptor classDescriptor = descendantClassDescriptor.getDescendantClassDescriptor(nodeType);\n                 if (classDescriptor != null) {\n@@ -481,12 +481,12 @@ public ClassDescriptor getDescendantClassDescriptor(String nodeType) {\n         }\n         return null;\n     }\n-    \n+\n     public void addDescendantClassDescriptor(ClassDescriptor classDescriptor) {\n     \t     this.descendantClassDescriptors.add(classDescriptor);\n     \t     this.hasDescendant = true;\n     }\n-    \n+\n     public boolean hasDescendants() {\n     \t    return this.hasDescendant;\n     }\n@@ -498,13 +498,13 @@ public void setSuperClassDescriptor(ClassDescriptor superClassDescriptor) {\n         this.superClassDescriptor= superClassDescriptor;\n         superClassDescriptor.addDescendantClassDescriptor(this);\n     }\n-   \n+\n \n     public Collection getImplements()\n     {\n     \t    return interfaces;\n     }\n-    \n+\n     private Map mergeFields(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -524,7 +524,7 @@ private Map mergeFields(Map existing, Collection superSource) {\n         return merged;\n     }\n \n-    \n+\n     private Map mergeBeans(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -543,7 +543,7 @@ private Map mergeBeans(Map existing, Collection superSource) {\n \n         return merged;\n     }\n-    \n+\n     private Map mergeCollections(Map existing, Collection superSource) {\n         if (null == superSource) {\n             return existing;\n@@ -558,10 +558,10 @@ private Map mergeCollections(Map existing, Collection superSource) {\n         }\n \n         return merged;\n-    }    \n-    \n-       \n-    \n+    }\n+\n+\n+\n \tpublic String toString() {\n \t\treturn \"Class Descriptor : \" +  this.getClassName();\n \t}",
                "deletions": 54
            }
        ]
    },
    {
        "repo": "jackrabbit-ocm",
        "message": "Prevent NullPointerException in setExtend if className is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk/contrib/jackrabbit-jcr-mapping/jcr-mapping@575640 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/jackrabbit-ocm/commit/0dea9ca9654ebaf8cb492f992338220c39a681d0",
        "parent": "https://github.com/apache/jackrabbit-ocm/commit/ae7f6a388b4ad00e2979f74c993a9e5d06fa7ea1",
        "bug_id": "jackrabbit-ocm_2",
        "file": [
            {
                "sha": "86939ec851719d7213b44f730c4d1b11125dde3a",
                "filename": "src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "blob_url": "https://github.com/apache/jackrabbit-ocm/blob/0dea9ca9654ebaf8cb492f992338220c39a681d0/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "raw_url": "https://github.com/apache/jackrabbit-ocm/raw/0dea9ca9654ebaf8cb492f992338220c39a681d0/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-ocm/contents/src/main/java/org/apache/jackrabbit/ocm/mapper/model/ClassDescriptor.java?ref=0dea9ca9654ebaf8cb492f992338220c39a681d0",
                "patch": "@@ -437,7 +437,9 @@ public String getExtend() {\n      * @param className\n      */\n     public void setExtend(String className) {\n-        if (className.equals(\"\")) className = null;\n+        if (className != null && className.length() == 0) {\n+            className = null;\n+        }\n     \tthis.superClassName = className;\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "jackrabbit-ocm",
        "message": "Prevent NullPointerException if the bean property cannot be set because the bean is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/jackrabbit/trunk/contrib/jackrabbit-jcr-mapping/jcr-mapping@574860 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/jackrabbit-ocm/commit/4ee1364416b0a8fefe0006c6791664bca8be0d43",
        "parent": "https://github.com/apache/jackrabbit-ocm/commit/787e487c73c21e6e48076208072cac679a253594",
        "bug_id": "jackrabbit-ocm_3",
        "file": [
            {
                "sha": "28f0a96e91f5202b8a6244f4fed00063366c3068",
                "filename": "src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "blob_url": "https://github.com/apache/jackrabbit-ocm/blob/4ee1364416b0a8fefe0006c6791664bca8be0d43/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "raw_url": "https://github.com/apache/jackrabbit-ocm/raw/4ee1364416b0a8fefe0006c6791664bca8be0d43/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/jackrabbit-ocm/contents/src/main/java/org/apache/jackrabbit/ocm/reflection/ReflectionUtils.java?ref=4ee1364416b0a8fefe0006c6791664bca8be0d43",
                "patch": "@@ -134,7 +134,8 @@ public static void setNestedProperty(Object object, String fieldName, Object val\n             PropertyUtils.setNestedProperty(object, fieldName, value);\n         }\n         catch(Exception ex) {\n-            throw new JcrMappingException(\"Cannot set the field \" + fieldName + \" in the class : \" + object.getClass().toString(),\n+            String className = (object == null) ? \"<null>\" : object.getClass().getName();\n+            throw new JcrMappingException(\"Cannot set the field \" + fieldName + \" in the class : \" + className,\n                     ex);\n         }\n     }",
                "deletions": 1
            }
        ]
    }
]