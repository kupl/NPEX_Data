{
    "commons-lang_13cd4e0": {
        "bug_id": "commons-lang_13cd4e0",
        "commit": "https://github.com/apache/commons-lang/commit/13cd4e0ac3ab76a4dc091eda457f9a111727cba2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-lang/blob/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/changes/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/changes/changes.xml?ref=13cd4e0ac3ab76a4dc091eda457f9a111727cba2",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -46,6 +46,7 @@ The <action> type attribute can be add,update,fix,remove.\n   <body>\n \n   <release version=\"3.5\" date=\"tba\" description=\"tba\">\n+    <action issue=\"LANG-1190\" type=\"fix\" dev=\"pschumacher\" due-to=\"pschumacher\">TypeUtils.isAssignable throws NullPointerException when fromType has type variables and toType generic superclass specifies type variable</action>\n     <action issue=\"LANG-1226\" type=\"fix\" dev=\"pschumacher\" due-to=\"pschumacher\">StringUtils#normalizeSpace does not trim the string anymore</action>\n     <action issue=\"LANG-1251\" type=\"fix\" dev=\"pschumacher\" due-to=\"Takuya Ueshin\">SerializationUtils.ClassLoaderAwareObjectInputStream should use static initializer to initialize primitiveTypes map</action>\n     <action issue=\"LANG-1253\" type=\"add\" dev=\"ggregory\" due-to=\"adilek\">[GitHub issue #170] Add RandomUtils#nextBoolean() method</action>",
                "raw_url": "https://github.com/apache/commons-lang/raw/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/changes/changes.xml",
                "sha": "712fd7e2d13e9b59941f13e775aec13635795fe8",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-lang/blob/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java?ref=13cd4e0ac3ab76a4dc091eda457f9a111727cba2",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "patch": "@@ -464,6 +464,10 @@ private static boolean isAssignable(final Type type, final ParameterizedType toP\n             final Type toTypeArg = unrollVariableAssignments(var, toTypeVarAssigns);\n             final Type fromTypeArg = unrollVariableAssignments(var, fromTypeVarAssigns);\n \n+            if (toTypeArg == null && fromTypeArg instanceof Class) {\n+                continue;\n+            }\n+\n             // parameters must either be absent from the subject type, within\n             // the bounds of the wildcard type, or be an exact match to the\n             // parameters of the target type.",
                "raw_url": "https://github.com/apache/commons-lang/raw/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/main/java/org/apache/commons/lang3/reflect/TypeUtils.java",
                "sha": "30e9940ba22d074e18ca0d20e775b0bbaa130f02",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/commons-lang/blob/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java?ref=13cd4e0ac3ab76a4dc091eda457f9a111727cba2",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.lang.reflect.TypeVariable;\n import java.lang.reflect.WildcardType;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashMap;\n@@ -755,6 +756,22 @@ public void testWrap() {\n         Assert.assertEquals(String.class, TypeUtils.wrap(String.class).getType());\n     }\n \n+    public static class ClassWithSuperClassWithGenericType extends ArrayList<Object> {\n+        private static final long serialVersionUID = 1L;\n+\n+        public static <U> Iterable<U> methodWithGenericReturnType() {\n+            return null;\n+        }\n+    }\n+\n+    @Test\n+    public void testLANG1190() throws Exception {\n+        Type fromType = ClassWithSuperClassWithGenericType.class.getDeclaredMethod(\"methodWithGenericReturnType\").getGenericReturnType();\n+        Type failingToType = TypeUtils.wildcardType().withLowerBounds(ClassWithSuperClassWithGenericType.class).build();\n+\n+        Assert.assertTrue(TypeUtils.isAssignable(fromType, failingToType));\n+    }\n+\n     public Iterable<? extends Map<Integer, ? extends Collection<?>>> iterable;\n \n     public static <G extends Comparable<G>> G stub() {",
                "raw_url": "https://github.com/apache/commons-lang/raw/13cd4e0ac3ab76a4dc091eda457f9a111727cba2/src/test/java/org/apache/commons/lang3/reflect/TypeUtilsTest.java",
                "sha": "66477ea20ba00749cf83f5a5c5d22342e0882f9f",
                "status": "modified"
            }
        ],
        "message": "LANG-1190: TypeUtils.isAssignable throws NullPointerException when fromType has type variables and toType generic superclass specifies type variable (closes #158)",
        "parent": "https://github.com/apache/commons-lang/commit/7e85d1cf54b1e467607a0019b56f91577ebe2e4f",
        "patched_files": [
            "changes.java",
            "TypeUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "TypeUtilsTest.java"
        ]
    },
    "commons-lang_1a7e46f": {
        "bug_id": "commons-lang_1a7e46f",
        "commit": "https://github.com/apache/commons-lang/commit/1a7e46f430df71ac883706f595f0698617a8dc3d",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-lang/blob/1a7e46f430df71ac883706f595f0698617a8dc3d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/text/StrBuilder.java?ref=1a7e46f430df71ac883706f595f0698617a8dc3d",
                "deletions": 8,
                "filename": "src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
                "patch": "@@ -1486,19 +1486,20 @@ public StrBuilder insert(final int index, final Object obj) {\n      * @return this, to enable chaining\n      * @throws IndexOutOfBoundsException if the index is invalid\n      */\n-    @SuppressWarnings(\"null\") // str cannot be null\n     public StrBuilder insert(final int index, String str) {\n         validateIndex(index);\n         if (str == null) {\n             str = nullText;\n         }\n-        final int strLen = (str == null ? 0 : str.length());\n-        if (strLen > 0) {\n-            final int newSize = size + strLen;\n-            ensureCapacity(newSize);\n-            System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n-            size = newSize;\n-            str.getChars(0, strLen, buffer, index); // str cannot be null here\n+        if (str != null) {\n+            final int strLen = str.length();\n+            if (strLen > 0) {\n+                final int newSize = size + strLen;\n+                ensureCapacity(newSize);\n+                System.arraycopy(buffer, index, buffer, index + strLen, size - index);\n+                size = newSize;\n+                str.getChars(0, strLen, buffer, index);\n+            }\n         }\n         return this;\n     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/1a7e46f430df71ac883706f595f0698617a8dc3d/src/main/java/org/apache/commons/lang3/text/StrBuilder.java",
                "sha": "e2f78a89fd832c2f8bb7bd7759df9725f162a1f7",
                "status": "modified"
            }
        ],
        "message": "Rewrite to avoid (im)possible NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1478506 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/d1350bf73ff5cea1fdd85ce23940c5ca96889f2a",
        "patched_files": [
            "StrBuilder.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "StrBuilderTest.java"
        ]
    },
    "commons-lang_1df9bc7": {
        "bug_id": "commons-lang_1df9bc7",
        "commit": "https://github.com/apache/commons-lang/commit/1df9bc70256d166cd78ea805a2dbac4433a89f2a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-lang/blob/1df9bc70256d166cd78ea805a2dbac4433a89f2a/pom.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/pom.xml?ref=1df9bc70256d166cd78ea805a2dbac4433a89f2a",
                "deletions": 0,
                "filename": "pom.xml",
                "patch": "@@ -760,6 +760,13 @@\n         <groupId>com.github.spotbugs</groupId>\n         <artifactId>spotbugs-maven-plugin</artifactId>\n         <version>${spotbugs.plugin.version}</version>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.github.spotbugs</groupId>\n+            <artifactId>spotbugs</artifactId>\n+            <version>4.0.0-beta4</version>\n+         </dependency>\n+        </dependencies>        \n         <configuration>\n           <excludeFilterFile>${basedir}/spotbugs-exclude-filter.xml</excludeFilterFile>\n         </configuration>",
                "raw_url": "https://github.com/apache/commons-lang/raw/1df9bc70256d166cd78ea805a2dbac4433a89f2a/pom.xml",
                "sha": "1505a02856c8a2dc8755e5148d1236d5472885e0",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-lang/blob/1df9bc70256d166cd78ea805a2dbac4433a89f2a/spotbugs-exclude-filter.xml",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/spotbugs-exclude-filter.xml?ref=1df9bc70256d166cd78ea805a2dbac4433a89f2a",
                "deletions": 0,
                "filename": "spotbugs-exclude-filter.xml",
                "patch": "@@ -146,4 +146,11 @@\n     <Method name=\"equals\" />\n     <Bug pattern=\"NP_EQUALS_SHOULD_HANDLE_NULL_ARGUMENT\" />\n   </Match>\n+  \n+  <!-- Reason: toString() can return null! -->\n+  <Match>\n+    <Class name=\"org.apache.commons.lang3.compare.ObjectToStringComparator\" />\n+    <Method name=\"compare\" />\n+    <Bug pattern=\"RCN_REDUNDANT_NULLCHECK_OF_NONNULL_VALUE\" />\n+  </Match>\n </FindBugsFilter>",
                "raw_url": "https://github.com/apache/commons-lang/raw/1df9bc70256d166cd78ea805a2dbac4433a89f2a/spotbugs-exclude-filter.xml",
                "sha": "86368909d43b81550c34729c756dc823062b8183",
                "status": "modified"
            },
            {
                "additions": 69,
                "blob_url": "https://github.com/apache/commons-lang/blob/1df9bc70256d166cd78ea805a2dbac4433a89f2a/src/main/java/org/apache/commons/lang3/compare/ObjectToStringComparator.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/compare/ObjectToStringComparator.java?ref=1df9bc70256d166cd78ea805a2dbac4433a89f2a",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/compare/ObjectToStringComparator.java",
                "patch": "@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.compare;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+\n+/**\n+ * Compares Object's {@link Object#toString()} values.\n+ *\n+ * This class is stateless.\n+ *\n+ * @since 3.10\n+ */\n+public final class ObjectToStringComparator implements Comparator<Object>, Serializable {\n+\n+    /**\n+     * Singleton instance.\n+     *\n+     * This class is stateless.\n+     */\n+    public static final ObjectToStringComparator INSTANCE = new ObjectToStringComparator();\n+\n+    /**\n+     * For {@link Serializable}.\n+     */\n+    private static final long serialVersionUID = 1L;\n+\n+    @Override\n+    public int compare(final Object o1, final Object o2) {\n+        if (o1 == null && o2 == null) {\n+            return 0;\n+        }\n+        if (o1 == null) {\n+            return 1;\n+        }\n+        if (o2 == null) {\n+            return -1;\n+        }\n+        final String string1 = o1.toString();\n+        final String string2 = o2.toString();\n+        // No guarantee that toString() returns a non-null value, despite what Spotbugs thinks.\n+        if (string1 == null && string2 == null) {\n+            return 0;\n+        }\n+        if (string1 == null) {\n+            return 1;\n+        }\n+        if (string2 == null) {\n+            return -1;\n+        }\n+        return string1.compareTo(string2);\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-lang/raw/1df9bc70256d166cd78ea805a2dbac4433a89f2a/src/main/java/org/apache/commons/lang3/compare/ObjectToStringComparator.java",
                "sha": "2bb5840d51df261ac9989ac7c60b59416cca39fe",
                "status": "added"
            },
            {
                "additions": 73,
                "blob_url": "https://github.com/apache/commons-lang/blob/1df9bc70256d166cd78ea805a2dbac4433a89f2a/src/test/java/org/apache/commons/lang3/compare/ObjectToStringComparatorTest.java",
                "changes": 73,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/compare/ObjectToStringComparatorTest.java?ref=1df9bc70256d166cd78ea805a2dbac4433a89f2a",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/compare/ObjectToStringComparatorTest.java",
                "patch": "@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.commons.lang3.compare;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+\n+import org.junit.jupiter.api.Test;\n+\n+/**\n+ * Tests {@link ObjectToStringComparator}.\n+ */\n+public class ObjectToStringComparatorTest {\n+\n+    private static class Thing {\n+\n+        final String string;\n+\n+        Thing(final String string) {\n+            this.string = string;\n+        }\n+\n+        @Override\n+        public String toString() {\n+            return string;\n+        }\n+    }\n+\n+    @Test\n+    public void testNull() {\n+        final List<Thing> things = Arrays.asList(null, new Thing(\"y\"), null);\n+        Collections.sort(things, ObjectToStringComparator.INSTANCE);\n+        assertEquals(\"y\", things.get(0).string);\n+        assertEquals(null, things.get(1));\n+        assertEquals(null, things.get(2));\n+    }\n+\n+    @Test\n+    public void testNullToString() {\n+        final List<Thing> things = Arrays.asList(new Thing(null), new Thing(\"y\"), new Thing(null));\n+        Collections.sort(things, ObjectToStringComparator.INSTANCE);\n+        assertEquals(\"y\", things.get(0).string);\n+        assertEquals(null, things.get(1).string);\n+        assertEquals(null, things.get(2).string);\n+    }\n+\n+    @Test\n+    public void testSortCollection() {\n+        final List<Thing> things = Arrays.asList(new Thing(\"z\"), new Thing(\"y\"), new Thing(\"x\"));\n+        Collections.sort(things, ObjectToStringComparator.INSTANCE);\n+        assertEquals(\"x\", things.get(0).string);\n+        assertEquals(\"y\", things.get(1).string);\n+        assertEquals(\"z\", things.get(2).string);\n+    }\n+}",
                "raw_url": "https://github.com/apache/commons-lang/raw/1df9bc70256d166cd78ea805a2dbac4433a89f2a/src/test/java/org/apache/commons/lang3/compare/ObjectToStringComparatorTest.java",
                "sha": "c233cf1c296b2e4e937d8623c0cc79b188d0493a",
                "status": "added"
            }
        ],
        "message": "[LANG-1509] Add ObjectToStringComparator. (#483)\n\n* [LANG-1509] Add ObjectToStringComparator.\r\n\r\n* [LANG-1509] Add ObjectToStringComparator.\r\n\r\nRepackage.\r\n\r\n* [LANG-1509] Add ObjectToStringComparator.\r\n\r\nAvoid NPE.\r\n\r\n* [LANG-1509] Add ObjectToStringComparator.\r\n\r\nClean ups.\r\n\r\n* Spotbugs: toString() can return null!",
        "parent": "https://github.com/apache/commons-lang/commit/6f358e9e8d4a1be135d423f8a25262a2f3325463",
        "patched_files": [
            "spotbugs-exclude-filter.java",
            "ObjectToStringComparator.java",
            "pom.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "ObjectToStringComparatorTest.java"
        ]
    },
    "commons-lang_37b9565": {
        "bug_id": "commons-lang_37b9565",
        "commit": "https://github.com/apache/commons-lang/commit/37b9565b26fa6a3c1224dd95af1e821bc30789e9",
        "file": [
            {
                "additions": 60,
                "blob_url": "https://github.com/apache/commons-lang/blob/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/main/java/org/apache/commons/lang3/EnumUtils.java",
                "changes": 92,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/EnumUtils.java?ref=37b9565b26fa6a3c1224dd95af1e821bc30789e9",
                "deletions": 32,
                "filename": "src/main/java/org/apache/commons/lang3/EnumUtils.java",
                "patch": "@@ -123,58 +123,86 @@ public EnumUtils() {\n      * <p>Do not use this method if you have more than 64 values in your Enum, as this\n      * would create a value greater than a long can hold.</p>\n      *\n-     * @param enumClass the class of the enum we are working with, not null\n-     * @param set       the set of enum values we want to convert\n+     * @param enumClass the class of the enum we are working with, not {@code null}\n+     * @param values    the values we want to convert, not {@code null}\n      * @param <E>       the type of the enumeration\n      * @return a long whose binary value represents the given set of enum values.\n+     * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\n+     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\n+     * @since 3.0.1\n      */\n-    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, EnumSet<E> set) {\n-        if (enumClass == null) {\n-            throw new IllegalArgumentException(\"EnumClass must be defined.\");\n-        }\n-        final E[] constants = enumClass.getEnumConstants();\n-        if (constants != null && constants.length > 64) {\n-            throw new IllegalArgumentException(\"EnumClass is too big to be stored in a 64-bit value.\");\n-        }\n+    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, Iterable<E> values) {\n+        checkBitVectorable(enumClass);\n+        Validate.notNull(values);\n         long total = 0;\n-        if (set != null) {\n-            if (constants != null && constants.length > 0) {\n-                for (E constant : constants) {\n-                    if (set.contains(constant)) {\n-                        total += Math.pow(2, constant.ordinal());\n-                    }\n-                }\n-            }\n+        for (E constant : values) {\n+            total |= (1 << constant.ordinal());\n         }\n         return total;\n     }\n \n+    /**\n+     * <p>Creates a long bit vector representation of the given array of Enum values.</p>\n+     *\n+     * <p>This generates a value that is usable by {@link EnumUtils#processBitVector}.</p>\n+     *\n+     * <p>Do not use this method if you have more than 64 values in your Enum, as this\n+     * would create a value greater than a long can hold.</p>\n+     *\n+     * @param enumClass the class of the enum we are working with, not {@code null}\n+     * @param values    the values we want to convert, not {@code null}\n+     * @param <E>       the type of the enumeration\n+     * @return a long whose binary value represents the given set of enum values.\n+     * @throws NullPointerException if {@code enumClass} or {@code values} is {@code null}\n+     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\n+     * @since 3.0.1\n+     */\n+    public static <E extends Enum<E>> long generateBitVector(Class<E> enumClass, E... values) {\n+        Validate.noNullElements(values);\n+        return generateBitVector(enumClass, Arrays.<E> asList(values));\n+    }\n+\n     /**\n      * <p>Convert a long value created by {@link EnumUtils#generateBitVector} into the set of\n      * enum values that it represents.</p>\n      *\n      * <p>If you store this value, beware any changes to the enum that would affect ordinal values.</p>\n-     * @param enumClass the class of the enum we are working with, not null\n+     * @param enumClass the class of the enum we are working with, not {@code null}\n      * @param value     the long value representation of a set of enum values\n      * @param <E>       the type of the enumeration\n      * @return a set of enum values\n+     * @throws NullPointerException if {@code enumClass} is {@code null}\n+     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\n+     * @since 3.0.1\n      */\n     public static <E extends Enum<E>> EnumSet<E> processBitVector(Class<E> enumClass, long value) {\n-        if (enumClass == null) {\n-            throw new IllegalArgumentException(\"EnumClass must be defined.\");\n-        }\n-        final E[] constants = enumClass.getEnumConstants();\n-        if (constants != null && constants.length > 64) {\n-            throw new IllegalArgumentException(\"EnumClass is too big to be stored in a 64-bit value.\");\n-        }\n-        final EnumSet results = EnumSet.noneOf(enumClass);\n-        if (constants != null && constants.length > 0) {\n-            for (E constant : constants) {\n-                if ((value & (1 << constant.ordinal())) != 0) {\n-                    results.add(constant);\n-                }\n+        final E[] constants = checkBitVectorable(enumClass).getEnumConstants();\n+        final EnumSet<E> results = EnumSet.noneOf(enumClass);\n+        for (E constant : constants) {\n+            if ((value & (1 << constant.ordinal())) != 0) {\n+                results.add(constant);\n             }\n         }\n         return results;\n     }\n+\n+    /**\n+     * Validate that {@code enumClass} is compatible with representation in a {@code long}.\n+     * @param <E> the type of the enumeration\n+     * @param enumClass to check\n+     * @return {@code enumClass}\n+     * @throws NullPointerException if {@code enumClass} is {@code null}\n+     * @throws IllegalArgumentException if {@code enumClass} is not an enum class or has more than 64 values\n+     * @since 3.0.1\n+     */\n+    private static <E extends Enum<E>> Class<E> checkBitVectorable(Class<E> enumClass) {\n+        Validate.notNull(enumClass, \"EnumClass must be defined.\");\n+\n+        final E[] constants = enumClass.getEnumConstants();\n+        Validate.isTrue(constants != null, \"%s does not seem to be an Enum type\", enumClass);\n+        Validate.isTrue(constants.length <= Long.SIZE, \"Cannot store %s %s values in %s bits\", constants.length,\n+            enumClass.getSimpleName(), Long.SIZE);\n+\n+        return enumClass;\n+    }\n }",
                "raw_url": "https://github.com/apache/commons-lang/raw/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/main/java/org/apache/commons/lang3/EnumUtils.java",
                "sha": "ca7953fb0d6bb8272174b792b94323a3de7930f5",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/commons-lang/blob/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
                "changes": 58,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java?ref=37b9565b26fa6a3c1224dd95af1e821bc30789e9",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
                "patch": "@@ -20,6 +20,7 @@\n \n import static org.junit.Assert.*;\n \n+import java.util.ArrayList;\n import java.util.EnumSet;\n import java.util.List;\n import java.util.Map;\n@@ -89,19 +90,56 @@ public void test_getEnum_nullClass() {\n         EnumUtils.getEnum((Class<Traffic>) null, \"PURPLE\");\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void test_generateBitVector_nullClass() {\n         EnumUtils.generateBitVector(null, EnumSet.of(Traffic.RED));\n     }\n \n+    @Test(expected=NullPointerException.class)\n+    public void test_generateBitVector_nullIterable() {\n+        EnumUtils.generateBitVector(null, (Iterable<Traffic>) null);\n+    }\n+\n+    @Test(expected=NullPointerException.class)\n+    public void test_generateBitVector_nullClassWithArray() {\n+        EnumUtils.generateBitVector(null, Traffic.RED);\n+    }\n+    \n+    @Test(expected=NullPointerException.class)\n+    public void test_generateBitVector_nullArray() {\n+        EnumUtils.generateBitVector(null, (Traffic[]) null);\n+    }\n+\n     @Test(expected=IllegalArgumentException.class)\n     public void test_generateBitVector_longClass() {\n         EnumUtils.generateBitVector(TooMany.class, EnumSet.of(TooMany.A1));\n     }\n \n+    @Test(expected=IllegalArgumentException.class)\n+    public void test_generateBitVector_longClassWithArray() {\n+        EnumUtils.generateBitVector(TooMany.class, TooMany.A1);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void test_generateBitVector_nonEnumClass() {\n+        @SuppressWarnings(\"rawtypes\")\n+        Class rawType = Object.class;\n+        @SuppressWarnings(\"rawtypes\")\n+        List rawList = new ArrayList();\n+        EnumUtils.generateBitVector(rawType, rawList);\n+    }\n+    \n+    @SuppressWarnings(\"unchecked\")\n+    @Test(expected=IllegalArgumentException.class)\n+    public void test_generateBitVector_nonEnumClassWithArray() {\n+        @SuppressWarnings(\"rawtypes\")\n+        Class rawType = Object.class;\n+        EnumUtils.generateBitVector(rawType);\n+    }\n+    \n     @Test\n     public void test_generateBitVector() {\n-        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, null));\n         assertEquals(0L, EnumUtils.generateBitVector(Traffic.class, EnumSet.noneOf(Traffic.class)));\n         assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED)));\n         assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.AMBER)));\n@@ -112,7 +150,21 @@ public void test_generateBitVector() {\n         assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, EnumSet.of(Traffic.RED, Traffic.AMBER, Traffic.GREEN)));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test\n+    public void test_generateBitVectorFromArray() {\n+        assertEquals(0L, EnumUtils.generateBitVector(Traffic.class));\n+        assertEquals(1L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED));\n+        assertEquals(2L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER));\n+        assertEquals(4L, EnumUtils.generateBitVector(Traffic.class, Traffic.GREEN));\n+        assertEquals(3L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER));\n+        assertEquals(5L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.GREEN));\n+        assertEquals(6L, EnumUtils.generateBitVector(Traffic.class, Traffic.AMBER, Traffic.GREEN));\n+        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN));\n+        //gracefully handles duplicates:\n+        assertEquals(7L, EnumUtils.generateBitVector(Traffic.class, Traffic.RED, Traffic.AMBER, Traffic.GREEN, Traffic.GREEN));\n+    }\n+    \n+    @Test(expected=NullPointerException.class)\n     public void test_processBitVector_nullClass() {\n         final Class<Traffic> empty = null;\n         EnumUtils.processBitVector(empty, 0L);",
                "raw_url": "https://github.com/apache/commons-lang/raw/37b9565b26fa6a3c1224dd95af1e821bc30789e9/src/test/java/org/apache/commons/lang3/EnumUtilsTest.java",
                "sha": "de38abb602707fe3234c355e56cffd0711e0b5fa",
                "status": "modified"
            }
        ],
        "message": "require values parameter when generating bit vectors from enums, throwing NullPointerException if omitted; merge check for type eligibility; add E... generateBitVector() variant; alter generateBitVector(Class<E>, EnumSet<E>) to (Class<E>, Iterable<E>) by using |= << instead of + to accumulate values; process only specified values\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1149320 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/42c7d34dff88d23007494a930e344fb2077bd391",
        "patched_files": [
            "EnumUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "EnumUtilsTest.java"
        ]
    },
    "commons-lang_43db523": {
        "bug_id": "commons-lang_43db523",
        "commit": "https://github.com/apache/commons-lang/commit/43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
        "file": [
            {
                "additions": 37,
                "blob_url": "https://github.com/apache/commons-lang/blob/43db5237ab2a2dbc3a79daed10499bb4dbf92a4e/src/java/org/apache/commons/lang/RandomStringUtils.java",
                "changes": 69,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/java/org/apache/commons/lang/RandomStringUtils.java?ref=43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
                "deletions": 32,
                "filename": "src/java/org/apache/commons/lang/RandomStringUtils.java",
                "patch": "@@ -64,7 +64,7 @@\n  * @author <a href=\"mailto:ggregory@seagullsw.com\">Gary Gregory</a>\n  * @author Phil Steitz\n  * @since 1.0\n- * @version $Id: RandomStringUtils.java,v 1.19 2003/07/26 10:32:17 scolebourne Exp $\n+ * @version $Id: RandomStringUtils.java,v 1.20 2003/07/31 23:24:35 scolebourne Exp $\n  */\n public class RandomStringUtils {\n \n@@ -190,7 +190,7 @@ public static String random(int count, boolean letters, boolean numbers) {\n      * @return the random string\n      */\n     public static String random(int count, int start, int end, boolean letters, boolean numbers) {\n-        return random(count, start, end, letters, numbers, null);\n+        return random(count, start, end, letters, numbers, null, RANDOM);\n     }\n \n     /**\n@@ -207,14 +207,14 @@ public static String random(int count, int start, int end, boolean letters, bool\n      * @param end  the position in set of chars to end before\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n-     * @param set  the set of chars to choose randoms from.\n+     * @param chars  the set of chars to choose randoms from.\n      *  If <code>null</code>, then it will use the set of all chars.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n-        return random(count,start,end,letters,numbers,set,RANDOM);\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars) {\n+        return random(count, start, end, letters, numbers, chars, RANDOM);\n     }\n \n     /**\n@@ -241,24 +241,24 @@ public static String random(int count, int start, int end, boolean letters, bool\n      * @param end  the position in set of chars to end before\n      * @param letters  only allow letters?\n      * @param numbers  only allow numbers?\n-     * @param set  the set of chars to choose randoms from.\n+     * @param chars  the set of chars to choose randoms from.\n      *  If <code>null</code>, then it will use the set of all chars.\n      * @param random  a source of randomness.\n      * @return the random string\n      * @throws ArrayIndexOutOfBoundsException if there are not\n      *  <code>(end - start) + 1</code> characters in the set array.\n      * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n      */\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n-        if( count == 0 ) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n+        if (count == 0) {\n             return \"\";\n-        } else if( count < 0 ) {\n+        } else if (count < 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if( (start == 0) && (end == 0) ) {\n+        if ((start == 0) && (end == 0)) {\n             end = 'z' + 1;\n             start = ' ';\n-            if(!letters && !numbers) {\n+            if (!letters && !numbers) {\n                 start = 0;\n                 end = Integer.MAX_VALUE;\n             }\n@@ -267,20 +267,18 @@ public static String random(int count, int start, int end, boolean letters, bool\n         StringBuffer buffer = new StringBuffer();\n         int gap = end - start;\n \n-        while(count-- != 0) {\n+        while (count-- != 0) {\n             char ch;\n-            if(set == null) {\n-                ch = (char)(random.nextInt(gap) + start);\n+            if (chars == null) {\n+                ch = (char) (random.nextInt(gap) + start);\n             } else {\n-                ch = set[random.nextInt(gap) + start];\n+                ch = chars[random.nextInt(gap) + start];\n             }\n-            if( (letters && numbers && Character.isLetterOrDigit(ch)) ||\n-                (letters && Character.isLetter(ch)) ||\n-                (numbers && Character.isDigit(ch)) ||\n-                (!letters && !numbers)\n-              ) \n-            {\n-                buffer.append( ch );\n+            if ((letters && numbers && Character.isLetterOrDigit(ch))\n+                || (letters && Character.isLetter(ch))\n+                || (numbers && Character.isDigit(ch))\n+                || (!letters && !numbers)) {\n+                buffer.append(ch);\n             } else {\n                 count++;\n             }\n@@ -296,13 +294,16 @@ public static String random(int count, int start, int end, boolean letters, bool\n      * specified.</p>\n      *\n      * @param count  the length of random string to create\n-     * @param set  the String containing the set of characters to use,\n-     *  must not be <code>null</code>\n+     * @param chars  the String containing the set of characters to use,\n+     *  may be null\n      * @return the random string\n-     * @throws NullPointerException if the set is <code>null</code>\n+     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n      */\n-    public static String random(int count, String set) {\n-        return random(count, set.toCharArray());\n+    public static String random(int count, String chars) {\n+        if (chars == null) {\n+            return random(count, 0, 0, false, false, null, RANDOM);\n+        }\n+        return random(count, chars.toCharArray());\n     }\n \n     /**\n@@ -312,12 +313,16 @@ public static String random(int count, String set) {\n      * <p>Characters will be chosen from the set of characters specified.</p>\n      *\n      * @param count  the length of random string to create\n-     * @param set  the character array containing the set of characters to use\n-     *  must not be <code>null</code>\n+     * @param chars  the character array containing the set of characters to use,\n+     *  may be null\n      * @return the random string\n-     * @throws NullPointerException if the set is <code>null</code>\n+     * @throws IllegalArgumentException if <code>count</code> &lt; 0.\n      */\n-    public static String random(int count, char[] set) {\n-        return random(count, 0, set.length, false, false, set);\n+    public static String random(int count, char[] chars) {\n+        if (chars == null) {\n+            return random(count, 0, 0, false, false, null, RANDOM);\n+        }\n+        return random(count, 0, chars.length, false, false, chars, RANDOM);\n     }\n+    \n }",
                "raw_url": "https://github.com/apache/commons-lang/raw/43db5237ab2a2dbc3a79daed10499bb4dbf92a4e/src/java/org/apache/commons/lang/RandomStringUtils.java",
                "sha": "c4e0d704ed6421d47e2daf4d7a7c40113874b50e",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/commons-lang/blob/43db5237ab2a2dbc3a79daed10499bb4dbf92a4e/src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/org/apache/commons/lang/RandomStringUtilsTest.java?ref=43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
                "deletions": 7,
                "filename": "src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
                "patch": "@@ -67,7 +67,7 @@\n  * @author <a href=\"mailto:steven@caswell.name\">Steven Caswell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Phil Steitz\n- * @version $Id: RandomStringUtilsTest.java,v 1.9 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: RandomStringUtilsTest.java,v 1.10 2003/07/31 23:24:35 scolebourne Exp $\n  */\n public class RandomStringUtilsTest extends junit.framework.TestCase {\n     /**\n@@ -157,6 +157,12 @@ public void testRandomStringUtils() {\n         r2 = RandomStringUtils.random(50, set);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n         \n+        r1 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (String) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n         set = \"stuvwxyz\";\n         r1 = RandomStringUtils.random(50, set.toCharArray());\n         assertEquals(\"random(50, \\\"stuvwxyz\\\")\", 50, r1.length());\n@@ -165,6 +171,12 @@ public void testRandomStringUtils() {\n         }\n         r2 = RandomStringUtils.random(50, set);\n         assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n+        \n+        r1 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r1.length());\n+        r2 = RandomStringUtils.random(50, (char[]) null);\n+        assertEquals(\"random(50) length\", 50, r2.length());\n+        assertTrue(\"!r1.equals(r2)\", !r1.equals(r2));\n \n         long seed = System.currentTimeMillis();\n         r1 = RandomStringUtils.random(50,0,0,true,true,null,new Random(seed));\n@@ -174,13 +186,36 @@ public void testRandomStringUtils() {\n         r1 = RandomStringUtils.random(0);\n         assertEquals(\"random(0).equals(\\\"\\\")\", \"\", r1);\n \n-        Exception e = null;\n+    }\n+    public void testExceptions() {\n         try {\n-            r1 = RandomStringUtils.random(-1);\n-        } catch (Exception e2) {\n-            e = e2;\n-        }\n-        assertNotNull(\"random(<0) throws exception\", e);\n+            RandomStringUtils.random(-1);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, true, true);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, \"\");\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0]);\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n+        try {\n+            RandomStringUtils.random(-1, 'a', 'z', false, false, new char[0], new Random());\n+            fail();\n+        } catch (IllegalArgumentException ex) {}\n     }\n     \n     /**",
                "raw_url": "https://github.com/apache/commons-lang/raw/43db5237ab2a2dbc3a79daed10499bb4dbf92a4e/src/test/org/apache/commons/lang/RandomStringUtilsTest.java",
                "sha": "cc8542ceeeef97081fad6621cc7fbc4d99cef71f",
                "status": "modified"
            }
        ],
        "message": "Fix RandomStringUtils to not throw NPE all the time\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137543 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/6d98f1d5f37dc5d46f6d2e27d50fa0a9b6e6a078",
        "patched_files": [
            "RandomStringUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "RandomStringUtilsTest.java"
        ]
    },
    "commons-lang_4926914": {
        "bug_id": "commons-lang_4926914",
        "commit": "https://github.com/apache/commons-lang/commit/4926914ecbaec6a092f2398af3f5e8468f5f53b5",
        "file": [
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/commons-lang/blob/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/java/org/apache/commons/lang/CharSet.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/java/org/apache/commons/lang/CharSet.java?ref=4926914ecbaec6a092f2398af3f5e8468f5f53b5",
                "deletions": 12,
                "filename": "src/java/org/apache/commons/lang/CharSet.java",
                "patch": "@@ -58,26 +58,34 @@\n import java.util.List;\n \n /**\n- * <p>A set of characters. You can iterate over the characters in the\n- * set.</p>\n+ * <p>A set of characters.</p>\n  *\n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSet.java,v 1.8 2003/03/23 17:59:09 scolebourne Exp $\n+ * @version $Id: CharSet.java,v 1.9 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSet {\n \n     private List set = new LinkedList();\n \n+    /**\n+     * <p>Restricted constructor.</p>\n+     *\n+     * <p>Use the factory method\n+     * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n+     */\n+    protected CharSet(String set) {\n+        add(set);\n+    }\n+\n     /**\n      * <p>Restricted constructor.</p>\n      *\n      * <p>Use the factory method\n      * {@link CharSetUtils#evaluateSet(java.lang.String[])}.</p>\n      *\n-     * @throws NullPointerException if any of set[i] is <code>null</code>\n-     *  or if set is <code>null</code>\n+     * @throws NullPointerException if set is <code>null</code>\n      */\n     protected CharSet(String[] set) {\n         int sz = set.length;\n@@ -116,31 +124,33 @@ public boolean contains(char ch) {\n      * <p>Add a set definition string to the <code>CharSet</code>.</p>\n      * \n      * @param str  set definition string\n-     * @throws NullPointerException if <code>str</code> is <code>null</code>\n      */\n     protected void add(String str) {\n+        if (str == null) {\n+            return;\n+        }\n         int sz = str.length();\n         CharRange range = null;\n \n-        if(\"-\".equals(str)) {\n+        if (\"-\".equals(str)) {\n             range = new CharRange('-');\n             set.add(range);\n             return;\n-        } \n+        }\n \n         boolean end = false;\n         boolean negated = false;\n-        for(int i=0; i<sz; i++) {\n+        for (int i = 0; i < sz; i++) {\n             char ch = str.charAt(i);\n-            if(ch == '-') {\n+            if (ch == '-') {\n                 end = true;\n                 continue;\n             }\n-            if(end) {\n+            if (end) {\n                 range.setEnd(ch);\n                 continue;\n             }\n-            if(ch == '^') {\n+            if (ch == '^') {\n                 negated = true;\n                 continue;\n             }",
                "raw_url": "https://github.com/apache/commons-lang/raw/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/java/org/apache/commons/lang/CharSet.java",
                "sha": "d9e1e26b6f5ea0ef67a2ae4737e802b7cfe84f90",
                "status": "modified"
            },
            {
                "additions": 112,
                "blob_url": "https://github.com/apache/commons-lang/blob/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/java/org/apache/commons/lang/CharSetUtils.java",
                "changes": 166,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/java/org/apache/commons/lang/CharSetUtils.java?ref=4926914ecbaec6a092f2398af3f5e8468f5f53b5",
                "deletions": 54,
                "filename": "src/java/org/apache/commons/lang/CharSetUtils.java",
                "patch": "@@ -56,14 +56,14 @@\n /**\n  * <p>Numerous routines to manipulate a <code>CharSet</code>.</p>\n  *\n- * <p>This class tries to handle <code>null</code> input gracefully.\n- * An exception will generally not be thrown for a <code>null</code> input.\n+ * <p>This class handles <code>null</code> input gracefully.\n+ * An exception will not be thrown for a <code>null</code> input.\n  * Each method documents its behaviour in more detail.</p>\n  * \n  * @author <a href=\"bayard@generationjava.com\">Henri Yandell</a>\n  * @author Stephen Colebourne\n  * @since 1.0\n- * @version $Id: CharSetUtils.java,v 1.17 2003/07/31 20:38:26 scolebourne Exp $\n+ * @version $Id: CharSetUtils.java,v 1.18 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSetUtils {\n \n@@ -77,6 +77,7 @@\n     public CharSetUtils() {\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n      * set logic to be performed.</p>\n@@ -87,33 +88,72 @@ public CharSetUtils() {\n      *   a set in itself due to the size of that set in unicode.</li>\n      *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n      * </ul>\n+     * \n+     * <pre>\n+     * CharSetUtils.evaluateSet(null)  = null\n+     * CharSetUtils.evaluateSet(\"\")    = CharSet matching nothing\n+     * CharSetUtils.evaluateSet(\"a-e\") = CharSet matching a,b,c,d,e\n+     * </pre>\n      *\n-     * @param set  the set, must not be null\n-     * @return a CharSet instance\n-     * @throws NullPointerException if any of set[i] is null or if set is null\n+     * @param set  the set, may be null\n+     * @return a CharSet instance, <code>null</code> if null input\n+     */\n+    public static CharSet evaluateSet(String set) {\n+        if (set == null) {\n+            return null;\n+        }\n+        return new CharSet(new String[] {set}); \n+    }\n+\n+    /**\n+     * <p>Creates a <code>CharSetUtils</code> object which allows a certain amount of\n+     * set logic to be performed.</p>\n+     * <p>The syntax is:</p>\n+     * <ul>\n+     *  <li>&quot;aeio&quot; which implies 'a','e',..</li>\n+     *  <li>&quot;^e&quot; implies not e. However it only negates, it's not\n+     *   a set in itself due to the size of that set in unicode.</li>\n+     *  <li>&quot;ej-m&quot; implies e,j->m. e,j,k,l,m.</li>\n+     * </ul>\n+     * \n+     * <pre>\n+     * CharSetUtils.evaluateSet(null)    = null\n+     * CharSetUtils.evaluateSet([])      = CharSet matching nothing\n+     * CharSetUtils.evaluateSet([\"a-e\"]) = CharSet matching a,b,c,d,e\n+     * </pre>\n+     *\n+     * @param set  the set, may be null\n+     * @return a CharSet instance, <code>null</code> if null input\n      */\n     public static CharSet evaluateSet(String[] set) {\n+        if (set == null) {\n+            return null;\n+        }\n         return new CharSet(set); \n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Squeezes any repititions of a character that is mentioned in the\n      * supplied set.</p>\n      *\n-     * <p>An example is:</p>\n-     * <ul>\n-     *  <li>squeeze(&quot;hello&quot;, &quot;el&quot;) => &quot;helo&quot;</li>\n-     * </ul>\n-     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n+     * <pre>\n+     * CharSetUtils.squeeze(null, *)        = null\n+     * CharSetUtils.squeeze(\"\", *)          = \"\"\n+     * CharSetUtils.squeeze(*, null)        = *\n+     * CharSetUtils.squeeze(*, \"\")          = *\n+     * CharSetUtils.squeeze(\"hello\", \"k-p\") = \"helo\"\n+     * CharSetUtils.squeeze(\"hello\", \"a-e\") = \"hello\"\n+     * </pre>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  the string to squeeze, may be null\n-     * @param set  the character set to use for manipulation, must not be null\n+     * @param set  the character set to use for manipulation, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String squeeze(String str, String set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n+            return str;\n         }\n         String[] strs = new String[1];\n         strs[0] = set;\n@@ -128,17 +168,15 @@ public static String squeeze(String str, String set) {\n      * <ul>\n      *   <li>squeeze(&quot;hello&quot;, {&quot;el&quot;}) => &quot;helo&quot;</li>\n      * </ul>\n-     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * \n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  the string to squeeze, may be null\n-     * @param set  the character set to use for manipulation, must not be null\n+     * @param set  the character set to use for manipulation, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n      */\n     public static String squeeze(String str, String[] set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n+            return str;\n         }\n         CharSet chars = evaluateSet(set);\n         StringBuffer buffer = new StringBuffer(str.length());\n@@ -159,22 +197,27 @@ public static String squeeze(String str, String[] set) {\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and returns the number of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n-     * </ul>\n+     * <pre>\n+     * CharSetUtils.count(null, *)        = 0\n+     * CharSetUtils.count(\"\", *)          = 0\n+     * CharSetUtils.count(*, null)        = 0\n+     * CharSetUtils.count(*, \"\")          = 0\n+     * CharSetUtils.count(\"hello\", \"k-p\") = 3\n+     * CharSetUtils.count(\"hello\", \"a-e\") = 1\n+     * </pre>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to count characters in, may be null\n-     * @param set  String set of characters to count, must not be null\n+     * @param set  String set of characters to count, may be null\n      * @return character count, zero if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static int count(String str, String set) {\n-        if (str == null) {\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n             return 0;\n         }\n         String[] strs = new String[1];\n@@ -191,14 +234,13 @@ public static int count(String str, String set) {\n      *  <li>count(&quot;hello&quot;, {&quot;c-f&quot;, &quot;o&quot;}) returns 2.</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to count characters in, may be null\n-     * @param set  String[] set of characters to count, must not be null\n+     * @param set  String[] set of characters to count, may be null\n      * @return character count, zero if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n      */\n     public static int count(String str, String[] set) {\n-        if (str == null) {\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n             return 0;\n         }\n         CharSet chars = evaluateSet(set);\n@@ -213,24 +255,32 @@ public static int count(String str, String[] set) {\n         return count;\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and keeps any of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>keep(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n-     * </ul>\n+     * <pre>\n+     * CharSetUtils.keep(null, *)        = null\n+     * CharSetUtils.keep(\"\", *)          = \"\"\n+     * CharSetUtils.keep(*, null)        = \"\"\n+     * CharSetUtils.keep(*, \"\")          = \"\"\n+     * CharSetUtils.keep(\"hello\", \"hl\") = \"hll\"\n+     * CharSetUtils.keep(\"hello\", \"le\") = \"ell\"\n+     * </pre>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to keep characters from, may be null\n-     * @param set  String set of characters to keep, must not be null\n+     * @param set  String set of characters to keep, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String keep(String str, String set) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.length() == 0 || set == null || set.length() == 0) {\n+            return \"\";\n+        }\n         String[] strs = new String[1];\n         strs[0] = set;\n         return keep(str, strs);\n@@ -246,36 +296,43 @@ public static String keep(String str, String set) {\n      *   returns &quot;hll&quot;</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to keep characters from, may be null\n-     * @param set  String[] set of characters to keep, must not be null\n+     * @param set  String[] set of characters to keep, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n      */\n     public static String keep(String str, String[] set) {\n         if (str == null) {\n             return null;\n         }\n+        if (str.length() == 0 || set == null || set.length == 0) {\n+            return \"\";\n+        }\n         return modify(str, set, true);\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Takes an argument in set-syntax, see evaluateSet,\n      * and deletes any of characters present in the specified string.</p>\n      *\n-     * <p>An example would be:</p>\n-     * <ul>\n-     *   <li>delete(&quot;hello&quot;, {&quot;c-fo&quot;}) returns &quot;hll&quot;</li>\n-     * </ul>\n+     * <pre>\n+     * CharSetUtils.delete(null, *)        = null\n+     * CharSetUtils.delete(\"\", *)          = \"\"\n+     * CharSetUtils.delete(*, null)        = *\n+     * CharSetUtils.delete(*, \"\")          = *\n+     * CharSetUtils.delete(\"hello\", \"hl\") = \"hll\"\n+     * CharSetUtils.delete(\"hello\", \"le\") = \"ell\"\n+     * </pre>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to delete characters from, may be null\n-     * @param set  String set of characters to delete, must not be null\n+     * @param set  String set of characters to delete, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n      */\n     public static String delete(String str, String set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length() == 0) {\n+            return str;\n         }\n         String[] strs = new String[1];\n         strs[0] = set;\n@@ -292,19 +349,19 @@ public static String delete(String str, String set) {\n      *   &quot;hll&quot;</li>\n      * </ul>\n      *\n+     * @see #evaluateSet(java.lang.String[]) for set-syntax.\n      * @param str  String to delete characters from, may be null\n-     * @param set  String[] set of characters to delete, must not be null\n+     * @param set  String[] set of characters to delete, may be null\n      * @return modified String, <code>null</code> if null string input\n-     * @throws NullPointerException if <code>set</code> is <code>null</code>\n-     *  or any element is <code>null</code>\n      */\n     public static String delete(String str, String[] set) {\n-        if (str == null) {\n-            return null;\n+        if (str == null || str.length() == 0 || set == null || set.length == 0) {\n+            return str;\n         }\n         return modify(str, set, false);\n     }\n \n+    //-----------------------------------------------------------------------\n     // Implementation of delete and keep\n     private static String modify(String str, String[] set, boolean expect) {\n         CharSet chars = evaluateSet(set);\n@@ -319,6 +376,7 @@ private static String modify(String str, String[] set, boolean expect) {\n         return buffer.toString();\n     }\n \n+    //-----------------------------------------------------------------------\n     /**\n      * <p>Translate characters in a String.\n      * This is a multi character search and replace routine.</p>",
                "raw_url": "https://github.com/apache/commons-lang/raw/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/java/org/apache/commons/lang/CharSetUtils.java",
                "sha": "a6d6b001fc03f30ea1835d68f35c67ba57df4920",
                "status": "modified"
            },
            {
                "additions": 139,
                "blob_url": "https://github.com/apache/commons-lang/blob/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/test/org/apache/commons/lang/CharSetUtilsTest.java",
                "changes": 190,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/org/apache/commons/lang/CharSetUtilsTest.java?ref=4926914ecbaec6a092f2398af3f5e8468f5f53b5",
                "deletions": 51,
                "filename": "src/test/org/apache/commons/lang/CharSetUtilsTest.java",
                "patch": "@@ -67,7 +67,7 @@\n  * @author <a href=\"mailto:bayard@generationjava.com\">Henri Yandell</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n  * @author Stephen Colebourne\n- * @version $Id: CharSetUtilsTest.java,v 1.10 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: CharSetUtilsTest.java,v 1.11 2003/07/31 21:32:47 scolebourne Exp $\n  */\n public class CharSetUtilsTest extends TestCase {\n     \n@@ -104,89 +104,177 @@ public void testConstructor() {\n     }\n     \n     //-----------------------------------------------------------------------\n-    public void testSqueeze() {\n-        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n+    public void testEvaluateSet_String() {\n+        assertEquals(null, CharSetUtils.evaluateSet((String) null));\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(\"\").toString());\n+        assertEquals(\"[a-e]\", CharSetUtils.evaluateSet(\"a-e\").toString());\n+    }\n+    \n+    public void testEvaluateSet_Stringarray() {\n+        assertEquals(null, CharSetUtils.evaluateSet((String[]) null));\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[0]).toString());\n+        assertEquals(\"[]\", CharSetUtils.evaluateSet(new String[] {null}).toString());\n+        assertEquals(\"[a-e]\", CharSetUtils.evaluateSet(new String[] {\"a-e\"}).toString());\n+    }\n+    \n+    //-----------------------------------------------------------------------\n+    public void testSqueeze_StringString() {\n         assertEquals(null, CharSetUtils.squeeze(null, (String) null));\n-        assertEquals(null, CharSetUtils.squeeze(null, new String[] { \"el\" }));\n-        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.squeeze(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String) null));\n         assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"\"));\n-        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] { \"el\" }));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", \"a-e\"));\n+        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", \"l-p\"));\n+    }\n+    \n+    public void testSqueeze_StringStringarray() {\n+        assertEquals(null, CharSetUtils.squeeze(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[0]));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.squeeze(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.squeeze(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"helo\", CharSetUtils.squeeze(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.squeeze(\"hello\", new String[] { \"e\" }));\n         assertEquals(\"fofof\", CharSetUtils.squeeze(\"fooffooff\", new String[] { \"of\" }));\n         assertEquals(\"fof\", CharSetUtils.squeeze(\"fooooff\", new String[] { \"fo\" }));\n-        try {\n-            CharSetUtils.squeeze(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.squeeze(\"hello\", new String[] { \"\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n     }\n \n-    public void testCount() {\n-        assertEquals(0, CharSetUtils.count(null, (String[]) null));\n+    //-----------------------------------------------------------------------\n+    public void testCount_StringString() {\n         assertEquals(0, CharSetUtils.count(null, (String) null));\n-        assertEquals(0, CharSetUtils.count(null, new String[] { \"el\" }));\n+        assertEquals(0, CharSetUtils.count(null, \"\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"\", \"\"));\n+        assertEquals(0, CharSetUtils.count(\"\", \"a-e\"));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n+        assertEquals(1, CharSetUtils.count(\"hello\", \"a-e\"));\n+        assertEquals(3, CharSetUtils.count(\"hello\", \"l-p\"));\n+    }\n+    \n+    public void testCount_StringStringarray() {\n+        assertEquals(0, CharSetUtils.count(null, (String[]) null));\n+        assertEquals(0, CharSetUtils.count(null, new String[0]));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {null}));\n+        assertEquals(0, CharSetUtils.count(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(0, CharSetUtils.count(\"hello\", (String[]) null));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[0]));\n+        assertEquals(0, CharSetUtils.count(\"hello\", new String[] {null}));\n+        assertEquals(1, CharSetUtils.count(\"hello\", new String[] {\"a-e\"}));\n+        \n         assertEquals(3, CharSetUtils.count(\"hello\", new String[] { \"el\" }));\n-        assertEquals(0, CharSetUtils.count(\"\", new String[] { \"el\" }));\n         assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"x\" }));\n         assertEquals(2, CharSetUtils.count(\"hello\", new String[] { \"e-i\" }));\n         assertEquals(5, CharSetUtils.count(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(0, CharSetUtils.count(\"hello\", new String[] { \"\" }));\n-        assertEquals(0, CharSetUtils.count(\"hello\", \"\"));\n-        try {\n-            CharSetUtils.count(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.count(\"hello\", new String[] { \"\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n     }\n \n-    public void testKeep() {\n-        assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n+    //-----------------------------------------------------------------------\n+    public void testKeep_StringString() {\n         assertEquals(null, CharSetUtils.keep(null, (String) null));\n-        assertEquals(null, CharSetUtils.keep(null, new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.keep(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", \"a-e\"));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"xyz\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"a-z\"));\n+        assertEquals(\"hello\", CharSetUtils.keep(\"hello\", \"oleh\"));\n+        assertEquals(\"ell\", CharSetUtils.keep(\"hello\", \"el\"));\n+    }\n+    \n+    public void testKeep_StringStringarray() {\n+        assertEquals(null, CharSetUtils.keep(null, (String[]) null));\n+        assertEquals(null, CharSetUtils.keep(null, new String[0]));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.keep(null, new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.keep(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] {null}));\n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"e\", CharSetUtils.keep(\"hello\", new String[] { \"a-e\" }));\n         assertEquals(\"ell\", CharSetUtils.keep(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"elho\" }));\n-        assertEquals(\"\", CharSetUtils.keep(\"hello\", new String[] { \"\" }));\n-        assertEquals(\"\", CharSetUtils.keep(\"hello\", \"\"));\n         assertEquals(\"hello\", CharSetUtils.keep(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"----\", CharSetUtils.keep(\"----\", new String[] { \"-\" }));\n         assertEquals(\"ll\", CharSetUtils.keep(\"hello\", new String[] { \"l\" }));\n-        try {\n-            CharSetUtils.keep(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.keep(\"hello\", new String[] { \"\", null});\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n     }\n \n-    public void testDelete() {\n+    //-----------------------------------------------------------------------\n+    public void testDelete_StringString() {\n+        assertEquals(null, CharSetUtils.delete(null, (String) null));\n+        assertEquals(null, CharSetUtils.delete(null, \"\"));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"\"));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", \"a-e\"));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n+        assertEquals(\"hllo\", CharSetUtils.delete(\"hello\", \"a-e\"));\n+        assertEquals(\"he\", CharSetUtils.delete(\"hello\", \"l-p\"));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"z\"));\n+    }\n+    \n+    public void testDelete_StringStringarray() {\n         assertEquals(null, CharSetUtils.delete(null, (String[]) null));\n-        assertEquals(null, CharSetUtils.delete(null,(String) null));\n-        assertEquals(null, CharSetUtils.delete(null, new String[] { \"el\" }));\n+        assertEquals(null, CharSetUtils.delete(null, new String[0]));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {null}));\n+        assertEquals(null, CharSetUtils.delete(null, new String[] {\"el\"}));\n+        \n+        assertEquals(\"\", CharSetUtils.delete(\"\", (String[]) null));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[0]));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {null}));\n+        assertEquals(\"\", CharSetUtils.delete(\"\", new String[] {\"a-e\"}));\n+        \n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", (String[]) null));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[0]));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {null}));\n+        assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] {\"xyz\"}));\n+\n         assertEquals(\"ho\", CharSetUtils.delete(\"hello\", new String[] { \"el\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"elho\" }));\n         assertEquals(\"hello\", CharSetUtils.delete(\"hello\", new String[] { \"\" }));\n         assertEquals(\"hello\", CharSetUtils.delete(\"hello\", \"\"));\n         assertEquals(\"\", CharSetUtils.delete(\"hello\", new String[] { \"a-z\" }));\n         assertEquals(\"\", CharSetUtils.delete(\"----\", new String[] { \"-\" }));\n         assertEquals(\"heo\", CharSetUtils.delete(\"hello\", new String[] { \"l\" }));\n-        try {\n-            CharSetUtils.delete(\"hello\", (String[]) null);\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n-        try {\n-            CharSetUtils.delete(\"hello\",  new String[] { \"-\", null });\n-            fail(\"Expecting NullPointerException\");\n-        } catch (NullPointerException ex) {}\n     }\n     \n+    //-----------------------------------------------------------------------\n     public void testTranslate() {\n         assertEquals(null, CharSetUtils.translate(null, null, null));\n         assertEquals(\"\", CharSetUtils.translate(\"\",\"a\", \"b\"));",
                "raw_url": "https://github.com/apache/commons-lang/raw/4926914ecbaec6a092f2398af3f5e8468f5f53b5/src/test/org/apache/commons/lang/CharSetUtilsTest.java",
                "sha": "c7d5de5ad0678b3ec725ec68b0e738b6abbd3f01",
                "status": "modified"
            }
        ],
        "message": "Fix CharSetUtils to not throw NPE all the time\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137538 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/357851bdb1830b1275221b28aee676f9860e1d8b",
        "patched_files": [
            "CharSetUtils.java",
            "CharSet.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "CharSetUtilsTest.java"
        ]
    },
    "commons-lang_52d6e24": {
        "bug_id": "commons-lang_52d6e24",
        "commit": "https://github.com/apache/commons-lang/commit/52d6e24d19465e6f468839650c969d5931f66d65",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-lang/blob/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/ClassUtils.java?ref=52d6e24d19465e6f468839650c969d5931f66d65",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "patch": "@@ -1053,9 +1053,8 @@ public static Method getPublicMethod(final Class<?> cls, final String methodName\n      */\n     private static String toCanonicalName(String className) {\n         className = StringUtils.deleteWhitespace(className);\n-        if (className == null) {\n-            throw new NullPointerException(\"className must not be null.\");\n-        } else if (className.endsWith(\"[]\")) {\n+        Validate.notNull(className, \"className must not be null.\");\n+        if (className.endsWith(\"[]\")) {\n             final StringBuilder classNameBuffer = new StringBuilder();\n             while (className.endsWith(\"[]\")) {\n                 className = className.substring(0, className.length() - 2);",
                "raw_url": "https://github.com/apache/commons-lang/raw/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "sha": "60395ef946fac341537793314e3d353e99fde47b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-lang/blob/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/ObjectUtils.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/ObjectUtils.java?ref=52d6e24d19465e6f468839650c969d5931f66d65",
                "deletions": 12,
                "filename": "src/main/java/org/apache/commons/lang3/ObjectUtils.java",
                "patch": "@@ -353,9 +353,7 @@ public static String identityToString(final Object object) {\n      * @since 3.2\n      */\n     public static void identityToString(final Appendable appendable, final Object object) throws IOException {\n-        if (object == null) {\n-            throw new NullPointerException(\"Cannot get the toString of a null identity\");\n-        }\n+        Validate.notNull(object, \"Cannot get the toString of a null identity\");\n         appendable.append(object.getClass().getName())\n               .append('@')\n               .append(Integer.toHexString(System.identityHashCode(object)));\n@@ -379,9 +377,7 @@ public static void identityToString(final Appendable appendable, final Object ob\n      */\n     @Deprecated\n     public static void identityToString(final StrBuilder builder, final Object object) {\n-        if (object == null) {\n-            throw new NullPointerException(\"Cannot get the toString of a null identity\");\n-        }\n+        Validate.notNull(object, \"Cannot get the toString of a null identity\");\n         builder.append(object.getClass().getName())\n               .append('@')\n               .append(Integer.toHexString(System.identityHashCode(object)));\n@@ -403,9 +399,7 @@ public static void identityToString(final StrBuilder builder, final Object objec\n      * @since 2.4\n      */\n     public static void identityToString(final StringBuffer buffer, final Object object) {\n-        if (object == null) {\n-            throw new NullPointerException(\"Cannot get the toString of a null identity\");\n-        }\n+        Validate.notNull(object, \"Cannot get the toString of a null identity\");\n         buffer.append(object.getClass().getName())\n               .append('@')\n               .append(Integer.toHexString(System.identityHashCode(object)));\n@@ -427,9 +421,7 @@ public static void identityToString(final StringBuffer buffer, final Object obje\n      * @since 3.2\n      */\n     public static void identityToString(final StringBuilder builder, final Object object) {\n-        if (object == null) {\n-            throw new NullPointerException(\"Cannot get the toString of a null identity\");\n-        }\n+        Validate.notNull(object, \"Cannot get the toString of a null identity\");\n         builder.append(object.getClass().getName())\n               .append('@')\n               .append(Integer.toHexString(System.identityHashCode(object)));",
                "raw_url": "https://github.com/apache/commons-lang/raw/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/ObjectUtils.java",
                "sha": "13d1256c5ec5c23e67106cb5facdc26d4036be1b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-lang/blob/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/Range.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/Range.java?ref=52d6e24d19465e6f468839650c969d5931f66d65",
                "deletions": 4,
                "filename": "src/main/java/org/apache/commons/lang3/Range.java",
                "patch": "@@ -285,10 +285,8 @@ public boolean isBefore(final T element) {\n      * @return -1, 0 or +1 depending on the element's location relative to the range\n      */\n     public int elementCompareTo(final T element) {\n-        if (element == null) {\n-            // Comparable API says throw NPE on null\n-            throw new NullPointerException(\"Element is null\");\n-        }\n+        // Comparable API says throw NPE on null\n+        Validate.notNull(element, \"Element is null\");\n         if (isAfter(element)) {\n             return -1;\n         } else if (isBefore(element)) {",
                "raw_url": "https://github.com/apache/commons-lang/raw/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/Range.java",
                "sha": "29ad7a331e3fd773d5b3d8802f66b806e78f28c0",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/commons-lang/blob/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java?ref=52d6e24d19465e6f468839650c969d5931f66d65",
                "deletions": 12,
                "filename": "src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java",
                "patch": "@@ -20,6 +20,8 @@\n import java.util.concurrent.ThreadFactory;\n import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.commons.lang3.Validate;\n+\n /**\n  * <p>\n  * An implementation of the {@code ThreadFactory} interface that provides some\n@@ -278,10 +280,7 @@ private void initializeThread(final Thread t) {\n          * is <b>null</b>\n          */\n         public Builder wrappedFactory(final ThreadFactory factory) {\n-            if (factory == null) {\n-                throw new NullPointerException(\n-                        \"Wrapped ThreadFactory must not be null!\");\n-            }\n+            Validate.notNull(factory, \"Wrapped ThreadFactory must not be null!\");\n \n             wrappedFactory = factory;\n             return this;\n@@ -296,10 +295,7 @@ public Builder wrappedFactory(final ThreadFactory factory) {\n          * @throws NullPointerException if the naming pattern is <b>null</b>\n          */\n         public Builder namingPattern(final String pattern) {\n-            if (pattern == null) {\n-                throw new NullPointerException(\n-                        \"Naming pattern must not be null!\");\n-            }\n+            Validate.notNull(pattern, \"Naming pattern must not be null!\");\n \n             namingPattern = pattern;\n             return this;\n@@ -341,10 +337,7 @@ public Builder priority(final int prio) {\n          */\n         public Builder uncaughtExceptionHandler(\n                 final Thread.UncaughtExceptionHandler handler) {\n-            if (handler == null) {\n-                throw new NullPointerException(\n-                        \"Uncaught exception handler must not be null!\");\n-            }\n+            Validate.notNull(handler, \"Uncaught exception handler must not be null!\");\n \n             exceptionHandler = handler;\n             return this;",
                "raw_url": "https://github.com/apache/commons-lang/raw/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/concurrent/BasicThreadFactory.java",
                "sha": "b25a51a4f87b67e56b8870ea334fc4c37844e916",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/time/FormatCache.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/time/FormatCache.java?ref=52d6e24d19465e6f468839650c969d5931f66d65",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/lang3/time/FormatCache.java",
                "patch": "@@ -25,6 +25,8 @@\n import java.util.concurrent.ConcurrentHashMap;\n import java.util.concurrent.ConcurrentMap;\n \n+import org.apache.commons.lang3.Validate;\n+\n /**\n  * <p>FormatCache is a cache and factory for {@link Format}s.</p>\n  * \n@@ -67,9 +69,7 @@ public F getInstance() {\n      *  or <code>null</code>\n      */\n     public F getInstance(final String pattern, TimeZone timeZone, Locale locale) {\n-        if (pattern == null) {\n-            throw new NullPointerException(\"pattern must not be null\");\n-        }\n+        Validate.notNull(pattern, \"pattern must not be null\");\n         if (timeZone == null) {\n             timeZone = TimeZone.getDefault();\n         }",
                "raw_url": "https://github.com/apache/commons-lang/raw/52d6e24d19465e6f468839650c969d5931f66d65/src/main/java/org/apache/commons/lang3/time/FormatCache.java",
                "sha": "22850f6325a57c036deb124ff6924e80d23116b6",
                "status": "modified"
            }
        ],
        "message": "use Validate#notNull instead of \"throw new NullPointerException\"",
        "parent": "https://github.com/apache/commons-lang/commit/82cc24437f43d07880d8883229477735431e5d02",
        "patched_files": [
            "BasicThreadFactory.java",
            "Range.java",
            "ObjectUtils.java",
            "ClassUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "RangeTest.java",
            "ObjectUtilsTest.java",
            "ClassUtilsTest.java",
            "BasicThreadFactoryTest.java"
        ]
    },
    "commons-lang_5556026": {
        "bug_id": "commons-lang_5556026",
        "commit": "https://github.com/apache/commons-lang/commit/5556026ed1dc17e70946a4a030842ade3a33baeb",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/5556026ed1dc17e70946a4a030842ade3a33baeb/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/time/FastDateParser.java?ref=5556026ed1dc17e70946a4a030842ade3a33baeb",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "patch": "@@ -853,6 +853,9 @@ int modify(FastDateParser parser, final int iValue) {\n                 final TimeZone tz = TimeZone.getTimeZone(tzId);\n                 for(int i= 1; i<zoneNames.length; ++i) {\n                     String zoneName = zoneNames[i];\n+                    if (zoneName == null) {\n+                        break;\n+                    }\n                     if (tzNames.put(zoneName.toLowerCase(locale), tz) == null) {\n                         simpleQuote(sb.append('|'), zoneName);\n                     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/5556026ed1dc17e70946a4a030842ade3a33baeb/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "sha": "6abcd0352143c1b34070ea886bf4a262f3f69fd8",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/5556026ed1dc17e70946a4a030842ade3a33baeb/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java?ref=5556026ed1dc17e70946a4a030842ade3a33baeb",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "patch": "@@ -33,7 +33,9 @@ public void testTimeZoneStrategyPattern() {\n             for(final String[] zone :  zones) {\n                 for(int t = 1; t<zone.length; ++t) {\n                     final String tzDisplay = zone[t];\n-\n+                    if (tzDisplay == null) {\n+                        break;\n+                    }\n                     try {\n                         parser.parse(tzDisplay);\n                     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/5556026ed1dc17e70946a4a030842ade3a33baeb/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "sha": "be08454b5ba7565a402b376d3d0a881c9006a32a",
                "status": "modified"
            }
        ],
        "message": "Fix NullPointerException in FastDateParser$TimeZoneStrategy",
        "parent": "https://github.com/apache/commons-lang/commit/56907c9a96a50af44415111fcea3e76ce4d1890f",
        "patched_files": [
            "FastDateParser.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "FastDateParserTest.java",
            "FastDateParser_TimeZoneStrategyTest.java"
        ]
    },
    "commons-lang_56550bf": {
        "bug_id": "commons-lang_56550bf",
        "commit": "https://github.com/apache/commons-lang/commit/56550bf2779990da78d2bac1d8287c8a693c6e4b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/56550bf2779990da78d2bac1d8287c8a693c6e4b/src/java/org/apache/commons/lang3/StringUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/java/org/apache/commons/lang3/StringUtils.java?ref=56550bf2779990da78d2bac1d8287c8a693c6e4b",
                "deletions": 0,
                "filename": "src/java/org/apache/commons/lang3/StringUtils.java",
                "patch": "@@ -3673,6 +3673,9 @@ private static String replaceEach(String text, String[] searchList, String[] rep\n \n         // count the replacement text elements that are larger than their corresponding text being replaced\n         for (int i = 0; i < searchList.length; i++) {\n+            if (searchList[i] == null || replacementList[i] == null) {\n+                continue;\n+            }\n             int greater = replacementList[i].length() - searchList[i].length();\n             if (greater > 0) {\n                 increase += 3 * greater; // assume 3 matches",
                "raw_url": "https://github.com/apache/commons-lang/raw/56550bf2779990da78d2bac1d8287c8a693c6e4b/src/java/org/apache/commons/lang3/StringUtils.java",
                "sha": "f6cabeed86c3dd567cb4567b318e4f756054cdce",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-lang/blob/56550bf2779990da78d2bac1d8287c8a693c6e4b/src/test/org/apache/commons/lang3/StringUtilsTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/org/apache/commons/lang3/StringUtilsTest.java?ref=56550bf2779990da78d2bac1d8287c8a693c6e4b",
                "deletions": 0,
                "filename": "src/test/org/apache/commons/lang3/StringUtilsTest.java",
                "patch": "@@ -1033,6 +1033,10 @@ public void testReplace_StringStringArrayStringArray() {\n                 \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\", \"N\", \"O\", \"P\", \"Q\", \n                 \"R\", \"S\", \"T\", \"U\", \"V\", \"W\", \"X\", \"Y\", \"Z\", \"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \n                 \"H\", \"I\", \"J\", \"K\", \"L\", \"M\", \"5\", \"6\", \"7\", \"8\", \"9\", \"1\", \"2\", \"3\", \"4\"}));\n+\n+        // Test null safety inside arrays - LANG-552\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\"}, new String[]{null}),\"aba\");\n+        assertEquals(StringUtils.replaceEach(\"aba\", new String[]{\"a\", \"b\"}, new String[]{\"c\", null}),\"cbc\");\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/commons-lang/raw/56550bf2779990da78d2bac1d8287c8a693c6e4b/src/test/org/apache/commons/lang3/StringUtilsTest.java",
                "sha": "7a74598a69fdfdff0491e8d11e661480951b3c8f",
                "status": "modified"
            }
        ],
        "message": "Applying fix for LANG-552. StringUtils.replaceEach(String, String[], String[]) no longer NPEs when null appears in the last String[]\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@890212 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/dafb8e85dcb76a299c6add11ecb62acf702d6c2a",
        "patched_files": [
            "StringUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "StringUtilsTest.java"
        ]
    },
    "commons-lang_5cc5694": {
        "bug_id": "commons-lang_5cc5694",
        "commit": "https://github.com/apache/commons-lang/commit/5cc5694b0e9eb6f51ea64734de3db566323354fd",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/5cc5694b0e9eb6f51ea64734de3db566323354fd/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java?ref=5cc5694b0e9eb6f51ea64734de3db566323354fd",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.lang3.concurrent;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.regex.Pattern;\n@@ -50,9 +51,8 @@ public void setUp() throws Exception {\n      */\n     private void checkEquals(Object obj, boolean expected) {\n         assertEquals(\"Wrong result of equals\", expected, init.equals(obj));\n-        if (obj != null) {\n-            assertEquals(\"Not symmetric\", expected, obj.equals(init));\n-        }\n+        assertNotNull(obj);\n+        assertEquals(\"Not symmetric\", expected, obj.equals(init));\n         if (expected) {\n             assertEquals(\"Different hash codes\", init.hashCode(),\n                     obj.hashCode());",
                "raw_url": "https://github.com/apache/commons-lang/raw/5cc5694b0e9eb6f51ea64734de3db566323354fd/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "sha": "74c11ea1d3191afbbd8c519d2218d0ebc6b165f7",
                "status": "modified"
            }
        ],
        "message": "Check for Null and avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1034828 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/5b76976ce8a9c3e2d7bd7ff175e24def890f9114",
        "patched_files": [
            "ConstantInitializer.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "ConstantInitializerTest.java"
        ]
    },
    "commons-lang_6bb8717": {
        "bug_id": "commons-lang_6bb8717",
        "commit": "https://github.com/apache/commons-lang/commit/6bb871786e563ed82e2b8d26314c22772808fe5d",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/6bb871786e563ed82e2b8d26314c22772808fe5d/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java?ref=6bb871786e563ed82e2b8d26314c22772808fe5d",
                "deletions": 3,
                "filename": "src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java",
                "patch": "@@ -174,7 +174,7 @@ public void testThreadsById() throws InterruptedException {\n         try {\n             t1.start();\n             t2.start();\n-            assertEquals(t1.getName(), ThreadUtils.findThreadById(t1.getId()).getName());\n+            assertSame(t1, ThreadUtils.findThreadById(t1.getId()));\n             assertSame(t2, ThreadUtils.findThreadById(t2.getId()));\n         } finally {\n             t1.interrupt();\n@@ -261,8 +261,8 @@ public void testThreadGroupsById() throws InterruptedException {\n         try {\n             t1.start();\n             t2.start();\n-            assertEquals(t1.getName(), ThreadUtils.findThreadById(t1.getId(),\"thread_group_DDZZ99__\").getName());\n-            assertEquals(t2.getName(), ThreadUtils.findThreadById(t2.getId(),\"thread_group_DDZZ99__\").getName());\n+            assertSame(t1, ThreadUtils.findThreadById(t1.getId(),\"thread_group_DDZZ99__\"));\n+            assertSame(t2, ThreadUtils.findThreadById(t2.getId(),\"thread_group_DDZZ99__\"));\n             assertNull(ThreadUtils.findThreadById(nonExistingId,\"non_existent_thread_group_JJHHZZ__\"));\n             assertNull(ThreadUtils.findThreadById(nonExistingId,\"thread_group_DDZZ99__\"));\n         } finally {",
                "raw_url": "https://github.com/apache/commons-lang/raw/6bb871786e563ed82e2b8d26314c22772808fe5d/src/test/java/org/apache/commons/lang3/ThreadUtilsTest.java",
                "sha": "b0ad3100652950c018dc4fadaa18e6bbfffac5cf",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE by checking for object identity instead of comparing one property only",
        "parent": "https://github.com/apache/commons-lang/commit/8ac3334a04928faab627aef4daf4ac51c28a95ef",
        "patched_files": [
            "ThreadUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "ThreadUtilsTest.java"
        ]
    },
    "commons-lang_87b920c": {
        "bug_id": "commons-lang_87b920c",
        "commit": "https://github.com/apache/commons-lang/commit/87b920c44bee6e45790e241d21b1fdab24289ae7",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/commons-lang/blob/87b920c44bee6e45790e241d21b1fdab24289ae7/src/java/org/apache/commons/lang/BooleanUtils.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/java/org/apache/commons/lang/BooleanUtils.java?ref=87b920c44bee6e45790e241d21b1fdab24289ae7",
                "deletions": 3,
                "filename": "src/java/org/apache/commons/lang/BooleanUtils.java",
                "patch": "@@ -66,7 +66,7 @@\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n  * @since 2.0\n- * @version $Id: BooleanUtils.java,v 1.10 2003/07/31 22:30:07 scolebourne Exp $\n+ * @version $Id: BooleanUtils.java,v 1.11 2003/07/31 23:55:57 scolebourne Exp $\n  */\n public class BooleanUtils {\n \n@@ -654,12 +654,23 @@ public static boolean xor(boolean[] array) {\n      * \n      * @param array  an array of <code>Boolean<code>s\n      * @return <code>true</code> if the xor is successful.\n-     * @throws NullPointerException if <code>array</code> contains a <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is <code>null</code>\n      * @throws IllegalArgumentException if <code>array</code> is empty.\n+     * @throws IllegalArgumentException if <code>array</code> contains a <code>null</code>\n      */\n     public static Boolean xor(Boolean[] array) {\n-        return (xor(ArrayUtils.toPrimitive(array)) ? Boolean.TRUE : Boolean.FALSE);\n+        if (array == null) {\n+            throw new IllegalArgumentException(\"The Array must not be null\");\n+        } else if (array.length == 0) {\n+            throw new IllegalArgumentException(\"Array is empty\");\n+        }\n+        boolean[] primitive = null;\n+        try {\n+            primitive = ArrayUtils.toPrimitive(array);\n+        } catch (NullPointerException ex) {\n+            throw new IllegalArgumentException(\"The array must not conatin any null elements\");\n+        }\n+        return (xor(primitive) ? Boolean.TRUE : Boolean.FALSE);\n     }\n \n }",
                "raw_url": "https://github.com/apache/commons-lang/raw/87b920c44bee6e45790e241d21b1fdab24289ae7/src/java/org/apache/commons/lang/BooleanUtils.java",
                "sha": "06b99cd16effaa204921eb223dbb8c87411a5a0a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/commons-lang/blob/87b920c44bee6e45790e241d21b1fdab24289ae7/src/test/org/apache/commons/lang/BooleanUtilsTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/org/apache/commons/lang/BooleanUtilsTest.java?ref=87b920c44bee6e45790e241d21b1fdab24289ae7",
                "deletions": 1,
                "filename": "src/test/org/apache/commons/lang/BooleanUtilsTest.java",
                "patch": "@@ -66,7 +66,7 @@\n  *\n  * @author Stephen Colebourne\n  * @author Matthew Hawthorne\n- * @version $Id: BooleanUtilsTest.java,v 1.5 2003/07/30 22:21:39 scolebourne Exp $\n+ * @version $Id: BooleanUtilsTest.java,v 1.6 2003/07/31 23:55:57 scolebourne Exp $\n  */\n public class BooleanUtilsTest extends TestCase {\n \n@@ -466,6 +466,13 @@ public void testXor_object_emptyInput() {\n             fail(\"Exception was not thrown for empty input.\");\n         } catch (IllegalArgumentException ex) {}\n     }\n+    \n+    public void testXor_object_nullElementInput() {\n+        try {\n+            BooleanUtils.xor(new Boolean[] {null});\n+            fail(\"Exception was not thrown for null element input.\");\n+        } catch (IllegalArgumentException ex) {}\n+    }\n \n     public void testXor_object_validInput_2items() {\n         assertTrue(\n@@ -565,6 +572,7 @@ public void testXor_object_validInput_3items() {\n                         Boolean.TRUE,\n                         Boolean.TRUE })\n                 .booleanValue());\n+                \n     }\n \n }",
                "raw_url": "https://github.com/apache/commons-lang/raw/87b920c44bee6e45790e241d21b1fdab24289ae7/src/test/org/apache/commons/lang/BooleanUtilsTest.java",
                "sha": "c3dfbe501f3b02f9734d600de0d9dc3d2f1b6e75",
                "status": "modified"
            }
        ],
        "message": "Hide NPE from ArrayUtils as IAE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137546 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/bcfc9c2602b35bb4a6e5012430b4bfcc36796fd4",
        "patched_files": [
            "BooleanUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "BooleanUtilsTest.java"
        ]
    },
    "commons-lang_8f675dd": {
        "bug_id": "commons-lang_8f675dd",
        "commit": "https://github.com/apache/commons-lang/commit/8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b/src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/ClassUtils.java?ref=8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "patch": "@@ -890,7 +890,8 @@ private static String toCanonicalName(String className) {\n     }\n \n     /**\n-     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.</p>\n+     * <p>Converts an array of <code>Object</code> in to an array of <code>Class</code> objects.\n+     * If any of these objects is null, a null element will be inserted into the array.</p>\n      *\n      * <p>This method returns <code>null</code> for a <code>null</code> input array.</p>\n      *\n@@ -906,7 +907,7 @@ private static String toCanonicalName(String className) {\n         }\n         Class<?>[] classes = new Class[array.length];\n         for (int i = 0; i < array.length; i++) {\n-            classes[i] = array[i].getClass();\n+            classes[i] = array[i] == null ? null : array[i].getClass();\n         }\n         return classes;\n     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b/src/main/java/org/apache/commons/lang3/ClassUtils.java",
                "sha": "3998966a7500da2afa8131428262840251f8a875",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java?ref=8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
                "patch": "@@ -906,6 +906,9 @@ public void testToClass_object() {\n \n         assertTrue(Arrays.equals(new Class[] { String.class, Integer.class, Double.class },\n                 ClassUtils.toClass(new Object[] { \"Test\", 1, 99d })));\n+\n+        assertTrue(Arrays.equals(new Class[] { String.class, null, Double.class },\n+                ClassUtils.toClass(new Object[] { \"Test\", null, 99d })));\n     }\n \n     public void test_getShortCanonicalName_Object() {",
                "raw_url": "https://github.com/apache/commons-lang/raw/8f675dd3cbfb8f552bdbbe1cfc646ba5b367983b/src/test/java/org/apache/commons/lang3/ClassUtilsTest.java",
                "sha": "010ea93420e1b30e1d0b8c9520017980a5f306f3",
                "status": "modified"
            }
        ],
        "message": "[LANG-587] avoid NPE in ClassUtils.toClass(Object[])\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@907102 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/5d5a31a8274ff7e8219ee87fdd15b48c2184ccc0",
        "patched_files": [
            "ClassUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "ClassUtilsTest.java"
        ]
    },
    "commons-lang_9f59280": {
        "bug_id": "commons-lang_9f59280",
        "commit": "https://github.com/apache/commons-lang/commit/9f5928035e2d6f7f24d07270bc4752f041d8cf6b",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/commons-lang/blob/9f5928035e2d6f7f24d07270bc4752f041d8cf6b/src/test/org/apache/commons/lang/NumberRangeTest.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/org/apache/commons/lang/NumberRangeTest.java?ref=9f5928035e2d6f7f24d07270bc4752f041d8cf6b",
                "deletions": 1,
                "filename": "src/test/org/apache/commons/lang/NumberRangeTest.java",
                "patch": "@@ -64,7 +64,7 @@\n  *\n  * @author <a href=\"mailto:chrise@esha.com\">Christopher Elkins</a>\n  * @author <a href=\"mailto:ridesmet@users.sourceforge.net\">Ringo De Smet</a>\n- * @version $Revision: 1.1 $ $Date: 2002/07/19 03:35:55 $\n+ * @version $Revision: 1.2 $ $Date: 2002/10/08 19:14:20 $\n  */\n \n public final class NumberRangeTest extends TestCase {\n@@ -175,6 +175,45 @@ public void testIncludesRange() {\n         assertEquals(expected, result);\n     }\n \n+\tpublic void testConstructorNullParameters()\n+\t{\n+\t\ttry\n+\t\t{\n+\t\t\tNumberRange nr = new NumberRange(null);\n+\t\t\tfail(\"NumberRange(null) did not throw an exception.\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tassertTrue(\n+\t\t\t\t\"NumberRange(null)\",\n+\t\t\t\te instanceof NullPointerException);\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tNumberRange nr = new NumberRange(five, null);\n+\t\t\tfail(\"NumberRange(five, null) did not throw an exception.\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tassertTrue(\n+\t\t\t\t\"NumberRange(five, null)\",\n+\t\t\t\te instanceof NullPointerException);\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tNumberRange nr = new NumberRange(null, five);\n+\t\t\tfail(\"NumberRange(null, five) did not throw an exception.\");\n+\t\t}\n+\t\tcatch (Exception e)\n+\t\t{\n+\t\t\tassertTrue(\n+\t\t\t\t\"NumberRange(null, five)\",\n+\t\t\t\te instanceof NullPointerException);\n+\t\t}\n+\n+\t}\n \n     public void testToString() {\n         String expected = \"10-20\";",
                "raw_url": "https://github.com/apache/commons-lang/raw/9f5928035e2d6f7f24d07270bc4752f041d8cf6b/src/test/org/apache/commons/lang/NumberRangeTest.java",
                "sha": "ddf6f9b8dacfd769abb6f11b37e7e3f20aa2db55",
                "status": "modified"
            }
        ],
        "message": "added tests for NullPointerException\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137090 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/77d19cd26ac4b9ffe4ee9036bbc2569da37573e3",
        "patched_files": [
            "NumberRange.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "NumberRangeTest.java"
        ]
    },
    "commons-lang_a618b84": {
        "bug_id": "commons-lang_a618b84",
        "commit": "https://github.com/apache/commons-lang/commit/a618b844c5a261ced37385ab3947de6e215d46f7",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-lang/blob/a618b844c5a261ced37385ab3947de6e215d46f7/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/changes/changes.xml?ref=a618b844c5a261ced37385ab3947de6e215d46f7",
                "deletions": 1,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -45,7 +45,8 @@ The <action> type attribute can be add,update,fix,remove.\n   </properties>\n   <body>\n \n-  <release version=\"3.7\" date=\"2017-MM-DD\" description=\"New features and bug fixes. Requires Java 7.\">\n+  <release version=\"3.7\" date=\"2017-MM-DD\" description=\"New features and bug fixes. Requires Java 7, supports Java 8, 9, 10.\">\n+    <action issue=\"LANG-1365\" type=\"fix\" dev=\"ggregory\" due-to=\"Gary Gregory\">Fix NullPointerException in isJavaVersionAtLeast on Java 10, add SystemUtils.IS_JAVA_10, add JavaVersion.JAVA_10</action>\n     <action issue=\"LANG-1358\" type=\"update\" dev=\"pschumacher\" due-to=\"Stephane Landelle\">Improve StringUtils#replace throughput</action>\n     <action issue=\"LANG-1355\" type=\"add\" dev=\"ggregory\" due-to=\"Chas Honton\">TimeZone.getTimeZone() in FastDateParser causes resource contention (PR #296.)</action>\n     <action issue=\"LANG-1348\" type=\"fix\" dev=\"pschumacher\" due-to=\"mbusso\">StackOverflowError on TypeUtils.toString(...) for a generic return type of Enum.valueOf</action>",
                "raw_url": "https://github.com/apache/commons-lang/raw/a618b844c5a261ced37385ab3947de6e215d46f7/src/changes/changes.xml",
                "sha": "cbc17a03df9b97888e6a490a2030690128b22e94",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/commons-lang/blob/a618b844c5a261ced37385ab3947de6e215d46f7/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/JavaVersion.java?ref=a618b844c5a261ced37385ab3947de6e215d46f7",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "patch": "@@ -82,9 +82,18 @@\n \n     /**\n      * Java 9\n+     * \n+     * @since 3.5\n      */\n     JAVA_9(9.0f, \"9\"),\n \n+    /**\n+     * Java 10\n+     * \n+     * @since 3.7\n+     */\n+    JAVA_10(10.0f, \"10\"),\n+\n     /**\n      * The most recent java version. Mainly introduced to avoid to break when a new version of Java is used.\n      */\n@@ -168,6 +177,8 @@ static JavaVersion get(final String nom) {\n             return JAVA_1_8;\n         } else if (\"9\".equals(nom)) {\n             return JAVA_9;\n+        } else if (\"10\".equals(nom)) {\n+            return JAVA_10;\n         }\n         if (nom == null) {\n             return null;",
                "raw_url": "https://github.com/apache/commons-lang/raw/a618b844c5a261ced37385ab3947de6e215d46f7/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "sha": "666624d55871da8ce58d38598b1288ea394f972e",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/commons-lang/blob/a618b844c5a261ced37385ab3947de6e215d46f7/src/main/java/org/apache/commons/lang3/SystemUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/SystemUtils.java?ref=a618b844c5a261ced37385ab3947de6e215d46f7",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/SystemUtils.java",
                "patch": "@@ -973,6 +973,18 @@\n      */\n     public static final boolean IS_JAVA_9 = getJavaVersionMatches(\"9\");\n \n+    /**\n+     * <p>\n+     * Is {@code true} if this is Java version 10 (also 10.x versions).\n+     * </p>\n+     * <p>\n+     * The field will return {@code false} if {@link #JAVA_VERSION} is {@code null}.\n+     * </p>\n+     *\n+     * @since 3.7\n+     */\n+    public static final boolean IS_JAVA_10 = getJavaVersionMatches(\"10\");\n+\n     // Operating system checks\n     // -----------------------------------------------------------------------\n     // These MUST be declared after those above as they depend on the",
                "raw_url": "https://github.com/apache/commons-lang/raw/a618b844c5a261ced37385ab3947de6e215d46f7/src/main/java/org/apache/commons/lang3/SystemUtils.java",
                "sha": "74a90fca5e065cdb2c34a48cbe16b52b0b0f244c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-lang/blob/a618b844c5a261ced37385ab3947de6e215d46f7/src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/JavaVersionTest.java?ref=a618b844c5a261ced37385ab3947de6e215d46f7",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "patch": "@@ -34,6 +34,7 @@\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_7;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_8;\n import static org.apache.commons.lang3.JavaVersion.JAVA_9;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_10;\n import static org.apache.commons.lang3.JavaVersion.get;\n import static org.apache.commons.lang3.JavaVersion.getJavaVersion;\n \n@@ -54,6 +55,7 @@ public void testGetJavaVersion() {\n         assertEquals(\"1.7 failed\", JAVA_1_7, get(\"1.7\"));\n         assertEquals(\"1.8 failed\", JAVA_1_8, get(\"1.8\"));\n         assertEquals(\"9 failed\", JAVA_9, get(\"9\"));\n+        assertEquals(\"10 failed\", JAVA_10, get(\"10\"));\n         assertEquals(\"1.10 failed\", JAVA_RECENT, get(\"1.10\"));\n         // assertNull(\"2.10 unexpectedly worked\", get(\"2.10\"));\n         assertEquals(\"Wrapper method failed\", get(\"1.5\"), getJavaVersion(\"1.5\"));",
                "raw_url": "https://github.com/apache/commons-lang/raw/a618b844c5a261ced37385ab3947de6e215d46f7/src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "sha": "4d4202c49bc80b45f38c3962535b5ac3952ac144",
                "status": "modified"
            },
            {
                "additions": 32,
                "blob_url": "https://github.com/apache/commons-lang/blob/a618b844c5a261ced37385ab3947de6e215d46f7/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java?ref=a618b844c5a261ced37385ab3947de6e215d46f7",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
                "patch": "@@ -28,6 +28,7 @@\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_7;\n import static org.apache.commons.lang3.JavaVersion.JAVA_1_8;\n import static org.apache.commons.lang3.JavaVersion.JAVA_9;\n+import static org.apache.commons.lang3.JavaVersion.JAVA_10;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -119,6 +120,7 @@ public void testIS_JAVA() {\n             assertFalse(SystemUtils.IS_JAVA_1_8);\n             assertFalse(SystemUtils.IS_JAVA_1_9);\n             assertFalse(SystemUtils.IS_JAVA_9);\n+            assertFalse(SystemUtils.IS_JAVA_10);\n         } else if (javaVersion.startsWith(\"1.7\")) {\n             assertFalse(SystemUtils.IS_JAVA_1_1);\n             assertFalse(SystemUtils.IS_JAVA_1_2);\n@@ -130,6 +132,7 @@ public void testIS_JAVA() {\n             assertFalse(SystemUtils.IS_JAVA_1_8);\n             assertFalse(SystemUtils.IS_JAVA_1_9);\n             assertFalse(SystemUtils.IS_JAVA_9);\n+            assertFalse(SystemUtils.IS_JAVA_10);\n         } else if (javaVersion.startsWith(\"1.8\")) {\n             assertFalse(SystemUtils.IS_JAVA_1_1);\n             assertFalse(SystemUtils.IS_JAVA_1_2);\n@@ -141,6 +144,7 @@ public void testIS_JAVA() {\n             assertTrue(SystemUtils.IS_JAVA_1_8);\n             assertFalse(SystemUtils.IS_JAVA_1_9);\n             assertFalse(SystemUtils.IS_JAVA_9);\n+            assertFalse(SystemUtils.IS_JAVA_10);\n         } else if (javaVersion.startsWith(\"9\")) {\n             assertFalse(SystemUtils.IS_JAVA_1_1);\n             assertFalse(SystemUtils.IS_JAVA_1_2);\n@@ -152,8 +156,21 @@ public void testIS_JAVA() {\n             assertFalse(SystemUtils.IS_JAVA_1_8);\n             assertTrue(SystemUtils.IS_JAVA_1_9);\n             assertTrue(SystemUtils.IS_JAVA_9);\n+            assertFalse(SystemUtils.IS_JAVA_10);\n+        } else if (javaVersion.startsWith(\"10\")) {\n+            assertFalse(SystemUtils.IS_JAVA_1_1);\n+            assertFalse(SystemUtils.IS_JAVA_1_2);\n+            assertFalse(SystemUtils.IS_JAVA_1_3);\n+            assertFalse(SystemUtils.IS_JAVA_1_4);\n+            assertFalse(SystemUtils.IS_JAVA_1_5);\n+            assertFalse(SystemUtils.IS_JAVA_1_6);\n+            assertFalse(SystemUtils.IS_JAVA_1_7);\n+            assertFalse(SystemUtils.IS_JAVA_1_8);\n+            assertFalse(SystemUtils.IS_JAVA_1_9);\n+            assertFalse(SystemUtils.IS_JAVA_9);\n+            assertTrue(SystemUtils.IS_JAVA_10);\n         } else {\n-            System.out.println(\"Can't test IS_JAVA value: \"+javaVersion);\n+            System.out.println(\"Can't test IS_JAVA value: \" + javaVersion);\n         }\n     }\n \n@@ -390,6 +407,7 @@ public void testIsJavaVersionAtLeast() throws Exception {\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));\n             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));\n             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));\n+            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));\n         } else if (SystemUtils.IS_JAVA_1_8) {\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));\n@@ -400,6 +418,7 @@ public void testIsJavaVersionAtLeast() throws Exception {\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));\n             assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_9));\n+            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));\n         } else if (SystemUtils.IS_JAVA_9) {\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));\n@@ -410,6 +429,18 @@ public void testIsJavaVersionAtLeast() throws Exception {\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));\n             assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));\n+            assertFalse(SystemUtils.isJavaVersionAtLeast(JAVA_10));\n+        } else if (SystemUtils.IS_JAVA_10) {\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_1));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_2));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_3));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_4));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_5));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_6));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_7));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_1_8));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_9));\n+            assertTrue(SystemUtils.isJavaVersionAtLeast(JAVA_10));\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/commons-lang/raw/a618b844c5a261ced37385ab3947de6e215d46f7/src/test/java/org/apache/commons/lang3/SystemUtilsTest.java",
                "sha": "b97cb811331a44dbf357c4bd1261b149d9fb3571",
                "status": "modified"
            }
        ],
        "message": "[LANG-1365] Fix NullPointerException in isJavaVersionAtLeast on Java 10,\nadd SystemUtils.IS_JAVA_10, add JavaVersion.JAVA_10.",
        "parent": "https://github.com/apache/commons-lang/commit/a26c66a8edcf029ca5f94354cee0db267e9ccc20",
        "patched_files": [
            "JavaVersion.java",
            "SystemUtils.java",
            "changes.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "JavaVersionTest.java",
            "SystemUtilsTest.java"
        ]
    },
    "commons-lang_a80f11c": {
        "bug_id": "commons-lang_a80f11c",
        "commit": "https://github.com/apache/commons-lang/commit/a80f11cf9d02d2517c7f230f24949cbebaafc0c2",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-lang/blob/a80f11cf9d02d2517c7f230f24949cbebaafc0c2/src/main/java/org/apache/commons/lang3/StringUtils.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/StringUtils.java?ref=a80f11cf9d02d2517c7f230f24949cbebaafc0c2",
                "deletions": 12,
                "filename": "src/main/java/org/apache/commons/lang3/StringUtils.java",
                "patch": "@@ -3290,13 +3290,12 @@ public static String join(Object[] array, char separator, int startIndex, int en\n         if (array == null) {\n             return null;\n         }\n-        int bufSize = (endIndex - startIndex);\n-        if (bufSize <= 0) {\n+        int noOfItems = (endIndex - startIndex);\n+        if (noOfItems <= 0) {\n             return EMPTY;\n         }\n-\n-        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length()) + 1);\n-        StringBuilder buf = new StringBuilder(bufSize);\n+        \n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {\n@@ -3309,7 +3308,6 @@ public static String join(Object[] array, char separator, int startIndex, int en\n         return buf.toString();\n     }\n \n-\n     /**\n      * <p>Joins the elements of the provided array into a single String\n      * containing the provided list of elements.</p>\n@@ -3377,15 +3375,12 @@ public static String join(Object[] array, String separator, int startIndex, int\n \n         // endIndex - startIndex > 0:   Len = NofStrings *(len(firstString) + len(separator))\n         //           (Assuming that all Strings are roughly equally long)\n-        int bufSize = (endIndex - startIndex);\n-        if (bufSize <= 0) {\n+        int noOfItems = (endIndex - startIndex);\n+        if (noOfItems <= 0) {\n             return EMPTY;\n         }\n \n-        bufSize *= ((array[startIndex] == null ? 16 : array[startIndex].toString().length())\n-                        + separator.length());\n-\n-        StringBuilder buf = new StringBuilder(bufSize);\n+        StringBuilder buf = new StringBuilder(noOfItems * 16);\n \n         for (int i = startIndex; i < endIndex; i++) {\n             if (i > startIndex) {",
                "raw_url": "https://github.com/apache/commons-lang/raw/a80f11cf9d02d2517c7f230f24949cbebaafc0c2/src/main/java/org/apache/commons/lang3/StringUtils.java",
                "sha": "711852ecbf17fbaab5509e946b1c75a50ee82730",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/commons-lang/blob/a80f11cf9d02d2517c7f230f24949cbebaafc0c2/src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/StringUtilsTest.java?ref=a80f11cf9d02d2517c7f230f24949cbebaafc0c2",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
                "patch": "@@ -67,6 +67,14 @@\n     private static final String[] ARRAY_LIST = { \"foo\", \"bar\", \"baz\" };\n     private static final String[] EMPTY_ARRAY_LIST = {};\n     private static final String[] NULL_ARRAY_LIST = {null};\n+    private static final Object[] NULL_TO_STRING_LIST = {\n+    \tnew Object(){\n+    \t\t@Override\n+    \t\tpublic String toString() {\n+    \t\t\treturn null;\n+    \t\t}\n+    \t}\n+    };\n     private static final String[] MIXED_ARRAY_LIST = {null, \"\", \"foo\"};\n     private static final Object[] MIXED_TYPE_LIST = {\"foo\", Long.valueOf(2L)};\n \n@@ -182,6 +190,7 @@ public void testJoin_Objectarray() {\n \n         assertEquals(\"\", StringUtils.join(EMPTY_ARRAY_LIST));\n         assertEquals(\"\", StringUtils.join(NULL_ARRAY_LIST));\n+        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST));\n         assertEquals(\"abc\", StringUtils.join(new String[] {\"a\", \"b\", \"c\"}));\n         assertEquals(\"a\", StringUtils.join(new String[] {null, \"a\", \"\"}));\n         assertEquals(\"foo\", StringUtils.join(MIXED_ARRAY_LIST));\n@@ -197,6 +206,7 @@ public void testJoin_ArrayChar() {\n \n         assertEquals(\"/\", StringUtils.join(MIXED_ARRAY_LIST, '/', 0, MIXED_ARRAY_LIST.length-1));\n         assertEquals(\"foo\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 1));\n+        assertEquals(\"null\", StringUtils.join(NULL_TO_STRING_LIST,'/', 0, 1));\n         assertEquals(\"foo/2\", StringUtils.join(MIXED_TYPE_LIST, '/', 0, 2));\n         assertEquals(\"2\", StringUtils.join(MIXED_TYPE_LIST, '/', 1, 2));\n         assertEquals(\"\", StringUtils.join(MIXED_TYPE_LIST, '/', 2, 1));",
                "raw_url": "https://github.com/apache/commons-lang/raw/a80f11cf9d02d2517c7f230f24949cbebaafc0c2/src/test/java/org/apache/commons/lang3/StringUtilsTest.java",
                "sha": "a49311b922246aa7c876ebca7413749cb9f69022",
                "status": "modified"
            }
        ],
        "message": "Applying Ilya's patch from LANG-703 fixing an NPE when toString returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1142381 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/f5cb67acd964ee173967081205eb30c43ba585c3",
        "patched_files": [
            "StringUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "StringUtilsTest.java"
        ]
    },
    "commons-lang_c14890f": {
        "bug_id": "commons-lang_c14890f",
        "commit": "https://github.com/apache/commons-lang/commit/c14890f08b9bb47ab8ad27f4dd4c714e32961d0d",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-lang/blob/c14890f08b9bb47ab8ad27f4dd4c714e32961d0d/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/time/FastDateParser.java?ref=c14890f08b9bb47ab8ad27f4dd4c714e32961d0d",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "patch": "@@ -866,11 +866,13 @@ int modify(final FastDateParser parser, final int iValue) {\n                         tzInfo = standard;\n                         break;\n                     }\n-                    final String key = zoneNames[i].toLowerCase(locale);\n-                    // ignore the data associated with duplicates supplied in\n-                    // the additional names\n-                    if (sorted.add(key)) {\n-                        tzNames.put(key, tzInfo);\n+                    if (zoneNames[i] != null) {\n+                        final String key = zoneNames[i].toLowerCase(locale);\n+                        // ignore the data associated with duplicates supplied in\n+                        // the additional names\n+                        if (sorted.add(key)) {\n+                            tzNames.put(key, tzInfo);\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/commons-lang/raw/c14890f08b9bb47ab8ad27f4dd4c714e32961d0d/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "sha": "a9470d30ed8d69efb6aa28ff5860c1aa57029d87",
                "status": "modified"
            }
        ],
        "message": "LANG-1285: NullPointerException in FastDateParser$TimeZoneStrategy (closes #212)\n\nReplicate the fix for LANG-1186",
        "parent": "https://github.com/apache/commons-lang/commit/fd80301b1eeb4b2db55a09aeb54348faacec11cd",
        "patched_files": [
            "FastDateParser.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "FastDateParserTest.java"
        ]
    },
    "commons-lang_c8cc651": {
        "bug_id": "commons-lang_c8cc651",
        "commit": "https://github.com/apache/commons-lang/commit/c8cc65165143ead3df00f05c9eedaf23ad095bf9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-lang/blob/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/changes/changes.xml",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/changes/changes.xml?ref=c8cc65165143ead3df00f05c9eedaf23ad095bf9",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -22,6 +22,7 @@\n   <body>\n \n   <release version=\"3.5\" date=\"tba\" description=\"tba\">\n+    <action issue=\"LANG-1186\" type=\"fix\" dev=\"chas\" due-to=\"NickManley\">Fix NullPointerException in FastDateParser$TimeZoneStrategy</action>\n     <action issue=\"LANG-1193\" type=\"fix\" dev=\"sebb\" due-to=\"Qin Li\">ordinalIndexOf(\"abc\", \"ab\", 1) gives incorrect answer of -1 (correct answer should be 0); revert fix for LANG-1077</action>\n     <action issue=\"LANG-1182\" type=\"update\" dev=\"britter\" due-to=\"Larry West, Pascal Schumacher\">Clarify JavaDoc of StringUtils.containsAny()</action>\n     <action issue=\"LANG-1169\" type=\"add\" dev=\"lguibert\" due-to=\"Rafal Glowinski, Robert Parr, Arman Sharif\">Add StringUtils methods to compare a string to multiple strings</action>",
                "raw_url": "https://github.com/apache/commons-lang/raw/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/changes/changes.xml",
                "sha": "6bc6cb15e737cea979827d18c2163c746b3702a5",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/time/FastDateParser.java?ref=c8cc65165143ead3df00f05c9eedaf23ad095bf9",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "patch": "@@ -855,6 +855,9 @@ int modify(FastDateParser parser, final int iValue) {\n                 final TimeZone tz = TimeZone.getTimeZone(tzId);\n                 for(int i= 1; i<zoneNames.length; ++i) {\n                     String zoneName = zoneNames[i];\n+                    if (zoneName == null) {\n+                        break;\n+                    }\n                     if (tzNames.put(zoneName.toLowerCase(locale), tz) == null) {\n                         simpleQuote(sb.append('|'), zoneName);\n                     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/main/java/org/apache/commons/lang3/time/FastDateParser.java",
                "sha": "a1fc8279160c4dc63a50f4f05024dcebd1cb5b6b",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java?ref=c8cc65165143ead3df00f05c9eedaf23ad095bf9",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "patch": "@@ -33,7 +33,9 @@ public void testTimeZoneStrategyPattern() {\n             for(final String[] zone :  zones) {\n                 for(int t = 1; t<zone.length; ++t) {\n                     final String tzDisplay = zone[t];\n-\n+                    if (tzDisplay == null) {\n+                        break;\n+                    }\n                     try {\n                         parser.parse(tzDisplay);\n                     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/c8cc65165143ead3df00f05c9eedaf23ad095bf9/src/test/java/org/apache/commons/lang3/time/FastDateParser_TimeZoneStrategyTest.java",
                "sha": "be08454b5ba7565a402b376d3d0a881c9006a32a",
                "status": "modified"
            }
        ],
        "message": "Merge branch 'master' of https://github.com/NickManley/commons-lang\nThis closes #117\nLANG-1186 Fix NullPointerException in FastDateParser$TimeZoneStrategy",
        "parent": "https://github.com/apache/commons-lang/commit/1002c9e243883654f9c1e6beae643fb4e72fc172",
        "patched_files": [
            "FastDateParser.java",
            "changes.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "FastDateParserTest.java",
            "FastDateParser_TimeZoneStrategyTest.java"
        ]
    },
    "commons-lang_c92f2bc": {
        "bug_id": "commons-lang_c92f2bc",
        "commit": "https://github.com/apache/commons-lang/commit/c92f2bcf4cc274062acaa7e9d31a67dc977662d8",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/c92f2bcf4cc274062acaa7e9d31a67dc977662d8/src/main/java/org/apache/commons/lang3/time/DateUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/time/DateUtils.java?ref=c92f2bcf4cc274062acaa7e9d31a67dc977662d8",
                "deletions": 7,
                "filename": "src/main/java/org/apache/commons/lang3/time/DateUtils.java",
                "patch": "@@ -312,7 +312,8 @@ private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n             throw new IllegalArgumentException(\"Date and Patterns must not be null\");\n         }\n         \n-        SimpleDateFormat parser = null;\n+        SimpleDateFormat parser = new SimpleDateFormat();\n+        parser.setLenient(lenient);\n         ParsePosition pos = new ParsePosition(0);\n         for (int i = 0; i < parsePatterns.length; i++) {\n \n@@ -323,12 +324,7 @@ private static Date parseDateWithLeniency(String str, String[] parsePatterns,\n                 pattern = pattern.substring(0, pattern.length() - 1);\n             }\n             \n-            if (i == 0) {\n-                parser = new SimpleDateFormat(pattern);\n-                parser.setLenient(lenient);\n-            } else {\n-                parser.applyPattern(pattern); // cannot be null if i != 0\n-            }\n+            parser.applyPattern(pattern);\n             pos.setIndex(0);\n \n             String str2 = str;",
                "raw_url": "https://github.com/apache/commons-lang/raw/c92f2bcf4cc274062acaa7e9d31a67dc977662d8/src/main/java/org/apache/commons/lang3/time/DateUtils.java",
                "sha": "2b6fc6feca7288f9375b0ce02776102a4ed2cb9d",
                "status": "modified"
            }
        ],
        "message": "Simplify code (eliminate conditional check) and avoid NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@902955 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/a6c13a17c066f2cd89d71ed1879aed2f286921ad",
        "patched_files": [
            "DateUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "DateUtilsTest.java"
        ]
    },
    "commons-lang_cb68667": {
        "bug_id": "commons-lang_cb68667",
        "commit": "https://github.com/apache/commons-lang/commit/cb686673a70a6f14c35575550c48c37d19a1598b",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-lang/blob/cb686673a70a6f14c35575550c48c37d19a1598b/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/JavaVersion.java?ref=cb686673a70a6f14c35575550c48c37d19a1598b",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "patch": "@@ -191,6 +191,8 @@ static JavaVersion get(final String nom) {\n             if (Float.parseFloat(nom.substring(firstComma + 1, end)) > .9f) {\n                 return JAVA_RECENT;\n             }\n+        } else if (v > 10) {\n+            return JAVA_RECENT;\n         }\n         return null;\n     }",
                "raw_url": "https://github.com/apache/commons-lang/raw/cb686673a70a6f14c35575550c48c37d19a1598b/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "sha": "60258f63a545fb4d4fc11bf1ce1522094aefc2d5",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-lang/blob/cb686673a70a6f14c35575550c48c37d19a1598b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/JavaVersionTest.java?ref=cb686673a70a6f14c35575550c48c37d19a1598b",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "patch": "@@ -59,6 +59,7 @@ public void testGetJavaVersion() {\n         assertEquals(\"1.10 failed\", JAVA_RECENT, get(\"1.10\"));\n         // assertNull(\"2.10 unexpectedly worked\", get(\"2.10\"));\n         assertEquals(\"Wrapper method failed\", get(\"1.5\"), getJavaVersion(\"1.5\"));\n+        assertEquals(\"Unhandled\", JAVA_RECENT, get(\"11\")); // LANG-1384\n     }\n \n     @Test",
                "raw_url": "https://github.com/apache/commons-lang/raw/cb686673a70a6f14c35575550c48c37d19a1598b/src/test/java/org/apache/commons/lang3/JavaVersionTest.java",
                "sha": "ad285654f44ded083ae5cc898fb3b42f6af62bb2",
                "status": "modified"
            }
        ],
        "message": "LANG-1384: Fix NPE when version >= 11\n\nThe fix is likely to be insufficient if the version naming scheme changes.",
        "parent": "https://github.com/apache/commons-lang/commit/0820c4c895f6e7c9ef4860d7373675550c87ac6c",
        "patched_files": [
            "JavaVersion.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "JavaVersionTest.java"
        ]
    },
    "commons-lang_cccbf94": {
        "bug_id": "commons-lang_cccbf94",
        "commit": "https://github.com/apache/commons-lang/commit/cccbf94e72fcdfadcaad5800acc8f871e4ef3246",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-lang/blob/cccbf94e72fcdfadcaad5800acc8f871e4ef3246/src/main/java/org/apache/commons/lang3/AnnotationUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/AnnotationUtils.java?ref=cccbf94e72fcdfadcaad5800acc8f871e4ef3246",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/lang3/AnnotationUtils.java",
                "patch": "@@ -59,7 +59,7 @@ protected String getShortClassName(java.lang.Class<?> cls) {\n                     break;\n                 }\n             }\n-            return new StringBuilder(annotationType == null ? null : annotationType.getName())\n+            return new StringBuilder(annotationType == null ? \"\" : annotationType.getName())\n                     .insert(0, '@').toString();\n         }\n ",
                "raw_url": "https://github.com/apache/commons-lang/raw/cccbf94e72fcdfadcaad5800acc8f871e4ef3246/src/main/java/org/apache/commons/lang3/AnnotationUtils.java",
                "sha": "273ccae3bb7dabe2f5f215dc3a279a3a46b3c371",
                "status": "modified"
            }
        ],
        "message": "Changing the StringBuilder to build around an empty String and not null, as null will cause an NPE. Reported by FindBugs\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1006333 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/039f4566a9445d917b327156f69d0c16954ee756",
        "patched_files": [
            "AnnotationUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "AnnotationUtilsTest.java"
        ]
    },
    "commons-lang_d34dce4": {
        "bug_id": "commons-lang_d34dce4",
        "commit": "https://github.com/apache/commons-lang/commit/d34dce48e5cd02ef1f078a939741d79fab3c39d0",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/commons-lang/blob/d34dce48e5cd02ef1f078a939741d79fab3c39d0/src/main/java/org/apache/commons/lang3/BooleanUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/BooleanUtils.java?ref=d34dce48e5cd02ef1f078a939741d79fab3c39d0",
                "deletions": 0,
                "filename": "src/main/java/org/apache/commons/lang3/BooleanUtils.java",
                "patch": "@@ -52,6 +52,8 @@ public BooleanUtils() {\n      * \n      * <p>If <code>null</code> is passed in, <code>null</code> will be returned.</p>\n      *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.negate(Boolean.TRUE)  = Boolean.FALSE;\n      *   BooleanUtils.negate(Boolean.FALSE) = Boolean.TRUE;\n@@ -234,6 +236,8 @@ public static Boolean toBooleanObject(int value) {\n      * \n      * <p><code>null</code> will be converted to <code>null</code>.</p>\n      *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.toBoolean(new Integer(0))    = Boolean.FALSE\n      *   BooleanUtils.toBoolean(new Integer(1))    = Boolean.TRUE\n@@ -315,6 +319,8 @@ public static boolean toBoolean(Integer value, Integer trueValue, Integer falseV\n     /**\n      * <p>Converts an int to a Boolean specifying the conversion values.</p>\n      * \n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.toBooleanObject(0, 0, 2, 3) = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(2, 1, 2, 3) = Boolean.FALSE\n@@ -343,6 +349,8 @@ public static Boolean toBooleanObject(int value, int trueValue, int falseValue,\n     /**\n      * <p>Converts an Integer to a Boolean specifying the conversion values.</p>\n      * \n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.toBooleanObject(new Integer(0), new Integer(0), new Integer(2), new Integer(3)) = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(new Integer(2), new Integer(1), new Integer(2), new Integer(3)) = Boolean.FALSE\n@@ -528,6 +536,8 @@ public static Integer toIntegerObject(Boolean bool, Integer trueValue, Integer f\n      * (case insensitive) will return <code>false</code>.\n      * Otherwise, <code>null</code> is returned.</p>\n      *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.toBooleanObject(null)    = null\n      *   BooleanUtils.toBooleanObject(\"true\")  = Boolean.TRUE\n@@ -642,6 +652,8 @@ public static Boolean toBooleanObject(String str) {\n     /**\n      * <p>Converts a String to a Boolean throwing an exception if no match.</p>\n      *\n+     * <p>NOTE: This returns null and will throw a NullPointerException if autoboxed to a boolean. </p>\n+     *\n      * <pre>\n      *   BooleanUtils.toBooleanObject(\"true\", \"true\", \"false\", \"null\")  = Boolean.TRUE\n      *   BooleanUtils.toBooleanObject(\"false\", \"true\", \"false\", \"null\") = Boolean.FALSE",
                "raw_url": "https://github.com/apache/commons-lang/raw/d34dce48e5cd02ef1f078a939741d79fab3c39d0/src/main/java/org/apache/commons/lang3/BooleanUtils.java",
                "sha": "c7eae2d05fe02059193200cd73b2347c13792f99",
                "status": "modified"
            }
        ],
        "message": "Adding note on potential NPE if autoboxing occurs per LANG-676\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1067606 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/4a29061ad70319e9545f71d208327db3e4192b5e",
        "patched_files": [
            "BooleanUtils.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "BooleanUtilsTest.java"
        ]
    },
    "commons-lang_ea623e5": {
        "bug_id": "commons-lang_ea623e5",
        "commit": "https://github.com/apache/commons-lang/commit/ea623e575eb48564459e840a3ec130d65e370339",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-lang/blob/ea623e575eb48564459e840a3ec130d65e370339/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java?ref=ea623e575eb48564459e840a3ec130d65e370339",
                "deletions": 6,
                "filename": "src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "patch": "@@ -17,7 +17,6 @@\n package org.apache.commons.lang3.concurrent;\n \n import static org.junit.Assert.assertEquals;\n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.regex.Pattern;\n@@ -51,11 +50,12 @@ public void setUp() throws Exception {\n      */\n     private void checkEquals(Object obj, boolean expected) {\n         assertEquals(\"Wrong result of equals\", expected, init.equals(obj));\n-        assertNotNull(obj);\n-        assertEquals(\"Not symmetric\", expected, obj.equals(init));\n-        if (expected) {\n-            assertEquals(\"Different hash codes\", init.hashCode(),\n-                    obj.hashCode());\n+        if (obj != null) {\n+            assertEquals(\"Not symmetric\", expected, obj.equals(init));\n+            if (expected) {\n+                assertEquals(\"Different hash codes\", init.hashCode(),\n+                        obj.hashCode());\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/commons-lang/raw/ea623e575eb48564459e840a3ec130d65e370339/src/test/java/org/apache/commons/lang3/concurrent/ConstantInitializerTest.java",
                "sha": "8b17c6db63a49f0649884ad27a28af3d6e2f8f32",
                "status": "modified"
            }
        ],
        "message": "Revert bad update in r1034828; fix NPE warning a different way\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1034904 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-lang/commit/35ca6531efbbe5c96c2788fcd1801658141d01ee",
        "patched_files": [
            "ConstantInitializer.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "ConstantInitializerTest.java"
        ]
    },
    "commons-lang_f746c50": {
        "bug_id": "commons-lang_f746c50",
        "commit": "https://github.com/apache/commons-lang/commit/f746c508d197c3662509037e8975a2a58b847689",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-lang/blob/f746c508d197c3662509037e8975a2a58b847689/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-lang/contents/src/main/java/org/apache/commons/lang3/JavaVersion.java?ref=f746c508d197c3662509037e8975a2a58b847689",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "patch": "@@ -82,14 +82,14 @@\n \n     /**\n      * Java 9\n-     * \n+     *\n      * @since 3.5\n      */\n     JAVA_9(9.0f, \"9\"),\n \n     /**\n      * Java 10\n-     * \n+     *\n      * @since 3.7\n      */\n     JAVA_10(10.0f, \"10\"),\n@@ -103,6 +103,7 @@\n      * The float value.\n      */\n     private final float value;\n+\n     /**\n      * The standard name.\n      */",
                "raw_url": "https://github.com/apache/commons-lang/raw/f746c508d197c3662509037e8975a2a58b847689/src/main/java/org/apache/commons/lang3/JavaVersion.java",
                "sha": "a0744536355b8f072b50b6325224c30a2402b1ff",
                "status": "modified"
            }
        ],
        "message": "[LANG-1365] Fix NullPointerException in isJavaVersionAtLeast on Java 10, add SystemUtils.IS_JAVA_10, add JavaVersion.JAVA_10.\n\nFix check-style violations.",
        "parent": "https://github.com/apache/commons-lang/commit/63f6be088d790fd597a3dc5d8e981a0872bf112b",
        "patched_files": [
            "JavaVersion.java"
        ],
        "repo": "commons-lang",
        "unit_tests": [
            "JavaVersionTest.java"
        ]
    }
}