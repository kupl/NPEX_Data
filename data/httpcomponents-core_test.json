{
    "httpcomponents-core_30c2b12": {
        "bug_id": "httpcomponents-core_30c2b12",
        "commit": "https://github.com/apache/httpcomponents-core/commit/30c2b1251da8c3315f591415090eeeb43c4d62eb",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/RELEASE_NOTES.txt",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,5 +1,9 @@\n Changes since 4.1-BETA1 \n \n+* [HTTPCORE-228] Fixed NPE in AsyncNHttpServiceHandler caused by entity enclosing requests\n+  if no matching request handler can be found.  \n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCORE-227] Fixed incorrect request / response count by non-blocking connections.\n   Contributed by Harold Lee <harold at hotelling.net>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/RELEASE_NOTES.txt",
                "sha": "16f5c1f6b7100b70409b66c680542fd0b0dacaf9",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "deletions": 11,
                "filename": "httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "patch": "@@ -173,7 +173,8 @@ public void requestReceived(final NHttpServerConnection conn) {\n         try {\n \n             if (request instanceof HttpEntityEnclosingRequest) {\n-                if (((HttpEntityEnclosingRequest) request).expectContinue()) {\n+                HttpEntityEnclosingRequest entityRequest = (HttpEntityEnclosingRequest) request;\n+                if (entityRequest.expectContinue()) {\n                     response = this.responseFactory.newHttpResponse(\n                             ver, HttpStatus.SC_CONTINUE, context);\n                     response.setParams(\n@@ -203,20 +204,19 @@ public void requestReceived(final NHttpServerConnection conn) {\n                     }\n                 }\n                 // Request content is expected.\n-                HttpEntity entity = ((HttpEntityEnclosingRequest) request).getEntity();\n+                ConsumingNHttpEntity consumingEntity = null;\n \n                 // Lookup request handler for this request\n                 if (requestHandler != null) {\n-                    ConsumingNHttpEntity consumingEntity = requestHandler.entityRequest(\n-                            (HttpEntityEnclosingRequest) request, context);\n-                    if (consumingEntity == null) {\n-                        consumingEntity = new ConsumingNHttpEntityTemplate(\n-                                entity,\n-                                new SkipContentListener(this.allocator));\n-                    }\n-                    ((HttpEntityEnclosingRequest) request).setEntity(consumingEntity);\n-                    connState.setConsumingEntity(consumingEntity);\n+                    consumingEntity = requestHandler.entityRequest(entityRequest, context);\n+                }\n+                if (consumingEntity == null) {\n+                    consumingEntity = new ConsumingNHttpEntityTemplate(\n+                            entityRequest.getEntity(),\n+                            new SkipContentListener(this.allocator));\n                 }\n+                entityRequest.setEntity(consumingEntity);\n+                connState.setConsumingEntity(consumingEntity);\n \n             } else {\n                 // No request content is expected.",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/main/java/org/apache/http/nio/protocol/AsyncNHttpServiceHandler.java",
                "sha": "c45c83d115450327d2650f4db1fec2d803b42567",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java?ref=30c2b1251da8c3315f591415090eeeb43c4d62eb",
                "deletions": 11,
                "filename": "httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "patch": "@@ -1009,18 +1009,14 @@ protected HttpRequest generateRequest(Job testjob) {\n         }\n     }\n \n-    /**\n-     * This test case executes a series of simple (non-pipelined) POST requests\n-     * with zero-length entities on the client side.\n-     */\n-    public void testHttpPostWithZeroLengthEntities() throws Exception {\n+    public void testNoRequestHandler() throws Exception {\n         NHttpRequestExecutionHandler requestExecutionHandler = new RequestExecutionHandler() {\n \n             @Override\n             protected HttpRequest generateRequest(Job testjob) {\n                 String s = testjob.getPattern() + \"x\" + testjob.getCount();\n                 HttpEntityEnclosingRequest r = new BasicHttpEntityEnclosingRequest(\"POST\", s);\n-                NByteArrayEntity entity = new NByteArrayEntity(new byte[] {} );\n+                NByteArrayEntity entity = new NByteArrayEntity(new byte[] {1,2,3,4,5} );\n                 entity.setChunked(false);\n                 r.setEntity(entity);\n                 return r;\n@@ -1029,8 +1025,7 @@ protected HttpRequest generateRequest(Job testjob) {\n         };\n \n         int connNo = 3;\n-        int reqNo = 20;\n-        Job[] jobs = new Job[connNo * reqNo];\n+        Job[] jobs = new Job[connNo];\n         for (int i = 0; i < jobs.length; i++) {\n             jobs[i] = new Job();\n         }\n@@ -1053,7 +1048,7 @@ protected HttpRequest generateRequest(Job testjob) {\n                 this.server.getParams());\n \n         serviceHandler.setHandlerResolver(\n-                new SimpleNHttpRequestHandlerResolver(new RequestHandler()));\n+                new SimpleNHttpRequestHandlerResolver(null));\n         serviceHandler.setEventListener(\n                 new SimpleEventListener());\n \n@@ -1104,8 +1099,7 @@ protected HttpRequest generateRequest(Job testjob) {\n             Job testjob = jobs[i];\n             testjob.waitFor();\n             if (testjob.isSuccessful()) {\n-                assertEquals(HttpStatus.SC_OK, testjob.getStatusCode());\n-                assertEquals(\"\", testjob.getResult());\n+                assertEquals(HttpStatus.SC_NOT_IMPLEMENTED, testjob.getStatusCode());\n             } else {\n                 fail(testjob.getFailureMessage());\n             }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/30c2b1251da8c3315f591415090eeeb43c4d62eb/httpcore-nio/src/test/java/org/apache/http/nio/protocol/TestAsyncNHttpHandlers.java",
                "sha": "124436052eeeea6490460219a2414d42b5dc3d18",
                "status": "modified"
            }
        ],
        "message": "HTTPCORE-228: Fixed NPE in AsyncNHttpServiceHandler caused by entity enclosing requests if no matching request handler can be found\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@959930 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-core/commit/810283941c51ad412c526cbc19d536a049b6f6a1",
        "patched_files": [
            "RELEASE_NOTES.java",
            "AsyncNHttpServiceHandler.java"
        ],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestAsyncNHttpHandlers.java"
        ]
    },
    "httpcomponents-core_4a69f19": {
        "bug_id": "httpcomponents-core_4a69f19",
        "commit": "https://github.com/apache/httpcomponents-core/commit/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385/httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/main/java/org/apache/http/entity/ContentType.java?ref=4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385",
                "deletions": 10,
                "filename": "httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "patch": "@@ -217,19 +217,21 @@ private static ContentType create(final HeaderElement helem, final boolean stric\n \n     private static ContentType create(final String mimeType, final NameValuePair[] params, final boolean strict) {\n         Charset charset = null;\n-        for (final NameValuePair param: params) {\n-            if (param.getName().equalsIgnoreCase(\"charset\")) {\n-                final String s = param.getValue();\n-                if (!TextUtils.isBlank(s)) {\n-                    try {\n-                        charset =  Charset.forName(s);\n-                    } catch (UnsupportedCharsetException ex) {\n-                        if (strict) {\n-                            throw ex;\n+        if (params != null) {\n+            for (final NameValuePair param : params) {\n+                if (param.getName().equalsIgnoreCase(\"charset\")) {\n+                    final String s = param.getValue();\n+                    if (!TextUtils.isBlank(s)) {\n+                        try {\n+                            charset = Charset.forName(s);\n+                        } catch (UnsupportedCharsetException ex) {\n+                            if (strict) {\n+                                throw ex;\n+                            }\n                         }\n                     }\n+                    break;\n                 }\n-                break;\n             }\n         }\n         return new ContentType(mimeType, charset, params != null && params.length > 0 ? params : null);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4a69f19f5ed2e00124a5dcfdf5d3334ea4c32385/httpcore/src/main/java/org/apache/http/entity/ContentType.java",
                "sha": "f8413416efbbcd05da095d2294c4ac6a7e4eacd8",
                "status": "modified"
            }
        ],
        "message": "Avoid potential NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1698012 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-core/commit/2353123afc252b10e5924546c69451b4a17e783d",
        "patched_files": [
            "ContentType.java"
        ],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestContentType.java"
        ]
    },
    "httpcomponents-core_4df0462": {
        "bug_id": "httpcomponents-core_4df0462",
        "commit": "https://github.com/apache/httpcomponents-core/commit/4df046258ebbb2da6a5a66c24e656f6229516710",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 7,
                "filename": "httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "patch": "@@ -79,7 +79,7 @@ public static long checkRange(final long value, final long lowInclusive, final l\n \n     public static <T extends CharSequence> T containsNoBlanks(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (argument.length() == 0) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -98,13 +98,13 @@ private static IllegalArgumentException illegalArgumentExceptionNotEmpty(final S\n         return new IllegalArgumentException(name + \" must not be empty\");\n     }\n \n-    private static IllegalArgumentException illegalArgumentExceptionNotNull(final String name) {\n-        return new IllegalArgumentException(name + \" must not be null\");\n+    private static NullPointerException NullPointerException(final String name) {\n+        return new NullPointerException(name + \" must not be null\");\n     }\n \n     public static <T extends CharSequence> T notBlank(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (TextUtils.isBlank(argument)) {\n             throw new IllegalArgumentException(name + \" must not be blank\");\n@@ -114,7 +114,7 @@ private static IllegalArgumentException illegalArgumentExceptionNotNull(final St\n \n     public static <T extends CharSequence> T notEmpty(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (TextUtils.isEmpty(argument)) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -124,7 +124,7 @@ private static IllegalArgumentException illegalArgumentExceptionNotNull(final St\n \n     public static <E, T extends Collection<E>> T notEmpty(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         if (argument.isEmpty()) {\n             throw illegalArgumentExceptionNotEmpty(name);\n@@ -148,7 +148,7 @@ public static long notNegative(final long n, final String name) {\n \n     public static <T> T notNull(final T argument, final String name) {\n         if (argument == null) {\n-            throw illegalArgumentExceptionNotNull(name);\n+            throw NullPointerException(name);\n         }\n         return argument;\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/main/java/org/apache/hc/core5/util/Args.java",
                "sha": "0ee17b6e650cb7da49a95dc3a58c7bef652f1341",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "patch": "@@ -83,8 +83,8 @@ public void testLowCaseText() throws Exception {\n     public void testCreateInvalidInput() throws Exception {\n         try {\n             ContentType.create(null, (String) null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestContentType.java",
                "sha": "e1348d99580abba8cebadec88accaf54af9ddc69",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 4,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "patch": "@@ -68,8 +68,8 @@ public void testConstructor() {\n         Assert.assertEquals(\"https\", host5.getSchemeName());\n         try {\n             new HttpHost(null, (String) null, -1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             new HttpHost(null, \"   \", -1);\n@@ -78,8 +78,8 @@ public void testConstructor() {\n         }\n         try {\n             new HttpHost(null, (InetAddress) null, -1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/TestHttpHost.java",
                "sha": "54019d1df94d5d63844564133bec8ef21be723b2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "patch": "@@ -55,8 +55,8 @@ public void setUp() {\n         context = new BasicHttpContext(null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n-    public void testIllegalResponseArg() throws Exception {\n+    @Test(expected=NullPointerException.class)\n+    public void testInvalidResponseArg() throws Exception {\n         reuseStrategy.keepAlive(null, null, this.context);\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/TestDefaultConnectionReuseStrategy.java",
                "sha": "9252f7bf74048f4b2536c47349e14daaabe26012",
                "status": "modified"
            },
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 18,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "patch": "@@ -61,58 +61,58 @@ public void testInvalidInput() throws Exception {\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(null, conn, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(request, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.execute(request, conn, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n \n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(null, httprocessor, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(request, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.preProcess(request, httprocessor, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n \n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(null, httprocessor, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(response, null, context);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             final HttpRequestExecutor executor = new HttpRequestExecutor();\n             executor.postProcess(response, httprocessor, null);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpRequestExecutor.java",
                "sha": "4c15bef2ab4182e484e4cb2952eeaaf1404cc951",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "patch": "@@ -101,8 +101,8 @@ public void testInvalidInitialization() throws Exception {\n                     handlerResolver,\n                     connReuseStrategy,\n                     responseFactory);\n-            Assert.fail(\"IllegalArgumentException expected\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException expected\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/io/TestHttpService.java",
                "sha": "889efe7ceb847cbfa0015797d8349bac44d7880d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 7,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "patch": "@@ -552,25 +552,25 @@ public void testInvalidConstructor() {\n         final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII);\n         try {\n             new ChunkDecoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkDecoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkDecoder(channel, inbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvalidInput() throws Exception {\n         final String s = \"10;key=\\\"value\\\"\\r\\n1234567890123456\\r\\n\" +\n                 \"5\\r\\n12345\\r\\n5\\r\\n12345\\r\\n0\\r\\nFooter1 abcde\\r\\n\\r\\n\";",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkDecoder.java",
                "sha": "43a935a3cde116e0ee647cae1ae10215c9036933",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "patch": "@@ -213,20 +213,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new ChunkEncoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkEncoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new ChunkEncoder(channel, outbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestChunkEncoder.java",
                "sha": "4427276e115a4084aa9f71d2927f63a32da0c1c4",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 8,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "patch": "@@ -353,20 +353,20 @@ public void testInvalidConstructor() {\n         final SessionInputBuffer inbuf = new SessionInputBufferImpl(1024, 256, 0, StandardCharsets.US_ASCII);\n         try {\n             new IdentityDecoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityDecoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityDecoder(channel, inbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }\n@@ -383,8 +383,8 @@ public void testInvalidInput() throws Exception {\n \n         try {\n             decoder.read(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityDecoder.java",
                "sha": "0df1f1d8a21c680782faac1d487e8fe4dc4e93ff",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "patch": "@@ -130,20 +130,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new IdentityEncoder(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityEncoder(channel, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new IdentityEncoder(channel, outbuf, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestIdentityEncoder.java",
                "sha": "1c8c80b94f9dc703376179a72ded5b6449e916f6",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 8,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "patch": "@@ -499,20 +499,20 @@ public void testInvalidConstructor() {\n         final BasicHttpTransportMetrics metrics = new BasicHttpTransportMetrics();\n         try {\n             new LengthDelimitedDecoder(null, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedDecoder(channel, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedDecoder(channel, inbuf, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n@@ -536,8 +536,8 @@ public void testInvalidInput() throws Exception {\n \n         try {\n             decoder.read(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedDecoder.java",
                "sha": "4ab31d4f65181fee80d85f731aed73efc2414e32",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "patch": "@@ -147,20 +147,20 @@ public void testInvalidConstructor() {\n \n         try {\n             new LengthDelimitedEncoder(null, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedEncoder(channel, null, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {\n             new LengthDelimitedEncoder(channel, outbuf, null, 10);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // ignore\n         }\n         try {",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/impl/nio/TestLengthDelimitedEncoder.java",
                "sha": "be9ff4bcd62bb3962cf24b920010e3f55d4ad594",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "patch": "@@ -74,8 +74,8 @@ public void testWrappingEntity() throws Exception {\n     public void testIllegalConstructor() throws Exception {\n         try {\n             new BufferedHttpEntity(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -106,8 +106,8 @@ public void testWriteToBuffered() throws Exception {\n \n         try {\n             bufentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -138,8 +138,8 @@ public void testWriteToWrapped() throws Exception {\n \n         try {\n             bufentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestBufferedHttpEntity.java",
                "sha": "88c1eaab82c2108dae6fcc4ca142b888e16fe4c9",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 5,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "patch": "@@ -61,7 +61,7 @@ public void testBasicOffLen() throws Exception {\n         Assert.assertFalse(entity.isStreaming());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testIllegalConstructorNullByteArray() throws Exception {\n         new ByteArrayEntity(null, null);\n     }\n@@ -109,8 +109,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             entity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -142,8 +142,8 @@ public void testWriteToOffLen() throws Exception {\n \n         try {\n             entity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteArrayEntity.java",
                "sha": "55fc39cc8b4780f77100971aa0a2d96bafa7110e",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "patch": "@@ -79,8 +79,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestByteBufferEntity.java",
                "sha": "2c64d60ae6d6ca80ab25c58f461e60efbac48cad",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "patch": "@@ -49,7 +49,7 @@\n  */\n public class TestEntityUtils {\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testNullEntityToByteArray() throws Exception {\n         EntityUtils.toByteArray(null);\n     }\n@@ -90,8 +90,8 @@ public void testKnownLengthContentToByteArray() throws Exception {\n     public void testNullEntityToString() throws Exception {\n         try {\n             EntityUtils.toString(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestEntityUtils.java",
                "sha": "a9bd58df3e4b1becdfc57cb2aed3c2cc2c80d4b7",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 5,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "patch": "@@ -60,11 +60,11 @@ public void testBasics() throws Exception {\n     }\n \n     @Test\n-    public void testIllegalConstructor() throws Exception {\n+    public void testNullConstructor() throws Exception {\n         try {\n             new FileEntity(null, ContentType.TEXT_PLAIN);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -97,8 +97,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestFileEntity.java",
                "sha": "1f20135def33fdf74d58521f11272b75e5048002",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 4,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "patch": "@@ -58,8 +58,8 @@ public void testBasics() throws Exception {\n     public void testIllegalConstructor() throws Exception {\n         try {\n             new HttpEntityWrapper(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -91,8 +91,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             wrapped.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestHttpEntityWrapper.java",
                "sha": "ffafba3863a817064874d2d146f9c43ed597bebd",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "patch": "@@ -54,8 +54,8 @@ public void testBasics() throws Exception {\n         Assert.assertTrue(entity.isStreaming());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testIllegalConstructor() throws Exception {\n+    @Test(expected = NullPointerException.class)\n+    public void testNullConstructor() throws Exception {\n         new InputStreamEntity(null, 0, null);\n     }\n \n@@ -119,7 +119,7 @@ public void testWriteToUnknownLength() throws Exception {\n         Assert.assertEquals(message, s);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testWriteToNull() throws Exception {\n         final InputStreamEntity entity = new InputStreamEntity(EmptyInputStream.INSTANCE, 0, null);\n         entity.writeTo(null);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestInputStreamEntity.java",
                "sha": "04f937b43628d5cf755b81b63965b763d31ee833",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "patch": "@@ -82,8 +82,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestSerializableEntity.java",
                "sha": "ac72cb5820a92ec2e46d90ef50717beb1546fbaf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 5,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "patch": "@@ -53,11 +53,11 @@ public void testBasics() throws Exception {\n     }\n \n     @Test\n-    public void testIllegalConstructor() throws Exception {\n+    public void testNullConstructor() throws Exception {\n         try {\n             new StringEntity(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -126,8 +126,8 @@ public void testWriteTo() throws Exception {\n \n         try {\n             httpentity.writeTo(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/io/entity/TestStringEntity.java",
                "sha": "c7694effe657058224346fb8c2e53b2aa6483aae",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "patch": "@@ -46,8 +46,8 @@ public void testConstructor() {\n     public void testInvalidName() {\n         try {\n             new BasicHeader(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeader.java",
                "sha": "87fba77f55b174816544b01f5234316c5525fa0e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 1,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "patch": "@@ -221,7 +221,7 @@ public void testInvalid() {\n         try {\n             hit = new BasicHeaderIterator(null, \"whatever\");\n             Assert.fail(\"null headers not detected\");\n-        } catch (final IllegalArgumentException iax) {\n+        } catch (final NullPointerException iax) {\n             // expected\n         }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderIterator.java",
                "sha": "0c5700011076b8d6fc303023652caa425f53ab13",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 16,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "patch": "@@ -171,51 +171,51 @@ public void testInvalidArguments() throws Exception {\n \n         try {\n             this.formatter.formatNameValuePair(null, param, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatNameValuePair(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatParameters(null, params, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatParameters(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n \n         try {\n             this.formatter.formatHeaderElement(null, element, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatHeaderElement(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatElements(null, elements, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatElements(buf, null, false);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicHeaderValueFormatter.java",
                "sha": "a3f7ed47e99af0d381d69a06921f295508434101",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 12,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "patch": "@@ -69,14 +69,14 @@ public void testRLFormattingInvalidInput() throws Exception {\n         final RequestLine requestline = new RequestLine(Method.GET.name(), \"/stuff\", HttpVersion.HTTP_1_1);\n         try {\n             this.formatter.formatRequestLine(null, requestline);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatRequestLine(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -102,14 +102,14 @@ public void testSLFormattingInvalidInput() throws Exception {\n         final StatusLine statusline = new StatusLine(HttpVersion.HTTP_1_1, HttpStatus.SC_OK, \"OK\");\n         try {\n             this.formatter.formatStatusLine(null, statusline);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatStatusLine(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -133,14 +133,14 @@ public void testHeaderFormattingInvalidInput() throws Exception {\n         final Header header = new BasicHeader(\"name\", \"value\");\n         try {\n             this.formatter.formatHeader(null, header);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             this.formatter.formatHeader(buf, null);\n-            Assert.fail(\"IllegalArgumentException should habe been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should habe been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicLineFormatter.java",
                "sha": "9ce8f9c08942b8494b19d006a44f3aad14375ff4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "patch": "@@ -88,8 +88,8 @@ public void testDefaultRequestConstructors() {\n \n         try {\n             new BasicHttpRequest(Method.GET, (URI) null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicMessages.java",
                "sha": "760bf8c812a6e798940d1a665d098290b32a4a5e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 1,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "patch": "@@ -184,7 +184,7 @@ public void testWrongPublic() {\n         try {\n             new BasicTokenIterator(null);\n             Assert.fail(\"null argument not detected\");\n-        } catch (final IllegalArgumentException iax) {\n+        } catch (final NullPointerException iax) {\n             // expected\n         }\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestBasicTokenIterator.java",
                "sha": "78ae150f4b59b5575d67b9ef87e84e216398394d",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "patch": "@@ -59,8 +59,8 @@ public void testBasicConstructorNullValue() {\n     public void testInvalidName() {\n         try {\n             new BasicHeader(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeader.java",
                "sha": "db2ae7f307dd3a8830e447a47ad4da09ae09a84e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 4,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "patch": "@@ -65,8 +65,8 @@ public void testConstructor2() throws Exception {\n     public void testInvalidName() {\n         try {\n             new BasicHeaderElement(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }\n@@ -83,8 +83,8 @@ public void testParamByName() throws Exception {\n         Assert.assertNull(element.getParameterByName(\"param3\"));\n         try {\n             element.getParameterByName(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestHeaderElement.java",
                "sha": "2193870a97bb4cbc93de1cb47aa5dbb0844c3fae",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "patch": "@@ -48,8 +48,8 @@ public void testConstructor() {\n     public void testInvalidName() {\n         try {\n             new BasicNameValuePair(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             //expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/message/TestNameValuePair.java",
                "sha": "1dcccca70c601d4fdb12e4b2d81c1e828e512f33",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "patch": "@@ -77,20 +77,20 @@ public void testContextInvalidInput() throws Exception {\n         final HttpContext currentContext = new BasicHttpContext(null);\n         try {\n             currentContext.setAttribute(null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             currentContext.getAttribute(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             currentContext.removeAttribute(null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestHttpExecutionContext.java",
                "sha": "58be10d31d9bcabc1f07cb52e3f7df93ecaf298b",
                "status": "modified"
            },
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 24,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "patch": "@@ -103,8 +103,8 @@ public void testRequestConnControlInvalidInput() throws Exception {\n         final RequestConnControl interceptor = new RequestConnControl();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -252,8 +252,8 @@ public void testRequestContentInvalidInput() throws Exception {\n         final RequestContent interceptor = new RequestContent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -360,8 +360,8 @@ public void testRequestExpectContinueInvalidInput() throws Exception {\n         final RequestExpectContinue interceptor = new RequestExpectContinue();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -429,14 +429,14 @@ public void testRequestTargetHostInvalidInput() throws Exception {\n         final RequestTargetHost interceptor = new RequestTargetHost();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             interceptor.process(new BasicClassicHttpRequest(Method.GET, \"/\"), null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -503,8 +503,8 @@ public void testRequestUserAgentInvalidInput() throws Exception {\n         final RequestUserAgent interceptor = new RequestUserAgent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -699,15 +699,15 @@ public void testResponseConnControlHostInvalidInput() throws Exception {\n         final ResponseConnControl interceptor = new ResponseConnControl();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n         try {\n             final ClassicHttpResponse response = new BasicClassicHttpResponse(HttpStatus.SC_OK, \"OK\");\n             interceptor.process(response, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -835,8 +835,8 @@ public void testResponseContentInvalidInput() throws Exception {\n         final ResponseContent interceptor = new ResponseContent();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -929,8 +929,8 @@ public void testResponseDateInvalidInput() throws Exception {\n         final ResponseDate interceptor = new ResponseDate();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -966,8 +966,8 @@ public void testRequestDateInvalidInput() throws Exception {\n         final RequestDate interceptor = new RequestDate();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }\n@@ -1010,8 +1010,8 @@ public void testResponseServerInvalidInput() throws Exception {\n         final ResponseServer interceptor = new ResponseServer();\n         try {\n             interceptor.process(null, null, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException ex) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException ex) {\n             // expected\n         }\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestStandardInterceptors.java",
                "sha": "8ed0f1e235eba6557aa95514248d544bfb5b948d",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "patch": "@@ -76,7 +76,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.register(null, null);\n@@ -154,13 +154,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternMatcher<>();\n         matcher.lookup(null);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternMatcher.java",
                "sha": "ac77aeee91daf7284bdc362998dcdecf933f9adc",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "patch": "@@ -76,7 +76,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.register(null, null);\n@@ -154,13 +154,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriPatternOrderedMatcher<>();\n         matcher.lookup(null);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriPatternOrderedMatcher.java",
                "sha": "f9b575a9a402a8ea05df570fb1ef8f6117bd67e7",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "patch": "@@ -60,7 +60,7 @@ public void testRegisterUnregister() throws Exception {\n         Assert.assertNull(h);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testRegisterNull() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.register(null, null);\n@@ -196,13 +196,13 @@ public void testSuffixPatternOverPrefixPatternMatch() throws Exception {\n         Assert.assertTrue(h1 == h);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testRegisterInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.register(null, null);\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n+    @Test(expected = NullPointerException.class)\n     public void testLookupInvalidInput() throws Exception {\n         final LookupRegistry<Object> matcher = new UriRegexMatcher<>();\n         matcher.lookup(null);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/http/protocol/TestUriRegexMatcher.java",
                "sha": "56ca167c7cb83c402b6e37b175425a22619af8de",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 2,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "patch": "@@ -52,8 +52,8 @@ public void testConstructor() {\n         Assert.assertEquals(0, host2.getPort());\n         try {\n             new Host(null, 0);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             new Host(\"blah\", -1);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/net/TestHost.java",
                "sha": "23c58802fef78597ee4dc326f992b22524109f0d",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 6,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "patch": "@@ -102,12 +102,12 @@ public void testLeaseRelease() throws Exception {\n     }\n \n     @Test\n-    public void testLeaseIllegal() throws Exception {\n+    public void testLeaseInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         try {\n             pool.lease(null, null, Timeout.ZERO_MILLISECONDS, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n     }\n \n@@ -372,7 +372,7 @@ public void testLeaseRequestCanceled() throws Exception {\n         Assert.assertEquals(0, totals.getLeased());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testGetStatsInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         pool.getStats(null);\n@@ -383,8 +383,8 @@ public void testSetMaxInvalid() throws Exception {\n         final LaxConnPool<String, HttpConnection> pool = new LaxConnPool<>(2);\n         try {\n             pool.setMaxPerRoute(null, 1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.setDefaultMaxPerRoute(-1);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestLaxConnPool.java",
                "sha": "8547ff2e5d7e97fed982c97827185b394af9e816",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 3,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "patch": "@@ -78,8 +78,8 @@ public void testBasics() throws Exception {\n         Assert.assertEquals(Deadline.MIN_VALUE, entry1.getExpiryDeadline());\n     }\n \n-    @Test(expected = IllegalArgumentException.class)\n-    public void testInvalidConstruction() throws Exception {\n+    @Test(expected = NullPointerException.class)\n+    public void testNullConstructor() throws Exception {\n         new PoolEntry<String, HttpConnection>(null);\n     }\n \n@@ -114,7 +114,7 @@ public void testExpiry() throws Exception {\n         Assert.assertEquals(validityDeadline, entry2.getExpiryDeadline());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testInvalidExpiry() throws Exception {\n         final PoolEntry<String, HttpConnection> entry = new PoolEntry<>(\n                 \"route1\", TimeValue.of(0L, TimeUnit.MILLISECONDS), currentTimeSupplier);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestPoolEntry.java",
                "sha": "97aafe688e10ad3b0d2970a56b7a9f8106312a8d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 7,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "patch": "@@ -112,17 +112,17 @@ public void testLeaseRelease() throws Exception {\n     }\n \n     @Test\n-    public void testLeaseIllegal() throws Exception {\n+    public void testLeaseInvalid() throws Exception {\n         final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 10);\n         try {\n             pool.lease(null, null, Timeout.ZERO_MILLISECONDS, null);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.lease(\"somehost\", null, null, null);\n             Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+        } catch (final NullPointerException expected) {\n         }\n     }\n \n@@ -604,7 +604,7 @@ public void testLeaseRequestCanceled() throws Exception {\n         Assert.assertEquals(0, totals.getLeased());\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testGetStatsInvalid() throws Exception {\n         final StrictConnPool<String, HttpConnection> pool = new StrictConnPool<>(2, 2);\n         pool.getStats(null);\n@@ -620,8 +620,8 @@ public void testSetMaxInvalid() throws Exception {\n         }\n         try {\n             pool.setMaxPerRoute(null, 1);\n-            Assert.fail(\"IllegalArgumentException should have been thrown\");\n-        } catch (final IllegalArgumentException expected) {\n+            Assert.fail(\"NullPointerException should have been thrown\");\n+        } catch (final NullPointerException expected) {\n         }\n         try {\n             pool.setDefaultMaxPerRoute(-1);",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/pool/TestStrictConnPool.java",
                "sha": "a0484d2d18b65222101bed677e4668fa3faa5275",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java?ref=4df046258ebbb2da6a5a66c24e656f6229516710",
                "deletions": 4,
                "filename": "httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "patch": "@@ -55,7 +55,7 @@ public void testArgNotNullPass() {\n         Assert.assertSame(stuff, Args.notNull(stuff, \"Stuff\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotNullFail() {\n         Args.notNull(null, \"Stuff\");\n     }\n@@ -66,7 +66,7 @@ public void testArgNotEmptyPass() {\n         Assert.assertSame(stuff, Args.notEmpty(stuff, \"Stuff\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotEmptyFail1() {\n         Args.notEmpty((String) null, \"Stuff\");\n     }\n@@ -76,7 +76,7 @@ public void testArgNotEmptyFail2() {\n         Args.notEmpty(\"\", \"Stuff\");\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgNotBlankFail1() {\n         Args.notBlank((String) null, \"Stuff\");\n     }\n@@ -97,7 +97,7 @@ public void testArgCollectionNotEmptyPass() {\n         Assert.assertSame(list, Args.notEmpty(list, \"List\"));\n     }\n \n-    @Test(expected=IllegalArgumentException.class)\n+    @Test(expected=NullPointerException.class)\n     public void testArgCollectionNotEmptyFail1() {\n         Args.notEmpty((List<?>) null, \"List\");\n     }",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/4df046258ebbb2da6a5a66c24e656f6229516710/httpcore5/src/test/java/org/apache/hc/core5/util/TestArgs.java",
                "sha": "f82a8c9b39a8ecd56940d6d98892b1b2c467ed41",
                "status": "modified"
            }
        ],
        "message": "Throw NullPointerException for null arguments in Args\n\nThe common approach for the past years have been to throw NPE if a null\nargument has been passed. This mimics the behavior of\nObjects#requireNonNull().",
        "parent": "https://github.com/apache/httpcomponents-core/commit/dc6b3e5aa5520c7d70ba3a1db0f0f2262b87d4ec",
        "patched_files": [
            "DefaultConnectionReuseStrategy.java",
            "BasicLineFormatter.java",
            "HttpService.java",
            "Host.java",
            "LaxConnPool.java",
            "NameValuePair.java",
            "BasicHeaderValueFormatter.java",
            "BasicHeaderIterator.java",
            "HttpHost.java",
            "BasicTokenIterator.java",
            "UriPatternOrderedMatcher.java",
            "ChunkDecoder.java",
            "HeaderElement.java",
            "InputStreamEntity.java",
            "BasicHeader.java",
            "IdentityDecoder.java",
            "StringEntity.java",
            "ContentType.java",
            "UriPatternMatcher.java",
            "SerializableEntity.java",
            "HttpEntityWrapper.java",
            "BufferedHttpEntity.java",
            "ChunkEncoder.java",
            "Args.java",
            "ByteArrayEntity.java",
            "EntityUtils.java",
            "FileEntity.java",
            "PoolEntry.java",
            "IdentityEncoder.java",
            "StrictConnPool.java",
            "UriRegexMatcher.java",
            "LengthDelimitedEncoder.java",
            "LengthDelimitedDecoder.java",
            "HttpRequestExecutor.java",
            "Header.java",
            "ByteBufferEntity.java"
        ],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestContentType.java",
            "TestLaxConnPool.java",
            "TestBasicHeaderIterator.java",
            "TestByteArrayEntity.java",
            "TestBasicLineFormatter.java",
            "TestHost.java",
            "TestLengthDelimitedEncoder.java",
            "TestSerializableEntity.java",
            "TestBasicTokenIterator.java",
            "TestUriPatternMatcher.java",
            "TestBasicMessages.java",
            "TestNameValuePair.java",
            "TestUriRegexMatcher.java",
            "TestArgs.java",
            "TestEntityUtils.java",
            "TestUriPatternOrderedMatcher.java",
            "TestHttpRequestExecutor.java",
            "TestHttpService.java",
            "TestStandardInterceptors.java",
            "TestBasicHeader.java",
            "TestHeader.java",
            "TestDefaultConnectionReuseStrategy.java",
            "TestHeaderElement.java",
            "TestBufferedHttpEntity.java",
            "TestLengthDelimitedDecoder.java",
            "TestPoolEntry.java",
            "TestByteBufferEntity.java",
            "TestHttpExecutionContext.java",
            "TestStrictConnPool.java",
            "TestIdentityDecoder.java",
            "TestFileEntity.java",
            "TestBasicHeaderValueFormatter.java",
            "TestInputStreamEntity.java",
            "TestStringEntity.java",
            "TestChunkEncoder.java",
            "TestHttpEntityWrapper.java",
            "TestHttpHost.java",
            "TestChunkDecoder.java",
            "TestIdentityEncoder.java"
        ]
    },
    "httpcomponents-core_500599a": {
        "bug_id": "httpcomponents-core_500599a",
        "commit": "https://github.com/apache/httpcomponents-core/commit/500599af40e521774071c7ee6360ff58c57c010a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/RELEASE_NOTES.txt",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "deletions": 1,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,6 +1,9 @@\n Changes for release 4.4-alpha1\n -------------------\n \n+* [HTTPCORE-373] Out of sequence HTTP response causes NPE in HttpAsyncRequestExecutor.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n * [HTTPCORE-372] Blocking and non-blocking chunk decoders to throw an I/O exception if data stream\n   is terminated without a closing chunk.\n   Contributed by Dmitry Potapov <potapov.d at gmail.com>\n@@ -13,7 +16,7 @@ Changes for release 4.4-alpha1\n \n * [HTTPCORE-370] Race condition if connection request succeeds and times out at the same time.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n-    \n+\n * [HTTPCORE-357] Avoid DNS lookups in SSLIOSession.\n   Contributed by Oleg Kalnichevski <olegk at apache.org>\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/RELEASE_NOTES.txt",
                "sha": "037076e43838cfd5a57adcf4e8c6624343c71cf2",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "deletions": 1,
                "filename": "httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "patch": "@@ -191,9 +191,12 @@ public void outputReady(\n     public void responseReceived(\n             final NHttpClientConnection conn) throws HttpException, IOException {\n         final State state = ensureNotNull(getState(conn));\n+        final HttpRequest request = state.getRequest();\n+        if (request == null) {\n+            throw new HttpException(\"Out of sequence response\");\n+        }\n         final HttpAsyncClientExchangeHandler handler = ensureNotNull(getHandler(conn));\n         final HttpResponse response = conn.getHttpResponse();\n-        final HttpRequest request = state.getRequest();\n \n         final int statusCode = response.getStatusLine().getStatusCode();\n         if (statusCode < HttpStatus.SC_OK) {",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/main/java/org/apache/http/nio/protocol/HttpAsyncRequestExecutor.java",
                "sha": "c6070bd744ff1e3182e22651356b9abf3b40a82e",
                "status": "modified"
            },
            {
                "additions": 107,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "changes": 107,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java?ref=500599af40e521774071c7ee6360ff58c57c010a",
                "deletions": 0,
                "filename": "httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "patch": "@@ -0,0 +1,107 @@\n+/*\n+ * ====================================================================\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ * ====================================================================\n+ *\n+ * This software consists of voluntary contributions made by many\n+ * individuals on behalf of the Apache Software Foundation.  For more\n+ * information on the Apache Software Foundation, please see\n+ * <http://www.apache.org/>.\n+ *\n+ */\n+\n+package org.apache.http.nio.integration;\n+\n+import java.net.ServerSocket;\n+import java.net.Socket;\n+import java.util.concurrent.ExecutionException;\n+import java.util.concurrent.Future;\n+\n+import org.apache.http.Consts;\n+import org.apache.http.HttpException;\n+import org.apache.http.HttpHost;\n+import org.apache.http.HttpRequest;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.HttpVersion;\n+import org.apache.http.config.ConnectionConfig;\n+import org.apache.http.impl.nio.pool.BasicNIOConnFactory;\n+import org.apache.http.message.BasicHttpRequest;\n+import org.apache.http.nio.testserver.HttpClientNio;\n+import org.junit.After;\n+import org.junit.Assert;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Tests for handling out of sequence responses.\n+ */\n+public class TestClientOutOfSequenceResponse {\n+\n+    private ServerSocket server;\n+    private HttpClientNio client;\n+\n+    @Before\n+    public void setup() throws Exception {\n+        server = new ServerSocket(0, 1);\n+        client = new HttpClientNio(new BasicNIOConnFactory(ConnectionConfig.DEFAULT));\n+    }\n+\n+    @After\n+    public void cleanup() throws Exception {\n+        if (client != null) {\n+            client.shutdown();\n+        }\n+        if (server != null) {\n+            server.close();\n+        }\n+    }\n+\n+    @Test\n+    public void testOutOfSequenceResponse() throws Exception {\n+        client.setMaxPerRoute(1);\n+        client.setMaxTotal(1);\n+\n+        client.start();\n+        final HttpHost target = new HttpHost(\"localhost\", server.getLocalPort());\n+        final HttpRequest get1 = new BasicHttpRequest(\"GET\", \"/\", HttpVersion.HTTP_1_1);\n+        final Future<HttpResponse> future1 = client.execute(target, get1);\n+        final HttpRequest get2 = new BasicHttpRequest(\"GET\", \"/\", HttpVersion.HTTP_1_1);\n+        final Future<HttpResponse> future2 = client.execute(target, get2);\n+\n+        final Socket socket = server.accept();\n+        Thread.sleep(100);\n+        for (int i = 0; i < 3; ++i) {\n+            socket.getOutputStream().write((\n+                    \"HTTP/1.1 200 OK\\r\\n\" +\n+                    \"Content-Length: 0\\r\\n\" +\n+                    \"Connection: keep-alive\\r\\n\\r\\n\").getBytes(Consts.UTF_8));\n+            socket.getOutputStream().flush();\n+        }\n+\n+        final HttpResponse response1 = future1.get();\n+        Assert.assertEquals(200, response1.getStatusLine().getStatusCode());\n+\n+        try {\n+            final HttpResponse response2 = future2.get();\n+            Assert.assertEquals(200, response2.getStatusLine().getStatusCode());\n+        } catch (ExecutionException ex) {\n+            Assert.assertTrue(ex.getCause() instanceof HttpException);\n+        }\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/500599af40e521774071c7ee6360ff58c57c010a/httpcore-nio/src/test/java/org/apache/http/nio/integration/TestClientOutOfSequenceResponse.java",
                "sha": "52edb5304e8f39523c551b158592130baa386379",
                "status": "added"
            }
        ],
        "message": "HTTPCORE-373: out of sequence HTTP response causes NPE in HttpAsyncRequestExecutor\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1567105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-core/commit/b36d2e5e9c94f2da365f81957bf9c2e4f23d4ea3",
        "patched_files": [
            "HttpAsyncRequestExecutor.java",
            "RELEASE_NOTES.java"
        ],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestHttpAsyncRequestExecutor.java",
            "TestClientOutOfSequenceResponse.java"
        ]
    },
    "httpcomponents-core_aa46f3b": {
        "bug_id": "httpcomponents-core_aa46f3b",
        "commit": "https://github.com/apache/httpcomponents-core/commit/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java?ref=aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
                "deletions": 0,
                "filename": "httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "patch": "@@ -164,6 +164,7 @@ public void testMessageParsingTimeout() throws Exception {\n         assertNotNull(httprequest);\n         assertEquals(5, timeoutCount);\n \n+        @SuppressWarnings(\"null\") // httprequest cannot be null here\n         RequestLine reqline = httprequest.getRequestLine();\n         assertNotNull(reqline);\n         assertEquals(\"GET\", reqline.getMethod());",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestRequestParser.java",
                "sha": "7bd39a8211a743930822c21b76e2f7bfd37f391f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java?ref=aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64",
                "deletions": 0,
                "filename": "httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "patch": "@@ -160,6 +160,7 @@ public void testMessageParsingTimeout() throws Exception {\n         assertNotNull(httpresponse);\n         assertEquals(5, timeoutCount);\n \n+        @SuppressWarnings(\"null\") // httpresponse cannot be null here\n         StatusLine statusline = httpresponse.getStatusLine();\n         assertNotNull(statusline);\n         assertEquals(200, statusline.getStatusCode());",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/aa46f3b8d648575efbf7b08fc3e7e79bcd5efa64/httpcore/src/test/java/org/apache/http/impl/io/TestResponseParser.java",
                "sha": "16bf2c34328f3b6c7a0a13ef0870f6ee19bca848",
                "status": "modified"
            }
        ],
        "message": "Suppress impossible NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1100668 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-core/commit/57361e5f21c11f3e3f22a25cd2c09154a3b6e5f5",
        "patched_files": [],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestResponseParser.java",
            "TestRequestParser.java"
        ]
    },
    "httpcomponents-core_efe9fa3": {
        "bug_id": "httpcomponents-core_efe9fa3",
        "commit": "https://github.com/apache/httpcomponents-core/commit/efe9fa317934a7d49a221de0d2d18c996448ed96",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/RELEASE_NOTES.txt",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/RELEASE_NOTES.txt?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "deletions": 0,
                "filename": "RELEASE_NOTES.txt",
                "patch": "@@ -1,3 +1,9 @@\n+Changes since 4.2\n+-------------------\n+\n+* Fixed NPE in StringEntity constructor thrown if ContentType#getCharset is null.\n+  Contributed by Oleg Kalnichevski <olegk at apache.org>\n+\n Release 4.2\n -------------------\n ",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/RELEASE_NOTES.txt",
                "sha": "55c9ca235a8e588b8cf5cf7317e3f96334c671c3",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/main/java/org/apache/http/entity/StringEntity.java?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "deletions": 0,
                "filename": "httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "patch": "@@ -66,6 +66,9 @@ public StringEntity(final String string, final ContentType contentType) {\n             throw new IllegalArgumentException(\"Source string may not be null\");\n         }\n         Charset charset = contentType != null ? contentType.getCharset() : null;\n+        if (charset == null) {\n+            charset = HTTP.DEF_CONTENT_CHARSET;\n+        }\n         try {\n             this.content = string.getBytes(charset.name());\n         } catch (UnsupportedEncodingException ex) {",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/main/java/org/apache/http/entity/StringEntity.java",
                "sha": "a1f96c764013034a9a4cc6231b9070343ba12100",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/httpcomponents-core/blob/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/httpcomponents-core/contents/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java?ref=efe9fa317934a7d49a221de0d2d18c996448ed96",
                "deletions": 0,
                "filename": "httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "patch": "@@ -28,8 +28,10 @@\n package org.apache.http.entity;\n \n import java.io.ByteArrayOutputStream;\n+import java.nio.charset.Charset;\n \n import org.apache.http.Consts;\n+import org.apache.http.util.EntityUtils;\n import org.junit.Assert;\n import org.junit.Test;\n \n@@ -77,6 +79,37 @@ public void testDefaultContent() throws Exception {\n                 httpentity.getContentType().getValue());\n     }\n \n+    private static String constructString(int [] unicodeChars) {\n+        StringBuilder buffer = new StringBuilder();\n+        if (unicodeChars != null) {\n+            for (int i = 0; i < unicodeChars.length; i++) {\n+                buffer.append((char)unicodeChars[i]);\n+            }\n+        }\n+        return buffer.toString();\n+    }\n+\n+    static final int SWISS_GERMAN_HELLO [] = {\n+            0x47, 0x72, 0xFC, 0x65, 0x7A, 0x69, 0x5F, 0x7A, 0xE4, 0x6D, 0xE4\n+        };\n+\n+    @Test\n+    public void testNullCharset() throws Exception {\n+        String s = constructString(SWISS_GERMAN_HELLO);\n+        StringEntity httpentity = new StringEntity(s, ContentType.create(\"text/plain\", (Charset) null));\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+        httpentity = new StringEntity(s, (Charset) null);\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+        httpentity = new StringEntity(s, (String) null);\n+        Assert.assertNotNull(httpentity.getContentType());\n+        Assert.assertEquals(\"text/plain\", httpentity.getContentType().getValue());\n+        Assert.assertEquals(s, EntityUtils.toString(httpentity));\n+    }\n+\n     @Test\n     public void testWriteTo() throws Exception {\n         String s = \"Message content\";",
                "raw_url": "https://github.com/apache/httpcomponents-core/raw/efe9fa317934a7d49a221de0d2d18c996448ed96/httpcore/src/test/java/org/apache/http/entity/TestStringEntity.java",
                "sha": "5c083bfe931783c75e673506fdf1141f885cb3a5",
                "status": "modified"
            }
        ],
        "message": "Fixed NPE in StringEntity constructor thrown if ContentType#getCharset is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/httpcomponents/httpcore/trunk@1334434 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/httpcomponents-core/commit/54351a165a3c907e3509d6a724b7f879d8f692f6",
        "patched_files": [
            "StringEntity.java",
            "RELEASE_NOTES.java"
        ],
        "repo": "httpcomponents-core",
        "unit_tests": [
            "TestStringEntity.java"
        ]
    }
}