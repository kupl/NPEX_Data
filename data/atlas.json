{
    "atlas_39be2cc": {
        "bug_id": "atlas_39be2cc",
        "commit": "https://github.com/apache/atlas/commit/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/atlas/blob/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java?ref=39be2ccfdf5ec3edb59d7779e7b3f7d95413b632",
                "deletions": 4,
                "filename": "repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "patch": "@@ -457,10 +457,14 @@ private void addEntity(AtlasEntityWithExtInfo entity, ExportContext context) thr\n     }\n \n     private void removeRelationshipAttributes(AtlasEntityWithExtInfo entity) {\n-        entity.getEntity().getRelationshipAttributes().clear();\n-        if(entity.getReferredEntities() != null) {\n-            for (AtlasEntity e: entity.getReferredEntities().values()) {\n-                e.getRelationshipAttributes().clear();\n+        if (entity.getEntity().getRelationshipAttributes() != null) {\n+            entity.getEntity().getRelationshipAttributes().clear();\n+        }\n+        if (entity.getReferredEntities() != null) {\n+            for (AtlasEntity e : entity.getReferredEntities().values()) {\n+                if (e.getRelationshipAttributes() != null) {\n+                    e.getRelationshipAttributes().clear();\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/atlas/raw/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "sha": "c5e6534c62d51293c4777f8c7f0fda012454441d",
                "status": "modified"
            }
        ],
        "message": "ATLAS-2376: Fix for unitTest case in ExportServiceTest due to NPE",
        "parent": "https://github.com/apache/atlas/commit/bd87c3f624d45e9d6d2080c28197e3e1ab9a4ebc",
        "repo": "atlas",
        "unit_tests": [
            "ExportServiceTest.java"
        ]
    },
    "atlas_56e97e2": {
        "bug_id": "atlas_56e97e2",
        "commit": "https://github.com/apache/atlas/commit/56e97e225e65b50d15e6f59211f796788dd97446",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/56e97e225e65b50d15e6f59211f796788dd97446/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java?ref=56e97e225e65b50d15e6f59211f796788dd97446",
                "deletions": 1,
                "filename": "addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "patch": "@@ -362,7 +362,7 @@ static String getTableDSLQuery(String clusterName, String dbName, String tableNa\n     public static String getTableQualifiedName(String clusterName, String dbName, String tableName, boolean isTemporaryTable) {\n         String tableTempName = tableName;\n         if (isTemporaryTable) {\n-            if (SessionState.get().getSessionId() != null) {\n+            if (SessionState.get() != null && SessionState.get().getSessionId() != null) {\n                 tableTempName = tableName + TEMP_TABLE_PREFIX + SessionState.get().getSessionId();\n             } else {\n                 tableTempName = tableName + TEMP_TABLE_PREFIX + RandomStringUtils.random(10);",
                "raw_url": "https://github.com/apache/atlas/raw/56e97e225e65b50d15e6f59211f796788dd97446/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "sha": "fcc45ab0314ff881f68359f74511882f1e08b596",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/56e97e225e65b50d15e6f59211f796788dd97446/release-log.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/release-log.txt?ref=56e97e225e65b50d15e6f59211f796788dd97446",
                "deletions": 0,
                "filename": "release-log.txt",
                "patch": "@@ -6,6 +6,7 @@ INCOMPATIBLE CHANGES:\n \n \n ALL CHANGES:\n+ATLAS-1052 Fix NPE in HiveHook due to null Session State (sumasai)\n ATLAS-1051 Sqoop Hook does not package HDFS model jars which is required (sumasai)\n ATLAS-1049 List types by supertype (shwethags via sumasai)\n ATLAS-1032 Atlas hook package should not include libraries already present in host component - like log4j(mneethiraj via sumasai)",
                "raw_url": "https://github.com/apache/atlas/raw/56e97e225e65b50d15e6f59211f796788dd97446/release-log.txt",
                "sha": "334a1c5394292ee16a2487b32c653cd82fa55c38",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1052 Fix NPE in HiveHook due to null Session State (sumasai)",
        "parent": "https://github.com/apache/atlas/commit/46ec799cc53af51806722e2e7ad7d5ef61e02df6",
        "repo": "atlas",
        "unit_tests": [
            "HiveMetaStoreBridgeTest.java"
        ]
    },
    "atlas_6fb7b82": {
        "bug_id": "atlas_6fb7b82",
        "commit": "https://github.com/apache/atlas/commit/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/release-log.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/release-log.txt?ref=6fb7b82a8fb2442f6ffb08c9946fc446c34b6707",
                "deletions": 0,
                "filename": "release-log.txt",
                "patch": "@@ -9,6 +9,7 @@ ATLAS-1060 Add composite indexes for exact match performance improvements for al\n ATLAS-1127 Modify creation and modification timestamps to Date instead of Long(sumasai)\n \n ALL CHANGES:\n+ATLAS-1305 Fix potential NPEs in instance conversion code (sumasai)\n ATLAS-1349 Reduce excessive exception logging (apoorvnaik via svimal2106)\n ATLAS-1343 CTAS query is not captured by Atlas with Hive2 (svimal2106)\n ATLAS-1337 fixed FalconHookIT (ayubpathan via mneethiraj)",
                "raw_url": "https://github.com/apache/atlas/raw/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/release-log.txt",
                "sha": "1d44e3e56eb31ab709ca3d2f4dbacfd17490256f",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/webapp/src/main/java/org/apache/atlas/web/rest/EntityREST.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/rest/EntityREST.java?ref=6fb7b82a8fb2442f6ffb08c9946fc446c34b6707",
                "deletions": 1,
                "filename": "webapp/src/main/java/org/apache/atlas/web/rest/EntityREST.java",
                "patch": "@@ -393,7 +393,7 @@ private AtlasType validateType(String entityType, TypeCategory expectedCategory)\n      */\n     private void validateUniqueAttribute(AtlasEntityType entityType, String attributeName) throws AtlasBaseException {\n         AtlasStructDef.AtlasAttributeDef attribute = entityType.getAttributeDef(attributeName);\n-        if (!attribute.getIsUnique()) {\n+        if (attribute != null && !attribute.getIsUnique()) {\n             throw new AtlasBaseException(AtlasErrorCode.ATTRIBUTE_UNIQUE_INVALID, entityType.getTypeName(), attributeName);\n         }\n     }",
                "raw_url": "https://github.com/apache/atlas/raw/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/webapp/src/main/java/org/apache/atlas/web/rest/EntityREST.java",
                "sha": "2529f0dd52c14dde44712071596d23b8ac949289",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/webapp/src/test/java/org/apache/atlas/web/resources/TypedefsJerseyResourceIT.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/test/java/org/apache/atlas/web/resources/TypedefsJerseyResourceIT.java?ref=6fb7b82a8fb2442f6ffb08c9946fc446c34b6707",
                "deletions": 1,
                "filename": "webapp/src/test/java/org/apache/atlas/web/resources/TypedefsJerseyResourceIT.java",
                "patch": "@@ -337,7 +337,7 @@ private void verifyByNameAndGUID(AtlasBaseTypeDef typeDef) {\n                 } else if (typeDef.getCategory() == TypeCategory.ENTITY) {\n                     byGuid = clientV2.getEntityByGuid(typeDef.getGuid());\n                 } else if (typeDef.getCategory() == TypeCategory.CLASSIFICATION) {\n-                    byGuid = clientV2.getClassificationByGuid(typeDef.getName());\n+                    byGuid = clientV2.getClassificationByGuid(typeDef.getGuid());\n                 } else if (typeDef.getCategory() == TypeCategory.STRUCT) {\n                     byGuid = clientV2.getStructByGuid(typeDef.getGuid());\n                 }",
                "raw_url": "https://github.com/apache/atlas/raw/6fb7b82a8fb2442f6ffb08c9946fc446c34b6707/webapp/src/test/java/org/apache/atlas/web/resources/TypedefsJerseyResourceIT.java",
                "sha": "8e8684faa3c879fcb7c94add40a1fa7d109926a3",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1305 Fix potential NPEs in instance conversion code(sumasai)",
        "parent": "https://github.com/apache/atlas/commit/c413975aa9a10b2e3f576c68fefeffe11229b693",
        "repo": "atlas",
        "unit_tests": [
            "TestEntityREST.java"
        ]
    },
    "atlas_a5f971a": {
        "bug_id": "atlas_a5f971a",
        "commit": "https://github.com/apache/atlas/commit/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/atlas/blob/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java?ref=a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
                "deletions": 23,
                "filename": "intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "patch": "@@ -6,9 +6,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -40,31 +40,31 @@\n import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n \n \n-@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n-@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown=true)\n+@JsonAutoDetect(getterVisibility = PUBLIC_ONLY, setterVisibility = PUBLIC_ONLY, fieldVisibility = NONE)\n+@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true)\n @XmlRootElement\n @XmlAccessorType(XmlAccessType.PROPERTY)\n public class AtlasExportRequest implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    public static final String OPTION_FETCH_TYPE                    = \"fetchType\";\n-    public static final String OPTION_ATTR_MATCH_TYPE               = \"matchType\";\n-    public static final String OPTION_SKIP_LINEAGE                  = \"skipLineage\";\n-    public static final String OPTION_KEY_REPLICATED_TO             = \"replicatedTo\";\n-    public static final String FETCH_TYPE_FULL                      = \"full\";\n-    public static final String FETCH_TYPE_CONNECTED                 = \"connected\";\n-    public static final String FETCH_TYPE_INCREMENTAL               = \"incremental\";\n+    public static final String OPTION_FETCH_TYPE = \"fetchType\";\n+    public static final String OPTION_ATTR_MATCH_TYPE = \"matchType\";\n+    public static final String OPTION_SKIP_LINEAGE = \"skipLineage\";\n+    public static final String OPTION_KEY_REPLICATED_TO = \"replicatedTo\";\n+    public static final String FETCH_TYPE_FULL = \"full\";\n+    public static final String FETCH_TYPE_CONNECTED = \"connected\";\n+    public static final String FETCH_TYPE_INCREMENTAL = \"incremental\";\n     public static final String FETCH_TYPE_INCREMENTAL_CHANGE_MARKER = \"changeMarker\";\n-    public static final String MATCH_TYPE_STARTS_WITH               = \"startsWith\";\n-    public static final String MATCH_TYPE_ENDS_WITH                 = \"endsWith\";\n-    public static final String MATCH_TYPE_CONTAINS                  = \"contains\";\n-    public static final String MATCH_TYPE_MATCHES                   = \"matches\";\n-    public static final String MATCH_TYPE_FOR_TYPE                  = \"forType\";\n+    public static final String MATCH_TYPE_STARTS_WITH = \"startsWith\";\n+    public static final String MATCH_TYPE_ENDS_WITH = \"endsWith\";\n+    public static final String MATCH_TYPE_CONTAINS = \"contains\";\n+    public static final String MATCH_TYPE_MATCHES = \"matches\";\n+    public static final String MATCH_TYPE_FOR_TYPE = \"forType\";\n \n     private List<AtlasObjectId> itemsToExport = new ArrayList<>();\n-    private Map<String, Object> options       = new HashMap<>();\n+    private Map<String, Object> options = new HashMap<>();\n \n     public List<AtlasObjectId> getItemsToExport() {\n         return itemsToExport;\n@@ -83,7 +83,7 @@ public void setOptions(Map<String, Object> options) {\n     }\n \n     public String getFetchTypeOptionValue() {\n-        if(MapUtils.isEmpty(getOptions()) || !getOptions().containsKey(OPTION_FETCH_TYPE)) {\n+        if (MapUtils.isEmpty(getOptions()) || !getOptions().containsKey(OPTION_FETCH_TYPE)) {\n             return FETCH_TYPE_FULL;\n         }\n \n@@ -96,17 +96,17 @@ public String getFetchTypeOptionValue() {\n     }\n \n     public boolean getSkipLineageOptionValue() {\n-        if(MapUtils.isEmpty(getOptions()) ||\n+        if (MapUtils.isEmpty(getOptions()) ||\n                 !getOptions().containsKey(AtlasExportRequest.OPTION_SKIP_LINEAGE)) {\n             return false;\n         }\n \n         Object o = getOptions().get(AtlasExportRequest.OPTION_SKIP_LINEAGE);\n-        if(o instanceof String) {\n+        if (o instanceof String) {\n             return Boolean.parseBoolean((String) o);\n         }\n \n-        if(o instanceof Boolean) {\n+        if (o instanceof Boolean) {\n             return (Boolean) o;\n         }\n \n@@ -142,7 +142,13 @@ public boolean isReplicationOptionSet() {\n \n     @JsonIgnore\n     public String getOptionKeyReplicatedTo() {\n-        return isReplicationOptionSet() ? (String) options.get(OPTION_KEY_REPLICATED_TO) : StringUtils.EMPTY;\n+        String replicateToServerName = isReplicationOptionSet() ? (String) options.get(OPTION_KEY_REPLICATED_TO) : StringUtils.EMPTY;\n+\n+        if (replicateToServerName == null) {\n+            return StringUtils.EMPTY;\n+        } else {\n+            return replicateToServerName;\n+        }\n     }\n \n     public StringBuilder toString(StringBuilder sb) {",
                "raw_url": "https://github.com/apache/atlas/raw/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "sha": "b03b386c0c619f14bac1e3b6672ddbb6efcb13ed",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/atlas/blob/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java?ref=a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
                "deletions": 1,
                "filename": "repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "patch": "@@ -64,7 +64,11 @@ public void addParentTransformsToSubTypes(String parentType, Set<String> subType\n                 getTransforms().put(subType, attribtueTransformMap);\n             } else {\n                 for (Map.Entry<String, List<ImportTransformer>> entry : attribtueTransformMap.entrySet()) {\n-                    getTransforms().get(subType).get(entry.getKey()).addAll(entry.getValue());\n+                    if((getTransforms().get(subType).containsKey(entry.getKey()))){\n+                        getTransforms().get(subType).get(entry.getKey()).addAll(entry.getValue());\n+                    } else {\n+                        LOG.warn(\"Attribute {} does not exist for Type : {}\", entry.getKey(), parentType);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/atlas/raw/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "sha": "a2f592c3693468abc7349ca0abb05995f9d63341",
                "status": "modified"
            }
        ],
        "message": "ATLAS-3019 Handle NPE while transform and adding replicatedTo in import-export\n\nSigned-off-by: nixonrodrigues <nixon@apache.org>",
        "parent": "https://github.com/apache/atlas/commit/22041f51ce9a52f2c7b2634024e20765347a794a",
        "repo": "atlas",
        "unit_tests": [
            "ImportTransformsTest.java"
        ]
    },
    "atlas_aad34ae": {
        "bug_id": "atlas_aad34ae",
        "commit": "https://github.com/apache/atlas/commit/aad34ae00fb0d39d292dff9743fce1ceb3eaa270",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/release-log.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/release-log.txt?ref=aad34ae00fb0d39d292dff9743fce1ceb3eaa270",
                "deletions": 0,
                "filename": "release-log.txt",
                "patch": "@@ -23,6 +23,7 @@ ATLAS-409 Atlas will not import avro tables with schema read from a file (dosset\n ATLAS-379 Create sqoop and falcon metadata addons (venkatnrangan,bvellanki,sowmyaramesh via shwethags)\n \n ALL CHANGES:\n+ATLAS-888 NPE in NotificationHookConsumer (sumasai via shwethags)\n ATLAS-884 Process registration should call Entity update instead of create (sumasai)\n ATLAS-515 Ability to initialize Kafka topics with more than 1 replica (yhemanth)\n ATLAS-891 UI changes to implement Update term (Kalyanikashikar via yhemanth)",
                "raw_url": "https://github.com/apache/atlas/raw/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/release-log.txt",
                "sha": "0f384d29d06b6a49788aee9de1bf08040fbe3978",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/atlas/blob/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/pom.xml",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/pom.xml?ref=aad34ae00fb0d39d292dff9743fce1ceb3eaa270",
                "deletions": 0,
                "filename": "webapp/pom.xml",
                "patch": "@@ -241,6 +241,11 @@\n             <artifactId>commons-io</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>com.google.inject</groupId>\n+            <artifactId>guice</artifactId>\n+        </dependency>\n+\n         <dependency>\n                 <groupId>org.springframework</groupId>\n                 <artifactId>spring-core</artifactId>",
                "raw_url": "https://github.com/apache/atlas/raw/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/pom.xml",
                "sha": "bc62f874e3c58a6f40592e8c1a44305ac2043c8e",
                "status": "modified"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/atlas/blob/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java?ref=aad34ae00fb0d39d292dff9743fce1ceb3eaa270",
                "deletions": 7,
                "filename": "webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java",
                "patch": "@@ -18,8 +18,10 @@\n \n package org.apache.atlas.web.resources;\n \n+import com.google.common.annotations.VisibleForTesting;\n import com.google.common.base.Preconditions;\n import org.apache.atlas.AtlasClient;\n+import org.apache.atlas.AtlasConstants;\n import org.apache.atlas.AtlasException;\n import org.apache.atlas.EntityAuditEvent;\n import org.apache.atlas.services.MetadataService;\n@@ -33,6 +35,7 @@\n import org.apache.atlas.utils.ParamChecker;\n import org.apache.atlas.web.util.Servlets;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.http.protocol.HTTP;\n import org.codehaus.jettison.json.JSONArray;\n import org.codehaus.jettison.json.JSONException;\n import org.codehaus.jettison.json.JSONObject;\n@@ -59,6 +62,7 @@\n import javax.ws.rs.core.UriBuilder;\n import javax.ws.rs.core.UriInfo;\n import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.List;\n \n@@ -119,16 +123,15 @@ public Response submit(@Context HttpServletRequest request) {\n             final List<String> guids = metadataService.createEntities(entities);\n             JSONObject response = getResponse(new AtlasClient.EntityResult(guids, null, null));\n \n-            UriBuilder ub = uriInfo.getAbsolutePathBuilder();\n-            URI locationURI = guids.isEmpty() ? null : ub.path(guids.get(0)).build();\n+            URI locationURI = getLocationURI(guids);\n \n             return Response.created(locationURI).entity(response).build();\n \n         } catch(EntityExistsException e) {\n             LOG.error(\"Unique constraint violation\", e);\n             throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.CONFLICT));\n         } catch (ValueConversionException ve) {\n-            LOG.error(\"Unable to persist entity instance due to a desrialization error \", ve);\n+            LOG.error(\"Unable to persist entity instance due to a deserialization error \", ve);\n             throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(), Response.Status.BAD_REQUEST));\n         } catch (AtlasException | IllegalArgumentException e) {\n             LOG.error(\"Unable to persist entity instance\", e);\n@@ -139,6 +142,23 @@ public Response submit(@Context HttpServletRequest request) {\n         }\n     }\n \n+\n+    @VisibleForTesting\n+    public URI getLocationURI(List<String> guids) {\n+        URI locationURI = null;\n+        if (uriInfo != null) {\n+            UriBuilder ub = uriInfo.getAbsolutePathBuilder();\n+            locationURI = guids.isEmpty() ? null : ub.path(guids.get(0)).build();\n+        } else {\n+            String uriPath = AtlasClient.API.GET_ENTITY.getPath();\n+            locationURI = guids.isEmpty() ? null : UriBuilder\n+                .fromPath(AtlasConstants.DEFAULT_ATLAS_REST_ADDRESS)\n+                .path(uriPath).path(guids.get(0)).build();\n+\n+        }\n+        return locationURI;\n+    }\n+\n     private JSONObject getResponse(AtlasClient.EntityResult entityResult) throws AtlasException, JSONException {\n         JSONObject response = new JSONObject();\n         response.put(AtlasClient.REQUEST_ID, Servlets.getRequestId());\n@@ -171,7 +191,7 @@ public Response updateEntities(@Context HttpServletRequest request) {\n             LOG.error(\"Unique constraint violation\", e);\n             throw new WebApplicationException(Servlets.getErrorResponse(e, Response.Status.CONFLICT));\n         } catch (ValueConversionException ve) {\n-            LOG.error(\"Unable to persist entity instance due to a desrialization error \", ve);\n+            LOG.error(\"Unable to persist entity instance due to a deserialization error \", ve);\n             throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(), Response.Status.BAD_REQUEST));\n         } catch (AtlasException | IllegalArgumentException e) {\n             LOG.error(\"Unable to persist entity instance\", e);\n@@ -234,7 +254,7 @@ public Response updateByUniqueAttribute(@QueryParam(\"type\") String entityType,\n             JSONObject response = getResponse(entityResult);\n             return Response.ok(response).build();\n         } catch (ValueConversionException ve) {\n-            LOG.error(\"Unable to persist entity instance due to a desrialization error \", ve);\n+            LOG.error(\"Unable to persist entity instance due to a deserialization error \", ve);\n             throw new WebApplicationException(Servlets.getErrorResponse(ve.getCause(), Response.Status.BAD_REQUEST));\n         } catch(EntityExistsException e) {\n             LOG.error(\"Unique constraint violation\", e);\n@@ -549,8 +569,9 @@ public Response addTrait(@Context HttpServletRequest request, @PathParam(\"guid\")\n             LOG.debug(\"Adding trait={} for entity={} \", traitDefinition, guid);\n             metadataService.addTrait(guid, traitDefinition);\n \n-            UriBuilder ub = uriInfo.getAbsolutePathBuilder();\n-            URI locationURI = ub.path(guid).build();\n+            URI locationURI = getLocationURI(new ArrayList<String>() {{\n+                add(guid);\n+            }});\n \n             JSONObject response = new JSONObject();\n             response.put(AtlasClient.REQUEST_ID, Servlets.getRequestId());",
                "raw_url": "https://github.com/apache/atlas/raw/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/src/main/java/org/apache/atlas/web/resources/EntityResource.java",
                "sha": "364f17a621dbaaba3765bd48b068558315592d86",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/atlas/blob/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/src/test/java/org/apache/atlas/LocalAtlasClientTest.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/test/java/org/apache/atlas/LocalAtlasClientTest.java?ref=aad34ae00fb0d39d292dff9743fce1ceb3eaa270",
                "deletions": 10,
                "filename": "webapp/src/test/java/org/apache/atlas/LocalAtlasClientTest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.atlas;\n \n+import com.google.inject.Inject;\n import com.sun.jersey.api.client.ClientResponse;\n import org.apache.atlas.typesystem.Referenceable;\n import org.apache.atlas.web.resources.EntityResource;\n@@ -27,11 +28,14 @@\n import org.mockito.Mock;\n import org.mockito.MockitoAnnotations;\n import org.testng.annotations.BeforeMethod;\n+import org.testng.annotations.Guice;\n import org.testng.annotations.Test;\n \n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.WebApplicationException;\n import javax.ws.rs.core.Response;\n+import java.net.URI;\n+import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.List;\n \n@@ -46,8 +50,12 @@\n import static org.testng.Assert.assertTrue;\n import static org.testng.Assert.fail;\n \n+@Guice(modules= RepositoryMetadataModule.class)\n public class LocalAtlasClientTest {\n     @Mock\n+    private EntityResource mockEntityResource;\n+\n+    @Inject\n     private EntityResource entityResource;\n \n     @Mock\n@@ -61,25 +69,25 @@ public void setup() {\n     @Test\n     public void testCreateEntity() throws Exception {\n         Response response = mock(Response.class);\n-        when(entityResource.submit(any(HttpServletRequest.class))).thenReturn(response);\n+        when(mockEntityResource.submit(any(HttpServletRequest.class))).thenReturn(response);\n         final String guid = random();\n         when(response.getEntity()).thenReturn(new JSONObject() {{\n             put(ENTITIES, new JSONObject(\n                     new AtlasClient.EntityResult(Arrays.asList(guid), null, null).toString()).get(ENTITIES));\n         }});\n \n-        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, entityResource);\n+        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, mockEntityResource);\n         List<String> results = atlasClient.createEntity(new Referenceable(random()));\n         assertEquals(results.size(), 1);\n         assertEquals(results.get(0), guid);\n     }\n \n     @Test\n     public void testException() throws Exception {\n-        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, entityResource);\n+        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, mockEntityResource);\n \n         Response response = mock(Response.class);\n-        when(entityResource.submit(any(HttpServletRequest.class))).thenThrow(new WebApplicationException(response));\n+        when(mockEntityResource.submit(any(HttpServletRequest.class))).thenThrow(new WebApplicationException(response));\n         when(response.getEntity()).thenReturn(new JSONObject() {{\n             put(\"stackTrace\", \"stackTrace\");\n         }});\n@@ -91,7 +99,7 @@ public void testException() throws Exception {\n             assertEquals(e.getStatus(), ClientResponse.Status.BAD_REQUEST);\n         }\n \n-        when(entityResource.updateByUniqueAttribute(anyString(), anyString(), anyString(),\n+        when(mockEntityResource.updateByUniqueAttribute(anyString(), anyString(), anyString(),\n                 any(HttpServletRequest.class))).thenThrow(new WebApplicationException(response));\n         when(response.getStatus()).thenReturn(Response.Status.NOT_FOUND.getStatusCode());\n         try {\n@@ -106,7 +114,7 @@ public void testException() throws Exception {\n     @Test\n     public void testIsServerReady() throws Exception {\n         when(serviceState.getState()).thenReturn(ServiceState.ServiceStateValue.ACTIVE);\n-        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, entityResource);\n+        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, mockEntityResource);\n         assertTrue(atlasClient.isServerReady());\n \n         when(serviceState.getState()).thenReturn(ServiceState.ServiceStateValue.BECOMING_ACTIVE);\n@@ -117,14 +125,14 @@ public void testIsServerReady() throws Exception {\n     public void testUpdateEntity() throws Exception {\n         final String guid = random();\n         Response response = mock(Response.class);\n-        when(entityResource.updateByUniqueAttribute(anyString(), anyString(), anyString(),\n+        when(mockEntityResource.updateByUniqueAttribute(anyString(), anyString(), anyString(),\n                 any(HttpServletRequest.class))).thenReturn(response);\n         when(response.getEntity()).thenReturn(new JSONObject() {{\n             put(ENTITIES, new JSONObject(\n                     new AtlasClient.EntityResult(null, Arrays.asList(guid), null).toString()).get(ENTITIES));\n         }});\n \n-        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, entityResource);\n+        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, mockEntityResource);\n         AtlasClient.EntityResult\n                 entityResult = atlasClient.updateEntity(random(), random(), random(), new Referenceable(random()));\n         assertEquals(entityResult.getUpdateEntities(), Arrays.asList(guid));\n@@ -139,13 +147,21 @@ public void testDeleteEntity() throws Exception {\n                     new AtlasClient.EntityResult(null, null, Arrays.asList(guid)).toString()).get(ENTITIES));\n         }});\n \n-        when(entityResource.deleteEntities(anyListOf(String.class), anyString(), anyString(), anyString())).thenReturn(response);\n-        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, entityResource);\n+        when(mockEntityResource.deleteEntities(anyListOf(String.class), anyString(), anyString(), anyString())).thenReturn(response);\n+        LocalAtlasClient atlasClient = new LocalAtlasClient(serviceState, mockEntityResource);\n         AtlasClient.EntityResult entityResult = atlasClient.deleteEntity(random(), random(), random());\n         assertEquals(entityResult.getDeletedEntities(), Arrays.asList(guid));\n     }\n \n     private String random() {\n         return RandomStringUtils.randomAlphanumeric(10);\n     }\n+\n+    @Test\n+    @Inject\n+    public void testGetLocationURI() {\n+        final String guid = \"123\";\n+        URI uri = entityResource.getLocationURI(new ArrayList<String>() {{ add(guid); }});\n+        uri.getRawPath().equals(AtlasConstants.DEFAULT_ATLAS_REST_ADDRESS + \"/\" + AtlasClient.API.GET_ENTITY.getPath() + \"/\" + guid);\n+    }\n }",
                "raw_url": "https://github.com/apache/atlas/raw/aad34ae00fb0d39d292dff9743fce1ceb3eaa270/webapp/src/test/java/org/apache/atlas/LocalAtlasClientTest.java",
                "sha": "c5616dfe29071c1b2c8ce823100e6a69244066df",
                "status": "modified"
            }
        ],
        "message": "ATLAS-888 NPE in NotificationHookConsumer (sumasai via shwethags)",
        "parent": "https://github.com/apache/atlas/commit/8fefd165586f5fd8acd5c3a5786d6012dda68a5b",
        "repo": "atlas",
        "unit_tests": [
            "EntityResourceTest.java"
        ]
    },
    "atlas_c1f4007": {
        "bug_id": "atlas_c1f4007",
        "commit": "https://github.com/apache/atlas/commit/c1f4007a9d9f85f888a5c9164e11937025157edb",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 1,
                "filename": "repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "patch": "@@ -1079,8 +1079,12 @@ public static boolean isReference(IDataType type) {\n \n     }\n \n+    public static boolean isInternalType(AtlasVertex vertex) {\n+        return vertex != null && isInternalType(getTypeName(vertex));\n+    }\n+\n     public static boolean isInternalType(String typeName) {\n-        return typeName.startsWith(Constants.INTERNAL_PROPERTY_KEY_PREFIX);\n+        return typeName != null && typeName.startsWith(Constants.INTERNAL_PROPERTY_KEY_PREFIX);\n     }\n \n     public static void setArrayElementsProperty(IDataType elementType, AtlasVertex instanceVertex, String propertyName, List<Object> values) {",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "sha": "639077ddaf02e02799bb990319877f38b3e6b247",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 11,
                "filename": "repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "patch": "@@ -227,14 +227,10 @@ private void doFullTextMapping(List<AtlasEntityHeader> atlasEntityHeaders) {\n         }\n \n         for (AtlasEntityHeader atlasEntityHeader : atlasEntityHeaders) {\n-            if(GraphHelper.isInternalType(atlasEntityHeader.getTypeName())) {\n-                continue;\n-            }\n-\n             String      guid        = atlasEntityHeader.getGuid();\n             AtlasVertex atlasVertex = AtlasGraphUtilsV1.findByGuid(guid);\n \n-            if(atlasVertex == null) {\n+            if(atlasVertex == null || GraphHelper.isInternalType(atlasVertex)) {\n                 continue;\n             }\n \n@@ -262,12 +258,7 @@ private void updateFullTextMapping(String entityId, List<AtlasClassification> cl\n         }\n \n         AtlasVertex atlasVertex = AtlasGraphUtilsV1.findByGuid(entityId);\n-        if(atlasVertex == null) {\n-            return;\n-        }\n-\n-        if (atlasVertex == null) {\n-            LOG.warn(\"updateFullTextMapping(): no entity exists with guid {}\", entityId);\n+        if(atlasVertex == null || GraphHelper.isInternalType(atlasVertex)) {\n             return;\n         }\n ",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "sha": "7b349c4600aa6a6917b562d5163a70ac080b3e4e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 1,
                "filename": "webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "patch": "@@ -187,7 +187,9 @@ private void notifyOfEntityEvent(Collection<ITypedReferenceableInstance> entityD\n             messages.add(notification);\n         }\n \n-        notificationInterface.send(NotificationInterface.NotificationType.ENTITIES, messages);\n+        if (!messages.isEmpty()) {\n+            notificationInterface.send(NotificationInterface.NotificationType.ENTITIES, messages);\n+        }\n     }\n \n     private List<String> getNotificationAttributes(String entityType) {",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "sha": "53acf5631204ae9bc2237f199354f40e45984f91",
                "status": "modified"
            }
        ],
        "message": "ATLAS-2141: edit/disassociate tag results in NPE\n\n(cherry picked from commit 4b9d2670709df52e0d983587832fe6256220691b)",
        "parent": "https://github.com/apache/atlas/commit/ccd121e74204e1d85001be62abf09446d879889d",
        "repo": "atlas",
        "unit_tests": [
            "NotificationEntityChangeListenerTest.java"
        ]
    },
    "atlas_c331846": {
        "bug_id": "atlas_c331846",
        "commit": "https://github.com/apache/atlas/commit/c3318467eb3954b7fc6490312bee4ce0d36cf081",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/atlas/blob/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java?ref=c3318467eb3954b7fc6490312bee4ce0d36cf081",
                "deletions": 1,
                "filename": "webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "patch": "@@ -125,7 +125,13 @@ public Object fromV2ToV1(Object v2Obj, AtlasType type) throws AtlasBaseException\n             ret = new HashMap<>();\n \n             for (AtlasStructDef.AtlasAttributeDef attrDef : getAttributeDefs(structType)) {\n-                AtlasType            attrType      = structType.getAttributeType(attrDef.getName());\n+                AtlasType attrType = structType.getAttributeType(attrDef.getName());\n+\n+                if (attrType == null) {\n+                    LOG.warn(\"ignored attribute {}.{}: failed to find AtlasType\", structType.getTypeName(), attrDef.getName());\n+                    continue;\n+                }\n+\n                 AtlasFormatConverter attrConverter = converterRegistry.getConverter(attrType.getTypeCategory());\n \n                 Object v2Value = attributes.get(attrDef.getName());",
                "raw_url": "https://github.com/apache/atlas/raw/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "sha": "3565ab31c390ff63f95a5b0b59ac4ee7ebb94df7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/atlas/blob/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java?ref=c3318467eb3954b7fc6490312bee4ce0d36cf081",
                "deletions": 2,
                "filename": "webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "patch": "@@ -174,9 +174,13 @@ public EntityMutationResponse deleteById(@QueryParam(\"guid\") final List<String>\n         AtlasEntity.AtlasEntities atlasEntities = entitiesStore.searchEntities(searchFilter);\n         AtlasEntityHeader.AtlasEntityHeaders entityHeaders = new AtlasEntityHeader.AtlasEntityHeaders();\n         entityHeaders.setList(new LinkedList<AtlasEntityHeader>());\n-        for (AtlasEntity atlasEntity : atlasEntities.getList()) {\n-            entityHeaders.getList().add(new AtlasEntityHeader(atlasEntity.getTypeName(), atlasEntity.getAttributes()));\n+\n+        if (atlasEntities != null) {\n+            for (AtlasEntity atlasEntity : atlasEntities.getList()) {\n+                entityHeaders.getList().add(new AtlasEntityHeader(atlasEntity.getTypeName(), atlasEntity.getAttributes()));\n+            }\n         }\n+\n         return entityHeaders;\n     }\n ",
                "raw_url": "https://github.com/apache/atlas/raw/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "sha": "f6acd07b065584f232864ac3a07161d4017e86a6",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1415: fix potential NPE issues found by Coverity scan",
        "parent": "https://github.com/apache/atlas/commit/0e7ef3af9e59584bd9ea87b10d6264a97ba4b41e",
        "repo": "atlas",
        "unit_tests": [
            "TestEntitiesREST.java"
        ]
    },
    "atlas_d0a9b99": {
        "bug_id": "atlas_d0a9b99",
        "commit": "https://github.com/apache/atlas/commit/d0a9b99999a8d51a6612da62d025fbb48c471bc6",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/atlas/blob/d0a9b99999a8d51a6612da62d025fbb48c471bc6/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java?ref=d0a9b99999a8d51a6612da62d025fbb48c471bc6",
                "deletions": 8,
                "filename": "addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "patch": "@@ -123,7 +123,10 @@ private void importDatabases(boolean failOnError) throws Exception {\n         List<String> databases = hiveClient.getAllDatabases();\n         for (String databaseName : databases) {\n             Referenceable dbReference = registerDatabase(databaseName);\n-            importTables(dbReference, databaseName, failOnError);\n+\n+            if (dbReference != null) {\n+                importTables(dbReference, databaseName, failOnError);\n+            }\n         }\n     }\n \n@@ -146,13 +149,16 @@ public Referenceable createDBInstance(Database hiveDB) throws HiveException {\n     private Referenceable registerDatabase(String databaseName) throws Exception {\n         Referenceable dbRef = getDatabaseReference(clusterName, databaseName);\n         Database db = hiveClient.getDatabase(databaseName);\n-        if (dbRef == null) {\n-            dbRef = createDBInstance(db);\n-            dbRef = registerInstance(dbRef);\n-        } else {\n-            LOG.info(\"Database {} is already registered with id {}. Updating it.\", databaseName, dbRef.getId().id);\n-            dbRef = createOrUpdateDBInstance(db, dbRef);\n-            updateInstance(dbRef);\n+\n+        if (db != null) {\n+            if (dbRef == null) {\n+                dbRef = createDBInstance(db);\n+                dbRef = registerInstance(dbRef);\n+            } else {\n+                LOG.info(\"Database {} is already registered with id {}. Updating it.\", databaseName, dbRef.getId().id);\n+                dbRef = createOrUpdateDBInstance(db, dbRef);\n+                updateInstance(dbRef);\n+            }\n         }\n         return dbRef;\n     }",
                "raw_url": "https://github.com/apache/atlas/raw/d0a9b99999a8d51a6612da62d025fbb48c471bc6/addons/hive-bridge/src/main/java/org/apache/atlas/hive/bridge/HiveMetaStoreBridge.java",
                "sha": "e0d802441eeaf35757fc8b5b5dc3e1a5f5129233",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/atlas/blob/d0a9b99999a8d51a6612da62d025fbb48c471bc6/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/HiveHook.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/HiveHook.java?ref=d0a9b99999a8d51a6612da62d025fbb48c471bc6",
                "deletions": 0,
                "filename": "addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/HiveHook.java",
                "patch": "@@ -499,6 +499,9 @@ private Referenceable replaceSDQFName(final HiveEventContext event, Referenceabl\n \n         if (db != null) {\n             db = dgiBridge.hiveClient.getDatabase(db.getName());\n+        }\n+\n+        if (db != null) {\n             Referenceable dbEntity = dgiBridge.createDBInstance(db);\n \n             entities.add(dbEntity);",
                "raw_url": "https://github.com/apache/atlas/raw/d0a9b99999a8d51a6612da62d025fbb48c471bc6/addons/hive-bridge/src/main/java/org/apache/atlas/hive/hook/HiveHook.java",
                "sha": "e27e52c352b9dd488443b4aa914daf6de89e393d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/atlas/blob/d0a9b99999a8d51a6612da62d025fbb48c471bc6/release-log.txt",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/release-log.txt?ref=d0a9b99999a8d51a6612da62d025fbb48c471bc6",
                "deletions": 0,
                "filename": "release-log.txt",
                "patch": "@@ -6,6 +6,7 @@ INCOMPATIBLE CHANGES:\n \n \n ALL CHANGES:\n+ATLAS-1053 Fix issues flagged by Coverity scan - potential NPE (mneethiraj via sumasai)\n ATLAS-1052 Fix NPE in HiveHook due to null Session State (sumasai)\n ATLAS-1051 Sqoop Hook does not package HDFS model jars which is required (sumasai)\n ATLAS-1049 List types by supertype (shwethags via sumasai)",
                "raw_url": "https://github.com/apache/atlas/raw/d0a9b99999a8d51a6612da62d025fbb48c471bc6/release-log.txt",
                "sha": "c3ab28b0e4d1effd24ec168fa3fbcd6c36bad70e",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1053: Fix for issues flagged by Coverity scan - potential NPE",
        "parent": "https://github.com/apache/atlas/commit/56e97e225e65b50d15e6f59211f796788dd97446",
        "repo": "atlas",
        "unit_tests": [
            "HiveMetaStoreBridgeTest.java"
        ]
    },
    "atlas_eddab3b": {
        "bug_id": "atlas_eddab3b",
        "commit": "https://github.com/apache/atlas/commit/eddab3b12a1318f6e787d062816e28479715f077",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/atlas/blob/eddab3b12a1318f6e787d062816e28479715f077/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java?ref=eddab3b12a1318f6e787d062816e28479715f077",
                "deletions": 0,
                "filename": "webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "patch": "@@ -370,6 +370,10 @@ public AtlasImportResult importData(@FormDataParam(\"request\") String jsonData,\n         AtlasImportResult result;\n \n         try {\n+            if (StringUtils.isEmpty(jsonData)) {\n+                jsonData = \"{}\";\n+            }\n+\n             AtlasImportRequest request = AtlasType.fromJson(jsonData, AtlasImportRequest.class);\n             ZipSource zipSource = new ZipSource(inputStream);\n ",
                "raw_url": "https://github.com/apache/atlas/raw/eddab3b12a1318f6e787d062816e28479715f077/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "sha": "fe9111bb99c69a3678a1797d88b569b50d672db2",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1939: added parameter validation to prevent NPE during import\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/atlas/commit/84c6d52d266c6aa2039e7e8cb9a7edb8f4bb8a93",
        "repo": "atlas",
        "unit_tests": [
            "AdminResourceTest.java"
        ]
    }
}