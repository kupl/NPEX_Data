{
    "atlas_39be2cc": {
        "bug_id": "atlas_39be2cc",
        "commit": "https://github.com/apache/atlas/commit/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/atlas/blob/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java?ref=39be2ccfdf5ec3edb59d7779e7b3f7d95413b632",
                "deletions": 4,
                "filename": "repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "patch": "@@ -457,10 +457,14 @@ private void addEntity(AtlasEntityWithExtInfo entity, ExportContext context) thr\n     }\n \n     private void removeRelationshipAttributes(AtlasEntityWithExtInfo entity) {\n-        entity.getEntity().getRelationshipAttributes().clear();\n-        if(entity.getReferredEntities() != null) {\n-            for (AtlasEntity e: entity.getReferredEntities().values()) {\n-                e.getRelationshipAttributes().clear();\n+        if (entity.getEntity().getRelationshipAttributes() != null) {\n+            entity.getEntity().getRelationshipAttributes().clear();\n+        }\n+        if (entity.getReferredEntities() != null) {\n+            for (AtlasEntity e : entity.getReferredEntities().values()) {\n+                if (e.getRelationshipAttributes() != null) {\n+                    e.getRelationshipAttributes().clear();\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/atlas/raw/39be2ccfdf5ec3edb59d7779e7b3f7d95413b632/repository/src/main/java/org/apache/atlas/repository/impexp/ExportService.java",
                "sha": "c5e6534c62d51293c4777f8c7f0fda012454441d",
                "status": "modified"
            }
        ],
        "message": "ATLAS-2376: Fix for unitTest case in ExportServiceTest due to NPE",
        "parent": "https://github.com/apache/atlas/commit/bd87c3f624d45e9d6d2080c28197e3e1ab9a4ebc",
        "repo": "atlas",
        "unit_tests": [
            "ExportServiceTest.java"
        ]
    },
    "atlas_a5f971a": {
        "bug_id": "atlas_a5f971a",
        "commit": "https://github.com/apache/atlas/commit/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/atlas/blob/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "changes": 52,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java?ref=a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
                "deletions": 23,
                "filename": "intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "patch": "@@ -6,9 +6,9 @@\n  * to you under the Apache License, Version 2.0 (the\n  * \"License\"); you may not use this file except in compliance\n  * with the License.  You may obtain a copy of the License at\n- *\n+ * <p>\n  * http://www.apache.org/licenses/LICENSE-2.0\n- *\n+ * <p>\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -40,31 +40,31 @@\n import static com.fasterxml.jackson.annotation.JsonAutoDetect.Visibility.PUBLIC_ONLY;\n \n \n-@JsonAutoDetect(getterVisibility=PUBLIC_ONLY, setterVisibility=PUBLIC_ONLY, fieldVisibility=NONE)\n-@JsonSerialize(include=JsonSerialize.Inclusion.NON_NULL)\n-@JsonIgnoreProperties(ignoreUnknown=true)\n+@JsonAutoDetect(getterVisibility = PUBLIC_ONLY, setterVisibility = PUBLIC_ONLY, fieldVisibility = NONE)\n+@JsonSerialize(include = JsonSerialize.Inclusion.NON_NULL)\n+@JsonIgnoreProperties(ignoreUnknown = true)\n @XmlRootElement\n @XmlAccessorType(XmlAccessType.PROPERTY)\n public class AtlasExportRequest implements Serializable {\n \n     private static final long serialVersionUID = 1L;\n \n-    public static final String OPTION_FETCH_TYPE                    = \"fetchType\";\n-    public static final String OPTION_ATTR_MATCH_TYPE               = \"matchType\";\n-    public static final String OPTION_SKIP_LINEAGE                  = \"skipLineage\";\n-    public static final String OPTION_KEY_REPLICATED_TO             = \"replicatedTo\";\n-    public static final String FETCH_TYPE_FULL                      = \"full\";\n-    public static final String FETCH_TYPE_CONNECTED                 = \"connected\";\n-    public static final String FETCH_TYPE_INCREMENTAL               = \"incremental\";\n+    public static final String OPTION_FETCH_TYPE = \"fetchType\";\n+    public static final String OPTION_ATTR_MATCH_TYPE = \"matchType\";\n+    public static final String OPTION_SKIP_LINEAGE = \"skipLineage\";\n+    public static final String OPTION_KEY_REPLICATED_TO = \"replicatedTo\";\n+    public static final String FETCH_TYPE_FULL = \"full\";\n+    public static final String FETCH_TYPE_CONNECTED = \"connected\";\n+    public static final String FETCH_TYPE_INCREMENTAL = \"incremental\";\n     public static final String FETCH_TYPE_INCREMENTAL_CHANGE_MARKER = \"changeMarker\";\n-    public static final String MATCH_TYPE_STARTS_WITH               = \"startsWith\";\n-    public static final String MATCH_TYPE_ENDS_WITH                 = \"endsWith\";\n-    public static final String MATCH_TYPE_CONTAINS                  = \"contains\";\n-    public static final String MATCH_TYPE_MATCHES                   = \"matches\";\n-    public static final String MATCH_TYPE_FOR_TYPE                  = \"forType\";\n+    public static final String MATCH_TYPE_STARTS_WITH = \"startsWith\";\n+    public static final String MATCH_TYPE_ENDS_WITH = \"endsWith\";\n+    public static final String MATCH_TYPE_CONTAINS = \"contains\";\n+    public static final String MATCH_TYPE_MATCHES = \"matches\";\n+    public static final String MATCH_TYPE_FOR_TYPE = \"forType\";\n \n     private List<AtlasObjectId> itemsToExport = new ArrayList<>();\n-    private Map<String, Object> options       = new HashMap<>();\n+    private Map<String, Object> options = new HashMap<>();\n \n     public List<AtlasObjectId> getItemsToExport() {\n         return itemsToExport;\n@@ -83,7 +83,7 @@ public void setOptions(Map<String, Object> options) {\n     }\n \n     public String getFetchTypeOptionValue() {\n-        if(MapUtils.isEmpty(getOptions()) || !getOptions().containsKey(OPTION_FETCH_TYPE)) {\n+        if (MapUtils.isEmpty(getOptions()) || !getOptions().containsKey(OPTION_FETCH_TYPE)) {\n             return FETCH_TYPE_FULL;\n         }\n \n@@ -96,17 +96,17 @@ public String getFetchTypeOptionValue() {\n     }\n \n     public boolean getSkipLineageOptionValue() {\n-        if(MapUtils.isEmpty(getOptions()) ||\n+        if (MapUtils.isEmpty(getOptions()) ||\n                 !getOptions().containsKey(AtlasExportRequest.OPTION_SKIP_LINEAGE)) {\n             return false;\n         }\n \n         Object o = getOptions().get(AtlasExportRequest.OPTION_SKIP_LINEAGE);\n-        if(o instanceof String) {\n+        if (o instanceof String) {\n             return Boolean.parseBoolean((String) o);\n         }\n \n-        if(o instanceof Boolean) {\n+        if (o instanceof Boolean) {\n             return (Boolean) o;\n         }\n \n@@ -142,7 +142,13 @@ public boolean isReplicationOptionSet() {\n \n     @JsonIgnore\n     public String getOptionKeyReplicatedTo() {\n-        return isReplicationOptionSet() ? (String) options.get(OPTION_KEY_REPLICATED_TO) : StringUtils.EMPTY;\n+        String replicateToServerName = isReplicationOptionSet() ? (String) options.get(OPTION_KEY_REPLICATED_TO) : StringUtils.EMPTY;\n+\n+        if (replicateToServerName == null) {\n+            return StringUtils.EMPTY;\n+        } else {\n+            return replicateToServerName;\n+        }\n     }\n \n     public StringBuilder toString(StringBuilder sb) {",
                "raw_url": "https://github.com/apache/atlas/raw/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/intg/src/main/java/org/apache/atlas/model/impexp/AtlasExportRequest.java",
                "sha": "b03b386c0c619f14bac1e3b6672ddbb6efcb13ed",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/atlas/blob/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java?ref=a5f971a322b75a7cc2bd9e8bdf021be46e03b63d",
                "deletions": 1,
                "filename": "repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "patch": "@@ -64,7 +64,11 @@ public void addParentTransformsToSubTypes(String parentType, Set<String> subType\n                 getTransforms().put(subType, attribtueTransformMap);\n             } else {\n                 for (Map.Entry<String, List<ImportTransformer>> entry : attribtueTransformMap.entrySet()) {\n-                    getTransforms().get(subType).get(entry.getKey()).addAll(entry.getValue());\n+                    if((getTransforms().get(subType).containsKey(entry.getKey()))){\n+                        getTransforms().get(subType).get(entry.getKey()).addAll(entry.getValue());\n+                    } else {\n+                        LOG.warn(\"Attribute {} does not exist for Type : {}\", entry.getKey(), parentType);\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/atlas/raw/a5f971a322b75a7cc2bd9e8bdf021be46e03b63d/repository/src/main/java/org/apache/atlas/repository/impexp/ImportTransforms.java",
                "sha": "a2f592c3693468abc7349ca0abb05995f9d63341",
                "status": "modified"
            }
        ],
        "message": "ATLAS-3019 Handle NPE while transform and adding replicatedTo in import-export\n\nSigned-off-by: nixonrodrigues <nixon@apache.org>",
        "parent": "https://github.com/apache/atlas/commit/22041f51ce9a52f2c7b2634024e20765347a794a",
        "repo": "atlas",
        "unit_tests": [
            "ImportTransformsTest.java"
        ]
    },
    "atlas_c1f4007": {
        "bug_id": "atlas_c1f4007",
        "commit": "https://github.com/apache/atlas/commit/c1f4007a9d9f85f888a5c9164e11937025157edb",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 1,
                "filename": "repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "patch": "@@ -1079,8 +1079,12 @@ public static boolean isReference(IDataType type) {\n \n     }\n \n+    public static boolean isInternalType(AtlasVertex vertex) {\n+        return vertex != null && isInternalType(getTypeName(vertex));\n+    }\n+\n     public static boolean isInternalType(String typeName) {\n-        return typeName.startsWith(Constants.INTERNAL_PROPERTY_KEY_PREFIX);\n+        return typeName != null && typeName.startsWith(Constants.INTERNAL_PROPERTY_KEY_PREFIX);\n     }\n \n     public static void setArrayElementsProperty(IDataType elementType, AtlasVertex instanceVertex, String propertyName, List<Object> values) {",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/graph/GraphHelper.java",
                "sha": "639077ddaf02e02799bb990319877f38b3e6b247",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 11,
                "filename": "repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "patch": "@@ -227,14 +227,10 @@ private void doFullTextMapping(List<AtlasEntityHeader> atlasEntityHeaders) {\n         }\n \n         for (AtlasEntityHeader atlasEntityHeader : atlasEntityHeaders) {\n-            if(GraphHelper.isInternalType(atlasEntityHeader.getTypeName())) {\n-                continue;\n-            }\n-\n             String      guid        = atlasEntityHeader.getGuid();\n             AtlasVertex atlasVertex = AtlasGraphUtilsV1.findByGuid(guid);\n \n-            if(atlasVertex == null) {\n+            if(atlasVertex == null || GraphHelper.isInternalType(atlasVertex)) {\n                 continue;\n             }\n \n@@ -262,12 +258,7 @@ private void updateFullTextMapping(String entityId, List<AtlasClassification> cl\n         }\n \n         AtlasVertex atlasVertex = AtlasGraphUtilsV1.findByGuid(entityId);\n-        if(atlasVertex == null) {\n-            return;\n-        }\n-\n-        if (atlasVertex == null) {\n-            LOG.warn(\"updateFullTextMapping(): no entity exists with guid {}\", entityId);\n+        if(atlasVertex == null || GraphHelper.isInternalType(atlasVertex)) {\n             return;\n         }\n ",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/repository/src/main/java/org/apache/atlas/repository/store/graph/v1/AtlasEntityChangeNotifier.java",
                "sha": "7b349c4600aa6a6917b562d5163a70ac080b3e4e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/atlas/blob/c1f4007a9d9f85f888a5c9164e11937025157edb/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java?ref=c1f4007a9d9f85f888a5c9164e11937025157edb",
                "deletions": 1,
                "filename": "webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "patch": "@@ -187,7 +187,9 @@ private void notifyOfEntityEvent(Collection<ITypedReferenceableInstance> entityD\n             messages.add(notification);\n         }\n \n-        notificationInterface.send(NotificationInterface.NotificationType.ENTITIES, messages);\n+        if (!messages.isEmpty()) {\n+            notificationInterface.send(NotificationInterface.NotificationType.ENTITIES, messages);\n+        }\n     }\n \n     private List<String> getNotificationAttributes(String entityType) {",
                "raw_url": "https://github.com/apache/atlas/raw/c1f4007a9d9f85f888a5c9164e11937025157edb/webapp/src/main/java/org/apache/atlas/notification/NotificationEntityChangeListener.java",
                "sha": "53acf5631204ae9bc2237f199354f40e45984f91",
                "status": "modified"
            }
        ],
        "message": "ATLAS-2141: edit/disassociate tag results in NPE\n\n(cherry picked from commit 4b9d2670709df52e0d983587832fe6256220691b)",
        "parent": "https://github.com/apache/atlas/commit/ccd121e74204e1d85001be62abf09446d879889d",
        "repo": "atlas",
        "unit_tests": [
            "NotificationEntityChangeListenerTest.java"
        ]
    },
    "atlas_c331846": {
        "bug_id": "atlas_c331846",
        "commit": "https://github.com/apache/atlas/commit/c3318467eb3954b7fc6490312bee4ce0d36cf081",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/atlas/blob/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java?ref=c3318467eb3954b7fc6490312bee4ce0d36cf081",
                "deletions": 1,
                "filename": "webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "patch": "@@ -125,7 +125,13 @@ public Object fromV2ToV1(Object v2Obj, AtlasType type) throws AtlasBaseException\n             ret = new HashMap<>();\n \n             for (AtlasStructDef.AtlasAttributeDef attrDef : getAttributeDefs(structType)) {\n-                AtlasType            attrType      = structType.getAttributeType(attrDef.getName());\n+                AtlasType attrType = structType.getAttributeType(attrDef.getName());\n+\n+                if (attrType == null) {\n+                    LOG.warn(\"ignored attribute {}.{}: failed to find AtlasType\", structType.getTypeName(), attrDef.getName());\n+                    continue;\n+                }\n+\n                 AtlasFormatConverter attrConverter = converterRegistry.getConverter(attrType.getTypeCategory());\n \n                 Object v2Value = attributes.get(attrDef.getName());",
                "raw_url": "https://github.com/apache/atlas/raw/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/adapters/AtlasStructFormatConverter.java",
                "sha": "3565ab31c390ff63f95a5b0b59ac4ee7ebb94df7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/atlas/blob/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java?ref=c3318467eb3954b7fc6490312bee4ce0d36cf081",
                "deletions": 2,
                "filename": "webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "patch": "@@ -174,9 +174,13 @@ public EntityMutationResponse deleteById(@QueryParam(\"guid\") final List<String>\n         AtlasEntity.AtlasEntities atlasEntities = entitiesStore.searchEntities(searchFilter);\n         AtlasEntityHeader.AtlasEntityHeaders entityHeaders = new AtlasEntityHeader.AtlasEntityHeaders();\n         entityHeaders.setList(new LinkedList<AtlasEntityHeader>());\n-        for (AtlasEntity atlasEntity : atlasEntities.getList()) {\n-            entityHeaders.getList().add(new AtlasEntityHeader(atlasEntity.getTypeName(), atlasEntity.getAttributes()));\n+\n+        if (atlasEntities != null) {\n+            for (AtlasEntity atlasEntity : atlasEntities.getList()) {\n+                entityHeaders.getList().add(new AtlasEntityHeader(atlasEntity.getTypeName(), atlasEntity.getAttributes()));\n+            }\n         }\n+\n         return entityHeaders;\n     }\n ",
                "raw_url": "https://github.com/apache/atlas/raw/c3318467eb3954b7fc6490312bee4ce0d36cf081/webapp/src/main/java/org/apache/atlas/web/rest/EntitiesREST.java",
                "sha": "f6acd07b065584f232864ac3a07161d4017e86a6",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1415: fix potential NPE issues found by Coverity scan",
        "parent": "https://github.com/apache/atlas/commit/0e7ef3af9e59584bd9ea87b10d6264a97ba4b41e",
        "repo": "atlas",
        "unit_tests": [
            "TestEntitiesREST.java"
        ]
    },
    "atlas_eddab3b": {
        "bug_id": "atlas_eddab3b",
        "commit": "https://github.com/apache/atlas/commit/eddab3b12a1318f6e787d062816e28479715f077",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/atlas/blob/eddab3b12a1318f6e787d062816e28479715f077/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/atlas/contents/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java?ref=eddab3b12a1318f6e787d062816e28479715f077",
                "deletions": 0,
                "filename": "webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "patch": "@@ -370,6 +370,10 @@ public AtlasImportResult importData(@FormDataParam(\"request\") String jsonData,\n         AtlasImportResult result;\n \n         try {\n+            if (StringUtils.isEmpty(jsonData)) {\n+                jsonData = \"{}\";\n+            }\n+\n             AtlasImportRequest request = AtlasType.fromJson(jsonData, AtlasImportRequest.class);\n             ZipSource zipSource = new ZipSource(inputStream);\n ",
                "raw_url": "https://github.com/apache/atlas/raw/eddab3b12a1318f6e787d062816e28479715f077/webapp/src/main/java/org/apache/atlas/web/resources/AdminResource.java",
                "sha": "fe9111bb99c69a3678a1797d88b569b50d672db2",
                "status": "modified"
            }
        ],
        "message": "ATLAS-1939: added parameter validation to prevent NPE during import\n\nSigned-off-by: Madhan Neethiraj <madhan@apache.org>",
        "parent": "https://github.com/apache/atlas/commit/84c6d52d266c6aa2039e7e8cb9a7edb8f4bb8a93",
        "repo": "atlas",
        "unit_tests": [
            "AdminResourceTest.java"
        ]
    }
}