{
    "streams_0232a3a": {
        "bug_id": "streams_0232a3a",
        "commit": "https://github.com/apache/streams/commit/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/streams/blob/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftConverter.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftConverter.java?ref=0232a3a0c943c08ecdbe257fa9ebcab959d1dc87",
                "deletions": 6,
                "filename": "streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftConverter.java",
                "patch": "@@ -18,20 +18,20 @@ Licensed to the Apache Software Foundation (ASF) under one\n */\n package org.apache.streams.datasift.provider;\n \n-import org.apache.streams.core.StreamsDatum;\n-import org.apache.streams.datasift.Datasift;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n \n /**\n  * Converts a {@link org.apache.streams.datasift.Datasift} object to a StreamsDatum\n  */\n-public interface DatasiftTypeConverter {\n+public interface DatasiftConverter {\n \n     /**\n-     * Converts a {@link org.apache.streams.datasift.Datasift} object to a StreamsDatum\n-     * @param datasift\n+     * Converts a datasift related object to the desired resulting object.\n+     * @param toConvert\n+     * @param mapper\n      * @return\n      */\n-    public StreamsDatum convert(Datasift datasift);\n+    public Object convert(Object toConvert, ObjectMapper mapper);\n \n \n }",
                "previous_filename": "streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftTypeConverter.java",
                "raw_url": "https://github.com/apache/streams/raw/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftConverter.java",
                "sha": "fa614b028d719c75bbfc9e3b1f790ae18befc010",
                "status": "renamed"
            },
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/streams/blob/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftStreamProvider.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftStreamProvider.java?ref=0232a3a0c943c08ecdbe257fa9ebcab959d1dc87",
                "deletions": 11,
                "filename": "streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftStreamProvider.java",
                "patch": "@@ -24,6 +24,8 @@ Licensed to the Apache Software Foundation (ASF) under one\n import com.datasift.client.stream.DeletedInteraction;\n import com.datasift.client.stream.Interaction;\n import com.datasift.client.stream.StreamEventListener;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.base.Preconditions;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Queues;\n@@ -33,6 +35,7 @@ Licensed to the Apache Software Foundation (ASF) under one\n import org.apache.streams.core.StreamsProvider;\n import org.apache.streams.core.StreamsResultSet;\n import org.apache.streams.datasift.DatasiftConfiguration;\n+import org.apache.streams.jackson.StreamsJacksonMapper;\n import org.joda.time.DateTime;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -55,22 +58,23 @@ Licensed to the Apache Software Foundation (ASF) under one\n     private ConcurrentLinkedQueue<Interaction> interactions;\n     private Map<String, DataSiftClient> clients;\n     private StreamEventListener eventListener;\n+    private ObjectMapper mapper;\n \n     /**\n      * Constructor that searches for available configurations\n+     *\n      * @param listener {@link com.datasift.client.stream.StreamEventListener} that handles deletion notices received from twitter.\n      */\n     public DatasiftStreamProvider(StreamEventListener listener) {\n         this(listener, null);\n     }\n \n     /**\n-     *\n      * @param listener {@link com.datasift.client.stream.StreamEventListener} that handles deletion notices received from twitter.\n-     * @param config  Configuration to use\n+     * @param config   Configuration to use\n      */\n     public DatasiftStreamProvider(StreamEventListener listener, DatasiftConfiguration config) {\n-        if(config == null) {\n+        if (config == null) {\n             Config datasiftConfig = StreamsConfigurator.config.getConfig(\"datasift\");\n             this.config = DatasiftStreamConfigurator.detectConfiguration(datasiftConfig);\n         } else {\n@@ -89,14 +93,15 @@ public void startStream() {\n         Preconditions.checkNotNull(this.config.getUserName());\n         Preconditions.checkNotNull(this.clients);\n \n-        for( String hash : this.config.getStreamHash()) {\n+        for (String hash : this.config.getStreamHash()) {\n             startStreamForHash(hash);\n         }\n \n     }\n \n     /**\n      * Creates a connection to datasift and starts collection of data from the resulting string.\n+     *\n      * @param streamHash\n      */\n     public void startStreamForHash(String streamHash) {\n@@ -113,6 +118,7 @@ public void startStreamForHash(String streamHash) {\n \n     /**\n      * Exposed for testing purposes.\n+     *\n      * @param userName\n      * @param apiKey\n      * @return\n@@ -124,11 +130,12 @@ protected DataSiftClient getNewClient(String userName, String apiKey) {\n \n     /**\n      * If a stream has been opened for the supplied stream hash, that stream will be shutdown.\n+     *\n      * @param streamHash\n      */\n     public void shutDownStream(String streamHash) {\n         synchronized (clients) {\n-            if(!this.clients.containsKey(streamHash))\n+            if (!this.clients.containsKey(streamHash))\n                 return;\n             DataSiftClient client = this.clients.get(streamHash);\n             LOGGER.debug(\"Shutting down stream for hash: {}\", streamHash);\n@@ -142,22 +149,31 @@ public void shutDownStream(String streamHash) {\n      */\n     public void stop() {\n         synchronized (clients) {\n-            for(DataSiftClient client : this.clients.values()) {\n+            for (DataSiftClient client : this.clients.values()) {\n                 client.shutdown();\n             }\n         }\n     }\n \n     // PRIME EXAMPLE OF WHY WE NEED NEW INTERFACES FOR PROVIDERS\n-    @Override //This is a hack.  It is only like this because of how perpetual streams work at the moment.  Read list server to debate/vote for new interfaces.\n+    @Override\n+    //This is a hack.  It is only like this because of how perpetual streams work at the moment.  Read list server to debate/vote for new interfaces.\n     public StreamsResultSet readCurrent() {\n         Queue<StreamsDatum> datums = Queues.newConcurrentLinkedQueue();\n-\n-            while(!this.interactions.isEmpty()) {\n-                Interaction interaction = this.interactions.poll();\n-                while(!datums.offer(new StreamsDatum(interaction, interaction.getData().get(\"interaction\").get(\"id\").textValue()))) {\n+        StreamsDatum datum = null;\n+        Interaction interaction;\n+        while (!this.interactions.isEmpty()) {\n+            interaction = this.interactions.poll();\n+            try {\n+                datum = new StreamsDatum(this.mapper.writeValueAsString(this.interactions.poll()), interaction.getData().get(\"interaction\").get(\"id\").textValue());\n+            } catch (JsonProcessingException jpe) {\n+                LOGGER.error(\"Exception while converting Interaction to String : {}\", jpe);\n+            }\n+            if (datum != null) {\n+                while (!datums.offer(datum)) {\n                     Thread.yield();\n                 }\n+            }\n \n         }\n         return new StreamsResultSet(datums);\n@@ -177,6 +193,7 @@ public StreamsResultSet readRange(DateTime start, DateTime end) {\n     public void prepare(Object configurationObject) {\n         this.interactions = new ConcurrentLinkedQueue<Interaction>();\n         this.clients = Maps.newHashMap();\n+        this.mapper = StreamsJacksonMapper.getInstance();\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/streams/raw/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftStreamProvider.java",
                "sha": "96466ea89b1d3f9829d56bfc6287aa2adf7958ca",
                "status": "modified"
            },
            {
                "additions": 36,
                "blob_url": "https://github.com/apache/streams/blob/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessor.java",
                "changes": 53,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessor.java?ref=0232a3a0c943c08ecdbe257fa9ebcab959d1dc87",
                "deletions": 17,
                "filename": "streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessor.java",
                "patch": "@@ -18,13 +18,11 @@ Licensed to the Apache Software Foundation (ASF) under one\n */\n package org.apache.streams.datasift.provider;\n \n-import com.fasterxml.jackson.core.JsonProcessingException;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.google.common.collect.Lists;\n import org.apache.commons.lang.NotImplementedException;\n import org.apache.streams.core.StreamsDatum;\n import org.apache.streams.core.StreamsProcessor;\n-import org.apache.streams.datasift.Datasift;\n import org.apache.streams.datasift.serializer.DatasiftActivitySerializer;\n import org.apache.streams.jackson.StreamsJacksonMapper;\n import org.apache.streams.pojo.json.Activity;\n@@ -36,28 +34,30 @@ Licensed to the Apache Software Foundation (ASF) under one\n /**\n  * Created by sblackmon on 12/10/13.\n  */\n-public class DatasiftEventProcessor implements StreamsProcessor {\n+public class DatasiftTypeConverterProcessor implements StreamsProcessor {\n \n-    private final static Logger LOGGER = LoggerFactory.getLogger(DatasiftEventProcessor.class);\n+    private final static Logger LOGGER = LoggerFactory.getLogger(DatasiftTypeConverterProcessor.class);\n \n     private ObjectMapper mapper;\n     private Class outClass;\n     private DatasiftActivitySerializer datasiftInteractionActivitySerializer;\n-    private DatasiftTypeConverter converter;\n+    private DatasiftConverter converter;\n \n     public final static String TERMINATE = new String(\"TERMINATE\");\n \n-    public DatasiftEventProcessor(Class outClass) {\n+    public DatasiftTypeConverterProcessor(Class outClass) {\n         this.outClass = outClass;\n     }\n \n     @Override\n     public List<StreamsDatum> process(StreamsDatum entry) {\n         List<StreamsDatum> result = Lists.newLinkedList();\n-        Object item = entry.getDocument();\n+        Object doc;\n         try {\n-            Datasift datasift = mapper.convertValue(item, Datasift.class);\n-            result.add(this.converter.convert(datasift));\n+            doc = this.converter.convert(entry.getDocument(), this.mapper);\n+            if(doc != null) {\n+                result.add(new StreamsDatum(doc, entry.getId()));\n+            }\n         } catch (Exception e) {\n             LOGGER.error(\"Exception converting Datasift Interaction to \"+this.outClass.getName()+ \" : {}\", e);\n         }\n@@ -82,21 +82,40 @@ public void cleanUp() {\n \n     }\n \n-    private class ActivityConverter implements DatasiftTypeConverter {\n+    private class ActivityConverter implements DatasiftConverter {\n+\n         @Override\n-        public StreamsDatum convert(Datasift datasift) {\n-            return new StreamsDatum(datasiftInteractionActivitySerializer.deserialize(datasift), datasift.getInteraction().getId());\n+        public Object convert(Object toConvert, ObjectMapper mapper) {\n+            if(toConvert instanceof Activity)\n+                return toConvert;\n+            try {\n+                if(toConvert instanceof String)\n+                    return mapper.readValue((String)toConvert, Activity.class);\n+                return mapper.convertValue(toConvert, Activity.class);\n+            } catch (Exception e) {\n+                LOGGER.error(\"Exception while trying to convert {} to a Activity.\", toConvert.getClass());\n+                LOGGER.error(\"Exception : {}\", e);\n+                return null;\n+            }\n         }\n+\n+\n     }\n \n-    private class StringConverter implements DatasiftTypeConverter {\n+    private class StringConverter implements DatasiftConverter {\n         @Override\n-        public StreamsDatum convert(Datasift datasift) {\n+        public Object convert(Object toConvert, ObjectMapper mapper) {\n+            if(toConvert instanceof String)\n+                return toConvert;\n             try {\n-                return new StreamsDatum(mapper.writeValueAsString(datasift), datasift.getInteraction().getId());\n-            } catch (JsonProcessingException jpe) {\n-                throw new RuntimeException(jpe);\n+                return mapper.writeValueAsString(toConvert);\n+            } catch (Exception e) {\n+                LOGGER.error(\"Exception while trying to write {} as a String.\", toConvert.getClass());\n+                LOGGER.error(\"Exception : {}\", e);\n+                return null;\n             }\n         }\n+\n+\n     }\n };",
                "previous_filename": "streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftEventProcessor.java",
                "raw_url": "https://github.com/apache/streams/raw/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/main/java/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessor.java",
                "sha": "1e994fb7669ddb5dfbf25ec8fa454296120f19f4",
                "status": "renamed"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/streams/blob/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/test/java17/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessorTest.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-contrib/streams-provider-datasift/src/test/java17/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessorTest.java?ref=0232a3a0c943c08ecdbe257fa9ebcab959d1dc87",
                "deletions": 0,
                "filename": "streams-contrib/streams-provider-datasift/src/test/java17/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessorTest.java",
                "patch": "@@ -0,0 +1,55 @@\n+package org.apache.streams.datasift.provider;\n+\n+import org.apache.streams.core.StreamsDatum;\n+import org.apache.streams.core.StreamsProcessor;\n+import org.apache.streams.pojo.json.Activity;\n+import org.junit.Test;\n+\n+import java.util.List;\n+\n+import static junit.framework.Assert.assertEquals;\n+import static junit.framework.Assert.assertNotNull;\n+import static junit.framework.Assert.assertTrue;\n+\n+/**\n+ *\n+ */\n+public class DatasiftTypeConverterProcessorTest {\n+\n+    private static final String DATASIFT_JSON = \"{\\\"_index\\\":\\\"major_music_artist_datasift_20140527\\\",\\\"_type\\\":\\\"datasift\\\",\\\"_id\\\":\\\"1e3e5ef97532a580e0741841f5746728\\\",\\\"_version\\\":1,\\\"found\\\":true, \\\"_source\\\" : {\\\"data\\\":{\\\"demographic\\\":{\\\"gender\\\":\\\"female\\\"},\\\"interaction\\\":{\\\"schema\\\":{\\\"version\\\":3},\\\"source\\\":\\\"Twitter for Android\\\",\\\"author\\\":{\\\"username\\\":\\\"ViiOLeee\\\",\\\"name\\\":\\\"Violeta Anguita\\\",\\\"id\\\":70931384,\\\"avatar\\\":\\\"http://pbs.twimg.com/profile_images/378800000851401229/bbf480cde2e9923a1d20acd393da0212_normal.jpeg\\\",\\\"link\\\":\\\"http://twitter.com/ViiOLeee\\\",\\\"language\\\":\\\"en\\\"},\\\"type\\\":\\\"twitter\\\",\\\"created_at\\\":\\\"Tue, 27 May 2014 22:38:15 +0000\\\",\\\"received_at\\\":1.401230295658E9,\\\"content\\\":\\\"RT @AliiAnguita: \\\\\\\"@Pharrell: Loved working with @edsheeran on Sing. He's a genius. https://t.co/wB2qKyJMRw\\\\\\\" @ViiOLeee  look at this!\\\",\\\"id\\\":\\\"1e3e5ef97532a580e0741841f5746728\\\",\\\"link\\\":\\\"http://twitter.com/ViiOLeee/status/471420141989666817\\\",\\\"mentions\\\":[\\\"Pharrell\\\",\\\"edsheeran\\\",\\\"ViiOLeee\\\",\\\"AliiAnguita\\\"],\\\"mention_ids\\\":[338084918,85452649,70931384]},\\\"klout\\\":{\\\"score\\\":34},\\\"language\\\":{\\\"tag\\\":\\\"en\\\",\\\"tag_extended\\\":\\\"en\\\",\\\"confidence\\\":98},\\\"links\\\":{\\\"code\\\":[200],\\\"created_at\\\":[\\\"Tue, 27 May 2014 14:28:06 +0000\\\"],\\\"meta\\\":{\\\"charset\\\":[\\\"UTF-8\\\"],\\\"content_type\\\":[\\\"text/html\\\"],\\\"description\\\":[\\\"Official Video for Ed Sheeran&#39;s track SING Get this track on iTunes: http://smarturl.it/EdSing Pre-order &#39;x&#39; on iTunes and get &#39;One&#39; instantly: http://smartu...\\\"],\\\"keywords\\\":[[\\\"ed sheeran\\\",\\\"ed sheeran sing\\\",\\\"ed sheeran new album\\\",\\\"Ed Sheeran (Musical Artist)\\\",\\\"ed sheeran one\\\",\\\"ed sheeran fault in our stars\\\",\\\"ed sheeran all of the stars\\\",\\\"s...\\\"]],\\\"lang\\\":[\\\"en\\\"],\\\"opengraph\\\":[{\\\"site_name\\\":\\\"YouTube\\\",\\\"url\\\":\\\"http://www.youtube.com/watch?v=tlYcUqEPN58\\\",\\\"title\\\":\\\"Ed Sheeran - SING [Official Video]\\\",\\\"image\\\":\\\"https://i1.ytimg.com/vi/tlYcUqEPN58/maxresdefault.jpg\\\",\\\"description\\\":\\\"Official Video for Ed Sheeran&#39;s track SING Get this track on iTunes: http://smarturl.it/EdSing Pre-order &#39;x&#39; on iTunes and get &#39;One&#39; instantly: http://smartu...\\\",\\\"type\\\":\\\"video\\\"}],\\\"twitter\\\":[{\\\"card\\\":\\\"player\\\",\\\"site\\\":\\\"@youtube\\\",\\\"url\\\":\\\"http://www.youtube.com/watch?v=tlYcUqEPN58\\\",\\\"title\\\":\\\"Ed Sheeran - SING [Official Video]\\\",\\\"description\\\":\\\"Official Video for Ed Sheeran&#39;s track SING Get this track on iTunes: http://smarturl.it/EdSing Pre-order &#39;x&#39; on iTunes and get &#39;One&#39; instantly: http://smartu...\\\",\\\"image\\\":\\\"https://i1.ytimg.com/vi/tlYcUqEPN58/maxresdefault.jpg\\\",\\\"app\\\":{\\\"iphone\\\":{\\\"name\\\":\\\"YouTube\\\",\\\"id\\\":\\\"544007664\\\",\\\"url\\\":\\\"vnd.youtube://watch/tlYcUqEPN58\\\"},\\\"ipad\\\":{\\\"name\\\":\\\"YouTube\\\",\\\"id\\\":\\\"544007664\\\",\\\"url\\\":\\\"vnd.youtube://watch/tlYcUqEPN58\\\"},\\\"googleplay\\\":{\\\"name\\\":\\\"YouTube\\\",\\\"id\\\":\\\"com.google.android.youtube\\\",\\\"url\\\":\\\"http://www.youtube.com/watch?v=tlYcUqEPN58\\\"}},\\\"player\\\":\\\"https://www.youtube.com/embed/tlYcUqEPN58\\\",\\\"player_width\\\":\\\"1280\\\",\\\"player_height\\\":\\\"720\\\"}]},\\\"normalized_url\\\":[\\\"https://youtube.com/watch?v=tlYcUqEPN58\\\"],\\\"retweet_count\\\":[0],\\\"title\\\":[\\\"Ed Sheeran - SING [Official Video] - YouTube\\\"],\\\"url\\\":[\\\"https://www.youtube.com/watch?v=tlYcUqEPN58\\\"]},\\\"twitter\\\":{\\\"id\\\":\\\"471420141989666817\\\",\\\"retweet\\\":{\\\"text\\\":\\\"\\\\\\\"@Pharrell: Loved working with @edsheeran on Sing. He's a genius. https://t.co/wB2qKyJMRw\\\\\\\" @ViiOLeee  look at this!\\\",\\\"id\\\":\\\"471420141989666817\\\",\\\"user\\\":{\\\"name\\\":\\\"Violeta Anguita\\\",\\\"description\\\":\\\"La vida no ser\u00e1 la fiesta que todos esperamos, pero mientras estemos aqu\u00ed debemos BAILAR!!! #ErasmusOnceErasmusForever\\\",\\\"location\\\":\\\"Espa\u00f1a..Ol\u00e9!\\\",\\\"statuses_count\\\":5882,\\\"followers_count\\\":249,\\\"friends_count\\\":1090,\\\"screen_name\\\":\\\"ViiOLeee\\\",\\\"profile_image_url\\\":\\\"http://pbs.twimg.com/profile_images/378800000851401229/bbf480cde2e9923a1d20acd393da0212_normal.jpeg\\\",\\\"profile_image_url_https\\\":\\\"https://pbs.twimg.com/profile_images/378800000851401229/bbf480cde2e9923a1d20acd393da0212_normal.jpeg\\\",\\\"lang\\\":\\\"en\\\",\\\"time_zone\\\":\\\"Madrid\\\",\\\"utc_offset\\\":7200,\\\"listed_count\\\":1,\\\"id\\\":70931384,\\\"id_str\\\":\\\"70931384\\\",\\\"geo_enabled\\\":false,\\\"verified\\\":false,\\\"favourites_count\\\":275,\\\"created_at\\\":\\\"Wed, 02 Sep 2009 10:19:59 +0000\\\"},\\\"source\\\":\\\"<a href=\\\\\\\"http://twitter.com/download/android\\\\\\\" rel=\\\\\\\"nofollow\\\\\\\">Twitter for Android</a>\\\",\\\"count\\\":1,\\\"created_at\\\":\\\"Tue, 27 May 2014 22:38:15 +0000\\\",\\\"mentions\\\":[\\\"Pharrell\\\",\\\"edsheeran\\\",\\\"ViiOLeee\\\",\\\"AliiAnguita\\\"],\\\"mention_ids\\\":[338084918,85452649,70931384],\\\"links\\\":[\\\"https://www.youtube.com/watch?v=tlYcUqEPN58\\\"],\\\"display_urls\\\":[\\\"youtube.com/watch?v=tlYcUq\u2026\\\"],\\\"domains\\\":[\\\"www.youtube.com\\\"],\\\"lang\\\":\\\"en\\\"},\\\"retweeted\\\":{\\\"id\\\":\\\"471419867078209536\\\",\\\"user\\\":{\\\"name\\\":\\\"Alicia Anguita \\\",\\\"description\\\":\\\"Estudiante de Ingenieria de la Edificaci\u00f3n en Granada.\\\",\\\"statuses_count\\\":371,\\\"followers_count\\\":185,\\\"friends_count\\\":404,\\\"screen_name\\\":\\\"AliiAnguita\\\",\\\"profile_image_url\\\":\\\"http://pbs.twimg.com/profile_images/424248659677442048/qCPZL8c9_normal.jpeg\\\",\\\"profile_image_url_https\\\":\\\"https://pbs.twimg.com/profile_images/424248659677442048/qCPZL8c9_normal.jpeg\\\",\\\"lang\\\":\\\"es\\\",\\\"listed_count\\\":0,\\\"id\\\":561201891,\\\"id_str\\\":\\\"561201891\\\",\\\"geo_enabled\\\":false,\\\"verified\\\":false,\\\"favourites_count\\\":17,\\\"created_at\\\":\\\"Mon, 23 Apr 2012 13:11:44 +0000\\\"},\\\"source\\\":\\\"<a href=\\\\\\\"http://twitter.com/download/android\\\\\\\" rel=\\\\\\\"nofollow\\\\\\\">Twitter for Android</a>\\\",\\\"created_at\\\":\\\"Tue, 27 May 2014 22:37:09 +0000\\\"}}}}}\";\n+\n+    @Test\n+    public void testTypeConverterToString() {\n+        final String ID = \"1\";\n+        StreamsProcessor processor = new DatasiftTypeConverterProcessor(String.class);\n+        processor.prepare(null);\n+        StreamsDatum datum = new StreamsDatum(DATASIFT_JSON, ID);\n+        List<StreamsDatum> result = processor.process(datum);\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        StreamsDatum resultDatum = result.get(0);\n+        assertNotNull(resultDatum);\n+        assertNotNull(resultDatum.getDocument());\n+        assertTrue(resultDatum.getDocument() instanceof String);\n+        assertEquals(ID, resultDatum.getId());\n+    }\n+\n+    @Test\n+    public void testTypeConverterToActivity() {\n+        final String ID = \"1\";\n+        StreamsProcessor processor = new DatasiftTypeConverterProcessor(Activity.class);\n+        processor.prepare(null);\n+        StreamsDatum datum = new StreamsDatum(DATASIFT_JSON, ID);\n+        List<StreamsDatum> result = processor.process(datum);\n+        assertNotNull(result);\n+        assertEquals(1, result.size());\n+        StreamsDatum resultDatum = result.get(0);\n+        assertNotNull(resultDatum);\n+        assertNotNull(resultDatum.getDocument());\n+        assertTrue(resultDatum.getDocument() instanceof Activity);\n+        assertEquals(ID, resultDatum.getId());\n+    }\n+\n+\n+\n+}",
                "raw_url": "https://github.com/apache/streams/raw/0232a3a0c943c08ecdbe257fa9ebcab959d1dc87/streams-contrib/streams-provider-datasift/src/test/java17/org/apache/streams/datasift/provider/DatasiftTypeConverterProcessorTest.java",
                "sha": "4552a9ba6c63f7b965ef92cc4a6ed48d4234a263",
                "status": "added"
            }
        ],
        "message": "Fixed NPE in DatasiftTypeConverterProcessor.  Changed DatasiftStreamProvider to output interactions as Strings, since Interactions are not serializable.",
        "parent": "https://github.com/apache/streams/commit/f4749b9a8a3f980445e0feb7ce73539062ad9617",
        "patched_files": [
            "DatasiftStreamProvider.java",
            "DatasiftTypeConverterProcessor.java",
            "DatasiftConverter.java"
        ],
        "repo": "streams",
        "unit_tests": [
            "DatasiftTypeConverterProcessorTest.java",
            "DatasiftStreamProviderTest.java"
        ]
    },
    "streams_2f11ad0": {
        "bug_id": "streams_2f11ad0",
        "commit": "https://github.com/apache/streams/commit/2f11ad004cb199096457f1c29710498fab426566",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/2f11ad004cb199096457f1c29710498fab426566/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java?ref=2f11ad004cb199096457f1c29710498fab426566",
                "deletions": 2,
                "filename": "streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "patch": "@@ -140,8 +140,8 @@ private void setWaitTime() {\n             if (streamConfig != null &&\n                     streamConfig.containsKey(\"monitoring_broadcast_interval_ms\") &&\n                     streamConfig.get(\"monitoring_broadcast_interval_ms\") != null &&\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer) {\n+                    (streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n+                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer)) {\n                 waitTime = Long.parseLong(streamConfig.get(\"monitoring_broadcast_interval_ms\").toString());\n             } else {\n                 waitTime = DEFAULT_WAIT_TIME;",
                "raw_url": "https://github.com/apache/streams/raw/2f11ad004cb199096457f1c29710498fab426566/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "sha": "2a6a8f31610ef9d29eac82dc038655884735c5d3",
                "status": "modified"
            }
        ],
        "message": "STREAMS-223 | Fixing faulty if statement logic that was causing NPEs when stream config objects were not explicitly set",
        "parent": "https://github.com/apache/streams/commit/b410556f871228cf4b65eabd2a12ca915d4df0bf",
        "patched_files": [
            "BroadcastMonitorThread.java"
        ],
        "repo": "streams",
        "unit_tests": [
            "BroadcastMonitorThreadTest.java"
        ]
    },
    "streams_4f6f7d5": {
        "bug_id": "streams_4f6f7d5",
        "commit": "https://github.com/apache/streams/commit/4f6f7d5f5ac277289deff43409bb27a99741f0cc",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/streams/blob/4f6f7d5f5ac277289deff43409bb27a99741f0cc/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java?ref=4f6f7d5f5ac277289deff43409bb27a99741f0cc",
                "deletions": 10,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "patch": "@@ -200,14 +200,16 @@ public void start() {\n         attachShutdownHandler();\n         boolean isRunning = true;\n         this.executor = new ShutdownStreamOnUnhandleThrowableThreadPoolExecutor(this.totalTasks, this);\n-        this.monitor = Executors.newFixedThreadPool(this.monitorTasks + 1);\n+        this.monitor = Executors.newCachedThreadPool();\n         Map<String, StreamsProviderTask> provTasks = new HashMap<String, StreamsProviderTask>();\n         tasks = new HashMap<String, List<StreamsTask>>();\n         boolean forcedShutDown = false;\n \n         try {\n-            monitorThread = new LocalStreamProcessMonitorThread(executor, 10);\n-            this.monitor.submit(monitorThread);\n+            if (this.useDeprecatedMonitors) {\n+                monitorThread = new LocalStreamProcessMonitorThread(executor, 10);\n+                this.monitor.submit(monitorThread);\n+            }\n             setupComponentTasks(tasks);\n             setupProviderTasks(provTasks);\n             LOGGER.info(\"Started stream with {} components\", tasks.size());\n@@ -279,7 +281,9 @@ protected void forceShutdown(Map<String, List<StreamsTask>> streamsTasks) {\n \n     protected void shutdown(Map<String, List<StreamsTask>> streamsTasks) throws InterruptedException {\n         LOGGER.info(\"Attempting to shutdown tasks\");\n-        this.monitorThread.shutdown();\n+        if (this.monitorThread != null) {\n+            this.monitorThread.shutdown();\n+        }\n         this.executor.shutdown();\n         //complete stream shut down gracfully\n         for(StreamComponent prov : this.providers.values()) {\n@@ -322,13 +326,11 @@ protected void setupComponentTasks(Map<String, List<StreamsTask>> streamsTasks)\n                 task.setStreamConfig(this.streamConfig);\n                 this.futures.put(task, this.executor.submit(task));\n                 compTasks.add(task);\n-                if(comp.isOperationCountable() ) {\n-                    if(this.useDeprecatedMonitors) {\n-                        this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) comp.getOperation(), 10));\n-                        this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) task, 10));\n-                    }\n-                    this.monitor.submit(broadcastMonitor);\n+                if(this.useDeprecatedMonitors &&  comp.isOperationCountable() ) {\n+                    this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) comp.getOperation(), 10));\n+                    this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) task, 10));\n                 }\n+                this.monitor.submit(broadcastMonitor);\n             }\n             streamsTasks.put(comp.getId(), compTasks);\n         }",
                "raw_url": "https://github.com/apache/streams/raw/4f6f7d5f5ac277289deff43409bb27a99741f0cc/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "sha": "bef5ed7d3f20dd05937f425baa5770e54bacb297",
                "status": "modified"
            }
        ],
        "message": "STREAMS-252 | Fixing NPE issue causing Stream to drop datum in certain circumstances",
        "parent": "https://github.com/apache/streams/commit/af7aabf45c4f938db305f311edda6962bd5140f7",
        "patched_files": [
            "LocalStreamBuilder.java"
        ],
        "repo": "streams",
        "unit_tests": [
            "LocalStreamBuilderTest.java"
        ]
    },
    "streams_a20f01a": {
        "bug_id": "streams_a20f01a",
        "commit": "https://github.com/apache/streams/commit/a20f01aefc5904ecb857fdb9a344023cf6a05100",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 2,
                "filename": "streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "patch": "@@ -141,8 +141,8 @@ private void setWaitTime() {\n             if (streamConfig != null &&\n                     streamConfig.containsKey(\"monitoring_broadcast_interval_ms\") &&\n                     streamConfig.get(\"monitoring_broadcast_interval_ms\") != null &&\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer) {\n+                    (streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n+                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer)) {\n                 waitTime = Long.parseLong(streamConfig.get(\"monitoring_broadcast_interval_ms\").toString());\n             } else {\n                 waitTime = DEFAULT_WAIT_TIME;",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "sha": "fd9354a13051ba9007625fa31f6d5eada7b207c9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 1,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "patch": "@@ -420,7 +420,8 @@ protected int getTimeout() {\n     }\n \n     private void setStreamIdentifier() {\n-        if(streamConfig.containsKey(STREAM_IDENTIFIER_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(STREAM_IDENTIFIER_KEY) &&\n                 streamConfig.get(STREAM_IDENTIFIER_KEY) != null &&\n                 streamConfig.get(STREAM_IDENTIFIER_KEY).toString().length() > 0) {\n             this.streamIdentifier = streamConfig.get(STREAM_IDENTIFIER_KEY).toString();",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "sha": "a9afc3cd492c58d43060018b04deeebaaaf6abac",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 2,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "patch": "@@ -205,7 +205,8 @@ public long getStartedAt() {\n     }\n \n     public void setStartedAt() {\n-        if(streamConfig.containsKey(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) &&\n                 streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) != null &&\n                 streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) instanceof Long) {\n             this.startedAt = Long.parseLong(streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY).toString());\n@@ -219,7 +220,8 @@ public String getStreamIdentifier() {\n     }\n \n     public void setStreamIdentifier() {\n-        if(streamConfig.containsKey(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) &&\n                 streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) != null &&\n                 streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY).toString().length() > 0) {\n             this.streamIdentifier = streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY).toString();",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "sha": "9726963d08c8035a333dc8bbe997ae1a15743419",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 3,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "patch": "@@ -52,6 +52,7 @@\n import org.apache.streams.local.test.writer.DatumCounterWriter;\n import org.apache.streams.local.test.writer.SystemOutWriter;\n import org.apache.streams.util.ComponentUtils;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Ignore;\n@@ -74,7 +75,9 @@\n  *\n  */\n public class LocalStreamBuilderTest extends RandomizedTest {\n-\n+    private static final String MBEAN_ID = \"test_id\";\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n     @After\n     public void removeLocalMBeans() {\n@@ -90,12 +93,12 @@ public void removeRegisteredMBeans(String... ids) {\n         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n         for(String id : ids) {\n             try {\n-                mbs.unregisterMBean(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id)));\n+                mbs.unregisterMBean(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id, STREAM_ID, STREAM_START_TIME)));\n             } catch (MalformedObjectNameException|InstanceNotFoundException|MBeanRegistrationException e) {\n                 //No-op\n             }\n             try {\n-                mbs.unregisterMBean(new ObjectName((String.format(StreamsTaskCounter.NAME_TEMPLATE, id))));\n+                mbs.unregisterMBean(new ObjectName((String.format(StreamsTaskCounter.NAME_TEMPLATE, id, STREAM_ID, STREAM_START_TIME))));\n             } catch (MalformedObjectNameException|InstanceNotFoundException|MBeanRegistrationException e) {\n                 //No-op\n             }",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "sha": "ed670033e6f21aa8e76858972905ad387dbdc703",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 11,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import com.carrotsearch.randomizedtesting.RandomizedTest;\n import com.carrotsearch.randomizedtesting.annotations.Repeat;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Test;\n \n@@ -32,7 +33,8 @@\n public class DatumStatusCounterTest extends RandomizedTest {\n \n     private static final String MBEAN_ID = \"test_id\";\n-\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n \n     /**\n@@ -42,7 +44,7 @@\n     @After\n     public void unregisterMXBean() throws Exception {\n         try {\n-            ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(String.format(DatumStatusCounter.NAME_TEMPLATE, MBEAN_ID)));\n+            ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(String.format(DatumStatusCounter.NAME_TEMPLATE, MBEAN_ID, STREAM_ID, STREAM_START_TIME)));\n         } catch (InstanceNotFoundException ife) {\n             //No-op\n         }\n@@ -54,7 +56,7 @@ public void unregisterMXBean() throws Exception {\n     @Test\n     public void testConstructor() {\n         try {\n-            new DatumStatusCounter(MBEAN_ID);\n+            new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         } catch (Throwable t) {\n             fail(\"Constructor Threw Exception : \"+t.getMessage());\n         }\n@@ -67,7 +69,7 @@ public void testConstructor() {\n     @Test\n     @Repeat(iterations = 3)\n     public void testPassed() throws Exception {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         int numIncrements = randomIntBetween(1, 100000);\n         for(int i=0; i < numIncrements; ++i) {\n             counter.incrementPassedCount();\n@@ -76,7 +78,7 @@ public void testPassed() throws Exception {\n \n         unregisterMXBean();\n \n-        counter = new DatumStatusCounter(MBEAN_ID);\n+        counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         numIncrements = randomIntBetween(1, 100000);\n         long total = 0;\n         for(int i=0; i < numIncrements; ++i) {\n@@ -94,7 +96,7 @@ public void testPassed() throws Exception {\n     @Test\n     @Repeat(iterations = 3)\n     public void testFailed() throws Exception {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         int numIncrements = randomIntBetween(1, 100000);\n         for(int i=0; i < numIncrements; ++i) {\n             counter.incrementFailedCount();\n@@ -103,7 +105,7 @@ public void testFailed() throws Exception {\n \n         unregisterMXBean();\n \n-        counter = new DatumStatusCounter(MBEAN_ID);\n+        counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         numIncrements = randomIntBetween(1, 100000);\n         long total = 0;\n         for(int i=0; i < numIncrements; ++i) {\n@@ -121,14 +123,12 @@ public void testFailed() throws Exception {\n     @Test\n     @Repeat(iterations = 3)\n     public void testFailureRate() {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         assertEquals(0.0, counter.getFailRate(), 0);\n         int failures = randomIntBetween(0, 100000);\n         int passes = randomIntBetween(0, 100000);\n         counter.incrementPassedCount(passes);\n         counter.incrementFailedCount(failures);\n         assertEquals((double)failures / (double)(passes + failures), counter.getFailRate(), 0);\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "sha": "9775c6fa6592402c0422c8227c019ef67b683ef5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 7,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import com.carrotsearch.randomizedtesting.RandomizedTest;\n import com.carrotsearch.randomizedtesting.annotations.Repeat;\n import org.apache.streams.util.ComponentUtils;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Test;\n \n@@ -35,7 +36,9 @@\n  * Single thread unit tests for {@link org.apache.streams.local.queues.ThroughputQueue}\n  */\n public class ThroughputQueueSingleThreadTest extends RandomizedTest {\n-\n+    private static final String MBEAN_ID = \"test_id\";\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n     @After\n     public void removeLocalMBeans() {\n@@ -208,10 +211,9 @@ public void testMBeanRegistration() {\n         try {\n             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n             Integer beanCount = mbs.getMBeanCount();\n-            String id = \"testQueue\";\n-            ThroughputQueue queue = new ThroughputQueue(id);\n+            ThroughputQueue queue = new ThroughputQueue(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n             assertEquals(\"Expected bean to be registered\", new Integer(beanCount+1), mbs.getMBeanCount());\n-            ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id)));\n+            ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, MBEAN_ID, STREAM_ID, STREAM_START_TIME)));\n             assertNotNull(mBean);\n         } catch (Exception e) {\n             fail(\"Failed to register MXBean : \"+e.getMessage());\n@@ -226,12 +228,11 @@ public void testMultipleMBeanRegistrations() {\n         try {\n             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n             Integer beanCount = mbs.getMBeanCount();\n-            String id = \"testQueue\";\n             int numReg = randomIntBetween(2, 100);\n             for(int i=0; i < numReg; ++i) {\n-                ThroughputQueue queue = new ThroughputQueue(id+i);\n+                ThroughputQueue queue = new ThroughputQueue(MBEAN_ID + \"\" + i, STREAM_ID, STREAM_START_TIME);\n                 assertEquals(\"Expected bean to be registered\", new Integer(beanCount + (i+1)), mbs.getMBeanCount());\n-                ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id+i)));\n+                ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, MBEAN_ID + \"\" + i, STREAM_ID, STREAM_START_TIME)));\n                 assertNotNull(mBean);\n             }\n         } catch (Exception e) {",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "sha": "ef669f47012e11eb0ae6876e9f5f9b249a9fa9cb",
                "status": "modified"
            }
        ],
        "message": "STREAMS-216 | Fixed unit tests and hardened LocalStreamBuilder, BaseStreamsTask, and BroadcastMonitorThread against NPEs",
        "parent": "https://github.com/apache/streams/commit/fb8f9d209bf604a3b2127e22441e54b8e3259ad7",
        "patched_files": [
            "LocalStreamBuilder.java",
            "BaseStreamsTask.java",
            "DatumStatusCounter.java",
            "BroadcastMonitorThread.java"
        ],
        "repo": "streams",
        "unit_tests": [
            "LocalStreamBuilderTest.java",
            "DatumStatusCounterTest.java",
            "BroadcastMonitorThreadTest.java",
            "ThroughputQueueSingleThreadTest.java"
        ]
    }
}