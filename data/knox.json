{
    "knox_197e996": {
        "bug_id": "knox_197e996",
        "commit": "https://github.com/apache/knox/commit/197e9960d2724056f257ddb64980a62b40cf8d6a",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/knox/blob/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java?ref=197e9960d2724056f257ddb64980a62b40cf8d6a",
                "deletions": 4,
                "filename": "gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "patch": "@@ -274,10 +274,14 @@ private void addRoleIfMember(final String userDn, final SearchResult group,\n     }\n     finally {\n       try {\n-        attributeEnum.close();\n+        if (attributeEnum != null) {\n+          attributeEnum.close();\n+        }\n       }\n       finally {\n-        e.close();\n+        if (e != null) {\n+          e.close();\n+        }\n       }\n     }\n   }\n@@ -474,7 +478,9 @@ boolean isUserMemberOfDynamicGroup(LdapName userLdapDn, String memberUrl,\n     finally {\n       if (searchResultEnum != null) {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         }\n         finally {\n           LdapUtils.closeContext(systemLdapCtx);\n@@ -534,7 +540,9 @@ protected String getUserDn(String principal) throws IllegalArgumentException, Il\n         throw new IllegalArgumentException(\"Hit NamingException: \" + e.getMessage());\n       } finally {\n         try {\n-          searchResultEnum.close();\n+          if (searchResultEnum != null) {\n+            searchResultEnum.close();\n+          }\n         } catch (NamingException e) {\n         }\n         finally {",
                "raw_url": "https://github.com/apache/knox/raw/197e9960d2724056f257ddb64980a62b40cf8d6a/gateway-provider-security-shiro/src/main/java/org/apache/hadoop/gateway/shirorealm/KnoxLdapRealm.java",
                "sha": "1cf9fd88280fcf0ffd78710e4fe54fb927c219b2",
                "status": "modified"
            }
        ],
        "message": "KNOX-459 - added null checks to the closing of resultEnums to avoid NPEs",
        "parent": "https://github.com/apache/knox/commit/868e5715e4a3fe21c08cedfd58ba5cd67ff65fe1",
        "repo": "knox",
        "unit_tests": [
            "KnoxLdapRealmTest.java"
        ]
    },
    "knox_5298548": {
        "bug_id": "knox_5298548",
        "commit": "https://github.com/apache/knox/commit/529854861c9882f6124ab1a84909f5aa1a813676",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/knox/blob/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java?ref=529854861c9882f6124ab1a84909f5aa1a813676",
                "deletions": 10,
                "filename": "gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "patch": "@@ -24,11 +24,11 @@\n import org.apache.knox.gateway.util.IpAddressValidator;\n \n /**\n+ *\n  */\n public class AclParser {\n   private static AclsAuthorizationMessages log = MessagesFactory.get( AclsAuthorizationMessages.class );\n \n-  public String resourceRole;\n   public ArrayList<String> users;\n   public ArrayList<String> groups;\n   public boolean anyUser = true;\n@@ -37,6 +37,9 @@\n \n \n   public AclParser() {\n+    users = new ArrayList<>();\n+    groups = new ArrayList<>();\n+    ipv = new IpAddressValidator(null);\n   }\n   \n   public void parseAcls(String resourceRole, String acls) throws InvalidACLException {\n@@ -45,34 +48,27 @@ public void parseAcls(String resourceRole, String acls) throws InvalidACLExcepti\n       if (parts.length != 3) {\n         log.invalidAclsFoundForResource(resourceRole);\n         throw new InvalidACLException(\"Invalid ACLs specified for requested resource: \" + resourceRole);\n-      }\n-      else {\n+      } else {\n         log.aclsFoundForResource(resourceRole);\n       }\n       parseUserAcls(parts);\n       \n       parseGroupAcls(parts);\n \n       parseIpAddressAcls(parts);\n-    }\n-    else {\n+    } else {\n       log.noAclsFoundForResource(resourceRole);\n-      users = new ArrayList<String>();\n-      groups = new ArrayList<String>();\n-      ipv = new IpAddressValidator(null);\n     }\n   }\n \n   private void parseUserAcls(String[] parts) {\n-    users = new ArrayList<String>();\n     Collections.addAll(users, parts[0].split(\",\"));\n     if (!users.contains(\"*\")) {\n       anyUser = false;\n     }\n   }\n \n   private void parseGroupAcls(String[] parts) {\n-    groups = new ArrayList<String>();\n     Collections.addAll(groups, parts[1].split(\",\"));\n     if (!groups.contains(\"*\")) {\n       anyGroup = false;",
                "raw_url": "https://github.com/apache/knox/raw/529854861c9882f6124ab1a84909f5aa1a813676/gateway-provider-security-authz-acls/src/main/java/org/apache/knox/gateway/filter/AclParser.java",
                "sha": "9df4059965786e53bb22dc46eee63cce0fdb8a04",
                "status": "modified"
            }
        ],
        "message": "KNOX-1387 - NPE in AclsAuthorizationFilter",
        "parent": "https://github.com/apache/knox/commit/c3851dd8686003400fec75132526e08c18455510",
        "repo": "knox",
        "unit_tests": [
            "AclParserTest.java"
        ]
    },
    "knox_6e56ea0": {
        "bug_id": "knox_6e56ea0",
        "commit": "https://github.com/apache/knox/commit/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/knox/blob/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java?ref=6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d",
                "deletions": 5,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "patch": "@@ -476,11 +476,12 @@ public void start() throws ServiceLifecycleException {\n \n   @Override\n   public void stop() throws ServiceLifecycleException {\n-    try {\n-      remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n-    } catch (final Exception e) {\n-      LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY,\n-          e.toString());\n+    if(remoteClient != null) {\n+      try {\n+        remoteClient.removeEntryListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY);\n+      } catch (final Exception e) {\n+        LOG.errorRemovingRemoteListener(PATH_KNOX_ALIAS_STORE_TOPOLOGY, e.toString());\n+      }\n     }\n   }\n ",
                "raw_url": "https://github.com/apache/knox/raw/6e56ea05f2ce56bb610ad51f2fc7ae9b0aa9b66d/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/RemoteAliasService.java",
                "sha": "9ba5d0bd774207b3b91b61243f024d619af1d8cf",
                "status": "modified"
            }
        ],
        "message": "KNOX-1251 - Fix NPE in RemoteAliasService#stop()",
        "parent": "https://github.com/apache/knox/commit/5ecb51e3c32941d3dfe85f323003f48cc737c519",
        "repo": "knox",
        "unit_tests": [
            "RemoteAliasServiceTest.java"
        ]
    },
    "knox_7d83917": {
        "bug_id": "knox_7d83917",
        "commit": "https://github.com/apache/knox/commit/7d839171a7c2ecda217732718ae5aedf4d429fba",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/CHANGES?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 0,
                "filename": "CHANGES",
                "patch": "@@ -10,6 +10,7 @@ Release Notes - Apache Knox - Version 0.6.0\n \n ** Improvement\n   * [KNOX-462] - Proper error message when root tag of topology file incorrect\n+  * [KNOX-501] - Avoid NPE in case of passing invalid argument to KnoxCli.\n \n ------------------------------------------------------------------------------\n Release Notes - Apache Knox - Version 0.5.1",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/CHANGES",
                "sha": "9f2677a954955f2382539a4eeb838aaf825297cf",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 3,
                "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "patch": "@@ -89,10 +89,12 @@ public int run(String[] args) throws Exception {\n       if (exitCode != 0) {\n         return exitCode;\n       }\n-      if (command.validate()) {\n-          initializeServices( command instanceof MasterCreateCommand );\n-          command.execute();\n+      if (command != null && command.validate()) {\n+        initializeServices( command instanceof MasterCreateCommand );\n+        command.execute();\n       } else {\n+        out.println(\"ERROR: Invalid Command\" + \"\\n\" + \"Unrecognized option:\" + args[0] + \"\\n\"\n+            + \"A fatal exception has occurred. Program will exit.\");\n         exitCode = -2;\n       }\n     } catch (Exception e) {",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/main/java/org/apache/hadoop/gateway/util/KnoxCLI.java",
                "sha": "8366f2ee061965a09057483a8af57208466b04ec",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/knox/blob/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java?ref=7d839171a7c2ecda217732718ae5aedf4d429fba",
                "deletions": 0,
                "filename": "gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "patch": "@@ -119,6 +119,17 @@ public void testListAndDeleteOfAliasForInvalidClusterName() throws Exception {\n \n   }\n \n+  @Test\n+  public void testForInvalidArgument() throws Exception {\n+    outContent.reset();\n+    String[] args1 = { \"--value\", \"testvalue1\", \"--master\", \"master\" };\n+    KnoxCLI cli = new KnoxCLI();\n+    cli.setConf(new GatewayConfigImpl());\n+    int rc = cli.run(args1);\n+    assertEquals(-2, rc);\n+    assertTrue(outContent.toString().contains(\"ERROR: Invalid Command\"));\n+  }\n+\n   @Test\n   public void testListAndDeleteOfAliasForValidClusterName() throws Exception {\n     outContent.reset();",
                "raw_url": "https://github.com/apache/knox/raw/7d839171a7c2ecda217732718ae5aedf4d429fba/gateway-server/src/test/java/org/apache/hadoop/gateway/util/KnoxCLITest.java",
                "sha": "82f380adbacb92414fe1424bad191b4dd0d59e97",
                "status": "modified"
            }
        ],
        "message": "KNOX-501: Avoid NPE , in case of passing invalid argument to KnoxCli.\nContributed by J.Andreina.",
        "parent": "https://github.com/apache/knox/commit/2192932e012186ca8dc5777bdcc1b14d162c9128",
        "repo": "knox",
        "unit_tests": [
            "KnoxCLITest.java"
        ]
    },
    "knox_9b611ae": {
        "bug_id": "knox_9b611ae",
        "commit": "https://github.com/apache/knox/commit/9b611aea89a7ff0ef9205e071e076c92b4afccdf",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/pom.xml?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 0,
                "filename": "gateway-server/pom.xml",
                "patch": "@@ -354,6 +354,10 @@\n             <groupId>com.sun.xml.bind</groupId>\n             <artifactId>jaxb-impl</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.apache.knox</groupId>\n+            <artifactId>gateway-util-configinjector</artifactId>\n+        </dependency>\n \n         <!-- ********** ********** ********** ********** ********** ********** -->\n         <!-- ********** Test Dependencies                           ********** -->",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/pom.xml",
                "sha": "1d43d9ba48457b31d385b016f44ba58b9b6d2948",
                "status": "modified"
            },
            {
                "additions": 25,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 3,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "patch": "@@ -17,10 +17,18 @@\n  */\n package org.apache.knox.gateway.services.security.impl;\n \n+import org.apache.knox.gateway.GatewayServer;\n+import org.apache.knox.gateway.config.ConfigurationException;\n import org.apache.knox.gateway.security.RemoteAliasServiceProvider;\n-import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientServiceProvider;\n+import org.apache.knox.gateway.service.config.remote.zk.ZooKeeperClientService;\n+import org.apache.knox.gateway.services.GatewayServices;\n+import org.apache.knox.gateway.services.ServiceType;\n+import org.apache.knox.gateway.services.config.client.RemoteConfigurationRegistryClientService;\n import org.apache.knox.gateway.services.security.AliasService;\n import org.apache.knox.gateway.services.security.MasterService;\n+import org.apache.knox.gateway.util.KnoxCLI;\n+\n+import java.util.Locale;\n \n public class ZookeeperRemoteAliasServiceProvider implements RemoteAliasServiceProvider {\n   @Override\n@@ -30,7 +38,21 @@ public String getType() {\n \n   @Override\n   public AliasService newInstance(AliasService localAliasService, MasterService ms) {\n-    return new ZookeeperRemoteAliasService(localAliasService, ms,\n-        new ZooKeeperClientServiceProvider().newInstance());\n+\n+    final GatewayServices services = GatewayServer.getGatewayServices() != null ? GatewayServer.getGatewayServices() : KnoxCLI.getGatewayServices();\n+\n+    if(services != null) {\n+      final RemoteConfigurationRegistryClientService registryClientService = services\n+          .getService(ServiceType.REMOTE_REGISTRY_CLIENT_SERVICE);\n+\n+      /* Check to see if we already have ZooKeeperClientService instance, if so use it */\n+      if (registryClientService instanceof ZooKeeperClientService) {\n+        return new ZookeeperRemoteAliasService(localAliasService, ms,\n+            registryClientService);\n+\n+      }\n+    }\n+\n+    throw new ConfigurationException(String.format(Locale.ROOT,\"%s service not configured\", ZooKeeperClientService.TYPE));\n   }\n }",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/services/security/impl/ZookeeperRemoteAliasServiceProvider.java",
                "sha": "52c4462fb86b8b6d1d3169e2ee98dd282c13063e",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/knox/blob/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java?ref=9b611aea89a7ff0ef9205e071e076c92b4afccdf",
                "deletions": 1,
                "filename": "gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "patch": "@@ -171,7 +171,7 @@ public int run(String[] args) throws Exception {\n     return exitCode;\n   }\n \n-  GatewayServices getGatewayServices() {\n+  public static synchronized GatewayServices getGatewayServices() {\n     return services;\n   }\n ",
                "raw_url": "https://github.com/apache/knox/raw/9b611aea89a7ff0ef9205e071e076c92b4afccdf/gateway-server/src/main/java/org/apache/knox/gateway/util/KnoxCLI.java",
                "sha": "daae9f3c482e2f5b259e09493e40c7f334a428e0",
                "status": "modified"
            }
        ],
        "message": "KNOX-1851 - Fix NPE in Zookeeper Remote Alias Service (#86)",
        "parent": "https://github.com/apache/knox/commit/07d4af68bfec827d182c8e3a0967b680cad9b883",
        "repo": "knox",
        "unit_tests": [
            "KnoxCLITest.java"
        ]
    },
    "knox_c061d20": {
        "bug_id": "knox_c061d20",
        "commit": "https://github.com/apache/knox/commit/c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
                "deletions": 13,
                "filename": "gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "patch": "@@ -80,19 +80,21 @@ public synchronized void setURLs(List<String> urls) {\n   @Override\n   public synchronized void markFailed(String url) {\n     String top = urls.peek();\n-    boolean pushToBottom = false;\n-    URI topUri = URI.create(top);\n-    URI incomingUri = URI.create(url);\n-    String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n-    String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n-    if ( topHostPort.equals(incomingHostPort) ) {\n-      pushToBottom = true;\n-    }\n-    //put the failed url at the bottom\n-    if ( pushToBottom ) {\n-      String failed = urls.poll();\n-      urls.offer(failed);\n-      LOG.markedFailedUrl(failed, urls.peek());\n+    if (top != null) {\n+      boolean pushToBottom = false;\n+      URI topUri = URI.create(top);\n+      URI incomingUri = URI.create(url);\n+      String topHostPort = topUri.getHost() + \":\" + topUri.getPort();\n+      String incomingHostPort = incomingUri.getHost() + \":\" + incomingUri.getPort();\n+      if (topHostPort.equals(incomingHostPort)) {\n+        pushToBottom = true;\n+      }\n+      //put the failed url at the bottom\n+      if (pushToBottom) {\n+        String failed = urls.poll();\n+        urls.offer(failed);\n+        LOG.markedFailedUrl(failed, urls.peek());\n+      }\n     }\n   }\n }",
                "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/main/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManager.java",
                "sha": "8ee59a77f71e6bc7910a42d36d5dfdf6f9d3d4ae",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/knox/blob/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java?ref=c061d20a8135ff80d8c99cb5403a5f295b1c2a63",
                "deletions": 0,
                "filename": "gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "patch": "@@ -23,6 +23,7 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n public class DefaultURLManagerTest {\n \n@@ -89,4 +90,20 @@ public void testMarkingFailedURL() {\n       assertEquals(url3, manager.getActiveURL());\n    }\n \n+   /**\n+    * KNOX-1283\n+    */\n+   @Test\n+   public void testMarkFailedWithEmptyURLs() {\n+      ArrayList<String> urls = new ArrayList<>();\n+      DefaultURLManager manager = new DefaultURLManager();\n+      manager.setURLs(urls);\n+      assertTrue(manager.getURLs().isEmpty());\n+      try {\n+         manager.markFailed(\"http://localhost:8080\");\n+      } catch (NullPointerException e) {\n+         fail(\"Empty URL list should not result in NPE.\");\n+      }\n+   }\n+\n }",
                "raw_url": "https://github.com/apache/knox/raw/c061d20a8135ff80d8c99cb5403a5f295b1c2a63/gateway-provider-ha/src/test/java/org/apache/knox/gateway/ha/provider/impl/DefaultURLManagerTest.java",
                "sha": "84defbcb69177b24b448b114275f486fe1af911e",
                "status": "modified"
            }
        ],
        "message": "KNOX-1283 - DefaultURLManager markFailed method throws NPE if urls is empty",
        "parent": "https://github.com/apache/knox/commit/12a1fd65d97ec5c584bad12c9960d58870aa974d",
        "repo": "knox",
        "unit_tests": [
            "DefaultURLManagerTest.java"
        ]
    },
    "knox_c211d05": {
        "bug_id": "knox_c211d05",
        "commit": "https://github.com/apache/knox/commit/c211d05e98c82d57eb0af61487a76f0ddd99660d",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/knox/blob/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java?ref=c211d05e98c82d57eb0af61487a76f0ddd99660d",
                "deletions": 20,
                "filename": "gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "patch": "@@ -128,28 +128,29 @@ public void doFilter( ServletRequest servletRequest, ServletResponse servletResp\n     // if there was no match then look for a default service for the topology\n     if (match == null) {\n       Topology topology = (Topology) servletRequest.getServletContext().getAttribute(\"org.apache.hadoop.gateway.topology\");\n-      String defaultServicePath = topology.getDefaultServicePath();\n-      if (defaultServicePath != null) {\n-        try {\n-          String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n-          match = chains.match(Parser.parseLiteral(newPathWithQuery));\n-          String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n-          String url = origUrl;\n-          if (path.equals(\"/\")) {\n-            url += defaultServicePath;\n-          }\n-          else {\n-            int index = origUrl.indexOf(path);\n-            url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+      if (topology != null) {\n+        String defaultServicePath = topology.getDefaultServicePath();\n+        if (defaultServicePath != null) {\n+          try {\n+            String newPathWithQuery = defaultServicePath + \"/\" + pathWithQueryTemplate;\n+            match = chains.match(Parser.parseLiteral(newPathWithQuery));\n+            String origUrl = ((HttpServletRequest) servletRequest).getRequestURL().toString();\n+            String url = origUrl;\n+            if (path.equals(\"/\")) {\n+              url += defaultServicePath;\n+            }\n+            else {\n+              int index = origUrl.indexOf(path);\n+              url = origUrl.substring(0, index) + \"/\" + defaultServicePath + path;\n+            }\n+            String contextPath = defaultServicePath;\n+            servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n+                contextPath, \n+                url);\n+          } catch (URISyntaxException e) {\n+            throw new ServletException( e );\n           }\n-          String contextPath = defaultServicePath;\n-          servletRequest = new ForwardedRequest((HttpServletRequest) servletRequest, \n-              contextPath, \n-              url);\n-        } catch (URISyntaxException e) {\n-          throw new ServletException( e );\n         }\n-//        ((HttpServletRequest) servletRequest).getRequestURL();\n       }\n     }\n ",
                "raw_url": "https://github.com/apache/knox/raw/c211d05e98c82d57eb0af61487a76f0ddd99660d/gateway-server/src/main/java/org/apache/hadoop/gateway/GatewayFilter.java",
                "sha": "7617ae8b34542b03323cc3f143f9a52cfca1d659",
                "status": "modified"
            }
        ],
        "message": "KNOX-1049 - check for null topology to avoid NPE in tests",
        "parent": "https://github.com/apache/knox/commit/1ee937071b236909a38dc764db451e65a3225ad6",
        "repo": "knox",
        "unit_tests": [
            "GatewayFilterTest.java"
        ]
    },
    "knox_fc0e59a": {
        "bug_id": "knox_fc0e59a",
        "commit": "https://github.com/apache/knox/commit/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/knox/blob/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/knox/contents/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java?ref=fc0e59a9cf6eb77ef7f516591d9cdab5d413332f",
                "deletions": 7,
                "filename": "gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "patch": "@@ -287,13 +287,15 @@ public Cluster discover(GatewayConfig gatewayConfig, ServiceDiscoveryConfig conf\n             String configType = componentServiceConfigs.get(componentName);\n             if (configType != null) {\n                 AmbariCluster.ServiceConfiguration svcConfig = configs.get(configType);\n-                AmbariComponent c = new AmbariComponent(componentName,\n-                                                        svcConfig.getVersion(),\n-                                                        clusterName,\n-                                                        serviceName,\n-                                                        hostNames,\n-                                                        svcConfig.getProperties());\n-                cluster.addComponent(c);\n+                if (svcConfig != null) {\n+                    AmbariComponent c = new AmbariComponent(componentName,\n+                                                            svcConfig.getVersion(),\n+                                                            clusterName,\n+                                                            serviceName,\n+                                                            hostNames,\n+                                                            svcConfig.getProperties());\n+                    cluster.addComponent(c);\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/knox/raw/fc0e59a9cf6eb77ef7f516591d9cdab5d413332f/gateway-discovery-ambari/src/main/java/org/apache/knox/gateway/topology/discovery/ambari/AmbariServiceDiscovery.java",
                "sha": "392909d0480504c97171b43ced354118d4ec3f54",
                "status": "modified"
            }
        ],
        "message": "KNOX-1288 - NPE during service discovery",
        "parent": "https://github.com/apache/knox/commit/1afbbea2eaafbb3e789a4fcd86b8bc132587fc99",
        "repo": "knox",
        "unit_tests": [
            "AmbariServiceDiscoveryTest.java"
        ]
    }
}