{
    "harmony_17765d7": {
        "bug_id": "harmony_17765d7",
        "commit": "https://github.com/apache/harmony/commit/17765d77bf939283b8d0be1bf019ff2320886247",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/harmony/blob/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java?ref=17765d77bf939283b8d0be1bf019ff2320886247",
                "deletions": 8,
                "filename": "classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "patch": "@@ -294,25 +294,21 @@ protected Expression instantiate(Object oldInstance, Encoder enc) {\n      */\n     @Override\n     protected boolean mutatesTo(Object o1, Object o2) {\n-        if (null == o1 || null == o2) {\n-            return false;\n-        }\n-        Class<? extends Object> c = o1.getClass();\n         if (this.propertyNames.length > 0) {\n+            Class<?> clazz = o1.getClass();\n             // Check the \"equals\" method has been declared\n             Method equalMethod = null;\n             try {\n-                equalMethod = c.getDeclaredMethod(\"equals\", //$NON-NLS-1$\n+                equalMethod = clazz.getDeclaredMethod(\"equals\", //$NON-NLS-1$\n                         new Class[] { Object.class });\n-            } catch (NoSuchMethodException ex) {\n-                // ignore\n+            } catch (NoSuchMethodException e) {\n+                // Ignored\n             }\n \n             if (null != equalMethod) {\n                 return o1.equals(o2);\n             }\n         }\n-\n         return super.mutatesTo(o1, o2);\n     }\n }\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/harmony/raw/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/main/java/java/beans/DefaultPersistenceDelegate.java",
                "sha": "4b9a4be2a176aa2f49937ac5bc6dc7d51c414fb8",
                "status": "modified"
            },
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/harmony/blob/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "changes": 39,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java?ref=17765d77bf939283b8d0be1bf019ff2320886247",
                "deletions": 0,
                "filename": "classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "patch": "@@ -828,6 +828,45 @@ public void testArrayPD_Normal() {\n         pd.writeObject(ia, enc);\n     }\n \n+    class MockDefaultPersistenceDelegate extends DefaultPersistenceDelegate {\n+        public MockDefaultPersistenceDelegate(String[] args) {\n+            super(args);\n+        }\n+\n+        public boolean mockMutatesTo(Object obj1, Object obj2) {\n+            return mutatesTo(obj1, obj2);\n+        }\n+    }\n+\n+    public void test_MutatesTo_scenario1() throws Exception {\n+        MockDefaultPersistenceDelegate mockDPD = new MockDefaultPersistenceDelegate(\n+                new String[1]);\n+        try {\n+            mockDPD.mockMutatesTo((Object) null, (Object) null);\n+            fail(\"should throw NPE\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            mockDPD.mockMutatesTo((Object) null, (Object) \"\");\n+            fail(\"should throw NPE\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        assertFalse(mockDPD.mockMutatesTo((Object) \"\", (Object) null));\n+    }\n+\n+    public void test_MutatesTo_scenario2() throws Exception {\n+        MockDefaultPersistenceDelegate mockDPD = new MockDefaultPersistenceDelegate(\n+                new String[0]);\n+        assertFalse(mockDPD.mockMutatesTo((Object) null, (Object) null));\n+        assertFalse(mockDPD.mockMutatesTo((Object) null, (Object) \"\"));\n+        assertFalse(mockDPD.mockMutatesTo((Object) \"\", (Object) null));\n+        assertTrue(mockDPD.mockMutatesTo((Object) \"\", (Object) \"\"));\n+    }\n+\n     /*\n      * BeanInfo for the MockBean below.\n      */",
                "raw_url": "https://github.com/apache/harmony/raw/17765d77bf939283b8d0be1bf019ff2320886247/classlib/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "sha": "55b4033a5860c2c12b8fb62c08670b2ca1cc0aee",
                "status": "modified"
            }
        ],
        "message": "Apply patch HARMONY-2449 ([classlib][beans] java.beans.DefaultPersistenceDelegate.mutatesTo() should throw NPE for null parameter)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@954547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/308f59bd30e33cf1a36b1461d4a0895a811fe17c",
        "repo": "harmony",
        "unit_tests": [
            "DefaultPersistenceDelegateTest.java"
        ]
    },
    "harmony_74d84b5": {
        "bug_id": "harmony_74d84b5",
        "commit": "https://github.com/apache/harmony/commit/74d84b5a8959c05ef3999650dfe343dfce41b17e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/harmony/blob/74d84b5a8959c05ef3999650dfe343dfce41b17e/classlib/modules/luni/src/main/java/java/lang/String.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/luni/src/main/java/java/lang/String.java?ref=74d84b5a8959c05ef3999650dfe343dfce41b17e",
                "deletions": 5,
                "filename": "classlib/modules/luni/src/main/java/java/lang/String.java",
                "patch": "@@ -492,11 +492,7 @@ public String(StringBuffer stringbuffer) {\n      */\n     public String(int[] codePoints, int offset, int count) {\n         super();\n-        if (codePoints == null) {\n-            throw new NullPointerException();\n-        }\n-        if (offset < 0 || count < 0\n-                || (long) offset + (long) count > codePoints.length) {\n+        if (offset < 0 || count < 0 || offset > codePoints.length - count) {\n             throw new IndexOutOfBoundsException();\n         }\n         this.offset = 0;",
                "raw_url": "https://github.com/apache/harmony/raw/74d84b5a8959c05ef3999650dfe343dfce41b17e/classlib/modules/luni/src/main/java/java/lang/String.java",
                "sha": "f1762b84e94c0620524ebb68b7f5efc14af371f2",
                "status": "modified"
            }
        ],
        "message": "Remove another explicit NPE.  I'm not re-ordering the bounds checking\nhere as it turns out:\n\n      String s = new String((int[])null, -1, 0);\n\nand:\n\n      String s = new String((int[])null, 0, -1);\n\non the RI throw IndexOutOfBoundsException not NullPointerException.\nSo the behaviour before did not match the RI.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@1005651 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/0fafb31d1198c8e311f5876fcf93daee063ceee2",
        "repo": "harmony",
        "unit_tests": [
            "StringTest.java"
        ]
    },
    "harmony_d20af9b": {
        "bug_id": "harmony_d20af9b",
        "commit": "https://github.com/apache/harmony/commit/d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/harmony/blob/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java?ref=d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
                "deletions": 1,
                "filename": "classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "patch": "@@ -101,6 +101,10 @@ public static ThreadInfo from(CompositeData cd) {\n             Object[] attributeVals = cd.getAll(attributeNames);\n             long threadIdVal = ((Long) attributeVals[0]).longValue();\n             String threadNameVal = (String) attributeVals[1];\n+            if (threadNameVal == null) {\n+                throw new IllegalArgumentException(\n+                        \"Invalid composite data: Attribute threadName has null value\"); //$NON-NLS-1$\n+            }\n             String threadStateStringVal = (String) attributeVals[2];\n \n             // Verify that threadStateStringVal contains a string that can be\n@@ -126,8 +130,10 @@ public static ThreadInfo from(CompositeData cd) {\n             String lockOwnerNameVal = attributeVals[11] != null ? (String) attributeVals[11]\n                     : null;\n             CompositeData[] stackTraceDataVal = (CompositeData[]) attributeVals[12];\n+            if (stackTraceDataVal == null) {\n+                throw new IllegalArgumentException(\"StackTraceElement[] is missing\"); //$NON-NLS-1$\n+            }\n             StackTraceElement[] stackTraceVals = getStackTracesFromCompositeData(stackTraceDataVal);\n-\n             result = new ThreadInfo(threadIdVal, threadNameVal, threadStateVal,\n                     suspendedVal, inNativeVal, blockedCountVal, blockedTimeVal,\n                     waitedCountVal, waitedTimeVal, lockNameVal, lockOwnerIdVal,",
                "raw_url": "https://github.com/apache/harmony/raw/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/main/java/java/lang/management/ThreadInfo.java",
                "sha": "3c329eca2179aa0c82b59390b00955200058e4bc",
                "status": "modified"
            },
            {
                "additions": 389,
                "blob_url": "https://github.com/apache/harmony/blob/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "changes": 389,
                "contents_url": "https://api.github.com/repos/apache/harmony/contents/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java?ref=d20af9ba885809a729ae3dec3b25a6fa59d51a9a",
                "deletions": 0,
                "filename": "classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "patch": "@@ -88,6 +88,8 @@\n \n     private static final String GOOD_LOCK_NAME = \"foo.Bar@1234567\";\n \n+    private static final String GOOD_THREADINFO_CLASSNAME = ThreadInfo.class.getName();\n+\n     private CompositeData tiCD;\n \n     private ThreadInfo ti;\n@@ -364,6 +366,393 @@ public void test_from_fields() throws Exception {\n         }\n     }\n \n+    private static final Object stackTraceElementData = createGoodStackTraceCompositeData();\n+\n+    private static final CompositeType stackTraceElementType = createGoodStackTraceElementCompositeType();\n+\n+    private String[] initialNames = { \"threadId\", \"threadName\", \"threadState\",\n+            \"suspended\", \"inNative\", \"blockedCount\", \"blockedTime\",\n+            \"waitedCount\", \"waitedTime\", \"lockName\", \"lockOwnerId\",\n+            \"lockOwnerName\", \"stackTrace\", \"additionalName\" };\n+\n+    private Object[] initialValues = { 1L, \"threadName\",\n+            GOOD_THREAD_STATE.toString(), true, false, 1L, 500L, 1L, 1L,\n+            \"lock\", 2L, \"lockOwner\", stackTraceElementData, \"additionalValue\" };\n+\n+    public void test_from_scenario1() throws Exception {\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertEquals(initialValues[9], threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertEquals(initialValues[11], threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario2() throws Exception {\n+        initialValues[0] = \"1\";\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.STRING, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario3() throws Exception {\n+        int length = 10;\n+        String[] names = new String[length];\n+        for (int index = 0; index < length; index++) {\n+            names[index] = initialNames[index];\n+        }\n+        Object[] values = new Object[length];\n+        for (int index = 0; index < length; index++) {\n+            values[index] = initialValues[index];\n+        }\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        values[0] = null;\n+        compositeType = getCompositeType(names, types);\n+        data = new CompositeDataSupport(compositeType, names, values);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario4() throws Exception {\n+        initialValues[0] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario5() throws Exception {\n+        initialValues[1] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario6() throws Exception {\n+        initialValues[2] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario7() throws Exception {\n+        initialValues[3] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario8() throws Exception {\n+        initialValues[4] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario9() throws Exception {\n+        initialValues[5] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario10() throws Exception {\n+        initialValues[6] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario11() throws Exception {\n+        initialValues[7] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario12() throws Exception {\n+        initialValues[8] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario13() throws Exception {\n+        initialValues[9] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertNull(threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertEquals(initialValues[11], threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario14() throws Exception {\n+        initialValues[10] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario15() throws Exception {\n+        initialValues[11] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        ThreadInfo.from(data);\n+        ThreadInfo threadInfo = ThreadInfo.from(data);\n+        assertEquals(initialValues[0], threadInfo.getThreadId());\n+        assertEquals(initialValues[1], threadInfo.getThreadName());\n+        assertEquals(GOOD_THREAD_STATE, threadInfo.getThreadState());\n+        assertEquals(initialValues[3], threadInfo.isSuspended());\n+        assertEquals(initialValues[4], threadInfo.isInNative());\n+        assertEquals(initialValues[5], threadInfo.getBlockedCount());\n+        assertEquals(initialValues[6], threadInfo.getBlockedTime());\n+        assertEquals(initialValues[7], threadInfo.getWaitedCount());\n+        assertEquals(initialValues[8], threadInfo.getWaitedTime());\n+        assertEquals(initialValues[9], threadInfo.getLockName());\n+        assertEquals(initialValues[10], threadInfo.getLockOwnerId());\n+        assertNull(threadInfo.getLockOwnerName());\n+        StackTraceElement[] stackElements = threadInfo.getStackTrace();\n+        assertEquals(GOOD_STACK_SIZE, stackElements.length);\n+        for (StackTraceElement element : stackElements) {\n+            assertEquals(GOOD_STACK_CLASSNAME, element.getClassName());\n+            assertEquals(GOOD_STACK_NATIVEMETHOD, element.isNativeMethod());\n+            assertEquals(GOOD_STACK_FILENAME, element.getFileName());\n+            assertEquals(GOOD_STACK_LINENUMBER, element.getLineNumber());\n+            assertEquals(GOOD_STACK_METHODNAME, element.getMethodName());\n+        }\n+    }\n+\n+    public void test_from_scenario16() throws Exception {\n+        initialValues[12] = null;\n+        ArrayType stackTraceArray = new ArrayType(1, stackTraceElementType);\n+        OpenType[] types = { SimpleType.LONG, SimpleType.STRING,\n+                SimpleType.STRING, SimpleType.BOOLEAN, SimpleType.BOOLEAN,\n+                SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.STRING, stackTraceArray, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(initialNames, types);\n+        CompositeData data = new CompositeDataSupport(compositeType,\n+                initialNames, initialValues);\n+        try {\n+            ThreadInfo.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    protected CompositeType getCompositeType(String[] typeNames,\n+            OpenType[] typeTypes) throws Exception {\n+        return new CompositeType(GOOD_THREADINFO_CLASSNAME,\n+                GOOD_THREADINFO_CLASSNAME, typeNames, typeNames, typeTypes);\n+    }\n+\n     String getGoodToStringVal() {\n         StringBuilder result = new StringBuilder();\n         result.append(\"Thread \" + GOOD_THREAD_NAME + \" (Id = \" + GOOD_THREAD_ID",
                "raw_url": "https://github.com/apache/harmony/raw/d20af9ba885809a729ae3dec3b25a6fa59d51a9a/classlib/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadInfoTest.java",
                "sha": "bb8dbcde134f2d4f25c4001109116ab4ddc1ad4d",
                "status": "modified"
            }
        ],
        "message": "Fix 2 NPE problems in java.lang.management.ThreadInfo code, add many test case for coverage.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/java/trunk@932328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/harmony/commit/ebc6ce2b0a49ebc6793bbe8d28c808d107871e1c",
        "repo": "harmony",
        "unit_tests": [
            "ThreadInfoTest.java"
        ]
    }
}