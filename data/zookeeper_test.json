{
    "zookeeper_433cf7e": {
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3410: zkTxnLogToolkit.sh will throw the NPE and stop the process of formatting txn logs due to the data's content is null\n\n- the data can be null,but the other fileds(`acl`,`version`,`ttl`)  cannot be `null`.  I also make the `printTxn` method more safer , surrounding it with `try-catch` in case of other unexpected NPEs.\n- some test cases were included in the [JIRA](https://issues.apache.org/jira/browse/ZOOKEEPER-3410).\n- more details in the [ZOOKEEPER-3410](https://issues.apache.org/jira/browse/ZOOKEEPER-3410)\n\nAuthor: maoling <maoling199210191@sina.com>\n\nReviewers: eolivelli@apache.org, andor@apache.org\n\nCloses #975 from maoling/ZOOKEEPER-3410 and squashes the following commits:\n\n22405c636 [maoling] revert the logic about try-catch the printTxn() method\na84c37406 [maoling] set the charset:UTF8 & e.printStackTrace()\n8cc034e2e [maoling] ZOOKEEPER-3410:./zkTxnLogToolkit.sh will throw the NPE and stop the process of formatting txn logs due to the data's content is null",
        "commit": "https://github.com/apache/zookeeper/commit/433cf7e2b660fce3c73eb011452814f7084ff196",
        "parent": "https://github.com/apache/zookeeper/commit/f9610cc80173342bbe9766889a1aab1bfd840d1e",
        "bug_id": "zookeeper_433cf7e",
        "file": [
            {
                "sha": "e8511999c22548c03bc910835e0423f9750b9dba",
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/433cf7e2b660fce3c73eb011452814f7084ff196/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/433cf7e2b660fce3c73eb011452814f7084ff196/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java",
                "status": "modified",
                "changes": 32,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/persistence/TxnLogToolkit.java?ref=433cf7e2b660fce3c73eb011452814f7084ff196",
                "patch": "@@ -269,7 +269,7 @@ private void printTxn(byte[] bytes) throws IOException {\n     private void printTxn(byte[] bytes, String prefix) throws IOException {\n         TxnHeader hdr = new TxnHeader();\n         Record txn = SerializeUtils.deserializeTxn(bytes, hdr);\n-        String txnStr = getDataStrFromTxn(txn);\n+        String txnStr = getFormattedTxnStr(txn);\n         String txns = String.format(\"%s session 0x%s cxid 0x%s zxid 0x%s %s %s\",\n                 DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.LONG).format(new Date(hdr.getTime())),\n                 Long.toHexString(hdr.getClientId()),\n@@ -288,31 +288,31 @@ private void printTxn(byte[] bytes, String prefix) throws IOException {\n     }\n \n     /**\n-     * get transaction log data string with node's data as a string\n-     * @param txn\n-     * @return\n+     * get the formatted string from the txn.\n+     * @param txn transaction log data\n+     * @return the formatted string\n      */\n-    private static String getDataStrFromTxn(Record txn) {\n+    private static String getFormattedTxnStr(Record txn) throws IOException {\n         StringBuilder txnData = new StringBuilder();\n         if (txn == null) {\n             return txnData.toString();\n         }\n         if (txn instanceof CreateTxn) {\n             CreateTxn createTxn = ((CreateTxn) txn);\n-            txnData.append(createTxn.getPath() + \",\" + new String(createTxn.getData()))\n+            txnData.append(createTxn.getPath() + \",\" + checkNullToEmpty(createTxn.getData()))\n                    .append(\",\" + createTxn.getAcl() + \",\" + createTxn.getEphemeral())\n                    .append(\",\" + createTxn.getParentCVersion());\n         } else if (txn instanceof SetDataTxn) {\n             SetDataTxn setDataTxn = ((SetDataTxn) txn);\n-            txnData.append(setDataTxn.getPath() + \",\" + new String(setDataTxn.getData()))\n+            txnData.append(setDataTxn.getPath() + \",\" + checkNullToEmpty(setDataTxn.getData()))\n                    .append(\",\" + setDataTxn.getVersion());\n         } else if (txn instanceof CreateContainerTxn) {\n             CreateContainerTxn createContainerTxn = ((CreateContainerTxn) txn);\n-            txnData.append(createContainerTxn.getPath() + \",\" + new String(createContainerTxn.getData()))\n+            txnData.append(createContainerTxn.getPath() + \",\" + checkNullToEmpty(createContainerTxn.getData()))\n                    .append(\",\" + createContainerTxn.getAcl() + \",\" + createContainerTxn.getParentCVersion());\n         } else if (txn instanceof CreateTTLTxn) {\n             CreateTTLTxn createTTLTxn = ((CreateTTLTxn) txn);\n-            txnData.append(createTTLTxn.getPath() + \",\" + new String(createTTLTxn.getData()))\n+            txnData.append(createTTLTxn.getPath() + \",\" + checkNullToEmpty(createTTLTxn.getData()))\n                    .append(\",\" + createTTLTxn.getAcl() + \",\" + createTTLTxn.getParentCVersion())\n                    .append(\",\" + createTTLTxn.getTtl());\n         } else if (txn instanceof MultiTxn) {\n@@ -321,9 +321,9 @@ private static String getDataStrFromTxn(Record txn) {\n             for (int i = 0; i < txnList.size(); i++ ) {\n                 Txn t = txnList.get(i);\n                 if (i == 0) {\n-                    txnData.append(TraceFormatter.op2String(t.getType()) + \":\" + new String(t.getData()));\n+                    txnData.append(TraceFormatter.op2String(t.getType()) + \":\" + checkNullToEmpty(t.getData()));\n                 } else {\n-                    txnData.append(\";\" + TraceFormatter.op2String(t.getType()) + \":\" + new String(t.getData()));\n+                    txnData.append(\";\" + TraceFormatter.op2String(t.getType()) + \":\" + checkNullToEmpty(t.getData()));\n                 }\n             }\n         } else {\n@@ -332,7 +332,15 @@ private static String getDataStrFromTxn(Record txn) {\n \n         return txnData.toString();\n     }\n-    \n+\n+    private static String checkNullToEmpty(byte[] data) throws IOException {\n+        if (data == null || data.length == 0) {\n+            return \"\";\n+        }\n+\n+        return new String(data, \"UTF8\");\n+    }\n+\n     private void openTxnLogFile() throws FileNotFoundException {\n         txnFis = new FileInputStream(txnLogFile);\n         logStream = BinaryInputArchive.getArchive(txnFis);",
                "deletions": 12
            }
        ],
        "patched_files": [
            "TxnLogToolkit.java"
        ],
        "unit_tests": [
            "TxnLogToolkitTest.java"
        ]
    },
    "zookeeper_e41cac8": {
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3605: connThrottle needs to be assigned in alternate consructor\n\n`connThrottle` needs to be assigned in alternate consructor to avoid NPEs\n\nAuthor: randgalt <jordan@jordanzimmerman.com>\n\nReviewers: Enrico Olivelli, Andor Moln\u00e1r\n\nCloses #1132 from Randgalt/ZOOKEEPER-3605",
        "commit": "https://github.com/apache/zookeeper/commit/e41cac853de416026e0c2011e0429e858e5823b8",
        "parent": "https://github.com/apache/zookeeper/commit/ef3649f599b4213a918c7a84cfe663d6cb1fa26e",
        "bug_id": "zookeeper_e41cac8",
        "file": [
            {
                "sha": "05bf82e08d9b9b264da372aa226511d983e9e1fc",
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java?ref=e41cac853de416026e0c2011e0429e858e5823b8",
                "patch": "@@ -236,7 +236,7 @@ public static void setCloseSessionTxnEnabled(boolean enabled) {\n     }\n \n     // Connection throttling\n-    private BlueThrottle connThrottle;\n+    private BlueThrottle connThrottle = new BlueThrottle();\n \n     @SuppressFBWarnings(value = \"IS2_INCONSISTENT_SYNC\", justification =\n         \"Internally the throttler has a BlockingQueue so \"\n@@ -308,8 +308,6 @@ public ZooKeeperServer(FileTxnSnapLog txnLogFactory, int tickTime, int minSessio\n \n         readResponseCache = new ResponseCache();\n \n-        connThrottle = new BlueThrottle();\n-\n         this.initialConfig = initialConfig;\n \n         this.requestPathMetricsCollector = new RequestPathMetricsCollector();",
                "deletions": 3
            },
            {
                "sha": "670feaa483241d5ba1bf232b0a3f45bf667ad12c",
                "filename": "zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/e41cac853de416026e0c2011e0429e858e5823b8/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java",
                "status": "added",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/java/org/apache/zookeeper/server/ZooKeeperServerCreationTest.java?ref=e41cac853de416026e0c2011e0429e858e5823b8",
                "patch": "@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.zookeeper.server;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.File;\n+import java.nio.ByteBuffer;\n+import org.apache.jute.BinaryOutputArchive;\n+import org.apache.zookeeper.proto.ConnectRequest;\n+import org.apache.zookeeper.server.persistence.FileTxnSnapLog;\n+import org.apache.zookeeper.test.ClientBase;\n+import org.junit.Test;\n+\n+public class ZooKeeperServerCreationTest {\n+\n+    /**\n+     * Test the default ZooKeeperServer and call processConnectRequest() to make sure\n+     * that all needed fields are initialized properly, etc.\n+     */\n+    @Test\n+    public void testDefaultConstructor() throws Exception {\n+        File tmpDir = ClientBase.createEmptyTestDir();\n+        FileTxnSnapLog fileTxnSnapLog = new FileTxnSnapLog(new File(tmpDir, \"data\"), new File(tmpDir, \"data_txnlog\"));\n+\n+        ZooKeeperServer zks = new ZooKeeperServer() {\n+            @Override\n+            public void submitRequest(Request si) {\n+                // NOP\n+            }\n+        };\n+        zks.setTxnLogFactory(fileTxnSnapLog);\n+        zks.setZKDatabase(new ZKDatabase(fileTxnSnapLog));\n+        zks.createSessionTracker();\n+\n+        ServerCnxnFactory cnxnFactory = ServerCnxnFactory.createFactory();\n+        ServerCnxn cnxn = new MockServerCnxn();\n+\n+        ConnectRequest connReq = new ConnectRequest();\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        BinaryOutputArchive boa = BinaryOutputArchive.getArchive(baos);\n+        connReq.serialize(boa, \"connect\");\n+        zks.processConnectRequest(cnxn, ByteBuffer.wrap(baos.toByteArray()));\n+    }\n+\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ZooKeeperServer.java"
        ],
        "unit_tests": [
            "ZooKeeperServerTest.java",
            "ZooKeeperServerCreationTest.java"
        ]
    },
    "zookeeper_01e198a": {
        "repo": "zookeeper",
        "message": "ZOOKEEPER-3633: AdminServer commands throw NPE when only secure client port is used\n\nWhen only secureClientPort is defined in the config and there is no regular clientPort,\nthen both the stat and the conf commands on the AdminServer result in 500 Server Error caused by\nNullPointerExceptions. The problem is that no serverCnxFactory is defined in the\nZooKeeperServer in this case, we have only secureServerCnxnFactory.\n\nIn the fix we return info about both the secure and unsecure connections.\nExample of the stat command output for secure-only configuration:\n```\n{\n  \"version\" : \"3.6.0-SNAPSHOT-8e8905069f4bff670c0492fe9e28ced0f86bca00, built on 11/29/2019 08:04 GMT\",\n  \"read_only\" : false,\n  \"server_stats\" : {\n    \"packets_sent\" : 1,\n    \"packets_received\" : 1,\n    \"fsync_threshold_exceed_count\" : 0,\n    \"client_response_stats\" : {\n      \"last_buffer_size\" : -1,\n      \"min_buffer_size\" : -1,\n      \"max_buffer_size\" : -1\n    },\n    \"data_dir_size\" : 671094270,\n    \"log_dir_size\" : 671094270,\n    \"last_processed_zxid\" : 20,\n    \"outstanding_requests\" : 0,\n    \"server_state\" : \"standalone\",\n    \"avg_latency\" : 5.0,\n    \"max_latency\" : 5,\n    \"min_latency\" : 5,\n    \"num_alive_client_connections\" : 1,\n    \"provider_null\" : false,\n    \"uptime\" : 15020\n  },\n  \"client_response\" : {\n    \"last_buffer_size\" : -1,\n    \"min_buffer_size\" : -1,\n    \"max_buffer_size\" : -1\n  },\n  \"node_count\" : 6,\n  \"connections\" : [ ],\n  \"secure_connections\" : [ {\n    \"remote_socket_address\" : \"127.0.0.1:57276\",\n    \"interest_ops\" : 1,\n    \"outstanding_requests\" : 0,\n    \"packets_received\" : 1,\n    \"packets_sent\" : 1\n  } ],\n  \"command\" : \"stats\",\n  \"error\" : null\n}\n```\n\nAuthor: Mate Szalay-Beko <szalay.beko.mate@gmail.com>\n\nReviewers: Andor Molnar <andor@apache.org>, Enrico Olivelli <eolivelli@apache.org>, Norbert Kalmar <nkalmar@apache.org>\n\nCloses #1161 from symat/ZOOKEEPER-3633",
        "commit": "https://github.com/apache/zookeeper/commit/01e198aec9ceae52f160ddcf2e45cd234823e505",
        "parent": "https://github.com/apache/zookeeper/commit/815c8f2130b8b43e11abe52b226707f707a93581",
        "bug_id": "zookeeper_01e198a",
        "file": [
            {
                "sha": "1c9dda772567875359245c482ea838842bbe3d20",
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/ZooKeeperServer.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -414,7 +414,7 @@ public ZooKeeperServerConf getConf() {\n             zkDb.snapLog.getSnapDir().getAbsolutePath(),\n             zkDb.snapLog.getDataDir().getAbsolutePath(),\n             getTickTime(),\n-            serverCnxnFactory.getMaxClientCnxnsPerHost(),\n+            getMaxClientCnxnsPerHost(),\n             getMinSessionTimeout(),\n             getMaxSessionTimeout(),\n             getServerId(),",
                "deletions": 1
            },
            {
                "sha": "7bb7c42410a007a0d7508a1b7373bdca385995be",
                "filename": "zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/main/java/org/apache/zookeeper/server/admin/Commands.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -577,7 +577,22 @@ public StatCommand() {\n         @Override\n         public CommandResponse run(ZooKeeperServer zkServer, Map<String, String> kwargs) {\n             CommandResponse response = super.run(zkServer, kwargs);\n-            response.put(\"connections\", zkServer.getServerCnxnFactory().getAllConnectionInfo(true));\n+\n+            final Iterable<Map<String, Object>> connections;\n+            if (zkServer.getServerCnxnFactory() != null) {\n+                connections = zkServer.getServerCnxnFactory().getAllConnectionInfo(true);\n+            } else {\n+                connections = Collections.emptyList();\n+            }\n+            response.put(\"connections\", connections);\n+\n+            final Iterable<Map<String, Object>> secureConnections;\n+            if (zkServer.getSecureServerCnxnFactory() != null) {\n+                secureConnections = zkServer.getSecureServerCnxnFactory().getAllConnectionInfo(true);\n+            } else {\n+                secureConnections = Collections.emptyList();\n+            }\n+            response.put(\"secure_connections\", secureConnections);\n             return response;\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "5f6879e7a207b6b1322ed8be726421eecf1868cb",
                "filename": "zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java",
                "blob_url": "https://github.com/apache/zookeeper/blob/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java",
                "raw_url": "https://github.com/apache/zookeeper/raw/01e198aec9ceae52f160ddcf2e45cd234823e505/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/zookeeper/contents/zookeeper-server/src/test/java/org/apache/zookeeper/server/admin/CommandsTest.java?ref=01e198aec9ceae52f160ddcf2e45cd234823e505",
                "patch": "@@ -33,6 +33,7 @@\n import org.apache.zookeeper.metrics.MetricsUtils;\n import org.apache.zookeeper.server.ServerCnxnFactory;\n import org.apache.zookeeper.server.ServerStats;\n+import org.apache.zookeeper.server.ZKDatabase;\n import org.apache.zookeeper.server.ZooKeeperServer;\n import org.apache.zookeeper.server.quorum.BufferStats;\n import org.apache.zookeeper.test.ClientBase;\n@@ -219,7 +220,14 @@ public void testSetTraceMask() throws IOException, InterruptedException {\n \n     @Test\n     public void testStat() throws IOException, InterruptedException {\n-        testCommand(\"stats\", new Field(\"version\", String.class), new Field(\"read_only\", Boolean.class), new Field(\"server_stats\", ServerStats.class), new Field(\"node_count\", Integer.class), new Field(\"connections\", Iterable.class), new Field(\"client_response\", BufferStats.class));\n+        testCommand(\"stats\",\n+                    new Field(\"version\", String.class),\n+                    new Field(\"read_only\", Boolean.class),\n+                    new Field(\"server_stats\", ServerStats.class),\n+                    new Field(\"node_count\", Integer.class),\n+                    new Field(\"connections\", Iterable.class),\n+                    new Field(\"secure_connections\", Iterable.class),\n+                    new Field(\"client_response\", BufferStats.class));\n     }\n \n     @Test\n@@ -264,4 +272,27 @@ public void testConsCommandSecureOnly() {\n         assertThat(response.toMap().containsKey(\"secure_connections\"), is(true));\n     }\n \n+    /**\n+     * testing Stat command, when only SecureClientPort is defined by the user and there is no\n+     * regular (non-SSL port) open. In this case zkServer.getServerCnxnFactory === null\n+     * see: ZOOKEEPER-3633\n+     */\n+    @Test\n+    public void testStatCommandSecureOnly() {\n+        Commands.StatCommand cmd = new Commands.StatCommand();\n+        ZooKeeperServer zkServer = mock(ZooKeeperServer.class);\n+        ServerCnxnFactory cnxnFactory = mock(ServerCnxnFactory.class);\n+        ServerStats serverStats = mock(ServerStats.class);\n+        ZKDatabase zkDatabase = mock(ZKDatabase.class);\n+        when(zkServer.getSecureServerCnxnFactory()).thenReturn(cnxnFactory);\n+        when(zkServer.serverStats()).thenReturn(serverStats);\n+        when(zkServer.getZKDatabase()).thenReturn(zkDatabase);\n+        when(zkDatabase.getNodeCount()).thenReturn(0);\n+\n+        CommandResponse response = cmd.run(zkServer, null);\n+\n+        assertThat(response.toMap().containsKey(\"connections\"), is(true));\n+        assertThat(response.toMap().containsKey(\"secure_connections\"), is(true));\n+    }\n+\n }",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ZooKeeperServer.java",
            "Commands.java"
        ],
        "unit_tests": [
            "ZooKeeperServerTest.java",
            "CommandsTest.java"
        ]
    }
}