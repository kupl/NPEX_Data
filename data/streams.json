{
    "streams_2f11ad0": {
        "bug_id": "streams_2f11ad0",
        "commit": "https://github.com/apache/streams/commit/2f11ad004cb199096457f1c29710498fab426566",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/2f11ad004cb199096457f1c29710498fab426566/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java?ref=2f11ad004cb199096457f1c29710498fab426566",
                "deletions": 2,
                "filename": "streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "patch": "@@ -140,8 +140,8 @@ private void setWaitTime() {\n             if (streamConfig != null &&\n                     streamConfig.containsKey(\"monitoring_broadcast_interval_ms\") &&\n                     streamConfig.get(\"monitoring_broadcast_interval_ms\") != null &&\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer) {\n+                    (streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n+                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer)) {\n                 waitTime = Long.parseLong(streamConfig.get(\"monitoring_broadcast_interval_ms\").toString());\n             } else {\n                 waitTime = DEFAULT_WAIT_TIME;",
                "raw_url": "https://github.com/apache/streams/raw/2f11ad004cb199096457f1c29710498fab426566/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "sha": "2a6a8f31610ef9d29eac82dc038655884735c5d3",
                "status": "modified"
            }
        ],
        "message": "STREAMS-223 | Fixing faulty if statement logic that was causing NPEs when stream config objects were not explicitly set",
        "parent": "https://github.com/apache/streams/commit/b410556f871228cf4b65eabd2a12ca915d4df0bf",
        "repo": "streams",
        "unit_tests": [
            "BroadcastMonitorThreadTest.java"
        ]
    },
    "streams_4f6f7d5": {
        "bug_id": "streams_4f6f7d5",
        "commit": "https://github.com/apache/streams/commit/4f6f7d5f5ac277289deff43409bb27a99741f0cc",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/streams/blob/4f6f7d5f5ac277289deff43409bb27a99741f0cc/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java?ref=4f6f7d5f5ac277289deff43409bb27a99741f0cc",
                "deletions": 10,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "patch": "@@ -200,14 +200,16 @@ public void start() {\n         attachShutdownHandler();\n         boolean isRunning = true;\n         this.executor = new ShutdownStreamOnUnhandleThrowableThreadPoolExecutor(this.totalTasks, this);\n-        this.monitor = Executors.newFixedThreadPool(this.monitorTasks + 1);\n+        this.monitor = Executors.newCachedThreadPool();\n         Map<String, StreamsProviderTask> provTasks = new HashMap<String, StreamsProviderTask>();\n         tasks = new HashMap<String, List<StreamsTask>>();\n         boolean forcedShutDown = false;\n \n         try {\n-            monitorThread = new LocalStreamProcessMonitorThread(executor, 10);\n-            this.monitor.submit(monitorThread);\n+            if (this.useDeprecatedMonitors) {\n+                monitorThread = new LocalStreamProcessMonitorThread(executor, 10);\n+                this.monitor.submit(monitorThread);\n+            }\n             setupComponentTasks(tasks);\n             setupProviderTasks(provTasks);\n             LOGGER.info(\"Started stream with {} components\", tasks.size());\n@@ -279,7 +281,9 @@ protected void forceShutdown(Map<String, List<StreamsTask>> streamsTasks) {\n \n     protected void shutdown(Map<String, List<StreamsTask>> streamsTasks) throws InterruptedException {\n         LOGGER.info(\"Attempting to shutdown tasks\");\n-        this.monitorThread.shutdown();\n+        if (this.monitorThread != null) {\n+            this.monitorThread.shutdown();\n+        }\n         this.executor.shutdown();\n         //complete stream shut down gracfully\n         for(StreamComponent prov : this.providers.values()) {\n@@ -322,13 +326,11 @@ protected void setupComponentTasks(Map<String, List<StreamsTask>> streamsTasks)\n                 task.setStreamConfig(this.streamConfig);\n                 this.futures.put(task, this.executor.submit(task));\n                 compTasks.add(task);\n-                if(comp.isOperationCountable() ) {\n-                    if(this.useDeprecatedMonitors) {\n-                        this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) comp.getOperation(), 10));\n-                        this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) task, 10));\n-                    }\n-                    this.monitor.submit(broadcastMonitor);\n+                if(this.useDeprecatedMonitors &&  comp.isOperationCountable() ) {\n+                    this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) comp.getOperation(), 10));\n+                    this.monitor.submit(new StatusCounterMonitorThread((DatumStatusCountable) task, 10));\n                 }\n+                this.monitor.submit(broadcastMonitor);\n             }\n             streamsTasks.put(comp.getId(), compTasks);\n         }",
                "raw_url": "https://github.com/apache/streams/raw/4f6f7d5f5ac277289deff43409bb27a99741f0cc/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "sha": "bef5ed7d3f20dd05937f425baa5770e54bacb297",
                "status": "modified"
            }
        ],
        "message": "STREAMS-252 | Fixing NPE issue causing Stream to drop datum in certain circumstances",
        "parent": "https://github.com/apache/streams/commit/af7aabf45c4f938db305f311edda6962bd5140f7",
        "repo": "streams",
        "unit_tests": [
            "LocalStreamBuilderTest.java"
        ]
    },
    "streams_a20f01a": {
        "bug_id": "streams_a20f01a",
        "commit": "https://github.com/apache/streams/commit/a20f01aefc5904ecb857fdb9a344023cf6a05100",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 2,
                "filename": "streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "patch": "@@ -141,8 +141,8 @@ private void setWaitTime() {\n             if (streamConfig != null &&\n                     streamConfig.containsKey(\"monitoring_broadcast_interval_ms\") &&\n                     streamConfig.get(\"monitoring_broadcast_interval_ms\") != null &&\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n-                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer) {\n+                    (streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Long ||\n+                    streamConfig.get(\"monitoring_broadcast_interval_ms\") instanceof Integer)) {\n                 waitTime = Long.parseLong(streamConfig.get(\"monitoring_broadcast_interval_ms\").toString());\n             } else {\n                 waitTime = DEFAULT_WAIT_TIME;",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-monitoring/src/main/java/org/apache/streams/monitoring/tasks/BroadcastMonitorThread.java",
                "sha": "fd9354a13051ba9007625fa31f6d5eada7b207c9",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 1,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "patch": "@@ -420,7 +420,8 @@ protected int getTimeout() {\n     }\n \n     private void setStreamIdentifier() {\n-        if(streamConfig.containsKey(STREAM_IDENTIFIER_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(STREAM_IDENTIFIER_KEY) &&\n                 streamConfig.get(STREAM_IDENTIFIER_KEY) != null &&\n                 streamConfig.get(STREAM_IDENTIFIER_KEY).toString().length() > 0) {\n             this.streamIdentifier = streamConfig.get(STREAM_IDENTIFIER_KEY).toString();",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/builders/LocalStreamBuilder.java",
                "sha": "a9afc3cd492c58d43060018b04deeebaaaf6abac",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 2,
                "filename": "streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "patch": "@@ -205,7 +205,8 @@ public long getStartedAt() {\n     }\n \n     public void setStartedAt() {\n-        if(streamConfig.containsKey(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) &&\n                 streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) != null &&\n                 streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY) instanceof Long) {\n             this.startedAt = Long.parseLong(streamConfig.get(LocalStreamBuilder.DEFAULT_STARTED_AT_KEY).toString());\n@@ -219,7 +220,8 @@ public String getStreamIdentifier() {\n     }\n \n     public void setStreamIdentifier() {\n-        if(streamConfig.containsKey(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) &&\n+        if(streamConfig != null &&\n+                streamConfig.containsKey(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) &&\n                 streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY) != null &&\n                 streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY).toString().length() > 0) {\n             this.streamIdentifier = streamConfig.get(LocalStreamBuilder.STREAM_IDENTIFIER_KEY).toString();",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/main/java/org/apache/streams/local/tasks/BaseStreamsTask.java",
                "sha": "9726963d08c8035a333dc8bbe997ae1a15743419",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 3,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "patch": "@@ -52,6 +52,7 @@\n import org.apache.streams.local.test.writer.DatumCounterWriter;\n import org.apache.streams.local.test.writer.SystemOutWriter;\n import org.apache.streams.util.ComponentUtils;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Before;\n import org.junit.Ignore;\n@@ -74,7 +75,9 @@\n  *\n  */\n public class LocalStreamBuilderTest extends RandomizedTest {\n-\n+    private static final String MBEAN_ID = \"test_id\";\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n     @After\n     public void removeLocalMBeans() {\n@@ -90,12 +93,12 @@ public void removeRegisteredMBeans(String... ids) {\n         MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n         for(String id : ids) {\n             try {\n-                mbs.unregisterMBean(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id)));\n+                mbs.unregisterMBean(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id, STREAM_ID, STREAM_START_TIME)));\n             } catch (MalformedObjectNameException|InstanceNotFoundException|MBeanRegistrationException e) {\n                 //No-op\n             }\n             try {\n-                mbs.unregisterMBean(new ObjectName((String.format(StreamsTaskCounter.NAME_TEMPLATE, id))));\n+                mbs.unregisterMBean(new ObjectName((String.format(StreamsTaskCounter.NAME_TEMPLATE, id, STREAM_ID, STREAM_START_TIME))));\n             } catch (MalformedObjectNameException|InstanceNotFoundException|MBeanRegistrationException e) {\n                 //No-op\n             }",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/builders/LocalStreamBuilderTest.java",
                "sha": "ed670033e6f21aa8e76858972905ad387dbdc703",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 11,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "patch": "@@ -19,6 +19,7 @@\n \n import com.carrotsearch.randomizedtesting.RandomizedTest;\n import com.carrotsearch.randomizedtesting.annotations.Repeat;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Test;\n \n@@ -32,7 +33,8 @@\n public class DatumStatusCounterTest extends RandomizedTest {\n \n     private static final String MBEAN_ID = \"test_id\";\n-\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n \n     /**\n@@ -42,7 +44,7 @@\n     @After\n     public void unregisterMXBean() throws Exception {\n         try {\n-            ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(String.format(DatumStatusCounter.NAME_TEMPLATE, MBEAN_ID)));\n+            ManagementFactory.getPlatformMBeanServer().unregisterMBean(new ObjectName(String.format(DatumStatusCounter.NAME_TEMPLATE, MBEAN_ID, STREAM_ID, STREAM_START_TIME)));\n         } catch (InstanceNotFoundException ife) {\n             //No-op\n         }\n@@ -54,7 +56,7 @@ public void unregisterMXBean() throws Exception {\n     @Test\n     public void testConstructor() {\n         try {\n-            new DatumStatusCounter(MBEAN_ID);\n+            new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         } catch (Throwable t) {\n             fail(\"Constructor Threw Exception : \"+t.getMessage());\n         }\n@@ -67,7 +69,7 @@ public void testConstructor() {\n     @Test\n     @Repeat(iterations = 3)\n     public void testPassed() throws Exception {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         int numIncrements = randomIntBetween(1, 100000);\n         for(int i=0; i < numIncrements; ++i) {\n             counter.incrementPassedCount();\n@@ -76,7 +78,7 @@ public void testPassed() throws Exception {\n \n         unregisterMXBean();\n \n-        counter = new DatumStatusCounter(MBEAN_ID);\n+        counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         numIncrements = randomIntBetween(1, 100000);\n         long total = 0;\n         for(int i=0; i < numIncrements; ++i) {\n@@ -94,7 +96,7 @@ public void testPassed() throws Exception {\n     @Test\n     @Repeat(iterations = 3)\n     public void testFailed() throws Exception {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         int numIncrements = randomIntBetween(1, 100000);\n         for(int i=0; i < numIncrements; ++i) {\n             counter.incrementFailedCount();\n@@ -103,7 +105,7 @@ public void testFailed() throws Exception {\n \n         unregisterMXBean();\n \n-        counter = new DatumStatusCounter(MBEAN_ID);\n+        counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         numIncrements = randomIntBetween(1, 100000);\n         long total = 0;\n         for(int i=0; i < numIncrements; ++i) {\n@@ -121,14 +123,12 @@ public void testFailed() throws Exception {\n     @Test\n     @Repeat(iterations = 3)\n     public void testFailureRate() {\n-        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID);\n+        DatumStatusCounter counter = new DatumStatusCounter(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n         assertEquals(0.0, counter.getFailRate(), 0);\n         int failures = randomIntBetween(0, 100000);\n         int passes = randomIntBetween(0, 100000);\n         counter.incrementPassedCount(passes);\n         counter.incrementFailedCount(failures);\n         assertEquals((double)failures / (double)(passes + failures), counter.getFailRate(), 0);\n     }\n-\n-\n-}\n+}\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/counters/DatumStatusCounterTest.java",
                "sha": "9775c6fa6592402c0422c8227c019ef67b683ef5",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/streams/blob/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/streams/contents/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java?ref=a20f01aefc5904ecb857fdb9a344023cf6a05100",
                "deletions": 7,
                "filename": "streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import com.carrotsearch.randomizedtesting.RandomizedTest;\n import com.carrotsearch.randomizedtesting.annotations.Repeat;\n import org.apache.streams.util.ComponentUtils;\n+import org.joda.time.DateTime;\n import org.junit.After;\n import org.junit.Test;\n \n@@ -35,7 +36,9 @@\n  * Single thread unit tests for {@link org.apache.streams.local.queues.ThroughputQueue}\n  */\n public class ThroughputQueueSingleThreadTest extends RandomizedTest {\n-\n+    private static final String MBEAN_ID = \"test_id\";\n+    private static final String STREAM_ID = \"test_stream\";\n+    private static long STREAM_START_TIME = (new DateTime()).getMillis();\n \n     @After\n     public void removeLocalMBeans() {\n@@ -208,10 +211,9 @@ public void testMBeanRegistration() {\n         try {\n             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n             Integer beanCount = mbs.getMBeanCount();\n-            String id = \"testQueue\";\n-            ThroughputQueue queue = new ThroughputQueue(id);\n+            ThroughputQueue queue = new ThroughputQueue(MBEAN_ID, STREAM_ID, STREAM_START_TIME);\n             assertEquals(\"Expected bean to be registered\", new Integer(beanCount+1), mbs.getMBeanCount());\n-            ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id)));\n+            ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, MBEAN_ID, STREAM_ID, STREAM_START_TIME)));\n             assertNotNull(mBean);\n         } catch (Exception e) {\n             fail(\"Failed to register MXBean : \"+e.getMessage());\n@@ -226,12 +228,11 @@ public void testMultipleMBeanRegistrations() {\n         try {\n             MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n             Integer beanCount = mbs.getMBeanCount();\n-            String id = \"testQueue\";\n             int numReg = randomIntBetween(2, 100);\n             for(int i=0; i < numReg; ++i) {\n-                ThroughputQueue queue = new ThroughputQueue(id+i);\n+                ThroughputQueue queue = new ThroughputQueue(MBEAN_ID + \"\" + i, STREAM_ID, STREAM_START_TIME);\n                 assertEquals(\"Expected bean to be registered\", new Integer(beanCount + (i+1)), mbs.getMBeanCount());\n-                ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, id+i)));\n+                ObjectInstance mBean = mbs.getObjectInstance(new ObjectName(String.format(ThroughputQueue.NAME_TEMPLATE, MBEAN_ID + \"\" + i, STREAM_ID, STREAM_START_TIME)));\n                 assertNotNull(mBean);\n             }\n         } catch (Exception e) {",
                "raw_url": "https://github.com/apache/streams/raw/a20f01aefc5904ecb857fdb9a344023cf6a05100/streams-runtimes/streams-runtime-local/src/test/java/org/apache/streams/local/queues/ThroughputQueueSingleThreadTest.java",
                "sha": "ef669f47012e11eb0ae6876e9f5f9b249a9fa9cb",
                "status": "modified"
            }
        ],
        "message": "STREAMS-216 | Fixed unit tests and hardened LocalStreamBuilder, BaseStreamsTask, and BroadcastMonitorThread against NPEs",
        "parent": "https://github.com/apache/streams/commit/fb8f9d209bf604a3b2127e22441e54b8e3259ad7",
        "repo": "streams",
        "unit_tests": [
            "BroadcastMonitorThreadTest.java",
            "LocalStreamBuilderTest.java"
        ]
    }
}