{
    "kylin_023866b": {
        "bug_id": "kylin_023866b",
        "commit": "https://github.com/apache/kylin/commit/023866b0cc57632a8a90259a0c0073966875fdd3",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=023866b0cc57632a8a90259a0c0073966875fdd3",
                "deletions": 3,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -216,8 +216,10 @@ public CubeInstance createCubeAndDesc(String cubeName, String projectName, CubeD\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n-                result.add(cube);\n+                if (cube != null)\n+                    result.add(cube);\n+                else\n+                    logger.error(\"Cube instance \" + projectDataModel.getRealization() + \" is failed to load\");\n             }\n         }\n         return result;\n@@ -232,7 +234,10 @@ private boolean isCubeInProject(String projectName, CubeInstance target) {\n         for (RealizationEntry projectDataModel : project.getRealizationEntries()) {\n             if (projectDataModel.getType() == RealizationType.CUBE) {\n                 CubeInstance cube = getCubeManager().getCube(projectDataModel.getRealization());\n-                assert cube != null;\n+                if (cube == null) {\n+                    logger.error(\"Project \" + projectName + \" contains realization \" + projectDataModel.getRealization() + \" which is not found by CubeManager\");\n+                    continue;\n+                }\n                 if (cube.equals(target)) {\n                     return true;\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/023866b0cc57632a8a90259a0c0073966875fdd3/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "c3a19f6b0785b9554ecb792f2cdb7e7f7c88067d",
                "status": "modified"
            }
        ],
        "message": "minor, patch a NPE in CubeService.isCubeInProject() and CubeService.listAllCubes()",
        "parent": "https://github.com/apache/kylin/commit/2d4c5097d37982ca84ff9b9d641fa39c056f1d74",
        "patched_files": [
            "CubeService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "CubeServiceTest.java"
        ]
    },
    "kylin_04d3ed5": {
        "bug_id": "kylin_04d3ed5",
        "commit": "https://github.com/apache/kylin/commit/04d3ed5cea32b928bd43a64d1e6f58e983a8d162",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java?ref=04d3ed5cea32b928bd43a64d1e6f58e983a8d162",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
                "patch": "@@ -83,7 +83,8 @@ public SQLResponse query(@RequestBody SQLRequest sqlRequest) {\n     @ResponseBody\n     public SQLResponse prepareQuery(@RequestBody PrepareSqlRequest sqlRequest) {\n         Map<String, String> newToggles = Maps.newHashMap();\n-        newToggles.putAll(sqlRequest.getBackdoorToggles());\n+        if (sqlRequest.getBackdoorToggles() != null)\n+            newToggles.putAll(sqlRequest.getBackdoorToggles());\n         newToggles.put(BackdoorToggles.DEBUG_TOGGLE_PREPARE_ONLY, \"true\");\n         sqlRequest.setBackdoorToggles(newToggles);\n ",
                "raw_url": "https://github.com/apache/kylin/raw/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller/QueryController.java",
                "sha": "44b5e722bb794b0c87ee412226dfbfdfd08a5ab2",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java?ref=04d3ed5cea32b928bd43a64d1e6f58e983a8d162",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java",
                "patch": "@@ -89,7 +89,8 @@ public EnvelopeResponse queryV2(@RequestBody SQLRequest sqlRequest) {\n     @ResponseBody\n     public EnvelopeResponse prepareQueryV2(@RequestBody PrepareSqlRequest sqlRequest) {\n         Map<String, String> newToggles = Maps.newHashMap();\n-        newToggles.putAll(sqlRequest.getBackdoorToggles());\n+        if (sqlRequest.getBackdoorToggles() != null)\n+            newToggles.putAll(sqlRequest.getBackdoorToggles());\n         newToggles.put(BackdoorToggles.DEBUG_TOGGLE_PREPARE_ONLY, \"true\");\n         sqlRequest.setBackdoorToggles(newToggles);\n ",
                "raw_url": "https://github.com/apache/kylin/raw/04d3ed5cea32b928bd43a64d1e6f58e983a8d162/server-base/src/main/java/org/apache/kylin/rest/controller2/QueryControllerV2.java",
                "sha": "2ef4415fad75f735b5290c650c94767c37b5bddd",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2671 fix NPE",
        "parent": "https://github.com/apache/kylin/commit/f65a1dbf3eb1585b4e27104e75e8af1462b3dbc6",
        "patched_files": [
            "QueryController.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "QueryControllerTest.java"
        ]
    },
    "kylin_052d609": {
        "bug_id": "kylin_052d609",
        "commit": "https://github.com/apache/kylin/commit/052d6096779d5826ba24517b0b4cc9a45b78bf4a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java?ref=052d6096779d5826ba24517b0b4cc9a45b78bf4a",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.kylin.rest.service;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n \n import org.apache.kylin.common.persistence.AclEntity;\n@@ -297,8 +298,11 @@ public Sid getSid(String sid, boolean isPrincepal) {\n     }\n \n     public List<AccessEntryResponse> generateAceResponses(Acl acl) {\n-        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n+        if (null == acl) {\n+            return Collections.emptyList();\n+        }\n \n+        List<AccessEntryResponse> result = new ArrayList<AccessEntryResponse>();\n         for (AccessControlEntry ace : acl.getEntries()) {\n             result.add(new AccessEntryResponse(ace.getId(), ace.getSid(), ace.getPermission(), ace.isGranting()));\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/052d6096779d5826ba24517b0b4cc9a45b78bf4a/server-base/src/main/java/org/apache/kylin/rest/service/AccessService.java",
                "sha": "ae7ac6e045e610a17334e4b5446bf6e2d32d94fa",
                "status": "modified"
            }
        ],
        "message": "minor, fix ACL NPE",
        "parent": "https://github.com/apache/kylin/commit/8ca0d3217453929d0ac0c3078d9e78e769f852b0",
        "patched_files": [
            "AccessService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "AccessServiceTest.java"
        ]
    },
    "kylin_089b200": {
        "bug_id": "kylin_089b200",
        "commit": "https://github.com/apache/kylin/commit/089b200e5123e1685de15eb95a67bee0d075658a",
        "file": [
            {
                "additions": 18,
                "blob_url": "https://github.com/apache/kylin/blob/089b200e5123e1685de15eb95a67bee0d075658a/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java?ref=089b200e5123e1685de15eb95a67bee0d075658a",
                "deletions": 13,
                "filename": "storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java",
                "patch": "@@ -22,18 +22,15 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.hadoop.hbase.Cell;\n import org.apache.hadoop.hbase.regionserver.RegionScanner;\n-import org.apache.kylin.common.util.BytesUtil;\n-import org.apache.kylin.invertedindex.index.TableRecordInfoDigest;\n-import org.apache.kylin.invertedindex.model.IIDesc;\n import org.apache.kylin.invertedindex.model.IIRow;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n import java.io.Closeable;\n import java.io.IOException;\n-import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.NoSuchElementException;\n \n /**\n  * Created by honma on 11/10/14.\n@@ -56,32 +53,40 @@ public void close() throws IOException {\n \n         private final RegionScanner regionScanner;\n         private final IIRow row = new IIRow();\n-        private boolean hasMore = true;\n         List<Cell> results = Lists.newArrayList();\n \n+        private boolean hasMore;\n+\n         IIRowIterator(RegionScanner innerScanner) {\n             this.regionScanner = innerScanner;\n+            try {\n+                hasMore = regionScanner.nextRaw(results);\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n         }\n \n         @Override\n         public boolean hasNext() {\n-            return hasMore;\n+            return !results.isEmpty();\n         }\n \n         @Override\n         public IIRow next() {\n-            results.clear();\n-            try {\n-                hasMore = regionScanner.next(results);\n-            } catch (IOException e) {\n-                throw new RuntimeException(e);\n-            }\n             if (results.size() < 1) {\n-                throw new IllegalStateException(\"Hbase row contains less than 1 cell\");\n+                throw new NoSuchElementException();\n             }\n             for (Cell c : results) {\n                 row.updateWith(c);\n             }\n+            results.clear();\n+            try {\n+                if (hasMore) {\n+                    hasMore = regionScanner.next(results);\n+                }\n+            } catch (IOException e) {\n+                throw new RuntimeException(e);\n+            }\n             return row;\n         }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/089b200e5123e1685de15eb95a67bee0d075658a/storage/src/main/java/org/apache/kylin/storage/hbase/coprocessor/endpoint/HbaseServerKVIterator.java",
                "sha": "d6c8c2902564c8d129e808f44fb3ba5f51284a32",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/089b200e5123e1685de15eb95a67bee0d075658a/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java?ref=089b200e5123e1685de15eb95a67bee0d075658a",
                "deletions": 1,
                "filename": "streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java",
                "patch": "@@ -76,7 +76,8 @@ private static SimpleConsumer getSimpleConsumer(Broker broker, int timeout, int\n         if (consumerCache.containsKey(key)) {\n             return consumerCache.get(key);\n         } else {\n-            return consumerCache.putIfAbsent(key, new SimpleConsumer(broker.host(), broker.port(), timeout, bufferSize, clientId));\n+            consumerCache.putIfAbsent(key, new SimpleConsumer(broker.host(), broker.port(), timeout, bufferSize, clientId));\n+            return consumerCache.get(key);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/089b200e5123e1685de15eb95a67bee0d075658a/streaming/src/main/java/org/apache/kylin/streaming/KafkaRequester.java",
                "sha": "76f152855145df71902cf7708aa38cd168c106e9",
                "status": "modified"
            }
        ],
        "message": "fix npe",
        "parent": "https://github.com/apache/kylin/commit/3e0abe49bf80651965060cef4a3e5188011000df",
        "patched_files": [
            "KafkaRequester.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "KafkaRequesterTest.java"
        ]
    },
    "kylin_263791d": {
        "bug_id": "kylin_263791d",
        "commit": "https://github.com/apache/kylin/commit/263791d2bed483a1a496450ee33d8a1c73ec0a98",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java?ref=263791d2bed483a1a496450ee33d8a1c73ec0a98",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "patch": "@@ -365,7 +365,7 @@ private String checkIfBreakExistingCubes(DataModelDesc dataModelDesc, String pro\n \n         StringBuilder checkRet = new StringBuilder();\n         if (cubes != null && cubes.size() != 0) {\n-            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(dataModelDesc.getProject()),\n+            dataModelDesc.init(getConfig(), getMetadataManager().getAllTablesMap(project),\n                     getMetadataManager().listDataModels());\n \n             List<String> curModelDims = getModelCols(dataModelDesc);",
                "raw_url": "https://github.com/apache/kylin/raw/263791d2bed483a1a496450ee33d8a1c73ec0a98/server-base/src/main/java/org/apache/kylin/rest/service/ModelService.java",
                "sha": "8b1ebb34ce7234d9c6d8a6a39281604fa1906f81",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when saving model",
        "parent": "https://github.com/apache/kylin/commit/5d8adbf0def0a2c034d7a1547e736c8044889fd9",
        "patched_files": [
            "ModelService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ModelServiceTest.java"
        ]
    },
    "kylin_280f673": {
        "bug_id": "kylin_280f673",
        "commit": "https://github.com/apache/kylin/commit/280f6738b765aa32dbcdc50951777a8d30e6b489",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/280f6738b765aa32dbcdc50951777a8d30e6b489/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java?ref=280f6738b765aa32dbcdc50951777a8d30e6b489",
                "deletions": 0,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "patch": "@@ -115,6 +115,10 @@ public DictionaryInfo load(String key) throws Exception {\n \n     public DictionaryInfo getDictionaryInfo(final String resourcePath) throws IOException {\n         try {\n+            //when all the value for this column is NULL, the resourcePath will be NULL\n+            if (resourcePath == null) {\n+                return NONE_INDICATOR;\n+            }\n             DictionaryInfo result = dictCache.get(resourcePath);\n             if (result == NONE_INDICATOR) {\n                 return null;",
                "raw_url": "https://github.com/apache/kylin/raw/280f6738b765aa32dbcdc50951777a8d30e6b489/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "sha": "232f0ea550f592457e894d931a4be53a65478d5b",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/280f6738b765aa32dbcdc50951777a8d30e6b489/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java?ref=280f6738b765aa32dbcdc50951777a8d30e6b489",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "patch": "@@ -163,6 +163,11 @@ public void doMap(Text key, Text value, Context context) throws IOException, Int\n                 DictionaryManager dictMgr = DictionaryManager.getInstance(config);\n                 Dictionary<String> mergedDict = dictMgr.getDictionary(mergedCubeSegment.getDictResPath(col));\n \n+                // handle the dict of all merged segments is null\n+                if (mergedDict == null) {\n+                    continue;\n+                }\n+\n                 Dictionary<String> sourceDict;\n                 // handle the column that all records is null\n                 if (sourceCubeSegment.getDictionary(col) == null) {",
                "raw_url": "https://github.com/apache/kylin/raw/280f6738b765aa32dbcdc50951777a8d30e6b489/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "sha": "255315ac181c32dac7ebb835c65d05d829e2b56a",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2994 Handle NPE when load dict in DictionaryManager\n\nSigned-off-by: Li Yang <liyang@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/ad3dd3f63d399640142bd2c97669080bc3e37560",
        "patched_files": [
            "MergeCuboidMapper.java",
            "DictionaryManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "DictionaryManagerTest.java",
            "MergeCuboidMapperTest.java"
        ]
    },
    "kylin_2a8d994": {
        "bug_id": "kylin_2a8d994",
        "commit": "https://github.com/apache/kylin/commit/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "patch": "@@ -72,7 +72,7 @@ public CubingJob build() {\n         result.addTask(createSaveStatisticsStep(jobId));\n \n         // add materialize lookup tables if needed\n-        addMaterializeLookupTableSteps(result);\n+        LookupMaterializeContext lookupMaterializeContext = addMaterializeLookupTableSteps(result);\n \n         outputSide.addStepPhase2_BuildDictionary(result);\n \n@@ -82,7 +82,7 @@ public CubingJob build() {\n         outputSide.addStepPhase3_BuildCube(result);\n \n         // Phase 4: Update Metadata & Cleanup\n-        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId));\n+        result.addTask(createUpdateCubeInfoAfterBuildStep(jobId, lookupMaterializeContext));\n         inputSide.addStepPhase4_Cleanup(result);\n         outputSide.addStepPhase4_Cleanup(result);\n \n@@ -102,16 +102,19 @@ private boolean isEnableUHCDictStep() {\n         return true;\n     }\n \n-    private void addMaterializeLookupTableSteps(final CubingJob result) {\n+    private LookupMaterializeContext addMaterializeLookupTableSteps(final CubingJob result) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         CubeDesc cubeDesc = seg.getCubeDesc();\n         List<String> allSnapshotTypes = cubeDesc.getAllExtLookupSnapshotTypes();\n         if (allSnapshotTypes.isEmpty()) {\n-            return;\n+            return null;\n         }\n         for (String snapshotType : allSnapshotTypes) {\n+            logger.info(\"add lookup table materialize steps for storage type:{}\", snapshotType);\n             ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotType);\n-            materializer.materializeLookupTablesForCube(result, seg.getCubeInstance());\n+            materializer.materializeLookupTablesForCube(lookupMaterializeContext, seg.getCubeInstance());\n         }\n+        return lookupMaterializeContext;\n     }\n \n     protected void addLayerCubingSteps(final CubingJob result, final String jobId, final String cuboidRootPath) {",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/BatchCubingJobBuilder2.java",
                "sha": "b1149edf092134c845f334971a2eaa0163a45e1c",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 3,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "patch": "@@ -19,10 +19,22 @@\n package org.apache.kylin.engine.mr;\n \n import org.apache.kylin.cube.CubeInstance;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n \n public interface ILookupMaterializer {\n-    void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName);\n+    /**\n+     * materialize lookup table\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     * @param lookupTableName\n+     */\n+    void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName);\n \n-    void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube);\n+    /**\n+     * materialize all ext lookup tables in the cube\n+     * @param context materialize context, the snapshotPath of lookup table should be put into context\n+     *                via {@code LookupMaterializeContext.addLookupSnapshotPath} method\n+     * @param cube\n+     */\n+    void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube);\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/ILookupMaterializer.java",
                "sha": "6ec485765ef75a7c0eb20f9c73d7306e9ddb6831",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "patch": "@@ -135,10 +135,13 @@ public HadoopShellExecutable createBuildDictionaryStep(String jobId) {\n         return buildDictionaryStep;\n     }\n \n-    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId) {\n+    public UpdateCubeInfoAfterBuildStep createUpdateCubeInfoAfterBuildStep(String jobId, LookupMaterializeContext lookupMaterializeContext) {\n         final UpdateCubeInfoAfterBuildStep result = new UpdateCubeInfoAfterBuildStep();\n         result.setName(ExecutableConstants.STEP_NAME_UPDATE_CUBE_INFO);\n         result.getParams().put(BatchConstants.CFG_OUTPUT_PATH, getFactDistinctColumnsPath(jobId));\n+        if (lookupMaterializeContext != null) {\n+            result.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n+        }\n \n         CubingExecutableUtil.setCubeName(seg.getRealization().getName(), result.getParams());\n         CubingExecutableUtil.setSegmentId(seg.getUuid(), result.getParams());",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/JobBuilderSupport.java",
                "sha": "6458a6a4cbba0659b774373caae43258e16a61d2",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "patch": "@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr;\n+\n+import java.util.Map;\n+import java.util.Map.Entry;\n+\n+import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+\n+import com.google.common.collect.Maps;\n+\n+public class LookupMaterializeContext {\n+    private DefaultChainedExecutable jobFlow;\n+    private Map<String, String> lookupSnapshotMap;\n+\n+    public LookupMaterializeContext(DefaultChainedExecutable jobFlow) {\n+        this.jobFlow = jobFlow;\n+        this.lookupSnapshotMap = Maps.newHashMap();\n+    }\n+\n+    public DefaultChainedExecutable getJobFlow() {\n+        return jobFlow;\n+    }\n+\n+    /**\n+     * add snapshot path info into the context\n+     * @param lookupTable\n+     * @param snapshotPath\n+     */\n+    public void addLookupSnapshotPath(String lookupTable, String snapshotPath) {\n+        lookupSnapshotMap.put(lookupTable, snapshotPath);\n+    }\n+\n+    /**\n+     *\n+     * @return string format of lookup snapshotPath info, it will return like: \"lookup1=/path/uuid1,lookup2=/path/uuid2\"\n+     *\n+     */\n+    public String getAllLookupSnapshotsInString() {\n+        StringBuilder result = new StringBuilder();\n+        boolean first = true;\n+        for (Entry<String, String> lookupSnapshotEntry : lookupSnapshotMap.entrySet()) {\n+            if (!first) {\n+                result.append(\",\");\n+            }\n+            first = false;\n+            result.append(lookupSnapshotEntry.getKey());\n+            result.append(\"=\");\n+            result.append(lookupSnapshotEntry.getValue());\n+        }\n+        return result.toString();\n+    }\n+\n+    /**\n+     * parse the lookup snapshot string to lookup snapshot path map.\n+     * @param snapshotsString\n+     * @return\n+     */\n+    public static Map<String, String> parseLookupSnapshots(String snapshotsString) {\n+        Map<String, String> lookupSnapshotMap = Maps.newHashMap();\n+        String[] lookupSnapshotEntries = snapshotsString.split(\",\");\n+        for (String lookupSnapshotEntryStr : lookupSnapshotEntries) {\n+            String[] split = lookupSnapshotEntryStr.split(\"=\");\n+            lookupSnapshotMap.put(split[0], split[1]);\n+        }\n+        return lookupSnapshotMap;\n+    }\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupMaterializeContext.java",
                "sha": "f235283576e4fa8c616de8c696c90bbc8831b777",
                "status": "added"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "patch": "@@ -24,6 +24,7 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.CubeDesc;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n+import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.steps.lookup.LookupExecutableUtil;\n import org.apache.kylin.engine.mr.steps.lookup.LookupSnapshotToMetaStoreStep;\n import org.apache.kylin.engine.mr.steps.lookup.UpdateCubeAfterSnapshotStep;\n@@ -62,11 +63,14 @@ public LookupSnapshotBuildJob build() {\n \n     private void addExtMaterializeLookupTableSteps(final LookupSnapshotBuildJob result,\n             SnapshotTableDesc snapshotTableDesc) {\n+        LookupMaterializeContext lookupMaterializeContext = new LookupMaterializeContext(result);\n         ILookupMaterializer materializer = MRUtil.getExtLookupMaterializer(snapshotTableDesc.getStorageType());\n-        materializer.materializeLookupTable(result, cube, lookupTable);\n+        materializer.materializeLookupTable(lookupMaterializeContext, cube, lookupTable);\n \n         UpdateCubeAfterSnapshotStep afterSnapshotStep = new UpdateCubeAfterSnapshotStep();\n         afterSnapshotStep.setName(ExecutableConstants.STEP_NAME_MATERIALIZE_LOOKUP_TABLE_UPDATE_CUBE);\n+\n+        afterSnapshotStep.getParams().put(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO, lookupMaterializeContext.getAllLookupSnapshotsInString());\n         LookupExecutableUtil.setCubeName(cube.getName(), afterSnapshotStep.getParams());\n         LookupExecutableUtil.setLookupTableName(lookupTable, afterSnapshotStep.getParams());\n         LookupExecutableUtil.setSegments(segments, afterSnapshotStep.getParams());",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/LookupSnapshotJobBuilder.java",
                "sha": "fff9bcf19a1d40d882375fbdd8bfc422f60d19de",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "patch": "@@ -99,6 +99,7 @@\n     String ARG_DICT_PATH = \"dictPath\";\n     String ARG_TABLE_NAME = \"tableName\";\n     String ARG_LOOKUP_SNAPSHOT_ID = \"snapshotID\";\n+    String ARG_EXT_LOOKUP_SNAPSHOTS_INFO = \"extlookupsnapshots\";\n \n     /**\n      * logger and counter\n@@ -111,10 +112,5 @@\n      */\n     String GLOBAL_DICTIONNARY_CLASS = \"org.apache.kylin.dict.GlobalDictionaryBuilder\";\n \n-    /**\n-     * the prefix of ext lookup table snapshot resource path that stored in the build context\n-     */\n-    String LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX = \"lookup.ext.snapshot.res.path.\";\n-\n     String LOOKUP_EXT_SNAPSHOT_SRC_RECORD_CNT_PFX = \"lookup.ext.snapshot.src.record.cnt.\";\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/BatchConstants.java",
                "sha": "18ac4ac0aecc303a4743bcb4c3526a86cca1d963",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 6,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.IOException;\n import java.io.InputStreamReader;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.commons.io.IOUtils;\n import org.apache.hadoop.fs.FSDataInputStream;\n@@ -33,6 +34,7 @@\n import org.apache.kylin.cube.CubeSegment;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.CubingJob;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n@@ -73,7 +75,7 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         segment.setInputRecordsSize(sourceSizeBytes);\n \n         try {\n-            saveExtSnapshotIfNeeded(cubeManager, cubingJob, cube, segment);\n+            saveExtSnapshotIfNeeded(cubeManager, cube, segment);\n             if (segment.isOffsetCube()) {\n                 updateTimeRange(segment);\n             }\n@@ -86,19 +88,26 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         }\n     }\n \n-    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubingJob cubingJob, CubeInstance cube, CubeSegment segment) throws IOException {\n+    private void saveExtSnapshotIfNeeded(CubeManager cubeManager, CubeInstance cube, CubeSegment segment) throws IOException {\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return;\n+        }\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        logger.info(\"update ext lookup snapshots:{}\", extLookupSnapshotMap);\n         List<SnapshotTableDesc> snapshotTableDescList = cube.getDescriptor().getSnapshotTableDescList();\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescList) {\n             String tableName = snapshotTableDesc.getTableName();\n             if (snapshotTableDesc.isExtSnapshotTable()) {\n-                String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + tableName;\n-                String newSnapshotResPath = cubingJob.getExtraInfo(contextKey);\n-                if (newSnapshotResPath == null) {\n+                String newSnapshotResPath = extLookupSnapshotMap.get(tableName);\n+                if (newSnapshotResPath == null || newSnapshotResPath.isEmpty()) {\n                     continue;\n                 }\n \n                 if (snapshotTableDesc.isGlobal()) {\n-                    cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    if (!newSnapshotResPath.equals(cube.getSnapshotResPath(tableName))) {\n+                        cubeManager.updateCubeLookupSnapshot(cube, tableName, newSnapshotResPath);\n+                    }\n                 } else {\n                     segment.putSnapshotResPath(tableName, newSnapshotResPath);\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/UpdateCubeInfoAfterBuildStep.java",
                "sha": "f749c80a09a72ad32109eb7b748c343904b46edb",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "patch": "@@ -20,15 +20,16 @@\n \n import java.io.IOException;\n import java.util.List;\n+import java.util.Map;\n \n import org.apache.kylin.common.KylinConfig;\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.CubeManager;\n import org.apache.kylin.cube.model.CubeDesc;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.execution.AbstractExecutable;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n import org.apache.kylin.job.execution.ExecutableContext;\n import org.apache.kylin.job.execution.ExecuteResult;\n import org.slf4j.Logger;\n@@ -53,17 +54,21 @@ protected ExecuteResult doWork(ExecutableContext context) throws ExecuteExceptio\n         CubeInstance cube = cubeManager.getCube(LookupExecutableUtil.getCubeName(this.getParams()));\n         List<String> segmentIDs = LookupExecutableUtil.getSegments(this.getParams());\n         String lookupTableName = LookupExecutableUtil.getLookupTableName(this.getParams());\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) getManager().getJob(LookupExecutableUtil.getJobID(this.getParams()));\n \n-        String contextKey = BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + lookupTableName;\n-        String snapshotResPath = job.getExtraInfo(contextKey);\n+        String extLookupSnapshotStr = this.getParam(BatchConstants.ARG_EXT_LOOKUP_SNAPSHOTS_INFO);\n+        if (extLookupSnapshotStr == null || extLookupSnapshotStr.isEmpty()) {\n+            return new ExecuteResult();\n+        }\n+\n+        Map<String, String> extLookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(extLookupSnapshotStr);\n+        String snapshotResPath = extLookupSnapshotMap.get(lookupTableName);\n         if (snapshotResPath == null) {\n             logger.info(\"no snapshot path exist in the context, so no need to update snapshot path\");\n             return new ExecuteResult();\n         }\n         CubeDesc cubeDesc = cube.getDescriptor();\n         try {\n-            logger.info(\"update snapshot path to cube metadata\");\n+            logger.info(\"update snapshot path:{} to cube:{}\", snapshotResPath, cube.getName());\n             if (cubeDesc.isGlobalSnapshotTable(lookupTableName)) {\n                 if (!snapshotResPath.equals(cube.getSnapshotResPath(lookupTableName))) {\n                     LookupExecutableUtil.updateSnapshotPathToCube(cubeManager, cube, lookupTableName,",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/lookup/UpdateCubeAfterSnapshotStep.java",
                "sha": "514c9409a9c903a2247b80dc2608301dc618a689",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "changes": 41,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "patch": "@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+*/\n+\n+package org.apache.kylin.engine.mr.steps;\n+\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n+import org.junit.Test;\n+\n+import java.util.Map;\n+\n+import static org.junit.Assert.assertEquals;\n+\n+public class LookupMaterializeContextTest {\n+    @Test\n+    public void parseAndToStringTest() throws Exception {\n+        LookupMaterializeContext context = new LookupMaterializeContext(null);\n+        context.addLookupSnapshotPath(\"lookup1\", \"/ext_snapshot/uuid1\");\n+        context.addLookupSnapshotPath(\"lookup2\", \"/ext_snapshot/uuid2\");\n+\n+        String lookupSnapshotsStr = context.getAllLookupSnapshotsInString();\n+        Map<String, String> lookupSnapshotMap = LookupMaterializeContext.parseLookupSnapshots(lookupSnapshotsStr);\n+        assertEquals(2, lookupSnapshotMap.size());\n+        assertEquals(\"/ext_snapshot/uuid1\", lookupSnapshotMap.get(\"lookup1\"));\n+        assertEquals(\"/ext_snapshot/uuid2\", lookupSnapshotMap.get(\"lookup2\"));\n+    }\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/engine-mr/src/test/java/org/apache/kylin/engine/mr/steps/LookupMaterializeContextTest.java",
                "sha": "a876cb23ea2d0063862094dab9b1a1823882a090",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -512,6 +512,7 @@ private void releaseAllSegments(CubeInstance cube) throws IOException {\n         update.setToRemoveSegs(cube.getSegments().toArray(new CubeSegment[cube.getSegments().size()]));\n         update.setCuboids(Maps.<Long, Long> newHashMap());\n         update.setCuboidsRecommend(Sets.<Long> newHashSet());\n+        update.setUpdateTableSnapshotPath(Maps.<String, String>newHashMap());\n         CubeManager.getInstance(getConfig()).updateCube(update);\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/server-base/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "da907719fa5cc5360875d789c3b4db1c93b4cc80",
                "status": "modified"
            },
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 9,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "patch": "@@ -31,6 +31,7 @@\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfo;\n import org.apache.kylin.dict.lookup.ExtTableSnapshotInfoManager;\n import org.apache.kylin.engine.mr.JobBuilderSupport;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n import org.apache.kylin.engine.mr.common.HadoopShellExecutable;\n import org.apache.kylin.engine.mr.common.MapReduceExecutable;\n@@ -59,7 +60,7 @@ public HBaseLookupMRSteps(CubeInstance cube) {\n         this.config = new JobEngineConfig(cube.getConfig());\n     }\n \n-    public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n+    public void addMaterializeLookupTablesSteps(LookupMaterializeContext context) {\n         CubeDesc cubeDesc = cube.getDescriptor();\n         Set<String> allLookupTables = Sets.newHashSet();\n         for (DimensionDesc dim : cubeDesc.getDimensions()) {\n@@ -72,33 +73,34 @@ public void addMaterializeLookupTablesSteps(DefaultChainedExecutable jobFlow) {\n         for (SnapshotTableDesc snapshotTableDesc : snapshotTableDescs) {\n             if (ExtTableSnapshotInfo.STORAGE_TYPE_HBASE.equals(snapshotTableDesc.getStorageType())\n                     && allLookupTables.contains(snapshotTableDesc.getTableName())) {\n-                addMaterializeLookupTableSteps(jobFlow, snapshotTableDesc.getTableName(), snapshotTableDesc);\n+                addMaterializeLookupTableSteps(context, snapshotTableDesc.getTableName(), snapshotTableDesc);\n             }\n         }\n     }\n \n-    public void addMaterializeLookupTableSteps(DefaultChainedExecutable jobFlow, String tableName, SnapshotTableDesc snapshotTableDesc) {\n+    public void addMaterializeLookupTableSteps(LookupMaterializeContext context, String tableName, SnapshotTableDesc snapshotTableDesc) {\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n         ExtTableSnapshotInfoManager extTableSnapshotInfoManager = ExtTableSnapshotInfoManager.getInstance(kylinConfig);\n         TableDesc tableDesc = TableMetadataManager.getInstance(kylinConfig).getTableDesc(tableName, cube.getProject());\n         IReadableTable sourceTable = SourceManager.createReadableTable(tableDesc);\n         try {\n-            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(sourceTable.getSignature(), tableName);\n+            ExtTableSnapshotInfo latestSnapshot = extTableSnapshotInfoManager.getLatestSnapshot(\n+                    sourceTable.getSignature(), tableName);\n             if (latestSnapshot != null) {\n                 logger.info(\"there is latest snapshot exist for table:{}, skip build snapshot step.\", tableName);\n-                jobFlow.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + latestSnapshot.getTableName(),\n-                        latestSnapshot.getResourcePath());\n+                context.addLookupSnapshotPath(tableName, latestSnapshot.getResourcePath());\n                 return;\n             }\n         } catch (IOException ioException) {\n             throw new RuntimeException(ioException);\n         }\n         logger.info(\"add build snapshot steps for table:{}\", tableName);\n         String snapshotID = genLookupSnapshotID();\n-        addLookupTableConvertToHFilesStep(jobFlow, tableName, snapshotID);\n-        addLookupTableHFilesBulkLoadStep(jobFlow, tableName, snapshotID);\n+        context.addLookupSnapshotPath(tableName, ExtTableSnapshotInfo.getResourcePath(tableName, snapshotID));\n+        addLookupTableConvertToHFilesStep(context.getJobFlow(), tableName, snapshotID);\n+        addLookupTableHFilesBulkLoadStep(context.getJobFlow(), tableName, snapshotID);\n         if (snapshotTableDesc !=null && snapshotTableDesc.isEnableLocalCache()) {\n-            addUpdateSnapshotQueryCacheStep(jobFlow, tableName, snapshotID);\n+            addUpdateSnapshotQueryCacheStep(context.getJobFlow(), tableName, snapshotID);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMRSteps.java",
                "sha": "1c91be2604170b18cba5d16d9e84af422a0a5f01",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 5,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "patch": "@@ -21,20 +21,20 @@\n import org.apache.kylin.cube.CubeInstance;\n import org.apache.kylin.cube.model.SnapshotTableDesc;\n import org.apache.kylin.engine.mr.ILookupMaterializer;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n+import org.apache.kylin.engine.mr.LookupMaterializeContext;\n \n public class HBaseLookupMaterializer implements ILookupMaterializer{\n \n     @Override\n-    public void materializeLookupTable(DefaultChainedExecutable jobFlow, CubeInstance cube, String lookupTableName) {\n+    public void materializeLookupTable(LookupMaterializeContext context, CubeInstance cube, String lookupTableName) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n         SnapshotTableDesc snapshotTableDesc = cube.getDescriptor().getSnapshotTableDesc(lookupTableName);\n-        lookupMRSteps.addMaterializeLookupTableSteps(jobFlow, lookupTableName, snapshotTableDesc);\n+        lookupMRSteps.addMaterializeLookupTableSteps(context, lookupTableName, snapshotTableDesc);\n     }\n \n     @Override\n-    public void materializeLookupTablesForCube(DefaultChainedExecutable jobFlow, CubeInstance cube) {\n+    public void materializeLookupTablesForCube(LookupMaterializeContext context, CubeInstance cube) {\n         HBaseLookupMRSteps lookupMRSteps = new HBaseLookupMRSteps(cube);\n-        lookupMRSteps.addMaterializeLookupTablesSteps(jobFlow);\n+        lookupMRSteps.addMaterializeLookupTablesSteps(context);\n     }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/HBaseLookupMaterializer.java",
                "sha": "31d9150605bae255ccee0345e214fa778f30ff6c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/kylin/blob/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java?ref=2a8d9943fc271d40ab7cfe221b2eaac45b8a7468",
                "deletions": 11,
                "filename": "storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "patch": "@@ -52,8 +52,6 @@\n import org.apache.kylin.engine.mr.MRUtil;\n import org.apache.kylin.engine.mr.common.AbstractHadoopJob;\n import org.apache.kylin.engine.mr.common.BatchConstants;\n-import org.apache.kylin.job.execution.DefaultChainedExecutable;\n-import org.apache.kylin.job.execution.ExecutableManager;\n import org.apache.kylin.metadata.TableMetadataManager;\n import org.apache.kylin.metadata.model.DataModelDesc;\n import org.apache.kylin.metadata.model.JoinDesc;\n@@ -91,7 +89,6 @@ public int run(String[] args) throws Exception {\n             Path output = new Path(getOptionValue(OPTION_OUTPUT_PATH));\n             String cubeName = getOptionValue(OPTION_CUBE_NAME).toUpperCase();\n             String tableName = getOptionValue(OPTION_TABLE_NAME);\n-            String cubingJobID = getOptionValue(OPTION_CUBING_JOB_ID);\n             String lookupSnapshotID = getOptionValue(OPTION_LOOKUP_SNAPSHOT_ID);\n \n             KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n@@ -112,7 +109,6 @@ public int run(String[] args) throws Exception {\n             ExtTableSnapshotInfo snapshot = createSnapshotResource(extSnapshotInfoManager, tableName, lookupSnapshotID,\n                     keyColumns, hTableNameAndShard.getFirst(), hTableNameAndShard.getSecond(), sourceTable);\n             logger.info(\"created snapshot information at:{}\", snapshot.getResourcePath());\n-            saveSnapshotInfoToJobContext(kylinConfig, cubingJobID, snapshot);\n \n             job = Job.getInstance(HBaseConfiguration.create(getConf()), getOptionValue(OPTION_JOB_NAME));\n \n@@ -194,13 +190,6 @@ private void removeSnapshotIfExist(ExtTableSnapshotInfoManager extSnapshotInfoMa\n         return result;\n     }\n \n-    private void saveSnapshotInfoToJobContext(KylinConfig kylinConfig, String jobID, ExtTableSnapshotInfo snapshot) {\n-        ExecutableManager execMgr = ExecutableManager.getInstance(kylinConfig);\n-        DefaultChainedExecutable job = (DefaultChainedExecutable) execMgr.getJob(jobID);\n-        job.addExtraInfo(BatchConstants.LOOKUP_EXT_SNAPSHOT_CONTEXT_PFX + snapshot.getTableName(),\n-                snapshot.getResourcePath());\n-    }\n-\n     /**\n      *\n      * @param sourceTableName",
                "raw_url": "https://github.com/apache/kylin/raw/2a8d9943fc271d40ab7cfe221b2eaac45b8a7468/storage-hbase/src/main/java/org/apache/kylin/storage/hbase/lookup/LookupTableToHFileJob.java",
                "sha": "39ebe996a67f283aa695f928ee3a0c2d4f3091b0",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3396 NPE throws when materialize lookup table to HBase\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/e3dcafb097d04f50f22994dc722d8bc0736dccbb",
        "patched_files": [
            "LookupSnapshotJobBuilder.java",
            "CubeService.java",
            "UpdateCubeAfterSnapshotStep.java",
            "HBaseLookupMaterializer.java",
            "BatchCubingJobBuilder2.java",
            "BatchConstants.java",
            "UpdateCubeInfoAfterBuildStep.java",
            "JobBuilderSupport.java",
            "HBaseLookupMRSteps.java",
            "LookupTableToHFileJob.java",
            "LookupMaterializeContext.java",
            "ILookupMaterializer.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "LookupMaterializeContextTest.java",
            "LookupTableToHFileJobTest.java",
            "CubeServiceTest.java"
        ]
    },
    "kylin_32d7244": {
        "bug_id": "kylin_32d7244",
        "commit": "https://github.com/apache/kylin/commit/32d724440657fd97462d4d10f9a5d91ba0d5a6da",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/kylin/blob/32d724440657fd97462d4d10f9a5d91ba0d5a6da/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java?ref=32d724440657fd97462d4d10f9a5d91ba0d5a6da",
                "deletions": 10,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java",
                "patch": "@@ -39,6 +39,7 @@\n import org.apache.kylin.metadata.model.ExternalFilterDesc;\n import org.apache.kylin.metadata.model.TableDesc;\n import org.apache.kylin.metadata.model.TableExtDesc;\n+import org.apache.kylin.metadata.model.TableRef;\n import org.apache.kylin.metadata.project.ProjectInstance;\n import org.apache.kylin.metadata.project.ProjectManager;\n import org.slf4j.Logger;\n@@ -395,6 +396,7 @@ private TableExtDesc reloadTableExtAt(String path) throws IOException {\n         // remove old json\n         if (name == null) {\n             getStore().deleteResource(path);\n+            return null;\n         }\n \n         srcTableExdMap.putLocal(name, t);\n@@ -495,28 +497,27 @@ public DataModelDesc getDataModelDesc(String name) {\n     }\n \n     public boolean isTableInModel(String tableName, String projectName) throws IOException {\n-        for (DataModelDesc modelDesc : getModels(projectName)) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                return true;\n-            }\n-        }\n-        return false;\n+        return getModelsUsingTable(tableName, projectName).size() > 0;\n     }\n \n     public List<String> getModelsUsingTable(String tableName, String projectName) throws IOException {\n         List<String> models = new ArrayList<>();\n         for (DataModelDesc modelDesc : getModels(projectName)) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                models.add(modelDesc.getName());\n+            for(TableRef tableRef : modelDesc.getAllTables()){\n+                if(tableRef.getTableName().equalsIgnoreCase(tableName)){\n+                    models.add(modelDesc.getName());\n+                }\n             }\n         }\n         return models;\n     }\n \n     public boolean isTableInAnyModel(String tableName) {\n         for (DataModelDesc modelDesc : getModels()) {\n-            if (modelDesc.getAllTables().contains(tableName.toUpperCase())) {\n-                return true;\n+            for(TableRef tableRef : modelDesc.getAllTables()){\n+                if(tableRef.getTableName().equalsIgnoreCase(tableName)){\n+                    return true;\n+                }\n             }\n         }\n         return false;",
                "raw_url": "https://github.com/apache/kylin/raw/32d724440657fd97462d4d10f9a5d91ba0d5a6da/core-metadata/src/main/java/org/apache/kylin/metadata/MetadataManager.java",
                "sha": "7290d4c95896c17c8d5cbd871cb6779269d52937",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE and check table using by model code in MetadataManager",
        "parent": "https://github.com/apache/kylin/commit/a9ee6d33eca53f67d9d4dd1da52b6fbfe98cb510",
        "patched_files": [
            "MetadataManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "MetadataManagerTest.java"
        ]
    },
    "kylin_3bb93c3": {
        "bug_id": "kylin_3bb93c3",
        "commit": "https://github.com/apache/kylin/commit/3bb93c32d073c10cf9a045e32a25715524324421",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=3bb93c32d073c10cf9a045e32a25715524324421",
                "deletions": 3,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "patch": "@@ -114,11 +114,12 @@ public void onEntityChange(Broadcaster broadcaster, String entity, Event event,\n                 throws IOException {\n             String project = cacheKey;\n \n-            if (event == Event.DROP)\n+            if (event == Event.DROP) {\n                 removeProjectLocal(project);\n-            else\n-                reloadProjectLocal(project);\n+                return;\n+            }\n \n+            reloadProjectLocal(project);\n             broadcaster.notifyProjectSchemaUpdate(project);\n             broadcaster.notifyProjectDataUpdate(project);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/3bb93c32d073c10cf9a045e32a25715524324421/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "sha": "afa3dede1e141f1653c681ef4723899d8a15f64f",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when droping a project",
        "parent": "https://github.com/apache/kylin/commit/a509186f6c1d54776edf34dc961ea50ff37e1c8d",
        "patched_files": [
            "ProjectManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ProjectManagerTest.java"
        ]
    },
    "kylin_3e9bc5b": {
        "bug_id": "kylin_3e9bc5b",
        "commit": "https://github.com/apache/kylin/commit/3e9bc5bd2e818d9e855ac2b917c8942800e0788e",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/kylin/blob/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java?ref=3e9bc5bd2e818d9e855ac2b917c8942800e0788e",
                "deletions": 18,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "patch": "@@ -797,27 +797,29 @@ public void cuboidsExport(@PathVariable String cubeName, @RequestParam(value = \"\n             HttpServletResponse response) throws IOException {\n         CubeInstance cube = cubeService.getCubeManager().getCube(cubeName);\n         if (cube == null) {\n-            logger.error(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-            throw new BadRequestException(\"Get cube: [\" + cubeName + \"] failed when get recommend cuboids\");\n-        }\n-        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n-        if (cuboidList == null || cuboidList.isEmpty()) {\n-            logger.warn(\"Cannot get recommend cuboid list for cube \" + cubeName);\n+            throw new BadRequestException(\"Cube: [\" + cubeName + \"] not exist.\");\n         }\n-        if (cuboidList.size() < top) {\n-            logger.info(\"Only recommend \" + cuboidList.size() + \" cuboids less than topn \" + top);\n-        }\n-        Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n-        RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n \n+        Map<Long, Long> cuboidList = getRecommendCuboidList(cube);\n         List<Set<String>> dimensionSetList = Lists.newLinkedList();\n-        while (top-- > 0 && cuboidIterator.hasNext()) {\n-            Set<String> dimensionSet = Sets.newHashSet();\n-            dimensionSetList.add(dimensionSet);\n-            long cuboid = cuboidIterator.next();\n-            for (int i = 0; i < rowKeyColDescList.length; i++) {\n-                if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n-                    dimensionSet.add(rowKeyColDescList[i].getColumn());\n+\n+        if (cuboidList == null || cuboidList.isEmpty()) {\n+            logger.info(\"Cannot get recommended cuboid list for cube \" + cubeName);\n+        }else {\n+            if (cuboidList.size() < top) {\n+                logger.info(\"Require \" + top + \" recommended cuboids, but only \" + cuboidList.size() + \" is found.\");\n+            }\n+            Iterator<Long> cuboidIterator = cuboidList.keySet().iterator();\n+            RowKeyColDesc[] rowKeyColDescList = cube.getDescriptor().getRowkey().getRowKeyColumns();\n+\n+            while (top-- > 0 && cuboidIterator.hasNext()) {\n+                Set<String> dimensionSet = Sets.newHashSet();\n+                dimensionSetList.add(dimensionSet);\n+                long cuboid = cuboidIterator.next();\n+                for (int i = 0; i < rowKeyColDescList.length; i++) {\n+                    if ((cuboid & (1L << rowKeyColDescList[i].getBitIndex())) > 0) {\n+                        dimensionSet.add(rowKeyColDescList[i].getColumn());\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/3e9bc5bd2e818d9e855ac2b917c8942800e0788e/server-base/src/main/java/org/apache/kylin/rest/controller/CubeController.java",
                "sha": "20ba9ae5de29d4d40415a1022d0eefa4d7e61902",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3081, fix potential NPE\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/3ec60100454bd2ff841a77581c32bdb3d9b7074e",
        "patched_files": [
            "CubeController.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "CubeControllerTest.java"
        ]
    },
    "kylin_4a1a4de": {
        "bug_id": "kylin_4a1a4de",
        "commit": "https://github.com/apache/kylin/commit/4a1a4debb2d8eca6b49e4a38e67119619215dc76",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 3,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
                "patch": "@@ -149,8 +149,11 @@ public boolean equals(Object o) {\n             if (p.isColumnType()) {\n                 if (q.isColumnType() == false)\n                     return false;\n-                if (q.getColRef().equals(p.getColRef()) == false)\n+                if (q.getColRef() != null && q.getColRef().equals(p.getColRef()) == false)\n                     return false;\n+                if (!(q.getType().equals(p.getType()) && q.getValue().equals(q.getValue()))) {\n+                    return false;\n+                }\n             } else {\n                 if (q.isColumnType() == true)\n                     return false;\n@@ -185,8 +188,13 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        String thisStr = isColumnType() ? colRef.toString() : value;\n-        return nextParameter == null ? thisStr : thisStr + \",\" + nextParameter.toString();\n+        String tmp = null;\n+        if (isColumnType() && colRef != null) {\n+            tmp = colRef.toString();\n+        } else {\n+            tmp = value;\n+        }\n+        return nextParameter == null ? tmp : tmp + \",\" + nextParameter.toString();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/core-metadata/src/main/java/org/apache/kylin/metadata/model/ParameterDesc.java",
                "sha": "45af39727800d18be4ad7a4467e712afb706c236",
                "status": "modified"
            },
            {
                "additions": 22,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java",
                "changes": 34,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 12,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java",
                "patch": "@@ -100,71 +100,80 @@ public CoordinatorResponse reBalance(@RequestBody String reBalancePlanStr) {\n         }\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/assign\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/assign\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse assignStreamingCube(@PathVariable String cubeName) {\n         streamingCoordinartorService.assignCube(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/unAssign\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/unAssign\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse unAssignStreamingCube(@PathVariable String cubeName) {\n         streamingCoordinartorService.unAssignCube(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/reAssign\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/cubes/{cubeName}/reAssign\", method = { RequestMethod.POST }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse reAssignStreamingCube(@PathVariable String cubeName,\n             @RequestBody CubeAssignment newAssignments) {\n         streamingCoordinartorService.reAssignCube(cubeName, newAssignments);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/replicaSet\", method = { RequestMethod.POST }, produces = { \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse createReplicaSet(@RequestBody ReplicaSet rs) {\n         streamingCoordinartorService.createReplicaSet(rs);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}\", method = { RequestMethod.DELETE })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}\", method = { RequestMethod.DELETE }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse deleteReplicaSet(@PathVariable Integer replicaSetID) {\n         streamingCoordinartorService.removeReplicaSet(replicaSetID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse addNodeToReplicaSet(@PathVariable Integer replicaSetID, @PathVariable String nodeID) {\n         streamingCoordinartorService.addNodeToReplicaSet(replicaSetID, nodeID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.DELETE })\n+    @RequestMapping(value = \"/replicaSet/{replicaSetID}/{nodeID:.+}\", method = { RequestMethod.DELETE }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n-    public CoordinatorResponse removeNodeFromReplicaSet(@PathVariable Integer replicaSetID, @PathVariable String nodeID) {\n+    public CoordinatorResponse removeNodeFromReplicaSet(@PathVariable Integer replicaSetID,\n+            @PathVariable String nodeID) {\n         streamingCoordinartorService.removeNodeFromReplicaSet(replicaSetID, nodeID);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/pauseConsume\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/pauseConsume\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse pauseCubeConsume(@PathVariable String cubeName) {\n         streamingCoordinartorService.pauseConsumers(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/cubes/{cubeName}/resumeConsume\", method = { RequestMethod.PUT })\n+    @RequestMapping(value = \"/cubes/{cubeName}/resumeConsume\", method = { RequestMethod.PUT }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse resumeCubeConsume(@PathVariable String cubeName) {\n         streamingCoordinartorService.resumeConsumers(cubeName);\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/remoteStoreComplete\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/remoteStoreComplete\", method = { RequestMethod.POST }, produces = { \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse segmentRemoteStoreComplete(@RequestBody RemoteStoreCompleteRequest request) {\n         Pair<Long, Long> segmentRange = new Pair<>(request.getSegmentStart(), request.getSegmentEnd());\n@@ -176,7 +185,8 @@ public CoordinatorResponse segmentRemoteStoreComplete(@RequestBody RemoteStoreCo\n         return new CoordinatorResponse();\n     }\n \n-    @RequestMapping(value = \"/replicaSetLeaderChange\", method = { RequestMethod.POST })\n+    @RequestMapping(value = \"/replicaSetLeaderChange\", method = { RequestMethod.POST }, produces = {\n+            \"application/json\" })\n     @ResponseBody\n     public CoordinatorResponse replicaSetLeaderChange(@RequestBody ReplicaSetLeaderChangeRequest request) {\n         logger.info(\"receive replicaSet leader change:\" + request);",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingCoordinatorController.java",
                "sha": "afb6a43afb9cd8510518f78a8556ee95cc5f1755",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 6,
                "filename": "storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java",
                "patch": "@@ -103,8 +103,8 @@ public ITupleIterator search(final long minSegmentTime, final CubeInstance cube,\n         final ResponseResultSchema schema = new ResponseResultSchema(cubeDesc, dimensions, metrics);\n         final StreamingTupleConverter tupleConverter = new StreamingTupleConverter(schema, tupleInfo);\n         final RecordsSerializer recordsSerializer = new RecordsSerializer(schema);\n-        final DataRequest dataRequest = createDataRequest(query.getQueryId(), cube.getName(), minSegmentTime,\n-                tupleInfo, tupleFilter, dimensions, groups, metrics, storagePushDownLimit, allowStorageAggregation);\n+        final DataRequest dataRequest = createDataRequest(query.getQueryId(), cube.getName(), minSegmentTime, tupleInfo,\n+                tupleFilter, dimensions, groups, metrics, storagePushDownLimit, allowStorageAggregation);\n \n         logger.info(\"Query-{}:send request to stream receivers\", query.getQueryId());\n         for (final ReplicaSet rs : replicaSetsOfCube) {\n@@ -173,9 +173,8 @@ private Node findBestReceiverServeQuery(List<Node> receivers, Node lead, String\n         return receivers.get((receiverNo + 1) % receiversSize);\n     }\n \n-    public Iterator<ITuple> doSearch(DataRequest dataRequest, CubeInstance cube,\n-            StreamingTupleConverter tupleConverter, RecordsSerializer recordsSerializer, Node receiver,\n-            TupleInfo tupleInfo) throws Exception {\n+    public Iterator<ITuple> doSearch(DataRequest dataRequest, CubeInstance cube, StreamingTupleConverter tupleConverter,\n+            RecordsSerializer recordsSerializer, Node receiver, TupleInfo tupleInfo) throws Exception {\n         String queryId = dataRequest.getQueryId();\n         logger.info(\"send query to receiver \" + receiver + \" with query id:\" + queryId);\n         String url = \"http://\" + receiver.getHost() + \":\" + receiver.getPort() + \"/kylin/api/data/query\";\n@@ -235,7 +234,7 @@ private DataRequest createDataRequest(String queryId, String cubeName, long minS\n         }\n         request.setGroups(groupSet);\n \n-        request.setMetrics(metrics);\n+        request.setMetrics(Lists.newArrayList(metrics));\n \n         return request;\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/storage-stream/src/main/java/org/apache/kylin/storage/stream/rpc/HttpStreamDataSearchClient.java",
                "sha": "36ae3b315d01e22a0ea9988852970e659ecbf538",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 2,
                "filename": "stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java",
                "patch": "@@ -100,9 +100,14 @@\n import javax.annotation.Nullable;\n \n /**\n- * \n- * Each Kylin Streaming cluster has a coordinator to handle generic assignment, membership and streaming cube state management.\n+ * <pre>\n+ * Each Kylin streaming cluster has at least one coordinator processes/server, coordinator\n+ * server works as the master node of streaming cluster and handle generic assignment,\n+ * membership and streaming cube state management.\n  *\n+ * When cluster have several coordinator processes, only the leader try to answer coordinator client's\n+ * request, others process will become standby/candidate, so single point of failure will be eliminated.\n+ * </pre>\n  */\n public class Coordinator implements CoordinatorClient {\n     private static final Logger logger = LoggerFactory.getLogger(Coordinator.class);",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-coordinator/src/main/java/org/apache/kylin/stream/coordinator/Coordinator.java",
                "sha": "f218d9d573a39605773a1ebcb94ea7d0a698ae1b",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 3,
                "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.kylin.stream.core.model;\n \n+import java.util.List;\n import java.util.Set;\n \n import org.apache.kylin.metadata.model.FunctionDesc;\n@@ -30,7 +31,7 @@\n     private String havingFilter;\n     private Set<String> dimensions; // what contains in Pair is <tableName, columnName>\n     private Set<String> groups;\n-    private Set<FunctionDesc> metrics;\n+    private List<FunctionDesc> metrics;\n     private int storagePushDownLimit = Integer.MAX_VALUE;\n     private boolean allowStorageAggregation;\n \n@@ -78,11 +79,11 @@ public void setGroups(Set<String> groups) {\n         this.groups = groups;\n     }\n \n-    public Set<FunctionDesc> getMetrics() {\n+    public List<FunctionDesc> getMetrics() {\n         return metrics;\n     }\n \n-    public void setMetrics(Set<FunctionDesc> metrics) {\n+    public void setMetrics(List<FunctionDesc> metrics) {\n         this.metrics = metrics;\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/model/DataRequest.java",
                "sha": "07c902872980cac5391f7a644525cffd9a2dca2a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 0,
                "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java",
                "patch": "@@ -149,6 +149,8 @@ public void addEvent(StreamingMessage event) {\n                 }\n \n                 activeSegments.put(segmentStart, segment);\n+                // when current active segments exceed tolerance, some unpredictable accident may happend,\n+                // but is should be configurable or computed on the fly\n                 if (activeSegments.size() > 12) {\n                     logger.warn(\"Two many active segments, segments size = \" + activeSegments.keySet());\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/storage/StreamingSegmentManager.java",
                "sha": "537f5a47399ce8718a9367528af6c8900f490f2c",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 0,
                "filename": "stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java",
                "patch": "@@ -109,6 +109,16 @@ public String execRequest(HttpRequestBase request, int connectionTimeout, int re\n             HttpResponse response = httpClient.execute(request);\n             String msg = EntityUtils.toString(response.getEntity());\n             int code = response.getStatusLine().getStatusCode();\n+            if (logger.isTraceEnabled()) {\n+                String displayMessage;\n+                if (msg.length() > 500) {\n+                    displayMessage = msg.substring(0, 500);\n+                } else {\n+                    displayMessage = msg;\n+                }\n+                logger.trace(\"Send request: {}. And receive response[{}] which lenght is {}, and content is {}.\", code,\n+                        request.getRequestLine().toString(), msg.length(), displayMessage);\n+            }\n             if (code != 200)\n                 throw new IOException(\"Invalid http response \" + code + \" when send request: \"\n                         + request.getURI().toString() + \"\\n\" + msg);",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-core/src/main/java/org/apache/kylin/stream/core/util/RestService.java",
                "sha": "50c4ba691e77f4a655d0d4a791a4ee535040ac2d",
                "status": "modified"
            },
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 9,
                "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java",
                "patch": "@@ -85,7 +85,7 @@\n import org.apache.kylin.stream.core.util.HDFSUtil;\n import org.apache.kylin.stream.core.util.NamedThreadFactory;\n import org.apache.kylin.stream.core.util.NodeUtil;\n-import org.apache.kylin.stream.server.retention.PolicyInfo;\n+import org.apache.kylin.stream.server.retention.RetentionPolicyInfo;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -109,6 +109,9 @@\n     private StreamMetadataStore streamMetadataStore;\n     private Node currentNode;\n     private int replicaSetID = -1;\n+    /**\n+     * indicate whether current receiver is the leader of whole replica set\n+     */\n     private volatile boolean isLeader = false;\n \n     private ScheduledExecutorService segmentStateCheckerExecutor;\n@@ -155,21 +158,21 @@ public void run() {\n                     CubeInstance cubeInstance = segmentManager.getCubeInstance();\n                     String cubeName = cubeInstance.getName();\n                     try {\n-                        PolicyInfo policyInfo = new PolicyInfo();\n+                        RetentionPolicyInfo retentionPolicyInfo = new RetentionPolicyInfo();\n                         String policyName = cubeInstance.getConfig().getStreamingSegmentRetentionPolicy();\n                         Map<String, String> policyProps = cubeInstance.getConfig()\n                                 .getStreamingSegmentRetentionPolicyProperties(policyName);\n-                        policyInfo.setName(policyName);\n-                        policyInfo.setProperties(policyProps);\n+                        retentionPolicyInfo.setName(policyName);\n+                        retentionPolicyInfo.setProperties(policyProps);\n                         //The returned segments that require remote persisted are already sorted in ascending order by the segment start time\n                         Collection<StreamingCubeSegment> segments = segmentManager.getRequireRemotePersistSegments();\n                         if (!segments.isEmpty()) {\n                             logger.info(\"found cube {} segments:{} are immutable, retention policy is: {}\", cubeName,\n-                                    segments, policyInfo.getName());\n+                                    segments, retentionPolicyInfo.getName());\n                         } else {\n                             continue;\n                         }\n-                        handleImmutableCubeSegments(cubeName, segmentManager, segments, policyInfo);\n+                        handleImmutableCubeSegments(cubeName, segmentManager, segments, retentionPolicyInfo);\n                     } catch (Exception e) {\n                         logger.error(\"error when handle cube:\" + cubeName, e);\n                     }\n@@ -178,14 +181,21 @@ public void run() {\n         }, 60, 60, TimeUnit.SECONDS);\n     }\n \n+    /**\n+     * <pre>\n+     * When segment status was changed to immutable, the leader of replica will\n+     * try to upload local segment cache to remote, while the follower will remove\n+     * local segment cache.\n+     * </pre>\n+     */\n     private void handleImmutableCubeSegments(String cubeName, StreamingSegmentManager segmentManager,\n-            Collection<StreamingCubeSegment> segments, PolicyInfo policyInfo) throws Exception {\n-        if (PolicyInfo.FULL_BUILD_POLICY.equalsIgnoreCase(policyInfo.getName())) {\n+            Collection<StreamingCubeSegment> segments, RetentionPolicyInfo retentionPolicyInfo) throws Exception {\n+        if (RetentionPolicyInfo.FULL_BUILD_POLICY.equalsIgnoreCase(retentionPolicyInfo.getName())) {\n             if (isLeader) {\n                 sendSegmentsToFullBuild(cubeName, segmentManager, segments);\n             }\n         } else {\n-            purgeSegments(cubeName, segments, policyInfo.getProperties());\n+            purgeSegments(cubeName, segments, retentionPolicyInfo.getProperties());\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/StreamingServer.java",
                "sha": "c171561fca34880a457b4dfc419b50766b702bfb",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 1,
                "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.kylin.stream.server.rest.controller;\n \n+import java.util.List;\n import java.util.Set;\n \n import org.apache.commons.codec.binary.Base64;\n@@ -140,7 +141,7 @@ public DataResponse query(@RequestBody DataRequest dataRequest) {\n         }\n     }\n \n-    private Set<FunctionDesc> convertMetrics(CubeDesc cubeDesc, Set<FunctionDesc> metrics) {\n+    private Set<FunctionDesc> convertMetrics(CubeDesc cubeDesc, List<FunctionDesc> metrics) {\n         Set<FunctionDesc> result = Sets.newHashSet();\n         for (FunctionDesc metric : metrics) {\n             result.add(findAggrFuncFromCubeDesc(cubeDesc, metric));",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/rest/controller/DataController.java",
                "sha": "45c630751853e634727df5b1b783226be7d76cc6",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java?ref=4a1a4debb2d8eca6b49e4a38e67119619215dc76",
                "deletions": 1,
                "filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java",
                "patch": "@@ -22,8 +22,17 @@\n \n import com.google.common.collect.Maps;\n \n-public class PolicyInfo {\n+/**\n+ * Retention policy for local segment cache\n+ */\n+public class RetentionPolicyInfo {\n+    /**\n+     * outdated data will be dropped\n+     */\n     public static final String PURGE_POLICY = \"purge\";\n+    /**\n+     * when data become immutable, it will be presisted remotely\n+     */\n     public static final String FULL_BUILD_POLICY = \"fullBuild\";\n \n     private String name;",
                "previous_filename": "stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/PolicyInfo.java",
                "raw_url": "https://github.com/apache/kylin/raw/4a1a4debb2d8eca6b49e4a38e67119619215dc76/stream-receiver/src/main/java/org/apache/kylin/stream/server/retention/RetentionPolicyInfo.java",
                "sha": "032003210897a0e3b7c9cb8c1b32445ed80d55e8",
                "status": "renamed"
            }
        ],
        "message": "KYLIN-3742 Fix DataRequest for NPE and add some javadoc",
        "parent": "https://github.com/apache/kylin/commit/6da979581476e80db1524dff919d3d9c55d7448b",
        "patched_files": [
            "StreamingSegmentManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "StreamingSegmentManagerTest.java"
        ]
    },
    "kylin_4c39fcb": {
        "bug_id": "kylin_4c39fcb",
        "commit": "https://github.com/apache/kylin/commit/4c39fcb0eaab053d43554ac6add377343d585065",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java?ref=4c39fcb0eaab053d43554ac6add377343d585065",
                "deletions": 4,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "patch": "@@ -117,7 +117,6 @@ protected void setup(Context context) throws IOException {\n             isPartitionCol = true;\n             col = cubeDesc.getModel().getPartitionDesc().getPartitionDateColumnRef();\n             if (col == null) {\n-                isPartitionCol = false;\n                 logger.info(\"Do not have partition col. This reducer will keep empty\");\n             }\n             colValues = Lists.newLinkedList();\n@@ -283,9 +282,9 @@ protected void doCleanup(Context context) throws IOException, InterruptedExcepti\n                     cuboidHLLMap, samplingPercentage, mapperNumber, mapperOverlapRatio);\n         } else if (isPartitionCol) {\n             // partition col\n-            if (col == null)\n-                return;\n-            outputPartitionInfo(context);\n+            if (col != null) {\n+                outputPartitionInfo(context);\n+            }\n         } else {\n             // normal col\n             if (isReducerLocalBuildDict) {",
                "raw_url": "https://github.com/apache/kylin/raw/4c39fcb0eaab053d43554ac6add377343d585065/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/FactDistinctColumnsReducer.java",
                "sha": "776d7509280a83e386f39e4d715cb754d226ba8e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2217 fix NPE in FactDistinctColumnsReducer",
        "parent": "https://github.com/apache/kylin/commit/c0c56f4b6b05bb108a4952a56af992b237c1bbe6",
        "patched_files": [
            "FactDistinctColumnsReducer.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "FactDistinctColumnsReducerTest.java"
        ]
    },
    "kylin_4e8e2f7": {
        "bug_id": "kylin_4e8e2f7",
        "commit": "https://github.com/apache/kylin/commit/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java?ref=4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "patch": "@@ -62,6 +62,11 @@ public static JobInstance parseToJobInstance(CubingJob job, Map<String, Output>\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));\n@@ -91,6 +96,11 @@ public static JobInstance parseToJobInstance(CheckpointExecutable job, Map<Strin\n         }\n \n         Output output = outputs.get(job.getId());\n+        if (output == null) {\n+            logger.warn(\"job output is null.\");\n+            return null;\n+        }\n+\n         final JobInstance result = new JobInstance();\n         result.setName(job.getName());\n         result.setRelatedCube(CubingExecutableUtil.getCubeName(job.getParams()));",
                "raw_url": "https://github.com/apache/kylin/raw/4e8e2f755c28e746acbbfa9cd6cfa3e53d3593ee/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/JobInfoConverter.java",
                "sha": "a2305170d8289c5a6e0c55e32242571e66d4c7c3",
                "status": "modified"
            }
        ],
        "message": "APACHE-KYLIN-2707: fix NPE\n\nSigned-off-by: Zhong <nju_yaho@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/35774a14118618ec8a355a325ba343f0b291a197",
        "patched_files": [
            "JobInfoConverter.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobInfoConverterTest.java"
        ]
    },
    "kylin_4fb7eee": {
        "bug_id": "kylin_4fb7eee",
        "commit": "https://github.com/apache/kylin/commit/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java?ref=4fb7eeec2f16896d85f63eeef903b22fe99ddbdf",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
                "patch": "@@ -193,7 +193,11 @@ public void deleteProject(@PathVariable String projectName) {\n         try {\n \n             ProjectInstance project = projectService.getProjectManager().getProject(projectName);\n-            projectService.deleteProject(projectName, project);\n+            if (project != null) {\n+                projectService.deleteProject(projectName, project);\n+            } else {\n+                logger.info(\"Project {} not exists\", projectName);\n+            }\n         } catch (Exception e) {\n             logger.error(e.getLocalizedMessage(), e);\n             throw new InternalErrorException(\"Failed to delete project. \" + \" Caused by: \" + e.getMessage(), e);",
                "raw_url": "https://github.com/apache/kylin/raw/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/controller/ProjectController.java",
                "sha": "880c09a46c600b62cc21cb57bda875d1a8ee5abe",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java?ref=4fb7eeec2f16896d85f63eeef903b22fe99ddbdf",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java",
                "patch": "@@ -145,7 +145,8 @@ private static void updateMetricsToReservoir(SQLRequest sqlRequest, SQLResponse\n                 }\n             }\n             setQueryStats(queryMetricsEvent, //\n-                    sqlResponse.getDuration(), sqlResponse.getResults().size(), totalStorageReturnCount);\n+                    sqlResponse.getDuration(), sqlResponse.getResults() == null ? 0 : sqlResponse.getResults().size(),\n+                    totalStorageReturnCount);\n             //For update query level metrics\n             MetricsManager.getInstance().update(queryMetricsEvent);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/4fb7eeec2f16896d85f63eeef903b22fe99ddbdf/server-base/src/main/java/org/apache/kylin/rest/metrics/QueryMetricsFacade.java",
                "sha": "17ad74d62e36ec0f65d28ce4f4ed741aa1889633",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE",
        "parent": "https://github.com/apache/kylin/commit/24f1987d71df1c51f9e1fca5885a2bfa4fca501d",
        "patched_files": [
            "ProjectController.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ProjectControllerTest.java"
        ]
    },
    "kylin_51c6fce": {
        "bug_id": "kylin_51c6fce",
        "commit": "https://github.com/apache/kylin/commit/51c6fce10e35f2543e745d6136a1b380e39deef1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 1,
                "filename": "kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "patch": "@@ -263,7 +263,11 @@ protected int executeQuery(String sql, boolean needDisplay) throws Exception {\n         } catch (SQLException sqlException) {\n             List<List<String>> results = Lists.newArrayList();\n             List<SelectedColumnMeta> columnMetas = Lists.newArrayList();\n-            PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas, sqlException);\n+            boolean b = PushDownUtil.doPushDownQuery(ProjectInstance.DEFAULT_PROJECT_NAME, sql, results, columnMetas,\n+                    sqlException);\n+            if (!b) {\n+                throw sqlException;\n+            }\n             return results.size();\n         } finally {\n             if (resultSet != null) {",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/kylin-it/src/test/java/org/apache/kylin/query/KylinTestBase.java",
                "sha": "404cb7fbc59d83240b16a570c6608ac868a6d84f",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "patch": "@@ -487,7 +487,8 @@ private SQLResponse queryWithSqlMassage(SQLRequest sqlRequest) throws Exception\n             return fakeResponse;\n         }\n \n-        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(), sqlRequest.getOffset());\n+        String correctedSql = QueryUtil.massageSql(sqlRequest.getSql(), sqlRequest.getProject(), sqlRequest.getLimit(),\n+                sqlRequest.getOffset());\n         if (!correctedSql.equals(sqlRequest.getSql())) {\n             logger.info(\"The corrected query: \" + correctedSql);\n \n@@ -792,6 +793,9 @@ private SQLResponse execute(String correctedSql, SQLRequest sqlRequest) throws E\n         } catch (SQLException sqlException) {\n             isPushDown = PushDownUtil.doPushDownQuery(sqlRequest.getProject(), correctedSql, results, columnMetas,\n                     sqlException);\n+            if (!isPushDown) {\n+                throw sqlException;\n+            }\n         } finally {\n             close(resultSet, stat, conn);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "sha": "f4ae06ca1e9cad5999c5603d665f485ea3bbc010",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java?ref=51c6fce10e35f2543e745d6136a1b380e39deef1",
                "deletions": 4,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "patch": "@@ -49,11 +49,15 @@\n     public static boolean doPushDownQuery(String project, String sql, List<List<String>> results,\n             List<SelectedColumnMeta> columnMetas, SQLException sqlException) throws Exception {\n \n-        boolean isExpectedCause = (ExceptionUtils.getRootCause(sqlException).getClass()\n-                .equals(NoRealizationFoundException.class));\n         KylinConfig kylinConfig = KylinConfig.getInstanceFromEnv();\n+        if (!kylinConfig.isPushDownEnabled()) {\n+            return false;\n+        }\n+\n+        Throwable rootCause = ExceptionUtils.getRootCause(sqlException);\n+        boolean isExpectedCause = rootCause != null && (rootCause.getClass().equals(NoRealizationFoundException.class));\n \n-        if (isExpectedCause && kylinConfig.isPushDownEnabled()) {\n+        if (isExpectedCause) {\n \n             logger.info(\"Query failed to utilize pre-calculation, routing to other engines\", sqlException);\n             IPushDownRunner runner = (IPushDownRunner) ClassUtil.newInstance(kylinConfig.getPushDownRunnerClassName());\n@@ -78,7 +82,7 @@ public static boolean doPushDownQuery(String project, String sql, List<List<Stri\n \n             return true;\n         } else {\n-            throw sqlException;\n+            return false;\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/kylin/raw/51c6fce10e35f2543e745d6136a1b380e39deef1/server-base/src/main/java/org/apache/kylin/rest/util/PushDownUtil.java",
                "sha": "0802718243f4e38629826146065581385e282f0a",
                "status": "modified"
            }
        ],
        "message": "minor, avoid NPE in doPushDownQuery check",
        "parent": "https://github.com/apache/kylin/commit/68efbc2d1bfdb1ce53794fd4263f41b287ff5baf",
        "patched_files": [
            "PushDownUtil.java",
            "QueryService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "PushDownUtilTest.java",
            "QueryServiceTest.java"
        ]
    },
    "kylin_5ec65be": {
        "bug_id": "kylin_5ec65be",
        "commit": "https://github.com/apache/kylin/commit/5ec65be735ce0f0581859da326df50a1fcc79bb6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/com/kylinolap/rest/service/JobService.java?ref=5ec65be735ce0f0581859da326df50a1fcc79bb6",
                "deletions": 0,
                "filename": "server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "patch": "@@ -156,6 +156,9 @@ public JobInstance getJobInstance(String uuid) throws IOException, JobException\n     }\n \n     private JobInstance parseToJobInstance(AbstractExecutable job) {\n+        if (job == null) {\n+            return null;\n+        }\n         Preconditions.checkState(job instanceof CubingJob, \"illegal job type, id:\" + job.getId());\n         CubingJob cubeJob = (CubingJob) job;\n         final JobInstance result = new JobInstance();",
                "raw_url": "https://github.com/apache/kylin/raw/5ec65be735ce0f0581859da326df50a1fcc79bb6/server/src/main/java/com/kylinolap/rest/service/JobService.java",
                "sha": "5b4ddf0aa09c2d0817b54e2fcccd58880e805666",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/kylin/commit/81b2914919e856070708120eae01da598cd6bcd6",
        "patched_files": [
            "JobService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    },
    "kylin_64dfa7b": {
        "bug_id": "kylin_64dfa7b",
        "commit": "https://github.com/apache/kylin/commit/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/kylin/blob/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java?ref=64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "patch": "@@ -86,6 +86,7 @@\n import org.apache.kylin.metadata.model.ModelDimensionDesc;\n import org.apache.kylin.metadata.model.TableRef;\n import org.apache.kylin.metadata.project.ProjectInstance;\n+import org.apache.kylin.metadata.project.ProjectManager;\n import org.apache.kylin.metadata.querymeta.ColumnMeta;\n import org.apache.kylin.metadata.querymeta.ColumnMetaWithType;\n import org.apache.kylin.metadata.querymeta.SelectedColumnMeta;\n@@ -359,6 +360,11 @@ public SQLResponse doQueryWithCache(SQLRequest sqlRequest, boolean isQueryInspec\n         if (StringUtils.isBlank(sqlRequest.getProject())) {\n             throw new BadRequestException(msg.getEMPTY_PROJECT_NAME());\n         }\n+        // project not found\n+        ProjectManager mgr = ProjectManager.getInstance(KylinConfig.getInstanceFromEnv());\n+        if (mgr.getProject(sqlRequest.getProject()) == null) {\n+            throw new BadRequestException(msg.getPROJECT_NOT_FOUND());\n+        }\n         if (StringUtils.isBlank(sqlRequest.getSql())) {\n             throw new BadRequestException(msg.getNULL_EMPTY_SQL());\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/64dfa7b9f7ef95a3edd8548d46a21ea9e71facc7/server-base/src/main/java/org/apache/kylin/rest/service/QueryService.java",
                "sha": "16358e4141359c3ee02b428db7ac332816664f53",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3507 Avoid NPE when project is not found",
        "parent": "https://github.com/apache/kylin/commit/2372b96ad3ab483591e68d184ad0ecc37507b78a",
        "patched_files": [
            "QueryService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "QueryServiceTest.java"
        ]
    },
    "kylin_6bc2aae": {
        "bug_id": "kylin_6bc2aae",
        "commit": "https://github.com/apache/kylin/commit/6bc2aaeb7032aa89feed91316a2179263c4c4c35",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/kylin/blob/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java?ref=6bc2aaeb7032aa89feed91316a2179263c4c4c35",
                "deletions": 15,
                "filename": "core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "patch": "@@ -75,26 +75,34 @@ public static String trimSuffix(String str, String suffix) {\n     }\n \n     public static String join(Iterable<String> parts, String separator) {\n-        StringBuilder buf = new StringBuilder();\n-        Iterator<String> iterator = parts.iterator();\n-        if (iterator == null || (!iterator.hasNext())) {\n+        if (parts == null) {\n             return null;\n         }\n-        final String first = iterator.next();\n-        if (first != null) {\n-            buf.append(first);\n-        }\n-        while (iterator.hasNext()) {\n-            if (separator != null) {\n-                buf.append(separator);\n+\n+        Iterator<String> iterator = parts.iterator();\n+\n+        if (iterator == null) {\n+            return null;\n+        } else if (!iterator.hasNext()) {\n+            return \"\";\n+        } else {\n+            StringBuilder buf = new StringBuilder();\n+            final String first = iterator.next();\n+            if (first != null) {\n+                buf.append(first);\n             }\n-            final String part = iterator.next();\n-            if (part != null) {\n-                buf.append(part);\n+            while (iterator.hasNext()) {\n+                if (separator != null) {\n+                    buf.append(separator);\n+                }\n+                final String part = iterator.next();\n+                if (part != null) {\n+                    buf.append(part);\n+                }\n             }\n-        }\n \n-        return buf.toString();\n+            return buf.toString();\n+        }\n     }\n \n     public static void toUpperCaseArray(String[] source, String[] target) {",
                "raw_url": "https://github.com/apache/kylin/raw/6bc2aaeb7032aa89feed91316a2179263c4c4c35/core-common/src/main/java/org/apache/kylin/common/util/StringUtil.java",
                "sha": "5dde9cf5f34e5ea09a8bafa7d992372ec588f43e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3836 fix Kylin StringUtil.join() may cause NPE if iterator is empty",
        "parent": "https://github.com/apache/kylin/commit/e5c7c0de0a93a89b97d9427f95e3bbf6bada61dc",
        "patched_files": [
            "StringUtil.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "StringUtilTest.java"
        ]
    },
    "kylin_75667ee": {
        "bug_id": "kylin_75667ee",
        "commit": "https://github.com/apache/kylin/commit/75667eedc7648c10dddbf3161ed9001bab07344e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/75667eedc7648c10dddbf3161ed9001bab07344e/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java?ref=75667eedc7648c10dddbf3161ed9001bab07344e",
                "deletions": 0,
                "filename": "jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n package org.apache.kylin.jdbc;\r\n \r\n+import java.sql.DriverManager;\r\n import java.sql.SQLException;\r\n \r\n import net.hydromatic.avatica.AvaticaConnection;\r\n@@ -81,6 +82,13 @@\n     private static final Logger logger = LoggerFactory.getLogger(Driver.class);\r\n \r\n     public static final String CONNECT_STRING_PREFIX = \"jdbc:kylin:\";\r\n+    static {\r\n+        try {\r\n+            DriverManager.registerDriver(new Driver());\r\n+        } catch (SQLException e) {\r\n+            throw new RuntimeException(\"Error occurred while registering JDBC driver \" + Driver.class.getName() + \": \" + e.toString());\r\n+        }\r\n+    }\r\n \r\n     @Override\r\n     protected DriverVersion createDriverVersion() {\r",
                "raw_url": "https://github.com/apache/kylin/raw/75667eedc7648c10dddbf3161ed9001bab07344e/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "sha": "868daab6ef6df59e82178cb67cc09fe55125d5d1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/75667eedc7648c10dddbf3161ed9001bab07344e/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java?ref=75667eedc7648c10dddbf3161ed9001bab07344e",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "patch": "@@ -54,6 +54,9 @@\n     @ResponseBody\n     public CubeDesc[] getCube(@PathVariable String cubeName) {\n         CubeInstance cubeInstance = cubeService.getCubeManager().getCube(cubeName);\n+        if (cubeInstance == null){\n+            return null;\n+        }\n         CubeDesc cSchema = cubeInstance.getDescriptor();\n         if (cSchema != null) {\n             return new CubeDesc[] { cSchema };",
                "raw_url": "https://github.com/apache/kylin/raw/75667eedc7648c10dddbf3161ed9001bab07344e/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "sha": "d70819fe1d15491632f9a3011a61edd15d01a209",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #451 from jd-ode/master\n\nREST API get cube desc NullPointerException when cube is not exists",
        "parent": "https://github.com/apache/kylin/commit/e87eb2de3ce90372404aac8e08299cb8370e206f",
        "patched_files": [
            "Driver.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "DriverTest.java"
        ]
    },
    "kylin_781588a": {
        "bug_id": "kylin_781588a",
        "commit": "https://github.com/apache/kylin/commit/781588a3845250df7000439a5dd3db06c726b7bf",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java?ref=781588a3845250df7000439a5dd3db06c726b7bf",
                "deletions": 0,
                "filename": "job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "patch": "@@ -291,6 +291,9 @@ private JobPO getJobPO(AbstractExecutable executable) {\n     }\n \n     private AbstractExecutable parseTo(JobPO jobPO) {\n+        if (jobPO == null) {\n+            return null;\n+        }\n         String type = jobPO.getType();\n         try {\n             Class<? extends AbstractExecutable> clazz = (Class<? extends AbstractExecutable>) Class.forName(type);",
                "raw_url": "https://github.com/apache/kylin/raw/781588a3845250df7000439a5dd3db06c726b7bf/job/src/main/java/com/kylinolap/job2/service/ExecutableManager.java",
                "sha": "2c9f21bfe04bdf8c0a591ba3392bead668d1965c",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/kylin/commit/6fd43046382d0d445979b176abda8f17084d935c",
        "patched_files": [
            "ExecutableManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ExecutableManagerTest.java"
        ]
    },
    "kylin_8b6d211": {
        "bug_id": "kylin_8b6d211",
        "commit": "https://github.com/apache/kylin/commit/8b6d21133aab18b65ae571d9463089283b7dcbe1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1",
                "deletions": 1,
                "filename": "core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "patch": "@@ -68,7 +68,7 @@\n             try {\n                 knownImpl.add(ClassUtil.forName(\"org.apache.kylin.storage.hbase.HBaseResourceStore\", ResourceStore.class));\n             } catch (Throwable e) {\n-                logger.warn(\"Failed to load ResourceStore impl class\", e);\n+                logger.warn(\"Failed to load ResourceStore impl class: \" + e.toString());\n             }\n         }\n         return knownImpl;",
                "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-common/src/main/java/org/apache/kylin/common/persistence/ResourceStore.java",
                "sha": "630477b01d3de3b8973480d20ae3890748ea5e6a",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java?ref=8b6d21133aab18b65ae571d9463089283b7dcbe1",
                "deletions": 1,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "patch": "@@ -248,7 +248,7 @@ public DictionaryInfo buildDictionary(DataModelDesc model, String dict, TblColRe\n             srcCol = col.getName();\n             srcColIdx = col.getColumnDesc().getZeroBasedIndex();\n             if (model.isFactTable(col.getTable())) {\n-                table = factTableValueProvider.getDistinctValuesFor(col);\n+                table = (factTableValueProvider == null) ? null : factTableValueProvider.getDistinctValuesFor(col);\n             } else {\n                 table = TableSourceFactory.createReadableTable(metaMgr.getTableDesc(col.getTable()));\n             }",
                "raw_url": "https://github.com/apache/kylin/raw/8b6d21133aab18b65ae571d9463089283b7dcbe1/core-dictionary/src/main/java/org/apache/kylin/dict/DictionaryManager.java",
                "sha": "f7a407b6e5f5e522a2512a70ccbcb4428b6be154",
                "status": "modified"
            }
        ],
        "message": "KYLIN-875 Fix CI, NPE in DictionaryManager.decideSourceData()",
        "parent": "https://github.com/apache/kylin/commit/5500cbba042975699a98b8ccb75ffb364ae5c199",
        "patched_files": [
            "DictionaryManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "DictionaryManagerTest.java"
        ]
    },
    "kylin_9414670": {
        "bug_id": "kylin_9414670",
        "commit": "https://github.com/apache/kylin/commit/9414670d2751cddbb22ffc7cb94d8bc4538557a2",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/kylin/blob/9414670d2751cddbb22ffc7cb94d8bc4538557a2/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java?ref=9414670d2751cddbb22ffc7cb94d8bc4538557a2",
                "deletions": 0,
                "filename": "jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "patch": "@@ -18,6 +18,7 @@\n \r\n package org.apache.kylin.jdbc;\r\n \r\n+import java.sql.DriverManager;\r\n import java.sql.SQLException;\r\n \r\n import net.hydromatic.avatica.AvaticaConnection;\r\n@@ -81,6 +82,13 @@\n     private static final Logger logger = LoggerFactory.getLogger(Driver.class);\r\n \r\n     public static final String CONNECT_STRING_PREFIX = \"jdbc:kylin:\";\r\n+    static {\r\n+        try {\r\n+            DriverManager.registerDriver(new Driver());\r\n+        } catch (SQLException e) {\r\n+            throw new RuntimeException(\"Error occurred while registering JDBC driver \" + Driver.class.getName() + \": \" + e.toString());\r\n+        }\r\n+    }\r\n \r\n     @Override\r\n     protected DriverVersion createDriverVersion() {\r",
                "raw_url": "https://github.com/apache/kylin/raw/9414670d2751cddbb22ffc7cb94d8bc4538557a2/jdbc/src/main/java/org/apache/kylin/jdbc/Driver.java",
                "sha": "868daab6ef6df59e82178cb67cc09fe55125d5d1",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/9414670d2751cddbb22ffc7cb94d8bc4538557a2/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java?ref=9414670d2751cddbb22ffc7cb94d8bc4538557a2",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "patch": "@@ -54,6 +54,9 @@\n     @ResponseBody\n     public CubeDesc[] getCube(@PathVariable String cubeName) {\n         CubeInstance cubeInstance = cubeService.getCubeManager().getCube(cubeName);\n+        if (cubeInstance == null){\n+            return null;\n+        }\n         CubeDesc cSchema = cubeInstance.getDescriptor();\n         if (cSchema != null) {\n             return new CubeDesc[] { cSchema };",
                "raw_url": "https://github.com/apache/kylin/raw/9414670d2751cddbb22ffc7cb94d8bc4538557a2/server/src/main/java/org/apache/kylin/rest/controller/CubeDescController.java",
                "sha": "d70819fe1d15491632f9a3011a61edd15d01a209",
                "status": "modified"
            }
        ],
        "message": "Merge pull request #451 from jd-ode/master\n\nREST API get cube desc NullPointerException when cube is not exists",
        "parent": "https://github.com/apache/kylin/commit/f42713526fc0966f1b538902388ba4094f0ea483",
        "patched_files": [
            "Driver.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "DriverTest.java"
        ]
    },
    "kylin_971b109": {
        "bug_id": "kylin_971b109",
        "commit": "https://github.com/apache/kylin/commit/971b10905e23a1b2b97d2aa19de93d38d4f527f4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java?ref=971b10905e23a1b2b97d2aa19de93d38d4f527f4",
                "deletions": 1,
                "filename": "core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "patch": "@@ -312,7 +312,7 @@ public void updateJobOutput(String jobId, ExecutableState newStatus, Map<String,\n             executableDao.updateJobOutput(jobOutput);\n             logger.info(\"job id:\" + jobId + \" from \" + oldStatus + \" to \" + newStatus);\n         } catch (PersistentException e) {\n-            logger.error(\"error change job:\" + jobId + \" to \" + newStatus.toString());\n+            logger.error(\"error change job:\" + jobId + \" to \" + newStatus);\n             throw new RuntimeException(e);\n         }\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/971b10905e23a1b2b97d2aa19de93d38d4f527f4/core-job/src/main/java/org/apache/kylin/job/execution/ExecutableManager.java",
                "sha": "0e39ad1069fac99049e36a154d0f558e5de738d7",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2172 fix potential NPE",
        "parent": "https://github.com/apache/kylin/commit/297730dc97e705f2c8526dcdc7718cee900e40e9",
        "patched_files": [
            "ExecutableManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ExecutableManagerTest.java"
        ]
    },
    "kylin_9ae2bd1": {
        "bug_id": "kylin_9ae2bd1",
        "commit": "https://github.com/apache/kylin/commit/9ae2bd17489e87efacd7b177735c9ddc8e03e09f",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/kylin/blob/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "changes": 36,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java?ref=9ae2bd17489e87efacd7b177735c9ddc8e03e09f",
                "deletions": 16,
                "filename": "core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "patch": "@@ -1235,31 +1235,35 @@ public SnapshotTable buildSnapshotTable(CubeSegment cubeSeg, String lookupTable,\n     public CubeInstance findLatestSnapshot(List<RealizationEntry> realizationEntries, String lookupTableName,\n             CubeInstance cubeInstance) {\n         CubeInstance cube = null;\n-        if (!realizationEntries.isEmpty()) {\n-            long maxBuildTime = Long.MIN_VALUE;\n-            RealizationRegistry registry = RealizationRegistry.getInstance(config);\n-            for (RealizationEntry entry : realizationEntries) {\n-                IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n-                if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n-                    CubeInstance current = (CubeInstance) realization;\n-                    if (checkMeetSnapshotTable(current, lookupTableName)) {\n-                        CubeSegment segment = current.getLatestReadySegment();\n-                        if (segment != null) {\n-                            long latestBuildTime = segment.getLastBuildTime();\n-                            if (latestBuildTime > maxBuildTime) {\n-                                maxBuildTime = latestBuildTime;\n-                                cube = current;\n+        try {\n+            if (!realizationEntries.isEmpty()) {\n+                long maxBuildTime = Long.MIN_VALUE;\n+                RealizationRegistry registry = RealizationRegistry.getInstance(config);\n+                for (RealizationEntry entry : realizationEntries) {\n+                    IRealization realization = registry.getRealization(entry.getType(), entry.getRealization());\n+                    if (realization != null && realization.isReady() && realization instanceof CubeInstance) {\n+                        CubeInstance current = (CubeInstance) realization;\n+                        if (checkMeetSnapshotTable(current, lookupTableName)) {\n+                            CubeSegment segment = current.getLatestReadySegment();\n+                            if (segment != null) {\n+                                long latestBuildTime = segment.getLastBuildTime();\n+                                if (latestBuildTime > maxBuildTime) {\n+                                    maxBuildTime = latestBuildTime;\n+                                    cube = current;\n+                                }\n                             }\n                         }\n                     }\n                 }\n             }\n+        } catch (Exception e) {\n+            logger.info(\"Unexpected error.\", e);\n         }\n         if (!cubeInstance.equals(cube)) {\n             logger.debug(\"Picked cube {} over {} as it provides a more recent snapshot of the lookup table {}\", cube,\n                     cubeInstance, lookupTableName);\n         }\n-        return cube;\n+        return cube == null ? cubeInstance : cube;\n     }\n \n     /**\n@@ -1274,7 +1278,7 @@ private boolean checkMeetSnapshotTable(CubeInstance toCheck, String lookupTableN\n             lookupTbl = strArr[strArr.length - 1];\n         }\n         for (DimensionDesc dimensionDesc : toCheck.getDescriptor().getDimensions()) {\n-            if (dimensionDesc.getTable().equalsIgnoreCase(lookupTbl)) {\n+            if (dimensionDesc.getTableRef().getTableName().equalsIgnoreCase(lookupTbl)) {\n                 checkRes = true;\n                 break;\n             }",
                "raw_url": "https://github.com/apache/kylin/raw/9ae2bd17489e87efacd7b177735c9ddc8e03e09f/core-cube/src/main/java/org/apache/kylin/cube/CubeManager.java",
                "sha": "7ad4dd3f7baa1ba10e183d35ec159e11c9a6d42a",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3628 Fix regression bug\n\nPrevious code change will cause NPE for \"SELECT * from DIMENSION_TABLE\" when dimension table name use alias.",
        "parent": "https://github.com/apache/kylin/commit/566ded888733dec7aba241944675169c4ef869d3",
        "patched_files": [
            "CubeManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "CubeManagerTest.java"
        ]
    },
    "kylin_a038656": {
        "bug_id": "kylin_a038656",
        "commit": "https://github.com/apache/kylin/commit/a0386564f5c095f924cef56c33ccb42093d25b9f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 1,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "patch": "@@ -53,7 +53,7 @@ public boolean moveNext() throws IOException {\n                 colStrValue = split[colIndex];\n             }\n \n-            colValue = Bytes.toBytes(colStrValue);\n+            colValue = colStrValue == null ? null : Bytes.toBytes(colStrValue);\n             return true;\n \n         } else {",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/TableColumnValueEnumerator.java",
                "sha": "5f9460c4aacbe5f0501288029f3047ef6732e699",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 0,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "patch": "@@ -49,4 +49,8 @@ protected String toString(ByteArray cell) {\n         return cell.toString();\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return ByteArray.class;\n+    }\n+\n }\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupBytesTable.java",
                "sha": "0758edccf5a44b90dd74704374d84604e895da87",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 0,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "patch": "@@ -43,4 +43,7 @@ protected String toString(String cell) {\n         return cell;\r\n     }\r\n \r\n+    public Class<?> getType() {\n+        return String.class;\n+    }\n }\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupStringTable.java",
                "sha": "ce73febf1e467490387fb7d24828e690d8f2a584",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java?ref=a0386564f5c095f924cef56c33ccb42093d25b9f",
                "deletions": 2,
                "filename": "core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "patch": "@@ -36,7 +36,7 @@\n /**\r\n  * An in-memory lookup table, in which each cell is an object of type T. The\r\n  * table is indexed by specified PK for fast lookup.\r\n- * \r\n+ *\n  * @author yangli9\r\n  */\r\n abstract public class LookupTable<T extends Comparable<T>> {\r\n@@ -73,7 +73,7 @@ protected void init() throws IOException {\n     @SuppressWarnings(\"unchecked\")\r\n     private void initRow(String[] cols, int[] keyIndex) {\r\n         T[] value = convertRow(cols);\r\n-        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(value[0].getClass(), keyIndex.length);\r\n+        T[] keyCols = (T[]) java.lang.reflect.Array.newInstance(getType(), keyIndex.length);\n         for (int i = 0; i < keyCols.length; i++)\r\n             keyCols[i] = value[keyIndex[i]];\r\n \r\n@@ -162,6 +162,8 @@ protected String toString(T[] cols) {\n \r\n     abstract protected String toString(T cell);\r\n \r\n+    abstract public Class<?> getType();\n+\n     public void dump() {\r\n         for (Array<T> key : data.keySet()) {\r\n             System.out.println(toString(key.data) + \" => \" + toString(data.get(key)));\r",
                "raw_url": "https://github.com/apache/kylin/raw/a0386564f5c095f924cef56c33ccb42093d25b9f/core-dictionary/src/main/java/org/apache/kylin/dict/lookup/LookupTable.java",
                "sha": "eb2b9633fa460a6207e94f99069af8f07942309d",
                "status": "modified"
            }
        ],
        "message": "KYLIN-1180 Fix some NPE on Dictionary\n\nSigned-off-by: honma <honma@ebay.com>",
        "parent": "https://github.com/apache/kylin/commit/1fa447a52d378242005296fd168fe5743ba4aec5",
        "patched_files": [
            "LookupTable.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "LookupTableTest.java"
        ]
    },
    "kylin_aaf9416": {
        "bug_id": "kylin_aaf9416",
        "commit": "https://github.com/apache/kylin/commit/aaf94169873b0622300ebebb1f5d3bc707a507c2",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/aaf94169873b0622300ebebb1f5d3bc707a507c2/core-metadata/src/main/java/org/apache/kylin/measure/percentile/PercentileCounter.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/measure/percentile/PercentileCounter.java?ref=aaf94169873b0622300ebebb1f5d3bc707a507c2",
                "deletions": 18,
                "filename": "core-metadata/src/main/java/org/apache/kylin/measure/percentile/PercentileCounter.java",
                "patch": "@@ -18,9 +18,6 @@\n \n package org.apache.kylin.measure.percentile;\n \n-import java.io.IOException;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n import java.io.Serializable;\n import java.nio.ByteBuffer;\n \n@@ -98,20 +95,15 @@ public void clear() {\n         reInitRegisters();\n     }\n \n-    private void writeObject(ObjectOutputStream out) throws IOException {\n-        registers.compress();\n-        int bound = registers.byteSize();\n-        ByteBuffer buf = ByteBuffer.allocate(bound);\n-        registers.asSmallBytes(buf);\n-        out.defaultWriteObject();\n-        out.writeInt(bound);\n-        out.write(buf.array(), 0, bound);\n-    }\n-    private void readObject(ObjectInputStream in) throws IOException, ClassNotFoundException {\n-        in.defaultReadObject();\n-        int bound = in.readInt();\n-        ByteBuffer buf = ByteBuffer.allocate(bound);\n-        in.read(buf.array(), 0, bound);\n-        registers = AVLTreeDigest.fromBytes(buf);\n+    public double getCompression() {\n+        return compression;\n+    }\n+\n+    public double getQuantileRatio() {\n+        return quantileRatio;\n+    }\n+\n+    public TDigest getRegisters() {\n+        return registers;\n     }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/aaf94169873b0622300ebebb1f5d3bc707a507c2/core-metadata/src/main/java/org/apache/kylin/measure/percentile/PercentileCounter.java",
                "sha": "89fa956ca7ff0923b13d08f75f3fec8632e3b8c1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/kylin/blob/aaf94169873b0622300ebebb1f5d3bc707a507c2/core-metadata/src/test/java/org/apache/kylin/measure/percentile/PercentileCounterTest.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/test/java/org/apache/kylin/measure/percentile/PercentileCounterTest.java?ref=aaf94169873b0622300ebebb1f5d3bc707a507c2",
                "deletions": 46,
                "filename": "core-metadata/src/test/java/org/apache/kylin/measure/percentile/PercentileCounterTest.java",
                "patch": "@@ -20,19 +20,11 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import java.io.ByteArrayInputStream;\n-import java.io.ByteArrayOutputStream;\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.io.ObjectInputStream;\n-import java.io.ObjectOutputStream;\n import java.util.Collections;\n import java.util.List;\n import java.util.Random;\n \n-import org.apache.commons.io.IOUtils;\n import org.apache.kylin.common.util.MathUtil;\n-import org.junit.Assert;\n import org.junit.Test;\n \n import com.google.common.collect.Lists;\n@@ -85,42 +77,4 @@ public void testTDigest() {\n         assertEquals(expectedResult, actualResult, 0);\n     }\n \n-    @Test\n-    public void testSerialization() {\n-        double compression = 100;\n-        double quantile = 0.5;\n-        ByteArrayOutputStream os = new ByteArrayOutputStream(1024);\n-        ObjectOutputStream out = null;\n-        PercentileCounter origin_counter = null;\n-        try {\n-            out = new ObjectOutputStream(os);\n-\n-            origin_counter = new PercentileCounter(compression, quantile);\n-            out.writeObject(origin_counter);\n-\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } finally {\n-            IOUtils.closeQuietly(out);\n-        }\n-\n-        InputStream is = new ByteArrayInputStream(os.toByteArray());\n-        PercentileCounter serialized_counter = null;\n-        ObjectInputStream in = null;\n-        try {\n-            in = new ObjectInputStream(is);\n-            serialized_counter = (PercentileCounter)in.readObject();\n-\n-            Assert.assertNotNull(serialized_counter);\n-            Assert.assertNotNull(serialized_counter.registers);\n-        } catch (IOException e) {\n-            e.printStackTrace();\n-        } catch (ClassNotFoundException e) {\n-            e.printStackTrace();\n-        } finally {\n-            IOUtils.closeQuietly(os);\n-            IOUtils.closeQuietly(is);\n-        }\n-\n-    }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/aaf94169873b0622300ebebb1f5d3bc707a507c2/core-metadata/src/test/java/org/apache/kylin/measure/percentile/PercentileCounterTest.java",
                "sha": "de2692ee4a23eadf2aef1114a9fcca98030cbc61",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/main/java/org/apache/kylin/engine/spark/KylinKryoRegistrator.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/KylinKryoRegistrator.java?ref=aaf94169873b0622300ebebb1f5d3bc707a507c2",
                "deletions": 6,
                "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/KylinKryoRegistrator.java",
                "patch": "@@ -21,6 +21,8 @@\n import java.util.LinkedHashSet;\n import java.util.Set;\n \n+import org.apache.kylin.engine.spark.util.PercentileCounterSerializer;\n+import org.apache.kylin.measure.percentile.PercentileCounter;\n import org.apache.spark.serializer.KryoRegistrator;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -91,23 +93,20 @@ public void registerClasses(Kryo kryo) {\n         kyroClasses.add(org.roaringbitmap.buffer.MutableRoaringBitmap.class);\n         kyroClasses.add(org.roaringbitmap.buffer.MappeableArrayContainer.class);\n         kyroClasses.add(org.roaringbitmap.buffer.MappeableBitmapContainer.class);\n-        kyroClasses.add(com.tdunning.math.stats.AVLTreeDigest.class);\n-        kyroClasses.add(com.tdunning.math.stats.Centroid.class);\n+\n \n         addClassQuitely(kyroClasses, \"com.google.common.collect.EmptyImmutableList\");\n         addClassQuitely(kyroClasses, \"java.nio.HeapShortBuffer\");\n         addClassQuitely(kyroClasses, \"java.nio.HeapLongBuffer\");\n         addClassQuitely(kyroClasses, \"scala.collection.immutable.Map$EmptyMap$\");\n         addClassQuitely(kyroClasses, \"org.apache.spark.sql.catalyst.expressions.GenericInternalRow\");\n         addClassQuitely(kyroClasses, \"org.apache.spark.unsafe.types.UTF8String\");\n-        addClassQuitely(kyroClasses, \"com.tdunning.math.stats.AVLGroupTree\");\n \n         for (Class kyroClass : kyroClasses) {\n             kryo.register(kyroClass);\n         }\n \n-        // TODO: should use JavaSerializer for PercentileCounter after Kryo bug be fixed: https://github.com/EsotericSoftware/kryo/issues/489\n-        //        kryo.register(PercentileCounter.class, new JavaSerializer());\n+        kryo.register(PercentileCounter.class, new PercentileCounterSerializer());\n     }\n \n     /**\n@@ -237,7 +236,6 @@ private void kylinClassByReflection2(Set<Class> kyroClasses) {\n         kyroClasses.add(org.apache.kylin.measure.hllc.SingleValueRegister.class);\n         kyroClasses.add(org.apache.kylin.measure.hllc.SparseRegister.class);\n         kyroClasses.add(org.apache.kylin.measure.percentile.PercentileAggregator.class);\n-        kyroClasses.add(org.apache.kylin.measure.percentile.PercentileCounter.class);\n         kyroClasses.add(org.apache.kylin.measure.percentile.PercentileMeasureType.class);\n         kyroClasses.add(org.apache.kylin.measure.percentile.PercentileSerializer.class);\n         kyroClasses.add(org.apache.kylin.measure.raw.RawAggregator.class);",
                "raw_url": "https://github.com/apache/kylin/raw/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/main/java/org/apache/kylin/engine/spark/KylinKryoRegistrator.java",
                "sha": "2991b82003efc4b82af899f6df639e9d55b8f953",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/kylin/blob/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/main/java/org/apache/kylin/engine/spark/util/PercentileCounterSerializer.java",
                "changes": 55,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/main/java/org/apache/kylin/engine/spark/util/PercentileCounterSerializer.java?ref=aaf94169873b0622300ebebb1f5d3bc707a507c2",
                "deletions": 0,
                "filename": "engine-spark/src/main/java/org/apache/kylin/engine/spark/util/PercentileCounterSerializer.java",
                "patch": "@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.kylin.engine.spark.util;\n+\n+import java.nio.ByteBuffer;\n+\n+import org.apache.kylin.measure.percentile.PercentileCounter;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.Serializer;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n+\n+public class PercentileCounterSerializer extends Serializer<PercentileCounter> {\n+\n+    @Override\n+    public void write(Kryo kryo, Output output, PercentileCounter counter) {\n+        int length = counter.getRegisters().byteSize();\n+        ByteBuffer buffer = ByteBuffer.allocate(length);\n+        counter.getRegisters().asSmallBytes(buffer);\n+        output.writeDouble(counter.getCompression());\n+        output.writeDouble(counter.getQuantileRatio());\n+        output.writeInt(buffer.position());\n+        output.write(buffer.array(), 0, buffer.position());\n+    }\n+\n+    @Override\n+    public PercentileCounter read(Kryo kryo, Input input, Class type) {\n+        double compression = input.readDouble();\n+        double quantileRatio = input.readDouble();\n+        int length = input.readInt();\n+        byte[] buffer = new byte[length];\n+        input.read(buffer);\n+        PercentileCounter counter = new PercentileCounter(compression, quantileRatio);\n+        counter.readRegisters(ByteBuffer.wrap(buffer));\n+        return counter;\n+    }\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/main/java/org/apache/kylin/engine/spark/util/PercentileCounterSerializer.java",
                "sha": "c9ba0f3c252c699f4e031f34775bfd2786813598",
                "status": "added"
            },
            {
                "additions": 67,
                "blob_url": "https://github.com/apache/kylin/blob/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/test/java/org/apache/kylin/engine/spark/util/PercentileSerializerTest.java",
                "changes": 67,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-spark/src/test/java/org/apache/kylin/engine/spark/util/PercentileSerializerTest.java?ref=aaf94169873b0622300ebebb1f5d3bc707a507c2",
                "deletions": 0,
                "filename": "engine-spark/src/test/java/org/apache/kylin/engine/spark/util/PercentileSerializerTest.java",
                "patch": "@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ *\n+ */\n+\n+package org.apache.kylin.engine.spark.util;\n+\n+import org.apache.kylin.measure.percentile.PercentileCounter;\n+import org.junit.Assert;\n+import org.junit.Test;\n+\n+import com.esotericsoftware.kryo.Kryo;\n+import com.esotericsoftware.kryo.io.Input;\n+import com.esotericsoftware.kryo.io.Output;\n+\n+public class PercentileSerializerTest {\n+\n+    @Test\n+    public void testSerialization() {\n+        Kryo kryo = new Kryo();\n+        kryo.register(PercentileCounter.class, new PercentileCounterSerializer());\n+        double compression = 100;\n+        double quantile = 0.8;\n+        PercentileCounter origin_counter = new PercentileCounter(compression, quantile);\n+        for (int i = 1; i < 10; i++) {\n+            origin_counter.add(i);\n+        }\n+        byte[] buffer = serialize(kryo, origin_counter);\n+        PercentileCounter deserialized_counter = deserialize(kryo, buffer, PercentileCounter.class);\n+        Assert.assertEquals(\"Compression Error\", origin_counter.getCompression(), deserialized_counter.getCompression(),\n+                0.00000001);\n+        Assert.assertEquals(\"QuantileRatio Error\", origin_counter.getQuantileRatio(),\n+                deserialized_counter.getQuantileRatio(), 0.00000001);\n+        Assert.assertEquals(\"Estimation Error\", origin_counter.getResultEstimate(),\n+                deserialized_counter.getResultEstimate(), 0.00000001);\n+    }\n+\n+    public static <T> T deserialize(final Kryo kryo, final byte[] in, final Class<T> clazz) {\n+        final Input input = new Input(in);\n+        return kryo.readObject(input, clazz);\n+    }\n+\n+    public static byte[] serialize(final Kryo kryo, final Object o) {\n+        if (o == null) {\n+            throw new NullPointerException(\"Can't serialize null\");\n+        }\n+        final Output output = new Output(4096);\n+        kryo.writeObject(output, o);\n+        output.flush();\n+        return output.getBuffer();\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/kylin/raw/aaf94169873b0622300ebebb1f5d3bc707a507c2/engine-spark/src/test/java/org/apache/kylin/engine/spark/util/PercentileSerializerTest.java",
                "sha": "9f48917c84393642d9c55cea9818c983f649350a",
                "status": "added"
            }
        ],
        "message": "KYLIN-2799 Building cube with percentile measure encounter with NullPointerException\n\nSigned-off-by: Billy Liu <billyliu@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/15d6063cf982ce3f0299631962f6582cec246460",
        "patched_files": [
            "PercentileCounterSerializer.java",
            "PercentileCounter.java",
            "KylinKryoRegistrator.java",
            "PercentileSerializer.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "PercentileCounterTest.java",
            "PercentileSerializerTest.java"
        ]
    },
    "kylin_b32cc95": {
        "bug_id": "kylin_b32cc95",
        "commit": "https://github.com/apache/kylin/commit/b32cc9545a76657570c4a3353469ded43892c772",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/kylin/blob/b32cc9545a76657570c4a3353469ded43892c772/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java?ref=b32cc9545a76657570c4a3353469ded43892c772",
                "deletions": 0,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "patch": "@@ -129,6 +129,11 @@ protected void setup(Context context) throws IOException, InterruptedException {\n             List<TblColRef> columns = measureType.getColumnsNeedDictionary(measureDesc.getFunction());\n             boolean needReEncode = false;\n             for (TblColRef col : columns) {\n+                //handle the column that all records is null\n+                if (sourceCubeSegment.getDictionary(col) == null) {\n+                    continue;\n+                }\n+\n                 if (!sourceCubeSegment.getDictionary(col).equals(mergedCubeSegment.getDictionary(col))) {\n                     oldDicts.put(col, sourceCubeSegment.getDictionary(col));\n                     newDicts.put(col, mergedCubeSegment.getDictionary(col));\n@@ -249,6 +254,11 @@ public void doMap(Text key, Text value, Context context) throws IOException, Int\n     }\n \n     private Boolean checkNeedMerging(TblColRef col) throws IOException {\n+        //handle the column that all records is null\n+        if (sourceCubeSegment.getDictionary(col) == null) {\n+            return false;\n+        }\n+\n         Boolean ret = dimensionsNeedDict.get(col);\n         if (ret != null)\n             return ret;",
                "raw_url": "https://github.com/apache/kylin/raw/b32cc9545a76657570c4a3353469ded43892c772/engine-mr/src/main/java/org/apache/kylin/engine/mr/steps/MergeCuboidMapper.java",
                "sha": "acf14031744855bb88d63d31dcb6259c134dc3ce",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2433 Fix NPE in MergeCuboidMapper",
        "parent": "https://github.com/apache/kylin/commit/6d11dd1d27a74fe50cd4fa58d2acf26f728f82e7",
        "patched_files": [
            "MergeCuboidMapper.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "MergeCuboidMapperTest.java"
        ]
    },
    "kylin_b8f2292": {
        "bug_id": "kylin_b8f2292",
        "commit": "https://github.com/apache/kylin/commit/b8f2292641ae6d00b207196f6294de36e2a17bd6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java?ref=b8f2292641ae6d00b207196f6294de36e2a17bd6",
                "deletions": 1,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "patch": "@@ -69,7 +69,10 @@\n             }\n         }\n \n-        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        JobTimeFilterEnum timeFilter = JobTimeFilterEnum.LAST_ONE_WEEK;\n+        if (null != jobRequest.getTimeFilter()) {\n+            timeFilter = JobTimeFilterEnum.getByCode(jobRequest.getTimeFilter());\n+        }\n \n         try {\n             jobInstanceList = jobService.searchJobs(jobRequest.getCubeName(), jobRequest.getProjectName(), statusList,",
                "raw_url": "https://github.com/apache/kylin/raw/b8f2292641ae6d00b207196f6294de36e2a17bd6/server-base/src/main/java/org/apache/kylin/rest/controller/JobController.java",
                "sha": "ca3be992de81247667d33f1a4c6635532752d92b",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2940 List job restful throw NPE when time filter not set\n\nSigned-off-by: shaofengshi <shaofengshi@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/e0d8dda58819786076d028d4ba0a571dddb8afe9",
        "patched_files": [
            "JobController.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobControllerTest.java"
        ]
    },
    "kylin_c0569ba": {
        "bug_id": "kylin_c0569ba",
        "commit": "https://github.com/apache/kylin/commit/c0569baa169f26f911be05baeab568139bb45670",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=c0569baa169f26f911be05baeab568139bb45670",
                "deletions": 0,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "patch": "@@ -125,9 +125,11 @@ public void removeCache(Broadcaster.TYPE cacheType, String cacheKey) {\n         try {\n             switch (cacheType) {\n                 case CUBE:\n+                if (getCubeManager().getCube(cacheKey) != null) {\n                     String storageUUID = getCubeManager().getCube(cacheKey).getUuid();\n                     getCubeManager().removeCubeLocal(cacheKey);\n                     super.cleanDataCache(storageUUID);\n+                }\n                     break;\n                 case CUBE_DESC:\n                     getCubeDescManager().removeLocalCubeDesc(cacheKey);",
                "raw_url": "https://github.com/apache/kylin/raw/c0569baa169f26f911be05baeab568139bb45670/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "sha": "63fe8c4d30e1dfd199871ac8733d80a8e23d4b10",
                "status": "modified"
            }
        ],
        "message": "KYLIN-1127 fix a NPE",
        "parent": "https://github.com/apache/kylin/commit/d2cbc8f26df02147c4040655f0470d7bc271f90f",
        "patched_files": [
            "CacheService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "CacheServiceTest.java"
        ]
    },
    "kylin_c487fe4": {
        "bug_id": "kylin_c487fe4",
        "commit": "https://github.com/apache/kylin/commit/c487fe4990473afa11d30a2e16ceb133e3f25b6d",
        "file": [
            {
                "additions": 63,
                "blob_url": "https://github.com/apache/kylin/blob/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "changes": 127,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=c487fe4990473afa11d30a2e16ceb133e3f25b6d",
                "deletions": 64,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "patch": "@@ -18,18 +18,12 @@\n \n package org.apache.kylin.rest.service;\n \n-import java.io.IOException;\n-import java.util.Calendar;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.EnumSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import java.util.TimeZone;\n-\n-import javax.annotation.Nullable;\n-\n+import com.google.common.base.Function;\n+import com.google.common.base.Predicate;\n+import com.google.common.base.Predicates;\n+import com.google.common.collect.FluentIterable;\n+import com.google.common.collect.Lists;\n+import com.google.common.collect.Sets;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.directory.api.util.Strings;\n import org.apache.kylin.common.KylinConfig;\n@@ -72,12 +66,16 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n-import com.google.common.base.Function;\n-import com.google.common.base.Predicate;\n-import com.google.common.base.Predicates;\n-import com.google.common.collect.FluentIterable;\n-import com.google.common.collect.Lists;\n-import com.google.common.collect.Sets;\n+import javax.annotation.Nullable;\n+import java.io.IOException;\n+import java.util.Calendar;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.EnumSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TimeZone;\n \n /**\n  * @author ysong1\n@@ -158,53 +156,53 @@ private ExecutableState parseToExecutableState(JobStatusEnum status) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (status) {\n-        case DISCARDED:\n-            return ExecutableState.DISCARDED;\n-        case ERROR:\n-            return ExecutableState.ERROR;\n-        case FINISHED:\n-            return ExecutableState.SUCCEED;\n-        case NEW:\n-            return ExecutableState.READY;\n-        case PENDING:\n-            return ExecutableState.READY;\n-        case RUNNING:\n-            return ExecutableState.RUNNING;\n-        case STOPPED:\n-            return ExecutableState.STOPPED;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n+            case DISCARDED:\n+                return ExecutableState.DISCARDED;\n+            case ERROR:\n+                return ExecutableState.ERROR;\n+            case FINISHED:\n+                return ExecutableState.SUCCEED;\n+            case NEW:\n+                return ExecutableState.READY;\n+            case PENDING:\n+                return ExecutableState.READY;\n+            case RUNNING:\n+                return ExecutableState.RUNNING;\n+            case STOPPED:\n+                return ExecutableState.STOPPED;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_EXECUTABLE_STATE(), status));\n         }\n     }\n \n     private long getTimeStartInMillis(Calendar calendar, JobTimeFilterEnum timeFilter) {\n         Message msg = MsgPicker.getMsg();\n \n         switch (timeFilter) {\n-        case LAST_ONE_DAY:\n-            calendar.add(Calendar.DAY_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_WEEK:\n-            calendar.add(Calendar.WEEK_OF_MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_MONTH:\n-            calendar.add(Calendar.MONTH, -1);\n-            return calendar.getTimeInMillis();\n-        case LAST_ONE_YEAR:\n-            calendar.add(Calendar.YEAR, -1);\n-            return calendar.getTimeInMillis();\n-        case ALL:\n-            return 0;\n-        default:\n-            throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n+            case LAST_ONE_DAY:\n+                calendar.add(Calendar.DAY_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_WEEK:\n+                calendar.add(Calendar.WEEK_OF_MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_MONTH:\n+                calendar.add(Calendar.MONTH, -1);\n+                return calendar.getTimeInMillis();\n+            case LAST_ONE_YEAR:\n+                calendar.add(Calendar.YEAR, -1);\n+                return calendar.getTimeInMillis();\n+            case ALL:\n+                return 0;\n+            default:\n+                throw new BadRequestException(String.format(msg.getILLEGAL_TIME_FILTER(), timeFilter));\n         }\n     }\n \n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#cube, 'ADMINISTRATION') or hasPermission(#cube, 'OPERATION') or hasPermission(#cube, 'MANAGEMENT')\")\n     public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, long startOffset, long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                 Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                 CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         JobInstance jobInstance = submitJobInternal(cube, startDate, endDate, startOffset, endOffset, sourcePartitionOffsetStart,\n                 sourcePartitionOffsetEnd, buildType, force, submitter);\n \n@@ -215,9 +213,9 @@ public JobInstance submitJob(CubeInstance cube, long startDate, long endDate, lo\n     }\n \n     public JobInstance submitJobInternal(CubeInstance cube, long startDate, long endDate, long startOffset,\n-            long endOffset, //\n-            Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n-            CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n+                                         long endOffset, //\n+                                         Map<Integer, Long> sourcePartitionOffsetStart, Map<Integer, Long> sourcePartitionOffsetEnd,\n+                                         CubeBuildTypeEnum buildType, boolean force, String submitter) throws IOException {\n         Message msg = MsgPicker.getMsg();\n \n         if (cube.getStatus() == RealizationStatusEnum.DESCBROKEN) {\n@@ -330,7 +328,7 @@ public void rollbackJob(JobInstance job, String stepId) {\n     @PreAuthorize(Constant.ACCESS_HAS_ROLE_ADMIN\n             + \" or hasPermission(#job, 'ADMINISTRATION') or hasPermission(#job, 'OPERATION') or hasPermission(#job, 'MANAGEMENT')\")\n     public JobInstance cancelJob(JobInstance job) throws IOException {\n-        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube())) {\n+        if (null == job.getRelatedCube() || null == getCubeManager().getCube(job.getRelatedCube()) || null == job.getRelatedSegment()) {\n             getExecutableManager().discardJob(job.getId());\n             return job;\n         }\n@@ -366,11 +364,12 @@ public void dropJob(JobInstance job) throws IOException {\n \n     /**\n      * currently only support substring match\n+     *\n      * @return\n      */\n     public List<JobInstance> searchJobs(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n-            final JobTimeFilterEnum timeFilter) {\n+                                        final List<JobStatusEnum> statusList, final Integer limitValue, final Integer offsetValue,\n+                                        final JobTimeFilterEnum timeFilter) {\n         Integer limit = (null == limitValue) ? 30 : limitValue;\n         Integer offset = (null == offsetValue) ? 0 : offsetValue;\n         List<JobInstance> jobs = searchJobsByCubeName(cubeNameSubstring, projectName, statusList, timeFilter);\n@@ -388,17 +387,17 @@ public void dropJob(JobInstance job) throws IOException {\n     }\n \n     public List<JobInstance> searchJobsByCubeName(final String cubeNameSubstring, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                  final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(cubeNameSubstring, null, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> searchJobsByJobName(final String jobName, final String projectName,\n-            final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                 final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         return innerSearchCubingJobs(null, jobName, projectName, statusList, timeFilter);\n     }\n \n     public List<JobInstance> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n+                                                   final String projectName, final List<JobStatusEnum> statusList, final JobTimeFilterEnum timeFilter) {\n         // prepare time range\n         Calendar calendar = Calendar.getInstance();\n         calendar.setTime(new Date());\n@@ -421,8 +420,8 @@ public JobInstance apply(CubingJob cubingJob) {\n     }\n \n     public List<CubingJob> innerSearchCubingJobs(final String cubeName, final String jobName,\n-            final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n-            final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n+                                                 final Set<ExecutableState> statusList, long timeStartInMillis, long timeEndInMillis,\n+                                                 final Map<String, Output> allOutputs, final boolean nameExactMatch, final String projectName) {\n         List<CubingJob> results = Lists.newArrayList(FluentIterable.from(\n                 getExecutableManager().getAllAbstractExecutables(timeStartInMillis, timeEndInMillis, CubingJob.class))\n                 .filter(new Predicate<AbstractExecutable>() {\n@@ -491,7 +490,7 @@ public boolean apply(@Nullable CubingJob cubeJob) {\n     }\n \n     public List<CubingJob> listJobsByRealizationName(final String realizationName, final String projectName,\n-            final Set<ExecutableState> statusList) {\n+                                                     final Set<ExecutableState> statusList) {\n         return innerSearchCubingJobs(realizationName, null, statusList, 0L, Long.MAX_VALUE,\n                 getExecutableManager().getAllOutputs(), true, projectName);\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/c487fe4990473afa11d30a2e16ceb133e3f25b6d/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "sha": "5dafa08bd9d382b5ada8693811d5e6fcee8c87d7",
                "status": "modified"
            }
        ],
        "message": "#1949, fix NPE when discarding model check job (#1952)",
        "parent": "https://github.com/apache/kylin/commit/2eca43c40723cce0f12a56a1299894bbf5803d03",
        "patched_files": [
            "JobService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    },
    "kylin_c58c9bf": {
        "bug_id": "kylin_c58c9bf",
        "commit": "https://github.com/apache/kylin/commit/c58c9bf14200cddc6a2e46375dcc81ca98e45725",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/c58c9bf14200cddc6a2e46375dcc81ca98e45725/source-jdbc/src/main/java/org/apache/kylin/source/jdbc/JdbcHiveInputBase.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/source-jdbc/src/main/java/org/apache/kylin/source/jdbc/JdbcHiveInputBase.java?ref=c58c9bf14200cddc6a2e46375dcc81ca98e45725",
                "deletions": 5,
                "filename": "source-jdbc/src/main/java/org/apache/kylin/source/jdbc/JdbcHiveInputBase.java",
                "patch": "@@ -226,13 +226,11 @@ protected AbstractExecutable createSqoopToFlatHiveStep(String jobWorkingDir, Str\n \n             String splitTableAlias;\n             String splitColumn;\n-            String quoteFullNamedColumn; // `table.column`\n             String splitDatabase;\n             TblColRef splitColRef = determineSplitColumn();\n             splitTableAlias = splitColRef.getTableAlias();\n \n             splitColumn = getColumnIdentityQuoted(splitColRef, jdbcMetadataDialect, metaMap, true);\n-            quoteFullNamedColumn = quoteIdentifier(partCol, jdbcMetadataDialect.getDialect());\n             splitDatabase = splitColRef.getColumnDesc().getTable().getDatabase();\n \n             String selectSql = generateSelectDataStatementRDBMS(flatDesc, true, new String[] { partCol },\n@@ -250,8 +248,8 @@ protected AbstractExecutable createSqoopToFlatHiveStep(String jobWorkingDir, Str\n             String filedDelimiter = config.getJdbcSourceFieldDelimiter();\n             int mapperNum = config.getSqoopMapperNum();\n \n-            String bquery = String.format(Locale.ROOT, \"SELECT min(%s), max(%s) FROM %s.%s \", quoteFullNamedColumn,\n-                    quoteFullNamedColumn, getSchemaQuoted(metaMap, splitDatabase, jdbcMetadataDialect, true),\n+            String bquery = String.format(Locale.ROOT, \"SELECT min(%s), max(%s) FROM %s.%s \", splitColumn,\n+                    splitColumn, getSchemaQuoted(metaMap, splitDatabase, jdbcMetadataDialect, true),\n                     getTableIdentityQuoted(splitColRef.getTableRef(), metaMap, jdbcMetadataDialect, true));\n             if (partitionDesc.isPartitioned()) {\n                 SegmentRange segRange = flatDesc.getSegRange();\n@@ -276,7 +274,7 @@ protected AbstractExecutable createSqoopToFlatHiveStep(String jobWorkingDir, Str\n                     + \"--connect \\\"%s\\\" --driver %s --username %s --password \\\"%s\\\" --query \\\"%s AND \\\\$CONDITIONS\\\" \"\n                     + \"--target-dir %s/%s --split-by %s --boundary-query \\\"%s\\\" --null-string '%s' \"\n                     + \"--null-non-string '%s' --fields-terminated-by '%s' --num-mappers %d\", sqoopHome, connectionUrl,\n-                    driverClass, jdbcUser, jdbcPass, selectSql, jobWorkingDir, hiveTable, partCol, bquery,\n+                    driverClass, jdbcUser, jdbcPass, selectSql, jobWorkingDir, hiveTable, splitColumn, bquery,\n                     sqoopNullString, sqoopNullNonString, filedDelimiter, mapperNum);\n             logger.debug(\"sqoop cmd : {}\", cmd);\n             CmdStep step = new CmdStep();",
                "raw_url": "https://github.com/apache/kylin/raw/c58c9bf14200cddc6a2e46375dcc81ca98e45725/source-jdbc/src/main/java/org/apache/kylin/source/jdbc/JdbcHiveInputBase.java",
                "sha": "391deed223a39b52c5740ad4cdcb87f9712c8c59",
                "status": "modified"
            }
        ],
        "message": "KYLIN-4297 Build cube throw NPE when partition column is not set in JDBC Data Source",
        "parent": "https://github.com/apache/kylin/commit/1ae59827981d99d82c832923f5247b76897c7843",
        "patched_files": [
            "JdbcHiveInputBase.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JdbcHiveInputBaseTest.java"
        ]
    },
    "kylin_c7bb364": {
        "bug_id": "kylin_c7bb364",
        "commit": "https://github.com/apache/kylin/commit/c7bb3640f83ae9f934311654715b0f3f52f8fea6",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/kylin/blob/c7bb3640f83ae9f934311654715b0f3f52f8fea6/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java?ref=c7bb3640f83ae9f934311654715b0f3f52f8fea6",
                "deletions": 10,
                "filename": "job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java",
                "patch": "@@ -142,23 +142,25 @@ public void build(BlockingQueue<List<String>> input, ICuboidWriter output) throw\n             cuboidResult.table.close();\n         }\n     }\n-    \n+\n     TreeMap<Long, CuboidResult> build(BlockingQueue<List<String>> input) throws IOException {\n         final TreeMap<Long, CuboidResult> result = new TreeMap<Long, CuboidResult>();\n         ICuboidCollector collector = new ICuboidCollector() {\n             @Override\n             public void collect(CuboidResult cuboidResult) {\n-                result.put(cuboidResult.cuboidId, cuboidResult);\n+                synchronized (result) {\n+                    result.put(cuboidResult.cuboidId, cuboidResult);\n+                }\n             }\n         };\n         build(input, collector);\n         return result;\n     }\n-    \n+\n     static interface ICuboidCollector {\n         public void collect(CuboidResult result);\n     }\n-    \n+\n     static class CuboidResult {\n         public long cuboidId;\n         public GridTable table;\n@@ -207,7 +209,7 @@ private void build(BlockingQueue<List<String>> input, ICuboidCollector collector\n \n         throwExceptionIfAny();\n     }\n-    \n+\n     public void abort() {\n         interrupt(taskThreads);\n     }\n@@ -216,7 +218,7 @@ private void start(Thread... threads) {\n         for (Thread t : threads)\n             t.start();\n     }\n-    \n+\n     private void interrupt(Thread... threads) {\n         for (Thread t : threads)\n             t.interrupt();\n@@ -264,7 +266,7 @@ private void throwExceptionIfAny() throws IOException {\n     public boolean isAllCuboidDone() {\n         return taskCuboidCompleted.get() == totalCuboidCount;\n     }\n-    \n+\n     private class CuboidTaskThread extends Thread {\n         private int id;\n \n@@ -397,10 +399,10 @@ private CuboidResult updateCuboidResult(long cuboidId, GridTable table, int nRow\n         if (aggrCacheMB <= 0) {\n             aggrCacheMB = (int) Math.ceil(1.0 * nRows / baseResult.nRows * baseResult.aggrCacheMB);\n         }\n-        \n+\n         CuboidResult result = new CuboidResult(cuboidId, table, nRows, timeSpent, aggrCacheMB);\n         taskCuboidCompleted.incrementAndGet();\n-        \n+\n         resultCollector.collect(result);\n         return result;\n     }\n@@ -651,6 +653,6 @@ private void buildGTRecord(List<String> row, GTRecord record) {\n         private byte[] toBytes(String v) {\n             return v == null ? null : Bytes.toBytes(v);\n         }\n-        \n+\n     }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/c7bb3640f83ae9f934311654715b0f3f52f8fea6/job/src/main/java/org/apache/kylin/job/inmemcubing/InMemCubeBuilder.java",
                "sha": "761199cda7146c8937087b4b44fb6f868b9f80eb",
                "status": "modified"
            }
        ],
        "message": "minor, fix concurrent NPE in InMemCubeBuilder",
        "parent": "https://github.com/apache/kylin/commit/ddac497a2cf62bccba8618829a03e3be1a030098",
        "patched_files": [
            "InMemCubeBuilder.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "InMemCubeBuilderTest.java"
        ]
    },
    "kylin_ca42b92": {
        "bug_id": "kylin_ca42b92",
        "commit": "https://github.com/apache/kylin/commit/ca42b92b6d86eb6cb3eb22a212e77f2155b19890",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java?ref=ca42b92b6d86eb6cb3eb22a212e77f2155b19890",
                "deletions": 0,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "patch": "@@ -132,6 +132,10 @@ public ProjectInstance reloadProjectQuietly(String project) throws IOException {\n     }\n \n     public ProjectInstance getProject(String projectName) {\n+        // Null check is needed for ConcurrentMap does not supporting .get(null)\n+        if (projectName == null)\n+            return null;\n+\n         try (AutoLock lock = prjMapLock.lockForRead()) {\n             return projectMap.get(projectName);\n         }",
                "raw_url": "https://github.com/apache/kylin/raw/ca42b92b6d86eb6cb3eb22a212e77f2155b19890/core-metadata/src/main/java/org/apache/kylin/metadata/project/ProjectManager.java",
                "sha": "0dd364d124c6832de0c6b40d2c582b8d358d010f",
                "status": "modified"
            }
        ],
        "message": "Add null pointer check for ProjectManager#getProject to avoid NPE",
        "parent": "https://github.com/apache/kylin/commit/f37fbce17f6e25775877290ba1f0de076c62f32f",
        "patched_files": [
            "ProjectManager.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "ProjectManagerTest.java"
        ]
    },
    "kylin_dcd12b0": {
        "bug_id": "kylin_dcd12b0",
        "commit": "https://github.com/apache/kylin/commit/dcd12b0ea561987f30f348b33c2746b605fc5c71",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/dcd12b0ea561987f30f348b33c2746b605fc5c71/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=dcd12b0ea561987f30f348b33c2746b605fc5c71",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "patch": "@@ -462,6 +462,10 @@ public boolean apply(CubingJob executable) {\n                     public boolean apply(CubingJob executable) {\n                         try {\n                             Output output = allOutputs.get(executable.getId());\n+                            if (output == null){\n+                                return false;\n+                            }\n+                            \n                             ExecutableState state = output.getState();\n                             boolean ret = statusList.contains(state);\n                             return ret;",
                "raw_url": "https://github.com/apache/kylin/raw/dcd12b0ea561987f30f348b33c2746b605fc5c71/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "sha": "5bf684a4ac9c4e0315f1a4598bbe8d347dc27902",
                "status": "modified"
            },
            {
                "additions": 33,
                "blob_url": "https://github.com/apache/kylin/blob/dcd12b0ea561987f30f348b33c2746b605fc5c71/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java",
                "changes": 33,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java?ref=dcd12b0ea561987f30f348b33c2746b605fc5c71",
                "deletions": 0,
                "filename": "server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java",
                "patch": "@@ -19,9 +19,14 @@\n package org.apache.kylin.rest.service;\n \n import java.io.IOException;\n+import java.util.Collections;\n+import java.util.List;\n \n+import org.apache.kylin.engine.mr.CubingJob;\n import org.apache.kylin.job.constant.JobTimeFilterEnum;\n+import org.apache.kylin.job.exception.ExecuteException;\n import org.apache.kylin.job.exception.JobException;\n+import org.apache.kylin.job.execution.*;\n import org.apache.kylin.metadata.project.ProjectInstance;\n import org.junit.Assert;\n import org.junit.Test;\n@@ -50,4 +55,32 @@ public void testBasics() throws JobException, IOException {\n         Assert.assertNull(jobService.getJobInstance(\"job_not_exist\"));\n         Assert.assertNotNull(jobService.searchJobs(null, null, null, 0, 0, JobTimeFilterEnum.ALL));\n     }\n+\n+    @Test\n+    public void testExceptionOnLostJobOutput() {\n+        ExecutableManager manager = ExecutableManager.getInstance(jobService.getConfig());\n+        AbstractExecutable executable = new TestJob();\n+        manager.addJob(executable);\n+        List<CubingJob> jobs = jobService.innerSearchCubingJobs(\"cube\",\n+                \"jobName\",\n+                Collections.<ExecutableState>emptySet(),\n+                0,\n+                Long.MAX_VALUE,\n+                Collections.<String, Output>emptyMap(),\n+                true,\n+                \"project\");\n+        Assert.assertEquals(0, jobs.size());\n+    }\n+\n+    public static class TestJob extends CubingJob {\n+\n+        public TestJob(){\n+            super();\n+        }\n+\n+        @Override\n+        protected ExecuteResult doWork(ExecutableContext context) throws ExecuteException {\n+            return new ExecuteResult(ExecuteResult.State.SUCCEED, \"\");\n+        }\n+    }\n }",
                "raw_url": "https://github.com/apache/kylin/raw/dcd12b0ea561987f30f348b33c2746b605fc5c71/server/src/test/java/org/apache/kylin/rest/service/JobServiceTest.java",
                "sha": "fce6027565fa0c765497f0952efcb38777181522",
                "status": "modified"
            }
        ],
        "message": "KYLIN-2711 avoid NPE if output is lost\n\nSigned-off-by: Li Yang <liyang@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/0e675cf2cbaa9f2bc9a520aaef82443641efb8ca",
        "patched_files": [
            "JobService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    },
    "kylin_ddac497": {
        "bug_id": "kylin_ddac497",
        "commit": "https://github.com/apache/kylin/commit/ddac497a2cf62bccba8618829a03e3be1a030098",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "patch": "@@ -172,7 +172,7 @@\n       \"dictionary\" : \"true\",\n       \"mandatory\" : false\n     } ],\n-    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\", ] ]\n+    \"aggregation_groups\" : [ [ \"lstg_format_name\", \"lstg_site_id\", \"slr_segment_cd\" ], [ \"leaf_categ_id\", \"meta_categ_name\", \"categ_lvl3_name\", \"categ_lvl2_name\" ] ]\n   },\n   \"last_modified\" : 1422435345362,\n   \"model_name\" : \"test_kylin_inner_join_model_desc\",",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/examples/test_case_data/localmeta/cube_desc/test_kylin_cube_without_slr_desc.json",
                "sha": "567a0991148aac7331c8c163e1a2d0ade2738e13",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CacheService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "patch": "@@ -49,7 +49,6 @@\n     @Autowired\n     private CacheUpdater cacheUpdater;\n \n-\n     @Autowired\n     private CubeService cubeService;\n \n@@ -63,6 +62,10 @@ public void initCacheUpdater(CacheUpdater cacheUpdater) {\n         AbstractRestCache.setCacheUpdater(cacheUpdater);\n     }\n \n+    public void setCubeService(CubeService cubeService) {\n+        this.cubeService = cubeService;\n+    }\n+\n     private static final Logger logger = LoggerFactory.getLogger(CacheService.class);\n \n     public void rebuildCache(Broadcaster.TYPE cacheType, String cacheKey) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CacheService.java",
                "sha": "14f0a433b28d59110358f0e31278e8b8e5d676f4",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/main/java/org/apache/kylin/rest/service/CubeService.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 2,
                "filename": "server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "patch": "@@ -76,7 +76,7 @@\n \n     private static final Logger logger = LoggerFactory.getLogger(CubeService.class);\n \n-    private static WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n+    private WeakHashMap<String, HBaseResponse> htableInfoCache = new WeakHashMap<>();\n \n     @Autowired\n     private AccessService accessService;\n@@ -580,7 +580,7 @@ public void mergeCubeOnNewSegmentReady(String cubeName) {\n             CubeSegment newSeg;\n             CubeInstance cube = getCubeManager().getCube(cubeName);\n             if (cube.needAutoMerge()) {\n-                synchronized (CacheService.class) {\n+                synchronized (CubeService.class) {\n                     try {\n                         newSeg = getCubeManager().autoMergeCubeSegments(cube);\n                         if (newSeg != null) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/main/java/org/apache/kylin/rest/service/CubeService.java",
                "sha": "43ecfd584959553343d68cdfe6a814248ed1cbc9",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 0,
                "filename": "server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "patch": "@@ -86,8 +86,25 @@ public KylinConfig getConfig() {\n             }\n         };\n \n+\n+        final CubeService cubeServiceA = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configA;\n+            }\n+        };\n+        final CubeService cubeServiceB = new CubeService() {\n+            @Override\n+            public KylinConfig getConfig() {\n+                return configB;\n+            }\n+        };\n+\n+\n         serviceA.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceA.setCubeService(cubeServiceA);\n         serviceB.initCacheUpdater(new RemoteCacheUpdater());\n+        serviceB.setCubeService(cubeServiceB);\n \n         context.addServlet(new ServletHolder(new BroadcasterReceiveServlet(new BroadcasterReceiveServlet.BroadcasterHandler() {\n             @Override",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/server/src/test/java/org/apache/kylin/rest/service/CacheServiceTest.java",
                "sha": "8860d223ee8987da935854b21569d1245365ea16",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java?ref=ddac497a2cf62bccba8618829a03e3be1a030098",
                "deletions": 1,
                "filename": "storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "patch": "@@ -70,7 +70,7 @@ private void init() {\n             for (int i = 0; i < realizationEntries.size(); i++) {\n                 IRealization realization = registry.getRealization(realizationEntries.get(i).getType(), realizationEntries.get(i).getRealization());\n                 if (realization == null) {\n-                    logger.error(\"Realization '\" + realization.getName() + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n+                    logger.error(\"Realization '\" + realizationEntries.get(i) + \" is not found, remove from Hybrid '\" + this.getName() + \"'\");\n                     continue;\n                 }\n                 if (realization.isReady() == false) {",
                "raw_url": "https://github.com/apache/kylin/raw/ddac497a2cf62bccba8618829a03e3be1a030098/storage/src/main/java/org/apache/kylin/storage/hybrid/HybridInstance.java",
                "sha": "fee3bab875e0360da0d19d797fbfb52630581a4e",
                "status": "modified"
            }
        ],
        "message": "KYLIN-867 fix a NPE in CacheServiceTest",
        "parent": "https://github.com/apache/kylin/commit/eb86239c22bfb292ea854442848a8ee62be16d11",
        "patched_files": [
            "CacheService.java",
            "CubeService.java",
            "HybridInstance.java",
            "test_kylin_cube_without_slr_desc.json"
        ],
        "repo": "kylin",
        "unit_tests": [
            "CacheServiceTest.java",
            "CubeServiceTest.java"
        ]
    },
    "kylin_e53257d": {
        "bug_id": "kylin_e53257d",
        "commit": "https://github.com/apache/kylin/commit/e53257d1fad0edc43cc625b4e3bc63723e403f4e",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/kylin/blob/e53257d1fad0edc43cc625b4e3bc63723e403f4e/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java?ref=e53257d1fad0edc43cc625b4e3bc63723e403f4e",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "patch": "@@ -114,7 +114,13 @@ public StreamingRequest saveStreamingConfig(@RequestBody StreamingRequest stream\n         }\n \n         StreamingConfig streamingConfig = deserializeSchemalDesc(streamingRequest);\n+        if(!streamingRequest.isSuccessful()){\n+            return streamingRequest;\n+        }\n         KafkaConfig kafkaConfig = deserializeKafkaSchemalDesc(streamingRequest);\n+        if(!streamingRequest.isSuccessful()){\n+            return streamingRequest;\n+        }\n         boolean saveStreamingSuccess = false, saveKafkaSuccess = false;\n \n         try {\n@@ -181,7 +187,13 @@ public StreamingRequest saveStreamingConfig(@RequestBody StreamingRequest stream\n     @ResponseBody\n     public StreamingRequest updateStreamingConfig(@RequestBody StreamingRequest streamingRequest) throws JsonProcessingException {\n         StreamingConfig streamingConfig = deserializeSchemalDesc(streamingRequest);\n+        if(!streamingRequest.isSuccessful()){\n+            return streamingRequest;\n+        }\n         KafkaConfig kafkaConfig = deserializeKafkaSchemalDesc(streamingRequest);\n+        if(!streamingRequest.isSuccessful()){\n+            return streamingRequest;\n+        }\n         String project = streamingRequest.getProject();\n         if (streamingConfig == null) {\n             return streamingRequest;\n@@ -230,6 +242,7 @@ private TableDesc deserializeTableDesc(StreamingRequest streamingRequest) {\n         try {\n             logger.debug(\"Saving TableDesc \" + streamingRequest.getTableData());\n             desc = JsonUtil.readValue(streamingRequest.getTableData(), TableDesc.class);\n+            updateRequest(streamingRequest, true, null);\n         } catch (JsonParseException e) {\n             logger.error(\"The TableDesc definition is invalid.\", e);\n             updateRequest(streamingRequest, false, e.getMessage());\n@@ -255,6 +268,7 @@ private StreamingConfig deserializeSchemalDesc(StreamingRequest streamingRequest\n         try {\n             logger.debug(\"Saving StreamingConfig \" + streamingRequest.getStreamingConfig());\n             desc = JsonUtil.readValue(streamingRequest.getStreamingConfig(), StreamingConfig.class);\n+            updateRequest(streamingRequest, true, null);\n         } catch (JsonParseException e) {\n             logger.error(\"The StreamingConfig definition is invalid.\", e);\n             updateRequest(streamingRequest, false, e.getMessage());\n@@ -273,6 +287,7 @@ private KafkaConfig deserializeKafkaSchemalDesc(StreamingRequest streamingReques\n         try {\n             logger.debug(\"Saving KafkaConfig \" + streamingRequest.getKafkaConfig());\n             desc = JsonUtil.readValue(streamingRequest.getKafkaConfig(), KafkaConfig.class);\n+            updateRequest(streamingRequest, true, null);\n         } catch (JsonParseException e) {\n             logger.error(\"The KafkaConfig definition is invalid.\", e);\n             updateRequest(streamingRequest, false, e.getMessage());",
                "raw_url": "https://github.com/apache/kylin/raw/e53257d1fad0edc43cc625b4e3bc63723e403f4e/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingController.java",
                "sha": "bd396bea51559bc4799bd49911ec2ed04ca58902",
                "status": "modified"
            }
        ],
        "message": "KYLIN-3060 The logical processing of creating or updating streaming table has a bug in server, which will cause a NullPointerException.\n\nSigned-off-by: Li Yang <liyang@apache.org>",
        "parent": "https://github.com/apache/kylin/commit/84779827ad56673848c0e2f6b589a406dac1bce2",
        "patched_files": [
            "StreamingController.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "StreamingControllerTest.java"
        ]
    },
    "kylin_eca8c98": {
        "bug_id": "kylin_eca8c98",
        "commit": "https://github.com/apache/kylin/commit/eca8c98ac4b7401be52b56bb4f54263123541fd4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/kylin/blob/eca8c98ac4b7401be52b56bb4f54263123541fd4/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-common/src/main/java/org/apache/kylin/common/StorageURL.java?ref=eca8c98ac4b7401be52b56bb4f54263123541fd4",
                "deletions": 1,
                "filename": "core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
                "patch": "@@ -94,7 +94,7 @@ public static StorageURL valueOf(String metadataUrl) {\n             }\n         }\n \n-        this.identifier = n.isEmpty() || n==null ? \"kylin_metadata\" : n;\n+        this.identifier = n==null || n.isEmpty() ? \"kylin_metadata\" : n;\n         this.scheme = s;\n         this.params = ImmutableMap.copyOf(m);\n     }",
                "raw_url": "https://github.com/apache/kylin/raw/eca8c98ac4b7401be52b56bb4f54263123541fd4/core-common/src/main/java/org/apache/kylin/common/StorageURL.java",
                "sha": "e8f49023b954ebc661792785ed4a1d58dcd91223",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/eca8c98ac4b7401be52b56bb4f54263123541fd4/core-metadata/src/main/java/org/apache/kylin/metadata/model/PartitionDesc.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/core-metadata/src/main/java/org/apache/kylin/metadata/model/PartitionDesc.java?ref=eca8c98ac4b7401be52b56bb4f54263123541fd4",
                "deletions": 3,
                "filename": "core-metadata/src/main/java/org/apache/kylin/metadata/model/PartitionDesc.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Locale;\n import java.util.function.Function;\n \n+import com.google.common.base.Preconditions;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.kylin.common.util.ClassUtil;\n import org.apache.kylin.common.util.DateFormat;\n@@ -327,9 +328,8 @@ public String buildDateRangeCondition(PartitionDesc partDesc, ISegment seg, Segm\n             long endExclusive = (Long) segRange.end.v;\n \n             TblColRef partitionColumn = partDesc.getPartitionDateColumnRef();\n-            if (partitionColumn != null) {\n-                partitionColumn.setQuotedFunc(func);\n-            }\n+            Preconditions.checkNotNull(partitionColumn);\n+            partitionColumn.setQuotedFunc(func);\n             String tableAlias = partitionColumn.getTableAlias();\n \n             String concatField = String.format(Locale.ROOT, \"CONCAT(%s.YEAR,'-',%s.MONTH,'-',%s.DAY)\", tableAlias,",
                "raw_url": "https://github.com/apache/kylin/raw/eca8c98ac4b7401be52b56bb4f54263123541fd4/core-metadata/src/main/java/org/apache/kylin/metadata/model/PartitionDesc.java",
                "sha": "8715f7da68ab70593c15206299664af025a06333",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/eca8c98ac4b7401be52b56bb4f54263123541fd4/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java?ref=eca8c98ac4b7401be52b56bb4f54263123541fd4",
                "deletions": 1,
                "filename": "engine-mr/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
                "patch": "@@ -19,6 +19,7 @@\n package org.apache.kylin.engine.mr.common;\n \n import java.io.IOException;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -45,7 +46,7 @@\n         } catch (IOException e) {\n             logger.warn(\"Fail to read statistics for cube \" + cubeInstance.getName() + \" due to \" + e);\n         }\n-        return statisticsMerged.isEmpty() ? null : statisticsMerged;\n+        return statisticsMerged == null ? Collections.emptyMap() : statisticsMerged;\n     }\n \n     public static Pair<Map<Long, Long>, Map<Long, Double>> readCuboidStatsAndSizeFromCube(Set<Long> cuboidIds,",
                "raw_url": "https://github.com/apache/kylin/raw/eca8c98ac4b7401be52b56bb4f54263123541fd4/engine-mr/src/main/java/org/apache/kylin/engine/mr/common/CuboidStatsReaderUtil.java",
                "sha": "a5fbe2b75b339fa15155ca99954a7f7e23663bc3",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/kylin/blob/eca8c98ac4b7401be52b56bb4f54263123541fd4/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingV2Controller.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingV2Controller.java?ref=eca8c98ac4b7401be52b56bb4f54263123541fd4",
                "deletions": 0,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/controller/StreamingV2Controller.java",
                "patch": "@@ -81,6 +81,7 @@\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n import com.google.common.collect.Sets;\n+import com.google.common.base.Preconditions;\n \n /**\n  * StreamingController is defined as Restful API entrance for UI.\n@@ -500,6 +501,7 @@ private TableDesc deserializeTableDesc(StreamingRequestV2 streamingRequest) {\n             throw new InternalErrorException(\"Failed to deal with the request:\" + e.getMessage(), e);\n         }\n \n+        Preconditions.checkNotNull(desc, \"Failed to deserialize from TableDesc definition\");\n         String[] dbTable = HadoopUtil.parseHiveTableName(desc.getName());\n         desc.setName(dbTable[1]);\n         desc.setDatabase(dbTable[0]);",
                "raw_url": "https://github.com/apache/kylin/raw/eca8c98ac4b7401be52b56bb4f54263123541fd4/server-base/src/main/java/org/apache/kylin/rest/controller/StreamingV2Controller.java",
                "sha": "45e0cdaa188dec3f0aa99838f17432ab6380a959",
                "status": "modified"
            }
        ],
        "message": "KYLIN-4259 fix potential NPE bug reported by FindBugs (#946)\n\n* fix potential NPE bug reported by FindBugs\r\n\r\n* fix potential NPE bug reported by FindBugs",
        "parent": "https://github.com/apache/kylin/commit/cedc430f7125b89bc17ca9d7b92f6581f33b4e48",
        "patched_files": [
            "StorageURL.java",
            "PartitionDesc.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "StorageURLTest.java",
            "PartitionDescTest.java"
        ]
    },
    "kylin_efd533f": {
        "bug_id": "kylin_efd533f",
        "commit": "https://github.com/apache/kylin/commit/efd533fc4e6f1812f09f39dd0211ba697fb88d1a",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/kylin/blob/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java?ref=efd533fc4e6f1812f09f39dd0211ba697fb88d1a",
                "deletions": 0,
                "filename": "invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java",
                "patch": "@@ -72,6 +72,10 @@ public boolean isMetrics(int col) {\n \t\treturn isMetric[col];\n \t}\n \n+    public boolean[] isMetrics() {\n+        return isMetric;\n+    }\n+\n \tpublic int getColumnCount() {\n \t\treturn nColumns;\n \t}",
                "raw_url": "https://github.com/apache/kylin/raw/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/invertedindex/src/main/java/org/apache/kylin/invertedindex/index/TableRecordInfoDigest.java",
                "sha": "35482d06911aad3bad2a716529b0567672cc5946",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/kylin/blob/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java?ref=efd533fc4e6f1812f09f39dd0211ba697fb88d1a",
                "deletions": 2,
                "filename": "metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
                "patch": "@@ -74,6 +74,9 @@ public String getResourcePathV1() {\n     }\n \n     public String getIdentity() {\n+        if (identity == null) {\n+            identity = String.format(\"%s.%s\", this.getDatabase().toUpperCase(), this.getName()).toUpperCase();\n+        }\n         return identity;\n     }\n \n@@ -157,8 +160,6 @@ public int compare(ColumnDesc col1, ColumnDesc col2) {\n                 col.init(this);\n             }\n         }\n-\n-        this.identity = String.format(\"%s.%s\", this.getDatabase().toUpperCase(), this.getName()).toUpperCase();\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/kylin/raw/efd533fc4e6f1812f09f39dd0211ba697fb88d1a/metadata/src/main/java/org/apache/kylin/metadata/model/TableDesc.java",
                "sha": "95a1d81f3a8cb3e44d43ea6298e42de35c1d3482",
                "status": "modified"
            }
        ],
        "message": "fix NPE",
        "parent": "https://github.com/apache/kylin/commit/dd85db452b0dd05afa0544fb246aac73bc94575c",
        "patched_files": [
            "TableDesc.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "TableDescTest.java"
        ]
    },
    "kylin_fd745c8": {
        "bug_id": "kylin_fd745c8",
        "commit": "https://github.com/apache/kylin/commit/fd745c8804848a60ac96eff1bd9b30bbe38bdafc",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/kylin/blob/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/kylin/contents/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java?ref=fd745c8804848a60ac96eff1bd9b30bbe38bdafc",
                "deletions": 2,
                "filename": "server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "patch": "@@ -536,10 +536,13 @@ private String getServerName() {\n             @Override\n             public boolean apply(AbstractExecutable executable) {\n                 if (executable instanceof CubingJob) {\n-                    if (cubeName == null) {\n+                    if (StringUtils.isEmpty(cubeName)) {\n                         return true;\n                     }\n-                    return CubingExecutableUtil.getCubeName(executable.getParams()).equalsIgnoreCase(cubeName);\n+                    String executableCubeName = CubingExecutableUtil.getCubeName(executable.getParams());\n+                    if (executableCubeName == null)\n+                        return true;\n+                    return executableCubeName.contains(cubeName);\n                 } else {\n                     return false;\n                 }",
                "raw_url": "https://github.com/apache/kylin/raw/fd745c8804848a60ac96eff1bd9b30bbe38bdafc/server-base/src/main/java/org/apache/kylin/rest/service/JobService.java",
                "sha": "4709a919de777f306a3790fcf99c04f763f909aa",
                "status": "modified"
            }
        ],
        "message": "minor, fix NPE when filter Non-Cubing Job",
        "parent": "https://github.com/apache/kylin/commit/73a7c25dfeb28764658af3e73065aa04cc1b92cd",
        "patched_files": [
            "JobService.java"
        ],
        "repo": "kylin",
        "unit_tests": [
            "JobServiceTest.java"
        ]
    }
}