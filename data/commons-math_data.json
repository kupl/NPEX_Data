[{"commit": "https://github.com/apache/commons-math/commit/83c61da2c90548f2ddf48e164e8ab14b388e1d0c", "parent": "https://github.com/apache/commons-math/commit/903f280595099eb6ef4d9d9aabd19dec8511c861", "message": "Document NPE.  JIRA: MATH-1224.", "bug_id": "commons-math_1", "file": [{"additions": 3, "raw_url": "https://github.com/apache/commons-math/raw/83c61da2c90548f2ddf48e164e8ab14b388e1d0c/src/main/java/org/apache/commons/math4/stat/correlation/SpearmansCorrelation.java", "blob_url": "https://github.com/apache/commons-math/blob/83c61da2c90548f2ddf48e164e8ab14b388e1d0c/src/main/java/org/apache/commons/math4/stat/correlation/SpearmansCorrelation.java", "sha": "2593c125a3cec5facd2f54ba93634ebe72e03578", "changes": 3, "status": "modified", "deletions": 0, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math4/stat/correlation/SpearmansCorrelation.java?ref=83c61da2c90548f2ddf48e164e8ab14b388e1d0c", "patch": "@@ -115,6 +115,7 @@ public SpearmansCorrelation(final RealMatrix dataMatrix, final RankingAlgorithm\n      * Calculate the Spearman Rank Correlation Matrix.\n      *\n      * @return Spearman Rank Correlation Matrix\n+     * @throws NullPointerException if this instance was created with no data\n      */\n     public RealMatrix getCorrelationMatrix() {\n         return rankCorrelation.getCorrelationMatrix();\n@@ -130,6 +131,8 @@ public RealMatrix getCorrelationMatrix() {\n      * configured <code>RankingAlgorithm</code> to each of the columns of\n      * <code>matrix.</code>\n      *\n+     * <p>Returns null if this instance was created with no data.</p>\n+     *\n      * @return PearsonsCorrelation among ranked column data\n      */\n     public PearsonsCorrelation getRankCorrelation() {", "filename": "src/main/java/org/apache/commons/math4/stat/correlation/SpearmansCorrelation.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/441687e5a4ac22d7a370cb3e99c6af91138c2746", "parent": "https://github.com/apache/commons-math/commit/c44bfe000cd84d0b48401f8c7107bc37c09ec622", "message": "Document NPE.\n\nJIRA: MATH-1116\nJIRA: MATH-1224", "bug_id": "commons-math_2", "file": [{"additions": 4, "raw_url": "https://github.com/apache/commons-math/raw/441687e5a4ac22d7a370cb3e99c6af91138c2746/src/main/java/org/apache/commons/math4/ode/AbstractIntegrator.java", "blob_url": "https://github.com/apache/commons-math/blob/441687e5a4ac22d7a370cb3e99c6af91138c2746/src/main/java/org/apache/commons/math4/ode/AbstractIntegrator.java", "sha": "e9326d9c658bdd8a107add7924ff102546e34ddd", "changes": 5, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math4/ode/AbstractIntegrator.java?ref=441687e5a4ac22d7a370cb3e99c6af91138c2746", "patch": "@@ -292,9 +292,12 @@ public abstract void integrate(ExpandableStatefulODE equations, double t)\n      * @param yDot placeholder array where to put the time derivative of the state vector\n      * @exception MaxCountExceededException if the number of functions evaluations is exceeded\n      * @exception DimensionMismatchException if arrays dimensions do not match equations settings\n+     * @exception NullPointerException if the ODE equations have not been set (i.e. if this method\n+     * is called outside of a call to {@link #integrate(ExpandableStatefulODE, double)} or {@link\n+     * #integrate(FirstOrderDifferentialEquations, double, double[], double, double[])})\n      */\n     public void computeDerivatives(final double t, final double[] y, final double[] yDot)\n-        throws MaxCountExceededException, DimensionMismatchException {\n+        throws MaxCountExceededException, DimensionMismatchException, NullPointerException {\n         evaluations.incrementCount();\n         expandable.computeDerivatives(t, y, yDot);\n     }", "filename": "src/main/java/org/apache/commons/math4/ode/AbstractIntegrator.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/707c93a25f183f4607cf84807de244c9749afb51", "parent": "https://github.com/apache/commons-math/commit/ee61e5660f3763f03fa77a8d67708d2e1bf0b060", "message": "Suppress NPE warning\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1055902 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_3", "file": [{"additions": 3, "raw_url": "https://github.com/apache/commons-math/raw/707c93a25f183f4607cf84807de244c9749afb51/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java", "blob_url": "https://github.com/apache/commons-math/blob/707c93a25f183f4607cf84807de244c9749afb51/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java", "sha": "63a7c0719c1d639234e895610d50ef57ce4a7b56", "changes": 4, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java?ref=707c93a25f183f4607cf84807de244c9749afb51", "patch": "@@ -144,7 +144,9 @@ public int compare(final RealPointValuePair o1,\n             if (iteration > 0) {\n                 boolean converged = true;\n                 for (int i = 0; i < simplex.getSize(); i++) {\n-                    converged &= checker.converged(iteration, previous[i], simplex.getPoint(i));\n+                    @SuppressWarnings(\"null\") // Cannot be null when iteration > 0\n+                    RealPointValuePair prev = previous[i];\n+                    converged &= checker.converged(iteration, prev, simplex.getPoint(i));\n                 }\n                 if (converged) {\n                     // We have found an optimum.", "filename": "src/main/java/org/apache/commons/math/optimization/direct/SimplexOptimizer.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/448759e46e4b2102d1fded445f5182c6564c418b", "parent": "https://github.com/apache/commons-math/commit/0c7099ab354b91cb9b981419533fead5935f9042", "message": "fixed a forgotten possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/branches/MATH_2_0@712178 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_4", "file": [{"additions": 1, "raw_url": "https://github.com/apache/commons-math/raw/448759e46e4b2102d1fded445f5182c6564c418b/src/java/org/apache/commons/math/MathException.java", "blob_url": "https://github.com/apache/commons-math/blob/448759e46e4b2102d1fded445f5182c6564c418b/src/java/org/apache/commons/math/MathException.java", "sha": "143e9a067f0c07bde9cebdf9f15690b10473c520", "changes": 2, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/java/org/apache/commons/math/MathException.java?ref=448759e46e4b2102d1fded445f5182c6564c418b", "patch": "@@ -99,7 +99,7 @@ private static String buildMessage(String pattern, Object[] arguments, Locale lo\n     public MathException() {\n         super();\n         this.pattern   = null;\n-        this.arguments = null;\n+        this.arguments = new Object[0];\n     }\n     \n     /**", "filename": "src/java/org/apache/commons/math/MathException.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/f5a510d4f03477f02c6bf2fb7383a324a69dccb7", "parent": "https://github.com/apache/commons-math/commit/cbb93d0d7714b258e14e47a783e2ab48853eb631", "message": "Reordered checks in test() method to avoid NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/math/trunk@141175 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_5", "file": [{"additions": 10, "raw_url": "https://github.com/apache/commons-math/raw/f5a510d4f03477f02c6bf2fb7383a324a69dccb7/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java", "blob_url": "https://github.com/apache/commons-math/blob/f5a510d4f03477f02c6bf2fb7383a324a69dccb7/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java", "sha": "a9b79322dfb995acd65a2e920adc955e9695c5c2", "changes": 16, "status": "modified", "deletions": 6, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java?ref=f5a510d4f03477f02c6bf2fb7383a324a69dccb7", "patch": "@@ -19,7 +19,7 @@\n  * Abstract Implementation for UnivariateStatistics.\n  * Provides the ability to extend polymophically so that\n  * indiviual statistics do not need to implement these methods.\n- * @version $Revision: 1.14 $ $Date: 2004/04/11 19:39:10 $\n+ * @version $Revision: 1.15 $ $Date: 2004/04/12 05:22:11 $\n  */\n public abstract class AbstractUnivariateStatistic\n     implements UnivariateStatistic {\n@@ -48,7 +48,7 @@ public abstract double evaluate(\n      * @param values Is a double[] containing the values\n      * @param begin processing at this point in the array\n      * @param length the number of elements to include\n-     * @return true if the array has postive length\n+     * @return true if the parameters are valid and designate a subarray of positive length\n      * @throws IllegalArgumentException if the indices are invalid or the array is null\n      */\n     protected boolean test(\n@@ -59,16 +59,20 @@ protected boolean test(\n         if (begin < 0) {\n             throw new IllegalArgumentException(\"start position cannot be negative\");\n         }\n+        \n+        if (length < 0) {\n+            throw new IllegalArgumentException(\"length cannot be negative\");\n+        }\n+        \n+        if (values == null) {\n+            throw new IllegalArgumentException(\"input value array is null\");\n+        }\n \n         if (begin + length > values.length) {\n             throw new IllegalArgumentException(\n                 \"begin + length > values.length\");\n         }\n \n-        if (values == null) {\n-            throw new IllegalArgumentException(\"input value array is null\");\n-        }\n-\n         if (length == 0) {\n             return false;\n         }", "filename": "src/java/org/apache/commons/math/stat/univariate/AbstractUnivariateStatistic.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/7774fb6ffb0290c4d5f4910309200f681624eee9", "parent": "https://github.com/apache/commons-math/commit/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1", "message": "Use asserNotNull(var) instead of if (var != null) and avoid subsequent NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200365 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_6", "file": [{"additions": 8, "raw_url": "https://github.com/apache/commons-math/raw/7774fb6ffb0290c4d5f4910309200f681624eee9/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java", "blob_url": "https://github.com/apache/commons-math/blob/7774fb6ffb0290c4d5f4910309200f681624eee9/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java", "sha": "7c9bcafc2994f582853adc71c21c3ba51ac61b3d", "changes": 26, "status": "modified", "deletions": 18, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java?ref=7774fb6ffb0290c4d5f4910309200f681624eee9", "patch": "@@ -16,6 +16,8 @@\n  */\n package org.apache.commons.math.stat.regression;\n \n+import junit.framework.Assert;\n+\n import org.apache.commons.math.linear.RealMatrix;\n import org.apache.commons.math.stat.correlation.PearsonsCorrelation;\n import org.apache.commons.math.TestUtils;\n@@ -178,9 +180,7 @@ public void testRegressAirlineConstantExternal() {\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n@@ -212,9 +212,7 @@ public void testRegressAirlineConstantInternal() {\n         instance.addObservations(x, y);\n         try {\n             RegressionResults result = instance.regress();\n-            if (result == null) {\n-                fail(\"The test case is a prototype.\");\n-            }\n+            Assert.assertNotNull(\"The test case is a prototype.\", result);\n             TestUtils.assertEquals(\n                     new double[]{9.5169, 0.8827, 0.4540, -1.6275},\n                     result.getParameterEstimates(), 1e-4);\n@@ -783,15 +781,11 @@ public void testOneRedundantColumn() {\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();\n@@ -849,15 +843,11 @@ public void testThreeRedundantColumn() {\n \n         instance.addObservations(x, y);\n         RegressionResults result = instance.regress();\n-        if (result == null) {\n-            fail(\"Could not estimate initial regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate initial regression\", result);\n \n         instance2.addObservations(x2, y);\n         RegressionResults resultRedundant = instance2.regress();\n-        if (resultRedundant == null) {\n-            fail(\"Could not estimate redundant regression\");\n-        }\n+        Assert.assertNotNull(\"Could not estimate redundant regression\", resultRedundant);\n         double[] beta = result.getParameterEstimates();\n         double[] betar = resultRedundant.getParameterEstimates();\n         double[] se = result.getStdErrorOfEstimates();", "filename": "src/test/java/org/apache/commons/math/stat/regression/MillerUpdatingRegressionTest.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1", "parent": "https://github.com/apache/commons-math/commit/416084f96449417cb4e5c4bc6ec0679a50a2af00", "message": "Use asserNotNull(var) instead of assertTrue(var != null) and avoid subsequent NPE warnings\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1200359 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_7", "file": [{"additions": 3, "raw_url": "https://github.com/apache/commons-math/raw/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java", "blob_url": "https://github.com/apache/commons-math/blob/f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java", "sha": "c94b0ebacfb2efb2519f9fab805d809e262b97ad", "changes": 6, "status": "modified", "deletions": 3, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java?ref=f2c22d1d36466b962dcf7da98b7a8a4d9a4c1ef1", "patch": "@@ -122,7 +122,7 @@ public void testRegressIfaceMethod(){\n \n         //should not be null\n         final RegressionResults fullReg = iface.regress( );\n-        Assert.assertTrue(fullReg != null);\n+        Assert.assertNotNull(fullReg);\n         Assert.assertEquals(\"intercept\", regression.getIntercept(), fullReg.getParameterEstimate(0), 1.0e-16);\n         Assert.assertEquals(\"intercept std err\",regression.getInterceptStdErr(), fullReg.getStdErrorOfEstimate(0),1.0E-16);\n         Assert.assertEquals(\"slope\", regression.getSlope(), fullReg.getParameterEstimate(1), 1.0e-16);\n@@ -135,7 +135,7 @@ public void testRegressIfaceMethod(){\n \n \n         final RegressionResults noInt   = iface.regress( new int[]{1} );\n-        Assert.assertTrue(noInt != null);\n+        Assert.assertNotNull(noInt);\n         Assert.assertEquals(\"slope\", regressionNoint.getSlope(), noInt.getParameterEstimate(0), 1.0e-12);\n         Assert.assertEquals(\"slope std err\",regressionNoint.getSlopeStdErr(), noInt.getStdErrorOfEstimate(0),1.0E-16);\n         Assert.assertEquals(\"number of observations\",regressionNoint.getN(), noInt.getN());\n@@ -145,7 +145,7 @@ public void testRegressIfaceMethod(){\n         Assert.assertEquals(\"SSE\", regressionNoint.getSumSquaredErrors(), noInt.getErrorSumSquares() ,1.0E-16);\n \n         final RegressionResults onlyInt = iface.regress( new int[]{0} );\n-        Assert.assertTrue( onlyInt != null );\n+        Assert.assertNotNull(onlyInt);\n         Assert.assertEquals(\"slope\", regressionIntOnly.getSlope(), onlyInt.getParameterEstimate(0), 1.0e-12);\n         Assert.assertEquals(\"slope std err\",regressionIntOnly.getSlopeStdErr(), onlyInt.getStdErrorOfEstimate(0),1.0E-12);\n         Assert.assertEquals(\"number of observations\",regressionIntOnly.getN(), onlyInt.getN());", "filename": "src/test/java/org/apache/commons/math/stat/regression/SimpleRegressionTest.java"}], "repo": "commons-math"}, {"commit": "https://github.com/apache/commons-math/commit/e79fcea6cfa46ae58d80e38bd56bfba87080e17d", "parent": "https://github.com/apache/commons-math/commit/7dabaab1130b8ca475f7e1e5ab8fa5f155081004", "message": "Report missing resource rather than failing with NPE if not fount\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/math/trunk@1164986 13f79535-47bb-0310-9956-ffa450edef68", "bug_id": "commons-math_8", "file": [{"additions": 5, "raw_url": "https://github.com/apache/commons-math/raw/e79fcea6cfa46ae58d80e38bd56bfba87080e17d/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java", "blob_url": "https://github.com/apache/commons-math/blob/e79fcea6cfa46ae58d80e38bd56bfba87080e17d/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java", "sha": "6991c9030e30b1a6e7e860f0548422a122bfaa9b", "changes": 6, "status": "modified", "deletions": 1, "contents_url": "https://api.github.com/repos/apache/commons-math/contents/src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java?ref=e79fcea6cfa46ae58d80e38bd56bfba87080e17d", "patch": "@@ -17,6 +17,7 @@\n package org.apache.commons.math.stat;\n \n import java.io.BufferedReader;\n+import java.io.InputStream;\n import java.io.InputStreamReader;\n \n \n@@ -112,10 +113,12 @@ private void loadStats(String resource, Object u) throws Exception {\n         mean = Double.NaN;\n         std = Double.NaN;\n \n+        InputStream resourceAsStream = CertifiedDataTest.class.getResourceAsStream(resource);\n+        Assert.assertNotNull(\"Could not find resource \"+resource,resourceAsStream);\n         BufferedReader in =\n             new BufferedReader(\n                     new InputStreamReader(\n-                            CertifiedDataTest.class.getResourceAsStream(resource)));\n+                            resourceAsStream));\n \n         String line = null;\n \n@@ -144,6 +147,7 @@ private void loadStats(String resource, Object u) throws Exception {\n             line = in.readLine();\n         }\n \n+        resourceAsStream.close();\n         in.close();\n     }\n }", "filename": "src/test/java/org/apache/commons/math/stat/CertifiedDataTest.java"}], "repo": "commons-math"}]
