{
    "commons-dbcp_006d056": {
        "bug_id": "commons-dbcp_006d056",
        "commit": "https://github.com/apache/commons-dbcp/commit/006d0566af0726b8ca5bdb07e28c4065b95238b6",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=006d0566af0726b8ca5bdb07e28c4065b95238b6",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -46,6 +46,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action issue=\"DBCP-154\" dev=\"markt\" type=\"fix\">\n         Log validation failures of poolable connections.\n       </action>\n+      <action issue=\"DBCP-403\" dev=\"sebb\" type=\"fix\">\n+        DelegatingStatement.close() fails with NPE if statement is null\n+      </action>\n       <action issue=\"DBCP-322\" dev=\"sebb\" type=\"fix\">\n         CPDSConnectionFactory.validateObject(Object) ignores Throwable.\n       </action>",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/changes/changes.xml",
                "sha": "0a9ae99d6533f53982009c21c8c26e67b3aa2a3e",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp2/DelegatingStatement.java?ref=006d0566af0726b8ca5bdb07e28c4065b95238b6",
                "deletions": 1,
                "filename": "src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "patch": "@@ -175,7 +175,9 @@ public void close() throws SQLException {\n                     clearTrace();\n                 }\n         \n-                _stmt.close();\n+                if (_stmt != null) {\n+                \t_stmt.close();\n+                }\n             }\n             catch (SQLException e) {\n                 handleException(e);",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/006d0566af0726b8ca5bdb07e28c4065b95238b6/src/java/org/apache/commons/dbcp2/DelegatingStatement.java",
                "sha": "540766fb1a7dfe345c234918514e025309ce84da",
                "status": "modified"
            }
        ],
        "message": "DBCP-403 DelegatingStatement.close() fails with NPE if statement is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1537577 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/615abdb3e4f570275d1839d7649dcfd94e7d11ed",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestDelegatingStatement.java"
        ]
    },
    "commons-dbcp_0239005": {
        "bug_id": "commons-dbcp_0239005",
        "commit": "https://github.com/apache/commons-dbcp/commit/0239005e0df182c84da0892b1a5916b73b941a97",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0239005e0df182c84da0892b1a5916b73b941a97/src/java/org/apache/commons/dbcp/PoolingDriver.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/PoolingDriver.java?ref=0239005e0df182c84da0892b1a5916b73b941a97",
                "deletions": 2,
                "filename": "src/java/org/apache/commons/dbcp/PoolingDriver.java",
                "patch": "@@ -251,7 +251,7 @@ public boolean jdbcCompliant() {\n      * PoolGuardConnectionWrapper is a Connection wrapper that makes sure a \n      * closed connection cannot be used anymore.\n      */\n-    private class PoolGuardConnectionWrapper extends DelegatingConnection {\n+    static private class PoolGuardConnectionWrapper extends DelegatingConnection {\n \n         private ObjectPool pool;\n         private Connection delegate;\n@@ -409,7 +409,7 @@ public void setTypeMap(Map map) throws SQLException {\n \n         public String toString() {\n             if (delegate == null){\n-                return null;\n+                return \"NULL\";\n             }\n             return delegate.toString();\n         }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0239005e0df182c84da0892b1a5916b73b941a97/src/java/org/apache/commons/dbcp/PoolingDriver.java",
                "sha": "d95308786313e5567b5731164dac26c0030d6cce",
                "status": "modified"
            }
        ],
        "message": "Made PoolGuardConnectionWrapper static, eliminated possible NPE in toString.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@832634 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/e70c929c68bab40151f951db766b4ab5bd9474c8",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestPoolingDriver.java"
        ]
    },
    "commons-dbcp_0f30edc": {
        "bug_id": "commons-dbcp_0f30edc",
        "commit": "https://github.com/apache/commons-dbcp/commit/0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/changes/changes.xml",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -60,6 +60,12 @@ The <action> type attribute can be add,update,fix,remove.\n      -->\n \n   <body>\n+    <release version=\"2.7.1\" date=\"2019-MM-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">\n+      <!-- fix -->\n+      <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-555\" due-to=\"Gary Gregory\">\n+        NPE when creating a SQLExceptionList with a null list.\n+      </action>\n+    </release>\n     <release version=\"2.7.0\" date=\"2019-07-31\" description=\"This is a minor release, including bug fixes and enhancements.\">\n       <!-- add -->\n       <action dev=\"jleroux\" type=\"add\" issue=\"DBCP-539\" due-to=\"Jacques Le Roux\">",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/changes/changes.xml",
                "sha": "276ce01cb80535af7196b8089a35009c79b14146",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "deletions": 2,
                "filename": "src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "patch": "@@ -40,13 +40,14 @@\n      * @param causeList a list of cause exceptions.\n      */\n     public SQLExceptionList(List<? extends Throwable> causeList) {\n-        super(String.format(\"%,d exceptions: %s\", causeList.size(), causeList), causeList.get(0));\n+        super(String.format(\"%,d exceptions: %s\", causeList == null ? 0 : causeList.size(), causeList),\n+                causeList == null ? null : causeList.get(0));\n         this.causeList = causeList;\n     }\n \n     /**\n      * Gets the cause list.\n-     * \n+     *\n      * @return The list of causes.\n      */\n     public List<? extends Throwable> getCauseList() {",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/main/java/org/apache/commons/dbcp2/SQLExceptionList.java",
                "sha": "e90360847df119aefc84b5ab222985cccb1ad9cf",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java?ref=0f30edc467a2ba03e7f2786e1088df624e0c3cf0",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "patch": "@@ -35,4 +35,11 @@ public void testCause() {\n         Assertions.assertEquals(list, sqlExceptionList.getCauseList());\n         sqlExceptionList.printStackTrace();\n     }\n+\n+    @Test\n+    public void testNullCause() {\n+        final SQLExceptionList sqlExceptionList = new SQLExceptionList(null);\n+        Assertions.assertNull(sqlExceptionList.getCause());\n+        Assertions.assertNull(sqlExceptionList.getCauseList());\n+    }\n }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/0f30edc467a2ba03e7f2786e1088df624e0c3cf0/src/test/java/org/apache/commons/dbcp2/TestSQLExceptionList.java",
                "sha": "9a5607b83ba7c6f69a9e66f73d4aee4a9d675625",
                "status": "modified"
            }
        ],
        "message": "[DBCP-555] NPE when creating a SQLExceptionList with a null list.",
        "parent": "https://github.com/apache/commons-dbcp/commit/459b4b84b92cb20499b091a6dd70e795c66eb674",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestSQLExceptionList.java"
        ]
    },
    "commons-dbcp_2694fb1": {
        "bug_id": "commons-dbcp_2694fb1",
        "commit": "https://github.com/apache/commons-dbcp/commit/2694fb14963779a9fa602431f575cbf1f45d1bd7",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/PoolableConnectionFactory.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/PoolableConnectionFactory.java?ref=2694fb14963779a9fa602431f575cbf1f45d1bd7",
                "deletions": 21,
                "filename": "src/java/org/apache/commons/dbcp/PoolableConnectionFactory.java",
                "patch": "@@ -1,12 +1,12 @@\n /*\n- * Copyright 1999-2004 The Apache Software Foundation.\n- * \n+ * Copyright 1999-2006 The Apache Software Foundation.\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -92,7 +92,7 @@ public PoolableConnectionFactory(\n         boolean defaultReadOnly,\n         boolean defaultAutoCommit,\n         AbandonedConfig config) {\n-            \n+\n         _connFactory = connFactory;\n         _pool = pool;\n         _config = config;\n@@ -124,7 +124,7 @@ public PoolableConnectionFactory(\n         boolean defaultAutoCommit,\n         int defaultTransactionIsolation,\n         AbandonedConfig config) {\n-            \n+\n         _connFactory = connFactory;\n         _pool = pool;\n         _config = config;\n@@ -159,7 +159,7 @@ public PoolableConnectionFactory(\n         int defaultTransactionIsolation,\n         String defaultCatalog,\n         AbandonedConfig config) {\n-            \n+\n         _connFactory = connFactory;\n         _pool = pool;\n         _config = config;\n@@ -194,7 +194,7 @@ public PoolableConnectionFactory(\n         int defaultTransactionIsolation,\n         String defaultCatalog,\n         AbandonedConfig config) {\n-            \n+\n         _connFactory = connFactory;\n         _pool = pool;\n         _config = config;\n@@ -285,7 +285,7 @@ public void setDefaultTransactionIsolation(int defaultTransactionIsolation) {\n     public void setDefaultCatalog(String defaultCatalog) {\n         _defaultCatalog = defaultCatalog;\n     }\n-    \n+\n     synchronized public Object makeObject() throws Exception {\n         Connection conn = _connFactory.createConnection();\n         if(null != _stmtPoolFactory) {\n@@ -309,7 +309,7 @@ public boolean validateObject(Object obj) {\n                 return true;\n             } catch(Exception e) {\n                 return false;\n-            }           \n+            }\n         } else {\n             return false;\n         }\n@@ -330,17 +330,20 @@ public void validateConnection(Connection conn) throws SQLException {\n                     throw new SQLException(\"validationQuery didn't return a row\");\n                 }\n             } finally {\n-                try {\n-                    rset.close();\n-                } catch(Exception t) {\n-                    // ignored\n+                if (rset != null) {\n+                    try {\n+                        rset.close();\n+                    } catch(Exception t) {\n+                        // ignored\n+                    }\n                 }\n-                try {\n-                    stmt.close();\n-                } catch(Exception t) {\n-                    // ignored\n+                if (stmt != null) {\n+                    try {\n+                        stmt.close();\n+                    } catch(Exception t) {\n+                        // ignored\n+                    }\n                 }\n-\n             }\n         }\n     }\n@@ -386,14 +389,14 @@ public void activateObject(Object obj) throws Exception {\n     protected boolean _defaultAutoCommit = true;\n     protected int _defaultTransactionIsolation = UNKNOWN_TRANSACTIONISOLATION;\n     protected String _defaultCatalog;\n-    \n+\n     /**\n      * @deprecated AbandonedConfig is now deprecated.\n      */\n     protected AbandonedConfig _config = null;\n \n     /**\n-     * Internal constant to indicate the level is not set. \n+     * Internal constant to indicate the level is not set.\n      */\n \tstatic final int UNKNOWN_TRANSACTIONISOLATION = -1;\n }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/PoolableConnectionFactory.java",
                "sha": "aaded3f788b18e78beef6c05a3e817c5faf824fc",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java",
                "changes": 84,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java?ref=2694fb14963779a9fa602431f575cbf1f45d1bd7",
                "deletions": 39,
                "filename": "src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java",
                "patch": "@@ -1,12 +1,12 @@\n /*\n- * Copyright 1999-2004 The Apache Software Foundation.\n- * \n+ * Copyright 1999-2006 The Apache Software Foundation.\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -40,11 +40,11 @@\n  * @author John D. McNally\n  * @version $Revision$ $Date$\n  */\n-class CPDSConnectionFactory \n+class CPDSConnectionFactory\n         implements PoolableObjectFactory, ConnectionEventListener {\n \n-    private static final String NO_KEY_MESSAGE \n-            = \"close() was called on a Connection, but \" \n+    private static final String NO_KEY_MESSAGE\n+            = \"close() was called on a Connection, but \"\n             + \"I have no record of the underlying PooledConnection.\";\n \n     protected ConnectionPoolDataSource _cpds = null;\n@@ -57,18 +57,18 @@\n \n     /**\n      * Create a new <tt>PoolableConnectionFactory</tt>.\n-     * @param cpds the ConnectionPoolDataSource from which to obtain \n+     * @param cpds the ConnectionPoolDataSource from which to obtain\n      *        PooledConnection's\n-     * @param pool the {*link ObjectPool} in which to pool those \n+     * @param pool the {*link ObjectPool} in which to pool those\n      *        {*link Connection}s\n      * @param validationQuery a query to use to {*link #validateObject validate}\n-     *        {*link Connection}s. Should return at least one row. \n+     *        {*link Connection}s. Should return at least one row.\n      *        May be <tt>null</tt>\n-     * @param username \n+     * @param username\n      * @param password\n      */\n-    public CPDSConnectionFactory(ConnectionPoolDataSource cpds, \n-                                 ObjectPool pool, \n+    public CPDSConnectionFactory(ConnectionPoolDataSource cpds,\n+                                 ObjectPool pool,\n                                  String validationQuery,\n                                  String username,\n                                  String password) {\n@@ -81,21 +81,21 @@ public CPDSConnectionFactory(ConnectionPoolDataSource cpds,\n     }\n \n     /**\n-     * Sets the {*link ConnectionFactory} from which to obtain base \n+     * Sets the {*link ConnectionFactory} from which to obtain base\n      * {*link Connection}s.\n-     * @param connFactory the {*link ConnectionFactory} from which to obtain \n+     * @param connFactory the {*link ConnectionFactory} from which to obtain\n      *        base {*link Connection}s\n      */\n     public synchronized void setCPDS(ConnectionPoolDataSource cpds) {\n         _cpds = cpds;\n     }\n \n     /**\n-     * Sets the query I use to {*link #validateObject validate} \n+     * Sets the query I use to {*link #validateObject validate}\n      * {*link Connection}s.\n      * Should return at least one row.\n      * May be <tt>null</tt>\n-     * @param validationQuery a query to use to {*link #validateObject validate} \n+     * @param validationQuery a query to use to {*link #validateObject validate}\n      *        {*link Connection}s.\n      */\n     public synchronized void setValidationQuery(String validationQuery) {\n@@ -104,7 +104,7 @@ public synchronized void setValidationQuery(String validationQuery) {\n \n     /**\n      * Sets the {*link ObjectPool} in which to pool {*link Connection}s.\n-     * @param pool the {*link ObjectPool} in which to pool those \n+     * @param pool the {*link ObjectPool} in which to pool those\n      *        {*link Connection}s\n      */\n     public synchronized void setPool(ObjectPool pool) throws SQLException {\n@@ -153,17 +153,17 @@ public void destroyObject(Object obj) throws Exception {\n     public boolean validateObject(Object obj) {\n         boolean valid = false;\n         if (obj instanceof PooledConnectionAndInfo) {\n-            PooledConnection pconn = \n+            PooledConnection pconn =\n                 ((PooledConnectionAndInfo) obj).getPooledConnection();\n             String query = _validationQuery;\n             if (null != query) {\n                 Connection conn = null;\n                 Statement stmt = null;\n                 ResultSet rset = null;\n                 // logical Connection from the PooledConnection must be closed\n-                // before another one can be requested and closing it will \n+                // before another one can be requested and closing it will\n                 // generate an event. Keep track so we know not to return\n-                // the PooledConnection \n+                // the PooledConnection\n                 validatingMap.put(pconn, null);\n                 try {\n                     conn = pconn.getConnection();\n@@ -177,20 +177,26 @@ public boolean validateObject(Object obj) {\n                 } catch (Exception e) {\n                     valid = false;\n                 } finally {\n-                    try {\n-                        rset.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (rset != null) {\n+                        try {\n+                            rset.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n-                    try {\n-                        stmt.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (stmt != null) {\n+                        try {\n+                            stmt.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n-                    try {\n-                        conn.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (conn != null) {\n+                        try {\n+                            conn.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n                     validatingMap.remove(pconn);\n                 }\n@@ -227,17 +233,17 @@ public void connectionClosed(ConnectionEvent event) {\n             Object info = pcMap.get(pc);\n             if (info == null) {\n                 throw new IllegalStateException(NO_KEY_MESSAGE);\n-            }            \n+            }\n \n             try {\n                 _pool.returnObject(info);\n             } catch (Exception e) {\n-                System.err.println(\"CLOSING DOWN CONNECTION AS IT COULD \" \n+                System.err.println(\"CLOSING DOWN CONNECTION AS IT COULD \"\n                         + \"NOT BE RETURNED TO THE POOL\");\n                 try {\n                     destroyObject(info);\n                 } catch (Exception e2) {\n-                    System.err.println(\"EXCEPTION WHILE DESTROYING OBJECT \" \n+                    System.err.println(\"EXCEPTION WHILE DESTROYING OBJECT \"\n                             + info);\n                     e2.printStackTrace();\n                 }\n@@ -254,10 +260,10 @@ public void connectionErrorOccurred(ConnectionEvent event) {\n         try {\n             if (null != event.getSQLException()) {\n                 System.err.println(\n-                        \"CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (\" \n+                        \"CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (\"\n                         + event.getSQLException() + \")\");\n             }\n-            //remove this from the listener list because we are no more \n+            //remove this from the listener list because we are no more\n             //interested in errors since we are about to close this connection\n             pc.removeConnectionEventListener(this);\n         } catch (Exception ignore) {\n@@ -267,7 +273,7 @@ public void connectionErrorOccurred(ConnectionEvent event) {\n         Object info = pcMap.get(pc);\n         if (info == null) {\n             throw new IllegalStateException(NO_KEY_MESSAGE);\n-        }            \n+        }\n         try {\n             destroyObject(info);\n         } catch (Exception e) {",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/CPDSConnectionFactory.java",
                "sha": "944b17cc3dbb1cc95143ae4be18854c72cd5e2e9",
                "status": "modified"
            },
            {
                "additions": 41,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/InstanceKeyObjectFactory.java",
                "changes": 80,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/datasources/InstanceKeyObjectFactory.java?ref=2694fb14963779a9fa602431f575cbf1f45d1bd7",
                "deletions": 39,
                "filename": "src/java/org/apache/commons/dbcp/datasources/InstanceKeyObjectFactory.java",
                "patch": "@@ -1,12 +1,12 @@\n /*\n- * Copyright 1999-2004 The Apache Software Foundation.\n- * \n+ * Copyright 1999-2006 The Apache Software Foundation.\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -35,7 +35,7 @@\n /**\n  * A JNDI ObjectFactory which creates <code>SharedPoolDataSource</code>s\n  * or <code>PerUserPoolDataSource</code>s\n- * \n+ *\n  * @version $Revision$ $Date$\n  */\n abstract class InstanceKeyObjectFactory\n@@ -48,7 +48,7 @@ synchronized static String registerNewInstance(InstanceKeyDataSource ds) {\n         Iterator i = instanceMap.keySet().iterator();\n         while (i.hasNext()) {\n             Object obj = i.next();\n-            if (obj instanceof String) \n+            if (obj instanceof String)\n             {\n                 try {\n                     max = Math.max(max, Integer.valueOf((String)obj).intValue());\n@@ -64,7 +64,7 @@ synchronized static String registerNewInstance(InstanceKeyDataSource ds) {\n         instanceMap.put(instanceKey, ds);\n         return instanceKey;\n     }\n-    \n+\n     static void removeInstance(String key)\n     {\n         instanceMap.remove(key);\n@@ -77,7 +77,7 @@ public static void closeAll() throws Exception {\n         //Get iterator to loop over all instances of this datasource.\n         Iterator instanceIterator = instanceMap.entrySet().iterator();\n         while (instanceIterator.hasNext()) {\n-            ((InstanceKeyDataSource) \n+            ((InstanceKeyDataSource)\n                 ((Map.Entry) instanceIterator.next()).getValue()).close();\n         }\n         instanceMap.clear();\n@@ -87,123 +87,123 @@ public static void closeAll() throws Exception {\n     /**\n      * implements ObjectFactory to create an instance of SharedPoolDataSource\n      * or PerUserPoolDataSource\n-     */ \n-    public Object getObjectInstance(Object refObj, Name name, \n+     */\n+    public Object getObjectInstance(Object refObj, Name name,\n                                     Context context, Hashtable env)\n         throws IOException, ClassNotFoundException {\n-        // The spec says to return null if we can't create an instance \n+        // The spec says to return null if we can't create an instance\n         // of the reference\n         Object obj = null;\n         if (refObj instanceof Reference) {\n             Reference ref = (Reference) refObj;\n-            if (isCorrectClass(ref.getClassName())) { \n+            if (isCorrectClass(ref.getClassName())) {\n                 RefAddr ra = ref.get(\"instanceKey\");\n                 if (ra != null && ra.getContent() != null) {\n                     // object was bound to jndi via Referenceable api.\n                     obj = instanceMap.get(ra.getContent());\n                 }\n-                else \n+                else\n                 {\n-                    // tomcat jndi creates a Reference out of server.xml \n+                    // tomcat jndi creates a Reference out of server.xml\n                     // <ResourceParam> configuration and passes it to an\n                     // instance of the factory given in server.xml.\n                     String key = null;\n-                    if (name != null) \n+                    if (name != null)\n                     {\n                         key = name.toString();\n-                        obj = instanceMap.get(key); \n-                    }                    \n+                        obj = instanceMap.get(key);\n+                    }\n                     if (obj == null)\n                     {\n                         InstanceKeyDataSource ds = getNewInstance(ref);\n                         setCommonProperties(ref, ds);\n                         obj = ds;\n-                        if (key != null) \n+                        if (key != null)\n                         {\n                             instanceMap.put(key, ds);\n-                        }                        \n+                        }\n                     }\n                 }\n             }\n         }\n         return obj;\n     }\n \n-    private void setCommonProperties(Reference ref, \n-                                     InstanceKeyDataSource ikds) \n+    private void setCommonProperties(Reference ref,\n+                                     InstanceKeyDataSource ikds)\n         throws IOException, ClassNotFoundException {\n-                    \n+\n         RefAddr ra = ref.get(\"dataSourceName\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setDataSourceName(ra.getContent().toString());\n         }\n-                    \n+\n         ra = ref.get(\"defaultAutoCommit\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setDefaultAutoCommit(Boolean.valueOf(\n                 ra.getContent().toString()).booleanValue());\n         }\n-        \n+\n         ra = ref.get(\"defaultReadOnly\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setDefaultReadOnly(Boolean.valueOf(\n                 ra.getContent().toString()).booleanValue());\n         }\n-        \n+\n         ra = ref.get(\"description\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setDescription(ra.getContent().toString());\n         }\n-        \n+\n         ra = ref.get(\"jndiEnvironment\");\n         if (ra != null  && ra.getContent() != null) {\n             byte[] serialized = (byte[]) ra.getContent();\n-            ikds.jndiEnvironment = \n+            ikds.jndiEnvironment =\n                 (Properties) deserialize(serialized);\n         }\n-        \n+\n         ra = ref.get(\"loginTimeout\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setLoginTimeout(\n                 Integer.parseInt(ra.getContent().toString()));\n         }\n-        \n+\n         ra = ref.get(\"testOnBorrow\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setTestOnBorrow(\n                 Boolean.getBoolean(ra.getContent().toString()));\n         }\n-        \n+\n         ra = ref.get(\"testOnReturn\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setTestOnReturn(Boolean.valueOf(\n                 ra.getContent().toString()).booleanValue());\n         }\n-        \n+\n         ra = ref.get(\"timeBetweenEvictionRunsMillis\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setTimeBetweenEvictionRunsMillis(\n                 Integer.parseInt(ra.getContent().toString()));\n         }\n-        \n+\n         ra = ref.get(\"numTestsPerEvictionRun\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setNumTestsPerEvictionRun(\n                 Integer.parseInt(ra.getContent().toString()));\n         }\n-        \n+\n         ra = ref.get(\"minEvictableIdleTimeMillis\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setMinEvictableIdleTimeMillis(\n                 Integer.parseInt(ra.getContent().toString()));\n         }\n-        \n+\n         ra = ref.get(\"testWhileIdle\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setTestWhileIdle(Boolean.valueOf(\n                 ra.getContent().toString()).booleanValue());\n         }\n-                \n+\n         ra = ref.get(\"validationQuery\");\n         if (ra != null && ra.getContent() != null) {\n             ikds.setValidationQuery(ra.getContent().toString());\n@@ -227,16 +227,18 @@ protected abstract InstanceKeyDataSource getNewInstance(Reference ref)\n     /**\n      * used to set some properties saved within a Reference\n      */\n-    protected static final Object deserialize(byte[] data) \n+    protected static final Object deserialize(byte[] data)\n         throws IOException, ClassNotFoundException {\n         ObjectInputStream in = null;\n         try {\n             in = new ObjectInputStream(new ByteArrayInputStream(data));\n             return in.readObject();\n         } finally {\n-            try { \n-                in.close(); \n-            } catch (IOException ex) {\n+            if (in != null) {\n+                try {\n+                    in.close();\n+                } catch (IOException ex) {\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/InstanceKeyObjectFactory.java",
                "sha": "67528226bfe9a0078ee59c8a37fba4705c5810aa",
                "status": "modified"
            },
            {
                "additions": 38,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java",
                "changes": 70,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java?ref=2694fb14963779a9fa602431f575cbf1f45d1bd7",
                "deletions": 32,
                "filename": "src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java",
                "patch": "@@ -1,12 +1,12 @@\n /*\n- * Copyright 1999-2004 The Apache Software Foundation.\n- * \n+ * Copyright 1999-2006 The Apache Software Foundation.\n+ *\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n  * You may obtain a copy of the License at\n- * \n+ *\n  *      http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  * Unless required by applicable law or agreed to in writing, software\n  * distributed under the License is distributed on an \"AS IS\" BASIS,\n  * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -40,11 +40,11 @@\n  * @author John D. McNally\n  * @version $Revision$ $Date$\n  */\n-class KeyedCPDSConnectionFactory \n+class KeyedCPDSConnectionFactory\n     implements KeyedPoolableObjectFactory, ConnectionEventListener {\n \n-    private static final String NO_KEY_MESSAGE \n-            = \"close() was called on a Connection, but \" \n+    private static final String NO_KEY_MESSAGE\n+            = \"close() was called on a Connection, but \"\n             + \"I have no record of the underlying PooledConnection.\";\n \n     protected ConnectionPoolDataSource _cpds = null;\n@@ -59,8 +59,8 @@\n      * @param pool the {*link ObjectPool} in which to pool those {*link Connection}s\n      * @param validationQuery a query to use to {*link #validateObject validate} {*link Connection}s.  Should return at least one row. May be <tt>null</tt>\n      */\n-    public KeyedCPDSConnectionFactory(ConnectionPoolDataSource cpds, \n-                                      KeyedObjectPool pool, \n+    public KeyedCPDSConnectionFactory(ConnectionPoolDataSource cpds,\n+                                      KeyedObjectPool pool,\n                                       String validationQuery) {\n         _cpds = cpds;\n         _pool = pool;\n@@ -90,7 +90,7 @@ synchronized public void setValidationQuery(String validationQuery) {\n      * Sets the {*link ObjectPool} in which to pool {*link Connection}s.\n      * @param pool the {*link ObjectPool} in which to pool those {*link Connection}s\n      */\n-    synchronized public void setPool(KeyedObjectPool pool) \n+    synchronized public void setPool(KeyedObjectPool pool)\n         throws SQLException {\n         if (null != _pool && pool != _pool) {\n             try {\n@@ -130,7 +130,7 @@ public synchronized Object makeObject(Object key) throws Exception {\n         pc.addConnectionEventListener(this);\n         obj = new PooledConnectionAndInfo(pc, username, password);\n         pcMap.put(pc, obj);\n- \n+\n         return obj;\n     }\n \n@@ -145,17 +145,17 @@ public void destroyObject(Object key, Object obj) throws Exception {\n     public boolean validateObject(Object key, Object obj) {\n         boolean valid = false;\n         if (obj instanceof PooledConnectionAndInfo) {\n-            PooledConnection pconn = \n+            PooledConnection pconn =\n                 ((PooledConnectionAndInfo)obj).getPooledConnection();\n             String query = _validationQuery;\n             if (null != query) {\n                 Connection conn = null;\n                 Statement stmt = null;\n                 ResultSet rset = null;\n                 // logical Connection from the PooledConnection must be closed\n-                // before another one can be requested and closing it will \n+                // before another one can be requested and closing it will\n                 // generate an event. Keep track so we know not to return\n-                // the PooledConnection \n+                // the PooledConnection\n                 validatingMap.put(pconn, null);\n                 try {\n                     conn = pconn.getConnection();\n@@ -169,20 +169,26 @@ public boolean validateObject(Object key, Object obj) {\n                 } catch(Exception e) {\n                     valid = false;\n                 } finally {\n-                    try {\n-                        rset.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (rset != null) {\n+                        try {\n+                            rset.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n-                    try {\n-                        stmt.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (stmt != null) {\n+                        try {\n+                            stmt.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n-                    try {\n-                        conn.close();\n-                    } catch (Throwable t) {\n-                        // ignore\n+                    if (conn != null) {\n+                        try {\n+                            conn.close();\n+                        } catch (Throwable t) {\n+                            // ignore\n+                        }\n                     }\n                     validatingMap.remove(pconn);\n                 }\n@@ -216,20 +222,20 @@ public void connectionClosed(ConnectionEvent event) {\n         // if this event occured becase we were validating, ignore it\n         // otherwise return the connection to the pool.\n         if (!validatingMap.containsKey(pc)) {\n-            PooledConnectionAndInfo info = \n+            PooledConnectionAndInfo info =\n                 (PooledConnectionAndInfo) pcMap.get(pc);\n             if (info == null) {\n                 throw new IllegalStateException(NO_KEY_MESSAGE);\n-            }            \n+            }\n             try {\n                 _pool.returnObject(info.getUserPassKey(), info);\n             } catch (Exception e) {\n-                System.err.println(\"CLOSING DOWN CONNECTION AS IT COULD \" + \n+                System.err.println(\"CLOSING DOWN CONNECTION AS IT COULD \" +\n                                    \"NOT BE RETURNED TO THE POOL\");\n                 try {\n                     destroyObject(info.getUserPassKey(), info);\n                 } catch (Exception e2) {\n-                    System.err.println(\"EXCEPTION WHILE DESTROYING OBJECT \" + \n+                    System.err.println(\"EXCEPTION WHILE DESTROYING OBJECT \" +\n                                        info);\n                     e2.printStackTrace();\n                 }\n@@ -249,7 +255,7 @@ public void connectionErrorOccurred(ConnectionEvent event) {\n                     .println(\"CLOSING DOWN CONNECTION DUE TO INTERNAL ERROR (\" +\n                              event.getSQLException() + \")\");\n             }\n-            //remove this from the listener list because we are no more \n+            //remove this from the listener list because we are no more\n             //interested in errors since we are about to close this connection\n             pc.removeConnectionEventListener(this);\n         } catch (Exception ignore) {\n@@ -259,7 +265,7 @@ public void connectionErrorOccurred(ConnectionEvent event) {\n         PooledConnectionAndInfo info = (PooledConnectionAndInfo) pcMap.get(pc);\n         if (info == null) {\n             throw new IllegalStateException(NO_KEY_MESSAGE);\n-        }            \n+        }\n         try {\n             destroyObject(info.getUserPassKey(), info);\n         } catch (Exception e) {",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/2694fb14963779a9fa602431f575cbf1f45d1bd7/src/java/org/apache/commons/dbcp/datasources/KeyedCPDSConnectionFactory.java",
                "sha": "fa2e4efe8826ab3cf5abc09fe01c86774bca6f1f",
                "status": "modified"
            }
        ],
        "message": "Remove possible NPEs (Issue 36685).\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk@384329 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/c9b0a7f2b59b1d22f6936b7bfa9dbc682a06070b",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestCPDSConnectionFactory.java",
            "TestKeyedCPDSConnectionFactory.java"
        ]
    },
    "commons-dbcp_3df2257": {
        "bug_id": "commons-dbcp_3df2257",
        "commit": "https://github.com/apache/commons-dbcp/commit/3df225721c22a5eb7b7b74e774ffe5a0705965d6",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/3df225721c22a5eb7b7b74e774ffe5a0705965d6/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java?ref=3df225721c22a5eb7b7b74e774ffe5a0705965d6",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "patch": "@@ -145,11 +145,7 @@ public synchronized void closePool(final String name) throws SQLException {\n \n     @Override\n     public boolean acceptsURL(final String url) throws SQLException {\n-        try {\n-            return url.startsWith(URL_PREFIX);\n-        } catch(final NullPointerException e) {\n-            return false;\n-        }\n+        return url == null ? false : url.startsWith(URL_PREFIX);\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/3df225721c22a5eb7b7b74e774ffe5a0705965d6/src/main/java/org/apache/commons/dbcp2/PoolingDriver.java",
                "sha": "2423d19fd858b8efdaf7b4af4e62607b3b73375b",
                "status": "modified"
            }
        ],
        "message": "Simplify implementation without using the catch NPE hack.",
        "parent": "https://github.com/apache/commons-dbcp/commit/9eb1e02873e9b56c55ac6b0bd253d5193de15b9c",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestPoolingDriver.java"
        ]
    },
    "commons-dbcp_71841bc": {
        "bug_id": "commons-dbcp_71841bc",
        "commit": "https://github.com/apache/commons-dbcp/commit/71841bce6f67b8e58b26caaa49b5c0b1f7269534",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -73,6 +73,9 @@ The <action> type attribute can be add,update,fix,remove.\n       <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-487\" due-to=\"Gary Gregory\">\n         Add API org.apache.commons.dbcp2.datasources.PerUserPoolDataSource.clear().\n       </action>\n+      <action dev=\"ggregory\" type=\"update\" issue=\"DBCP-488\" due-to=\"Gary Gregory\">\n+        NPE for org.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.setConnectionProperties(null).      \n+      </action>\n     </release>\n     <release version=\"2.2.0\" date=\"2017-12-DD\" description=\"This is a minor release, including bug fixes and enhancements.\">\n       <action dev=\"ggregory\" type=\"fix\" issue=\"DBCP-481\" due-to=\"Gary Gregory\">",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/changes/changes.xml",
                "sha": "67db1d51dbd176d6865e97720c31065ec2c55f7d",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "deletions": 5,
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "patch": "@@ -395,11 +395,13 @@ public Properties getConnectionProperties() {\n     public void setConnectionProperties(final Properties props) {\n         assertInitializationAllowed();\n         connectionProperties = props;\n-        if (connectionProperties.containsKey(KEY_USER)) {\n-            setUser(connectionProperties.getProperty(KEY_USER));\n-        }\n-        if (connectionProperties.containsKey(KEY_PASSWORD)) {\n-            setPassword(connectionProperties.getProperty(KEY_PASSWORD));\n+        if (connectionProperties != null) {\n+            if (connectionProperties.containsKey(KEY_USER)) {\n+                setUser(connectionProperties.getProperty(KEY_USER));\n+            }\n+            if (connectionProperties.containsKey(KEY_PASSWORD)) {\n+                setPassword(connectionProperties.getProperty(KEY_PASSWORD));\n+            }\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "sha": "f42c1dbd4bf119ae7c42777dc5cccc8980939e93",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java?ref=71841bce6f67b8e58b26caaa49b5c0b1f7269534",
                "deletions": 1,
                "filename": "src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "patch": "@@ -142,7 +142,7 @@ public void testClosingWithUserName()\n     }\n \n     @Test\n-    public void testSetProperties() throws Exception {\n+    public void testSetConnectionProperties() throws Exception {\n         // Set user property to bad value\n         pcds.setUser(\"bad\");\n         // Supply correct value in connection properties\n@@ -162,6 +162,11 @@ public void testSetProperties() throws Exception {\n         assertEquals(\"bar\", pcds.getConnectionProperties().getProperty(\"password\"));\n     }\n     \n+    @Test\n+    public void testSetConnectionPropertiesNull() throws Exception {\n+        pcds.setConnectionProperties(null);\n+    }\n+    \n     @Test\n     public void testSetUserNull() throws Exception {\n         pcds.setUser(\"Alice\");",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/71841bce6f67b8e58b26caaa49b5c0b1f7269534/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "sha": "7820796d7170365642f97833ae38d0fcfd0a3f3c",
                "status": "modified"
            }
        ],
        "message": "[DBCP-488] NPE for\norg.apache.commons.dbcp2.cpdsadapter.DriverAdapterCPDS.setConnectionProperties(null).",
        "parent": "https://github.com/apache/commons-dbcp/commit/5226462744f1e3c11fe5477b543a60b18a80e548",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_8a8b7a0": {
        "bug_id": "commons-dbcp_8a8b7a0",
        "commit": "https://github.com/apache/commons-dbcp/commit/8a8b7a0e899aa8a2c87939d80a5e5693821e0797",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/8a8b7a0e899aa8a2c87939d80a5e5693821e0797/src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/PoolingDataSource.java?ref=8a8b7a0e899aa8a2c87939d80a5e5693821e0797",
                "deletions": 1,
                "filename": "src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "patch": "@@ -350,7 +350,7 @@ public void setTypeMap(Map map) throws SQLException {\n \n         public String toString() {\n             if (delegate == null){\n-                return null;\n+                return \"NULL\";\n             }\n             return delegate.toString();\n         }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/8a8b7a0e899aa8a2c87939d80a5e5693821e0797/src/java/org/apache/commons/dbcp/PoolingDataSource.java",
                "sha": "060792572434d23a017c948df6a1763017e83e71",
                "status": "modified"
            }
        ],
        "message": "Avoid possible NPE on toString().\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@831707 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/757f0ba7a5da3df5fb6c93befbd114bdbd0454ba",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestPoolingDataSource.java"
        ]
    },
    "commons-dbcp_9aa0b30": {
        "bug_id": "commons-dbcp_9aa0b30",
        "commit": "https://github.com/apache/commons-dbcp/commit/9aa0b30336f995d44fa0b1c8be7dc6779fb9efd7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9aa0b30336f995d44fa0b1c8be7dc6779fb9efd7/src/java/org/apache/commons/dbcp/BasicDataSource.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/BasicDataSource.java?ref=9aa0b30336f995d44fa0b1c8be7dc6779fb9efd7",
                "deletions": 5,
                "filename": "src/java/org/apache/commons/dbcp/BasicDataSource.java",
                "patch": "@@ -1,6 +1,6 @@\n-/* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/BasicDataSource.java,v 1.14 2003/04/09 02:39:16 dgraham Exp $\n- * $Revision: 1.14 $\n- * $Date: 2003/04/09 02:39:16 $\n+/* $Header: /home/jerenkrantz/tmp/commons/commons-convert/cvs/home/cvs/jakarta-commons//dbcp/src/java/org/apache/commons/dbcp/BasicDataSource.java,v 1.15 2003/08/11 15:02:07 dirkv Exp $\n+ * $Revision: 1.15 $\n+ * $Date: 2003/08/11 15:02:07 $\n  *\n  * ====================================================================\n  *\n@@ -81,7 +81,7 @@\n  *\n  * @author Glenn L. Nielsen\n  * @author Craig R. McClanahan\n- * @version $Revision: 1.14 $ $Date: 2003/04/09 02:39:16 $\n+ * @version $Revision: 1.15 $ $Date: 2003/08/11 15:02:07 $\n  */\n \n public class BasicDataSource implements DataSource {\n@@ -589,7 +589,9 @@ public void close() throws SQLException {\n         connectionPool = null;\n         dataSource = null;\n         try {\n-            oldpool.close();\n+            if (oldpool != null) {\n+                oldpool.close();\n+            }\n         } catch(SQLException e) {\n             throw e;\n         } catch(RuntimeException e) {",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9aa0b30336f995d44fa0b1c8be7dc6779fb9efd7/src/java/org/apache/commons/dbcp/BasicDataSource.java",
                "sha": "7f9bbd0683aff50aaf25d883c8ddaf710ab40255",
                "status": "modified"
            }
        ],
        "message": "Bugzilla Bug 21748:  BasicDataSource.close() throws NPE\n\nIf a BasicDataSource is closed without having been used, the connectionPool\nwill not have been initialised and a NPE will be thrown.\n(Reported by Aaron Knauf)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk@131982 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/9a845ceec050df899fbfdeaf535bdb6ef893af73",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestBasicDataSource.java"
        ]
    },
    "commons-dbcp_9ae844d": {
        "bug_id": "commons-dbcp_9ae844d",
        "commit": "https://github.com/apache/commons-dbcp/commit/9ae844dbf476eba54ac52d9842cba0505c4c6666",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/changes/changes.xml",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/changes/changes.xml?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "deletions": 0,
                "filename": "src/changes/changes.xml",
                "patch": "@@ -61,6 +61,9 @@ The <action> type attribute can be add,update,fix,remove.\n \n   <body>\n     <release version=\"2.1.1\" date=\"TBD\" description=\"Bug fixes.\">\n+      <action issue=\"DBCP-438\" dev=\"psteitz\" type=\"fix\" due-to=\"Raihan Kibria\">\n+        Nested connections in a transaction (local) throws null pointer. \n+      </action>\n       <action issue=\"DBCP-437\" dev=\"psteitz\" type=\"fix\">\n         BasicDataSource does not set disconnectionSql properties on its PoolableConnectionFactory.\n       </action>",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/changes/changes.xml",
                "sha": "67e81f03f0d67eb42edfaf7414e50cd8e663079e",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "deletions": 3,
                "filename": "src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "patch": "@@ -231,9 +231,13 @@ protected final void closeInternal() throws SQLException {\n         try {\n             passivate();\n         } finally {\n-            try {\n-                _conn.close();\n-            } finally {\n+            if (_conn != null) {\n+                try {\n+                    _conn.close();\n+                } finally {\n+                    _closed = true;\n+                }\n+            } else {\n                 _closed = true;\n             }\n         }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/main/java/org/apache/commons/dbcp2/DelegatingConnection.java",
                "sha": "00657379b6293dc164901414eadba4a752052b75",
                "status": "modified"
            },
            {
                "additions": 16,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "patch": "@@ -242,4 +242,20 @@ public void testManagedConnectionEqualInnermost() throws Exception {\n         assertTrue(con2.innermostDelegateEquals(inner));\n         assertFalse(con.equals(con2));\n     }\n+    \n+    @Test\n+    public void testNestedConnections() throws Exception {\n+        transactionManager.begin();\n+        \n+        Connection c1 = null;\n+        Connection c2 = null;\n+        \n+        c1 = newConnection();\n+        c2 = newConnection();\n+        \n+        transactionManager.commit();\n+        \n+        c1.close();\n+        c2.close();\n+    }   \n }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSource.java",
                "sha": "acae0bf51553598cddd8bfa1822406eb207e52c1",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java?ref=9ae844dbf476eba54ac52d9842cba0505c4c6666",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "patch": "@@ -70,6 +70,12 @@ public void testManagedConnectionEqualsFail() throws Exception {\n         // two connections to the same datasource are supposed to share\n         // a single connection\n     }\n+    \n+    @Override\n+    @Test\n+    public void testNestedConnections() {\n+        // Not supported\n+    }\n \n     @Override\n     @Test",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9ae844dbf476eba54ac52d9842cba0505c4c6666/src/test/java/org/apache/commons/dbcp2/managed/TestManagedDataSourceInTx.java",
                "sha": "d6726014a8277f358d1669e25647edeb1dc711f6",
                "status": "modified"
            }
        ],
        "message": "Added null check to DelegatingConnection#closeInternal. Prior to this change, NPEs were being generated by ManagedConnection#close.\n\nJIRA: DBCP-438\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1691861 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/e1f732a6dc9ad194ca6c89bab45ad2d54c963a1b",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestDelegatingConnection.java"
        ]
    },
    "commons-dbcp_9c6f0b6": {
        "bug_id": "commons-dbcp_9c6f0b6",
        "commit": "https://github.com/apache/commons-dbcp/commit/9c6f0b6716520d59c7ef5e96709eebab65ad630f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c6f0b6716520d59c7ef5e96709eebab65ad630f/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java?ref=9c6f0b6716520d59c7ef5e96709eebab65ad630f",
                "deletions": 1,
                "filename": "src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java",
                "patch": "@@ -63,7 +63,9 @@ public SharedPoolDataSource() {\n      * Close pool being maintained by this datasource.\n      */\n     public void close() throws Exception {\n-        pool.close();\n+        if (pool != null) {\n+            pool.close();\n+        }\n         InstanceKeyObjectFactory.removeInstance(instanceKey);\n     }\n ",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c6f0b6716520d59c7ef5e96709eebab65ad630f/src/java/org/apache/commons/dbcp/datasources/SharedPoolDataSource.java",
                "sha": "b5d7015487b2862b5b6a2a6b49c3280502223f3c",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c6f0b6716520d59c7ef5e96709eebab65ad630f/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java?ref=9c6f0b6716520d59c7ef5e96709eebab65ad630f",
                "deletions": 0,
                "filename": "src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "patch": "@@ -265,6 +265,18 @@ public void testClosing()\n             c[i].close();\n         }\n     }\n+    \n+    /**\n+     * Test pool close.  Illustrates BZ 37359.\n+     * \n+     * @throws Exception\n+     */\n+    public void testClosePool() throws Exception {\n+      ((SharedPoolDataSource)ds).close();\n+      SharedPoolDataSource tds = new SharedPoolDataSource();\n+      // NPE before BZ 37359 fix \n+      tds.close();\n+    }\n \n     public void testMaxActive() \n         throws Exception ",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c6f0b6716520d59c7ef5e96709eebab65ad630f/src/test/org/apache/commons/dbcp/datasources/TestSharedPoolDataSource.java",
                "sha": "65ee8eaf2ab0c42b85b66e35a254f7c3d3c1b8b3",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/9c6f0b6716520d59c7ef5e96709eebab65ad630f/xdocs/changes.xml",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/xdocs/changes.xml?ref=9c6f0b6716520d59c7ef5e96709eebab65ad630f",
                "deletions": 0,
                "filename": "xdocs/changes.xml",
                "patch": "@@ -52,6 +52,10 @@ The <action> type attribute can be add,update,fix,remove.\n         concrete factory and added implementations of getReference in concrete\n         subclasses.\n       </action>\n+      <action dev=\"psteitz\" type=\"fix\" issue=\"#37359\" due-to=\"Jindrich Vimr\">\n+        Inserted null check in close method of SharedPoolDataSource to avoid\n+        NPE when invoked on non-initialized pool.\n+      </action>\n     </release>   \n   </body>\n </document>",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/9c6f0b6716520d59c7ef5e96709eebab65ad630f/xdocs/changes.xml",
                "sha": "1533705a5bbebff72763de248fb951776154ced2",
                "status": "modified"
            }
        ],
        "message": "Inserted null check in close method of SharedPoolDataSource to avoid NPE\nwhen invoked on non-initialized pool.\nAddresses BZ #37359\nFix contributed by Jindrich Vimr.\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/dbcp/trunk@385251 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/197eb086ff6d020124b09133196002a2e31e06e7",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestSharedPoolDataSource.java"
        ]
    },
    "commons-dbcp_b137fda": {
        "bug_id": "commons-dbcp_b137fda",
        "commit": "https://github.com/apache/commons-dbcp/commit/b137fda65be70c4431a7a09ca379e40a300760e1",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b137fda65be70c4431a7a09ca379e40a300760e1/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java?ref=b137fda65be70c4431a7a09ca379e40a300760e1",
                "deletions": 1,
                "filename": "src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "patch": "@@ -765,7 +765,7 @@ public synchronized String toString() {\n         builder.append(\", connectionProperties=\");\n         Properties tmpProps = connectionProperties;\n         final String pwdKey = \"password\";\n-        if (connectionProperties.contains(pwdKey)) {\n+        if (connectionProperties != null && connectionProperties.contains(pwdKey)) {\n             tmpProps = (Properties) connectionProperties.clone();\n             tmpProps.remove(pwdKey);\n         }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b137fda65be70c4431a7a09ca379e40a300760e1/src/main/java/org/apache/commons/dbcp2/cpdsadapter/DriverAdapterCPDS.java",
                "sha": "e80d69c4e8f36b411516e63ab09921c913c4cb08",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b137fda65be70c4431a7a09ca379e40a300760e1/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java?ref=b137fda65be70c4431a7a09ca379e40a300760e1",
                "deletions": 0,
                "filename": "src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "patch": "@@ -367,4 +367,16 @@ public void testGetObjectInstanceChangeDescription() throws Exception {\n         final Object o = pcds.getObjectInstance(ref, null, null, null);\n         assertEquals(pcds.getDescription(), ((DriverAdapterCPDS) o).getDescription());\n     }\n+    \n+    @Test\n+    public void testToStringWithoutConnectionProperties() throws ClassNotFoundException\n+    {\n+        final DriverAdapterCPDS cleanCpds = new DriverAdapterCPDS();\n+        cleanCpds.setDriver( \"org.apache.commons.dbcp2.TesterDriver\" );\n+        cleanCpds.setUrl( \"jdbc:apache:commons:testdriver\" );\n+        cleanCpds.setUser( \"foo\" );\n+        cleanCpds.setPassword( \"bar\" );\n+\n+        cleanCpds.toString();\n+    }\n }",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b137fda65be70c4431a7a09ca379e40a300760e1/src/test/java/org/apache/commons/dbcp2/cpdsadapter/TestDriverAdapterCPDS.java",
                "sha": "ab0a4dd8dc5de2d57aab23c50311f377b6588d6b",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE when calling DriverAdapterCPDS.toString() (#31)\n\n* Add test for DriverAdapterCPDS.toString()\r\n\r\nIt currently fails when connectionProperties are null\r\n\r\n* Do not access connectionProperties when it's null",
        "parent": "https://github.com/apache/commons-dbcp/commit/2ee3c53e75e9ad899ed2aa06bfd882ebeea7b4a2",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestDriverAdapterCPDS.java"
        ]
    },
    "commons-dbcp_b72cc6f": {
        "bug_id": "commons-dbcp_b72cc6f",
        "commit": "https://github.com/apache/commons-dbcp/commit/b72cc6fc7397985eeb3cc864b28ec3a293376150",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/b72cc6fc7397985eeb3cc864b28ec3a293376150/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java?ref=b72cc6fc7397985eeb3cc864b28ec3a293376150",
                "deletions": 1,
                "filename": "src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "patch": "@@ -507,7 +507,7 @@ private synchronized void registerPool(\n             getDefaultMaxWait() : userMax.intValue();\n \n         // Create an object pool to contain our PooledConnections\n-        GenericObjectPool pool = new GenericObjectPool(null);\n+        GenericObjectPool pool = new GenericObjectPool();\n         pool.setMaxTotal(maxTotal);\n         pool.setMaxIdle(maxIdle);\n         pool.setMaxWait(maxWait);",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/b72cc6fc7397985eeb3cc864b28ec3a293376150/src/java/org/apache/commons/dbcp2/datasources/PerUserPoolDataSource.java",
                "sha": "2017dd0a8521e308c785132c5ccef1b9a5ebe6d0",
                "status": "modified"
            }
        ],
        "message": "Updated to reflect pool2 API change (and avoid NPE).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1136171 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/02cc4afa833881373c0b8a296eed74fd73c86288",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestPerUserPoolDataSource.java"
        ]
    },
    "commons-dbcp_d4b94a0": {
        "bug_id": "commons-dbcp_d4b94a0",
        "commit": "https://github.com/apache/commons-dbcp/commit/d4b94a0373abcb99a1fd98c6456baf670024e8ab",
        "file": [
            {
                "additions": 39,
                "blob_url": "https://github.com/apache/commons-dbcp/blob/d4b94a0373abcb99a1fd98c6456baf670024e8ab/src/java/org/apache/commons/dbcp2/PStmtKey.java",
                "changes": 49,
                "contents_url": "https://api.github.com/repos/apache/commons-dbcp/contents/src/java/org/apache/commons/dbcp2/PStmtKey.java?ref=d4b94a0373abcb99a1fd98c6456baf670024e8ab",
                "deletions": 10,
                "filename": "src/java/org/apache/commons/dbcp2/PStmtKey.java",
                "patch": "@@ -96,19 +96,48 @@ public byte getStmtType() {\n \n     @Override\n     public boolean equals(Object obj) {\n-        if (this == obj)\n+        if (this == obj) {\n             return true;\n-        if (obj == null)\n+        }\n+        if (obj == null) {\n             return false;\n-        if (getClass() != obj.getClass())\n+        }\n+        if (getClass() != obj.getClass()) {\n             return false;\n-        PStmtKey key = (PStmtKey) obj;\n-        return( ((null == _sql && null == key._sql) || _sql.equals(key._sql)) &&\n-                ((null == _catalog && null == key._catalog) || _catalog.equals(key._catalog)) &&\n-                ((null == _resultSetType && null == key._resultSetType) || _resultSetType.equals(key._resultSetType)) &&\n-                ((null == _resultSetConcurrency && null == key._resultSetConcurrency) || _resultSetConcurrency.equals(key._resultSetConcurrency)) &&\n-                (_stmtType == key._stmtType)\n-              );\n+        }\n+        PStmtKey other = (PStmtKey) obj;\n+        if (_catalog == null) {\n+            if (other._catalog != null) {\n+                return false;\n+            }\n+        } else if (!_catalog.equals(other._catalog)) {\n+            return false;\n+        }\n+        if (_resultSetConcurrency == null) {\n+            if (other._resultSetConcurrency != null) {\n+                return false;\n+            }\n+        } else if (!_resultSetConcurrency.equals(other._resultSetConcurrency)) {\n+            return false;\n+        }\n+        if (_resultSetType == null) {\n+            if (other._resultSetType != null) {\n+                return false;\n+            }\n+        } else if (!_resultSetType.equals(other._resultSetType)) {\n+            return false;\n+        }\n+        if (_sql == null) {\n+            if (other._sql != null) {\n+                return false;\n+            }\n+        } else if (!_sql.equals(other._sql)) {\n+            return false;\n+        }\n+        if (_stmtType != other._stmtType) {\n+            return false;\n+        }\n+        return true;\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/commons-dbcp/raw/d4b94a0373abcb99a1fd98c6456baf670024e8ab/src/java/org/apache/commons/dbcp2/PStmtKey.java",
                "sha": "8f95f94c46cd3d5b5b3ad03117fdea9b5d8e405f",
                "status": "modified"
            }
        ],
        "message": "Fix possible NPEs in r1557679\n(using Eclipse's generated code for equals() and hashCode() with just formatting changes)\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/dbcp/trunk@1557682 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/commons-dbcp/commit/fee5cc302a833fca4b78ed86747f2e44756aa7a4",
        "repo": "commons-dbcp",
        "unit_tests": [
            "TestPStmtKey.java"
        ]
    }
}