[
    {
        "repo": "zeppelin",
        "commit": "https://github.com/apache/zeppelin/commit/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
        "bug_id": "zeppelin_9a610a7",
        "message": "Zeppelin 639\n\n### What is this PR for?\nJDBCInterpreter should check for a null object before simply calling `getString`. This will prevent poorly implemented JDBC drivers from causing a NullPointerException.\n\n### What type of PR is it?\nImprovement\n\n### Todos\n\n### Is there a relevant Jira issue?\nhttps://issues.apache.org/jira/browse/ZEPPELIN-639\n\n### How should this be tested?\nRun the `testSelectQueryWithNull` test included with this PR.\n\n### Questions:\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? No\n\nAuthor: Chris Matta <cmatta@mapr.com>\nAuthor: vgmartinez <viktor.manuel.garcia@gmail.com>\n\nCloses #684 from cjmatta/ZEPPELIN-639 and squashes the following commits:\n\n875fdc9 [Chris Matta] Merge branch 'master' of https://github.com/apache/incubator-zeppelin into ZEPPELIN-639\n1475cb9 [Chris Matta] replacing modified note.json with master note.json\n15d3e69 [Chris Matta] Revert \"add test for parse propertyKey\"\n5d6df65 [Chris Matta] Revert \"fix parse property in interprete name\"\n901a59c [Chris Matta] Merged in upstream changes and fixed test case\n0f9737d [Chris Matta] Merge in upstream master\ned8c228 [Chris Matta] Zeppelin 639 ### What is this PR for? JDBCInterpreter should check for a null object before simply calling . This will prevent poorly implemented JDBC drivers from causing a NullPointerException.\n4247356 [Chris Matta] Added check for null in resultSet. Added tests.\n6db8d0a [Chris Matta] Merge branch 'master' into bug_628\nf228b84 [vgmartinez] add test for parse propertyKey\n0a0ad72 [vgmartinez] fix parse property in interprete name",
        "parent": "https://github.com/apache/zeppelin/commit/39417c073b6d5d6d206ea021f0d68aeb3c81f859",
        "patched_files": [
            "JDBCInterpreter.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 9,
                "raw_url": "https://github.com/apache/zeppelin/raw/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java?ref=9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
                "filename": "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "deletions": 1,
                "sha": "0c53281c27bdafcf2842f01cfd4d47691b89d0d2",
                "blob_url": "https://github.com/apache/zeppelin/blob/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java",
                "patch": "@@ -305,7 +305,15 @@ private InterpreterResult executeSql(String propertyKey, String sql,\n           int displayRowCount = 0;\n           while (resultSet.next() && displayRowCount < getMaxResult()) {\n             for (int i = 1; i < md.getColumnCount() + 1; i++) {\n-              msg.append(replaceReservedChars(isTableType, resultSet.getString(i)));\n+              Object resultObject;\n+              String resultValue;\n+              resultObject = resultSet.getObject(i);\n+              if (resultObject == null) {\n+                resultValue = \"null\";\n+              } else {\n+                resultValue = resultSet.getString(i);\n+              }\n+              msg.append(replaceReservedChars(isTableType, resultValue));\n               if (i != md.getColumnCount()) {\n                 msg.append(TAB);\n               }",
                "changes": 10
            },
            {
                "status": "modified",
                "additions": 28,
                "raw_url": "https://github.com/apache/zeppelin/raw/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java?ref=9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6",
                "filename": "jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "deletions": 8,
                "sha": "18e8b331f2e2c8781aa1faf36616d14b5d6bef35",
                "blob_url": "https://github.com/apache/zeppelin/blob/9a610a7a29a2c2d0a4d6f4cc4c3f7df0b4c912b6/jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
                "patch": "@@ -26,10 +26,7 @@\n import java.io.IOException;\n import java.nio.file.Files;\n import java.nio.file.Path;\n-import java.sql.Connection;\n-import java.sql.DriverManager;\n-import java.sql.SQLException;\n-import java.sql.Statement;\n+import java.sql.*;\n import java.util.Properties;\n \n import org.apache.zeppelin.interpreter.InterpreterContext;\n@@ -64,9 +61,10 @@ public void setUp() throws Exception {\n     statement.execute(\n         \"DROP TABLE IF EXISTS test_table; \" +\n         \"CREATE TABLE test_table(id varchar(255), name varchar(255));\");\n-    statement.execute(\n-        \"insert into test_table(id, name) values ('a', 'a_name'),('b', 'b_name');\"\n-    );\n+\n+    PreparedStatement insertStatement = connection.prepareStatement(\"insert into test_table(id, name) values ('a', 'a_name'),('b', 'b_name'),('c', ?);\");\n+    insertStatement.setString(1, null);\n+    insertStatement.execute();\n   }\n \n \n@@ -139,7 +137,7 @@ public void testSelectQuery() throws SQLException, IOException {\n     JDBCInterpreter t = new JDBCInterpreter(properties);\n     t.open();\n \n-    String sqlQuery = \"select * from test_table\";\n+    String sqlQuery = \"select * from test_table WHERE ID in ('a', 'b')\";\n \n     InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n \n@@ -148,6 +146,28 @@ public void testSelectQuery() throws SQLException, IOException {\n     assertEquals(\"ID\\tNAME\\na\\ta_name\\nb\\tb_name\\n\", interpreterResult.message());\n   }\n \n+  @Test\n+  public void testSelectQueryWithNull() throws SQLException, IOException {\n+    Properties properties = new Properties();\n+    properties.setProperty(\"common.max_count\", \"1000\");\n+    properties.setProperty(\"common.max_retry\", \"3\");\n+    properties.setProperty(\"default.driver\", \"org.h2.Driver\");\n+    properties.setProperty(\"default.url\", getJdbcConnection());\n+    properties.setProperty(\"default.user\", \"\");\n+    properties.setProperty(\"default.password\", \"\");\n+    JDBCInterpreter t = new JDBCInterpreter(properties);\n+    t.open();\n+\n+    String sqlQuery = \"select * from test_table WHERE ID = 'c'\";\n+\n+    InterpreterResult interpreterResult = t.interpret(sqlQuery, new InterpreterContext(\"\", \"1\", \"\",\"\", null,null,null,null,null,null));\n+\n+    assertEquals(InterpreterResult.Code.SUCCESS, interpreterResult.code());\n+    assertEquals(InterpreterResult.Type.TABLE, interpreterResult.type());\n+    assertEquals(\"ID\\tNAME\\nc\\tnull\\n\", interpreterResult.message());\n+  }\n+\n+\n   @Test\n   public void testSelectQueryMaxResult() throws SQLException, IOException {\n ",
                "changes": 36
            }
        ],
        "unit_tests": [
            "JDBCInterpreterTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "jdbc/src/test/java/org/apache/zeppelin/jdbc/JDBCInterpreterTest.java",
        "buggy_files": [
            "jdbc/src/main/java/org/apache/zeppelin/jdbc/JDBCInterpreter.java"
        ],
        "fixed": true
    }
]