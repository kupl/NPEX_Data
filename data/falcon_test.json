{
    "falcon_b5baefb": {
        "repo": "falcon",
        "message": "DE187 rally fix NPE exception in console dump",
        "commit": "https://github.com/apache/falcon/commit/b5baefbdbe4ab3bb319dbdcdd116bb527a1929e1",
        "parent": "https://github.com/apache/falcon/commit/1981f0050bd821fe87513f29e545d3e2a702f62e",
        "bug_id": "falcon_b5baefb",
        "file": [
            {
                "sha": "72e473a027c0e64e74c191a209f9667893d6bd99",
                "filename": "webapp/src/main/java/org/apache/ivory/resource/EntityManager.java",
                "blob_url": "https://github.com/apache/falcon/blob/b5baefbdbe4ab3bb319dbdcdd116bb527a1929e1/webapp/src/main/java/org/apache/ivory/resource/EntityManager.java",
                "raw_url": "https://github.com/apache/falcon/raw/b5baefbdbe4ab3bb319dbdcdd116bb527a1929e1/webapp/src/main/java/org/apache/ivory/resource/EntityManager.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/webapp/src/main/java/org/apache/ivory/resource/EntityManager.java?ref=b5baefbdbe4ab3bb319dbdcdd116bb527a1929e1",
                "patch": "@@ -251,6 +251,10 @@ public String getEntityDefinition(@PathParam(\"type\") String type,\n \t\t\tEntityType entityType = EntityType.valueOf(type.toUpperCase());\n \t\t\tConfigurationStore configStore = ConfigurationStore.get();\n \t\t\tEntity entity= configStore.get(entityType, entityName);\n+\t\t\tif(entity==null){\n+\t\t\t\tLOG.error(entityName+\" does not exists\");\n+\t\t\t\treturn new APIResult(APIResult.Status.FAILED, entityName+\" does not exists\").toString();\t\n+\t\t\t}\n \t\t\tLOG.info(\"Returned entity: \" + entity);\n \t\t\treturn entity.toString();\n \t\t} catch (IllegalArgumentException e) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "EntityManager.java"
        ],
        "unit_tests": [
            "EntityManagerTest.java"
        ]
    },
    "falcon_9aad374": {
        "repo": "falcon",
        "message": "FALCON-669 Missing optional workflow execution listeners configuration results in NPE. Contributed by Raghav Kumar Gautam",
        "commit": "https://github.com/apache/falcon/commit/9aad374ab75ca477ada47c4bd2b0aaacd656602a",
        "parent": "https://github.com/apache/falcon/commit/331ad145e172c4a862bb294578dfb333b39d28d6",
        "bug_id": "falcon_9aad374",
        "file": [
            {
                "sha": "4a3bbc47a4dcd068642b54d1965bcfc13a46910b",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/9aad374ab75ca477ada47c4bd2b0aaacd656602a/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/9aad374ab75ca477ada47c4bd2b0aaacd656602a/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=9aad374ab75ca477ada47c4bd2b0aaacd656602a",
                "patch": "@@ -77,6 +77,9 @@ Trunk (Unreleased)\n   OPTIMIZATIONS\n \n   BUG FIXES\n+   FALCON-669 Missing optional workflow execution listeners configuration\n+   results in NPE (Raghav Kumar Gautam via Venkatesh Seetharam)\n+\n    FALCON-644 Falcon message producer masks errors in Post processing\n    (Venkatesh Seetharam)\n ",
                "deletions": 0
            },
            {
                "sha": "fb2d58d119aeaebd7b56509865fbcc72828c6312",
                "filename": "common/src/main/java/org/apache/falcon/workflow/WorkflowJobEndNotificationService.java",
                "blob_url": "https://github.com/apache/falcon/blob/9aad374ab75ca477ada47c4bd2b0aaacd656602a/common/src/main/java/org/apache/falcon/workflow/WorkflowJobEndNotificationService.java",
                "raw_url": "https://github.com/apache/falcon/raw/9aad374ab75ca477ada47c4bd2b0aaacd656602a/common/src/main/java/org/apache/falcon/workflow/WorkflowJobEndNotificationService.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/workflow/WorkflowJobEndNotificationService.java?ref=9aad374ab75ca477ada47c4bd2b0aaacd656602a",
                "patch": "@@ -18,6 +18,7 @@\n \n package org.apache.falcon.workflow;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.falcon.FalconException;\n import org.apache.falcon.aspect.GenericAlert;\n import org.apache.falcon.entity.v0.SchemaHelper;\n@@ -54,6 +55,10 @@ public String getName() {\n     public void init() throws FalconException {\n         String listenerClassNames = StartupProperties.get().getProperty(\n                 \"workflow.execution.listeners\");\n+        if (StringUtils.isEmpty(listenerClassNames)) {\n+            return;\n+        }\n+\n         for (String listenerClassName : listenerClassNames.split(\",\")) {\n             listenerClassName = listenerClassName.trim();\n             if (listenerClassName.isEmpty()) {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "WorkflowJobEndNotificationService.java"
        ],
        "unit_tests": [
            "WorkflowJobEndNotificationServiceTest.java"
        ]
    },
    "falcon_d718ad7": {
        "repo": "falcon",
        "message": "FALCON-1099 FeedReplicator: throws NPE. Contributed by Sowmya Ramesh",
        "commit": "https://github.com/apache/falcon/commit/d718ad737d63399e545a187d71420f106620913d",
        "parent": "https://github.com/apache/falcon/commit/693e8af52e46e673e2a47f0e3b9b44d6dd2e8422",
        "bug_id": "falcon_d718ad7",
        "file": [
            {
                "sha": "7a52e95873026699f802a154b81b5c2fdd022868",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/d718ad737d63399e545a187d71420f106620913d/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/d718ad737d63399e545a187d71420f106620913d/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=d718ad737d63399e545a187d71420f106620913d",
                "patch": "@@ -117,6 +117,8 @@ Trunk (Unreleased)\n    (Suhas vasu)\n \n   BUG FIXES\n+   FALCON-1099 FeedReplicator: throws NPE (Sowmya Ramesh via Suhas Vasu)\n+\n    FALCON-1064 Build hangs at the following test: JMSMessageProducerTest\n    (Sowmya Ramesh via Suhas Vasu)\n ",
                "deletions": 0
            },
            {
                "sha": "aa58aa90c48070bab7fa207b7f9604ec269d0f06",
                "filename": "replication/src/main/java/org/apache/falcon/replication/FeedReplicator.java",
                "blob_url": "https://github.com/apache/falcon/blob/d718ad737d63399e545a187d71420f106620913d/replication/src/main/java/org/apache/falcon/replication/FeedReplicator.java",
                "raw_url": "https://github.com/apache/falcon/raw/d718ad737d63399e545a187d71420f106620913d/replication/src/main/java/org/apache/falcon/replication/FeedReplicator.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/replication/src/main/java/org/apache/falcon/replication/FeedReplicator.java?ref=d718ad737d63399e545a187d71420f106620913d",
                "patch": "@@ -69,10 +69,14 @@ public int run(String[] args) throws Exception {\n         final boolean includePathSet = (includePathConf != null)\n                 && !IGNORE.equalsIgnoreCase(includePathConf);\n \n+        String availabilityFlagOpt = cmd.getOptionValue(\"availabilityFlag\");\n+        if (StringUtils.isEmpty(availabilityFlagOpt)) {\n+            availabilityFlagOpt = \"NA\";\n+        }\n         String availabilityFlag = EntityUtil.SUCCEEDED_FILE_NAME;\n         if (cmd.getOptionValue(\"falconFeedStorageType\").equals(Storage.TYPE.FILESYSTEM.name())) {\n-            availabilityFlag = cmd.getOptionValue(\"availabilityFlag\").equals(\"NA\")\n-                    ? availabilityFlag : cmd.getOptionValue(\"availabilityFlag\");\n+            availabilityFlag = \"NA\".equals(availabilityFlagOpt)\n+                    ? availabilityFlag : availabilityFlagOpt;\n         }\n \n         conf.set(\"falcon.feed.availability.flag\", availabilityFlag);\n@@ -136,7 +140,7 @@ protected DistCpOptions getDistCpOptions(CommandLine cmd) {\n     }\n \n     private List<Path> getPaths(String[] paths) {\n-        List<Path> listPaths = new ArrayList<Path>();\n+        List<Path> listPaths = new ArrayList<>();\n         for (String path : paths) {\n             listPaths.add(new Path(path));\n         }",
                "deletions": 3
            }
        ],
        "patched_files": [
            "FeedReplicator.java"
        ],
        "unit_tests": [
            "FeedReplicatorTest.java"
        ]
    },
    "falcon_e01dd79": {
        "repo": "falcon",
        "message": "FALCON-460 Concurrent deletion of same entity results in NPE. Contributed by Sowmya Ramesh",
        "commit": "https://github.com/apache/falcon/commit/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c",
        "parent": "https://github.com/apache/falcon/commit/662adb2154cbd47bbdaebceae529013ed37d125f",
        "bug_id": "falcon_e01dd79",
        "file": [
            {
                "sha": "98b782bbbb4cd02fe6fa7c01300b72e009ce8460",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=e01dd79c73fa6bc9623dbdd87e7981eff1796c6c",
                "patch": "@@ -16,6 +16,9 @@ Trunk (Unreleased)\n   OPTIMIZATIONS\n \n   BUG FIXES\n+   FALCON-460 Concurrent deletion of same entity results in NPE (Sowmya Ramesh\n+   via Venkatesh Seetharam)\n+\n    FALCON-459 Lineage resource API fails with NPE for bad query params\n    (Sowmya Ramesh via Venkatesh Seetharam)\n ",
                "deletions": 0
            },
            {
                "sha": "cb594d1c7ccc769cd9f5d1a8540b1dad35d21f0c",
                "filename": "common/src/main/java/org/apache/falcon/entity/store/ConfigurationStore.java",
                "blob_url": "https://github.com/apache/falcon/blob/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/common/src/main/java/org/apache/falcon/entity/store/ConfigurationStore.java",
                "raw_url": "https://github.com/apache/falcon/raw/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/common/src/main/java/org/apache/falcon/entity/store/ConfigurationStore.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/entity/store/ConfigurationStore.java?ref=e01dd79c73fa6bc9623dbdd87e7981eff1796c6c",
                "patch": "@@ -275,7 +275,7 @@ public synchronized void initiateUpdate(Entity entity) throws FalconException {\n      *         exist\n      * @throws FalconException\n      */\n-    public boolean remove(EntityType type, String name) throws FalconException {\n+    public synchronized boolean remove(EntityType type, String name) throws FalconException {\n         Map<String, Entity> entityMap = dictionary.get(type);\n         if (entityMap.containsKey(name)) {\n             try {",
                "deletions": 1
            },
            {
                "sha": "9886d883c4ecc5b9393dd91b829646af30dfc2b6",
                "filename": "common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/e01dd79c73fa6bc9623dbdd87e7981eff1796c6c/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/entity/store/ConfigurationStoreTest.java?ref=e01dd79c73fa6bc9623dbdd87e7981eff1796c6c",
                "patch": "@@ -98,6 +98,7 @@ public void testRemove() throws Exception {\n         Process process = new Process();\n         process.setName(\"remove\");\n         store.publish(EntityType.PROCESS, process);\n+\n         Process p = store.get(EntityType.PROCESS, \"remove\");\n         Assert.assertEquals(p, process);\n         store.remove(EntityType.PROCESS, \"remove\");\n@@ -115,6 +116,23 @@ public void testRemove() throws Exception {\n         store.unregisterListener(listener);\n     }\n \n+\n+    @Test(threadPoolSize = 3, invocationCount = 6)\n+    public void testConcurrentRemoves() throws Exception {\n+        Process process = new Process();\n+        process.setName(\"remove\");\n+        try {\n+            store.publish(EntityType.PROCESS, process);\n+        } catch(EntityAlreadyExistsException e) {\n+            // Ignore this\n+        }\n+        Process p = store.get(EntityType.PROCESS, \"remove\");\n+        Assert.assertEquals(p, process);\n+        store.remove(EntityType.PROCESS, \"remove\");\n+        p = store.get(EntityType.PROCESS, \"remove\");\n+        Assert.assertNull(p);\n+    }\n+\n     @BeforeSuite\n     @AfterSuite\n     public void cleanup() throws IOException {",
                "deletions": 0
            }
        ],
        "patched_files": [
            "ConfigurationStore.java"
        ],
        "unit_tests": [
            "ConfigurationStoreTest.java"
        ]
    },
    "falcon_f769933": {
        "repo": "falcon",
        "message": "FALCON-360 Lineage recording fails with NPE for processes with >1 inputs. Contributed by Venkatesh Seetharam",
        "commit": "https://github.com/apache/falcon/commit/f769933b63a0bd11a6fb766b324d312e69700add",
        "parent": "https://github.com/apache/falcon/commit/e2545b0874d206f3be88d4b3ac7003eae1161c44",
        "bug_id": "falcon_f769933",
        "file": [
            {
                "sha": "68d900ac5e9a2a42ce8387274884022bfba7d537",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/f769933b63a0bd11a6fb766b324d312e69700add/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/f769933b63a0bd11a6fb766b324d312e69700add/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=f769933b63a0bd11a6fb766b324d312e69700add",
                "patch": "@@ -152,6 +152,9 @@ Trunk (Unreleased)\n     FALCON-354 Bug when MetadataMappingService is not configured as one of the\n     application services. (Venkatesh Seetharam)\n \n+    FALCON-360 Lineage recording fails with NPE for processes with >1 inputs.\n+    (Venkatesh Seetharam)\n+\n Release Version: 0.4-incubating\n \n    NEW FEATURES",
                "deletions": 0
            },
            {
                "sha": "b02ba9a5a1606c09a6d8f66c02e018458e7d65cd",
                "filename": "common/src/main/java/org/apache/falcon/metadata/InstanceRelationshipGraphBuilder.java",
                "blob_url": "https://github.com/apache/falcon/blob/f769933b63a0bd11a6fb766b324d312e69700add/common/src/main/java/org/apache/falcon/metadata/InstanceRelationshipGraphBuilder.java",
                "raw_url": "https://github.com/apache/falcon/raw/f769933b63a0bd11a6fb766b324d312e69700add/common/src/main/java/org/apache/falcon/metadata/InstanceRelationshipGraphBuilder.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/metadata/InstanceRelationshipGraphBuilder.java?ref=f769933b63a0bd11a6fb766b324d312e69700add",
                "patch": "@@ -139,9 +139,9 @@ public void addInputFeedInstances(Map<String, String> lineageMetadata,\n         }\n \n         String[] inputFeedNames =\n-                lineageMetadata.get(LineageArgs.INPUT_FEED_NAMES.getOptionName()).split(\",\");\n+                lineageMetadata.get(LineageArgs.INPUT_FEED_NAMES.getOptionName()).split(\"#\");\n         String[] inputFeedInstancePaths =\n-                lineageMetadata.get(LineageArgs.INPUT_FEED_PATHS.getOptionName()).split(\",\");\n+                lineageMetadata.get(LineageArgs.INPUT_FEED_PATHS.getOptionName()).split(\"#\");\n \n         addFeedInstances(inputFeedNames, inputFeedInstancePaths,\n                 processInstance, FEED_PROCESS_EDGE_LABEL, lineageMetadata);\n@@ -156,6 +156,8 @@ public void addFeedInstances(String[] feedNames, String[] feedInstancePaths,\n             String feedName = feedNames[index];\n             String feedInstancePath = feedInstancePaths[index];\n \n+            LOG.info(\"Computing feed instance for : name=\" + feedName + \", path= \"\n+                    + feedInstancePath + \", in cluster: \" + clusterName);\n             String feedInstanceName = getFeedInstanceName(feedName, clusterName, feedInstancePath);\n             LOG.info(\"Adding feed instance: \" + feedInstanceName);\n             Vertex feedInstance = addVertex(feedInstanceName, FEED_INSTANCE_TYPE,",
                "deletions": 2
            },
            {
                "sha": "f5733922fadc914d8b91d0f4aa5bfc770de34d59",
                "filename": "common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/f769933b63a0bd11a6fb766b324d312e69700add/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/f769933b63a0bd11a6fb766b324d312e69700add/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java?ref=f769933b63a0bd11a6fb766b324d312e69700add",
                "patch": "@@ -74,9 +74,9 @@\n     public static final String WORKFLOW_NAME = \"imp-click-join-workflow\";\n     public static final String WORKFLOW_VERSION = \"1.0.9\";\n \n-    public static final String INPUT_FEED_NAMES = \"impression-feed,clicks-feed\";\n+    public static final String INPUT_FEED_NAMES = \"impression-feed#clicks-feed\";\n     public static final String INPUT_INSTANCE_PATHS =\n-        \"jail://global:00/falcon/impression-feed/20140101,jail://global:00/falcon/clicks-feed/20140101\";\n+        \"jail://global:00/falcon/impression-feed/20140101#jail://global:00/falcon/clicks-feed/20140101\";\n \n     public static final String OUTPUT_FEED_NAMES = \"imp-click-join1,imp-click-join2\";\n     public static final String OUTPUT_INSTANCE_PATHS =",
                "deletions": 2
            }
        ],
        "patched_files": [
            "InstanceRelationshipGraphBuilder.java",
            "MetadataMappingService.java"
        ],
        "unit_tests": [
            "MetadataMappingServiceTest.java"
        ]
    },
    "falcon_662adb2": {
        "repo": "falcon",
        "message": "FALCON-459 Lineage resource API fails with NPE for bad query params. Contributed by Sowmya Ramesh",
        "commit": "https://github.com/apache/falcon/commit/662adb2154cbd47bbdaebceae529013ed37d125f",
        "parent": "https://github.com/apache/falcon/commit/ab07b44bb76237765e6dc2d8c576d69ac70a59a9",
        "bug_id": "falcon_662adb2",
        "file": [
            {
                "sha": "b24fc4b0f4de27d5ac55cc2a559eb5631c401cef",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/662adb2154cbd47bbdaebceae529013ed37d125f/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/662adb2154cbd47bbdaebceae529013ed37d125f/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=662adb2154cbd47bbdaebceae529013ed37d125f",
                "patch": "@@ -16,6 +16,9 @@ Trunk (Unreleased)\n   OPTIMIZATIONS\n \n   BUG FIXES\n+   FALCON-459 Lineage resource API fails with NPE for bad query params\n+   (Sowmya Ramesh via Venkatesh Seetharam)\n+\n    FALCON-456 Custom DistCp conflict with core DistCp in container classpath\n    fails falcon workflows (Venkatesh Seetharam)\n ",
                "deletions": 0
            },
            {
                "sha": "cf6b6b1ea3fa47a0105ae5a0a118f9aa560355ff",
                "filename": "prism/src/main/java/org/apache/falcon/resource/metadata/LineageMetadataResource.java",
                "blob_url": "https://github.com/apache/falcon/blob/662adb2154cbd47bbdaebceae529013ed37d125f/prism/src/main/java/org/apache/falcon/resource/metadata/LineageMetadataResource.java",
                "raw_url": "https://github.com/apache/falcon/raw/662adb2154cbd47bbdaebceae529013ed37d125f/prism/src/main/java/org/apache/falcon/resource/metadata/LineageMetadataResource.java",
                "status": "modified",
                "changes": 42,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/main/java/org/apache/falcon/resource/metadata/LineageMetadataResource.java?ref=662adb2154cbd47bbdaebceae529013ed37d125f",
                "patch": "@@ -38,6 +38,7 @@\n import org.codehaus.jettison.json.JSONObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.apache.commons.lang.StringUtils;\n \n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n@@ -143,6 +144,7 @@ public Response getVertices() {\n     public Response getVertex(@PathParam(\"id\") final String vertexId) {\n         checkIfMetadataMappingServiceIsEnabled();\n         LOG.info(\"Get vertex for vertexId= {}\", vertexId);\n+        validateInputs(\"Invalid argument: vertex id passed is null or empty.\", vertexId);\n         try {\n             Vertex vertex = findVertex(vertexId);\n \n@@ -182,6 +184,7 @@ public Response getVertexProperties(@PathParam(\"id\") final String vertexId,\n                                         final String relationships) {\n         checkIfMetadataMappingServiceIsEnabled();\n         LOG.info(\"Get vertex for vertexId= {}\", vertexId);\n+        validateInputs(\"Invalid argument: vertex id passed is null or empty.\", vertexId);\n         try {\n             Vertex vertex = findVertex(vertexId);\n \n@@ -281,6 +284,7 @@ public Response getVertices(@QueryParam(\"key\") final String key,\n                                 @QueryParam(\"value\") final String value) {\n         checkIfMetadataMappingServiceIsEnabled();\n         LOG.info(\"Get vertices for property key= {}, value= {}\", key, value);\n+        validateInputs(\"Invalid argument: key or value passed is null or empty.\", key, value);\n         try {\n             JSONObject response = buildJSONResponse(getGraph().getVertices(key, value));\n             return Response.ok(response).build();\n@@ -305,6 +309,8 @@ public Response getVertexEdges(@PathParam(\"id\") String vertexId,\n                                    @PathParam(\"direction\") String direction) {\n         checkIfMetadataMappingServiceIsEnabled();\n         LOG.info(\"Get vertex edges for vertexId= {}, direction= {}\", vertexId, direction);\n+        // Validate vertex id. Direction is validated in VertexQueryArguments.\n+        validateInputs(\"Invalid argument: vertex id or direction passed is null or empty.\", vertexId, direction);\n         try {\n             Vertex vertex = findVertex(vertexId);\n \n@@ -394,6 +400,7 @@ public Response getEdges() {\n     public Response getEdge(@PathParam(\"id\") final String edgeId) {\n         checkIfMetadataMappingServiceIsEnabled();\n         LOG.info(\"Get vertex for edgeId= {}\", edgeId);\n+        validateInputs(\"Invalid argument: edge id passed is null or empty.\", edgeId);\n         try {\n             Edge edge = getGraph().getEdge(edgeId);\n             if (edge == null) {\n@@ -439,6 +446,17 @@ private void checkIfMetadataMappingServiceIsEnabled() {\n         }\n     }\n \n+    private static void validateInputs(String errorMsg, String... inputs) {\n+        for (String input : inputs) {\n+            if (StringUtils.isEmpty(input)) {\n+                throw new WebApplicationException(Response.status(Response.Status.BAD_REQUEST)\n+                        .entity(errorMsg)\n+                        .type(\"text/plain\")\n+                        .build());\n+            }\n+        }\n+    }\n+\n     private enum ReturnType {VERTICES, EDGES, COUNT, VERTEX_IDS}\n \n     public static final String OUT_E = \"outE\";\n@@ -464,51 +482,51 @@ private void checkIfMetadataMappingServiceIsEnabled() {\n         private final boolean countOnly;\n \n         public VertexQueryArguments(String directionSegment) {\n-            if (directionSegment.equals(OUT_E)) {\n+            if (OUT_E.equals(directionSegment)) {\n                 returnType = ReturnType.EDGES;\n                 queryDirection = Direction.OUT;\n                 countOnly = false;\n-            } else if (directionSegment.equals(IN_E)) {\n+            } else if (IN_E.equals(directionSegment)) {\n                 returnType = ReturnType.EDGES;\n                 queryDirection = Direction.IN;\n                 countOnly = false;\n-            } else if (directionSegment.equals(BOTH_E)) {\n+            } else if (BOTH_E.equals(directionSegment)) {\n                 returnType = ReturnType.EDGES;\n                 queryDirection = Direction.BOTH;\n                 countOnly = false;\n-            } else if (directionSegment.equals(OUT)) {\n+            } else if (OUT.equals(directionSegment)) {\n                 returnType = ReturnType.VERTICES;\n                 queryDirection = Direction.OUT;\n                 countOnly = false;\n-            } else if (directionSegment.equals(IN)) {\n+            } else if (IN.equals(directionSegment)) {\n                 returnType = ReturnType.VERTICES;\n                 queryDirection = Direction.IN;\n                 countOnly = false;\n-            } else if (directionSegment.equals(BOTH)) {\n+            } else if (BOTH.equals(directionSegment)) {\n                 returnType = ReturnType.VERTICES;\n                 queryDirection = Direction.BOTH;\n                 countOnly = false;\n-            } else if (directionSegment.equals(BOTH_COUNT)) {\n+            } else if (BOTH_COUNT.equals(directionSegment)) {\n                 returnType = ReturnType.COUNT;\n                 queryDirection = Direction.BOTH;\n                 countOnly = true;\n-            } else if (directionSegment.equals(IN_COUNT)) {\n+            } else if (IN_COUNT.equals(directionSegment)) {\n                 returnType = ReturnType.COUNT;\n                 queryDirection = Direction.IN;\n                 countOnly = true;\n-            } else if (directionSegment.equals(OUT_COUNT)) {\n+            } else if (OUT_COUNT.equals(directionSegment)) {\n                 returnType = ReturnType.COUNT;\n                 queryDirection = Direction.OUT;\n                 countOnly = true;\n-            } else if (directionSegment.equals(BOTH_IDS)) {\n+            } else if (BOTH_IDS.equals(directionSegment)) {\n                 returnType = ReturnType.VERTEX_IDS;\n                 queryDirection = Direction.BOTH;\n                 countOnly = false;\n-            } else if (directionSegment.equals(IN_IDS)) {\n+            } else if (IN_IDS.equals(directionSegment)) {\n                 returnType = ReturnType.VERTEX_IDS;\n                 queryDirection = Direction.IN;\n                 countOnly = false;\n-            } else if (directionSegment.equals(OUT_IDS)) {\n+            } else if (OUT_IDS.equals(directionSegment)) {\n                 returnType = ReturnType.VERTEX_IDS;\n                 queryDirection = Direction.OUT;\n                 countOnly = false;",
                "deletions": 12
            },
            {
                "sha": "26c24c70f9a476e81ca2cd8aad08fa9a55cdf675",
                "filename": "prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/662adb2154cbd47bbdaebceae529013ed37d125f/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/662adb2154cbd47bbdaebceae529013ed37d125f/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/test/java/org/apache/falcon/resource/metadata/LineageMetadataResourceTest.java?ref=662adb2154cbd47bbdaebceae529013ed37d125f",
                "patch": "@@ -214,6 +214,18 @@ public void testGetVerticesWithKeyValue() throws Exception {\n         assertBasicVertexProperties(vertex, vertexProperties);\n     }\n \n+    @Test\n+    public void testGetVerticesWithInvalidKeyValue() throws Exception {\n+        LineageMetadataResource resource = new LineageMetadataResource();\n+        try {\n+            resource.getVertices(null, null);\n+        } catch(WebApplicationException e) {\n+            Assert.assertEquals(e.getResponse().getStatus(), Response.Status.BAD_REQUEST.getStatusCode());\n+            Assert.assertEquals(e.getResponse().getEntity().toString(),\n+                    \"Invalid argument: key or value passed is null or empty.\");\n+        }\n+    }\n+\n     @Test\n     public void testVertexEdgesForIdAndDirectionOut() throws Exception {\n         String processInstance = PROCESS_ENTITY_NAME + \"/2014-01-01T01:00Z\";\n@@ -265,6 +277,15 @@ public void testVertexEdgesForIdAndDirectionBoth() throws Exception {\n         verifyVertexEdgesCount(vertexId, LineageMetadataResource.BOTH_IDS, expectedSize);\n     }\n \n+\n+\n+    @Test (expectedExceptions = WebApplicationException.class)\n+    public void testVertexEdgesForIdAndInvalidDirection() throws Exception {\n+        LineageMetadataResource resource = new LineageMetadataResource();\n+        resource.getVertexEdges(\"0\", \"blah\");\n+        Assert.fail(\"The API call should have thrown an exception\");\n+    }\n+\n     private void verifyVertexEdges(String vertexId, String direction,\n                                    int expectedSize, List<String> expected) {\n         LineageMetadataResource resource = new LineageMetadataResource();",
                "deletions": 0
            }
        ],
        "patched_files": [
            "LineageMetadataResource.java"
        ],
        "unit_tests": [
            "LineageMetadataResourceTest.java"
        ]
    },
    "falcon_1416f5e": {
        "repo": "falcon",
        "message": "FALCON-1327 When using triage on a server for a process which does not exist on that server, a NullPointerException is encountered. Contributed by Ajay Yadava.",
        "commit": "https://github.com/apache/falcon/commit/1416f5e704251b4174f1549e6f0546212ab0a842",
        "parent": "https://github.com/apache/falcon/commit/27c9a1f8b07d7b5985ab907c439583f50f99dcdc",
        "bug_id": "falcon_1416f5e",
        "file": [
            {
                "sha": "2fbafe7639599a9fcb515bee50088e1bb2cb195b",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/1416f5e704251b4174f1549e6f0546212ab0a842/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/1416f5e704251b4174f1549e6f0546212ab0a842/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=1416f5e704251b4174f1549e6f0546212ab0a842",
                "patch": "@@ -67,6 +67,9 @@ Trunk (Unreleased)\n     (Suhas Vasu)\n \n   BUG FIXES\n+    FALCON-1327 When using triage on a server for a process which does not exist on that server,\n+    a NullPointerException is encountered(Ajay Yadava)\n+\n     FALCON-1325 Triage API on prism, for an instance at which a process does not exist sends incorrect message(Ajay Yadava)\n \n     FALCON-1328 Error in Triage documentation(Karishma Gulati via Ajay Yadava)",
                "deletions": 0
            },
            {
                "sha": "248ee7b497c7c9eb0340485a99b01a7aaaa084f2",
                "filename": "prism/src/main/java/org/apache/falcon/resource/AbstractInstanceManager.java",
                "blob_url": "https://github.com/apache/falcon/blob/1416f5e704251b4174f1549e6f0546212ab0a842/prism/src/main/java/org/apache/falcon/resource/AbstractInstanceManager.java",
                "raw_url": "https://github.com/apache/falcon/raw/1416f5e704251b4174f1549e6f0546212ab0a842/prism/src/main/java/org/apache/falcon/resource/AbstractInstanceManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/main/java/org/apache/falcon/resource/AbstractInstanceManager.java?ref=1416f5e704251b4174f1549e6f0546212ab0a842",
                "patch": "@@ -644,7 +644,7 @@ public TriageResult triageInstance(String entityType, String entityName, String\n         checkName(entityName);\n         try {\n             EntityType type = EntityType.valueOf(entityType.toUpperCase());\n-            Entity entity = ConfigurationStore.get().get(type, entityName);\n+            Entity entity = EntityUtil.getEntity(type, entityName);\n             TriageResult result = new TriageResult(APIResult.Status.SUCCEEDED, \"Success\");\n             List<LineageGraphResult> triageGraphs = new LinkedList<>();\n             for (String clusterName : DeploymentUtil.getCurrentClusters()) {",
                "deletions": 1
            },
            {
                "sha": "29762ab5da0bf788d77cb05ec51594b3877dc47e",
                "filename": "prism/src/test/java/org/apache/falcon/resource/InstanceManagerTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/1416f5e704251b4174f1549e6f0546212ab0a842/prism/src/test/java/org/apache/falcon/resource/InstanceManagerTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/1416f5e704251b4174f1549e6f0546212ab0a842/prism/src/test/java/org/apache/falcon/resource/InstanceManagerTest.java",
                "status": "added",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/test/java/org/apache/falcon/resource/InstanceManagerTest.java?ref=1416f5e704251b4174f1549e6f0546212ab0a842",
                "patch": "@@ -0,0 +1,33 @@\n+/**\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.falcon.resource;\n+\n+import org.apache.falcon.FalconWebException;\n+import org.testng.annotations.Test;\n+\n+/**\n+ *\n+ */\n+public class InstanceManagerTest extends AbstractInstanceManager {\n+\n+    @Test(expectedExceptions = FalconWebException.class)\n+    public void test() {\n+        super.triageInstance(\"process\", \"random\", \"2014-05-07T00:00Z\", \"default\");\n+    }\n+}",
                "deletions": 0
            }
        ],
        "patched_files": [
            "AbstractInstanceManager.java",
            "InstanceManager.java"
        ],
        "unit_tests": [
            "InstanceManagerTest.java"
        ]
    },
    "falcon_52586b3": {
        "repo": "falcon",
        "message": "FALCON-1461 NPE in DateValidator validate. Contributed by Raghav Kumar Gautam",
        "commit": "https://github.com/apache/falcon/commit/52586b3e36b93dd71d9325f190dcb0917a42bda7",
        "parent": "https://github.com/apache/falcon/commit/947ed13b71aa80236396cbe86549feeb1c509a1c",
        "bug_id": "falcon_52586b3",
        "file": [
            {
                "sha": "b7a28316efe1d9139555361272ad6b33940f5836",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/52586b3e36b93dd71d9325f190dcb0917a42bda7/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/52586b3e36b93dd71d9325f190dcb0917a42bda7/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=52586b3e36b93dd71d9325f190dcb0917a42bda7",
                "patch": "@@ -23,6 +23,8 @@ Trunk (Unreleased)\n   OPTIMIZATIONS\n \n   BUG FIXES\n+    FALCON-1461 NPE in DateValidator validate(Raghav Kumar Gautam via Sowmya Ramesh)\n+\n     FALCON-1446 Flaky TaskLogRetrieverYarnTest(Narayan Periwal via Pallavi Rao)\n \n     FALCON-1443 NPE in shutdown hook(Pallavi Rao via Ajay Yadava)",
                "deletions": 0
            },
            {
                "sha": "e211f57d01ddcd974fe1c3be3915f1821148531a",
                "filename": "client/src/main/java/org/apache/falcon/entity/v0/DateValidator.java",
                "blob_url": "https://github.com/apache/falcon/blob/52586b3e36b93dd71d9325f190dcb0917a42bda7/client/src/main/java/org/apache/falcon/entity/v0/DateValidator.java",
                "raw_url": "https://github.com/apache/falcon/raw/52586b3e36b93dd71d9325f190dcb0917a42bda7/client/src/main/java/org/apache/falcon/entity/v0/DateValidator.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/main/java/org/apache/falcon/entity/v0/DateValidator.java?ref=52586b3e36b93dd71d9325f190dcb0917a42bda7",
                "patch": "@@ -17,6 +17,8 @@\n  */\n package org.apache.falcon.entity.v0;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n \n@@ -39,7 +41,9 @@ private DateValidator() {\n      * @return true valid date fromat, false invalid date format\n      */\n     public static boolean validate(final String date) {\n-\n+        if (StringUtils.isBlank(date)) {\n+            return false;\n+        }\n         Matcher matcher = PATTERN.matcher(date);\n \n         if (matcher.matches()) {",
                "deletions": 1
            },
            {
                "sha": "a1adb2440c059f83d6dde79701535e32ff323d5a",
                "filename": "client/src/test/java/org/apache/falcon/entity/v0/DateValidatorTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/52586b3e36b93dd71d9325f190dcb0917a42bda7/client/src/test/java/org/apache/falcon/entity/v0/DateValidatorTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/52586b3e36b93dd71d9325f190dcb0917a42bda7/client/src/test/java/org/apache/falcon/entity/v0/DateValidatorTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/test/java/org/apache/falcon/entity/v0/DateValidatorTest.java?ref=52586b3e36b93dd71d9325f190dcb0917a42bda7",
                "patch": "@@ -62,6 +62,7 @@\n             new Object[]{\"2010-6-31T00:00Z\", }, new Object[]{\"2010-06-31T00:00Z\", },\n             new Object[]{\"2010-9-31T00:00Z\", }, new Object[]{\"2010-09-31T00:00Z\", },\n             new Object[]{\"2010-11-31T00:00Z\", }, new Object[]{\"1999-04-31T01:00Z\", },\n+            new Object[]{null, }, new Object[]{\"\", }, new Object[]{\"      \", },\n         };\n     }\n ",
                "deletions": 0
            }
        ],
        "patched_files": [
            "DateValidator.java"
        ],
        "unit_tests": [
            "DateValidatorTest.java"
        ]
    },
    "falcon_0681050": {
        "repo": "falcon",
        "message": "NPE in oozieFeedMapper when cluster type=null and deletion of logs for rerun cases",
        "commit": "https://github.com/apache/falcon/commit/0681050a78533f091680a945548401047d419877",
        "parent": "https://github.com/apache/falcon/commit/a42042c36f2c45cb3cd576115b73dbe993433d98",
        "bug_id": "falcon_0681050",
        "file": [
            {
                "sha": "de28922856979cb678b807d138b7608d85edd8df",
                "filename": "common/src/main/java/org/apache/ivory/cleanup/AbstractCleanupHandler.java",
                "blob_url": "https://github.com/apache/falcon/blob/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/AbstractCleanupHandler.java",
                "raw_url": "https://github.com/apache/falcon/raw/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/AbstractCleanupHandler.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/ivory/cleanup/AbstractCleanupHandler.java?ref=0681050a78533f091680a945548401047d419877",
                "patch": "@@ -109,6 +109,7 @@ protected void delete(Cluster cluster, Entity entity, long retention)\n \t\t\t\t\t} else {\n \t\t\t\t\t\tLOG.info(\"Deleted path: \" + log.getPath());\n \t\t\t\t\t}\n+\t\t\t\t\tdeleteParentIfEmpty(getFileSystem(cluster),log.getPath().getParent());\n \t\t\t\t} catch (IOException e) {\n \t\t\t\t\tthrow new IvoryException(\" Unable to delete log file : \"\n \t\t\t\t\t\t\t+ log.getPath() + \" for entity \" + entity.getName()\n@@ -124,6 +125,16 @@ protected void delete(Cluster cluster, Entity entity, long retention)\n \n \t}\n \n+\tprivate void deleteParentIfEmpty(FileSystem fs, Path parent) throws IOException {\n+\t\t FileStatus[] files = fs.listStatus(parent);\n+\t\tif(files!=null && files.length==0){\n+\t\t\tLOG.info(\"Parent path: \"+parent+ \" is empty, deleting path\");\n+\t\t\tfs.delete(parent, true);\n+\t\t\tdeleteParentIfEmpty(fs,parent.getParent());\n+\t\t}\n+\t\t\n+\t}\n+\n \tpublic abstract void cleanup() throws IvoryException;\n \n \tprotected abstract Path getLogPath(Entity entity, String stagingPath);",
                "deletions": 0
            },
            {
                "sha": "1a4675b6a0e2b5fc2fc19c52dcad2287d9e666c4",
                "filename": "common/src/main/java/org/apache/ivory/cleanup/FeedCleanupHandler.java",
                "blob_url": "https://github.com/apache/falcon/blob/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/FeedCleanupHandler.java",
                "raw_url": "https://github.com/apache/falcon/raw/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/FeedCleanupHandler.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/ivory/cleanup/FeedCleanupHandler.java?ref=0681050a78533f091680a945548401047d419877",
                "patch": "@@ -49,7 +49,7 @@ public void cleanup() throws IvoryException {\n \t@Override\n \tprotected Path getLogPath(Entity entity, String stagingPath) {\n \t\tPath logPath = new Path(stagingPath, \"ivory/workflows/feed/\"\n-\t\t\t\t+ entity.getName() + \"/logs/job-*\");\n+\t\t\t\t+ entity.getName() + \"/logs/job-*/*/*\");\n \t\treturn logPath;\n \t}\n ",
                "deletions": 1
            },
            {
                "sha": "2bc81cf3523a7f06dee79297495c338574f0d1dc",
                "filename": "common/src/main/java/org/apache/ivory/cleanup/ProcessCleanupHandler.java",
                "blob_url": "https://github.com/apache/falcon/blob/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/ProcessCleanupHandler.java",
                "raw_url": "https://github.com/apache/falcon/raw/0681050a78533f091680a945548401047d419877/common/src/main/java/org/apache/ivory/cleanup/ProcessCleanupHandler.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/ivory/cleanup/ProcessCleanupHandler.java?ref=0681050a78533f091680a945548401047d419877",
                "patch": "@@ -39,7 +39,7 @@ public void cleanup() throws IvoryException {\n \t\t\tfor (org.apache.ivory.entity.v0.process.Cluster cluster : process\n \t\t\t\t\t.getClusters().getClusters()) {\n \t\t\t\tLOG.info(\"Cleaning up logs for process:\" + processName\n-\t\t\t\t\t\t+ \" in  cluster: \" + cluster.getName());\n+\t\t\t\t\t\t+ \" in  cluster: \" + cluster.getName() + \" with retention: \"+retention);\n \t\t\t\tCluster currentCluster = STORE.get(EntityType.CLUSTER,\n \t\t\t\t\t\tcluster.getName());\n \t\t\t\tdelete(currentCluster, process, retention);\n@@ -51,7 +51,7 @@ public void cleanup() throws IvoryException {\n \t@Override\n \tprotected Path getLogPath(Entity entity, String stagingPath) {\n \t\tPath logPath = new Path(stagingPath, \"ivory/workflows/process/\"\n-\t\t\t\t+ entity.getName() + \"/logs/job-*\");\n+\t\t\t\t+ entity.getName() + \"/logs/job-*/*\");\n \t\treturn logPath;\n \t}\n ",
                "deletions": 2
            },
            {
                "sha": "7bc93539d224794658f67590ae2c38bbde4cf224",
                "filename": "common/src/test/java/org/apache/ivory/cleanup/LogCleanupServiceTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/0681050a78533f091680a945548401047d419877/common/src/test/java/org/apache/ivory/cleanup/LogCleanupServiceTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/0681050a78533f091680a945548401047d419877/common/src/test/java/org/apache/ivory/cleanup/LogCleanupServiceTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/ivory/cleanup/LogCleanupServiceTest.java?ref=0681050a78533f091680a945548401047d419877",
                "patch": "@@ -98,10 +98,11 @@ public void testProcessLogs() throws IOException, IvoryException,\n \t\tfs.mkdirs(instanceLogPath2);\n \t\tfs.mkdirs(instanceLogPath3);\n \t\tfs.mkdirs(instanceLogPath4);\n-\t\tThread.sleep(61000);\n+\n \t\t// fs.setTimes wont work on dirs\n \t\tfs.createNewFile(new Path(instanceLogPath, \"oozie.log\"));\n \t\tfs.createNewFile(new Path(instanceLogPath, \"pigAction_SUCCEEDED.log\"));\n+\t\tThread.sleep(61000);\n \n \t\tAbstractCleanupHandler processCleanupHandler = new ProcessCleanupHandler();\n \t\tprocessCleanupHandler.cleanup();",
                "deletions": 1
            },
            {
                "sha": "3838ffc3a843d7d33af364c57f72cf8691669d1c",
                "filename": "feed/src/main/java/org/apache/ivory/converter/OozieFeedMapper.java",
                "blob_url": "https://github.com/apache/falcon/blob/0681050a78533f091680a945548401047d419877/feed/src/main/java/org/apache/ivory/converter/OozieFeedMapper.java",
                "raw_url": "https://github.com/apache/falcon/raw/0681050a78533f091680a945548401047d419877/feed/src/main/java/org/apache/ivory/converter/OozieFeedMapper.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/feed/src/main/java/org/apache/ivory/converter/OozieFeedMapper.java?ref=0681050a78533f091680a945548401047d419877",
                "patch": "@@ -146,7 +146,7 @@ private ACTION getRetentionWorkflowAction(Cluster cluster, Path wfPath, String w\n             createReplicatonWorkflow(targetCluster, basePath, coordName);\n             \n             for (org.apache.ivory.entity.v0.feed.Cluster feedCluster : feed.getClusters().getClusters()) {\n-                if (feedCluster.getType().equals(ClusterType.SOURCE)) {\n+                if (feedCluster.getType()==ClusterType.SOURCE) {\n                     COORDINATORAPP coord = createAndGetCoord(feed,\n                             (Cluster) ConfigurationStore.get().get(EntityType.CLUSTER, feedCluster.getName()), targetCluster,\n                             bundlePath);",
                "deletions": 1
            }
        ],
        "patched_files": [
            "ProcessCleanupHandler.java",
            "OozieFeedMapper.java",
            "FeedCleanupHandler.java",
            "AbstractCleanupHandler.java",
            "LogCleanupService.java"
        ],
        "unit_tests": [
            "LogCleanupServiceTest.java",
            "OozieFeedMapperTest.java"
        ]
    },
    "falcon_60e96f4": {
        "repo": "falcon",
        "message": "FALCON-1323 Reverse lookup of feeds causes NPE. Contributed by Ajay Yadava.",
        "commit": "https://github.com/apache/falcon/commit/60e96f4a4088eb70eab7d6842dfd6d51bd521c98",
        "parent": "https://github.com/apache/falcon/commit/4cda54073f1a4389378c8e7365bca59c9728a424",
        "bug_id": "falcon_60e96f4",
        "file": [
            {
                "sha": "9847422f262ce9bd8b7624c44b1fb538de7cbdc3",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/CHANGES.txt",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=60e96f4a4088eb70eab7d6842dfd6d51bd521c98",
                "patch": "@@ -65,6 +65,8 @@ Trunk (Unreleased)\n     (Suhas Vasu)\n \n   BUG FIXES\n+    FALCON-1323 Reverse lookup of feeds causes NPE(Ajay Yadava)\n+\n     FALCON-1329 Falcon's idempotent behaviour breaks in some cases(Ajay Yadava)\n \n     FALCON-1282 Incorrect hdfs servers property for feed replication in secured environment(Venkat Ranganathan via Ajay Yadava)",
                "deletions": 0
            },
            {
                "sha": "f8d58aee65aca635624eee0eb0db9475f9e5a1d4",
                "filename": "client/src/main/java/org/apache/falcon/resource/FeedLookupResult.java",
                "blob_url": "https://github.com/apache/falcon/blob/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/client/src/main/java/org/apache/falcon/resource/FeedLookupResult.java",
                "raw_url": "https://github.com/apache/falcon/raw/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/client/src/main/java/org/apache/falcon/resource/FeedLookupResult.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/main/java/org/apache/falcon/resource/FeedLookupResult.java?ref=60e96f4a4088eb70eab7d6842dfd6d51bd521c98",
                "patch": "@@ -79,6 +79,7 @@ public String toString() {\n         if (elements != null) {\n             for (FeedProperties element : elements) {\n                 buffer.append(element.toString());\n+                buffer.append(\"\\n\");\n             }\n         }\n         return buffer.toString();",
                "deletions": 0
            },
            {
                "sha": "35f03b9cbe8e320472494590a0242878e0be2f1b",
                "filename": "common/src/main/java/org/apache/falcon/util/FalconRadixUtils.java",
                "blob_url": "https://github.com/apache/falcon/blob/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/common/src/main/java/org/apache/falcon/util/FalconRadixUtils.java",
                "raw_url": "https://github.com/apache/falcon/raw/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/common/src/main/java/org/apache/falcon/util/FalconRadixUtils.java",
                "status": "modified",
                "changes": 6,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/util/FalconRadixUtils.java?ref=60e96f4a4088eb70eab7d6842dfd6d51bd521c98",
                "patch": "@@ -193,7 +193,7 @@ public RadixNode getNextCandidate(RadixNode currentNode, String input) {\n                     String regex = key.substring(0, key.indexOf(\"}\") + 1);\n                     // match the text and the regex\n                     FeedDataPath.VARS var = getMatchingRegex(regex);\n-                    if (matchPart(regex, input.substring(0, var.getValueSize()))) {\n+                    if (matchPart(regex, remainingText.substring(0, var.getValueSize()))) {\n                         newRoot = child; // if it matches then this is the newRoot\n                         break;\n                     }\n@@ -251,10 +251,6 @@ private int getPatternsEffectiveLength(String templateString) {\n \n         private FeedDataPath.VARS getMatchingRegex(String inputPart) {\n             //inputPart will be something like ${YEAR}\n-\n-            inputPart = inputPart.replace(\"${\", \"\\\\$\\\\{\");\n-            inputPart = inputPart.replace(\"}\", \"\\\\}\");\n-\n             for (FeedDataPath.VARS var : FeedDataPath.VARS.values()) {\n                 if (inputPart.equals(\"${\" + var.name() + \"}\")) {\n                     return var;",
                "deletions": 5
            },
            {
                "sha": "e8b0e5bcf8a03837b9dfb4cbaf7a59a0712bbed2",
                "filename": "common/src/test/java/org/apache/falcon/util/RadixTreeTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/60e96f4a4088eb70eab7d6842dfd6d51bd521c98/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/util/RadixTreeTest.java?ref=60e96f4a4088eb70eab7d6842dfd6d51bd521c98",
                "patch": "@@ -26,6 +26,7 @@\n import org.testng.annotations.BeforeMethod;\n import org.testng.annotations.Test;\n \n+import java.util.Collection;\n import java.util.List;\n \n /**\n@@ -42,7 +43,6 @@ public void setUp() {\n         tree.insert(\"key1\", \"value1\");\n         tree.insert(\"key2\", \"value2\");\n         tree.insert(\"random\", \"random\");\n-\n     }\n \n     @AfterMethod\n@@ -67,7 +67,17 @@ public void testDuplicateKeyInsert() {\n         Assert.assertEquals(tree.find(\"duplicatekey\").size(), 2);\n         Assert.assertTrue(tree.find(\"duplicatekey\").contains(\"value1\"));\n         Assert.assertTrue(tree.find(\"duplicatekey\").contains(\"value2\"));\n+    }\n \n+    @Test\n+    public void testGetNextCandidate() {\n+        tree.insert(\"/projects/userplatform/${YEAR}-${MONTH}-${DAY}\", \"feed1\");\n+        tree.insert(\"/projects/userplatform/another\", \"feed2\");\n+        Collection<String> result = tree.find(\"/projects/userplatform/another\");\n+        Assert.assertTrue(result.contains(\"feed2\"));\n+\n+        result = tree.find(\"/projects/userplatform/2014-07-07\", regexAlgorithm);\n+        Assert.assertTrue(result.contains(\"feed1\"));\n     }\n \n     @Test",
                "deletions": 1
            }
        ],
        "patched_files": [
            "RadixTree.java",
            "FalconRadixUtils.java",
            "FeedLookupResult.java"
        ],
        "unit_tests": [
            "RadixTreeTest.java"
        ]
    },
    "falcon_e938cf9": {
        "repo": "falcon",
        "message": "1. Timeout added\n2. Code reshuffle for clarity in error messages\n3. Fix for NullPointerException if client.properties not present",
        "commit": "https://github.com/apache/falcon/commit/e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
        "parent": "https://github.com/apache/falcon/commit/9ea8db84490472e17df1ec103797baf97da13f5b",
        "bug_id": "falcon_e938cf9",
        "file": [
            {
                "sha": "a4bc0f2b3af670110440a8d0b0dc3ed7159afb64",
                "filename": "client/src/main/java/org/apache/ivory/cli/IvoryCLI.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/client/src/main/java/org/apache/ivory/cli/IvoryCLI.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/client/src/main/java/org/apache/ivory/cli/IvoryCLI.java",
                "status": "modified",
                "changes": 104,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/main/java/org/apache/ivory/cli/IvoryCLI.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -26,6 +26,7 @@\n import java.io.InputStreamReader;\n import java.net.ConnectException;\n import java.util.HashSet;\n+import java.util.Properties;\n import java.util.Set;\n \n import org.apache.commons.cli.CommandLine;\n@@ -160,7 +161,7 @@ public synchronized int run(String[] args) {\n \t}\n \n \tprivate void instanceCommand(CommandLine commandLine)\n-\t\t\tthrows IvoryCLIException {\n+\t\t\tthrows IvoryCLIException, IOException {\n \t\tString ivoryUrl = validateIvoryUrl(commandLine);\n \t\tIvoryClient client = new IvoryClient(ivoryUrl);\n \n@@ -174,15 +175,16 @@ private void instanceCommand(CommandLine commandLine)\n \t\tString start = commandLine.getOptionValue(START_OPT);\n \t\tString end = commandLine.getOptionValue(END_OPT);\n \t\tString filePath = commandLine.getOptionValue(FILE_PATH_OPT);\n-\t\tString type=commandLine.getOptionValue(INSTANCE_TYPE_OPT);\n-\t\tString runid=commandLine.getOptionValue(RUNID_OPT);\n+\t\tString type = commandLine.getOptionValue(INSTANCE_TYPE_OPT);\n+\t\tString runid = commandLine.getOptionValue(RUNID_OPT);\n \n \t\tvalidateInstanceCommands(optionsList, processName, start, end, filePath);\n \n \t\tif (optionsList.contains(RUNNING_OPT)) {\n \t\t\tresult = client.getRunningInstances(processName);\n \t\t} else if (optionsList.contains(STATUS_OPT)) {\n-\t\t\tresult = client.getStatusOfInstances(processName, start, end,type,runid);\n+\t\t\tresult = client.getStatusOfInstances(processName, start, end, type,\n+\t\t\t\t\trunid);\n \t\t} else if (optionsList.contains(KILL_OPT)) {\n \t\t\tresult = client.killInstances(processName, start, end);\n \t\t} else if (optionsList.contains(SUSPEND_OPT)) {\n@@ -215,7 +217,7 @@ private void validateInstanceCommands(Set<String> optionsList,\n \t}\n \n \tprivate void entityCommand(CommandLine commandLine)\n-\t\t\tthrows IvoryCLIException, ConnectException {\n+\t\t\tthrows IvoryCLIException, IOException {\n \t\tString ivoryUrl = validateIvoryUrl(commandLine);\n \t\tIvoryClient client = new IvoryClient(ivoryUrl);\n \n@@ -228,30 +230,41 @@ private void entityCommand(CommandLine commandLine)\n \t\tString entityType = commandLine.getOptionValue(ENTITY_TYPE_OPT);\n \t\tString entityName = commandLine.getOptionValue(ENTITY_NAME_OPT);\n \t\tString filePath = commandLine.getOptionValue(FILE_PATH_OPT);\n-\n-\t\tvalidateEntityCommands(optionsList, entityType, entityName, filePath);\n+\t\tvalidateEntityType(optionsList, entityType);\n \n \t\tif (optionsList.contains(SUBMIT_OPT)) {\n+\t\t\tvalidateFilePath(optionsList, filePath);\n \t\t\tresult = client.submit(entityType, filePath);\n \t\t} else if (optionsList.contains(UPDATE_OPT)) {\n+\t\t\tvalidateFilePath(optionsList, filePath);\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.update(entityType, entityName, filePath);\n \t\t} else if (optionsList.contains(SUBMIT_AND_SCHEDULE_OPT)) {\n+\t\t\tvalidateFilePath(optionsList, filePath);\n \t\t\tresult = client.submitAndSchedule(entityType, filePath);\n \t\t} else if (optionsList.contains(VALIDATE_OPT)) {\n+\t\t\tvalidateFilePath(optionsList, filePath);\n \t\t\tresult = client.validate(entityType, filePath);\n \t\t} else if (optionsList.contains(SCHEDULE_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.schedule(entityType, entityName);\n \t\t} else if (optionsList.contains(SUSPEND_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.suspend(entityType, entityName);\n \t\t} else if (optionsList.contains(RESUME_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.resume(entityType, entityName);\n \t\t} else if (optionsList.contains(DELETE_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.delete(entityType, entityName);\n \t\t} else if (optionsList.contains(STATUS_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.getStatus(entityType, entityName);\n \t\t} else if (optionsList.contains(DEFINITION_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.getDefinition(entityType, entityName);\n \t\t} else if (optionsList.contains(DEPENDENCY_OPT)) {\n+\t\t\tvalidateEntityName(optionsList, entityName);\n \t\t\tresult = client.getDependency(entityType, entityName);\n \t\t} else if (optionsList.contains(LIST_OPT)) {\n \t\t\tresult = client.getEntityList(entityType);\n@@ -263,32 +276,24 @@ private void entityCommand(CommandLine commandLine)\n \t\tSystem.out.println(result);\n \t}\n \n-\tprivate void validateEntityCommands(Set<String> optionsList,\n-\t\t\tString entityType, String entityName, String filePath)\n+\tprivate void validateFilePath(Set<String> optionsList, String filePath)\n \t\t\tthrows IvoryCLIException {\n-\t\tif (optionsList.contains(SUBMIT_AND_SCHEDULE_OPT)\n-\t\t\t\t|| optionsList.contains(SUBMIT_OPT)\n-\t\t\t\t|| optionsList.contains(VALIDATE_OPT)) {\n-\t\t\tif (entityType == null || entityType.equals(\"\") || filePath == null\n-\t\t\t\t\t|| filePath.equals(\"\")) {\n-\t\t\t\tthrow new IvoryCLIException(\"Missing argument: type or file\");\n-\t\t\t}\n-\t\t} else if (optionsList.contains(UPDATE_OPT)) {\n-\t\t\tif (entityType == null || entityType.equals(\"\")\n-\t\t\t\t\t|| entityName == null || entityName.equals(\"\")\n-\t\t\t\t\t|| filePath == null || filePath.equals(\"\")) {\n-\t\t\t\tthrow new IvoryCLIException(\n-\t\t\t\t\t\t\"Missing argument: type or name or file\");\n-\t\t\t}\n-\t\t} else if (optionsList.contains(LIST_OPT)) {\n-\t\t\tif (entityType == null || entityType.equals(\"\")) {\n-\t\t\t\tthrow new IvoryCLIException(\"Missing argument: type\");\n-\t\t\t}\n-\t\t} else {\n-\t\t\tif (entityType == null || entityType.equals(\"\")\n-\t\t\t\t\t|| entityName == null || entityName.equals(\"\")) {\n-\t\t\t\tthrow new IvoryCLIException(\"Missing argument: type or name\");\n-\t\t\t}\n+\t\tif (filePath == null || filePath.equals(\"\")) {\n+\t\t\tthrow new IvoryCLIException(\"Missing argument: file\");\n+\t\t}\n+\t}\n+\n+\tprivate void validateEntityName(Set<String> optionsList, String entityName)\n+\t\t\tthrows IvoryCLIException {\n+\t\tif (entityName == null || entityName.equals(\"\")) {\n+\t\t\tthrow new IvoryCLIException(\"Missing argument: name\");\n+\t\t}\n+\t}\n+\n+\tprivate void validateEntityType(Set<String> optionsList, String entityType)\n+\t\t\tthrows IvoryCLIException {\n+\t\tif (entityType == null || entityType.equals(\"\")) {\n+\t\t\tthrow new IvoryCLIException(\"Missing argument: type\");\n \t\t}\n \t}\n \n@@ -420,8 +425,12 @@ private Options instanceOptions() {\n \t\t\t\tEND_OPT,\n \t\t\t\ttrue,\n \t\t\t\t\"End time is optional for commands, status, kill, suspend, resume and re-run; if not specified then current time is considered as end time\");\n-\t\tOption type = new Option(INSTANCE_TYPE_OPT, true,\"Instance type is optional and user can provide type of instance, valid values are DEFAULT and LATE1\");\n-\t\tOption runid = new Option(RUNID_OPT, true,\"Instance runid  is optional and user can specify the runid, defaults to 0\");\n+\t\tOption type = new Option(\n+\t\t\t\tINSTANCE_TYPE_OPT,\n+\t\t\t\ttrue,\n+\t\t\t\t\"Instance type is optional and user can provide type of instance, valid values are DEFAULT and LATE1\");\n+\t\tOption runid = new Option(RUNID_OPT, true,\n+\t\t\t\t\"Instance runid  is optional and user can specify the runid, defaults to 0\");\n \t\tOption filePath = new Option(\n \t\t\t\tFILE_PATH_OPT,\n \t\t\t\ttrue,\n@@ -442,26 +451,29 @@ private Options instanceOptions() {\n \n \t}\n \n-\tprotected String validateIvoryUrl(CommandLine commandLine) {\n+\tprotected String validateIvoryUrl(CommandLine commandLine) throws IvoryCLIException {\n \t\tString url = commandLine.getOptionValue(URL_OPTION);\n \t\tif (url == null) {\n \t\t\ttry {\n \t\t\t\tInputStream input = IvoryCLI.class\n \t\t\t\t\t\t.getResourceAsStream(\"/client.properties\");\n-\t\t\t\tBufferedReader br = new BufferedReader(new InputStreamReader(\n-\t\t\t\t\t\tnew DataInputStream(input)));\n-\t\t\t\tString brline;\n-\t\t\t\tbrline = br.readLine();\n-\t\t\t\turl = brline.substring(brline.indexOf('=') + 1).trim();\n+\t\t\t\tif (input == null) {\n+\t\t\t\t\tSystem.err\n+\t\t\t\t\t\t\t.println(\"client.properties file does not exist, Ivory URL is \"\n+\t\t\t\t\t\t\t\t\t+ \"neither available in command option nor in the client.properties file\");\n+\t\t\t\t\tthrow new IvoryCLIException(\"Ivory URL not specified\");\n+\n+\t\t\t\t}\n+\t\t\t\tProperties prop = new Properties();\n+\t\t\t\tprop.load(input);\n+\t\t\t\tif(prop.containsKey(\"ivory.url\"))\n+\t\t\t\turl = prop.getProperty(\"ivory.url\");\n+\t\t\t\telse{\n+\t\t\t\t\tthrow new IvoryCLIException(\"ivory.url property not present in client.properties\");\n+\t\t\t\t}\n \t\t\t} catch (IOException e) {\n-\t\t\t\tSystem.err.println(\"IvoryURL.properties file does not exist\");\n \t\t\t\te.printStackTrace();\n \t\t\t}\n-\n-\t\t\tif (url == null) {\n-\t\t\t\tthrow new IllegalArgumentException(\n-\t\t\t\t\t\t\"Ivory URL is neither available in command option nor in the client.properties file\");\n-\t\t\t}\n \t\t}\n \t\treturn url;\n \t}",
                "deletions": 46
            },
            {
                "sha": "b42f0b2dc1a8af9e52d1db507ff6b4a54fada031",
                "filename": "client/src/main/java/org/apache/ivory/client/IvoryClient.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/client/src/main/java/org/apache/ivory/client/IvoryClient.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/client/src/main/java/org/apache/ivory/client/IvoryClient.java",
                "status": "modified",
                "changes": 54,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/main/java/org/apache/ivory/client/IvoryClient.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -22,6 +22,7 @@\n import java.io.FileNotFoundException;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Properties;\n \n import javax.ws.rs.HttpMethod;\n import javax.ws.rs.core.MediaType;\n@@ -56,18 +57,43 @@\n \t * \n \t * @param ivoryUrl\n \t *            of the server to which client interacts\n+\t * @throws IOException \n \t */\n-\tpublic IvoryClient(String ivoryUrl) {\n-\t\tthis.baseUrl = notEmpty(ivoryUrl, \"oozieUrl\");\n+\tpublic IvoryClient(String ivoryUrl) throws IOException {\n+\t\tthis.baseUrl = notEmpty(ivoryUrl, \"IvoryUrl\");\n \t\tif (!this.baseUrl.endsWith(\"/\")) {\n \t\t\tthis.baseUrl += \"/\";\n \t\t}\n-\t\tIvoryClient.service = Client.create(new DefaultClientConfig())\n-\t\t\t\t.resource(UriBuilder.fromUri(baseUrl).build());\n+\t\tClient client = Client.create(new DefaultClientConfig());\n+\t\tsetIvoryTimeOut(client);\n+\t\tIvoryClient.service = client.resource(UriBuilder.fromUri(baseUrl)\n+\t\t\t\t.build());\n+\t\tclient.resource(UriBuilder.fromUri(baseUrl).build());\n \n \t\t// addHeaders();\n \t}\n \n+\tprivate void setIvoryTimeOut(Client client) throws IOException {\n+\t\tProperties prop = new Properties();\n+\t\tInputStream input = IvoryClient.class\n+\t\t\t\t.getResourceAsStream(\"/client.properties\");\n+\t\tint readTimeout = 0;\n+\t\tint connectTimeout = 0;\n+\t\tif (input != null) {\n+\t\t\tprop.load(input);\n+\t\t\treadTimeout = prop.containsKey(\"ivory.read.timeout\") ? Integer\n+\t\t\t\t\t.parseInt(prop.getProperty(\"ivory.read.timeout\")) : 60000;\n+\t\t\tconnectTimeout = prop.containsKey(\"ivory.connect.timeout\") ? Integer\n+\t\t\t\t\t.parseInt(prop.getProperty(\"ivory.connect.timeout\"))\n+\t\t\t\t\t: 60000;\n+\t\t} else{\n+\t\t\treadTimeout = 60000;\n+\t\t\tconnectTimeout = 60000;\n+\t\t}\n+\t\tclient.setConnectTimeout(connectTimeout);\n+\t\tclient.setReadTimeout(readTimeout);\n+\t}\n+\n \t/**\n \t * Methods allowed on Entity Resources\n \t */\n@@ -234,42 +260,42 @@ public String getRunningInstances(String processName)\n \t\t\tthrows IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.RUNNING, processName, null,\n-\t\t\t\tnull, null,null,null);\n+\t\t\t\tnull, null, null, null);\n \t}\n \n \tpublic String getStatusOfInstances(String processName, String start,\n \t\t\tString end, String type, String runid) throws IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.STATUS, processName, start,\n-\t\t\t\tend, null,type, runid);\n+\t\t\t\tend, null, type, runid);\n \t}\n \n \tpublic String killInstances(String processName, String start, String end)\n \t\t\tthrows IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.KILL, processName, start,\n-\t\t\t\tend, null,null,null);\n+\t\t\t\tend, null, null, null);\n \t}\n \n \tpublic String suspendInstances(String processName, String start, String end)\n \t\t\tthrows IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.SUSPEND, processName,\n-\t\t\t\tstart, end, null,null,null);\n+\t\t\t\tstart, end, null, null, null);\n \t}\n \n \tpublic String resumeInstances(String processName, String start, String end)\n \t\t\tthrows IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.RESUME, processName, start,\n-\t\t\t\tend, null,null,null);\n+\t\t\t\tend, null, null, null);\n \t}\n \n \tpublic String rerunInstances(String processName, String start, String end,\n \t\t\tString filePath) throws IvoryCLIException {\n \n \t\treturn sendProcessInstanceRequest(Instances.RERUN, processName, start,\n-\t\t\t\tend, getServletInputStream(filePath),null,null);\n+\t\t\t\tend, getServletInputStream(filePath), null, null);\n \t}\n \n \t/**\n@@ -384,8 +410,8 @@ private String sendEntityRequestWithNameAndObject(Entities entities,\n \t}\n \n \tprivate String sendProcessInstanceRequest(Instances instances,\n-\t\t\tString processName, String start, String end, InputStream props, String type, String runid)\n-\t\t\tthrows IvoryCLIException {\n+\t\t\tString processName, String start, String end, InputStream props,\n+\t\t\tString type, String runid) throws IvoryCLIException {\n \t\tWebResource resource = service.path(instances.path).path(processName);\n \t\tif (start != null) {\n \t\t\tresource = resource.queryParam(\"start\", start);\n@@ -458,9 +484,9 @@ private String parseProcessInstanceResult(ClientResponse clientResponse) {\n \t\t\t\tsb.append(\";log=\").append(instance.logFile);\n \t\t\t}\n \t\t\tsb.append(\"\\n\");\n-\t\t\tif(instance.actions!=null){\n+\t\t\tif (instance.actions != null) {\n \t\t\t\tsb.append(\"actions:\\n\");\n-\t\t\t\tfor(ProcessInstancesResult.InstanceAction action:instance.actions){\n+\t\t\t\tfor (ProcessInstancesResult.InstanceAction action : instance.actions) {\n \t\t\t\t\tsb.append(\"    \").append(action).append(\"\\n\");\n \t\t\t\t}\n \t\t\t}",
                "deletions": 14
            },
            {
                "sha": "b9b5a444e9b20dee9c5292b0721f996012124ab9",
                "filename": "common/src/main/java/org/apache/ivory/entity/parser/FeedEntityParser.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/common/src/main/java/org/apache/ivory/entity/parser/FeedEntityParser.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/common/src/main/java/org/apache/ivory/entity/parser/FeedEntityParser.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/ivory/entity/parser/FeedEntityParser.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -245,7 +245,11 @@ private void loadClusterProperties(Properties prop, org.apache.ivory.entity.v0.c\n \t\n \tprivate void validateFeedPartitionExpression(Feed feed, Cluster cluster)\n \t\t\tthrows IvoryException {\n-\t\tint expressions = 0;\n+\t\tint expressions = 0 , numSourceClusters = 0;\n+\t\tfor(Cluster cl : feed.getClusters().getCluster()){\n+\t\t\tif(cl.getType().value().equals(\"source\"))\n+\t\t\t\tnumSourceClusters++;\n+\t\t}\n \t\tif (cluster.getType().value() == \"source\"\n \t\t\t\t&& feed.getPartitions() != null\n \t\t\t\t&& feed.getPartitions().getPartition().size() != 0\n@@ -280,8 +284,8 @@ private void validateFeedPartitionExpression(Feed feed, Cluster cluster)\n \t\t\t\t\t\t\"Target Cluster do not have Partition Expression\");\n \t\t\telse if (feed.getPartitions() != null\n \t\t\t\t\t&& feed.getPartitions().getPartition().size() != 0\n-\t\t\t\t\t&& cluster.getPartitionExp() == null && cluster.getType().value() == \"source\" )\n-\t\t\t\tthrow new ValidationException(\"Partition Expression is missing\");\n+\t\t\t\t\t&& cluster.getPartitionExp() == null && cluster.getType().value() == \"source\" && numSourceClusters > 1)\n+\t\t\t\tthrow new ValidationException(\"Partition Expression is missing for the cluster: \" + cluster.getName());\n \t\t\telse if (feed.getPartitions() == null\n \t\t\t\t\t&& cluster.getPartitionExp() != null)\n \t\t\t\tthrow new ValidationException(",
                "deletions": 3
            },
            {
                "sha": "01f835f894f91212289032b90dbc369602bfe83a",
                "filename": "common/src/test/java/org/apache/ivory/entity/parser/FeedEntityParserTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/common/src/test/java/org/apache/ivory/entity/parser/FeedEntityParserTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/common/src/test/java/org/apache/ivory/entity/parser/FeedEntityParserTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/ivory/entity/parser/FeedEntityParserTest.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -179,7 +179,7 @@ public void testPartitionExpression() throws IvoryException {\n \t\tFeed feed = (Feed) parser\n \t\t\t\t.parseAndValidate(ProcessEntityParserTest.class\n \t\t\t\t\t\t.getResourceAsStream(FEED_XML));\n-\t\tfeed.getClusters().getCluster().get(0).setPartitionExp(null);\n+\t\tfeed.setPartitions(null);\n \t\tparser.validate(feed);\n \t}\n ",
                "deletions": 1
            },
            {
                "sha": "3edc9d735dee5ea5818eeeb900f4aa59246cbf39",
                "filename": "webapp/src/test/java/org/apache/ivory/cli/IvoryCLITest.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/java/org/apache/ivory/cli/IvoryCLITest.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/java/org/apache/ivory/cli/IvoryCLITest.java",
                "status": "modified",
                "changes": 20,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/webapp/src/test/java/org/apache/ivory/cli/IvoryCLITest.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -79,8 +79,10 @@ public void setup() throws Exception {\n \n \t\tbroker = new BrokerService();\n \t\tbroker.setUseJmx(true);\n+\t\tbroker.setUseLocalHostBrokerName(true);\n \t\tbroker.setDataDirectory(\"target/activemq\");\n-\t\tbroker.addConnector(BROKER_URL);\n+\t\t\n+\t\tbroker.setBrokerName(\"localhost\");\n \t\tbroker.start();\n \n \t}\n@@ -99,7 +101,7 @@ public void testSubmitEntityValidCommands() throws Exception {\n \t\tfilePath = overlayParametersOverTemplate(FEED_INPUT, overlay);\n \t\tAssert.assertEquals(0,\n \t\t\t\texecuteWithURL(\"entity -submit -type feed -file \" + filePath));\n-\n+\t\t\n \t\tfilePath = overlayParametersOverTemplate(FEED_OUTPUT, overlay);\n \t\tAssert.assertEquals(0,\n \t\t\t\texecuteWithURL(\"entity -submit -type feed -file \" + filePath));\n@@ -109,6 +111,8 @@ public void testSubmitEntityValidCommands() throws Exception {\n \t\t\t\t0,\n \t\t\t\texecuteWithURL(\"entity -submit -type process -file \" + filePath));\n \n+\n+\n \t}\n \n \t@Test(enabled = enableTest)\n@@ -300,6 +304,13 @@ public void testSuspendResumeStatusEntityValidCommands() throws Exception {\n \n \t}\n \n+\t@Test(enabled = enableTest)\n+\tpublic void testSubCommandPresence() throws Exception {\n+\t\tAssert.assertEquals(\n+\t\t\t\t-1,\n+\t\t\t\texecuteWithURL(\"entity -type cluster \"));\n+\t}\n+\t\n \t@Test(enabled = enableTest)\n \tpublic void testDeleteEntityValidCommands() throws Exception {\n \n@@ -453,7 +464,7 @@ public void testIvoryURL() throws Exception {\n \t\t\t\texecuteWithURL(\"entity -schedule -type process -name \"\n \t\t\t\t\t\t+ overlay.get(\"processName\")));\n \t\tThread.sleep(2000);\n-\n+\t\tSystem.out.println(System.getProperties().getProperty(\"java.class.path\", null));\n \t\tMap<String, String> newEnv = new HashMap<String, String>();\n \t\tnewEnv.put(\"IVORY_URL\", BASE_URL);\n \t\tsetEnv(newEnv);\n@@ -548,7 +559,8 @@ public void teardown() throws Exception {\n \t\tthis.cluster.shutdown();\n \t\tivoryServer.stop();\n \t}\n-\n+\t\n+\t\n \tpublic void submitTestFiles(Map<String, String> overlay) throws Exception {\n \n \t\tString filePath = overlayParametersOverTemplate(CLUSTER, overlay);",
                "deletions": 4
            },
            {
                "sha": "9eb822afd3a5d25e3b6b48f434e815af455ee559",
                "filename": "webapp/src/test/java/org/apache/ivory/resource/EntityManagerJerseyTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/java/org/apache/ivory/resource/EntityManagerJerseyTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/java/org/apache/ivory/resource/EntityManagerJerseyTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/webapp/src/test/java/org/apache/ivory/resource/EntityManagerJerseyTest.java?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -143,6 +143,7 @@ public void testStatus() throws Exception {\n \n         String status = response.getEntity(String.class);\n         Assert.assertEquals(status, \"SUBMITTED\");\n+        \n     }\n     @Test\n     public void testNotFoundStatus() throws IvoryWebException\n@@ -158,6 +159,7 @@ public void testNotFoundStatus() throws IvoryWebException\n     \tAssert.assertEquals(response.getStatus(), Response.Status.NOT_FOUND.getStatusCode());\n   \n     }\n+    \n     @Test\n     public void testValidate() throws IOException {\n ",
                "deletions": 0
            },
            {
                "sha": "ed67cb35e7d29ac4952324739e3ebd3306437809",
                "filename": "webapp/src/test/resources/org/apache/ivory/cli/feed-input.xml",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/resources/org/apache/ivory/cli/feed-input.xml",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/resources/org/apache/ivory/cli/feed-input.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/webapp/src/test/resources/org/apache/ivory/cli/feed-input.xml?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -31,7 +31,7 @@\n \t<late-arrival cut-off=\"months(3)\" />\n \n \t<clusters>\n-\t\t<cluster name=\"##clusterName##\" type=\"source\">\n+\t\t<cluster name=\"##clusterName##\" type=\"source\" partitionExp = \"*/${cluster.colo}\">\n \t\t\t<validity start=\"2009-01-01T00:00Z\" end=\"2012-12-31T23:59Z\"\n \t\t\t\ttimezone=\"UTC\" />\n \t\t\t<retention limit=\"months(36)\" action=\"delete\" /> <!-- Limit can be in Time or Instances 100, Action ENUM DELETE,ARCHIVE -->",
                "deletions": 1
            },
            {
                "sha": "453a236fce35a8250ffc85ee1d3cf1d20c1b10ed",
                "filename": "webapp/src/test/resources/org/apache/ivory/cli/feed-output.xml",
                "blob_url": "https://github.com/apache/falcon/blob/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/resources/org/apache/ivory/cli/feed-output.xml",
                "raw_url": "https://github.com/apache/falcon/raw/e938cf9a55ecf56a2c4552a4af9fdd43946eefee/webapp/src/test/resources/org/apache/ivory/cli/feed-output.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/webapp/src/test/resources/org/apache/ivory/cli/feed-output.xml?ref=e938cf9a55ecf56a2c4552a4af9fdd43946eefee",
                "patch": "@@ -31,7 +31,7 @@\n \t<late-arrival cut-off=\"hours(6)\" />\n \n \t<clusters>\n-\t\t<cluster name=\"##clusterName##\" type=\"source\">\n+\t\t<cluster name=\"##clusterName##\" type=\"source\" partitionExp=\"*/${cluster.colo}\">\n \t\t\t<validity start=\"2009-01-01T01:00Z\" end=\"2012-12-31T23:59Z\"\n \t\t\t\ttimezone=\"UTC\" />\n \t\t\t<retention limit=\"hours(10)\" action=\"delete\" /> <!-- Limit can be in Time or Instances 100, Action ENUM DELETE,ARCHIVE -->",
                "deletions": 1
            }
        ],
        "patched_files": [
            "IvoryCLI.java",
            "IvoryClient.java",
            "FeedEntityParser.java"
        ],
        "unit_tests": [
            "FeedEntityParserTest.java",
            "IvoryCLITest.java",
            "EntityManagerJerseyTest.java"
        ]
    },
    "falcon_8542798": {
        "repo": "falcon",
        "message": "FALCON-598 ProcessHelper throws NPE if the process has no inputs OR no outputs defined. Contributed by Balu Vellanki",
        "commit": "https://github.com/apache/falcon/commit/85427981afeacef84ef3c10fc5fc4190cf291545",
        "parent": "https://github.com/apache/falcon/commit/7827c39ea92d351865e02a60a3f82149670bfde1",
        "bug_id": "falcon_8542798",
        "file": [
            {
                "sha": "ae8e03d675b16250a4cf749373db003633078664",
                "filename": "CHANGES.txt",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/CHANGES.txt",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/CHANGES.txt",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/CHANGES.txt?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -61,6 +61,9 @@ Trunk (Unreleased)\n   OPTIMIZATIONS\n \n   BUG FIXES\n+   FALCON-598 ProcessHelper throws NPE if the process has no inputs OR no\n+   outputs defined (Balu Vellanki via Venkatesh Seetharam)\n+\n    FALCON-583 Post processing is broken in current trunk\n    (Venkatesh Seetharam via Suhas Vasu)\n ",
                "deletions": 0
            },
            {
                "sha": "2de177d19def70091476fe36f025b3565da6c091",
                "filename": "client/src/main/java/org/apache/falcon/resource/EntityList.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/client/src/main/java/org/apache/falcon/resource/EntityList.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/client/src/main/java/org/apache/falcon/resource/EntityList.java",
                "status": "modified",
                "changes": 16,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/client/src/main/java/org/apache/falcon/resource/EntityList.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -140,14 +140,18 @@ public String toString() {\n         }\n \n         if (process != null) {\n-            for (Input i : process.getInputs().getInputs()) {\n-                if (i.getFeed().equals(entityNameToMatch)) {\n-                    tagList.add(\"Input\");\n+            if (process.getInputs() != null) {\n+                for (Input i : process.getInputs().getInputs()) {\n+                    if (i.getFeed().equals(entityNameToMatch)) {\n+                        tagList.add(\"Input\");\n+                    }\n                 }\n             }\n-            for (Output o : process.getOutputs().getOutputs()) {\n-                if (o.getFeed().equals(entityNameToMatch)) {\n-                    tagList.add(\"Output\");\n+            if (process.getOutputs() != null) {\n+                for (Output o : process.getOutputs().getOutputs()) {\n+                    if (o.getFeed().equals(entityNameToMatch)) {\n+                        tagList.add(\"Output\");\n+                    }\n                 }\n             }\n         }",
                "deletions": 6
            },
            {
                "sha": "8e0c87a2087ccdd1f3f6676d07f73ba7aa0cd26b",
                "filename": "common/src/main/java/org/apache/falcon/entity/ProcessHelper.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/main/java/org/apache/falcon/entity/ProcessHelper.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/main/java/org/apache/falcon/entity/ProcessHelper.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/entity/ProcessHelper.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -59,16 +59,18 @@ public static String getProcessWorkflowName(String workflowName, String processN\n             return storageType;\n         }\n \n-        for (Input input : process.getInputs().getInputs()) {\n-            Feed feed = EntityUtil.getEntity(EntityType.FEED, input.getFeed());\n-            storageType = FeedHelper.getStorageType(feed, cluster);\n-            if (Storage.TYPE.TABLE == storageType) {\n-                break;\n+        if (process.getInputs() != null) {\n+            for (Input input : process.getInputs().getInputs()) {\n+                Feed feed = EntityUtil.getEntity(EntityType.FEED, input.getFeed());\n+                storageType = FeedHelper.getStorageType(feed, cluster);\n+                if (Storage.TYPE.TABLE == storageType) {\n+                    break;\n+                }\n             }\n         }\n \n         // If input feeds storage type is file system check storage type of output feeds\n-        if (Storage.TYPE.FILESYSTEM == storageType) {\n+        if (process.getOutputs() != null && Storage.TYPE.FILESYSTEM == storageType) {\n             for (Output output : process.getOutputs().getOutputs()) {\n                 Feed feed = EntityUtil.getEntity(EntityType.FEED, output.getFeed());\n                 storageType = FeedHelper.getStorageType(feed, cluster);",
                "deletions": 6
            },
            {
                "sha": "1b7a068a321e5e2a2836799996e054aa629f163a",
                "filename": "common/src/main/java/org/apache/falcon/metadata/EntityRelationshipGraphBuilder.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/main/java/org/apache/falcon/metadata/EntityRelationshipGraphBuilder.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/main/java/org/apache/falcon/metadata/EntityRelationshipGraphBuilder.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/metadata/EntityRelationshipGraphBuilder.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -358,8 +358,11 @@ private void updateProcessInputs(Inputs oldProcessInputs, Inputs newProcessInput\n     }\n \n     public static boolean areSame(Inputs oldProcessInputs, Inputs newProcessInputs) {\n-        if (oldProcessInputs == null && newProcessInputs == null\n-                || oldProcessInputs == null || newProcessInputs == null\n+        if (oldProcessInputs == null && newProcessInputs == null) {\n+            return true;\n+        }\n+\n+        if (oldProcessInputs == null || newProcessInputs == null\n                 || oldProcessInputs.getInputs().size() != newProcessInputs.getInputs().size()) {\n             return false;\n         }\n@@ -418,8 +421,11 @@ private void updateProcessOutputs(Outputs oldProcessOutputs, Outputs newProcessO\n     }\n \n     public static boolean areSame(Outputs oldProcessOutputs, Outputs newProcessOutputs) {\n-        if (oldProcessOutputs == null && newProcessOutputs == null\n-                || oldProcessOutputs == null || newProcessOutputs == null\n+        if (oldProcessOutputs == null && newProcessOutputs == null) {\n+            return true;\n+        }\n+\n+        if (oldProcessOutputs == null || newProcessOutputs == null\n                 || oldProcessOutputs.getOutputs().size() != newProcessOutputs.getOutputs().size()) {\n             return false;\n         }",
                "deletions": 4
            },
            {
                "sha": "b51caf89fd15320f5904eb3d65971d428b2de3a6",
                "filename": "common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java",
                "status": "modified",
                "changes": 38,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/metadata/MetadataMappingServiceTest.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -34,6 +34,10 @@\n import org.apache.falcon.entity.v0.feed.LocationType;\n import org.apache.falcon.entity.v0.feed.Locations;\n import org.apache.falcon.entity.v0.process.EngineType;\n+import org.apache.falcon.entity.v0.process.Input;\n+import org.apache.falcon.entity.v0.process.Inputs;\n+import org.apache.falcon.entity.v0.process.Output;\n+import org.apache.falcon.entity.v0.process.Outputs;\n import org.apache.falcon.entity.v0.process.Process;\n import org.apache.falcon.security.CurrentUser;\n import org.apache.falcon.service.Services;\n@@ -261,7 +265,8 @@ public void testOnFeedEntityChange() throws Exception {\n         Feed oldFeed = inputFeeds.get(0);\n         Feed newFeed = EntityBuilderTestUtil.buildFeed(oldFeed.getName(), clusterEntity,\n                 \"classified-as=Secured,source=data-warehouse\", \"reporting\");\n-        addStorage(newFeed, Storage.TYPE.FILESYSTEM, \"jail://global:00/falcon/impression-feed/20140101\");\n+        addStorage(newFeed, Storage.TYPE.FILESYSTEM,\n+                \"jail://global:00/falcon/impression-feed/20140101\");\n \n         try {\n             configStore.initiateUpdate(newFeed);\n@@ -324,6 +329,37 @@ public void testOnProcessEntityChange() throws Exception {\n         Assert.assertEquals(getEdgesCount(service.getGraph()), 69); // -6 = -2 outputs, -1 tag, -1 cluster, -2 pipelines\n     }\n \n+    @Test(dependsOnMethods = \"testOnProcessEntityChange\")\n+    public void testAreSame() throws Exception {\n+\n+        Inputs inputs1 = new Inputs();\n+        Inputs inputs2 = new Inputs();\n+        Outputs outputs1 = new Outputs();\n+        Outputs outputs2 = new Outputs();\n+        // return true when both are null\n+        Assert.assertTrue(EntityRelationshipGraphBuilder.areSame(inputs1, inputs2));\n+        Assert.assertTrue(EntityRelationshipGraphBuilder.areSame(outputs1, outputs2));\n+\n+        Input i1 = new Input();\n+        i1.setName(\"input1\");\n+        Input i2 = new Input();\n+        i2.setName(\"input2\");\n+        Output o1 = new Output();\n+        o1.setName(\"output1\");\n+        Output o2 = new Output();\n+        o2.setName(\"output2\");\n+\n+        inputs1.getInputs().add(i1);\n+        Assert.assertFalse(EntityRelationshipGraphBuilder.areSame(inputs1, inputs2));\n+        outputs1.getOutputs().add(o1);\n+        Assert.assertFalse(EntityRelationshipGraphBuilder.areSame(outputs1, outputs2));\n+\n+        inputs2.getInputs().add(i1);\n+        Assert.assertTrue(EntityRelationshipGraphBuilder.areSame(inputs1, inputs2));\n+        outputs2.getOutputs().add(o1);\n+        Assert.assertTrue(EntityRelationshipGraphBuilder.areSame(outputs1, outputs2));\n+    }\n+\n     private void verifyUpdatedEdges(Process newProcess) {\n         Vertex processVertex = getEntityVertex(newProcess.getName(), RelationshipType.PROCESS_ENTITY);\n ",
                "deletions": 1
            },
            {
                "sha": "4daf5d8bd8df6b6a1cd9ac44bbc69a8700798a6d",
                "filename": "oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java",
                "status": "modified",
                "changes": 79,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/oozie/src/test/java/org/apache/falcon/oozie/process/OozieProcessWorkflowBuilderTest.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -461,7 +461,8 @@ public void testHiveProcessWithNoInputsAndOutputs(String secureOption) throws Ex\n \n         ACTION hiveNode = getAction(parentWorkflow, \"user-action\");\n \n-        JAXBElement<org.apache.falcon.oozie.hive.ACTION> actionJaxbElement = OozieUtils.unMarshalHiveAction(hiveNode);\n+        JAXBElement<org.apache.falcon.oozie.hive.ACTION> actionJaxbElement = OozieUtils.unMarshalHiveAction(\n+                hiveNode);\n         org.apache.falcon.oozie.hive.ACTION hiveAction = actionJaxbElement.getValue();\n \n         Assert.assertEquals(hiveAction.getScript(),\n@@ -572,14 +573,18 @@ public void testProcessMapperForTableStorage(String secureOption) throws Excepti\n     private Map<String, String> getExpectedProperties(Feed inFeed, Feed outFeed,\n                                                       Process process) throws FalconException {\n         Map<String, String> expected = new HashMap<String, String>();\n-        for (Input input : process.getInputs().getInputs()) {\n-            CatalogStorage storage = (CatalogStorage) FeedHelper.createStorage(cluster, inFeed);\n-            propagateStorageProperties(input.getName(), storage, expected);\n+        if (process.getInputs() != null) {\n+            for (Input input : process.getInputs().getInputs()) {\n+                CatalogStorage storage = (CatalogStorage) FeedHelper.createStorage(cluster, inFeed);\n+                propagateStorageProperties(input.getName(), storage, expected);\n+            }\n         }\n \n-        for (Output output : process.getOutputs().getOutputs()) {\n-            CatalogStorage storage = (CatalogStorage) FeedHelper.createStorage(cluster, outFeed);\n-            propagateStorageProperties(output.getName(), storage, expected);\n+        if (process.getOutputs() != null) {\n+            for (Output output : process.getOutputs().getOutputs()) {\n+                CatalogStorage storage = (CatalogStorage) FeedHelper.createStorage(cluster, outFeed);\n+                propagateStorageProperties(output.getName(), storage, expected);\n+            }\n         }\n \n         return expected;\n@@ -696,4 +701,64 @@ public void testProcessWithNoInputsAndOutputs() throws Exception {\n             Assert.assertTrue(props.containsKey(property), \"expected property missing: \" + property);\n         }\n     }\n+\n+    @Test\n+    public void testProcessWithInputsNoOutputs() throws Exception {\n+        ClusterHelper.getInterface(cluster, Interfacetype.WRITE).setEndpoint(hdfsUrl);\n+\n+        URL resource = this.getClass().getResource(\"/config/process/process-no-outputs.xml\");\n+        Process processEntity = (Process) EntityType.PROCESS.getUnmarshaller().unmarshal(resource);\n+        ConfigurationStore.get().publish(EntityType.PROCESS, processEntity);\n+\n+        OozieEntityBuilder builder = OozieEntityBuilder.get(processEntity);\n+        Path bundlePath = new Path(\"/falcon/staging/workflows\", processEntity.getName());\n+        builder.build(cluster, bundlePath);\n+        assertTrue(fs.exists(bundlePath));\n+\n+        BUNDLEAPP bundle = getBundle(fs, bundlePath);\n+        assertEquals(EntityUtil.getWorkflowName(processEntity).toString(), bundle.getName());\n+        assertEquals(1, bundle.getCoordinator().size());\n+        assertEquals(EntityUtil.getWorkflowName(Tag.DEFAULT, processEntity).toString(),\n+                bundle.getCoordinator().get(0).getName());\n+        String coordPath = bundle.getCoordinator().get(0).getAppPath().replace(\"${nameNode}\", \"\");\n+\n+        COORDINATORAPP coord = getCoordinator(fs, new Path(coordPath));\n+        HashMap<String, String> props = getCoordProperties(coord);\n+        verifyEntityProperties(processEntity, cluster,\n+                WorkflowExecutionContext.EntityOperations.GENERATE, props);\n+        verifyBrokerProperties(cluster, props);\n+\n+        Assert.assertEquals(props.get(WorkflowExecutionArgs.INPUT_FEED_NAMES.getName()), \"clicks\");\n+        Assert.assertEquals(props.get(WorkflowExecutionArgs.FEED_NAMES.getName()), \"NONE\");\n+    }\n+\n+    @Test\n+    public void testProcessNoInputsWithOutputs() throws Exception {\n+        ClusterHelper.getInterface(cluster, Interfacetype.WRITE).setEndpoint(hdfsUrl);\n+\n+        URL resource = this.getClass().getResource(\"/config/process/process-no-inputs.xml\");\n+        Process processEntity = (Process) EntityType.PROCESS.getUnmarshaller().unmarshal(resource);\n+        ConfigurationStore.get().publish(EntityType.PROCESS, processEntity);\n+\n+        OozieEntityBuilder builder = OozieEntityBuilder.get(processEntity);\n+        Path bundlePath = new Path(\"/falcon/staging/workflows\", processEntity.getName());\n+        builder.build(cluster, bundlePath);\n+        assertTrue(fs.exists(bundlePath));\n+\n+        BUNDLEAPP bundle = getBundle(fs, bundlePath);\n+        assertEquals(EntityUtil.getWorkflowName(processEntity).toString(), bundle.getName());\n+        assertEquals(1, bundle.getCoordinator().size());\n+        assertEquals(EntityUtil.getWorkflowName(Tag.DEFAULT, processEntity).toString(),\n+                bundle.getCoordinator().get(0).getName());\n+        String coordPath = bundle.getCoordinator().get(0).getAppPath().replace(\"${nameNode}\", \"\");\n+\n+        COORDINATORAPP coord = getCoordinator(fs, new Path(coordPath));\n+        HashMap<String, String> props = getCoordProperties(coord);\n+        verifyEntityProperties(processEntity, cluster,\n+                WorkflowExecutionContext.EntityOperations.GENERATE, props);\n+        verifyBrokerProperties(cluster, props);\n+\n+        Assert.assertEquals(props.get(WorkflowExecutionArgs.FEED_NAMES.getName()), \"impressions\");\n+        Assert.assertEquals(props.get(WorkflowExecutionArgs.INPUT_FEED_NAMES.getName()), \"NONE\");\n+    }\n }",
                "deletions": 7
            },
            {
                "sha": "85d01dba2ee0761a4237f42527ad4f82e7edd5b3",
                "filename": "oozie/src/test/resources/config/process/process-no-inputs.xml",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/resources/config/process/process-no-inputs.xml",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/resources/config/process/process-no-inputs.xml",
                "status": "added",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/oozie/src/test/resources/config/process/process-no-inputs.xml?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+  -->\n+<process name=\"process-no-inputs\" xmlns=\"uri:falcon:process:0.1\">\n+    <!-- where -->\n+    <clusters>\n+        <cluster name=\"corp\">\n+            <validity start=\"2011-11-02T00:00Z\" end=\"2011-12-30T00:00Z\"/>\n+        </cluster>\n+    </clusters>\n+\n+    <!-- when -->\n+    <parallel>1</parallel>\n+    <order>LIFO</order>\n+    <frequency>hours(1)</frequency>\n+    <timezone>UTC</timezone>\n+\n+    <!-- what = outputs only -->\n+    <outputs>\n+        <output name=\"clicksummary\" feed=\"impressions\" instance=\"today(0,0)\"/>\n+    </outputs>\n+\n+    <!-- how -->\n+    <workflow engine=\"pig\" path=\"/apps/pig/id.pig\"/>\n+\n+    <retry policy=\"periodic\" delay=\"hours(10)\" attempts=\"3\"/>\n+\n+</process>",
                "deletions": 0
            },
            {
                "sha": "0acba6048eb6c203739bf5821e4cd3627ad15984",
                "filename": "oozie/src/test/resources/config/process/process-no-outputs.xml",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/resources/config/process/process-no-outputs.xml",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/oozie/src/test/resources/config/process/process-no-outputs.xml",
                "status": "added",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/oozie/src/test/resources/config/process/process-no-outputs.xml?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -0,0 +1,43 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed to the Apache Software Foundation (ASF) under one\n+  or more contributor license agreements.  See the NOTICE file\n+  distributed with this work for additional information\n+  regarding copyright ownership.  The ASF licenses this file\n+  to you under the Apache License, Version 2.0 (the\n+  \"License\"); you may not use this file except in compliance\n+  with the License.  You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+  -->\n+<process name=\"process-no-outputs\" xmlns=\"uri:falcon:process:0.1\">\n+    <!-- where -->\n+    <clusters>\n+        <cluster name=\"corp\">\n+            <validity start=\"2011-11-02T00:00Z\" end=\"2011-12-30T00:00Z\"/>\n+        </cluster>\n+    </clusters>\n+\n+    <!-- when -->\n+    <parallel>1</parallel>\n+    <order>LIFO</order>\n+    <frequency>hours(1)</frequency>\n+    <timezone>UTC</timezone>\n+\n+    <!-- what = inputs only -->\n+    <inputs>\n+        <input name=\"click\" feed=\"clicks\" start=\"yesterday(0,0)\" end=\"latest(0)\" partition=\"*/US\"/>\n+    </inputs>\n+\n+    <!-- how -->\n+    <workflow engine=\"pig\" path=\"/apps/pig/id.pig\"/>\n+\n+    <retry policy=\"periodic\" delay=\"hours(10)\" attempts=\"3\"/>\n+\n+</process>",
                "deletions": 0
            },
            {
                "sha": "bacc20f09f1fc7180aebf3c2c51acae6c2fa9a3d",
                "filename": "rerun/src/main/java/org/apache/falcon/rerun/handler/LateRerunHandler.java",
                "blob_url": "https://github.com/apache/falcon/blob/85427981afeacef84ef3c10fc5fc4190cf291545/rerun/src/main/java/org/apache/falcon/rerun/handler/LateRerunHandler.java",
                "raw_url": "https://github.com/apache/falcon/raw/85427981afeacef84ef3c10fc5fc4190cf291545/rerun/src/main/java/org/apache/falcon/rerun/handler/LateRerunHandler.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/rerun/src/main/java/org/apache/falcon/rerun/handler/LateRerunHandler.java?ref=85427981afeacef84ef3c10fc5fc4190cf291545",
                "patch": "@@ -154,11 +154,13 @@ public static Date getCutOffTime(Entity entity, String nominalTime) throws Falco\n             for (LateInput lp : process.getLateProcess().getLateInputs()) {\n                 Feed feed = null;\n                 String endInstanceTime = \"\";\n-                for (Input input : process.getInputs().getInputs()) {\n-                    if (input.getName().equals(lp.getInput())) {\n-                        endInstanceTime = input.getEnd();\n-                        feed = store.get(EntityType.FEED, input.getFeed());\n-                        break;\n+                if (process.getInputs() != null) {\n+                    for (Input input : process.getInputs().getInputs()) {\n+                        if (input.getName().equals(lp.getInput())) {\n+                            endInstanceTime = input.getEnd();\n+                            feed = store.get(EntityType.FEED, input.getFeed());\n+                            break;\n+                        }\n                     }\n                 }\n                 if (feed == null) {",
                "deletions": 5
            }
        ],
        "patched_files": [
            "LateRerunHandler.java",
            "ProcessHelper.java",
            "EntityRelationshipGraphBuilder.java",
            "EntityList.java",
            "MetadataMappingService.java",
            "OozieProcessWorkflowBuilder.java"
        ],
        "unit_tests": [
            "MetadataMappingServiceTest.java",
            "TestLateRerunHandler.java",
            "OozieProcessWorkflowBuilderTest.java"
        ]
    },
    "falcon_c790761": {
        "repo": "falcon",
        "message": "FALCON-1063 Falcon CLI list entities operation throws NullPointerException. Contributed by Pallavi Rao",
        "commit": "https://github.com/apache/falcon/commit/c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
        "parent": "https://github.com/apache/falcon/commit/e9e4ba4b683064b4044accc133f9a4c92400c8bf",
        "bug_id": "falcon_c790761",
        "file": [
            {
                "sha": "5aea0173df5550c6d9e05cb0249a5f6879753658",
                "filename": "FALCON-1063.patch",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/FALCON-1063.patch",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/FALCON-1063.patch",
                "status": "added",
                "changes": 204,
                "additions": 204,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/FALCON-1063.patch?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -0,0 +1,204 @@\n+diff --git a/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java b/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java\n+index 5a4dce6..85d7263 100644\n+--- a/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java\n++++ b/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java\n+@@ -116,11 +116,11 @@ public abstract class AbstractCleanupHandler {\n+                                                   Entity entity) throws FalconException {\n+         try {\n+             final AccessControlList acl = entity.getACL();\n+-            if (acl == null) {\n+-                throw new FalconException(\"ACL for entity \" + entity.getName() + \" is empty\");\n++            // To support backward compatibility, will only use the ACL owner only if present\n++            if (acl != null) {\n++                CurrentUser.authenticate(acl.getOwner()); // proxy user\n+             }\n+ \n+-            CurrentUser.authenticate(acl.getOwner()); // proxy user\n+             return HadoopClientFactory.get().createProxiedFileSystem(\n+                     ClusterHelper.getConfiguration(cluster));\n+         } catch (Exception e) {\n+diff --git a/common/src/main/java/org/apache/falcon/security/SecurityUtil.java b/common/src/main/java/org/apache/falcon/security/SecurityUtil.java\n+index b9fd37e..861f80f 100644\n+--- a/common/src/main/java/org/apache/falcon/security/SecurityUtil.java\n++++ b/common/src/main/java/org/apache/falcon/security/SecurityUtil.java\n+@@ -19,11 +19,13 @@\n+ package org.apache.falcon.security;\n+ \n+ import org.apache.falcon.FalconException;\n++import org.apache.falcon.entity.v0.Entity;\n+ import org.apache.falcon.util.ReflectionUtils;\n+ import org.apache.falcon.util.StartupProperties;\n+ import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;\n+ import org.apache.hadoop.security.authentication.server.PseudoAuthenticationHandler;\n+ \n++import java.io.IOException;\n+ import java.net.InetAddress;\n+ import java.net.UnknownHostException;\n+ \n+@@ -104,4 +106,16 @@ public final class SecurityUtil {\n+                 \"org.apache.falcon.security.DefaultAuthorizationProvider\");\n+         return ReflectionUtils.getInstanceByClassName(providerClassName);\n+     }\n++\n++    public static void tryProxy(Entity entity) throws IOException, FalconException {\n++        if (entity != null && entity.getACL() != null && SecurityUtil.isAuthorizationEnabled()) {\n++            final String aclOwner = entity.getACL().getOwner();\n++            final String aclGroup = entity.getACL().getGroup();\n++\n++            if (SecurityUtil.getAuthorizationProvider().shouldProxy(\n++                    CurrentUser.getAuthenticatedUGI(), aclOwner, aclGroup)) {\n++                CurrentUser.proxy(aclOwner, aclGroup);\n++            }\n++        }\n++    }\n+ }\n+diff --git a/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java b/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java\n+index 8e2e544..0df59b2 100644\n+--- a/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java\n++++ b/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java\n+@@ -55,6 +55,8 @@ public class LogCleanupServiceTest extends AbstractTestBase {\n+         + \"sample2\" + \"/logs/job-2010-01-01-01-00/000\");\n+     private final Path instanceLogPath4 = new Path(\"/projects/falcon/staging/falcon/workflows/process/\"\n+         + \"sample\" + \"/logs/latedata/2010-01-01-01-00\");\n++    private final Path instanceLogPath5 = new Path(\"/projects/falcon/staging/falcon/workflows/process/\"\n++            + \"sample3\" + \"/logs/job-2010-01-01-01-00/000\");\n+     private final Path feedInstanceLogPath = new Path(\"/projects/falcon/staging/falcon/workflows/feed/\"\n+         + \"impressionFeed\" + \"/logs/job-2010-01-01-01-00/testCluster/000\");\n+     private final Path feedInstanceLogPath1 = new Path(\"/projects/falcon/staging/falcon/workflows/feed/\"\n+@@ -90,15 +92,22 @@ public class LogCleanupServiceTest extends AbstractTestBase {\n+         Process otherProcess = (Process) process.copy();\n+         otherProcess.setName(\"sample2\");\n+         otherProcess.setFrequency(new Frequency(\"days(1)\"));\n++        Process noACLProcess = (Process) process.copy();\n++        noACLProcess.setName(\"sample3\");\n++        noACLProcess.setACL(null);\n+         ConfigurationStore.get().remove(EntityType.PROCESS,\n+                 otherProcess.getName());\n+         ConfigurationStore.get().publish(EntityType.PROCESS, otherProcess);\n++        ConfigurationStore.get().remove(EntityType.PROCESS,\n++                noACLProcess.getName());\n++        ConfigurationStore.get().publish(EntityType.PROCESS, noACLProcess);\n+ \n+         fs.mkdirs(instanceLogPath);\n+         fs.mkdirs(instanceLogPath1);\n+         fs.mkdirs(instanceLogPath2);\n+         fs.mkdirs(instanceLogPath3);\n+         fs.mkdirs(instanceLogPath4);\n++        fs.mkdirs(instanceLogPath5);\n+ \n+         // fs.setTimes wont work on dirs\n+         fs.createNewFile(new Path(instanceLogPath, \"oozie.log\"));\n+@@ -138,6 +147,7 @@ public class LogCleanupServiceTest extends AbstractTestBase {\n+         Assert.assertFalse(fs.exists(instanceLogPath));\n+         Assert.assertFalse(fs.exists(instanceLogPath1));\n+         Assert.assertFalse(fs.exists(instanceLogPath2));\n++        Assert.assertFalse(fs.exists(instanceLogPath5));\n+         Assert.assertTrue(fs.exists(instanceLogPath3));\n+     }\n+ \n+diff --git a/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java b/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java\n+index a36d916..7f9b405 100644\n+--- a/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java\n++++ b/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java\n+@@ -18,10 +18,17 @@\n+ \n+ package org.apache.falcon.security;\n+ \n++\n++import org.apache.falcon.FalconException;\n++import org.apache.falcon.entity.v0.process.*;\n++import org.apache.falcon.entity.v0.process.Process;\n+ import org.apache.falcon.util.StartupProperties;\n++import org.mockito.Mockito;\n+ import org.testng.Assert;\n+ import org.testng.annotations.Test;\n+ \n++import java.io.IOException;\n++\n+ /**\n+  * Unit test for Security utils.\n+  */\n+@@ -81,4 +88,25 @@ public class SecurityUtilTest {\n+         Assert.assertEquals(SecurityUtil.getAuthorizationProvider().getClass(),\n+                 DefaultAuthorizationProvider.class);\n+     }\n++\n++    @Test\n++    public void testTryProxy() throws IOException, FalconException {\n++        Process process = Mockito.mock(Process.class);\n++        StartupProperties.get().setProperty(\"falcon.security.authorization.enabled\", \"true\");\n++        final String currentUser = System.getProperty(\"user.name\");\n++\n++        // When ACL not specified\n++        CurrentUser.authenticate(currentUser);\n++        SecurityUtil.tryProxy(process);\n++        Assert.assertEquals(CurrentUser.getUser(), currentUser);\n++\n++        ACL acl = new ACL();\n++        acl.setOwner(\"testuser\");\n++        acl.setGroup(\"users\");\n++        Mockito.when(process.getACL()).thenReturn(acl);\n++\n++        // When ACL is specified\n++        SecurityUtil.tryProxy(process);\n++        Assert.assertEquals(CurrentUser.getUser(), \"testuser\");\n++    }\n+ }\n+diff --git a/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java b/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java\n+index 9a044d9..67a66c6 100644\n+--- a/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java\n++++ b/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java\n+@@ -406,23 +406,13 @@ public abstract class AbstractEntityManager {\n+                             + \"Can't be submitted again. Try removing before submitting.\");\n+         }\n+ \n+-        tryProxy(entity); // proxy before validating since FS/Oozie needs to be proxied\n++        SecurityUtil.tryProxy(entity); // proxy before validating since FS/Oozie needs to be proxied\n+         validate(entity);\n+         configStore.publish(entityType, entity);\n+         LOG.info(\"Submit successful: ({}): {}\", type, entity.getName());\n+         return entity;\n+     }\n+ \n+-    private void tryProxy(Entity entity) throws IOException, FalconException {\n+-        final String aclOwner = entity.getACL().getOwner();\n+-        final String aclGroup = entity.getACL().getGroup();\n+-        if (SecurityUtil.isAuthorizationEnabled()\n+-                && SecurityUtil.getAuthorizationProvider().shouldProxy(\n+-                    CurrentUser.getAuthenticatedUGI(), aclOwner, aclGroup)) {\n+-            CurrentUser.proxy(aclOwner, aclGroup);\n+-        }\n+-    }\n+-\n+     /**\n+      * KLUDGE - Until ACL is mandated entity passed should be decorated for equals check to pass.\n+      * existingEntity in config store will have teh decoration and equals check fails\n+@@ -646,7 +636,7 @@ public abstract class AbstractEntityManager {\n+                 // the user who requested list query has no permission to access this entity. Skip this entity\n+                 continue;\n+             }\n+-            tryProxy(entity);\n++            SecurityUtil.tryProxy(entity);\n+ \n+             List<String> tags = EntityUtil.getTags(entity);\n+             List<String> pipelines = EntityUtil.getPipelines(entity);\n+diff --git a/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java b/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java\n+index 6b022c9..15e94cd 100644\n+--- a/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java\n++++ b/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java\n+@@ -141,14 +141,7 @@ public class FalconAuthorizationFilter implements Filter {\n+         try {\n+             EntityType type = EntityType.getEnum(entityType);\n+             Entity entity = EntityUtil.getEntity(type, entityName);\n+-            if (entity != null && entity.getACL() != null) {\n+-                final String aclOwner = entity.getACL().getOwner();\n+-                final String aclGroup = entity.getACL().getGroup();\n+-                if (authorizationProvider.shouldProxy(\n+-                        authenticatedUGI, aclOwner, aclGroup)) {\n+-                    CurrentUser.proxy(aclOwner, aclGroup);\n+-                }\n+-            }\n++            SecurityUtil.tryProxy(entity);\n+         } catch (FalconException ignore) {\n+             // do nothing\n+         }",
                "deletions": 0
            },
            {
                "sha": "85d7263f04c703fa0e54cc95b31f73a72f2178fc",
                "filename": "common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/cleanup/AbstractCleanupHandler.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -116,11 +116,11 @@ private FileSystem getFileSystemAsEntityOwner(Cluster cluster,\n                                                   Entity entity) throws FalconException {\n         try {\n             final AccessControlList acl = entity.getACL();\n-            if (acl == null) {\n-                throw new FalconException(\"ACL for entity \" + entity.getName() + \" is empty\");\n+            // To support backward compatibility, will only use the ACL owner only if present\n+            if (acl != null) {\n+                CurrentUser.authenticate(acl.getOwner()); // proxy user\n             }\n \n-            CurrentUser.authenticate(acl.getOwner()); // proxy user\n             return HadoopClientFactory.get().createProxiedFileSystem(\n                     ClusterHelper.getConfiguration(cluster));\n         } catch (Exception e) {",
                "deletions": 3
            },
            {
                "sha": "861f80ff79009ce0e7cd55d221efeaee34baf405",
                "filename": "common/src/main/java/org/apache/falcon/security/SecurityUtil.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/main/java/org/apache/falcon/security/SecurityUtil.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/main/java/org/apache/falcon/security/SecurityUtil.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/main/java/org/apache/falcon/security/SecurityUtil.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -19,11 +19,13 @@\n package org.apache.falcon.security;\n \n import org.apache.falcon.FalconException;\n+import org.apache.falcon.entity.v0.Entity;\n import org.apache.falcon.util.ReflectionUtils;\n import org.apache.falcon.util.StartupProperties;\n import org.apache.hadoop.security.authentication.server.KerberosAuthenticationHandler;\n import org.apache.hadoop.security.authentication.server.PseudoAuthenticationHandler;\n \n+import java.io.IOException;\n import java.net.InetAddress;\n import java.net.UnknownHostException;\n \n@@ -104,4 +106,16 @@ public static AuthorizationProvider getAuthorizationProvider() throws FalconExce\n                 \"org.apache.falcon.security.DefaultAuthorizationProvider\");\n         return ReflectionUtils.getInstanceByClassName(providerClassName);\n     }\n+\n+    public static void tryProxy(Entity entity) throws IOException, FalconException {\n+        if (entity != null && entity.getACL() != null && SecurityUtil.isAuthorizationEnabled()) {\n+            final String aclOwner = entity.getACL().getOwner();\n+            final String aclGroup = entity.getACL().getGroup();\n+\n+            if (SecurityUtil.getAuthorizationProvider().shouldProxy(\n+                    CurrentUser.getAuthenticatedUGI(), aclOwner, aclGroup)) {\n+                CurrentUser.proxy(aclOwner, aclGroup);\n+            }\n+        }\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "0df59b2aa2e4d8f9c01a24827ad2554891df4c6c",
                "filename": "common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/cleanup/LogCleanupServiceTest.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -55,6 +55,8 @@\n         + \"sample2\" + \"/logs/job-2010-01-01-01-00/000\");\n     private final Path instanceLogPath4 = new Path(\"/projects/falcon/staging/falcon/workflows/process/\"\n         + \"sample\" + \"/logs/latedata/2010-01-01-01-00\");\n+    private final Path instanceLogPath5 = new Path(\"/projects/falcon/staging/falcon/workflows/process/\"\n+            + \"sample3\" + \"/logs/job-2010-01-01-01-00/000\");\n     private final Path feedInstanceLogPath = new Path(\"/projects/falcon/staging/falcon/workflows/feed/\"\n         + \"impressionFeed\" + \"/logs/job-2010-01-01-01-00/testCluster/000\");\n     private final Path feedInstanceLogPath1 = new Path(\"/projects/falcon/staging/falcon/workflows/feed/\"\n@@ -90,15 +92,22 @@ public void setup() throws Exception {\n         Process otherProcess = (Process) process.copy();\n         otherProcess.setName(\"sample2\");\n         otherProcess.setFrequency(new Frequency(\"days(1)\"));\n+        Process noACLProcess = (Process) process.copy();\n+        noACLProcess.setName(\"sample3\");\n+        noACLProcess.setACL(null);\n         ConfigurationStore.get().remove(EntityType.PROCESS,\n                 otherProcess.getName());\n         ConfigurationStore.get().publish(EntityType.PROCESS, otherProcess);\n+        ConfigurationStore.get().remove(EntityType.PROCESS,\n+                noACLProcess.getName());\n+        ConfigurationStore.get().publish(EntityType.PROCESS, noACLProcess);\n \n         fs.mkdirs(instanceLogPath);\n         fs.mkdirs(instanceLogPath1);\n         fs.mkdirs(instanceLogPath2);\n         fs.mkdirs(instanceLogPath3);\n         fs.mkdirs(instanceLogPath4);\n+        fs.mkdirs(instanceLogPath5);\n \n         // fs.setTimes wont work on dirs\n         fs.createNewFile(new Path(instanceLogPath, \"oozie.log\"));\n@@ -138,6 +147,7 @@ public void testProcessLogs() throws IOException, FalconException, InterruptedEx\n         Assert.assertFalse(fs.exists(instanceLogPath));\n         Assert.assertFalse(fs.exists(instanceLogPath1));\n         Assert.assertFalse(fs.exists(instanceLogPath2));\n+        Assert.assertFalse(fs.exists(instanceLogPath5));\n         Assert.assertTrue(fs.exists(instanceLogPath3));\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "7f9b4059c6eb7414102e464d13ab72fdeada14ff",
                "filename": "common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java",
                "status": "modified",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/common/src/test/java/org/apache/falcon/security/SecurityUtilTest.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -18,10 +18,17 @@\n \n package org.apache.falcon.security;\n \n+\n+import org.apache.falcon.FalconException;\n+import org.apache.falcon.entity.v0.process.*;\n+import org.apache.falcon.entity.v0.process.Process;\n import org.apache.falcon.util.StartupProperties;\n+import org.mockito.Mockito;\n import org.testng.Assert;\n import org.testng.annotations.Test;\n \n+import java.io.IOException;\n+\n /**\n  * Unit test for Security utils.\n  */\n@@ -81,4 +88,25 @@ public void testGetAuthorizationProviderByDefault() throws Exception {\n         Assert.assertEquals(SecurityUtil.getAuthorizationProvider().getClass(),\n                 DefaultAuthorizationProvider.class);\n     }\n+\n+    @Test\n+    public void testTryProxy() throws IOException, FalconException {\n+        Process process = Mockito.mock(Process.class);\n+        StartupProperties.get().setProperty(\"falcon.security.authorization.enabled\", \"true\");\n+        final String currentUser = System.getProperty(\"user.name\");\n+\n+        // When ACL not specified\n+        CurrentUser.authenticate(currentUser);\n+        SecurityUtil.tryProxy(process);\n+        Assert.assertEquals(CurrentUser.getUser(), currentUser);\n+\n+        ACL acl = new ACL();\n+        acl.setOwner(\"testuser\");\n+        acl.setGroup(\"users\");\n+        Mockito.when(process.getACL()).thenReturn(acl);\n+\n+        // When ACL is specified\n+        SecurityUtil.tryProxy(process);\n+        Assert.assertEquals(CurrentUser.getUser(), \"testuser\");\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "67a66c6e1a92954959c91e902df9db300c13943b",
                "filename": "prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java",
                "status": "modified",
                "changes": 14,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/main/java/org/apache/falcon/resource/AbstractEntityManager.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -406,23 +406,13 @@ protected synchronized Entity submitInternal(HttpServletRequest request, String\n                             + \"Can't be submitted again. Try removing before submitting.\");\n         }\n \n-        tryProxy(entity); // proxy before validating since FS/Oozie needs to be proxied\n+        SecurityUtil.tryProxy(entity); // proxy before validating since FS/Oozie needs to be proxied\n         validate(entity);\n         configStore.publish(entityType, entity);\n         LOG.info(\"Submit successful: ({}): {}\", type, entity.getName());\n         return entity;\n     }\n \n-    private void tryProxy(Entity entity) throws IOException, FalconException {\n-        final String aclOwner = entity.getACL().getOwner();\n-        final String aclGroup = entity.getACL().getGroup();\n-        if (SecurityUtil.isAuthorizationEnabled()\n-                && SecurityUtil.getAuthorizationProvider().shouldProxy(\n-                    CurrentUser.getAuthenticatedUGI(), aclOwner, aclGroup)) {\n-            CurrentUser.proxy(aclOwner, aclGroup);\n-        }\n-    }\n-\n     /**\n      * KLUDGE - Until ACL is mandated entity passed should be decorated for equals check to pass.\n      * existingEntity in config store will have teh decoration and equals check fails\n@@ -646,7 +636,7 @@ protected void validateEntityFilterByClause(String entityFilterByClause) {\n                 // the user who requested list query has no permission to access this entity. Skip this entity\n                 continue;\n             }\n-            tryProxy(entity);\n+            SecurityUtil.tryProxy(entity);\n \n             List<String> tags = EntityUtil.getTags(entity);\n             List<String> pipelines = EntityUtil.getPipelines(entity);",
                "deletions": 12
            },
            {
                "sha": "15e94cdb8afec042d2aeb26dbc9b6158d646e6e3",
                "filename": "prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java",
                "blob_url": "https://github.com/apache/falcon/blob/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java",
                "raw_url": "https://github.com/apache/falcon/raw/c790761e0492dbc2f0c59a91ab69f5ff35761a3f/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java",
                "status": "modified",
                "changes": 9,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/falcon/contents/prism/src/main/java/org/apache/falcon/security/FalconAuthorizationFilter.java?ref=c790761e0492dbc2f0c59a91ab69f5ff35761a3f",
                "patch": "@@ -141,14 +141,7 @@ private void tryProxy(UserGroupInformation authenticatedUGI,\n         try {\n             EntityType type = EntityType.getEnum(entityType);\n             Entity entity = EntityUtil.getEntity(type, entityName);\n-            if (entity != null && entity.getACL() != null) {\n-                final String aclOwner = entity.getACL().getOwner();\n-                final String aclGroup = entity.getACL().getGroup();\n-                if (authorizationProvider.shouldProxy(\n-                        authenticatedUGI, aclOwner, aclGroup)) {\n-                    CurrentUser.proxy(aclOwner, aclGroup);\n-                }\n-            }\n+            SecurityUtil.tryProxy(entity);\n         } catch (FalconException ignore) {\n             // do nothing\n         }",
                "deletions": 8
            }
        ],
        "patched_files": [
            "AbstractEntityManager.java",
            "SecurityUtil.java",
            "AbstractCleanupHandler.java",
            "LogCleanupService.java",
            "FalconAuthorizationFilter.java"
        ],
        "unit_tests": [
            "LogCleanupServiceTest.java",
            "FalconAuthorizationFilterTest.java",
            "SecurityUtilTest.java"
        ]
    }
}