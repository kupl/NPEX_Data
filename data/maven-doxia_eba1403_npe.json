[
    {
        "repo": "maven-doxia",
        "commit": "https://github.com/apache/maven-doxia/commit/eba1403f1e2cf7c167320d66bd4933f999a9e766",
        "bug_id": "maven-doxia_eba1403",
        "message": "Fix some problems in SinkEventAttributeSet:\n o make it Cloneable\n o add a method to make it unmodifiable\n o make all static fields unmodifiable\n o add attribute values as Objects, not Strings\n o fix potential NPEs in clone() and hashCode()\n\ngit-svn-id: https://svn.apache.org/repos/asf/maven/doxia/doxia/trunk@759584 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/maven-doxia/commit/40a9ddff3e763f431d0c744f8ec71c2688279d7f",
        "patched_files": [
            "SinkEventAttributeSet.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 48,
                "raw_url": "https://github.com/apache/maven-doxia/raw/eba1403f1e2cf7c167320d66bd4933f999a9e766/doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java",
                "contents_url": "https://api.github.com/repos/apache/maven-doxia/contents/doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java?ref=eba1403f1e2cf7c167320d66bd4933f999a9e766",
                "filename": "doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java",
                "deletions": 36,
                "sha": "24be5e6b7da61cd9888fe94860aafc461922d251",
                "blob_url": "https://github.com/apache/maven-doxia/blob/eba1403f1e2cf7c167320d66bd4933f999a9e766/doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.Enumeration;\n import java.util.LinkedHashMap;\n+import java.util.Map;\n \n import javax.swing.text.AttributeSet;\n \n@@ -33,82 +34,82 @@\n  * @since 1.1\n  */\n public class SinkEventAttributeSet\n-    implements SinkEventAttributes\n+    implements SinkEventAttributes, Cloneable\n {\n     /**\n-     * An attribute set containing only an underline attribute.\n+     * An unmodifiable attribute set containing only an underline attribute.\n      */\n     public static final SinkEventAttributes UNDERLINE;\n \n     /**\n-     * An attribute set containing only an overline attribute.\n+     * An unmodifiable attribute set containing only an overline attribute.\n      */\n     public static final SinkEventAttributes OVERLINE;\n \n     /**\n-     * An attribute set containing only a linethrough attribute.\n+     * An unmodifiable attribute set containing only a linethrough attribute.\n      */\n     public static final SinkEventAttributes LINETHROUGH;\n \n     /**\n-     * An attribute set containing only a boxed attribute.\n+     * An unmodifiable attribute set containing only a boxed attribute.\n      */\n     public static final SinkEventAttributes BOXED;\n \n     /**\n-     * An attribute set containing only a bold attribute.\n+     * An unmodifiable attribute set containing only a bold attribute.\n      */\n     public static final SinkEventAttributes BOLD;\n \n     /**\n-     * An attribute set containing only an italic attribute.\n+     * An unmodifiable attribute set containing only an italic attribute.\n      */\n     public static final SinkEventAttributes ITALIC;\n \n     /**\n-     * An attribute set containing only a monospaced attribute.\n+     * An unmodifiable attribute set containing only a monospaced attribute.\n      */\n     public static final SinkEventAttributes MONOSPACED;\n \n     /**\n-     * An attribute set containing only a left attribute.\n+     * An unmodifiable attribute set containing only a left attribute.\n      */\n     public static final SinkEventAttributes LEFT;\n \n     /**\n-     * An attribute set containing only a right attribute.\n+     * An unmodifiable attribute set containing only a right attribute.\n      */\n     public static final SinkEventAttributes RIGHT;\n \n     /**\n-     * An attribute set containing only a center attribute.\n+     * An unmodifiable attribute set containing only a center attribute.\n      */\n     public static final SinkEventAttributes CENTER;\n \n     /**\n-     * An attribute set containing only a justify attribute.\n+     * An unmodifiable attribute set containing only a justify attribute.\n      */\n     public static final SinkEventAttributes JUSTIFY;\n \n \n     static\n     {\n-        UNDERLINE = new SinkEventAttributeSet( new String[] {DECORATION, \"underline\"} );\n-        OVERLINE = new SinkEventAttributeSet( new String[] {DECORATION, \"overline\"} );\n-        LINETHROUGH = new SinkEventAttributeSet( new String[] {DECORATION, \"line-through\"} );\n-        BOXED = new SinkEventAttributeSet( new String[] {DECORATION, \"boxed\"} );\n-\n-        BOLD = new SinkEventAttributeSet( new String[] {STYLE, \"bold\"} );\n-        ITALIC = new SinkEventAttributeSet( new String[] {STYLE, \"italic\"} );\n-        MONOSPACED = new SinkEventAttributeSet( new String[] {STYLE, \"monospaced\"} );\n-\n-        LEFT = new SinkEventAttributeSet( new String[] {ALIGN, \"left\"} );\n-        RIGHT = new SinkEventAttributeSet( new String[] {ALIGN, \"right\"} );\n-        CENTER = new SinkEventAttributeSet( new String[] {ALIGN, \"center\"} );\n-        JUSTIFY = new SinkEventAttributeSet( new String[] {ALIGN, \"justify\"} );\n+        UNDERLINE = new SinkEventAttributeSet( new String[] {DECORATION, \"underline\"} ).unmodifiable();\n+        OVERLINE = new SinkEventAttributeSet( new String[] {DECORATION, \"overline\"} ).unmodifiable();\n+        LINETHROUGH = new SinkEventAttributeSet( new String[] {DECORATION, \"line-through\"} ).unmodifiable();\n+        BOXED = new SinkEventAttributeSet( new String[] {DECORATION, \"boxed\"} ).unmodifiable();\n+\n+        BOLD = new SinkEventAttributeSet( new String[] {STYLE, \"bold\"} ).unmodifiable();\n+        ITALIC = new SinkEventAttributeSet( new String[] {STYLE, \"italic\"} ).unmodifiable();\n+        MONOSPACED = new SinkEventAttributeSet( new String[] {STYLE, \"monospaced\"} ).unmodifiable();\n+\n+        LEFT = new SinkEventAttributeSet( new String[] {ALIGN, \"left\"} ).unmodifiable();\n+        RIGHT = new SinkEventAttributeSet( new String[] {ALIGN, \"right\"} ).unmodifiable();\n+        CENTER = new SinkEventAttributeSet( new String[] {ALIGN, \"center\"} ).unmodifiable();\n+        JUSTIFY = new SinkEventAttributeSet( new String[] {ALIGN, \"justify\"} ).unmodifiable();\n     }\n \n-    private LinkedHashMap attribs;\n+    private Map attribs;\n \n     private AttributeSet resolveParent;\n \n@@ -174,6 +175,20 @@ public SinkEventAttributeSet( AttributeSet attributes )\n         }\n     }\n \n+    /**\n+     * Replace this AttributeSet by an unmodifiable view of itself.\n+     * Any subsequent attempt to add, remove or modify the underlying mapping\n+     * will result in an UnsupportedOperationException.\n+     *\n+     * @return an unmodifiable view of this AttributeSet.\n+     */\n+    public SinkEventAttributeSet unmodifiable()\n+    {\n+        this.attribs = Collections.unmodifiableMap( attribs );\n+\n+        return this;\n+    }\n+\n     /**\n      * Checks whether the set of attribs is empty.\n      *\n@@ -262,7 +277,7 @@ public boolean containsAttributes( AttributeSet attributes )\n      */\n     public void addAttribute( Object name, Object value )\n     {\n-        attribs.put( name.toString(), value.toString() );\n+        attribs.put( name.toString(), value );\n     }\n \n     /** {@inheritDoc} */\n@@ -341,26 +356,23 @@ public void setResolveParent( AttributeSet parent )\n     /** {@inheritDoc} */\n     public Object clone()\n     {\n-        SinkEventAttributeSet attr;\n+        SinkEventAttributeSet attr = new SinkEventAttributeSet( attribs.size() );\n+        attr.attribs = new LinkedHashMap( attribs );\n \n-        try\n+        if ( resolveParent != null )\n         {\n-            attr = (SinkEventAttributeSet) super.clone();\n-            attr.attribs = (LinkedHashMap) attribs.clone();\n             attr.resolveParent = resolveParent.copyAttributes();\n         }\n-        catch ( CloneNotSupportedException e )\n-        {\n-            attr = null;\n-        }\n \n         return attr;\n     }\n \n     /** {@inheritDoc} */\n     public int hashCode()\n     {\n-        return attribs.hashCode() + resolveParent.hashCode();\n+        final int parentHash = ( resolveParent == null ? 0 : resolveParent.hashCode() );\n+\n+        return attribs.hashCode() + parentHash;\n     }\n \n     /** {@inheritDoc} */",
                "changes": 84
            },
            {
                "status": "added",
                "additions": 281,
                "raw_url": "https://github.com/apache/maven-doxia/raw/eba1403f1e2cf7c167320d66bd4933f999a9e766/doxia-core/src/test/java/org/apache/maven/doxia/sink/SinkEventAttributeSetTest.java",
                "contents_url": "https://api.github.com/repos/apache/maven-doxia/contents/doxia-core/src/test/java/org/apache/maven/doxia/sink/SinkEventAttributeSetTest.java?ref=eba1403f1e2cf7c167320d66bd4933f999a9e766",
                "filename": "doxia-core/src/test/java/org/apache/maven/doxia/sink/SinkEventAttributeSetTest.java",
                "deletions": 0,
                "sha": "53534aa220b2d5cfd799e11a69b2d609a3bfa645",
                "blob_url": "https://github.com/apache/maven-doxia/blob/eba1403f1e2cf7c167320d66bd4933f999a9e766/doxia-core/src/test/java/org/apache/maven/doxia/sink/SinkEventAttributeSetTest.java",
                "patch": "@@ -0,0 +1,281 @@\n+package org.apache.maven.doxia.sink;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+import java.util.Enumeration;\n+\n+import javax.swing.text.AttributeSet;\n+\n+import junit.framework.TestCase;\n+\n+/**\n+ * Test SinkEventAttributeSet.\n+ *\n+ * @author ltheussl\n+ */\n+public class SinkEventAttributeSetTest extends TestCase\n+{\n+\n+    private SinkEventAttributeSet sinkEventAttributeSet;\n+\n+    /**\n+     * @throws java.lang.Exception if any.\n+     */\n+    protected void setUp()\n+            throws Exception\n+    {\n+        super.setUp();\n+        this.sinkEventAttributeSet = new SinkEventAttributeSet();\n+    }\n+\n+    /**\n+     * Test of constructors, of class SinkEventAttributeSet.\n+     */\n+    public void testConstructor()\n+    {\n+        try\n+        {\n+            SinkEventAttributeSet aset = new SinkEventAttributeSet( new String[] {\"key\"} );\n+            fail( \"missing attribute value!\" );\n+        }\n+        catch ( IllegalArgumentException e )\n+        {\n+            assertNotNull( e );\n+        }\n+    }\n+\n+    /**\n+     * Test of isEmpty method, of class SinkEventAttributeSet.\n+     */\n+    public void testIsEmpty()\n+    {\n+        assertTrue( sinkEventAttributeSet.isEmpty() );\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOLD );\n+        assertFalse( sinkEventAttributeSet.isEmpty() );\n+    }\n+\n+    /**\n+     * Test of getAttributeCount method, of class SinkEventAttributeSet.\n+     */\n+    public void testGetAttributeCount()\n+    {\n+        assertEquals( 0, sinkEventAttributeSet.getAttributeCount() );\n+        sinkEventAttributeSet.addAttribute( \"name1\", \"value1\" );\n+        assertEquals( 1, sinkEventAttributeSet.getAttributeCount() );\n+        sinkEventAttributeSet.removeAttribute( \"name2\" );\n+        assertEquals( 1, sinkEventAttributeSet.getAttributeCount() );\n+        sinkEventAttributeSet.removeAttribute( \"name1\" );\n+        assertEquals( 0, sinkEventAttributeSet.getAttributeCount() );\n+\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOLD );\n+        assertEquals( 1, sinkEventAttributeSet.getAttributeCount() );\n+        sinkEventAttributeSet.removeAttributes( SinkEventAttributeSet.BOXED );\n+        assertEquals( 1, sinkEventAttributeSet.getAttributeCount() );\n+        sinkEventAttributeSet.removeAttributes( SinkEventAttributeSet.BOLD );\n+        assertEquals( 0, sinkEventAttributeSet.getAttributeCount() );\n+    }\n+\n+    /**\n+     * Test of isDefined method, of class SinkEventAttributeSet.\n+     */\n+    public void testIsDefined()\n+    {\n+        assertFalse( sinkEventAttributeSet.isDefined( SinkEventAttributes.DECORATION ) );\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOXED );\n+        assertTrue( sinkEventAttributeSet.isDefined( SinkEventAttributes.DECORATION ) );\n+    }\n+\n+    /**\n+     * Test of isEqual method, of class SinkEventAttributeSet.\n+     */\n+    public void testIsEqual()\n+    {\n+        SinkEventAttributes instance = new SinkEventAttributeSet( SinkEventAttributeSet.BOLD );\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOLD );\n+        assertTrue( instance.isEqual( sinkEventAttributeSet ) );\n+        instance.addAttributes( SinkEventAttributeSet.BOXED );\n+        assertFalse( instance.isEqual( sinkEventAttributeSet ) );\n+    }\n+\n+    /**\n+     * Test of equals method, of class SinkEventAttributeSet.\n+     */\n+    public void testEquals()\n+    {\n+        assertFalse( sinkEventAttributeSet.equals( null ) );\n+        assertTrue( sinkEventAttributeSet.equals( sinkEventAttributeSet ) );\n+\n+        SinkEventAttributes instance = new SinkEventAttributeSet( SinkEventAttributeSet.BOLD );\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOLD );\n+        assertTrue( instance.equals( sinkEventAttributeSet ) );\n+        instance.addAttributes( SinkEventAttributeSet.BOXED );\n+        assertFalse( instance.equals( sinkEventAttributeSet ) );\n+    }\n+\n+    /**\n+     * Test of copyAttributes method, of class SinkEventAttributeSet.\n+     */\n+    public void testCopyAttributes()\n+    {\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.ITALIC );\n+        AttributeSet instance = sinkEventAttributeSet.copyAttributes();\n+        assertTrue( instance.isEqual( sinkEventAttributeSet ) );\n+    }\n+\n+    /**\n+     * Test of getAttributeNames method, of class SinkEventAttributeSet.\n+     */\n+    public void testGetAttributeNames()\n+    {\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.UNDERLINE );\n+        Enumeration result = sinkEventAttributeSet.getAttributeNames();\n+        assertEquals( \"decoration\", result.nextElement() );\n+        assertFalse( result.hasMoreElements() );\n+    }\n+\n+    /**\n+     * Test of getAttribute method, of class SinkEventAttributeSet.\n+     */\n+    public void testGetAttribute()\n+    {\n+        sinkEventAttributeSet.addAttribute( \"key\", \"value\" );\n+        assertTrue( sinkEventAttributeSet.getAttribute( \"key\" ).equals( \"value\" ) );\n+        assertNull( sinkEventAttributeSet.getAttribute( \"bla\" ) );\n+    }\n+\n+    /**\n+     * Test of containsAttribute method, of class SinkEventAttributeSet.\n+     */\n+    public void testContainsAttribute()\n+    {\n+        sinkEventAttributeSet.addAttribute( \"key\", \"value\" );\n+        assertTrue( sinkEventAttributeSet.containsAttribute( \"key\", \"value\" ) );\n+        assertFalse( sinkEventAttributeSet.containsAttribute( \"key\", \"valu\" ) );\n+    }\n+\n+    /**\n+     * Test of containsAttributes method, of class SinkEventAttributeSet.\n+     */\n+    public void testContainsAttributes()\n+    {\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.JUSTIFY );\n+        assertTrue( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+        assertFalse( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.BOXED ) );\n+    }\n+\n+    /**\n+     * Test of addAttribute method, of class SinkEventAttributeSet.\n+     */\n+    public void testAddAttribute()\n+    {\n+        assertFalse( sinkEventAttributeSet.containsAttribute( \"key\", \"value\" ) );\n+        sinkEventAttributeSet.addAttribute( \"key\", \"value\" );\n+        assertTrue( sinkEventAttributeSet.containsAttribute( \"key\", \"value\" ) );\n+        sinkEventAttributeSet.removeAttribute( \"key\" );\n+        assertFalse( sinkEventAttributeSet.containsAttribute( \"key\", \"value\" ) );\n+    }\n+\n+    /**\n+     * Test of add/removeAttributes methods, of class SinkEventAttributeSet.\n+     */\n+    public void testAddAttributes()\n+    {\n+        assertFalse( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.JUSTIFY );\n+        assertTrue( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+\n+        sinkEventAttributeSet.removeAttributes( SinkEventAttributeSet.JUSTIFY );\n+        assertFalse( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.JUSTIFY );\n+        sinkEventAttributeSet.removeAttributes( SinkEventAttributeSet.JUSTIFY.getAttributeNames() );\n+        assertFalse( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+\n+        sinkEventAttributeSet.setResolveParent( SinkEventAttributeSet.JUSTIFY );\n+        assertTrue( sinkEventAttributeSet.containsAttributes( SinkEventAttributeSet.JUSTIFY ) );\n+\n+        sinkEventAttributeSet.removeAttributes( (AttributeSet) null ); // should do nothing\n+    }\n+\n+    /**\n+     * Test of getResolveParent method, of class SinkEventAttributeSet.\n+     */\n+    public void testGetResolveParent()\n+    {\n+        assertNull( sinkEventAttributeSet.getResolveParent() );\n+        sinkEventAttributeSet.setResolveParent( SinkEventAttributeSet.CENTER );\n+        assertNotNull( sinkEventAttributeSet.getResolveParent() );\n+    }\n+\n+    /**\n+     * Test of clone method, of class SinkEventAttributeSet.\n+     */\n+    public void testClone()\n+    {\n+        Object result = sinkEventAttributeSet.clone();\n+        assertTrue( sinkEventAttributeSet.equals( result ) );\n+\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.MONOSPACED );\n+        assertFalse( sinkEventAttributeSet.equals( result ) );\n+\n+        result = sinkEventAttributeSet.clone();\n+        assertTrue( sinkEventAttributeSet.equals( result ) );\n+        sinkEventAttributeSet.setResolveParent( SinkEventAttributeSet.CENTER );\n+        //assertFalse( sinkEventAttributeSet.equals( result ) );\n+\n+        result = sinkEventAttributeSet.clone();\n+        assertTrue( sinkEventAttributeSet.equals( result ) );\n+        sinkEventAttributeSet.setResolveParent( SinkEventAttributeSet.BOXED );\n+        //assertFalse( sinkEventAttributeSet.equals( result ) );\n+    }\n+\n+    /**\n+     * Test of hashCode method, of class SinkEventAttributeSet.\n+     */\n+    public void testHashCode()\n+    {\n+        int oldValue = sinkEventAttributeSet.hashCode();\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOLD );\n+        int newValue = sinkEventAttributeSet.hashCode();\n+        assertFalse( oldValue == newValue );\n+\n+        oldValue = newValue;\n+        sinkEventAttributeSet.setResolveParent( SinkEventAttributeSet.CENTER );\n+        newValue = sinkEventAttributeSet.hashCode();\n+        assertFalse( oldValue == newValue );\n+    }\n+\n+    /**\n+     * Test of toString method, of class SinkEventAttributeSet.\n+     */\n+    public void testToString()\n+    {\n+        String expected = \"\";\n+        assertEquals( expected, sinkEventAttributeSet.toString() );\n+\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.BOXED );\n+        expected = \" decoration=boxed\";\n+        assertEquals( expected, sinkEventAttributeSet.toString() );\n+\n+        sinkEventAttributeSet.addAttributes( SinkEventAttributeSet.CENTER );\n+        expected = \" decoration=boxed align=center\";\n+        assertEquals( expected, sinkEventAttributeSet.toString() );\n+    }\n+}",
                "changes": 281
            }
        ],
        "unit_tests": [
            "SinkEventAttributeSetTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "doxia-core/src/test/java/org/apache/maven/doxia/sink/SinkEventAttributeSetTest.java",
        "buggy_files": [
            "doxia-core/src/main/java/org/apache/maven/doxia/sink/SinkEventAttributeSet.java"
        ],
        "fixed": true
    }
]