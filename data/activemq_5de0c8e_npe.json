[
    {
        "repo": "activemq",
        "commit": "https://github.com/apache/activemq/commit/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468",
        "bug_id": "activemq_5de0c8e",
        "message": "https://issues.apache.org/jira/browse/AMQ-5298\n\nFix the NPE case",
        "parent": "https://github.com/apache/activemq/commit/47ebd80b6ba3cf2e753a47cab4bbff9576e840f7",
        "patched_files": [
            "MQTTProtocolConverter.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 6,
                "raw_url": "https://github.com/apache/activemq/raw/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java?ref=5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468",
                "filename": "activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java",
                "deletions": 2,
                "sha": "4ca23c370f01e0301a7d80e2a025b4cf71f9a0b3",
                "blob_url": "https://github.com/apache/activemq/blob/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java",
                "patch": "@@ -40,6 +40,7 @@\n import org.apache.activemq.broker.region.Subscription;\n import org.apache.activemq.broker.region.TopicRegion;\n import org.apache.activemq.broker.region.policy.RetainedMessageSubscriptionRecoveryPolicy;\n+import org.apache.activemq.broker.region.virtual.VirtualTopicInterceptor;\n import org.apache.activemq.command.ActiveMQBytesMessage;\n import org.apache.activemq.command.ActiveMQDestination;\n import org.apache.activemq.command.ActiveMQMapMessage;\n@@ -500,7 +501,11 @@ private void resendRetainedMessages(String topicName, ActiveMQDestination destin\n             for (Subscription subscription : dest.getConsumers()) {\n                 if (subscription.getConsumerInfo().getConsumerId().equals(consumerId)) {\n                     try {\n-                        ((org.apache.activemq.broker.region.Topic)dest).recoverRetroactiveMessages(connectionContext, subscription);\n+                        if (dest instanceof org.apache.activemq.broker.region.Topic) {\n+                            ((org.apache.activemq.broker.region.Topic)dest).recoverRetroactiveMessages(connectionContext, subscription);\n+                        } else if (dest instanceof VirtualTopicInterceptor) {\n+                            ((VirtualTopicInterceptor)dest).getTopic().recoverRetroactiveMessages(connectionContext, subscription);\n+                        }\n                         if (subscription instanceof PrefetchSubscription) {\n                             // request dispatch for prefetch subs\n                             PrefetchSubscription prefetchSubscription = (PrefetchSubscription) subscription;\n@@ -917,7 +922,6 @@ private String convertMQTTToActiveMQ(String name) {\n                 case '>':\n                     chars[i] = '#';\n                     break;\n-\n                 case '+':\n                     chars[i] = '*';\n                     break;",
                "changes": 8
            },
            {
                "status": "modified",
                "additions": 3,
                "raw_url": "https://github.com/apache/activemq/raw/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
                "contents_url": "https://api.github.com/repos/apache/activemq/contents/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java?ref=5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468",
                "filename": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
                "deletions": 4,
                "sha": "c4571dc500a0fc070c20b71dce52b6bbaca5191f",
                "blob_url": "https://github.com/apache/activemq/blob/5de0c8e2fbdc992e0873d92fceac3ffcd5a5e468/activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
                "patch": "@@ -518,14 +518,14 @@ public void testRetainedMessage() throws Exception {\n             assertEquals(RETAIN, new String(msg.getPayload()));\n             msg.ack();\n             assertNull(connection.receive(500, TimeUnit.MILLISECONDS));\n-            connection.unsubscribe(new String[]{\"TopicA\"});\n+            connection.unsubscribe(new String[]{TOPICA});\n \n             // clear retained message and check that we don't receive it\n             connection.publish(TOPICA, \"\".getBytes(), QoS.AT_MOST_ONCE, true);\n             connection.subscribe(new Topic[]{new Topic(TOPICA, QoS.AT_LEAST_ONCE)});\n             msg = connection.receive(500, TimeUnit.MILLISECONDS);\n             assertNull(\"Retained message not cleared for \" + clientId, msg);\n-            connection.unsubscribe(new String[]{\"TopicA\"});\n+            connection.unsubscribe(new String[]{TOPICA});\n \n             // set retained message again and check\n             connection.publish(TOPICA, RETAIN.getBytes(), QoS.EXACTLY_ONCE, true);\n@@ -547,8 +547,7 @@ public void testRetainedMessage() throws Exception {\n             msg.ack();\n             assertNull(connection.receive(500, TimeUnit.MILLISECONDS));\n \n-            connection.unsubscribe(new String[]{\"TopicA\"});\n-\n+            connection.unsubscribe(new String[]{TOPICA});\n             connection.disconnect();\n         }\n     }",
                "changes": 7
            }
        ],
        "unit_tests": [
            "MQTTTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "activemq-mqtt/src/test/java/org/apache/activemq/transport/mqtt/MQTTTest.java",
        "buggy_files": [
            "activemq-mqtt/src/main/java/org/apache/activemq/transport/mqtt/MQTTProtocolConverter.java"
        ],
        "fixed": true
    }
]