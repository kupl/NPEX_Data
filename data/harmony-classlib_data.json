[
    {
        "repo": "harmony-classlib",
        "message": "fixed HARMONY-1413, HARMONY-1414\n[classlib][html] javax.swing.text.html.parser.AttributeList.getValues() throws NullPointerException\n[classlib][html] javax.swing.text.html.parser.Element.getAttributeByValue(String) throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465986 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/88e09484b1621587bbc4dd8bba1cc8f9de9601f1",
        "parent": "https://github.com/apache/harmony-classlib/commit/082e10292430da895c2b6bb156ad332a4883ea43",
        "bug_id": "harmony-classlib_1",
        "file": [
            {
                "sha": "12d3d00e497fd2633674803351d73a00a245ff3b",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/html/parser/AttributeList.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/88e09484b1621587bbc4dd8bba1cc8f9de9601f1/modules/swing/src/main/java/common/javax/swing/text/html/parser/AttributeList.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/88e09484b1621587bbc4dd8bba1cc8f9de9601f1/modules/swing/src/main/java/common/javax/swing/text/html/parser/AttributeList.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/html/parser/AttributeList.java?ref=88e09484b1621587bbc4dd8bba1cc8f9de9601f1",
                "patch": "@@ -138,7 +138,8 @@ public String getValue() {\n     }\n \n     public Enumeration<?> getValues() {\n-        return values.elements();\n+        // avoids a NullPointerException if values is null (same as RI)\n+        return values == null ? null : values.elements();\n     }\n \n     public int getModifier() {\n@@ -177,13 +178,8 @@ private static void init() {\n         }\n     }\n \n-    //TODO correct a bit: Do we check an instance or just equals?\n     final boolean containsValue(final String value) {\n-        if (value == this.value) {\n-            return true;\n-        }\n-\n-        return values.contains(value);\n+        return values == null ? false : values.contains(value);\n     }\n }\n ",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix exception compatibility, should throw NullPointerException rather than IntorspectException\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@557833 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/53ead4787780ab20c1e0586578db9392bb26b880",
        "parent": "https://github.com/apache/harmony-classlib/commit/84406e0b93407c023ae25776e01b649966a2ee8e",
        "bug_id": "harmony-classlib_2",
        "file": [
            {
                "sha": "9407b90b4efbf6ed6a96a657ff55c208a9e3417b",
                "filename": "modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/53ead4787780ab20c1e0586578db9392bb26b880/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/53ead4787780ab20c1e0586578db9392bb26b880/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/EventSetDescriptor.java?ref=53ead4787780ab20c1e0586578db9392bb26b880",
                "patch": "@@ -112,7 +112,7 @@ private Method findListenerMethodByName(String listenerMethodName)\n         Method method = null;\n         Method[] methods = listenerType.getMethods();\n         for (Method m : methods) {\n-            if (m.getName().equals(listenerMethodName)) {\n+            if (listenerMethodName.equals(m.getName())) {\n                 Class[] paramTypes = m.getParameterTypes();\n                 if (paramTypes.length == 1\n                         && paramTypes[0].getName().endsWith(\"Event\")) {",
                "deletions": 1
            },
            {
                "sha": "a47cdce83c36365fc0a1cc1803957b0b92ffdd64",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/53ead4787780ab20c1e0586578db9392bb26b880/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/53ead4787780ab20c1e0586578db9392bb26b880/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java?ref=53ead4787780ab20c1e0586578db9392bb26b880",
                "patch": "@@ -275,8 +275,8 @@ public void testEventSetDescriptorClassStringClassString_listenerMethodNameNull(\n                     listenerMethodName);\n             fail(\"Should throw NullPointerException.\");\n         } catch (NullPointerException e) {\n+            // expected\n         }\n-\n     }\n \n     /*\n@@ -463,8 +463,16 @@ public void testEventSetDescriptorClassStringClassStringArrayStringString_listen\n                     listenerMethodNames, addMethod, removeMethod);\n             fail(\"Should throw NullPointerException.\");\n         } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            new EventSetDescriptor(sourceClass, eventSetName, listenerType,\n+                    new String[] { null }, addMethod, removeMethod);\n+            fail(\"Should throw NullPointerException.\");\n+        } catch (NullPointerException e) {\n+            // expected\n         }\n-\n     }\n \n     /*",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Catch only NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@490113 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d61379ae07157b54131bfe311d5e4df22fa4c0e1",
        "parent": "https://github.com/apache/harmony-classlib/commit/c64421ebee0489120ab0cd9cdbcf1b12a10daefc",
        "bug_id": "harmony-classlib_3",
        "file": [
            {
                "sha": "10b9be2a88551c1487e8244fcc2852ec284f159f",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertPathBuilder1Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d61379ae07157b54131bfe311d5e4df22fa4c0e1/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertPathBuilder1Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d61379ae07157b54131bfe311d5e4df22fa4c0e1/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertPathBuilder1Test.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertPathBuilder1Test.java?ref=d61379ae07157b54131bfe311d5e4df22fa4c0e1",
                "patch": "@@ -131,12 +131,11 @@ public static void main(String[] args) {\n \t * throws NoSuchAlgorithmException when algorithm  is not correct\n \t * or it is not available\n      */\n-    public void testCertPathBuilder02() {\n+    public void testCertPathBuilder02() throws NoSuchAlgorithmException {\n         try {\n             CertPathBuilder.getInstance(null);\n-            fail(\"NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null\");\n+            fail(\"No expected NullPointerException\");\n         } catch (NullPointerException e) {\n-        } catch (NoSuchAlgorithmException e) {\n         }\n         for (int i = 0; i < invalidValues.length; i++) {\n             try {\n@@ -223,9 +222,8 @@ public void testCertPathBuilder06()\n         }\n         try {\n             CertPathBuilder.getInstance(null, defaultProviderName);\n-            fail(\"NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null\");\n+            fail(\"No expected NullPointerException\");\n         } catch (NullPointerException e) {\n-        } catch (NoSuchAlgorithmException e) {\n         }\n         for (int i = 0; i < invalidValues.length; i++) {\n             try {\n@@ -288,9 +286,8 @@ public void testCertPathBuilder09()\n         }\n         try {\n             CertPathBuilder.getInstance(null, defaultProvider);\n-            fail(\"NullPointerException or NoSuchAlgorithmException must be thrown when algorithm is null\");\n+            fail(\"No expected NullPointerException\");\n         } catch (NullPointerException e) {\n-        } catch (NoSuchAlgorithmException e) {\n         }\n         for (int i = 0; i < invalidValues.length; i++) {\n             try {",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-228 (VetoableChangeSupport should throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@395775 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/30192b72a127938c3e3ff0217c3c2ecf591f059a",
        "parent": "https://github.com/apache/harmony-classlib/commit/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
        "bug_id": "harmony-classlib_4",
        "file": [
            {
                "sha": "6a6bca60643fb32b37dceacc647da1688dbbdf19",
                "filename": "modules/beans/make/common/build.xml",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/make/common/build.xml",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/make/common/build.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/make/common/build.xml?ref=30192b72a127938c3e3ff0217c3c2ecf591f059a",
                "patch": "@@ -103,7 +103,6 @@\n                     <exclude name=\"**/BeanContextSupportTest.java\" />\r\n                     <exclude name=\"**/EventHandlerTest.java\" />\r\n                     <exclude name=\"**/SimpleBeanInfoTest.java\" />\r\n-                    <exclude name=\"**/VetoableChangeSupportTest.java\" />\r\n \r\n                     <exclude name=\"tests/api/java/beans/BeanDescriptorTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/CustomizedPersistenceDelegateTest.java\" />\r\n@@ -126,6 +125,7 @@\n                     <exclude name=\"tests/api/java/beans/PropertyVetoExceptionTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/StatementTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/VetoableChangeListenerProxyTest.java\" />\r\n+                    <exclude name=\"tests/api/java/beans/VetoableChangeSupportTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/XMLDecoderTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/XMLEncoderTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/beancontext/BeanContextChildSupportTest.java\" />\r",
                "deletions": 1
            },
            {
                "sha": "fae557573cd0a2485b0d330ef62a8b9e0a67befe",
                "filename": "modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java?ref=30192b72a127938c3e3ff0217c3c2ecf591f059a",
                "patch": "@@ -51,6 +51,9 @@\n      * @com.intel.drl.spec_ref\n      */\n     public VetoableChangeSupport(Object sourceBean) {\n+        if (sourceBean == null) {\n+            throw new NullPointerException();\n+        }\n         this.sourceBean = sourceBean;\n     }\n \n@@ -258,7 +261,7 @@ private void writeObject(ObjectOutputStream oos) throws IOException {\n         oos.writeObject(children);\n         \n         Object source = null;\n-        if((sourceBean != null) && (sourceBean instanceof Serializable)) {\n+        if(sourceBean instanceof Serializable) {\n             source = sourceBean;\n         }\n         oos.writeObject(source);",
                "deletions": 1
            },
            {
                "sha": "c3e28acb2df4a2e499a1687423149a3ae1e86499",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java?ref=30192b72a127938c3e3ff0217c3c2ecf591f059a",
                "patch": "@@ -51,6 +51,19 @@ public VetoableChangeSupportTest() {\n     public VetoableChangeSupportTest(String name) {\n         super(name);\n     }\n+\n+    /**\n+     * @tests java.beans.VetoableChangeSupport#VetoableChangeSupport(\n+     *        java.lang.Object)\n+     */\n+    public void testVetoableChangeSupport_null() {\n+        try {\n+            // Regression for HARMONY-228\n+            new VetoableChangeSupport(null);\n+            fail(\"Should throw NullPointerException.\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n     \n     /**\n      * The test checks the method add() with no property specified",
                "deletions": 0
            },
            {
                "sha": "5f5f02c7f92e25c5a1213c66ece715e76f87a7d9",
                "filename": "modules/beans/src/test/java/tests/api/java/beans/VetoableChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/test/java/tests/api/java/beans/VetoableChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/30192b72a127938c3e3ff0217c3c2ecf591f059a/modules/beans/src/test/java/tests/api/java/beans/VetoableChangeSupportTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/tests/api/java/beans/VetoableChangeSupportTest.java?ref=30192b72a127938c3e3ff0217c3c2ecf591f059a",
                "patch": "@@ -45,18 +45,6 @@ public void testVetoableChangeSupport() {\n \r\n \t}\r\n \r\n-\t/*\r\n-\t * Constructor a VetoableChangeSupport instance with null source\r\n-\t */\r\n-\tpublic void testVetoableChangeSupport_null() {\r\n-\t\tMockSource source = null;\r\n-\t\ttry {\r\n-\t\t\tVetoableChangeSupport support = new VetoableChangeSupport(source);\r\n-\t\t\tfail(\"Should throw NullPointerException.\");\r\n-\t\t} catch (NullPointerException e) {\r\n-\t\t}\r\n-\t}\r\n-\r\n \t/*\r\n \t * Class under test for void addVetoableChangeListener(String,\r\n \t * VetoableChangeListener)\r",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fixing HARMONY-225 (BeanDescriptor constructors should throw NullPointerExceptions)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@394005 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7aa9246f6c615171d3011052afc6bd4778dcdd06",
        "parent": "https://github.com/apache/harmony-classlib/commit/f9616e3b85123cd908fc7a8745360daaa27e3371",
        "bug_id": "harmony-classlib_5",
        "file": [
            {
                "sha": "41791ffdf5e8b332d7bc9b914f35df1a5073af3a",
                "filename": "modules/beans/src/main/java/java/beans/BeanDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7aa9246f6c615171d3011052afc6bd4778dcdd06/modules/beans/src/main/java/java/beans/BeanDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7aa9246f6c615171d3011052afc6bd4778dcdd06/modules/beans/src/main/java/java/beans/BeanDescriptor.java",
                "status": "modified",
                "changes": 14,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/BeanDescriptor.java?ref=7aa9246f6c615171d3011052afc6bd4778dcdd06",
                "patch": "@@ -27,14 +27,18 @@\n \n public class BeanDescriptor extends FeatureDescriptor {\n \t\n-    private Class beanClass = null;\n-    private Class customizerClass = null;\n+    private Class beanClass;\n+    private Class customizerClass;\n \n     /**\n      * @com.intel.drl.spec_ref\n      */\n     public BeanDescriptor(Class beanClass, Class customizerClass) {\n         super();\n+\n+        if (beanClass == null) {\n+            throw new NullPointerException();\n+        }\n         setName(getShortClassName(beanClass));\n         this.beanClass = beanClass;\n         this.customizerClass = customizerClass;\n@@ -45,6 +49,10 @@ public BeanDescriptor(Class beanClass, Class customizerClass) {\n      */\n     public BeanDescriptor(Class beanClass) {\n         super();\n+\n+        if (beanClass == null) {\n+            throw new NullPointerException();\n+        }\n         setName(getShortClassName(beanClass));\n         this.beanClass = beanClass;\n     }\n@@ -76,4 +84,4 @@ private String getShortClassName(Class beanClass) {\n         return result;\n     }\n \n-}\n\\ No newline at end of file\n+}",
                "deletions": 3
            },
            {
                "sha": "ec1df2a0eaa5d291c59ca0f100f4a51591e2af9d",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/BeanDescriptorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7aa9246f6c615171d3011052afc6bd4778dcdd06/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/BeanDescriptorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7aa9246f6c615171d3011052afc6bd4778dcdd06/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/BeanDescriptorTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/BeanDescriptorTest.java?ref=7aa9246f6c615171d3011052afc6bd4778dcdd06",
                "patch": "@@ -33,19 +33,32 @@\n  */\n \n public class BeanDescriptorTest extends TestCase {\n-    \n+\n     /**\n-     * \n+     * @tests java.beans.BeanDescriptor#BeanDescriptor(\n+     *        java.lang.Class)\n      */\n-    public BeanDescriptorTest() {\n-        super();\n+    public void test_Ctor1_NullPointerExpection() {\n+        try {\n+            // Regression for HARMONY-225\n+            new BeanDescriptor(null);\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n     }\n-    \n+\n     /**\n-     *\n+     * @tests java.beans.BeanDescriptor#BeanDescriptor(\n+     *        java.lang.Class,\n+     *        java.lang.Class)\n      */\n-    public BeanDescriptorTest(String name) {\n-        super(name);\n+    public void test_Ctor2_NullPointerExpection() {\n+        try {\n+            // Regression for HARMONY-225\n+            new BeanDescriptor(null, String.class);\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n     }\n     \n     /**\n@@ -55,7 +68,7 @@ public void testNullaryConstructor() {\n         BeanDescriptor bd= new BeanDescriptor(String.class);\n         assertEquals(bd.getName(), \"String\");\n     }\n-    \n+\n     /**\n      * \n      */",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fixing HARMONY-226 (MethodDescriptor constructor should throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@393788 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9",
        "parent": "https://github.com/apache/harmony-classlib/commit/1503ef36843d019191e241016795fe04acbe472d",
        "bug_id": "harmony-classlib_6",
        "file": [
            {
                "sha": "de1462cb63a6388b03a61c48aba94e4152ee46eb",
                "filename": "modules/beans/src/main/java/java/beans/MethodDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9/modules/beans/src/main/java/java/beans/MethodDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9/modules/beans/src/main/java/java/beans/MethodDescriptor.java",
                "status": "modified",
                "changes": 26,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/MethodDescriptor.java?ref=ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9",
                "patch": "@@ -29,8 +29,8 @@\n \n public class MethodDescriptor extends FeatureDescriptor {\n     \n-    private Method method = null;\n-    private ParameterDescriptor[] parameterDescriptors = {};\n+    private Method method;\n+    private ParameterDescriptor[] parameterDescriptors;\n \n     /**\n      * @com.intel.drl.spec_ref\n@@ -39,13 +39,14 @@ public MethodDescriptor(Method method,\n             ParameterDescriptor[] parameterDescriptors) {\n         super();\n         \n+        if (method == null) {\n+            throw new NullPointerException();\n+        }\n         this.method = method;\n         this.parameterDescriptors = parameterDescriptors;\n-        \n-        if(method != null) {\n-            setName(method.getName());\n-            setDisplayName(method.getName());\n-        }\n+\n+        setName(method.getName());\n+        setDisplayName(method.getName());\n     }\n \n     /**\n@@ -54,11 +55,14 @@ public MethodDescriptor(Method method,\n     public MethodDescriptor(Method method) {\n         super();\n         \n-        this.method = method;\n-        if(method != null) {\n-            setName(method.getName());\n-            setDisplayName(method.getName());\n+        if (method == null) {\n+            throw new NullPointerException();\n         }\n+        this.method = method;\n+        this.parameterDescriptors = new ParameterDescriptor[0];\n+\n+        setName(method.getName());\n+        setDisplayName(method.getName());\n     }\n \n     /**",
                "deletions": 11
            },
            {
                "sha": "2138bcdcb05a5ac374a2859f89f0ec2b1c337290",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/MethodDescriptorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/MethodDescriptorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/MethodDescriptorTest.java",
                "status": "added",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/MethodDescriptorTest.java?ref=ca3f980ad388540a27aabcb842dd2ff4a1bf9bc9",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ *  Copyright 2006 The Apache Software Foundation or its licensors, as applicable.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.harmony.tests.java.beans;\n+\n+import junit.framework.TestCase;\n+import java.beans.MethodDescriptor;\n+import java.beans.ParameterDescriptor;\n+\n+public class MethodDescriptorTest extends TestCase {\n+\n+    /**\n+     * @tests java.beans.MethodDescriptor#MethodDescriptor(\n+     *        java.lang.reflect.Method)\n+     */\n+    public void test_Ctor1_NullPointerExpection() {\n+        try {\n+            // Regression for HARMONY-226\n+            new MethodDescriptor(null);\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n+    /**\n+     * @tests java.beans.MethodDescriptor#MethodDescriptor(\n+     *        java.lang.reflect.Method,\n+     *        java.beans.ParameterDescriptor[])\n+     */\n+    public void test_Ctor2_NullPointerExpection() {\n+        try {\n+            // Regression for HARMONY-226\n+            new MethodDescriptor(null, new ParameterDescriptor[0]);\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "minor fixes for Font:\nHARMONY-1543: awt.Font.getFamily(Locale) with null Locale returns family on Harmony and throws NPE on RI\nHARMONY-1546: java.awt.Font.getFont() with null system property parameter throws NPE on RI while doesn't on Harmony.\nHARMONY-1549: java.awt.Font.getMaxCharBounds() with null FontRenderContext returns bounds on Harmony and throws NPE on RI\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@466074 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f9969f29537f8a289b15972711e19916b0be8970",
        "parent": "https://github.com/apache/harmony-classlib/commit/35e401323d9d0d6f6e59164b5218209ab10fe38c",
        "bug_id": "harmony-classlib_7",
        "file": [
            {
                "sha": "79e8195e3f1b63ba11f8397568942127f2c83acc",
                "filename": "modules/awt/src/main/java/common/java/awt/Font.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f9969f29537f8a289b15972711e19916b0be8970/modules/awt/src/main/java/common/java/awt/Font.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f9969f29537f8a289b15972711e19916b0be8970/modules/awt/src/main/java/common/java/awt/Font.java",
                "status": "modified",
                "changes": 28,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Font.java?ref=f9969f29537f8a289b15972711e19916b0be8970",
                "patch": "@@ -561,7 +561,12 @@ public String getFamily() {\n \n \n     public String getFamily(Locale l) {\n-        FontPeerImpl peer = (FontPeerImpl)this.getPeer();\n+        if (l == null) {\n+            throw new NullPointerException(Messages.getString(\n+                    \"awt.01\", \"Locale\")); //$NON-NLS-1$ \n+        }\n+\n+        FontPeerImpl peer = (FontPeerImpl) this.getPeer();\n         return peer.getFamily(l);\n     }\n \n@@ -575,12 +580,8 @@ public static Font getFont(Map<? extends Attribute, ?> attributes) {\n     }\n \n     public static Font getFont(String sp, Font f) {\n-        String pr = null;\n-        try {\n-            pr = System.getProperty(sp);\n-        } catch (Exception e){\n-        }\n-        if (pr == null){\n+        String pr = System.getProperty(sp);\n+        if (pr == null) {\n             return f;\n         }\n         return decode(pr);\n@@ -601,14 +602,13 @@ public String getFontName(Locale l) {\n         return peer.getFontName(l);\n     }\n \n-    public LineMetrics getLineMetrics(char[] chars, int start,\n-            int end, FontRenderContext frc) {\n-\n-        if (frc == null){\n+    public LineMetrics getLineMetrics(char[] chars, int start, int end,\n+            FontRenderContext frc) {\n+        if (frc == null) {\n             throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n         }\n \n-        FontPeerImpl peer = (FontPeerImpl)this.getPeer();\n+        FontPeerImpl peer = (FontPeerImpl) this.getPeer();\n \n         return peer.getLineMetrics((new String(chars)).substring(start, end),\n                 frc, this.getTransform());\n@@ -752,6 +752,10 @@ public Rectangle2D getStringBounds(char[] chars, int start, int end,\n     }\n \n     public Rectangle2D getMaxCharBounds(FontRenderContext frc) {\n+        if (frc == null){\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$ \n+        }\n+\n         FontPeerImpl peer = (FontPeerImpl)this.getPeer();\n \n         Rectangle2D bounds = peer.getMaxCharBounds(frc);",
                "deletions": 12
            },
            {
                "sha": "4fcc7990ffc8767f5d57e1a34ac644874fd1a839",
                "filename": "modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f9969f29537f8a289b15972711e19916b0be8970/modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f9969f29537f8a289b15972711e19916b0be8970/modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "status": "modified",
                "changes": 75,
                "additions": 59,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/FontTest.java?ref=f9969f29537f8a289b15972711e19916b0be8970",
                "patch": "@@ -19,51 +19,94 @@\n \n import java.awt.font.TextAttribute;\n import java.text.AttributedString;\n+import java.util.Collections;\n+import java.util.Map;\n \n import junit.framework.TestCase;\n \n public class FontTest extends TestCase {\n \n     private final Font f = new Font(\"dialog\", Font.PLAIN, 12);\n-    \n+\n     /**\n-     * Checks Font.getLineMetrics() methods if FontRenderContext parameter is NULL. \n-     *\n+     * Checks Font.getLineMetrics() methods if FontRenderContext parameter is\n+     * NULL.\n+     * \n      */\n-    public void test_Font_getLineMetrics_WithNullFRC(){\n-        // // regression test for Harmony-1465\n+    public void test_Font_getLineMetrics_WithNullFRC() {\n+        // Regression for Harmony-1465\n         final String str = \"test\";\n-        try{\n+        try {\n             f.getLineMetrics(str, null);\n             fail(\"NullPointerException expected but wasn't thrown!\");\n-        }catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // as expected\n         }\n \n-        try{\n+        try {\n             f.getLineMetrics(str, 1, 3, null);\n             fail(\"NullPointerException expected but wasn't thrown!\");\n-        }catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // as expected\n         }\n \n-        try{\n+        try {\n             f.getLineMetrics(str.toCharArray(), 1, 3, null);\n             fail(\"NullPointerException expected but wasn't thrown!\");\n-        }catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // as expected\n         }\n \n-        try{\n+        try {\n             AttributedString as = new AttributedString(\"test\");\n-            as.addAttribute(TextAttribute.FONT, f, 0, 2 );\n+            as.addAttribute(TextAttribute.FONT, f, 0, 2);\n \n             f.getLineMetrics(as.getIterator(), 1, 3, null);\n             fail(\"NullPointerException expected but wasn't thrown!\");\n-        }catch (NullPointerException e) {\n+        } catch (NullPointerException e) {\n             // as expected\n         }\n-        \n     }\n-    \n+\n+    public void test_Font_getMaxCharBounds_WithNullFRC() {\n+        // Regression for HARMONY-1549\n+        try {\n+            Font font = Font.decode(\"dialog\");\n+            System.out.println(font.getMaxCharBounds(null));\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+    }\n+\n+    public void test_Font_getFamily_WithNullLocale() {\n+        // Regression for Harmony-1543\n+        try {\n+            Font fnt = Font\n+                    .getFont((Map<? extends TextAttribute, ?>) Collections.EMPTY_MAP);\n+            fnt.getFamily(null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    public void test_Font_getFont_WithNullSystemProperty() {\n+        // Regression for HARMONY-1546\n+        try {\n+            Font.getFont((String) null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            Font.getFont((String) null, new Font(\"dialog\", Font.PLAIN, 12));\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+    }\n }",
                "deletions": 16
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6439 [classlib][luni] NullPointerException thrown in certain Serialization cases, refine the testcase\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@907658 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/16a7ff87a45d2a161581f0a8797c0a582c5ee343",
        "parent": "https://github.com/apache/harmony-classlib/commit/39f14561c0eac60eeb2760b131d1103df78038c8",
        "bug_id": "harmony-classlib_8",
        "file": [
            {
                "sha": "872ac736c6482ddd0fbb1fc2a7f6ec3469c186ab",
                "filename": "modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/16a7ff87a45d2a161581f0a8797c0a582c5ee343/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/16a7ff87a45d2a161581f0a8797c0a582c5ee343/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "status": "modified",
                "changes": 39,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java?ref=16a7ff87a45d2a161581f0a8797c0a582c5ee343",
                "patch": "@@ -224,7 +224,9 @@ public void test_isUnshared() throws Exception {\n     }\n     \n \n-    /* Write/serialize and read/de-serialize an object. */\n+    /**\n+     * Write/serialize and read/de-serialize an object with primitive field\n+     */ \n     public void test_ObjectWithPrimitiveField()\n         throws IOException, ClassNotFoundException {\n \n@@ -234,8 +236,7 @@ public void test_ObjectWithPrimitiveField()\n         final byte[] bytes = baos.toByteArray();\n         final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n         final MyObjectInputStream ois = new MyObjectInputStream(bais);\n-        /* NullPointerException is thrown by the readObject call below. */\n-        System.out.println(\"start\");\n+        // NullPointerException is thrown by the readObject call below. \n         ois.readObject();\n     }\n \n@@ -346,19 +347,20 @@ private void readObject(ObjectInputStream in) throws NotActiveException,\n }\n \n \n-/* Primitive fields are necessary to cause the NullPointerException. */\n+// Primitive fields are necessary to cause the NullPointerException. \n class MockClass implements Serializable {\n-    String field1 = \"field1\";\n-    String field2 = \"field2\";\n-    int field3 = 333;\n-    int field4 = 444;\n-    String field5 = \"field5\";\n+    String str1 = \"string 1\";\n+    String str2 = \"string 2\";\n+    int int1 = 1;\n+    int int2 = 2;\n+    String str3 = \"string 3\";\n }\n \n \n-/* Overrides writeClassDescriptor to store ObjectStreamClass in map. */\n+// Overrides writeClassDescriptor to store ObjectStreamClass in map. \n class MyObjectOutputStream extends ObjectOutputStream {\n \n+    // record the only ObjectStreamClass\n     static ObjectStreamClass descs;\n     \n     MyObjectOutputStream(OutputStream out)\n@@ -370,31 +372,24 @@ private void readObject(ObjectInputStream in) throws NotActiveException,\n     protected void writeClassDescriptor(ObjectStreamClass desc)\n         throws IOException {\n         descs = desc;\n-        final int id = 1;\n-        /* Write ID of ObjectStreamClass. */\n-        writeInt(id);\n+        // Write a int\n+        writeInt(1);\n     }\n }\n \n-/* Overrides readClassDescriptor to get ObjectStreamClass from map. */\n+// Overrides readClassDescriptor to get ObjectStreamClass from map.\n class MyObjectInputStream extends ObjectInputStream {\n \n     MyObjectInputStream(InputStream in)\n         throws IOException {\n-\n         super(in);\n     }\n \n     @Override\n     protected ObjectStreamClass readClassDescriptor()\n         throws IOException, ClassNotFoundException {\n-\n-        /* Read the ID and get the ObjectStreamClass from a map. */\n+        // Read a integer and get the only ObjectStreamClass for the test\n         final int id = readInt();\n-        final ObjectStreamClass desc = MyObjectOutputStream.descs;\n-        if (desc == null) {\n-            throw new ClassNotFoundException(\"id not found: \" + id);\n-        }\n-        return desc;\n+        return MyObjectOutputStream.descs;\n     }\n }",
                "deletions": 22
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6439 [classlib][luni] NullPointerException thrown in certain Serialization cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@907657 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/39f14561c0eac60eeb2760b131d1103df78038c8",
        "parent": "https://github.com/apache/harmony-classlib/commit/ced814f02c1e5c2455beb7976d9ef0b0a81928f7",
        "bug_id": "harmony-classlib_9",
        "file": [
            {
                "sha": "65b772d94d6239de89dd627f9395bfe9dd76d32f",
                "filename": "modules/luni/src/main/java/java/io/ObjectStreamField.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/39f14561c0eac60eeb2760b131d1103df78038c8/modules/luni/src/main/java/java/io/ObjectStreamField.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/39f14561c0eac60eeb2760b131d1103df78038c8/modules/luni/src/main/java/java/io/ObjectStreamField.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectStreamField.java?ref=39f14561c0eac60eeb2760b131d1103df78038c8",
                "patch": "@@ -333,6 +333,10 @@ public int compare(ObjectStreamField f1, ObjectStreamField f2) {\n     }\n \n     void resolve(ClassLoader loader) {\n+        if (typeString == null && isPrimitive()){\n+            // primitive type declared in a serializable class\n+            typeString = String.valueOf(getTypeCode());\n+        }\n         if (typeString.length() == 1) {\n             switch (typeString.charAt(0)) {\n                 case 'I':",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6439 [classlib][luni] NullPointerException thrown in certain Serialization cases\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@907655 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ced814f02c1e5c2455beb7976d9ef0b0a81928f7",
        "parent": "https://github.com/apache/harmony-classlib/commit/e66f14c5f2e37b4f42154ab5e2d5e83111ef403e",
        "bug_id": "harmony-classlib_10",
        "file": [
            {
                "sha": "27ec948973b05d20b435cb5638284a43db622a7b",
                "filename": "modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ced814f02c1e5c2455beb7976d9ef0b0a81928f7/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ced814f02c1e5c2455beb7976d9ef0b0a81928f7/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java",
                "status": "modified",
                "changes": 71,
                "additions": 71,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/io/ObjectStreamFieldTest.java?ref=ced814f02c1e5c2455beb7976d9ef0b0a81928f7",
                "patch": "@@ -26,6 +26,7 @@\n import java.io.ObjectOutputStream;\n import java.io.ObjectStreamClass;\n import java.io.ObjectStreamField;\n+import java.io.OutputStream;\n import java.io.Serializable;\n import java.io.StreamCorruptedException;\n import java.util.Date;\n@@ -221,6 +222,22 @@ public void test_isUnshared() throws Exception {\n         assertEquals(1, objectStreamClass.getField(\"i\").getOffset());\n         assertEquals(2, objectStreamClass.getField(\"s\").getOffset());\n     }\n+    \n+\n+    /* Write/serialize and read/de-serialize an object. */\n+    public void test_ObjectWithPrimitiveField()\n+        throws IOException, ClassNotFoundException {\n+\n+        final ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        final MyObjectOutputStream oos = new MyObjectOutputStream(baos);\n+        oos.writeObject(new MockClass());\n+        final byte[] bytes = baos.toByteArray();\n+        final ByteArrayInputStream bais = new ByteArrayInputStream(bytes);\n+        final MyObjectInputStream ois = new MyObjectInputStream(bais);\n+        /* NullPointerException is thrown by the readObject call below. */\n+        System.out.println(\"start\");\n+        ois.readObject();\n+    }\n \n     /**\n      * Sets up the fixture, for example, open a network connection. This method\n@@ -327,3 +344,57 @@ private void readObject(ObjectInputStream in) throws NotActiveException,\n         getField = in.readFields();\n     }\n }\n+\n+\n+/* Primitive fields are necessary to cause the NullPointerException. */\n+class MockClass implements Serializable {\n+    String field1 = \"field1\";\n+    String field2 = \"field2\";\n+    int field3 = 333;\n+    int field4 = 444;\n+    String field5 = \"field5\";\n+}\n+\n+\n+/* Overrides writeClassDescriptor to store ObjectStreamClass in map. */\n+class MyObjectOutputStream extends ObjectOutputStream {\n+\n+    static ObjectStreamClass descs;\n+    \n+    MyObjectOutputStream(OutputStream out)\n+        throws IOException {\n+        super(out);\n+    }\n+\n+    @Override\n+    protected void writeClassDescriptor(ObjectStreamClass desc)\n+        throws IOException {\n+        descs = desc;\n+        final int id = 1;\n+        /* Write ID of ObjectStreamClass. */\n+        writeInt(id);\n+    }\n+}\n+\n+/* Overrides readClassDescriptor to get ObjectStreamClass from map. */\n+class MyObjectInputStream extends ObjectInputStream {\n+\n+    MyObjectInputStream(InputStream in)\n+        throws IOException {\n+\n+        super(in);\n+    }\n+\n+    @Override\n+    protected ObjectStreamClass readClassDescriptor()\n+        throws IOException, ClassNotFoundException {\n+\n+        /* Read the ID and get the ObjectStreamClass from a map. */\n+        final int id = readInt();\n+        final ObjectStreamClass desc = MyObjectOutputStream.descs;\n+        if (desc == null) {\n+            throw new ClassNotFoundException(\"id not found: \" + id);\n+        }\n+        return desc;\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-1767] [classlib][swing]\njavax.swing.text.ComponentView(Element) throws unexpected NullPointerException\non user's implementation\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@785760 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/19fa0724290fc886188070b59bcb049ba28d32ce",
        "parent": "https://github.com/apache/harmony-classlib/commit/cadfe5a58b9cb06a8ba9b337ea1d51e360355aeb",
        "bug_id": "harmony-classlib_11",
        "file": [
            {
                "sha": "be8339a9ff44be02fa4067186db245bb91ec8f49",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/ComponentView.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/main/java/common/javax/swing/text/ComponentView.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/main/java/common/javax/swing/text/ComponentView.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/ComponentView.java?ref=19fa0724290fc886188070b59bcb049ba28d32ce",
                "patch": "@@ -182,7 +182,8 @@ public void paint(final Graphics g, final Shape shape) {\n     }\n \n     protected Component createComponent() {\n-        return StyleConstants.getComponent(getAttributes());\n+        final AttributeSet attrs = getAttributes();\n+        return attrs == null ? null : StyleConstants.getComponent(attrs);\n     }\n \n     private void isAxisValid(final int axis) {",
                "deletions": 1
            },
            {
                "sha": "db438efafa00077d61b6651b7141dff30467f26c",
                "filename": "modules/swing/src/test/api/java.injected/javax/swing/text/ComponentViewTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/test/api/java.injected/javax/swing/text/ComponentViewTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/test/api/java.injected/javax/swing/text/ComponentViewTest.java",
                "status": "modified",
                "changes": 47,
                "additions": 46,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java.injected/javax/swing/text/ComponentViewTest.java?ref=19fa0724290fc886188070b59bcb049ba28d32ce",
                "patch": "@@ -33,6 +33,10 @@\n import javax.swing.JTextArea;\n import javax.swing.JTextPane;\n import javax.swing.SwingTestCase;\n+import javax.swing.text.Element;\n+import javax.swing.text.PlainDocument;\n+import javax.swing.text.PlainView;\n+\n \n public class ComponentViewTest extends SwingTestCase {\n     StyledDocument document;\n@@ -649,6 +653,47 @@ public int getViewCount() {\n         }\n     }\n \n+    public void testSetParent_View() {\n+        // Regression test for HARMONY-1767 \n+        PlainDocument doc = new PlainDocument();\n+        Element e = doc.getDefaultRootElement();\n+        ComponentView obj = new ComponentView(new TestElement());\n+        obj.setParent(new PlainView(e));\n+    }  \n+\n+    private static class TestElement implements Element {\n+        public boolean isLeaf() {\n+            return false;\n+        }\n+        public Element getElement(int index) {\n+            return null;\n+        }\n+        public int getElementCount() {\n+            return 0;\n+        }\n+        public int getElementIndex(int offset) {\n+            return 0;\n+        }\n+        public int getEndOffset() {\n+            return 0;\n+        }       \n+        public int getStartOffset() {\n+            return 0;\n+        }       \n+        public AttributeSet getAttributes() {\n+            return null;\n+        }\n+        public String getName() {\n+            return \"AA\";\n+        }\n+        public Element getParentElement() {\n+            return null;\n+        }\n+        public Document getDocument() {\n+            return null;\n+        }\n+    }\n+\n     private void checkBounds(final int x, final int y, final int height, final Shape box) {\n         Rectangle bounds = box.getBounds();\n         assertEquals(x, bounds.x);\n@@ -688,4 +733,4 @@ private void checkViewToModel(final Shape shape, final int x, final int y) {\n             assertEquals(position, componentElement.getStartOffset());\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            },
            {
                "sha": "d924cd868eff2d7dd018ae953acdfc101877097f",
                "filename": "modules/swing/src/test/api/java.injected/javax/swing/text/StyleConstantsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/test/api/java.injected/javax/swing/text/StyleConstantsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/19fa0724290fc886188070b59bcb049ba28d32ce/modules/swing/src/test/api/java.injected/javax/swing/text/StyleConstantsTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java.injected/javax/swing/text/StyleConstantsTest.java?ref=19fa0724290fc886188070b59bcb049ba28d32ce",
                "patch": "@@ -434,6 +434,16 @@ public void testGetComponent() {\n         assertEquals(val, StyleConstants.getComponent(attr));\n     }\n \n+    public void testGetComponent_Null() {\n+        // Regression test for HARMONY-1767\n+        try {\n+            StyleConstants.getComponent(null);\n+            fail(\"NullPointerException should be thrown\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testSetComponent() {\n         attr.removeAttributes(attr);\n         Component val = new JLabel(\"test component\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-6215 ([classlib][beans] java.beans.XMLEncoder.writeExpression(Expression null) should throw NullPointerException)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@785154 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/78506fe758c831ed534fb66d7f3fb6e4c5e32334",
        "parent": "https://github.com/apache/harmony-classlib/commit/6eaa1f25cd5a10937ee6d901ca54906a3d75f994",
        "bug_id": "harmony-classlib_12",
        "file": [
            {
                "sha": "f826eb153647ee41cb02dae14c4729842f38f172",
                "filename": "modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78506fe758c831ed534fb66d7f3fb6e4c5e32334/modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78506fe758c831ed534fb66d7f3fb6e4c5e32334/modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/XMLEncoder.java?ref=78506fe758c831ed534fb66d7f3fb6e4c5e32334",
                "patch": "@@ -866,6 +866,9 @@ public void setOwner(Object owner) {\n \t */\n \t@Override\n     public void writeExpression(Expression oldExp) {\n+        if (null == oldExp) {\n+            throw new NullPointerException();\n+        }\n \t    boolean oldWritingObject = writingObject;\n \t    writingObject = true;\n \t\t// get expression value",
                "deletions": 0
            },
            {
                "sha": "44e3f3bb81cb9de858f34f16d599afa3a1fe5968",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78506fe758c831ed534fb66d7f3fb6e4c5e32334/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78506fe758c831ed534fb66d7f3fb6e4c5e32334/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java?ref=78506fe758c831ed534fb66d7f3fb6e4c5e32334",
                "patch": "@@ -30,6 +30,7 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.InputStreamReader;\n+import java.io.OutputStream;\n import java.io.PrintWriter;\n import java.io.StringReader;\n import java.util.Map;\n@@ -200,8 +201,24 @@ public static String string(Expression exp) {\n         return str;\n     }\n \n-    public void testWriteExpression() {\n-        // covered by testWriteObject\n+    public void testWriteExpression_Scenario1() {\n+        XMLEncoder xmlEncoder = new XMLEncoder((OutputStream) null);\n+        try {\n+            xmlEncoder.writeExpression((Expression) null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testWriteExpression_Scenario2() {\n+        XMLEncoder xmlEncoder = new XMLEncoder(new ByteArrayOutputStream());\n+        try {\n+            xmlEncoder.writeExpression((Expression) null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     public void testWriteStatement() {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6218 ([classlib][lang-management] java.lang.management.MemoryUsage.from(CompositeData cd) should throw IllegalArgumentException but not NullPointerException)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@785152 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6eaa1f25cd5a10937ee6d901ca54906a3d75f994",
        "parent": "https://github.com/apache/harmony-classlib/commit/e5f884a657aba99c324627acd912b5fabdb35d8e",
        "bug_id": "harmony-classlib_13",
        "file": [
            {
                "sha": "7f6eb47e12070679d89d53033eb2dfa2e18ae1bc",
                "filename": "modules/lang-management/src/main/java/java/lang/management/MemoryUsage.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eaa1f25cd5a10937ee6d901ca54906a3d75f994/modules/lang-management/src/main/java/java/lang/management/MemoryUsage.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eaa1f25cd5a10937ee6d901ca54906a3d75f994/modules/lang-management/src/main/java/java/lang/management/MemoryUsage.java",
                "status": "modified",
                "changes": 41,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/main/java/java/lang/management/MemoryUsage.java?ref=6eaa1f25cd5a10937ee6d901ca54906a3d75f994",
                "patch": "@@ -19,6 +19,8 @@\n \n import javax.management.openmbean.CompositeData;\n \n+import org.apache.harmony.lang.management.ManagementUtils;\n+\n /**\n  * <p>\n  * A memory usage snapshot.\n@@ -28,6 +30,14 @@\n  */\n public class MemoryUsage {\n \n+    private final long init;\n+\n+    private final long used;\n+\n+    private final long committed;\n+\n+    private final long max;\n+\n     /**\n      * <p>\n      * Constructs a MemoryUsage object from the CompositeData passed.\n@@ -42,25 +52,20 @@ public static MemoryUsage from(CompositeData cd) {\n         if (cd == null) {\n             return null;\n         }\n-        try {\n-            long init = ((Long) cd.get(\"init\")).longValue();\n-            long used = ((Long) cd.get(\"used\")).longValue();\n-            long committed = ((Long) cd.get(\"committed\")).longValue();\n-            long max = ((Long) cd.get(\"max\")).longValue();\n-            return new MemoryUsage(init, used, committed, max);\n-        } catch (ClassCastException e) {\n-            // if any cast fails, then a type was incorrect\n-            throw new IllegalArgumentException(e);\n-        }\n-    }\n-\n-    private final long init;\n-\n-    private final long used;\n+        ManagementUtils.verifyFieldNumber(cd, 4);\n+        String[] attributeNames = { \"init\", \"used\", \"committed\", \"max\" }; //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$ //$NON-NLS-4$\n+        ManagementUtils.verifyFieldNames(cd, attributeNames);\n+        String longClassName = \"java.lang.Long\"; //$NON-NLS-1$\n+        String[] attributeTypes = { longClassName, longClassName,\n+                longClassName, longClassName };\n+        ManagementUtils.verifyFieldTypes(cd, attributeNames, attributeTypes);\n \n-    private final long committed;\n-\n-    private final long max;\n+        long init = ((Long) cd.get(\"init\")).longValue();\n+        long used = ((Long) cd.get(\"used\")).longValue();\n+        long committed = ((Long) cd.get(\"committed\")).longValue();\n+        long max = ((Long) cd.get(\"max\")).longValue();\n+        return new MemoryUsage(init, used, committed, max);\n+    }\n \n     /**\n      * <p>",
                "deletions": 18
            },
            {
                "sha": "282fc9ab102c489dd7a545d8a271a9d05db2520a",
                "filename": "modules/lang-management/src/test/api/java/org/apache/harmony/lang/management/tests/java/lang/management/MemoryUsageTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eaa1f25cd5a10937ee6d901ca54906a3d75f994/modules/lang-management/src/test/api/java/org/apache/harmony/lang/management/tests/java/lang/management/MemoryUsageTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eaa1f25cd5a10937ee6d901ca54906a3d75f994/modules/lang-management/src/test/api/java/org/apache/harmony/lang/management/tests/java/lang/management/MemoryUsageTest.java",
                "status": "modified",
                "changes": 136,
                "additions": 136,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/api/java/org/apache/harmony/lang/management/tests/java/lang/management/MemoryUsageTest.java?ref=6eaa1f25cd5a10937ee6d901ca54906a3d75f994",
                "patch": "@@ -17,6 +17,7 @@\n \n package org.apache.harmony.lang.management.tests.java.lang.management;\n \n+import java.lang.management.MemoryNotificationInfo;\n import java.lang.management.MemoryUsage;\n \n import javax.management.openmbean.CompositeData;\n@@ -29,6 +30,9 @@\n \n public class MemoryUsageTest extends TestCase {\n \n+    private static final String CLASS_NAME = MemoryNotificationInfo.class\n+            .getName();\n+\n     public void testFrom() throws Exception {\n         String[] itemNames = { \"init\", \"used\", \"committed\", \"max\" };\n         Object[] items = { Long.valueOf(1024), Long.valueOf(2048), Long.valueOf(4096),\n@@ -94,6 +98,138 @@ public void test_from_NullCompositeData() {\n         assertNull(MemoryUsage.from(null));\n     }\n \n+    public void test_from_scenario1() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\", \"additionName\" };\n+        Object[] values = { 1024L, 2048L, 4096L, 8128L, \"additionalValue\" };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.STRING };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        MemoryUsage usage = MemoryUsage.from(data);\n+        assertEquals(values[0], usage.getInit());\n+        assertEquals(values[1], usage.getUsed());\n+        assertEquals(values[2], usage.getCommitted());\n+        assertEquals(values[3], usage.getMax());\n+    }\n+\n+    public void test_from_scenario2() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\" };\n+        Object[] values = { null, null, null };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario3() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { null, 2048L, 4096L, 8128L };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario4() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { 1024L, null, 4096L, 8128L };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario5() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { 1024L, 2048L, null, 8128L };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario6() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { 1024L, 2048L, 4096L, null };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario7() throws Exception {\n+        String[] names = { \"noninit\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { 1024L, 2048L, 4096L, 8128L };\n+        OpenType[] types = { SimpleType.LONG, SimpleType.LONG, SimpleType.LONG,\n+                SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_from_scenario8() throws Exception {\n+        String[] names = { \"init\", \"used\", \"committed\", \"max\" };\n+        Object[] values = { \"initValue\", 2048L, 4096L, 8128L };\n+        OpenType[] types = { SimpleType.STRING, SimpleType.LONG,\n+                SimpleType.LONG, SimpleType.LONG };\n+        CompositeType compositeType = getCompositeType(names, types);\n+        CompositeData data = new CompositeDataSupport(compositeType, names,\n+                values);\n+        try {\n+            MemoryUsage.from(data);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    protected CompositeType getCompositeType(String[] typeNames,\n+            OpenType[] typeTypes) throws Exception {\n+        return new CompositeType(CLASS_NAME, CLASS_NAME, typeNames, typeNames,\n+                typeTypes);\n+    }\n+\n     public void testConstructor() {\n         try {\n             new MemoryUsage(-2, 2048, 4096, 8128);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-6143 ([classlib][beans] java.beans.beancontext.BeanContextSupport.readChildren((ObjectInputStream) null) should throw NullPointerException)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@765560 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9e8c1a2c9b6a36471f6563d95f3d20b1becfff66",
        "parent": "https://github.com/apache/harmony-classlib/commit/b82c589072b9e366b199d39ebc2b3eff62f49272",
        "bug_id": "harmony-classlib_14",
        "file": [
            {
                "sha": "43b4cb707ac7e2e85af15f4a0dfc0ab4c8c93b51",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9e8c1a2c9b6a36471f6563d95f3d20b1becfff66/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9e8c1a2c9b6a36471f6563d95f3d20b1becfff66/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "status": "modified",
                "changes": 40,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java?ref=9e8c1a2c9b6a36471f6563d95f3d20b1becfff66",
                "patch": "@@ -288,10 +288,12 @@ public boolean add(Object child) {\n \n             // trigger hook\n             synchronized (child) {\n+                addSerializable(childBCSC);\n                 childJustAddedHook(child, childBCSC);\n             }\n             if (proxy != null) {\n                 synchronized (proxy) {\n+                    addSerializable(proxyBCSC);\n                     childJustAddedHook(proxy, proxyBCSC);\n                 }\n             }\n@@ -987,10 +989,12 @@ protected boolean remove(Object child, boolean setChildBC) {\n \n             // trigger hook\n             synchronized (child) {\n+                removeSerializable(childBCSC);\n                 childJustRemovedHook(child, childBCSC);\n             }\n             if (peer != null) {\n                 synchronized (peer) {\n+                    removeSerializable(peerBCSC);\n                     childJustRemovedHook(peer, peerBCSC);\n                 }\n             }\n@@ -1243,19 +1247,6 @@ private void writeObject(ObjectOutputStream oos) throws IOException {\n         serializing = true;\n \n         try {\n-            // count serializable children\n-            synchronized (children) {\n-                serializable = 0;\n-                for (Iterator iter = children.values().iterator(); iter\n-                        .hasNext();) {\n-                    BCSChild bcsc = (BCSChild) iter.next();\n-                    if (bcsc.child instanceof Serializable\n-                            && (bcsc.proxyPeer == null || bcsc.proxyPeer instanceof Serializable)) {\n-                        serializable++;\n-                    }\n-                }\n-            }\n-\n             oos.defaultWriteObject();\n \n             bcsPreSerializationHook(oos);\n@@ -1309,6 +1300,29 @@ private void readObject(ObjectInputStream ois) throws IOException,\n         }\n     }\n \n+    /*\n+     * Increase variable serializable if child and proxyPeer fields of the given\n+     * BCSChild object are serializable\n+     */\n+    private void addSerializable(BCSChild bcsc) {\n+        if (bcsc.child instanceof Serializable\n+                && (bcsc.proxyPeer == null || bcsc.proxyPeer instanceof Serializable)) {\n+            serializable++;\n+        }\n+    }\n+\n+    /*\n+     * Decrease variable serializable if child and proxyPeer fields of the given\n+     * BCSChild object are serializable\n+     */\n+    private void removeSerializable(BCSChild bcsc) {\n+        if (serializable > 0\n+                && bcsc.child instanceof Serializable\n+                && (bcsc.proxyPeer == null || bcsc.proxyPeer instanceof Serializable)) {\n+            serializable--;\n+        }\n+    }\n+\n }\n \n ",
                "deletions": 13
            },
            {
                "sha": "f6c86b1f4fb226ab9c5848302dac567c6bd456c3",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9e8c1a2c9b6a36471f6563d95f3d20b1becfff66/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9e8c1a2c9b6a36471f6563d95f3d20b1becfff66/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "status": "modified",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java?ref=9e8c1a2c9b6a36471f6563d95f3d20b1becfff66",
                "patch": "@@ -1422,6 +1422,43 @@ public void testReadChildren() throws PropertyVetoException, IOException,\n         support.records.assertEndOfRecords();\n     }\n \n+    public void test_readChildren_NPE_scenario1() throws Exception {\n+        BeanContextSupport beanContextSupport = new BeanContextSupport();\n+        beanContextSupport.add(beanContextSupport);\n+        assertEquals(1, beanContextSupport.size());\n+        assertFalse(beanContextSupport.isSerializing());\n+        try {\n+            beanContextSupport.readChildren((ObjectInputStream) null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_readChildren_NPE_scenario2() throws Exception {\n+        BeanContextSupport beanContextSupport = new BeanContextSupport();\n+        beanContextSupport.readChildren((ObjectInputStream) null);\n+    }\n+\n+    public void test_readChildren_NPE_scenario3() throws Exception {\n+        BeanContextSupport beanContextSupport = new BeanContextSupport();\n+        beanContextSupport.add(new Object());\n+        beanContextSupport.readChildren((ObjectInputStream) null);\n+    }\n+\n+    public void test_readChildren_NPE_scenario4() throws Exception {\n+        BeanContextSupport beanContextSupport = new BeanContextSupport();\n+        beanContextSupport.add(\"Serializable\");\n+        try {\n+            beanContextSupport.readChildren((ObjectInputStream) null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        beanContextSupport.remove(\"Serializable\");\n+        beanContextSupport.readChildren((ObjectInputStream) null);\n+    }\n+\n     public void testRemoveAll() {\n         MockBeanContextSupport support = new MockBeanContextSupport();\n         support.records.assertRecord(\"initialize\", null);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-5437 \"[classlib][awt][appletviewer] Drawing of the \ncheckbox with null label throws NullPointerException\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@616278 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1e57598f60ed61b9fd78729e676f57ff9585c60a",
        "parent": "https://github.com/apache/harmony-classlib/commit/154db8bed3ba28a8631f91fa011420f4591aa2da",
        "bug_id": "harmony-classlib_15",
        "file": [
            {
                "sha": "ba980307f5db1923edf4e2c57d7740fa37bc1015",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/theme/DefaultCheckbox.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1e57598f60ed61b9fd78729e676f57ff9585c60a/modules/awt/src/main/java/common/org/apache/harmony/awt/theme/DefaultCheckbox.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1e57598f60ed61b9fd78729e676f57ff9585c60a/modules/awt/src/main/java/common/org/apache/harmony/awt/theme/DefaultCheckbox.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/theme/DefaultCheckbox.java?ref=1e57598f60ed61b9fd78729e676f57ff9585c60a",
                "patch": "@@ -86,10 +86,13 @@ public static Rectangle getTextRect(CheckboxState s) {\n     }\n \n     public static void drawText(Graphics g, TextState s, Rectangle r) {\n+        String text = s.getText();\n+        if (text == null){\n+            return;\n+        }\n         int baseX = r.x;\n         int h = getTextSize(s).height;\n         int baseY = r.y + r.height - h / 5;\n-        String text = s.getText();\n         g.setFont(s.getFont());\n         g.setColor(s.getTextColor());\n         if (s.isEnabled()) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply regression test for HARMONY-2490 ([classlib][beans] java.beans.DefaultPersistenceDelegate.initialize() does not throw NullPointerException (RI compatibility issue))\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@598642 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3096d32fea67fe6a28072ed050d3eed63d127443",
        "parent": "https://github.com/apache/harmony-classlib/commit/4d69acb0f3ce5ced69ba9b9a5ea9a2bb813ad9be",
        "bug_id": "harmony-classlib_16",
        "file": [
            {
                "sha": "32040bbaf32aa36850a5532250bfd4a3333713ec",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3096d32fea67fe6a28072ed050d3eed63d127443/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3096d32fea67fe6a28072ed050d3eed63d127443/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java",
                "status": "modified",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/DefaultPersistenceDelegateTest.java?ref=3096d32fea67fe6a28072ed050d3eed63d127443",
                "patch": "@@ -374,6 +374,28 @@ public void testInstantiate_NotRegularGetter() throws Exception {\n         assertNull(e.getArguments()[0]);\n     }\n \n+    public void testInstantiate_NPE() {\n+\n+        try {\n+            testDefaultPersistenceDelegate obj = new testDefaultPersistenceDelegate();\n+            obj.initialize(Object.class, null, new Object(), new Encoder());\n+            fail(\"NullPointerException should be thrown\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    class testDefaultPersistenceDelegate extends DefaultPersistenceDelegate {\n+        testDefaultPersistenceDelegate() {\n+            super();\n+        }\n+\n+        public void initialize(Class<?> type, Object oldInstance,\n+                Object newInstance, Encoder out) {\n+            super.initialize(type, oldInstance, newInstance, out);\n+        }\n+    }\n+        \n     /*\n      * Tests mutatesTo() under normal conditions without any properties.\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-5070 \"[classlib][swing] Harmony may throw \nNullPointerException in paintIcon\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@597432 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a086721c0b1be775505805114fd26ffa1a95f942",
        "parent": "https://github.com/apache/harmony-classlib/commit/ad24c242cb988e0994afcfee4b930d91cbc8a608",
        "bug_id": "harmony-classlib_17",
        "file": [
            {
                "sha": "e1fcf01ccd21f2973db46f35c6f03768660a2890",
                "filename": "modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a086721c0b1be775505805114fd26ffa1a95f942/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a086721c0b1be775505805114fd26ffa1a95f942/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java?ref=a086721c0b1be775505805114fd26ffa1a95f942",
                "patch": "@@ -343,6 +343,19 @@ private static void imBlit(\n             Color bgcolor,\n             MultiRectArea clip\n     ) {\n+\n+        if(dstX < 0){\n+            width += dstX;\n+            dstX = 0;\n+        }\n+\n+        if(dstY < 0){\n+            height += dstY;\n+            dstY = 0;\n+        }\n+\n+        if(width <= 0 || height <= 0) return;\n+\n         XSurface xDstSurf = ((XSurface) dstSurf);\n \n         boolean srcNoAlpha =",
                "deletions": 0
            },
            {
                "sha": "dde53e6c0decce972694fbfa905ab5a824b6d573",
                "filename": "modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a086721c0b1be775505805114fd26ffa1a95f942/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a086721c0b1be775505805114fd26ffa1a95f942/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "status": "modified",
                "changes": 19,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java?ref=a086721c0b1be775505805114fd26ffa1a95f942",
                "patch": "@@ -62,24 +62,7 @@\n     }\n \n     void setRoi(Rectangle2D roi) {\n-        if (roi.getX() < 0 || roi.getY() < 0) {\n-            double x = roi.getX();\n-            double y = roi.getY();\n-            double width = roi.getWidth();\n-            double height = (int) roi.getHeight();\n-            if (x < 0) {\n-                width += x;\n-                x = 0;\n-            }\n-            if (y < 0) {\n-                height += y;\n-                y = 0;\n-            }\n-\n-            this.roi = new Rectangle2D.Double(x, y, width, height);\n-        } else {\n-            this.roi = roi;\n-        }\n+        this.roi = roi;\n     }\n \n     public ColorModel getColorModel() {",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-4787 \"[classlib][swing] To reduce NullPointerException in swing\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@575606 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/af4c2e8623d059884a0fc423d005fa016a44fa93",
        "parent": "https://github.com/apache/harmony-classlib/commit/7f4d3e71fda5c20032cb5412b533be42ebddbba5",
        "bug_id": "harmony-classlib_18",
        "file": [
            {
                "sha": "7dc583e393a5acbf551ff19ce965a98f1124fded",
                "filename": "modules/swing/src/main/java/common/javax/swing/JTable.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af4c2e8623d059884a0fc423d005fa016a44fa93/modules/swing/src/main/java/common/javax/swing/JTable.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af4c2e8623d059884a0fc423d005fa016a44fa93/modules/swing/src/main/java/common/javax/swing/JTable.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JTable.java?ref=af4c2e8623d059884a0fc423d005fa016a44fa93",
                "patch": "@@ -1264,7 +1264,11 @@ public void moveColumn(int viewColumn, int targetViewColumn) {\n     }\n \n     public int columnAtPoint(Point p) {\n-        return getTableHeader().columnAtPoint(p);\n+        int x = p.x;\n+        if( !getComponentOrientation().isLeftToRight() ) {\n+          x = getWidth() - x;\n+        }\n+        return getColumnModel().getColumnIndexAtX(x);\n     }\n \n     public int rowAtPoint(Point p) {\n@@ -1645,7 +1649,7 @@ public void doLayout() {\n         if (getAutoResizeMode() == AUTO_RESIZE_OFF) {\n             return;\n         }\n-        TableColumn resizingColumn = getTableHeader().getResizingColumn();\n+        TableColumn resizingColumn = (getTableHeader() == null) ? null : getTableHeader().getResizingColumn();\n         if (resizingColumn == null) {\n             ResizableElements resizable = new ResizableElements() {\n                 public int getElementsCount() {",
                "deletions": 2
            },
            {
                "sha": "c1490e381d8a210e9a7e279fccf02926150ee613",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af4c2e8623d059884a0fc423d005fa016a44fa93/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af4c2e8623d059884a0fc423d005fa016a44fa93/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 10,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=af4c2e8623d059884a0fc423d005fa016a44fa93",
                "patch": "@@ -172,18 +172,24 @@ private void listChanged() {\n     public class PropertyChangeHandler implements PropertyChangeListener {\n         public void propertyChange(final PropertyChangeEvent event) {\n             if (StringConstants.ENABLED_PROPERTY_CHANGED.equals(event.getPropertyName())) {\n+                if (arrowButton != null) {\n                 arrowButton.setEnabled(((Boolean)event.getNewValue()).booleanValue());\n-                if (comboBox.isEditable()) {\n+                }\n+                if (comboBox.isEditable() && (editor != null)) {\n                     editor.setEnabled(((Boolean)event.getNewValue()).booleanValue());\n                 }\n             } else if (StringConstants.TOOLTIP_PROPERTY_CHANGED.equals(event.getPropertyName())) {\n+                if (arrowButton != null) {\n                 arrowButton.setToolTipText((String)event.getNewValue());\n+                }\n                 if (comboBox.isEditable() && (editor instanceof JComponent)) {\n                     ((JComponent)editor).setToolTipText((String)event.getNewValue());\n                 }\n             } else if (StringConstants.FONT_PROPERTY_CHANGED.equals(event.getPropertyName())) {\n+                if (arrowButton != null) {\n                 arrowButton.setFont((Font)event.getNewValue());\n-                if (comboBox.isEditable()) {\n+                }\n+                if (comboBox.isEditable() && (editor != null)) {\n                     editor.setFont((Font)event.getNewValue());\n                 }\n             } else if (StringConstants.EDITABLE_PROPERTY_CHANGED.equals(event.getPropertyName())) {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix HARMONY-4653(BigInteger andNot() fails to throw NullPointerException on null paramer)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@567914 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d4dd30a0fca0ed11850156269e84c1b207ed3d6f",
        "parent": "https://github.com/apache/harmony-classlib/commit/a89674e5f4f0a8e5ced80e482370981ae3d25545",
        "bug_id": "harmony-classlib_19",
        "file": [
            {
                "sha": "9dd53e92e8aa0d3f16e5d0d4e2c0da0bd3766e72",
                "filename": "modules/math/src/main/java/java/math/Logical.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/main/java/java/math/Logical.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/main/java/java/math/Logical.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/math/src/main/java/java/math/Logical.java?ref=d4dd30a0fca0ed11850156269e84c1b207ed3d6f",
                "patch": "@@ -224,12 +224,12 @@ static BigInteger andNegative(BigInteger longer, BigInteger shorter) {\n     \n     /** @see BigInteger#andNot(BigInteger) */\n     static BigInteger andNot(BigInteger val, BigInteger that) {\n-        if (val.sign == 0) {\n-            return BigInteger.ZERO;\n-        }\n         if (that.sign == 0 ) {\n             return val;\n         }\n+        if (val.sign == 0) {\n+            return BigInteger.ZERO;\n+        }\n         if (val.equals(BigInteger.MINUS_ONE)) {\n             return that.not();\n         }\n@@ -239,7 +239,7 @@ static BigInteger andNot(BigInteger val, BigInteger that) {\n         \n         //if val == that, return 0\n         \n-                    if (val.sign > 0) {\n+       if (val.sign > 0) {\n             if (that.sign > 0) {\n                 return andNotPositive(val, that);\n             } else {",
                "deletions": 4
            },
            {
                "sha": "9b51097e0b700423befd52e464dc622803a2ee34",
                "filename": "modules/math/src/test/java/tests/api/java/math/BigDecimalTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/test/java/tests/api/java/math/BigDecimalTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/test/java/tests/api/java/math/BigDecimalTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/math/src/test/java/tests/api/java/math/BigDecimalTest.java?ref=d4dd30a0fca0ed11850156269e84c1b207ed3d6f",
                "patch": "@@ -911,6 +911,7 @@ public void test_stripTrailingZero() {\n \t\t\t\t);\n \t\t\n \t\t/* Zero */\n+        //regression for HARMONY-4623, NON-BUG DIFF with RI\n \t\tBigDecimal zerotest = new BigDecimal(\"0.0000\");\n \t\tassertTrue(\"stripTrailingZero failed for 0.0000\",\n \t\t\t\t((zerotest.stripTrailingZeros()).scale() == 0)",
                "deletions": 0
            },
            {
                "sha": "8cc703f006bd9c6d43d78618ff2e560faa4c9245",
                "filename": "modules/math/src/test/java/tests/api/java/math/BigIntegerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/test/java/tests/api/java/math/BigIntegerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d4dd30a0fca0ed11850156269e84c1b207ed3d6f/modules/math/src/test/java/tests/api/java/math/BigIntegerTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/math/src/test/java/tests/api/java/math/BigIntegerTest.java?ref=d4dd30a0fca0ed11850156269e84c1b207ed3d6f",
                "patch": "@@ -857,6 +857,15 @@ public void test_andNotLjava_math_BigInteger() {\n \t\t\t\t\t\t(i1.testBit(i) && !i2.testBit(i)) == res.testBit(i));\n             }\n \t\t}\n+        //regression for HARMONY-4653\n+        try{\n+            BigInteger.ZERO.andNot(null);\n+            fail(\"should throw NPE\");\n+        }catch(Exception e){\n+            //expected\n+        }\n+        BigInteger bi = new BigInteger(0, new byte[]{});\n+        assertEquals(BigInteger.ZERO, bi.andNot(BigInteger.ZERO));\n \t}\n     \n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix HARMONY-4472 ([classlib][regex] Pattern.compile(String) throws unexpected NullPointerException)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@561790 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a0e23a8d081cfa0b549119af92deaa356cdb29bd",
        "parent": "https://github.com/apache/harmony-classlib/commit/8605a952a2a712676d39187a0ae08991bb411f6e",
        "bug_id": "harmony-classlib_20",
        "file": [
            {
                "sha": "b37c466e441438bf866d61f0de750e32adc80145",
                "filename": "modules/regex/src/main/java/java/util/regex/JointSet.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0e23a8d081cfa0b549119af92deaa356cdb29bd/modules/regex/src/main/java/java/util/regex/JointSet.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0e23a8d081cfa0b549119af92deaa356cdb29bd/modules/regex/src/main/java/java/util/regex/JointSet.java",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/regex/src/main/java/java/util/regex/JointSet.java?ref=a0e23a8d081cfa0b549119af92deaa356cdb29bd",
                "patch": "@@ -22,14 +22,12 @@\n package java.util.regex;\n \n import java.util.ArrayList;\n+import java.util.Iterator;\n \n /**\n  * Represents group, which is alternation of other subexpression.\n  * One should think about \"group\" in this model as JointSet opening\n  * group and corresponding FSet closing group.\n- * \n- * @author Nikolay A. Kuznetsov\n- * @version $Revision: 1.12.2.2 $\n  */\n class JointSet extends AbstractSet {\n     \n@@ -53,6 +51,9 @@ public JointSet(ArrayList children, FSet fSet) {\n      */\n     public int matches(int stringIndex, CharSequence testString,\n             MatchResultImpl matchResult) {\n+        if (children == null) {\n+            return -1;\n+        }\n         int start = matchResult.getStart(groupIndex);\n         matchResult.setStart(groupIndex, stringIndex);\n         int size = children.size();\n@@ -84,9 +85,11 @@ public int getGroup() {\n     }\n \n     public boolean first(AbstractSet set) {\n-        for (java.util.Iterator i = children.iterator(); i.hasNext();) {\n-            if (((AbstractSet) i.next()).first(set)) {\n-                return true;\n+        if (children != null) {\n+            for (Iterator i = children.iterator(); i.hasNext();) {\n+                if (((AbstractSet) i.next()).first(set)) {\n+                    return true;\n+                }\n             }\n         }\n ",
                "deletions": 6
            },
            {
                "sha": "dae05e543dcd7eea39e6d508ef3d7567b47ca9bc",
                "filename": "modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/PatternTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0e23a8d081cfa0b549119af92deaa356cdb29bd/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/PatternTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0e23a8d081cfa0b549119af92deaa356cdb29bd/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/PatternTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/PatternTest.java?ref=a0e23a8d081cfa0b549119af92deaa356cdb29bd",
                "patch": "@@ -511,13 +511,15 @@ public void testEscapes() {\n \t\tassertTrue(mat.matches());\n \t}\n \n-\tpublic void testBug181() {\n-\t\tPattern.compile(\"[\\\\t-\\\\r]\");\n-\t}\n+\tpublic void testRegressions() {\n+\t    // Bug 181\n+        Pattern.compile(\"[\\\\t-\\\\r]\");\n+\n+        // HARMONY-4472\n+        Pattern.compile(\"a*.+\");\n \n-\tpublic void _testBug187() {\n-\t\tPattern\n-\t\t\t\t.compile(\"|(?idmsux-idmsux)|(?idmsux-idmsux)|[^|\\\\[-\\\\0274|\\\\,-\\\\\\\\[^|W\\\\}\\\\nq\\\\x65\\\\002\\\\xFE\\\\05\\\\06\\\\00\\\\x66\\\\x47i\\\\,\\\\xF2\\\\=\\\\06\\\\u0EA4\\\\x9B\\\\x3C\\\\f\\\\|\\\\{\\\\xE5\\\\05\\\\r\\\\u944A\\\\xCA\\\\e|\\\\x19\\\\04\\\\x07\\\\04\\\\u607B\\\\023\\\\0073\\\\x91Tr\\\\0150\\\\x83]]?(?idmsux-idmsux:\\\\p{Alpha}{7}?)||(?<=[^\\\\uEC47\\\\01\\\\02\\\\u3421\\\\a\\\\f\\\\a\\\\013q\\\\035w\\\\e])(?<=\\\\p{Punct}{0,}?)(?=^\\\\p{Lower})(?!\\\\b{8,14})(?<![|\\\\00-\\\\0146[^|\\\\04\\\\01\\\\04\\\\060\\\\f\\\\u224DO\\\\x1A\\\\xC4\\\\00\\\\02\\\\0315\\\\0351\\\\u84A8\\\\xCBt\\\\xCC\\\\06|\\\\0141\\\\00\\\\=\\\\e\\\\f\\\\x6B\\\\0026Tb\\\\040\\\\x76xJ&&[\\\\\\\\-\\\\]\\\\05\\\\07\\\\02\\\\u2DAF\\\\t\\\\x9C\\\\e\\\\0023\\\\02\\\\,X\\\\e|\\\\u6058flY\\\\u954C]]]{5}?)(?<=\\\\p{Sc}{8}+)[^|\\\\026-\\\\u89BA|o\\\\u6277\\\\t\\\\07\\\\x50&&\\\\p{Punct}]{8,14}+((?<=^\\\\p{Punct})|(?idmsux-idmsux)||(?>[\\\\x3E-\\\\]])|(?idmsux-idmsux:\\\\p{Punct})|(?<![\\\\0111\\\\0371\\\\xDF\\\\u6A49\\\\07\\\\u2A4D\\\\00\\\\0212\\\\02Xd-\\\\xED[^\\\\a-\\\\0061|\\\\0257\\\\04\\\\f\\\\[\\\\0266\\\\043\\\\03\\\\x2D\\\\042&&[^\\\\f-\\\\]&&\\\\s]]])|(?>[|\\\\n\\\\042\\\\uB09F\\\\06\\\\u0F2B\\\\uC96D\\\\x89\\\\uC166\\\\xAA|\\\\04-\\\\][^|\\\\a\\\\|\\\\rx\\\\04\\\\uA770\\\\n\\\\02\\\\t\\\\052\\\\056\\\\0274\\\\|\\\\=\\\\07\\\\e|\\\\00-\\\\x1D&&[^\\\\005\\\\uB15B\\\\uCDAC\\\\n\\\\x74\\\\0103\\\\0147\\\\uD91B\\\\n\\\\062G\\\\u9B4B\\\\077\\\\}\\\\0324&&[^\\\\0302\\\\,\\\\0221\\\\04\\\\u6D16\\\\04xy\\\\uD193\\\\[\\\\061\\\\06\\\\045\\\\x0F|\\\\e\\\\xBB\\\\f\\\\u1B52\\\\023\\\\u3AD2\\\\033\\\\007\\\\022\\\\}\\\\x66\\\\uA63FJ-\\\\0304]]]]{0,0})||(?<![^|\\\\0154U\\\\u0877\\\\03\\\\fy\\\\n\\\\|\\\\0147\\\\07-\\\\=[|q\\\\u69BE\\\\0243\\\\rp\\\\053\\\\02\\\\x33I\\\\u5E39\\\\u9C40\\\\052-\\\\xBC[|\\\\0064-\\\\?|\\\\uFC0C\\\\x30\\\\0060\\\\x45\\\\\\\\\\\\02\\\\?p\\\\xD8\\\\0155\\\\07\\\\0367\\\\04\\\\uF07B\\\\000J[^|\\\\0051-\\\\{|\\\\u9E4E\\\\u7328\\\\]\\\\u6AB8\\\\06\\\\x71\\\\a\\\\]\\\\e\\\\|KN\\\\u06AA\\\\0000\\\\063\\\\u2523&&[\\\\005\\\\0277\\\\x41U\\\\034\\\\}R\\\\u14C7\\\\u4767\\\\x09\\\\n\\\\054Ev\\\\0144\\\\<\\\\f\\\\,Q-\\\\xE4]]]]]{3}+)|(?>^+)|(?![^|\\\\|\\\\nJ\\\\t\\\\<\\\\04E\\\\\\\\\\\\t\\\\01\\\\\\\\\\\\02\\\\|\\\\=\\\\}\\\\xF3\\\\uBEC2\\\\032K\\\\014\\\\uCC5F\\\\072q\\\\|\\\\0153\\\\xD9\\\\0322\\\\uC6C8[^\\\\t\\\\0342\\\\x34\\\\x91\\\\06\\\\{\\\\xF1\\\\a\\\\u1710\\\\?\\\\xE7\\\\uC106\\\\02pF\\\\<&&[^|\\\\]\\\\064\\\\u381D\\\\u50CF\\\\eO&&[^|\\\\06\\\\x2F\\\\04\\\\045\\\\032\\\\u8536W\\\\0377\\\\0017|\\\\x06\\\\uE5FA\\\\05\\\\xD4\\\\020\\\\04c\\\\xFC\\\\02H\\\\x0A\\\\r]]]]+?)(?idmsux-idmsux)|(?<![|\\\\r-\\\\,&&[I\\\\t\\\\r\\\\0201\\\\xDB\\\\e&&[^|\\\\02\\\\06\\\\00\\\\<\\\\a\\\\u7952\\\\064\\\\051\\\\073\\\\x41\\\\?n\\\\040\\\\0053\\\\031&&[\\\\x15-\\\\|]]]]{8,11}?)(?![^|\\\\<-\\\\uA74B\\\\xFA\\\\u7CD2\\\\024\\\\07n\\\\<\\\\x6A\\\\0042\\\\uE4FF\\\\r\\\\u896B\\\\[\\\\=\\\\042Y&&^\\\\p{ASCII}]++)|(?<![R-\\\\|&&[\\\\a\\\\0120A\\\\u6145\\\\<\\\\050-d[|\\\\e-\\\\uA07C|\\\\016-\\\\u80D9]]]{1,}+)|(?idmsux-idmsux)|(?idmsux-idmsux)|(?idmsux-idmsux:\\\\B{6,}?)|(?<=\\\\D{5,8}?)|(?>[\\\\{-\\\\0207|\\\\06-\\\\0276\\\\p{XDigit}])(?idmsux-idmsux:[^|\\\\x52\\\\0012\\\\]u\\\\xAD\\\\0051f\\\\0142\\\\\\\\l\\\\|\\\\050\\\\05\\\\f\\\\t\\\\u7B91\\\\r\\\\u7763\\\\{|h\\\\0104\\\\a\\\\f\\\\0234\\\\u2D4F&&^\\\\P{InGreek}]))\");\n+        // Bug187\n+        Pattern.compile(\"|(?idmsux-idmsux)|(?idmsux-idmsux)|[^|\\\\[-\\\\0274|\\\\,-\\\\\\\\[^|W\\\\}\\\\nq\\\\x65\\\\002\\\\xFE\\\\05\\\\06\\\\00\\\\x66\\\\x47i\\\\,\\\\xF2\\\\=\\\\06\\\\u0EA4\\\\x9B\\\\x3C\\\\f\\\\|\\\\{\\\\xE5\\\\05\\\\r\\\\u944A\\\\xCA\\\\e|\\\\x19\\\\04\\\\x07\\\\04\\\\u607B\\\\023\\\\0073\\\\x91Tr\\\\0150\\\\x83]]?(?idmsux-idmsux:\\\\p{Alpha}{7}?)||(?<=[^\\\\uEC47\\\\01\\\\02\\\\u3421\\\\a\\\\f\\\\a\\\\013q\\\\035w\\\\e])(?<=\\\\p{Punct}{0,}?)(?=^\\\\p{Lower})(?!\\\\b{8,14})(?<![|\\\\00-\\\\0146[^|\\\\04\\\\01\\\\04\\\\060\\\\f\\\\u224DO\\\\x1A\\\\xC4\\\\00\\\\02\\\\0315\\\\0351\\\\u84A8\\\\xCBt\\\\xCC\\\\06|\\\\0141\\\\00\\\\=\\\\e\\\\f\\\\x6B\\\\0026Tb\\\\040\\\\x76xJ&&[\\\\\\\\-\\\\]\\\\05\\\\07\\\\02\\\\u2DAF\\\\t\\\\x9C\\\\e\\\\0023\\\\02\\\\,X\\\\e|\\\\u6058flY\\\\u954C]]]{5}?)(?<=\\\\p{Sc}{8}+)[^|\\\\026-\\\\u89BA|o\\\\u6277\\\\t\\\\07\\\\x50&&\\\\p{Punct}]{8,14}+((?<=^\\\\p{Punct})|(?idmsux-idmsux)||(?>[\\\\x3E-\\\\]])|(?idmsux-idmsux:\\\\p{Punct})|(?<![\\\\0111\\\\0371\\\\xDF\\\\u6A49\\\\07\\\\u2A4D\\\\00\\\\0212\\\\02Xd-\\\\xED[^\\\\a-\\\\0061|\\\\0257\\\\04\\\\f\\\\[\\\\0266\\\\043\\\\03\\\\x2D\\\\042&&[^\\\\f-\\\\]&&\\\\s]]])|(?>[|\\\\n\\\\042\\\\uB09F\\\\06\\\\u0F2B\\\\uC96D\\\\x89\\\\uC166\\\\xAA|\\\\04-\\\\][^|\\\\a\\\\|\\\\rx\\\\04\\\\uA770\\\\n\\\\02\\\\t\\\\052\\\\056\\\\0274\\\\|\\\\=\\\\07\\\\e|\\\\00-\\\\x1D&&[^\\\\005\\\\uB15B\\\\uCDAC\\\\n\\\\x74\\\\0103\\\\0147\\\\uD91B\\\\n\\\\062G\\\\u9B4B\\\\077\\\\}\\\\0324&&[^\\\\0302\\\\,\\\\0221\\\\04\\\\u6D16\\\\04xy\\\\uD193\\\\[\\\\061\\\\06\\\\045\\\\x0F|\\\\e\\\\xBB\\\\f\\\\u1B52\\\\023\\\\u3AD2\\\\033\\\\007\\\\022\\\\}\\\\x66\\\\uA63FJ-\\\\0304]]]]{0,0})||(?<![^|\\\\0154U\\\\u0877\\\\03\\\\fy\\\\n\\\\|\\\\0147\\\\07-\\\\=[|q\\\\u69BE\\\\0243\\\\rp\\\\053\\\\02\\\\x33I\\\\u5E39\\\\u9C40\\\\052-\\\\xBC[|\\\\0064-\\\\?|\\\\uFC0C\\\\x30\\\\0060\\\\x45\\\\\\\\\\\\02\\\\?p\\\\xD8\\\\0155\\\\07\\\\0367\\\\04\\\\uF07B\\\\000J[^|\\\\0051-\\\\{|\\\\u9E4E\\\\u7328\\\\]\\\\u6AB8\\\\06\\\\x71\\\\a\\\\]\\\\e\\\\|KN\\\\u06AA\\\\0000\\\\063\\\\u2523&&[\\\\005\\\\0277\\\\x41U\\\\034\\\\}R\\\\u14C7\\\\u4767\\\\x09\\\\n\\\\054Ev\\\\0144\\\\<\\\\f\\\\,Q-\\\\xE4]]]]]{3}+)|(?>^+)|(?![^|\\\\|\\\\nJ\\\\t\\\\<\\\\04E\\\\\\\\\\\\t\\\\01\\\\\\\\\\\\02\\\\|\\\\=\\\\}\\\\xF3\\\\uBEC2\\\\032K\\\\014\\\\uCC5F\\\\072q\\\\|\\\\0153\\\\xD9\\\\0322\\\\uC6C8[^\\\\t\\\\0342\\\\x34\\\\x91\\\\06\\\\{\\\\xF1\\\\a\\\\u1710\\\\?\\\\xE7\\\\uC106\\\\02pF\\\\<&&[^|\\\\]\\\\064\\\\u381D\\\\u50CF\\\\eO&&[^|\\\\06\\\\x2F\\\\04\\\\045\\\\032\\\\u8536W\\\\0377\\\\0017|\\\\x06\\\\uE5FA\\\\05\\\\xD4\\\\020\\\\04c\\\\xFC\\\\02H\\\\x0A\\\\r]]]]+?)(?idmsux-idmsux)|(?<![|\\\\r-\\\\,&&[I\\\\t\\\\r\\\\0201\\\\xDB\\\\e&&[^|\\\\02\\\\06\\\\00\\\\<\\\\a\\\\u7952\\\\064\\\\051\\\\073\\\\x41\\\\?n\\\\040\\\\0053\\\\031&&[\\\\x15-\\\\|]]]]{8,11}?)(?![^|\\\\<-\\\\uA74B\\\\xFA\\\\u7CD2\\\\024\\\\07n\\\\<\\\\x6A\\\\0042\\\\uE4FF\\\\r\\\\u896B\\\\[\\\\=\\\\042Y&&^\\\\p{ASCII}]++)|(?<![R-\\\\|&&[\\\\a\\\\0120A\\\\u6145\\\\<\\\\050-d[|\\\\e-\\\\uA07C|\\\\016-\\\\u80D9]]]{1,}+)|(?idmsux-idmsux)|(?idmsux-idmsux)|(?idmsux-idmsux:\\\\B{6,}?)|(?<=\\\\D{5,8}?)|(?>[\\\\{-\\\\0207|\\\\06-\\\\0276\\\\p{XDigit}])(?idmsux-idmsux:[^|\\\\x52\\\\0012\\\\]u\\\\xAD\\\\0051f\\\\0142\\\\\\\\l\\\\|\\\\050\\\\05\\\\f\\\\t\\\\u7B91\\\\r\\\\u7763\\\\{|h\\\\0104\\\\a\\\\f\\\\0234\\\\u2D4F&&^\\\\P{InGreek}]))\");\n \t}\n \n \tpublic void testOrphanQuantifiers() {",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch and unit test from HARMONY-4285([classlib][beans]java.beans.beancontext.BeanContextSupport.getResource throws NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@550798 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9db816862b17b9ed9474ade68ad10d76ab872b65",
        "parent": "https://github.com/apache/harmony-classlib/commit/463a09606df97eae4ae52f2d5af1820a47b878b8",
        "bug_id": "harmony-classlib_21",
        "file": [
            {
                "sha": "8bf102a09a7fbccc1e75094bb46cc807b23da8dd",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9db816862b17b9ed9474ade68ad10d76ab872b65/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9db816862b17b9ed9474ade68ad10d76ab872b65/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java?ref=9db816862b17b9ed9474ade68ad10d76ab872b65",
                "patch": "@@ -699,7 +699,7 @@ public URL getResource(String resourceName, BeanContextChild child) {\n             throw new IllegalArgumentException(\"Not a child of this context\");\n         }\n \n-        return getClass().getClassLoader().getResource(resourceName);\n+        return ClassLoader.getSystemResource(resourceName);\n     }\n \n     /* (non-Javadoc)\n@@ -714,7 +714,7 @@ public InputStream getResourceAsStream(String resourceName,\n             throw new IllegalArgumentException(\"Not a child of this context\");\n         }\n \n-        return getClass().getClassLoader().getResourceAsStream(resourceName);\n+        return ClassLoader.getSystemResourceAsStream(resourceName);\n     }\n \n     /**",
                "deletions": 2
            },
            {
                "sha": "1c30d9f22940fe9d1bf0f3309c6ea698abff89fe",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9db816862b17b9ed9474ade68ad10d76ab872b65/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9db816862b17b9ed9474ade68ad10d76ab872b65/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java?ref=9db816862b17b9ed9474ade68ad10d76ab872b65",
                "patch": "@@ -1165,6 +1165,11 @@ public void testGetResource() {\n         final String RESOURCE_NAME = \"org/apache/harmony/beans/tests/support/beancontext/mock/mockdata.txt\";\n         URL url = support.getResource(RESOURCE_NAME, child);\n         assertTrue(url.toString().endsWith(RESOURCE_NAME));\n+        \n+        BeanContextSupport beanContextSupport = new BeanContextSupport();\n+        beanContextSupport.add(child);\n+        url = beanContextSupport.getResource(RESOURCE_NAME, child);\n+        assertTrue(url.toString().endsWith(RESOURCE_NAME));\n     }\n \n     public void testGetResourceAsStream_NullParam() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-3339 \"[classlib][luni][EUT] 51 tests fail in jdtcoremodel suit with NullPointerException\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@538520 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/70728ceb6e9e88e6c5283f0fe7bab1482e096f8b",
        "parent": "https://github.com/apache/harmony-classlib/commit/e35ed2e4be4ed27ee253e7f055f2e65edffc45d3",
        "bug_id": "harmony-classlib_22",
        "file": [
            {
                "sha": "9b32360755217ca204ee09643a9d21d415d97dc5",
                "filename": "modules/luni/src/main/java/java/util/Arrays.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/70728ceb6e9e88e6c5283f0fe7bab1482e096f8b/modules/luni/src/main/java/java/util/Arrays.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/70728ceb6e9e88e6c5283f0fe7bab1482e096f8b/modules/luni/src/main/java/java/util/Arrays.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Arrays.java?ref=70728ceb6e9e88e6c5283f0fe7bab1482e096f8b",
                "patch": "@@ -2434,7 +2434,7 @@ private static void mergeSort(Object[] in, Object[] out, int fromIndex,\n         // merging\n \n         // if arrays are already sorted - no merge\n-        if (((Comparable<Object>) in[med]).compareTo(in[med - 1]) >= 0) {\n+        if (((Comparable<Object>) in[med - 1]).compareTo(in[med]) <= 0) {\n             System.arraycopy(in, fromIndex, out, fromIndex, len);\n             return;\n         }\n@@ -2521,7 +2521,7 @@ private static void mergeSort(Object[] in, Object[] out, int fromIndex,\n         // merging\n \n         // if arrays are already sorted - no merge\n-        if (c.compare(in[med], in[med - 1]) >= 0) {\n+        if (c.compare(in[med - 1],in[med] ) <= 0) {\n             System.arraycopy(in, fromIndex, out, fromIndex, len);\n             return;\n         }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-3826 ([classlib][sql] SQLInputImpl throws NullPointerException when the param of readXXX is null)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@537283 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/15ad1a60774995dbb07d52b4c3f0b6927835d589",
        "parent": "https://github.com/apache/harmony-classlib/commit/293eb81efdbef705b79aac0f841100fdd295d1bc",
        "bug_id": "harmony-classlib_23",
        "file": [
            {
                "sha": "5836d376568ea4f78f5e3ba1b6a854e10c90f5d0",
                "filename": "modules/sql/src/main/java/javax/sql/rowset/serial/SQLInputImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/main/java/javax/sql/rowset/serial/SQLInputImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/main/java/javax/sql/rowset/serial/SQLInputImpl.java",
                "status": "modified",
                "changes": 124,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/main/java/javax/sql/rowset/serial/SQLInputImpl.java?ref=15ad1a60774995dbb07d52b4c3f0b6927835d589",
                "patch": "@@ -77,12 +77,9 @@ public SQLInputImpl(Object[] attributes, Map<String,Class<?>> map)throws SQLExce\n      */\n     public Array readArray() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        }\n-        Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n+        Object o = attributes[readPosition++];        \n         return (Array) o;\n     }\n \n@@ -93,12 +90,9 @@ public Array readArray() throws SQLException {\n      */\n     public InputStream readAsciiStream() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (InputStream) o;\n     }\n \n@@ -109,12 +103,9 @@ public InputStream readAsciiStream() throws SQLException {\n      */\n     public BigDecimal readBigDecimal() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (BigDecimal) o;\n     }\n \n@@ -125,12 +116,9 @@ public BigDecimal readBigDecimal() throws SQLException {\n      */\n     public InputStream readBinaryStream() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (InputStream) o;\n     }\n \n@@ -141,12 +129,9 @@ public InputStream readBinaryStream() throws SQLException {\n      */\n     public Blob readBlob() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (Blob) o;\n     }\n \n@@ -157,10 +142,10 @@ public Blob readBlob() throws SQLException {\n      */\n     public boolean readBoolean() throws SQLException, NotImplementedException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Boolean) o;\n+        return o == null ? false : ((Boolean) o).booleanValue();\n     }\n \n     /**\n@@ -170,10 +155,10 @@ public boolean readBoolean() throws SQLException, NotImplementedException {\n      */\n     public byte readByte() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n-        Object o = attributes[readPosition++];\n-        return (Byte) o;\n+        Object o = attributes[readPosition++];        \n+        return o == null ? (byte) 0 : ((Byte) o).byteValue();\n     }\n \n     /**\n@@ -183,12 +168,9 @@ public byte readByte() throws SQLException {\n      */\n     public byte[] readBytes() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        }\n-        Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n+        Object o = attributes[readPosition++];        \n         return (byte[]) o;\n     }\n \n@@ -199,28 +181,22 @@ public byte readByte() throws SQLException {\n      */\n     public Reader readCharacterStream() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (Reader) o;\n     }\n \n-    /**\n+    /** \n      * {@inheritDoc}\n      * \n      * @see java.sql.SQLInput#readClob()\n      */\n     public Clob readClob() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        }\n-        Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n+        Object o = attributes[readPosition++];       \n         return (Clob) o;\n     }\n \n@@ -231,12 +207,9 @@ public Clob readClob() throws SQLException {\n      */\n     public Date readDate() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (Date) o;\n     }\n \n@@ -247,10 +220,10 @@ public Date readDate() throws SQLException {\n      */\n     public double readDouble() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Double) o;\n+        return o == null ? 0 : ((Double) o).doubleValue();\n     }\n \n     /**\n@@ -260,10 +233,10 @@ public double readDouble() throws SQLException {\n      */\n     public float readFloat() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Float) o;\n+        return o == null ? 0f : ((Float) o).floatValue();\n     }\n \n     /**\n@@ -273,10 +246,10 @@ public float readFloat() throws SQLException {\n      */\n     public int readInt() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Integer) o;\n+        return o == null ? 0 : ((Integer) o).intValue();\n     }\n \n     /**\n@@ -286,10 +259,10 @@ public int readInt() throws SQLException {\n      */\n     public long readLong() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Long) o;\n+        return o == null ? 0 : ((Long) o).longValue();\n     }\n \n     /**\n@@ -299,13 +272,13 @@ public long readLong() throws SQLException {\n      */\n     public Object readObject() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n         if (o instanceof Struct) {\n             Struct structuredType = (Struct)o;\n             String typeName = structuredType.getSQLTypeName();\n-            Class c = map.get(typeName);\n+            Class<?> c = map.get(typeName);\n             if(c != null) {\n                 try {\n                     SQLData data = (SQLData)c.newInstance();\n@@ -330,12 +303,9 @@ public Object readObject() throws SQLException {\n      */\n     public Ref readRef() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        }\n-        Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n+        Object o = attributes[readPosition++];        \n         return (Ref) o;\n     }\n \n@@ -346,10 +316,10 @@ public Ref readRef() throws SQLException {\n      */\n     public short readShort() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        return (Short) o;\n+        return o == null ? (short) 0 : ((Short) o).shortValue();\n     }\n \n     /**\n@@ -359,12 +329,9 @@ public short readShort() throws SQLException {\n      */\n     public String readString() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        }\n-        Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n+        Object o = attributes[readPosition++];        \n         return (String) o;\n     }\n \n@@ -375,12 +342,9 @@ public String readString() throws SQLException {\n      */\n     public Time readTime() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (Time) o;\n     }\n \n@@ -391,12 +355,9 @@ public Time readTime() throws SQLException {\n      */\n     public Timestamp readTimestamp() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n         Object o = attributes[readPosition++];\n-        if(o == null) {\n-            return null;\n-        }\n         return (Timestamp) o;\n     }\n \n@@ -407,10 +368,9 @@ public Timestamp readTimestamp() throws SQLException {\n      */\n     public URL readURL() throws SQLException {\n         if(readPosition >= attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n-        } else {\n-            throw new SQLException(Messages.getString(\"sql.37\"));\n-        }\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n+        } \n+        throw new SQLException(Messages.getString(\"sql.37\")); //$NON-NLS-1$\n     }\n \n     /**\n@@ -419,10 +379,10 @@ public URL readURL() throws SQLException {\n      * @see java.sql.SQLInput#wasNull()\n      */\n     public boolean wasNull() throws SQLException, NotImplementedException {\n-        if(readPosition > attributes.length) {\n-            throw new SQLException(Messages.getString(\"sql.35\"));\n+        if (readPosition > attributes.length) {\n+            throw new SQLException(Messages.getString(\"sql.35\")); //$NON-NLS-1$\n         }\n-        return attributes[readPosition - 1] == null;\n+        return readPosition == 0 ? false : attributes[readPosition - 1] == null;\n     }\n \n }",
                "deletions": 82
            },
            {
                "sha": "ea7e7824ea8fd6d7eeb06c6f62eb32a431c8c1f5",
                "filename": "modules/sql/src/main/java/org/apache/harmony/sql/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/main/java/org/apache/harmony/sql/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/main/java/org/apache/harmony/sql/internal/nls/messages.properties",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/main/java/org/apache/harmony/sql/internal/nls/messages.properties?ref=15ad1a60774995dbb07d52b4c3f0b6927835d589",
                "patch": "@@ -46,4 +46,8 @@ sql.28=Invalid SQL type for column\n sql.29=Invalid nullable constant set. Must be either columnNoNulls, columnNullable or columnNullableUnknown\n sql.30=Invalid column display size. Cannot be less than zero\n sql.31=Invalid precision value. Cannot be less than zero\n-sql.32=Invalid scale size. Cannot be less than zero\n\\ No newline at end of file\n+sql.32=Invalid scale size. Cannot be less than zero\n+sql.33=Cannot instantiate a SQLOutputImpl instance with null parameters\n+sql.34=Cannot instantiate a SQLInputImpl instance with null parameters\n+sql.35=SQLInputImpl exception: Invalid read position\n+sql.37=Operation not supported\n\\ No newline at end of file",
                "deletions": 1
            },
            {
                "sha": "568b9553a407f85093f7281362322f1aa559da64",
                "filename": "modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SQLInputImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SQLInputImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15ad1a60774995dbb07d52b4c3f0b6927835d589/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SQLInputImplTest.java",
                "status": "modified",
                "changes": 84,
                "additions": 82,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SQLInputImplTest.java?ref=15ad1a60774995dbb07d52b4c3f0b6927835d589",
                "patch": "@@ -40,6 +40,7 @@\n import java.util.Map;\n \n import javax.sql.rowset.serial.SQLInputImpl;\n+import javax.sql.rowset.serial.SerialDatalink;\n \n import junit.framework.TestCase;\n \n@@ -91,9 +92,13 @@ public void testReadArray() throws SQLException {\n         try {\n             impl.readArray();\n             fail(\"should throw SQLException\");\n-        } catch (SQLException e) {\n+        } catch (SQLException e) {            \n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readArray());\n     }\n \n     /**\n@@ -111,6 +116,10 @@ public void testReadAsciiStream() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readAsciiStream());\n     }\n \n     /**\n@@ -128,6 +137,10 @@ public void testReadBigDecimal() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readBigDecimal());\n     }\n \n     /**\n@@ -138,6 +151,10 @@ public void testReadBinaryStream() throws SQLException {\n         Object[] attributes = new Object[] {stream};\n         SQLInputImpl impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n         assertEquals(stream, impl.readBinaryStream());\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readBinaryStream());\n     }\n \n     /**\n@@ -155,6 +172,10 @@ public void testReadBlob() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readBlob());\n     }\n \n     /**\n@@ -171,6 +192,10 @@ public void testReadBoolean() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertFalse(impl.readBoolean());\n     }\n \n     /**\n@@ -187,6 +212,10 @@ public void testReadByte() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals((byte)0, impl.readByte());\n     }\n \n     /**\n@@ -204,6 +233,10 @@ public void testReadBytes() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readBytes());\n     }\n \n     /**\n@@ -221,6 +254,10 @@ public void testReadCharacterStream() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readCharacterStream());\n     }\n \n     /**\n@@ -238,6 +275,10 @@ public void testReadClob() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readClob());\n     }\n \n     /**\n@@ -255,6 +296,10 @@ public void testReadDate() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readDate());\n     }\n \n     /**\n@@ -271,6 +316,10 @@ public void testReadDouble() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals(0, impl.readDouble(), 0);\n     }\n \n     /**\n@@ -287,6 +336,10 @@ public void testReadFloat() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals(0f, impl.readFloat(), 0);\n     }\n \n     /**\n@@ -303,6 +356,10 @@ public void testReadInt() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals(0, impl.readInt());\n     }\n \n     /**\n@@ -319,6 +376,10 @@ public void testReadLong() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals(0, impl.readLong());\n     }\n \n     /**\n@@ -362,6 +423,10 @@ public void testReadRef() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readRef());\n     }\n \n     /**\n@@ -378,6 +443,10 @@ public void testReadShort() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertEquals((short)0, impl.readShort());\n     }\n \n     /**\n@@ -394,6 +463,10 @@ public void testReadString() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readString());\n     }\n \n     /**\n@@ -411,6 +484,10 @@ public void testReadTime() throws SQLException {\n         } catch (SQLException e) {\n             // expected\n         }\n+        \n+        attributes = new Object[] {null};\n+        impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertNull(impl.readTime());\n     }\n \n     /**\n@@ -435,7 +512,8 @@ public void testReadTimestamp() throws SQLException {\n      */\n     public void testReadURL() throws SQLException, MalformedURLException {\n         URL url = new URL(\"http://www.apache.org\");\n-        Object[] attributes = new Object[] {url};\n+        SerialDatalink link = new SerialDatalink(url);\n+        Object[] attributes = new Object[] {link};\n         SQLInputImpl impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n         try {\n             impl.readURL();\n@@ -458,6 +536,7 @@ public void testReadURL() throws SQLException, MalformedURLException {\n     public void testWasNull() throws SQLException {\n         Object[] attributes = new Object[] {null, \"hello\"};\n         SQLInputImpl impl = new SQLInputImpl(attributes, new HashMap<String, Class<?>>());\n+        assertFalse(impl.wasNull());\n         assertEquals(null, impl.readString());\n         assertTrue(impl.wasNull());\n         assertEquals(\"hello\", impl.readString());\n@@ -469,6 +548,7 @@ public void testWasNull() throws SQLException {\n             // expected\n         }\n         assertFalse(impl.wasNull());\n+        assertFalse(impl.wasNull());\n     }\n \n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1082([classlib][io]compatibility:java.io.BufferedOutputStream.write(byte[], int, int) throws ArrayIndexOutOfBoundsException while RI throws NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@527865 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0",
        "parent": "https://github.com/apache/harmony-classlib/commit/e93ba9c65596dd60d8343ea52a51c3c69d4a209d",
        "bug_id": "harmony-classlib_24",
        "file": [
            {
                "sha": "7ed13e187e05acc2480478beb1d9998883627972",
                "filename": "modules/luni/src/main/java/java/io/BufferedOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0/modules/luni/src/main/java/java/io/BufferedOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0/modules/luni/src/main/java/java/io/BufferedOutputStream.java",
                "status": "modified",
                "changes": 11,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/BufferedOutputStream.java?ref=0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0",
                "patch": "@@ -121,14 +121,17 @@ public synchronized void write(byte[] buffer, int offset, int length)\n             // K0047=buffer is null\n             throw new NullPointerException(Msg.getString(\"K0047\")); //$NON-NLS-1$\n         }\n-        if (offset < 0 || offset > buffer.length - length || length < 0) {\n-            // K002f=Arguments out of bounds\n-            throw new ArrayIndexOutOfBoundsException(Msg.getString(\"K002f\")); //$NON-NLS-1$\n-        }\n+        \n         if (count == 0 && length >= buf.length) {\n             out.write(buffer, offset, length);\n             return;\n         }\n+        \n+        if (offset < 0 || offset > buffer.length - length || length < 0) {\n+            // K002f=Arguments out of bounds\n+            throw new ArrayIndexOutOfBoundsException(Msg.getString(\"K002f\")); //$NON-NLS-1$\n+        }\n+        \n         int available = buf.length - count;\n         if (length < available) {\n             available = length;",
                "deletions": 4
            },
            {
                "sha": "cabbac7cb8959c08a083aa6df5696a49c83212ab",
                "filename": "modules/luni/src/test/java/tests/api/java/io/BufferedOutputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0/modules/luni/src/test/java/tests/api/java/io/BufferedOutputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0/modules/luni/src/test/java/tests/api/java/io/BufferedOutputStreamTest.java",
                "status": "modified",
                "changes": 294,
                "additions": 294,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/BufferedOutputStreamTest.java?ref=0dc258a896ffbf2b6f977356ff13ae1dd5dc86e0",
                "patch": "@@ -251,6 +251,300 @@ public void test_flush() {\n \t\t}\n \t}\n \n+    /**\n+     * @tests java.io.BufferedOutputStream#write(byte[], int, int)\n+     */\n+    public void test_write_$BII_NullStream_NullArray() throws IOException {\n+        OutputStream bos = new BufferedOutputStream(null);   \n+        byte[] nullByteArray = null;\n+        \n+        try {\n+            bos.write(nullByteArray, -1, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 0, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(nullByteArray, -1, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(nullByteArray, 0, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, -1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+       \n+        try {\n+            bos.write(nullByteArray, 0, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * @tests java.io.BufferedOutputStream#write(byte[], int, int)\n+     */\n+    public void test_write_$BII_NullStream_NullArray_Size() throws IOException {\n+        OutputStream bos = new BufferedOutputStream(null, 1);   \n+        byte[] nullByteArray = null;\n+        \n+        try {\n+            bos.write(nullByteArray, -1, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(nullByteArray, 0, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, -1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(nullByteArray, -1, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(nullByteArray, 0, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, 0);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, -1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 0, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(nullByteArray, 1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n+    /**\n+     * @tests java.io.BufferedOutputStream#write(byte[], int, int)\n+     */\n+    public void test_write_$BII_NullStream() throws IOException {\n+        BufferedOutputStream bos = new BufferedOutputStream(null);   \n+        byte[] byteArray = new byte[10];\n+        \n+        try {\n+            bos.write(byteArray, -1, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(byteArray, 0, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, 1, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, -1, 0);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        bos.write(byteArray, 0, 0);\n+        \n+        bos.write(byteArray, 1, 0);\n+        \n+        bos.write(byteArray, byteArray.length, 0);\n+        \n+        try {\n+            bos.write(byteArray, byteArray.length + 1, 0);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            //expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, -1, 1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        bos.write(byteArray, 0, 1);\n+        bos.write(byteArray, 1, 1);\n+        \n+        bos.write(byteArray, 0, byteArray.length);\n+    \n+        try {\n+            bos.write(byteArray, byteArray.length + 1, 1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            //expected\n+        }\n+    }\n+    \n+    /**\n+     * @tests java.io.BufferedOutputStream#write(byte[], int, int)\n+     */\n+    public void test_write_$BII_NullStream_Size() throws IOException {\n+        BufferedOutputStream bos = new BufferedOutputStream(null, 1);   \n+        byte[] byteArray = new byte[10];\n+        \n+        try {\n+            bos.write(byteArray, -1, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+\n+        try {\n+            bos.write(byteArray, 0, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, 1, -1);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, -1, 0);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            // expected\n+        }\n+        \n+        bos.write(byteArray, 0, 0);\n+        \n+        bos.write(byteArray, 1, 0);\n+        \n+        bos.write(byteArray, byteArray.length, 0);\n+        \n+        try {\n+            bos.write(byteArray, byteArray.length + 1, 0);\n+            fail(\"should throw ArrayIndexOutOfBoundsException\");\n+        } catch (ArrayIndexOutOfBoundsException e) {\n+            //expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, -1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, 0, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, 0, byteArray.length);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, 1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            bos.write(byteArray, byteArray.length + 1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //expected\n+        }\n+    }\n+    \n \t/**\n \t * @tests java.io.BufferedOutputStream#write(int)\n \t */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix and regression test for HARMONY-3384:\n([classlib][security]java.security.cert.X509Certificate.toString() throws NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@521100 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf",
        "parent": "https://github.com/apache/harmony-classlib/commit/1c792803406d8ff578708eb0791e0c158e73f9b3",
        "bug_id": "harmony-classlib_25",
        "file": [
            {
                "sha": "1cf9c3e9d431da2434bc08de2f65e3c521fce355",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/x509/AuthorityKeyIdentifier.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/main/java/common/org/apache/harmony/security/x509/AuthorityKeyIdentifier.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/main/java/common/org/apache/harmony/security/x509/AuthorityKeyIdentifier.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/x509/AuthorityKeyIdentifier.java?ref=8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf",
                "patch": "@@ -118,8 +118,14 @@ public void dumpValue(StringBuffer buffer, String prefix) {\n         protected Object getDecodedObject(BerInputStream in) throws IOException {\n             Object[] values = (Object[]) in.content;\n \n+            byte[] enc = (byte[]) values[2];\n+            BigInteger authorityCertSerialNumber = null;\n+            if (enc != null) {\n+                authorityCertSerialNumber = new BigInteger(enc);\n+            }\n+\n             return new AuthorityKeyIdentifier((byte[]) values[0],\n-                    (GeneralNames) values[1], new BigInteger((byte[]) values[2]));\n+                    (GeneralNames) values[1], authorityCertSerialNumber);\n         }\n \n         protected void getValues(Object object, Object[] values) {\n@@ -128,7 +134,9 @@ protected void getValues(Object object, Object[] values) {\n \n             values[0] = akid.keyIdentifier;\n             values[1] = akid.authorityCertIssuer;\n-            values[2] = akid.authorityCertSerialNumber.toByteArray();\n+            if (akid.authorityCertSerialNumber != null) {\n+                values[2] = akid.authorityCertSerialNumber.toByteArray();\n+            }\n         }\n     };\n }",
                "deletions": 2
            },
            {
                "sha": "4a690505fb9bff73a8262270cf073ea1025dcfb2",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509Certificate2Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509Certificate2Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509Certificate2Test.java",
                "status": "modified",
                "changes": 28,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509Certificate2Test.java?ref=8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf",
                "patch": "@@ -17,15 +17,18 @@\n \n package org.apache.harmony.security.tests.java.security.cert;\n \n+import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n+import java.io.ObjectInputStream;\n import java.security.cert.CertificateFactory;\n import java.security.cert.X509Certificate;\n+import java.util.Arrays;\n import java.util.Iterator;\n import java.util.Vector;\n \n-import tests.support.resource.Support_Resources;\n+import org.apache.harmony.security.tests.support.cert.TestUtils;\n \n-import junit.framework.TestCase;\n+import tests.support.resource.Support_Resources;\n \n public class X509Certificate2Test extends junit.framework.TestCase {\n \tprivate X509Certificate pemCert = null;\n@@ -62,4 +65,23 @@ public void test_getExtensionValueLjava_lang_String() {\n \t\t\tfail(\"Unable to obtain X509Certificate\");\n \t\t}\n \t}\n-}\n\\ No newline at end of file\n+    \n+    /**\n+     * Test for X.509 Certificate provider\n+     */\n+    public void test_toString() throws Exception {\n+\n+        // Regression for HARMONY-3384\n+        CertificateFactory certFact = CertificateFactory.getInstance(\"X509\");\n+        pemCert = (X509Certificate) certFact\n+                .generateCertificate(new ByteArrayInputStream(TestUtils\n+                        .getX509Certificate_v3()));\n+\n+        // extension value is empty sequence\n+        byte[] extnValue = pemCert.getExtensionValue(\"2.5.29.35\");\n+        assertTrue(Arrays.equals(new byte[] { 0x04, 0x02, 0x30, 0x00 },\n+                extnValue));\n+        assertNotNull(pemCert.toString());\n+        // End regression for HARMONY-3384\n+    }\n+}",
                "deletions": 3
            },
            {
                "sha": "0bf4f25134c53334522ccd23f74f583894147776",
                "filename": "modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/cert/TestUtils.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/cert/TestUtils.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/cert/TestUtils.java",
                "status": "modified",
                "changes": 100,
                "additions": 99,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/cert/TestUtils.java?ref=8d0e5c8d98cbc7dc9e057db9f3ae4de3ec1faccf",
                "patch": "@@ -387,7 +387,105 @@ public Set getPolicyQualifiers() {\n             //\n             0x03, 0x02, 0x00, 0x01 };\n     }\n-    \n+\n+    /**\n+     * Returns X.509 certificate encoding corresponding to version v3.\n+     * \n+     * Certificate encoding was created by hands according to X.509 Certificate\n+     * ASN.1 notation. The certificate encoding has the following encoded\n+     * field values:<br> \n+     * - version: 3<br>\n+     * - serialNumber: 5<br>\n+     * - issuer: CN=Z<br>\n+     * - notBefore: 13 Dec 1999 14:15:16<br>\n+     * - notAfter: 01 Jan 2000 00:00:00<br>\n+     * - subject: CN=Y<br>\n+     * - extensions:\n+     *       1) AuthorityKeyIdentifier(OID=2.5.29.35): no values in it(empty sequence) \n+     * \n+     * @return X.509 certificate encoding corresponding to version v3.\n+     */\n+    public static byte[] getX509Certificate_v3() {\n+        return new byte[] {\n+        // Certificate: SEQUENCE\n+            0x30, 0x7D,\n+\n+            //\n+            // TBSCertificate: SEQUENCE {\n+            //\n+            0x30, 0x6E,\n+\n+            // version: [0] EXPLICIT Version DEFAULT v1\n+            (byte) 0xA0, 0x03, 0x02, 0x01, 0x02,\n+\n+            // serialNumber: CertificateSerialNumber\n+            0x02, 0x01, 0x05,\n+\n+            // signature: AlgorithmIdentifier\n+            0x30, 0x07, // SEQUENCE\n+            0x06, 0x02, 0x03, 0x05,//OID\n+            0x01, 0x01, 0x07, //ANY\n+\n+            //issuer: Name\n+            0x30, 0x0C, 0x31, 0x0A, 0x30, 0x08, 0x06, 0x03, 0x55, 0x04, 0x03,\n+            0x13, 0x01, 0x5A, // CN=Z\n+\n+            //validity: Validity\n+            0x30, 0x1E, // SEQUENCE\n+            // notBefore: UTCTime\n+            0x17, 0x0D, 0x39, 0x39, 0x31, 0x32, 0x31, 0x33, 0x31, 0x34, 0x31,\n+            0x35, 0x31, 0x36, 0x5A, // 13 Dec 1999 14:15:16\n+            // notAfter:  UTCTime\n+            0x17, 0x0D, 0x30, 0x30, 0x30, 0x31, 0x30, 0x31, 0x30, 0x30, 0x30,\n+            0x30, 0x30, 0x30, 0x5A, // 01 Jan 2000 00:00:00\n+\n+            //subject: Name\n+            0x30, 0x0C, 0x31, 0x0A, 0x30, 0x08, 0x06, 0x03, 0x55, 0x04, 0x03,\n+            0x13, 0x01, 0x59, // CN=Y\n+            //SubjectPublicKeyInfo  ::=  SEQUENCE  {\n+            //    algorithm            AlgorithmIdentifier,\n+            //    subjectPublicKey     BIT STRING  }\n+            0x30, 0x0D, // SEQUENCE\n+            0x30, 0x07, // SEQUENCE\n+            0x06, 0x02, 0x03, 0x05,//OID\n+            0x01, 0x01, 0x07, //ANY\n+            0x03, 0x02, 0x00, 0x01, // subjectPublicKey\n+\n+            // issuerUniqueID - missed\n+            // subjectUniqueID - missed\n+            // extensions : [3]  EXPLICIT Extensions OPTIONAL\n+            (byte) 0xA3, 0x10,\n+            // Extensions  ::=  SEQUENCE SIZE (1..MAX) OF Extension\n+            0x30, 0x0E,\n+            // Extension  ::=  SEQUENCE  {\n+            // extnID      OBJECT IDENTIFIER,\n+            // critical    BOOLEAN DEFAULT FALSE,\n+            // extnValue   OCTET STRING  }\n+\n+            // 1) AuthorityKeyIdentifier extension (see HARMONY-3384)\n+            0x30, 0x0C,\n+            0x06, 0x03, 0x55, 0x1D, 0x23, // OID = 2.5.29.35\n+            0x01, 0x01, 0x00, // critical = FALSE\n+            0x04, 0x02, 0x30, 0x00, // extnValue: MUST be empty sequence\n+            // missed: keyIdentifier\n+            // missed: authorityCertIssuer\n+            // missed\" authorityCertSerialNumber\n+\n+            // } end TBSCertificate\n+\n+            //\n+            // signatureAlgorithm: AlgorithmIdentifier\n+            //\n+            0x30, 0x07, // SEQUENCE\n+            0x06, 0x02, 0x03, 0x05,//OID\n+            0x01, 0x01, 0x07, //ANY\n+\n+            //\n+            // signature: BIT STRING  \n+            //\n+            0x03, 0x02, 0x00, 0x01 };\n+    }\n+\n     /**\n      * Returns X.509 CRL encoding corresponding to version v1.\n      * ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2116 \"[classlib][awt] Toolkit.getDesktopProperties () prints NullPointerException.\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@517159 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/71d7c4da6c2aea321929a76fd390055315ce3ccd",
        "parent": "https://github.com/apache/harmony-classlib/commit/3969497a6d34747c5329d65fc35d710dc45aeb3b",
        "bug_id": "harmony-classlib_26",
        "file": [
            {
                "sha": "442c8a27835bab43c70e7470c031b0e5719c79b4",
                "filename": "modules/awt/src/main/java/common/java/awt/EventDispatchThread.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/71d7c4da6c2aea321929a76fd390055315ce3ccd/modules/awt/src/main/java/common/java/awt/EventDispatchThread.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/71d7c4da6c2aea321929a76fd390055315ce3ccd/modules/awt/src/main/java/common/java/awt/EventDispatchThread.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/EventDispatchThread.java?ref=71d7c4da6c2aea321929a76fd390055315ce3ccd",
                "patch": "@@ -85,7 +85,8 @@ void runModalLoop(ModalContext context) {\n                 }\n             }\n             } catch (Throwable t) {\n-                t.printStackTrace();\n+                // TODO: Exception handler should be implemented\n+                // t.printStackTrace();\n             }\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "db5964ab61ddc3fae137d375576b10e8f0480745",
                "filename": "modules/awt/src/test/api/java/common/java/awt/EventDispatchThreadRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/71d7c4da6c2aea321929a76fd390055315ce3ccd/modules/awt/src/test/api/java/common/java/awt/EventDispatchThreadRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/71d7c4da6c2aea321929a76fd390055315ce3ccd/modules/awt/src/test/api/java/common/java/awt/EventDispatchThreadRTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/EventDispatchThreadRTest.java?ref=71d7c4da6c2aea321929a76fd390055315ce3ccd",
                "patch": "@@ -16,17 +16,21 @@\n  */\n package java.awt;\n \n+import java.io.ByteArrayOutputStream;\n+import java.io.PrintStream;\n+\n import junit.framework.TestCase;\n \n-/*\n- * Regression test for JIRA issue HARMONY-2818\n- */\n public class EventDispatchThreadRTest extends TestCase {\n+    \n+    /**\n+     * Regression test for JIRA issue HARMONY-2818\n+     */\n     public final void testHARMONY2818() throws Throwable {\n         EventQueue.invokeLater(\n             new Runnable() {\n                 public void run() {\n-                    throw new RuntimeException(\"expected from EDT\");\n+                    throw new RuntimeException(\"expected from EDT\"); //$NON-NLS-1$\n                 }\n             }\n         );\n@@ -37,4 +41,23 @@ public void run() {\n             }\n         );\n     }\n+    \n+    public void testHarmony2116() throws InterruptedException {\n+        final ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        final PrintStream err = System.err;\n+        final Toolkit tk;\n+\n+        System.setErr(new PrintStream(out));\n+        tk = new ToolkitImpl() {\n+            protected EventQueue getSystemEventQueueImpl() {\n+                return null;\n+            }\n+        };\n+\n+        Thread.sleep(100);\n+        tk.dispatchThread.shutdown();\n+        tk.dispatchThread.join(3000);\n+        System.setErr(err);\n+        assertEquals(0, out.size());\n+    }\n }\n\\ No newline at end of file",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2237([classlib][luni]URLClassLoader should not throw NullPointerException in special cases)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@502513 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/48c49d937ed100a95a7be20c569a92cd8dd6c2f8",
        "parent": "https://github.com/apache/harmony-classlib/commit/947b8ccd723f29e2ca1ea2b25235f33f6ed08592",
        "bug_id": "harmony-classlib_27",
        "file": [
            {
                "sha": "011af0fde5a2eb6a888602cbaeb0ed24ab438ccf",
                "filename": "modules/luni/src/main/java/java/net/URLClassLoader.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48c49d937ed100a95a7be20c569a92cd8dd6c2f8/modules/luni/src/main/java/java/net/URLClassLoader.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48c49d937ed100a95a7be20c569a92cd8dd6c2f8/modules/luni/src/main/java/java/net/URLClassLoader.java",
                "status": "modified",
                "changes": 11,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URLClassLoader.java?ref=48c49d937ed100a95a7be20c569a92cd8dd6c2f8",
                "patch": "@@ -914,9 +914,14 @@ private boolean isSealed(Manifest manifest, String dirName) {\n         // Class-path attribute is composed of space-separated values.\n         StringTokenizer tokenizer = new java.util.StringTokenizer(classpath);\n         Vector<URL> addedURLs = new Vector<URL>();\n-        String file = root.getFile();\n-        file = file.substring(0, file.lastIndexOf(\"/\", //$NON-NLS-1$\n-                file.lastIndexOf(\"!/\") - 1) + 1); //$NON-NLS-1$\n+        String file = root.getFile();        \n+        int jarIndex = file.lastIndexOf(\"!/\") - 1; //$NON-NLS-1$\n+        int index = file.lastIndexOf(\"/\", jarIndex) + 1; //$NON-NLS-1$\n+        if (index == 0) {\n+\t\t\tindex = file.lastIndexOf(\n+\t\t\t\t\tSystem.getProperty(\"file.separator\"), jarIndex) + 1; //$NON-NLS-1$\n+\t\t}\n+        file = file.substring(0, index);\n         String protocol = root.getProtocol();\n         String host = root.getHost();\n         int port = root.getPort();",
                "deletions": 3
            },
            {
                "sha": "d69caafab347963879ab3f22ef0d79b6a95784d9",
                "filename": "modules/luni/src/test/java/tests/api/java/net/URLClassLoaderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48c49d937ed100a95a7be20c569a92cd8dd6c2f8/modules/luni/src/test/java/tests/api/java/net/URLClassLoaderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48c49d937ed100a95a7be20c569a92cd8dd6c2f8/modules/luni/src/test/java/tests/api/java/net/URLClassLoaderTest.java",
                "status": "modified",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/URLClassLoaderTest.java?ref=48c49d937ed100a95a7be20c569a92cd8dd6c2f8",
                "patch": "@@ -27,6 +27,8 @@\n import java.net.URLStreamHandlerFactory;\n import java.util.Enumeration;\n import java.util.NoSuchElementException;\n+import java.util.StringTokenizer;\n+import java.util.Vector;\n \n import org.apache.harmony.luni.util.InvalidJarIndexException;\n \n@@ -382,4 +384,38 @@ public void test_getResourceLjava_lang_String()\n         assertTrue(\"too long. UNC path formed? UNC time: \" + uncTime\n                 + \" regular time: \" + time, uncTime <= (time * 4));\n     }\n+    \n+    /**\n+\t * Regression for Harmony-2237 \n+\t */\n+\tpublic void test_getResource() throws Exception {\t\t\n+\t\tURLClassLoader urlLoader = getURLClassLoader();\n+\t\tassertNull(urlLoader.findResource(\"XXX\")); //$NON-NLS-1$\n+\t}\n+\n+\tprivate static URLClassLoader getURLClassLoader() {\n+\t\tString classPath = System.getProperty(\"java.class.path\");\n+        StringTokenizer tok = new StringTokenizer(classPath, File.pathSeparator);\n+        Vector<URL> urlVec = new Vector<URL>();\n+        String resPackage = Support_Resources.RESOURCE_PACKAGE;\n+        try {\n+            while (tok.hasMoreTokens()) {\n+                String path = tok.nextToken();\n+                String url;\n+                if (new File(path).isDirectory())\n+                    url = \"file:\" + path + resPackage + \"subfolder/\";\n+                else\n+                    url = \"jar:file:\" + path + \"!\" + resPackage + \"subfolder/\";\n+                urlVec.addElement(new URL(url));\n+            }\n+        } catch (MalformedURLException e) {\n+        \t// do nothing\n+        }\n+        URL[] urls = new URL[urlVec.size()];\n+        for (int i = 0; i < urlVec.size(); i++) {\n+        \turls[i] = urlVec.elementAt(i);\n+        }            \n+        URLClassLoader loader = new URLClassLoader(urls, null);\n+\t\treturn loader;\n+\t}\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-1747 ( [classlib][swing]javax.swing.text.html.ImageView(null) throws unspecified NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@502190 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1dcc216d887e656da7810b20d09a073e7c9a52ca",
        "parent": "https://github.com/apache/harmony-classlib/commit/3c61942c1a1d7a97de4da0db1735cbd2f2c6673e",
        "bug_id": "harmony-classlib_28",
        "file": [
            {
                "sha": "37d8adefb8e42ec904984bd8239c4b4632cfe579",
                "filename": "modules/swing/META-INF/MANIFEST.MF",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/META-INF/MANIFEST.MF",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/META-INF/MANIFEST.MF",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/META-INF/MANIFEST.MF?ref=1dcc216d887e656da7810b20d09a073e7c9a52ca",
                "patch": "@@ -56,6 +56,7 @@ Export-Package: javax.swing,\n  javax.swing.plaf.metal,\n  javax.swing.table,\n  javax.swing.text,\n+ javax.swing.text.html,\n  javax.swing.text.html.parser,\n  javax.swing.tree,\n  javax.swing.undo",
                "deletions": 0
            },
            {
                "sha": "f2e81a952a19774586845ec8d58dd82ff4380e91",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/html/ImageView.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/src/main/java/common/javax/swing/text/html/ImageView.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/src/main/java/common/javax/swing/text/html/ImageView.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/html/ImageView.java?ref=1dcc216d887e656da7810b20d09a073e7c9a52ca",
                "patch": "@@ -61,7 +61,9 @@\n \n     public ImageView(final Element element) {\n         super(element);\n-        setPropertiesFromAttributes();\n+        if (element != null) { // Fix for HARMONY-1747, for compatibility with RI\n+            setPropertiesFromAttributes();\n+        }\n     }\n \n     public Image getImage() {",
                "deletions": 1
            },
            {
                "sha": "c9a3b41850daa4dac06535cba837cc5d49e094fb",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/html/ImageViewRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/src/test/api/java/common/javax/swing/text/html/ImageViewRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1dcc216d887e656da7810b20d09a073e7c9a52ca/modules/swing/src/test/api/java/common/javax/swing/text/html/ImageViewRTest.java",
                "status": "added",
                "changes": 31,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/html/ImageViewRTest.java?ref=1dcc216d887e656da7810b20d09a073e7c9a52ca",
                "patch": "@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package javax.swing.text.html;\n+\n+import junit.framework.TestCase;\n+\n+public class ImageViewRTest extends TestCase {\n+\n+    /**\n+     * Make sure no exception is thrown\n+     * if constructor parameter is <code>null</code>.\n+     */\n+    public void testImageViewNull() {\n+        // Regression test for HARMONY-1747\n+        new ImageView(null);\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying update patches from \"[#HARMONY-1767] [classlib][swing]\njavax.swing.text.ComponentView(Element) throws unexpected\nNullPointerException on user's implementation\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@497730 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2c88a7ffaaf37005e6de22962f3ec98c285f287a",
        "parent": "https://github.com/apache/harmony-classlib/commit/73bfc4769d4e9f8d0239cc7cfbd17d2a5f44f4b8",
        "bug_id": "harmony-classlib_29",
        "file": [
            {
                "sha": "a7b8a91d62f914e7d0429132f13ad3a03266e6da",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c88a7ffaaf37005e6de22962f3ec98c285f287a/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c88a7ffaaf37005e6de22962f3ec98c285f287a/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java?ref=2c88a7ffaaf37005e6de22962f3ec98c285f287a",
                "patch": "@@ -34,8 +34,8 @@\n import javax.swing.JTextPane;\n import javax.swing.SwingTestCase;\n import javax.swing.text.Element;\n-import javax.swing.text.html.HTMLDocument;\n-import javax.swing.text.html.ListView;\n+import javax.swing.text.PlainDocument;\n+import javax.swing.text.PlainView;\n \n \n public class ComponentViewTest extends SwingTestCase {\n@@ -655,10 +655,10 @@ public int getViewCount() {\n \n     public void testSetParent_View() {\n         // Regression test for HARMONY-1767 \n-        HTMLDocument doc = new HTMLDocument();\n+        PlainDocument doc = new PlainDocument();\n         Element e = doc.getDefaultRootElement();\n         ComponentView obj = new ComponentView(new TestElement());\n-        obj.setParent(new ListView(e));        \n+        obj.setParent(new PlainView(e));\n     }  \n \n     private class TestElement implements Element {\n@@ -733,4 +733,4 @@ private void checkViewToModel(final Shape shape, final int x, final int y) {\n             assertEquals(position, componentElement.getStartOffset());\n         }\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 5
            },
            {
                "sha": "40c0814761e04d82097bf4c1a8c673be81570eb3",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/StyleConstantsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c88a7ffaaf37005e6de22962f3ec98c285f287a/modules/swing/src/test/api/java/common/javax/swing/text/StyleConstantsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c88a7ffaaf37005e6de22962f3ec98c285f287a/modules/swing/src/test/api/java/common/javax/swing/text/StyleConstantsTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/StyleConstantsTest.java?ref=2c88a7ffaaf37005e6de22962f3ec98c285f287a",
                "patch": "@@ -434,6 +434,11 @@ public void testGetComponent() {\n         assertEquals(val, StyleConstants.getComponent(attr));\n     }\n \n+    public void testGetComponent_Null() {\n+        // Regression test for HARMONY-1767\n+        assertNull(StyleConstants.getComponent(null));\n+    }\n+\n     public void testSetComponent() {\n         attr.removeAttributes(attr);\n         Component val = new JLabel(\"test component\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-1767]\n[classlib][swing]javax.swing.text.html.ComponentView(Element) throws\nunexpected NullPointerException on user's implementation\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496771 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c93547d54f29952b9dffcef27d2120df8a881329",
        "parent": "https://github.com/apache/harmony-classlib/commit/baa455e8b72c528dd1d46c354bc1f178156969c6",
        "bug_id": "harmony-classlib_30",
        "file": [
            {
                "sha": "27774a0a54d77389bbba802113bcc3a0e4a50a1e",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/StyleConstants.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c93547d54f29952b9dffcef27d2120df8a881329/modules/swing/src/main/java/common/javax/swing/text/StyleConstants.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c93547d54f29952b9dffcef27d2120df8a881329/modules/swing/src/main/java/common/javax/swing/text/StyleConstants.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/StyleConstants.java?ref=c93547d54f29952b9dffcef27d2120df8a881329",
                "patch": "@@ -200,7 +200,7 @@ public static void setComponent(final MutableAttributeSet a,\n     }\n \n     public static Component getComponent(final AttributeSet a) {\n-        return (Component)a.getAttribute(ComponentAttribute);\n+        return (a == null ? null : (Component) a.getAttribute(ComponentAttribute));\n     }\n \n     public static void setForeground(final MutableAttributeSet a,",
                "deletions": 1
            },
            {
                "sha": "9e35c78e823687cf66ae7005a068144b6f5d8b79",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c93547d54f29952b9dffcef27d2120df8a881329/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c93547d54f29952b9dffcef27d2120df8a881329/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java",
                "status": "modified",
                "changes": 45,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/ComponentViewTest.java?ref=c93547d54f29952b9dffcef27d2120df8a881329",
                "patch": "@@ -33,6 +33,10 @@\n import javax.swing.JTextArea;\n import javax.swing.JTextPane;\n import javax.swing.SwingTestCase;\n+import javax.swing.text.Element;\n+import javax.swing.text.html.HTMLDocument;\n+import javax.swing.text.html.ListView;\n+\n \n public class ComponentViewTest extends SwingTestCase {\n     StyledDocument document;\n@@ -649,6 +653,47 @@ public int getViewCount() {\n         }\n     }\n \n+    public void testSetParent_View() {\n+        // Regression test for HARMONY-1767 \n+        HTMLDocument doc = new HTMLDocument();\n+        Element e = doc.getDefaultRootElement();\n+        ComponentView obj = new ComponentView(new TestElement());\n+        obj.setParent(new ListView(e));        \n+    }  \n+\n+    private class TestElement implements Element {\n+        public boolean isLeaf() {\n+            return false;\n+        }\n+        public Element getElement(int index) {\n+            return null;\n+        }\n+        public int getElementCount() {\n+            return 0;\n+        }\n+        public int getElementIndex(int offset) {\n+            return 0;\n+        }\n+        public int getEndOffset() {\n+            return 0;\n+        }       \n+        public int getStartOffset() {\n+            return 0;\n+        }       \n+        public AttributeSet getAttributes() {\n+            return null;\n+        }\n+        public String getName() {\n+            return \"AA\";\n+        }\n+        public Element getParentElement() {\n+            return null;\n+        }\n+        public Document getDocument() {\n+            return null;\n+        }\n+    }\n+\n     private void checkBounds(final int x, final int y, final int height, final Shape box) {\n         Rectangle bounds = box.getBounds();\n         assertEquals(x, bounds.x);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-1797] [classlib][swing] javax.swing.text.PlainDocument.removeUpdate(AbstractDocument.DefaultDocumentEvent chng) throws unspecified NullPointerException\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495538 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e5e62d9e5c228664a8256e0000a755c8428c2e17",
        "parent": "https://github.com/apache/harmony-classlib/commit/d5b717044ce1c04e3e97ef0300cce10a871a49b7",
        "bug_id": "harmony-classlib_31",
        "file": [
            {
                "sha": "fc32363b3f77340aa51f127d60c6d0d7d8288bed",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/PlainDocument.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e5e62d9e5c228664a8256e0000a755c8428c2e17/modules/swing/src/main/java/common/javax/swing/text/PlainDocument.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e5e62d9e5c228664a8256e0000a755c8428c2e17/modules/swing/src/main/java/common/javax/swing/text/PlainDocument.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/PlainDocument.java?ref=e5e62d9e5c228664a8256e0000a755c8428c2e17",
                "patch": "@@ -150,7 +150,9 @@ protected void removeUpdate(final DefaultDocumentEvent event) {\n \n         try {\n             text = getText(offset, length);\n-        } catch (final BadLocationException e) { }\n+        } catch (final BadLocationException e) {\n+            return;\n+        }\n \n         boolean hasLineBreak = text.indexOf('\\n') != -1;\n ",
                "deletions": 1
            },
            {
                "sha": "68270eb1b24563ba2cfc2aa51375d995d3b3ad83",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/PlainDocumentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e5e62d9e5c228664a8256e0000a755c8428c2e17/modules/swing/src/test/api/java/common/javax/swing/text/PlainDocumentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e5e62d9e5c228664a8256e0000a755c8428c2e17/modules/swing/src/test/api/java/common/javax/swing/text/PlainDocumentTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/PlainDocumentTest.java?ref=e5e62d9e5c228664a8256e0000a755c8428c2e17",
                "patch": "@@ -22,6 +22,7 @@\n \n import javax.swing.BasicSwingTestCase;\n import javax.swing.event.DocumentEvent.ElementChange;\n+import javax.swing.event.DocumentEvent.EventType;\n import javax.swing.text.AbstractDocument.AbstractElement;\n import javax.swing.text.AbstractDocument.BranchElement;\n import javax.swing.text.AbstractDocument.Content;\n@@ -365,6 +366,14 @@ public void testRemoveUpdate05() throws BadLocationException {\n         checkOffsets(root.getElement(2), 18, 19);\n     }\n \n+    // Regression for HARMONY-1797\n+    public void testRemoveUpdate06() throws Exception {\n+        doc = new PlainDocument();\n+        insert = doc.new DefaultDocumentEvent(3, 13, EventType.INSERT);\n+\n+        doc.removeUpdate(insert); // No exception should be thrown \n+    }\n+\n     /**\n      * Tests getParagraphElement when calling on empty document.\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch for HARMONY-2477 ([classlib][annotation] java.lang.annotation.IncompleteAnnotationException(null,String ) does not throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495297 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/be7d98949f3c6a7ea32cb04174c5c79d139ee8d2",
        "parent": "https://github.com/apache/harmony-classlib/commit/e2b1b75d5483cb5ba9a9268c4b3f7f78699b73cf",
        "bug_id": "harmony-classlib_32",
        "file": [
            {
                "sha": "3e63c22d72b2b3ceb64626cc937885b87a45445c",
                "filename": "modules/annotation/src/main/java/java/lang/annotation/IncompleteAnnotationException.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/be7d98949f3c6a7ea32cb04174c5c79d139ee8d2/modules/annotation/src/main/java/java/lang/annotation/IncompleteAnnotationException.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/be7d98949f3c6a7ea32cb04174c5c79d139ee8d2/modules/annotation/src/main/java/java/lang/annotation/IncompleteAnnotationException.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/annotation/src/main/java/java/lang/annotation/IncompleteAnnotationException.java?ref=be7d98949f3c6a7ea32cb04174c5c79d139ee8d2",
                "patch": "@@ -47,7 +47,7 @@\n      */\n     public IncompleteAnnotationException(\n             Class<? extends Annotation> annotationType, String elementName) {\n-        super(Messages.getString(\"annotation.0\", elementName, annotationType)); //$NON-NLS-1$\n+        super(Messages.getString(\"annotation.0\", elementName, annotationType.getName())); //$NON-NLS-1$\n         this.annotationType = annotationType;\n         this.elementName = elementName;\n     }",
                "deletions": 1
            },
            {
                "sha": "2528385c0b9a09c48a9e589a3744830ae3fbe203",
                "filename": "modules/annotation/src/test/java/org/apache/harmony/annotation/tests/java/lang/annotation/IncompleteAnnotationExceptionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/be7d98949f3c6a7ea32cb04174c5c79d139ee8d2/modules/annotation/src/test/java/org/apache/harmony/annotation/tests/java/lang/annotation/IncompleteAnnotationExceptionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/be7d98949f3c6a7ea32cb04174c5c79d139ee8d2/modules/annotation/src/test/java/org/apache/harmony/annotation/tests/java/lang/annotation/IncompleteAnnotationExceptionTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/annotation/src/test/java/org/apache/harmony/annotation/tests/java/lang/annotation/IncompleteAnnotationExceptionTest.java?ref=be7d98949f3c6a7ea32cb04174c5c79d139ee8d2",
                "patch": "@@ -0,0 +1,40 @@\n+/*\r\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\r\n+ *  contributor license agreements.  See the NOTICE file distributed with\r\n+ *  this work for additional information regarding copyright ownership.\r\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\r\n+ *  (the \"License\"); you may not use this file except in compliance with\r\n+ *  the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+package org.apache.harmony.annotation.tests.java.lang.annotation;\r\n+\r\n+import java.lang.annotation.IncompleteAnnotationException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+/**\r\n+ * \r\n+ */\r\n+public class IncompleteAnnotationExceptionTest extends TestCase {\r\n+\r\n+    /*\r\n+     * Class under test for void IncompleteAnnotationException(String)\r\n+     * Regression for HARMONY-2477\r\n+     */\r\n+    public void testNullType() {\r\n+        try {\r\n+            new IncompleteAnnotationException(null, \"str\");\r\n+            fail(\"NullPointerException must be thrown\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Catch NullPointerException (instead of Exception) if type param is null.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489051 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7f03c4f3cbe47fd791745a3612b9512dfbc8712a",
        "parent": "https://github.com/apache/harmony-classlib/commit/5921fceb31a2eba2228f76e2b0fca467db31b2dd",
        "bug_id": "harmony-classlib_33",
        "file": [
            {
                "sha": "c0a93bfe9dc3d547676bf667b234ac6a76c441a4",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/UnresolvedPermissionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f03c4f3cbe47fd791745a3612b9512dfbc8712a/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/UnresolvedPermissionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f03c4f3cbe47fd791745a3612b9512dfbc8712a/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/UnresolvedPermissionTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/UnresolvedPermissionTest.java?ref=7f03c4f3cbe47fd791745a3612b9512dfbc8712a",
                "patch": "@@ -56,9 +56,9 @@ public void testCtor()\n         \n         try {\n             new UnresolvedPermission(null, name, action, null);\n-            fail(\"exception is not thrown on null type\");\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException ok) {\n         }\n-        catch (Exception ok) {}\n \n         //Regression for HARMONY-733\n         up = new UnresolvedPermission(\"\", \"name\", \"action\", null);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2760 ([classlib][security]Provider.constructor throws NullPointerException while name or info is null while RI does not.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488120 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2c9cd56374f95bd8c4b05e00bc019fed4da6cf91",
        "parent": "https://github.com/apache/harmony-classlib/commit/2661fa6ff89bce88a683f427d494bdfd00fde913",
        "bug_id": "harmony-classlib_34",
        "file": [
            {
                "sha": "0b6f33eb31d4ccedf669f0d1e7bf5d53f381172f",
                "filename": "modules/security/src/main/java/common/java/security/Provider.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c9cd56374f95bd8c4b05e00bc019fed4da6cf91/modules/security/src/main/java/common/java/security/Provider.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c9cd56374f95bd8c4b05e00bc019fed4da6cf91/modules/security/src/main/java/common/java/security/Provider.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/Provider.java?ref=2c9cd56374f95bd8c4b05e00bc019fed4da6cf91",
                "patch": "@@ -720,9 +720,9 @@ private void servicesChanged() {\n     // Provider.id name, Provider.id version, Provider.id info, \n     // Provider.id className\n     private void putProviderInfo() {\n-        super.put(\"Provider.id name\", name); //$NON-NLS-1$\n-        super.put(\"Provider.id version\", versionString); //$NON-NLS-1$\n-        super.put(\"Provider.id info\", info); //$NON-NLS-1$\n+        super.put(\"Provider.id name\", null != name ? name : \"null\"); //$NON-NLS-1$\n+\t\tsuper.put(\"Provider.id version\", versionString); //$NON-NLS-1$\n+\t\tsuper.put(\"Provider.id info\", null != info ? info : \"null\"); //$NON-NLS-1$\n         super.put(\"Provider.id className\", this.getClass().getName()); //$NON-NLS-1$\n     }\n ",
                "deletions": 3
            },
            {
                "sha": "770e71d04900fdb3befba2f48eaf17f9267997a4",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/ProviderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c9cd56374f95bd8c4b05e00bc019fed4da6cf91/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/ProviderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c9cd56374f95bd8c4b05e00bc019fed4da6cf91/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/ProviderTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/ProviderTest.java?ref=2c9cd56374f95bd8c4b05e00bc019fed4da6cf91",
                "patch": "@@ -311,7 +311,15 @@ public final void testService2() {\n         }\n     }\n */\n-\n+    //Regression for HARMONY-2760.\n+    public void testConstructor() {\n+\t\tMyProvider myProvider = new MyProvider(null, 1, null);\n+\t\tassertNull(myProvider.getName());\n+\t\tassertNull(myProvider.getInfo());\n+\t\tassertEquals(\"null\", myProvider.getProperty(\"Provider.id name\"));\n+\t\tassertEquals(\"null\", myProvider.getProperty(\"Provider.id info\"));\n+\t}\n+    \n     class MyProvider extends Provider {\n         MyProvider() {\n             super(\"MyProvider\", 1.0, \"Provider for testing\");",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-2518 ([classlib][security] java.security.cert.PolicyQualifierInfo((byte[])null ) throws IOException while RI throws NullPointerException (compatibility issue))\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@483828 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1f13e029317163d86871c622857c38c76846ad14",
        "parent": "https://github.com/apache/harmony-classlib/commit/d37eb27a48ce325d5362fdcd474aa40c812287bc",
        "bug_id": "harmony-classlib_35",
        "file": [
            {
                "sha": "acad3bcbd2e5cb982609da897d6ecd3da7bee2e8",
                "filename": "modules/security/src/main/java/common/java/security/cert/PolicyQualifierInfo.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f13e029317163d86871c622857c38c76846ad14/modules/security/src/main/java/common/java/security/cert/PolicyQualifierInfo.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f13e029317163d86871c622857c38c76846ad14/modules/security/src/main/java/common/java/security/cert/PolicyQualifierInfo.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/cert/PolicyQualifierInfo.java?ref=1f13e029317163d86871c622857c38c76846ad14",
                "patch": "@@ -48,7 +48,7 @@\n      */\n     public PolicyQualifierInfo(byte[] encoded) throws IOException {\n         if (encoded == null) {\n-            throw new IOException(Messages.getString(\"security.0A\")); //$NON-NLS-1$\n+            throw new NullPointerException(Messages.getString(\"security.0A\")); //$NON-NLS-1$\n         }\n         if (encoded.length == 0) {\n             throw new IOException(Messages.getString(\"security.69\")); //$NON-NLS-1$",
                "deletions": 1
            },
            {
                "sha": "25487b20c63543745562588112924cd8393b286c",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/PolicyQualifierInfoTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f13e029317163d86871c622857c38c76846ad14/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/PolicyQualifierInfoTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f13e029317163d86871c622857c38c76846ad14/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/PolicyQualifierInfoTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/PolicyQualifierInfoTest.java?ref=1f13e029317163d86871c622857c38c76846ad14",
                "patch": "@@ -47,12 +47,11 @@ public PolicyQualifierInfoTest(String name) {\n      * parameter does not represent a valid and parsable policy\n      * qualifier info\n      */\n-    public final void testPolicyQualifierInfo01() {\n+    public final void test_Ctor() throws IOException {\n         try {\n             // pass null\n             new PolicyQualifierInfo(null);\n-            fail(\"IOE or NPE expected\");\n-        } catch (IOException e) {\n+            fail(\"No expected NullPointerException\");\n         } catch (NullPointerException e) {\n         }\n ",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2340 ([classlib][luni]ObjectInputStream.readClassDesc throws NullPointerException when it is called outside of readObject())\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@480811 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/91bbaa2973ab9c6f4827761ef3570f582ac1529f",
        "parent": "https://github.com/apache/harmony-classlib/commit/f366b604263fa667233ba9bc6e7ac8444f927bab",
        "bug_id": "harmony-classlib_36",
        "file": [
            {
                "sha": "924526142c7aa55f2007b216447c3e738dbae2ef",
                "filename": "modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/91bbaa2973ab9c6f4827761ef3570f582ac1529f/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/91bbaa2973ab9c6f4827761ef3570f582ac1529f/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "status": "modified",
                "changes": 18,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectInputStream.java?ref=91bbaa2973ab9c6f4827761ef3570f582ac1529f",
                "patch": "@@ -721,7 +721,7 @@ private ObjectStreamClass readClassDesc() throws ClassNotFoundException,\n                 streamClass.setLoadFields(new ObjectStreamField[0]);\n                 registerObjectRead(streamClass, new Integer(nextHandle()),\n                         false);\n-                streamClass.setSuperclass(readClassDesc());\n+                checkedSetSuperClassDesc(streamClass, readClassDesc());                \n                 return streamClass;\n             case TC_REFERENCE:\n                 return (ObjectStreamClass) readCyclicReference();\n@@ -1591,7 +1591,7 @@ private ObjectStreamClass readEnumDescInternal(byte tc) throws IOException, Clas\n         // Consume unread class annotation data and TC_ENDBLOCKDATA\n         discardData();\n         ObjectStreamClass superClass = readClassDesc();\n-        classDesc.setSuperclass(superClass);\n+        checkedSetSuperClassDesc(classDesc, superClass);         \n         // Check SUIDs, note all SUID for Enum is 0L\n         if (0L != classDesc.getSerialVersionUID()\n                 || 0L != superClass.getSerialVersionUID()) {\n@@ -1696,8 +1696,7 @@ private ObjectStreamClass readNewClassDesc(boolean unshared)\n \n         // Consume unread class annotation data and TC_ENDBLOCKDATA\n         discardData();\n-        newClassDesc.setSuperclass(readClassDesc());\n-\n+        checkedSetSuperClassDesc(newClassDesc, readClassDesc());      \n         return newClassDesc;\n     }\n \n@@ -1749,6 +1748,8 @@ protected ObjectStreamClass readClassDescriptor() throws IOException,\n \n         // We must register the class descriptor before reading field\n         // descriptors.\n+        //if called outside of readObject, the descriptorHandle might be null\n+        descriptorHandle = (null == descriptorHandle? new Integer(nextHandle()):descriptorHandle);\n         registerObjectRead(newClassDesc, descriptorHandle, false);\n         descriptorHandle = null;\n \n@@ -2739,4 +2740,13 @@ private static String getBaseName(String fullName) {\n             return fullName.substring(k + 1);\n         }        \n     }\n+    \n+    //Avoid recursive defining.\n+    private static void checkedSetSuperClassDesc(ObjectStreamClass desc,\n+\t\t\tObjectStreamClass superDesc) throws StreamCorruptedException {\n+\t\tif (desc.equals(superDesc)) {\n+\t\t\tthrow new StreamCorruptedException();\n+\t\t}\n+\t\tdesc.setSuperclass(superDesc);\n+\t}\n }",
                "deletions": 4
            },
            {
                "sha": "6a351a239059b158083b8d76a35f02e4022fa413",
                "filename": "modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/91bbaa2973ab9c6f4827761ef3570f582ac1529f/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/91bbaa2973ab9c6f4827761ef3570f582ac1529f/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "status": "modified",
                "changes": 50,
                "additions": 50,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java?ref=91bbaa2973ab9c6f4827761ef3570f582ac1529f",
                "patch": "@@ -688,6 +688,7 @@ public ObjectStreamClass readClassDescriptor() throws IOException,\n     }\n     \n     static class TestClassForSerialization implements Serializable {\n+\t\tprivate static final long serialVersionUID = 1L;\n \t}\n \n     public void test_ClassDescriptor() throws IOException,\n@@ -706,6 +707,55 @@ public void test_ClassDescriptor() throws IOException,\n \t\tois.close();\n \t\tassertEquals(cls, obj);\n \t}\n+        \n+\n+\t// Regression Test for JIRA-2340\n+    public static class ObjectOutputStreamWithWriteDesc1 extends\n+\t\t\tObjectOutputStream {\n+\t\tpublic ObjectOutputStreamWithWriteDesc1(OutputStream os)\n+\t\t\t\tthrows IOException {\n+\t\t\tsuper(os);\n+\t\t}\n+\n+\t\tpublic void writeClassDescriptor(ObjectStreamClass desc)\n+\t\t\t\tthrows IOException {\n+\t\t\tsuper.writeClassDescriptor(desc);\n+\t\t}\n+\t}\n+\n+\tpublic static class ObjectIutputStreamWithReadDesc1 extends\n+\t\t\tObjectInputStream {\t\t\n+\n+\t\tpublic ObjectIutputStreamWithReadDesc1(InputStream is)\n+\t\t\t\tthrows IOException {\n+\t\t\tsuper(is);\t\t\t\n+\t\t}\n+\n+\t\tpublic ObjectStreamClass readClassDescriptor() throws IOException,\n+\t\t\t\tClassNotFoundException {\n+\t\t\treturn super.readClassDescriptor();\n+\n+\t\t}\n+\t}\n+\t\n+\tpublic void test_readClassDescriptor() throws IOException,\n+\t\t\tClassNotFoundException {\n+\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tObjectOutputStreamWithWriteDesc1 oos = new ObjectOutputStreamWithWriteDesc1(\n+\t\t\t\tbaos);\n+\t\tObjectStreamClass desc = ObjectStreamClass\n+\t\t.lookup(TestClassForSerialization.class);\n+\t\toos.writeClassDescriptor(desc);\n+\t\toos.close();\n+\t\t\n+\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+\t\tObjectIutputStreamWithReadDesc1 ois = new ObjectIutputStreamWithReadDesc1(\n+\t\t\t\tbais);\n+\t\tObject obj = ois.readClassDescriptor();\n+\t\tois.close();\n+\t\tassertEquals(desc.getClass(), obj.getClass());\n+\t}\n    \n \n     /**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2249 ([classlib][luni]ObjectInputStream.readObject throws NullPointerException while readClassDescriptor has been overriden)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@479576 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/005851afa838299028b9d1d6a07f2e43b8bd811e",
        "parent": "https://github.com/apache/harmony-classlib/commit/23176a01992da0a52ffedc715d02c40ca09201be",
        "bug_id": "harmony-classlib_37",
        "file": [
            {
                "sha": "72182251bd55f6502df154043fdcdff0bff2109e",
                "filename": "modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/005851afa838299028b9d1d6a07f2e43b8bd811e/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/005851afa838299028b9d1d6a07f2e43b8bd811e/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectInputStream.java?ref=005851afa838299028b9d1d6a07f2e43b8bd811e",
                "patch": "@@ -1091,7 +1091,8 @@ private void readFieldValues(EmulatedFieldsForLoading emulatedFields)\n     private void readFieldValues(Object obj, ObjectStreamClass classDesc)\n             throws OptionalDataException, ClassNotFoundException, IOException {\n         // Now we must read all fields and assign them to the receiver\n-        ObjectStreamField[] fields = classDesc.getLoadFields();\n+    \tObjectStreamField[] fields = classDesc.getLoadFields();\n+    \tfields = (null == fields ? new ObjectStreamField[] {} : fields);\n         Class<?> declaringClass = classDesc.forClass();\n         if (declaringClass == null && mustResolve) {\n             throw new ClassNotFoundException(classDesc.getName());\n@@ -1686,6 +1687,7 @@ private ObjectStreamClass readNewClassDesc(boolean unshared)\n         // Resolve the field signatures using the class loader of the\n         // resolved class\n         ObjectStreamField[] fields = newClassDesc.getLoadFields();\n+        fields = (null == fields ? new ObjectStreamField[] {} : fields);\n         ClassLoader loader = newClassDesc.forClass() == null ? callerClassLoader\n                 : newClassDesc.forClass().getClassLoader();\n         for (ObjectStreamField element : fields) {",
                "deletions": 1
            },
            {
                "sha": "d99f3d56fcf64022703157111f1dcf0d68d75e24",
                "filename": "modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/005851afa838299028b9d1d6a07f2e43b8bd811e/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/005851afa838299028b9d1d6a07f2e43b8bd811e/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "status": "modified",
                "changes": 54,
                "additions": 53,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java?ref=005851afa838299028b9d1d6a07f2e43b8bd811e",
                "patch": "@@ -27,6 +27,8 @@\n import java.io.NotActiveException;\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n+import java.io.ObjectStreamClass;\n+import java.io.OutputStream;\n import java.io.Serializable;\n import java.io.SerializablePermission;\n import java.io.StreamCorruptedException;\n@@ -653,7 +655,57 @@ public void test_readObject_withPrimitiveClass() throws Exception {\n \t\tTest another = (Test) in.readObject();\n \t\tin.close();\n \t\tassertEquals(test, another);\n-\t}  \n+\t}\n+    \n+    //Regression Test for JIRA-2249\n+    public static class ObjectOutputStreamWithWriteDesc extends\n+            ObjectOutputStream {\n+        public ObjectOutputStreamWithWriteDesc(OutputStream os)\n+                throws IOException {\n+            super(os);\n+        }\n+\n+        public void writeClassDescriptor(ObjectStreamClass desc)\n+                throws IOException {\n+        }\n+    }\n+\n+    public static class ObjectIutputStreamWithReadDesc extends\n+            ObjectInputStream {\n+        private Class returnClass;\n+\n+        public ObjectIutputStreamWithReadDesc(InputStream is, Class returnClass)\n+                throws IOException {\n+            super(is);\n+            this.returnClass = returnClass;\n+        }\n+\n+        public ObjectStreamClass readClassDescriptor() throws IOException,\n+                ClassNotFoundException {\n+            return ObjectStreamClass.lookup(returnClass);\n+\n+        }\n+    }\n+    \n+    static class TestClassForSerialization implements Serializable {\n+\t}\n+\n+    public void test_ClassDescriptor() throws IOException,\n+\t\t\tClassNotFoundException {\n+\n+\t\tByteArrayOutputStream baos = new ByteArrayOutputStream();\n+\t\tObjectOutputStreamWithWriteDesc oos = new ObjectOutputStreamWithWriteDesc(\n+\t\t\t\tbaos);\n+\t\toos.writeObject(String.class);\n+\t\toos.close();\n+\t\tClass cls = TestClassForSerialization.class;\n+\t\tByteArrayInputStream bais = new ByteArrayInputStream(baos.toByteArray());\n+\t\tObjectIutputStreamWithReadDesc ois = new ObjectIutputStreamWithReadDesc(\n+\t\t\t\tbais, cls);\n+\t\tObject obj = ois.readObject();\n+\t\tois.close();\n+\t\tassertEquals(cls, obj);\n+\t}\n    \n \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1299 ([classlib][logging] new FileHandler(\"\") throws unexpected NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@438387 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c2253143f6f098e3126c36ee74ca3c122190edbb",
        "parent": "https://github.com/apache/harmony-classlib/commit/69e8ef57dc63668c78e25ad99665d8093d920d65",
        "bug_id": "harmony-classlib_38",
        "file": [
            {
                "sha": "55930833dd11388d2dd3135881da9a837bfadc7c",
                "filename": "modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c2253143f6f098e3126c36ee74ca3c122190edbb/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c2253143f6f098e3126c36ee74ca3c122190edbb/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/FileHandler.java?ref=c2253143f6f098e3126c36ee74ca3c122190edbb",
                "patch": "@@ -412,9 +412,12 @@ private int getIntProperty(String key, int defaultValue) {\n      * \t\t\t\t\t\t\t\t\r\n      */\r\n     public FileHandler(String pattern) throws IOException {\r\n-        if(null == pattern || \"\".equals(pattern)){ //$NON-NLS-1$\r\n+        if(null == pattern){ \r\n             throw new NullPointerException(\"Pattern cannot be empty\"); //$NON-NLS-1$\r\n         }\r\n+        if(\"\".equals(pattern)){\r\n+            throw new IllegalArgumentException();\r\n+        }\r\n         init(pattern, null, new Integer(DEFAULT_LIMIT), new Integer(\r\n                 DEFAULT_COUNT));\r\n     }\r",
                "deletions": 1
            },
            {
                "sha": "8d3fdf7ebf98113078cd3335db9e2ebe548352b3",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c2253143f6f098e3126c36ee74ca3c122190edbb/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c2253143f6f098e3126c36ee74ca3c122190edbb/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java?ref=c2253143f6f098e3126c36ee74ca3c122190edbb",
                "patch": "@@ -330,15 +330,25 @@ public void testLimitAndCount() throws Exception {\n \t\tassertFileContent(TEMPPATH, \"testLimitCount0.0\",\r\n \t\t\t\tnew LogRecord[] { rs[9] }, handler.getFormatter());\r\n \t\t\r\n+        FileHandler h1 = null;\r\n+        FileHandler h2 = null;\r\n         try {\r\n             File logDir = new File(\"log\");\r\n             reset(\"log\",\"\"); \r\n             logDir.mkdir();\r\n-            FileHandler h1 = new FileHandler(\"log/a\", 0, 1);\r\n+            h1 = new FileHandler(\"log/a\", 0, 1);\r\n             assertNotNull(h1);\r\n-            FileHandler h2 = new FileHandler(\"log/a\", 0, 1, false);\r\n+            h2 = new FileHandler(\"log/a\", 0, 1, false);\r\n             assertNotNull(h2);\r\n         } finally {\r\n+            try{\r\n+                h1.close();\r\n+            }catch(Exception e){\r\n+            }\r\n+            try{\r\n+                h2.close();\r\n+            }catch(Exception e){\r\n+            }\r\n             reset(\"log\", \"\");\r\n         }\t\r\n \t}\r\n@@ -525,10 +535,12 @@ public void testInvalidParams() throws IOException {\n \t\t} catch (NullPointerException e) {\r\n \t\t}\r\n \t\ttry {\r\n-\t\t\tnew FileHandler(\"\");\r\n-\t\t\tfail(\"should throw null exception\");\r\n-\t\t} catch (NullPointerException e) {\r\n-\t\t}\r\n+            // regression test for Harmony-1299\r\n+            new FileHandler(\"\");\r\n+            fail(\"should throw IllegalArgumentException\");\r\n+        } catch (IllegalArgumentException e) {\r\n+            // expected \r\n+        }\r\n \t\ttry {\r\n \t\t\tnew FileHandler(\"%t/java%u\", 0, 0);\r\n \t\t\tfail(\"should throw IllegalArgumentException\");\r",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1265 ([classlib][logging]compatibility: java.util.logging.Logger.entering(null,null,null) throws unexpected NullPointerException.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@434363 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d52c0299368b8dbed376f95fd1a0ee603f653a35",
        "parent": "https://github.com/apache/harmony-classlib/commit/d1cc8bb743166852f89accf1f10df4f6d4e48794",
        "bug_id": "harmony-classlib_39",
        "file": [
            {
                "sha": "978d62696976e40684e1fa001abb47204fa4a793",
                "filename": "modules/logging/src/main/java/java/util/logging/Logger.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d52c0299368b8dbed376f95fd1a0ee603f653a35/modules/logging/src/main/java/java/util/logging/Logger.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d52c0299368b8dbed376f95fd1a0ee603f653a35/modules/logging/src/main/java/java/util/logging/Logger.java",
                "status": "modified",
                "changes": 2764,
                "additions": 1384,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Logger.java?ref=d52c0299368b8dbed376f95fd1a0ee603f653a35",
                "deletions": 1380
            },
            {
                "sha": "bf61780258a89afc8a07584d7f2376c1a3c780fe",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d52c0299368b8dbed376f95fd1a0ee603f653a35/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d52c0299368b8dbed376f95fd1a0ee603f653a35/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java?ref=d52c0299368b8dbed376f95fd1a0ee603f653a35",
                "patch": "@@ -1531,12 +1531,21 @@ public void testEntering_StringStringObjects_NullEmpty() {\n \t * logging level set.\r\n \t */\r\n \tpublic void testEntering_StringStringObjects_Null() {\r\n-\t\tthis.sharedLogger.setLevel(Level.FINER);\r\n-\t\ttry {\r\n-\t\t\tthis.sharedLogger.entering(null, null, (Object[]) null);\r\n-\t\t\tfail(\"Should throw NullPointerException!\");\r\n-\t\t} catch (NullPointerException e) {\r\n-\t\t}\r\n+\t\tsharedLogger.setLevel(Level.FINER);\r\n+\t\tsharedLogger.entering(null, null, (Object[]) null);\r\n+\t\t// regression test for Harmony-1265\r\n+\t\tLogRecord r = (LogRecord) CallVerificationStack.getInstance().pop();\r\n+\t\tassertTrue(CallVerificationStack.getInstance().empty());\r\n+\t\tassertSame(sharedLogger.getName(), r.getLoggerName());\r\n+\t\tassertEquals(\"ENTRY\", r.getMessage());\r\n+\t\tassertSame(sharedLogger.getResourceBundleName(), r\r\n+\t\t\t\t.getResourceBundleName());\r\n+\t\tassertSame(sharedLogger.getResourceBundle(), r.getResourceBundle());\r\n+\t\tassertNull(r.getSourceClassName());\r\n+\t\tassertNull(r.getSourceMethodName());\r\n+\t\tassertSame(Level.FINER, r.getLevel());\r\n+\t\tassertNull(r.getParameters());\r\n+\t\tassertNull(r.getThrown());\r\n \t}\r\n \r\n \t/*\r",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1115([classlib][luni] java.io.SequenceInputStream 's constructor SequenceInputStream(InputStream, InputStream) should not throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@430323 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/10dc02bfd132cde2ac9601501353afa0449b1c3c",
        "parent": "https://github.com/apache/harmony-classlib/commit/662e37fd600fc648fd7e638188a0ff081dfa1722",
        "bug_id": "harmony-classlib_40",
        "file": [
            {
                "sha": "4b26b4e7ccfb9264ed315b22cb71fc337d38bafa",
                "filename": "modules/luni/src/main/java/java/io/SequenceInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/10dc02bfd132cde2ac9601501353afa0449b1c3c/modules/luni/src/main/java/java/io/SequenceInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/10dc02bfd132cde2ac9601501353afa0449b1c3c/modules/luni/src/main/java/java/io/SequenceInputStream.java",
                "status": "modified",
                "changes": 46,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/SequenceInputStream.java?ref=10dc02bfd132cde2ac9601501353afa0449b1c3c",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2004 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -18,8 +18,6 @@\n import java.util.Enumeration;\r\n import java.util.Vector;\r\n \r\n-import org.apache.harmony.luni.util.Msg;\r\n-\r\n /**\r\n  * SequenceInputStream is used for streaming over a sequence of streams\r\n  * concatenated together. Reads are taken from the first stream until it ends,\r\n@@ -48,14 +46,13 @@\n \t *            the second stream to get bytes from\r\n \t */\r\n \tpublic SequenceInputStream(InputStream s1, InputStream s2) {\r\n-\t\tif (s1 != null && s2 != null) {\r\n-\t\t\tVector<InputStream> inVector = new Vector<InputStream>(1);\r\n-\t\t\tinVector.addElement(s2);\r\n-\t\t\te = inVector.elements();\r\n-\t\t\tin = s1;\r\n-\t\t} else {\r\n-            throw new NullPointerException();\r\n-        }\r\n+\t\tif (s1 == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n+\t\tVector<InputStream> inVector = new Vector<InputStream>(1);\r\n+\t\tinVector.addElement(s2);\r\n+\t\te = inVector.elements();\r\n+\t\tin = s1;\r\n \t}\r\n \r\n \t/**\r\n@@ -101,10 +98,6 @@ public int available() throws IOException {\n \t *             If an error occurs attempting to close this FileInputStream.\r\n \t */\r\n \tpublic void close() throws IOException {\r\n-\t\tif (e == null) {\r\n-\t\t\tthrow new IOException(Msg.getString(\"K00b7\")); //$NON-NLS-1$\r\n-\t\t}\r\n-\r\n \t\twhile (in != null) {\r\n \t\t\tnextStream();\r\n \t\t}\r\n@@ -167,8 +160,7 @@ public int read() throws IOException {\n \t * @return the number of bytes actually read or -1 if end of stream.\r\n \t * \r\n \t * @throws IOException\r\n-\t *             If the stream is already closed or another IOException\r\n-\t *             occurs.\r\n+\t *             If an error occurs while reading the stream\r\n \t */\r\n \tpublic int read(byte[] buffer, int offset, int count) throws IOException {\r\n \t\tif (in == null) {\r\n@@ -178,18 +170,16 @@ public int read(byte[] buffer, int offset, int count) throws IOException {\n \t\t\tthrow new NullPointerException();\r\n \t\t}\r\n \t\t// avoid int overflow\r\n-\t\tif (0 <= offset && offset <= buffer.length && 0 <= count\r\n-\t\t\t\t&& count <= buffer.length - offset) {\r\n-\t\t\twhile (in != null) {\r\n-\t\t\t\tint result = in.read(buffer, offset, count);\r\n-\t\t\t\tif (result >= 0) {\r\n-\t\t\t\t\treturn result;\r\n-\t\t\t\t}\r\n-\t\t\t\tnextStream();\r\n+\t\tif (offset < 0 || offset > buffer.length - count || count < 0) {\r\n+\t\t\tthrow new IndexOutOfBoundsException();\r\n+\t\t}\r\n+\t\twhile (in != null) {\r\n+\t\t\tint result = in.read(buffer, offset, count);\r\n+\t\t\tif (result >= 0) {\r\n+\t\t\t\treturn result;\r\n \t\t\t}\r\n-\t\t\treturn -1;\r\n-\t\t} else {\r\n-\t\t\tthrow new ArrayIndexOutOfBoundsException();\r\n+\t\t\tnextStream();\r\n \t\t}\r\n+\t\treturn -1;\r\n \t}\r\n }\r",
                "deletions": 28
            },
            {
                "sha": "08b7b6d4f72bbca1ec4f2f4dcf7f0d4cac6334cf",
                "filename": "modules/luni/src/test/java/tests/api/java/io/SequenceInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/10dc02bfd132cde2ac9601501353afa0449b1c3c/modules/luni/src/test/java/tests/api/java/io/SequenceInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/10dc02bfd132cde2ac9601501353afa0449b1c3c/modules/luni/src/test/java/tests/api/java/io/SequenceInputStreamTest.java",
                "status": "modified",
                "changes": 45,
                "additions": 35,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/SequenceInputStreamTest.java?ref=10dc02bfd132cde2ac9601501353afa0449b1c3c",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -38,6 +38,23 @@ public void test_ConstructorLjava_io_InputStreamLjava_io_InputStream() {\n \t\t// java.io.InputStream)\r\n \t\t// Used in tests\r\n \t}\r\n+\t\r\n+\t/**\r\n+\t * @tests SequenceInputStream#SequenceInputStream(java.io.InputStream,\r\n+\t *        java.io.InputStream)\r\n+\t */\r\n+\tpublic void test_Constructor_LInputStreamLInputStream_Null() {\t\t\r\n+\t\ttry {\r\n+\t\t\tsi = new SequenceInputStream(null , null);\r\n+\t\t\tfail(\"should throw NullPointerException\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t//expected\r\n+\t\t}\r\n+\t\t\r\n+\t\t//will not throw NullPointerException if the first InputStream is not null\r\n+\t\tInputStream is = new ByteArrayInputStream(s1.getBytes()); \r\n+\t\tsi = new SequenceInputStream(is , null);\r\n+\t}\r\n \r\n \t/**\r\n \t * @tests java.io.SequenceInputStream#SequenceInputStream(java.util.Enumeration)\r\n@@ -93,27 +110,28 @@ public void test_available() {\n \t/**\r\n \t * @tests java.io.SequenceInputStream#close()\r\n \t */\r\n-\tpublic void test_close() {\r\n-\t\t// Test for method void java.io.SequenceInputStream.close()\r\n-\t\ttry {\r\n-\t\t\tsi.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"IOException during close test : \" + e.getMessage());\r\n-\t\t}\r\n-\r\n+\tpublic void test_close() throws IOException {\r\n+\t\tsi.close();\t\t\r\n+\t\t//will not throw IOException to close a stream which is closed already\r\n+\t\tsi.close();\r\n \t}\r\n \r\n \t/**\r\n \t * @tests java.io.SequenceInputStream#read()\r\n \t */\r\n-\tpublic void test_read() {\r\n+\tpublic void test_read() throws IOException {\r\n \t\t// Test for method int java.io.SequenceInputStream.read()\r\n \t\ttry {\r\n \t\t\tsi.read();\r\n \t\t\tassertTrue(\"Read incorrect char\", (char) si.read() == s1.charAt(1));\r\n \t\t} catch (IOException e) {\r\n \t\t\tfail(\"IOException during read test: \" + e.getMessage());\r\n \t\t}\r\n+\t\t\r\n+\t\t//returns -1 if the stream is closed , do not throw IOException\r\n+\t\tsi.close();\r\n+\t\tint result = si.read();\r\n+\t\tassertEquals(-1 , result);\t\t\r\n \t}\r\n \r\n \t/**\r\n@@ -144,6 +162,13 @@ public void test_read() {\n \t\t} catch (NullPointerException e) {\r\n \t\t\t// expected\r\n \t\t}\r\n+\t\t\r\n+        //returns -1 if the stream is closed , do not throw IOException\r\n+\t\tbyte[] array = new byte[] { 1 , 2 , 3 ,4 };\r\n+\t\tsis.close();\r\n+\t\tint result = sis.read(array , 0 , 5);\r\n+\t\tassertEquals(-1 , result);\t\r\n+\t\t\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-1039 ([classlib][luni] java.net.Inet6Address throws NullPointerException when deserializing an object with \"null\" interface name.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@428263 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d",
        "parent": "https://github.com/apache/harmony-classlib/commit/a0a9374c8a902ad00c7f1a7c20626ec13d7aa92b",
        "bug_id": "harmony-classlib_41",
        "file": [
            {
                "sha": "aa4583ae74d845e2d3164ad70d2e37422bab493a",
                "filename": "modules/luni/src/main/java/java/net/Inet6Address.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/main/java/java/net/Inet6Address.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/main/java/java/net/Inet6Address.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/Inet6Address.java?ref=3c59c94b966c4eaee6e63e9b8590fc56b8930e1d",
                "patch": "@@ -443,7 +443,7 @@ private void readObject(ObjectInputStream stream) throws IOException,\n \t\tscope_id_set = fields.get(\"scope_id_set\", false);\r\n         ifname = (String)fields.get(\"ifname\", null);\r\n         scope_ifname_set = fields.get(\"scope_ifname_set\", false);\r\n-        if (scope_ifname_set){\r\n+        if (scope_ifname_set && null != ifname){\r\n             scopedIf = NetworkInterface.getByName(ifname);\r\n         }\r\n \t}\r",
                "deletions": 1
            },
            {
                "sha": "3e7601f5444dc4dd9be3db11393b70aad8565e4e",
                "filename": "modules/luni/src/test/java/tests/api/java/net/Inet6AddressTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/java/tests/api/java/net/Inet6AddressTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/java/tests/api/java/net/Inet6AddressTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/Inet6AddressTest.java?ref=3c59c94b966c4eaee6e63e9b8590fc56b8930e1d",
                "patch": "@@ -24,7 +24,9 @@\n \r\n public class Inet6AddressTest extends junit.framework.TestCase {\r\n \r\n-    private static final String SERIALIZATION_FILE_NAME = \"serialization/java/net/Inet6Address.golden.ser\";\r\n+    private static final String SERIALIZATION_FILE_NAME0 = \"serialization/java/net/Inet6Address.golden.0.ser\";\r\n+    \r\n+    private static final String SERIALIZATION_FILE_NAME1 = \"serialization/java/net/Inet6Address.golden.1.ser\";\r\n \r\n \t/**\r\n \t * @tests java.net.Inet6Address#isMulticastAddress()\r\n@@ -985,7 +987,25 @@ public void testSerializationCompatibility() throws Exception {\n         byte[] localv6 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };\r\n         Inet6Address ia = (Inet6Address) InetAddress.getByAddress(localv6);\r\n         Inet6Address deIA = (Inet6Address) SerializationTester.readObject(ia,\r\n-                SERIALIZATION_FILE_NAME);\r\n+                SERIALIZATION_FILE_NAME0);\r\n+        byte[] deAddr = deIA.getAddress();\r\n+        for (int i = 0; i < localv6.length; i++) {\r\n+            assertEquals(localv6[i], deAddr[i]);\r\n+        }\r\n+        assertEquals(ia.getScopeId(), deIA.getScopeId());\r\n+        assertEquals(ia.getScopedInterface(), deIA.getScopedInterface());\r\n+    }\r\n+    \r\n+    /*\r\n+     * Test serialization/deserilazation compatibility with RI.\r\n+     */\r\n+    public void testSerializationCompatibility_NullInterfaceName()\r\n+            throws Exception {\r\n+        // regression test for Harmony-1039\r\n+        byte[] localv6 = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1 };\r\n+        Inet6Address ia = (Inet6Address) InetAddress.getByAddress(localv6);\r\n+        Inet6Address deIA = (Inet6Address) SerializationTester.readObject(ia,\r\n+                SERIALIZATION_FILE_NAME1);\r\n         byte[] deAddr = deIA.getAddress();\r\n         for (int i = 0; i < localv6.length; i++) {\r\n             assertEquals(localv6[i], deAddr[i]);\r",
                "deletions": 2
            },
            {
                "sha": "4607c204b1698bd0479ed4bc5cf39a58f094d653",
                "filename": "modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.0.ser",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.0.ser",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.0.ser",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.0.ser?ref=3c59c94b966c4eaee6e63e9b8590fc56b8930e1d",
                "deletions": 0
            },
            {
                "sha": "5d55693649fa2bb8d8e91c606cf328707a00f46a",
                "filename": "modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.1.ser",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.1.ser",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3c59c94b966c4eaee6e63e9b8590fc56b8930e1d/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.1.ser",
                "status": "added",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.1.ser?ref=3c59c94b966c4eaee6e63e9b8590fc56b8930e1d",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-264: java.nio.CharBuffer.wrap NullPointerException behaviour\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@418829 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
        "parent": "https://github.com/apache/harmony-classlib/commit/38b32ee8cf4c110d9a0eb8cb9a346c1498eb3155",
        "bug_id": "harmony-classlib_42",
        "file": [
            {
                "sha": "b39c66d2480712830e66ddacac74c15aa00b8e3a",
                "filename": "modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/ByteBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -101,9 +101,12 @@ public static ByteBuffer wrap(byte[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static ByteBuffer wrap(byte[] array, int start, int len) {\r\n-        if ((start< 0 ) || (len < 0) || start+ len > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if ((start< 0 ) || (len < 0) || start+ len > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tByteBuffer buf = BufferFactory.newByteBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "c57c4ca91f1b3c0a759a151c371cd3956d2aa9c0",
                "filename": "modules/nio/src/main/java/java/nio/CharBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/CharBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/CharBuffer.java",
                "status": "modified",
                "changes": 17,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/CharBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -91,9 +91,12 @@ public static CharBuffer wrap(char[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static CharBuffer wrap(char[] array, int start, int len) {\r\n-        if ((start < 0 ) || (len < 0) || start + len > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if ((start < 0 ) || (len < 0) || start + len > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tCharBuffer buf = BufferFactory.newCharBuffer(array);\r\n \t\tbuf.position = start;\r\n@@ -139,9 +142,11 @@ public static CharBuffer wrap(CharSequence chseq) {\n \t *                invalid\r\n \t */\r\n \tpublic static CharBuffer wrap(CharSequence chseq, int start, int end) {\r\n-        if (start < 0 || end < start || end > chseq.length()) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+\t    if (chseq == null)\r\n+\t        throw new NullPointerException();\r\n+\t    if (start < 0 || end < start || end > chseq.length()) {\r\n+\t        throw new IndexOutOfBoundsException();\r\n+\t    }\r\n         \r\n \t\tCharBuffer result = BufferFactory.newCharBuffer(chseq);\r\n \t\tresult.position = start;\r",
                "deletions": 6
            },
            {
                "sha": "58ebf2e1c413aa7e2b2bf45669e90e6d137eb329",
                "filename": "modules/nio/src/main/java/java/nio/DoubleBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/DoubleBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/DoubleBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/DoubleBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -82,9 +82,12 @@ public static DoubleBuffer wrap(double[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static DoubleBuffer wrap(double[] array, int start, int len) {\r\n-        if (start < 0 || len < 0 || start+ len > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if (start < 0 || len < 0 || start+ len > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tDoubleBuffer buf = BufferFactory.newDoubleBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "125673e59891aa221b6b0c6f6626572bd34c4c45",
                "filename": "modules/nio/src/main/java/java/nio/FloatBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/FloatBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/FloatBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/FloatBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -82,9 +82,12 @@ public static FloatBuffer wrap(float[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static FloatBuffer wrap(float[] array, int start, int len) {\r\n-        if (start < 0 || len < 0 || start + len > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if (start < 0 || len < 0 || start + len > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tFloatBuffer buf = BufferFactory.newFloatBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "10039f98ae20e6a4e2dd40dae8719ddd65f0a217",
                "filename": "modules/nio/src/main/java/java/nio/IntBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/IntBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/IntBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/IntBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -84,9 +84,12 @@ public static IntBuffer wrap(int[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static IntBuffer wrap(int[] array, int start, int len) {\r\n-        if (start < 0 || len < 0 || len + start > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if (start < 0 || len < 0 || len + start > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tIntBuffer buf = BufferFactory.newIntBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "a46449c10ba47e55a5baacbd244fa3441c6b79c1",
                "filename": "modules/nio/src/main/java/java/nio/LongBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/LongBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/LongBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/LongBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -85,9 +85,12 @@ public static LongBuffer wrap(long[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static LongBuffer wrap(long[] array, int start, int len) {\r\n-        if (start < 0 || len < 0 || len + start > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if (start < 0 || len < 0 || len + start > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tLongBuffer buf = BufferFactory.newLongBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "a21fd4355c8cb62fd64021dc050d41f263312004",
                "filename": "modules/nio/src/main/java/java/nio/ShortBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/ShortBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/main/java/java/nio/ShortBuffer.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/ShortBuffer.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -85,9 +85,12 @@ public static ShortBuffer wrap(short[] array) {\n \t *                invalid\r\n \t */\r\n \tpublic static ShortBuffer wrap(short[] array, int start, int len) {\r\n-        if (start< 0 || len < 0 || start + len > array.length) {\r\n-            throw new IndexOutOfBoundsException();\r\n-        }\r\n+                if (array == null) {\r\n+                        throw new NullPointerException();\r\n+                }\r\n+                if (start< 0 || len < 0 || start + len > array.length) {\r\n+                        throw new IndexOutOfBoundsException();\r\n+                }\r\n \r\n \t\tShortBuffer buf = BufferFactory.newShortBuffer(array);\r\n \t\tbuf.position = start;\r",
                "deletions": 3
            },
            {
                "sha": "f342f616448e6fa5eeda16fea3216d9341147f66",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ByteBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -1872,6 +1872,19 @@ public void testPutShortint() {\n \r\n         buf.order(ByteOrder.BIG_ENDIAN);\r\n     }\r\n+    \r\n+    /**\r\n+     * @tests java.nio.ByteBuffer.wrap(byte[],int,int)\r\n+     */\r\n+    public void testWrappedByteBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        byte array[] = null;\r\n+        try {\r\n+            ByteBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n \r\n     private void loadTestData1(byte array[], int offset, int length) {\r\n         for (int i = 0; i < length; i++) {\r",
                "deletions": 0
            },
            {
                "sha": "79eea73ef7f4c2d13f237c801d00fc6d1b8e890a",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/CharBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/CharBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/CharBufferTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/CharBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -1008,4 +1008,24 @@ public void testOrder() {\n \tpublic void testIsReadOnly() {\r\n \t\tassertFalse(buf.isReadOnly());\r\n \t}\r\n+    \r\n+\t/**\r\n+\t * @tests java.nio.CharBuffer.wrap(CharSequence,int,int)\r\n+\t */\r\n+\tpublic void testWrapNPE() {\r\n+\t    // Regression for HARMONY-264\r\n+\t    try {\r\n+\t        CharBuffer.wrap((CharSequence)null,1,0);\r\n+\t        fail(\"CharBuffer.wrap((CharSequence)null,1,0) should throw NullPointerException\");\r\n+\t    } catch (NullPointerException e) {\r\n+\t    }\r\n+\r\n+\r\n+\t    char[] array = null;\r\n+\t    try {\r\n+\t        CharBuffer.wrap(array,-1,0);\r\n+\t        fail(\"CharBuffer.wrap((char[])null,-1,0) should throw NullPointerException\");\r\n+\t    } catch (NullPointerException e) {\r\n+\t    }\r\n+\t}\r\n }\r",
                "deletions": 0
            },
            {
                "sha": "3ee356cef87a6144ee6b4c96a09f28e06dbfebaa",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/DoubleBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/DoubleBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/DoubleBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/DoubleBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -812,6 +812,19 @@ public void testWrappedDoubleBuffer2() {\n         testDoubleBufferInstanceThoroughly(buf);\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.nio.DoubleBuffer.wrap(double[],int,int)\r\n+     */\r\n+    public void testWrappedDoubleBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        double array[] = null;\r\n+        try {\r\n+            DoubleBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n+\r\n     public void testByteBufferAsDoubleBuffer() {\r\n         DoubleBuffer buf = ByteBuffer.allocate(160).asDoubleBuffer();\r\n         testDoubleBufferInstanceThoroughly(buf);\r",
                "deletions": 0
            },
            {
                "sha": "fef3189be290a49f69f0e0a3f3dc49b046813d4f",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/FloatBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/FloatBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/FloatBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/FloatBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -789,6 +789,19 @@ public void testWrappedFloatBuffer2() {\n         testFloatBufferInstanceThoroughly(buf);\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.nio.FloatBuffer.wrap(float[],int,int)\r\n+     */\r\n+    public void testWrappedFloatBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        float array[] = null;\r\n+        try {\r\n+            FloatBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n+\r\n     public void testByteBufferAsFloatBuffer() {\r\n         FloatBuffer buf = ByteBuffer.allocate(160).asFloatBuffer();\r\n         testFloatBufferInstanceThoroughly(buf);\r",
                "deletions": 0
            },
            {
                "sha": "561c37ce41e8b2688455ec5974e55824ac8e30fb",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/IntBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/IntBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/IntBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/IntBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -789,6 +789,19 @@ public void testWrappedIntBuffer2() {\n         testIntBufferInstanceThoroughly(buf);\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.nio.IntBuffer.wrap(int[],int,int)\r\n+     */\r\n+    public void testWrappedIntBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        int array[] = null;\r\n+        try {\r\n+            IntBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n+\r\n     public void testByteBufferAsIntBuffer() {\r\n         IntBuffer buf = ByteBuffer.allocate(160).asIntBuffer();\r\n         testIntBufferInstanceThoroughly(buf);\r",
                "deletions": 0
            },
            {
                "sha": "db9c8bfa8473985fe77e796402909b1ef796293b",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/LongBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/LongBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/LongBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/LongBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -789,6 +789,19 @@ public void testWrappedLongBuffer2() {\n         testLongBufferInstanceThoroughly(buf);\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.nio.LongBuffer.wrap(long[],int,int)\r\n+     */\r\n+    public void testWrappedLongBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        long array[] = null;\r\n+        try {\r\n+            LongBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n+\r\n     public void testByteBufferAsLongBuffer() {\r\n         LongBuffer buf = ByteBuffer.allocate(160).asLongBuffer();\r\n         testLongBufferInstanceThoroughly(buf);\r",
                "deletions": 0
            },
            {
                "sha": "2e37c0b4a69effb32b840c0c63aad437d0e4c126",
                "filename": "modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ShortBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ShortBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f22f56bf4cc54dd8d92556ba871c88deb6fbfe77/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ShortBufferTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/org/apache/harmony/tests/java/nio/ShortBufferTest.java?ref=f22f56bf4cc54dd8d92556ba871c88deb6fbfe77",
                "patch": "@@ -789,6 +789,19 @@ public void testWrappedShortBuffer2() {\n         testShortBufferInstanceThoroughly(buf);\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.nio.ShortBuffer.wrap(short[],int,int)\r\n+     */\r\n+    public void testWrappedShortBuffer_null_array() {\r\n+        // Regression for HARMONY-264\r\n+        short array[] = null;\r\n+        try {\r\n+            ShortBuffer.wrap(array, -1, 0);\r\n+            fail(\"Should throw NPE\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+        }\r\n+    }\r\n+\r\n     public void testByteBufferAsShortBuffer() {\r\n         ShortBuffer buf = ByteBuffer.allocate(160).asShortBuffer();\r\n         testShortBufferInstanceThoroughly(buf);\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-464\n[classlib][archive] Instead of ClassCastException java.util.jar.Attributes.putAll(Map attr) throws NullPointerException\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@407780 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2fb561ca65711a7bdc1ed4aba71756f207c02ece",
        "parent": "https://github.com/apache/harmony-classlib/commit/821e63bef8fcd534d27bb0c972e063f38443c220",
        "bug_id": "harmony-classlib_43",
        "file": [
            {
                "sha": "27f4f76c92466af52bab85dd8630801641dde9bd",
                "filename": "modules/archive/src/main/java/java/util/jar/Attributes.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2fb561ca65711a7bdc1ed4aba71756f207c02ece/modules/archive/src/main/java/java/util/jar/Attributes.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2fb561ca65711a7bdc1ed4aba71756f207c02ece/modules/archive/src/main/java/java/util/jar/Attributes.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/archive/src/main/java/java/util/jar/Attributes.java?ref=2fb561ca65711a7bdc1ed4aba71756f207c02ece",
                "patch": "@@ -239,6 +239,9 @@ public Object put(Object key, Object value) {\n \t *            the associations to store (must be of type Attributes).\r\n \t */\r\n \tpublic void putAll(Map attrib) {\r\n+        if( attrib == null ) {\r\n+            throw new ClassCastException();\r\n+        }\r\n \t\tthis.map.putAll((Attributes) attrib);\r\n \t}\r\n \r",
                "deletions": 0
            },
            {
                "sha": "07c773ff5b197e782222aa3d4887291f057ac744",
                "filename": "modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/AttributesTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2fb561ca65711a7bdc1ed4aba71756f207c02ece/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/AttributesTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2fb561ca65711a7bdc1ed4aba71756f207c02ece/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/AttributesTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/AttributesTest.java?ref=2fb561ca65711a7bdc1ed4aba71756f207c02ece",
                "patch": "@@ -196,6 +196,29 @@ public void test_putAllLjava_util_Map() {\n         }\n \t}\n \n+    /**\n+     * @tests java.util.jar.Attributes#putAll(java.util.Map)\n+     */\n+    public void test_putAllLjava_util_Map2() {\n+        //Regression for HARMONY-464 \n+        try {\n+            new Attributes().putAll((Map) null);\n+            fail(\"ClassCastException expected\");\n+        } catch (ClassCastException e) {\n+        }\n+\n+        //verify that special care for null is done in the Attributes.putAll() method\n+        try {\n+            new Attributes() {\n+                public void putAll(Map attrib) {\n+                    map.putAll((Attributes) attrib);\n+                }\n+            }.putAll((Map) null);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n \t/**\n \t * @tests java.util.jar.Attributes#remove(java.lang.Object)\n \t */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-378 (java.util.Arrays.sort(null,(int)-1,(int)1) should throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@396807 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/85e4de7517e4522320db9c03d1bc5630f28be960",
        "parent": "https://github.com/apache/harmony-classlib/commit/e4c6ccd004bd3025b002e62ce3d78294c55f76ef",
        "bug_id": "harmony-classlib_44",
        "file": [
            {
                "sha": "9a8fa2bc0c8cb82950ce67454e16bc5b5b6dd4a1",
                "filename": "modules/luni/src/main/java/java/util/Arrays.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/85e4de7517e4522320db9c03d1bc5630f28be960/modules/luni/src/main/java/java/util/Arrays.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/85e4de7517e4522320db9c03d1bc5630f28be960/modules/luni/src/main/java/java/util/Arrays.java",
                "status": "modified",
                "changes": 27,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Arrays.java?ref=85e4de7517e4522320db9c03d1bc5630f28be960",
                "patch": "@@ -1085,6 +1085,9 @@ public static void sort(byte[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(byte[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1195,6 +1198,9 @@ public static void sort(char[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(char[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1310,6 +1316,9 @@ public static void sort(double[] array) {\n \t * @see Double#compareTo(Double)\r\n \t */\r\n \tpublic static void sort(double[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1425,6 +1434,9 @@ public static void sort(float[] array) {\n \t * @see Float#compareTo(Float)\r\n \t */\r\n \tpublic static void sort(float[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1535,6 +1547,9 @@ public static void sort(int[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(int[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1645,6 +1660,9 @@ public static void sort(long[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(long[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1762,6 +1780,9 @@ public static void sort(Object[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(Object[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r\n@@ -1822,6 +1843,9 @@ private static void sort(int start, int end, Object[] array) {\n \t */\r\n \tpublic static void sort(Object[] array, int start, int end,\r\n \t\t\tComparator comparator) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array, comparator);\r\n@@ -1903,6 +1927,9 @@ public static void sort(short[] array) {\n \t *                <code>end > array.size()</code>\r\n \t */\r\n \tpublic static void sort(short[] array, int start, int end) {\r\n+\t\tif (array == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (start >= 0 && end <= array.length) {\r\n \t\t\tif (start <= end)\r\n \t\t\t\tsort(start, end, array);\r",
                "deletions": 0
            },
            {
                "sha": "d313793c9be0e5294efe002388678fbd87d4c9e4",
                "filename": "modules/luni/src/test/java/tests/api/java/util/ArraysTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/85e4de7517e4522320db9c03d1bc5630f28be960/modules/luni/src/test/java/tests/api/java/util/ArraysTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/85e4de7517e4522320db9c03d1bc5630f28be960/modules/luni/src/test/java/tests/api/java/util/ArraysTest.java",
                "status": "modified",
                "changes": 167,
                "additions": 167,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/ArraysTest.java?ref=85e4de7517e4522320db9c03d1bc5630f28be960",
                "patch": "@@ -1142,6 +1142,173 @@ public boolean equals(Object o1, Object o2) {\n \t\t\t\t\treversedArray[counter] == originalReversedArray[counter]);\r\n \t}\r\n \r\n+    /**\r\n+     * @tests java.util.Arrays#sort(byte[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_byte_array_NPE() {\r\n+        byte[] byte_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(byte_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(byte_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(char[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_char_array_NPE() {\r\n+        char[] char_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(char_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(char_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(double[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_double_array_NPE() {\r\n+        double[] double_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(double_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(double_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(float[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_float_array_NPE() {\r\n+        float[] float_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(float_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(float_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(int[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_int_array_NPE() {\r\n+        int[] int_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(int_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(int_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(Object[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_object_array_NPE() {\r\n+        Object[] object_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(object_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(object_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(object_array_null, (int) -1, (int) 1, null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(long[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_long_array_NPE() {\r\n+        long[] long_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(long_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(long_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.util.Arrays#sort(short[], int, int)\r\n+     */\r\n+    public void test_java_util_Arrays_sort_short_array_NPE() {\r\n+        short[] short_array_null = null;\r\n+        try {\r\n+            java.util.Arrays.sort(short_array_null);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+        try {\r\n+            // Regression for HARMONY-378\r\n+            java.util.Arrays.sort(short_array_null, (int) -1, (int) 1);\r\n+            fail(\"Should throw java.lang.NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n \t/**\r\n \t * Sets up the fixture, for example, open a network connection. This method\r\n \t * is called before a test is executed.\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-258\njava.beans.PropertyEditorManager.findEditor/registerEditor should throw NullPointerExceptions\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@396796 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/441bda092defd3515a6ebf40cbaca9c99e8a96d7",
        "parent": "https://github.com/apache/harmony-classlib/commit/b0af9cdcd4889305917e03deb7583fa9b48a084c",
        "bug_id": "harmony-classlib_45",
        "file": [
            {
                "sha": "8be1b0962d7e176e0a5b8cf6cb23c6c32e3dd02a",
                "filename": "modules/beans/src/main/java/java/beans/PropertyEditorManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/441bda092defd3515a6ebf40cbaca9c99e8a96d7/modules/beans/src/main/java/java/beans/PropertyEditorManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/441bda092defd3515a6ebf40cbaca9c99e8a96d7/modules/beans/src/main/java/java/beans/PropertyEditorManager.java",
                "status": "modified",
                "changes": 107,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyEditorManager.java?ref=441bda092defd3515a6ebf40cbaca9c99e8a96d7",
                "patch": "@@ -41,72 +41,73 @@ public PropertyEditorManager() {\n      * @com.intel.drl.spec_ref\r\n      */\r\n     public static void registerEditor(Class targetType, Class editorClass) {\r\n-        if (targetType != null) {\r\n-            SecurityManager sm = System.getSecurityManager();\r\n-            if (sm != null) {\r\n-                sm.checkPropertiesAccess();\r\n-            }\r\n-            if (editorClass != null) {\r\n-                registeredEditors.put(targetType, editorClass);\r\n-            } else {\r\n-                registeredEditors.remove(targetType);\r\n-            }\r\n+        if (targetType == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+        SecurityManager sm = System.getSecurityManager();\r\n+        if (sm != null) {\r\n+            sm.checkPropertiesAccess();\r\n+        }\r\n+        if (editorClass != null) {\r\n+            registeredEditors.put(targetType, editorClass);\r\n+        } else {\r\n+            registeredEditors.remove(targetType);\r\n         }\r\n     }\r\n \r\n     /**\r\n      * @com.intel.drl.spec_ref\r\n      */\r\n     public static synchronized PropertyEditor findEditor(Class targetType) {\r\n+        if (targetType == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n         Class editorClass = null;\r\n         PropertyEditor editor = null;\r\n-        \r\n-        if (targetType != null) {\r\n-            editorClass = (Class) registeredEditors.get(targetType);\r\n-            \r\n-            if (editorClass == null) {\r\n-                String editorClassName = targetType.getName() + \"Editor\";\r\n-                ClassLoader loader = targetType.getClassLoader();\r\n-\r\n-\t\t\t\tif (loader == null) {\r\n-\t\t\t\t\tloader = Thread.currentThread().getContextClassLoader();\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\teditorClass = Class.forName(editorClassName, true, loader);\r\n-                } catch (ClassNotFoundException cnfe) {\r\n-                    String shortEditorClassName = editorClassName.substring(\r\n-                        editorClassName.lastIndexOf(\".\") + 1);\r\n-                    \r\n-                    if(targetType.isPrimitive()) {\r\n-                        shortEditorClassName =\r\n-                            shortEditorClassName.substring(0,1).toUpperCase()\r\n+\r\n+        editorClass = (Class) registeredEditors.get(targetType);\r\n+\r\n+        if (editorClass == null) {\r\n+            String editorClassName = targetType.getName() + \"Editor\";\r\n+            ClassLoader loader = targetType.getClassLoader();\r\n+\r\n+            if (loader == null) {\r\n+                loader = Thread.currentThread().getContextClassLoader();\r\n+            }\r\n+\r\n+            try {\r\n+                editorClass = Class.forName(editorClassName, true, loader);\r\n+            } catch (ClassNotFoundException cnfe) {\r\n+                String shortEditorClassName = editorClassName\r\n+                        .substring(editorClassName.lastIndexOf(\".\") + 1);\r\n+\r\n+                if (targetType.isPrimitive()) {\r\n+                    shortEditorClassName = shortEditorClassName.substring(0, 1)\r\n+                            .toUpperCase()\r\n                             + shortEditorClassName.substring(1);\r\n-                    }\r\n-                    \r\n-                    for (int i = 0; i < path.length; ++i) {\r\n-                        editorClassName = path[i] + \".\" + shortEditorClassName;\r\n-                        \r\n-                        try {\r\n-                            editorClass = Class.forName(editorClassName, true,\r\n-                                    loader);\r\n-                        } catch (ClassNotFoundException cnfe2) {\r\n-                        } catch (Exception e) {\r\n-                            break;\r\n-                        }\r\n-                    }\r\n-                } catch (Exception e) {\r\n                 }\r\n-            }\r\n-                \r\n-            if (editorClass != null) {\r\n-                try {\r\n-                    editor = (PropertyEditor) editorClass.newInstance();\r\n-                } catch (Exception e) {\r\n+\r\n+                for (int i = 0; i < path.length; ++i) {\r\n+                    editorClassName = path[i] + \".\" + shortEditorClassName;\r\n+\r\n+                    try {\r\n+                        editorClass = Class.forName(editorClassName, true,\r\n+                                loader);\r\n+                    } catch (ClassNotFoundException cnfe2) {} catch (Exception e) {\r\n+                        break;\r\n+                    }\r\n                 }\r\n-            }\r\n-            \r\n+            } catch (Exception e) {}\r\n         }\r\n+\r\n+        if (editorClass != null) {\r\n+            try {\r\n+                editor = (PropertyEditor) editorClass.newInstance();\r\n+            } catch (Exception e) {}\r\n+        }\r\n+\r\n         return editor;\r\n     }\r\n \r",
                "deletions": 53
            },
            {
                "sha": "b528e76bca909dd3a36491a7497d8c411e59d5a5",
                "filename": "modules/beans/src/test/java/tests/api/java/beans/PropertyEditorManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/441bda092defd3515a6ebf40cbaca9c99e8a96d7/modules/beans/src/test/java/tests/api/java/beans/PropertyEditorManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/441bda092defd3515a6ebf40cbaca9c99e8a96d7/modules/beans/src/test/java/tests/api/java/beans/PropertyEditorManagerTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/tests/api/java/beans/PropertyEditorManagerTest.java?ref=441bda092defd3515a6ebf40cbaca9c99e8a96d7",
                "patch": "@@ -87,9 +87,10 @@ public void testFindEditor_DefaultType() {\n \t\tPropertyEditor editor = PropertyEditorManager.findEditor(Integer.TYPE);\r\n \t}\r\n \r\n+    //Regression test for HARMONY-258\r\n \tpublic void testFindEditor_TypeNull() {\r\n \t\ttry {\r\n-\t\t\tPropertyEditor editor = PropertyEditorManager.findEditor(null);\r\n+\t\t\tPropertyEditorManager.findEditor(null);\r\n \t\t\tfail(\"Should throw NullPointerException.\");\r\n \t\t} catch (NullPointerException e) {\r\n \t\t\t// expected\r\n@@ -141,6 +142,7 @@ public void testRegisterEditor() {\n \r\n \t/*\r\n \t * registerEditor for type null\r\n+     * Regression test for HARMONY-258\r\n \t */\r\n \tpublic void testRegisterEditorType_Null() {\r\n \t\ttry {\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-227 (PropertyChangeSupport constructor should throw NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@395772 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
        "parent": "https://github.com/apache/harmony-classlib/commit/4613f8811cf23bf6264f6bd5938330460e5faded",
        "bug_id": "harmony-classlib_46",
        "file": [
            {
                "sha": "0d67abed46e3a6f7528f69917b945a86d350e779",
                "filename": "modules/beans/make/common/build.xml",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/make/common/build.xml",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/make/common/build.xml",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/make/common/build.xml?ref=1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
                "patch": "@@ -102,7 +102,6 @@\n                     <exclude name=\"**/BeanContextServicesSupportTest.java\" />\r\n                     <exclude name=\"**/BeanContextSupportTest.java\" />\r\n                     <exclude name=\"**/EventHandlerTest.java\" />\r\n-                    <exclude name=\"**/PropertyChangeSupportTest.java\" />\r\n                     <exclude name=\"**/SimpleBeanInfoTest.java\" />\r\n                     <exclude name=\"**/VetoableChangeSupportTest.java\" />\r\n \r\n@@ -120,6 +119,7 @@\n                     <exclude name=\"tests/api/java/beans/PersistenceDelegateTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyChangeEventTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyChangeListenerProxyTest.java\" />\r\n+                    <exclude name=\"tests/api/java/beans/PropertyChangeSupportTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyDescriptorTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyEditorManagerTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyEditorSupportTest.java\" />\r",
                "deletions": 1
            },
            {
                "sha": "1399050485b18bba1416a9c9f09d50ae19a9d316",
                "filename": "modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java?ref=1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
                "patch": "@@ -52,6 +52,9 @@\n      * @com.intel.drl.spec_ref\n      */\n     public PropertyChangeSupport(Object sourceBean) {\n+        if (sourceBean == null) {\n+            throw new NullPointerException();\n+        }\n         this.sourceBean = sourceBean;\n     }\n \n@@ -255,7 +258,7 @@ private void writeObject(ObjectOutputStream oos) throws IOException {\n         oos.writeObject(children);\n         \n         Object source = null;\n-        if((sourceBean != null) && (sourceBean instanceof Serializable)) {\n+        if(sourceBean instanceof Serializable) {\n             source = sourceBean;\n         }\n         oos.writeObject(source);",
                "deletions": 1
            },
            {
                "sha": "d197abfa905da176b2b0437f3d5a56016514a8c2",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java?ref=1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
                "patch": "@@ -57,7 +57,21 @@ public PropertyChangeSupportTest() {\n     public PropertyChangeSupportTest(String name) {\n         super(name);\n     }\n-    \n+\n+    /**\n+     * @tests java.beans.PropertyChangeSupport#PropertyChangeSupport(\n+     *        java.lang.Object)\n+     */\n+    public void testConstructor_Null() {\n+        try {\n+            // Regression for HARMONY-227\n+            new PropertyChangeSupport(null);\n+            fail(\"Should throw NullPointerException!\");\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+\n     /**\n      * The test checks the serialization for listeners supporting serialization\n      */",
                "deletions": 1
            },
            {
                "sha": "d71dfc2306281a6bbbe78e18754b374f732eae47",
                "filename": "modules/beans/src/test/java/tests/api/java/beans/PropertyChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1ce3f2a55cadc1629c1c53698c1921bf3e5faf51/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeSupportTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeSupportTest.java?ref=1ce3f2a55cadc1629c1c53698c1921bf3e5faf51",
                "patch": "@@ -38,18 +38,6 @@ public void testConstructor_Normal() {\n \t\tnew PropertyChangeSupport(src);\r\n \t}\r\n \r\n-\t/*\r\n-\t * Test the constructor with a null parameter.\r\n-\t */\r\n-\tpublic void testConstructor_Null() {\r\n-\t\ttry {\r\n-\t\t\tnew PropertyChangeSupport(null);\r\n-\t\t\tfail(\"Should throw NullPointerException!\");\r\n-\t\t} catch (NullPointerException ex) {\r\n-\t\t\t// expected\r\n-\t\t}\r\n-\t}\r\n-\r\n \t/*\r\n \t * Test the method addPropertyChangeListener(PropertyeChangeListener) with a\r\n \t * normal listener parameter.\r",
                "deletions": 12
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-373\nbeans: Harmony does not throw NullPointerException in several cases while RI does.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@395159 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f36c88cc92fe3fb9e5af9b6d270209aadcf78456",
        "parent": "https://github.com/apache/harmony-classlib/commit/bcf289218b31a41a6c2a42444260b8556b9f7ac7",
        "bug_id": "harmony-classlib_47",
        "file": [
            {
                "sha": "834730c4829abfa9ae1c5ea1aa813f1e3eaef2c5",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "status": "modified",
                "changes": 19,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java?ref=f36c88cc92fe3fb9e5af9b6d270209aadcf78456",
                "patch": "@@ -503,6 +503,9 @@ public Object getService(BeanContextChild child, Object requestor,\n      * @com.intel.drl.spec_ref\r\n      */\r\n     public synchronized boolean hasService(Class serviceClass) {\r\n+        if (serviceClass == null) {\r\n+            throw new NullPointerException(\"The service class is null\");\r\n+        }\r\n         \r\n         synchronized(BeanContext.globalHierarchyLock) {\r\n             synchronized(this.services) {\r\n@@ -595,10 +598,12 @@ public void releaseService(BeanContextChild child, Object requestor,\n     public void removeBeanContextServicesListener(\r\n             BeanContextServicesListener bcsl) {\r\n         \r\n-        if (bcsl != null) {\r\n-            synchronized(this.bcsListeners) {\r\n-                this.bcsListeners.remove(bcsl);\r\n-            }\r\n+        if (bcsl == null) {\r\n+            throw new NullPointerException(\"The listener is null\");\r\n+        }\r\n+\r\n+        synchronized(this.bcsListeners) {\r\n+            this.bcsListeners.remove(bcsl);\r\n         }\r\n     }\r\n \r\n@@ -649,6 +654,9 @@ public void revokeService(Class serviceClass,\n      * @com.intel.drl.spec_ref\r\n      */\r\n     public void serviceAvailable(BeanContextServiceAvailableEvent bcssae) {\r\n+        if (bcssae == null) {\r\n+            throw new NullPointerException(\"The event is null\");\r\n+        }\r\n         \r\n         for (Iterator it = this.bcsListeners.iterator(); it.hasNext(); ) {\r\n             BeanContextServicesListener l = \r\n@@ -662,6 +670,9 @@ public void serviceAvailable(BeanContextServiceAvailableEvent bcssae) {\n      * @com.intel.drl.spec_ref\r\n      */\r\n     public void serviceRevoked(BeanContextServiceRevokedEvent bcssre) {\r\n+        if (bcssre == null) {\r\n+            throw new NullPointerException(\"The event is null\");\r\n+        }\r\n         \r\n         for (Iterator it = this.bcsListeners.iterator(); it.hasNext(); ) {\r\n             BeanContextServicesListener l = \r",
                "deletions": 4
            },
            {
                "sha": "d398b649f6a7c752e778df01f4e56586a33d7e50",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "status": "modified",
                "changes": 17,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java?ref=f36c88cc92fe3fb9e5af9b6d270209aadcf78456",
                "patch": "@@ -777,7 +777,12 @@ public URL getResource(String name, BeanContextChild bcc) {\n         \r\n         // The resource name should not be null\r\n         if(name == null) {\r\n-            throw new IllegalArgumentException(\"Resource name can not be null\");\r\n+            throw new NullPointerException(\"Resource name can not be null\");\r\n+        }\r\n+        \r\n+        // The child should not be null\r\n+        if(bcc == null) {\r\n+            throw new NullPointerException(\"The child can not be null\");\r\n         }\r\n         \r\n         // Load resource using the same ClassLoader as BeanContextChild specified\r\n@@ -802,7 +807,12 @@ public InputStream getResourceAsStream(String name, BeanContextChild bcc) {\n         \r\n         // The resource name should not be null\r\n         if(name == null) {\r\n-            throw new IllegalArgumentException(\"Resource name can not be null\");\r\n+            throw new NullPointerException(\"Resource name can not be null\");\r\n+        }\r\n+        \r\n+        // The child should not be null\r\n+        if(bcc == null) {\r\n+            throw new NullPointerException(\"The child can not be null\");\r\n         }\r\n         \r\n         // Load resource using the same ClassLoader as BeanContextChild specified\r\n@@ -1290,6 +1300,9 @@ protected boolean validatePendingRemove(Object targetChild) {\n     public void vetoableChange(PropertyChangeEvent pce) \r\n             throws PropertyVetoException {\r\n                 \r\n+        if (pce == null) {\r\n+            throw new NullPointerException(\"The event is null\");\r\n+        }\r\n         \r\n     }\r\n     \r",
                "deletions": 2
            },
            {
                "sha": "388528770e962f094c72b07a679994546ba71c06",
                "filename": "modules/beans/src/test/java/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/test/java/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/test/java/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "status": "modified",
                "changes": 706,
                "additions": 377,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/java/beans/beancontext/BeanContextServicesSupportTest.java?ref=f36c88cc92fe3fb9e5af9b6d270209aadcf78456",
                "patch": "@@ -1,330 +1,378 @@\n-/*\n- *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-/**\n- * @author Sergey A. Krivenko\n- * @version $Revision: 1.5.2.2 $\n- */\n-package java.beans.beancontext;\n-\n-import java.beans.beancontext.BeanContextServices;\n-import java.beans.beancontext.BeanContextServicesSupport;\n-import java.beans.beancontext.BeanContextServiceProvider;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-/**\n- * Test class for java.beans.beancontext.BeanContextServicesSupport.<p>\n- *\n- * @author Sergey A. Krivenko\n- * @version $Revision: 1.5.2.2 $\n- */\n-\n-public class BeanContextServicesSupportTest extends TestCase {\n-\n-    /** STANDARD BEGINNING **/\n-\n-    /**\n-     * No arguments constructor to enable serialization.<p>\n-     */\n-    public BeanContextServicesSupportTest() {\n-        super();\n-    }\n-\n-    /**\n-     * Constructs this test case with the given name.<p>\n-     *\n-     * @param name - The name for this test case.<p>\n-     */\n-    public BeanContextServicesSupportTest(String name) {\n-        super(name);\n-    }\n-\n-    /** TEST CONSTRUCTORS **/\n-\n-    /** \n-     * Test constructor with BeanContextServices, Locale, boolean, \n-     * boolean parameters.<p>\n-     *\n-     * @see BeanContextServicesSupport#BeanContextServicesSupport(\n-     * BeanContextServices, Locale, boolean, boolean)\n-     */\n-    public void testConstructorBeanContextServicesLocalebooleanboolean() {\n-        try {\n-            BeanContextServicesSupport sup = \n-                new BeanContextServicesSupport(null, null, true, true);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** \n-     * Test constructor with BeanContextServices, Locale, boolean parameters\n-     *\n-     * @see BeanContextServicesSupport#BeanContextServicesSupport(\n-     * BeanContextServices, Locale, boolean)\n-     */\n-    public void testConstructorBeanContextServicesLocaleboolean() {\n-        try {\n-            BeanContextServicesSupport sup = \n-                new BeanContextServicesSupport(null, null, true);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** \n-     * Test constructor with BeanContextServices, Locale parameters.<p>\n-     *\n-     * @see BeanContextServicesSupport#BeanContextServicesSupport(\n-     * BeanContextServices, Locale)\n-     */\n-    public void testConstructorBeanContextServicesLocale() {\n-        try {\n-            BeanContextServicesSupport sup = \n-                new BeanContextServicesSupport(null, null);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** \n-     * Test constructor with BeanContextServices parameter.<p>\n-     *\n-     * @see BeanContextServicesSupport#BeanContextServicesSupport(\n-     * BeanContextServices)\n-     */\n-    public void testConstructorBeanContextServices() {\n-        try {\n-            BeanContextServicesSupport sup = \n-                new BeanContextServicesSupport(null);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** * Test constructor with no parameters.<p>\n-     *\n-     * @see BeanContextServicesSupport#BeanContextServicesSupport()\n-     */\n-    public void testConstructor() {\n-        try {\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** TEST METHODS **/\n-\n-    /**\n-     * Test method createBCSChild() with Object, Object parameters.<p>\n-     */\n-    public void testCreateBCSChildObjectObject() {\n-        try {\n-            \n-            // Just call the method\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            sup.createBCSChild(new Object(), new Object());\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method addService() with Class, BeanContextServiceProvider, boolean parameters.<p>\n-     */\n-    public void testAddServiceClassBeanContextServiceProviderboolean() {\n-        try {\n-            \n-            // Instantiate services and add service\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            sup.addService(Object.class, getProvider(), true);\n-            \n-            if (sup.services.size() != 1) {\n-                fail(\"One service should be registered\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method revokeService() with Class, BeanContextServiceProvider, boolean parameters.<p>\n-     */\n-    public void testRevokeServiceClassBeanContextServiceProviderboolean() {\n-        try {\n-            \n-            // Instantiate services, add and remove service\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            BeanContextServiceProvider pr = getProvider();\n-            sup.addService(Object.class, pr, true);\n-            sup.revokeService(Object.class, pr, true);\n-            \n-            if (sup.services.size() != 0) {\n-                fail(\"No service should be registered\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method addService() with Class, BeanContextServiceProvider parameters.<p>\n-     */\n-    public void testAddServiceClassBeanContextServiceProvider() {\n-        try {\n-            \n-            // Instantiate services and add service\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            sup.addService(Object.class, getProvider());\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method hasService() with Class parameter.<p>\n-     */\n-    public void testHasServiceClass() {\n-        try {\n-            \n-            // Instantiate services and add service\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            Class cl = new Object().getClass();\n-            sup.addService(cl, getProvider(), true);\n-            \n-            if (!sup.hasService(cl)) {\n-                fail(\"Service not found\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method getBeanContextServicesPeer() with no parameters.<p>\n-     */\n-    public void testGetBeanContextServicesPeer() {\n-        try {\n-            \n-            // Instantiate services\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            \n-            if (!sup.getBeanContextServicesPeer().equals(sup)) {\n-                fail(\"The objects are not equal\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method releaseBeanContextResources() with no parameters.<p>\n-     */\n-    public void testReleaseBeanContextResources() {\n-        try {\n-            \n-            // Instantiate services\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            sup.releaseBeanContextResources();\n-            \n-            if (sup.proxy != null) {\n-                fail(\"The resources are not released\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method initializeBeanContextResources() with no parameters.<p>\n-     */\n-    public void testInitializeBeanContextResources() {\n-        try {\n-            \n-            // Instantiate services\n-            BeanContextServicesSupport sup = new BeanContextServicesSupport();\n-            sup.initializeBeanContextResources();\n-            \n-            //if (sup.proxy == null) {\n-                //fail(\"The resources are not initialized\");\n-            //}\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** UTILITY METHODS **/\n-    \n-    /**\n-     * Fake implementation of provider\n-     */\n-    private BeanContextServiceProvider getProvider() {\n-    \n-        return new BeanContextServiceProvider() {\n-\n-            public java.util.Iterator getCurrentServiceSelectors(BeanContextServices bcs, \n-                    Class serviceClass) {\n-                        \n-                return bcs.getCurrentServiceSelectors(serviceClass);\n-            }\n-            \n-            public Object getService(BeanContextServices bcs, Object requestor,\n-                    Class serviceClass, Object serviceSelector) {                            \n-                \n-                return null;\n-            }\n-            \n-            public void releaseService(BeanContextServices bcs, Object requestor, \n-                    Object service) {\n-            }\n-        };\n-    }\n-\n-    /** STANDARD ENDING **/\n-\n-    /**\n-     * Start testing from the command line.<p>\n-     */\n-    public static Test suite() {\n-        return new TestSuite(BeanContextServicesSupportTest.class);\n-    }\n-\n-    /**\n-     * Start testing from the command line.<p>\n-     *\n-     * @param args - Command line parameters.<p>\n-     */\n-    public static void main(String args[]) {\n-        junit.textui.TestRunner.run(suite());\n-    }\n+/*\r\n+ *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\r\n+ *\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+\r\n+/**\r\n+ * @author Sergey A. Krivenko\r\n+ * @version $Revision: 1.5.2.2 $\r\n+ */\r\n+package java.beans.beancontext;\r\n+\r\n+import java.beans.beancontext.BeanContextServices;\r\n+import java.beans.beancontext.BeanContextServicesSupport;\r\n+import java.beans.beancontext.BeanContextServiceProvider;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestSuite;\r\n+\r\n+/**\r\n+ * Test class for java.beans.beancontext.BeanContextServicesSupport.<p>\r\n+ *\r\n+ * @author Sergey A. Krivenko\r\n+ * @version $Revision: 1.5.2.2 $\r\n+ */\r\n+\r\n+public class BeanContextServicesSupportTest extends TestCase {\r\n+\r\n+    /** STANDARD BEGINNING **/\r\n+\r\n+    /**\r\n+     * No arguments constructor to enable serialization.<p>\r\n+     */\r\n+    public BeanContextServicesSupportTest() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs this test case with the given name.<p>\r\n+     *\r\n+     * @param name - The name for this test case.<p>\r\n+     */\r\n+    public BeanContextServicesSupportTest(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /** TEST CONSTRUCTORS **/\r\n+\r\n+    /** \r\n+     * Test constructor with BeanContextServices, Locale, boolean, \r\n+     * boolean parameters.<p>\r\n+     *\r\n+     * @see BeanContextServicesSupport#BeanContextServicesSupport(\r\n+     * BeanContextServices, Locale, boolean, boolean)\r\n+     */\r\n+    public void testConstructorBeanContextServicesLocalebooleanboolean() {\r\n+        try {\r\n+            BeanContextServicesSupport sup = \r\n+                new BeanContextServicesSupport(null, null, true, true);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** \r\n+     * Test constructor with BeanContextServices, Locale, boolean parameters\r\n+     *\r\n+     * @see BeanContextServicesSupport#BeanContextServicesSupport(\r\n+     * BeanContextServices, Locale, boolean)\r\n+     */\r\n+    public void testConstructorBeanContextServicesLocaleboolean() {\r\n+        try {\r\n+            BeanContextServicesSupport sup = \r\n+                new BeanContextServicesSupport(null, null, true);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** \r\n+     * Test constructor with BeanContextServices, Locale parameters.<p>\r\n+     *\r\n+     * @see BeanContextServicesSupport#BeanContextServicesSupport(\r\n+     * BeanContextServices, Locale)\r\n+     */\r\n+    public void testConstructorBeanContextServicesLocale() {\r\n+        try {\r\n+            BeanContextServicesSupport sup = \r\n+                new BeanContextServicesSupport(null, null);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** \r\n+     * Test constructor with BeanContextServices parameter.<p>\r\n+     *\r\n+     * @see BeanContextServicesSupport#BeanContextServicesSupport(\r\n+     * BeanContextServices)\r\n+     */\r\n+    public void testConstructorBeanContextServices() {\r\n+        try {\r\n+            BeanContextServicesSupport sup = \r\n+                new BeanContextServicesSupport(null);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** * Test constructor with no parameters.<p>\r\n+     *\r\n+     * @see BeanContextServicesSupport#BeanContextServicesSupport()\r\n+     */\r\n+    public void testConstructor() {\r\n+        try {\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** TEST METHODS **/\r\n+\r\n+    /**\r\n+     * Test method createBCSChild() with Object, Object parameters.<p>\r\n+     */\r\n+    public void testCreateBCSChildObjectObject() {\r\n+        try {\r\n+            \r\n+            // Just call the method\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            sup.createBCSChild(new Object(), new Object());\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method addService() with Class, BeanContextServiceProvider, boolean parameters.<p>\r\n+     */\r\n+    public void testAddServiceClassBeanContextServiceProviderboolean() {\r\n+        try {\r\n+            \r\n+            // Instantiate services and add service\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            sup.addService(Object.class, getProvider(), true);\r\n+            \r\n+            if (sup.services.size() != 1) {\r\n+                fail(\"One service should be registered\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method revokeService() with Class, BeanContextServiceProvider, boolean parameters.<p>\r\n+     */\r\n+    public void testRevokeServiceClassBeanContextServiceProviderboolean() {\r\n+        try {\r\n+            \r\n+            // Instantiate services, add and remove service\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            BeanContextServiceProvider pr = getProvider();\r\n+            sup.addService(Object.class, pr, true);\r\n+            sup.revokeService(Object.class, pr, true);\r\n+            \r\n+            if (sup.services.size() != 0) {\r\n+                fail(\"No service should be registered\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method addService() with Class, BeanContextServiceProvider parameters.<p>\r\n+     */\r\n+    public void testAddServiceClassBeanContextServiceProvider() {\r\n+        try {\r\n+            \r\n+            // Instantiate services and add service\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            sup.addService(Object.class, getProvider());\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method hasService() with Class parameter.<p>\r\n+     */\r\n+    public void testHasServiceClass() {\r\n+        try {\r\n+            \r\n+            // Instantiate services and add service\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            Class cl = new Object().getClass();\r\n+            sup.addService(cl, getProvider(), true);\r\n+            \r\n+            if (!sup.hasService(cl)) {\r\n+                fail(\"Service not found\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getBeanContextServicesPeer() with no parameters.<p>\r\n+     */\r\n+    public void testGetBeanContextServicesPeer() {\r\n+        try {\r\n+            \r\n+            // Instantiate services\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            \r\n+            if (!sup.getBeanContextServicesPeer().equals(sup)) {\r\n+                fail(\"The objects are not equal\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method releaseBeanContextResources() with no parameters.<p>\r\n+     */\r\n+    public void testReleaseBeanContextResources() {\r\n+        try {\r\n+            \r\n+            // Instantiate services\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            sup.releaseBeanContextResources();\r\n+            \r\n+            if (sup.proxy != null) {\r\n+                fail(\"The resources are not released\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method initializeBeanContextResources() with no parameters.<p>\r\n+     */\r\n+    public void testInitializeBeanContextResources() {\r\n+        try {\r\n+            \r\n+            // Instantiate services\r\n+            BeanContextServicesSupport sup = new BeanContextServicesSupport();\r\n+            sup.initializeBeanContextResources();\r\n+            \r\n+            //if (sup.proxy == null) {\r\n+                //fail(\"The resources are not initialized\");\r\n+            //}\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method hasService() with Class=null parameter.<p>\r\n+     */\r\n+    public void test_hasServiceLjava_lang_Class() {\r\n+        BeanContextServicesSupport obj = new BeanContextServicesSupport();\r\n+        try {\r\n+            obj.hasService(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method removeBeanContextServicesListener() with BeanContextServicesListener=null parameter.<p>\r\n+     */\r\n+    public void test_removeBeanContextServicesListenerLjava_beans_beancontext_BeanContextServicesListener() {\r\n+        BeanContextServicesSupport obj = new BeanContextServicesSupport();\r\n+        try {\r\n+            obj.removeBeanContextServicesListener(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method serviceAvailable() with BeanContextServiceAvailableEvent=null parameter.<p>\r\n+     */\r\n+    public void test_serviceAvailableLjava_beans_beancontext_BeanContextServiceAvailableEvent() {\r\n+        BeanContextServicesSupport obj = new BeanContextServicesSupport();\r\n+        try {\r\n+            obj.serviceAvailable(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method serviceRevoked() with BeanContextServiceRevokedEvent=null parameter.<p>\r\n+     */\r\n+    public void test_serviceRevokedLjava_beans_beancontext_BeanContextServiceRevokedEvent() {\r\n+        BeanContextServicesSupport obj = new BeanContextServicesSupport();\r\n+        try {\r\n+            obj.serviceRevoked(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /** UTILITY METHODS **/\r\n+    \r\n+    /**\r\n+     * Fake implementation of provider\r\n+     */\r\n+    private BeanContextServiceProvider getProvider() {\r\n+    \r\n+        return new BeanContextServiceProvider() {\r\n+\r\n+            public java.util.Iterator getCurrentServiceSelectors(BeanContextServices bcs, \r\n+                    Class serviceClass) {\r\n+                        \r\n+                return bcs.getCurrentServiceSelectors(serviceClass);\r\n+            }\r\n+            \r\n+            public Object getService(BeanContextServices bcs, Object requestor,\r\n+                    Class serviceClass, Object serviceSelector) {                            \r\n+                \r\n+                return null;\r\n+            }\r\n+            \r\n+            public void releaseService(BeanContextServices bcs, Object requestor, \r\n+                    Object service) {\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /** STANDARD ENDING **/\r\n+\r\n+    /**\r\n+     * Start testing from the command line.<p>\r\n+     */\r\n+    public static Test suite() {\r\n+        return new TestSuite(BeanContextServicesSupportTest.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Start testing from the command line.<p>\r\n+     *\r\n+     * @param args - Command line parameters.<p>\r\n+     */\r\n+    public static void main(String args[]) {\r\n+        junit.textui.TestRunner.run(suite());\r\n+    }\r\n }\n\\ No newline at end of file",
                "deletions": 329
            },
            {
                "sha": "73d2501ec43f60f2af3f03f792fc3de4e2fea7d8",
                "filename": "modules/beans/src/test/java/java/beans/beancontext/BeanContextSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/test/java/java/beans/beancontext/BeanContextSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f36c88cc92fe3fb9e5af9b6d270209aadcf78456/modules/beans/src/test/java/java/beans/beancontext/BeanContextSupportTest.java",
                "status": "modified",
                "changes": 1477,
                "additions": 772,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/java/beans/beancontext/BeanContextSupportTest.java?ref=f36c88cc92fe3fb9e5af9b6d270209aadcf78456",
                "patch": "@@ -1,706 +1,773 @@\n-/*\n- *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-/**\n- * @author Sergey A. Krivenko\n- * @version $Revision: 1.4.4.2 $\n- */\n-package java.beans.beancontext;\n-\n-import java.beans.beancontext.BeanContextSupport;\n-import java.beans.beancontext.BeanContextMembershipEvent;\n-import java.beans.beancontext.BeanContextMembershipListener;\n-\n-import junit.framework.Test;\n-import junit.framework.TestCase;\n-import junit.framework.TestSuite;\n-\n-/**\n- * Test class for java.beans.beancontext.BeanContextSupport.<p>\n- *\n- * @author Sergey A. Krivenko\n- * @version $Revision: 1.4.4.2 $\n- */\n-\n-public class BeanContextSupportTest extends TestCase {\n-\n-    /** STANDARD BEGINNING **/\n-\n-    /**\n-     * No arguments constructor to enable serialization.<p>\n-     */\n-    public BeanContextSupportTest() {\n-        super();\n-    }\n-\n-    /**\n-     * Constructs this test case with the given name.<p>\n-     *\n-     * @param name - The name for this test case.<p>\n-     */\n-    public BeanContextSupportTest(String name) {\n-        super(name);\n-    }\n-\n-    /** TEST CONSTRUCTORS **/\n-\n-    /** * Test constructor with BeanContext, Locale, boolean, boolean parameters.<p>\n-     *\n-     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale, boolean, boolean)\n-     */\n-    public void testConstructorBeanContextLocalebooleanboolean() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport(null, null, true, true);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** * Test constructor with BeanContext, Locale, boolean parameters.<p>\n-     *\n-     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale, boolean)\n-     */\n-    public void testConstructorBeanContextLocaleboolean() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport(null, null, true);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** * Test constructor with BeanContext, Locale parameters.<p>\n-     *\n-     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale)\n-     */\n-    public void testConstructorBeanContextLocale() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport(null, null);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** * Test constructor with BeanContext parameter.<p>\n-     *\n-     * @see BeanContextSupport#BeanContextSupport(BeanContext)\n-     */\n-    public void testConstructorBeanContext() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport(null);\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** * Test constructor with no parameters.<p>\n-     *\n-     * @see BeanContextSupport#BeanContextSupport()\n-     */\n-    public void testConstructor() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport();\n-        }\n-        catch (Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** TEST METHODS **/\n-\n-    /**\n-     * Test method createBCSChild() with Object, Object parameters.<p>\n-     */\n-    public void testCreateBCSChildObjectObject() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.createBCSChild(new BeanContextSupport(), new BeanContextSupport());\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method setLocale() with Locale parameter.<p>\n-     */\n-    public void testSetLocaleLocale() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.setLocale(null);\n-            \n-            if (!sup.getLocale().equals(java.util.Locale.getDefault())) {\n-                fail(\"BeanContext should have default locale\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method bcsChildren() with no parameters.<p>\n-     */\n-    public void testBcsChildren() {\n-        try {\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.add(new BeanContextChildSupport());\n-            \n-            for (java.util.Iterator it = sup.bcsChildren(); it.hasNext(); ) {\n-                Object next = it.next();\n-                \n-                if (!(next instanceof BeanContextSupport.BCSChild)) {\n-                    fail(\"Children must be instances of \" +\n-                         \"BeanContextSupport.BCSChild class \" +\n-                         \"but at least one of them: \" + next.getClass());\n-                }\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method retainAll() with Collection parameter.<p>\n-     */\n-    public void testRetainAllCollection() {\n-        try {\n-            \n-            /*// Create an instance and add one child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            // Create collection with an instance of the child that was added\n-            java.util.Collection col = new java.util.ArrayList();\n-            col.add(ch);            \n-            \n-            // Remove all children that are not in the collection\n-            // The collection must remain unchanged\n-            if (sup.retainAll(col)) {\n-                fail(\"False should be returned\");\n-            }\n-            \n-            // Just one child must be present\n-            if (sup.size() != 1) {\n-                fail(\"The size of the collection must be 1\");\n-            }\n-            \n-            // Add a new child in the collection and remove the old one\n-            col.clear();\n-            col.add(new Object());\n-            \n-            // Remove all children that are not in the collection\n-            // The collection must have 0 elements after that\n-            if (!sup.retainAll(col)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            // No children must be present\n-            if (sup.size() != 0) {\n-                fail(\"The size of the collection must be 0\");\n-            }*/\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method removeAll() with Collection parameter.<p>\n-     */\n-    public void testRemoveAllCollection() {\n-        try {\n-            \n-            /*// Create an instance and add one child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            // Create collection with an instance of an arbitrary child\n-            java.util.Collection col = new java.util.ArrayList();\n-            col.add(new Object());    \n-            \n-            // Remove all children that are in the collection\n-            // The collection should not change after that\n-            if (sup.removeAll(col)) {\n-                fail(\"False should be returned\");\n-            }\n-            \n-            // Add a child that is a member of the BeanContext\n-            col.add(ch); \n-            \n-            // Remove all children that are in the collection\n-            // The collection should change after that\n-            if (!sup.removeAll(col)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            // No children must be present\n-            if (sup.size() != 0) {\n-                fail(\"The size of the collection must be 0 but is \" + sup.size());\n-            }*/\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method containsAll() with Collection parameter.<p>\n-     */\n-    public void testContainsAllCollection() {\n-        try {\n-            \n-            /*// Create an instance and add two children\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            Object obj = new Object();\n-            sup.add(ch);\n-            sup.add(obj);\n-            \n-            // Create collection with BCS children that just were added\n-            java.util.Collection col = new java.util.ArrayList();\n-            \n-            for (java.util.Iterator it = sup.bcsChildren(); it.hasNext(); ) {\n-                col.add(it.next());\n-            }\n-            \n-            // Two collections have the same elements\n-            if (!sup.containsAll(col)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            sup.remove(obj);\n-            \n-            // Now they are different\n-            if (sup.containsAll(col)) {\n-                fail(\"False should be returned\");\n-            }*/\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method addAll() with Collection parameter.<p>\n-     */\n-    public void testAddAllCollection() {\n-        try {\n-            \n-            /*// Create an instance and add two children\n-            BeanContextSupport sup = new BeanContextSupport();\n-                     \n-            // Create collection with two elements\n-            java.util.Collection col = new java.util.ArrayList();\n-            col.add(new BeanContextChildSupport());\n-            col.add(new Object());\n-            \n-            // Place two children into the BeanContext\n-            if (!sup.addAll(col)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            // Two children must be present\n-            if (sup.size() != 2) {\n-                fail(\"The size of the collection must be 2 but is \" + sup.size());\n-            }*/\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method remove() with Object, boolean parameters.<p>\n-     */\n-    public void testRemoveObjectboolean() {\n-        try {\n-            \n-            // Create an instance and add one child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            // Remove unexisting child\n-            if (sup.remove(new Object(), true)) {\n-                fail(\"False should be returned\");\n-            }\n-            \n-            // Remove it\n-            if (!sup.remove(ch, true)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            // No children must be present\n-            if (sup.size() != 0) {\n-                fail(\"The size of the collection must be 0 but is \" + sup.size());\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method remove() with Object parameter.<p>\n-     */\n-    public void testRemoveObject() {\n-        try {\n-            \n-            // Create an instance and add one child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            // Remove unexisting child\n-            if (sup.remove(new Object())) {\n-                fail(\"False should be returned\");\n-            }\n-            \n-            // Remove it\n-            if (!sup.remove(ch)) {\n-                fail(\"True should be returned\");\n-            }\n-            \n-            // No children must be present\n-            if (sup.size() != 0) {\n-                fail(\"The size of the collection must be 0 but is \" + sup.size());\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method containsKey() with Object parameter.<p>\n-     */\n-    public void testContainsKeyObject() {\n-        try {\n-            \n-            // Create an instance and add a child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            // We should find the child now\n-            if (!sup.containsKey(ch)) {\n-                fail(\"True should be returned\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method contains() with Object parameter.<p>\n-     */\n-    public void testContainsObject() {\n-        try {\n-            \n-            // Create an instance and add a child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextChildSupport ch = new BeanContextChildSupport();\n-            sup.add(ch);\n-            \n-            BeanContextSupport.BCSChild bcs = \n-                (BeanContextSupport.BCSChild) sup.bcsChildren().next();\n-            \n-            // We should find the child now\n-            if (!sup.contains(bcs)) {\n-                // fail(\"True should be returned\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method add() with Object parameter.<p>\n-     */\n-    public void testAddObject() {\n-        try {\n-            \n-            // Create an instance and add a child\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.add(new Object());\n-            \n-            // Just one child must be present\n-            if (sup.size() != 1) {\n-                fail(\"The size of the collection must be 1 but is \" + sup.size());\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method toArray() with no parameters.<p>\n-     */\n-    public void testToArray() {\n-        try {\n-            \n-            // Create an instance and add two children\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.add(\"obj1\");\n-            sup.add(\"obj2\");\n-            \n-            // Convert to array\n-            Object[] array = sup.toArray();\n-            \n-            // Check length\n-            if (array.length != 2) {\n-                fail(\"The size of the collection must be 2 but is \" + array.length);\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method copyChildren() with no parameters.<p>\n-     */\n-    public void testCopyChildren() {\n-        try {\n-            \n-            // Create an instance and add two children\n-            BeanContextSupport sup = new BeanContextSupport();\n-            sup.add(\"obj1\");\n-            sup.add(\"obj2\");\n-            \n-            // Convert to array\n-            Object[] array = sup.copyChildren();\n-            \n-            // Check length\n-            if (array.length != 2) {\n-                fail(\"The size of the collection must be 2 but is \" + array.length);\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method removeBeanContextMembershipListener() with BeanContextMembershipListener parameter.<p>\n-     */\n-    public void testRemoveBeanContextMembershipListenerBeanContextMembershipListener() {\n-        try {\n-            \n-            // Create BeanContext and BeanContextMembershipListener instances\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextMembershipListener l = getBeanContextMembershipListener();\n-            sup.addBeanContextMembershipListener(l);\n-            sup.removeBeanContextMembershipListener(l);\n-            \n-            // Check if it's there\n-            if (sup.bcmListeners.contains(l)) {\n-                fail(\"Listener should not be present\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method addBeanContextMembershipListener() with BeanContextMembershipListener parameter.<p>\n-     */\n-    public void testAddBeanContextMembershipListenerBeanContextMembershipListener() {\n-        try {\n-            \n-            // Create BeanContext and BeanContextMembershipListener instances\n-            BeanContextSupport sup = new BeanContextSupport();\n-            BeanContextMembershipListener l = getBeanContextMembershipListener();\n-            sup.addBeanContextMembershipListener(l);\n-            \n-            // Check if it's there\n-            if (!sup.bcmListeners.contains(l)) {\n-                fail(\"Listener should be present\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method getBeanContextPeer() with no parameters.<p>\n-     */\n-    public void testGetBeanContextPeer() {\n-        try {\n-            \n-            // Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            \n-            // The peer and this context should be equal\n-            if (!sup.getBeanContextPeer().equals(sup)) {\n-                fail(\"The peer and the BeanContext should be equal\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method vetoableChange() with PropertyChangeEvent parameter.<p>\n-     */\n-    public void testVetoableChangePropertyChangeEvent() {\n-        try {\n-            \n-            /** @todo: not implemented yet in the class **/\n-            // Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            //sup.vetoableChange(null);\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method propertyChange() with PropertyChangeEvent parameter.<p>\n-     */\n-    public void testPropertyChangePropertyChangeEvent() {\n-        try {\n-            \n-            /** @todo: not implemented yet in the class **/\n-            // Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            //sup.propertyChange(null);\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method isEmpty() with no parameters.<p>\n-     */\n-    public void testIsEmpty() {\n-        try {\n-            \n-            // Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            \n-            if (!sup.isEmpty()) {\n-                fail(\"The collection of children should be empty\");\n-            } \n-            \n-            sup.add(new Object());\n-            \n-            if (sup.isEmpty()) {\n-                fail(\"The collection of children should not be empty\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method clear() with no parameters.<p>\n-     */\n-    public void testClear() {\n-        try {\n-            \n-            /*// Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            \n-            // Add a child and then clear\n-            sup.add(new Object());\n-            sup.clear();\n-            \n-            if (!sup.isEmpty()) {\n-                fail(\"The collection of children should be empty\");\n-            }*/\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /**\n-     * Test method size() with no parameters.<p>\n-     */\n-    public void testSize() {\n-        try {\n-            \n-            // Create BeanContext instance\n-            BeanContextSupport sup = new BeanContextSupport();\n-            \n-            if (sup.size() != 0) {\n-                fail(\"The size of the collection should be equal to 0\");\n-            }\n-            \n-            sup.add(new Object());\n-            \n-            if (sup.size() != 1) {\n-                fail(\"The size of the collection should be equal to 1\");\n-            }\n-        }\n-        catch(Exception e) {\n-            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\n-        }\n-    }\n-\n-    /** UTILITY METHODS **/\n-    \n-    /**\n-     * Create BeanContextMembershipListener instance\n-     */\n-    private BeanContextMembershipListener getBeanContextMembershipListener() {\n-        return new BeanContextMembershipListener() {\n-                    \n-            public void childrenAdded(BeanContextMembershipEvent bcme) {\n-                ;\n-            }\n-            \n-            public void childrenRemoved(BeanContextMembershipEvent bcme) {\n-                ;\n-            }\n-        };\n-    }\n-\n-    /** STANDARD ENDING **/\n-\n-    /**\n-     * Start testing from the command line.<p>\n-     */\n-    public static Test suite() {\n-        return new TestSuite(BeanContextSupportTest.class);\n-    }\n-\n-    /**\n-     * Start testing from the command line.<p>\n-     *\n-     * @param args - Command line parameters.<p>\n-     */\n-    public static void main(String args[]) {\n-        junit.textui.TestRunner.run(suite());\n-    }\n+/*\r\n+ *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\r\n+ *\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+\r\n+/**\r\n+ * @author Sergey A. Krivenko\r\n+ * @version $Revision: 1.4.4.2 $\r\n+ */\r\n+package java.beans.beancontext;\r\n+\r\n+import java.beans.beancontext.BeanContextSupport;\r\n+import java.beans.beancontext.BeanContextMembershipEvent;\r\n+import java.beans.beancontext.BeanContextMembershipListener;\r\n+import java.beans.PropertyVetoException;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestSuite;\r\n+\r\n+/**\r\n+ * Test class for java.beans.beancontext.BeanContextSupport.<p>\r\n+ *\r\n+ * @author Sergey A. Krivenko\r\n+ * @version $Revision: 1.4.4.2 $\r\n+ */\r\n+\r\n+public class BeanContextSupportTest extends TestCase {\r\n+\r\n+    /** STANDARD BEGINNING **/\r\n+\r\n+    /**\r\n+     * No arguments constructor to enable serialization.<p>\r\n+     */\r\n+    public BeanContextSupportTest() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs this test case with the given name.<p>\r\n+     *\r\n+     * @param name - The name for this test case.<p>\r\n+     */\r\n+    public BeanContextSupportTest(String name) {\r\n+        super(name);\r\n+    }\r\n+\r\n+    /** TEST CONSTRUCTORS **/\r\n+\r\n+    /** * Test constructor with BeanContext, Locale, boolean, boolean parameters.<p>\r\n+     *\r\n+     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale, boolean, boolean)\r\n+     */\r\n+    public void testConstructorBeanContextLocalebooleanboolean() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport(null, null, true, true);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** * Test constructor with BeanContext, Locale, boolean parameters.<p>\r\n+     *\r\n+     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale, boolean)\r\n+     */\r\n+    public void testConstructorBeanContextLocaleboolean() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport(null, null, true);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** * Test constructor with BeanContext, Locale parameters.<p>\r\n+     *\r\n+     * @see BeanContextSupport#BeanContextSupport(BeanContext, Locale)\r\n+     */\r\n+    public void testConstructorBeanContextLocale() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport(null, null);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** * Test constructor with BeanContext parameter.<p>\r\n+     *\r\n+     * @see BeanContextSupport#BeanContextSupport(BeanContext)\r\n+     */\r\n+    public void testConstructorBeanContext() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport(null);\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** * Test constructor with no parameters.<p>\r\n+     *\r\n+     * @see BeanContextSupport#BeanContextSupport()\r\n+     */\r\n+    public void testConstructor() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+        }\r\n+        catch (Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /** TEST METHODS **/\r\n+\r\n+    /**\r\n+     * Test method createBCSChild() with Object, Object parameters.<p>\r\n+     */\r\n+    public void testCreateBCSChildObjectObject() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.createBCSChild(new BeanContextSupport(), new BeanContextSupport());\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method setLocale() with Locale parameter.<p>\r\n+     */\r\n+    public void testSetLocaleLocale() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.setLocale(null);\r\n+            \r\n+            if (!sup.getLocale().equals(java.util.Locale.getDefault())) {\r\n+                fail(\"BeanContext should have default locale\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method bcsChildren() with no parameters.<p>\r\n+     */\r\n+    public void testBcsChildren() {\r\n+        try {\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.add(new BeanContextChildSupport());\r\n+            \r\n+            for (java.util.Iterator it = sup.bcsChildren(); it.hasNext(); ) {\r\n+                Object next = it.next();\r\n+                \r\n+                if (!(next instanceof BeanContextSupport.BCSChild)) {\r\n+                    fail(\"Children must be instances of \" +\r\n+                         \"BeanContextSupport.BCSChild class \" +\r\n+                         \"but at least one of them: \" + next.getClass());\r\n+                }\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method retainAll() with Collection parameter.<p>\r\n+     */\r\n+    public void testRetainAllCollection() {\r\n+        try {\r\n+            \r\n+            /*// Create an instance and add one child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            // Create collection with an instance of the child that was added\r\n+            java.util.Collection col = new java.util.ArrayList();\r\n+            col.add(ch);            \r\n+            \r\n+            // Remove all children that are not in the collection\r\n+            // The collection must remain unchanged\r\n+            if (sup.retainAll(col)) {\r\n+                fail(\"False should be returned\");\r\n+            }\r\n+            \r\n+            // Just one child must be present\r\n+            if (sup.size() != 1) {\r\n+                fail(\"The size of the collection must be 1\");\r\n+            }\r\n+            \r\n+            // Add a new child in the collection and remove the old one\r\n+            col.clear();\r\n+            col.add(new Object());\r\n+            \r\n+            // Remove all children that are not in the collection\r\n+            // The collection must have 0 elements after that\r\n+            if (!sup.retainAll(col)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            // No children must be present\r\n+            if (sup.size() != 0) {\r\n+                fail(\"The size of the collection must be 0\");\r\n+            }*/\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method removeAll() with Collection parameter.<p>\r\n+     */\r\n+    public void testRemoveAllCollection() {\r\n+        try {\r\n+            \r\n+            /*// Create an instance and add one child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            // Create collection with an instance of an arbitrary child\r\n+            java.util.Collection col = new java.util.ArrayList();\r\n+            col.add(new Object());    \r\n+            \r\n+            // Remove all children that are in the collection\r\n+            // The collection should not change after that\r\n+            if (sup.removeAll(col)) {\r\n+                fail(\"False should be returned\");\r\n+            }\r\n+            \r\n+            // Add a child that is a member of the BeanContext\r\n+            col.add(ch); \r\n+            \r\n+            // Remove all children that are in the collection\r\n+            // The collection should change after that\r\n+            if (!sup.removeAll(col)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            // No children must be present\r\n+            if (sup.size() != 0) {\r\n+                fail(\"The size of the collection must be 0 but is \" + sup.size());\r\n+            }*/\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method containsAll() with Collection parameter.<p>\r\n+     */\r\n+    public void testContainsAllCollection() {\r\n+        try {\r\n+            \r\n+            /*// Create an instance and add two children\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            Object obj = new Object();\r\n+            sup.add(ch);\r\n+            sup.add(obj);\r\n+            \r\n+            // Create collection with BCS children that just were added\r\n+            java.util.Collection col = new java.util.ArrayList();\r\n+            \r\n+            for (java.util.Iterator it = sup.bcsChildren(); it.hasNext(); ) {\r\n+                col.add(it.next());\r\n+            }\r\n+            \r\n+            // Two collections have the same elements\r\n+            if (!sup.containsAll(col)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            sup.remove(obj);\r\n+            \r\n+            // Now they are different\r\n+            if (sup.containsAll(col)) {\r\n+                fail(\"False should be returned\");\r\n+            }*/\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method addAll() with Collection parameter.<p>\r\n+     */\r\n+    public void testAddAllCollection() {\r\n+        try {\r\n+            \r\n+            /*// Create an instance and add two children\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+                     \r\n+            // Create collection with two elements\r\n+            java.util.Collection col = new java.util.ArrayList();\r\n+            col.add(new BeanContextChildSupport());\r\n+            col.add(new Object());\r\n+            \r\n+            // Place two children into the BeanContext\r\n+            if (!sup.addAll(col)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            // Two children must be present\r\n+            if (sup.size() != 2) {\r\n+                fail(\"The size of the collection must be 2 but is \" + sup.size());\r\n+            }*/\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method remove() with Object, boolean parameters.<p>\r\n+     */\r\n+    public void testRemoveObjectboolean() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add one child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            // Remove unexisting child\r\n+            if (sup.remove(new Object(), true)) {\r\n+                fail(\"False should be returned\");\r\n+            }\r\n+            \r\n+            // Remove it\r\n+            if (!sup.remove(ch, true)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            // No children must be present\r\n+            if (sup.size() != 0) {\r\n+                fail(\"The size of the collection must be 0 but is \" + sup.size());\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method remove() with Object parameter.<p>\r\n+     */\r\n+    public void testRemoveObject() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add one child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            // Remove unexisting child\r\n+            if (sup.remove(new Object())) {\r\n+                fail(\"False should be returned\");\r\n+            }\r\n+            \r\n+            // Remove it\r\n+            if (!sup.remove(ch)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+            \r\n+            // No children must be present\r\n+            if (sup.size() != 0) {\r\n+                fail(\"The size of the collection must be 0 but is \" + sup.size());\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method containsKey() with Object parameter.<p>\r\n+     */\r\n+    public void testContainsKeyObject() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add a child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            // We should find the child now\r\n+            if (!sup.containsKey(ch)) {\r\n+                fail(\"True should be returned\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method contains() with Object parameter.<p>\r\n+     */\r\n+    public void testContainsObject() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add a child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextChildSupport ch = new BeanContextChildSupport();\r\n+            sup.add(ch);\r\n+            \r\n+            BeanContextSupport.BCSChild bcs = \r\n+                (BeanContextSupport.BCSChild) sup.bcsChildren().next();\r\n+            \r\n+            // We should find the child now\r\n+            if (!sup.contains(bcs)) {\r\n+                // fail(\"True should be returned\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method add() with Object parameter.<p>\r\n+     */\r\n+    public void testAddObject() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add a child\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.add(new Object());\r\n+            \r\n+            // Just one child must be present\r\n+            if (sup.size() != 1) {\r\n+                fail(\"The size of the collection must be 1 but is \" + sup.size());\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method toArray() with no parameters.<p>\r\n+     */\r\n+    public void testToArray() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add two children\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.add(\"obj1\");\r\n+            sup.add(\"obj2\");\r\n+            \r\n+            // Convert to array\r\n+            Object[] array = sup.toArray();\r\n+            \r\n+            // Check length\r\n+            if (array.length != 2) {\r\n+                fail(\"The size of the collection must be 2 but is \" + array.length);\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method copyChildren() with no parameters.<p>\r\n+     */\r\n+    public void testCopyChildren() {\r\n+        try {\r\n+            \r\n+            // Create an instance and add two children\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            sup.add(\"obj1\");\r\n+            sup.add(\"obj2\");\r\n+            \r\n+            // Convert to array\r\n+            Object[] array = sup.copyChildren();\r\n+            \r\n+            // Check length\r\n+            if (array.length != 2) {\r\n+                fail(\"The size of the collection must be 2 but is \" + array.length);\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method removeBeanContextMembershipListener() with BeanContextMembershipListener parameter.<p>\r\n+     */\r\n+    public void testRemoveBeanContextMembershipListenerBeanContextMembershipListener() {\r\n+        try {\r\n+            \r\n+            // Create BeanContext and BeanContextMembershipListener instances\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextMembershipListener l = getBeanContextMembershipListener();\r\n+            sup.addBeanContextMembershipListener(l);\r\n+            sup.removeBeanContextMembershipListener(l);\r\n+            \r\n+            // Check if it's there\r\n+            if (sup.bcmListeners.contains(l)) {\r\n+                fail(\"Listener should not be present\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method addBeanContextMembershipListener() with BeanContextMembershipListener parameter.<p>\r\n+     */\r\n+    public void testAddBeanContextMembershipListenerBeanContextMembershipListener() {\r\n+        try {\r\n+            \r\n+            // Create BeanContext and BeanContextMembershipListener instances\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            BeanContextMembershipListener l = getBeanContextMembershipListener();\r\n+            sup.addBeanContextMembershipListener(l);\r\n+            \r\n+            // Check if it's there\r\n+            if (!sup.bcmListeners.contains(l)) {\r\n+                fail(\"Listener should be present\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getBeanContextPeer() with no parameters.<p>\r\n+     */\r\n+    public void testGetBeanContextPeer() {\r\n+        try {\r\n+            \r\n+            // Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            \r\n+            // The peer and this context should be equal\r\n+            if (!sup.getBeanContextPeer().equals(sup)) {\r\n+                fail(\"The peer and the BeanContext should be equal\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method vetoableChange() with PropertyChangeEvent parameter.<p>\r\n+     */\r\n+    public void testVetoableChangePropertyChangeEvent() {\r\n+        try {\r\n+            \r\n+            /** @todo: not implemented yet in the class **/\r\n+            // Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            //sup.vetoableChange(null);\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method propertyChange() with PropertyChangeEvent parameter.<p>\r\n+     */\r\n+    public void testPropertyChangePropertyChangeEvent() {\r\n+        try {\r\n+            \r\n+            /** @todo: not implemented yet in the class **/\r\n+            // Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            //sup.propertyChange(null);\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method isEmpty() with no parameters.<p>\r\n+     */\r\n+    public void testIsEmpty() {\r\n+        try {\r\n+            \r\n+            // Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            \r\n+            if (!sup.isEmpty()) {\r\n+                fail(\"The collection of children should be empty\");\r\n+            } \r\n+            \r\n+            sup.add(new Object());\r\n+            \r\n+            if (sup.isEmpty()) {\r\n+                fail(\"The collection of children should not be empty\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method clear() with no parameters.<p>\r\n+     */\r\n+    public void testClear() {\r\n+        try {\r\n+            \r\n+            /*// Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            \r\n+            // Add a child and then clear\r\n+            sup.add(new Object());\r\n+            sup.clear();\r\n+            \r\n+            if (!sup.isEmpty()) {\r\n+                fail(\"The collection of children should be empty\");\r\n+            }*/\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method size() with no parameters.<p>\r\n+     */\r\n+    public void testSize() {\r\n+        try {\r\n+            \r\n+            // Create BeanContext instance\r\n+            BeanContextSupport sup = new BeanContextSupport();\r\n+            \r\n+            if (sup.size() != 0) {\r\n+                fail(\"The size of the collection should be equal to 0\");\r\n+            }\r\n+            \r\n+            sup.add(new Object());\r\n+            \r\n+            if (sup.size() != 1) {\r\n+                fail(\"The size of the collection should be equal to 1\");\r\n+            }\r\n+        }\r\n+        catch(Exception e) {\r\n+            fail(\"Unexpected exception: \" + e + \" caused by: \" + e.getCause());\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getResourceAsStream() with String, BeanContextChild=null parameters.<p>\r\n+     */\r\n+    public void test_getResourceAsStreamLlava_lang_StringLjava_beans_beancontext_BeanContextChild() {\r\n+        BeanContextSupport obj = new BeanContextSupport();\r\n+        try {\r\n+            obj.getResourceAsStream(new String(), null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getResourceAsStream() with String=null, BeanContextChild=null parameters.<p>\r\n+     */\r\n+    public void test_getResourceAsStreamLlava_lang_StringLjava_beans_beancontext_BeanContextChild2() {\r\n+        BeanContextSupport obj = new BeanContextSupport();\r\n+        try {\r\n+            obj.getResourceAsStream(null, null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (IllegalArgumentException t) {\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method vetoableChange() with PropertyChangeEvent=null parameter.<p>\r\n+     */\r\n+    public void test_vetoableChangeLjava_beans_PropertyChangeEvent() {\r\n+        BeanContextSupport obj = new BeanContextSupport();\r\n+        try {\r\n+            obj.vetoableChange(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (PropertyVetoException p) {\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getResource() with String!=null, BeanContextChild=null parameters.<p>\r\n+     */\r\n+    public void test_getResourceLjava_lang_StringLjava_beans_beancontext_BeanContextChild() {\r\n+        BeanContextSupport obj = new BeanContextSupport();\r\n+        try {\r\n+            obj.getResource(\"\", null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Test method getResource() with String=null, BeanContextChild=null parameters.<p>\r\n+     */\r\n+    public void test_getResourceLjava_lang_StringLjava_beans_beancontext_BeanContextChild2() {\r\n+        BeanContextSupport obj = new BeanContextSupport();\r\n+        try {\r\n+            obj.getResource(null, null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (IllegalArgumentException t) {\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException t) {\r\n+        }\r\n+    }\r\n+\r\n+    /** UTILITY METHODS **/\r\n+    \r\n+    /**\r\n+     * Create BeanContextMembershipListener instance\r\n+     */\r\n+    private BeanContextMembershipListener getBeanContextMembershipListener() {\r\n+        return new BeanContextMembershipListener() {\r\n+                    \r\n+            public void childrenAdded(BeanContextMembershipEvent bcme) {\r\n+                ;\r\n+            }\r\n+            \r\n+            public void childrenRemoved(BeanContextMembershipEvent bcme) {\r\n+                ;\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /** STANDARD ENDING **/\r\n+\r\n+    /**\r\n+     * Start testing from the command line.<p>\r\n+     */\r\n+    public static Test suite() {\r\n+        return new TestSuite(BeanContextSupportTest.class);\r\n+    }\r\n+\r\n+    /**\r\n+     * Start testing from the command line.<p>\r\n+     *\r\n+     * @param args - Command line parameters.<p>\r\n+     */\r\n+    public static void main(String args[]) {\r\n+        junit.textui.TestRunner.run(suite());\r\n+    }\r\n }\n\\ No newline at end of file",
                "deletions": 705
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Adding regression test for HARMONY-238 (java.util.Date(null) should throw IllegalArgumentException not NullPointerException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@395134 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/38ff4f41ad7bebad2b0caeaac1be74afc8b135b7",
        "parent": "https://github.com/apache/harmony-classlib/commit/b0d7ad830a7f59c639daee76c704336543f2f95e",
        "bug_id": "harmony-classlib_48",
        "file": [
            {
                "sha": "85f2ceec9e4f2b4cd031f81318303cd76c39d8be",
                "filename": "modules/luni/src/test/java/tests/api/java/util/DateTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/38ff4f41ad7bebad2b0caeaac1be74afc8b135b7/modules/luni/src/test/java/tests/api/java/util/DateTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/38ff4f41ad7bebad2b0caeaac1be74afc8b135b7/modules/luni/src/test/java/tests/api/java/util/DateTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/DateTest.java?ref=38ff4f41ad7bebad2b0caeaac1be74afc8b135b7",
                "patch": "@@ -100,6 +100,15 @@ public void test_ConstructorLjava_lang_String() {\n \t\tDate d1 = new Date(\"January 1, 1970, 00:00:00 GMT\"); // the epoch\r\n \t\tDate d2 = new Date(0); // the epoch\r\n \t\tassertTrue(\"Created incorrect date\", d1.equals(d2));\r\n+        \r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-238\r\n+\t\t\tnew Date(null);\r\n+\t\t\tfail(\"Constructor Date((String)null) should \"\r\n+\t\t\t\t+ \"throw IllegalArgumentException\");\r\n+\t\t} catch (IllegalArgumentException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-66 (SecurityManager.checkAccess(Thread t) throws NullPointerException for dead thread)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@374380 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3bfc77f8a065d3a40946ed7cf09d49625e13dbf1",
        "parent": "https://github.com/apache/harmony-classlib/commit/78a8748b9fbdaf3062acdedb9dee0ee660461b27",
        "bug_id": "harmony-classlib_49",
        "file": [
            {
                "sha": "7b452f96fb9012d7aad0826beef30c2dbd74b488",
                "filename": "modules/luni/src/main/java/java/lang/SecurityManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3bfc77f8a065d3a40946ed7cf09d49625e13dbf1/modules/luni/src/main/java/java/lang/SecurityManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3bfc77f8a065d3a40946ed7cf09d49625e13dbf1/modules/luni/src/main/java/java/lang/SecurityManager.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/lang/SecurityManager.java?ref=3bfc77f8a065d3a40946ed7cf09d49625e13dbf1",
                "patch": "@@ -90,7 +90,7 @@ public void checkAccept(String host, int port) {\n \tpublic void checkAccess(Thread thread) {\r\n \t\t// Only worry about system threads. Dead threads have a null group.\r\n \t\tThreadGroup group = thread.getThreadGroup();\r\n-\t\tif (group == null || group.parent == null)\r\n+\t\tif ((group != null) && (group.parent == null))\r\n \t\t\tcheckPermission(RuntimePermission.permissionToModifyThread);\r\n \t}\r\n \r",
                "deletions": 1
            },
            {
                "sha": "154c9aceafe2fec1328bae742350f0e2d5ebb58e",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3bfc77f8a065d3a40946ed7cf09d49625e13dbf1/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3bfc77f8a065d3a40946ed7cf09d49625e13dbf1/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java?ref=3bfc77f8a065d3a40946ed7cf09d49625e13dbf1",
                "patch": "@@ -15,8 +15,6 @@\n \r\n package org.apache.harmony.tests.java.lang;\r\n \r\n-import java.security.AccessControlException;\r\n-\r\n import junit.framework.TestCase;\r\n \r\n public class SecurityManagerTest extends TestCase {\r\n@@ -27,14 +25,11 @@\n \tpublic void test_checkAccessLjava_lang_Thread() throws InterruptedException {\r\n \t\t// Regression for HARMONY-66\r\n \t\tThread t = new Thread() {\r\n-\t\t\tpublic void run() {\t};\r\n+\t\t\tpublic void run() {\r\n+\t\t\t};\r\n \t\t};\r\n \t\tt.start();\r\n \t\tt.join();\r\n-\t\ttry {\r\n-\t\t\tnew SecurityManager().checkAccess(t);\r\n-\t\t} catch (AccessControlException e) {\r\n-\t\t\t// expected\r\n-\t\t}\r\n+\t\tnew SecurityManager().checkAccess(t);\r\n \t}\r\n }\r",
                "deletions": 8
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-66 (java.lang.SecurityManager.checkAccess(Thread t) throws NullPointerException for the dead thread.)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@374062 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/78a8748b9fbdaf3062acdedb9dee0ee660461b27",
        "parent": "https://github.com/apache/harmony-classlib/commit/97c883ae7010f1f249f8ecbe28ddf746d22ac58c",
        "bug_id": "harmony-classlib_50",
        "file": [
            {
                "sha": "e9e2b0c6b19b3111795e97a9f5fd502479f027a3",
                "filename": "modules/luni/src/main/java/java/lang/SecurityManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/main/java/java/lang/SecurityManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/main/java/java/lang/SecurityManager.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/lang/SecurityManager.java?ref=78a8748b9fbdaf3062acdedb9dee0ee660461b27",
                "patch": "@@ -88,8 +88,9 @@ public void checkAccept(String host, int port) {\n \t *            the thread we are attempting to modify\r\n \t */\r\n \tpublic void checkAccess(Thread thread) {\r\n-\t\t// Only worry about system threads.\r\n-\t\tif (thread.getThreadGroup().parent == null)\r\n+\t\t// Only worry about system threads. Dead threads have a null group.\r\n+\t\tThreadGroup group = thread.getThreadGroup();\r\n+\t\tif (group == null || group.parent == null)\r\n \t\t\tcheckPermission(RuntimePermission.permissionToModifyThread);\r\n \t}\r\n \r",
                "deletions": 2
            },
            {
                "sha": "5c6c635919a029918097e5483e0da63b38561f34",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/lang/AllTests.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/AllTests.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/AllTests.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/AllTests.java?ref=78a8748b9fbdaf3062acdedb9dee0ee660461b27",
                "patch": "@@ -12,7 +12,7 @@\n  * See the License for the specific language governing permissions and\r\n  * limitations under the License.\r\n  */\r\n- \r\n+\r\n package org.apache.harmony.tests.java.lang;\r\n \r\n import junit.framework.Test;\r\n@@ -29,6 +29,7 @@ public static Test suite() {\n \t\t\t\t\"Test for org.apache.harmony.tests.java.lang\");\r\n \t\t//$JUnit-BEGIN$\r\n \t\tsuite.addTestSuite(FloatTest.class);\r\n+\t\tsuite.addTestSuite(SecurityManagerTest.class);\r\n \t\tsuite.addTestSuite(DoubleTest.class);\r\n \t\t//$JUnit-END$\r\n \t\treturn suite;\r",
                "deletions": 1
            },
            {
                "sha": "ba4709ef23d4c6d9578b812dbb080af087f4a8bd",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78a8748b9fbdaf3062acdedb9dee0ee660461b27/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java",
                "status": "added",
                "changes": 40,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/lang/SecurityManagerTest.java?ref=78a8748b9fbdaf3062acdedb9dee0ee660461b27",
                "patch": "@@ -0,0 +1,40 @@\n+/* Copyright 2006 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.harmony.tests.java.lang;\r\n+\r\n+import java.security.AccessControlException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class SecurityManagerTest extends TestCase {\r\n+\r\n+\t/**\r\n+\t * @tests java.lang.SecurityManager#checkAccess(java.lang.Thread)\r\n+\t */\r\n+\tpublic void test_checkAccessLjava_lang_Thread() throws InterruptedException {\r\n+\t\t// Regression for HARMONY-66\r\n+\t\tThread t = new Thread() {\r\n+\t\t\tpublic void run() {\t};\r\n+\t\t};\r\n+\t\tt.start();\r\n+\t\tt.join();\r\n+\t\ttry {\r\n+\t\t\tnew SecurityManager().checkAccess(t);\r\n+\t\t} catch (AccessControlException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch for HARMONY-4755: JEditorPane.setPage() throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@577619 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/75c3828ed7248de59b030513b14fa3a4f3d83b03",
        "parent": "https://github.com/apache/harmony-classlib/commit/790cb1a1ccc0a358ebfe620a702b5cb97fa2a78d",
        "bug_id": "harmony-classlib_51",
        "file": [
            {
                "sha": "e0c615ad854a8411dd576f718eb08a90bcbb377d",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/html/BlockView.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/75c3828ed7248de59b030513b14fa3a4f3d83b03/modules/swing/src/main/java/common/javax/swing/text/html/BlockView.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/75c3828ed7248de59b030513b14fa3a4f3d83b03/modules/swing/src/main/java/common/javax/swing/text/html/BlockView.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/html/BlockView.java?ref=75c3828ed7248de59b030513b14fa3a4f3d83b03",
                "patch": "@@ -74,7 +74,12 @@ public void changedUpdate(final DocumentEvent event,\n \n     public void paint(final Graphics g, final Shape allocation) {\n         Rectangle rc = allocation.getBounds();\n-        boxPainter.paint(g, rc.x, rc.y, rc.width, rc.height, this);\n+\n+        // Fix for HARMONY-4755, boxPainter is only initialized\n+        // after setPropertiesFromAttributes() is called.\n+        if (boxPainter != null) {\n+            boxPainter.paint(g, rc.x, rc.y, rc.width, rc.height, this);\n+        }\n         super.paint(g, allocation);\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "BeanContextSupport.classEquals() should throw NPE on null parameters\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@553126 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6d9654b896f8a0e35402e1f558c324c9fec56707",
        "parent": "https://github.com/apache/harmony-classlib/commit/568c79abdd31b0cdaf657efbadf268230279e892",
        "bug_id": "harmony-classlib_52",
        "file": [
            {
                "sha": "95fcc39a02d83c79d850f24c715035a756927502",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6d9654b896f8a0e35402e1f558c324c9fec56707/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6d9654b896f8a0e35402e1f558c324c9fec56707/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java?ref=6d9654b896f8a0e35402e1f558c324c9fec56707",
                "patch": "@@ -425,6 +425,9 @@ protected void childJustRemovedHook(Object child, BCSChild bcsChild) {\n      * @return true if two class objects are equal or their class names are equal.\n      */\n     protected static final boolean classEquals(Class clz1, Class clz2) {\n+        if (clz1 == null || clz2 == null) {\n+            throw new NullPointerException();\n+        }\n         return clz1 == clz2 || clz1.getName().equals(clz2.getName());\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "b4ac6d8cbfee97bd96329c7fe58ee6a57879f56a",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6d9654b896f8a0e35402e1f558c324c9fec56707/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6d9654b896f8a0e35402e1f558c324c9fec56707/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java?ref=6d9654b896f8a0e35402e1f558c324c9fec56707",
                "patch": "@@ -823,6 +823,12 @@ public void testClassEquals() {\n                 Integer.class));\n         assertFalse(MockBeanContextSupport.publicClassEquals(Integer.class,\n                 Double.class));\n+        try {\n+            MockBeanContextSupport.publicClassEquals(null, null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected.\n+        }\n     }\n \n     public void testClear() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Add more descriptive messages to NPEs.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@425595 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946",
        "parent": "https://github.com/apache/harmony-classlib/commit/d5f13f05845366dccda0b258e97a813825d817d5",
        "bug_id": "harmony-classlib_53",
        "file": [
            {
                "sha": "466c81b5a43207e7b9833c36169e9a3c520bb531",
                "filename": "modules/logging/src/main/java/java/util/logging/Level.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/Level.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/Level.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Level.java?ref=a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946",
                "patch": "@@ -193,7 +193,7 @@ protected Level(String name, int level) {\n      */\r\n     protected Level(String name, int level, String resourceBundleName) {\r\n         if (null == name) {\r\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\r\n+            throw new NullPointerException(\"The 'name' parameter is null.\"); //$NON-NLS-1$\r\n         }\r\n         this.name = name;\r\n         this.value = level;\r\n@@ -255,7 +255,7 @@ public final int intValue() {\n      */\r\n     public static final Level parse(String name) {\r\n         if (null == name) {\r\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\r\n+            throw new NullPointerException(\"The 'name' parameter is null.\"); //$NON-NLS-1$\r\n         }\r\n         // Check if the name is a predefined one\r\n         Level result = levels.get(name);\r",
                "deletions": 2
            },
            {
                "sha": "4e7504b931acbc64da7c6111b73a8879b2255597",
                "filename": "modules/logging/src/main/java/java/util/logging/LogRecord.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/LogRecord.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/LogRecord.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/LogRecord.java?ref=a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946",
                "patch": "@@ -176,7 +176,7 @@\n      */\n     public LogRecord(Level level, String msg) {\n         if (null == level) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+            throw new NullPointerException(\"The 'level' parameter is null.\"); //$NON-NLS-1$\n         }\n         this.level = level;\n         this.message = msg;\n@@ -225,7 +225,7 @@ public Level getLevel() {\n      */\n     public void setLevel(Level level) {\n         if (null == level) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+            throw new NullPointerException(\"The 'level' parameter is null.\"); //$NON-NLS-1$\n         }\n         this.level = level;\n     }",
                "deletions": 2
            },
            {
                "sha": "9bc75a1202de7891f0e0acfe63e65c390246c870",
                "filename": "modules/logging/src/main/java/java/util/logging/Logger.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/Logger.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/Logger.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Logger.java?ref=a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946",
                "patch": "@@ -415,7 +415,7 @@ public static Logger getLogger(String name, String resourceBundleName) {\n      */\n     public synchronized void addHandler(Handler handler) {\n         if (null == handler) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+            throw new NullPointerException(\"The 'handler' parameter is null.\"); //$NON-NLS-1$\n         }\n         // Anonymous loggers can always add handlers\n         if (this.isNamed) {\n@@ -449,7 +449,7 @@ public synchronized void removeHandler(Handler handler) {\n             LogManager.getLogManager().checkAccess();\n         }\n         if (null == handler) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+            throw new NullPointerException(\"The 'handler' parameter is null.\"); //$NON-NLS-1$\n         }\n         this.handlers.remove(handler);\n     }\n@@ -579,7 +579,7 @@ synchronized void internalSetParent(Logger newParent) {\n      */\n     public synchronized void setParent(Logger parent) {\n         if (null == parent) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+            throw new NullPointerException(\"The 'parent' parameter is null.\"); //$NON-NLS-1$\n         }\n         // even anonymous loggers are checked\n         LogManager.getLogManager().checkAccess();",
                "deletions": 3
            },
            {
                "sha": "22eae0b557bce22e37991ef747e9b11e4e0bb4c4",
                "filename": "modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946/modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/StreamHandler.java?ref=a7ac3012ad86a91c7071f97ef6eb6fff7e3b9946",
                "patch": "@@ -120,8 +120,11 @@ public StreamHandler() {\n      */\n     public StreamHandler(OutputStream os, Formatter formatter) {\n         this();\n-        if (null == os || null == formatter) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n+        if (os == null) {\n+            throw new NullPointerException(\"The OutputStream parameter is null\");\n+        }\n+        if (formatter == null) {\n+            throw new NullPointerException(\"The Formatter parameter is null.\");\n         }\n         this.os = os;\n         internalSetFormatter(formatter);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6206 ([classlib][beans] java.beans.EventSetDescriptor(String, Class<?> , MethodDescriptor[], Method, Method) throws a NullPointerException while RI doesn't)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@785161 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/530559c97922d9342c7ef88769c00dabaab4fa7d",
        "parent": "https://github.com/apache/harmony-classlib/commit/be01c4095cfeea0e08fd87ea0c4c79d02059622a",
        "bug_id": "harmony-classlib_54",
        "file": [
            {
                "sha": "1e1f43e99d81c46e665322200849e1c4842b6c86",
                "filename": "modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/530559c97922d9342c7ef88769c00dabaab4fa7d/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/530559c97922d9342c7ef88769c00dabaab4fa7d/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/EventSetDescriptor.java?ref=530559c97922d9342c7ef88769c00dabaab4fa7d",
                "patch": "@@ -177,7 +177,6 @@ public EventSetDescriptor(String eventSetName, Class<?> listenerType,\n             this.listenerMethodDescriptors = new ArrayList<MethodDescriptor>();\n \n             for (MethodDescriptor element : listenerMethodDescriptors) {\n-                element.getMethod();\n                 this.listenerMethodDescriptors.add(element);\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "51e3ef3226a342a18430391d03e4aec0d358fefa",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/530559c97922d9342c7ef88769c00dabaab4fa7d/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/530559c97922d9342c7ef88769c00dabaab4fa7d/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java?ref=530559c97922d9342c7ef88769c00dabaab4fa7d",
                "patch": "@@ -1277,7 +1277,24 @@ public void testEventSetDescriptorConstructor() throws Exception {\n         new EventSetDescriptor(OtherBean.class, \"sample\",\n                 SampleListener.class, \"fireSampleEvent\");\n     }\n-    \n+\n+    public void test_EventSetDescriptor_Constructor() throws Exception {\n+        EventSetDescriptor eventSetDescriptor = new EventSetDescriptor(\n+                (String) null, (Class<?>) null, new MethodDescriptor[] { null,\n+                        null }, (Method) null, (Method) null);\n+        assertNull(eventSetDescriptor.getName());\n+        assertNull(eventSetDescriptor.getListenerType());\n+        assertNull(eventSetDescriptor.getAddListenerMethod());\n+        assertNull(eventSetDescriptor.getRemoveListenerMethod());\n+\n+        try {\n+            eventSetDescriptor.getListenerMethods();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     //Regression Test\n     public void testConstructor_withLackRemoveActionBean() throws Exception {\n         try {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6142 ([classlib][luni] java.util.StringTokenizer.nextToken(String delim) should throw NullPointerException when the given delim is null)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@768935 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/702399eadb610aa5744acef66b73460746436da0",
        "parent": "https://github.com/apache/harmony-classlib/commit/84105c8a430e706014f2e2be24dc14e10eccdf64",
        "bug_id": "harmony-classlib_55",
        "file": [
            {
                "sha": "b513350f6c7f0f0ec6fae38af39c43768f4f9a9a",
                "filename": "modules/luni/src/main/java/java/util/StringTokenizer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/702399eadb610aa5744acef66b73460746436da0/modules/luni/src/main/java/java/util/StringTokenizer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/702399eadb610aa5744acef66b73460746436da0/modules/luni/src/main/java/java/util/StringTokenizer.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/StringTokenizer.java?ref=702399eadb610aa5744acef66b73460746436da0",
                "patch": "@@ -124,6 +124,9 @@ public boolean hasMoreElements() {\n      * @return true if unprocessed tokens remain\n      */\n     public boolean hasMoreTokens() {\n+        if (delimiters == null) {\n+            throw new NullPointerException();\n+        }\n         int length = string.length();\n         if (position < length) {\n             if (returnDelimiters)\n@@ -157,6 +160,9 @@ public Object nextElement() {\n      *                if no tokens remain\n      */\n     public String nextToken() {\n+        if (delimiters == null) {\n+            throw new NullPointerException();\n+        }\n         int i = position;\n         int length = string.length();\n ",
                "deletions": 0
            },
            {
                "sha": "4d813f71202e36e9953140264b285442b421518b",
                "filename": "modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/StringTokenizerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/702399eadb610aa5744acef66b73460746436da0/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/StringTokenizerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/702399eadb610aa5744acef66b73460746436da0/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/StringTokenizerTest.java",
                "status": "modified",
                "changes": 86,
                "additions": 86,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/StringTokenizerTest.java?ref=702399eadb610aa5744acef66b73460746436da0",
                "patch": "@@ -167,6 +167,92 @@ public void test_nextTokenLjava_lang_String() {\n \t\t\t\t\"es\", st.nextToken());\n \t}\n \n+    public void test_hasMoreElements_NPE() {\n+        StringTokenizer stringTokenizer = new StringTokenizer(new String(),\n+                (String) null, true);\n+        try {\n+            stringTokenizer.hasMoreElements();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        stringTokenizer = new StringTokenizer(new String(), (String) null);\n+        try {\n+            stringTokenizer.hasMoreElements();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_hasMoreTokens_NPE() {\n+        StringTokenizer stringTokenizer = new StringTokenizer(new String(),\n+                (String) null, true);\n+        try {\n+            stringTokenizer.hasMoreTokens();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        stringTokenizer = new StringTokenizer(new String(), (String) null);\n+        try {\n+            stringTokenizer.hasMoreTokens();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_nextElement_NPE() {\n+        StringTokenizer stringTokenizer = new StringTokenizer(new String(),\n+                (String) null, true);\n+        try {\n+            stringTokenizer.nextElement();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        stringTokenizer = new StringTokenizer(new String(), (String) null);\n+        try {\n+            stringTokenizer.nextElement();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_nextToken_NPE() {\n+        StringTokenizer stringTokenizer = new StringTokenizer(new String(),\n+                (String) null, true);\n+        try {\n+            stringTokenizer.nextToken();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        stringTokenizer = new StringTokenizer(new String(), (String) null);\n+        try {\n+            stringTokenizer.nextToken();\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void test_nextTokenLjava_lang_String_NPE() {\n+        StringTokenizer stringTokenizer = new StringTokenizer(new String());\n+        try {\n+            stringTokenizer.nextToken(null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n \t/**\n \t * Sets up the fixture, for example, open a network connection. This method\n \t * is called before a test is executed.",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6043 [classlib] [security] UnresolvedPermission.equals(Object) doesn't works well, with following changes:\n1. avoid NullPointerException\n2. add another scenario test\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@728589 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa",
        "parent": "https://github.com/apache/harmony-classlib/commit/61909bfca29e285326121a1f4129206084187b8b",
        "bug_id": "harmony-classlib_56",
        "file": [
            {
                "sha": "214087308eec5d3c9af3a953a85e3d54afb1e438",
                "filename": "modules/security/src/main/java/common/java/security/UnresolvedPermission.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa/modules/security/src/main/java/common/java/security/UnresolvedPermission.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa/modules/security/src/main/java/common/java/security/UnresolvedPermission.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/UnresolvedPermission.java?ref=43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa",
                "patch": "@@ -83,7 +83,10 @@ public UnresolvedPermission(String type, String name, String actions,\n         this.type = type;\n         this.name = name;\n         this.actions = actions;\n-        this.targetCerts = certs;\n+        if (certs != null) {\n+            this.targetCerts = new Certificate[certs.length];\n+            System.arraycopy(certs, 0, targetCerts, 0, certs.length);\n+        }\n         hash = 0;\n     }\n \n@@ -150,6 +153,10 @@ private boolean equalsCertificates(Certificate[] certs1,\n         if (length > 0) {\n             boolean found;\n             for (int i = 0; i < length; i++) {\n+            \t// Skip the checking for null\n+            \tif(certs1[i] == null){\n+            \t\tcontinue;\n+            \t}\n                 found = false;\n                 for (int j = 0; j < length; j++) {\n                     if (certs1[i].equals(certs2[j])) {\n@@ -164,6 +171,9 @@ private boolean equalsCertificates(Certificate[] certs1,\n             }\n \n             for (int i = 0; i < length; i++) {\n+            \tif(certs2[i] == null){\n+            \t\tcontinue;\n+            \t}\n                 found = false;\n                 for (int j = 0; j < length; j++) {\n                     if (certs2[i].equals(certs1[j])) {",
                "deletions": 1
            },
            {
                "sha": "96ecdaea11573b8a904aeb03da1c4d63bcd596e2",
                "filename": "modules/security/src/test/impl/java.injected/java/security/UnresolvedPermission_ImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa/modules/security/src/test/impl/java.injected/java/security/UnresolvedPermission_ImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa/modules/security/src/test/impl/java.injected/java/security/UnresolvedPermission_ImplTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/impl/java.injected/java/security/UnresolvedPermission_ImplTest.java?ref=43ce7f38d81d21a89ce04c4c5e2afb94e05bf8fa",
                "patch": "@@ -217,11 +217,23 @@ public void test_Equals_Scenario10() {\n                 new java.security.cert.Certificate[2]);\n         UnresolvedPermission up2 = new UnresolvedPermission(type, name, action,\n                 new java.security.cert.Certificate[2]);\n-        try {\n-            up1.equals(up2);\n-            fail(\"should throw NullPointerException\");\n-        } catch (NullPointerException e) {\n-            // Expected\n-        }\n+        // Non-bug difference, RI throw NPE here.\n+        assertEquals(up1, up2);\n+    }\n+\n+    public void test_Equals_Scenario11() {\n+        UnresolvedPermission up1 = new UnresolvedPermission(type, name, action,\n+                new java.security.cert.Certificate[] { cert1, cert2 });\n+        UnresolvedPermission up2 = new UnresolvedPermission(type, name, action,\n+                new java.security.cert.Certificate[] { cert1, null, cert2 });\n+        assertFalse(up1.equals(up2));\n+    }\n+    \n+    public void test_Equals_Scenario12() {\n+        UnresolvedPermission up1 = new UnresolvedPermission(type, name, action,\n+                new java.security.cert.Certificate[] { cert1, null, null });\n+        UnresolvedPermission up2 = new UnresolvedPermission(type, name, action,\n+                new java.security.cert.Certificate[] { cert1, null, cert1 });\n+        assertEquals(up1, up2);\n     }\n }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Add a testcase for java.beans.beancontext.BeanContextServiceRevokedEvent to assure that invoking BeanContextServiceRevokedEvent.isServiceClass(Class cls), which the cls is not appropriate, will lead to a NullPointerException.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@548938 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c0013ee46ea0acea40dd53cdccf4be20bfb84e6b",
        "parent": "https://github.com/apache/harmony-classlib/commit/ff665d30b222fa1b3eff6a7475c9297d9dcb5829",
        "bug_id": "harmony-classlib_57",
        "file": [
            {
                "sha": "01af29c41e4776de60955a43778aa738b0b99809",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c0013ee46ea0acea40dd53cdccf4be20bfb84e6b/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c0013ee46ea0acea40dd53cdccf4be20bfb84e6b/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java?ref=c0013ee46ea0acea40dd53cdccf4be20bfb84e6b",
                "patch": "@@ -86,6 +86,17 @@ public void testBeanContextServiceRevokedEvent_NullParam() {\n         } catch (NullPointerException e) {\n             // expected\n         }\n+        \n+        try {\n+            event.isServiceClass(null);\n+            fail(\"NPE expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        event = new MockBeanContextServiceRevokedEvent(services, services\n+                .getClass(), true);\n+        assertFalse(event.isServiceClass(null));\n     }\n \n     public void testBeanContextServiceRevokedEvent() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-4210 [classlib][sql] javax.sql.SerialArray(Array) throws NullPointerException when one of the Array member is downcasted to Object)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@548575 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/70955643fb9c6d864677cc503d83846f521b4a80",
        "parent": "https://github.com/apache/harmony-classlib/commit/38f5d35110586aab3e8b2c2ec1f8c30908b8864c",
        "bug_id": "harmony-classlib_58",
        "file": [
            {
                "sha": "0a0518b82d686ef0bf9611a571b4a826ceec14b7",
                "filename": "modules/sql/src/main/java/javax/sql/rowset/serial/DefaultUDTMap.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/main/java/javax/sql/rowset/serial/DefaultUDTMap.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/main/java/javax/sql/rowset/serial/DefaultUDTMap.java",
                "status": "modified",
                "changes": 22,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/main/java/javax/sql/rowset/serial/DefaultUDTMap.java?ref=70955643fb9c6d864677cc503d83846f521b4a80",
                "patch": "@@ -21,6 +21,7 @@\n import java.sql.Array;\n import java.sql.Blob;\n import java.sql.Clob;\n+import java.sql.SQLException;\n import java.sql.Struct;\n import java.sql.Types;\n import java.util.HashMap;\n@@ -34,45 +35,45 @@ public static boolean isDefault(int type) {\n                 || type == Types.DATALINK || type == Types.STRUCT || type == Types.JAVA_OBJECT);\n     }\n \n-    public static SerialDatalink[] processObject(URL[] elements)\n+    public static SerialDatalink[] processDatalink(Object[] elements)\n             throws SerialException {\n         SerialDatalink[] ret = new SerialDatalink[elements.length];\n         for (int i = 0; i < elements.length; i++) {\n-            ret[i] = new SerialDatalink(elements[i]);\n+            ret[i] = new SerialDatalink((URL)elements[i]);\n         }\n         return ret;\n     }\n \n-    public static Struct[] processObject(Struct[] elements)\n+    public static Struct[] processStruct(Object[] elements)\n             throws SerialException {\n         Struct[] ret = new Struct[elements.length];\n         for (int i = 0; i < elements.length; i++) {\n-            ret[i] = elements[i];\n+            ret[i] = (Struct)elements[i];\n         }\n         return ret;\n     }\n \n-    public static Array[] processObject(Array[] elements)\n+    public static Array[] processArray(Object[] elements)\n             throws SerialException {\n         Array[] ret = new Array[elements.length];\n         for (int i = 0; i < elements.length; i++) {\n-            ret[i] = elements[i];\n+            ret[i] = (Array)elements[i];\n         }\n         return ret;\n     }\n \n-    public static Clob[] processObject(Clob[] elements) throws SerialException {\n+    public static Clob[] processClob(Object[] elements) throws SQLException {\n         Clob[] ret = new Clob[elements.length];\n         for (int i = 0; i < elements.length; i++) {\n-            ret[i] = elements[i];\n+            ret[i] = new SerialClob((Clob)elements[i]);\n         }\n         return ret;\n     }\n \n-    public static Blob[] processObject(Blob[] elements) throws SerialException {\n+    public static Blob[] processBlob(Object[] elements) throws SQLException {\n         Blob[] ret = new Blob[elements.length];\n         for (int i = 0; i < elements.length; i++) {\n-            ret[i] = elements[i];\n+            ret[i] = new SerialBlob((Blob)elements[i]);\n         }\n         return ret;\n     }\n@@ -89,3 +90,4 @@ public static boolean isDefault(int type) {\n         return ret;\n     }\n }\n+",
                "deletions": 10
            },
            {
                "sha": "2796fad51ee5038d6bdd3687e9ff7808934e6bd8",
                "filename": "modules/sql/src/main/java/javax/sql/rowset/serial/SerialArray.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/main/java/javax/sql/rowset/serial/SerialArray.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/main/java/javax/sql/rowset/serial/SerialArray.java",
                "status": "modified",
                "changes": 104,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/main/java/javax/sql/rowset/serial/SerialArray.java?ref=70955643fb9c6d864677cc503d83846f521b4a80",
                "patch": "@@ -18,13 +18,9 @@\n package javax.sql.rowset.serial;\n \n import java.io.Serializable;\n-import java.net.URL;\n import java.sql.Array;\n-import java.sql.Blob;\n-import java.sql.Clob;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n-import java.sql.Struct;\n import java.sql.Types;\n import java.util.Map;\n \n@@ -62,51 +58,74 @@\n     public SerialArray(Array array, Map<String, Class<?>> map)\n             throws SerialException, SQLException {\n         if (null == array || null == array.getArray() || null == map) {\n-            throw new SQLException(Messages.getString(\"sql.39\"));\n+            throw new SQLException(Messages.getString(\"sql.39\")); //$NON-NLS-1$\n         }\n         baseType = array.getBaseType();\n         baseTypeName = array.getBaseTypeName();\n         Object[] element = (Object[]) array.getArray(map);\n-\n-        switch (baseType) {\n-        case Types.STRUCT:\n-            elements = DefaultUDTMap.processObject((Struct[])element);\n-            break;\n-        case Types.ARRAY:\n-            elements = DefaultUDTMap.processObject((Array[])element);\n-            break;\n-        case Types.CLOB:\n-            elements = DefaultUDTMap.processObject((Clob[])element);\n-            break;\n-        case Types.BLOB:\n-            elements = DefaultUDTMap.processObject((Blob[])element);\n-            break;\n-        case Types.DATALINK:\n-            elements = DefaultUDTMap.processObject((URL[])element);\n-            break;\n-        case Types.JAVA_OBJECT:\n-            elements = DefaultUDTMap.processObject(element);\n-            break;\n-        default:\n-            elements = new Object[element.length];\n-            for (int i = 0; i < element.length; i++) {\n-                elements[i] = element[i];\n-            }\n+        if (element.length == 0) {\n+            elements = new Object[0];\n+        } else {\n+            transferElements(baseType, element);\n         }\n     }\n+    \n+    /**\n+\t * Transfers primitive objects to SerialXXX objects according to the given\n+\t * type.\n+     * @throws SQLException \n+\t */\n+    private void transferElements(int type, Object[] element) throws SQLException {\n+    \tswitch (type) {\n+\t\tcase Types.STRUCT:\n+\t\t\telements = DefaultUDTMap.processStruct(element);\n+\t\t\tbreak;\n+\t\tcase Types.ARRAY:\n+\t\t\telements = DefaultUDTMap.processArray(element);\n+\t\t\tbreak;\n+\t\tcase Types.CLOB:\n+\t\t\telements = DefaultUDTMap.processClob(element);\n+\t\t\tbreak;\n+\t\tcase Types.BLOB:\n+\t\t\telements = DefaultUDTMap.processBlob(element);\n+\t\t\tbreak;\n+\t\tcase Types.DATALINK:\n+\t\t\telements = DefaultUDTMap.processDatalink(element);\n+\t\t\tbreak;\n+\t\tcase Types.JAVA_OBJECT:\n+\t\t\telements = DefaultUDTMap.processObject(element);\n+\t\t\tbreak;\n+\t\tdefault:\n+\t\t\telements = new Object[element.length];\n+\t\t\tfor (int i = 0; i < element.length; i++) {\n+\t\t\t\telements[i] = element[i];\n+\t\t\t}\n+\t\t}\n+    }\n \n     /**\n-     * The constructor\n-     * \n-     * @param array\n-     *            array to be serializated\n-     * @throws SerialException\n-     *             when any error occurs during serializing\n-     * @throws SQLException\n-     *             if array is null\n-     */\n+\t * The constructor\n+\t * \n+\t * @param array\n+\t *            array to be serializated\n+\t * @throws SerialException\n+\t *             when any error occurs during serializing\n+\t * @throws SQLException\n+\t *             if array is null\n+\t */\n     public SerialArray(Array array) throws SerialException, SQLException {\n-        this(array, DefaultUDTMap.DEFAULTMAP);\n+    \tif (null == array || null == array.getArray()) {\n+            throw new SQLException(Messages.getString(\"sql.39\")); //$NON-NLS-1$\n+        }\n+        baseType = array.getBaseType();\n+        baseTypeName = array.getBaseTypeName();\n+        \n+        Object[] element = (Object[]) array.getArray();\n+        if (element.length == 0) {\n+            elements = new Object[0];\n+        } else {\n+            transferElements(baseType, element);\n+        }\n     }\n \n     /**\n@@ -136,7 +155,7 @@ public Object getArray() throws SerialException {\n      */\n     public Object getArray(long index, int count) throws SerialException {\n         if (index < 0 || count + index > elements.length) {\n-            throw new SerialException(\"Illegal Argument\");\n+            throw new SerialException(Messages.getString(\"sql.42\")); //$NON-NLS-1$\n         }\n         Object[] ret = new Object[count];\n         System.arraycopy(elements, (int) index, ret, 0, count);\n@@ -160,7 +179,7 @@ public Object getArray(long index, int count) throws SerialException {\n     public Object getArray(long index, int count, Map<String, Class<?>> map)\n             throws SerialException {\n         if (index < 0 || count + index > elements.length ) {\n-            throw new SerialException(Messages.getString(\"sql.40\"));\n+            throw new SerialException(Messages.getString(\"sql.40\")); //$NON-NLS-1$\n         }\n         Object[] ret = new Object[count];\n         System.arraycopy(elements, (int) index, ret, 0, count);\n@@ -264,5 +283,4 @@ public ResultSet getResultSet(Map<String, Class<?>> map)\n             throws SerialException {\n         throw new UnsupportedOperationException();\n     }\n-\n }",
                "deletions": 43
            },
            {
                "sha": "8c53e06c85490210b7fea9367fab21773647ec7d",
                "filename": "modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SerialArrayTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SerialArrayTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/70955643fb9c6d864677cc503d83846f521b4a80/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SerialArrayTest.java",
                "status": "modified",
                "changes": 61,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/test/java/org/apache/harmony/sql/tests/javax/sql/rowset/serial/SerialArrayTest.java?ref=70955643fb9c6d864677cc503d83846f521b4a80",
                "patch": "@@ -27,6 +27,7 @@\n import java.util.Map;\n \n import javax.sql.rowset.serial.SerialArray;\n+import javax.sql.rowset.serial.SerialClob;\n import javax.sql.rowset.serial.SerialException;\n \n import junit.framework.TestCase;\n@@ -60,6 +61,8 @@ protected void setUp() throws Exception {\n     }\n \n     public void testConstructor_ObjectArray() throws SQLException {\n+        assertNotNull(new SerialArray(new SQLArray()));\n+\n         // OK\n         sa = new SerialArray(mock);\n         // array.getArray should not return null\n@@ -384,4 +387,62 @@ public void writeSQL(SQLOutput stream) throws SQLException {\n             return;\n         }\n     }\n+    \n+    private static class SQLArray implements java.sql.Array {\n+\n+        Object[] array;\n+\n+        SQLArray() throws SQLException {\n+\n+            char[] chars = { 'a', 'b', 'c', 'd' };\n+            array = new Object[1];\n+\n+            array[0] = (Object) new SerialClob(chars);\n+        }\n+\n+        public Object getArray() {\n+            return array;\n+        }\n+\n+        public int getBaseType() {\n+            return java.sql.Types.CLOB;\n+        }\n+\n+        /** Everything below here is just supplied to satisfy\n+         the interface and is not part of this testcase.\n+         **/\n+\n+        public Object getArray(long index, int count) {\n+            return null;\n+        }\n+\n+        public Object getArray(long index, int count, Map<String, Class<?>> map) {\n+            return null;\n+        }\n+\n+        public Object getArray(Map<String, Class<?>> map) {\n+            return null;\n+        }\n+\n+        public String getBaseTypeName() {\n+            return null;\n+        }\n+\n+        public ResultSet getResultSet() {\n+            return null;\n+        }\n+\n+        public ResultSet getResultSet(long index, int count) {\n+            return null;\n+        }\n+\n+        public ResultSet getResultSet(Map<String, Class<?>> map) {\n+            return null;\n+        }\n+\n+        public ResultSet getResultSet(long index, int count,\n+                Map<String, Class<?>> map) {\n+            return null;\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-3332 ([classlib][luni]URLClassLoader throws NullPointerException while load an implementation class of a security provider in a jar which is signed.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@520360 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/af57ccc3a0c89e7b0ca82567162f259753df7a28",
        "parent": "https://github.com/apache/harmony-classlib/commit/1a1de553e47793a76d3c64e0758bacdd28985721",
        "bug_id": "harmony-classlib_59",
        "file": [
            {
                "sha": "bc8bb401e0b425ac26b9d1d1c2a1b5c804c73f1f",
                "filename": "modules/archive/src/main/java/java/util/jar/JarVerifier.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/archive/src/main/java/java/util/jar/JarVerifier.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/archive/src/main/java/java/util/jar/JarVerifier.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/archive/src/main/java/java/util/jar/JarVerifier.java?ref=af57ccc3a0c89e7b0ca82567162f259753df7a28",
                "patch": "@@ -273,6 +273,13 @@ private void verifyCertificate(String certFile) {\n             Certificate[] signerCertChain = JarUtils.verifySignature(\n                     new ByteArrayInputStream(sfBytes),\n                     new ByteArrayInputStream(sBlockBytes));\n+            /*\n+             * Recursive call in loading security provider related class which\n+             * is in a signed jar. \n+             */\n+            if (null == metaEntries) {\n+                return;\n+            }\n             if (signerCertChain != null) {\n                 certificates.put(signatureFile, signerCertChain);\n             }",
                "deletions": 0
            },
            {
                "sha": "3f8525409aac754639be371f01271a36d3fbc4f2",
                "filename": "modules/luni/src/main/java/java/net/URLClassLoader.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/luni/src/main/java/java/net/URLClassLoader.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/luni/src/main/java/java/net/URLClassLoader.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URLClassLoader.java?ref=af57ccc3a0c89e7b0ca82567162f259753df7a28",
                "patch": "@@ -1086,6 +1086,16 @@ private URL targetURL(URL base, String name) throws MalformedURLException {\n                         if (entry != null) {\n                             readAvailable = true;\n                             is = jf.getInputStream(entry);\n+                            /**\n+                             * Avoid recursive load class, especially the class\n+                             * is an implementation class of security provider\n+                             * and the jar is signed.\n+                             */\n+                            Class loadedClass = findLoadedClass(clsName);\n+                            if (null != loadedClass) {\n+                                is.close();\n+                                return loadedClass;\n+                            }\n                             manifest = jf.getManifest();\n                         }\n                     } else if (protocol.equals(\"file\")) { //$NON-NLS-1$",
                "deletions": 0
            },
            {
                "sha": "735e2c6bda444dae5c80865926a4554e5cdf7e5b",
                "filename": "modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ClassTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ClassTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af57ccc3a0c89e7b0ca82567162f259753df7a28/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ClassTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ClassTest.java?ref=af57ccc3a0c89e7b0ca82567162f259753df7a28",
                "patch": "@@ -36,6 +36,7 @@\n import java.security.Permission;\n import java.security.PrivilegedAction;\n import java.security.ProtectionDomain;\n+import java.security.Security;\n import java.util.Arrays;\n import java.util.List;\n import java.util.Vector;\n@@ -158,6 +159,14 @@ public void test_forNameLjava_lang_String() throws Exception {\n             fail(\"should throw ClassNotFoundException.\");\n         } catch (ClassNotFoundException e) {\n         }\n+        \n+        //Regression Test for HARMONY-3332\n+        String securityProviderClassName;\n+        int count = 1;\n+        while ((securityProviderClassName = Security\n+                .getProperty(\"security.provider.\" + count++)) != null) {\n+            Class.forName(securityProviderClassName);\n+        }       \n     }\n \n     /**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1804 \"[classlib][swing] javax.swing.plaf.basic.BasicTabbedPaneUI.paint(Graphics g, JComponent c) does not throw NullPointerException when g is null while RI does\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@517707 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c",
        "parent": "https://github.com/apache/harmony-classlib/commit/5efa30c625fb34b108faafc02af30c63071a36cf",
        "bug_id": "harmony-classlib_60",
        "file": [
            {
                "sha": "e3e13414ec2abf1e5ef4d3bb206e25f71a1918f2",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java?ref=1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c",
                "patch": "@@ -1297,6 +1297,10 @@ protected void navigateSelectedTab(final int direction) {\n     }\n \n     public void paint(final Graphics g, final JComponent c) {\n+\tif (g == null) {\n+            throw new NullPointerException();\n+        }\n+\n         if (tabPane.getTabCount() == 0) {\n             return;\n         }",
                "deletions": 0
            },
            {
                "sha": "677041b20fa92de31c6ba466cbf489601b6506a7",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUITest.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUITest.java?ref=1a2c9fbd21d02a6303a92cf0f3bbe81cad31585c",
                "patch": "@@ -34,6 +34,7 @@\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JTabbedPane;\n+import javax.swing.JToolBar;\n import javax.swing.SwingConstants;\n import javax.swing.SwingUtilities;\n import javax.swing.UIManager;\n@@ -543,7 +544,14 @@ public void testNavigateSelectedTab() {\n     }\n \n     public void testPaintGraphicsJComponent() {\n-        // Note: painting code, cannot test\n+        BasicTabbedPaneUI localBasicTabbedPaneUI = new BasicTabbedPaneUI(); \n+        localBasicTabbedPaneUI.installUI(new JTabbedPane());\n+        try { \n+            localBasicTabbedPaneUI.paint(null, new JToolBar()); \n+            fail(\"NPE is not thrown\"); \n+        } catch (NullPointerException e) {\n+            // PASSED\n+        } \n     }\n \n     public void testPaintContentBorder() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Unit test for HARMONY-1817 \"[classlib][swing] javax.swing.text.html.HTMLEditorKit.createInputAttributes(Element element,MutableAttributeSet set) does not throw NullPointerException when RI does\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@500820 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/65fa94069a8066ebcbb2219153ccf56667b583d9",
        "parent": "https://github.com/apache/harmony-classlib/commit/cd47ad384797a8fe626aff800a91529972186f9c",
        "bug_id": "harmony-classlib_61",
        "file": [
            {
                "sha": "251c609551c0f8f26c8ae68427103f237172c889",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/html/HTMLEditorKitTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/65fa94069a8066ebcbb2219153ccf56667b583d9/modules/swing/src/test/api/java/common/javax/swing/text/html/HTMLEditorKitTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/65fa94069a8066ebcbb2219153ccf56667b583d9/modules/swing/src/test/api/java/common/javax/swing/text/html/HTMLEditorKitTest.java",
                "status": "added",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/html/HTMLEditorKitTest.java?ref=65fa94069a8066ebcbb2219153ccf56667b583d9",
                "patch": "@@ -0,0 +1,77 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+/**\n+ * @author Aleksey V. Yantsen\n+ * @version $Revision$\n+ */\n+package javax.swing.text.html;\n+\n+import javax.swing.BasicSwingTestCase;\n+import javax.swing.text.Element;\n+import javax.swing.text.MutableAttributeSet;\n+import javax.swing.text.SimpleAttributeSet;\n+import javax.swing.text.html.HTMLDocument;\n+import javax.swing.text.html.HTMLEditorKit;\n+import junit.framework.TestCase;\n+\n+/**\n+ * Tests functionality of HTMLEditorKit class.\n+ *\n+ */\n+public class HTMLEditorKitTest extends TestCase {\n+\n+\tclass MyHTMLEditorKit extends HTMLEditorKit {\n+\t\tpublic void createInputAttributes(Element element,\n+\t            MutableAttributeSet set) {\n+\t\t\tsuper.createInputAttributes(element, set);\n+\t\t}\n+\t}\n+\n+    /**\n+     * Check that method throws NPE if element == null\n+     */\n+\tpublic void testcreateInputAttributes01() {\n+\t\tMyHTMLEditorKit kit = new MyHTMLEditorKit();\n+\t\tElement element = null;\n+\t\tMutableAttributeSet set = new SimpleAttributeSet();\n+\t\t\n+\t\ttry {\n+\t\t\tkit.createInputAttributes(element, set);\n+\t\t\tfail(\"NullPointerException not thrown!\");\n+\t\t} catch (NullPointerException e) {\n+\t\t\t// expected exception\n+\t\t}\n+\t}\n+\n+    /**\n+     * Check that method throws NPE if set == null\n+     */\n+\tpublic void testcreateInputAttributes02() {\n+\t\tMyHTMLEditorKit kit = new MyHTMLEditorKit();\n+\t\tHTMLDocument doc = new HTMLDocument();\n+\t\tElement element = doc.getDefaultRootElement();\n+\t\tMutableAttributeSet set = null;\n+\t\t\n+\t\ttry {\n+\t\t\tkit.createInputAttributes(element, set);\n+\t\t\tfail(\"NullPointerException not thrown!\");\n+\t\t} catch (NullPointerException e) {\n+\t\t\t// expected exception\n+\t\t}\n+\t}\n+}\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Evaluation for HARMONY-2724:\n[classlib][security]AlgorithmParameters.init(byte[] params, String spec) throws NullPointerException while spec is Null on Harmony while not on RI.\n\nAdded a separate test case for AlgorithmParameters.void init(byte[] params, String format)\nRemoved duplicated testing\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488558 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/4d91c1436bcaacfe63572ae77c6efa786b0818c4",
        "parent": "https://github.com/apache/harmony-classlib/commit/644ece06495a3482cfb9eb94b2eb576fe2f5532f",
        "bug_id": "harmony-classlib_62",
        "file": [
            {
                "sha": "d6d8e494144fa266844dd2e1aa7831722b06a1a1",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/4d91c1436bcaacfe63572ae77c6efa786b0818c4/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/4d91c1436bcaacfe63572ae77c6efa786b0818c4/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "status": "modified",
                "changes": 80,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java?ref=4d91c1436bcaacfe63572ae77c6efa786b0818c4",
                "patch": "@@ -282,7 +282,6 @@ public void test_getInstanceLjava_lang_StringLjava_security_Provider()\n         checkUnititialized(ap);\n \n         ap.init(new byte[6], \"aaa\");\n-        assertTrue(\"init() failed\", MyAlgorithmParameters.runEngineInit3);\n \n         try {\n             ap.init(new MyAlgorithmParameterSpec());\n@@ -377,6 +376,82 @@ protected void engineInit(byte[] params) throws IOException {\n         assertTrue(paramSpi.runEngineInitB$);\n     }\n \n+    /**\n+     * @tests java.security.AlgorithmParameters#init(byte[],String)\n+     */\n+    public void test_init$BLjava_lang_String() throws Exception {\n+\n+        //\n+        // test: corresponding spi method is invoked\n+        //\n+        final byte[] enc = new byte[] { 0x02, 0x01, 0x03 };\n+        final String strFormatParam = \"format\";\n+\n+        MyAlgorithmParameters paramSpi = new MyAlgorithmParameters() {\n+            protected void engineInit(byte[] params, String format)\n+                    throws IOException {\n+\n+                runEngineInitB$String = true;\n+                assertSame(enc, params);\n+                assertSame(strFormatParam, format);\n+            }\n+        };\n+\n+        AlgorithmParameters params = new DummyAlgorithmParameters(paramSpi, p,\n+                \"algorithm\");\n+\n+        params.init(enc, strFormatParam);\n+        assertTrue(paramSpi.runEngineInitB$String);\n+\n+        //\n+        // test: IOException if already initialized\n+        //\n+        try {\n+            params.init(enc, strFormatParam);\n+            fail(\"No expected IOException\");\n+        } catch (IOException e) {\n+            // expected\n+        }\n+\n+        params = new DummyAlgorithmParameters(paramSpi, p, \"algorithm\");\n+        params.init(new MyAlgorithmParameterSpec());\n+        try {\n+            params.init(enc, strFormatParam);\n+            fail(\"No expected IOException\");\n+        } catch (IOException e) {\n+            // expected\n+        }\n+\n+        params = new DummyAlgorithmParameters(paramSpi, p, \"algorithm\");\n+        params.init(enc);\n+        try {\n+            params.init(enc, strFormatParam);\n+            fail(\"No expected IOException\");\n+        } catch (IOException e) {\n+            // expected\n+        }\n+\n+        //\n+        // test: if params and format are null\n+        //\n+        paramSpi = new MyAlgorithmParameters() {\n+\n+            protected void engineInit(byte[] params, String format)\n+                    throws IOException {\n+\n+                runEngineInitB$String = true;\n+\n+                // null is passed to spi-provider\n+                assertNull(params);\n+                assertNull(format);\n+            }\n+        };\n+\n+        params = new DummyAlgorithmParameters(paramSpi, p, \"algorithm\");\n+        params.init(null, null);\n+        assertTrue(paramSpi.runEngineInitB$String);\n+    }\n+\n \tprivate void checkUnititialized(AlgorithmParameters ap) {\n         assertNull(\"Unititialized: toString() failed\", ap.toString());\n \t}\n@@ -417,7 +492,7 @@ public DummyAlgorithmParameters(AlgorithmParametersSpi paramSpi,\n \n         public boolean runEngineInitB$ = false;\n \n-        public static boolean runEngineInit3 = false;\n+        public boolean runEngineInitB$String = false;\n \n         public static boolean runEngineToString = false;\n \n@@ -431,7 +506,6 @@ protected void engineInit(byte[] params) throws IOException {\n \n         protected void engineInit(byte[] params, String format)\n                 throws IOException {\n-            runEngineInit3 = true;\n         }\n \n         protected AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec)",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Evaluation for HARMONY-2733:\n[java][security]AlgorithmParameters.getParamterSpec should throw NullPointerException if the input AlgorithmSpec class is null.\n\nAdded a separate test case for AlgorithmParameters.getParameterSpec(Class<T> paramSpec)\nRemoved duplicated testing\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488533 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/eb148b936456e29f5b629a38b0901fc04d65efe7",
        "parent": "https://github.com/apache/harmony-classlib/commit/309c8bbc7bc233792cd212f01943e23467837093",
        "bug_id": "harmony-classlib_63",
        "file": [
            {
                "sha": "456efba3b7f422c8c525513276cf7c5cdc24eb9f",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/eb148b936456e29f5b629a38b0901fc04d65efe7/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/eb148b936456e29f5b629a38b0901fc04d65efe7/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "status": "modified",
                "changes": 76,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java?ref=eb148b936456e29f5b629a38b0901fc04d65efe7",
                "patch": "@@ -23,13 +23,11 @@\n package org.apache.harmony.security.tests.java.security;\n \n import java.io.IOException;\n-import java.math.BigInteger;\n import java.security.AlgorithmParameters;\n import java.security.AlgorithmParametersSpi;\n import java.security.Provider;\n import java.security.Security;\n import java.security.spec.AlgorithmParameterSpec;\n-import java.security.spec.DSAParameterSpec;\n import java.security.spec.InvalidParameterSpecException;\n \n import junit.framework.TestCase;\n@@ -214,6 +212,64 @@ public void test_getInstanceLjava_lang_StringLjava_lang_String()\n         checkAP(ap, p);\n     }\n \n+    /**\n+     * @tests java.security.AlgorithmParameters#getParameterSpec(Class)\n+     */\n+    public void test_getParameterSpecLjava_lang_Class() throws Exception {\n+\n+        final MyAlgorithmParameterSpec myParamSpec = new MyAlgorithmParameterSpec();\n+\n+        MyAlgorithmParameters paramSpi = new MyAlgorithmParameters() {\n+            protected AlgorithmParameterSpec engineGetParameterSpec(\n+                    Class paramSpec) {\n+                return myParamSpec;\n+            }\n+        };\n+\n+        AlgorithmParameters params = new DummyAlgorithmParameters(paramSpi, p,\n+                \"algorithm\");\n+\n+        //\n+        // test: InvalidParameterSpecException if not initialized\n+        //\n+        try {\n+            params.getParameterSpec(null);\n+            fail(\"No expected InvalidParameterSpecException\");\n+        } catch (InvalidParameterSpecException e) {\n+            // expected\n+        }\n+        try {\n+            params.getParameterSpec(MyAlgorithmParameterSpec.class);\n+            fail(\"No expected InvalidParameterSpecException\");\n+        } catch (InvalidParameterSpecException e) {\n+            // expected\n+        }\n+\n+        //\n+        // test: corresponding spi method is invoked\n+        //\n+        params.init(new MyAlgorithmParameterSpec());\n+        assertSame(myParamSpec, params\n+                .getParameterSpec(MyAlgorithmParameterSpec.class));\n+\n+        //\n+        // test: if paramSpec is null\n+        //\n+        paramSpi = new MyAlgorithmParameters() {\n+\n+            protected AlgorithmParameterSpec engineGetParameterSpec(\n+                    Class paramSpec) {\n+                assertNull(paramSpec); // null is passed to spi-provider\n+                return null;\n+            }\n+        };\n+\n+        params = new DummyAlgorithmParameters(paramSpi, p, \"algorithm\");\n+        params.init(new MyAlgorithmParameterSpec());\n+        assertNull(params.getParameterSpec(null));\n+\n+    }\n+\n     /**\n      * @tests java.security.AlgorithmParameters#getInstance(String, Provider)\n      */\n@@ -254,13 +310,6 @@ public void test_getProvider() throws Exception {\n     }\n \n \tprivate void checkUnititialized(AlgorithmParameters ap) {\n-\t\ttry {\n-\t\t    //make it compilable on 1.5\n-\t\t\tap.getParameterSpec((Class<AlgorithmParameterSpec>)new Object().getClass());\n-\t\t\tfail(\"getParameterSpec(): No expected InvalidParameterSpecException\");\n-\t\t} catch (java.security.spec.InvalidParameterSpecException e) {\n-\t\t}\n-\t\t\n         assertNull(\"Unititialized: toString() failed\", ap.toString());\n \t}\n \t\n@@ -269,12 +318,6 @@ private void checkAP(AlgorithmParameters ap, Provider p) throws Exception {\n         assertSame(\"getProvider() failed\", p, ap.getProvider());\n         assertEquals(\"getAlgorithm() failed\", \"ABC\", ap.getAlgorithm());\n \n-        //make it compilable on 1.5\n-        ap.getParameterSpec((Class<AlgorithmParameterSpec>) new Object()\n-                .getClass());\n-        assertTrue(\"getParameterSpec() failed\",\n-                MyAlgorithmParameters.runEngineGetParameterSpec);\n-\n         assertEquals(\"AlgorithmParameters\", ap.toString());\n         assertTrue(\"toString() failed\", MyAlgorithmParameters.runEngineToString);\n     }\n@@ -308,8 +351,6 @@ public DummyAlgorithmParameters(AlgorithmParametersSpi paramSpi,\n \n         public static boolean runEngineInit3 = false;\n \n-        public static boolean runEngineGetParameterSpec = false;\n-\n         public static boolean runEngineToString = false;\n \n         protected void engineInit(AlgorithmParameterSpec paramSpec)\n@@ -328,7 +369,6 @@ protected void engineInit(byte[] params, String format)\n \n         protected AlgorithmParameterSpec engineGetParameterSpec(Class paramSpec)\n                 throws InvalidParameterSpecException {\n-            runEngineGetParameterSpec = true;\n             return null;\n         }\n ",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Evaluation for HARMONY-2680:\n[classlib][security]AlgorithmParameters.getEncoded(null) throws NullPointerException on Harmony but not on RI\n\nAdded test for AlgorithmParameters.getEncoded(null).\nIt verifies that null value is passed to spi-provider\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@487518 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/eaa8350704ea37dc71fab561cfafad73fc6fd28a",
        "parent": "https://github.com/apache/harmony-classlib/commit/836971825a9aca2c49f871fe88cf2a26aa4622cf",
        "bug_id": "harmony-classlib_64",
        "file": [
            {
                "sha": "d80c4e3318d7b48cee2c2edac1354fdc81783d84",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/eaa8350704ea37dc71fab561cfafad73fc6fd28a/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/eaa8350704ea37dc71fab561cfafad73fc6fd28a/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/AlgorithmParametersTest.java?ref=eaa8350704ea37dc71fab561cfafad73fc6fd28a",
                "patch": "@@ -144,6 +144,20 @@ public void test_getEncodedLjava_lang_String() throws Exception {\n         //\n         params.init(new MyAlgorithmParameterSpec());\n         assertSame(enc, params.getEncoded(strFormatParam));\n+        \n+        //\n+        // test: if format param is null\n+        //\n+        paramSpi = new MyAlgorithmParameters() {\n+            protected byte[] engineGetEncoded(String format) throws IOException {\n+                assertNull(format); // null is passed to spi-provider\n+                return enc;\n+            }\n+        };\n+\n+        params = new DummyAlgorithmParameters(paramSpi, p, \"algorithm\");\n+        params.init(new MyAlgorithmParameterSpec());\n+        assertSame(enc, params.getEncoded(null));\n     }\n \n \t/**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix and regression tests for HARMONY-2487\n([classlib][security] java.security.cert.X509CertSelector.addSubjectAlternativeName(int, null) throws IOException while RI throws NullPointerException (RI compatibility issue))\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@483841 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e362d2ec1a685b7a8f63595853f63e66df0c0e7c",
        "parent": "https://github.com/apache/harmony-classlib/commit/1f13e029317163d86871c622857c38c76846ad14",
        "bug_id": "harmony-classlib_65",
        "file": [
            {
                "sha": "bf05ec09af770e0e65fae124a2d8a0ce415e3c02",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/x509/GeneralName.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e362d2ec1a685b7a8f63595853f63e66df0c0e7c/modules/security/src/main/java/common/org/apache/harmony/security/x509/GeneralName.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e362d2ec1a685b7a8f63595853f63e66df0c0e7c/modules/security/src/main/java/common/org/apache/harmony/security/x509/GeneralName.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/x509/GeneralName.java?ref=e362d2ec1a685b7a8f63595853f63e66df0c0e7c",
                "patch": "@@ -250,7 +250,7 @@ public GeneralName(byte[] name) throws IllegalArgumentException {\n     public GeneralName(int tag, byte[] name) \n                                     throws IOException {\n         if (name == null) {\n-            throw new IOException(Messages.getString(\"security.28\")); //$NON-NLS-1$\n+            throw new NullPointerException(Messages.getString(\"security.28\")); //$NON-NLS-1$\n         }\n         if ((tag < 0) || (tag > 8)) {\n             throw new IOException(Messages.getString(\"security.183\", tag)); //$NON-NLS-1$",
                "deletions": 1
            },
            {
                "sha": "8ef0733b18be7d3fff850714dd30b6541e456251",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e362d2ec1a685b7a8f63595853f63e66df0c0e7c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e362d2ec1a685b7a8f63595853f63e66df0c0e7c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "status": "modified",
                "changes": 42,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java?ref=e362d2ec1a685b7a8f63595853f63e66df0c0e7c",
                "patch": "@@ -28,9 +28,25 @@\n public class X509CertSelectorTest extends TestCase {\n \n     /**\n-     * @tests addSubjectAlternativeName(int type, String name)\n+     * @tests java.security.cert.X509CertSelector#addSubjectAlternativeName(int, byte[])\n      */\n-    public void testAddSubjectAlternativeName() {\n+    public void test_addSubjectAlternativeNameLintLbyte_array() throws IOException {\n+        // Regression for HARMONY-2487\n+        int[] types = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };\n+        for (int i = 0; i < types.length; i++) {\n+            try {\n+                new X509CertSelector().addSubjectAlternativeName(types[i],\n+                        (byte[]) null);\n+                fail(\"No expected NullPointerException for type: \" + i);\n+            } catch (NullPointerException e) {\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @tests java.security.cert.X509CertSelector#addSubjectAlternativeName(int, String)\n+     */\n+    public void test_addSubjectAlternativeNameLintLjava_lang_String() {\n         // Regression for HARMONY-727\n         int[] types = { 0, 2, 3, 4, 5, 6, 7, 8 };\n         for (int i = 0; i < types.length; i++) {\n@@ -42,11 +58,26 @@ public void testAddSubjectAlternativeName() {\n             }\n         }\n     }\n-    \n+\n     /**\n-     * @tests addPathToName(int type, String name)\n+     * @tests java.security.cert.X509CertSelector#addPathToName(int, byte[])\n      */\n-    public void testAddPathToName() {\n+    public void test_addPathToNameLintLbyte_array() throws IOException {\n+        // Regression for HARMONY-2487\n+        int[] types = { 0, 1, 2, 3, 4, 5, 6, 7, 8 };\n+        for (int i = 0; i < types.length; i++) {\n+            try {\n+                new X509CertSelector().addPathToName(types[i], (byte[]) null);\n+                fail(\"No expected NullPointerException for type: \" + i);\n+            } catch (NullPointerException e) {\n+            }\n+        }\n+    }\n+\n+    /**\n+     * @tests java.security.cert.X509CertSelector#addPathToName(int, String)\n+     */\n+    public void test_addPathToNameLintLjava_lang_String() {\n         // Regression for HARMONY-724\n         for (int type = 0; type <= 8; type++) {\n             try {\n@@ -57,5 +88,4 @@ public void testAddPathToName() {\n             }\n         }\n     }\n-\n }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2356 ([classlib][luni]The Map from System.getEnv should throw NullPointerException while get(null) and is not modifiable.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@480871 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a27dffc81fba790b641d88cd83a7852ea595b440",
        "parent": "https://github.com/apache/harmony-classlib/commit/b64e2f75abdb90f786406918a2a4cc713485ea0a",
        "bug_id": "harmony-classlib_66",
        "file": [
            {
                "sha": "1b66bc0e3d1a079c867c2e89580f13ceb081990f",
                "filename": "modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "status": "modified",
                "changes": 27,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/lang/ProcessBuilder.java?ref=a27dffc81fba790b641d88cd83a7852ea595b440",
                "patch": "@@ -19,7 +19,6 @@\n import java.io.File;\n import java.io.IOException;\n import java.util.Arrays;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n \n@@ -66,7 +65,7 @@ public ProcessBuilder(List<String> command) {\n             throw new NullPointerException();\n         }\n         this.command = command;\n-        this.environment = new ProcessHashMap<String, String>(System.getenv());\n+        this.environment = new org.apache.harmony.luni.platform.Environment.EnvironmentMap(System.getenv());\n     }\n \n     /**\n@@ -216,29 +215,5 @@ public Process start() throws IOException {\n         // TODO implement support for redirectErrorStream\n         return process;\n     }\n-    \n-    private static class ProcessHashMap<K, V> extends HashMap<K, V> {\n-\n-        public ProcessHashMap(Map<K, V> env) {\n-            super(env);\n-        }\n-        @Override\n-        public V put(K key, V value) {\n-            if(key == null || value == null){\n-                throw new NullPointerException();\n-            }\n-            return super.put(key, value);\n-        }\n-        @Override\n-        public V get(Object key) {\n-            if(key == null){\n-                throw new NullPointerException();\n-            }\n-            if(!(key instanceof String)){\n-                throw new ClassCastException(key.getClass().getName());\n-            }\n-            return super.get(key);\n-        }\n-    }\n }\n ",
                "deletions": 26
            },
            {
                "sha": "b49ca302eb451dd1db8fc4bc3cc5c9aebe344b63",
                "filename": "modules/luni/src/main/java/org/apache/harmony/luni/platform/Environment.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/main/java/org/apache/harmony/luni/platform/Environment.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/main/java/org/apache/harmony/luni/platform/Environment.java",
                "status": "modified",
                "changes": 140,
                "additions": 95,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/org/apache/harmony/luni/platform/Environment.java?ref=a27dffc81fba790b641d88cd83a7852ea595b440",
                "patch": "@@ -16,6 +16,7 @@\n \n package org.apache.harmony.luni.platform;\n \n+import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n \n@@ -24,49 +25,98 @@\n  */\n public class Environment {\n \n-\tprivate static Map<String, String> envMap = null;\n-\n-\t/**\n-\t * Returns a Map of the current environment variables, containing key and\n-\t * value pairs.\n-\t * \n-\t * @return a Map containing the environment variables and their values\n-\t 1*/\n-\tpublic static Map<String, String> getenv() {\n-\t\tif (null == envMap) {\n-\t\t\tenvMap = new HashMap<String, String>();\n-\t\t\tbyte[] bytes = getEnvBytes();\n-\t\t\tif (bytes == null) {\n-\t\t\t\tthrow new Error(\"Failed to get environment variables.\");\n-\t\t\t}\n-\t\t\tString[] envStrings = new String(bytes).split(\"\\0\");\n-\t\t\tfor (int i = 0; i < envStrings.length; i++) {\n-\t\t\t\tint separator = envStrings[i].indexOf(\"=\");\n-\t\t\t\tenvMap.put(envStrings[i].substring(0, separator), envStrings[i]\n-\t\t\t\t\t\t.substring(separator + 1));\n-\t\t\t}\n-\t\t}\n-\t\treturn envMap;\n-\t}\n-\n-\t/**\n-\t * Returns a String containing the value of the specified name environment\n-\t * variable\n-\t * \n-\t * @param name -\n-\t *            the environment variable to get the value of\n-\t * \n-\t * @return the value of the environment variable specified\n-\t */\n-\tpublic static String getenv(String name) {\n-\t\tbyte[] env = getEnvByName(name.getBytes());\n-\t\tif (null == env) {\n-\t\t\treturn null;\n-\t\t}\n-\t\treturn new String(env);\n-\t}\n-\n-\tprivate static native byte[] getEnvBytes();\n-\n-\tprivate static native byte[] getEnvByName(byte[] name);\n+    private static Map<String, String> envMap = null;\n+\n+    /**\n+     * Returns a Map of the current environment variables, containing key and\n+     * value pairs.\n+     * \n+     * @return a Map containing the environment variables and their values\n+     */\n+    public static Map<String, String> getenv() {\n+        if (null == envMap) {\n+            HashMap<String, String> newEnvMap = new EnvironmentMap();\n+            byte[] bytes = getEnvBytes();\n+            if (bytes == null) {\n+                throw new Error(\"Failed to get environment variables.\");\n+            }\n+            String[] envStrings = new String(bytes).split(\"\\0\");\n+            for (int i = 0; i < envStrings.length; i++) {\n+                int separator = envStrings[i].indexOf(\"=\");\n+                newEnvMap.put(envStrings[i].substring(0, separator),\n+                        envStrings[i].substring(separator + 1));\n+            }\n+            envMap = Collections.unmodifiableMap(newEnvMap);\n+        }\n+        return envMap;\n+    }\n+\n+    /**\n+     * Returns a String containing the value of the specified name environment\n+     * variable\n+     * \n+     * @param name -\n+     *            the environment variable to get the value of\n+     * \n+     * @return the value of the environment variable specified\n+     */\n+    public static String getenv(String name) {\n+        byte[] env = getEnvByName(name.getBytes());\n+        if (null == env) {\n+            return null;\n+        }\n+        return new String(env);\n+    }\n+\n+    public static class EnvironmentMap extends HashMap<String, String> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public EnvironmentMap() {\n+            super();\n+        }\n+        \n+        public EnvironmentMap(Map<String, String> map) {\n+            super(map);\n+        }\n+\n+        public boolean containsKey(Object key) {\n+            checkParam(key);\n+            return super.containsKey(key);\n+        }\n+\n+        public boolean containsValue(Object value) {\n+            checkParam(value);\n+            return super.containsValue(value);\n+        }\n+\n+        public String get(Object key) {\n+            checkParam(key);\n+            return super.get(key);\n+        }\n+\n+        public String put(String key, String value) {\n+            checkParam(key);\n+            checkParam(value);\n+            return super.put(key, value);\n+        }\n+\n+        public String remove(Object key) {\n+            checkParam(key);\n+            return super.remove(key);\n+        }\n+\n+        private void checkParam(Object o) {\n+            if (null == o) {\n+                throw new NullPointerException();\n+            }\n+            if (!(o instanceof String)) {\n+                throw new ClassCastException();\n+            }\n+        }\n+    }\n+\n+    private static native byte[] getEnvBytes();\n+\n+    private static native byte[] getEnvByName(byte[] name);\n }",
                "deletions": 45
            },
            {
                "sha": "199b9108f0f9ab197b112fd2289ba2a6ce2be4ee",
                "filename": "modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/SystemTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/SystemTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a27dffc81fba790b641d88cd83a7852ea595b440/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/SystemTest.java",
                "status": "modified",
                "changes": 83,
                "additions": 83,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/SystemTest.java?ref=a27dffc81fba790b641d88cd83a7852ea595b440",
                "patch": "@@ -21,6 +21,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.InputStream;\n import java.io.PrintStream;\n+import java.util.Map;\n import java.util.Properties;\n \n public class SystemTest extends junit.framework.TestCase {\n@@ -299,6 +300,88 @@ public void test_setPropertiesLjava_util_Properties() {\n \t\t\tSystem.setProperties(orgProps);\n \t\t}\n \t}\n+    \n+    //Regression Test for Harmony-2356\n+    public void testEnvUnmodifiable() {\n+        Map map = System.getenv();\n+        try {\n+            map.containsKey(null);\n+            fail(\"Should throw NullPointerExcepiton.\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.containsKey(new Integer(10));\n+            fail(\"Should throw ClassCastException.\");\n+        } catch (ClassCastException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.containsValue(null);\n+            fail(\"Should throw NullPointerExcepiton.\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.containsValue(new Integer(10));\n+            fail(\"Should throw ClassCastException.\");\n+        } catch (ClassCastException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.get(null);\n+            fail(\"Should throw NullPointerExcepiton.\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.get(new Integer(10));\n+            fail(\"Should throw ClassCastException.\");\n+        } catch (ClassCastException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(null, \"AAA\");\n+            fail(\"Should throw UnsupportedOperationExcepiton.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(\"AAA\", new Integer(10));\n+            fail(\"Should throw UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.put(\"AAA\", \"BBB\");\n+            fail(\"Should throw UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.clear();\n+            fail(\"Should throw UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+\n+        try {\n+            map.remove(null);\n+            fail(\"Should throw UnsupportedOperationException.\");\n+        } catch (UnsupportedOperationException e) {\n+            // expected\n+        }\n+\n+    }\n \n \t@Override\n     protected void setUp() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-1096([classlib][luni] java.io.PipedOutputStream.connect should throw NullPointerException) AND HARMONY-1099 ([classlib][io] java.io.PipedOutputStream.write(byte[], int, int) throws unexpected IndexOutOfBoundsException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@429672 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/4423cd29971aedc47a2064237a30dcc241902e99",
        "parent": "https://github.com/apache/harmony-classlib/commit/f6fac703033ca5283128da40e830d537e3f0fa0e",
        "bug_id": "harmony-classlib_67",
        "file": [
            {
                "sha": "9228b8ad1d1221f7bb7a5c41fb4471eddb30d3bb",
                "filename": "modules/luni/src/main/java/java/io/PipedOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/4423cd29971aedc47a2064237a30dcc241902e99/modules/luni/src/main/java/java/io/PipedOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/4423cd29971aedc47a2064237a30dcc241902e99/modules/luni/src/main/java/java/io/PipedOutputStream.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/PipedOutputStream.java?ref=4423cd29971aedc47a2064237a30dcc241902e99",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -81,6 +81,9 @@ public void close() throws IOException {\n \t *             If this Stream or the dest is already connected.\r\n \t */\r\n \tpublic void connect(PipedInputStream stream) throws IOException {\r\n+        if(null == stream){\r\n+            throw new NullPointerException();\r\n+        }\r\n \t\tif (this.dest == null) {\r\n \t\t\tif (!stream.isConnected) {\r\n \t\t\t\tstream.buffer = new byte[PipedInputStream.PIPE_SIZE];\r\n@@ -135,7 +138,10 @@ public void flush() throws IOException {\n \t *             If any of the arguments are out of bounds.\r\n \t */\r\n \tpublic void write(byte buffer[], int offset, int count) throws IOException {\r\n-\t\tsuper.write(buffer, offset, count);\r\n+\t\tif (dest == null){\r\n+            throw new IOException(\"Pipe not connected.\");\r\n+        }\r\n+        super.write(buffer, offset, count);\r\n \t}\r\n \r\n \t/**\r\n@@ -163,6 +169,6 @@ public void write(int oneByte) throws IOException {\n \t\tif (dest != null)\r\n \t\t\tdest.receive(oneByte);\r\n \t\telse\r\n-\t\t\tthrow new IOException();\r\n+\t\t\tthrow new IOException(org.apache.harmony.luni.util.Msg.getString(\"K007b\"));\r\n \t}\r\n }\r",
                "deletions": 3
            },
            {
                "sha": "4875fdc8cae49f2fbfb15e0913be8187c1557ad8",
                "filename": "modules/luni/src/test/java/tests/api/java/io/PipedOutputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/4423cd29971aedc47a2064237a30dcc241902e99/modules/luni/src/test/java/tests/api/java/io/PipedOutputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/4423cd29971aedc47a2064237a30dcc241902e99/modules/luni/src/test/java/tests/api/java/io/PipedOutputStreamTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/PipedOutputStreamTest.java?ref=4423cd29971aedc47a2064237a30dcc241902e99",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -108,6 +108,20 @@ public void test_close() {\n \t\t\tfail(\"Exception during close : \" + e.getMessage());\r\n \t\t}\r\n \t}\r\n+    \r\n+    /**\r\n+     * @tests java.io.PipedOutputStream#connect(java.io.PipedInputStream)\r\n+     */\r\n+    public void test_connectLjava_io_PipedInputStream_Exception() throws IOException {\r\n+        out = new PipedOutputStream();\r\n+        out.connect(new PipedInputStream());\r\n+        try {\r\n+            out.connect(null);\r\n+            fail(\"should throw NullPointerException\"); //$NON-NLS-1$\r\n+        } catch (NullPointerException e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n \r\n \t/**\r\n \t * @tests java.io.PipedOutputStream#connect(java.io.PipedInputStream)\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "More fix for HARMONY-1039 ([classlib][luni] java.net.Inet6Address throws NullPointerException when deserializing an object with null interface name), the old golden ser file should be removed\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@428269 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/569c53a21f4bc7dca55fa2c40413d8b67f4661a0",
        "parent": "https://github.com/apache/harmony-classlib/commit/3aa714069dc3d326554baa00a3132fed8f3f1628",
        "bug_id": "harmony-classlib_68",
        "file": [
            {
                "sha": "4607c204b1698bd0479ed4bc5cf39a58f094d653",
                "filename": "modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.ser",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3aa714069dc3d326554baa00a3132fed8f3f1628/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.ser",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3aa714069dc3d326554baa00a3132fed8f3f1628/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.ser",
                "status": "removed",
                "changes": 0,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/resources/serialization/java/net/Inet6Address.golden.ser?ref=3aa714069dc3d326554baa00a3132fed8f3f1628",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-257: java.beans.Introspector.getBeanInfo should throw NullPointerException\nadding regression test\nsome clean-up for source and test\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@395788 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/81b46dac9035644a4d594e877809b8cdfda363dc",
        "parent": "https://github.com/apache/harmony-classlib/commit/30192b72a127938c3e3ff0217c3c2ecf591f059a",
        "bug_id": "harmony-classlib_69",
        "file": [
            {
                "sha": "ee8c43bb0a894bd8b6ac166ee91bc9fbfaa753b0",
                "filename": "modules/beans/src/main/java/java/beans/Introspector.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/81b46dac9035644a4d594e877809b8cdfda363dc/modules/beans/src/main/java/java/beans/Introspector.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/81b46dac9035644a4d594e877809b8cdfda363dc/modules/beans/src/main/java/java/beans/Introspector.java",
                "status": "modified",
                "changes": 34,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/Introspector.java?ref=81b46dac9035644a4d594e877809b8cdfda363dc",
                "patch": "@@ -16,7 +16,7 @@\n \n /**\n  * @author Maxim V. Berkultsev\n- * @version $Revision: 1.23.6.3 $\n+ * @version $Revision$\n  */\n package java.beans;\n \n@@ -33,7 +33,7 @@\n \n /**\n  * @author Maxim V. Berkultsev\n- * @version $Revision: 1.23.6.3 $\n+ * @version $Revision$\n  */\n \n public class Introspector {\n@@ -71,15 +71,17 @@ public static String decapitalize(String name) {\n     public static BeanInfo getBeanInfo(Class beanClass, int flags)\n         throws IntrospectionException \n     {\n-        BeanInfo result = null;\n-        if (flags == USE_ALL_BEANINFO) {\n-            result = getBeanInfo(beanClass, null, false, false);    \n-        } else if (flags == IGNORE_IMMEDIATE_BEANINFO) {\n-            result = getBeanInfo(beanClass, null, true, false);    \n-        } else if (flags == IGNORE_ALL_BEANINFO) {\n-            result = getBeanInfo(beanClass, null, true, true);    \n+        switch (flags) {\n+            case USE_ALL_BEANINFO:\n+                return getBeanInfo(beanClass, null, false, false);    \n+            case IGNORE_IMMEDIATE_BEANINFO:\n+                return getBeanInfo(beanClass, null, true, false);\n+            case IGNORE_ALL_BEANINFO:\n+                return getBeanInfo(beanClass, null, true, true);\n+            default:\n+                //TODO: verify that default beahvior complies with RI\n+                return getBeanInfo(beanClass, null, false, false);\n         }\n-        return result;\n     }\n \n     /**\n@@ -139,7 +141,7 @@ private static BeanInfoWrapper getBeanInfo(Class beanClass, Class stopClass,\n         boolean ignoreBeanClassBeanInfo, boolean ignoreSuperClassBeanInfo)\n     {\n         if (beanClass == null) {\n-            return null;\n+            throw new java.lang.NullPointerException();\n         }\n \n         BeanInfoWrapper beanInfoWrapper = findBeanInfoClassInCache(beanClass,\n@@ -189,8 +191,6 @@ private static BeanInfoWrapper getBeanInfo(Class beanClass, Class stopClass,\n     }\n \n     private static Class findBeanInfoClass(Class beanClass) {\n-        Object result = null;\n-\n         String beanClassName = beanClass.getName();\n         int idx = beanClassName.lastIndexOf(\".\");\n         String shortBeanInfoClassName = beanClassName.substring(idx + 1,\n@@ -701,14 +701,6 @@ private void addIndexedPropertyDescriptorsFromMethodList(\n         }\n     }\n     \n-    private void clear() {\n-        propertyDescriptors = null; \n-        methodDescriptors = null;\n-        eventSetDescriptors = null;\n-        defaultPropertyIndex = -1;\n-        defaultEventIndex = -1;\n-    }\n-\n     private Class beanClass = null;\n     private PropertyDescriptor[] propertyDescriptors = null; \n     private MethodDescriptor[] methodDescriptors = null;",
                "deletions": 21
            },
            {
                "sha": "ae7dfb4f7573c4b48fc22f47337a4f00ce3e04cf",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/IntrospectorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/81b46dac9035644a4d594e877809b8cdfda363dc/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/IntrospectorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/81b46dac9035644a4d594e877809b8cdfda363dc/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/IntrospectorTest.java",
                "status": "modified",
                "changes": 293,
                "additions": 138,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/IntrospectorTest.java?ref=81b46dac9035644a4d594e877809b8cdfda363dc",
                "patch": "@@ -16,7 +16,7 @@\n \n /**\n  * @author Maxim V. Berkultsev\n- * @version $Revision: 1.14.6.3 $\n+ * @version $Revision$\n  */\n package org.apache.harmony.tests.java.beans;\n \n@@ -25,13 +25,13 @@\n import junit.framework.TestSuite;\n import junit.textui.TestRunner;\n \n+import java.beans.IntrospectionException;\n import java.beans.Introspector;\n import java.beans.BeanInfo;\n import java.beans.BeanDescriptor;\n import java.beans.EventSetDescriptor;\n import java.beans.MethodDescriptor;\n import java.beans.PropertyDescriptor;\n-import java.beans.IntrospectionException;\n import org.apache.harmony.tests.java.beans.auxiliary.ChildBean;\n import org.apache.harmony.tests.java.beans.auxiliary.GrannyBean;\n import org.apache.harmony.tests.java.beans.auxiliary.MisprintBean;\n@@ -43,26 +43,27 @@\n \n /**\n  * The test checks the class java.beans.Introspector\n+ * \n  * @author Maxim V. Berkultsev\n  * @version $Revision: 1.14.6.3 $\n  */\n \n public class IntrospectorTest extends TestCase {\n-    \n+\n     /**\n-     * \n+     *  \n      */\n     public IntrospectorTest() {\n         super();\n     }\n-    \n+\n     /**\n-     *\n+     *  \n      */\n     public IntrospectorTest(String name) {\n         super(name);\n     }\n-    \n+\n     /**\n      * The test checks the constructor is private\n      */\n@@ -72,220 +73,202 @@ public void testIntrospectorConstructor() {\n             fail(\"No exception is thrown on new Introspector() call\");\n         } catch (Exception e) {}\n     }\n-    \n+\n     /**\n      * The test checks the getBeanDescriptor method\n      */\n-    public void testBeanDescriptor() {\n+    public void testBeanDescriptor() throws Exception {\n         String[] oldBeanInfoSearchPath = Introspector.getBeanInfoSearchPath();\n         try {\n-            Introspector.setBeanInfoSearchPath(\n-                    new String[] { \"java.beans.infos\" } );\n+            Introspector\n+                    .setBeanInfoSearchPath(new String[] { \"java.beans.infos\" });\n             BeanInfo info = Introspector.getBeanInfo(SampleBean.class);\n             assertNotNull(info);\n             BeanDescriptor descriptor = info.getBeanDescriptor();\n             assertNotNull(descriptor);\n             assertEquals(SampleBean.class, descriptor.getBeanClass());\n-        } catch (Exception e) {\n-            fail(\"Cannot extract bean info from SampleBean class\");\n         } finally {\n             Introspector.setBeanInfoSearchPath(oldBeanInfoSearchPath);\n         }\n     }\n-    \n+\n     /**\n      * The test checks the getMethodDescriptor method\n+     * @throws IntrospectionException\n      */\n-    public void testNonUniqueByNameMethodDescriptors() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(ChildBean.class);\n-            assertNotNull(info);\n-            MethodDescriptor[] mds = info.getMethodDescriptors();\n-            assertNotNull(mds);\n-            assertEquals(11, mds.length);\n-            assertEquals(\"wait\", mds[8].getName());\n-            assertEquals(\"wait\", mds[9].getName());\n-            assertEquals(\"wait\", mds[10].getName());\n-        } catch (Exception e) {\n-            fail(\"Cannot extract bean info from ChildBean class: \"\n-                    + e.getClass());\n-        }\n+    public void testNonUniqueByNameMethodDescriptors() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(ChildBean.class);\n+        assertNotNull(info);\n+        MethodDescriptor[] mds = info.getMethodDescriptors();\n+        assertNotNull(mds);\n+        assertEquals(11, mds.length);\n+        assertEquals(\"wait\", mds[8].getName());\n+        assertEquals(\"wait\", mds[9].getName());\n+        assertEquals(\"wait\", mds[10].getName());\n     }\n-    \n+\n     /**\n      * The test checks the getEventSetDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testUnicastEventSetDescriptor() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(SampleBean.class);\n-            assertNotNull(info);\n-            EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n-            assertNotNull(descriptors);\n-            for(int i = 0; i < descriptors.length; ++i) {\n-                Method m = descriptors[i].getAddListenerMethod();\n-                if(m != null) {\n-                    Class[] exceptionTypes = m.getExceptionTypes();\n-                    boolean found = false;\n-                    \n-                    for(int j = 0; j < exceptionTypes.length; ++j) {\n-                        if(exceptionTypes[j].equals(\n-                                TooManyListenersException.class)) {\n-                            assertTrue(descriptors[i].isUnicast());\n-                            found = true;\n-                            break;\n-                        }\n-                    }\n-                    \n-                    if(!found) {\n-                        assertEquals(descriptors[i].isUnicast(), false);\n+    public void testUnicastEventSetDescriptor() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(SampleBean.class);\n+        assertNotNull(info);\n+        EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n+        assertNotNull(descriptors);\n+        for (int i = 0; i < descriptors.length; ++i) {\n+            Method m = descriptors[i].getAddListenerMethod();\n+            if (m != null) {\n+                Class[] exceptionTypes = m.getExceptionTypes();\n+                boolean found = false;\n+\n+                for (int j = 0; j < exceptionTypes.length; ++j) {\n+                    if (exceptionTypes[j]\n+                            .equals(TooManyListenersException.class)) {\n+                        assertTrue(descriptors[i].isUnicast());\n+                        found = true;\n+                        break;\n                     }\n-                        \n                 }\n+\n+                if (!found) {\n+                    assertFalse(descriptors[i].isUnicast());\n+                }\n+\n             }\n-        } catch (Exception e) {\n-            fail(\"Cannot extract bean info from SampleBean class: \"\n-                    + e.getClass());\n         }\n     }\n-    \n+\n     /**\n      * The test checks the getEventSetDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testEventSetDescriptorWithoutAddListenerMethod() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(OtherBean.class);\n-            assertNotNull(info);\n-            EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n-            assertNotNull(descriptors);\n-            assertEquals(0, descriptors.length);\n-        } catch (Exception e) {\n-            System.out.println(e.getClass() + \": \" + e.getMessage());\n-            fail(\"Cannot extract bean info from SampleBean class\");\n-        }\n+    public void testEventSetDescriptorWithoutAddListenerMethod() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(OtherBean.class);\n+        assertNotNull(info);\n+        EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n+        assertNotNull(descriptors);\n+        assertEquals(0, descriptors.length);\n     }\n-    \n+\n     /**\n      * The test checks the getEventSetDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testIllegalEventSetDescriptor() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(MisprintBean.class);\n-            assertNotNull(info);\n-            EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n-            assertNotNull(descriptors);\n-            assertEquals(0, descriptors.length);\n-        } catch (Exception e) {\n-            System.out.println(e.getClass() + \": \" + e.getMessage());\n-            fail(\"Cannot extract bean info from MisprintBean class\");\n-        }\n+    public void testIllegalEventSetDescriptor() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(MisprintBean.class);\n+        assertNotNull(info);\n+        EventSetDescriptor[] descriptors = info.getEventSetDescriptors();\n+        assertNotNull(descriptors);\n+        assertEquals(0, descriptors.length);\n     }\n-    \n+\n     /**\n      * The test checks the getPropertyDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testPropertyDescriptorWithSetMethod() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(OtherBean.class);\n-            assertNotNull(info);\n-            PropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n-            assertNotNull(descriptors);\n-            assertEquals(2, descriptors.length);\n-            assertEquals(\"class\", descriptors[0].getName());\n-            assertEquals(\"number\", descriptors[1].getName());\n-        } catch (Exception e) {\n-            System.out.println(e.getClass() + \": \" + e.getMessage());\n-            fail(\"Cannot extract bean info from SampleBean class\");\n-        }\n+    public void testPropertyDescriptorWithSetMethod() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(OtherBean.class);\n+        assertNotNull(info);\n+        PropertyDescriptor[] descriptors = info.getPropertyDescriptors();\n+        assertNotNull(descriptors);\n+        assertEquals(2, descriptors.length);\n+        assertEquals(\"class\", descriptors[0].getName());\n+        assertEquals(\"number\", descriptors[1].getName());\n     }\n-    \n+\n     /**\n      * The test checks the getPropertyDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testUseAllBeanInfo() {\n+    public void testUseAllBeanInfo() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n+                Introspector.USE_ALL_BEANINFO);\n+        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n+        assertEquals(1, pds.length);\n+        assertEquals(\"childText\", pds[0].getName());\n+    }\n+\n+    //Regression test for HARMONY-257\n+    public void testGetBeanInfo_NPE() throws IntrospectionException {\n         try {\n-            BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n-                    Introspector.USE_ALL_BEANINFO);\n-            PropertyDescriptor[] pds = info.getPropertyDescriptors();\n-            assertEquals(1, pds.length);\n-            assertEquals(\"childText\", pds[0].getName());\n-        } catch(IntrospectionException ie) {\n-            fail(ie.getClass() + \": \" + ie.getMessage());\n-        }\n+            Introspector.getBeanInfo((java.lang.Class) null);\n+            fail(\"getBeanInfo should throw NullPointerException\");\n+        } catch (NullPointerException e) {}\n+\n+        try {\n+            Introspector.getBeanInfo((java.lang.Class) null,\n+                    (java.lang.Class) null);\n+            fail(\"getBeanInfo should throw NullPointerException\");\n+        } catch (NullPointerException e) {}\n+\n+        try {\n+            Introspector.getBeanInfo((java.lang.Class) null, 0);\n+            fail(\"getBeanInfo should throw NullPointerException\");\n+        } catch (NullPointerException e) {}\n     }\n-    \n+\n     /**\n      * The test checks the getPropertyDescriptors method for\n      * IGNORE_IMMEDIATE_BEANINFO flag\n+     * @throws IntrospectionException\n      */\n-    public void testIgnoreImmediateBeanInfo() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n-                    Introspector.IGNORE_IMMEDIATE_BEANINFO);\n-            PropertyDescriptor[] pds = info.getPropertyDescriptors();\n-            assertEquals(1, pds.length);\n-            assertEquals(\"parentText\", pds[0].getName());\n-        } catch(IntrospectionException ie) {\n-            fail(ie.getClass() + \": \" + ie.getMessage());\n-        }\n+    public void testIgnoreImmediateBeanInfo() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n+                Introspector.IGNORE_IMMEDIATE_BEANINFO);\n+        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n+        assertEquals(1, pds.length);\n+        assertEquals(\"parentText\", pds[0].getName());\n     }\n-    \n+\n     /**\n-     * The test checks the getPropertyDescriptors method for\n-     * IGNORE_ALL_BEANINFO flag\n+     * The test checks the getPropertyDescriptors method for IGNORE_ALL_BEANINFO\n+     * flag\n+     * @throws IntrospectionException\n      */\n-    public void testIgnoreAllBeanInfo() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n-                    Introspector.IGNORE_ALL_BEANINFO);\n-            PropertyDescriptor[] pds = info.getPropertyDescriptors();\n-            assertEquals(2, pds.length);\n-            assertEquals(\"class\", pds[0].getName());\n-            assertEquals(\"text\", pds[1].getName());\n-        } catch(IntrospectionException ie) {\n-            fail(ie.getClass() + \": \" + ie.getMessage());\n-        }\n+    public void testIgnoreAllBeanInfo() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n+                Introspector.IGNORE_ALL_BEANINFO);\n+        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n+        assertEquals(2, pds.length);\n+        assertEquals(\"class\", pds[0].getName());\n+        assertEquals(\"text\", pds[1].getName());\n     }\n-    \n+\n     /**\n      * The test checks the getPropertyDescriptors method\n+     * @throws IntrospectionException\n      */\n-    public void testAdditionalBeanInfo() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(StandardBean2.class);\n-            PropertyDescriptor[] pds = info.getPropertyDescriptors();\n-            assertEquals(1, pds.length);\n-            assertEquals(\"grannyText\", pds[0].getName());\n-        } catch(IntrospectionException ie) {\n-            fail(ie.getClass() + \": \" + ie.getMessage());\n-        }\n+    public void testAdditionalBeanInfo() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(StandardBean2.class);\n+        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n+        assertEquals(1, pds.length);\n+        assertEquals(\"grannyText\", pds[0].getName());\n     }\n-    \n+\n     /**\n      * The test checks the getPropertyDescriptors for stop class prune\n+     * @throws IntrospectionException\n      */\n-    public void testStopClass() {\n-        try {\n-            BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n-                    GrannyBean.class);\n-            PropertyDescriptor[] pds = info.getPropertyDescriptors();\n-            assertEquals(1, pds.length);\n-            assertEquals(\"childText\", pds[0].getName());\n-        } catch(IntrospectionException ie) {\n-            fail(ie.getClass() + \": \" + ie.getMessage());\n-        }\n+    public void testStopClass() throws IntrospectionException {\n+        BeanInfo info = Introspector.getBeanInfo(ChildBean.class,\n+                GrannyBean.class);\n+        PropertyDescriptor[] pds = info.getPropertyDescriptors();\n+        assertEquals(1, pds.length);\n+        assertEquals(\"childText\", pds[0].getName());\n     }\n-    \n+\n     /**\n-     * \n+     *  \n      */\n     public static Test suite() {\n         return new TestSuite(IntrospectorTest.class);\n     }\n-    \n+\n     /**\n-     * \n+     *  \n      */\n     public static void main(String[] args) {\n         TestRunner.run(suite());\n     }\n-}\n+}\n\\ No newline at end of file",
                "deletions": 155
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "remove unnecessary null check - if field were null, a NPE would have been thrown before this point\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@823761 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/48f0a33faf277e084f89beab9162c3ec9d08348a",
        "parent": "https://github.com/apache/harmony-classlib/commit/eb95c02d2dc5c44d642696581e364dd5a3848771",
        "bug_id": "harmony-classlib_70",
        "file": [
            {
                "sha": "fac79f65db5efd49b7ef4f79d900ee28cbd1eb5d",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/ScrollStateController.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48f0a33faf277e084f89beab9162c3ec9d08348a/modules/awt/src/main/java/common/org/apache/harmony/awt/ScrollStateController.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48f0a33faf277e084f89beab9162c3ec9d08348a/modules/awt/src/main/java/common/org/apache/harmony/awt/ScrollStateController.java",
                "status": "modified",
                "changes": 10,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/ScrollStateController.java?ref=48f0a33faf277e084f89beab9162c3ec9d08348a",
                "patch": "@@ -272,12 +272,8 @@ private boolean calculateNeeded(Adjustable adj) {\n         int compSize = 0;\n         int adjSize = (isVertical ? scrollable.getAdjustableWidth()\n                                  : scrollable.getAdjustableHeight());\n-        if (comp != null) {\n-            Dimension prefSize = scrollable.getSize();\n-            compSize = isVertical ? prefSize.height\n-                                 : prefSize.width;\n-        }\n-        return ((spSize < compSize) &&\n-                (spOtherSize > adjSize + GAP));\n+        Dimension prefSize = scrollable.getSize();\n+        compSize = isVertical ? prefSize.height : prefSize.width;\n+        return ((spSize < compSize) && (spOtherSize > adjSize + GAP));\n     }\n }\n\\ No newline at end of file",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-6254 ([classlib][luni] URLStreamHandler throws NPE when creating external form)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@790210 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c4cfc92eed905714bcb447c9752f0a981c9115e2",
        "parent": "https://github.com/apache/harmony-classlib/commit/8bbb8e73ffeced7f4a723d67f6f4210a608c4d97",
        "bug_id": "harmony-classlib_71",
        "file": [
            {
                "sha": "54e550b7f16eb7d9bc0b2d2c903cf97400ff7fad",
                "filename": "modules/luni/src/main/java/java/net/URLStreamHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c4cfc92eed905714bcb447c9752f0a981c9115e2/modules/luni/src/main/java/java/net/URLStreamHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c4cfc92eed905714bcb447c9752f0a981c9115e2/modules/luni/src/main/java/java/net/URLStreamHandler.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URLStreamHandler.java?ref=c4cfc92eed905714bcb447c9752f0a981c9115e2",
                "patch": "@@ -305,8 +305,7 @@ protected void setURL(URL u, String protocol, String host, int port,\n      * @see URL#toExternalForm()\n      */\n     protected String toExternalForm(URL url) {\n-        StringBuilder answer = new StringBuilder(url.getProtocol().length()\n-                + url.getFile().length() + 16);\n+        StringBuilder answer = new StringBuilder();\n         answer.append(url.getProtocol());\n         answer.append(':');\n         String authority = url.getAuthority();\n@@ -317,8 +316,9 @@ protected String toExternalForm(URL url) {\n \n         String file = url.getFile();\n         String ref = url.getRef();\n-        // file is never null\n-        answer.append(file);\n+        if (file != null) {\n+            answer.append(file);\n+        }\n         if (ref != null) {\n             answer.append('#');\n             answer.append(ref);",
                "deletions": 4
            },
            {
                "sha": "9cc09fbe481cd904a20707e5abd8103b2e15a944",
                "filename": "modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/URLTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c4cfc92eed905714bcb447c9752f0a981c9115e2/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/URLTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c4cfc92eed905714bcb447c9752f0a981c9115e2/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/URLTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/net/URLTest.java?ref=c4cfc92eed905714bcb447c9752f0a981c9115e2",
                "patch": "@@ -1234,7 +1234,33 @@ public void test_toExternalForm_Relative() throws MalformedURLException {\n         String ref = \"?y\";\r\n         URL url = new URL(new URL(strURL), ref);\r\n         assertEquals(\"http://a/b/c/?y\", url.toExternalForm());\r\n+    }\r\n+\r\n+    // Regression test for HARMONY-6254\r\n+\r\n+    // Bogus handler forces file part of URL to be null\r\n+    static class MyHandler2 extends URLStreamHandler {\r\n+\r\n+        @Override\r\n+        protected URLConnection openConnection(URL arg0) throws IOException {\r\n+            return null;\r\n+        }\r\n+\r\n+        @Override\r\n+        protected void setURL(URL u, String protocol, String host, int port,\r\n+                String authority, String userInfo, String file, String query,\r\n+                String ref) {\r\n+            super.setURL(u, protocol, host, port, authority, userInfo,\r\n+                    (String) null, query, ref);\r\n+        }\r\n+    }\r\n \r\n+    // Test special case of external form with null file part (HARMONY-6254)\r\n+    public void test_toExternalForm_Null() throws IOException {\r\n+        URLStreamHandler myHandler = new MyHandler2();\r\n+        URL url = new URL(null, \"foobar://example.com/foobar\", myHandler);\r\n+        String s = url.toExternalForm();\r\n+        assertEquals(\"Got wrong URL external form\", \"foobar://example.com\", s);\r\n     }\r\n \r\n     static class MockProxySelector extends ProxySelector {\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-6009 ([classlib][beans] NPE launching swingset2 example)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@775105 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e679d5ddfd68efbd92aba50c0e7650cc5860f3a8",
        "parent": "https://github.com/apache/harmony-classlib/commit/2bee718b5cdb4c77bd6745fd355a8e4518a5ccf0",
        "bug_id": "harmony-classlib_72",
        "file": [
            {
                "sha": "b16e4a6e08968f021db7adbbdc095f460c5a53e5",
                "filename": "modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e679d5ddfd68efbd92aba50c0e7650cc5860f3a8/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e679d5ddfd68efbd92aba50c0e7650cc5860f3a8/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java?ref=e679d5ddfd68efbd92aba50c0e7650cc5860f3a8",
                "patch": "@@ -256,8 +256,11 @@ private void doFirePropertyChange(PropertyChangeEvent event) {\n         }\n \n         // Collect up the global listeners\n-        PropertyChangeListener[] gListeners = globalListeners\n-                .toArray(new PropertyChangeListener[0]);\n+        PropertyChangeListener[] gListeners;\n+        synchronized(this) {\n+            gListeners = globalListeners.toArray(new PropertyChangeListener[0]);\n+        }\n+\n         // Fire the events for global listeners\n         for (int i = 0; i < gListeners.length; i++) {\n             gListeners[i].propertyChange(event);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6108:  [classlib] [prefs] Preferences.nodeExists(null) should throw NPE when Preferences node has been removed\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@765529 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/48998e0ee77834199d811b1b1bda0bc367f4f480",
        "parent": "https://github.com/apache/harmony-classlib/commit/3ddf7f3166ac59152f85dd7b48270728b6ffb3f5",
        "bug_id": "harmony-classlib_73",
        "file": [
            {
                "sha": "039091d74ad791096d38985236442546f38047fc",
                "filename": "modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48998e0ee77834199d811b1b1bda0bc367f4f480/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48998e0ee77834199d811b1b1bda0bc367f4f480/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java?ref=48998e0ee77834199d811b1b1bda0bc367f4f480",
                "patch": "@@ -609,6 +609,9 @@ private AbstractPreferences getNodeFromBackend(boolean createNew,\n \n     @Override\n     public boolean nodeExists(String name) throws BackingStoreException {\n+        if (null == name) {\n+            throw new NullPointerException();\n+        }\n         AbstractPreferences startNode = null;\n         synchronized (lock) {\n             if (isRemoved()) {",
                "deletions": 0
            },
            {
                "sha": "38d6c3bdf5ffaff93c149284092e2f43d9318526",
                "filename": "modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48998e0ee77834199d811b1b1bda0bc367f4f480/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48998e0ee77834199d811b1b1bda0bc367f4f480/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java?ref=48998e0ee77834199d811b1b1bda0bc367f4f480",
                "patch": "@@ -553,6 +553,25 @@ public void testNodeExists() throws BackingStoreException {\n         assertTrue(pref.nodeExists(\"child2/grandchild\"));\n     }\n \n+    public void test_nodeExists() throws BackingStoreException {\n+        AbstractPreferences test = (AbstractPreferences) Preferences.userRoot()\n+                .node(\"test\");\n+        try {\n+            test.nodeExists(null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+\n+        test.removeNode();\n+        try {\n+            test.nodeExists(null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testParent() {\n         assertSame(parent, pref.parent());\n         AbstractPreferences child1 = new MockAbstractPreferences(pref, \"child1\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-6038, NPE in java.beans.Introspector.getBeanInfo\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@725765 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8a67c6221cc5ad03f66f43a3308753c24d8d465e",
        "parent": "https://github.com/apache/harmony-classlib/commit/8d768ce2d4d066d487cf9f57e08bf0b4dba2b076",
        "bug_id": "harmony-classlib_74",
        "file": [
            {
                "sha": "758fcc357c6be93de748cff2dba0b76b93365b68",
                "filename": "modules/beans/src/main/java/java/beans/StandardBeanInfo.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8a67c6221cc5ad03f66f43a3308753c24d8d465e/modules/beans/src/main/java/java/beans/StandardBeanInfo.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8a67c6221cc5ad03f66f43a3308753c24d8d465e/modules/beans/src/main/java/java/beans/StandardBeanInfo.java",
                "status": "modified",
                "changes": 15,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/StandardBeanInfo.java?ref=8a67c6221cc5ad03f66f43a3308753c24d8d465e",
                "patch": "@@ -291,8 +291,8 @@ void mergeBeanInfo(BeanInfo beanInfo, boolean force)\n                 // Sub is PropertyDescriptor\n                 if (subIndexedType == null) {\n                     // Same property type\n-                    if (subType != null &&\n-                            subType.getName().equals(superType.getName())) {\n+                    if (subType != null && superType != null\n+                            && subType.getName().equals(superType.getName())) {\n                         if ((subGet == null) && (superGet != null)) {\n                             subDesc.setReadMethod(superGet);\n                         }\n@@ -306,7 +306,8 @@ void mergeBeanInfo(BeanInfo beanInfo, boolean force)\n                         }\n                     }\n                 } else { // Sub is IndexedPropertyDescriptor\n-                    if ((superType.isArray())\n+                    if (superType != null\n+                            && (superType.isArray())\n                             && (superType.getComponentType().getName()\n                                     .equals(subIndexedType.getName()))) {\n                         // same type\n@@ -321,7 +322,8 @@ void mergeBeanInfo(BeanInfo beanInfo, boolean force)\n                 subMap.put(propertyName, subDesc);\n             } else { // Super is IndexedPropertyDescriptor\n                 if (subIndexedType == null) { // Sub is PropertyDescriptor\n-                    if (subType.isArray()\n+                    if (subType != null\n+                            && subType.isArray()\n                             && (subType.getComponentType().getName()\n                                     .equals(superIndexedType.getName()))) {\n                         // Same type\n@@ -336,8 +338,9 @@ void mergeBeanInfo(BeanInfo beanInfo, boolean force)\n                         subMap.put(propertyName, (PropertyDescriptor) value);\n                     }\n \n-                } else if (subIndexedType.getName().equals(\n-                        superIndexedType.getName())) {\n+                } else if (superIndexedType != null\n+                        && subIndexedType.getName().equals(\n+                                superIndexedType.getName())) {\n                     // Sub is IndexedPropertyDescriptor and Same type\n                     IndexedPropertyDescriptor subDesc = (IndexedPropertyDescriptor) value;\n                     if ((subGet == null) && (superGet != null)) {",
                "deletions": 6
            },
            {
                "sha": "ab2c522d71d5e0725beb3117fab14eb1779450a6",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/IntrospectorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8a67c6221cc5ad03f66f43a3308753c24d8d465e/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/IntrospectorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8a67c6221cc5ad03f66f43a3308753c24d8d465e/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/IntrospectorTest.java",
                "status": "modified",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/IntrospectorTest.java?ref=8a67c6221cc5ad03f66f43a3308753c24d8d465e",
                "patch": "@@ -869,6 +869,39 @@ public void testGetBeanInfoClassint_FLAG_Invalid()\n         }\n     }\n     \n+    /*\n+     * @test Introspector.getBeanInfo\n+     * @test StandardBeanInfo.mergeProps\n+     */\n+    public void testGetBeanInfo_StandardBeanInfo_mergeProps() throws Exception {\n+        class MockParent {\n+            public void setValue(int v) {\n+                // do nothing\n+            }\n+\n+            public void setValue(int v, String s) {\n+                // do nothing\n+            }\n+        }\n+\n+        class MockChild extends MockParent {\n+            public void setValue(int v) {\n+                // do nothing\n+            }\n+        }\n+\n+        BeanInfo beanInfo = Introspector.getBeanInfo(MockChild.class);\n+        PropertyDescriptor[] pds = beanInfo.getPropertyDescriptors();\n+        PropertyDescriptor pd = null;\n+        for(int i = 0; i < pds.length; i++){\n+            if(\"value\".equals(pds[i].getName())){\n+                pd = pds[i];\n+            }\n+        }\n+        assertNotNull(pd);\n+        assertEquals(Integer.TYPE, pd.getPropertyType());\n+    }\n+    \n     public void testSetBeanInfoSearchPath_null() throws IntrospectionException{\n         String[] oldPath = Introspector.getBeanInfoSearchPath();\n         try{",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-5279 \"[classlib][swing][EIOffice] \nJList.getToolTipText(MouseEvent) throws NPE if set ListCellRenderer to \nnull\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@606883 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/aaf091d69019a106a0848ea5659a471171a2404f",
        "parent": "https://github.com/apache/harmony-classlib/commit/874fc22464aad426cf1d6e323c77f682eafa0cf0",
        "bug_id": "harmony-classlib_75",
        "file": [
            {
                "sha": "a65c0c7640e9acbecc702fe719e0d7e94b610e2d",
                "filename": "modules/swing/src/main/java/common/javax/swing/JList.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/JList.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/JList.java",
                "status": "modified",
                "changes": 12,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JList.java?ref=aaf091d69019a106a0848ea5659a471171a2404f",
                "patch": "@@ -299,6 +299,8 @@ public void setVisible(final boolean b) {\n \n \n             private Component getRenderingComponent() {\n+                if(list.getCellRenderer()==null)\n+                    return null;\n                 return list.getCellRenderer().getListCellRendererComponent(list, list.getModel().getElementAt(indexInParent), indexInParent, false, false);\n             }\n         }\n@@ -585,8 +587,9 @@ public void setPrototypeCellValue(final Object prototypeCellValue) {\n             Object oldValue = this.prototypeCellValue;\n             this.prototypeCellValue = prototypeCellValue;\n             firePropertyChange(PROTOTYPE_CELL_VALUE_CHANGED_PROPERTY, oldValue, prototypeCellValue);\n-\n-            Dimension prototypePreferredSize = getCellRenderer().getListCellRendererComponent(this, prototypeCellValue, 0, false, false).getPreferredSize();\n+            Dimension prototypePreferredSize = new Dimension(0,0);\n+            if (getCellRenderer() != null)\n+            prototypePreferredSize = getCellRenderer().getListCellRendererComponent(this, prototypeCellValue, 0, false, false).getPreferredSize();\n             this.fixedCellWidth = prototypePreferredSize.width;\n             this.fixedCellHeight = prototypePreferredSize.height;\n         }\n@@ -985,6 +988,9 @@ public String getToolTipText(final MouseEvent event) {\n         if (index == -1) {\n             return super.getToolTipText();\n         }\n+        if (cellRenderer == null) {\n+        return super.getToolTipText();\n+        }\n         Component renderer = cellRenderer.getListCellRendererComponent(this, model.getElementAt(index), index, false, false);\n         String result = null;\n         if (renderer instanceof JComponent) {\n@@ -1025,6 +1031,8 @@ private int indexOf(final Object element) {\n \n     private int getMaximumCellWidth() {\n         int result = 0;\n+        if(cellRenderer==null)\n+            return result;\n         for (int i = 0; i < model.getSize(); i++) {\n             int width = cellRenderer.getListCellRendererComponent(this, model.getElementAt(i), i, false, false).getPreferredSize().width;\n             if (result < width) {",
                "deletions": 2
            },
            {
                "sha": "67913f125807063ffb18a60d9a92dc6ed393380c",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java?ref=aaf091d69019a106a0848ea5659a471171a2404f",
                "patch": "@@ -640,8 +640,10 @@ protected void maybeUpdateLayoutState() {\n     }\n \n     protected void paintCell(final Graphics g, final int row, final Rectangle rowBounds, final ListCellRenderer cellRenderer, final ListModel dataModel, final ListSelectionModel selModel, final int leadIndex) {\n-        Component renderer = list.getCellRenderer().getListCellRendererComponent(list, dataModel.getElementAt(row), row, selModel.isSelectedIndex(row), list.isFocusOwner() && selModel.getLeadSelectionIndex() == row);\n-        rendererPane.paintComponent(g, renderer, list, rowBounds.x, rowBounds.y, rowBounds.width, rowBounds.height);\n+        if (list.getCellRenderer() != null){\n+             Component renderer = list.getCellRenderer().getListCellRendererComponent(list, dataModel.getElementAt(row), row, selModel.isSelectedIndex(row), list.isFocusOwner() && selModel.getLeadSelectionIndex() == row);\n+             rendererPane.paintComponent(g, renderer, list, rowBounds.x, rowBounds.y, rowBounds.width, rowBounds.height);\n+      }\n     }\n \n     protected void selectNextIndex() {",
                "deletions": 2
            },
            {
                "sha": "155faa2441d2f554b733e1c02f801bb24699311a",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/aaf091d69019a106a0848ea5659a471171a2404f/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "status": "modified",
                "changes": 20,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java?ref=aaf091d69019a106a0848ea5659a471171a2404f",
                "patch": "@@ -335,18 +335,18 @@ public CellEditor(final int index) {\n \n             public void configure() {\n                 Rectangle editorBounds = list.getCellBounds(editingIndex, editingIndex);\n-                JLabel renderer = (JLabel)list.getCellRenderer().getListCellRendererComponent(list, list.getModel().getElementAt(editingIndex), editingIndex, true, true);\n-                String text = renderer.getText();\n-                setText(text);\n-                Icon icon = renderer.getIcon();\n-                if (icon != null) {\n-                    int offset = icon.getIconWidth() + renderer.getIconTextGap();\n-                    editorBounds.x += offset;\n-                    editorBounds.width -= offset;\n+                if(list.getCellRenderer()!=null){                \n+                    JLabel renderer = (JLabel)list.getCellRenderer().getListCellRendererComponent(list, list.getModel().getElementAt(editingIndex), editingIndex, true, true);\n+                    String text = renderer.getText();\n+                    setText(text);\n+                    Icon icon = renderer.getIcon();\n+                    if (icon != null) {\n+                           int offset = icon.getIconWidth() + renderer.getIconTextGap();\n+                           editorBounds.x += offset;\n+                           editorBounds.width -= offset;\n+                    }\n                 }\n-\n                 setBounds(editorBounds);\n-\n                 requestFocus();\n                 selectAll();\n             }",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "There are cases when primitiveTypes stream is not null while primitiveTypesBuffer is leading to NPE in ObjectOutputStream.drain() method. Fixing this.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@606736 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8b2bf1d5390bd447e1f342983af0ba48fe577d2f",
        "parent": "https://github.com/apache/harmony-classlib/commit/b3c9fd9cbc6f1eeb52692d74150e5197a30b8d6e",
        "bug_id": "harmony-classlib_76",
        "file": [
            {
                "sha": "0e582dc3ab1eef7e5524d2c714a851df827d0c79",
                "filename": "modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8b2bf1d5390bd447e1f342983af0ba48fe577d2f/modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8b2bf1d5390bd447e1f342983af0ba48fe577d2f/modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectOutputStream.java?ref=8b2bf1d5390bd447e1f342983af0ba48fe577d2f",
                "patch": "@@ -316,7 +316,7 @@ public void defaultWriteObject() throws IOException {\n      *             If an error occurs attempting to drain the data\n      */\n     protected void drain() throws IOException {\n-        if (primitiveTypes == null) {\n+        if (primitiveTypes == null || primitiveTypesBuffer == null) {\n             return;\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "The method WinGDIPGraphics2D.getDeviceConfiguration() causes NPE if the current Graphics is associated neither with a window nor with an image.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@601632 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3a333c422249578216c36ecf62a61675825e2db6",
        "parent": "https://github.com/apache/harmony-classlib/commit/e12d733ea969a492243e92fe6d5a05ecb64b8198",
        "bug_id": "harmony-classlib_77",
        "file": [
            {
                "sha": "2eb3ebf962e598ae3d5158f94a6994f7964fe868",
                "filename": "modules/awt/src/main/java/windows/org/apache/harmony/awt/gl/windows/WinGDIPGraphics2D.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3a333c422249578216c36ecf62a61675825e2db6/modules/awt/src/main/java/windows/org/apache/harmony/awt/gl/windows/WinGDIPGraphics2D.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3a333c422249578216c36ecf62a61675825e2db6/modules/awt/src/main/java/windows/org/apache/harmony/awt/gl/windows/WinGDIPGraphics2D.java",
                "status": "modified",
                "changes": 7,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/windows/org/apache/harmony/awt/gl/windows/WinGDIPGraphics2D.java?ref=3a333c422249578216c36ecf62a61675825e2db6",
                "patch": "@@ -212,10 +212,11 @@ public Graphics create() {\n     @Override\n     public GraphicsConfiguration getDeviceConfiguration() {\n         if (config == null) {\n-            if (img == null) {\n+            if (nw != null) {\n                 config = new WinGraphicsConfiguration(nw.getId(), getDC());\n-            } else {\n-                long hwnd = img.getHWND();\n+            } else if (img != null) {\n+                final long hwnd = img.getHWND();\n+                \n                 if(hwnd != 0){\n                     config = new WinGraphicsConfiguration(hwnd, getDC());\n                 }else{",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-5222 \"[classlib][swing] ComboBox.setEditor throws NPE \nif editor is null\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@599529 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ee1194ea211533295eed95c8f050558c0e2cbbb7",
        "parent": "https://github.com/apache/harmony-classlib/commit/18a3b0b7e1cbdfe0a5a209e8b01674030936266f",
        "bug_id": "harmony-classlib_78",
        "file": [
            {
                "sha": "f23a56a52d5211df031cdde89ea62ce22d960dfe",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ee1194ea211533295eed95c8f050558c0e2cbbb7/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ee1194ea211533295eed95c8f050558c0e2cbbb7/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=ee1194ea211533295eed95c8f050558c0e2cbbb7",
                "patch": "@@ -407,11 +407,16 @@ public void uninstallUI(final JComponent c) {\n     }\n \n     public void addEditor() {\n-        editor = comboBox.getEditor().getEditorComponent();\n-        if (editor != null) {\n-            configureEditor();\n-            comboBox.add(editor);\n-        }\n+        ComboBoxEditor cbe = comboBox.getEditor();\n+        if (cbe == null)\n+            return;\n+            \n+        editor = cbe.getEditorComponent();\n+        if (editor == null)\n+            return;\n+        \n+        configureEditor();\n+        comboBox.add(editor);\n     }\n \n     public void removeEditor() {",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch Harmony-4852 with minor modification ([classlib][beans] ColorEditor.getAsText() throws NPE when color is null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@582746 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/bf85bcb66b1b46918128d318e3a5d9c972100d95",
        "parent": "https://github.com/apache/harmony-classlib/commit/4ba2399a82f6829ce7070b6c5ba898fca7ca4e14",
        "bug_id": "harmony-classlib_79",
        "file": [
            {
                "sha": "20b6b346e3e469ada7f1448c86eff9e41db2f211",
                "filename": "modules/beans/src/main/java/org/apache/harmony/beans/editors/ColorEditor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bf85bcb66b1b46918128d318e3a5d9c972100d95/modules/beans/src/main/java/org/apache/harmony/beans/editors/ColorEditor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bf85bcb66b1b46918128d318e3a5d9c972100d95/modules/beans/src/main/java/org/apache/harmony/beans/editors/ColorEditor.java",
                "status": "modified",
                "changes": 31,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/org/apache/harmony/beans/editors/ColorEditor.java?ref=bf85bcb66b1b46918128d318e3a5d9c972100d95",
                "patch": "@@ -32,14 +32,14 @@\n @SuppressWarnings(\"serial\")\n public class ColorEditor extends Panel implements PropertyEditor {\n \n-List<PropertyChangeListener> listeners = new ArrayList<PropertyChangeListener>();\n-    \n+    List<PropertyChangeListener> listeners = new ArrayList<PropertyChangeListener>();\n+\n     private Color value;\n-    \n+\n     private Object source;\n-    \n+\n     public ColorEditor(Object source) {\n-        if(null == source) {\n+        if (null == source) {\n             throw new NullPointerException();\n         }\n         this.source = source;\n@@ -74,23 +74,27 @@ public String getJavaInitializationString() {\n     }\n \n     public void setValue(Object value) {\n-        if( null == value) {\n+        if (null == value) {\n             return;\n         }\n         Object oldValue = this.value;\n         this.value = (Color) value;\n         PropertyChangeEvent changeAllEvent = new PropertyChangeEvent(this,\n                 \"value\", oldValue, value); //$NON-NLS-1$\n-        PropertyChangeListener[] copy = new PropertyChangeListener[listeners.size()];\n+        PropertyChangeListener[] copy = new PropertyChangeListener[listeners\n+                .size()];\n         listeners.toArray(copy);\n         for (PropertyChangeListener listener : copy) {\n             listener.propertyChange(changeAllEvent);\n         }\n     }\n-    \n+\n     @SuppressWarnings(\"nls\")\n-    public String getAsText(){\n-        Color c = (Color)getValue();\n+    public String getAsText() {\n+        Color c = (Color) getValue();\n+        if (null == c) {\n+            return \"null\";\n+        }\n         StringBuilder sb = new StringBuilder(14);\n         sb.append(c.getRed());\n         sb.append(\",\");\n@@ -99,7 +103,7 @@ public String getAsText(){\n         sb.append(c.getBlue());\n         return sb.toString();\n     }\n-    \n+\n     @SuppressWarnings(\"nls\")\n     public void setAsText(String text) {\n         if (null == text) {\n@@ -123,7 +127,6 @@ public void setAsText(String text) {\n             throw new IllegalArgumentException(aText);\n         }\n     }\n-    \n \n     public boolean isPaintable() {\n         return true;\n@@ -140,7 +143,7 @@ public void paintValue(Graphics gfx, Rectangle box) {\n     public Object getValue() {\n         return value;\n     }\n-    \n+\n     @Override\n     public synchronized void removePropertyChangeListener(\n             PropertyChangeListener listener) {\n@@ -154,7 +157,7 @@ public synchronized void addPropertyChangeListener(\n             PropertyChangeListener listener) {\n         listeners.add(listener);\n     }\n-    \n+\n     public void firePropertyChange() {\n         if (listeners.isEmpty()) {\n             return;",
                "deletions": 14
            },
            {
                "sha": "0867b79b4b174a04d28c65287389fe4a6606698d",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bf85bcb66b1b46918128d318e3a5d9c972100d95/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bf85bcb66b1b46918128d318e3a5d9c972100d95/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorManagerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorManagerTest.java?ref=bf85bcb66b1b46918128d318e3a5d9c972100d95",
                "patch": "@@ -772,6 +772,8 @@ public void propertyChange(PropertyChangeEvent event) {\n     }\n     public void testColorEditor() throws Exception{\n         PropertyEditor e2 = PropertyEditorManager.findEditor(Color.class);\n+        assertNull(e2.getValue());\n+        assertEquals(\"null\", e2.getAsText());\n         e2.setValue(Color.RED);\n         e2.setAsText(e2.getAsText());\n         assertNull(e2.getTags());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix bug in ([classlib][security]Provider.Service.getAliases leads to NPE in Secure.SecurityDorr.getAliases)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@573500 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d0b171798c1992e2b7a02c22c83f5dfd56d8dad1",
        "parent": "https://github.com/apache/harmony-classlib/commit/552ebfb44e9be67f676523f0a020c023b969259d",
        "bug_id": "harmony-classlib_80",
        "file": [
            {
                "sha": "4b68449f863bb97aed1e7ad9b2b14b1e1e366e2d",
                "filename": "modules/security/src/main/java/common/java/security/Provider.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d0b171798c1992e2b7a02c22c83f5dfd56d8dad1/modules/security/src/main/java/common/java/security/Provider.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d0b171798c1992e2b7a02c22c83f5dfd56d8dad1/modules/security/src/main/java/common/java/security/Provider.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/Provider.java?ref=d0b171798c1992e2b7a02c22c83f5dfd56d8dad1",
                "patch": "@@ -806,6 +806,9 @@ public final String getAttribute(String name) {\n         }\n \n         Iterator<String> getAliases() {\n+            if(aliases == null){\n+                aliases = new ArrayList<String>(0);\n+            }\n             return aliases.iterator();\n         }\n ",
                "deletions": 0
            },
            {
                "sha": "a2b3beccdac896e16bb91beb3f3941c72db8ccfc",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/Provider2Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d0b171798c1992e2b7a02c22c83f5dfd56d8dad1/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/Provider2Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d0b171798c1992e2b7a02c22c83f5dfd56d8dad1/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/Provider2Test.java",
                "status": "modified",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/Provider2Test.java?ref=d0b171798c1992e2b7a02c22c83f5dfd56d8dad1",
                "patch": "@@ -17,7 +17,10 @@\n \n package org.apache.harmony.security.tests.java.security;\n \n+import java.security.MessageDigest;\n+import java.security.NoSuchAlgorithmException;\n import java.security.Provider;\n+import java.security.Security;\n \n public class Provider2Test extends junit.framework.TestCase {\n \n@@ -124,4 +127,44 @@ public void test_toString() {\n         // Regression for HARMONY-3734\n         assertEquals(\"provTest version 1.2\", provTest.toString());\n     }\n+    \n+    // Regression Test for Provider.Service.getAlias(), which is an package\n+    // private method but will lead to NPE thrown at\n+    // Secure.SecurityDorr.getAliases\n+    public void test_getAlias() throws Exception {\n+        MockProvider mockProvider = new MockProvider(\"MOCKNAME\", 1.0,\n+                \"MOCKINFO\");\n+        Provider.Service service = new Provider.Service(mockProvider,\n+                \"MOCKTYPE\", \"MOCKALGORITHM\", \"TESTCLASSNAME\", null, null);\n+        mockProvider.putService(service);\n+        Security.addProvider(mockProvider);\n+        try {\n+            MessageDigest messageDigest = MessageDigest\n+                    .getInstance(\"NOTEXISTS\");\n+        }\n+\n+        catch (NoSuchAlgorithmException e) {\n+            // expected\n+        } finally {\n+            Security.removeProvider(\"MOCKNAME\");\n+        }\n+    }\n+\n+    public static class MockProvider extends Provider {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public MockProvider(String name, double version, String info) {\n+            super(name, version, info);\n+\n+        }\n+\n+        public void putService(Provider.Service service) {\n+            super.putService(service);\n+        }\n+\n+        public void removeService(Provider.Service service) {\n+            super.removeService(service);\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-4617 \"[classlib][awt] NPE while drawing Images with rotation\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@566093 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1c6158d93fe9ce20e374901055dc58f6eea5d5a2",
        "parent": "https://github.com/apache/harmony-classlib/commit/c946d562c78e7bd828b95735e0727c55d4fe9cf4",
        "bug_id": "harmony-classlib_81",
        "file": [
            {
                "sha": "dffc8c2593f48ceeda56523073f5c003caac57ae",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/gl/render/JavaBlitter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/render/JavaBlitter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/render/JavaBlitter.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/render/JavaBlitter.java?ref=1c6158d93fe9ce20e374901055dc58f6eea5d5a2",
                "patch": "@@ -357,7 +357,7 @@ private void transformedBlit(ColorModel srcCM, Raster srcR, int srcX, int srcY,\n         Rectangle dstBlitBounds = new Rectangle(dstX, dstY, srcR.getWidth(), srcR.getHeight());\n \n         Rectangle transSrcBounds = getBounds2D(at, srcBounds).getBounds();\n-        Rectangle transDstBlitBounds = getBounds2D(at, dstBlitBounds).getBounds();\n+        Rectangle transDstBlitBounds = new Rectangle(0, 0, dstR.getWidth(), dstR.getHeight());\n \n         int translateX = transDstBlitBounds.x - transSrcBounds.x;\n         int translateY = transDstBlitBounds.y - transSrcBounds.y;\n@@ -474,7 +474,7 @@ private void transformedBlit(ColorModel srcCM, Raster srcR, int srcX, int srcY,\n \n     }\n \n-    private Rectangle2D getBounds2D(AffineTransform at, Rectangle r) {\n+    public static Rectangle2D getBounds2D(AffineTransform at, Rectangle r) {\n         int x = r.x;\n         int y = r.y;\n         int width = r.width;",
                "deletions": 2
            },
            {
                "sha": "c098ea2c59778e990be0fa5d8f18e5f874a8d8a3",
                "filename": "modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java",
                "status": "modified",
                "changes": 108,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XBlitter.java?ref=1c6158d93fe9ce20e374901055dc58f6eea5d5a2",
                "patch": "@@ -31,6 +31,7 @@\n \n import org.apache.harmony.awt.gl.*;\n import org.apache.harmony.awt.gl.render.Blitter;\n+import org.apache.harmony.awt.gl.render.JavaBlitter;\n import org.apache.harmony.awt.gl.render.NativeImageBlitter;\n import org.apache.harmony.awt.nativebridge.linux.X11;\n import org.apache.harmony.awt.nativebridge.linux.X11Defs;\n@@ -169,76 +170,49 @@ public void blit(\n             default:\n                 XSurface xDstSurf = (XSurface) dstSurf;\n \n-                BufferedImage compIm;\n-                int w = srcSurf.getWidth();\n-                int h = srcSurf.getHeight();\n-\n-                if (!(srcSurf instanceof ImageSurface)) {\n-                    compIm = xDstSurf.g2d.xConfig.createCompatibleImage(w, h);\n-\n-                    NativeImageBlitter.getInstance().blit(\n-                            srcX, srcY, srcSurf,\n-                            srcX, srcY,\n-                            AwtImageBackdoorAccessor.getInstance().getImageSurface(compIm),\n-                            w, h,\n-                            AlphaComposite.Src, null, null\n-                    );\n-                } else {\n-                    ColorModel cm = srcSurf.getColorModel();\n-                    compIm = new BufferedImage(\n-                            cm,\n-                            srcSurf.getRaster(),\n-                            cm.isAlphaPremultiplied(),\n-                            null\n-                    );\n-                }\n-\n-                WritableRaster compRaster = compIm.getRaster();\n-\n                 AffineTransform at = (AffineTransform) sysxform.clone();\n \n-                AffineTransformOp atop =\n-                        new AffineTransformOp(at, xDstSurf.g2d.getRenderingHints());\n-\n-                Rectangle r = atop.getBounds2D(compRaster).getBounds();\n-                int tWidth = r.width;\n-                int tHeight = r.height;\n+                Rectangle transDstBounds = JavaBlitter.getBounds2D(at, new Rectangle(dstX, dstY, width, height)).getBounds();\n+                int tWidth = transDstBounds.width;\n+                int tHeight = transDstBounds.height;\n+                dstX = transDstBounds.x;\n+                dstY = transDstBounds.y;\n+\n+                ColorModel cm = srcSurf.getColorModel();\n+                WritableRaster compRaster = srcSurf.getRaster();\n+                BufferedImage compIm = new BufferedImage(\n+                        cm,\n+                        compRaster,\n+                        cm.isAlphaPremultiplied(),\n+                        null\n+                );\n \n-                BufferedImage transformed;\n-                if (compIm.getColorModel().getTransparency() == Transparency.OPAQUE) {\n-                    transformed = xDstSurf.g2d.xConfig.createCompatibleImage(tWidth, tHeight);\n-                } else {\n-                    ColorModel cm = compIm.getColorModel();\n-                    transformed =\n-                            new BufferedImage(\n-                                    cm,\n-                                    compIm.getRaster().createCompatibleWritableRaster(\n-                                            tWidth,\n-                                            tHeight\n-                                    ),\n-                                    cm.isAlphaPremultiplied(),\n-                                    null\n-                            );\n-                }\n+                BufferedImage transformed = new BufferedImage(tWidth, tHeight, BufferedImage.TYPE_INT_ARGB);\n \n-                atop.filter(compIm, transformed);\n+                Surface transfSurf = Surface.getImageSurface(transformed);\n+                JavaBlitter.getInstance().blit(srcX, srcY, Surface.getImageSurface(compIm), \n+                        0, 0, transfSurf, width, height, at, AlphaComposite.Src, null, null);\n \n                 if (dstX < 0){\n                     tWidth += dstX;\n+                    srcX = -dstX;\n                     dstX = 0;\n                 }\n \n                 if (dstY < 0){\n                     tHeight += dstY;\n+                    srcY = -dstY;\n                     dstY = 0;\n                 }\n \n+                if(tWidth <= 0 || tHeight <= 0 || srcX >= tWidth || srcY >= tHeight) return;\n                 blit(\n-                        0, 0, AwtImageBackdoorAccessor.getInstance().getImageSurface(transformed),\n+                        srcX, srcY, transfSurf,\n                         dstX, dstY, dstSurf,\n                         tWidth, tHeight,\n                         comp, bgcolor, clip\n                 );\n+\n         }\n     }\n \n@@ -248,6 +222,7 @@ public void blit(\n             int width, int height,\n             Composite comp, Color bgcolor, MultiRectArea clip\n     ) {\n+\n         if (clip == null) {\n             clip = new MultiRectArea(new Rectangle(dstX, dstY, width, height));\n         } else {\n@@ -384,8 +359,10 @@ private static void imBlit(\n             MultiRectArea clip\n     ) {\n         XSurface xDstSurf = ((XSurface) dstSurf);\n+\n         boolean srcNoAlpha =\n                 srcSurf.getColorModel().getTransparency() == Transparency.OPAQUE;\n+\n         if (comp instanceof AlphaComposite) {\n             AlphaComposite acomp = (AlphaComposite) comp;\n             if (\n@@ -400,28 +377,27 @@ private static void imBlit(\n             }\n         }\n \n-        AffineTransform t = xDstSurf.g2d.getTransform();\n-        int tx = (int) t.getTranslateX();\n-        int ty = (int) t.getTranslateY();\n-\n-        if (xDstSurf.needServerData) {\n-            xDstSurf.setRoi(new Rectangle2D.Float(dstX - tx, dstY - ty, width, height));\n-        }\n-\n-        clip.translate(-tx, -ty);\n-\n+        Rectangle2D roi = new Rectangle2D.Float(dstX, dstY, width, height); \n+        xDstSurf.setRoi(roi);\n         NativeImageBlitter.getInstance().blit(\n                 srcX, srcY, srcSurf,\n-                dstX - tx, dstY - ty, xDstSurf.getImageSurface(),\n+                0, 0, xDstSurf.getImageSurface(),\n                 width, height,\n-                comp, bgcolor, clip\n+                comp, bgcolor, null\n         );\n \n-        clip.translate(tx, ty);\n+        if (xDstSurf.needServerData) {\n+            xDstSurf.putImage(clip,\n+                    (int) (roi.getX()),\n+                    (int) (roi.getY()),\n+                    (int) roi.getWidth(), \n+                    (int) roi.getHeight()\n+            );\n+\n+        } else {\n+            xDstSurf.putImage(clip, dstX, dstY, width, height);\n+        }\n \n-        // Get translated clip\n-        makeClip(dstX, dstY, width, height, clip);\n-        xDstSurf.putImage(clip);\n         xDstSurf.needServerData = true;\n     }\n ",
                "deletions": 66
            },
            {
                "sha": "49585cac084723419eb67d63380cd7748046d7b5",
                "filename": "modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1c6158d93fe9ce20e374901055dc58f6eea5d5a2/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java",
                "status": "modified",
                "changes": 17,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/unix/org/apache/harmony/awt/gl/linux/XSurface.java?ref=1c6158d93fe9ce20e374901055dc58f6eea5d5a2",
                "patch": "@@ -100,8 +100,8 @@ public WritableRaster getRaster() {\n                     g2d.drawable,\n                     pixmap,\n                     g2d.imageGC,\n-                    (int) (g2d.getTransform().getTranslateX() + roi.getX()),\n-                    (int) (g2d.getTransform().getTranslateY() + roi.getY()),\n+                    (int) roi.getX(),\n+                    (int) roi.getY(),\n                     (int) roi.getWidth(), (int) roi.getHeight(),\n                     0, 0\n             );\n@@ -155,28 +155,25 @@ public WritableRaster getRaster() {\n                     (int) roi.getWidth(), (int) roi.getHeight(),\n                     ~(0L), // All bits set to 1, should be same as XAllPlanes() result\n                     X11Defs.ZPixmap,\n-                    xImage,\n-                    (int) (roi.getX()),\n-                    (int) (roi.getY())\n+                    xImage, 0, 0\n             );\n-\n+            x11.XFreePixmap(g2d.display, pixmap);\n             lastSnapshot = XVolatileImage.biFromXImage(xImage, g2d.xConfig);\n \n             // Cleanup\n             xImage.get_f().destroy_image(xImage);\n         } else {\n             lastSnapshot = g2d.xConfig.createCompatibleImage(width, height);\n         }\n+\n         return lastSnapshot.getRaster();\n     }\n \n-    void putImage(MultiRectArea clip) {\n+    void putImage(MultiRectArea clip, int x, int y, int width, int height) {\n         putImage(\n                 clip,\n                 lastSnapshot.getRaster(),\n-                (int) g2d.getTransform().getTranslateX(),\n-                (int) g2d.getTransform().getTranslateY(),\n-                width, height\n+                x, y, width, height \n         );\n     }\n ",
                "deletions": 10
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-4272 ([classlib][beans] BeanContextServicesSupport.releaseService() throws unexpected NPE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@562086 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/91549efe9bf740331d3ba04c64b76ff3ffcd80ab",
        "parent": "https://github.com/apache/harmony-classlib/commit/58517b34fdad7413cbb4d28a54b5f92cedcb3194",
        "bug_id": "harmony-classlib_82",
        "file": [
            {
                "sha": "56fd7d462f0dc7314e882f07e075c839f935eba8",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/91549efe9bf740331d3ba04c64b76ff3ffcd80ab/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/91549efe9bf740331d3ba04c64b76ff3ffcd80ab/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java?ref=91549efe9bf740331d3ba04c64b76ff3ffcd80ab",
                "patch": "@@ -837,11 +837,17 @@ public void releaseService(BeanContextChild child, Object requestor,\n     }\n \n     /**\n-     * Releases a service without checking the memebership of the child.\n+     * Releases a service without checking the membership of the child.\n      */\n     private void releaseServiceWithoutCheck(BeanContextChild child,\n             BCSSChild bcssChild, Object requestor, Object service,\n             boolean callRevokedListener) {\n+\n+        if (bcssChild.serviceRecords == null\n+                || bcssChild.serviceRecords.isEmpty()) {\n+            return;\n+        }\n+\n         synchronized (child) {\n             // scan record\n             for (Iterator iter = bcssChild.serviceRecords.iterator(); iter",
                "deletions": 1
            },
            {
                "sha": "8b6b35eb171432e923c9e92653c756b0f2faa027",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/91549efe9bf740331d3ba04c64b76ff3ffcd80ab/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/91549efe9bf740331d3ba04c64b76ff3ffcd80ab/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServicesSupportTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServicesSupportTest.java?ref=91549efe9bf740331d3ba04c64b76ff3ffcd80ab",
                "patch": "@@ -1037,6 +1037,17 @@ public void testReleaseService_WrongService()\n         provider.records.assertEndOfRecords();\n         assertNull(l.lastEvent);\n     }\n+    \n+    /*\n+     * regression test for HARMONY-4272\n+     */\n+    public void testReleaseService_WithNullServiceRecords()\n+            throws TooManyListenersException {\n+        MockBeanContextServicesSupport support = new MockBeanContextServicesSupport();\n+        MockBeanContextChild child = new MockBeanContextChild();\n+        support.add(child); \n+        support.releaseService(child, child, new Object()); \n+    }\n \n     public void testReleaseService() throws TooManyListenersException,\n             PropertyVetoException {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-4524 \"[classlib][swing] BasicSplitPaneUI throws NPE if vertical split pane was not fully initialized\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@559044 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/78c5c10f0d9918480788c90a5f02cdae3fda3b68",
        "parent": "https://github.com/apache/harmony-classlib/commit/e7aa3b8f0860790ede05b18d71ae74037f0a37a3",
        "bug_id": "harmony-classlib_83",
        "file": [
            {
                "sha": "051bf3dcd65d8d8a289395923cc9279450ca95aa",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/78c5c10f0d9918480788c90a5f02cdae3fda3b68/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/78c5c10f0d9918480788c90a5f02cdae3fda3b68/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "status": "modified",
                "changes": 16,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java?ref=78c5c10f0d9918480788c90a5f02cdae3fda3b68",
                "patch": "@@ -76,8 +76,10 @@ public void layoutContainer(final Container container) {\n                 int rightCompY = leftCompY;\n                 int rightCompWidth = container.getWidth() - leftCompWidth - divWidth - insets.left - insets.right;\n                 \n-                if (rightCompWidth < components[RIGHT_COMPONENT_INDEX].getMinimumSize().width\n-                    && leftCompWidth > components[LEFT_COMPONENT_INDEX].getMinimumSize().width) {\n+                if ((components[RIGHT_COMPONENT_INDEX] != null)\n+                        && (components[LEFT_COMPONENT_INDEX] != null)\n+                        && rightCompWidth < components[RIGHT_COMPONENT_INDEX].getMinimumSize().width\n+                        && leftCompWidth > components[LEFT_COMPONENT_INDEX].getMinimumSize().width) {\n                     \n                     rightCompWidth = components[RIGHT_COMPONENT_INDEX].getMinimumSize().width;\n                     leftCompWidth = container.getWidth() - rightCompWidth - divWidth - insets.left - insets.right;\n@@ -122,9 +124,13 @@ public void layoutContainer(final Container container) {\n                 int rightCompY = divY + divHeight;\n                 int rightCompHeight = container.getHeight() - leftCompHeight - divHeight - insets.top - insets.bottom;\n                 \n-                if (rightCompHeight < components[RIGHT_COMPONENT_INDEX].getMinimumSize().height\n-                    && leftCompHeight > components[LEFT_COMPONENT_INDEX].getMinimumSize().height) {\n-                        \n+                if ((components[RIGHT_COMPONENT_INDEX] != null)\n+                        && (components[LEFT_COMPONENT_INDEX] != null)\n+                        && rightCompHeight < components[RIGHT_COMPONENT_INDEX]\n+                                .getMinimumSize().height\n+                        && leftCompHeight > components[LEFT_COMPONENT_INDEX]\n+                                .getMinimumSize().height) {\n+                    \n                     rightCompHeight = components[RIGHT_COMPONENT_INDEX].getMinimumSize().height;\n                     leftCompHeight = container.getHeight() - rightCompHeight - divHeight - insets.top - insets.bottom;\n                     ",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2589 ([classlib][swing][plaf] javax.swing.plaf.BorderUIResource.MatteBorderUIResource(null) throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@544078 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3ee469bf232ab417fa6d6891713db46a1a30136a",
        "parent": "https://github.com/apache/harmony-classlib/commit/dc8af2d2ca509ff580e0023ee1cbc27b58da3f9b",
        "bug_id": "harmony-classlib_84",
        "file": [
            {
                "sha": "2494f045e1eeca30a46bfd22ff4f01eea2541628",
                "filename": "modules/swing/src/main/java/common/javax/swing/border/EmptyBorder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/main/java/common/javax/swing/border/EmptyBorder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/main/java/common/javax/swing/border/EmptyBorder.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/border/EmptyBorder.java?ref=3ee469bf232ab417fa6d6891713db46a1a30136a",
                "patch": "@@ -50,8 +50,8 @@ public EmptyBorder(final int top, final int left, final int bottom, final int ri\n      *  This constructor initialize vertical and horizontal insets\n      *  with the same value\n      *\n-     * @param <code>topBottom</code> - specifies vertical (top and bottom) insets\n-     * @param <code>leftRight</code> - specifies horizontal (left and right) insets\n+     * @param topBottom - specifies vertical (top and bottom) insets\n+     * @param leftRight - specifies horizontal (left and right) insets\n      *\n      */\n     EmptyBorder(final int topBottom, final int leftRight) {",
                "deletions": 2
            },
            {
                "sha": "e7686ba1fdd6cf62ca7c5627a31b18e5c23c4033",
                "filename": "modules/swing/src/main/java/common/javax/swing/border/MatteBorder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/main/java/common/javax/swing/border/MatteBorder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/main/java/common/javax/swing/border/MatteBorder.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/border/MatteBorder.java?ref=3ee469bf232ab417fa6d6891713db46a1a30136a",
                "patch": "@@ -46,10 +46,12 @@ public MatteBorder(final Insets insets, final Color color) {\n     }\n \n     public MatteBorder(final Icon tileIcon) {\n-        super(tileIcon.getIconHeight(), tileIcon.getIconWidth());\n-\n-        this.tileIcon = tileIcon;\n-    }\n+\t\t// null vervfication has been added according to HARMONY-2589\n+\t\tsuper((tileIcon == null) ? -1 : tileIcon.getIconHeight(),\n+\t\t\t\t(tileIcon == null) ? -1 : tileIcon.getIconWidth());\n+\t\t\n+\t\tthis.tileIcon=tileIcon;\n+\t}\n \n     public MatteBorder(final int top, final int left, final int bottom, final int right, final Icon tileIcon) {\n         super(top, left, bottom, right);",
                "deletions": 4
            },
            {
                "sha": "215841dc68c2951c846be8c66d3f4825e26c0f3e",
                "filename": "modules/swing/src/test/api/java.injected/javax/swing/border/MatteBorderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/test/api/java.injected/javax/swing/border/MatteBorderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3ee469bf232ab417fa6d6891713db46a1a30136a/modules/swing/src/test/api/java.injected/javax/swing/border/MatteBorderTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java.injected/javax/swing/border/MatteBorderTest.java?ref=3ee469bf232ab417fa6d6891713db46a1a30136a",
                "patch": "@@ -85,10 +85,20 @@ public void testMatteBorderInsetsColor() {\n     public void testMatteBorderIcon() {\n         Icon icon = new ImageIcon(new BufferedImage(20, 20, BufferedImage.TYPE_BYTE_GRAY));\n         MatteBorder border = new MatteBorder(icon);\n+        Insets insets;\n+\n         assertEquals(\"icon value coinsides\", icon, border.getTileIcon());\n         icon = new ImageIcon(new BufferedImage(30, 40, BufferedImage.TYPE_4BYTE_ABGR));\n         border = new MatteBorder(icon);\n         assertEquals(\"icon value coinsides\", icon, border.getTileIcon());\n+        \n+        //Regression test for HARMONY-2589\n+        border = new MatteBorder(null);\n+        insets = border.getBorderInsets();\n+        assertEquals(-1, insets.top);\n+        assertEquals(-1, insets.bottom);\n+        assertEquals(-1, insets.left);\n+        assertEquals(-1, insets.right);\n     }\n \n     /*\n@@ -307,5 +317,5 @@ public void testGetMatteColor() {\n         color = Color.YELLOW;\n         border = new MatteBorder(top, left, bottom, right, color);\n         assertEquals(\"Colors coinside \", color, border.getMatteColor());\n-    }\n-}\n+    }    \n+}\n\\ No newline at end of file",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-3443 \"[classlib][awt][netbeans] Container.paint() throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@530820 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/fdcd479a80ae4b820a50a3ca0ef79654ce26efcb",
        "parent": "https://github.com/apache/harmony-classlib/commit/db98e117b8216f49f52fad94ff0d18e156cd98f5",
        "bug_id": "harmony-classlib_85",
        "file": [
            {
                "sha": "e64d7eb917e348192e855bd003b2bea84c0ecdf0",
                "filename": "modules/awt/src/main/java/common/java/awt/Container.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fdcd479a80ae4b820a50a3ca0ef79654ce26efcb/modules/awt/src/main/java/common/java/awt/Container.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fdcd479a80ae4b820a50a3ca0ef79654ce26efcb/modules/awt/src/main/java/common/java/awt/Container.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Container.java?ref=fdcd479a80ae4b820a50a3ca0ef79654ce26efcb",
                "patch": "@@ -989,7 +989,7 @@ public void paintComponents(Graphics g) {\n     private void paintComponentsImpl(Graphics g) {\n         Shape clip;\n         \n-        if (g == null) {\n+        if ((!isShowing()) || (g == null)) {\n             return;\n         }\n         \n@@ -999,7 +999,7 @@ private void paintComponentsImpl(Graphics g) {\n             Component comp = children.get(i);\n \n             if (comp.isLightweight() && comp.isVisible()) {\n-                if (!clip.intersects(comp.getBounds())) {\n+                if ((clip != null) && !clip.intersects(comp.getBounds())) {\n                     continue;\n                 }\n ",
                "deletions": 2
            },
            {
                "sha": "58a9916dab5a3491d62aeedffa9fb76abad27e1c",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fdcd479a80ae4b820a50a3ca0ef79654ce26efcb/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fdcd479a80ae4b820a50a3ca0ef79654ce26efcb/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java?ref=fdcd479a80ae4b820a50a3ca0ef79654ce26efcb",
                "patch": "@@ -17,6 +17,9 @@\n package java.awt;\n \n \n+import javax.swing.DebugGraphics;\n+import javax.swing.JButton;\n+\n import junit.framework.TestCase;\n \n \n@@ -63,6 +66,28 @@ public final void testPaint() {\n         // Regression test for HARMONY-2527\n         final Component c = new Frame();\n         c.paint(c.getGraphics());\n+        // End of regression for HARMONY-2527\n+        \n+        // Regression for HARMONY-3443\n+        final Graphics g;\n+        final Frame f = new Frame();\n+\n+        f.add(new JButton());\n+        f.setVisible(true);\n+        g = f.getGraphics();\n+\n+        try {\n+            g.setClip(null);\n+            assertNull(g.getClip());\n+            f.paint(g);\n+        } finally {\n+            f.dispose();\n+        }\n+        // End of regression for HARMONY-3443\n+        \n+        // Regression for HARMONY-3430\n+        new Container().paint(new DebugGraphics());\n+        // End of regression for HARMONY-3430\n     }\n \n     public void testAddComponent() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-3443 \"[classlib][awt][netbeans] Container.paint() throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@521764 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40",
        "parent": "https://github.com/apache/harmony-classlib/commit/25f6ba7264de387dc84e706b0b091fe82c6d145e",
        "bug_id": "harmony-classlib_86",
        "file": [
            {
                "sha": "e64d7eb917e348192e855bd003b2bea84c0ecdf0",
                "filename": "modules/awt/src/main/java/common/java/awt/Container.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40/modules/awt/src/main/java/common/java/awt/Container.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40/modules/awt/src/main/java/common/java/awt/Container.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Container.java?ref=e3f8657ef5cfb404653c7d8db25f1ea0d6428e40",
                "patch": "@@ -989,7 +989,7 @@ public void paintComponents(Graphics g) {\n     private void paintComponentsImpl(Graphics g) {\n         Shape clip;\n         \n-        if (g == null) {\n+        if ((!isShowing()) || (g == null)) {\n             return;\n         }\n         \n@@ -999,7 +999,7 @@ private void paintComponentsImpl(Graphics g) {\n             Component comp = children.get(i);\n \n             if (comp.isLightweight() && comp.isVisible()) {\n-                if (!clip.intersects(comp.getBounds())) {\n+                if ((clip != null) && !clip.intersects(comp.getBounds())) {\n                     continue;\n                 }\n ",
                "deletions": 2
            },
            {
                "sha": "58a9916dab5a3491d62aeedffa9fb76abad27e1c",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java?ref=e3f8657ef5cfb404653c7d8db25f1ea0d6428e40",
                "patch": "@@ -17,6 +17,9 @@\n package java.awt;\n \n \n+import javax.swing.DebugGraphics;\n+import javax.swing.JButton;\n+\n import junit.framework.TestCase;\n \n \n@@ -63,6 +66,28 @@ public final void testPaint() {\n         // Regression test for HARMONY-2527\n         final Component c = new Frame();\n         c.paint(c.getGraphics());\n+        // End of regression for HARMONY-2527\n+        \n+        // Regression for HARMONY-3443\n+        final Graphics g;\n+        final Frame f = new Frame();\n+\n+        f.add(new JButton());\n+        f.setVisible(true);\n+        g = f.getGraphics();\n+\n+        try {\n+            g.setClip(null);\n+            assertNull(g.getClip());\n+            f.paint(g);\n+        } finally {\n+            f.dispose();\n+        }\n+        // End of regression for HARMONY-3443\n+        \n+        // Regression for HARMONY-3430\n+        new Container().paint(new DebugGraphics());\n+        // End of regression for HARMONY-3430\n     }\n \n     public void testAddComponent() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2698 \"[classlib][swing] javax.swing.plaf.basic.BasicProgressBarUI.getPreferredInnerHorizontal() returns null while RI throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@519965 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f",
        "parent": "https://github.com/apache/harmony-classlib/commit/7b1365020c1942a3c4ecad00e122c2de4eb28618",
        "bug_id": "harmony-classlib_87",
        "file": [
            {
                "sha": "e43b3a65c81bef9e1ed5b6e7d9b715e88eb59d70",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java?ref=929c8d8eb4c80b82837b6f5776cbcb31eb992e7f",
                "patch": "@@ -222,10 +222,16 @@ protected void stopAnimationTimer() {\n     }\n \n     protected Dimension getPreferredInnerHorizontal() {\n+        if (progressBar == null) {\n+            throw new NullPointerException();\n+        }\n         return horizontalSize;\n     }\n \n     protected Dimension getPreferredInnerVertical() {\n+        if (progressBar == null) {\n+            throw new NullPointerException();\n+        }\n         return verticalSize;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "93efe3a65e00a8f2e484f0615b9702e18737bfa2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "status": "modified",
                "changes": 28,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java?ref=929c8d8eb4c80b82837b6f5776cbcb31eb992e7f",
                "patch": "@@ -182,4 +182,32 @@ public void stopAnimationTimer() {\n             super.stopAnimationTimer();\n         }\n     }\n+    \n+    public void testHarmony2698Regression() {\n+        class testBasicProgressBarUI extends BasicProgressBarUI { \n+            public Dimension getPreferredInnerVertical() { \n+                return super.getPreferredInnerVertical(); \n+            } \n+      \n+        public Dimension getPreferredInnerHorizontal() { \n+            return super.getPreferredInnerHorizontal(); \n+            } \n+        }\n+\n+        try { \n+            testBasicProgressBarUI pb = new testBasicProgressBarUI();\n+            pb.getPreferredInnerHorizontal(); \n+            fail(\"NPE expected\"); \n+        } catch (NullPointerException e) { \n+            //expected\n+        } \n+\n+        try { \n+            testBasicProgressBarUI pb = new testBasicProgressBarUI(); \n+            pb.getPreferredInnerVertical(); \n+            fail(\"NPE expected\"); \n+        } catch (NullPointerException e) { \n+            //expected\n+        } \n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2853 \"[classlib][swing] j.s.plaf.basic.BasicScrollBarUI.configureScrollBarColors() doesn't throw NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@518878 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/bbcc4b2941e149dde870bc3d35a0a179217d5a3b",
        "parent": "https://github.com/apache/harmony-classlib/commit/7dc97eb8db18429b26f9b796d09e2983c6a94f97",
        "bug_id": "harmony-classlib_88",
        "file": [
            {
                "sha": "073eed19ebeeaea7e81118b9546235d8b0f1bade",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bbcc4b2941e149dde870bc3d35a0a179217d5a3b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bbcc4b2941e149dde870bc3d35a0a179217d5a3b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java?ref=bbcc4b2941e149dde870bc3d35a0a179217d5a3b",
                "patch": "@@ -279,6 +279,9 @@ public Dimension minimumLayoutSize(final Container c) {\n     }\n \n     protected void configureScrollBarColors() {\n+        if (scrollbar == null)\n+            throw new NullPointerException();\n+            \n         if ((thumbColor == null) || (thumbColor instanceof UIResource)) {\n             thumbColor = UIManager.getColor(\"ScrollBar.thumb\");\n         }",
                "deletions": 0
            },
            {
                "sha": "d93577f541939b0cc3f3812bd2b079d9ab544834",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bbcc4b2941e149dde870bc3d35a0a179217d5a3b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bbcc4b2941e149dde870bc3d35a0a179217d5a3b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java?ref=bbcc4b2941e149dde870bc3d35a0a179217d5a3b",
                "patch": "@@ -257,6 +257,15 @@ public void run() {\n         f.dispose();\n     }\n \n+    public void testConfigureScrollBarColors() {\n+\ttry {            \n+            new BasicScrollBarUI().configureScrollBarColors();\n+            fail(\"NPE expected\");\n+        } catch (NullPointerException npe) {\n+            // PASSED\n+        }\n+    }\n+\n     private JFrame createFrame(final JScrollPane pane) throws Exception {\n         final JFrame f = new JFrame();\n         f.getContentPane().add(pane);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2571 \"[classlib][swing] javax.swing.JEditorPane.getEditorKitClassNameForContentType(null) does not throw unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@517154 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d594311c976c0dbaa6d0642260477d656b790b5a",
        "parent": "https://github.com/apache/harmony-classlib/commit/cd5e0e580f7b807a83456c613f1200f45e8430b8",
        "bug_id": "harmony-classlib_89",
        "file": [
            {
                "sha": "02ffcf98a89bc94de2de09fae8e78738aae0658a",
                "filename": "modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d594311c976c0dbaa6d0642260477d656b790b5a/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d594311c976c0dbaa6d0642260477d656b790b5a/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JEditorPane.java?ref=d594311c976c0dbaa6d0642260477d656b790b5a",
                "patch": "@@ -257,6 +257,10 @@ public static EditorKit createEditorKitForContentType(final String contentType)\n     }\n \n     public static String getEditorKitClassNameForContentType(final String type) {\n+        if (type == null) {\n+            throw new NullPointerException();\n+        }\n+\n         int index = contentTypes.indexOf(type);\n         return (index >= 0) ? editorKitNames.get(index) : null;\n     }",
                "deletions": 0
            },
            {
                "sha": "721a31c5c2683ab083ba900a770447d7fdfdea2f",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d594311c976c0dbaa6d0642260477d656b790b5a/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d594311c976c0dbaa6d0642260477d656b790b5a/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java?ref=d594311c976c0dbaa6d0642260477d656b790b5a",
                "patch": "@@ -819,6 +819,13 @@ public void testGetEditorKitClassNameForContentType() {\n         assertEquals(\"javax.swing.text.rtf.RTFEditorKit\", JEditorPane\n                 .getEditorKitClassNameForContentType(\"text/rtf\"));\n         assertNull(JEditorPane.getEditorKitClassNameForContentType(\"...\"));\n+        \n+        // Regression test for HARMONY-2571\n+        try { \n+            JEditorPane.getEditorKitClassNameForContentType(null); \n+            fail(\"NPE expected\"); \n+        } catch (NullPointerException e) { \n+        } \n     }\n \n     public void testSetEditorKitForContentType() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2609 \"[classlib][swing] Compatibility: javax.swing.plaf.basic.BasicTabbedPaneUI.TabbedPaneLayout.removeLayoutComponent() throws NPE while RI does not\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@515207 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8c36ec7f998589c676b5fe649924af3c7eb593a4",
        "parent": "https://github.com/apache/harmony-classlib/commit/f3ffcc9a37955cf5a5dee708264b151e6c91d894",
        "bug_id": "harmony-classlib_90",
        "file": [
            {
                "sha": "f7df5784a3f79a67d53a45a17aa32a21db8dd526",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8c36ec7f998589c676b5fe649924af3c7eb593a4/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8c36ec7f998589c676b5fe649924af3c7eb593a4/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI.java?ref=8c36ec7f998589c676b5fe649924af3c7eb593a4",
                "patch": "@@ -142,6 +142,9 @@ public void addLayoutComponent(final String name, final Component comp) {\n         }\n \n         public void calculateLayoutInfo() {\n+            if (tabPane == null) {\n+                return;\n+            }\n             int tabCount = tabPane.getTabCount();\n             final Component selectedComponent = tabPane.getSelectedComponent();\n             if (selectedComponent != null) {",
                "deletions": 0
            },
            {
                "sha": "e1b813e0e8fbe65df286c5eae12f9ab008cb8104",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI$TabbedPaneLayoutTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8c36ec7f998589c676b5fe649924af3c7eb593a4/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI$TabbedPaneLayoutTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8c36ec7f998589c676b5fe649924af3c7eb593a4/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI$TabbedPaneLayoutTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTabbedPaneUI$TabbedPaneLayoutTest.java?ref=8c36ec7f998589c676b5fe649924af3c7eb593a4",
                "patch": "@@ -23,9 +23,12 @@\n import java.awt.Dimension;\n import javax.swing.ImageIcon;\n import javax.swing.JLabel;\n+import javax.swing.JPopupMenu;\n import javax.swing.JTabbedPane;\n import javax.swing.SwingConstants;\n import javax.swing.SwingTestCase;\n+import javax.swing.plaf.metal.MetalTabbedPaneUI;\n+\n \n public class BasicTabbedPaneUI$TabbedPaneLayoutTest extends SwingTestCase {\n     private JTabbedPane tabbed;\n@@ -59,7 +62,15 @@ protected void tearDown() throws Exception {\n     }\n \n     public void testCalculateLayoutInfo() {\n-        // the documentation is empty, results are implementation specific\n+        try {   \n+            MetalTabbedPaneUI localMetalTabbedPaneUI = new MetalTabbedPaneUI();\n+            BasicTabbedPaneUI.TabbedPaneLayout localTabbedPaneLayout =\n+                localMetalTabbedPaneUI.new TabbedPaneLayout();\n+            JPopupMenu localJPopupMenu = new JPopupMenu();\n+            localTabbedPaneLayout.removeLayoutComponent(localJPopupMenu);\n+        } catch (NullPointerException npe) {   \n+            fail(\"NPE should not be thrown\");            \n+        }\n     }\n \n     public void testPreferredTabAreaHeight() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2852 \"[classlib][swing] j.s.plaf.basic.BasicScrollBarUI.PropertyChangeHandler.propertyChange throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@515133 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36",
        "parent": "https://github.com/apache/harmony-classlib/commit/0b3a86e8834c49d990abdeeb91ccbb43820fa8ea",
        "bug_id": "harmony-classlib_91",
        "file": [
            {
                "sha": "8232041522aa64d0ca7fd27d0c4d218027bd4f33",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicScrollBarUI.java?ref=2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36",
                "patch": "@@ -219,8 +219,10 @@ public void propertyChange(final PropertyChangeEvent e) {\n                 }\n             }\n \n-            scrollbar.revalidate();\n-            scrollbar.repaint();\n+\t    if (scrollbar != null) {\t\n+                scrollbar.revalidate();\n+                scrollbar.repaint();\n+            }\n         }\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "1ee81d912059d0fd6dc10724c5e2f52bac57c55f",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicScrollBarUITest.java?ref=2bb21d7b22830ce9a33c4e2ccdba25fda3dafe36",
                "patch": "@@ -24,6 +24,7 @@\n import java.awt.Dimension;\n import java.awt.Frame;\n import java.awt.Rectangle;\n+import java.beans.PropertyChangeEvent;\n import javax.swing.BasicSwingTestCase;\n import javax.swing.DefaultBoundedRangeModel;\n import javax.swing.JButton;\n@@ -273,4 +274,16 @@ private void checkIsCloseTo(final int expected, final int actual) {\n         assertTrue(\"expected: \" + expected + \", actual: \" + actual,\n                 Math.abs(expected - actual) <= 2);\n     }\n+\n+    public void testPropertyChange() {\n+        try {            \n+            BasicScrollBarUI sbr = new BasicScrollBarUI();\n+            BasicScrollBarUI.PropertyChangeHandler h = sbr.new PropertyChangeHandler();\n+            final Object object = new Object();\n+            PropertyChangeEvent pce = new PropertyChangeEvent(object, \"name\", object, object);\n+            h.propertyChange(pce);\n+        } catch (NullPointerException npe) {            \n+            fail(\"NPE thrown\");\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-3204 \"[awt] Window.pack() throws NPE if the font of nested components is not set\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@513642 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c5a5e4e422fb449b7d89ada5bd53184addef7d51",
        "parent": "https://github.com/apache/harmony-classlib/commit/a2c4e47abeae2544998850de8d553a8ef49c27cc",
        "bug_id": "harmony-classlib_92",
        "file": [
            {
                "sha": "7515592f5353b3a016423455e8c4f23544415fa0",
                "filename": "modules/awt/src/main/java/common/java/awt/Window.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c5a5e4e422fb449b7d89ada5bd53184addef7d51/modules/awt/src/main/java/common/java/awt/Window.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c5a5e4e422fb449b7d89ada5bd53184addef7d51/modules/awt/src/main/java/common/java/awt/Window.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Window.java?ref=c5a5e4e422fb449b7d89ada5bd53184addef7d51",
                "patch": "@@ -691,6 +691,10 @@ public boolean isFocused() {\n     public void pack() {\n         toolkit.lockAWT();\n         try {\n+            if (getFont() == null) {\n+                setFont(Font.DEFAULT_FONT);\n+            }\n+            \n             if ((parent != null) && !parent.isDisplayable()) {\n                 parent.mapToDisplay(true);\n             }",
                "deletions": 0
            },
            {
                "sha": "201ff116182dd27cc7ca31349f473ad502623cda",
                "filename": "modules/awt/src/test/api/java/common/java/awt/WindowTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c5a5e4e422fb449b7d89ada5bd53184addef7d51/modules/awt/src/test/api/java/common/java/awt/WindowTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c5a5e4e422fb449b7d89ada5bd53184addef7d51/modules/awt/src/test/api/java/common/java/awt/WindowTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/WindowTest.java?ref=c5a5e4e422fb449b7d89ada5bd53184addef7d51",
                "patch": "@@ -178,5 +178,19 @@ public void testGetFont_Default(){\n         // regression test for Harmony-1605\n         assertEquals(null, w.getFont());\n     }\n-    \n+\n+    public void testPack() {\n+        final Button b = new Button();\n+\n+        assertNull(b.getFont());\n+        f.add(b);\n+        assertNull(b.getFont());\n+        assertFalse(b.isDisplayable());\n+        f.pack();\n+        assertTrue(f.isDisplayable());\n+        assertTrue(b.isDisplayable());\n+        assertNotNull(b.getFont());\n+        assertNotNull(f.getFont());\n+        f.dispose();\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2617 \"[classlib][swing] javax.swing.JTextPane(null) does not throw unspecified NPE\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@513470 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2c50073031903cb987c6b6ada8b8bfb3248494a2",
        "parent": "https://github.com/apache/harmony-classlib/commit/e25d5a2b8e501d7c217578cda032076b4f18e182",
        "bug_id": "harmony-classlib_93",
        "file": [
            {
                "sha": "340627365c6a6133d8bf6bd1c49b21c2d732287b",
                "filename": "modules/swing/src/main/java/common/javax/swing/JTextPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c50073031903cb987c6b6ada8b8bfb3248494a2/modules/swing/src/main/java/common/javax/swing/JTextPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c50073031903cb987c6b6ada8b8bfb3248494a2/modules/swing/src/main/java/common/javax/swing/JTextPane.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JTextPane.java?ref=2c50073031903cb987c6b6ada8b8bfb3248494a2",
                "patch": "@@ -55,6 +55,10 @@ public JTextPane() {\n \n     public JTextPane(final StyledDocument doc) {\n         this();\n+\n+        if (doc == null) {\n+            throw new NullPointerException();\n+        } \n     }\n \n     public String getUIClassID() {",
                "deletions": 0
            },
            {
                "sha": "32b2d1a5f8d78160fe956dc24348a26796339f34",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JTextPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2c50073031903cb987c6b6ada8b8bfb3248494a2/modules/swing/src/test/api/java/common/javax/swing/JTextPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2c50073031903cb987c6b6ada8b8bfb3248494a2/modules/swing/src/test/api/java/common/javax/swing/JTextPaneTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JTextPaneTest.java?ref=2c50073031903cb987c6b6ada8b8bfb3248494a2",
                "patch": "@@ -607,4 +607,13 @@ private void assertAttrubutes(final AttributeSet attrs, final boolean isBold,\n         assertEquals(isSuperScript, StyleConstants.isSuperscript(attrs));\n         assertEquals(isUnderline, StyleConstants.isUnderline(attrs));\n     }\n+\n+    public void testConstructor() {\n+        try {      \n+            new JTextPane(null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }\n+    }\n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2745 \"[classlib][swing] j.s.text.Utilities.getPosition{Above, Below} throw NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@513449 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e25d5a2b8e501d7c217578cda032076b4f18e182",
        "parent": "https://github.com/apache/harmony-classlib/commit/e4ea38ce7ab43396fcbe5a3b74e8716a0e6a1131",
        "bug_id": "harmony-classlib_94",
        "file": [
            {
                "sha": "71779b71a25c9209757f34ad4622511a07624fb6",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextUtils.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e25d5a2b8e501d7c217578cda032076b4f18e182/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextUtils.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e25d5a2b8e501d7c217578cda032076b4f18e182/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextUtils.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextUtils.java?ref=e25d5a2b8e501d7c217578cda032076b4f18e182",
                "patch": "@@ -372,7 +372,7 @@ public static final int getPositionAbove(final TextKit textKit,\n                                              final int p, final int x)\n             throws BadLocationException {\n         int p0 = getRowStart(textKit, p);\n-        if (p0 == 0) {\n+        if (p0 <= 0) {\n             return -1;\n         }\n         int end = p0 - 1;\n@@ -405,6 +405,9 @@ public static final int getPositionBelow(final TextKit textKit,\n                                              final int p, final int x)\n             throws BadLocationException {\n         int p0 = getRowEnd(textKit, p);\n+        if (p0 == -1) {\n+            return -1;\n+        }\n         int length = textKit.getDocument().getLength();\n         if (p0 == length) {\n             return p;",
                "deletions": 1
            },
            {
                "sha": "5d13a830e5918a4fd2bd5457f56dff342a512c37",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/UtilitiesTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e25d5a2b8e501d7c217578cda032076b4f18e182/modules/swing/src/test/api/java/common/javax/swing/text/UtilitiesTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e25d5a2b8e501d7c217578cda032076b4f18e182/modules/swing/src/test/api/java/common/javax/swing/text/UtilitiesTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/UtilitiesTest.java?ref=e25d5a2b8e501d7c217578cda032076b4f18e182",
                "patch": "@@ -631,6 +631,18 @@ public void testGetPositionAboveBelow() {\n         getPositionAboveBelowTest(jtf);\n     }\n \n+    // HARMONY-2745\n+    public void testGetPositionAbove() throws BadLocationException {\n+        jta = new JTextArea();\n+        assertEquals(-1, Utilities.getPositionAbove(jta, 1, 0));\n+    }\n+\n+    // HARMONY-2745\n+    public void testGetPositionBelow() throws BadLocationException {\n+        jta = new JTextArea();\n+        assertEquals(-1, Utilities.getPositionBelow(jta, 1, 0));\n+    }\n+\n     void getWordStartTest(final JTextComponent c) {\n         AbstractDocument ad = (AbstractDocument) c.getDocument();\n         BreakIterator bi = BreakIterator.getWordInstance();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2512 ([classlib][swing] javax.swing.plaf.basic.BasicPopupMenuUI.isPopupTrigger(null) does not throw unspecified NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@506428 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ab4fb44f2e1d6cd78723c00802c03849848b4a10",
        "parent": "https://github.com/apache/harmony-classlib/commit/4c8a38780aab4a3c5316a3013d7ce9e37da42aa6",
        "bug_id": "harmony-classlib_95",
        "file": [
            {
                "sha": "6a6c097c6109b80c86795325b2ea667819aaf001",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ab4fb44f2e1d6cd78723c00802c03849848b4a10/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ab4fb44f2e1d6cd78723c00802c03849848b4a10/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "status": "modified",
                "changes": 8,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java?ref=ab4fb44f2e1d6cd78723c00802c03849848b4a10",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexander T. Simbirtsev\n- * @version $Revision$\n- */\n package javax.swing.plaf.basic;\n \n import java.awt.event.MouseEvent;\n@@ -95,6 +91,10 @@ public void uninstallUI(final JComponent c) {\n     }\n \n     public boolean isPopupTrigger(final MouseEvent event) {\n+        if (event == null) {\n+            throw new NullPointerException();\n+        }\n+ \n         return false;\n     }\n }",
                "deletions": 4
            },
            {
                "sha": "d69b947cc7bc6d4081d37f70b5ab90a29430cc7a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ab4fb44f2e1d6cd78723c00802c03849848b4a10/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ab4fb44f2e1d6cd78723c00802c03849848b4a10/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java?ref=ab4fb44f2e1d6cd78723c00802c03849848b4a10",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexander T. Simbirtsev\n- * @version $Revision$\n- */\n package javax.swing.plaf.basic;\n \n import java.awt.Color;\n@@ -87,6 +83,16 @@ public void testIsPopupTrigger() {\n         assertFalse(popupUI.isPopupTrigger(event2));\n         assertFalse(popupUI.isPopupTrigger(event3));\n         assertFalse(popupUI.isPopupTrigger(event4));\n+\n+        // regression for HARMONY-2512\n+        try {    \n+            BasicPopupMenuUI m = new BasicPopupMenuUI();\n+\n+            m.isPopupTrigger(null);\n+            fail(\"NPE should be thrown\"); \n+        } catch (NullPointerException npe) {                \n+            // PASSED            \n+        }\n     }\n \n     /*",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Updated patch for HARMONY-2602 \"[classlib][swing][plaf] javax.swing.plaf.basic.BasicTextAreaUI.create(null) doesn't throw NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@504154 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/69a7e237228e3a6f1a9811ca4216e795d8af70d8",
        "parent": "https://github.com/apache/harmony-classlib/commit/57e851784976fee27c121747b5defb5ecf9c927b",
        "bug_id": "harmony-classlib_96",
        "file": [
            {
                "sha": "a1edc1c28796a9c702d1904e0fad1df1b555edc4",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/69a7e237228e3a6f1a9811ca4216e795d8af70d8/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/69a7e237228e3a6f1a9811ca4216e795d8af70d8/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java?ref=69a7e237228e3a6f1a9811ca4216e795d8af70d8",
                "patch": "@@ -55,10 +55,6 @@ public static ComponentUI createUI(final JComponent c) {\n     }\n \n     public View create(final Element element) {\n-        if (element == null) {\n-            throw new NullPointerException();\n-        }\n-\n         Document doc = element.getDocument();\n         Boolean i18n = (Boolean)doc.getProperty(StringConstants.BIDI_PROPERTY);\n         if (i18n.booleanValue()) {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2782 \"[classlib][swing] j.s.text.DefaultCaret.install doesn't throw NPE whereas RI does\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@504134 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1d411e711d39b91fd076bc6c0a41c64543199e6d",
        "parent": "https://github.com/apache/harmony-classlib/commit/20828c1d6d56445ec3b8f85a3b63a191c30058a7",
        "bug_id": "harmony-classlib_97",
        "file": [
            {
                "sha": "76a4397162c864502ab60092c1f7a10289c8c47c",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextCaret.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/text/TextCaret.java?ref=1d411e711d39b91fd076bc6c0a41c64543199e6d",
                "patch": "@@ -46,7 +46,7 @@ void setMagicCaretPosition(final int i1,\n \n     void paint(Graphics g);\n \n-    boolean setComponent(final Component c);\n+    void setComponent(final Component c);\n \n     AWTHighlighter getHighlighter();\n }",
                "deletions": 1
            },
            {
                "sha": "beb5470b8ef27fb477a7d953d213c1901962e731",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/AWTCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/AWTCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/AWTCaret.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/AWTCaret.java?ref=1d411e711d39b91fd076bc6c0a41c64543199e6d",
                "patch": "@@ -65,12 +65,10 @@ public void setDot(final int pos, final Bias b) {\n \n     }\n \n-    public boolean setComponent(final Component c) {\n-        if (super.setComponent(c)) {\n-            highlighter.setComponent(c);\n-        }\n+    public void setComponent(final Component c) {\n+        super.setComponent(c);\n+        highlighter.setComponent(c);\n         textKit.addCaretListeners(this);\n-        return true;\n     }\n \n     Object createTimer(final boolean isMagicTimer, final int delay) {",
                "deletions": 5
            },
            {
                "sha": "739e44247eea54109fa86e0c7a37a84754beac95",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "status": "modified",
                "changes": 11,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java?ref=1d411e711d39b91fd076bc6c0a41c64543199e6d",
                "patch": "@@ -681,9 +681,8 @@ public void install(final JTextComponent c) {\n         if (c == null) { // Fix for HARMONY-1750, for compatiblity with RI\n             throw new NullPointerException(Messages.getString(\"swing.05\")); //$NON-NLS-1$\n         }\n-        if (!setComponent(c)) {\n-            return;\n-        }\n+        setComponent(c);\n+\n         component.addMouseListener(this);\n         component.addMouseMotionListener(this);\n         component.addFocusListener(this);\n@@ -694,10 +693,7 @@ public void install(final JTextComponent c) {\n                                         selectionColor);\n     }\n \n-    boolean setComponent(final Component c) {\n-        if (c == null) {\n-            return false;\n-        }\n+    void setComponent(final Component c) {\n         component = c;\n         textKit = TextUtils.getTextKit(component);\n         document = textKit.getDocument();\n@@ -707,7 +703,6 @@ boolean setComponent(final Component c) {\n         }\n         selectionColor = getSelectionColor();\n         caretColor = getCaretColor();\n-        return true;\n     }\n \n     public boolean isActive() {",
                "deletions": 8
            },
            {
                "sha": "fde0486f393fce31dce2c47a04f1b42aa6cc7830",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1d411e711d39b91fd076bc6c0a41c64543199e6d/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java?ref=1d411e711d39b91fd076bc6c0a41c64543199e6d",
                "patch": "@@ -718,8 +718,7 @@ public JTextComponent() {\n             public AWTHighlighter getHighlighter() {\n                 return null;\n             }\n-            public boolean setComponent(final Component c) {\n-                return false;\n+            public void setComponent(final Component c) {\n             }\n             public void paint(final Graphics g) {\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2900 \"[classlib][swing] j.s.plaf.basic.BasicOptionPaneUI.ButtonAreaLayout.preferredLayoutSize(null) throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@504096 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c707f5437943607d9c139c6a46e1a6b93c66746a",
        "parent": "https://github.com/apache/harmony-classlib/commit/2c2a89b37fe3d73e7335ccf864316261c49f0e32",
        "bug_id": "harmony-classlib_98",
        "file": [
            {
                "sha": "40ce419af5cb0980a137c5bf424329cdd6dd8f6a",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c707f5437943607d9c139c6a46e1a6b93c66746a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c707f5437943607d9c139c6a46e1a6b93c66746a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java?ref=c707f5437943607d9c139c6a46e1a6b93c66746a",
                "patch": "@@ -156,6 +156,10 @@ private int getMaxChildHeight(final Container parent) {\n         }\n \n         public Dimension preferredLayoutSize(final Container parent) {\n+            if (parent == null) {\n+                return new Dimension();\n+            }\n+\n             int totalWidth = 0;\n             int totalHeight = getMaxChildHeight(parent);\n             int numChildren = parent.getComponentCount();",
                "deletions": 0
            },
            {
                "sha": "d1211a3e16ad5550ed907ec19246ff01e3df2dd5",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c707f5437943607d9c139c6a46e1a6b93c66746a/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c707f5437943607d9c139c6a46e1a6b93c66746a/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java?ref=c707f5437943607d9c139c6a46e1a6b93c66746a",
                "patch": "@@ -320,6 +320,13 @@ public void testPreferredLayoutSize() {\n                 .preferredLayoutSize(container));\n     }\n \n+    // Regression for HARMONY-2900\n+    public void testPreferedLayoutSize() {\n+        layout = new BasicOptionPaneUI.ButtonAreaLayout(false, 20);\n+        assertEquals(new Dimension(), layout.preferredLayoutSize(null));\n+        // no exception expected\n+    }\n+\n     public void testRemoveLayoutComponent() {\n         Container container = new JPanel();\n         JComponent component1 = new JPanel();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying the patch from HARMONY-2019 ([classlib][awt] Container.remove(null) expected NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@501819 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f160d8c0b3689739246f309c74ebf005e93a0329",
        "parent": "https://github.com/apache/harmony-classlib/commit/8a5c137ef05b4b3cfc7a9fea3b8e3395bbe38e9b",
        "bug_id": "harmony-classlib_99",
        "file": [
            {
                "sha": "8553e2fba17e558e789f748b68962398d3816e02",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ClassLoadingMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ClassLoadingMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ClassLoadingMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ClassLoadingMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -38,7 +38,7 @@\n \n \n public class ClassLoadingMXBeanImplTest extends\n-        SingleInstanceDynamicMXBeanImplTest {\n+        SingleInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "93f1f8d1f72bac6a9aa070f38f35d93c72802b2c",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/CompilationMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/CompilationMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/CompilationMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/CompilationMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -38,7 +38,7 @@\n \n \n public class CompilationMXBeanImplTest extends\n-        SingleInstanceDynamicMXBeanImplTest {\n+        SingleInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "e64fe8290cac286d7ae2c2290856964ae55235e6",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/DynamicMXBeanImplTestBase.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/DynamicMXBeanImplTestBase.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/DynamicMXBeanImplTestBase.java",
                "status": "renamed",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/DynamicMXBeanImplTestBase.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -29,13 +29,13 @@\n /**\n  * \n  */\n-public abstract class DynamicMXBeanImplTest extends TestCase {\n+public abstract class DynamicMXBeanImplTestBase extends TestCase {\n \n     protected Map<String, AttributeData> attribs;\n \n     abstract protected void populateTestAttributes();\n \n-    public DynamicMXBeanImplTest() {\n+    public DynamicMXBeanImplTestBase() {\n         populateTestAttributes();\n     }\n ",
                "deletions": 2,
                "previous_filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/DynamicMXBeanImplTest.java"
            },
            {
                "sha": "c31c3f679d75b92ac0910650851f1ee5d339fb75",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/GarbageCollectorMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/GarbageCollectorMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/GarbageCollectorMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/GarbageCollectorMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -41,7 +41,7 @@\n \n \n public class GarbageCollectorMXBeanImplTest extends\n-        MultiInstanceDynamicMXBeanImplTest {\n+        MultiInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "3f58b9b9d11d2e79f8eb6c0d07087a23e0550a02",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/LoggingMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/LoggingMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/LoggingMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/LoggingMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -41,7 +41,7 @@\n import org.apache.harmony.lang.management.ManagementUtils;\n \n \n-public class LoggingMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTest {\n+public class LoggingMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTestBase {\n \n     private Enumeration<String> loggerNames;\n ",
                "deletions": 1
            },
            {
                "sha": "289f30c62a15873d150312e2e7c047ef1478da4b",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -46,7 +46,7 @@\n import org.apache.harmony.lang.management.MemoryMXBeanImpl;\n \n \n-public class MemoryMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTest {\n+public class MemoryMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTestBase {\n \n     private MemoryMXBeanImpl notifierBean;\n ",
                "deletions": 1
            },
            {
                "sha": "15af0594f1190844ea0ed3cc820c5650b3cec48f",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryManagerImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryManagerImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryManagerImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryManagerImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -41,7 +41,7 @@\n import org.apache.harmony.lang.management.MemoryManagerMXBeanImpl;\n \n \n-public class MemoryManagerImplTest extends MultiInstanceDynamicMXBeanImplTest {\n+public class MemoryManagerImplTest extends MultiInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "a15302b5e553f7fbdb8f1a6890fe30b9f250fcc8",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryPoolMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryPoolMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryPoolMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MemoryPoolMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -45,7 +45,7 @@\n \n \n public class MemoryPoolMXBeanImplTest extends\n-        MultiInstanceDynamicMXBeanImplTest {\n+        MultiInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "a5cc232acff62bb81b0c1eeb06a5b9ab73a47abe",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MultiInstanceDynamicMXBeanImplTestBase.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MultiInstanceDynamicMXBeanImplTestBase.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MultiInstanceDynamicMXBeanImplTestBase.java",
                "status": "renamed",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MultiInstanceDynamicMXBeanImplTestBase.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -28,8 +28,8 @@\n import org.apache.harmony.lang.management.DynamicMXBeanImpl;\n \n \n-public abstract class MultiInstanceDynamicMXBeanImplTest extends\n-        DynamicMXBeanImplTest {\n+public abstract class MultiInstanceDynamicMXBeanImplTestBase extends\n+        DynamicMXBeanImplTestBase {\n \n     protected List<DynamicMXBeanImpl> mbList;\n ",
                "deletions": 2,
                "previous_filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/MultiInstanceDynamicMXBeanImplTest.java"
            },
            {
                "sha": "22e03429abc097f388dd01716a9a3612ae8194e0",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/OperatingSystemMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/OperatingSystemMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/OperatingSystemMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/OperatingSystemMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -38,7 +38,7 @@\n \n \n public class OperatingSystemMXBeanImplTest extends\n-        SingleInstanceDynamicMXBeanImplTest {\n+        SingleInstanceDynamicMXBeanImplTestBase {\n \n     private OperatingSystemMXBeanImpl notifierBean;\n ",
                "deletions": 1
            },
            {
                "sha": "9a60e9c12feb5d9d40ec75dd2c357703e3d5efb7",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/RuntimeMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/RuntimeMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/RuntimeMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/RuntimeMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -42,7 +42,7 @@\n import org.apache.harmony.lang.management.RuntimeMXBeanImpl;\n \n \n-public class RuntimeMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTest {\n+public class RuntimeMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            },
            {
                "sha": "a470c7b29857fcb92be0b78f29977821479bb11a",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/SingleInstanceDynamicMXBeanImplTestBase.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/SingleInstanceDynamicMXBeanImplTestBase.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/SingleInstanceDynamicMXBeanImplTestBase.java",
                "status": "renamed",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/SingleInstanceDynamicMXBeanImplTestBase.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -26,8 +26,8 @@\n import org.apache.harmony.lang.management.DynamicMXBeanImpl;\n \n \n-public abstract class SingleInstanceDynamicMXBeanImplTest extends\n-        DynamicMXBeanImplTest {\n+public abstract class SingleInstanceDynamicMXBeanImplTestBase extends\n+        DynamicMXBeanImplTestBase {\n \n     protected DynamicMXBeanImpl mb;\n ",
                "deletions": 2,
                "previous_filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/SingleInstanceDynamicMXBeanImplTest.java"
            },
            {
                "sha": "8e0eb2062bdf1cf59ec78f1ce533112f7a2e033e",
                "filename": "modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadMXBeanImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadMXBeanImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f160d8c0b3689739246f309c74ebf005e93a0329/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadMXBeanImplTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/lang-management/src/test/impl/java/org/apache/harmony/lang/management/ThreadMXBeanImplTest.java?ref=f160d8c0b3689739246f309c74ebf005e93a0329",
                "patch": "@@ -40,7 +40,7 @@\n \n \n \n-public class ThreadMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTest {\n+public class ThreadMXBeanImplTest extends SingleInstanceDynamicMXBeanImplTestBase {\n \n     protected void setUp() throws Exception {\n         super.setUp();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Test case from HARMONY-2443  ([classlib][awt] java.awt.ScrollPane.printComponents((Graphics) null) throws unexpected NPE) was added.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@501422 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/bfe80a5020abdb03ffb6576e629305f9d299ea67",
        "parent": "https://github.com/apache/harmony-classlib/commit/6a44c2d23b0f5779e6c9c56d06b45655ef3cb95d",
        "bug_id": "harmony-classlib_100",
        "file": [
            {
                "sha": "a5d3c2d63b21a2c05014a040dc62689e795fb0a0",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bfe80a5020abdb03ffb6576e629305f9d299ea67/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bfe80a5020abdb03ffb6576e629305f9d299ea67/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java?ref=bfe80a5020abdb03ffb6576e629305f9d299ea67",
                "patch": "@@ -74,4 +74,12 @@ public void testAddComponent() {\n             // PASSED            \n         }\n     }\n+\n+    // regression for HARMONY-2443\n+    public void testPaintComponentsImpl() {\n+        ScrollPane scp = new ScrollPane();\n+\n+        scp.printComponents((Graphics) null);\n+    }\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2498 ([classlib][awt] java.awt.Tollkit.getImage(null) throws NPE while RI doesn't)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@501111 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f3b67234d0c0e41d03423b4be4b363821ad84562",
        "parent": "https://github.com/apache/harmony-classlib/commit/4d59da04655c920c9a9932cc4ad9e251cba27d98",
        "bug_id": "harmony-classlib_101",
        "file": [
            {
                "sha": "37c39142c2f99786911900e3441d85af24dff3df",
                "filename": "modules/awt/src/main/java/common/java/awt/ToolkitImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f3b67234d0c0e41d03423b4be4b363821ad84562/modules/awt/src/main/java/common/java/awt/ToolkitImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f3b67234d0c0e41d03423b4be4b363821ad84562/modules/awt/src/main/java/common/java/awt/ToolkitImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/ToolkitImpl.java?ref=f3b67234d0c0e41d03423b4be4b363821ad84562",
                "patch": "@@ -410,14 +410,16 @@ public Image getImage(String filename) {\n \n     static Image getImage(String filename, Toolkit toolkit) {\n         synchronized (imageCache) {\n-            Image im = imageCache.get(filename);\n+            Image im = (filename == null ? null : imageCache.get(filename));\n+\n             if (im == null) {\n                 try {\n                     im = toolkit.createImage(filename);\n                     imageCache.put(filename, im);\n                 } catch (Exception e) {\n                 }\n             }\n+\n             return im;\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "854b0e8202d72473daf9f0cd8c74c873beb2a507",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ToolkitTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f3b67234d0c0e41d03423b4be4b363821ad84562/modules/awt/src/test/api/java/common/java/awt/ToolkitTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f3b67234d0c0e41d03423b4be4b363821ad84562/modules/awt/src/test/api/java/common/java/awt/ToolkitTest.java",
                "status": "added",
                "changes": 43,
                "additions": 43,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ToolkitTest.java?ref=f3b67234d0c0e41d03423b4be4b363821ad84562",
                "patch": "@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package java.awt;\n+\n+\n+import junit.framework.TestCase;\n+\n+public class ToolkitTest extends TestCase {\n+\n+    public ToolkitTest() {\n+        super();\n+    }\n+\n+    public ToolkitTest(String name) {\n+        super(name);\n+    }\n+\n+    public void testGetImage() {\n+        try {    \n+            Toolkit tk = Toolkit.getDefaultToolkit();            \n+\n+            assertNotNull(tk.getImage((String) null));\n+        } catch (NullPointerException npe) {             \n+            fail(\"Unexpected NPE\");            \n+        }\n+    }\n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying the patch from HARMONY-2019 ([classlib][awt] Container.remove(null) expected NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@499810 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5d4731b4a330f6deb4baab79036ae53d31ea3a4a",
        "parent": "https://github.com/apache/harmony-classlib/commit/6b320341d1d40ead963d353f60ef8b3fd80819ad",
        "bug_id": "harmony-classlib_102",
        "file": [
            {
                "sha": "019caf9c2b98b11f5843dee7f71e3368e5ab8d99",
                "filename": "modules/awt/src/main/java/common/java/awt/Container.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/awt/src/main/java/common/java/awt/Container.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/awt/src/main/java/common/java/awt/Container.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Container.java?ref=5d4731b4a330f6deb4baab79036ae53d31ea3a4a",
                "patch": "@@ -277,6 +277,10 @@ public void remove(int index) {\n     public void remove(Component comp) {\n         toolkit.lockAWT();\n         try {\n+            if (comp == null) {\n+                throw new NullPointerException();\n+            }\n+\n             try {\n                 remove(children.indexOf(comp));\n             } catch (ArrayIndexOutOfBoundsException e) {",
                "deletions": 0
            },
            {
                "sha": "72e6dfea7eb984782b7e3c958566b0a37e0676c6",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java?ref=5d4731b4a330f6deb4baab79036ae53d31ea3a4a",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Vladimir Ivanov\n- * @version $Revision$\n- */\n package java.awt;\n \n \n@@ -26,6 +22,15 @@\n \n public class ContainerRTest extends TestCase {\n \n+    public final void testRemoveComponent() {\n+        // Regression test for HARMONY-1476\n+        try {\n+            new Container().remove((Component) null);\n+            fail(\"NPE was not thrown\");\n+        } catch (NullPointerException ex) {\n+            // passed\n+        }\n+    }\n \n     public final void testSetFocusTraversalKeys() {\n         try {\n@@ -63,17 +68,4 @@ public void testAddComponent() {\n             // PASSED            \n         }\n     }\n-\n-//    public final void testRemoveComponent() {\n-//        Button b = new Button();\n-//        boolean npeThrown = false;\n-//        Container c = new Container();\n-//        c.remove(b); // no exception is thrown\n-//        try {\n-//            c.remove(b = null);\n-//        } catch (NullPointerException npe) {\n-//            npeThrown = true;\n-//        }        \n-//        assertTrue(\"remove(null) throws NPE\", npeThrown);\n-//    }\n }",
                "deletions": 17
            },
            {
                "sha": "2772ecf8beddf8c89fdd3758072939bd57975a29",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSpinnerUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSpinnerUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSpinnerUI.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSpinnerUI.java?ref=5d4731b4a330f6deb4baab79036ae53d31ea3a4a",
                "patch": "@@ -308,7 +308,10 @@ protected JComponent createEditor() {\n     }\n \n     protected void replaceEditor(final JComponent oldEditor, final JComponent newEditor) {\n-        spinner.remove(oldEditor);\n+        if (oldEditor != null) {\n+            spinner.remove(oldEditor);\n+        }\n+\n         editor = newEditor;\n \n         if (!paintEditorBorder && editor instanceof DefaultEditor) {\n@@ -324,4 +327,4 @@ protected void installKeyboardActions() {\n     private void uninstallKeyboardActions() {\n         BasicSpinnerKeyboardActions.uninstallKeyboardActions(spinner);\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            },
            {
                "sha": "7fdab4cb5e9ed04f3dccac42faea5d4daf95b8bf",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d4731b4a330f6deb4baab79036ae53d31ea3a4a/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/metal/MetalFileChooserUI.java?ref=5d4731b4a330f6deb4baab79036ae53d31ea3a4a",
                "patch": "@@ -849,7 +849,12 @@ public void propertyChange(final PropertyChangeEvent event) {\n                         fileNameField.setText(fileToText(getFileChooser().getCurrentDirectory()));\n                     }\n                 } else if (JFileChooser.ACCESSORY_CHANGED_PROPERTY.equals(changedProperty)) {\n-                    getAccessoryPanel().remove((JComponent)event.getOldValue());\n+\t\t    final JComponent old = (JComponent) event.getOldValue();\n+                    \t\t    \n+                    if (old != null) {\n+                        getAccessoryPanel().remove(old);\n+                    }\n+\n                     getAccessoryPanel().add((JComponent)event.getNewValue());\n                 } else if (StringConstants.TRANSFER_HANDLER_PROPERTY_NAME.equals(changedProperty)) {\n                     list.setTransferHandler((TransferHandler)event.getNewValue());\n@@ -1533,4 +1538,4 @@ private File translateFile(final String fileName) {\n         }\n     }\n     \n-}\n\\ No newline at end of file\n+}",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying the patch from HARMONY-1964 ([classlib][awt]Junit AWT TestRunner throws NPE in \"Errors and Failures\" text area)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@499721 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f3d27df7ee8911757d5857f1f4227a258c2f41b1",
        "parent": "https://github.com/apache/harmony-classlib/commit/de7a956d237e5d087474b7783db342f14b6e5cee",
        "bug_id": "harmony-classlib_103",
        "file": [
            {
                "sha": "8106687b0cc1aead748b6caf1431b9e4ee61a5ec",
                "filename": "modules/awt/src/main/java/common/java/awt/TextArea.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f3d27df7ee8911757d5857f1f4227a258c2f41b1/modules/awt/src/main/java/common/java/awt/TextArea.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f3d27df7ee8911757d5857f1f4227a258c2f41b1/modules/awt/src/main/java/common/java/awt/TextArea.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/TextArea.java?ref=f3d27df7ee8911757d5857f1f4227a258c2f41b1",
                "patch": "@@ -804,7 +804,9 @@ Rectangle getModelRect() {\n             return mRect;\n         }\n         int xSpan = (int) rootViewContext.getView().getPreferredSpan(View.X_AXIS);\n-        mRect.width = xSpan;\n+        \n+        mRect.width = Math.max(xSpan, mRect.width);\n+        \n         return mRect;\n     }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply modified patch for HARMONY-3045:\n[classlib][security]MessageDigestSpi.engineDigest(byte[], int, int) returns 0 while RI throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@499684 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/05d36a41b42b937247b9ac15e8f0f3ccf916b596",
        "parent": "https://github.com/apache/harmony-classlib/commit/f6cba6ea3070d6082cb6ba6edb7b9cb5103ca647",
        "bug_id": "harmony-classlib_104",
        "file": [
            {
                "sha": "3d44fb14fcda1af6a59c879fbe8962d4592fdf91",
                "filename": "modules/security/src/main/java/common/java/security/MessageDigestSpi.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/main/java/common/java/security/MessageDigestSpi.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/main/java/common/java/security/MessageDigestSpi.java",
                "status": "modified",
                "changes": 11,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/MessageDigestSpi.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -106,14 +106,11 @@ protected int engineDigest(byte[] buf, int offset, int len)\n             throw new DigestException(Messages.getString(\"security.1D\")); //$NON-NLS-1$\n         }\n         byte tmp[] = engineDigest();\n-        if (tmp != null) {\n-            if (len < tmp.length ) {\n-                throw new DigestException(Messages.getString(\"security.1B\")); //$NON-NLS-1$\n-            }\n-            System.arraycopy(tmp, 0, buf, offset, tmp.length);\n-            return tmp.length;            \n+        if (len < tmp.length) {\n+            throw new DigestException(Messages.getString(\"security.1B\")); //$NON-NLS-1$\n         }\n-        return 0;\n+        System.arraycopy(tmp, 0, buf, offset, tmp.length);\n+        return tmp.length;            \n     }\n     \n     /**",
                "deletions": 7
            },
            {
                "sha": "f32bbff0bc0bd7c803d2118637ecd982d371cc4b",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigest1Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigest1Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigest1Test.java",
                "status": "modified",
                "changes": 8,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigest1Test.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -80,9 +80,7 @@ public void testUpdatebyteArray() {\n \t */\n \tpublic void testDigest() {\n \t\tMyMessageDigest1 md = new MyMessageDigest1(\"ABC\");\n-\t\tif (md.digest() != null) {\n-\t\t\tfail(\"incorrect result\");\n-\t\t}\n+        assertEquals(\"incorrect result\", 0,md.digest().length);\n \t\tif (!md.runEngineDigest) {\n \t\t\tfail(\"update failed\");\n \t\t}\n@@ -94,9 +92,7 @@ public void testDigest() {\n \tpublic void testDigestbyteArray() {\n \t\tMyMessageDigest1 md = new MyMessageDigest1(\"ABC\");\n \t\tbyte[] b = {1, 2, 3, 4, 5};\n-\t\tif (md.digest(b) != null) {\n-\t\t\tfail(\"incorrect result\");\n-\t\t}\n+        assertEquals(\"incorrect result\", 0, md.digest(b).length);\n \t\tif (!md.runEngineDigest) {\n \t\t\tfail(\"update failed\");\n \t\t}",
                "deletions": 6
            },
            {
                "sha": "584f2e944cd033cc35b66d25acd542daed953554",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigestSpiTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigestSpiTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigestSpiTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/MessageDigestSpiTest.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -67,6 +67,15 @@ public int engineGetDigestLength() {\n \n         assertEquals(\"incorrect result\", DIGEST_LENGHT, md\n                 .engineDigest(b, 1, 3));\n+        \n+        // Regression for HARMONY-3045\n+        md = new MyMessageDigest();\n+        try {\n+            md.engineDigest(b, 0, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n     }\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "e905e71ab47de89efebdf35a5e5b734e5f0b1147",
                "filename": "modules/security/src/test/impl/java/org/apache/harmony/security/tests/java/security/MessageDigest_Impl2Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/impl/java/org/apache/harmony/security/tests/java/security/MessageDigest_Impl2Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/impl/java/org/apache/harmony/security/tests/java/security/MessageDigest_Impl2Test.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/impl/java/org/apache/harmony/security/tests/java/security/MessageDigest_Impl2Test.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -120,7 +120,7 @@ private void checkMD1(MessageDigest md1, Provider p) throws Exception {\n         assertTrue(\"update failed\", ((MyMessageDigest1) md1).runEngineUpdate1);\n         assertTrue(\"update failed\", ((MyMessageDigest1) md1).runEngineUpdate2);\n \n-        assertNull(\"incorrect digest result\", md1.digest());\n+        assertEquals(\"incorrect digest result\", 0, md1.digest().length);\n         assertEquals(\"getProvider() failed\", 0, md1.digest(b, 2, 3));\n         assertTrue(\"digest failed\", ((MyMessageDigest1) md1).runEngineDigest);\n \n@@ -145,7 +145,7 @@ private void checkMD2(MessageDigest md2, Provider p) throws Exception {\n         assertTrue(\"update failed\", MyMessageDigest2.runEngineUpdate1);\n         assertTrue(\"update failed\", MyMessageDigest2.runEngineUpdate2);\n \n-        assertNull(\"incorrect digest result\", md2.digest());\n+        assertEquals(\"incorrect digest result\", 0, md2.digest().length);\n         assertEquals(\"getProvider() failed\", 0, md2.digest(b, 2, 3));\n         assertTrue(\"digest failed\", MyMessageDigest2.runEngineDigest);\n ",
                "deletions": 2
            },
            {
                "sha": "3ed721bb5532840d0bbe27e61b66955a6d91d151",
                "filename": "modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest1.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest1.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest1.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest1.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -59,7 +59,7 @@ public void engineReset() {\n \t */\n \tpublic byte[] engineDigest() {\n \t\trunEngineDigest = true;\n-\t\treturn null;\n+\t\treturn new byte[0];\n \t}\n \n \t/**",
                "deletions": 1
            },
            {
                "sha": "4bd923d1e9abc15a0cfb25d7686293ea1618d275",
                "filename": "modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest2.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest2.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05d36a41b42b937247b9ac15e8f0f3ccf916b596/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest2.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/support/common/java/org/apache/harmony/security/tests/support/MyMessageDigest2.java?ref=05d36a41b42b937247b9ac15e8f0f3ccf916b596",
                "patch": "@@ -47,7 +47,7 @@ public void engineReset() {\n \t */\n \tpublic byte[] engineDigest() {\n \t\trunEngineDigest = true;\n-\t\treturn null;\n+\t\treturn new byte[0];\n \t}\n \n \t/**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2445 ([classlib][awt] java.awt.DefaultKeyboardFocusManager.dispatchEvent(null) does not throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@499372 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e7cd4fb5e03ca2895061e1150de518ffca788487",
        "parent": "https://github.com/apache/harmony-classlib/commit/0c8d9d00b3d41dc5a62aa9457aa62361becaa2a2",
        "bug_id": "harmony-classlib_105",
        "file": [
            {
                "sha": "59ada3d80010ca3b45ac1f7a00848443cacfa0bb",
                "filename": "modules/awt/src/main/java/common/java/awt/DefaultKeyboardFocusManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e7cd4fb5e03ca2895061e1150de518ffca788487/modules/awt/src/main/java/common/java/awt/DefaultKeyboardFocusManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e7cd4fb5e03ca2895061e1150de518ffca788487/modules/awt/src/main/java/common/java/awt/DefaultKeyboardFocusManager.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/DefaultKeyboardFocusManager.java?ref=e7cd4fb5e03ca2895061e1150de518ffca788487",
                "patch": "@@ -14,10 +14,7 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Dmitry A. Durnev\n- * @version $Revision$\n- */\n+\n package java.awt;\n \n import java.awt.event.FocusEvent;\n@@ -75,6 +72,8 @@ public boolean dispatchEvent(AWTEvent e) {\n         } else if (e instanceof WindowEvent) {\n             WindowEvent we = (WindowEvent) e;\n             return dispatchWindowEvent(we);\n+        } else if (e == null) {\n+            throw new NullPointerException();\n         }\n         return false;\n     }",
                "deletions": 4
            },
            {
                "sha": "d4497259b3fdf059854a7b79ac5d4eaa4e210a51",
                "filename": "modules/awt/src/test/api/java/common/java/awt/DefaultKeyboardFocusManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e7cd4fb5e03ca2895061e1150de518ffca788487/modules/awt/src/test/api/java/common/java/awt/DefaultKeyboardFocusManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e7cd4fb5e03ca2895061e1150de518ffca788487/modules/awt/src/test/api/java/common/java/awt/DefaultKeyboardFocusManagerTest.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/DefaultKeyboardFocusManagerTest.java?ref=e7cd4fb5e03ca2895061e1150de518ffca788487",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package java.awt;\n+\n+import junit.framework.TestCase;\n+\n+public class DefaultKeyboardFocusManagerTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(DefaultKeyboardFocusManagerTest.class);\n+    }\n+\n+    public void testDispatchEvent() {\n+        try {\n+            new DefaultKeyboardFocusManager().dispatchEvent(null);\n+            fail(\"NPE expected\"); //$NON-NLS-1$\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+   }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2777] [classlib][swing]\nj.s.text.AbstractDocument.BranchElement.get{Start, End}Offset throw\nArrayIndexOutOfBoundsException rather than NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496767 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/baa455e8b72c528dd1d46c354bc1f178156969c6",
        "parent": "https://github.com/apache/harmony-classlib/commit/a06f95c19d074715bb074b7e03f8842cc6138e2a",
        "bug_id": "harmony-classlib_106",
        "file": [
            {
                "sha": "ff9dd4b5552bbd0eba6ba7341e12e35da486f27e",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/baa455e8b72c528dd1d46c354bc1f178156969c6/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/baa455e8b72c528dd1d46c354bc1f178156969c6/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java?ref=baa455e8b72c528dd1d46c354bc1f178156969c6",
                "patch": "@@ -401,6 +401,9 @@ public int getElementIndex(final int offset) {\n \n         @Override\n         public int getEndOffset() {\n+            if (elements.length == 0) {\n+                throw new NullPointerException();\n+            }\n             return elements[elements.length - 1].getEndOffset();\n         }\n \n@@ -412,6 +415,9 @@ public String getName() {\n \n         @Override\n         public int getStartOffset() {\n+            if (elements.length == 0) {\n+                throw new NullPointerException();\n+            }\n             return elements[0].getStartOffset();\n         }\n ",
                "deletions": 0
            },
            {
                "sha": "0e658fa665cb5769e02a480c9fe61fa2e66db36d",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/baa455e8b72c528dd1d46c354bc1f178156969c6/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/baa455e8b72c528dd1d46c354bc1f178156969c6/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "status": "modified",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java?ref=baa455e8b72c528dd1d46c354bc1f178156969c6",
                "patch": "@@ -243,11 +243,33 @@ public void testGetStartOffset() {\n         assertEquals(0, par.getStartOffset());\n     }\n \n+    // Regression for HARMONY-2777\n+    public void testGetStartOffsetNoChildren() {\n+        par = doc.new BranchElement(null, null);\n+        try {\n+            par.getStartOffset();\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testGetEndOffset() {\n         assertEquals(15, bidi.getEndOffset());\n         assertEquals(15, par.getEndOffset());\n     }\n \n+    // Regression for HARMONY-2777\n+    public void testGetEndOffsetNoChildren() {\n+        par = doc.new BranchElement(null, null);\n+        try {\n+            par.getEndOffset();\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testGetElementCount() {\n         assertEquals(5, bidi.getElementCount());\n         assertEquals(2, par.getElementCount());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying test patch from \"[#HARMONY-2765] [classlib][swing]\njavax.swing.plaf.basic.BasicInternalFrameUI. createNorthPane(null) does\nnot throw unspecified NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496712 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/80868fec29c70f5231becb2ccbf47ff7bde2815e",
        "parent": "https://github.com/apache/harmony-classlib/commit/8ae3b794036706066076baa43c5891872007e609",
        "bug_id": "harmony-classlib_107",
        "file": [
            {
                "sha": "546365107aac54dce136c9e574be3d7689084b30",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/80868fec29c70f5231becb2ccbf47ff7bde2815e/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/80868fec29c70f5231becb2ccbf47ff7bde2815e/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameUITest.java?ref=80868fec29c70f5231becb2ccbf47ff7bde2815e",
                "patch": "@@ -334,8 +334,26 @@ public void testCreateNorthPane() {\n         JComponent comp2 = ui.createNorthPane(frame);\n         assertTrue(\"new object\", comp != comp2);\n         assertTrue(\"northPane\", ui.getNorthPane() != comp2);\n+        \n+        try { \n+            BasicInternalFrameUIExt f = new BasicInternalFrameUIExt(null);\n+            f.createNorthPane(null);\n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }\n     }\n \n+    class BasicInternalFrameUIExt extends BasicInternalFrameUI {\n+        BasicInternalFrameUIExt (JInternalFrame c) {\n+            super(c);\n+        }\n+        \n+        public JComponent createNorthPane(JInternalFrame c) {\n+            return super.createNorthPane(c);\n+        }\n+    } \n+\n     /*\n      * Class under test for JComponent createEastPane(JInternalFrame)\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-1735] [classlib][swing]\njavax.swing.ScrollPaneLayout.preferredLayoutSize(Component c) does not\nthrow NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496710 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8ae3b794036706066076baa43c5891872007e609",
        "parent": "https://github.com/apache/harmony-classlib/commit/e3bb5668be0fad7260f48cf9dc6cc837410be11f",
        "bug_id": "harmony-classlib_108",
        "file": [
            {
                "sha": "4b14fe382574cfb07dcbc1267d79c8692464ea13",
                "filename": "modules/swing/src/main/java/common/javax/swing/ScrollPaneLayout.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8ae3b794036706066076baa43c5891872007e609/modules/swing/src/main/java/common/javax/swing/ScrollPaneLayout.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8ae3b794036706066076baa43c5891872007e609/modules/swing/src/main/java/common/javax/swing/ScrollPaneLayout.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/ScrollPaneLayout.java?ref=8ae3b794036706066076baa43c5891872007e609",
                "patch": "@@ -170,9 +170,6 @@ public Component getCorner(final String key) {\n     public Dimension preferredLayoutSize(final Container parent) {\n         JScrollPane pane = (JScrollPane)parent;\n \n-        if (pane == null) {\n-            return new Dimension(0, 0);\n-        }\n         int rowHeadWidth = (rowHead == null) ? 0 : rowHead.getPreferredSize().width;\n         int viewportWidth = (viewport == null) ? 0 : viewport.getPreferredSize().width;\n         int viewportBorderLeft = (pane.getViewportBorder() == null) ? 0 : pane.getViewportBorder().getBorderInsets(pane).left;",
                "deletions": 3
            },
            {
                "sha": "221c4cc8838aba7e4ba7b269f3cf75d01b385f5b",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/ScrollPaneLayoutTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8ae3b794036706066076baa43c5891872007e609/modules/swing/src/test/api/java/common/javax/swing/ScrollPaneLayoutTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8ae3b794036706066076baa43c5891872007e609/modules/swing/src/test/api/java/common/javax/swing/ScrollPaneLayoutTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/ScrollPaneLayoutTest.java?ref=8ae3b794036706066076baa43c5891872007e609",
                "patch": "@@ -68,7 +68,14 @@ public void testGetPreferredLayoutSize() throws Exception {\n             fail(\"Class cast exception shall be thrown\");\n         } catch (ClassCastException e) {\n         }\n-    }\n+        //regression for HARMONY-1735\n+        try {\n+        \tlayout.preferredLayoutSize(null);\n+        \tfail(\"No expected exception\");\n+        }catch (NullPointerException e) {\n+        //expected\n+        }\n+      }\n \n     public void testDefaultLayout() throws Exception {\n         ScrollPaneLayout l = new ScrollPaneLayout();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2822] [classlib][swing]\njavax.swing.plaf.basic.BasicFileChooserUI.installDefaults(null) returns\nnull while RI throws NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496695 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b0672f5b6824ab1f95e51ad678aa96100db7372a",
        "parent": "https://github.com/apache/harmony-classlib/commit/e9ef734d73707f2dfa5db01caaefa3bc16536e6f",
        "bug_id": "harmony-classlib_109",
        "file": [
            {
                "sha": "6f967fb73d4665b7ef5bd48f6a3cbcd32f6f7df5",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b0672f5b6824ab1f95e51ad678aa96100db7372a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b0672f5b6824ab1f95e51ad678aa96100db7372a/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java?ref=b0672f5b6824ab1f95e51ad678aa96100db7372a",
                "patch": "@@ -524,6 +524,10 @@ protected void uninstallListeners(final JFileChooser fc) {\n     }\n \n     protected void installDefaults(final JFileChooser fc) {\n+        if (fc == null) {\n+            throw new NullPointerException();\n+        }\n+ \n         helpButtonMnemonic = UIManager.getInt(\"FileChooser.helpButtonMnemonic\");\n         directoryOpenButtonMnemonic = UIManager.getInt(\"FileChooser.directoryOpenButtonMnemonic\");\n ",
                "deletions": 0
            },
            {
                "sha": "f0fd40c61c5d0e36a672666309c2a532e326b137",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b0672f5b6824ab1f95e51ad678aa96100db7372a/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b0672f5b6824ab1f95e51ad678aa96100db7372a/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java?ref=b0672f5b6824ab1f95e51ad678aa96100db7372a",
                "patch": "@@ -185,4 +185,17 @@ public void testEnsureFileIsVisible() {\n             fail(\"NPE should not be thrown\");            \n         }\n     }\n+\n+    public void testInstallDefaults() {\n+        try {\n+            new BasicFileChooserUI(null) {\n+                public void installDefaults(JFileChooser fc) {\n+                    super.installDefaults(fc);\n+                }\n+            }.installDefaults(null);\n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {\n+            // Passed\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2903] [classlib][swing]\nj.s.plaf.basic.BasicOptionPaneUI.getIconForType() doesn't throw NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496644 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2e7a4b80ea18464cf06fde66988b4025f893c0c0",
        "parent": "https://github.com/apache/harmony-classlib/commit/32d8e15bb97edb6dd045452074330bef2aceff0f",
        "bug_id": "harmony-classlib_110",
        "file": [
            {
                "sha": "334fdf03ec488a530720ac4fd6d3bc7393fbb2e6",
                "filename": "modules/awt/src/test/api/java/common/java/awt/print/BookTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/awt/src/test/api/java/common/java/awt/print/BookTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/awt/src/test/api/java/common/java/awt/print/BookTest.java",
                "status": "modified",
                "changes": 65,
                "additions": 65,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/print/BookTest.java?ref=2e7a4b80ea18464cf06fde66988b4025f893c0c0",
                "patch": "@@ -21,6 +21,71 @@\n \n import junit.framework.TestCase;\n \n+public class BookTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(BookTest.class);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link java.awt.print.Book#setPage(int, java.awt.print.Printable, java.awt.print.PageFormat)}.\n+     */\n+    public void testSetPage() {\n+        // Regression test for HARMONY-2433\n+        final Book d = new Book();\n+        final PageFormat pf = new PageFormat();\n+        final Printable p = new Printable() {\n+            public int print(Graphics g, PageFormat pf, int i) {\n+                return PAGE_EXISTS;\n+            }\n+        };\n+\n+        try {\n+            d.setPage(1, p, pf);\n+            fail(\"IndexOutOfBoundsException was not thrown\"); //$NON-NLS-1$\n+        } catch (IndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            d.setPage(1, null, pf);\n+            fail(\"NullPointerException was not thrown\"); //$NON-NLS-1$\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+\n+        try {\n+            d.setPage(1, p, null);\n+            fail(\"NullPointerException was not thrown\"); //$NON-NLS-1$\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n+    }\n+}\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package java.awt.print;\n+\n+import java.awt.Graphics;\n+\n+import junit.framework.TestCase;\n+\n public class BookTest extends TestCase {\n \n     public static void main(String[] args) {",
                "deletions": 0
            },
            {
                "sha": "d8b7d8b2bbbf33fd580c432f4d5da37e76e09d13",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java?ref=2e7a4b80ea18464cf06fde66988b4025f893c0c0",
                "patch": "@@ -563,6 +563,10 @@ protected Icon getIcon() {\n     }\n \n     protected Icon getIconForType(final int messageType) {\n+        if (optionPane == null) {\n+            throw new NullPointerException(\"optionPane is null\");\n+        }\n+\n         if (defaultIcons == null) {\n             installIcons();\n         }",
                "deletions": 0
            },
            {
                "sha": "07c65b26fc6d38fd15e4928625fadc6bca583bab",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2e7a4b80ea18464cf06fde66988b4025f893c0c0/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java?ref=2e7a4b80ea18464cf06fde66988b4025f893c0c0",
                "patch": "@@ -545,6 +545,8 @@ public void testGetIcon() {\n     }\n \n     public void testGetIconForType() throws InterruptedException {\n+        paneUI.optionPane = new JOptionPane();\n+        paneUI.optionPane.setUI(paneUI);\n         Icon icon11 = new IconUIResource(new ImageIcon(new BufferedImage(10, 20,\n                 BufferedImage.TYPE_INT_RGB)));\n         Icon icon21 = new IconUIResource(new ImageIcon(new BufferedImage(30, 40,\n@@ -578,6 +580,15 @@ public void testGetIconForType() throws InterruptedException {\n                 .getIconForType(JOptionPane.WARNING_MESSAGE));\n     }\n \n+    public void testGetIconForType_Null() throws InterruptedException {\n+        try { // Regression test for HARMONY-2903\n+            new BasicOptionPaneUI().getIconForType(0);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testGetMaxCharactersPerLineCount() {\n         paneUI.optionPane = new JOptionPane();\n         paneUI.optionPane.setUI(paneUI);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2902] [classlib][swing]\nj.s.plaf.basic.BasicOptionPaneUI.getMaxCharactersPerLineCount doesn't throw\nNPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496313 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8efc0a4480243dab794bd4a627450ab7b3929959",
        "parent": "https://github.com/apache/harmony-classlib/commit/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339",
        "bug_id": "harmony-classlib_111",
        "file": [
            {
                "sha": "effd9990a63be04ee1570f45b5568db2ccbb9e2f",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8efc0a4480243dab794bd4a627450ab7b3929959/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8efc0a4480243dab794bd4a627450ab7b3929959/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java?ref=8efc0a4480243dab794bd4a627450ab7b3929959",
                "patch": "@@ -575,7 +575,7 @@ protected Icon getIconForType(final int messageType) {\n     }\n \n     protected int getMaxCharactersPerLineCount() {\n-        return Integer.MAX_VALUE;\n+        return optionPane.getMaxCharactersPerLineCount();\n     }\n \n     protected void burstStringInto(final Container c, final String d,",
                "deletions": 1
            },
            {
                "sha": "39024c97dd522211dfa002c956b49621dcb7524e",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8efc0a4480243dab794bd4a627450ab7b3929959/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8efc0a4480243dab794bd4a627450ab7b3929959/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java?ref=8efc0a4480243dab794bd4a627450ab7b3929959",
                "patch": "@@ -584,6 +584,35 @@ public void testGetMaxCharactersPerLineCount() {\n         assertEquals(Integer.MAX_VALUE, paneUI.getMaxCharactersPerLineCount());\n     }\n \n+    // Regression for HARMONY-2902\n+    public void testGetMaxCharactersPerLineCount_OptionPane() {\n+        final Marker marker = new Marker();\n+        paneUI.optionPane = new JOptionPane() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public int getMaxCharactersPerLineCount() {\n+                marker.setOccurred();\n+                return super.getMaxCharactersPerLineCount();\n+            }\n+        };\n+        paneUI.optionPane.setUI(paneUI);\n+        marker.reset();\n+        assertEquals(Integer.MAX_VALUE, paneUI.getMaxCharactersPerLineCount());\n+        assertTrue(marker.isOccurred());\n+    }\n+\n+    // Regression for HARMONY-2902\n+    public void testGetMaxCharactersPerLineCount_Null() {\n+        assertNull(paneUI.optionPane);\n+        testExceptionalCase(new NullPointerCase() {\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                paneUI.getMaxCharactersPerLineCount();\n+            }\n+        });\n+    }\n+\n     public void testBurstStringInto() {\n         String message = \"message \";\n         JPanel panel = new JPanel();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2901] [classlib][swing] several methods of\nj.s.plaf.basic.BasicOptionPaneUI throw NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496309 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339",
        "parent": "https://github.com/apache/harmony-classlib/commit/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6",
        "bug_id": "harmony-classlib_112",
        "file": [
            {
                "sha": "3e4ddfd36d701eee84f449ef1b9f704bbb29ee00",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicOptionPaneUI.java?ref=b973c515f8b8cf6e374d6e0b80ebc45cab7dd339",
                "patch": "@@ -465,7 +465,9 @@ protected void installListeners() {\n     }\n \n     protected void uninstallListeners() {\n-        optionPane.removePropertyChangeListener(propertyChangeListener);\n+        if (optionPane != null) {\n+            optionPane.removePropertyChangeListener(propertyChangeListener);\n+        }\n         propertyChangeListener = null;\n     }\n \n@@ -632,6 +634,10 @@ protected ActionListener createButtonActionListener(final int buttonIndex) {\n     }\n \n     protected Object[] getButtons() {\n+        if (optionPane == null) {\n+            return null;\n+        }\n+\n         Object[] result = optionPane.getOptions();\n         if (!Utilities.isEmptyArray(result)) {\n             return result;\n@@ -661,6 +667,10 @@ protected boolean getSizeButtonsToSameWidth() {\n     }\n \n     protected int getInitialValueIndex() {\n+        if (optionPane == null) {\n+            return -1;\n+        }\n+\n         Object[] options = optionPane.getOptions();\n         if (Utilities.isEmptyArray(options)) {\n             return 0;",
                "deletions": 1
            },
            {
                "sha": "2d5ab1d6fe899022d64448603892c27d7506d91a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b973c515f8b8cf6e374d6e0b80ebc45cab7dd339/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicOptionPaneUITest.java?ref=b973c515f8b8cf6e374d6e0b80ebc45cab7dd339",
                "patch": "@@ -292,6 +292,12 @@ public void testUninstallListeners() {\n         assertNull(paneUI.propertyChangeListener);\n     }\n \n+    // Regression for HARMONY-2901\n+    public void testUninstallListenersNull() {\n+        assertNull(paneUI.optionPane);\n+        paneUI.uninstallListeners(); // no exception is expected\n+    }\n+\n     public void testCreatePropertyChangeListener() {\n         assertNotNull(paneUI.createPropertyChangeListener());\n     }\n@@ -779,6 +785,12 @@ public void testGetButtons() {\n         assertEquals(\"button \", option3, buttons[2]);\n     }\n \n+    // Regression for HARMONY-2901\n+    public void testGetButtonsNull() {\n+        assertNull(paneUI.optionPane);\n+        assertNull(paneUI.getButtons());\n+    }\n+\n     public void testGetSizeButtonsToSameWidth() {\n         assertTrue(paneUI.getSizeButtonsToSameWidth());\n     }\n@@ -810,6 +822,12 @@ public void testGetInitialValueIndex() {\n         assertEquals(0, paneUI.getInitialValueIndex());\n     }\n \n+    // Regression for HARMONY-2901\n+    public void testGetInitialValueIndexNull() throws Exception {\n+        assertNull(paneUI.optionPane);\n+        assertEquals(-1, paneUI.getInitialValueIndex());\n+    }\n+\n     public void testResetInputValue() {\n         //TODO Implement resetInputValue().\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2801 ([classlib][awt] java.awt.image.IndexColorModel.getNormalizedComponents() throws UnsupportedOperationException while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496267 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e5d667df8781198fbeb200c60be5aa2d6fc71af1",
        "parent": "https://github.com/apache/harmony-classlib/commit/6aba67fe095aafab688032d82bd277b0e2f94373",
        "bug_id": "harmony-classlib_113",
        "file": [
            {
                "sha": "91ff6445cb9984c890a2a689b798ed74e8777a4e",
                "filename": "modules/awt/src/main/java/common/java/awt/image/ComponentSampleModel.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e5d667df8781198fbeb200c60be5aa2d6fc71af1/modules/awt/src/main/java/common/java/awt/image/ComponentSampleModel.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e5d667df8781198fbeb200c60be5aa2d6fc71af1/modules/awt/src/main/java/common/java/awt/image/ComponentSampleModel.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/ComponentSampleModel.java?ref=e5d667df8781198fbeb200c60be5aa2d6fc71af1",
                "patch": "@@ -407,6 +407,11 @@ public void setSample(int x, int y, int b, int s, DataBuffer data) {\n         } else {\n             samples = iArray;\n         }\n+        \n+        if (data == null) {\n+            // awt.295=data is null\n+            throw new NullPointerException(Messages.getString(\"awt.295\")); //$NON-NLS-1$\n+        }\n \n         for (int i = y; i < y + h; i++) {\n             for (int j = x; j < x + w; j++) {\n@@ -582,3 +587,4 @@ public final int getNumDataElements() {\n }\n \n \n+",
                "deletions": 0
            },
            {
                "sha": "a3493b1598e6f761a8513bea2f30caba447a5959",
                "filename": "modules/awt/src/test/api/java/common/java/awt/image/ComponentSampleModelTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e5d667df8781198fbeb200c60be5aa2d6fc71af1/modules/awt/src/test/api/java/common/java/awt/image/ComponentSampleModelTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e5d667df8781198fbeb200c60be5aa2d6fc71af1/modules/awt/src/test/api/java/common/java/awt/image/ComponentSampleModelTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/image/ComponentSampleModelTest.java?ref=e5d667df8781198fbeb200c60be5aa2d6fc71af1",
                "patch": "@@ -77,4 +77,18 @@ public void testGetPixelsMaxValue()  throws Exception {\n         } \n     }\n \n+\n+    public void testGetSamples() {\n+        // regression for HARMONY-2801\n+        ComponentSampleModel csm = new ComponentSampleModel(3, 10, 10, 1, 10, new int[]{0});\n+\n+        try {\n+            int[] returnValue =\n+                    csm.getSamples(Integer.MAX_VALUE,4,1,1,0,new int[]{0},(DataBuffer) null);\n+            fail(\"No exception\");\n+        } catch(NullPointerException expectedException) {\n+            // expected\n+        }\n+    } \n }\n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2796 ([classlib][awt] java.awt.image.IndexColorModel.getNormalizedComponents() throws UnsupportedOperationException while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496266 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6aba67fe095aafab688032d82bd277b0e2f94373",
        "parent": "https://github.com/apache/harmony-classlib/commit/2b63f9f22a69d3855c42431eaa35d7fcab07a77e",
        "bug_id": "harmony-classlib_114",
        "file": [
            {
                "sha": "aa3d1ba0459f0badc664ea4a8afa2b581f56c39d",
                "filename": "modules/awt/src/main/java/common/java/awt/image/ColorModel.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/main/java/common/java/awt/image/ColorModel.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/main/java/common/java/awt/image/ColorModel.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/ColorModel.java?ref=6aba67fe095aafab688032d82bd277b0e2f94373",
                "patch": "@@ -189,6 +189,12 @@ public String toString() {\n \n     public float[] getNormalizedComponents(Object pixel,\n             float[] normComponents, int normOffset) {\n+\n+        if (pixel == null) {\n+            // awt.294=pixel is null\n+            throw new NullPointerException(Messages.getString(\"awt.294\")); //$NON-NLS-1$\n+        }\n+\n         int unnormComponents[] = getComponents(pixel, null, 0);\n         return getNormalizedComponents(unnormComponents, 0, normComponents,\n                 normOffset);",
                "deletions": 0
            },
            {
                "sha": "22170482acddeadadce17aec1367d47155ce1293",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties?ref=6aba67fe095aafab688032d82bd277b0e2f94373",
                "patch": "@@ -483,6 +483,8 @@ awt.290=Source and destination rasters do not have the same height!\n awt.291=Source and destination images do not have the same width!\n awt.292=Source and destination images do not have the same height!\n awt.293=SampleModel and DataBuffer have different data types\n+awt.294=pixel is null\n+awt.295=data is null\n \n awt.err.00=file dialog {0} error!\n awt.err.01=error: {0}",
                "deletions": 0
            },
            {
                "sha": "8cded9f59109907984dc44d4d33da25db3f62bca",
                "filename": "modules/awt/src/test/api/java/common/java/awt/image/ColorModelTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/test/api/java/common/java/awt/image/ColorModelTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6aba67fe095aafab688032d82bd277b0e2f94373/modules/awt/src/test/api/java/common/java/awt/image/ColorModelTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/image/ColorModelTest.java?ref=6aba67fe095aafab688032d82bd277b0e2f94373",
                "patch": "@@ -44,4 +44,17 @@ public void testNormOffset() {\n         obj.getNormalizedComponents(new int[] { 1, -23, 5, 67, 89, 0 }, 1,\n                 null, 1002);\n     }\n+    \n+    // Regression test for JIRA HARMONY-2796\n+    public void testGetNormalizedComponentsNullPixel() {\n+        IndexColorModel cm = new IndexColorModel(4, 2, new byte[2],\n+                new byte[2], new byte[2]);\n+\n+        try {\n+            cm.getNormalizedComponents((Object) null, new float[] {}, 5);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            // valid\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2878] [classlib][swing]\nj.s.plaf.basic.BasicSliderUI.createScrollListener throws unspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496264 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2b63f9f22a69d3855c42431eaa35d7fcab07a77e",
        "parent": "https://github.com/apache/harmony-classlib/commit/53fe71d4953929dd92f80603e9c68319aa35588b",
        "bug_id": "harmony-classlib_115",
        "file": [
            {
                "sha": "ad77873fa3cd9fc8c6db45dc1f369b984be5ad62",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSliderUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b63f9f22a69d3855c42431eaa35d7fcab07a77e/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSliderUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b63f9f22a69d3855c42431eaa35d7fcab07a77e/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSliderUI.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSliderUI.java?ref=2b63f9f22a69d3855c42431eaa35d7fcab07a77e",
                "patch": "@@ -466,8 +466,9 @@ protected FocusListener createFocusListener(final JSlider slider) {\n     }\n \n     protected ScrollListener createScrollListener(final JSlider slider) {\n-        this.slider = slider;\n-        return new ScrollListener(slider.getOrientation(), slider.getSnapToTicks());\n+        return slider != null\n+               ? new ScrollListener(slider.getOrientation(), slider.getSnapToTicks())\n+               : new ScrollListener();\n     }\n \n     protected PropertyChangeListener createPropertyChangeListener(final JSlider slider) {",
                "deletions": 2
            },
            {
                "sha": "2468f1f3840b9ade3c160695bc3c0b4d9a69eb1d",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSliderUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b63f9f22a69d3855c42431eaa35d7fcab07a77e/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSliderUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b63f9f22a69d3855c42431eaa35d7fcab07a77e/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSliderUITest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSliderUITest.java?ref=2b63f9f22a69d3855c42431eaa35d7fcab07a77e",
                "patch": "@@ -111,6 +111,11 @@ public void testCreateScrollListener() throws Exception {\n                 .createScrollListener(slider));\n     }\n \n+    // Regression for HARMONY-2878\n+    public void testCreateScrollListenerNull() throws Exception {\n+        assertNotNull(sliderUI.createScrollListener(null)); // no exception expected\n+    }\n+\n     public void testCreatePropertyChangeListener() throws Exception {\n         assertNotNull(sliderUI.createPropertyChangeListener(slider));\n         assertFalse(sliderUI.createPropertyChangeListener(slider) == sliderUI",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2823] [classlib][swing]\njavax.swing.plaf.basic.BasicFileChooserUI.getApproveButtonToolTipText(null)\nreturns null while RI throws NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496247 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d338274aa73894227532a17dad6353f26086e46b",
        "parent": "https://github.com/apache/harmony-classlib/commit/3482b5024a761391308240ac84e641634851d303",
        "bug_id": "harmony-classlib_116",
        "file": [
            {
                "sha": "203c274f24b501b0c29cd91ef52e2b816f9e6252",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d338274aa73894227532a17dad6353f26086e46b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d338274aa73894227532a17dad6353f26086e46b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java?ref=d338274aa73894227532a17dad6353f26086e46b",
                "patch": "@@ -672,6 +672,10 @@ protected JButton getApproveButton(final JFileChooser fc) {\n     }\n \n     public String getApproveButtonToolTipText(final JFileChooser fc) {\n+\tif (fc == null) {\n+            throw new NullPointerException();\n+        }\n+\n         return approveButtonToolTipText;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "7917f0c6adbd01134136cc8ecb965f2f2beb72cc",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d338274aa73894227532a17dad6353f26086e46b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d338274aa73894227532a17dad6353f26086e46b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java?ref=d338274aa73894227532a17dad6353f26086e46b",
                "patch": "@@ -75,6 +75,17 @@ public void testGetApproveButtonText() throws Exception {\n         assertEquals(0, ui.getApproveButtonMnemonic(fc));\n     }\n \n+    public void testGetApproveButtonToolTipText() throws Exception {\n+        try {     \n+            javax.swing.plaf.basic.BasicFileChooserUI b = \n+                new javax.swing.plaf.basic.BasicFileChooserUI(new JFileChooser(\"\")); \n+            b.getApproveButtonToolTipText(null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {    \n+            // PASSED          \n+        }\n+    }\n+\n     public void testGetModel() throws Exception {\n         ui.installUI(fc);\n         assertNotNull(ui.getModel());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2819] [classlib][swing]\nj.s.text.JTextComponent.fireCaretUpdate(null) throws unspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496246 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3482b5024a761391308240ac84e641634851d303",
        "parent": "https://github.com/apache/harmony-classlib/commit/167bf919c09977fcd54c1bbc0d48cf084d112ffa",
        "bug_id": "harmony-classlib_117",
        "file": [
            {
                "sha": "89c61cef9f33adae6fa267118fabb97bb19d2fe0",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3482b5024a761391308240ac84e641634851d303/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3482b5024a761391308240ac84e641634851d303/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/JTextComponent.java?ref=3482b5024a761391308240ac84e641634851d303",
                "patch": "@@ -1040,7 +1040,9 @@ protected void fireCaretUpdate(final CaretEvent ce) {\n         for (int i = 0; i < listeners.length; i++) {\n             listeners[i].caretUpdate(ce);\n         }\n-        handleComposedText(ce.getDot());\n+        if (ce != null) {\n+            handleComposedText(ce.getDot());\n+        }\n     }\n \n     private void handleComposedText(final int dot) {",
                "deletions": 1
            },
            {
                "sha": "573bc162ece0498a01fb498a0853de4b38d8b6b2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3482b5024a761391308240ac84e641634851d303/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3482b5024a761391308240ac84e641634851d303/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentTest.java?ref=3482b5024a761391308240ac84e641634851d303",
                "patch": "@@ -401,6 +401,12 @@ public void testFireCaretUpdate() throws Exception {\n         assertEquals(\"1321\", strOrderFireCaretUpdate);\n     }\n \n+    // Regression for HARMONY-2819\n+    public void testFireCaretUpdateNull() throws Exception {\n+        new JTextArea().fireCaretUpdate(null);\n+        // no exception is expected\n+    }\n+\n     public void testSetGetText() throws Exception {\n         assertTrue(jtc.getText().equals(\"\"));\n         jtc.setText(\"JTextComponent\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2780] [classlib][swing]\nj.s.text.DefaultCaret.adjustVisibility throws NPE whereas RI doesn't\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496167 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d3ba5962f7051009638b1ec04d15b9faf95e9663",
        "parent": "https://github.com/apache/harmony-classlib/commit/de3033313556e62c4b8b4697dfaf56d78a906bde",
        "bug_id": "harmony-classlib_118",
        "file": [
            {
                "sha": "b1e5973f8c8d708319dfd455486944f4e1fcdaf4",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d3ba5962f7051009638b1ec04d15b9faf95e9663/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d3ba5962f7051009638b1ec04d15b9faf95e9663/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "status": "modified",
                "changes": 22,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java?ref=d3ba5962f7051009638b1ec04d15b9faf95e9663",
                "patch": "@@ -136,11 +136,11 @@\n \n     //used by mouseClicked method\n     private static final transient AWTTextAction SELECT_WORD_ACTION =\n-        (AWTTextAction)ActionSet.actionMap.get(ActionNames.selectWordAction);\n+        ActionSet.actionMap.get(ActionNames.selectWordAction);\n \n     //used by mouseClicked method\n     private static final transient AWTTextAction SELECT_LINE_ACTION =\n-        (AWTTextAction)ActionSet.actionMap.get(ActionNames.selectLineAction);\n+        ActionSet.actionMap.get(ActionNames.selectLineAction);\n \n     Point magicCaretPosition;\n \n@@ -361,14 +361,17 @@ public synchronized void insertUpdate(final DocumentEvent e) {\n             caret = dc;\n         }\n \n+        @Override\n         public Caret getCaret() {\n             return caret;\n         }\n \n+        @Override\n         public void setDot(final int i, final Bias b) {\n             caret.internalSetDot(i, b);\n         }\n \n+        @Override\n         public void moveDot(final int i, final Bias b) {\n             caret.internalMoveDot(i, b);\n         }\n@@ -412,9 +415,9 @@ private void addHighlight() {\n     }\n \n     protected void adjustVisibility(final Rectangle r) {\n-        textKit.scrollRectToVisible(new Rectangle(r.x, r.y,\n-                                                    r.width + 1,\n-                                                    r.height));\n+        if (r != null) {\n+            textKit.scrollRectToVisible(new Rectangle(r.x, r.y, r.width + 1, r.height));\n+        }\n     }\n \n     /**\n@@ -517,6 +520,7 @@ public void deinstall(final JTextComponent comp) {\n         textKit = null;\n     }\n \n+    @Override\n     public boolean equals(final Object obj) {\n         return this == obj;\n     }\n@@ -580,8 +584,7 @@ public int getBlinkRate() {\n     }\n \n     public ChangeListener[] getChangeListeners() {\n-        return (ChangeListener[])listenerList\n-                .getListeners(ChangeListener.class);\n+        return listenerList.getListeners(ChangeListener.class);\n \n     }\n \n@@ -936,8 +939,8 @@ private void readObject(final ObjectInputStream s) throws IOException,\n             }\n         }\n \n-        blinkTimer = (Timer)createTimer(false, 0);\n-        magicTimer = (Timer)createTimer(true, 0);\n+        blinkTimer = createTimer(false, 0);\n+        magicTimer = createTimer(true, 0);\n \n         triangleX = new int[APEX_NUMBER];\n         triangleY = new int[APEX_NUMBER];\n@@ -1072,6 +1075,7 @@ public void setVisible(final boolean b) {\n      *     System.out.println(textArea.getCaret());\n      *     System.out.println(textArea.getCaret().getClass().getName());\n      */\n+    @Override\n     public String toString() {\n         return \"Dot=(\" + dot + \", \" + dotBias.toString() + \") \" + \"Mark=(\"\n                + mark + \", \" + markBias.toString() + \")\";",
                "deletions": 9
            },
            {
                "sha": "3783c8e1eec5146a984d51cbb2002797d39994a2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d3ba5962f7051009638b1ec04d15b9faf95e9663/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d3ba5962f7051009638b1ec04d15b9faf95e9663/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java?ref=d3ba5962f7051009638b1ec04d15b9faf95e9663",
                "patch": "@@ -459,6 +459,12 @@ public void testAdjustVisibility() throws Exception {\n         assertEquals(1, ((ExtJTextArea) jta).flag);\n     }\n \n+    // Regression for HARMONY-2780\n+    public void testAdjustVisibilityNull() {\n+        new DefaultCaret().adjustVisibility(null);\n+        // No exception is expected\n+    }\n+\n     public void testFireStateChanged() {\n         SimpleChangeListenerForFire CHL1 = new SimpleChangeListenerForFire(\"L1\");\n         SimpleChangeListenerForFire CHL2 = new SimpleChangeListenerForFire(\"L2\");",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2776] [classlib][swing]\nj.s.text.BoxView.childAllocation does not throw NPE whereas RI does\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496164 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/de3033313556e62c4b8b4697dfaf56d78a906bde",
        "parent": "https://github.com/apache/harmony-classlib/commit/3a7bf60998e79c3b269c065348891a94868c87be",
        "bug_id": "harmony-classlib_119",
        "file": [
            {
                "sha": "f11003bac58a7542144cd6acbc9d53172e2f4719",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/BoxView.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/de3033313556e62c4b8b4697dfaf56d78a906bde/modules/swing/src/main/java/common/javax/swing/text/BoxView.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/de3033313556e62c4b8b4697dfaf56d78a906bde/modules/swing/src/main/java/common/javax/swing/text/BoxView.java",
                "status": "modified",
                "changes": 33,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/BoxView.java?ref=de3033313556e62c4b8b4697dfaf56d78a906bde",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexey A. Ivanov\n- * @version $Revision$\n- */\n package javax.swing.text;\n \n import java.awt.Component;\n@@ -33,7 +29,6 @@\n import org.apache.harmony.x.swing.SizeRequirementsHelper;\n import org.apache.harmony.x.swing.Utilities;\n \n-\n public class BoxView extends CompositeView {\n     private static final int[] EMPTY_INT_ARRAY = new int[0];\n     private static final SizeRequirements[] EMPTY_REQUIREMENTS_ARRAY =\n@@ -67,6 +62,7 @@ public BoxView(final Element element, final int axis) {\n         majorAxis = axis;\n     }\n \n+    @Override\n     public float getAlignment(final int axis) {\n         isAxisValid(axis);\n \n@@ -77,32 +73,37 @@ public int getAxis() {\n         return majorAxis;\n     }\n \n+    @Override\n     public Shape getChildAllocation(final int index, final Shape shape) {\n-        if (isLayoutValid()) {\n-            return super.getChildAllocation(index, shape);\n+        if (shape == null || !isLayoutValid()) {\n+            return null;\n         }\n-        return null;\n+        return super.getChildAllocation(index, shape);\n     }\n \n+    @Override\n     public float getMinimumSpan(final int axis) {\n         isAxisValid(axis);\n \n         return getTotalRequirements(axis).minimum + getSideInset(axis);\n     }\n \n+    @Override\n     public float getPreferredSpan(final int axis)  {\n         isAxisValid(axis);\n \n         return getTotalRequirements(axis).preferred + getSideInset(axis);\n     }\n \n+    @Override\n     public float getMaximumSpan(final int axis) {\n         isAxisValid(axis);\n \n         return Utilities.safeIntSum(getTotalRequirements(axis).maximum,\n                                     getSideInset(axis));\n     }\n \n+    @Override\n     public int getResizeWeight(final int axis) {\n         isAxisValid(axis);\n \n@@ -118,6 +119,7 @@ public void layoutChanged(final int axis) {\n         }\n     }\n \n+    @Override\n     public void paint(final Graphics g, final Shape shape) {\n         final Rectangle insideAlloc = getInsideAllocation(shape);\n         final Rectangle allocation = new Rectangle();\n@@ -132,6 +134,7 @@ public void paint(final Graphics g, final Shape shape) {\n         }\n     }\n \n+    @Override\n     public void preferenceChanged(final View child,\n                                   final boolean width,\n                                   final boolean height) {\n@@ -140,6 +143,7 @@ public void preferenceChanged(final View child,\n         super.preferenceChanged(child, width, height);\n     }\n \n+    @Override\n     public void replace(final int index, final int length, final View[] elems) {\n         super.replace(index, length, elems);\n \n@@ -162,6 +166,7 @@ public void setAxis(final int axis) {\n         invalidateLayout(true, true);\n     }\n \n+    @Override\n     public void setSize(final float width, final float height) {\n         layout((int)(width - getSideInset(X_AXIS)),\n                (int)(height - getSideInset(Y_AXIS)));\n@@ -175,13 +180,15 @@ public int getHeight() {\n         return boxHeight;\n     }\n \n+    @Override\n     public Shape modelToView(final int pos, final Shape shape,\n                              final Bias bias) throws BadLocationException {\n         final Rectangle bounds = shape.getBounds();\n         setSize(bounds.width, bounds.height);\n         return super.modelToView(pos, shape, bias);\n     }\n \n+    @Override\n     public int viewToModel(final float x, final float y,\n                            final Shape shape, final Bias[] bias) {\n         final Rectangle bounds = shape.getBounds();\n@@ -232,11 +239,8 @@ protected SizeRequirements calculateMinorAxisRequirements(final int axis,\n         return result;\n     }\n \n+    @Override\n     protected void childAllocation(final int index, final Rectangle alloc) {\n-        if (alloc == null) {\n-            return;\n-        }\n-\n         if (isLayoutValid()) {\n             alloc.x += getOffset(X_AXIS, index);\n             alloc.y += getOffset(Y_AXIS, index);\n@@ -248,6 +252,7 @@ protected void childAllocation(final int index, final Rectangle alloc) {\n         }\n     }\n \n+    @Override\n     protected boolean flipEastAndWestAtEnds(final int position,\n                                             final Bias bias) {\n         if (isMajor(X_AXIS)) {\n@@ -261,6 +266,7 @@ protected boolean flipEastAndWestAtEnds(final int position,\n                && ((CompositeView)child).flipEastAndWestAtEnds(position, bias);\n     }\n \n+    @Override\n     protected void forwardUpdate(final ElementChange change,\n                                  final DocumentEvent event,\n                                  final Shape shape,\n@@ -298,6 +304,7 @@ protected int getSpan(final int axis, final int childIndex) {\n                              : minorSpans[childIndex];\n     }\n \n+    @Override\n     protected View getViewAtPoint(final int x, final int y,\n                                   final Rectangle alloc) {\n         final int location = isMajor(Y_AXIS) ? y - alloc.y : x - alloc.x;\n@@ -321,11 +328,13 @@ protected View getViewAtPoint(final int x, final int y,\n         return null;\n     }\n \n+    @Override\n     protected boolean isBefore(final int x, final int y,\n                                final Rectangle innerAlloc) {\n         return isMajor(X_AXIS) ? x < innerAlloc.x : y < innerAlloc.y;\n     }\n \n+    @Override\n     protected boolean isAfter(final int x, final int y,\n                               final Rectangle innerAlloc) {\n         return isMajor(X_AXIS) ? x > (innerAlloc.x + innerAlloc.width)",
                "deletions": 12
            },
            {
                "sha": "9307280f9fa4fc9d395bd9f4ee0260b40e4996a2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/BoxView_WithChildrenTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/de3033313556e62c4b8b4697dfaf56d78a906bde/modules/swing/src/test/api/java/common/javax/swing/text/BoxView_WithChildrenTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/de3033313556e62c4b8b4697dfaf56d78a906bde/modules/swing/src/test/api/java/common/javax/swing/text/BoxView_WithChildrenTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/BoxView_WithChildrenTest.java?ref=de3033313556e62c4b8b4697dfaf56d78a906bde",
                "patch": "@@ -14,15 +14,12 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexey A. Ivanov\n- * @version $Revision$\n- */\n package javax.swing.text;\n \n import java.awt.Container;\n import java.awt.Graphics;\n import java.awt.Rectangle;\n+import java.awt.Shape;\n import java.awt.image.BufferedImage;\n import java.util.ArrayList;\n import javax.swing.BasicSwingTestCase;\n@@ -187,6 +184,36 @@ public void testChildAllocation() {\n                 alloc);\n     }\n \n+    // Regression test for HARMONY-2776\n+    public void testChildAllocationNull() throws Exception {\n+        final Marker marker = new Marker();\n+        view = new BoxView(root, Y_AXIS) {\n+            @Override\n+            protected void childAllocation(int index, Rectangle alloc) {\n+                marker.setOccurred();\n+                super.childAllocation(index, alloc);\n+            }\n+\n+            @Override\n+            protected Rectangle getInsideAllocation(Shape shape) {\n+                return null;\n+            }\n+        };\n+        view.loadChildren(factory);\n+        view.layout(shape.width, shape.height);\n+        assertTrue(view.isLayoutValid(X_AXIS) && view.isLayoutValid(Y_AXIS));\n+        assertNull(view.getChildAllocation(0, null));\n+        assertFalse(marker.isOccurred());\n+        try {\n+            view.getChildAllocation(0, shape);\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        assertTrue(marker.isOccurred());\n+    }\n+    \n+\n     public void testFlipEastAndWestAtEnds() {\n         assertEquals(Y_AXIS, view.getAxis());\n         // Child views are not instances of CompositeView (no flip method)",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2766] [classlib][swing]\njavax.swing.plaf.basic.BasicListUI.getCellBounds() does not throw\nunspecified NPE while RI does\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496153 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ade03e9f20ed11e91d99663be53c0502da388ffc",
        "parent": "https://github.com/apache/harmony-classlib/commit/9a3388653c0c4cbe69f1d47e4a1c06e8f375fb4d",
        "bug_id": "harmony-classlib_120",
        "file": [
            {
                "sha": "854ea626d919a833cdd14aeb37b6b13b5c23650a",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ade03e9f20ed11e91d99663be53c0502da388ffc/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ade03e9f20ed11e91d99663be53c0502da388ffc/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java?ref=ade03e9f20ed11e91d99663be53c0502da388ffc",
                "patch": "@@ -373,15 +373,16 @@ public static ComponentUI createUI(final JComponent list) {\n     }\n \n     public Rectangle getCellBounds(final JList list, final int index1, final int index2) {\n+        layouter.setList(list);\n+        maybeUpdateLayoutState();\n+\n         Rectangle result = null;\n         if (index1 < 0 || index1 >= list.getModel().getSize()\n             || index2 < 0 || index2 >= list.getModel().getSize()) {\n \n             return result;\n         }\n \n-        layouter.setList(list);\n-        maybeUpdateLayoutState();\n         if (index1 <= index2) {\n             for (int i = index1; i <= index2; i++) {\n                 if (result == null) {",
                "deletions": 2
            },
            {
                "sha": "404628b3f3cd7f5fbeb8b03c79842574999d0cf9",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ade03e9f20ed11e91d99663be53c0502da388ffc/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ade03e9f20ed11e91d99663be53c0502da388ffc/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java?ref=ade03e9f20ed11e91d99663be53c0502da388ffc",
                "patch": "@@ -190,6 +190,21 @@ public void testGetCellBounds() throws Exception {\n         assertEquals(new Rectangle(5, 10, 100 - 5 - 7, 20), ui.getCellBounds(list, 0, 1));\n     }\n \n+    public void testGetCellBounds_Null() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getCellBounds(null, -1, 9);\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getCellBounds(null, 1, 9);\n+            }\n+        });\n+    }\n+\n     public void testGetMaximumSize() throws Exception {\n         ui.installUI(list);\n         assertEquals(ui.getPreferredSize(list), ui.getMaximumSize(list));",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2666] [classlib][swing]\njavax.swing.plaf.metal.BasicInternalFrameTitlePane(null) doesn't throw\nunspecified NPE while RI does\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496043 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/874d1933980d890f32520c044a23c8b33964e414",
        "parent": "https://github.com/apache/harmony-classlib/commit/1808af33faa24df8d60fa08b35ae25019b6680bf",
        "bug_id": "harmony-classlib_121",
        "file": [
            {
                "sha": "9f077ee6fecd9ae152c133678391158106e6374e",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/874d1933980d890f32520c044a23c8b33964e414/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/874d1933980d890f32520c044a23c8b33964e414/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java?ref=874d1933980d890f32520c044a23c8b33964e414",
                "patch": "@@ -419,13 +419,14 @@ public void removeLayoutComponent(final Component comp) {\n     private TitlePaneInternals internals;\n \n     public BasicInternalFrameTitlePane(final JInternalFrame frame) {\n+        if (frame == null) {\n+            throw new NullPointerException();  \n+        } \n+\n         this.frame = frame;\n         setBorder(BorderFactory.createEmptyBorder(1, 0, 1, 0));\n         installInternals();\n-\n-        if (frame != null) {\n-            installTitlePane();\n-        }\n+        installTitlePane(); \n     }\n \n     protected JMenuBar createSystemMenuBar() {",
                "deletions": 4
            },
            {
                "sha": "7a5ac343c822b991e8071bde1839c5c5eca755f3",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/874d1933980d890f32520c044a23c8b33964e414/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/874d1933980d890f32520c044a23c8b33964e414/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java?ref=874d1933980d890f32520c044a23c8b33964e414",
                "patch": "@@ -540,6 +540,15 @@ public void testPaintTitleBackground() {\n         // Note: painting code, cannot test\n     }\n \n+    \n+    public void testConstructor() {\n+        try {     \n+            new BasicInternalFrameTitlePane((JInternalFrame) null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {    \n+            // PASSED          \n+        }\n+    }\n     public void testPaintComponent() {\n         // Note: painting code, cannot test\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2659] [classlib][swing][plaf]\njavax.swing.plaf.basic.BasicListUI.locationToIndex(.., null) doesn't throw\nunspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496039 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/59d0d402c395f955c8987bfb34fe70f01cbb7129",
        "parent": "https://github.com/apache/harmony-classlib/commit/064a6a970556855e73dfa01b9c285f35e4c9390b",
        "bug_id": "harmony-classlib_122",
        "file": [
            {
                "sha": "c926a66ec2fe58ff6a7a762a11df152bc965f96b",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/59d0d402c395f955c8987bfb34fe70f01cbb7129/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/59d0d402c395f955c8987bfb34fe70f01cbb7129/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicListUI.java?ref=59d0d402c395f955c8987bfb34fe70f01cbb7129",
                "patch": "@@ -432,6 +432,10 @@ public Point indexToLocation(final JList list, final int index) {\n     }\n \n     public int locationToIndex(final JList list, final Point location) {\n+        if (location == null) {\n+            throw new NullPointerException();\n+        }\n+\n         layouter.setList(list);\n         maybeUpdateLayoutState();\n ",
                "deletions": 0
            },
            {
                "sha": "1ce6b53d72687e291351276f1d275d01ea01184b",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/59d0d402c395f955c8987bfb34fe70f01cbb7129/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/59d0d402c395f955c8987bfb34fe70f01cbb7129/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicListUITest.java?ref=59d0d402c395f955c8987bfb34fe70f01cbb7129",
                "patch": "@@ -372,6 +372,15 @@ public void testLocationToIndex() throws Exception {\n         assertEquals(0, ui.locationToIndex(list, new Point(3, 25)));\n         assertEquals(1, ui.locationToIndex(list, new Point(50, 3)));\n         assertEquals(1, ui.locationToIndex(list, new Point(50, 25)));\n+\n+        try {     \n+            BasicListUI localBasicListUI = new BasicListUI();\n+            javax.swing.JList localJList = new javax.swing.JList();\n+            localBasicListUI.locationToIndex(localJList, null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {    \n+            // PASSED          \n+        }\n     }\n \n     public void testMaybeUpdateLayoutState() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2677] [classlib][swing]\njavax.swing.plaf.basic.BasicProgressBarUI.startAnimationTimer() throws\nunspecified  NPE while RI does not\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496046 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/99e87e8058291d1223af48e6ad76dd2747d8a80d",
        "parent": "https://github.com/apache/harmony-classlib/commit/155a099e260f7140c41dc70a78c8746e1717b5b9",
        "bug_id": "harmony-classlib_123",
        "file": [
            {
                "sha": "051dc72bc70d7ffa7292b35c3148efc488d24236",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/99e87e8058291d1223af48e6ad76dd2747d8a80d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/99e87e8058291d1223af48e6ad76dd2747d8a80d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java?ref=99e87e8058291d1223af48e6ad76dd2747d8a80d",
                "patch": "@@ -208,11 +208,15 @@ protected void uninstallListeners() {\n     }\n \n     protected void startAnimationTimer() {\n-        animationTimer.start();\n+        if (animationTimer != null) {\n+            animationTimer.start();\n+        }\n     }\n \n     protected void stopAnimationTimer() {\n-        animationTimer.stop();\n+        if (animationTimer != null) {\n+            animationTimer.stop();\n+        }\n     }\n \n     protected Dimension getPreferredInnerHorizontal() {",
                "deletions": 2
            },
            {
                "sha": "76ad5eb738091f5422cacb45175521181c7a3c32",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/99e87e8058291d1223af48e6ad76dd2747d8a80d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/99e87e8058291d1223af48e6ad76dd2747d8a80d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java?ref=99e87e8058291d1223af48e6ad76dd2747d8a80d",
                "patch": "@@ -133,4 +133,22 @@ public void testAnimation() {\n         progressBar.setIndeterminate(true);\n         assertEquals(0, ui.getAnimationIndex());\n     }\n+\n+    public void testStartStop() throws NullPointerException {\n+        BasicProgressBarUIExt pb = new BasicProgressBarUIExt();\n+        pb.startAnimationTimer(); \n+\n+        pb = new BasicProgressBarUIExt();\n+        pb.stopAnimationTimer(); \n+    }\n+    \n+    class BasicProgressBarUIExt extends BasicProgressBarUI {\n+        public void startAnimationTimer() {\n+            super.startAnimationTimer();\n+        }\n+        \n+        public void stopAnimationTimer() {\n+            super.stopAnimationTimer();\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2664] [classlib][swing]\njavax.swing.plaf.basic.BasicDesktopIconUI.getInsets(null) returns valid\nresult while RI throws NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496041 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1808af33faa24df8d60fa08b35ae25019b6680bf",
        "parent": "https://github.com/apache/harmony-classlib/commit/151ed4339a97d54d54318101d37126eec5e85b1f",
        "bug_id": "harmony-classlib_124",
        "file": [
            {
                "sha": "3e467750acb3463b02af46378b951fb9aed62981",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicDesktopIconUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1808af33faa24df8d60fa08b35ae25019b6680bf/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicDesktopIconUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1808af33faa24df8d60fa08b35ae25019b6680bf/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicDesktopIconUI.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicDesktopIconUI.java?ref=1808af33faa24df8d60fa08b35ae25019b6680bf",
                "patch": "@@ -127,7 +127,10 @@ public void deiconize() {\n     }\n \n     public Insets getInsets(final JComponent c) {\n-//        return desktopIcon.getInsets();\n+        if (c == null) {\n+            throw new NullPointerException(\"component is null\");\n+        }\n+        //return desktopIcon.getInsets();\n         return new Insets(INSETS_WIDTH, INSETS_WIDTH,\n                 INSETS_WIDTH, INSETS_WIDTH);\n     }",
                "deletions": 1
            },
            {
                "sha": "8ca6eba1bd528585547e9f897cba44d4f21001e6",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicDesktopIconUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1808af33faa24df8d60fa08b35ae25019b6680bf/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicDesktopIconUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1808af33faa24df8d60fa08b35ae25019b6680bf/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicDesktopIconUITest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicDesktopIconUITest.java?ref=1808af33faa24df8d60fa08b35ae25019b6680bf",
                "patch": "@@ -128,6 +128,12 @@ public void testGetInsets() {\n         Insets insets = ui.getInsets(icon);\n         assertTrue(\"not null\", insets != null);\n         assertEquals(\"ok\", validInsets, insets);\n+        try { //Regression test for HARMONY-2664\n+            ui.getInsets(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2640] [classlib][swing]\njavax.swing.plaf.basic.BasicButtonListener.propertyChange(null) does not\nthrow unspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495986 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/03fef4ac4f14df01f5619ce5bf333919640758fd",
        "parent": "https://github.com/apache/harmony-classlib/commit/d2a2681471f7c9322808892a870d6ae57387ce49",
        "bug_id": "harmony-classlib_125",
        "file": [
            {
                "sha": "463f0bfeefe191190a4ec66524a18ae2f32aed07",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicButtonListener.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/03fef4ac4f14df01f5619ce5bf333919640758fd/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicButtonListener.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/03fef4ac4f14df01f5619ce5bf333919640758fd/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicButtonListener.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicButtonListener.java?ref=03fef4ac4f14df01f5619ce5bf333919640758fd",
                "patch": "@@ -101,9 +101,10 @@ public void stateChanged(final ChangeEvent event) {\n     }\n \n     public void propertyChange(final PropertyChangeEvent event) {\n-        if (event != null && AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY.equals(event.getPropertyName())) {\n+        if (AbstractButton.CONTENT_AREA_FILLED_CHANGED_PROPERTY.equals(event.getPropertyName())) {\n             LookAndFeel.installProperty(button, StringConstants.OPAQUE_PROPERTY, event.getNewValue());\n         }\n+\n         button.revalidate();\n         button.repaint();\n     }",
                "deletions": 1
            },
            {
                "sha": "e937f2357d18a8131f6cdccf3d1cdd3ba7a14615",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicButtonListenerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/03fef4ac4f14df01f5619ce5bf333919640758fd/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicButtonListenerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/03fef4ac4f14df01f5619ce5bf333919640758fd/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicButtonListenerTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicButtonListenerTest.java?ref=03fef4ac4f14df01f5619ce5bf333919640758fd",
                "patch": "@@ -71,7 +71,14 @@ public void testCheckOpacity() {\n     }\n \n     public void testPropertyChange() {\n-        //TODO Implement propertyChange().\n+        try {         \n+            javax.swing.plaf.basic.BasicButtonListener l = \n+            new javax.swing.plaf.basic.BasicButtonListener(new JButton()); \n+            l.propertyChange(null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {    \n+            // PASSED          \n+        }\n     }\n \n     public void testMouseReleased() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2602] [classlib][swing][plaf]\njavax.swing.plaf.basic.BasicTextAreaUI.create(null) doesn't throw NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495954 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3d50f70185007da7738856b71f03770fab2b7570",
        "parent": "https://github.com/apache/harmony-classlib/commit/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9",
        "bug_id": "harmony-classlib_126",
        "file": [
            {
                "sha": "a4c5a0dbc65792efac84673db4991e41775d5048",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3d50f70185007da7738856b71f03770fab2b7570/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3d50f70185007da7738856b71f03770fab2b7570/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextAreaUI.java?ref=3d50f70185007da7738856b71f03770fab2b7570",
                "patch": "@@ -56,8 +56,9 @@ public static ComponentUI createUI(final JComponent c) {\n \n     public View create(final Element element) {\n         if (element == null) {\n-            return null;\n+            throw new NullPointerException();\n         }\n+\n         Document doc = element.getDocument();\n         Boolean i18n = (Boolean)doc.getProperty(StringConstants.BIDI_PROPERTY);\n         if (i18n.booleanValue()) {",
                "deletions": 1
            },
            {
                "sha": "86db4a2a8137ff599f789fa70b3ce090b32f5720",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextAreaUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3d50f70185007da7738856b71f03770fab2b7570/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextAreaUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3d50f70185007da7738856b71f03770fab2b7570/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextAreaUITest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextAreaUITest.java?ref=3d50f70185007da7738856b71f03770fab2b7570",
                "patch": "@@ -96,6 +96,13 @@ public void testCreateElement() throws Exception {\n         assertTrue(ui.create(elem) instanceof PlainView);\n         jta.setLineWrap(true);\n         assertTrue(ui.create(elem) instanceof WrappedPlainView);\n+\n+        try {      \n+            new BasicTextAreaUI().create(null);  \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        } \n     }\n \n     public void testGetPropertyPrefix() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1777 \"[classlib][swing]javax.swing.plaf.basic.BasicTableHeaderUI.MouseInputHandler.mouseEntered(null) throws unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495948 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8aabfdad8a878acea8748d334734ca6bf0c948e6",
        "parent": "https://github.com/apache/harmony-classlib/commit/c5979b45acac0dedf2ebdb8723f710bc71146749",
        "bug_id": "harmony-classlib_127",
        "file": [
            {
                "sha": "0307d0f77c54cfc391928b9e06ff567462c66f79",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8aabfdad8a878acea8748d334734ca6bf0c948e6/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8aabfdad8a878acea8748d334734ca6bf0c948e6/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java?ref=8aabfdad8a878acea8748d334734ca6bf0c948e6",
                "patch": "@@ -206,7 +206,7 @@ private TableColumn getReorderingColumn(final MouseEvent e) {\n         }\n \n         private void updateCursor(final MouseEvent e) {\n-            if (e.getButton() > 0 || e.getModifiersEx() > 0) {\n+            if (e == null || e.getButton() > 0 || e.getModifiersEx() > 0) {\n                 return;\n             }\n ",
                "deletions": 1
            },
            {
                "sha": "e94181ad981cfd1a2d26d651185eeb5f0ef4ccc8",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8aabfdad8a878acea8748d334734ca6bf0c948e6/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8aabfdad8a878acea8748d334734ca6bf0c948e6/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java?ref=8aabfdad8a878acea8748d334734ca6bf0c948e6",
                "patch": "@@ -150,4 +150,9 @@ public void testGetMinimumMaximumPreferredSize() throws Exception {\n         assertEquals(new Dimension(70, renderingComponent.getPreferredSize().height), ui\n                 .getPreferredSize(null));\n     }\n+\n+    public void testMouseInputListener() throws Exception {\n+        // Regression test for HARMONY-1777\n+        new BasicTableHeaderUI().new MouseInputHandler().mouseEntered(null);\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2896 \"[classlib][swing] Compatibility: javax.swing.plaf.basic.BasicComboBoxUI. getAccessibleChildrenCount(null) does not throw unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495932 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59",
        "parent": "https://github.com/apache/harmony-classlib/commit/cceb7fbd08a70f882738757ddf2be389abfa28bf",
        "bug_id": "harmony-classlib_128",
        "file": [
            {
                "sha": "8c049bc9c84104e3aed25d04fdef05076f211a7a",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59",
                "patch": "@@ -481,6 +481,9 @@ public void unconfigureArrowButton() {\n \n \n     public int getAccessibleChildrenCount(final JComponent c) {\n+        if (comboBox == null) {\n+            throw new NullPointerException(\"comboBox is null\");\n+        }\n         return 0;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "da0199f36c8c92ab131799f7d4d5045435b03bc8",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java?ref=81eaedf7d3f16ac5ad6ffc67cc957cfecd2f0a59",
                "patch": "@@ -29,6 +29,7 @@\n import javax.swing.DefaultListCellRenderer;\n import javax.swing.JButton;\n import javax.swing.JComboBox;\n+import javax.swing.JComponent;\n import javax.swing.JFrame;\n import javax.swing.JLabel;\n import javax.swing.JTextField;\n@@ -259,6 +260,23 @@ public void testRectangleForCurrentValue() throws Exception {\n         assertFalse(r1 == r2);\n     }\n \n+    // Regression test for HARMONY-2896\n+    public void testGetAccessibleChildrenCount() throws Exception {\n+        ui.comboBox = null;\n+        try {\n+            ui.getAccessibleChildrenCount(new JComponent() {});\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try {\n+            ui.getAccessibleChildrenCount(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testGetInsets() throws Exception {\n         ui.comboBox = comboBox;\n         assertEquals(comboBox.getInsets(), ui.getInsets());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2620] [classlib][swing]\njavax.swing.MenuSelectionManager.processMouseEvent(null) does not throw\nunspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495970 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/00ebe37a6af21c2ae6eacb557b1ef49d507fb849",
        "parent": "https://github.com/apache/harmony-classlib/commit/0fae0cd33205cd2982b94a3de259b79a2ab08f82",
        "bug_id": "harmony-classlib_129",
        "file": [
            {
                "sha": "a43433b3fa935f64b4f45c3d61a17fa0f0bc352f",
                "filename": "modules/swing/src/main/java/common/javax/swing/MenuSelectionManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/00ebe37a6af21c2ae6eacb557b1ef49d507fb849/modules/swing/src/main/java/common/javax/swing/MenuSelectionManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/00ebe37a6af21c2ae6eacb557b1ef49d507fb849/modules/swing/src/main/java/common/javax/swing/MenuSelectionManager.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/MenuSelectionManager.java?ref=00ebe37a6af21c2ae6eacb557b1ef49d507fb849",
                "patch": "@@ -179,14 +179,16 @@ public void processKeyEvent(final KeyEvent event) {\n         }\n     }\n \n-    public void processMouseEvent(final MouseEvent event) {\n+    public void processMouseEvent(final MouseEvent event) {   \n+        Component c = componentForPoint((Component) event.getSource(), event.getPoint());\n+\n         if (isPathEmpty()) {\n             return;\n         }\n \n-        Component c = componentForPoint((Component)event.getSource(), event.getPoint());\n         if ((event.getID() == MouseEvent.MOUSE_DRAGGED)\n-            || (event.getID() == MouseEvent.MOUSE_RELEASED)) {\n+                || (event.getID() == MouseEvent.MOUSE_RELEASED)) {\n+\n             if (c instanceof JMenuItem) {\n                 ((JMenuItem)c).processMouseEvent(event, selectedPath, this);\n             }",
                "deletions": 3
            },
            {
                "sha": "f4e2b3572f16d18152c3a7d6c7c7490d44b15448",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/MenuSelectionManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/00ebe37a6af21c2ae6eacb557b1ef49d507fb849/modules/swing/src/test/api/java/common/javax/swing/MenuSelectionManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/00ebe37a6af21c2ae6eacb557b1ef49d507fb849/modules/swing/src/test/api/java/common/javax/swing/MenuSelectionManagerTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/MenuSelectionManagerTest.java?ref=00ebe37a6af21c2ae6eacb557b1ef49d507fb849",
                "patch": "@@ -364,6 +364,14 @@ public void testProcessMouseEvent() {\n         //\n         //        manager.processMouseEvent(event4);\n         //        assertEquals(\"released\", listener1.event);\n+\n+        try {   \n+            MenuSelectionManager m = new MenuSelectionManager(); \n+            m.processMouseEvent(null); \n+            fail(\"NPE should be thrown\");\n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2606] [classlib][swing][plaf]\njavax.swing.plaf.basic.BasicFileChooserUI.ensureFileIsVisible(..) throws\nunexpected NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495957 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/fc6db9131e149df20df15549ea67595d63debb49",
        "parent": "https://github.com/apache/harmony-classlib/commit/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1",
        "bug_id": "harmony-classlib_130",
        "file": [
            {
                "sha": "15948a0cc0c17d16a2c9bcb93654410c19d92255",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fc6db9131e149df20df15549ea67595d63debb49/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fc6db9131e149df20df15549ea67595d63debb49/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java?ref=fc6db9131e149df20df15549ea67595d63debb49",
                "patch": "@@ -613,6 +613,7 @@ public void rescanCurrentDirectory(final JFileChooser fc) {\n     }\n \n     public void ensureFileIsVisible(final JFileChooser fc, final File f) {\n+        fileChooser = fc;  \n         fileChooser.ensureFileIsVisible(f);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "306757da1bf8397eb11ee786da47e74e6115cdf5",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fc6db9131e149df20df15549ea67595d63debb49/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fc6db9131e149df20df15549ea67595d63debb49/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicFileChooserUITest.java?ref=fc6db9131e149df20df15549ea67595d63debb49",
                "patch": "@@ -164,4 +164,14 @@ public void testGetPreferredSize() {\n         ui.installUI(fc);\n         assertNull(ui.getPreferredSize(fc));\n     }\n+\n+    public void testEnsureFileIsVisible() {\n+        try {   \n+            BasicFileChooserUI fc = new BasicFileChooserUI(null);  \n+            fc.ensureFileIsVisible(new JFileChooser(), new File(\"a\")); \n+            // PASSED\n+        } catch (NullPointerException npe) {     \n+            fail(\"NPE should not be thrown\");            \n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2603] [classlib][swing]\nj.s.undo.CompoundEdit.getPresentationName throws NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495956 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1",
        "parent": "https://github.com/apache/harmony-classlib/commit/3d50f70185007da7738856b71f03770fab2b7570",
        "bug_id": "harmony-classlib_131",
        "file": [
            {
                "sha": "ae804845abec4180dc58fcce9bee488870e26340",
                "filename": "modules/swing/src/main/java/common/javax/swing/undo/CompoundEdit.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1/modules/swing/src/main/java/common/javax/swing/undo/CompoundEdit.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1/modules/swing/src/main/java/common/javax/swing/undo/CompoundEdit.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/undo/CompoundEdit.java?ref=eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.NoSuchElementException;\n import java.util.Vector;\n \n+import org.apache.harmony.x.swing.Utilities;\n+\n public class CompoundEdit extends AbstractUndoableEdit {\n \n     protected Vector<UndoableEdit> edits = new Vector<UndoableEdit>();\n@@ -108,7 +110,7 @@ public String getPresentationName() {\n \n         if (last != null) {\n             String name = last.getPresentationName();\n-            if (name.length() != 0) {\n+            if (!Utilities.isEmptyString(name)) {\n                 return name;\n             }\n         }",
                "deletions": 1
            },
            {
                "sha": "82546e0bf490931c7cbe76b304819f67c2138762",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/undo/CompoundEditTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1/modules/swing/src/test/api/java/common/javax/swing/undo/CompoundEditTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1/modules/swing/src/test/api/java/common/javax/swing/undo/CompoundEditTest.java",
                "status": "modified",
                "changes": 22,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/undo/CompoundEditTest.java?ref=eb51a73e7f1bb0df6aab0dcb9accaf5e453053e1",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Evgeniya G. Maenkova\n- * @version $Revision$\n- */\n package javax.swing.undo;\n \n import javax.swing.BasicSwingTestCase;\n@@ -367,6 +363,24 @@ public void testGetPresentationName02() {\n         assertEquals(\"\", ce.getPresentationName());\n     }\n \n+    /**\n+     * Tests that if <code>getPresentationName</code> of the last edit returns\n+     * <code>null</code>, the result is empty string.\n+     * \n+     */\n+    // Regression for HARMONY-2603\n+    public void testGetPresentationName03() {\n+        ce.addEdit(new TestUndoableEdit() {\n+            private static final long serialVersionUID = 1L;\n+\n+            @Override\n+            public String getPresentationName() {\n+                return null;\n+            }\n+        });\n+        assertEquals(\"\", ce.getPresentationName());\n+    }\n+\n     @Override\n     public void testGetRedoPresentationName() {\n         assertEquals(UIManager.getString(\"AbstractUndoableEdit.redoText\"), ce",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1811 \"[classlib][swing]javax.swing.tex.ElementIterator((Document)null) does not throw unspesified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495949 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9",
        "parent": "https://github.com/apache/harmony-classlib/commit/8aabfdad8a878acea8748d334734ca6bf0c948e6",
        "bug_id": "harmony-classlib_132",
        "file": [
            {
                "sha": "ac0134d7276801716ee4697ef6e3ca1842363bcb",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/ElementIterator.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9/modules/swing/src/main/java/common/javax/swing/text/ElementIterator.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9/modules/swing/src/main/java/common/javax/swing/text/ElementIterator.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/ElementIterator.java?ref=d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9",
                "patch": "@@ -31,7 +31,7 @@ public ElementIterator(final Element root) {\n     }\n \n     public ElementIterator(final Document doc) {\n-        this((doc != null) ? doc.getRootElements()[0] : null);\n+        this(doc.getRootElements()[0]);\n     }\n \n     public Element first() {",
                "deletions": 1
            },
            {
                "sha": "c92b5e10138afea186b94a5f2830cb32e58c6bfa",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/ElementIteratorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9/modules/swing/src/test/api/java/common/javax/swing/text/ElementIteratorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9/modules/swing/src/test/api/java/common/javax/swing/text/ElementIteratorTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/ElementIteratorTest.java?ref=d73bda3f646abaa9a6a2807ad7d33d1a9c768cc9",
                "patch": "@@ -84,6 +84,13 @@ public void testElementIteratorDocument() {\n         assertSame(root, iterator.first());\n         assertNull(iterator.previous());\n         assertSame(root, iterator.current());\n+\n+        try { // Regression test for HARMONY-1811\n+            new ElementIterator((Document) null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1750 \"[classlib][swing]javax.swing.text.DefaultCaret.install(null) does not throw unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495947 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c5979b45acac0dedf2ebdb8723f710bc71146749",
        "parent": "https://github.com/apache/harmony-classlib/commit/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab",
        "bug_id": "harmony-classlib_133",
        "file": [
            {
                "sha": "03daaa7e2d9e285ff2b62964f5ae712ba00e045b",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c5979b45acac0dedf2ebdb8723f710bc71146749/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c5979b45acac0dedf2ebdb8723f710bc71146749/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java?ref=c5979b45acac0dedf2ebdb8723f710bc71146749",
                "patch": "@@ -674,6 +674,9 @@ public int getUpdatePolicy() {\n      * selectionColor.\n      */\n     public void install(final JTextComponent c) {\n+        if (c == null) { // Fix for HARMONY-1750, for compatiblity with RI\n+            throw new NullPointerException(\"component is null\");\n+        }\n         if (!setComponent(c)) {\n             return;\n         }",
                "deletions": 0
            },
            {
                "sha": "207951845372da71b73fc10932a62717172a2b6a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c5979b45acac0dedf2ebdb8723f710bc71146749/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c5979b45acac0dedf2ebdb8723f710bc71146749/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/DefaultCaretTest.java?ref=c5979b45acac0dedf2ebdb8723f710bc71146749",
                "patch": "@@ -226,6 +226,13 @@ public void testInstall() {\n                 + jta.getListeners(FocusListener.class).length\n                 + jta.getPropertyChangeListeners().length;\n         assertEquals(tCompListenersCount, tCompListenersCountCurrent - 4);\n+\n+        try { // Regression test for HARMONY-1750\n+            new DefaultCaret().install(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1742 \"[classlib][swing] javax.swing.text.MaskFormatter.valueToString(Object) throws unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495946 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab",
        "parent": "https://github.com/apache/harmony-classlib/commit/8c5968ab525fefa12874137c0103221ff21f3169",
        "bug_id": "harmony-classlib_134",
        "file": [
            {
                "sha": "683967bc2677e2fc32852e750da2097d2894a70f",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/MaskFormatter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab/modules/swing/src/main/java/common/javax/swing/text/MaskFormatter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab/modules/swing/src/main/java/common/javax/swing/text/MaskFormatter.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/MaskFormatter.java?ref=a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab",
                "patch": "@@ -191,6 +191,9 @@ public Object stringToValue(final String string) throws ParseException {\n     }\n \n     public String valueToString(final Object value) throws ParseException {\n+        if ((mask == null) && (escapeMask == null) && (literalMask == null)) {\n+            return \"\";\n+        }\n         String result = super.valueToString(value);\n         result = fillAll(result);\n         result = fillByPlaceholder(result);",
                "deletions": 0
            },
            {
                "sha": "256981c3c5a704bd94f64b1488cb5fb1cc3ae513",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/MaskFormatterTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab/modules/swing/src/test/api/java/common/javax/swing/text/MaskFormatterTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab/modules/swing/src/test/api/java/common/javax/swing/text/MaskFormatterTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/MaskFormatterTest.java?ref=a6b4f32c6be7cb29464b9ee8b4feecafdb5e42ab",
                "patch": "@@ -22,6 +22,7 @@\n \n import java.text.ParseException;\n import javax.swing.SwingTestCase;\n+import javax.swing.JFormattedTextField;\n \n public class MaskFormatterTest extends SwingTestCase {\n     MaskFormatter formatter;\n@@ -295,4 +296,15 @@ public void testStringToValue_InvalidPlaceHolderChar() {\n             assertTrue(\"Unexpected exception: \" + e.getMessage(), false);\n         }\n     }\n+   \n+    public void testValueToString_Object() throws ParseException{\n+    \t// Regression for HARMONY-1742 \n+    \tMaskFormatter obj = new MaskFormatter();\n+        obj.valueToString(new Object());\n+    } \n+    public void testInstall_JFormattedTextField() {\n+    \t// Regression for HARMONY-1742 \n+        MaskFormatter obj = new MaskFormatter();\n+        obj.install(new JFormattedTextField());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2582] [classlib][swing]\njavax.swing.JFileChooser(File, null) throws unspecified NPE while RI does\nnot\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495924 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2bb610381d75492d26d82dd333d10c85d3a08bf6",
        "parent": "https://github.com/apache/harmony-classlib/commit/89951bad9eaf62988927d5fb4c0d3548adff5f37",
        "bug_id": "harmony-classlib_135",
        "file": [
            {
                "sha": "cfe0a46394ab60ade383531538cc77600cab6f88",
                "filename": "modules/swing/src/main/java/common/javax/swing/JFileChooser.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2bb610381d75492d26d82dd333d10c85d3a08bf6/modules/swing/src/main/java/common/javax/swing/JFileChooser.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2bb610381d75492d26d82dd333d10c85d3a08bf6/modules/swing/src/main/java/common/javax/swing/JFileChooser.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JFileChooser.java?ref=2bb610381d75492d26d82dd333d10c85d3a08bf6",
                "patch": "@@ -164,11 +164,11 @@ public JFileChooser() {\n     }\n \n     public JFileChooser(final String currentDirectoryPath) {\n-        this(currentDirectoryPath, FileSystemView.getFileSystemView());\n+        this(currentDirectoryPath, null);\n     }\n \n     public JFileChooser(final File currentDirectory) {\n-        this(currentDirectory, FileSystemView.getFileSystemView());\n+        this(currentDirectory, null);\n     }\n \n     public JFileChooser(final FileSystemView fsv) {\n@@ -596,7 +596,7 @@ protected JDialog createDialog(final Component parent) throws HeadlessException\n     }\n \n     protected void setup(final FileSystemView view) {\n-        setFileSystemView(view);\n+        setFileSystemView(view != null ? view : FileSystemView.getFileSystemView());\n         updateUI();\n         if (isAcceptAllFileFilterUsed()) {\n             addChoosableFileFilter(getAcceptAllFileFilter());",
                "deletions": 3
            },
            {
                "sha": "b735edf9ec883e80d5ba5badb4d31c752fb0efd1",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JFileChooserTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2bb610381d75492d26d82dd333d10c85d3a08bf6/modules/swing/src/test/api/java/common/javax/swing/JFileChooserTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2bb610381d75492d26d82dd333d10c85d3a08bf6/modules/swing/src/test/api/java/common/javax/swing/JFileChooserTest.java",
                "status": "modified",
                "changes": 49,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JFileChooserTest.java?ref=2bb610381d75492d26d82dd333d10c85d3a08bf6",
                "patch": "@@ -102,9 +102,52 @@ public File getDefaultDirectory() {\n         }\n     }\n \n+    public void testJFileChooser_FSV() throws Exception {\n+        File testDir = new File(\"testDir\");\n+        testDir.deleteOnExit();\n+        testDir.mkdir();\n+        chooser = new JFileChooser();\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((File) null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir.getAbsolutePath());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((String) null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((FileSystemView) null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir, FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir, null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((File) null, FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((File) null, null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir.getAbsolutePath(), FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser(testDir.getAbsolutePath(), null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((String) null, FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser = new JFileChooser((String) null, null);\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        testDir.delete();\n+    }\n+\n     //TODO\n     public void testSetup() throws Exception {\n+        chooser = new JFileChooser();\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser.setup(FileSystemView.getFileSystemView());\n+        assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+        chooser.setup(null);\n         assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+\n         final File defaultDir = new File(\"testDir\");\n         defaultDir.deleteOnExit();\n         try {\n@@ -124,6 +167,12 @@ public File getDefaultDirectory() {\n             assertEquals(view, chooser.getFileSystemView());\n             assertEquals(FileSystemView.getFileSystemView().getDefaultDirectory(), chooser\n                     .getCurrentDirectory());\n+            chooser.setup(FileSystemView.getFileSystemView());\n+            assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n+            chooser.setup(view);\n+            assertEquals(view, chooser.getFileSystemView());\n+            chooser.setup(null);\n+            assertEquals(FileSystemView.getFileSystemView(), chooser.getFileSystemView());\n         } catch (Throwable t) {\n             defaultDir.delete();\n             fail(\"Detected problem \" + t.getMessage());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2577] [classlib][swing]\njavax.swing.JEditorPane.setEditorKitForContentType() does not throw\nunspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495922 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/64812c672214353213c1d2fb091f15f75f6607e8",
        "parent": "https://github.com/apache/harmony-classlib/commit/bfa217cd43e300f5c190f8d8f34ff24921eab6c4",
        "bug_id": "harmony-classlib_136",
        "file": [
            {
                "sha": "257d0c2552b1d5c74cad27c72fa8b8b03fb713d8",
                "filename": "modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/64812c672214353213c1d2fb091f15f75f6607e8/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/64812c672214353213c1d2fb091f15f75f6607e8/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JEditorPane.java?ref=64812c672214353213c1d2fb091f15f75f6607e8",
                "patch": "@@ -628,6 +628,10 @@ public void setEditorKit(final EditorKit kit) {\n     }\n \n     public void setEditorKitForContentType(final String type, final EditorKit kit) {\n+        if (type == null || kit == null) {\n+            throw new NullPointerException();\n+        }\n+  \n         int index = localContentTypes.indexOf(contentType);\n         if (index >= 0) {\n             localContentTypes.remove(index);",
                "deletions": 0
            },
            {
                "sha": "c26b90688c65031e89d456ce2e59943eb1bbf9f1",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/64812c672214353213c1d2fb091f15f75f6607e8/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/64812c672214353213c1d2fb091f15f75f6607e8/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "status": "modified",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java?ref=64812c672214353213c1d2fb091f15f75f6607e8",
                "patch": "@@ -820,4 +820,30 @@ public void testGetEditorKitClassNameForContentType() {\n                 .getEditorKitClassNameForContentType(\"text/rtf\"));\n         assertNull(JEditorPane.getEditorKitClassNameForContentType(\"...\"));\n     }\n+\n+    public void testSetEditorKitForContentType() throws Exception {\n+        try {          \n+            JEditorPane ep = new JEditorPane();\n+            ep.setEditorKitForContentType(\"abc\", null);\n+            fail(\"NPE expected\"); \n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }   \n+        \n+        try {          \n+            JEditorPane ep = new JEditorPane();\n+            ep.setEditorKitForContentType(null, new DefaultEditorKit());\n+            fail(\"NPE expected\");             \n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }  \n+        \n+        try {          \n+            JEditorPane ep = new JEditorPane();             \n+            ep.setEditorKitForContentType(null, null);\n+            fail(\"NPE expected\"); \n+        } catch (NullPointerException npe) {              \n+            // PASSED            \n+        }  \n+    }\n }\n\\ No newline at end of file",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2574] [classlib][swing]\njavax.swing.JEditorPane.registerEditorKitForContentType(null, null) does\nnot throw unspecified NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495917 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7cd702d914fce73a29fbdc6118d576a92d4b0b8e",
        "parent": "https://github.com/apache/harmony-classlib/commit/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8",
        "bug_id": "harmony-classlib_137",
        "file": [
            {
                "sha": "f6ff7cde0464ddf83dbff6614e3b31a265a95e54",
                "filename": "modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7cd702d914fce73a29fbdc6118d576a92d4b0b8e/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7cd702d914fce73a29fbdc6118d576a92d4b0b8e/modules/swing/src/main/java/common/javax/swing/JEditorPane.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JEditorPane.java?ref=7cd702d914fce73a29fbdc6118d576a92d4b0b8e",
                "patch": "@@ -259,6 +259,11 @@ public static void registerEditorKitForContentType(final String type,\n \n     public static void registerEditorKitForContentType(final String type,\n             final String editorKitName, final ClassLoader loader) {\n+\n+        if (type == null || editorKitName == null) {\n+            throw new NullPointerException();\n+        }\n+\n         int index = contentTypes.indexOf(type);\n         if (index >= 0) {\n             contentTypes.remove(index);",
                "deletions": 0
            },
            {
                "sha": "e300c78b7d928e7f3298b317888fd9f0a38db80f",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7cd702d914fce73a29fbdc6118d576a92d4b0b8e/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7cd702d914fce73a29fbdc6118d576a92d4b0b8e/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JEditorPaneTest.java?ref=7cd702d914fce73a29fbdc6118d576a92d4b0b8e",
                "patch": "@@ -382,6 +382,13 @@ public void testRegisterEditorKitForContentTypeStringString() {\n                 \"javax.swing.JEditorPaneTest$SimpleEditorKit\");\n         assertEquals(\"javax.swing.JEditorPaneTest$SimpleEditorKit\", JEditorPane\n                 .getEditorKitClassNameForContentType(\"text/test1\"));\n+\n+        try {         \n+            JEditorPane.registerEditorKitForContentType(null, null);\n+            fail(\"NPE should be thrown\");               \n+        } catch (NullPointerException npe) {               \n+            // PASSED            \n+        }\n     }\n \n     public void testRegisterEditorKitForContentTypeStringStringClassLoader() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2536] [classlib][swing]\njavax.swing.undo.StateEdit(null) does not throw NPE while RI does\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495904 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/dc590d06fd99cba6cddbf3474f39923d87be07c0",
        "parent": "https://github.com/apache/harmony-classlib/commit/b767da58e6f382ff3c1cc79a170ce81258c17926",
        "bug_id": "harmony-classlib_138",
        "file": [
            {
                "sha": "cc25d8674ab53c63528a9e63b3907b43be8fb8fc",
                "filename": "modules/swing/src/main/java/common/javax/swing/undo/StateEdit.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/dc590d06fd99cba6cddbf3474f39923d87be07c0/modules/swing/src/main/java/common/javax/swing/undo/StateEdit.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/dc590d06fd99cba6cddbf3474f39923d87be07c0/modules/swing/src/main/java/common/javax/swing/undo/StateEdit.java",
                "status": "modified",
                "changes": 14,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/undo/StateEdit.java?ref=dc590d06fd99cba6cddbf3474f39923d87be07c0",
                "patch": "@@ -41,27 +41,22 @@ public StateEdit(final StateEditable anObject, final String name) {\n         init(anObject, name);\n     }\n \n-\n     public StateEdit(final StateEditable anObject) {\n         this(anObject, null);\n     }\n \n-\n-\n     public void end() {\n         postState = initHashtable(postState);\n         object.storeState(postState);\n         removeRedundantState();\n     }\n \n-\n     public String getPresentationName() {\n         return undoRedoName;\n     }\n \n     private Hashtable<Object, Object>\n                     initHashtable(final Hashtable<Object, Object> ht) {\n-\n         if (ht == null) {\n             return new Hashtable<Object, Object>();\n         }\n@@ -73,19 +68,14 @@ protected void init(final StateEditable anObject, final String name) {\n         object = anObject;\n         undoRedoName = name;\n         preState = initHashtable(preState);\n-        if (object != null) {\n-            object.storeState(preState);\n-        }\n+        object.storeState(preState);\n     }\n \n-\n     public void redo() {\n         super.redo();\n         object.restoreState(postState);\n     }\n \n-\n-\n     protected void removeRedundantState() {\n         if (preState == null || postState == null) {\n             return;\n@@ -105,10 +95,8 @@ protected void removeRedundantState() {\n         }\n     }\n \n-\n     public void undo() {\n         super.undo();\n         object.restoreState(preState);\n     }\n-\n }",
                "deletions": 13
            },
            {
                "sha": "fbb628af4045ee874edaa44e35bd0690fe443ab6",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/dc590d06fd99cba6cddbf3474f39923d87be07c0/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/dc590d06fd99cba6cddbf3474f39923d87be07c0/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "status": "modified",
                "changes": 15,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java?ref=dc590d06fd99cba6cddbf3474f39923d87be07c0",
                "patch": "@@ -217,6 +217,19 @@ public void testInit() {\n         assertNull(se1.postState);\n         assertEquals(getState(newObj), se1.preState);\n         assertEquals(\"name\", se1.undoRedoName);\n+\n+        try { // Regression test for HARMONY-2536\n+            new StateEdit(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try { // Regression test for HARMONY-2536\n+            new StateEdit(null, \"str\");\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     public void testConstants() {\n@@ -225,4 +238,4 @@ public void testConstants() {\n         assertEquals(\"$Id: StateEditable.java,v 1.2 1997/09\" + \"/08 19:39:08 marklin Exp $\",\n                 StateEditable.RCSID);\n     }\n-}\n\\ No newline at end of file\n+}",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2523] [classlib][swing]\nj.s.text.JFormattedTextField(Object) throws NPE when\nObject.toString() == null\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495897 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8f7f586d5ce5679bc52446135cb753a09b7eff93",
        "parent": "https://github.com/apache/harmony-classlib/commit/588b13704a26614c5601d56d547861e2433b37dd",
        "bug_id": "harmony-classlib_139",
        "file": [
            {
                "sha": "903685f638af84c6bf1e6f630c0e6ebe6cffcf75",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/DefaultFormatter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8f7f586d5ce5679bc52446135cb753a09b7eff93/modules/swing/src/main/java/common/javax/swing/text/DefaultFormatter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8f7f586d5ce5679bc52446135cb753a09b7eff93/modules/swing/src/main/java/common/javax/swing/text/DefaultFormatter.java",
                "status": "modified",
                "changes": 28,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/DefaultFormatter.java?ref=8f7f586d5ce5679bc52446135cb753a09b7eff93",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Evgeniya G. Maenkova\n- * @version $Revision$\n- */\n package javax.swing.text;\n \n import java.io.Serializable;\n@@ -30,9 +26,21 @@\n import javax.swing.SwingUtilities;\n import javax.swing.text.DocumentFilter.FilterBypass;\n \n+/**\n+ * <p>\n+ * <i>DefaultFormatter</i>\n+ * </p>\n+ * <h3>Implementation Notes:</h3>\n+ * <ul>\n+ * <li>The <code>serialVersionUID</code> fields are explicitly declared as a performance\n+ * optimization, not as a guarantee of serialization compatibility.</li>\n+ * </ul>\n+ */\n public class DefaultFormatter extends JFormattedTextField.AbstractFormatter\n     implements Cloneable, Serializable {\n \n+    private static final long serialVersionUID = 4759164676455607130L;\n+\n     private boolean commitsOnValidEdit;\n     private boolean allowsInvalid = true;\n     private boolean overwriteMode = true;\n@@ -41,6 +49,7 @@\n \n     private class DocumentFilterImpl extends DocumentFilter {\n \n+        @Override\n         public void insertString(final FilterBypass filterBypass,\n                                  final int offset,\n                                  final String string,\n@@ -55,20 +64,22 @@ public void insertString(final FilterBypass filterBypass,\n             }\n         }\n \n+        @Override\n         public void remove(final FilterBypass filterBypass,\n                            final int offset, final int length)\n                 throws BadLocationException {\n             removeImpl(filterBypass, offset, length);\n         }\n \n+        @Override\n         public void replace(final FilterBypass filterBypass,\n                             final int offset, final int length,\n                             final String text,\n                             final AttributeSet attrs)\n             throws BadLocationException {\n             if (overwriteMode) {\n                 int strLength = getMaxLengthToRemove(filterBypass, offset,\n-                                           Math.max(length, text.length()));\n+                        Math.max(length, text != null ? text.length() : 0));\n                 replaceImpl(filterBypass, offset, strLength, text, attrs);\n             } else {\n                 replaceImpl(filterBypass, offset, length, text, attrs);\n@@ -181,6 +192,7 @@ public DefaultFormatter() {\n \n     }\n \n+    @Override\n     public Object clone() throws CloneNotSupportedException {\n         return super.clone();\n     }\n@@ -193,6 +205,7 @@ public boolean getCommitsOnValidEdit() {\n         return commitsOnValidEdit;\n     }\n \n+    @Override\n     protected DocumentFilter getDocumentFilter() {\n         if (documentFilter == null) {\n             documentFilter = new DocumentFilterImpl();\n@@ -216,6 +229,7 @@ public void setCommitsOnValidEdit(final boolean commitsOnValidEdit) {\n         this.commitsOnValidEdit = commitsOnValidEdit;\n     }\n \n+    @Override\n     protected void setEditValid(final boolean isEditValid) {\n         super.setEditValid(isEditValid);\n         SwingUtilities.invokeLater(new Runnable() {\n@@ -235,7 +249,7 @@ public void setValueClass(final Class<?> valueClass) {\n     }\n \n     private Object stringToValue(final String string, final Class valueClass) {\n-        return AccessController.doPrivileged(new PrivilegedAction() {\n+        return AccessController.doPrivileged(new PrivilegedAction<Object>() {\n             public Object run() {\n                 Constructor constructor = null;\n                 try {\n@@ -257,6 +271,7 @@ public Object run() {\n          });\n     }\n \n+    @Override\n     public Object stringToValue(final String string) throws ParseException {\n         final Class valueClass = (this.valueClass != null) ? this.valueClass\n                 : getTextFieldValueClass();\n@@ -270,6 +285,7 @@ public Object stringToValue(final String string) throws ParseException {\n        return result;\n     }\n \n+    @Override\n     public String valueToString(final Object value) throws ParseException {\n         return value != null ? value.toString() : \"\";\n     }",
                "deletions": 6
            },
            {
                "sha": "6ce32db3e188eb66634738e81c278990e471513c",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JFormattedTextFieldTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8f7f586d5ce5679bc52446135cb753a09b7eff93/modules/swing/src/test/api/java/common/javax/swing/JFormattedTextFieldTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8f7f586d5ce5679bc52446135cb753a09b7eff93/modules/swing/src/test/api/java/common/javax/swing/JFormattedTextFieldTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JFormattedTextFieldTest.java?ref=8f7f586d5ce5679bc52446135cb753a09b7eff93",
                "patch": "@@ -192,6 +192,17 @@ public void testJFormattedTextFieldObject() {\n         assertNull(factory.getNullFormatter());\n     }\n \n+    public void testJFormattedTextFieldObject_NullToString() {\n+        final Object value = new Object() {\n+            @Override\n+            public String toString() {\n+                return null;\n+            }\n+        };\n+        final JFormattedTextField ftf = new JFormattedTextField(value);\n+        assertEquals(\"\", ftf.getText());\n+    }\n+\n     public void testJFormattedTextFieldAbstractFormatter() {\n         InternationalFormatter formatter = new InternationalFormatter();\n         JFormattedTextField tf1 = new JFormattedTextField(formatter);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2514] [classlib][swing]\njavax.swing.text.Segment.toString() throws unspecified NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495875 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/582e0389e8b6796a20c556f481205c1005149d1f",
        "parent": "https://github.com/apache/harmony-classlib/commit/b07f34cd42cfe249774b479fff60505029686fc2",
        "bug_id": "harmony-classlib_140",
        "file": [
            {
                "sha": "b57281ca5fa937eabbc2cc7e286c93d967d5e4c8",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/Segment.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/582e0389e8b6796a20c556f481205c1005149d1f/modules/swing/src/main/java/common/javax/swing/text/Segment.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/582e0389e8b6796a20c556f481205c1005149d1f/modules/swing/src/main/java/common/javax/swing/text/Segment.java",
                "status": "modified",
                "changes": 8,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/Segment.java?ref=582e0389e8b6796a20c556f481205c1005149d1f",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexey A. Ivanov\n- * @version $Revision$\n- */\n package javax.swing.text;\n \n import java.text.CharacterIterator;\n@@ -47,6 +43,7 @@ public Segment(final char[] array, final int offset, final int count) {\n         this.isPartial = false;\n     }\n \n+    @Override\n     public Object clone() {\n         Object clone;\n \n@@ -141,8 +138,9 @@ public void setPartialReturn(final boolean p) {\n         return;\n     }\n \n+    @Override\n     public String toString() {\n-        return new String(array, offset, count);\n+        return array != null ? new String(array, offset, count) : \"\";\n     }\n \n     private boolean isEmpty() {",
                "deletions": 5
            },
            {
                "sha": "b9bc1d1b8ab2ba4a93154b05b7e92e75dff73107",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/SegmentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/582e0389e8b6796a20c556f481205c1005149d1f/modules/swing/src/test/api/java/common/javax/swing/text/SegmentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/582e0389e8b6796a20c556f481205c1005149d1f/modules/swing/src/test/api/java/common/javax/swing/text/SegmentTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/SegmentTest.java?ref=582e0389e8b6796a20c556f481205c1005149d1f",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Alexey A. Ivanov\n- * @version $Revision$\n- */\n package javax.swing.text;\n \n import java.text.CharacterIterator;\n@@ -48,6 +44,12 @@ public void testToString() {\n         assertEquals(\"cdefgh\", s.toString());\n     }\n \n+    public void testToStringEmpty() {\n+        s = new Segment();\n+        assertNull(s.array);\n+        assertEquals(\"\", s.toString());\n+    }\n+\n     public void testCurrent() {\n         assertEquals(arr[0], s.current());\n         assertEquals(s.array[s.getIndex()], s.current());",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2576] [classlib][swing]\njavax.swing.JComponent.paintImmediately(null) does not throw unspecified\nNPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495920 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/bfa217cd43e300f5c190f8d8f34ff24921eab6c4",
        "parent": "https://github.com/apache/harmony-classlib/commit/7cd702d914fce73a29fbdc6118d576a92d4b0b8e",
        "bug_id": "harmony-classlib_141",
        "file": [
            {
                "sha": "53835b8ae22881d72e70e0e5485287ecd52fd914",
                "filename": "modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bfa217cd43e300f5c190f8d8f34ff24921eab6c4/modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bfa217cd43e300f5c190f8d8f34ff24921eab6c4/modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JComponent.java?ref=bfa217cd43e300f5c190f8d8f34ff24921eab6c4",
                "patch": "@@ -1008,6 +1008,10 @@ public void repaint(long tm, int x, int y, int width, int height) {\n     }\n \n     public void paintImmediately(Rectangle rect) {\n+        if (rect == null) {\n+            throw new NullPointerException();\n+        }\n+ \n         if (!isShowing()) {\n             return;\n         }",
                "deletions": 0
            },
            {
                "sha": "e5687eb372817e97b0a467b33cf832e3863bded9",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bfa217cd43e300f5c190f8d8f34ff24921eab6c4/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bfa217cd43e300f5c190f8d8f34ff24921eab6c4/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java?ref=bfa217cd43e300f5c190f8d8f34ff24921eab6c4",
                "patch": "@@ -2352,7 +2352,12 @@ public void testRepaintRectangle() {\n      * Class under test for void paintImmediately(Rectangle)\n      */\n     public void testPaintImmediatelyRectangle() {\n-        // TODO\n+        try {    \n+            new JComponent(){}.paintImmediately(null);    \n+            fail(\"NPE should be thrown\"); \n+        } catch (NullPointerException npe) {      \n+            // PASSED            \n+        }\n     }\n \n     /*",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2566] [classlib][swing]\nj.s.text.GapContent.getChars throws NPE rather than BadLocationException\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495916 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8",
        "parent": "https://github.com/apache/harmony-classlib/commit/de2e1ba5776f61baef0d3a83583c545702ced30e",
        "bug_id": "harmony-classlib_142",
        "file": [
            {
                "sha": "b86ffa33366870f1efaa3aee4c62fdf452b266c3",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/GapContent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8/modules/swing/src/main/java/common/javax/swing/text/GapContent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8/modules/swing/src/main/java/common/javax/swing/text/GapContent.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/GapContent.java?ref=64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8",
                "patch": "@@ -143,7 +143,7 @@ public void getChars(final int offset,\n             throw new BadLocationException(\"Length must be non-negative\",\n                                            length);\n         }\n-        if (offset < 0 || offset + length > length()) {\n+        if (offset < 0 || length > length() - offset) {\n             throw new BadLocationException(\"Invalid start position\", offset);\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "a4cb082085ce8bd4383333d422e400ad813967dc",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/GapContentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8/modules/swing/src/test/api/java/common/javax/swing/text/GapContentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8/modules/swing/src/test/api/java/common/javax/swing/text/GapContentTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/GapContentTest.java?ref=64b4b404e4d0d90f1b77f0ff3ea903da64f94bd8",
                "patch": "@@ -221,6 +221,23 @@ public void testGetCharsWithGap() throws BadLocationException {\n         isContentArraySame(false);\n     }\n \n+    // Regression for HARMONY-2566\n+    public void testGetCharsMaxInterger() {\n+        try {\n+            content.getChars(1, Integer.MAX_VALUE, null);\n+            fail(\"BadLocationException is expected\");\n+        } catch (BadLocationException e) {\n+        }\n+    }\n+\n+    public void testGetCharsNullSegment() throws BadLocationException {\n+        try {\n+            content.getChars(1, 1, null);\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n     public void testCreatePositionBeforeUndo() throws BadLocationException {\n         UndoableEdit ue = content.remove(3, 8);\n         Position pos = content.createPosition(3);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2548] [classlib][swing] javax.swing.JComponent.putClientProperty(null, Object) does not throw unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495908 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2f0d7e5929656615ae00a67fddfef0c76ebeda47",
        "parent": "https://github.com/apache/harmony-classlib/commit/dc590d06fd99cba6cddbf3474f39923d87be07c0",
        "bug_id": "harmony-classlib_143",
        "file": [
            {
                "sha": "c2d1a59fe99df4af3b8fb5e12a03f6b1302cbad0",
                "filename": "modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2f0d7e5929656615ae00a67fddfef0c76ebeda47/modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2f0d7e5929656615ae00a67fddfef0c76ebeda47/modules/swing/src/main/java/common/javax/swing/JComponent.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JComponent.java?ref=2f0d7e5929656615ae00a67fddfef0c76ebeda47",
                "patch": "@@ -481,6 +481,10 @@ public boolean contains(int x, int y) {\n     }\n \n     public final void putClientProperty(Object key, Object value) {\n+        if (key == null) {\n+            throw new NullPointerException();\n+        }\n+\n         Object oldValue = (value != null) ? clientProperties.put(key, value) : clientProperties\n                 .remove(key);\n         if (oldValue != value) {",
                "deletions": 0
            },
            {
                "sha": "a6fd8954da959e4f7481cae761c0b5b0877ffe78",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2f0d7e5929656615ae00a67fddfef0c76ebeda47/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2f0d7e5929656615ae00a67fddfef0c76ebeda47/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JComponentTest.java?ref=2f0d7e5929656615ae00a67fddfef0c76ebeda47",
                "patch": "@@ -1071,6 +1071,14 @@ public void testPutClientProperty() {\n         changeListener.checkLastPropertyFired(panel, key1, value2, null);\n         assertNull(panel.getClientProperty(key1));\n         changeListener.reset();\n+\n+        try {         \n+            JComponent jc = new JComponent() {}; \n+            jc.putClientProperty(null, new Object());\n+            fail(\"NPE should be thrown\");               \n+        } catch (NullPointerException npe) {               \n+            // PASSED            \n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2460] [classlib][awt]\nMenuItem.dispatchEvent(AWTEvent) throws unspecified NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495864 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b30474558ab424f0cb9225b5abddca99073ba812",
        "parent": "https://github.com/apache/harmony-classlib/commit/5d3d20d177ea7b729ec7289bb54fb34262662c72",
        "bug_id": "harmony-classlib_144",
        "file": [
            {
                "sha": "37130ec24c0661b7cd12a6c70c1fd42bad3522ed",
                "filename": "modules/awt/src/main/java/common/java/awt/AWTEvent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b30474558ab424f0cb9225b5abddca99073ba812/modules/awt/src/main/java/common/java/awt/AWTEvent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b30474558ab424f0cb9225b5abddca99073ba812/modules/awt/src/main/java/common/java/awt/AWTEvent.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/AWTEvent.java?ref=b30474558ab424f0cb9225b5abddca99073ba812",
                "patch": "@@ -292,7 +292,8 @@ EventDescriptor getEventDescriptor(AWTEvent event) {\n         }\n \n         long getEventMask(AWTEvent event) {\n-            return getEventDescriptor(event).eventMask;\n+            final EventDescriptor ed = getEventDescriptor(event);\n+            return ed == null ? -1 : ed.eventMask;\n         }\n     }\n ",
                "deletions": 1
            },
            {
                "sha": "651117817d27b688a06e554e217f740c09a01592",
                "filename": "modules/awt/src/test/api/java/common/java/awt/EventTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b30474558ab424f0cb9225b5abddca99073ba812/modules/awt/src/test/api/java/common/java/awt/EventTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b30474558ab424f0cb9225b5abddca99073ba812/modules/awt/src/test/api/java/common/java/awt/EventTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/EventTest.java?ref=b30474558ab424f0cb9225b5abddca99073ba812",
                "patch": "@@ -173,4 +173,18 @@ public final void testShiftDown() {\n         assertTrue(evt.shiftDown());\n     }\n \n+    public void testDispatchEvent() {\n+        // Regression test for HARMONY-2460\n+        new MenuItem().dispatchEvent(new AWTEventImpl(new Button(), 1));\n+    }\n+\n+    class AWTEventImpl extends AWTEvent {\n+        public AWTEventImpl(Object source, int id) {\n+            super(source, id);\n+        }\n+    }\n+    \n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(EventTest.class);\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2456] [classlib][awt]\njava.awt.DefaultFocusManager.upFocusCycle(Component aComponent)\nthrows unexpected NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495860 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5d3d20d177ea7b729ec7289bb54fb34262662c72",
        "parent": "https://github.com/apache/harmony-classlib/commit/1f055729629c759c392226f1048cedfe5478861b",
        "bug_id": "harmony-classlib_145",
        "file": [
            {
                "sha": "d515708f29e5ed4e00418875925fdcb54d708d53",
                "filename": "modules/awt/src/main/java/common/java/awt/Component.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d3d20d177ea7b729ec7289bb54fb34262662c72/modules/awt/src/main/java/common/java/awt/Component.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d3d20d177ea7b729ec7289bb54fb34262662c72/modules/awt/src/main/java/common/java/awt/Component.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Component.java?ref=5d3d20d177ea7b729ec7289bb54fb34262662c72",
                "patch": "@@ -3170,10 +3170,15 @@ public void transferFocusUpCycle() {\n         toolkit.lockAWT();\n         try {\n             KeyboardFocusManager kfm = KeyboardFocusManager.getCurrentKeyboardFocusManager();\n-            Container root = kfm.getCurrentFocusCycleRoot(), newRoot = null;\n+            Container root = kfm.getCurrentFocusCycleRoot();\n+            \n+            if(root == null) {\n+                return;\n+            }\n+            \n             boolean success = false;\n             Component nextComp = null;\n-            newRoot = root;\n+            Container newRoot = root;\n             do {\n                 nextComp = newRoot instanceof Window ? newRoot.getFocusTraversalPolicy()\n                         .getDefaultComponent(newRoot) : newRoot;",
                "deletions": 2
            },
            {
                "sha": "8576ee78b54b08d2b3f8ffc80cd1c39b14ce3027",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ComponentRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5d3d20d177ea7b729ec7289bb54fb34262662c72/modules/awt/src/test/api/java/common/java/awt/ComponentRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5d3d20d177ea7b729ec7289bb54fb34262662c72/modules/awt/src/test/api/java/common/java/awt/ComponentRTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ComponentRTest.java?ref=5d3d20d177ea7b729ec7289bb54fb34262662c72",
                "patch": "@@ -73,6 +73,11 @@ public final void testGetMinimumSize() {\n         comp.removeNotify();\n         assertEquals(size, comp.getMinimumSize());\n     }\n+    \n+    public void testTransferFocusUpCycle() {\n+        // Regression test for HARMONY-2456\n+        new Button().transferFocusUpCycle();\n+    }\n \n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(ComponentRTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2497] [classlib][awt]\nGridBagConstraints(,,,,,,,,null,,) throws unspecified NPE while RI does not\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495865 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f",
        "parent": "https://github.com/apache/harmony-classlib/commit/b30474558ab424f0cb9225b5abddca99073ba812",
        "bug_id": "harmony-classlib_146",
        "file": [
            {
                "sha": "b29e047256c61edbbab928939cbe84fadc837c4a",
                "filename": "modules/awt/src/main/java/common/java/awt/GridBagConstraints.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f/modules/awt/src/main/java/common/java/awt/GridBagConstraints.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f/modules/awt/src/main/java/common/java/awt/GridBagConstraints.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/GridBagConstraints.java?ref=32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f",
                "patch": "@@ -81,7 +81,7 @@ public GridBagConstraints(int gridx, int gridy, int gridwidth,\n         this.weighty = weighty;\n         this.anchor = anchor;\n         this.fill = fill;\n-        this.insets = (Insets) insets.clone();\n+        this.insets = (insets == null) ? null:(Insets) insets.clone();\n         this.ipadx = ipadx;\n         this.ipady = ipady;\n     }",
                "deletions": 1
            },
            {
                "sha": "1db683a578c8d6b554c0f0e247318d8b59391b29",
                "filename": "modules/awt/src/test/api/java/common/java/awt/GridBagConstraintsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f/modules/awt/src/test/api/java/common/java/awt/GridBagConstraintsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f/modules/awt/src/test/api/java/common/java/awt/GridBagConstraintsTest.java",
                "status": "added",
                "changes": 27,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/GridBagConstraintsTest.java?ref=32e14b9b7e76b7a7ad9f4e981bdb9346fb27705f",
                "patch": "@@ -0,0 +1,27 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package java.awt;\n+\n+import junit.framework.TestCase;\n+\n+public class GridBagConstraintsTest extends TestCase {\n+    \n+    // Regression test for JIRA HARMONY-2497\n+    public void testNullInsets () { \n+        new GridBagConstraints(1,1,1,1,7.9,7.9,1,1,null,1,1); \n+     } \n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2442] [classlib][awt] java.awt.Robot(null)\nthrows NPE instead of IllegalArgumentException\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495848 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1f055729629c759c392226f1048cedfe5478861b",
        "parent": "https://github.com/apache/harmony-classlib/commit/5351d16a487afd3bfe059729b8d78e47dbd054a0",
        "bug_id": "harmony-classlib_147",
        "file": [
            {
                "sha": "55b7adb726419b6fa618820b5db25a87f74e8a35",
                "filename": "modules/awt/src/main/java/common/java/awt/Robot.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f055729629c759c392226f1048cedfe5478861b/modules/awt/src/main/java/common/java/awt/Robot.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f055729629c759c392226f1048cedfe5478861b/modules/awt/src/main/java/common/java/awt/Robot.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Robot.java?ref=1f055729629c759c392226f1048cedfe5478861b",
                "patch": "@@ -41,7 +41,8 @@ public Robot() throws AWTException {\n \n     public Robot(GraphicsDevice screen) throws AWTException {\n         Toolkit.checkHeadless();\n-        if (screen.getType() != GraphicsDevice.TYPE_RASTER_SCREEN) {\n+        if ((screen == null)\n+                || (screen.getType() != GraphicsDevice.TYPE_RASTER_SCREEN)) {\n             // awt.129=Not a screen device\n             throw new IllegalArgumentException(Messages.getString(\"awt.129\")); //$NON-NLS-1$\n         }",
                "deletions": 1
            },
            {
                "sha": "bbfce32d44972e94982948629c6de5847ec4873e",
                "filename": "modules/awt/src/test/api/java/common/java/awt/RobotTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f055729629c759c392226f1048cedfe5478861b/modules/awt/src/test/api/java/common/java/awt/RobotTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f055729629c759c392226f1048cedfe5478861b/modules/awt/src/test/api/java/common/java/awt/RobotTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/RobotTest.java?ref=1f055729629c759c392226f1048cedfe5478861b",
                "patch": "@@ -159,7 +159,7 @@ private boolean isDenied(SecurityManager sm, Runnable code) {\n     /*\n      * Class under test for void Robot(java.awt.GraphicsDevice)\n      */\n-    public final void testRobotGraphicsDevice() {\n+    public final void testRobotGraphicsDevice() throws AWTException {\n         try {\n             robot = new Robot(new PrintDevice());\n         } catch (IllegalArgumentException iae) {\n@@ -178,6 +178,14 @@ public final void testRobotGraphicsDevice() {\n             exceptionCaught = true;\n         }\n         assertFalse(exceptionCaught);\n+        \n+        // Regression test for HARMONY-2442\n+        try {\n+            new Robot(null);\n+            fail(\"IllegalArgumentException was not thrown\"); //$NON-NLS-1$\n+        } catch (IllegalArgumentException ex) {\n+            // expected\n+        }\n     }\n \n     public final void testCreateScreenCapture() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-2430] [classlib][awt] DropTargetEvent(null)\nthrows IAE while RI throws NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495758 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ff6a2eb682c740011212d7c105a15f31a9a57c28",
        "parent": "https://github.com/apache/harmony-classlib/commit/db134e243dba7dc0bd4a9b4be445dd3664e21820",
        "bug_id": "harmony-classlib_148",
        "file": [
            {
                "sha": "fda91632f450dcf182aa8d3562b80dbf5a1e6bf5",
                "filename": "modules/awt/src/main/java/common/java/awt/dnd/DropTargetEvent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ff6a2eb682c740011212d7c105a15f31a9a57c28/modules/awt/src/main/java/common/java/awt/dnd/DropTargetEvent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ff6a2eb682c740011212d7c105a15f31a9a57c28/modules/awt/src/main/java/common/java/awt/dnd/DropTargetEvent.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/dnd/DropTargetEvent.java?ref=ff6a2eb682c740011212d7c105a15f31a9a57c28",
                "patch": "@@ -36,7 +36,7 @@\n     private Point location;\n \n     public DropTargetEvent(DropTargetContext dtc) {\n-        super(dtc);\n+        super(dtc.getDropTarget());\n \n         context = dtc;\n     }",
                "deletions": 1
            },
            {
                "sha": "9f66460e268307efbf3b48c0523942489f09fa17",
                "filename": "modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetEventTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ff6a2eb682c740011212d7c105a15f31a9a57c28/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetEventTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ff6a2eb682c740011212d7c105a15f31a9a57c28/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetEventTest.java",
                "status": "added",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetEventTest.java?ref=ff6a2eb682c740011212d7c105a15f31a9a57c28",
                "patch": "@@ -0,0 +1,29 @@\n+package java.awt.dnd;\n+\n+import junit.framework.TestCase;\n+\n+public class DropTargetEventTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(DropTargetEventTest.class);\n+    }\n+\n+    /**\n+     * Test method for\n+     * {@link java.awt.dnd.DropTargetEvent#DropTargetEvent(java.awt.dnd.DropTargetContext)}.\n+     */\n+    public void testDropTargetEventDropTargetContext() {\n+        // Regression test for HARMONY-2430\n+        try {\n+            new DropTargetEvent(null);\n+            fail(\"NPE was not thrown\");\n+        } catch (NullPointerException ex) {\n+            // passed\n+        }\n+\n+        final DropTarget dt = new DropTarget();\n+        final DropTargetEvent e = new DropTargetEvent(dt.getDropTargetContext());\n+\n+        assertSame(dt, e.getSource());\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-2067] [classlib][awt]\nClipboard.setContents(null, null) throws unexpected NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495701 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/36650aee46cd71740f76755b9a2fc7e9a9393fe5",
        "parent": "https://github.com/apache/harmony-classlib/commit/8475a61ca4726318d04ea4bae5023b4402b9645c",
        "bug_id": "harmony-classlib_149",
        "file": [
            {
                "sha": "b1c93e01736079737c01129d59c4382517768e58",
                "filename": "modules/awt/src/main/java/common/java/awt/datatransfer/Clipboard.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/36650aee46cd71740f76755b9a2fc7e9a9393fe5/modules/awt/src/main/java/common/java/awt/datatransfer/Clipboard.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/36650aee46cd71740f76755b9a2fc7e9a9393fe5/modules/awt/src/main/java/common/java/awt/datatransfer/Clipboard.java",
                "status": "modified",
                "changes": 15,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/datatransfer/Clipboard.java?ref=36650aee46cd71740f76755b9a2fc7e9a9393fe5",
                "patch": "@@ -66,12 +66,17 @@ public void setContents(Transferable contents, ClipboardOwner owner) {\n             boolean ownershipLost = (this.owner != owner);\n             boolean flavorsChanged;\n             HashSet<DataFlavor> newFlavorsSet = new HashSet<DataFlavor>();\n-            DataFlavor[] newFlavorsArray = contents.getTransferDataFlavors();\n-\n-            for (DataFlavor element : newFlavorsArray) {\n-                newFlavorsSet.add(element);\n+            \n+            if (contents != null) {\n+                DataFlavor[] newFlavorsArray = contents.getTransferDataFlavors();\n+\n+                for (DataFlavor element : newFlavorsArray) {\n+                    newFlavorsSet.add(element);\n+                }\n+                flavorsChanged = !flavors.equals(newFlavorsSet);\n+            } else {\n+                flavorsChanged = (flavors == null) ? false : true;\n             }\n-            flavorsChanged = !flavors.equals(newFlavorsSet);\n \n             if (flavorsChanged || ownershipLost) {\n                 processor.setProcessingParams(ownershipLost ? this.owner : null,",
                "deletions": 5
            },
            {
                "sha": "6f7f0fb8eee280fde12c6096a2cc3fd8d2f0406a",
                "filename": "modules/awt/src/test/api/java/common/java/awt/datatransfer/ClipboardTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/36650aee46cd71740f76755b9a2fc7e9a9393fe5/modules/awt/src/test/api/java/common/java/awt/datatransfer/ClipboardTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/36650aee46cd71740f76755b9a2fc7e9a9393fe5/modules/awt/src/test/api/java/common/java/awt/datatransfer/ClipboardTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/datatransfer/ClipboardTest.java?ref=36650aee46cd71740f76755b9a2fc7e9a9393fe5",
                "patch": "@@ -174,5 +174,11 @@ public final void testGetData() {\n         assertTrue(string);\n         assertTrue(unsupported);\n     }\n+    \n+    public final void testNullContent() throws NullPointerException {\n+        // Regression for HARMONY-2067\n+        Clipboard c = new Clipboard(\"\"); \n+        c.setContents(null, null); \n+    }\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2767 ([classlib][swing] javax.swing.plaf.basic.BasicSplitPaneUI.getMaximumSize(JScrollBar sb) throws NPE while RI does not)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495672 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8d4e8c9c1431c203a64dda02af262d045c36059c",
        "parent": "https://github.com/apache/harmony-classlib/commit/7aadf763c350381a58ee7293368d3e41ea01502e",
        "bug_id": "harmony-classlib_150",
        "file": [
            {
                "sha": "dc82dd454922efe80aa31eca951138a787ad50d1",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8d4e8c9c1431c203a64dda02af262d045c36059c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8d4e8c9c1431c203a64dda02af262d045c36059c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java?ref=8d4e8c9c1431c203a64dda02af262d045c36059c",
                "patch": "@@ -750,15 +750,21 @@ public void paint(final Graphics g, final JComponent jc) {\n     }\n \n     public Dimension getPreferredSize(final JComponent jc) {\n-        return layoutManager.preferredLayoutSize(jc);\n+        return ((layoutManager != null)\n+                ? layoutManager.preferredLayoutSize(jc)\n+                : new Dimension(0, 0));\n     }\n \n     public Dimension getMinimumSize(final JComponent jc) {\n-        return layoutManager.minimumLayoutSize(jc);\n+        return ((layoutManager != null)\n+                ? layoutManager.minimumLayoutSize(jc)\n+                : new Dimension(0, 0));\n     }\n \n     public Dimension getMaximumSize(final JComponent jc) {\n-        return layoutManager.maximumLayoutSize(jc);\n+        return ((layoutManager != null)\n+                ? layoutManager.maximumLayoutSize(jc)\n+                : new Dimension(0, 0));\n     }\n \n     public Insets getInsets(final JComponent jc) {",
                "deletions": 3
            },
            {
                "sha": "87eb7167d2dc326bb0fc09aa8094537a309af501",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8d4e8c9c1431c203a64dda02af262d045c36059c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8d4e8c9c1431c203a64dda02af262d045c36059c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java?ref=8d4e8c9c1431c203a64dda02af262d045c36059c",
                "patch": "@@ -27,6 +27,7 @@\n import java.awt.Rectangle;\n import javax.swing.BorderFactory;\n import javax.swing.JButton;\n+import javax.swing.JComponent;\n import javax.swing.JSplitPane;\n import javax.swing.JViewport;\n import javax.swing.SwingTestCase;\n@@ -327,4 +328,15 @@ public void testSetComponentToSize() throws Exception {\n                 new Rectangle(insets.left, location, cW - insets.left - insets.right, size), b\n                         .getBounds());\n     }\n+\n+    public void testGetSizes() { // Regression test for HARMONY-2767\n+        ui = new BasicSplitPaneUI();\n+        JComponent component = new JComponent() {};\n+        assertEquals(new Dimension(0, 0), ui.getPreferredSize(component));\n+        assertEquals(new Dimension(0, 0), ui.getPreferredSize(null));\n+        assertEquals(new Dimension(0, 0), ui.getMinimumSize(component));\n+        assertEquals(new Dimension(0, 0), ui.getMinimumSize(null));\n+        assertEquals(new Dimension(0, 0), ui.getMaximumSize(component));\n+        assertEquals(new Dimension(0, 0), ui.getMaximumSize(null));\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2444] [classlib][awt]\njava.awt.DisplayMode.equals(null) throws NPE instead of returning false\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495671 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7aadf763c350381a58ee7293368d3e41ea01502e",
        "parent": "https://github.com/apache/harmony-classlib/commit/af9e4365c335b9384f411eb7a38f7550042004cd",
        "bug_id": "harmony-classlib_151",
        "file": [
            {
                "sha": "1b881f305878c8ab590e43f44b6fe78c99a0e4a0",
                "filename": "modules/awt/src/main/java/common/java/awt/DisplayMode.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7aadf763c350381a58ee7293368d3e41ea01502e/modules/awt/src/main/java/common/java/awt/DisplayMode.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7aadf763c350381a58ee7293368d3e41ea01502e/modules/awt/src/main/java/common/java/awt/DisplayMode.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/DisplayMode.java?ref=7aadf763c350381a58ee7293368d3e41ea01502e",
                "patch": "@@ -68,6 +68,9 @@ public boolean equals(Object dm) {\n     }\n \n     public boolean equals(DisplayMode dm) {\n+        if (dm == null) {\n+            return false;\n+        }\n         if (dm.bitDepth != bitDepth) {\n             return false;\n         }",
                "deletions": 0
            },
            {
                "sha": "f8f5732f7f607db4f0f39c549f0a1413f87cf843",
                "filename": "modules/awt/src/test/api/java/common/java/awt/DisplayModeTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7aadf763c350381a58ee7293368d3e41ea01502e/modules/awt/src/test/api/java/common/java/awt/DisplayModeTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7aadf763c350381a58ee7293368d3e41ea01502e/modules/awt/src/test/api/java/common/java/awt/DisplayModeTest.java",
                "status": "added",
                "changes": 26,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/DisplayModeTest.java?ref=7aadf763c350381a58ee7293368d3e41ea01502e",
                "patch": "@@ -0,0 +1,26 @@\n+package java.awt;\n+\n+import junit.framework.TestCase;\n+\n+public class DisplayModeTest extends TestCase {\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(DisplayModeTest.class);\n+    }\n+\n+    /**\n+     * Test method for {@link java.awt.DisplayMode#equals(java.lang.Object)}.\n+     */\n+    public void testEqualsObject() {\n+        assertFalse(new DisplayMode(1, 2, 3, 10).equals((Object) null));\n+        assertFalse(new DisplayMode(1, 2, 3, 10).equals(new Object()));\n+    }\n+\n+    /**\n+     * Test method for {@link java.awt.DisplayMode#equals(java.awt.DisplayMode)}.\n+     */\n+    public void testEqualsDisplayMode() {\n+        // Regression test for HARMONY-2444\n+        assertFalse(new DisplayMode(1, 2, 3, 10).equals((DisplayMode) null));\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2214] [classlib][swing] CellRendererPane\nmethod paintComponent illegally throw NPE for null parameters\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495662 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/af9e4365c335b9384f411eb7a38f7550042004cd",
        "parent": "https://github.com/apache/harmony-classlib/commit/b538cb7a3c20c43d02b8d352946a6efff2df1e80",
        "bug_id": "harmony-classlib_152",
        "file": [
            {
                "sha": "d4a8f18fb52cd045bc49da02e5530f169f5474a4",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -44,7 +44,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "d4a8f18fb52cd045bc49da02e5530f169f5474a4",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -44,7 +44,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "68cbca51d705c44206b5a9e6c01eaabef39f8940",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -47,7 +47,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java\n@@ -135,4 +134,4 @@ javax/swing/plaf/basic/BasicColorChooserUITest.java\n javax/swing/text/View_VisualPositionTest.java\n javax/swing/text/View_VisualPosition_PartTest.java\n javax/swing/text/CompositeView_VisualPositionTest.java\n-javax/swing/InputMapTest.java\n\\ No newline at end of file\n+javax/swing/InputMapTest.java",
                "deletions": 2
            },
            {
                "sha": "d4a8f18fb52cd045bc49da02e5530f169f5474a4",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -44,7 +44,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "dc362b4e6e0896bb229d6ed5c8f8e64363ea2a49",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -48,7 +48,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "04f6c7934d545e653a63f2367f9b4ff55359b475",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -55,7 +55,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "d4a8f18fb52cd045bc49da02e5530f169f5474a4",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -44,7 +44,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "d4a8f18fb52cd045bc49da02e5530f169f5474a4",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -44,7 +44,6 @@ javax/swing/plaf/metal/MetalComboBoxUITest.java\n javax/swing/text/GlyphView_AttributesTest.java\n org/apache/harmony/x/swing/plaf/resources/basic/BasicResourceBundleTest.java\n javax/swing/BoxLayoutTest.java\n-javax/swing/CellRendererPaneTest.java\n javax/swing/DefaultDesktopManagerTest.java\n javax/swing/ImageIcon_MultithreadedTest.java\n javax/swing/JComponent_AddRemoveNotifyTest.java",
                "deletions": 1
            },
            {
                "sha": "1856ab4e55b3d094ef1d1bd02f7f28bb11897bc2",
                "filename": "modules/swing/src/main/java/common/javax/swing/CellRendererPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/src/main/java/common/javax/swing/CellRendererPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/src/main/java/common/javax/swing/CellRendererPane.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/CellRendererPane.java?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -79,6 +79,7 @@ public void paintComponent(Graphics g, Component c, Container p, Rectangle r) {\n \n     public void paintComponent(Graphics g, Component c, Container p, int x, int y, int w,\n             int h, boolean shouldValidate) {\n+        if(g == null || c == null) return;\n         add(c);\n         c.setBounds(x, y, w, h);\n         if (shouldValidate) {",
                "deletions": 0
            },
            {
                "sha": "eabc6facbedd149bc7fd1d40206f5746742d8d17",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/CellRendererPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/src/test/api/java/common/javax/swing/CellRendererPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/af9e4365c335b9384f411eb7a38f7550042004cd/modules/swing/src/test/api/java/common/javax/swing/CellRendererPaneTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/CellRendererPaneTest.java?ref=af9e4365c335b9384f411eb7a38f7550042004cd",
                "patch": "@@ -148,4 +148,14 @@ public void paint(final Graphics g) {\n         pane.paintComponent(g, component, new JPanel(), 20, 30, 40, 50, true);\n         assertTrue(validationMarker.isOccurred());\n     }\n+\n+    public void testPaintComponent1() {\n+        CellRendererPane c = new CellRendererPane();\n+        try {\n+            c.paintComponent(null, null, null, 0, 0, 0, 0, false);\n+            assertTrue(true);\n+        } catch (NullPointerException e) {\n+            fail(e + \" - was thrown\");\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2418] [classlib][regex]\njava.util.regex.Matcher.usePattern(Pattern) throws NPE instead of\nspecified IllegalArgumentException\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495712 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/615e837476f8ce159d77700f4a4814000b83bd79",
        "parent": "https://github.com/apache/harmony-classlib/commit/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3",
        "bug_id": "harmony-classlib_153",
        "file": [
            {
                "sha": "3cf19db720a8181b49531ee8b25ac9c0d3d095dc",
                "filename": "modules/regex/src/main/java/java/util/regex/Matcher.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/main/java/java/util/regex/Matcher.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/main/java/java/util/regex/Matcher.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/regex/src/main/java/java/util/regex/Matcher.java?ref=615e837476f8ce159d77700f4a4814000b83bd79",
                "patch": "@@ -508,6 +508,9 @@ public boolean hitEnd() {\n      * @com.intel.drl.spec_ref\n      */\n     public Matcher usePattern(Pattern pat) {\n+    \tif (pat == null) {\n+    \t\tthrow new IllegalArgumentException(Messages.getString(\"regex.1B\"));\n+    \t}\n         int startIndex = matchResult.getPreviousMatchEnd();\n         int mode = matchResult.mode();\n         this.pat = pat;",
                "deletions": 0
            },
            {
                "sha": "0cccc9329d64f57b227226e44c1a413db9e4946b",
                "filename": "modules/regex/src/main/java/org/apache/harmony/regex/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/main/java/org/apache/harmony/regex/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/main/java/org/apache/harmony/regex/internal/nls/messages.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/regex/src/main/java/org/apache/harmony/regex/internal/nls/messages.properties?ref=615e837476f8ce159d77700f4a4814000b83bd79",
                "patch": "@@ -41,3 +41,4 @@ regex.17=Incorrect Quantifier Syntax\n regex.18=Invalid {0} escape sequence\n regex.19=Invalid octal escape sequence\n regex.1A=Illegal inline construct\n+regex.1B=Pattern cannot be null",
                "deletions": 0
            },
            {
                "sha": "4c7d29efdcedabe4f770069c7abf7c21bb607567",
                "filename": "modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/Matcher2Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/Matcher2Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/615e837476f8ce159d77700f4a4814000b83bd79/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/Matcher2Test.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/regex/src/test/java/org/apache/harmony/tests/java/util/regex/Matcher2Test.java?ref=615e837476f8ce159d77700f4a4814000b83bd79",
                "patch": "@@ -71,6 +71,14 @@ public void testErrorConditions() throws PatternSyntaxException {\n \t\t\tfail(\"IllegalStateException expected\");\n \t\t} catch (IllegalStateException e) {\n \t\t}\n+\t\t\n+               // regression test for HARMONY-2418\n+\t\ttry {\n+\t\t\tm.usePattern(null);\n+\t\t\tfail(\"IllegalArgumentException expected\");\n+\t\t} catch (IllegalArgumentException e) {\n+                 // PASSED\n+\t\t}\n     }\n \n     public void testErrorConditions2() throws PatternSyntaxException {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2468] [classlib][awt]\njava.awt.Choice.insert(null, 0) does not throw NPE while RI throws it\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495676 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a443f7a6c8be38befde6b15b0058e657c553535e",
        "parent": "https://github.com/apache/harmony-classlib/commit/8d4e8c9c1431c203a64dda02af262d045c36059c",
        "bug_id": "harmony-classlib_154",
        "file": [
            {
                "sha": "8a81399f8831136bba461871d161f28067537215",
                "filename": "modules/awt/src/main/java/common/java/awt/Choice.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a443f7a6c8be38befde6b15b0058e657c553535e/modules/awt/src/main/java/common/java/awt/Choice.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a443f7a6c8be38befde6b15b0058e657c553535e/modules/awt/src/main/java/common/java/awt/Choice.java",
                "status": "modified",
                "changes": 14,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Choice.java?ref=a443f7a6c8be38befde6b15b0058e657c553535e",
                "patch": "@@ -342,12 +342,18 @@ public void removeAll() {\n     }\n \n     public void insert(String item, int index) {\n+        if (index < 0) {\n+            // awt.105=index less than zero\n+            throw new IllegalArgumentException(Messages.getString(\"awt.105\")); //$NON-NLS-1$\n+        }\n+        \n+        if (item == null) {\n+            // awt.105='item' parameter is null\n+            throw new NullPointerException(Messages.getString(\"awt.01\", \"item\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+        \n         toolkit.lockAWT();\n         try {\n-            if (index < 0) {\n-                // awt.105=index less than zero\n-                throw new IllegalArgumentException(Messages.getString(\"awt.105\")); //$NON-NLS-1$\n-            }\n             int idx = Math.min(items.size(), index);\n             if (items.size() == 0) {\n                 selectedIndex = 0;",
                "deletions": 4
            },
            {
                "sha": "6e67aa09326d106846fb5415d85d70b579cc4a99",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ChoiceTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a443f7a6c8be38befde6b15b0058e657c553535e/modules/awt/src/test/api/java/common/java/awt/ChoiceTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a443f7a6c8be38befde6b15b0058e657c553535e/modules/awt/src/test/api/java/common/java/awt/ChoiceTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ChoiceTest.java?ref=a443f7a6c8be38befde6b15b0058e657c553535e",
                "patch": "@@ -213,6 +213,14 @@ public final void testInsert() {\n         choice.insert(item = \"end\", choice.getItemCount() + 100);\n         assertSame(item, choice.getItem(choice.getItemCount() - 1));\n         assertEquals(2, choice.getSelectedIndex());\n+        \n+        // Regression test for HARMONY-2468\n+        try {\n+            new Choice().insert(null, 0);\n+            fail(\"NullPointerException expected\"); //$NON-NLS-1$\n+        } catch (NullPointerException ex) {\n+            // expected\n+        }\n     }\n \n     public final void testGetSelectedObjects() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1725 ([swing] javax.swing.RepaintManager.addInvalidComponent(JComponent jcomp) throws unspecified NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@494125 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9d2e26ee2615e54ee3b1ee7faee32365ffb111fe",
        "parent": "https://github.com/apache/harmony-classlib/commit/791f2bc33329d7f8455585a60b290dfcafb7453a",
        "bug_id": "harmony-classlib_155",
        "file": [
            {
                "sha": "ce7f41ed9a40264d558fe4fa96e6f8da4ad46faf",
                "filename": "modules/swing/src/main/java/common/javax/swing/RepaintManager.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9d2e26ee2615e54ee3b1ee7faee32365ffb111fe/modules/swing/src/main/java/common/javax/swing/RepaintManager.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9d2e26ee2615e54ee3b1ee7faee32365ffb111fe/modules/swing/src/main/java/common/javax/swing/RepaintManager.java",
                "status": "modified",
                "changes": 18,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/RepaintManager.java?ref=9d2e26ee2615e54ee3b1ee7faee32365ffb111fe",
                "patch": "@@ -23,6 +23,7 @@\n \n import java.awt.Color;\n import java.awt.Component;\n+import java.awt.Container;\n import java.awt.Dimension;\n import java.awt.EventQueue;\n import java.awt.Graphics;\n@@ -269,12 +270,19 @@ private void scheduleProcessingEvent() {\n     }\n \n     private Component getValidationRoot(final Component c) {\n+        if (c == null) {\n+            return null;\n+        }\n         Component root = c;\n-        while ((!(root instanceof JComponent) || !((JComponent)root)\n-            .isValidateRoot())\n-            && root.getParent() != null) {\n-\n-            root = root.getParent();\n+        while (!(root instanceof JComponent)\n+                || !((JComponent) root).isValidateRoot()) {\n+            Container parent = root.getParent();\n+\n+            if (parent == null) {\n+                break;\n+            } else {\n+                root = parent;\n+            }\n         }\n         return root;\n     }",
                "deletions": 5
            },
            {
                "sha": "56c4ab4ab775d1b5f04e1fa750b4aa3547f954f4",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/RepaintManagerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9d2e26ee2615e54ee3b1ee7faee32365ffb111fe/modules/swing/src/test/api/java/common/javax/swing/RepaintManagerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9d2e26ee2615e54ee3b1ee7faee32365ffb111fe/modules/swing/src/test/api/java/common/javax/swing/RepaintManagerTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/RepaintManagerTest.java?ref=9d2e26ee2615e54ee3b1ee7faee32365ffb111fe",
                "patch": "@@ -101,6 +101,11 @@ public void validate() {\n         RepaintManager.currentManager(null).addInvalidComponent(inner);\n         waitForIdle();\n         assertTrue(marker.isOccurred());\n+        try { // Regression test for HARMONY-1725\n+            RepaintManager.currentManager(null).addInvalidComponent(null);\n+        } catch (NullPointerException e) {\n+            fail(\"Unexpected NullPointerException is thrown\");\n+        }\n     }\n \n     public void testValidateInvalidComponents() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-2279 ([classlib][swing] javax.swing.JLayeredPane.moveToBack(Component c) doesn't throw NPE if parameter c == null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@494117 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/791f2bc33329d7f8455585a60b290dfcafb7453a",
        "parent": "https://github.com/apache/harmony-classlib/commit/cc8e5de1f4926ea76e15abe0e7f486008756f33d",
        "bug_id": "harmony-classlib_156",
        "file": [
            {
                "sha": "5e5f6f951e3dbbf7849bdb40df085b1762bcf744",
                "filename": "modules/swing/src/main/java/common/javax/swing/JLayeredPane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/791f2bc33329d7f8455585a60b290dfcafb7453a/modules/swing/src/main/java/common/javax/swing/JLayeredPane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/791f2bc33329d7f8455585a60b290dfcafb7453a/modules/swing/src/main/java/common/javax/swing/JLayeredPane.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JLayeredPane.java?ref=791f2bc33329d7f8455585a60b290dfcafb7453a",
                "patch": "@@ -306,9 +306,6 @@ public int getPosition(final Component c) {\n      * @return layer of component c\n      */\n     public int getLayer(final Component c) {\n-        if (c == null) {\n-            return -1;\n-        }\n         Object layer = getComponentToLayer().get(c);\n         if (layer != null) {\n             return ((Integer) layer).intValue();",
                "deletions": 3
            },
            {
                "sha": "7165b1b480c7676df52d5816f449f62176ecdcb2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JLayeredPaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/791f2bc33329d7f8455585a60b290dfcafb7453a/modules/swing/src/test/api/java/common/javax/swing/JLayeredPaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/791f2bc33329d7f8455585a60b290dfcafb7453a/modules/swing/src/test/api/java/common/javax/swing/JLayeredPaneTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JLayeredPaneTest.java?ref=791f2bc33329d7f8455585a60b290dfcafb7453a",
                "patch": "@@ -324,6 +324,12 @@ public void testMoveToBackComponent() {\n         // moveToBack() does nothing if the component is not from the containter\n         layered.moveToBack(new JPanel());\n         assertEquals(6, layered.getComponentCount());\n+        try { // Regression test for HARMONY-2279\n+            layered.moveToBack(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply slightly modified patch for HARMONY-2938 ([classlib][luni]no NPE was thrown when send a DatagramPacket with no dest addresss)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@492957 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d0357338dc1378fbaf2e5b0be8d87c8890dc2046",
        "parent": "https://github.com/apache/harmony-classlib/commit/f25864bf4a87c040234e8312fbf99c9a4c6b111b",
        "bug_id": "harmony-classlib_157",
        "file": [
            {
                "sha": "67a11e1b911e1b47b5c408173c2cc3506141f049",
                "filename": "modules/luni/src/main/java/java/net/DatagramSocket.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/DatagramSocket.java?ref=d0357338dc1378fbaf2e5b0be8d87c8890dc2046",
                "patch": "@@ -406,10 +406,14 @@ public void send(DatagramPacket pack) throws IOException {\n \t\t\t\tpack.setPort(port);\n \t\t\t}\n \t\t} else {\n-\t\t\t// not connected so the target address cannot be null\n-\t\t\tif (packAddr == null) {\n-\t\t\t\treturn;\n-\t\t\t}\n+\t\t\t// not connected so the target address is not allowed to be null\n+            if (packAddr == null) {\n+                if (pack.port == -1) {\n+                    // KA019 Destination address is null\n+                    throw new NullPointerException(Msg.getString(\"KA019\")); //$NON-NLS-1$\n+                }\n+                return;\n+            }\n \t\t\tSecurityManager security = System.getSecurityManager();\n \t\t\tif (security != null) {\n \t\t\t\tif (packAddr.isMulticastAddress())",
                "deletions": 4
            },
            {
                "sha": "85491c26eafa4686febb5a1471c085ff2a311fbb",
                "filename": "modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties?ref=d0357338dc1378fbaf2e5b0be8d87c8890dc2046",
                "patch": "@@ -311,3 +311,4 @@ KA015=Incompatible class (base name)\\: {0} but expected {1}\n KA016=Received authentication challenge is null\n KA017=Received HTTP_PROXY_AUTH (407) code while not using proxy\n KA018=Received authentication challenge is null\n+KA019=Destination address is null",
                "deletions": 0
            },
            {
                "sha": "fd43bc5a10ccf941274fddafa03d447181d61976",
                "filename": "modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d0357338dc1378fbaf2e5b0be8d87c8890dc2046/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java?ref=d0357338dc1378fbaf2e5b0be8d87c8890dc2046",
                "patch": "@@ -961,6 +961,18 @@ public Object getOption(int arg0) throws SocketException {\n         InetSocketAddress sa = InetSocketAddress.createUnresolved(\"localhost\", 0); \n         //no exception expected for next line\n         new testDatagramSocket(new testDatagramSocketImpl()).send(new DatagramPacket(new byte[272], 3, sa)); \n+        \n+        // Regression test for Harmony-2938\n+        InetAddress i = InetAddress.getByName(\"127.0.0.1\");\n+        DatagramSocket d = new DatagramSocket(80, i);\n+        try {\n+            d.send(new DatagramPacket(new byte[] { 1 }, 1));\n+            fail(\"should throw NPE.\");\n+        } catch (NullPointerException e) {\n+            // expected;\n+        } finally {\n+            d.close();\n+        }\n \t}\n \n \t/**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1842 ([classlib][net]java.net.InetAddress.isReachable(NetworkInterface, int, int) throws NPE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@490716 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/48c982d318bce5b8c149b30fb21b679065edd3d5",
        "parent": "https://github.com/apache/harmony-classlib/commit/80af8d5f5dfa49e2b98848b71ac968869373f341",
        "bug_id": "harmony-classlib_158",
        "file": [
            {
                "sha": "237f1304967b95f214a90d5994c564c9c4e115cb",
                "filename": "modules/luni/src/main/java/java/net/InetAddress.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48c982d318bce5b8c149b30fb21b679065edd3d5/modules/luni/src/main/java/java/net/InetAddress.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48c982d318bce5b8c149b30fb21b679065edd3d5/modules/luni/src/main/java/java/net/InetAddress.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/InetAddress.java?ref=48c982d318bce5b8c149b30fb21b679065edd3d5",
                "patch": "@@ -814,6 +814,9 @@ public boolean isReachable(NetworkInterface netif, final int ttl,\n     private boolean isReachableByMultiThread(NetworkInterface netif,\n             final int ttl, final int timeout, final boolean isICMP)\n             throws IOException {\n+        if (null == netif.addresses) {\n+            return false;\n+        }\n         Enumeration<InetAddress> addresses = netif.getInetAddresses();\n         reached = false;\n         addrCount = netif.addresses.length;",
                "deletions": 0
            },
            {
                "sha": "38210cf971687ac54eaf5f4606bbc45ea5d5adb6",
                "filename": "modules/luni/src/test/java/org/apache/harmony/luni/tests/java/net/InetAddressTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/48c982d318bce5b8c149b30fb21b679065edd3d5/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/net/InetAddressTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/48c982d318bce5b8c149b30fb21b679065edd3d5/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/net/InetAddressTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/net/InetAddressTest.java?ref=48c982d318bce5b8c149b30fb21b679065edd3d5",
                "patch": "@@ -486,6 +486,15 @@ public void test_isReachableLjava_net_NetworkInterfaceII() throws Exception {\n         ia = Inet4Address.getByName(\"1.1.1.1\");\n         assertFalse(ia.isReachable(1000));\n         assertFalse(ia.isReachable(null, 0, 1000));\n+\n+        // Regression test for HARMONY-1842.\n+        ia = InetAddress.getByName(\"localhost\"); //$NON-NLS-1$\n+        Enumeration<NetworkInterface> nif = NetworkInterface.getNetworkInterfaces();\n+        NetworkInterface netif;\n+        while(nif.hasMoreElements()) {\n+            netif = nif.nextElement();\n+            ia.isReachable(netif, 10, 1000);\n+        }\n     } \n \n     // comparator for InetAddress objects",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1749 \"[classlib][swing] BasicComboBoxUI.removeEditor() throws unspecified NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489356 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1a45a735923b2c96466abce773f50efa52384c30",
        "parent": "https://github.com/apache/harmony-classlib/commit/7c8a7c28ff35f732906b5a724cba2fa2f4a9a50f",
        "bug_id": "harmony-classlib_159",
        "file": [
            {
                "sha": "d19d43e128badf14518554947a07a2ae2d291c12",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1a45a735923b2c96466abce773f50efa52384c30/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1a45a735923b2c96466abce773f50efa52384c30/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=1a45a735923b2c96466abce773f50efa52384c30",
                "patch": "@@ -369,9 +369,11 @@ public void addEditor() {\n     }\n \n     public void removeEditor() {\n-        comboBox.remove(editor);\n-        unconfigureEditor();\n-        editor = null;\n+        if (editor != null){\n+            comboBox.remove(editor);\n+            unconfigureEditor();\n+            editor = null;\n+        }\n     }\n \n     public boolean isPopupVisible(final JComboBox c) {",
                "deletions": 3
            },
            {
                "sha": "7657f60905bb408c19db19782ee800d212a164f2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1a45a735923b2c96466abce773f50efa52384c30/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1a45a735923b2c96466abce773f50efa52384c30/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java?ref=1a45a735923b2c96466abce773f50efa52384c30",
                "patch": "@@ -468,6 +468,12 @@ public void testPropertyChangeHandler() throws Exception {\n         assertEquals(newRenderer, ui.popup.getList().getCellRenderer());\n     }\n \n+    public void testRemove_NullEditor() throws Exception{\n+        // Regression test for Harmony-1749\n+        BasicComboBoxUI cb = new BasicComboBoxUI();\n+        cb.removeEditor();\n+    }\n+    \n     @SuppressWarnings(\"deprecation\")\n     private void createVisibleCombo() {\n         frame.getContentPane().add(comboBox);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1667 \"[classlib][awt] RI BorderLayout.addLayoutComponent(Component, null) throws NPE while Harmony doesn't\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489326 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
        "parent": "https://github.com/apache/harmony-classlib/commit/09ca1ffa18d38e83eaec6a88882450645e968b70",
        "bug_id": "harmony-classlib_160",
        "file": [
            {
                "sha": "b8fc750155117ec7d2d81588b0c7d4bb3edd2e49",
                "filename": "modules/awt/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.drl?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -16,7 +16,6 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "b8fc750155117ec7d2d81588b0c7d4bb3edd2e49",
                "filename": "modules/awt/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.ibm?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -16,7 +16,6 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "8d03104507100e9cfc72cd09957b9904b9d8d90e",
                "filename": "modules/awt/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.drl?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -16,7 +16,6 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "b8fc750155117ec7d2d81588b0c7d4bb3edd2e49",
                "filename": "modules/awt/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.ibm?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -16,7 +16,6 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "7c932a9a2f7acbf0b178cec947fc54e9b41ea002",
                "filename": "modules/awt/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.drl?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -15,7 +15,6 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "56ce71fd0e680a503e4ef46b8e5035bfc41e5800",
                "filename": "modules/awt/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.ibm?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -21,7 +21,6 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "7c932a9a2f7acbf0b178cec947fc54e9b41ea002",
                "filename": "modules/awt/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.drl?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -15,7 +15,6 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "7c932a9a2f7acbf0b178cec947fc54e9b41ea002",
                "filename": "modules/awt/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.ibm?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -15,7 +15,6 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n-java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 1
            },
            {
                "sha": "a6bb6b825c0ef9b34648db74cfdef5cbdef51b3d",
                "filename": "modules/awt/src/main/java/common/java/awt/BorderLayout.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/src/main/java/common/java/awt/BorderLayout.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/src/main/java/common/java/awt/BorderLayout.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/BorderLayout.java?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -172,6 +172,9 @@ public void addLayoutComponent(String name, Component comp) {\n     public void addLayoutComponent(Component comp, Object constraints) {\n         toolkit.lockAWT();\n         try {\n+            if (comp == null) {\n+                throw new NullPointerException(\"Component is null\");\n+            }\n             if ((constraints == null) || (constraints instanceof String)) {\n                 addLayoutComponent((String) constraints, comp);\n             } else {",
                "deletions": 0
            },
            {
                "sha": "08079628da03acb08a34fbfbabb326045a322ae1",
                "filename": "modules/awt/src/test/api/java/common/java/awt/BorderLayoutTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/src/test/api/java/common/java/awt/BorderLayoutTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ce595a35f646b31a0bcec3fbc5ba0902ab4f991b/modules/awt/src/test/api/java/common/java/awt/BorderLayoutTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/BorderLayoutTest.java?ref=ce595a35f646b31a0bcec3fbc5ba0902ab4f991b",
                "patch": "@@ -119,6 +119,14 @@ public final void testAddLayoutComponentComponentObject() {\n         assertTrue(notString);\n         assertTrue(wrongString);\n         assertFalse(oneTwice);\n+        \n+        // Regression test HARMONY-1667\n+        try {\n+            layout.addLayoutComponent(null, BorderLayout.CENTER);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n     }\n \n     public final void testRemoveLayoutComponent() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-2421 ([classlib][logging] java.util.logging.FileHandler(String, int, int) throws NPE instead of IllegalArgumentException)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488288 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0be506a255c36feb8b8ad57d6d29c6013d2abd96",
        "parent": "https://github.com/apache/harmony-classlib/commit/b11b763f6350a1fe2347ea6394bca74039ac872b",
        "bug_id": "harmony-classlib_161",
        "file": [
            {
                "sha": "dc4009febe1fc72844e69ef529a7544c6112348b",
                "filename": "modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0be506a255c36feb8b8ad57d6d29c6013d2abd96/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0be506a255c36feb8b8ad57d6d29c6013d2abd96/modules/logging/src/main/java/java/util/logging/FileHandler.java",
                "status": "modified",
                "changes": 465,
                "additions": 227,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/FileHandler.java?ref=0be506a255c36feb8b8ad57d6d29c6013d2abd96",
                "patch": "@@ -92,24 +92,19 @@\n  * <p>\n  * The \"%u\" unique field is used to avoid conflicts and set to 0 at first. If\n  * one <code>FileHandler</code> tries to open the filename which is currently\n- * in use by another process, it will repeatedly increment the unique number field\n- * and try again. If the \"%u\" component has not been included in the file name\n- * pattern and some contention on a file does occur then a unique numerical\n+ * in use by another process, it will repeatedly increment the unique number\n+ * field and try again. If the \"%u\" component has not been included in the file\n+ * name pattern and some contention on a file does occur then a unique numerical\n  * value will be added to the end of the filename in question immediately to the\n- * right of a dot. The unique IDs for avoiding conflicts is only guaranteed to work\n- * reliably when using a local disk file system.\n+ * right of a dot. The unique IDs for avoiding conflicts is only guaranteed to\n+ * work reliably when using a local disk file system.\n  * </p>\n  * \n  */\n public class FileHandler extends StreamHandler {\n \n     private static final String LCK_EXT = \".lck\"; //$NON-NLS-1$\n \n-    /*\n-     * ---------------------------------------------\n-     * constants\n-     * ---------------------------------------------\n-     */\n     private static final int DEFAULT_COUNT = 1;\n \n     private static final int DEFAULT_LIMIT = 0;\n@@ -118,76 +113,61 @@\n \n     private static final String DEFAULT_PATTERN = \"%h/java%u.log\"; //$NON-NLS-1$\n \n-    /*\n-     * ---------------------------------------------\n-     * class variables\n-     * ---------------------------------------------\n-     */\n-    //maintain all file locks hold by this process\n+    // maintain all file locks hold by this process\n     private static final Hashtable<String, FileLock> allLocks = new Hashtable<String, FileLock>();\n \n-    /*\n-     * ---------------------------------------------\n-     * instance variables\n-     * ---------------------------------------------\n-     */\n-\n-    //the count of files which the output cycle through\n+    // the count of files which the output cycle through\n     private int count;\n \n-    //the size limitation in byte of log file\n+    // the size limitation in byte of log file\n     private int limit;\n \n-    //whether the FileHandler should open a existing file for output in append mode\n+    // whether the FileHandler should open a existing file for output in append\n+    // mode\n     private boolean append;\n \n-    //the pattern for output file name\n+    // the pattern for output file name\n     private String pattern;\n \n-    //maintain a LogManager instance for convenience\n+    // maintain a LogManager instance for convenience\n     private LogManager manager;\n \n-    //output stream, which can measure the output file length\n+    // output stream, which can measure the output file length\n     private MeasureOutputStream output;\n \n-    //used output file\n+    // used output file\n     private File[] files;\n \n-    //output file lock\n+    // output file lock\n     FileLock lock = null;\n \n-    //current output file name\n+    // current output file name\n     String fileName = null;\n-    \n-    //current unique ID\n+\n+    // current unique ID\n     int uniqueID = -1;\n \n-    /*\n-     * ---------------------------------------------\n-     * constructors\n-     * ---------------------------------------------\n-     */\n     /**\n-     * Construct a <code>FileHandler</code> using <code>LogManager</code> \n+     * Construct a <code>FileHandler</code> using <code>LogManager</code>\n      * properties or their default value\n      * \n-     * @throws IOException\t\t\t\n-     * \t\t\t\tif any IO exception happened\n-     * @throws SecurityException\t\n-     * \t\t\t\tif security manager exists and it determines that caller \n-     * \t\t\t\tdoes not have the required permissions to control this handler,\n-     * \t\t\t\trequired permissions include <code>LogPermission(\"control\")</code>\n-     * \t\t\t\tand other permission like <code>FilePermission(\"write\")</code>, \n-     * \t\t\t\tetc.\n-     * \t\t\t\t\t\t\t\t\n+     * @throws IOException\n+     *             if any IO exception happened\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n      */\n     public FileHandler() throws IOException {\n         init(null, null, null, null);\n     }\n \n-    //init properties\n-    private void init(String p, Boolean a, Integer l, Integer c) throws IOException{\n-        //check access\n+    // init properties\n+    private void init(String p, Boolean a, Integer l, Integer c)\n+            throws IOException {\n+        // check access\n         manager = LogManager.getLogManager();\n         manager.checkAccess();\n         initProperties(p, a, l, c);\n@@ -196,29 +176,33 @@ private void init(String p, Boolean a, Integer l, Integer c) throws IOException{\n \n     private void initOutputFiles() throws FileNotFoundException, IOException {\n         while (true) {\n-            //try to find a unique file which is not locked by other process\n+            // try to find a unique file which is not locked by other process\n             uniqueID++;\n-            //FIXME: improve performance here\n+            // FIXME: improve performance here\n             for (int generation = 0; generation < count; generation++) {\n-                //cache all file names for rotation use\n+                // cache all file names for rotation use\n                 files[generation] = new File(parseFileName(generation));\n             }\n             fileName = files[0].getAbsolutePath();\n             synchronized (allLocks) {\n-                //if current process has held lock for this fileName\n-                //continue to find next file\n+                /*\n+                 * if current process has held lock for this fileName continue\n+                 * to find next file\n+                 */\n                 if (null != allLocks.get(fileName)) {\n                     continue;\n                 }\n-                if(files[0].exists() && (!append || files[0].length() >= limit)){\n+                if (files[0].exists()\n+                        && (!append || files[0].length() >= limit)) {\n                     for (int i = count - 1; i > 0; i--) {\n                         if (files[i].exists()) {\n                             files[i].delete();\n                         }\n                         files[i - 1].renameTo(files[i]);\n                     }\n                 }\n-                FileOutputStream fileStream = new FileOutputStream(fileName+LCK_EXT);\n+                FileOutputStream fileStream = new FileOutputStream(fileName\n+                        + LCK_EXT);\n                 FileChannel channel = fileStream.getChannel();\n                 /*\n                  * if lock is unsupported and IOException thrown, just let the\n@@ -227,24 +211,24 @@ private void initOutputFiles() throws FileNotFoundException, IOException {\n                  */\n                 lock = channel.tryLock();\n                 if (null == lock) {\n-                    try{\n+                    try {\n                         fileStream.close();\n-                    }catch(Exception e){\n-                        //ignore\n+                    } catch (Exception e) {\n+                        // ignore\n                     }\n                     continue;\n                 }\n-\t\t\t\tallLocks.put(fileName, lock);\n-\t\t\t\tbreak;\n+                allLocks.put(fileName, lock);\n+                break;\n             }\n         }\n-        output = new MeasureOutputStream(new BufferedOutputStream(new FileOutputStream(fileName, append)),\n-                files[0].length());\n+        output = new MeasureOutputStream(new BufferedOutputStream(\n+                new FileOutputStream(fileName, append)), files[0].length());\n         setOutputStream(output);\n     }\n \n     private void initProperties(String p, Boolean a, Integer l, Integer c) {\n-        super.initProperties(\"ALL\", null, \"java.util.logging.XMLFormatter\",  //$NON-NLS-1$//$NON-NLS-2$\n+        super.initProperties(\"ALL\", null, \"java.util.logging.XMLFormatter\", //$NON-NLS-1$//$NON-NLS-2$\n                 null);\n         String className = this.getClass().getName();\n         pattern = (null == p) ? getStringProperty(className + \".pattern\", //$NON-NLS-1$\n@@ -284,26 +268,28 @@ void findNextGeneration() {\n     }\n \n     /**\n-     *  Transform the pattern to the valid file name, replacing\n-     *  any patterns, and applying generation and uniqueID if\n-     *  present\n-     *\n-     *  @param gen generation of this file\n-     *  @return transformed filename ready for use\n+     * Transform the pattern to the valid file name, replacing any patterns, and\n+     * applying generation and uniqueID if present\n+     * \n+     * @param gen\n+     *            generation of this file\n+     * @return transformed filename ready for use\n      */\n     private String parseFileName(int gen) {\n         int cur = 0;\n         int next = 0;\n         boolean hasUniqueID = false;\n         boolean hasGeneration = false;\n \n-        //TODO privilege code? \n+        // TODO privilege code?\n \n         String tempPath = System.getProperty(\"java.io.tmpdir\"); //$NON-NLS-1$\n-        boolean tempPathHasSepEnd = (tempPath == null ? false : tempPath.endsWith(File.separator));\n+        boolean tempPathHasSepEnd = (tempPath == null ? false : tempPath\n+                .endsWith(File.separator));\n \n         String homePath = System.getProperty(\"user.home\"); //$NON-NLS-1$\n-        boolean homePathHasSepEnd = (homePath == null ? false : homePath.endsWith(File.separator));\n+        boolean homePathHasSepEnd = (homePath == null ? false : homePath\n+                .endsWith(File.separator));\n \n         StringBuilder sb = new StringBuilder();\n         pattern = pattern.replace('/', File.separatorChar);\n@@ -312,35 +298,35 @@ private String parseFileName(int gen) {\n         while ((next = pattern.indexOf('%', cur)) >= 0) {\n             if (++next < pattern.length()) {\n                 switch (value[next]) {\n-                case 'g':\n-                    sb.append(value, cur, next - cur - 1).append(gen);\n-                    hasGeneration = true;\n-                    break;\n-                case 'u':\n-                    sb.append(value, cur, next - cur - 1).append(uniqueID);\n-                    hasUniqueID = true;\n-                    break;\n-                case 't':\n-                    /*\n-                     *  we should probably try to do something cute here like\n-                     *  lookahead for adjacent '/'\n-                     */\n-                    sb.append(value, cur, next - cur - 1).append(tempPath);\n-                    if (!tempPathHasSepEnd) {\n-                        sb.append(File.separator);\n-                    }\n-                    break;\n-                case 'h':\n-                    sb.append(value, cur, next - cur - 1).append(homePath);\n-                    if (!homePathHasSepEnd){\n-                        sb.append(File.separator);\n-                    }\n-                    break;\n-                case '%':\n-                    sb.append(value, cur, next - cur - 1).append('%');\n-                    break;\n-                default:\n-                    sb.append(value, cur, next - cur);\n+                    case 'g':\n+                        sb.append(value, cur, next - cur - 1).append(gen);\n+                        hasGeneration = true;\n+                        break;\n+                    case 'u':\n+                        sb.append(value, cur, next - cur - 1).append(uniqueID);\n+                        hasUniqueID = true;\n+                        break;\n+                    case 't':\n+                        /*\n+                         * we should probably try to do something cute here like\n+                         * lookahead for adjacent '/'\n+                         */\n+                        sb.append(value, cur, next - cur - 1).append(tempPath);\n+                        if (!tempPathHasSepEnd) {\n+                            sb.append(File.separator);\n+                        }\n+                        break;\n+                    case 'h':\n+                        sb.append(value, cur, next - cur - 1).append(homePath);\n+                        if (!homePathHasSepEnd) {\n+                            sb.append(File.separator);\n+                        }\n+                        break;\n+                    case '%':\n+                        sb.append(value, cur, next - cur - 1).append('%');\n+                        break;\n+                    default:\n+                        sb.append(value, cur, next - cur);\n                 }\n                 cur = ++next;\n             } else {\n@@ -361,7 +347,8 @@ private String parseFileName(int gen) {\n         return sb.toString();\n     }\n \n-    //get boolean LogManager property, if invalid value got, using default value\n+    // get boolean LogManager property, if invalid value got, using default\n+    // value\n     private boolean getBooleanProperty(String key, boolean defaultValue) {\n         String property = manager.getProperty(key);\n         if (null == property) {\n@@ -376,210 +363,213 @@ private boolean getBooleanProperty(String key, boolean defaultValue) {\n         return result;\n     }\n \n-    //get String LogManager property, if invalid value got, using default value\n+    // get String LogManager property, if invalid value got, using default value\n     private String getStringProperty(String key, String defaultValue) {\n         String property = manager.getProperty(key);\n         return property == null ? defaultValue : property;\n     }\n \n-    //get int LogManager property, if invalid value got, using default value\n+    // get int LogManager property, if invalid value got, using default value\n     private int getIntProperty(String key, int defaultValue) {\n         String property = manager.getProperty(key);\n         int result = defaultValue;\n         if (null != property) {\n             try {\n                 result = Integer.parseInt(property);\n-            } catch (Exception e) {//ignore\n+            } catch (Exception e) {\n+                // ignore\n             }\n         }\n         return result;\n     }\n \n     /**\n-     * Construct a <code>FileHandler</code>, the given name pattern is used as\n-     * output filename, the file limit is set to zero(no limit), and the file \n-     * count is set to one, other configuration using <code>LogManager</code> \n+     * Construct a <code>FileHandler</code>, the given name pattern is used\n+     * as output filename, the file limit is set to zero(no limit), and the file\n+     * count is set to one, other configuration using <code>LogManager</code>\n      * properties or their default value\n      * \n      * This handler write to only one file and no amount limit.\n-     *\n-     * @param  pattern\n-     * \t\t\t\tthe name pattern of output file \n-     * @throws IOException\t\t\t\n-     * \t\t\t\tif any IO exception happened\n-     * @throws SecurityException\t\n-     * \t\t\t\tif security manager exists and it determines that caller \n-     * \t\t\t\tdoes not have the required permissions to control this handler,\n-     * \t\t\t\trequired permissions include <code>LogPermission(\"control\")</code>\n-     * \t\t\t\tand other permission like <code>FilePermission(\"write\")</code>, \n-     * \t\t\t\tetc.\n-     * \t\t\t\t\t\t\t\t\n+     * \n+     * @param pattern\n+     *            the name pattern of output file\n+     * @throws IOException\n+     *             if any IO exception happened\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n+     * @throws NullPointerException\n+     *             if the pattern is <code>null</code>.\n+     * @throws IllegalArgumentException\n+     *             if the pattern is empty.\n      */\n     public FileHandler(String pattern) throws IOException {\n-        if(null == pattern){\n+        if (pattern.equals(\"\")) { //$NON-NLS-1$\n             // logging.19=Pattern cannot be empty\n-            throw new NullPointerException(Messages.getString(\"logging.19\")); //$NON-NLS-1$\n+            throw new IllegalArgumentException(Messages.getString(\"logging.19\")); //$NON-NLS-1$\n         }\n-        if(\"\".equals(pattern)){ //$NON-NLS-1$\n-            throw new IllegalArgumentException();\n-        }\n-        init(pattern, null, Integer.valueOf(DEFAULT_LIMIT), Integer.valueOf(\n-                DEFAULT_COUNT));\n+        init(pattern, null, Integer.valueOf(DEFAULT_LIMIT), Integer\n+                .valueOf(DEFAULT_COUNT));\n     }\n \n     /**\n-\t * Construct a <code>FileHandler</code>, the given name pattern is used\n-\t * as output filename, the file limit is set to zero(i.e. no limit applies),\n-\t * the file count is initialized to one, and the value of\n-\t * <code>append</code> becomes the new instance's append mode. Other\n-\t * configuration is done using <code>LogManager</code> properties.\n-\t * \n-\t * This handler write to only one file and no amount limit.\n-\t * \n-\t * @param pattern\n-\t *            the name pattern of output file\n-\t * @param append\n-\t *            the append mode\n-\t * @throws IOException\n-\t *             if any IO exception happened\n-\t * @throws SecurityException\n-\t *             if security manager exists and it determines that caller does\n-\t *             not have the required permissions to control this handler,\n-\t *             required permissions include\n-\t *             <code>LogPermission(\"control\")</code> and other permission\n-\t *             like <code>FilePermission(\"write\")</code>, etc.\n-\t * \n-\t */\n+     * Construct a <code>FileHandler</code>, the given name pattern is used\n+     * as output filename, the file limit is set to zero(i.e. no limit applies),\n+     * the file count is initialized to one, and the value of\n+     * <code>append</code> becomes the new instance's append mode. Other\n+     * configuration is done using <code>LogManager</code> properties.\n+     * \n+     * This handler write to only one file and no amount limit.\n+     * \n+     * @param pattern\n+     *            the name pattern of output file\n+     * @param append\n+     *            the append mode\n+     * @throws IOException\n+     *             if any IO exception happened\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n+     * @throws NullPointerException\n+     *             if the pattern is <code>null</code>.\n+     * @throws IllegalArgumentException\n+     *             if the pattern is empty.\n+     */\n     public FileHandler(String pattern, boolean append) throws IOException {\n-        if(null == pattern || \"\".equals(pattern)){ //$NON-NLS-1$\n-            // logging.19=Pattern cannot be empty\n-            throw new NullPointerException(Messages.getString(\"logging.19\")); //$NON-NLS-1$\n-        }        \n+        if (pattern.equals(\"\")) { //$NON-NLS-1$\n+            throw new IllegalArgumentException(Messages.getString(\"logging.19\")); //$NON-NLS-1$ \n+        }\n+\n         init(pattern, Boolean.valueOf(append), Integer.valueOf(DEFAULT_LIMIT),\n                 Integer.valueOf(DEFAULT_COUNT));\n     }\n \n     /**\n-     * Construct a <code>FileHandler</code>, the given name pattern is used as\n-     * output filename, the file limit is set to given limit argument, and \n-     * the file count is set to given count argument, other configuration using \n-     * <code>LogManager</code> properties  or their default value\n+     * Construct a <code>FileHandler</code>, the given name pattern is used\n+     * as output filename, the file limit is set to given limit argument, and\n+     * the file count is set to given count argument, other configuration using\n+     * <code>LogManager</code> properties or their default value\n      * \n-     * This handler is configured to write to a rotating set of count files, \n-     * when the limit of bytes has been written to one output file, another file \n-     * will be opened instead.  \n-     *\n-     * @param  pattern\n-     * \t\t\t\tthe name pattern of output file\n-     * @param  limit\n-     * \t\t\t\tthe data amount limit in bytes of one output file, cannot less\n-     * \t\t\t\tthan one\n-     * @param  count\n-     * \t\t\t\tthe maximum number of files can be used, cannot less than one \n-     * @throws IOException\t\t\t\n-     * \t\t\t\tif any IO exception happened\n-     * @throws SecurityException\t\n-     * \t\t\t\tif security manager exists and it determines that caller \n-     * \t\t\t\tdoes not have the required permissions to control this handler,\n-     * \t\t\t\trequired permissions include <code>LogPermission(\"control\")</code>\n-     * \t\t\t\tand other permission like <code>FilePermission(\"write\")</code>, \n-     * \t\t\t\tetc.\n+     * This handler is configured to write to a rotating set of count files,\n+     * when the limit of bytes has been written to one output file, another file\n+     * will be opened instead.\n+     * \n+     * @param pattern\n+     *            the name pattern of output file\n+     * @param limit\n+     *            the data amount limit in bytes of one output file, cannot less\n+     *            than one\n+     * @param count\n+     *            the maximum number of files can be used, cannot less than one\n+     * @throws IOException\n+     *             if any IO exception happened\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n+     * @throws NullPointerException\n+     *             if pattern is <code>null</code>.\n      * @throws IllegalArgumentException\n-     * \t\t\t\tif count<1, or limit<0 \t\t\t\t\t\t\t\t\n+     *             if count<1, or limit<0\n      */\n     public FileHandler(String pattern, int limit, int count) throws IOException {\n-        if(null == pattern || \"\".equals(pattern)){ //$NON-NLS-1$\n-            // logging.19=Pattern cannot be empty\n-            throw new NullPointerException(Messages.getString(\"logging.19\")); //$NON-NLS-1$\n-        }        \n+        if (pattern.equals(\"\")) { //$NON-NLS-1$\n+            throw new IllegalArgumentException(Messages.getString(\"logging.19\")); //$NON-NLS-1$ \n+        }\n         if (limit < 0 || count < 1) {\n-            // logging.1B=The limit and count property must be larger than 0 and 1, respectively\n+            // logging.1B=The limit and count property must be larger than 0 and\n+            // 1, respectively\n             throw new IllegalArgumentException(Messages.getString(\"logging.1B\")); //$NON-NLS-1$\n         }\n         init(pattern, null, Integer.valueOf(limit), Integer.valueOf(count));\n     }\n \n     /**\n-     * Construct a <code>FileHandler</code>, the given name pattern is used as\n-     * output filename, the file limit is set to given limit argument, the file \n-     * count is set to given count argument, and the append mode is set to given\n-     * append argument, other configuration using <code>LogManager</code> \n-     * properties  or their default value\n+     * Construct a <code>FileHandler</code>, the given name pattern is used\n+     * as output filename, the file limit is set to given limit argument, the\n+     * file count is set to given count argument, and the append mode is set to\n+     * given append argument, other configuration using <code>LogManager</code>\n+     * properties or their default value\n      * \n-     * This handler is configured to write to a rotating set of count files, \n-     * when the limit of bytes has been written to one output file, another file \n-     * will be opened instead. \n+     * This handler is configured to write to a rotating set of count files,\n+     * when the limit of bytes has been written to one output file, another file\n+     * will be opened instead.\n      * \n-     * @param  pattern\n-     * \t\t\t\tthe name pattern of output file\n-     * @param  limit\n-     * \t\t\t\tthe data amount limit in bytes of one output file, cannot less\n-     * \t\t\t\tthan one\n-     * @param  count\n-     * \t\t\t\tthe maximum number of files can be used, cannot less than one \n-     * @param  append\n-     * \t\t\t\tthe append mode\n-     * @throws IOException\t\t\t\n-     * \t\t\t\tif any IO exception happened\n-     * @throws SecurityException\t\n-     * \t\t\t\tif security manager exists and it determines that caller \n-     * \t\t\t\tdoes not have the required permissions to control this handler,\n-     * \t\t\t\trequired permissions include <code>LogPermission(\"control\")</code>\n-     * \t\t\t\tand other permission like <code>FilePermission(\"write\")</code>, \n-     * \t\t\t\tetc.\n+     * @param pattern\n+     *            the name pattern of output file\n+     * @param limit\n+     *            the data amount limit in bytes of one output file, cannot less\n+     *            than one\n+     * @param count\n+     *            the maximum number of files can be used, cannot less than one\n+     * @param append\n+     *            the append mode\n+     * @throws IOException\n+     *             if any IO exception happened\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n+     * @throws NullPointerException\n+     *             if pattern is <code>null</code>.\n      * @throws IllegalArgumentException\n-     * \t\t\t\tif count<1, or limit<0\n-     * \t\t\t\t\t\t\t\t\n+     *             if count<1, or limit<0\n      */\n     public FileHandler(String pattern, int limit, int count, boolean append)\n             throws IOException {\n-        if(null == pattern || \"\".equals(pattern)){ //$NON-NLS-1$\n-            // logging.19=Pattern cannot be empty\n-            throw new NullPointerException(Messages.getString(\"logging.19\")); //$NON-NLS-1$\n-        }        \n+        if (pattern.equals(\"\")) { //$NON-NLS-1$\n+            throw new IllegalArgumentException(Messages.getString(\"logging.19\")); //$NON-NLS-1$ \n+        }\n         if (limit < 0 || count < 1) {\n-            // logging.1B=The limit and count property must be larger than 0 and 1, respectively\n+            // logging.1B=The limit and count property must be larger than 0 and\n+            // 1, respectively\n             throw new IllegalArgumentException(Messages.getString(\"logging.1B\")); //$NON-NLS-1$\n         }\n-        init(pattern, Boolean.valueOf(append), Integer.valueOf(limit), Integer.valueOf(\n-                count));\n+        init(pattern, Boolean.valueOf(append), Integer.valueOf(limit), Integer\n+                .valueOf(count));\n     }\n \n-    /*\n-     * ---------------------------------------------\n-     * Methods overrides StreamHandler\n-     * ---------------------------------------------\n-     */\n     /**\n      * Flush and close all opened files.\n      * \n-     * @throws SecurityException\t\n-     * \t\t\t\tif security manager exists and it determines that caller \n-     * \t\t\t\tdoes not have the required permissions to control this handler,\n-     * \t\t\t\trequired permissions include <code>LogPermission(\"control\")</code>\n-     * \t\t\t\tand other permission like <code>FilePermission(\"write\")</code>, \n-     * \t\t\t\tetc.\n+     * @throws SecurityException\n+     *             if security manager exists and it determines that caller does\n+     *             not have the required permissions to control this handler,\n+     *             required permissions include\n+     *             <code>LogPermission(\"control\")</code> and other permission\n+     *             like <code>FilePermission(\"write\")</code>, etc.\n      */\n     @Override\n     public void close() {\n-        //release locks\n+        // release locks\n         super.close();\n         allLocks.remove(fileName);\n         try {\n             FileChannel channel = lock.channel();\n             lock.release();\n             channel.close();\n-            File file = new File(fileName+LCK_EXT);\n+            File file = new File(fileName + LCK_EXT);\n             file.delete();\n         } catch (IOException e) {\n-            //ignore\n+            // ignore\n         }\n     }\n \n     /**\n      * Publish a <code>LogRecord</code>\n      * \n-     * @param record the log record to be published\n+     * @param record\n+     *            the log record to be published\n      */\n     @Override\n     public void publish(LogRecord record) {\n@@ -596,8 +586,9 @@ public Object run() {\n     }\n \n     /**\n-     * This output stream use decorator pattern to add measure feature to OutputStream\n-     * which can detect the total size(in bytes) of output, the initial size can be set\n+     * This output stream use decorator pattern to add measure feature to\n+     * OutputStream which can detect the total size(in bytes) of output, the\n+     * initial size can be set\n      */\n     static class MeasureOutputStream extends OutputStream {\n \n@@ -649,7 +640,5 @@ public long getLength() {\n         public void setLength(long newLength) {\n             length = newLength;\n         }\n-\n     }\n-\n }",
                "deletions": 238
            },
            {
                "sha": "66f54fb7ba56b580366e5cea6e8f5cec100a1f27",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0be506a255c36feb8b8ad57d6d29c6013d2abd96/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0be506a255c36feb8b8ad57d6d29c6013d2abd96/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java",
                "status": "modified",
                "changes": 1212,
                "additions": 622,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/FileHandlerTest.java?ref=0be506a255c36feb8b8ad57d6d29c6013d2abd96",
                "patch": "@@ -29,7 +29,6 @@\n import java.io.PrintStream;\n import java.io.Reader;\n import java.io.StringWriter;\n-import java.nio.channels.FileChannel;\n import java.security.Permission;\n import java.util.Properties;\n import java.util.logging.FileHandler;\n@@ -51,633 +50,666 @@\n  */\n public class FileHandlerTest extends TestCase {\n \n-\tstatic LogManager manager=LogManager.getLogManager();\n+    static LogManager manager = LogManager.getLogManager();\n \n-\tfinal static Properties props = new Properties();\n+    final static Properties props = new Properties();\n \n-\tfinal static String className = FileHandlerTest.class.getName();\n+    final static String className = FileHandlerTest.class.getName();\n \n-\tfinal static StringWriter writer = new StringWriter();\n+    final static StringWriter writer = new StringWriter();\n \n-\tfinal static SecurityManager securityManager = new MockLogSecurityManager();\n+    final static SecurityManager securityManager = new MockLogSecurityManager();\n \n-\tfinal static String HOMEPATH = System.getProperty(\"user.home\");\n+    final static String HOMEPATH = System.getProperty(\"user.home\");\n \n-\tfinal static String TEMPPATH = System.getProperty(\"java.io.tmpdir\");\n+    final static String TEMPPATH = System.getProperty(\"java.io.tmpdir\");\n+\n+    final static String SEP = File.separator;\n \n-\tfinal static String SEP = File.separator;\n-    \n     private final PrintStream err = System.err;\n \n-    private OutputStream errSubstituteStream = null;        \n-\n-\tFileHandler handler;\n-\n-\tLogRecord r;\n-\n-\t/*\n-\t * @see TestCase#setUp()\n-\t */\n-\tprotected void setUp() throws Exception {\n-\t\tsuper.setUp();\n-\t\tmanager.reset();\n-\t\tinitProps();\n-\t\tFile file = new File(TEMPPATH + SEP + \"log\");\n-\t\tfile.mkdir();\n-\t\tmanager.readConfiguration(EnvironmentHelper\n-\t\t\t\t.PropertiesToInputStream(props));\n-\t\thandler = new FileHandler();\n-\t\tr = new LogRecord(Level.CONFIG, \"msg\");\n+    private OutputStream errSubstituteStream = null;\n+\n+    FileHandler handler;\n+\n+    LogRecord r;\n+\n+    /*\n+     * @see TestCase#setUp()\n+     */\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+        manager.reset();\n+        initProps();\n+        File file = new File(TEMPPATH + SEP + \"log\");\n+        file.mkdir();\n+        manager.readConfiguration(EnvironmentHelper\n+                .PropertiesToInputStream(props));\n+        handler = new FileHandler();\n+        r = new LogRecord(Level.CONFIG, \"msg\");\n         errSubstituteStream = new NullOutputStream();\n-        System.setErr(new PrintStream(errSubstituteStream));        \n-\t}\n-\n-\t/**\n-\t * \n-\t */\n-\tprivate void initProps() {\n-\t\tprops.clear();\n-\t\tprops.put(\"java.util.logging.FileHandler.level\", \"FINE\");\n-\t\tprops.put(\"java.util.logging.FileHandler.filter\", className\n-\t\t\t\t+ \"$MockFilter\");\n-\t\tprops.put(\"java.util.logging.FileHandler.formatter\", className\n-\t\t\t\t+ \"$MockFormatter\");\n-\t\tprops.put(\"java.util.logging.FileHandler.encoding\", \"iso-8859-1\");\n-\t\t// limit to only two message\n-\t\tprops.put(\"java.util.logging.FileHandler.limit\", \"1000\");\n-\t\t// rotation count is 2\n-\t\tprops.put(\"java.util.logging.FileHandler.count\", \"2\");\n-\t\t// using append mode\n-\t\tprops.put(\"java.util.logging.FileHandler.append\", \"true\");\n-\t\tprops\n-\t\t\t\t.put(\"java.util.logging.FileHandler.pattern\",\n-\t\t\t\t\t\t\"%t/log/java%u.test\");\n-\t}\n-\n-\t/*\n-\t * @see TestCase#tearDown()\n-\t */\n-\tprotected void tearDown() throws Exception {\n-\t\tif (null != handler) {\n-\t\t\thandler.close();\n-\t\t}\n-\t\treset(TEMPPATH + SEP + \"log\", \"\");\n-        System.setErr(err);         \n-\t\tsuper.tearDown();\n-\t}\n-\n-\tpublic void testLock() throws Exception {\n-\t\tFileOutputStream output = new FileOutputStream(TEMPPATH + SEP + \"log\"\n-\t\t\t\t+ SEP + \"java1.test.0\");\n-\t\tFileHandler h = new FileHandler();\n-\t\th.publish(r);\n-\t\th.close();\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"java1.test.0\", h\n-\t\t\t\t.getFormatter());\n-\t\toutput.close();\n-\t}\n-\n-\t/*\n-\t * Class under test for void FileHandler()\n-\t */\n-\tpublic void testFileHandler() throws Exception {\n-\t\tassertEquals(handler.getEncoding(), \"iso-8859-1\");\n-\t\tassertTrue(handler.getFilter() instanceof MockFilter);\n-\t\tassertTrue(handler.getFormatter() instanceof MockFormatter);\n-\t\tassertEquals(handler.getLevel(), Level.FINE);\n-\t\tassertNotNull(handler.getErrorManager());\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\t// output 3 times, and all records left\n-\t\t// append mode is true\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\thandler = new FileHandler();\n-\t\t\thandler.publish(r);\n-\t\t\thandler.close();\n-\t\t}\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"java0.test.0\",\n-\t\t\t\tnew LogRecord[] { r, null, r, null, r, null, r },\n-\t\t\t\tnew MockFormatter());\n-\t}\n-\n-\tpublic void testDefaultValue() throws Exception {\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\tprops.clear();\n-\t\tmanager.readConfiguration(EnvironmentHelper\n-\t\t\t\t.PropertiesToInputStream(props));\n-\t\thandler = new FileHandler();\n-\t\tassertNull(handler.getEncoding());\n-\t\tassertNull(handler.getFilter());\n-\t\tassertTrue(handler.getFormatter() instanceof XMLFormatter);\n-\t\tassertEquals(handler.getLevel(), Level.ALL);\n-\t\tassertNotNull(handler.getErrorManager());\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\t// output 3 times, and only one record left\n-\t\t// default append mode is false\n-\t\tfor (int i = 0; i < 3; i++) {\n-\t\t\thandler = new FileHandler();\n-\t\t\thandler.publish(r);\n-\t\t\thandler.close();\n-\t\t}\n-\t\tassertFileContent(HOMEPATH, \"java0.log\", new XMLFormatter());\n-\t}\n-\n-\tprivate void assertFileContent(String homepath, String filename,\n-\t\t\tFormatter formatter) throws Exception {\n-\t\tassertFileContent(homepath, filename, new LogRecord[] { r }, formatter);\n-\t}\n-\n-\tprivate void assertFileContent(String homepath, String filename,\n-\t\t\tLogRecord[] lr, Formatter formatter) throws Exception {\n-\t\thandler.close();\n-\t\tString msg = \"\";\n-\t\t// if formatter is null, the file content should be empty\n-\t\t// else the message should be formatted given records\n-\t\tif (null != formatter) {\n-\t\t\tStringBuffer sb = new StringBuffer();\n-\t\t\tsb.append(formatter.getHead(handler));\n-\t\t\tfor (int i = 0; i < lr.length; i++) {\n-\t\t\t\tif (null == lr[i] && i < lr.length - 1) {\n-\t\t\t\t\t// if one record is null and is not the last record, means\n-\t\t\t\t\t// here is\n-\t\t\t\t\t// output completion point, should output tail, then output\n-\t\t\t\t\t// head\n-\t\t\t\t\t// (ready for next output)\n-\t\t\t\t\tsb.append(formatter.getTail(handler));\n-\t\t\t\t\tsb.append(formatter.getHead(handler));\n-\t\t\t\t} else {\n-\t\t\t\t\tsb.append(formatter.format(lr[i]));\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\tsb.append(formatter.getTail(handler));\n-\t\t\tmsg = sb.toString();\n-\t\t}\n-\t\tchar[] chars = new char[msg.length()];\n-\t\tReader reader = null;\n-\t\ttry {\n-\t\t\treader = new BufferedReader(new FileReader(homepath + SEP\n-\t\t\t\t\t+ filename));\n-\t\t\treader.read(chars);\n-\t\t\t// System.out.println(new String(chars));\n-\t\t\tassertEquals(msg, new String(chars));\n-\t\t\t// assert has reached the end of the file\n-\t\t\tassertEquals(-1, reader.read());\n-\t\t} finally {\n-\t\t\ttry {\n+        System.setErr(new PrintStream(errSubstituteStream));\n+    }\n+\n+    /**\n+     * \n+     */\n+    private void initProps() {\n+        props.clear();\n+        props.put(\"java.util.logging.FileHandler.level\", \"FINE\");\n+        props.put(\"java.util.logging.FileHandler.filter\", className\n+                + \"$MockFilter\");\n+        props.put(\"java.util.logging.FileHandler.formatter\", className\n+                + \"$MockFormatter\");\n+        props.put(\"java.util.logging.FileHandler.encoding\", \"iso-8859-1\");\n+        // limit to only two message\n+        props.put(\"java.util.logging.FileHandler.limit\", \"1000\");\n+        // rotation count is 2\n+        props.put(\"java.util.logging.FileHandler.count\", \"2\");\n+        // using append mode\n+        props.put(\"java.util.logging.FileHandler.append\", \"true\");\n+        props\n+                .put(\"java.util.logging.FileHandler.pattern\",\n+                        \"%t/log/java%u.test\");\n+    }\n+\n+    /*\n+     * @see TestCase#tearDown()\n+     */\n+    protected void tearDown() throws Exception {\n+        if (null != handler) {\n+            handler.close();\n+        }\n+        reset(TEMPPATH + SEP + \"log\", \"\");\n+        System.setErr(err);\n+        super.tearDown();\n+    }\n+\n+    public void testLock() throws Exception {\n+        FileOutputStream output = new FileOutputStream(TEMPPATH + SEP + \"log\"\n+                + SEP + \"java1.test.0\");\n+        FileHandler h = new FileHandler();\n+        h.publish(r);\n+        h.close();\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"java1.test.0\", h\n+                .getFormatter());\n+        output.close();\n+    }\n+\n+    /*\n+     * Class under test for void FileHandler()\n+     */\n+    public void testFileHandler() throws Exception {\n+        assertEquals(handler.getEncoding(), \"iso-8859-1\");\n+        assertTrue(handler.getFilter() instanceof MockFilter);\n+        assertTrue(handler.getFormatter() instanceof MockFormatter);\n+        assertEquals(handler.getLevel(), Level.FINE);\n+        assertNotNull(handler.getErrorManager());\n+        handler.publish(r);\n+        handler.close();\n+        // output 3 times, and all records left\n+        // append mode is true\n+        for (int i = 0; i < 3; i++) {\n+            handler = new FileHandler();\n+            handler.publish(r);\n+            handler.close();\n+        }\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"java0.test.0\",\n+                new LogRecord[] { r, null, r, null, r, null, r },\n+                new MockFormatter());\n+    }\n+\n+    public void testDefaultValue() throws Exception {\n+        handler.publish(r);\n+        handler.close();\n+        props.clear();\n+        manager.readConfiguration(EnvironmentHelper\n+                .PropertiesToInputStream(props));\n+        handler = new FileHandler();\n+        assertNull(handler.getEncoding());\n+        assertNull(handler.getFilter());\n+        assertTrue(handler.getFormatter() instanceof XMLFormatter);\n+        assertEquals(handler.getLevel(), Level.ALL);\n+        assertNotNull(handler.getErrorManager());\n+        handler.publish(r);\n+        handler.close();\n+        // output 3 times, and only one record left\n+        // default append mode is false\n+        for (int i = 0; i < 3; i++) {\n+            handler = new FileHandler();\n+            handler.publish(r);\n+            handler.close();\n+        }\n+        assertFileContent(HOMEPATH, \"java0.log\", new XMLFormatter());\n+    }\n+\n+    private void assertFileContent(String homepath, String filename,\n+            Formatter formatter) throws Exception {\n+        assertFileContent(homepath, filename, new LogRecord[] { r }, formatter);\n+    }\n+\n+    private void assertFileContent(String homepath, String filename,\n+            LogRecord[] lr, Formatter formatter) throws Exception {\n+        handler.close();\n+        String msg = \"\";\n+        // if formatter is null, the file content should be empty\n+        // else the message should be formatted given records\n+        if (null != formatter) {\n+            StringBuffer sb = new StringBuffer();\n+            sb.append(formatter.getHead(handler));\n+            for (int i = 0; i < lr.length; i++) {\n+                if (null == lr[i] && i < lr.length - 1) {\n+                    // if one record is null and is not the last record, means\n+                    // here is\n+                    // output completion point, should output tail, then output\n+                    // head\n+                    // (ready for next output)\n+                    sb.append(formatter.getTail(handler));\n+                    sb.append(formatter.getHead(handler));\n+                } else {\n+                    sb.append(formatter.format(lr[i]));\n+                }\n+            }\n+            sb.append(formatter.getTail(handler));\n+            msg = sb.toString();\n+        }\n+        char[] chars = new char[msg.length()];\n+        Reader reader = null;\n+        try {\n+            reader = new BufferedReader(new FileReader(homepath + SEP\n+                    + filename));\n+            reader.read(chars);\n+            // System.out.println(new String(chars));\n+            assertEquals(msg, new String(chars));\n+            // assert has reached the end of the file\n+            assertEquals(-1, reader.read());\n+        } finally {\n+            try {\n                 if (reader != null) {\n                     reader.close();\n                 }\n             } catch (Exception e) {\n                 // don't care\n             }\n-\t\t\treset(homepath, filename);\n-\t\t}\n-\t}\n-\n-\t/**\n-     *   Does a cleanup of  given file\n-     *\n-\t * @param homepath\n-\t * @param filename\n-\t */\n-\tprivate void reset(String homepath, String filename) {\n-\t\tFile file = null;\n-\t\ttry {\n-\t\t\tfile = new File(homepath + SEP + filename);\n-\t\t\tif (file.isFile()) {\n-\t\t\t\tfile.delete();\n-\t\t\t} else if (file.isDirectory()) {\n-\t\t\t\tFile[] files = file.listFiles();\n-\t\t\t\tfor (int i = 0; i < files.length; i++) {\n-\t\t\t\t\tfiles[i].delete();\n-\t\t\t\t}\n-\t\t\t\tfile.delete();\n-\t\t\t}\n-\t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t\ttry {\n-\t\t\tfile = new File(homepath + SEP + filename + \".lck\");\n-\t\t\tfile.delete();\n-\t\t} catch (Exception e) {\n-\t\t\te.printStackTrace();\n-\t\t}\n-\t}\n-\n-\tpublic void testLimitAndCount() throws Exception {\n-\t\thandler.close();\n-\t\t// very small limit value, count=2\n-\t\t// output, rename current output file to the second generation file\n-\t\t// close it and open a new file as rotation output\n-\t\thandler = new FileHandler(\"%t/testLimitCount%g\", 1, 2, false);\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount1\", handler.getFormatter());\n-\n-\t\t// very small limit value, count=1\n-\t\t// output once, rotate(equals to nothing output)\n-\t\thandler = new FileHandler(\"%t/testLimitCount%g\", 1, 1, false);\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0\", new LogRecord[0],\n-\t\t\t\thandler.getFormatter());\n-\n-\t\t// normal case, limit is 60(>2*msg length <3*msg length), append is\n-\t\t// false\n-\t\thandler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n-\t\tLogRecord[] rs = new LogRecord[10];\n-\t\t// batch output twice to test the append mode\n-\t\tfor (int i = 0; i < 5; i++) {\n-\t\t\trs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n-\t\t\thandler.publish(rs[i]);\n-\t\t}\n-\t\thandler.close();\n-\t\thandler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n-\t\tfor (int i = 5; i < 10; i++) {\n-\t\t\trs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n-\t\t\thandler.publish(rs[i]);\n-\t\t}\n-\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0.1\", new LogRecord[] {\n-\t\t\t\trs[5], rs[6], rs[7] }, handler.getFormatter());\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0.0\", new LogRecord[] {\n-\t\t\t\trs[8], rs[9] }, handler.getFormatter());\n-\n-\t\t// normal case, limit is 60(>2*msg length <3*msg length), append is true\n-\t\thandler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n-\t\t// batch output twice to test the append mode\n-\t\tfor (int i = 0; i < 5; i++) {\n-\t\t\trs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n-\t\t\thandler.publish(rs[i]);\n-\t\t}\n-\t\thandler.close();\n-\t\thandler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, true);\n-\t\tfor (int i = 5; i < 10; i++) {\n-\t\t\trs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n-\t\t\thandler.publish(rs[i]);\n-\t\t}\n-\t\thandler.close();\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0.2\", new LogRecord[] {\n-\t\t\t\trs[3], rs[4], null, rs[5] }, handler.getFormatter());\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0.1\", new LogRecord[] {\n-\t\t\t\trs[6], rs[7], rs[8] }, handler.getFormatter());\n-\t\tassertFileContent(TEMPPATH, \"testLimitCount0.0\",\n-\t\t\t\tnew LogRecord[] { rs[9] }, handler.getFormatter());\n-\t\t\n+            reset(homepath, filename);\n+        }\n+    }\n+\n+    /**\n+     * Does a cleanup of given file\n+     * \n+     * @param homepath\n+     * @param filename\n+     */\n+    private void reset(String homepath, String filename) {\n+        File file = null;\n+        try {\n+            file = new File(homepath + SEP + filename);\n+            if (file.isFile()) {\n+                file.delete();\n+            } else if (file.isDirectory()) {\n+                File[] files = file.listFiles();\n+                for (int i = 0; i < files.length; i++) {\n+                    files[i].delete();\n+                }\n+                file.delete();\n+            }\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+        try {\n+            file = new File(homepath + SEP + filename + \".lck\");\n+            file.delete();\n+        } catch (Exception e) {\n+            e.printStackTrace();\n+        }\n+    }\n+\n+    public void testLimitAndCount() throws Exception {\n+        handler.close();\n+        // very small limit value, count=2\n+        // output, rename current output file to the second generation file\n+        // close it and open a new file as rotation output\n+        handler = new FileHandler(\"%t/testLimitCount%g\", 1, 2, false);\n+        handler.publish(r);\n+        handler.close();\n+        assertFileContent(TEMPPATH, \"testLimitCount1\", handler.getFormatter());\n+\n+        // very small limit value, count=1\n+        // output once, rotate(equals to nothing output)\n+        handler = new FileHandler(\"%t/testLimitCount%g\", 1, 1, false);\n+        handler.publish(r);\n+        handler.close();\n+        assertFileContent(TEMPPATH, \"testLimitCount0\", new LogRecord[0],\n+                handler.getFormatter());\n+\n+        // normal case, limit is 60(>2*msg length <3*msg length), append is\n+        // false\n+        handler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n+        LogRecord[] rs = new LogRecord[10];\n+        // batch output twice to test the append mode\n+        for (int i = 0; i < 5; i++) {\n+            rs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n+            handler.publish(rs[i]);\n+        }\n+        handler.close();\n+        handler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n+        for (int i = 5; i < 10; i++) {\n+            rs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n+            handler.publish(rs[i]);\n+        }\n+\n+        assertFileContent(TEMPPATH, \"testLimitCount0.1\", new LogRecord[] {\n+                rs[5], rs[6], rs[7] }, handler.getFormatter());\n+        assertFileContent(TEMPPATH, \"testLimitCount0.0\", new LogRecord[] {\n+                rs[8], rs[9] }, handler.getFormatter());\n+\n+        // normal case, limit is 60(>2*msg length <3*msg length), append is true\n+        handler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, false);\n+        // batch output twice to test the append mode\n+        for (int i = 0; i < 5; i++) {\n+            rs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n+            handler.publish(rs[i]);\n+        }\n+        handler.close();\n+        handler = new FileHandler(\"%t/testLimitCount%u\", 60, 3, true);\n+        for (int i = 5; i < 10; i++) {\n+            rs[i] = new LogRecord(Level.SEVERE, \"msg\" + i);\n+            handler.publish(rs[i]);\n+        }\n+        handler.close();\n+        assertFileContent(TEMPPATH, \"testLimitCount0.2\", new LogRecord[] {\n+                rs[3], rs[4], null, rs[5] }, handler.getFormatter());\n+        assertFileContent(TEMPPATH, \"testLimitCount0.1\", new LogRecord[] {\n+                rs[6], rs[7], rs[8] }, handler.getFormatter());\n+        assertFileContent(TEMPPATH, \"testLimitCount0.0\",\n+                new LogRecord[] { rs[9] }, handler.getFormatter());\n+\n         FileHandler h1 = null;\n         FileHandler h2 = null;\n         try {\n             File logDir = new File(\"log\");\n-            reset(\"log\",\"\"); \n+            reset(\"log\", \"\");\n             logDir.mkdir();\n             h1 = new FileHandler(\"log/a\", 0, 1);\n             assertNotNull(h1);\n             h2 = new FileHandler(\"log/a\", 0, 1, false);\n             assertNotNull(h2);\n         } finally {\n-            try{\n+            try {\n                 h1.close();\n-            }catch(Exception e){\n+            } catch (Exception e) {\n             }\n-            try{\n+            try {\n                 h2.close();\n-            }catch(Exception e){\n+            } catch (Exception e) {\n             }\n             reset(\"log\", \"\");\n-        }\t\n-\t}\n-\n-\tpublic void testSecurity() throws IOException {\n-\t\tSecurityManager currentManager = System.getSecurityManager();\n-\n-\t\ttry {\n-\t\t\tSystem.setSecurityManager(new MockLogSecurityManager());\n-\t\t\ttry {\n-\t\t\t\thandler.close();\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\n-\t\t\thandler.publish(new LogRecord(Level.SEVERE, \"msg\"));\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler();\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern1\");\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern2\", true);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern3\", 1000, 1);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern4\", 1000, 1, true);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t} finally {\n-\t\t\tSystem.setSecurityManager(currentManager);\n-\t\t}\n-\n-\t}\n-\n-\tpublic void testFileSecurity() throws IOException {\n-\t\tSecurityManager currentManager = System.getSecurityManager();\n-\n-\t\ttry {\n-\t\t\tSystem.setSecurityManager(new MockFileSecurityManager());\n-\t\t\thandler.publish(new LogRecord(Level.SEVERE, \"msg\"));\n+        }\n+    }\n+\n+    public void testSecurity() throws IOException {\n+        SecurityManager currentManager = System.getSecurityManager();\n+\n+        try {\n+            System.setSecurityManager(new MockLogSecurityManager());\n+            try {\n+                handler.close();\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+\n+            handler.publish(new LogRecord(Level.SEVERE, \"msg\"));\n+            try {\n+                handler = new FileHandler();\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+\n+            try {\n+                handler = new FileHandler(\"pattern1\");\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern2\", true);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern3\", 1000, 1);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern4\", 1000, 1, true);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+        } finally {\n+            System.setSecurityManager(currentManager);\n+        }\n+\n+    }\n+\n+    public void testFileSecurity() throws IOException {\n+        SecurityManager currentManager = System.getSecurityManager();\n+\n+        try {\n+            System.setSecurityManager(new MockFileSecurityManager());\n+            handler.publish(new LogRecord(Level.SEVERE, \"msg\"));\n             try {\n                 handler.close();\n                 fail(\"should throw security exception\");\n             } catch (SecurityException e) {\n             }\n-            \n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler();\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern1\");\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern2\", true);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern3\", 1000, 1);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t\ttry {\n-\t\t\t\thandler = new FileHandler(\"pattern4\", 1000, 1, true);\n-\t\t\t\tfail(\"should throw security exception\");\n-\t\t\t} catch (SecurityException e) {\n-\t\t\t}\n-\t\t} finally {\n-\t\t\tSystem.setSecurityManager(currentManager);\n-\t\t}\n-\t}\n-\n-\tpublic void testInvalidProperty() throws Exception {\n-\t\tprops.put(\"java.util.logging.FileHandler.level\", \"null\");\n-\t\tprops.put(\"java.util.logging.FileHandler.filter\", className\n-\t\t\t\t+ \"$MockFilte\");\n-\t\tprops.put(\"java.util.logging.FileHandler.formatter\", className\n-\t\t\t\t+ \"$MockFormatte\");\n-\t\tprops.put(\"java.util.logging.FileHandler.encoding\", \"ut\");\n-\t\t// limit to only two message\n-\t\tprops.put(\"java.util.logging.FileHandler.limit\", \"-1\");\n-\t\t// rotation count is 2\n-\t\tprops.put(\"java.util.logging.FileHandler.count\", \"-1\");\n-\t\t// using append mode\n-\t\tprops.put(\"java.util.logging.FileHandler.append\", \"bad\");\n-\n-\t\thandler.close();\n-\n-\t\tmanager.readConfiguration(EnvironmentHelper\n-\t\t\t\t.PropertiesToInputStream(props));\n-\t\thandler = new FileHandler();\n-\t\tassertEquals(Level.ALL, handler.getLevel());\n-\t\tassertNull(handler.getFilter());\n-\t\tassertTrue(handler.getFormatter() instanceof XMLFormatter);\n-\t\tassertNull(handler.getEncoding());\n-\t\thandler.close();\n-\n-\t\tprops.put(\"java.util.logging.FileHandler.pattern\", \"\");\n-\t\tmanager.readConfiguration(EnvironmentHelper\n-\t\t\t\t.PropertiesToInputStream(props));\n-\t\ttry {\n-\t\t\thandler = new FileHandler();\n-\t\t\tfail(\"shouldn't open file with empty name\");\n-\t\t} catch (NullPointerException e) {\n-\t\t}\n-\t}\n-\n-\tpublic void testInvalidParams() throws IOException {\n-\n-\t\t// %t and %p parsing can add file separator automatically\n-\t\tFileHandler h1 = new FileHandler(\"%taaa\");\n-\t\th1.close();\n-\t\tFile file = new File(TEMPPATH + SEP + \"aaa\");\n-\t\tassertTrue(file.exists());\n-\t\treset(TEMPPATH, \"aaa\");\n-\n-\t\t// always parse special pattern\n-\t\ttry {\n-\t\t\th1 = new FileHandler(\"%t/%h\");\n-\t\t\tfail(\"should throw null exception\");\n-\t\t} catch (FileNotFoundException e) {\n-\t\t}\n-\t\th1 = new FileHandler(\"%t%g\");\n-\t\th1.close();\n-\t\tfile = new File(TEMPPATH + SEP + \"0\");\n-\t\tassertTrue(file.exists());\n-\t\treset(TEMPPATH, \"0\");\n-\t\th1 = new FileHandler(\"%t%u%g\");\n-\t\th1.close();\n-\t\tfile = new File(TEMPPATH + SEP + \"00\");\n-\t\tassertTrue(file.exists());\n-\t\treset(TEMPPATH, \"00\");\n-\n-\t\t// this is normal case\n-\t\th1 = new FileHandler(\"%t/%u%g%%g\");\n-\t\th1.close();\n-\t\tfile = new File(TEMPPATH + SEP + \"00%g\");\n-\t\tassertTrue(file.exists());\n-\t\treset(TEMPPATH, \"00%g\");\n-\n-\t\t// multi separator has no effect\n-\t\th1 = new FileHandler(\"//%t//multi%g\");\n-\t\th1.close();\n-\t\tfile = new File(TEMPPATH + SEP + \"multi0\");\n-\t\tassertTrue(file.exists());\n-\t\treset(TEMPPATH, \"multi0\");\n-\n-\t\t// bad directory, IOException\n-\t\ttry {\n-\t\t\th1 = new FileHandler(\"%t/baddir/multi%g\");\n-\t\t\tfail(\"should throw IO exception\");\n-\t\t} catch (IOException e) {\n-\t\t}\n-\t\tfile = new File(TEMPPATH + SEP + \"baddir\" + SEP + \"multi0\");\n-\t\tassertFalse(file.exists());\n-\n-\t\ttry {\n-\t\t\tnew FileHandler(null);\n-\t\t\tfail(\"should throw null exception\");\n-\t\t} catch (NullPointerException e) {\n-\t\t}\n-\t\ttry {\n-\t\t\thandler.publish(null);\n-\t\t} catch (NullPointerException e) {\n-\t\t\tfail(\"should not throw NPE\");\n-\t\t}\n-\t\ttry {\n-\t\t\tnew FileHandler(null, false);\n-\t\t\tfail(\"should throw null exception\");\n-\t\t} catch (NullPointerException e) {\n-\t\t}\n-\t\ttry {\n+\n+            try {\n+                handler = new FileHandler();\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+\n+            try {\n+                handler = new FileHandler(\"pattern1\");\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern2\", true);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern3\", 1000, 1);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+            try {\n+                handler = new FileHandler(\"pattern4\", 1000, 1, true);\n+                fail(\"should throw security exception\");\n+            } catch (SecurityException e) {\n+            }\n+        } finally {\n+            System.setSecurityManager(currentManager);\n+        }\n+    }\n+\n+    public void testInvalidProperty() throws Exception {\n+        props.put(\"java.util.logging.FileHandler.level\", \"null\");\n+        props.put(\"java.util.logging.FileHandler.filter\", className\n+                + \"$MockFilte\");\n+        props.put(\"java.util.logging.FileHandler.formatter\", className\n+                + \"$MockFormatte\");\n+        props.put(\"java.util.logging.FileHandler.encoding\", \"ut\");\n+        // limit to only two message\n+        props.put(\"java.util.logging.FileHandler.limit\", \"-1\");\n+        // rotation count is 2\n+        props.put(\"java.util.logging.FileHandler.count\", \"-1\");\n+        // using append mode\n+        props.put(\"java.util.logging.FileHandler.append\", \"bad\");\n+\n+        handler.close();\n+\n+        manager.readConfiguration(EnvironmentHelper\n+                .PropertiesToInputStream(props));\n+        handler = new FileHandler();\n+        assertEquals(Level.ALL, handler.getLevel());\n+        assertNull(handler.getFilter());\n+        assertTrue(handler.getFormatter() instanceof XMLFormatter);\n+        assertNull(handler.getEncoding());\n+        handler.close();\n+\n+        props.put(\"java.util.logging.FileHandler.pattern\", \"\");\n+        manager.readConfiguration(EnvironmentHelper\n+                .PropertiesToInputStream(props));\n+        try {\n+            handler = new FileHandler();\n+            fail(\"shouldn't open file with empty name\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n+    public void testInvalidParams() throws IOException {\n+\n+        // %t and %p parsing can add file separator automatically\n+        FileHandler h1 = new FileHandler(\"%taaa\");\n+        h1.close();\n+        File file = new File(TEMPPATH + SEP + \"aaa\");\n+        assertTrue(file.exists());\n+        reset(TEMPPATH, \"aaa\");\n+\n+        // always parse special pattern\n+        try {\n+            h1 = new FileHandler(\"%t/%h\");\n+            fail(\"should throw null exception\");\n+        } catch (FileNotFoundException e) {\n+        }\n+        h1 = new FileHandler(\"%t%g\");\n+        h1.close();\n+        file = new File(TEMPPATH + SEP + \"0\");\n+        assertTrue(file.exists());\n+        reset(TEMPPATH, \"0\");\n+        h1 = new FileHandler(\"%t%u%g\");\n+        h1.close();\n+        file = new File(TEMPPATH + SEP + \"00\");\n+        assertTrue(file.exists());\n+        reset(TEMPPATH, \"00\");\n+\n+        // this is normal case\n+        h1 = new FileHandler(\"%t/%u%g%%g\");\n+        h1.close();\n+        file = new File(TEMPPATH + SEP + \"00%g\");\n+        assertTrue(file.exists());\n+        reset(TEMPPATH, \"00%g\");\n+\n+        // multi separator has no effect\n+        h1 = new FileHandler(\"//%t//multi%g\");\n+        h1.close();\n+        file = new File(TEMPPATH + SEP + \"multi0\");\n+        assertTrue(file.exists());\n+        reset(TEMPPATH, \"multi0\");\n+\n+        // bad directory, IOException\n+        try {\n+            h1 = new FileHandler(\"%t/baddir/multi%g\");\n+            fail(\"should throw IO exception\");\n+        } catch (IOException e) {\n+        }\n+        file = new File(TEMPPATH + SEP + \"baddir\" + SEP + \"multi0\");\n+        assertFalse(file.exists());\n+\n+        try {\n+            new FileHandler(null);\n+            fail(\"should throw null exception\");\n+        } catch (NullPointerException e) {\n+        }\n+        try {\n+            handler.publish(null);\n+        } catch (NullPointerException e) {\n+            fail(\"should not throw NPE\");\n+        }\n+        try {\n+            new FileHandler(null, false);\n+            fail(\"should throw null exception\");\n+        } catch (NullPointerException e) {\n+        }\n+        try {\n             // regression test for Harmony-1299\n             new FileHandler(\"\");\n             fail(\"should throw IllegalArgumentException\");\n         } catch (IllegalArgumentException e) {\n-            // expected \n-        }\n-\t\ttry {\n-\t\t\tnew FileHandler(\"%t/java%u\", 0, 0);\n-\t\t\tfail(\"should throw IllegalArgumentException\");\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t}\n-\t\ttry {\n-\t\t\tnew FileHandler(\"%t/java%u\", -1, 1);\n-\t\t\tfail(\"should throw IllegalArgumentException\");\n-\t\t} catch (IllegalArgumentException e) {\n-\t\t}\n-\t}\n-\n-\t// set output stream still works, just like super StreamHandler\n-\tpublic void testSetOutputStream() throws Exception {\n-\t\tMockFileHandler handler = new MockFileHandler(\"%h/setoutput.log\");\n-\t\thandler.setFormatter(new MockFormatter());\n-\t\thandler.publish(r);\n-\n-\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n-\t\thandler.publicSetOutputStream(out);\n-\t\thandler.publish(r);\n-\t\thandler.close();\n-\t\tString msg = new String(out.toByteArray());\n-\t\tFormatter f = handler.getFormatter();\n-\t\tassertEquals(msg, f.getHead(handler) + f.format(r) + f.getTail(handler));\n-\t\tassertFileContent(HOMEPATH, \"setoutput.log\", handler.getFormatter());\n-\t}\n-\n-\t/*\n-\t * Class under test for void FileHandler(String)\n-\t */\n-\tpublic void testFileHandlerString() throws Exception {\n-\t\t// test if unique ids not specified, it will append at the end\n-\t\t// no generation number is used\n-\t\tFileHandler h = new FileHandler(\"%t/log/string\");\n-\t\tFileHandler h2 = new FileHandler(\"%t/log/string\");\n-\t\tFileHandler h3 = new FileHandler(\"%t/log/string\");\n-\t\tFileHandler h4 = new FileHandler(\"%t/log/string\");\n-\t\th.publish(r);\n-\t\th2.publish(r);\n-\t\th3.publish(r);\n-\t\th4.publish(r);\n-\t\th.close();\n-\t\th2.close();\n-\t\th3.close();\n-\t\th4.close();\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"string\", h.getFormatter());\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"string.1\", h.getFormatter());\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"string.2\", h.getFormatter());\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"string.3\", h.getFormatter());\n-\n-\t\t// default is append mode\n-\t\tFileHandler h6 = new FileHandler(\"%t/log/string%u.log\");\n-\t\th6.publish(r);\n-\t\th6.close();\n-\t\tFileHandler h7 = new FileHandler(\"%t/log/string%u.log\");\n-\t\th7.publish(r);\n-\t\th7.close();\n-\t\ttry {\n-\t\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"string0.log\", h\n-\t\t\t\t\t.getFormatter());\n-\t\t\tfail(\"should assertion failed\");\n-\t\t} catch (Error e) {\n-\t\t}\n-\t\tFile file = new File(TEMPPATH + SEP + \"log\");\n-\t\tassertTrue(file.list().length <= 2);\n-\n-\t\t// test unique ids\n-\t\tFileHandler h8 = new FileHandler(\"%t/log/%ustring%u.log\");\n-\t\th8.publish(r);\n-\t\tFileHandler h9 = new FileHandler(\"%t/log/%ustring%u.log\");\n-\t\th9.publish(r);\n-\t\th9.close();\n-\t\th8.close();\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"0string0.log\", h\n-\t\t\t\t.getFormatter());\n-\t\tassertFileContent(TEMPPATH + SEP + \"log\", \"1string1.log\", h\n-\t\t\t\t.getFormatter());\n-\t\tfile = new File(TEMPPATH + SEP + \"log\");\n-\t\tassertTrue(file.list().length <= 2);\n-\t}\n-\n-\t/*\n-\t * mock classes\n-\t */\n-\tpublic static class MockFilter implements Filter {\n-\t\tpublic boolean isLoggable(LogRecord record) {\n-\t\t\treturn !record.getMessage().equals(\"false\");\n-\t\t}\n-\t}\n-\n-\tpublic static class MockFormatter extends Formatter {\n-\t\tpublic String format(LogRecord r) {\n-\t\t\tif (null == r) {\n-\t\t\t\treturn \"\";\n-\t\t\t}\n-\t\t\treturn r.getMessage() + \" by MockFormatter\\n\";\n-\t\t}\n-\n-\t\tpublic String getTail(Handler h) {\n-\t\t\treturn \"tail\\n\";\n-\t\t}\n-\n-\t\tpublic String getHead(Handler h) {\n-\t\t\treturn \"head\\n\";\n-\t\t}\n-\t}\n-\n-\tpublic static class MockLogSecurityManager extends SecurityManager {\n-\t\tpublic void checkPermission(Permission perm) {\n-\t\t\tif (perm instanceof LoggingPermission) {\n-\t\t\t\tthrow new SecurityException();\n-\t\t\t}\n-\t\t\treturn;\n-\t\t}\n-\t}\n-\n-\tpublic static class MockFileSecurityManager extends SecurityManager {\n-\t\tpublic void checkPermission(Permission perm) {\n-\t\t\tif (perm instanceof FilePermission) {\n-\t\t\t\tthrow new SecurityException();\n-\t\t\t}\n-\t\t}\n-\t}\n-\n-\tpublic static class MockFileHandler extends FileHandler {\n-\t\tpublic MockFileHandler() throws IOException {\n-\t\t\tsuper();\n-\t\t}\n-\n-\t\tpublic MockFileHandler(String pattern) throws IOException {\n-\t\t\tsuper(pattern);\n-\t\t}\n-\n-\t\tpublic void publicSetOutputStream(OutputStream stream) {\n-\t\t\tsuper.setOutputStream(stream);\n-\t\t}\n-\t}\n+            // expected\n+        }\n+        try {\n+            new FileHandler(\"%t/java%u\", 0, 0);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+        try {\n+            new FileHandler(\"%t/java%u\", -1, 1);\n+            fail(\"should throw IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+        }\n+    }\n+\n+    // set output stream still works, just like super StreamHandler\n+    public void testSetOutputStream() throws Exception {\n+        MockFileHandler handler = new MockFileHandler(\"%h/setoutput.log\");\n+        handler.setFormatter(new MockFormatter());\n+        handler.publish(r);\n+\n+        ByteArrayOutputStream out = new ByteArrayOutputStream();\n+        handler.publicSetOutputStream(out);\n+        handler.publish(r);\n+        handler.close();\n+        String msg = new String(out.toByteArray());\n+        Formatter f = handler.getFormatter();\n+        assertEquals(msg, f.getHead(handler) + f.format(r) + f.getTail(handler));\n+        assertFileContent(HOMEPATH, \"setoutput.log\", handler.getFormatter());\n+    }\n+\n+    /*\n+     * Class under test for void FileHandler(String)\n+     */\n+    public void testFileHandlerString() throws Exception {\n+        // test if unique ids not specified, it will append at the end\n+        // no generation number is used\n+        FileHandler h = new FileHandler(\"%t/log/string\");\n+        FileHandler h2 = new FileHandler(\"%t/log/string\");\n+        FileHandler h3 = new FileHandler(\"%t/log/string\");\n+        FileHandler h4 = new FileHandler(\"%t/log/string\");\n+        h.publish(r);\n+        h2.publish(r);\n+        h3.publish(r);\n+        h4.publish(r);\n+        h.close();\n+        h2.close();\n+        h3.close();\n+        h4.close();\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"string\", h.getFormatter());\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"string.1\", h.getFormatter());\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"string.2\", h.getFormatter());\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"string.3\", h.getFormatter());\n+\n+        // default is append mode\n+        FileHandler h6 = new FileHandler(\"%t/log/string%u.log\");\n+        h6.publish(r);\n+        h6.close();\n+        FileHandler h7 = new FileHandler(\"%t/log/string%u.log\");\n+        h7.publish(r);\n+        h7.close();\n+        try {\n+            assertFileContent(TEMPPATH + SEP + \"log\", \"string0.log\", h\n+                    .getFormatter());\n+            fail(\"should assertion failed\");\n+        } catch (Error e) {\n+        }\n+        File file = new File(TEMPPATH + SEP + \"log\");\n+        assertTrue(file.list().length <= 2);\n+\n+        // test unique ids\n+        FileHandler h8 = new FileHandler(\"%t/log/%ustring%u.log\");\n+        h8.publish(r);\n+        FileHandler h9 = new FileHandler(\"%t/log/%ustring%u.log\");\n+        h9.publish(r);\n+        h9.close();\n+        h8.close();\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"0string0.log\", h\n+                .getFormatter());\n+        assertFileContent(TEMPPATH + SEP + \"log\", \"1string1.log\", h\n+                .getFormatter());\n+        file = new File(TEMPPATH + SEP + \"log\");\n+        assertTrue(file.list().length <= 2);\n+    }\n+\n+    public void testEmptyPattern_3params() throws SecurityException,\n+            IOException {\n+        // regression HARMONY-2421\n+        try {\n+            FileHandler fh = new FileHandler(new String(), 1, 1);\n+            fail(\"Expected an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testEmptyPattern_2params() throws SecurityException,\n+            IOException {\n+        // regression HARMONY-2421\n+        try {\n+            FileHandler fh = new FileHandler(new String(), true);\n+            fail(\"Expected an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    public void testEmptyPattern_4params() throws SecurityException,\n+            IOException {\n+        // regression HARMONY-2421\n+        try {\n+            FileHandler fh = new FileHandler(new String(), 1, 1, true);\n+            fail(\"Expected an IllegalArgumentException\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n+    /*\n+     * mock classes\n+     */\n+    public static class MockFilter implements Filter {\n+        public boolean isLoggable(LogRecord record) {\n+            return !record.getMessage().equals(\"false\");\n+        }\n+    }\n+\n+    public static class MockFormatter extends Formatter {\n+        public String format(LogRecord r) {\n+            if (null == r) {\n+                return \"\";\n+            }\n+            return r.getMessage() + \" by MockFormatter\\n\";\n+        }\n+\n+        public String getTail(Handler h) {\n+            return \"tail\\n\";\n+        }\n+\n+        public String getHead(Handler h) {\n+            return \"head\\n\";\n+        }\n+    }\n+\n+    public static class MockLogSecurityManager extends SecurityManager {\n+        public void checkPermission(Permission perm) {\n+            if (perm instanceof LoggingPermission) {\n+                throw new SecurityException();\n+            }\n+            return;\n+        }\n+    }\n+\n+    public static class MockFileSecurityManager extends SecurityManager {\n+        public void checkPermission(Permission perm) {\n+            if (perm instanceof FilePermission) {\n+                throw new SecurityException();\n+            }\n+        }\n+    }\n+\n+    public static class MockFileHandler extends FileHandler {\n+        public MockFileHandler() throws IOException {\n+            super();\n+        }\n+\n+        public MockFileHandler(String pattern) throws IOException {\n+            super(pattern);\n+        }\n+\n+        public void publicSetOutputStream(OutputStream stream) {\n+            super.setOutputStream(stream);\n+        }\n+    }\n }",
                "deletions": 590
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-1391 ([classlib][rmi] compatibility: Naming.bidi(String, null) expected NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@487581 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c42b79e82e9a54456f900ab0f275b91f00a3175a",
        "parent": "https://github.com/apache/harmony-classlib/commit/ab3340c852713f26b7999e087c7b82069a947162",
        "bug_id": "harmony-classlib_162",
        "file": [
            {
                "sha": "661e77c47a9bb6bef2ae4242f741bc096b58db45",
                "filename": "modules/rmi/src/main/java/java/rmi/Naming.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c42b79e82e9a54456f900ab0f275b91f00a3175a/modules/rmi/src/main/java/java/rmi/Naming.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c42b79e82e9a54456f900ab0f275b91f00a3175a/modules/rmi/src/main/java/java/rmi/Naming.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/rmi/src/main/java/java/rmi/Naming.java?ref=c42b79e82e9a54456f900ab0f275b91f00a3175a",
                "patch": "@@ -72,6 +72,10 @@ public static void unbind(String name) throws RemoteException, NotBoundException\n \n     public static void bind(String name, Remote obj) throws AlreadyBoundException,\n             MalformedURLException, RemoteException {\n+        if (obj == null) {\n+            throw new NullPointerException(Messages.getString(\"rmi.5C\")); //$NON-NLS-1$\n+        }\n+\n         if (name == null) {\n             // rmi.00=URL could not be null.\n             throw new NullPointerException(Messages.getString(\"rmi.00\")); //$NON-NLS-1$",
                "deletions": 0
            },
            {
                "sha": "823bd10e92a4b0a0cb0c706dbcd7030a8dfca30e",
                "filename": "modules/rmi/src/test/api/java/org/apache/harmony/rmi/NamingTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c42b79e82e9a54456f900ab0f275b91f00a3175a/modules/rmi/src/test/api/java/org/apache/harmony/rmi/NamingTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c42b79e82e9a54456f900ab0f275b91f00a3175a/modules/rmi/src/test/api/java/org/apache/harmony/rmi/NamingTest.java",
                "status": "added",
                "changes": 44,
                "additions": 44,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/rmi/src/test/api/java/org/apache/harmony/rmi/NamingTest.java?ref=c42b79e82e9a54456f900ab0f275b91f00a3175a",
                "patch": "@@ -0,0 +1,44 @@\n+/* \n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.harmony.rmi;\n+\n+import java.rmi.Naming;\n+\n+import junit.framework.TestCase;\n+\n+public class NamingTest extends TestCase {\n+\n+    public void testBidiBad() throws Exception {\n+        // Regression test HARMONY-1391\n+        \n+        try {\n+            Naming.bind(\"\", null);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            Naming.bind(\"//ttt:2222/zzz\", null);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch for HARMONY-1685 ([classlib][text] no NPE for NumberFormat.parseObject(\"test\", null)))\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@487569 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9697ac663453094f3265a1c7f6353ca42df46d3d",
        "parent": "https://github.com/apache/harmony-classlib/commit/ddd8b95e10385c8d88b56fe82d2cd037edd17484",
        "bug_id": "harmony-classlib_163",
        "file": [
            {
                "sha": "78d9b2d8e09cd58632445d3c3d00f17972280dd5",
                "filename": "modules/text/src/main/java/java/text/NumberFormat.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9697ac663453094f3265a1c7f6353ca42df46d3d/modules/text/src/main/java/java/text/NumberFormat.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9697ac663453094f3265a1c7f6353ca42df46d3d/modules/text/src/main/java/java/text/NumberFormat.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/NumberFormat.java?ref=9697ac663453094f3265a1c7f6353ca42df46d3d",
                "patch": "@@ -461,6 +461,10 @@ public Number parse(String string) throws ParseException {\n      */\n     @Override\n     public final Object parseObject(String string, ParsePosition position) {\n+        if (position == null) {\n+            throw new NullPointerException(Messages.getString(\"text.08\"));\n+        }\n+\n         try {\n             return parse(string, position);\n         } catch (Exception e) {",
                "deletions": 0
            },
            {
                "sha": "c2e9f10509d616d504e50f9d5b09cc3cc8b39288",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/NumberFormatTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9697ac663453094f3265a1c7f6353ca42df46d3d/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/NumberFormatTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9697ac663453094f3265a1c7f6353ca42df46d3d/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/NumberFormatTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/NumberFormatTest.java?ref=9697ac663453094f3265a1c7f6353ca42df46d3d",
                "patch": "@@ -221,6 +221,14 @@ public void test_setCurrencyLjava_util_Currency() {\n     public void test_parseObjectLjava_lang_StringLjava_text_ParsePosition() {\n     \t// regression test for HARMONY-1003\n     \tassertNull(NumberFormat.getInstance().parseObject(\"0\", new ParsePosition(-1)));\n+    \n+         // Regression for HARMONY-1685\n+         try {\n+             NumberFormat.getInstance().parseObject(\"test\", null);\n+             fail(\"NullPointerException expected\");\n+         } catch (NullPointerException e) {\n+            //expected\n+\t    }\n     }\n     \n     protected void setUp() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applying patch for HARMONY-2344 ([classlib] [beans] Method propertyChange() in class BeanContextSupport throws unspecified NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@482722 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2b25a9be47dd3f53446d3db6389f06ef361fd6d8",
        "parent": "https://github.com/apache/harmony-classlib/commit/30ec4285a5de1d2d4404752be5ef8d5e015c2b56",
        "bug_id": "harmony-classlib_164",
        "file": [
            {
                "sha": "883351790deef630c6bb3946c2deb039da495c80",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b25a9be47dd3f53446d3db6389f06ef361fd6d8/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b25a9be47dd3f53446d3db6389f06ef361fd6d8/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextSupport.java?ref=2b25a9be47dd3f53446d3db6389f06ef361fd6d8",
                "patch": "@@ -774,12 +774,14 @@ public synchronized void okToUseGui() {\n     }\n \n     public void propertyChange(PropertyChangeEvent pce) {\n+        Object source;\n \n-        if (!pce.getPropertyName().equals(BEAN_CONTEXT)) {\n+        if (pce == null || pce.getPropertyName() == null ||\n+                !pce.getPropertyName().equals(BEAN_CONTEXT)) {\n             return;\n         }\n \n-        Object source = pce.getSource();\n+        source = pce.getSource();\n \n         if (source instanceof BCSChild) {\n             BCSChild ch = (BCSChild) source;",
                "deletions": 2
            },
            {
                "sha": "55d74ff620f0015d2f41d28a7346625826983d7f",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b25a9be47dd3f53446d3db6389f06ef361fd6d8/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b25a9be47dd3f53446d3db6389f06ef361fd6d8/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextSupportTest.java?ref=2b25a9be47dd3f53446d3db6389f06ef361fd6d8",
                "patch": "@@ -1932,7 +1932,7 @@ public void testToArrayObjectArray_GreaterLength() {\n         String in[] = new String[5];\n         String out[] = (String[]) support.toArray(in);\n         assertSame(in, out);\n-        List<String> expected = Arrays.asList(new String[] { \"a\", \"b\", \"c\" });\n+        List<String> expected = Arrays.asList(new String[] { \"a\", \"b\", \"c\"});\n         for (int i = 0; i < expected.size(); i++) {\n             assertTrue(expected.contains(out[i]));\n         }\n@@ -2152,5 +2152,15 @@ public static void assertEqualsSerially(BeanContextSupport orig,\n                 \"okToUseGui\"));\n         assertEquals(Utils.getField(orig, \"designTime\"), Utils.getField(ser,\n                 \"designTime\"));\n-    }   \n+    }\n+\n+\n+    public void testPropertyChangePropertyChangeEvent() {\n+        BeanContextServicesSupport s = new BeanContextServicesSupport();\n+        PropertyChangeSupport p= new PropertyChangeSupport(new Object());\n+\n+        p.addPropertyChangeListener(s);\n+        p.firePropertyChange(null, new Object(), new Object());\n+    }\n+\n }",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix and regression test for HARMONY-2408 ([classlib][security] java.security.Signer.setKeyPair(null) throws InvalidParameterException while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@482597 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3b7f4c657a8077931b1583ca6cc29ebc4da4df93",
        "parent": "https://github.com/apache/harmony-classlib/commit/8323da313b83b370768b8968bfa17806a7a89103",
        "bug_id": "harmony-classlib_165",
        "file": [
            {
                "sha": "972c46e1d7e2657d5505d113c01b4b70704fae30",
                "filename": "modules/security/src/main/java/common/java/security/Signer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3b7f4c657a8077931b1583ca6cc29ebc4da4df93/modules/security/src/main/java/common/java/security/Signer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3b7f4c657a8077931b1583ca6cc29ebc4da4df93/modules/security/src/main/java/common/java/security/Signer.java",
                "status": "modified",
                "changes": 8,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/Signer.java?ref=3b7f4c657a8077931b1583ca6cc29ebc4da4df93",
                "patch": "@@ -81,8 +81,12 @@ public PrivateKey getPrivateKey() {\n      */\n     public final void setKeyPair(KeyPair pair)\n             throws InvalidParameterException, KeyException {\n-        if ((pair == null) || (pair.getPrivate() == null)\n-                || (pair.getPublic() == null)) {\n+        \n+        if (pair == null) {\n+            throw new NullPointerException();\n+        }\n+\n+        if ((pair.getPrivate() == null) || (pair.getPublic() == null)) {\n             throw new InvalidParameterException();\n         }\n         SecurityManager sm = System.getSecurityManager();",
                "deletions": 2
            },
            {
                "sha": "e7e4da66833613fc94cc93e389626615bf640bea",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SignerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3b7f4c657a8077931b1583ca6cc29ebc4da4df93/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SignerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3b7f4c657a8077931b1583ca6cc29ebc4da4df93/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SignerTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SignerTest.java?ref=3b7f4c657a8077931b1583ca6cc29ebc4da4df93",
                "patch": "@@ -147,6 +147,14 @@ public void testGetPrivateKey_denied() throws Exception {\n      */\n     public void test_setKeyPairLjava_security_KeyPair() throws Exception {\n         \n+        // Regression for HARMONY-2408\n+        // test: NullPointerException if pair is null\n+        try {\n+            new SignerStub(\"name\").setKeyPair(null);\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+        \n         // test: SecurityException if permission is denied\n         SecurityManager oldSm = System.getSecurityManager();\n         MySecurityManager sm = new MySecurityManager();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch HARMONY-2227 ([classlib][awt] MenuBar methods remove(MenuComponent) and setHelpMenu(Menu) throw unspecified NPE for null parameters)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@479024 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/997250da2ead7aef235fcd965c3a2b51843defc4",
        "parent": "https://github.com/apache/harmony-classlib/commit/00d3b3925ada0139439eacccaf2f9a2e360f221c",
        "bug_id": "harmony-classlib_166",
        "file": [
            {
                "sha": "8174cdf05fb7a830df2f13fc9e4415a4f757e614",
                "filename": "modules/awt/src/main/java/common/java/awt/MenuBar.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/997250da2ead7aef235fcd965c3a2b51843defc4/modules/awt/src/main/java/common/java/awt/MenuBar.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/997250da2ead7aef235fcd965c3a2b51843defc4/modules/awt/src/main/java/common/java/awt/MenuBar.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/MenuBar.java?ref=997250da2ead7aef235fcd965c3a2b51843defc4",
                "patch": "@@ -184,6 +184,7 @@ public Menu add(Menu menu) {\n     }\n \n     public void remove(MenuComponent menu) {\n+        if (menu == null) return;\n         toolkit.lockAWT();\n         try {\n             menuList.remove(menu);\n@@ -311,9 +312,6 @@ public int getMenuCount() {\n     }\n \n     public void setHelpMenu(Menu menu) {\n-        if (menu == null) {\n-            throw new NullPointerException();\n-        }\n         toolkit.lockAWT();\n         try {\n             if (helpMenu == menu) {",
                "deletions": 3
            },
            {
                "sha": "9c3b2f35c056c1dec6349b3042bb754113a9dc46",
                "filename": "modules/awt/src/test/api/java/common/java/awt/MenuBarTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/997250da2ead7aef235fcd965c3a2b51843defc4/modules/awt/src/test/api/java/common/java/awt/MenuBarTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/997250da2ead7aef235fcd965c3a2b51843defc4/modules/awt/src/test/api/java/common/java/awt/MenuBarTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 20,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/MenuBarTest.java?ref=997250da2ead7aef235fcd965c3a2b51843defc4",
                "patch": "@@ -113,4 +113,24 @@ private void checkShortcutItemNotExists(int vkey, boolean shift) {\n         MenuItem mi = mb.getShortcutMenuItem(ms);\n         assertNull(mi);\n     }\n+    \n+    public void testRemove1() {\n+        MenuBar m = new MenuBar();\n+        try {\n+            m.remove(null);\n+            assertTrue(true);\n+        } catch (Throwable t) {\n+            fail(\"Unexpected exception : \" + t);\n+        }\n+    }\n+    \n+    public void testSetHelpMenu() {\n+        MenuBar m = new MenuBar();\n+        try {\n+            m.setHelpMenu(null);\n+            assertTrue(true);\n+        } catch (Throwable t) {\n+            fail(\"Unexpected exception : \" + t);\n+        }\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "apply patch for HARMONY-2256 ([classlib][luni]should throw NPE when put/get a null value to/from env map.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@478521 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d1fabca8f28d77894516842ce01712f1c7601b3b",
        "parent": "https://github.com/apache/harmony-classlib/commit/2e7226f4e2bd1adb417dc406a7a5024619a43a03",
        "bug_id": "harmony-classlib_167",
        "file": [
            {
                "sha": "89332c2549767310775a8afc7ef75f370e50fb15",
                "filename": "modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d1fabca8f28d77894516842ce01712f1c7601b3b/modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d1fabca8f28d77894516842ce01712f1c7601b3b/modules/luni/src/main/java/java/lang/ProcessBuilder.java",
                "status": "modified",
                "changes": 26,
                "additions": 25,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/lang/ProcessBuilder.java?ref=d1fabca8f28d77894516842ce01712f1c7601b3b",
                "patch": "@@ -66,7 +66,7 @@ public ProcessBuilder(List<String> command) {\n             throw new NullPointerException();\n         }\n         this.command = command;\n-        this.environment = new HashMap<String, String>(System.getenv());\n+        this.environment = new ProcessHashMap<String, String>(System.getenv());\n     }\n \n     /**\n@@ -216,4 +216,28 @@ public Process start() throws IOException {\n         // TODO implement support for redirectErrorStream\n         return process;\n     }\n+    \n+    private class ProcessHashMap<K, V> extends HashMap<K, V> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        public ProcessHashMap(Map<K, V> env) {\n+            super(env);\n+        }\n+        @Override\n+        public V put(K key, V value) {\n+            if(key == null || value == null){\n+                throw new NullPointerException();\n+            }\n+            return super.put(key, value);\n+        }\n+        @Override\n+        public V get(Object key) {\n+            if(key == null){\n+                throw new NullPointerException();\n+            }\n+            return super.get(key);\n+        }\n+    }\n }\n+",
                "deletions": 1
            },
            {
                "sha": "9d2b4bbf68c3b5356ce8fb4e8b38cac36307af77",
                "filename": "modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ProcessBuilderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d1fabca8f28d77894516842ce01712f1c7601b3b/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ProcessBuilderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d1fabca8f28d77894516842ce01712f1c7601b3b/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ProcessBuilderTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/lang/ProcessBuilderTest.java?ref=d1fabca8f28d77894516842ce01712f1c7601b3b",
                "patch": "@@ -90,6 +90,24 @@ public void testEnvironment() {\n         env.clear();\n         env = pb.environment();\n         assertTrue(env.isEmpty());\n+        try {\n+            env.put(null,\"\");\n+            fail(\"should throw NPE.\");\n+        } catch (NullPointerException e) {\n+            // expected;\n+        }\n+        try {\n+            env.put(\"\",null);\n+            fail(\"should throw NPE.\");\n+        } catch (NullPointerException e) {\n+            // expected;\n+        }\n+        try {\n+            env.get(null);\n+            fail(\"should throw NPE.\");\n+        } catch (NullPointerException e) {\n+            // expected;\n+        }\n     }\n \n     public void testRedirectErrorStream() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1686 ([luni][jndi] javax.naming.directory.InitialContext.composeName(null,Name) does not throw unspecified NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@475333 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/82767346776c5676f85e962e120481c62e964b8b",
        "parent": "https://github.com/apache/harmony-classlib/commit/8efd7b4ec6bb68a48d37548fa43059bca32d938e",
        "bug_id": "harmony-classlib_168",
        "file": [
            {
                "sha": "e6957be65e8b7ae9c20b737302ddf33fe1e4591d",
                "filename": "modules/jndi/src/main/java/javax/naming/InitialContext.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/82767346776c5676f85e962e120481c62e964b8b/modules/jndi/src/main/java/javax/naming/InitialContext.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/82767346776c5676f85e962e120481c62e964b8b/modules/jndi/src/main/java/javax/naming/InitialContext.java",
                "status": "modified",
                "changes": 50,
                "additions": 32,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/jndi/src/main/java/javax/naming/InitialContext.java?ref=82767346776c5676f85e962e120481c62e964b8b",
                "patch": "@@ -426,30 +426,44 @@ public NameParser getNameParser(String name) throws NamingException {\n         return getURLOrDefaultInitCtx(name).getNameParser(name);\n     }\n \n+    /**\n+     * Composes the name of this context with a name relative to this context.\n+     * Because an initial context could not be named relative to any context\n+     * except itself, the value of the prefix parameter must be an empty name.\n+     * \n+     * @param name\n+     *            a name relative to this context.\n+     * @param prefix\n+     *            the name of this context relative to one of its ancestors.\n+     * \n+     * @return the composition of prefix and name.\n+     * @throws NamingException\n+     *             if a naming exception happens.\n+     */\n     public Name composeName(Name name, Name prefix) throws NamingException {\n         if (null == name) {\n-            // jndi.02=Invalid name.\n-            throw new InvalidNameException(Messages.getString(\"jndi.02\"));  //$NON-NLS-1$\n+            throw new NullPointerException();\n         }\n-        if (prefix == null) {\n-            prefix = new CompositeName(\"\"); //$NON-NLS-1$\n-        }\n-        Name comName = (Name) prefix.clone();\n-        comName.addAll(name);\n-        return comName;\n+        return (Name) name.clone();\n     }\n \n+    /**\n+     * Composes the name of this context with a name relative to this context.\n+     * Because an initial context could not be named relative to any context\n+     * except itself, the value of the prefix parameter must be an empty name.\n+     * \n+     * @param name\n+     *            a name relative to this context.\n+     * @param prefix\n+     *            the name of this context relative to one of its ancestors.\n+     * \n+     * @return the composition of prefix and name.\n+     * @throws NamingException\n+     *             if a naming exception happens.\n+     */\n     public String composeName(String name, String prefix)\n-        throws NamingException {\n-        if (null == name) {\n-            // jndi.02=Invalid name.\n-            throw new InvalidNameException(Messages.getString(\"jndi.02\"));  //$NON-NLS-1$\n-        }\n-        if (prefix == null) {\n-            prefix = \"\"; //$NON-NLS-1$\n-        }\n-        return composeName(new CompositeName(name), new CompositeName(prefix))\n-            .toString();\n+            throws NamingException {\n+        return name;\n     }\n \n     public Object addToEnvironment(String propName, Object propVal)",
                "deletions": 18
            },
            {
                "sha": "e1c1e6dcaefdd46d04dea3a8fee90e07540fff8e",
                "filename": "modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/InitialContextMockTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/82767346776c5676f85e962e120481c62e964b8b/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/InitialContextMockTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/82767346776c5676f85e962e120481c62e964b8b/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/InitialContextMockTest.java",
                "status": "modified",
                "changes": 88,
                "additions": 70,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/jndi/src/test/java/org/apache/harmony/jndi/tests/javax/naming/InitialContextMockTest.java?ref=82767346776c5676f85e962e120481c62e964b8b",
                "patch": "@@ -178,32 +178,84 @@ public void testComposeName_name_InvalidName() throws NamingException {\n         gContext.composeName(name, pfx);\n         // assertTrue(InvokeRecord.equals(null, name, pfx));\n     }\n-\n-    public void testComposeName_name_null() throws NamingException {\n-        log.setMethod(\"testComposeName_name_null\");\n-        Name empty = new CompositeName(\"\");\n-        try {\n-            gContext.composeName((Name) null, empty);\n-            fail(\"Should throw InvalidNameException.\");\n-        } catch (InvalidNameException e) {}\n-        // assertFalse(InvokeRecord.equals(null, null, empty));\n-    }\n-\n+    \n     public void testComposeName_name_pfx_null() throws NamingException {\n         log.setMethod(\"testComposeName_name_pfx_null\");\n         Name name = new CompositeName(\"namepfxnull\");\n         gContext.composeName(name, null);\n         // assertFalse(InvokeRecord.equals(null, name, null));\n     }\n \n-    public void testComposeName_string_null() throws NamingException {\n-        log.setMethod(\"testComposeName_string_null\");\n-        String pfx = \"\";\n+    /**\n+     * @tests javax.naming.InitialContext#composeName(Name,Name)\n+     */\n+    public void testComposeNameLjavax_naming_NameLjavax_naming_Name()\n+            throws NamingException {\n+        log.setMethod(\"testComposeName_string_null\"); //$NON-NLS-1$\n+        InitialContext initialContext = new InitialContext();\n+\n         try {\n-            gContext.composeName((String) null, pfx);\n-            fail(\"Should throw InvalidNameException.\");\n-        } catch (InvalidNameException e) {}\n-        // assertFalse(InvokeRecord.equals(null, null, pfx));\n+            initialContext.composeName((CompositeName) null,\n+                    (CompositeName) null);\n+            fail(\"Should throw NullPointerException\"); //$NON-NLS-1$\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            initialContext.composeName(null, new CompositeName(\"prefix\")); //$NON-NLS-1$\n+            fail(\"Should throw NullPointerException\"); //$NON-NLS-1$\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        Name result = initialContext.composeName(\n+                new CompositeName(\"a/b/c\"), (CompositeName) null); //$NON-NLS-1$\n+        assertEquals(\"a/b/c\", result.toString()); //$NON-NLS-1$\n+\n+        result = initialContext.composeName(\n+                new CompositeName(\"a/b/c\"), new CompositeName(\"\")); //$NON-NLS-1$//$NON-NLS-2$\n+        assertEquals(\"a/b/c\", result.toString()); //$NON-NLS-1$\n+        \n+        result = initialContext.composeName(\n+                new CompositeName(\"a/b/c\"), new CompositeName(\"prefix\")); //$NON-NLS-1$//$NON-NLS-2$\n+        assertEquals(\"a/b/c\", result.toString()); //$NON-NLS-1$\n+\n+        result = initialContext.composeName(\n+                new CompositeName(\"testString\"), new CompositeName(\"a/b/c/d\")); //$NON-NLS-1$//$NON-NLS-2$\n+        assertEquals(\"testString\", result.toString()); //$NON-NLS-1$\n+        \n+        CompositeName cn = new CompositeName(\"a/b/c\"); //$NON-NLS-1$\n+        result = initialContext.composeName(cn, new CompositeName(\"prefix\")); //$NON-NLS-1$\n+        cn.add(\"/d\"); //$NON-NLS-1$\n+        assertEquals(\"a/b/c\", result.toString()); //$NON-NLS-1$\n+    }\n+    \n+    /**\n+     * @tests javax.naming.InitialContext#composeName(String,String)\n+     */\n+    public void testComposeNameLjava_lang_StringLjava_lang_String()\n+            throws NamingException {\n+        log.setMethod(\"testComposeName_string_null\"); //$NON-NLS-1$\n+        InitialContext initialContext = new InitialContext();\n+\n+        String result = initialContext.composeName((String) null, (String) null);\n+        assertNull(result);\n+\n+        result = initialContext.composeName((String) null, \"\"); //$NON-NLS-1$\n+        assertNull(result);\n+\n+        result = initialContext.composeName(\"a/b/c\", (String) null); //$NON-NLS-1$ //$NON-NLS-2$\n+        assertEquals(\"a/b/c\", result); //$NON-NLS-1$\n+        \n+        result = initialContext.composeName(\"a/b/c\", \"\"); //$NON-NLS-1$ //$NON-NLS-2$\n+        assertEquals(\"a/b/c\", result); //$NON-NLS-1$\n+        \n+        result = initialContext.composeName(\"a/b/c\", \"prefix\"); //$NON-NLS-1$ //$NON-NLS-2$\n+        assertEquals(\"a/b/c\", result); //$NON-NLS-1$\n+\n+        result = initialContext.composeName(\"testString\", \"a/b/c/d\"); //$NON-NLS-1$ //$NON-NLS-2$\n+        assertEquals(\"testString\", result); //$NON-NLS-1$\n     }\n \n     public void testComposeName_string_pfx_null() throws NamingException {",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1627 ([classlib][awt] CaffeineMark 3.0 sometimes fails with NPE on Dialog benchmark)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@469700 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8037431cb2b3c42b38176a00ef657a51d76800a5",
        "parent": "https://github.com/apache/harmony-classlib/commit/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
        "bug_id": "harmony-classlib_169",
        "file": [
            {
                "sha": "37b4dcab007fbf33fbba4a5bd34bb5f700a8cfd5",
                "filename": "modules/awt/src/main/java/common/java/awt/TextComponent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8037431cb2b3c42b38176a00ef657a51d76800a5/modules/awt/src/main/java/common/java/awt/TextComponent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8037431cb2b3c42b38176a00ef657a51d76800a5/modules/awt/src/main/java/common/java/awt/TextComponent.java",
                "status": "modified",
                "changes": 18,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/TextComponent.java?ref=8037431cb2b3c42b38176a00ef657a51d76800a5",
                "patch": "@@ -349,7 +349,9 @@ public void replaceSelectedText(String text) {\n             try {\n                 int start = Math.min(dot, mark);\n                 int length = Math.abs(dot - mark);\n-                document.replace(start, length, text, null);\n+                synchronized(TextComponent.this) {\n+                    document.replace(start, length, text, null);\n+                }\n             } catch (final BadLocationException e) {\n             }\n         }\n@@ -823,7 +825,9 @@ public void setText(String text) {\n                 caret.setDot(0, caret.getDotBias());\n             }\n             int oldCaretPos = caret.getDot();\n-            document.replace(0, document.getLength(), text, null);\n+            synchronized (this) {\n+                document.replace(0, document.getLength(), text, null);\n+            }\n             if (!isDisplayable() && (oldCaretPos != caret.getDot())) {\n                 // return caret back to emulate \"no movement\"\n                 caret.setDot(oldCaretPos, caret.getDotBias());\n@@ -986,8 +990,14 @@ void prepaint(Graphics g) {\n         Rectangle client = getClient();\n         Shape oldClip = g.getClip();\n         g.clipRect(client.x, client.y, client.width, client.height);\n-        rootViewContext.getView().paint(g, r);\n-        caret.paint(g);\n+        document.readLock();\n+        try {\n+            rootViewContext.getView().paint(g, r);\n+            caret.paint(g);\n+        } finally {\n+            document.readUnlock();\n+        }\n+       \n         g.setClip(oldClip);\n     }\n ",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1470\n[classlib][awt] GradientPaint doesn't throw NPE if Color is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@466036 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ea094a1deaa1a3b817c44ac178843b0cb4c527e3",
        "parent": "https://github.com/apache/harmony-classlib/commit/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d",
        "bug_id": "harmony-classlib_170",
        "file": [
            {
                "sha": "87688cc54908b57bce349f77f4362c484662ddc3",
                "filename": "modules/awt/src/main/java/common/java/awt/GradientPaint.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ea094a1deaa1a3b817c44ac178843b0cb4c527e3/modules/awt/src/main/java/common/java/awt/GradientPaint.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ea094a1deaa1a3b817c44ac178843b0cb4c527e3/modules/awt/src/main/java/common/java/awt/GradientPaint.java",
                "status": "modified",
                "changes": 11,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/GradientPaint.java?ref=ea094a1deaa1a3b817c44ac178843b0cb4c527e3",
                "patch": "@@ -49,8 +49,15 @@\n      */\n     boolean cyclic;\n \n-    public GradientPaint(Point2D point1, Color color1, Point2D point2, Color color2,\n-            boolean cyclic) {\n+    public GradientPaint(Point2D point1, Color color1, Point2D point2,\n+            Color color2, boolean cyclic) {\n+        if (point1 == null || point2 == null) {\n+            throw new NullPointerException(\"Point is null\");\n+        }\n+        if (color1 == null || color2 == null) {\n+            throw new NullPointerException(\"Color is null\");\n+        }\n+\n         this.point1 = point1;\n         this.point2 = point2;\n         this.color1 = color1;",
                "deletions": 2
            },
            {
                "sha": "49a3ba786087de6cc112e2d9683e00855f643fe7",
                "filename": "modules/awt/src/test/api/java/common/java/awt/GradientPaintTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ea094a1deaa1a3b817c44ac178843b0cb4c527e3/modules/awt/src/test/api/java/common/java/awt/GradientPaintTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ea094a1deaa1a3b817c44ac178843b0cb4c527e3/modules/awt/src/test/api/java/common/java/awt/GradientPaintTest.java",
                "status": "modified",
                "changes": 67,
                "additions": 54,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/GradientPaintTest.java?ref=ea094a1deaa1a3b817c44ac178843b0cb4c527e3",
                "patch": "@@ -30,19 +30,60 @@\n \n     GradientPaint gp;\n \n-    public GradientPaintTest(String name) {\n-        super(name);\n-    }\n-\n-    @Override\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-//      gp = new GradientPaint();\n-    }\n-\n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n+    public void testContructorBad() {\n+        // Regression for HARMONY-1470\n+        try {\n+            new GradientPaint(1, 2, null, 3, 4, new Color(255), false);\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(1, 2, new Color(255), 3, 4, null, false);\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(1, 2, null, 4, 5, new Color(255));\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(1, 2, new Color(255), 4, 5, null);\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(null, new Color(255), new Point2D.Float(),\n+                    new Color(255));\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(new Point2D.Float(), null, new Point2D.Float(),\n+                    new Color(255));\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(new Point2D.Float(), new Color(255), null,\n+                    new Color(255));\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            new GradientPaint(new Point2D.Float(), new Color(255),\n+                    new Point2D.Float(), null);\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n     }\n \n     public void testGetPoint1() {",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1471\n[classlib][awt] TexturePaint expected NPE if one of input parameters is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@466035 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d",
        "parent": "https://github.com/apache/harmony-classlib/commit/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970",
        "bug_id": "harmony-classlib_171",
        "file": [
            {
                "sha": "5c03fcccb9739e8f5ea6f39405aa68e20ac40e96",
                "filename": "modules/awt/src/main/java/common/java/awt/TexturePaint.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d/modules/awt/src/main/java/common/java/awt/TexturePaint.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d/modules/awt/src/main/java/common/java/awt/TexturePaint.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/TexturePaint.java?ref=ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d",
                "patch": "@@ -38,6 +38,12 @@\n     Rectangle2D anchor;\n \n     public TexturePaint(BufferedImage img, Rectangle2D anchor) {\n+        if (img == null) {\n+            throw new NullPointerException(\"Image is null\");\n+        }\n+        if (anchor == null) {\n+            throw new NullPointerException(\"Anchor is null\");\n+        }\n         this.img = img;\n         this.anchor = anchor;\n     }",
                "deletions": 0
            },
            {
                "sha": "33ec0c1cf86f661bd816579aab67d74846087ba7",
                "filename": "modules/awt/src/test/api/java/common/java/awt/TexturePaintTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d/modules/awt/src/test/api/java/common/java/awt/TexturePaintTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d/modules/awt/src/test/api/java/common/java/awt/TexturePaintTest.java",
                "status": "added",
                "changes": 42,
                "additions": 42,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/TexturePaintTest.java?ref=ec75fe4d2f5535c498a7a0b14a9d39816e9fcd0d",
                "patch": "@@ -0,0 +1,42 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+package java.awt;\n+\n+import java.awt.image.BufferedImage;\n+\n+import junit.framework.TestCase;\n+\n+public class TexturePaintTest extends TestCase {\n+\n+    public void testContructorBad() {\n+        // Regression HARMONY-1471\n+        try {\n+            new TexturePaint(null, new Rectangle());\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new TexturePaint(new BufferedImage(10, 10,\n+                    BufferedImage.TYPE_INT_ARGB), null);\n+            fail(\"expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1524\n[classlib][net] unexpected NPE for SocketPermission.equals(null));\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@466032 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970",
        "parent": "https://github.com/apache/harmony-classlib/commit/29c37009346ec282049326c7439b0c94d38704d5",
        "bug_id": "harmony-classlib_172",
        "file": [
            {
                "sha": "6e90ded280a228f901cd93c749cff9e4d915d875",
                "filename": "modules/luni/src/main/java/java/net/SocketPermission.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970/modules/luni/src/main/java/java/net/SocketPermission.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970/modules/luni/src/main/java/java/net/SocketPermission.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/SocketPermission.java?ref=0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970",
                "patch": "@@ -148,10 +148,10 @@ public SocketPermission(String host, String action) {\n \t */\n \t@Override\n     public boolean equals(Object o) {\n-\t\tif (this == o) {\n+        if (this == o) {\n             return true;\n         }\n-\t\tif (this.getClass() != o.getClass()) {\n+        if (o == null || this.getClass() != o.getClass()) {\n             return false;\n         }\n \t\tSocketPermission sp = (SocketPermission) o;",
                "deletions": 2
            },
            {
                "sha": "cd7125955f77e961ddde5b6eff60ca144bb47d62",
                "filename": "modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java?ref=0e3ce4313e3bb0d55f3d897c5437a0d3d9bb4970",
                "patch": "@@ -86,6 +86,9 @@ public void test_equalsLjava_lang_Object() {\n \t\tSocketPermission sp2 = new SocketPermission(\"test1.com\",\n \t\t\t\t\"resolve,connect\");\n \t\tassertTrue(\"Different cases should be equal\", sp1.equals(sp2));\n+\n+        // Regression for HARMONY-1524\n+        assertFalse(sp1.equals(null));\n \t}\n \n \t/**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1405\n[classlib][awt] AffineTransform.transform(Point2D[], int, Point2D[], int, int) expected NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465993 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6036fc54750820021a8fbb5abb3520b7814a36f3",
        "parent": "https://github.com/apache/harmony-classlib/commit/88e09484b1621587bbc4dd8bba1cc8f9de9601f1",
        "bug_id": "harmony-classlib_173",
        "file": [
            {
                "sha": "5c8ab0754d64dd3c18060e15b20e92939aa1fa95",
                "filename": "modules/awt/src/main/java/common/java/awt/geom/AffineTransform.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6036fc54750820021a8fbb5abb3520b7814a36f3/modules/awt/src/main/java/common/java/awt/geom/AffineTransform.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6036fc54750820021a8fbb5abb3520b7814a36f3/modules/awt/src/main/java/common/java/awt/geom/AffineTransform.java",
                "status": "modified",
                "changes": 16,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/geom/AffineTransform.java?ref=6036fc54750820021a8fbb5abb3520b7814a36f3",
                "patch": "@@ -421,10 +421,22 @@ public Point2D transform(Point2D src, Point2D dst) {\n \n     public void transform(Point2D[] src, int srcOff, Point2D[] dst, int dstOff, int length) {\n         while (--length >= 0) {\n-            dst[dstOff] = transform(src[srcOff++], dst[dstOff++]);\n+            Point2D srcPoint = src[srcOff++]; \n+            double x = srcPoint.getX();\n+            double y = srcPoint.getY();\n+            Point2D dstPoint = dst[dstOff]; \n+            if (dstPoint == null) {\n+                if (srcPoint instanceof Point2D.Double) {\n+                    dstPoint = new Point2D.Double();\n+                } else {\n+                    dstPoint = new Point2D.Float();\n+                }\n+            }\n+            dstPoint.setLocation(x * m00 + y * m01 + m02, x * m10 + y * m11 + m12);\n+            dst[dstOff++] = dstPoint;\n         }\n     }\n-\n+    \n     public void transform(double[] src, int srcOff, double[] dst, int dstOff, int length) {\n         while (--length >= 0) {\n             double x = src[srcOff++];",
                "deletions": 2
            },
            {
                "sha": "c6292d25ce726005c2d2726ad3a2e3a1d385bc12",
                "filename": "modules/awt/src/test/api/java/common/java/awt/geom/AffineTransformTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6036fc54750820021a8fbb5abb3520b7814a36f3/modules/awt/src/test/api/java/common/java/awt/geom/AffineTransformTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6036fc54750820021a8fbb5abb3520b7814a36f3/modules/awt/src/test/api/java/common/java/awt/geom/AffineTransformTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 30,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/geom/AffineTransformTest.java?ref=6036fc54750820021a8fbb5abb3520b7814a36f3",
                "patch": "@@ -642,7 +642,7 @@ public void testTransform1() {\n         }\n     }\n \n-    public void testTransform2() {\n+    public void testTransformPointArray() {\n         AffineTransform at = new AffineTransform(0, 1, -2, 0, 3, 4);\n         Point2D[] src = new Point2D[]{\n                 null,\n@@ -655,6 +655,35 @@ public void testTransform2() {\n         assertEquals(new Point2D.Float(1, 5), dst[3]);\n     }\n \n+    public void testTransformPointArrayBad() {\n+        // Regression test HARMONY-1405\n+        \n+        AffineTransform at = new AffineTransform();\n+        try {\n+            at.transform(\n+                    new Point2D[] { null, null, null, null },\n+                    0,\n+                    new Point2D[] { null, null, null, null },\n+                    -1,\n+                    1);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            at.transform(\n+                    new Point2D[] { null, null, null, null },\n+                    1,\n+                    new Point2D[] { null, null, null, null },\n+                    10,\n+                    1);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }        \n+    }\n+    \n     public void testTransform3() {\n         AffineTransform at = new AffineTransform(0, 1, -2, 0, 3, 4);\n         double[] src = new double[]{0, 0, 0, 0, 0, 0, 1, 1, 0, 0};",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1475\n[classlib][swing/text] Editing text in JTextComponent after updateUI() throws NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465985 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/082e10292430da895c2b6bb156ad332a4883ea43",
        "parent": "https://github.com/apache/harmony-classlib/commit/bc25b0f73ddfce2d89dc4d9c5caca8abd08536bd",
        "bug_id": "harmony-classlib_174",
        "file": [
            {
                "sha": "14d5761b10fa6d4aca9012e4db24f46bf9ffadc0",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextUI.java?ref=082e10292430da895c2b6bb156ad332a4883ea43",
                "patch": "@@ -929,6 +929,9 @@ public void uninstallUI(final JComponent c) {\n         uninstallDefaults();\n         uninstallKeyboardActions();\n         uninstallListeners();\n+        ((AbstractDocument) component.getDocument())\n+                .removeDocumentListener(listener);\n+        component.removePropertyChangeListener(listener);\n \n         //DnD support\n         //java.awt.Component doesn't support DnD",
                "deletions": 0
            },
            {
                "sha": "03385e98a3fe895fc3c5a71ab877e25a48f11ac8",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUIRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUIRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUIRTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUIRTest.java?ref=082e10292430da895c2b6bb156ad332a4883ea43",
                "patch": "@@ -29,6 +29,7 @@\n import javax.swing.JTextField;\n import javax.swing.KeyStroke;\n import javax.swing.SwingTestCase;\n+import javax.swing.text.AbstractDocument;\n import javax.swing.text.JTextComponent;\n \n public class BasicTextUIRTest extends SwingTestCase {\n@@ -116,5 +117,16 @@ public void  testFocusTraversalKeys() {\n         checkNotEditableFTK(textComp);\n \n     }\n+    \n+    public void testUninstallUI() {\n+        // Regression for HARMONY-1475\n+        JTextComponent textComp = new JTextField();\n+        AbstractDocument doc = ((AbstractDocument) textComp.getDocument());\n+        assertTrue(\"listeners installed\", \n+                   doc.getDocumentListeners().length > 0);\n+        textComp.getUI().uninstallUI(textComp);\n+        assertEquals(\"no listeners installed\", 0,\n+                     doc.getDocumentListeners().length);\n+    }\n \n }",
                "deletions": 0
            },
            {
                "sha": "6392535e8fae2257bf5fdc6d32e5f772b53aaf0a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/082e10292430da895c2b6bb156ad332a4883ea43/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentRTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/JTextComponentRTest.java?ref=082e10292430da895c2b6bb156ad332a4883ea43",
                "patch": "@@ -25,6 +25,16 @@\n import junit.framework.TestCase;\n \n public class JTextComponentRTest extends TestCase {\n+    \n+    class JMyTextComponent extends JTextComponent {\n+        public String getUIClassID() {\n+            return \"TextFieldUI\";\n+        }\n+\n+        public void test(final KeyEvent event) {\n+            processKeyEvent(event);\n+        }\n+    };\n \n     protected void setUp() throws Exception {\n         super.setUp();\n@@ -35,18 +45,17 @@ protected void tearDown() throws Exception {\n     }\n \n     public void testProcessKeyEvent() {\n-        class JMyTextComponent extends JTextComponent {\n-            public String getUIClassID() {\n-                return \"TextFieldUI\";\n-            }\n-\n-            public void test(final KeyEvent event) {\n-                processKeyEvent(event);\n-            }\n-        };\n         JMyTextComponent c = new JMyTextComponent();\n         KeyEvent event = new KeyEvent(c, KeyEvent.KEY_TYPED, 0, 0, KeyEvent.VK_UNDEFINED, '\\n');\n         c.setKeymap(null);\n         c.test(event);\n     }\n+    \n+    public void testUpdateUI() {\n+        // regression test for HARMONY-1475\n+        JMyTextComponent c = new JMyTextComponent();\n+        c.updateUI();\n+        c.setText(\"q\");\n+        assertEquals(\"q\", c.getText());\n+    }\n }",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixed HARMONY-1190\n[classlib][accessibility] compatibility: AccessibleStateSet.toString() throws NPE on RI and returns 'null'\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465977 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2b249cbd9a1e87286301208ff73c2c49dfef46b5",
        "parent": "https://github.com/apache/harmony-classlib/commit/b8a39e82dd68ab0bed9e9085ad283f5fdd9b39e1",
        "bug_id": "harmony-classlib_175",
        "file": [
            {
                "sha": "bf4405d6fda0cecac2b80eeb597b2c5d7d6b2d56",
                "filename": "modules/accessibility/src/main/java/javax/accessibility/AccessibleStateSet.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b249cbd9a1e87286301208ff73c2c49dfef46b5/modules/accessibility/src/main/java/javax/accessibility/AccessibleStateSet.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b249cbd9a1e87286301208ff73c2c49dfef46b5/modules/accessibility/src/main/java/javax/accessibility/AccessibleStateSet.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/accessibility/src/main/java/javax/accessibility/AccessibleStateSet.java?ref=2b249cbd9a1e87286301208ff73c2c49dfef46b5",
                "patch": "@@ -75,11 +75,11 @@ public void clear() {\n     @Override\n     public String toString() {\n         if (states == null) {\n-            return \"\"; //$NON-NLS-1$\n+            return \"null\"; //$NON-NLS-1$\n         }\n         StringBuffer str = new StringBuffer();\n         for (Iterator<AccessibleState> it = states.iterator(); it.hasNext(); ) {\n-            str.append(it.next());\n+            str.append(it.next().toString());\n             if (it.hasNext()) {\n                 str.append(\",\"); //$NON-NLS-1$\n             }",
                "deletions": 2
            },
            {
                "sha": "cd4295bba686c9c4c94a131c93730109e6f7c033",
                "filename": "modules/accessibility/src/test/api/java/common/javax/accessibility/AccessibleStateSetTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b249cbd9a1e87286301208ff73c2c49dfef46b5/modules/accessibility/src/test/api/java/common/javax/accessibility/AccessibleStateSetTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b249cbd9a1e87286301208ff73c2c49dfef46b5/modules/accessibility/src/test/api/java/common/javax/accessibility/AccessibleStateSetTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/accessibility/src/test/api/java/common/javax/accessibility/AccessibleStateSetTest.java?ref=2b249cbd9a1e87286301208ff73c2c49dfef46b5",
                "patch": "@@ -110,6 +110,14 @@ public void testToString() throws Exception {\n \n         stateSet.states = null;\n         stateSet.toString();\n+        \n+        //regression test for HARMONY-1190\n+        try {\n+        \tnew AccessibleStateSet(new AccessibleState[2]).toString();\n+        \tfail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+        \t//expected \n+        }\n     }\n \n     public void testToArray() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1880: [classlib][awt] Area.createTransformedArea(..) throws NPE if Area is\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465460 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1c19914735d2964c38142990566e2661b896ef16",
        "parent": "https://github.com/apache/harmony-classlib/commit/c86153ce70d709e947d480b0f9b769c2aaeb2c7f",
        "bug_id": "harmony-classlib_176",
        "file": [
            {
                "sha": "af9ce0ced0bbd938997ba9dd87c25e1a0b684f20",
                "filename": "modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1c19914735d2964c38142990566e2661b896ef16/modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1c19914735d2964c38142990566e2661b896ef16/modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/geom/Area.java?ref=1c19914735d2964c38142990566e2661b896ef16",
                "patch": "@@ -197,7 +197,7 @@ public void transform(AffineTransform t) {\n     }\n \n     public Area createTransformedArea(AffineTransform t) {\n-        return new Area(t.createTransformedShape(s));\n+        return s == null ? new Area() : new Area(t.createTransformedShape(s));\n     }\n \n     @Override",
                "deletions": 1
            },
            {
                "sha": "38106b9ee82aaed2e6813fcb5009a73517d15477",
                "filename": "modules/awt/src/test/api/java/common/java/awt/geom/AreaTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1c19914735d2964c38142990566e2661b896ef16/modules/awt/src/test/api/java/common/java/awt/geom/AreaTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1c19914735d2964c38142990566e2661b896ef16/modules/awt/src/test/api/java/common/java/awt/geom/AreaTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/geom/AreaTest.java?ref=1c19914735d2964c38142990566e2661b896ef16",
                "patch": "@@ -82,5 +82,15 @@ public void testGetPathIterator() {\n         checkPathRule(path, PathIterator.WIND_NON_ZERO);\n         checkPathDone(path, true);\n     }\n+    \n+    public void testCreateTransformedArea() {\n+        // Regression test HARMONY-1880\n+        AffineTransform t = AffineTransform.getScaleInstance(2, 3);\n+        Area a1 = new Area();        \n+        Area a2 = a1.createTransformedArea(t);\n+        PathIterator path = a2.getPathIterator(null);\n+        checkPathRule(path, PathIterator.WIND_NON_ZERO);\n+        checkPathDone(path, true);\n+    }\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1504\n[classlib][beans] RI throws NPE for public EventSetDescriptor(...) while Harmony does not\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465154 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f",
        "parent": "https://github.com/apache/harmony-classlib/commit/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280",
        "bug_id": "harmony-classlib_177",
        "file": [
            {
                "sha": "cba4e5997d0e5acb85d21fcb1d3da71a24a184c5",
                "filename": "modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "status": "modified",
                "changes": 40,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/EventSetDescriptor.java?ref=e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f",
                "patch": "@@ -92,15 +92,18 @@ public EventSetDescriptor(Class<?> sourceClass, String eventSetName,\n \n         this.listenerType = listenerType;\n \n-        if (listenerMethodNames != null) {\n-            for (String element : listenerMethodNames) {\n-                try {\n-                    listenerMethodDescriptors.add(new MethodDescriptor(\n-                            findMethodByName(listenerType, element)));\n-                } catch (IntrospectionException ie) {\n-                    listenerMethodDescriptors.clear();\n-                    throw ie;\n-                }\n+        if (listenerMethodNames == null) {\n+            throw new NullPointerException();\n+        }\n+\n+        for (String element : listenerMethodNames) {\n+            try {\n+                listenerMethodDescriptors\n+                        .add(new MethodDescriptor(findMethodByName(\n+                                listenerType, element)));\n+            } catch (IntrospectionException ie) {\n+                listenerMethodDescriptors.clear();\n+                throw ie;\n             }\n         }\n \n@@ -127,15 +130,16 @@ public EventSetDescriptor(Class<?> sourceClass, String eventSetName,\n \n         this.listenerType = listenerType;\n \n-        if (listenerMethodNames != null) {\n-            for (String element : listenerMethodNames) {\n-                try {\n-                    listenerMethodDescriptors.add(new MethodDescriptor(\n-                            findMethodByName(listenerType, element)));\n-                } catch (IntrospectionException ie) {\n-                    listenerMethodDescriptors.clear();\n-                    throw ie;\n-                }\n+        if (listenerMethodNames == null) {\n+            throw new NullPointerException();\n+        }\n+        for (String element : listenerMethodNames) {\n+            try {\n+                listenerMethodDescriptors.add(new MethodDescriptor(\n+                        findMethodByName(listenerType, element)));\n+            } catch (IntrospectionException ie) {\n+                listenerMethodDescriptors.clear();\n+                throw ie;\n             }\n         }\n ",
                "deletions": 18
            },
            {
                "sha": "2a29b808608875504e471837e9f6b71b446a8f29",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java",
                "status": "modified",
                "changes": 49,
                "additions": 26,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventSetDescriptorTest.java?ref=e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f",
                "patch": "@@ -37,20 +37,6 @@\n  */\n public class EventSetDescriptorTest extends TestCase {\n \n-    /*\n-     * @see TestCase#setUp()\n-     */\n-    protected void setUp() throws Exception {\n-        super.setUp();\n-    }\n-\n-    /*\n-     * @see TestCase#tearDown()\n-     */\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n-    }\n-\n     /*\n      * Class under test for void EventSetDescriptor(Class, String, Class,\n      * String)\n@@ -143,12 +129,9 @@ public void testEventSetDescriptorClassStringClassString_EventEmpty()\n         String listenerMethodName = eventSetName;\n         Class sourceClass = MockSourceClass.class;\n         Class listenerType = MockPropertyChangeListener.class;\n-        try {\n-            new EventSetDescriptor(sourceClass, \"\", listenerType,\n-                    listenerMethodName);\n-            fail(\"Should throw StringIndexOutOfBoundsException.\");\n-        } catch (StringIndexOutOfBoundsException e) {\n-        }\n+\n+        new EventSetDescriptor(sourceClass, \"\", listenerType,\n+                listenerMethodName);\n     }\n \n     /*\n@@ -342,7 +325,7 @@ public void testEventSetDescriptorClassStringClassStringArrayStringString_source\n     public void testEventSetDescriptorClassStringClassStringArrayStringString_eventNull()\n             throws IntrospectionException {\n         Class sourceClass = MockSourceClass.class;\n-        String eventSetName = null;\n+\t\tString eventSetName = \"MockPropertyChange\";\n         Class listenerType = MockPropertyChangeListener.class;\n         String[] listenerMethodNames = { \"mockPropertyChange\",\n                 \"mockPropertyChange2\", };\n@@ -369,6 +352,16 @@ public void testEventSetDescriptorClassStringClassStringArrayStringString_eventN\n         assertEquals(listenerType, esd.getListenerType());\n         assertTrue(esd.isInDefaultEventSet());\n         assertFalse(esd.isUnicast());\n+        //Regression for HARMONY-1504\n+\t\ttry {\n+\t\t\tnew EventSetDescriptor(sourceClass,\n+\t\t\t\tnull, listenerType, listenerMethodNames, addMethod,\n+\t\t\t\tremoveMethod);\n+\t\t\tfail(\"NullPointerException expected\");\n+\t\t} catch (NullPointerException e) {\n+\t\t\t//expected\n+\t\t}\n+\n     }\n \n     /*\n@@ -581,7 +574,7 @@ public void testEventSetDescriptorClassStringClassStringArrayStringStringString(\n \n         assertEquals(addMethod, esd.getAddListenerMethod().getName());\n         assertEquals(removeMethod, esd.getRemoveListenerMethod().getName());\n-        assertEquals(getMethod, esd.getGetListenerMethod().getName());\n+\t\tassertNull(esd.getGetListenerMethod());\n \n         assertEquals(2, esd.getListenerMethods().length);\n         assertEquals(listenerMethodNames[0], esd.getListenerMethods()[0]\n@@ -625,6 +618,16 @@ public void testEventSetDescriptorClassStringClassStringArrayStringStringString_\n                 eventSetName, listenerType, listenerMethodNames, addMethod,\n                 removeMethod, getMethod);\n         assertNull(esd.getGetListenerMethod());\n+\t\t\n+\t\t//Regression for Harmony-1504\n+        try {\n+            new EventSetDescriptor(sourceClass,\n+                    eventSetName, listenerType, null, addMethod,\n+                    removeMethod, getMethod);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            //expected\n+        }\n     }\n \n     /*\n@@ -643,7 +646,7 @@ public void testEventSetDescriptorClassStringClassStringArrayStringStringString_\n         EventSetDescriptor esd = new EventSetDescriptor(sourceClass,\n                 eventSetName, listenerType, listenerMethodNames, addMethod,\n                 removeMethod, getMethod);\n-        assertEquals(addMethod, esd.getGetListenerMethod().getName());\n+\t\tassertNull(esd.getGetListenerMethod());\n     }\n \n     /*",
                "deletions": 23
            },
            {
                "sha": "15642e3d4cf69841f949858b893acce8f411fb1b",
                "filename": "modules/beans/src/test/support/java/org/apache/harmony/beans/tests/support/OtherBean.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/test/support/java/org/apache/harmony/beans/tests/support/OtherBean.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f/modules/beans/src/test/support/java/org/apache/harmony/beans/tests/support/OtherBean.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/support/java/org/apache/harmony/beans/tests/support/OtherBean.java?ref=e96bf0fdab91d98e4e7e4bf1ba69b95906d7332f",
                "patch": "@@ -28,7 +28,7 @@\n \n public class OtherBean {\n \n-    public void addSaampleListener(SampleListener listener) {\n+    public void addSampleListener(SampleListener listener) {\n     }\n \n     public void removeSampleListener(SampleListener listener) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1304\n[classlib][bean] compatibility: no NPE on Harmony for Encoder().setPersistenceDelegate(Void.TYPE, null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465152 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280",
        "parent": "https://github.com/apache/harmony-classlib/commit/7db7d46b4488a0963bc6d8d7e340ad1596972e02",
        "bug_id": "harmony-classlib_178",
        "file": [
            {
                "sha": "1f296c25b51b0b8ebe9f5f23733618fb0f6211af",
                "filename": "modules/beans/src/main/java/java/beans/Encoder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280/modules/beans/src/main/java/java/beans/Encoder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280/modules/beans/src/main/java/java/beans/Encoder.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/Encoder.java?ref=bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280",
                "patch": "@@ -69,6 +69,9 @@ public PersistenceDelegate getPersistenceDelegate(Class<?> type) {\n \n     public void setPersistenceDelegate(Class<?> type,\n             PersistenceDelegate persistenceDelegate) {\n+        if (type == null || persistenceDelegate == null) {\n+            throw new NullPointerException();\n+        }\n         persistenceDelegates.put(type, persistenceDelegate);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "1a4395338e6172d52135ac74ee58b2c86065944c",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java?ref=bdaa0ab7892902df02c31cf7e4bbe4e8f5f0b280",
                "patch": "@@ -265,7 +265,7 @@ public void testWriteExpression() {\n     }\n \n     public void testWriteExpression_Null() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         try {\n             enc.writeExpression(null);\n             fail();\n@@ -279,10 +279,10 @@ public void testWriteStatement() {\n     }\n \n     public void testWriteStatement_Null() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         try {\n             enc.writeStatement(null);\n-            fail();\n+            fail(\"NPE expected\");\n         } catch (NullPointerException e) {\n             // expected\n         }\n@@ -360,33 +360,33 @@ public void testWriteObject() {\n     }\n \n     public void testGetPersistenceDelegate_Null() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         PersistenceDelegate pd = enc.getPersistenceDelegate(null);\n         assertNotNull(pd);\n     }\n \n     public void testGetPersistenceDelegate_ArrayClass() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         PersistenceDelegate pd = enc.getPersistenceDelegate(int[].class);\n         assertFalse(pd instanceof DefaultPersistenceDelegate);\n     }\n \n     public void testGetPersistenceDelegate_ProxyClass() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         enc.getPersistenceDelegate(Proxy.getProxyClass(ClassLoader\n                 .getSystemClassLoader(), new Class[] { List.class }));\n     }\n \n     public void testGetPersistenceDelegate_BeanInfo() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         PersistenceDelegate pd = enc\n                 .getPersistenceDelegate(MockFooLiYang.class);\n         assertTrue(pd instanceof VerbosePD);\n     }\n \n     public void testGetPersistenceDelegate_Default() {\n-        MockEncoder enc = new MockEncoder();\n-        MockEncoder enc2 = new MockEncoder();\n+        Encoder enc = new Encoder();\n+        Encoder enc2 = new Encoder();\n \n         PersistenceDelegate pd1 = enc.getPersistenceDelegate(SampleBean.class);\n         assertTrue(pd1 instanceof DefaultPersistenceDelegate);\n@@ -403,44 +403,45 @@ public void testGetPersistenceDelegate_Default() {\n     }\n \n     public void testSetPersistenceDelegate_Null() {\n-        MockEncoder enc = new MockEncoder();\n+        // Regression for HARMONY-1304\n+        Encoder enc = new Encoder();\n         PersistenceDelegate pd = enc.getPersistenceDelegate(EncoderTest.class);\n \n         try {\n             enc.setPersistenceDelegate(null, pd);\n-            fail();\n+            fail(\"NPE expected\");\n         } catch (NullPointerException e) {\n             // expected\n         }\n \n         try {\n             enc.setPersistenceDelegate(EncoderTest.class, null);\n-            fail();\n+            fail(\"NPE expected\");\n         } catch (NullPointerException e) {\n             // expected\n         }\n     }\n \n     public void testSetPersistenceDelegate() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n         PersistenceDelegate pd = enc.getPersistenceDelegate(EncoderTest.class);\n         assertTrue(pd instanceof DefaultPersistenceDelegate);\n \n         enc.setPersistenceDelegate(EncoderTest.class, new VerbosePD());\n         assertTrue(enc.getPersistenceDelegate(EncoderTest.class) instanceof VerbosePD);\n \n-        MockEncoder enc2 = new MockEncoder();\n+        Encoder enc2 = new Encoder();\n         assertTrue(enc2.getPersistenceDelegate(EncoderTest.class) instanceof VerbosePD);\n     }\n \n     public void testGet_NullParam() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n \n         assertNull(enc.get(null));\n     }\n \n     public void testGet_String() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n \n         String str = \"string\";\n         assertSame(str, enc.get(str));\n@@ -462,7 +463,7 @@ public void testGet_Integer() {\n     }\n \n     public void testRemove_Null() {\n-        MockEncoder enc = new MockEncoder();\n+        Encoder enc = new Encoder();\n \n         assertNull(enc.remove(null));\n     }",
                "deletions": 17
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "source code tidyup: generific, fix unexpected NPE, remove console output in tests, etc\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@464582 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a893c4ca25be48a53958d3d25f4c23d0fa270ee4",
        "parent": "https://github.com/apache/harmony-classlib/commit/1a15ce3265866e1d2707f1101553cffde0eb753b",
        "bug_id": "harmony-classlib_179",
        "file": [
            {
                "sha": "a2d429e5ea61d31a3de8075e8f554f4ed2fca7e3",
                "filename": "modules/luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/jar/JarURLConnection.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a893c4ca25be48a53958d3d25f4c23d0fa270ee4/modules/luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/jar/JarURLConnection.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a893c4ca25be48a53958d3d25f4c23d0fa270ee4/modules/luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/jar/JarURLConnection.java",
                "status": "modified",
                "changes": 42,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/org/apache/harmony/luni/internal/net/www/protocol/jar/JarURLConnection.java?ref=a893c4ca25be48a53958d3d25f4c23d0fa270ee4",
                "patch": "@@ -50,32 +50,32 @@\n  * \n  */\n public class JarURLConnection extends java.net.JarURLConnection {\n-\tstatic Hashtable<Object,CacheEntry> jarCache = new Hashtable<Object,CacheEntry>();\n+\tstatic Hashtable<String,CacheEntry<? extends JarFile>> jarCache = new Hashtable<String,CacheEntry<?>>();\n \n \tInputStream jarInput;\n \n \tprivate JarFile jarFile;\n \n \tprivate JarEntry jarEntry;\n \n-\tReferenceQueue cacheQueue = new ReferenceQueue();\n+\tReferenceQueue<JarFile> cacheQueue = new ReferenceQueue<JarFile>();\n \n-\tstatic TreeSet lru = new TreeSet(new LRUComparitor());\n+\tstatic TreeSet<LRUKey> lru = new TreeSet<LRUKey>(new LRUComparitor<LRUKey>());\n \n \tstatic int Limit;\n \tstatic {\n \t\tLimit = AccessController.doPrivileged(new PrivilegedAction<Integer>() {\n \t\t\t\t\tpublic Integer run() {\n-\t\t\t\t\t\treturn Integer.getInteger(\"jar.cacheSize\", 500);\n+\t\t\t\t\t\treturn Integer.getInteger(\"jar.cacheSize\", 500); //$NON-NLS-1$\n \t\t\t\t\t}\n \t\t\t\t});\n \t\tVM.closeJars();\n \t}\n \n-\tstatic final class CacheEntry extends WeakReference {\n+\tstatic final class CacheEntry<T extends JarFile> extends WeakReference<T>{\n \t\tObject key;\n \n-\t\tCacheEntry(Object jar, String key, ReferenceQueue queue) {\n+        CacheEntry(T jar, String key, ReferenceQueue<JarFile> queue) {\n \t\t\tsuper(jar, queue);\n \t\t\tthis.key = key;\n \t\t}\n@@ -99,14 +99,14 @@ public boolean equals(Object obj) {\n \t\t}\n \t}\n \n-\tstatic final class LRUComparitor implements Comparator {\n+\tstatic final class LRUComparitor<T> implements Comparator<LRUKey> {\n \t\tLRUComparitor() {\n \t\t}\n \n \t\t/**\n \t\t * @see java.util.Comparator#compare(java.lang.Object, java.lang.Object)\n \t\t */\n-\t\tpublic int compare(Object o1, Object o2) {\n+\t\tpublic int compare(LRUKey o1, LRUKey o2) {\n \t\t\tif (((LRUKey) o1).ts > ((LRUKey) o2).ts) {\n \t\t\t\treturn 1;\n \t\t\t}\n@@ -170,11 +170,11 @@ public JarFile getJarFile() throws IOException {\n \t */\n \tprivate void findJarFile() throws IOException {\n \t\tURL jarFileURL = getJarFileURL();\n-\t\tif (jarFileURL.getProtocol().equals(\"file\")) {\n+\t\tif (jarFileURL.getProtocol().equals(\"file\")) { //$NON-NLS-1$\n \t\t\tString fileName = jarFileURL.getFile();\n \t\t\tString host = jarFileURL.getHost();\n \t\t\tif (host != null && host.length() > 0)\n-\t\t\t\tfileName = \"//\" + host + fileName;\n+\t\t\t\tfileName = \"//\" + host + fileName; //$NON-NLS-1$\n \t\t\tjarFile = openJarFile(fileName, fileName, false);\n \t\t\treturn;\n \t\t}\n@@ -199,8 +199,8 @@ public JarFile run() {\n \t\t\tjarFile = AccessController.doPrivileged(new PrivilegedAction<JarFile>() {\n \t\t\t\t\t\tpublic JarFile run() {\n \t\t\t\t\t\t\ttry {\n-\t\t\t\t\t\t\t\tFile tempJar = File.createTempFile(\"hyjar_\",\n-\t\t\t\t\t\t\t\t\t\t\".tmp\", null);\n+\t\t\t\t\t\t\t\tFile tempJar = File.createTempFile(\"hyjar_\", //$NON-NLS-1$\n+\t\t\t\t\t\t\t\t\t\t\".tmp\", null); //$NON-NLS-1$\n \t\t\t\t\t\t\t\tFileOutputStream fos = new FileOutputStream(\n \t\t\t\t\t\t\t\t\t\ttempJar);\n \t\t\t\t\t\t\t\tbyte[] buf = new byte[4096];\n@@ -227,26 +227,26 @@ JarFile openJarFile(String fileString, String key, boolean temp)\n \n \t\tJarFile jar = null;\n \t\tif(useCaches){\n-\t\t    CacheEntry entry;\n-            while ((entry = (CacheEntry) cacheQueue.poll()) != null)\n+\t\t    CacheEntry<? extends JarFile> entry;\n+            while ((entry = (CacheEntry<? extends JarFile>)cacheQueue.poll()) != null)\n                 jarCache.remove(entry.key);\n-            entry = (CacheEntry) jarCache.get(key);\n+            entry = jarCache.get(key);\n             if (entry != null)\n                 jar = (JarFile) entry.get();\n             if (jar == null && fileString != null) {\n                 int flags = ZipFile.OPEN_READ\n                         + (temp ? ZipFile.OPEN_DELETE : 0);\n                 jar = new JarFile(new File(Util.decode(fileString, false)),\n                         true, flags);\n-                jarCache.put(key, new CacheEntry(jar, key, cacheQueue));\n+                jarCache.put(key, new CacheEntry<JarFile>(jar, key, cacheQueue));\n             } else {\n                 SecurityManager security = System.getSecurityManager();\n                 if (security != null)\n                     security.checkPermission(getPermission());\n                 if (temp)\n                     lru.remove(new LRUKey(jar, 0));\n             }\n-\t\t}else{\n+\t\t}else if(fileString != null){\n \t\t    int flags = ZipFile.OPEN_READ + (temp ? ZipFile.OPEN_DELETE : 0);\n \t\t    jar = new JarFile(new File(Util.decode(fileString, false)), true, flags);\n \t\t}\n@@ -301,7 +301,7 @@ public InputStream getInputStream() throws IOException {\n \t\tif (jarInput != null)\n \t\t\treturn jarInput;\n \t\tif (jarEntry == null)\n-\t\t\tthrow new IOException(Msg.getString(\"K00fc\"));\n+\t\t\tthrow new IOException(Msg.getString(\"K00fc\")); //$NON-NLS-1$\n \t\treturn jarInput = jarFile.getInputStream(jarEntry);\n \t}\n \n@@ -316,7 +316,7 @@ public String getContentType() {\n \t\t// it could also return \"x-java/jar\" which jdk returns but here, we get\n \t\t// it from the URLConnection\n \t\ttry {\n-\t\t\tif (url.getFile().endsWith(\"!/\"))\n+\t\t\tif (url.getFile().endsWith(\"!/\")) //$NON-NLS-1$\n \t\t\t\treturn getJarFileURL().openConnection().getContentType();\n \t\t} catch (IOException ioe) {\n \t\t}\n@@ -333,7 +333,7 @@ public String getContentType() {\n \t */\n \tpublic int getContentLength() {\n \t\ttry {\n-\t\t\tif (url.getFile().endsWith(\"!/\"))\n+\t\t\tif (url.getFile().endsWith(\"!/\")) //$NON-NLS-1$\n \t\t\t\treturn getJarFileURL().openConnection().getContentLength();\n \t\t} catch (IOException e) {\n \t\t}\n@@ -386,7 +386,7 @@ public Object getContent() throws IOException {\n \t * Closes the cached files.\n \t */\n \tpublic static void closeCachedFiles() {\n-\t\tEnumeration<CacheEntry> elemEnum = jarCache.elements();\n+\t\tEnumeration<CacheEntry<? extends JarFile>> elemEnum = jarCache.elements();\n \t\twhile (elemEnum.hasMoreElements()) {\n \t\t\ttry {\n \t\t\t\tZipFile zip = (ZipFile) ((CacheEntry) elemEnum.nextElement())",
                "deletions": 21
            },
            {
                "sha": "61ae23bb5f45e71ebe63fac9052bfd1f6d5137bb",
                "filename": "modules/luni/src/test/java/tests/api/java/net/JarURLConnectionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a893c4ca25be48a53958d3d25f4c23d0fa270ee4/modules/luni/src/test/java/tests/api/java/net/JarURLConnectionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a893c4ca25be48a53958d3d25f4c23d0fa270ee4/modules/luni/src/test/java/tests/api/java/net/JarURLConnectionTest.java",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/JarURLConnectionTest.java?ref=a893c4ca25be48a53958d3d25f4c23d0fa270ee4",
                "patch": "@@ -45,7 +45,6 @@ public void test_getAttributes() throws Exception{\n \t\tURL u = new URL(\"jar:\"\n                 + BASE.toString()+\"/lf.jar!/swt.dll\");\n         juc = (JarURLConnection) u.openConnection();\n-        System.out.println(juc.getClass());\n         java.util.jar.Attributes a = juc.getJarEntry().getAttributes();\n         assertEquals(\"Returned incorrect Attributes\", \"SHA MD5\", a\n                 .get(new java.util.jar.Attributes.Name(\"Digest-Algorithms\")));",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Should not throw NPE when Logger.getLogger(somename, null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@464501 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5aa42243cf945dc81d5a102a71b24f512bd059be",
        "parent": "https://github.com/apache/harmony-classlib/commit/0673c3c107f6139e8ca87ba9361801c75d8a0402",
        "bug_id": "harmony-classlib_180",
        "file": [
            {
                "sha": "2711ee44b16af3570991a026de7e2116085167a2",
                "filename": "modules/logging/src/main/java/java/util/logging/Logger.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5aa42243cf945dc81d5a102a71b24f512bd059be/modules/logging/src/main/java/java/util/logging/Logger.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5aa42243cf945dc81d5a102a71b24f512bd059be/modules/logging/src/main/java/java/util/logging/Logger.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Logger.java?ref=5aa42243cf945dc81d5a102a71b24f512bd059be",
                "patch": "@@ -313,6 +313,9 @@ public static Logger getAnonymousLogger(String resourceBundleName) {\n     private static void updateResourceBundle(Logger l, String resourceBundleName) {\n         synchronized (l) {\n             if (null == l.getResourceBundleName()) {\n+                if(null == resourceBundleName){\n+                    return;\n+                }\n                 /*\n                  * load the resource bundle if none is specified\n                  * before",
                "deletions": 0
            },
            {
                "sha": "4cf5d611de6e864d6dd5ea48adf004b1fb0bce9e",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5aa42243cf945dc81d5a102a71b24f512bd059be/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5aa42243cf945dc81d5a102a71b24f512bd059be/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LoggerTest.java?ref=5aa42243cf945dc81d5a102a71b24f512bd059be",
                "patch": "@@ -316,6 +316,9 @@ public void testGetLogger_Null() {\n \t\t\tfail(\"Should throw NullPointerException!\");\n \t\t} catch (NullPointerException e) {\n \t\t}\n+        Logger logger = Logger.getLogger(\"\", null);\n+        assertNull(logger.getResourceBundleName());\n+        assertNull(logger.getResourceBundle());        \n \t}\n \n \t/*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1867: [swing][jEdit] NPE in BasicRootPaneUI$DefaultButtonAction after pressing \"Enter\" in jEdit\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@464321 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0eae8029906c00cc191097d4c2803f7783ebe2df",
        "parent": "https://github.com/apache/harmony-classlib/commit/0103d135d97d880637d9d4497e144a4e482e39f6",
        "bug_id": "harmony-classlib_181",
        "file": [
            {
                "sha": "c80f820497a4a760544743a56cf9628ced0d338c",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicRootPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0eae8029906c00cc191097d4c2803f7783ebe2df/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicRootPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0eae8029906c00cc191097d4c2803f7783ebe2df/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicRootPaneUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicRootPaneUI.java?ref=0eae8029906c00cc191097d4c2803f7783ebe2df",
                "patch": "@@ -32,6 +32,7 @@\n import javax.swing.AbstractAction;\n import javax.swing.ActionMap;\n import javax.swing.InputMap;\n+import javax.swing.JButton;\n import javax.swing.JComponent;\n import javax.swing.JPopupMenu;\n import javax.swing.JRootPane;\n@@ -67,7 +68,8 @@ public DefaultButtonAction(final JRootPane root, final boolean press) {\n         }\n \n         public boolean isEnabled() {\n-            return root.getDefaultButton().isEnabled();\n+            JButton defaultButton = root.getDefaultButton();\n+            return (defaultButton == null) ? false : defaultButton.isEnabled();\n         }\n \n         public void actionPerformed(final ActionEvent e) {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "refixed HARMONY-1139\n[classlib][crypto] compatibility: CipherOutputStream().close() throws the IllegalStateException on RI and the NPE on Harmony\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@463187 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/803b91e1068cc7591693d78bdbfcd0a465ab3083",
        "parent": "https://github.com/apache/harmony-classlib/commit/6d0e023d5782bab497086c4aed4cf1bd58284a11",
        "bug_id": "harmony-classlib_182",
        "file": [
            {
                "sha": "bd2454b2eaec652bcf424d40aa52f197ca697232",
                "filename": "modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/803b91e1068cc7591693d78bdbfcd0a465ab3083/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/803b91e1068cc7591693d78bdbfcd0a465ab3083/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java?ref=803b91e1068cc7591693d78bdbfcd0a465ab3083",
                "patch": "@@ -95,17 +95,21 @@ public void flush() throws IOException {\n     public void close() throws IOException {\n         byte[] result;\n         try {\n-            result = cipher.doFinal();\n-            if (result != null) {\n-                out.write(result);\n+            if (cipher != null) {\n+                result = cipher.doFinal();\n+                if (result != null) {\n+                    out.write(result);\n+                }\n+            }\n+            if (out != null) {\n+                out.flush();\n             }\n         } catch (BadPaddingException e) {\n             throw new IOException(e.getMessage());\n         } catch (IllegalBlockSizeException e) {\n             throw new IOException(e.getMessage());\n         } finally {\n             if (out != null) {\n-                out.flush();\n                 out.close();\n             }\n         }",
                "deletions": 4
            },
            {
                "sha": "8e6395d55f46ad59a2ca894c6775ec20de7071b6",
                "filename": "modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/803b91e1068cc7591693d78bdbfcd0a465ab3083/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/803b91e1068cc7591693d78bdbfcd0a465ab3083/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java?ref=803b91e1068cc7591693d78bdbfcd0a465ab3083",
                "patch": "@@ -31,7 +31,16 @@ public void test_close() throws Exception {\n                     .getInstance(\"DES/CBC/PKCS5Padding\")).close();\n             fail(\"IllegalStateException expected\");\n         } catch (IllegalStateException e) {\n-            //expected\n+            // expected\n+        }\n+\n+        CipherOutputStream ch = new CipherOutputStream((OutputStream) null) {};\n+        try {\n+            new CipherOutputStream(ch, Cipher\n+                    .getInstance(\"DES/CBC/PKCS5Padding\")).close();\n+            fail(\"IllegalStateException expected\");\n+        } catch (IllegalStateException e) {\n+            // expected\n         }\n     }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied newest patch for HARMONY-1542\n[classlib][security] unexpected NPE for KeyStore.TrustedCertificateEntry().toString()\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@453146 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5cb707072d682e06f6fc06914ba417047b888ccc",
        "parent": "https://github.com/apache/harmony-classlib/commit/f300ebde4555292254d7e4084c3df0e842511b2a",
        "bug_id": "harmony-classlib_183",
        "file": [
            {
                "sha": "1149d9d8b8a4d50cc3f99b4af1b13a9bc4b9a086",
                "filename": "modules/security/src/main/java/common/java/security/KeyStore.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5cb707072d682e06f6fc06914ba417047b888ccc/modules/security/src/main/java/common/java/security/KeyStore.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5cb707072d682e06f6fc06914ba417047b888ccc/modules/security/src/main/java/common/java/security/KeyStore.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/KeyStore.java?ref=5cb707072d682e06f6fc06914ba417047b888ccc",
                "patch": "@@ -1032,8 +1032,7 @@ public Certificate getTrustedCertificate() {\n          *  \n          */\n         public String toString() {\n-            return \"TrustedCertificateEntry: \\n\".concat(trustCertificate //$NON-NLS-1$\n-                    .toString());\n+            return \"Trusted certificate entry:\\n\" + trustCertificate; //$NON-NLS-1$\n         }\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "8a6dc80333bc031b6f49f227f43391bd686a2709",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStoreTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5cb707072d682e06f6fc06914ba417047b888ccc/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStoreTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5cb707072d682e06f6fc06914ba417047b888ccc/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStoreTest.java",
                "status": "modified",
                "changes": 108,
                "additions": 108,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/KeyStoreTest.java?ref=5cb707072d682e06f6fc06914ba417047b888ccc",
                "patch": "@@ -27,7 +27,21 @@\n import java.security.KeyStoreException;\n import java.security.Provider;\n import java.security.Security;\n+import java.security.SignatureException;\n+import java.security.Principal;\n+import java.security.PublicKey;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchProviderException;\n+import java.security.NoSuchAlgorithmException;\n import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateEncodingException;\n+import java.security.cert.CertificateExpiredException;\n+import java.security.cert.CertificateNotYetValidException;\n+import java.security.cert.X509Certificate;\n+import java.util.Date;\n+import java.util.Set;\n+import java.math.BigInteger;\n \n import javax.crypto.KeyGenerator;\n import javax.crypto.SecretKey;\n@@ -244,4 +258,98 @@ public void testEngineEntryInstanceOf() throws Exception {\n         assertFalse(keyStore.entryInstanceOf(alias,\n                 KeyStore.PrivateKeyEntry.class));\n     }\n+\n+    /**\n+     * @tests java.security.KeyStore.TrustedCertificateEntry.toString()\n+     */\n+    public void testKeyStoreTCToString() {\n+    \t   // Regression for HARMONY-1542\n+    \t   // no exception expected\n+        class TestX509Certificate extends X509Certificate {\n+            private static final long serialVersionUID = 1L;\n+            public void checkValidity() throws CertificateExpiredException,CertificateNotYetValidException {}\n+            public void checkValidity(Date p) throws CertificateExpiredException, CertificateNotYetValidException {}\n+            public int getVersion() {\n+                    return 0;\n+            }\n+            public BigInteger getSerialNumber() {\n+                    return null;\n+            }\n+            public Principal getIssuerDN() {\n+                    return null;\n+            }\n+            public Principal getSubjectDN() {\n+                    return null;\n+            }\n+            public Date getNotBefore() {\n+                    return null;\n+            }\n+            public Date getNotAfter() {\n+                    return null;\n+            }\n+            public byte[] getTBSCertificate() throws CertificateEncodingException {\n+                    return null;\n+            }\n+            public byte[] getSignature() {\n+                    return null;\n+            }\n+            public String getSigAlgName() {\n+                    return null;\n+            }\n+            public String getSigAlgOID() {\n+                    return null;\n+            }\n+            public byte[] getSigAlgParams() {\n+                    return null;\n+            }\n+            public boolean[] getIssuerUniqueID() {\n+                    return null;\n+            }\n+            public boolean[] getSubjectUniqueID() {\n+                    return null;\n+            }\n+            public boolean[] getKeyUsage() {\n+                    return null;\n+            }\n+            public int getBasicConstraints() {\n+                    return 0;\n+            }\n+            public byte[] getEncoded() throws CertificateEncodingException {\n+                    return null;\n+            }\n+            public void verify(PublicKey p)\n+                    throws CertificateException,\n+                    NoSuchAlgorithmException,\n+                    InvalidKeyException,\n+                    NoSuchProviderException,\n+                    SignatureException \n+            {}\n+            public void verify(PublicKey p0, String p1)\n+                    throws CertificateException,\n+                    NoSuchAlgorithmException,\n+                    InvalidKeyException,\n+                    NoSuchProviderException,\n+                    SignatureException \n+            {}\n+            public String toString() {\n+                    return null;\n+            }\n+            public PublicKey getPublicKey() {\n+                    return null;\n+            }\n+            public boolean hasUnsupportedCriticalExtension() {\n+                    return false;\n+            }\n+            public Set getCriticalExtensionOIDs() {\n+                    return null;\n+            }\n+            public Set getNonCriticalExtensionOIDs() {\n+                    return null;\n+            }\n+            public byte[] getExtensionValue(String p) {\n+                    return null;\n+            }\n+        }\n+        assertNotNull(new KeyStore.TrustedCertificateEntry(new TestX509Certificate()).toString());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Add toString() testing\n(relates to HARMONY-1522: [classlib][util] unexpected NPE for java.util.AbstractCollection.toString)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@449633 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/497a6aed7c4844f11b8790bdb3d8d30877d119bd",
        "parent": "https://github.com/apache/harmony-classlib/commit/962cbd85e67978ae4f9e9cab522f062a4ea13981",
        "bug_id": "harmony-classlib_184",
        "file": [
            {
                "sha": "68bd2b48d69f51f52934567176ab711ac3c5eb26",
                "filename": "modules/luni/src/test/java/tests/api/java/util/AbstractCollectionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/497a6aed7c4844f11b8790bdb3d8d30877d119bd/modules/luni/src/test/java/tests/api/java/util/AbstractCollectionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/497a6aed7c4844f11b8790bdb3d8d30877d119bd/modules/luni/src/test/java/tests/api/java/util/AbstractCollectionTest.java",
                "status": "modified",
                "changes": 29,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/AbstractCollectionTest.java?ref=497a6aed7c4844f11b8790bdb3d8d30877d119bd",
                "patch": "@@ -15,9 +15,11 @@\n \n package tests.api.java.util;\n \n+import java.util.AbstractCollection;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Iterator;\n \n public class AbstractCollectionTest extends junit.framework.TestCase {\n \n@@ -170,6 +172,33 @@ public void test_toArray() {\n         }\n     }\n \n+    /**\n+     * @tests java.util.AbstractCollection#toString()\n+     */\n+    public void test_toString() {\n+        // see HARMONY-1522\n+        // collection that returns null iterator(this is against the spec.)\n+        AbstractCollection c = new AbstractCollection() {\n+            public int size() {\n+                // return not zero to pass 'is empty' check\n+                return 1;\n+            }\n+\n+            public Iterator iterator() {\n+                // this violates the spec.\n+                return null;\n+            }\n+        };\n+\n+        try {\n+            // AbstractCollection.toString() doesn't verify\n+            // whether iterator() returns null value or not\n+            c.toString();\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n     protected void setUp() {\n         org = new HashSet();\n         for (int i = 0; i < 100; i++)",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1516 ([claslib][beans] unexpected NPE for BeanContextServiceRevokedEvent.isServiceClass(null))\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@448888 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/093112c86409eec31de4690e129225d02d2888c9",
        "parent": "https://github.com/apache/harmony-classlib/commit/901fdeec853f4f6906383d4067c9e39ead0c2f27",
        "bug_id": "harmony-classlib_185",
        "file": [
            {
                "sha": "ff8570114f1a851850139f243703b878fab28ff7",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextServiceRevokedEvent.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/093112c86409eec31de4690e129225d02d2888c9/modules/beans/src/main/java/java/beans/beancontext/BeanContextServiceRevokedEvent.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/093112c86409eec31de4690e129225d02d2888c9/modules/beans/src/main/java/java/beans/beancontext/BeanContextServiceRevokedEvent.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextServiceRevokedEvent.java?ref=093112c86409eec31de4690e129225d02d2888c9",
                "patch": "@@ -75,6 +75,9 @@ public boolean isCurrentServiceInvalidNow() {\n      * @com.intel.drl.spec_ref\n      */\n     public boolean isServiceClass(Class service) {\n+    \tif (service == null) {\n+            return false;\n+        }\n         return service.equals(this.serviceClass);\n     }\n }",
                "deletions": 0
            },
            {
                "sha": "3f1996ff5235aab2e21bbc78c2d29a4ca422c0a7",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/093112c86409eec31de4690e129225d02d2888c9/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/093112c86409eec31de4690e129225d02d2888c9/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/beancontext/BeanContextServiceRevokedEventTest.java?ref=093112c86409eec31de4690e129225d02d2888c9",
                "patch": "@@ -112,6 +112,9 @@ public void testIsServiceClass() {\n                 services, BeanContext.class, true);\n         assertTrue(event.isServiceClass(BeanContext.class));\n         assertFalse(event.isServiceClass(Integer.class));\n+\n+        //Regression for HARMONY-1516\n+        assertFalse(event.isServiceClass(null));\n     }\n \n     public void testIsCurrentServiceInvalidNow() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1303 ([classlib][beans] unexpected NPE for Encoder.getPersistenceDelegate(null))\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447834 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5c16546ec28e80b9bb4da68eac405bde1e3b9c8e",
        "parent": "https://github.com/apache/harmony-classlib/commit/19119b53e1add5c6eb50828fdbb424b6188b3086",
        "bug_id": "harmony-classlib_186",
        "file": [
            {
                "sha": "bf10179ad0e15c6def8cabb9507db13081e0d956",
                "filename": "modules/beans/src/main/java/org/apache/harmony/beans/DefaultPersistenceDelegatesFactory.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5c16546ec28e80b9bb4da68eac405bde1e3b9c8e/modules/beans/src/main/java/org/apache/harmony/beans/DefaultPersistenceDelegatesFactory.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5c16546ec28e80b9bb4da68eac405bde1e3b9c8e/modules/beans/src/main/java/org/apache/harmony/beans/DefaultPersistenceDelegatesFactory.java",
                "status": "modified",
                "changes": 9,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/org/apache/harmony/beans/DefaultPersistenceDelegatesFactory.java?ref=5c16546ec28e80b9bb4da68eac405bde1e3b9c8e",
                "patch": "@@ -35,8 +35,11 @@\n     private static HashMap<String, PersistenceDelegate> persistenceDelegates = new HashMap<String, PersistenceDelegate>();\n \n     private static PersistenceDelegate createPersistenceDelegate(Class type) {\n-        PersistenceDelegate pd = null;\n+        if (type == null) {\n+            return new NullPersistenceDelegate();\n+        }\n \n+        PersistenceDelegate pd = null;\n         try {\n             String className = createDefaultNameForPersistenceDelegateClass(type);\n \n@@ -64,11 +67,11 @@ private static PersistenceDelegate createPersistenceDelegate(Class type) {\n     }\n \n     public static PersistenceDelegate getPersistenceDelegate(Class type) {\n-        String className = type.getName();\n+        String className = (type == null) ? null : type.getName();\n         PersistenceDelegate result = persistenceDelegates.get(className);\n \n         if (result == null) {\n-            if (type.isArray()) {\n+            if (type != null && type.isArray()) {\n                 result = org.apache.harmony.beans.ArrayPersistenceDelegate\n                         .getInstance();\n             } else {",
                "deletions": 3
            },
            {
                "sha": "89948afbe5ee6d3b4c980339d97a928378667a19",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5c16546ec28e80b9bb4da68eac405bde1e3b9c8e/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5c16546ec28e80b9bb4da68eac405bde1e3b9c8e/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EncoderTest.java?ref=5c16546ec28e80b9bb4da68eac405bde1e3b9c8e",
                "patch": "@@ -346,10 +346,9 @@ public void testWriteObject() {\n \t}\n \n \tpublic void testGetPersistenceDelegate_Null() {\n-\t\t// TODO different behavior\n-\t\t// MockEncoder enc = new MockEncoder();\n-\t\t// PersistenceDelegate pd = enc.getPersistenceDelegate(null);\n-\t\t// assertNotNull(pd);\n+\t\tMockEncoder enc = new MockEncoder();\n+\t\tPersistenceDelegate pd = enc.getPersistenceDelegate(null);\n+\t\tassertNotNull(pd);\n \t}\n \n \tpublic void testGetPersistenceDelegate_ArrayClass() {",
                "deletions": 4
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1306 ([classlib][beans] compatibility: Harmony throws IntrospectionException while RI throws NPE for EventSetDescriptor(class, null, class, \"\"))\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447840 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8caba07373c1235b3cfe458a2f5caeffc0e6106f",
        "parent": "https://github.com/apache/harmony-classlib/commit/a797fae22bd34743a901e5bae511e528c7e0d310",
        "bug_id": "harmony-classlib_187",
        "file": [
            {
                "sha": "854bca339e5727d5220aaa4c2cdd12b567273d37",
                "filename": "modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8caba07373c1235b3cfe458a2f5caeffc0e6106f/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8caba07373c1235b3cfe458a2f5caeffc0e6106f/modules/beans/src/main/java/java/beans/EventSetDescriptor.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/EventSetDescriptor.java?ref=8caba07373c1235b3cfe458a2f5caeffc0e6106f",
                "patch": "@@ -55,6 +55,9 @@ public EventSetDescriptor(Class<?> sourceClass, String eventSetName,\n \n         super();\n \n+        if (eventSetName == null) {\n+        \tthrow new NullPointerException();\n+        }\n         setName(eventSetName);\n         setDisplayName(eventSetName);\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-839 ([classlib][util]WeakHashMap(Map arg) throws NPE if arg.entrySet() returns null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447357 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
        "parent": "https://github.com/apache/harmony-classlib/commit/a4aa35ac363f870c2f1edbaacdeab06796964340",
        "bug_id": "harmony-classlib_188",
        "file": [
            {
                "sha": "eab6b5ae84e2bdd6c17c87acbf0b9be60059a0ba",
                "filename": "modules/luni/src/main/java/java/util/HashMap.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/HashMap.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/HashMap.java",
                "status": "modified",
                "changes": 15,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/HashMap.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -267,7 +267,7 @@ public HashMap(int capacity, float loadFactor) {\n      */\n     public HashMap(Map<? extends K, ? extends V> map) {\n         this(map.size() < 6 ? 11 : map.size() * 2);\n-        putAll(map);\n+        super.putAll(map);\n     }\n \n     /**\n@@ -537,14 +537,20 @@ public V put(K key, V value) {\n     }\n \n     /**\n-     * Copies every mapping in the specified Map to this HashMap.\n+     * Copies all the mappings in the given map to this map. These mappings will\n+     * replace all mappings that this map had for any of the keys currently in\n+     * the given map.\n      * \n      * @param map\n      *            the Map to copy mappings from\n+     * @throws NullPointerException\n+     *             if the given map is null\n      */\n     @Override\n     public void putAll(Map<? extends K, ? extends V> map) {\n-        super.putAll(map);\n+        if (map.entrySet() != null) {\n+            super.putAll(map);\n+        }\n     }\n \n     void rehash() {\n@@ -692,4 +698,5 @@ private void readObject(ObjectInputStream stream) throws IOException,\n             createEntry(key, index, (V)stream.readObject());\n         }\n     }\n+    \n }",
                "deletions": 4
            },
            {
                "sha": "ca22026941effa7520eb29f9c547892e48d3d737",
                "filename": "modules/luni/src/main/java/java/util/IdentityHashMap.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/IdentityHashMap.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/IdentityHashMap.java",
                "status": "modified",
                "changes": 23,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/IdentityHashMap.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -285,7 +285,7 @@ private int computeElementArraySize() {\n      */\n     public IdentityHashMap(Map<? extends K, ? extends V> map) {\n         this(map.size() < 6 ? 11 : map.size() * 2);\n-        putAll(map);\n+        putAllImpl(map);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n@@ -474,6 +474,21 @@ public V put(K key, V value) {\n \n         return massageValue(result);\n     }\n+    \n+    /**\n+     * Copies all the mappings in the given map to this map. These mappings will\n+     * replace all mappings that this map had for any of the keys currently in\n+     * the given map.\n+     * \n+     * @param map\n+     *            the Map to copy mappings from\n+     * @throws NullPointerException\n+     *             if the given map is null\n+     */\n+    @Override\n+    public void putAll(Map<? extends K, ? extends V> map) {\n+        putAllImpl(map);\n+    }\n \n     private void rehash() {\n         int newlength = elementData.length << 1;\n@@ -773,4 +788,10 @@ private void readObject(ObjectInputStream stream) throws IOException,\n         }\n         size = savedSize;\n     }\n+    \n+    private void putAllImpl(Map<? extends K, ? extends V> map) {\n+        if (map.entrySet() != null) {\n+            super.putAll(map);\n+        }\n+    }\n }",
                "deletions": 1
            },
            {
                "sha": "6bfbb028022dd7bfef9567b15ffd86927d744704",
                "filename": "modules/luni/src/main/java/java/util/WeakHashMap.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/WeakHashMap.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/main/java/java/util/WeakHashMap.java",
                "status": "modified",
                "changes": 35,
                "additions": 28,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/WeakHashMap.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -239,15 +239,15 @@ public WeakHashMap(int capacity, float loadFactor) {\n      */\n     public WeakHashMap(Map<? extends K, ? extends V> map) {\n         this(map.size() < 6 ? 11 : map.size() * 2);\n-        putAll(map);\n+        putAllImpl(map);\n     }\n \n     /**\n-     * Removes all mappings from this WeakHashMap, leaving it empty.\n-     * \n-     * @see #isEmpty\n-     * @see #size\n-     */\n+\t * Removes all mappings from this WeakHashMap, leaving it empty.\n+\t * \n+\t * @see #isEmpty\n+\t * @see #size\n+\t */\n     @Override\n     public void clear() {\n         if (elementCount > 0) {\n@@ -621,6 +621,21 @@ private void rehash() {\n         elementData = newData;\n         computeMaxSize();\n     }\n+    \n+    /**\n+     * Copies all the mappings in the given map to this map. These mappings will\n+     * replace all mappings that this map had for any of the keys currently in\n+     * the given map.\n+     * \n+     * @param map\n+     *            the Map to copy mappings from\n+     * @throws NullPointerException\n+     *             if the given map is null\n+     */\n+    @Override\n+    public void putAll(Map<? extends K, ? extends V> map) {\n+        putAllImpl(map);\n+    }\n \n     /**\n      * Removes a mapping with the specified key from this WeakHashMap.\n@@ -672,4 +687,10 @@ public int size() {\n         poll();\n         return elementCount;\n     }\n+    \n+    private void putAllImpl(Map<? extends K, ? extends V> map) {\n+        if (map.entrySet() != null) {\n+            super.putAll(map);\n+        }\n+    }\n }",
                "deletions": 7
            },
            {
                "sha": "e7243af20f04edff6edce400d129608b8926f253",
                "filename": "modules/luni/src/test/java/tests/api/java/util/HashMapTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/HashMapTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/HashMapTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/HashMapTest.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -29,7 +29,15 @@\n import tests.support.Support_UnmodifiableCollectionTest;\n \n public class HashMapTest extends junit.framework.TestCase {\n-\n+    class MockMap extends AbstractMap {\n+        public Set entrySet() {\n+            return null;\n+        }\n+        public int size(){\n+            return 0;\n+        }\n+    }\n+    \n \tHashMap hm;\n \n \tfinal static int hmSize = 1000;\n@@ -111,6 +119,14 @@ public void test_ConstructorLjava_util_Map() {\n \t\tfor (int counter = 0; counter < hmSize; counter++)\n \t\t\tassertTrue(\"Failed to construct correct HashMap\", hm\n \t\t\t\t\t.get(objArray2[counter]) == hm2.get(objArray2[counter]));\n+        \n+        try {\n+            Map mockMap = new MockMap();\n+            hm = new HashMap(mockMap);\n+            fail(\"Should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            //empty\n+        }\n \t}\n \n \t/**\n@@ -123,7 +139,7 @@ public void test_clear() {\n \t\tfor (int i = 0; i < hmSize; i++)\n \t\t\tassertNull(\"Failed to clear all elements\",\n \t\t\t\t\thm.get(objArray2[i]));\n-\n+        \n \t}\n \n \t/**\n@@ -329,6 +345,11 @@ public void test_putAllLjava_util_Map() {\n \t\tfor (int i = 0; i < 1000; i++)\n \t\t\tassertTrue(\"Failed to clear all elements\", hm2.get(\n \t\t\t\t\tnew Integer(i).toString()).equals((new Integer(i))));\n+        \n+        Map mockMap = new MockMap();\n+        hm2 = new HashMap();\n+        hm2.putAll(mockMap);\n+        assertEquals(\"Size should be 0\", 0, hm2.size());\n \t}\n \n \t/**",
                "deletions": 2
            },
            {
                "sha": "11d774b0ffa035daca72598610ac25385572421c",
                "filename": "modules/luni/src/test/java/tests/api/java/util/IdentityHashMapTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/IdentityHashMapTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/IdentityHashMapTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/IdentityHashMapTest.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 2005 The Apache Software Foundation or its licensors, as applicable\n+/* Copyright 2005, 2006 The Apache Software Foundation or its licensors, as applicable\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -29,7 +29,14 @@\n import tests.support.Support_MapTest2;\n \n public class IdentityHashMapTest extends junit.framework.TestCase {\n-\n+\tclass MockMap extends AbstractMap {\n+\t\tpublic Set entrySet() {\n+\t\t\treturn null;\n+\t\t}\n+\t\tpublic int size(){\n+\t\t\treturn 0;\n+\t\t}\n+\t}\n \t/*\n \t * TODO: change all the statements testing the keys and values with equals()\n \t * method to check for reference equality instead\n@@ -95,6 +102,10 @@ public void test_ConstructorLjava_util_Map() {\n \t\tfor (int counter = 0; counter < hmSize; counter++)\n \t\t\tassertTrue(\"Failed to construct correct IdentityHashMap\", hm\n \t\t\t\t\t.get(objArray2[counter]) == hm2.get(objArray2[counter]));\n+\t\t\n+        Map mockMap = new MockMap();\n+        hm2 = new IdentityHashMap(mockMap);\n+        assertEquals(\"Size should be 0\", 0, hm2.size());\n \t}\n \n \t/**\n@@ -307,6 +318,11 @@ public void test_putAllLjava_util_Map() {\n \t\tfor (int i = 0; i < 1000; i++)\n \t\t\tassertTrue(\"Failed to clear all elements\", hm2.get(objArray2[i])\n \t\t\t\t\t.equals((new Integer(i))));\n+        \n+        hm2 = new IdentityHashMap();\n+        Map mockMap = new MockMap();\n+        hm2.putAll(mockMap);\n+        assertEquals(\"Size should be 0\", 0, hm2.size());\n \t}\n \n \t/**",
                "deletions": 2
            },
            {
                "sha": "ca646903a408d99f085943e83e27ee9ec7c1ee36",
                "filename": "modules/luni/src/test/java/tests/api/java/util/WeakHashMapTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/WeakHashMapTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9/modules/luni/src/test/java/tests/api/java/util/WeakHashMapTest.java",
                "status": "modified",
                "changes": 30,
                "additions": 29,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/WeakHashMapTest.java?ref=a0a95e3d82e55bba092bac4edc5dcd3ff3bcedc9",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\n  * \n  * Licensed under the Apache License, Version 2.0 (the \"License\");\n  * you may not use this file except in compliance with the License.\n@@ -15,6 +15,7 @@\n \n package tests.api.java.util;\n \n+import java.util.AbstractMap;\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.Iterator;\n@@ -26,6 +27,14 @@\n import tests.support.Support_MapTest2;\n \n public class WeakHashMapTest extends junit.framework.TestCase {\n+\tclass MockMap extends AbstractMap {\n+\t\tpublic Set entrySet() {\n+\t\t\treturn null;\n+\t\t}\n+\t\tpublic int size(){\n+\t\t\treturn 0;\n+\t\t}\n+\t}\n \n \tObject[] keyArray = new Object[100];\n \n@@ -84,6 +93,15 @@ public void test_ConstructorIF() {\n \t\tempty.put(\"something\", \"here\");\n \t\tassertTrue(\"cannot get element\", empty.get(\"something\") == \"here\");\n \t}\n+\t\n+\t/**\n+\t * @tests java.util.WeakHashMap#WeakHashMap(java.util.Map)\n+\t */\n+\tpublic void test_ConstructorLjava_util_Map() {\n+        Map mockMap = new MockMap();\n+        WeakHashMap map = new WeakHashMap(mockMap);\n+        assertEquals(\"Size should be 0\", 0, map.size());\n+\t}\n \n \t/**\n \t * @tests java.util.WeakHashMap#clear()\n@@ -205,6 +223,16 @@ public void test_putLjava_lang_ObjectLjava_lang_Object() {\n \t\tmap.remove(\"nothing\"); // Cause objects in queue to be removed\n \t\tassertEquals(\"null key was removed\", 1, map.size());\n \t}\n+    \n+    /**\n+     * @tests java.util.WeakHashMap#putAll(java.util.Map)\n+     */\n+    public void test_putAllLjava_util_Map() {\n+        Map mockMap=new MockMap();\n+        WeakHashMap map = new WeakHashMap();\n+        map.putAll(mockMap);\n+        assertEquals(\"Size should be 0\", 0, map.size());\n+    }\n \n \t/**\n \t * @tests java.util.WeakHashMap#remove(java.lang.Object)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-855 ([Classlib][util]Some java.uiti.Collections methods do not throw unspecified NPE while RI does)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447348 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0b54fab9bb4bdd2c6904ccc986059785193356c1",
        "parent": "https://github.com/apache/harmony-classlib/commit/0a9c12211014f875bcf305f0d9f0efde342920e0",
        "bug_id": "harmony-classlib_189",
        "file": [
            {
                "sha": "db21b30e6d487db85ce5c6adcb08c293a8ee8f93",
                "filename": "modules/luni/src/main/java/java/util/Collections.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0b54fab9bb4bdd2c6904ccc986059785193356c1/modules/luni/src/main/java/java/util/Collections.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0b54fab9bb4bdd2c6904ccc986059785193356c1/modules/luni/src/main/java/java/util/Collections.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Collections.java?ref=0b54fab9bb4bdd2c6904ccc986059785193356c1",
                "patch": "@@ -2568,7 +2568,7 @@ public static boolean disjoint(Collection<?> c1, Collection<?> c2) {\n          *        constructed.\n          */\n         public CheckedCollection(Collection<E> c, Class<E> type) {\n-            if (c == null) {\n+            if (c == null || type == null) {\n                 throw new NullPointerException();\n             }\n             this.c = c;\n@@ -2971,7 +2971,7 @@ public int hashCode() {\n          *        constructed.\n          */\n         private CheckedMap(Map<K, V> m, Class<K> keyType, Class<V> valueType) {\n-            if (m == null) {\n+            if (m == null || keyType == null || valueType == null) {\n                 throw new NullPointerException();\n             }\n             this.m = m;",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1244 ([classlib][text] AttributedString.addAttribute(null, ...) throws nothing while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447333 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/11a4c5cbd5dee7a16264692e106eaeb37d824c4f",
        "parent": "https://github.com/apache/harmony-classlib/commit/b55e4d8ec09468af03b8c485831857b11421511d",
        "bug_id": "harmony-classlib_190",
        "file": [
            {
                "sha": "fb427693207ef1c7b2acafd081d43f9c8ad59d29",
                "filename": "modules/text/src/main/java/java/text/AttributedString.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/11a4c5cbd5dee7a16264692e106eaeb37d824c4f/modules/text/src/main/java/java/text/AttributedString.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/11a4c5cbd5dee7a16264692e106eaeb37d824c4f/modules/text/src/main/java/java/text/AttributedString.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/AttributedString.java?ref=11a4c5cbd5dee7a16264692e106eaeb37d824c4f",
                "patch": "@@ -504,6 +504,9 @@ public AttributedString(String value,\n     }\n \n     public void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value) {\n+        if(null == attribute){\n+            throw new NullPointerException();\n+        }\n         if (text.length() == 0) {\n             throw new IllegalArgumentException();\n         }\n@@ -520,6 +523,9 @@ public void addAttribute(AttributedCharacterIterator.Attribute attribute, Object\n \n     public void addAttribute(AttributedCharacterIterator.Attribute attribute, Object value,\n             int start, int end) {\n+        if(null == attribute){\n+            throw new NullPointerException();\n+        }\n         if (start < 0 || end > text.length() || start >= end) {\n             throw new IllegalArgumentException();\n         }",
                "deletions": 0
            },
            {
                "sha": "60323167f8aac3c398cfa15154198b4acfc9f686",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/11a4c5cbd5dee7a16264692e106eaeb37d824c4f/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/11a4c5cbd5dee7a16264692e106eaeb37d824c4f/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "status": "modified",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java?ref=11a4c5cbd5dee7a16264692e106eaeb37d824c4f",
                "patch": "@@ -19,6 +19,8 @@\n import java.text.CharacterIterator;\n import java.util.Map;\n import java.util.Set;\n+import java.util.TreeSet;\n+import java.util.WeakHashMap;\n \n public class AttributedStringTest extends junit.framework.TestCase {\n \n@@ -135,5 +137,41 @@ public char first() {\n         } catch (IllegalArgumentException e) {\n             // Expected\n         }\n+        \n+        // regression for Harmony-1244\n+        as = new AttributedString(\"123\", new WeakHashMap());\n+        try {\n+            as.addAttribute(null, new TreeSet(), 0, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            as.addAttribute(null, new TreeSet(), -1, 1);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        } \n+    }\n+    \n+    /**\n+     * @tests java.text.AttributedString.addAttribute(AttributedCharacterIterator, Object)\n+     */\n+    public void test_addAttributeLjava_text_AttributedCharacterIterator$AttributeLjava_lang_Object() {\n+        //regression for Harmony-1244\n+        AttributedString as = new AttributedString(\"123\", new WeakHashMap());\n+        try {\n+            as.addAttribute(null, new TreeSet());\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        try {\n+            as.addAttribute(null, null);\n+            fail(\"should throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n     }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-922 ([classlib][text] unexpected NPE for MessageFormat(rr, null).hashCode())\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447280 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c1d8d18053e5654a421e85771166fcaed55a5f90",
        "parent": "https://github.com/apache/harmony-classlib/commit/2132cefc85a7a01a3c9bad3f66a4817ed9a2f7b5",
        "bug_id": "harmony-classlib_191",
        "file": [
            {
                "sha": "c46bccffe4b366f2a08cba0f91ceffa578cc1de6",
                "filename": "modules/text/src/main/java/java/text/MessageFormat.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c1d8d18053e5654a421e85771166fcaed55a5f90/modules/text/src/main/java/java/text/MessageFormat.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c1d8d18053e5654a421e85771166fcaed55a5f90/modules/text/src/main/java/java/text/MessageFormat.java",
                "status": "modified",
                "changes": 7,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/MessageFormat.java?ref=c1d8d18053e5654a421e85771166fcaed55a5f90",
                "patch": "@@ -506,9 +506,12 @@ public int hashCode() {\n             }\n \t\t}\n \t\tif (maxOffset + 1 < strings.length) {\n-            hashCode += strings[maxOffset + 1].hashCode();\n+\t\t\thashCode += strings[maxOffset + 1].hashCode();\n         }\n-\t\treturn hashCode + locale.hashCode();\n+\t\tif (locale != null) {\n+            return hashCode + locale.hashCode();\n+\t\t}\n+\t\treturn hashCode;\n \t}\n \n \t/**",
                "deletions": 2
            },
            {
                "sha": "b61b728edbaa7d31e264ede98f1f87f4c1835a24",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c1d8d18053e5654a421e85771166fcaed55a5f90/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c1d8d18053e5654a421e85771166fcaed55a5f90/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/MessageFormatTest.java?ref=c1d8d18053e5654a421e85771166fcaed55a5f90",
                "patch": "@@ -345,6 +345,15 @@ public void test_equalsLjava_lang_Object() {\n         assertTrue(\"Should be equal2\", format1.equals(format2));\n     }\n \n+    /**\n+     * @tests java.text.MessageFormat#hashCode()\n+     */\n+    public void test_hashCode() {\n+        // Test for method\n+        // int java.text.MessageFormat.hashCode()\n+        assertEquals(\"Should be equal\", 3648, new MessageFormat(\"rr\", null).hashCode());\n+    }\n+\n     /**\n      * @tests java.text.MessageFormat#formatToCharacterIterator(java.lang.Object)\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-1404] [classlib][awt] Area doesn't throw\nNPE when input parameter is null\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@443313 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0dd488284233373925e9a9faf16f4cb958b78375",
        "parent": "https://github.com/apache/harmony-classlib/commit/27545e30cab9d82bae4755b98ed908c9c7a7f1e6",
        "bug_id": "harmony-classlib_192",
        "file": [
            {
                "sha": "02aba8adc76c01a4c80e23fc378e780eff8e1f60",
                "filename": "modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0dd488284233373925e9a9faf16f4cb958b78375/modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0dd488284233373925e9a9faf16f4cb958b78375/modules/awt/src/main/java/common/java/awt/geom/Area.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/geom/Area.java?ref=0dd488284233373925e9a9faf16f4cb958b78375",
                "patch": "@@ -35,6 +35,9 @@ public Area() {\n     }\n \n     public Area(Shape s) {\n+        if (s == null) {\n+            throw new NullPointerException();\n+        }\n         this.s = s;\n     }\n \n@@ -47,10 +50,16 @@ public boolean contains(double x, double y, double width, double height) {\n     }\n \n     public boolean contains(Point2D p) {\n+        if (p == null) {\n+            throw new NullPointerException();\n+        }\n         return s == null ? false : s.contains(p);\n     }\n \n     public boolean contains(Rectangle2D r) {\n+        if (r == null) {\n+            throw new NullPointerException();\n+        }\n         return s == null ? false : s.contains(r);\n     }\n \n@@ -63,6 +72,9 @@ public boolean intersects(double x, double y, double width, double height) {\n     }\n \n     public boolean intersects(Rectangle2D r) {\n+        if (r == null) {\n+            throw new NullPointerException();\n+        }\n         return s == null ? false : s.intersects(r);\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-1419] [classlib][awt]\nFlatteningPathIterator(null, 1) expected NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@443332 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/72527fb06d8f07999fbc9d81ebdc564bfce90015",
        "parent": "https://github.com/apache/harmony-classlib/commit/79a906c45f18806034bb864a72d72e1b923b45c8",
        "bug_id": "harmony-classlib_193",
        "file": [
            {
                "sha": "508f153dcdde3e3ef93957998f783ed80403cc6e",
                "filename": "modules/awt/src/main/java/common/java/awt/geom/FlatteningPathIterator.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/72527fb06d8f07999fbc9d81ebdc564bfce90015/modules/awt/src/main/java/common/java/awt/geom/FlatteningPathIterator.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/72527fb06d8f07999fbc9d81ebdc564bfce90015/modules/awt/src/main/java/common/java/awt/geom/FlatteningPathIterator.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/geom/FlatteningPathIterator.java?ref=72527fb06d8f07999fbc9d81ebdc564bfce90015",
                "patch": "@@ -114,6 +114,9 @@ public FlatteningPathIterator(PathIterator path, double flatness, int limit) {\n         if (limit < 0) {\n             throw new IllegalArgumentException(\"Limit is less then zero\");\n         }\n+        if (path == null) {\n+            throw new NullPointerException(\"Path is null\");\n+        }\n         this.p = path;\n         this.flatness = flatness;\n         this.flatness2 = flatness * flatness;",
                "deletions": 0
            },
            {
                "sha": "8b906f1a823d835544f2ba1adc8e7d7ee7de8aed",
                "filename": "modules/awt/src/test/api/java/common/java/awt/geom/FlatteningPathIteratorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/72527fb06d8f07999fbc9d81ebdc564bfce90015/modules/awt/src/test/api/java/common/java/awt/geom/FlatteningPathIteratorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/72527fb06d8f07999fbc9d81ebdc564bfce90015/modules/awt/src/test/api/java/common/java/awt/geom/FlatteningPathIteratorTest.java",
                "status": "modified",
                "changes": 24,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/geom/FlatteningPathIteratorTest.java?ref=72527fb06d8f07999fbc9d81ebdc564bfce90015",
                "patch": "@@ -43,18 +43,36 @@ protected void tearDown() throws Exception {\n         super.tearDown();\n     }\n \n-    public void testCreate() {\n+    public void testCreateInvalid() {\n         try {\n             new FlatteningPathIterator(p, -1, 5);\n-            fail(\"FlatteningPathIterator should throw exception IllegalArgumentException\");\n+            fail(\"expected IllegalArgumentException\");\n         } catch(IllegalArgumentException e) {\n+            // expected\n         }\n \n         try {\n             new FlatteningPathIterator(p, 1, -5);\n-            fail(\"FlatteningPathIterator should throw exception IllegalArgumentException\");\n+            fail(\"expected IllegalArgumentException\");\n         } catch(IllegalArgumentException e) {\n+            // expected\n         }\n+        \n+        // Regression test HARMONY-1419\n+        try {\n+            new FlatteningPathIterator(null, -1, 5);\n+            fail(\"expected IllegalArgumentException\");\n+        } catch(IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            new FlatteningPathIterator(null, 1, 5);\n+            fail(\"expected NPE\");\n+        } catch(NullPointerException e) {\n+            // expected\n+        }\n+        \n     }\n \n     public void testGetFlatness() {",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-1198: LogStream.setOutputStream(null) expected NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@442419 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/444a815c2a2a363f6de569ef27e39c0537240f48",
        "parent": "https://github.com/apache/harmony-classlib/commit/7fe4a4d29db86e1bb03ffb9ef2cc2b5c0e67becb",
        "bug_id": "harmony-classlib_194",
        "file": [
            {
                "sha": "46366949fc3bf2e491d7c2d1476c55d7ff129f96",
                "filename": "modules/rmi/src/main/java/java/rmi/server/LogStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/444a815c2a2a363f6de569ef27e39c0537240f48/modules/rmi/src/main/java/java/rmi/server/LogStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/444a815c2a2a363f6de569ef27e39c0537240f48/modules/rmi/src/main/java/java/rmi/server/LogStream.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/rmi/src/main/java/java/rmi/server/LogStream.java?ref=444a815c2a2a363f6de569ef27e39c0537240f48",
                "patch": "@@ -122,6 +122,9 @@ public void write(int b) {\n      */\n     @Deprecated\n     public synchronized void setOutputStream(OutputStream out) {\n+        if (out == null) {\n+            throw new NullPointerException();\n+        }\n         this.out = out;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "378a2322079ff992205b30a4433832d2ecb12771",
                "filename": "modules/rmi/src/test/api/java/org/apache/harmony/rmi/server/LogStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/444a815c2a2a363f6de569ef27e39c0537240f48/modules/rmi/src/test/api/java/org/apache/harmony/rmi/server/LogStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/444a815c2a2a363f6de569ef27e39c0537240f48/modules/rmi/src/test/api/java/org/apache/harmony/rmi/server/LogStreamTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/rmi/src/test/api/java/org/apache/harmony/rmi/server/LogStreamTest.java?ref=444a815c2a2a363f6de569ef27e39c0537240f48",
                "patch": "@@ -30,4 +30,16 @@ public void testWriteI() throws Exception {\n         //regression test for HARMONY-994\n         LogStream.log(\"tst\").write(0);\n     }\n+    \n+    public void testSetOutputStreamBad() throws Exception {\n+        // Regression test HARMONY-1198\n+        try {\n+            LogStream ls = LogStream.log(\"proba\");\n+            ls.setOutputStream(null);\n+            fail(\"Expected NPE\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from '[#HARMONY-1425] [classlib][awt] getting NPE on\nany AWT app start'.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@442227 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/04dd653404af64df3116fb781c6b9c5f0924c2d3",
        "parent": "https://github.com/apache/harmony-classlib/commit/6dde7218593b861e577d44235ba1578eef3649a9",
        "bug_id": "harmony-classlib_195",
        "file": [
            {
                "sha": "c26d9059ffc0bcf6db08779fa65db5536d93bf76",
                "filename": "modules/awt/src/main/java/common/java/awt/Toolkit.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/04dd653404af64df3116fb781c6b9c5f0924c2d3/modules/awt/src/main/java/common/java/awt/Toolkit.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/04dd653404af64df3116fb781c6b9c5f0924c2d3/modules/awt/src/main/java/common/java/awt/Toolkit.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Toolkit.java?ref=04dd653404af64df3116fb781c6b9c5f0924c2d3",
                "patch": "@@ -520,7 +520,7 @@ public Toolkit() {\n         lockAWT();\n         try {\n             ComponentInternals.setComponentInternals(new ComponentInternalsImpl());\n-            // EventQueue eq = new EventQueue(this);\n+            new EventQueue(this); // create the system EventQueue\n             dispatcher = new Dispatcher(this);\n             final String className = getWTKClassName();\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch for HARMONY-1080\n[classlib][crypto] compatibility: Harmony CipherInputStream().read(..) returns 0 while RI throws NPE\nwith minor fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@440022 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0816cdba5df7aa4ec782149f4c8cae8925f13614",
        "parent": "https://github.com/apache/harmony-classlib/commit/6e75ac7bcd04e3be47d6868c636fefbe8aca0bb5",
        "bug_id": "harmony-classlib_196",
        "file": [
            {
                "sha": "bdd0e35418e04996bd10271fcafa991f50ca82c2",
                "filename": "modules/crypto/src/main/java/javax/crypto/CipherInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0816cdba5df7aa4ec782149f4c8cae8925f13614/modules/crypto/src/main/java/javax/crypto/CipherInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0816cdba5df7aa4ec782149f4c8cae8925f13614/modules/crypto/src/main/java/javax/crypto/CipherInputStream.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/main/java/javax/crypto/CipherInputStream.java?ref=0816cdba5df7aa4ec782149f4c8cae8925f13614",
                "patch": "@@ -94,6 +94,10 @@ public int read(byte[] b) throws IOException {\n      * @com.intel.drl.spec_ref\n      */\n     public int read(byte[] b, int off, int len) throws IOException {\n+        if (in == null) {\n+            throw new NullPointerException(\"Underlying input stream is null\");\n+        }\n+\n         int read_b;\n         int i;\n         for (i=0; i<len; i++) {",
                "deletions": 0
            },
            {
                "sha": "5902d2682a1a20f600e3c667c69aab79eb4f052b",
                "filename": "modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0816cdba5df7aa4ec782149f4c8cae8925f13614/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0816cdba5df7aa4ec782149f4c8cae8925f13614/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherInputStreamTest.java",
                "status": "added",
                "changes": 38,
                "additions": 38,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherInputStreamTest.java?ref=0816cdba5df7aa4ec782149f4c8cae8925f13614",
                "patch": "@@ -0,0 +1,38 @@\n+/*\r\n+ *  Copyright 2006 The Apache Software Foundation or its licensors, as applicable.\r\n+ *\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.harmony.crypto.tests.javax.crypto;\r\n+\r\n+import junit.framework.TestCase;\r\n+import javax.crypto.CipherInputStream;\r\n+import javax.crypto.NullCipher;\r\n+\r\n+public class CipherInputStreamTest extends TestCase {\r\n+\r\n+    /**\r\n+     * @tests javax.crypto.CipherInputStream#read(byte[] b, int off, int len)\r\n+     */\r\n+    public void testReadBII() throws Exception {\r\n+        // Regression for HARMONY-1080\r\n+        CipherInputStream stream = new CipherInputStream(null, new NullCipher());\r\n+        try {\r\n+            stream.read(new byte[1], 1, 0);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "pplied patches from \"[#HARMONY-1118] [classlib][net] compatibility:\nDatagramSocket().send() throws NPE on Harmony and works silently on RI\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@438422 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/700ee9d039223340084301a3a23ddbb8c2866ee8",
        "parent": "https://github.com/apache/harmony-classlib/commit/44b2e7f384ca0b9450c52c72c72a1a8663a92180",
        "bug_id": "harmony-classlib_197",
        "file": [
            {
                "sha": "36283a189a0bf85bb386e0f946e8358fddb44625",
                "filename": "modules/luni/src/main/java/java/net/DatagramSocket.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/700ee9d039223340084301a3a23ddbb8c2866ee8/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/700ee9d039223340084301a3a23ddbb8c2866ee8/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/DatagramSocket.java?ref=700ee9d039223340084301a3a23ddbb8c2866ee8",
                "patch": "@@ -405,7 +405,7 @@ public void send(DatagramPacket pack) throws IOException {\n \t\t} else {\r\n \t\t\t// not connected so the target address cannot be null\r\n \t\t\tif (packAddr == null) {\r\n-\t\t\t\tthrow new NullPointerException(Msg.getString(\"K0331\"));\r\n+\t\t\t\treturn;\r\n \t\t\t}\r\n \t\t\tSecurityManager security = System.getSecurityManager();\r\n \t\t\tif (security != null) {\r",
                "deletions": 1
            },
            {
                "sha": "0314387a0d72dc995a9bcaacbdad92dd4489e2c7",
                "filename": "modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/700ee9d039223340084301a3a23ddbb8c2866ee8/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/700ee9d039223340084301a3a23ddbb8c2866ee8/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 40,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java?ref=700ee9d039223340084301a3a23ddbb8c2866ee8",
                "patch": "@@ -25,6 +25,7 @@\n import java.net.Inet6Address;\r\n import java.net.InetAddress;\r\n import java.net.InetSocketAddress;\r\n+import java.net.NetworkInterface;\r\n import java.net.PortUnreachableException;\r\n import java.net.SocketAddress;\r\n import java.net.SocketException;\r\n@@ -865,7 +866,7 @@ public void run() {\n \t/**\r\n \t * @tests java.net.DatagramSocket#send(java.net.DatagramPacket)\r\n \t */\r\n-\tpublic void test_sendLjava_net_DatagramPacket() {\r\n+\tpublic void test_sendLjava_net_DatagramPacket() throws Exception {\r\n \t\t// Test for method void\r\n \t\t// java.net.DatagramSocket.send(java.net.DatagramPacket)\r\n \r\n@@ -920,6 +921,44 @@ public void run() {\n \t\t} finally {\r\n \t\t\tds.close();\r\n \t\t}\r\n+\t\t//Regression for HARMONY-1118\r\n+\t\tclass testDatagramSocket extends DatagramSocket {\r\n+\t\t    public testDatagramSocket(DatagramSocketImpl impl){\r\n+\t\t       super(impl);\r\n+\t\t    }\r\n+\t\t}\r\n+\t\tclass testDatagramSocketImpl extends DatagramSocketImpl { \r\n+\t\t    protected void create() throws SocketException {} \r\n+\t\t    protected void bind(int arg0, InetAddress arg1) throws SocketException {} \r\n+\t\t    protected void send(DatagramPacket arg0) throws IOException {} \r\n+\t\t    protected int peek(InetAddress arg0) throws IOException { \r\n+\t\t        return 0; \r\n+\t\t    } \r\n+\t\t    protected int peekData(DatagramPacket arg0) throws IOException { \r\n+\t\t        return 0; \r\n+\t\t    } \r\n+\t\t    protected void receive(DatagramPacket arg0) throws IOException {} \r\n+\t\t    protected void setTTL(byte arg0) throws IOException {} \r\n+\t\t    protected byte getTTL() throws IOException { \r\n+\t\t        return 0; \r\n+\t\t    } \r\n+\t\t    protected void setTimeToLive(int arg0) throws IOException {} \r\n+\t\t    protected int getTimeToLive() throws IOException { \r\n+\t\t        return 0; \r\n+\t\t    } \r\n+\t\t    protected void join(InetAddress arg0) throws IOException {} \r\n+\t\t    protected void leave(InetAddress arg0) throws IOException {} \r\n+\t\t    protected void joinGroup(SocketAddress arg0, NetworkInterface arg1) throws IOException {} \r\n+\t\t    protected void leaveGroup(SocketAddress arg0, NetworkInterface arg1) throws IOException {} \r\n+\t\t    protected void close() {} \r\n+\t\t    public void setOption(int arg0, Object arg1) throws SocketException {} \r\n+\t\t    public Object getOption(int arg0) throws SocketException { \r\n+\t\t        return null; \r\n+\t\t    } \r\n+\t\t} \r\n+        InetSocketAddress sa = InetSocketAddress.createUnresolved(\"localhost\", 0); \r\n+        //no exception expected for next line\r\n+        new testDatagramSocket(new testDatagramSocketImpl()).send(new DatagramPacket(new byte[272], 3, sa)); \r\n \t}\r\n \r\n \t/**\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Appled fixes from \"#HARMONY-1070] [classlib][text]\njava.text.DecimalFormat.setDecimalFormatSymbols(null) throws unspecified NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@438041 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/153455be28b58dc12a8f7b15b410d6b7f460ab8a",
        "parent": "https://github.com/apache/harmony-classlib/commit/f0bde97770d00a9a9518d14d92aaedc7570528f3",
        "bug_id": "harmony-classlib_198",
        "file": [
            {
                "sha": "2c3ad01d97c2e36113494a19d401632bc1502bdd",
                "filename": "modules/text/src/main/java/java/text/DecimalFormat.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/153455be28b58dc12a8f7b15b410d6b7f460ab8a/modules/text/src/main/java/java/text/DecimalFormat.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/153455be28b58dc12a8f7b15b410d6b7f460ab8a/modules/text/src/main/java/java/text/DecimalFormat.java",
                "status": "modified",
                "changes": 10,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/DecimalFormat.java?ref=153455be28b58dc12a8f7b15b410d6b7f460ab8a",
                "patch": "@@ -457,10 +457,12 @@ public Number parse(String string, ParsePosition position) {\n      *            the DecimalFormatSymbols\r\n      */\r\n     public void setDecimalFormatSymbols(DecimalFormatSymbols value) {\r\n-        symbols = (DecimalFormatSymbols) value.clone();\r\n-        icuSymbols = dform.getDecimalFormatSymbols();\r\n-        copySymbols(icuSymbols, symbols);\r\n-        dform.setDecimalFormatSymbols(icuSymbols);\r\n+        if (value != null){\r\n+            symbols = (DecimalFormatSymbols) value.clone();\r\n+            icuSymbols = dform.getDecimalFormatSymbols();\r\n+            copySymbols(icuSymbols, symbols);\r\n+            dform.setDecimalFormatSymbols(icuSymbols);\r\n+        }\r\n     }\r\n \r\n     /**\r",
                "deletions": 4
            },
            {
                "sha": "d56b2f721bb494a240bd14c2a3d2a20a828cdbbb",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/153455be28b58dc12a8f7b15b410d6b7f460ab8a/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/153455be28b58dc12a8f7b15b410d6b7f460ab8a/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java?ref=153455be28b58dc12a8f7b15b410d6b7f460ab8a",
                "patch": "@@ -1570,4 +1570,18 @@ public void testParseMinusInfinityBigDecimalFalse() {\n         assertTrue(number instanceof Double);\n         assertTrue(Double.isInfinite(number.doubleValue()));\n     }\n+    \n+    /**\n+     * Test if setDecimalFormatSymbols method wont throw NullPointerException \n+     * when it is called with null parameter.\n+     */\n+    public void testSetDecimalFormatSymbolsAsNull(){\n+\t// Regression for HARMONY-1070\n+        try {                                                                   \n+            DecimalFormat format = (DecimalFormat)DecimalFormat.getInstance();\n+            format.setDecimalFormatSymbols(null);                     \n+        } catch (Exception e) {\n+            fail(\"Unexpected exception caught: \" + e);\n+        }  \n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply path for HARMONY-1280: [classlib][logging] java.util.logging.XMLFormatter.getHead(null) throws unexpected NPE.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@437203 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/770c55febe1fae961184c896e8f3fd11c2e5b51c",
        "parent": "https://github.com/apache/harmony-classlib/commit/f79a2f90a132f8cdbe7912c89cca3d4a29cfbea1",
        "bug_id": "harmony-classlib_199",
        "file": [
            {
                "sha": "5c9c493cbeb424bdf11d06b869ddf81ce3ffcbe6",
                "filename": "modules/logging/src/main/java/java/util/logging/XMLFormatter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/770c55febe1fae961184c896e8f3fd11c2e5b51c/modules/logging/src/main/java/java/util/logging/XMLFormatter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/770c55febe1fae961184c896e8f3fd11c2e5b51c/modules/logging/src/main/java/java/util/logging/XMLFormatter.java",
                "status": "modified",
                "changes": 453,
                "additions": 228,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/XMLFormatter.java?ref=770c55febe1fae961184c896e8f3fd11c2e5b51c",
                "patch": "@@ -1,225 +1,228 @@\n-/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *     http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package java.util.logging;\n-\n-import java.security.AccessController;\n-import java.security.PrivilegedAction;\n-import java.text.MessageFormat;\n-import java.util.Date;\n-import java.util.ResourceBundle;\n-\n-/**\n- * Format a given <code>LogRecord</code> into string represents XML. The DTD specified in \n- * Appendix A to Java Logging APIs specification is used.\n- * \n- * <code>XMLFormatter</code> uses given <code>Handler</code>'s encoding if has, otherwise\n- * uses default platform encoding instead. However, the UTF-8 is recommended encoding. \n- * \n- */\n-public class XMLFormatter extends Formatter {\n-\n-    /*\n-     * ---------------------------------------\n-     * Constants\n-     * ---------------------------------------\n-     */\n-\n-    private static final String lineSeperator = LogManager\n-            .getSystemLineSeparator();\n-\n-    private static final String indent = \"    \"; //$NON-NLS-1$\n-\n-    /*\n-     * ---------------------------------------\n-     * Constructor\n-     * ---------------------------------------\n-     */\n-\n-    /**\n-     * Default constructor\n-     */\n-    public XMLFormatter() {\n-        super();\n-    }\n-\n-    /*\n-     * ---------------------------------------\n-     * Abstract method implementation of Formatter  \n-     * ---------------------------------------\n-     */\n-    /**\n-     * Format a <code>LogRecord</code> into string which represents XML \n-     * \n-     * @param r the given LogRecord instance to be formatted\n-     * @return string which represents XML \n-     */\n-    public String format(LogRecord r) {\n-        //call a method of LogRecord to ensure not null\n-        long time = r.getMillis();\n-        //format to date\n-        String date = MessageFormat.format(\"{0, date} {0, time}\", //$NON-NLS-1$\n-                new Object[] { new Date(time) });\n-\n-        StringBuffer sb = new StringBuffer();\n-        sb.append((\"<record>\")).append(lineSeperator); //$NON-NLS-1$\n-        sb.append(indent).append((\"<date>\")).append(date).append((\"</date>\")) //$NON-NLS-1$ //$NON-NLS-2$\n-                .append(lineSeperator);\n-        sb.append(indent).append((\"<millis>\")).append(time).append( //$NON-NLS-1$\n-                (\"</millis>\")).append(lineSeperator); //$NON-NLS-1$\n-        sb.append(indent).append((\"<sequence>\")).append(r.getSequenceNumber()) //$NON-NLS-1$\n-                .append((\"</sequence>\")).append(lineSeperator); //$NON-NLS-1$\n-        if (null != r.getLoggerName()) {\n-            sb.append(indent).append((\"<logger>\")).append(r.getLoggerName()) //$NON-NLS-1$\n-                    .append((\"</logger>\")).append(lineSeperator); //$NON-NLS-1$\n-        }\n-        sb.append(indent).append((\"<level>\")).append(r.getLevel().getName()) //$NON-NLS-1$\n-                .append((\"</level>\")).append(lineSeperator); //$NON-NLS-1$\n-        if (null != r.getSourceClassName()) {\n-            sb.append(indent).append((\"<class>\")) //$NON-NLS-1$\n-                    .append(r.getSourceClassName()).append((\"</class>\")) //$NON-NLS-1$\n-                    .append(lineSeperator);\n-        }\n-        if (null != r.getSourceMethodName()) {\n-            sb.append(indent).append((\"<method>\")).append( //$NON-NLS-1$\n-                    r.getSourceMethodName()).append((\"</method>\")).append( //$NON-NLS-1$\n-                    lineSeperator);\n-        }\n-        sb.append(indent).append((\"<thread>\")).append(r.getThreadID()).append( //$NON-NLS-1$\n-                (\"</thread>\")).append(lineSeperator); //$NON-NLS-1$\n-        formatMessages(r, sb);\n-        Object[] params;\n-        if ((params = r.getParameters()) != null) {\n-            for (int i = 0; i < params.length; i++) {\n-                sb.append(indent).append((\"<param>\")).append(params[i]).append( //$NON-NLS-1$\n-                        (\"</param>\")).append(lineSeperator); //$NON-NLS-1$\n-            }\n-        }\n-        formatThrowable(r, sb);\n-        sb.append((\"</record>\")).append(lineSeperator); //$NON-NLS-1$\n-        return sb.toString();\n-    }\n-\n-    /*\n-     * ---------------------------------------\n-     * Methods override Formatter \n-     * ---------------------------------------\n-     */\n-\n-    private void formatMessages(LogRecord r, StringBuffer sb) {\n-        //get localized message if has, but don't call Formatter.formatMessage to parse pattern string\n-        ResourceBundle rb = r.getResourceBundle();\n-        String pattern = r.getMessage();\n-        if (null != rb && null != pattern) {\n-            String message;\n-            try {\n-                message = rb.getString(pattern);\n-            } catch (Exception e) {\n-                message = null;\n-            }\n-\n-            if (message == null) {\n-                message = pattern;\n-                sb.append(indent).append((\"<message>\")).append(message).append( //$NON-NLS-1$\n-                        (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\n-            } else {\n-                sb.append(indent).append((\"<message>\")).append(message).append( //$NON-NLS-1$\n-                        (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\n-                sb.append(indent).append((\"<key>\")).append(pattern).append( //$NON-NLS-1$\n-                        (\"</key>\")).append(lineSeperator); //$NON-NLS-1$\n-                sb.append(indent).append((\"<catalog>\")).append( //$NON-NLS-1$\n-                        r.getResourceBundleName()).append((\"</catalog>\")) //$NON-NLS-1$\n-                        .append(lineSeperator);\n-            }\n-        } else if(null != pattern){\n-            sb.append(indent).append((\"<message>\")).append(pattern).append( //$NON-NLS-1$\n-                    (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\n-        } else{\n-            sb.append(indent).append((\"<message/>\")); //$NON-NLS-1$\n-        }\n-    }\n-\n-    private void formatThrowable(LogRecord r, StringBuffer sb) {\n-        Throwable t;\n-        if ((t = r.getThrown()) != null) {\n-            sb.append(indent).append(\"<exception>\").append(lineSeperator); //$NON-NLS-1$\n-            sb.append(indent).append(indent).append(\"<message>\").append( //$NON-NLS-1$\n-                    t.toString()).append(\"</message>\").append(lineSeperator); //$NON-NLS-1$\n-            //format throwable's stack trace\n-            StackTraceElement[] elements = t.getStackTrace();\n-            for (int i = 0; i < elements.length; i++) {\n-                StackTraceElement e = elements[i];\n-                sb.append(indent).append(indent).append(\"<frame>\").append( //$NON-NLS-1$\n-                        lineSeperator);\n-                sb.append(indent).append(indent).append(indent).append(\n-                        \"<class>\").append(e.getClassName()).append(\"</class>\")  //$NON-NLS-1$//$NON-NLS-2$\n-                        .append(lineSeperator);\n-                sb.append(indent).append(indent).append(indent).append(\n-                        \"<method>\").append(e.getMethodName()).append( //$NON-NLS-1$\n-                        \"</method>\").append(lineSeperator); //$NON-NLS-1$\n-                sb.append(indent).append(indent).append(indent)\n-                        .append(\"<line>\").append(e.getLineNumber()).append( //$NON-NLS-1$\n-                                \"</line>\").append(lineSeperator); //$NON-NLS-1$\n-                sb.append(indent).append(indent).append(\"</frame>\").append( //$NON-NLS-1$\n-                        lineSeperator);\n-            }\n-            sb.append(indent).append(\"</exception>\").append(lineSeperator); //$NON-NLS-1$\n-        }\n-    }\n-\n-    /**\n-     * Return the header string for XML, use given handler's encoding if has, \n-     * other wise use default platform encoding \n-     * \n-     * @param h the given handler\n-     * @return the header string for XML\n-     */\n-    public String getHead(Handler h) {\n-        String encoding = h.getEncoding();\n-        if (null == encoding) {\n-            encoding = getSystemProperty(\"file.encoding\"); //$NON-NLS-1$\n-        }\n-        StringBuffer sb = new StringBuffer();\n-        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"\").append(encoding).append( //$NON-NLS-1$\n-                \"\\\" standalone=\\\"no\\\"?>\").append(lineSeperator); //$NON-NLS-1$\n-        sb.append(\"<!DOCTYPE log SYSTEM \\\"logger.dtd\\\">\").append(lineSeperator); //$NON-NLS-1$\n-        sb.append((\"<log>\")); //$NON-NLS-1$\n-        return sb.toString();\n-    }\n-\n-    /**\n-     * Return the tail string for XML\n-     * \n-     * @param h the given handler\n-     * @return the tail string for XML\n-     */\n-    public String getTail(Handler h) {\n-        return \"</log>\"; //$NON-NLS-1$\n-    }\n-\n-    //use privilege code to get system property\n-    private static String getSystemProperty(final String key) {\n-        return (String) AccessController.doPrivileged(\n-          new PrivilegedAction<String>() {\n-            public String run() {\n-                return System.getProperty(key);\n-            }\n-        });\n-    }\n-\n-}\n-\n-\n+/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package java.util.logging;\r\n+\r\n+import java.security.AccessController;\r\n+import java.security.PrivilegedAction;\r\n+import java.text.MessageFormat;\r\n+import java.util.Date;\r\n+import java.util.ResourceBundle;\r\n+\r\n+/**\r\n+ * Format a given <code>LogRecord</code> into string represents XML. The DTD specified in \r\n+ * Appendix A to Java Logging APIs specification is used.\r\n+ * \r\n+ * <code>XMLFormatter</code> uses given <code>Handler</code>'s encoding if has, otherwise\r\n+ * uses default platform encoding instead. However, the UTF-8 is recommended encoding. \r\n+ * \r\n+ */\r\n+public class XMLFormatter extends Formatter {\r\n+\r\n+    /*\r\n+     * ---------------------------------------\r\n+     * Constants\r\n+     * ---------------------------------------\r\n+     */\r\n+\r\n+    private static final String lineSeperator = LogManager\r\n+            .getSystemLineSeparator();\r\n+\r\n+    private static final String indent = \"    \"; //$NON-NLS-1$\r\n+\r\n+    /*\r\n+     * ---------------------------------------\r\n+     * Constructor\r\n+     * ---------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Default constructor\r\n+     */\r\n+    public XMLFormatter() {\r\n+        super();\r\n+    }\r\n+\r\n+    /*\r\n+     * ---------------------------------------\r\n+     * Abstract method implementation of Formatter  \r\n+     * ---------------------------------------\r\n+     */\r\n+    /**\r\n+     * Format a <code>LogRecord</code> into string which represents XML \r\n+     * \r\n+     * @param r the given LogRecord instance to be formatted\r\n+     * @return string which represents XML \r\n+     */\r\n+    public String format(LogRecord r) {\r\n+        //call a method of LogRecord to ensure not null\r\n+        long time = r.getMillis();\r\n+        //format to date\r\n+        String date = MessageFormat.format(\"{0, date} {0, time}\", //$NON-NLS-1$\r\n+                new Object[] { new Date(time) });\r\n+\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append((\"<record>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        sb.append(indent).append((\"<date>\")).append(date).append((\"</date>\")) //$NON-NLS-1$ //$NON-NLS-2$\r\n+                .append(lineSeperator);\r\n+        sb.append(indent).append((\"<millis>\")).append(time).append( //$NON-NLS-1$\r\n+                (\"</millis>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        sb.append(indent).append((\"<sequence>\")).append(r.getSequenceNumber()) //$NON-NLS-1$\r\n+                .append((\"</sequence>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        if (null != r.getLoggerName()) {\r\n+            sb.append(indent).append((\"<logger>\")).append(r.getLoggerName()) //$NON-NLS-1$\r\n+                    .append((\"</logger>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        }\r\n+        sb.append(indent).append((\"<level>\")).append(r.getLevel().getName()) //$NON-NLS-1$\r\n+                .append((\"</level>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        if (null != r.getSourceClassName()) {\r\n+            sb.append(indent).append((\"<class>\")) //$NON-NLS-1$\r\n+                    .append(r.getSourceClassName()).append((\"</class>\")) //$NON-NLS-1$\r\n+                    .append(lineSeperator);\r\n+        }\r\n+        if (null != r.getSourceMethodName()) {\r\n+            sb.append(indent).append((\"<method>\")).append( //$NON-NLS-1$\r\n+                    r.getSourceMethodName()).append((\"</method>\")).append( //$NON-NLS-1$\r\n+                    lineSeperator);\r\n+        }\r\n+        sb.append(indent).append((\"<thread>\")).append(r.getThreadID()).append( //$NON-NLS-1$\r\n+                (\"</thread>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        formatMessages(r, sb);\r\n+        Object[] params;\r\n+        if ((params = r.getParameters()) != null) {\r\n+            for (int i = 0; i < params.length; i++) {\r\n+                sb.append(indent).append((\"<param>\")).append(params[i]).append( //$NON-NLS-1$\r\n+                        (\"</param>\")).append(lineSeperator); //$NON-NLS-1$\r\n+            }\r\n+        }\r\n+        formatThrowable(r, sb);\r\n+        sb.append((\"</record>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    /*\r\n+     * ---------------------------------------\r\n+     * Methods override Formatter \r\n+     * ---------------------------------------\r\n+     */\r\n+\r\n+    private void formatMessages(LogRecord r, StringBuffer sb) {\r\n+        //get localized message if has, but don't call Formatter.formatMessage to parse pattern string\r\n+        ResourceBundle rb = r.getResourceBundle();\r\n+        String pattern = r.getMessage();\r\n+        if (null != rb && null != pattern) {\r\n+            String message;\r\n+            try {\r\n+                message = rb.getString(pattern);\r\n+            } catch (Exception e) {\r\n+                message = null;\r\n+            }\r\n+\r\n+            if (message == null) {\r\n+                message = pattern;\r\n+                sb.append(indent).append((\"<message>\")).append(message).append( //$NON-NLS-1$\r\n+                        (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\r\n+            } else {\r\n+                sb.append(indent).append((\"<message>\")).append(message).append( //$NON-NLS-1$\r\n+                        (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\r\n+                sb.append(indent).append((\"<key>\")).append(pattern).append( //$NON-NLS-1$\r\n+                        (\"</key>\")).append(lineSeperator); //$NON-NLS-1$\r\n+                sb.append(indent).append((\"<catalog>\")).append( //$NON-NLS-1$\r\n+                        r.getResourceBundleName()).append((\"</catalog>\")) //$NON-NLS-1$\r\n+                        .append(lineSeperator);\r\n+            }\r\n+        } else if(null != pattern){\r\n+            sb.append(indent).append((\"<message>\")).append(pattern).append( //$NON-NLS-1$\r\n+                    (\"</message>\")).append(lineSeperator); //$NON-NLS-1$\r\n+        } else{\r\n+            sb.append(indent).append((\"<message/>\")); //$NON-NLS-1$\r\n+        }\r\n+    }\r\n+\r\n+    private void formatThrowable(LogRecord r, StringBuffer sb) {\r\n+        Throwable t;\r\n+        if ((t = r.getThrown()) != null) {\r\n+            sb.append(indent).append(\"<exception>\").append(lineSeperator); //$NON-NLS-1$\r\n+            sb.append(indent).append(indent).append(\"<message>\").append( //$NON-NLS-1$\r\n+                    t.toString()).append(\"</message>\").append(lineSeperator); //$NON-NLS-1$\r\n+            //format throwable's stack trace\r\n+            StackTraceElement[] elements = t.getStackTrace();\r\n+            for (int i = 0; i < elements.length; i++) {\r\n+                StackTraceElement e = elements[i];\r\n+                sb.append(indent).append(indent).append(\"<frame>\").append( //$NON-NLS-1$\r\n+                        lineSeperator);\r\n+                sb.append(indent).append(indent).append(indent).append(\r\n+                        \"<class>\").append(e.getClassName()).append(\"</class>\")  //$NON-NLS-1$//$NON-NLS-2$\r\n+                        .append(lineSeperator);\r\n+                sb.append(indent).append(indent).append(indent).append(\r\n+                        \"<method>\").append(e.getMethodName()).append( //$NON-NLS-1$\r\n+                        \"</method>\").append(lineSeperator); //$NON-NLS-1$\r\n+                sb.append(indent).append(indent).append(indent)\r\n+                        .append(\"<line>\").append(e.getLineNumber()).append( //$NON-NLS-1$\r\n+                                \"</line>\").append(lineSeperator); //$NON-NLS-1$\r\n+                sb.append(indent).append(indent).append(\"</frame>\").append( //$NON-NLS-1$\r\n+                        lineSeperator);\r\n+            }\r\n+            sb.append(indent).append(\"</exception>\").append(lineSeperator); //$NON-NLS-1$\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the header string for XML, use given handler's encoding if has, \r\n+     * other wise use default platform encoding \r\n+     * \r\n+     * @param h the given handler\r\n+     * @return the header string for XML\r\n+     */\r\n+    public String getHead(Handler h) {\r\n+        String encoding = null;\r\n+        if(null != h) {\r\n+        \tencoding = h.getEncoding();\r\n+        }\r\n+        if (null == encoding) {\r\n+            encoding = getSystemProperty(\"file.encoding\"); //$NON-NLS-1$\r\n+        }\r\n+        StringBuffer sb = new StringBuffer();\r\n+        sb.append(\"<?xml version=\\\"1.0\\\" encoding=\\\"\").append(encoding).append( //$NON-NLS-1$\r\n+                \"\\\" standalone=\\\"no\\\"?>\").append(lineSeperator); //$NON-NLS-1$\r\n+        sb.append(\"<!DOCTYPE log SYSTEM \\\"logger.dtd\\\">\").append(lineSeperator); //$NON-NLS-1$\r\n+        sb.append((\"<log>\")); //$NON-NLS-1$\r\n+        return sb.toString();\r\n+    }\r\n+\r\n+    /**\r\n+     * Return the tail string for XML\r\n+     * \r\n+     * @param h the given handler\r\n+     * @return the tail string for XML\r\n+     */\r\n+    public String getTail(Handler h) {\r\n+        return \"</log>\"; //$NON-NLS-1$\r\n+    }\r\n+\r\n+    //use privilege code to get system property\r\n+    private static String getSystemProperty(final String key) {\r\n+        return (String) AccessController.doPrivileged(\r\n+          new PrivilegedAction<String>() {\r\n+            public String run() {\r\n+                return System.getProperty(key);\r\n+            }\r\n+        });\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r",
                "deletions": 225
            },
            {
                "sha": "4109b6f275554b304d393abfe7133887abe53e07",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/XMLFormatterTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/770c55febe1fae961184c896e8f3fd11c2e5b51c/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/XMLFormatterTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/770c55febe1fae961184c896e8f3fd11c2e5b51c/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/XMLFormatterTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/XMLFormatterTest.java?ref=770c55febe1fae961184c896e8f3fd11c2e5b51c",
                "patch": "@@ -144,6 +144,10 @@ public void testGetHead() throws SecurityException,\n \t\tresult = formatter.getHead(handler);\r\n \t\tassertNull(handler.getEncoding());\r\n \t\t// assertTrue(result.indexOf(defaultEncoding)>0);\r\n+\t\t\r\n+\t\t// regression test for Harmony-1280\r\n+\t\t// make sure no NPE is thrown\r\n+\t\tformatter.getHead(null);\r\n \r\n \t}\r\n \r\n@@ -153,11 +157,6 @@ public void testGetTail() {\n \r\n \tpublic void testInvalidParameter() {\r\n \t\tformatter.getTail(null);\r\n-\t\ttry {\r\n-\t\t\tformatter.getHead(null);\r\n-\t\t\tfail();\r\n-\t\t} catch (NullPointerException e) {\r\n-\t\t}\r\n \t\ttry {\r\n \t\t\tformatter.format(null);\r\n \t\t\tfail();\r",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1256 ([classlib][io] ObjectInputStream.readClassDescriptor() throws NotActiveException while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@433936 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe",
        "parent": "https://github.com/apache/harmony-classlib/commit/51d277ae1645c228a2bbe819f0881a6d6ad626fd",
        "bug_id": "harmony-classlib_200",
        "file": [
            {
                "sha": "2023b2f7864ab39a72f785c69d231671db2bc9fe",
                "filename": "modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectInputStream.java?ref=a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe",
                "patch": "@@ -1710,9 +1710,6 @@ private ObjectStreamClass readNewClassDesc(boolean unshared)\n      */\n     protected ObjectStreamClass readClassDescriptor() throws IOException,\n             ClassNotFoundException {\n-        if (descriptorHandle == null) {\n-            throw new NotActiveException();\n-        }\n \n         ObjectStreamClass newClassDesc = new ObjectStreamClass();\n         newClassDesc.setName(input.readUTF());",
                "deletions": 3
            },
            {
                "sha": "5f6b958f78302c60ac5e83bab6db85fecb27504f",
                "filename": "modules/luni/src/test/java/org/apache/harmony/luni/tests/java/io/ObjectInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/io/ObjectInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/io/ObjectInputStreamTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/luni/tests/java/io/ObjectInputStreamTest.java?ref=a8226afb2cc2a8aad45c659a1cc2c3cf40079ffe",
                "patch": "@@ -90,6 +90,27 @@ public B() {\n \t    \tlist.add(this);\n \t    }\n \t} \t\n+    \n+    class OIS extends ObjectInputStream {\n+        \n+        OIS () throws IOException {\n+            super();\n+         }\n+        \n+        void test() throws ClassNotFoundException,IOException {\n+            readClassDescriptor();\n+        }\n+        \n+    }\n+    \n+    public void test_readClassDescriptor() throws ClassNotFoundException,IOException {\n+        try {\n+            new OIS().test();\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+    \n }\n \n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1233 ([classlib][net] compatibility: URLEncoder.encode(null, \"harmony\") throws NPE on RI and UnsupportedEncodingException on Harmony)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@433515 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ff2ed6fcb14d26fc849153e901cbc548b045ba71",
        "parent": "https://github.com/apache/harmony-classlib/commit/628376b45425f32362a889fe160c27bf14471c40",
        "bug_id": "harmony-classlib_201",
        "file": [
            {
                "sha": "2a817438da57e0daaab3b9e798c9cc4f8149e95c",
                "filename": "modules/luni/src/main/java/java/net/URLEncoder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ff2ed6fcb14d26fc849153e901cbc548b045ba71/modules/luni/src/main/java/java/net/URLEncoder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ff2ed6fcb14d26fc849153e901cbc548b045ba71/modules/luni/src/main/java/java/net/URLEncoder.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URLEncoder.java?ref=ff2ed6fcb14d26fc849153e901cbc548b045ba71",
                "patch": "@@ -91,7 +91,7 @@ else if (ch == ' ')\n \t */\r\n \tpublic static String encode(String s, String enc)\r\n \t\t\tthrows UnsupportedEncodingException {\r\n-\t\tif (enc == null) {\r\n+\t\tif (s == null || enc == null) {\r\n \t\t\tthrow new NullPointerException();\r\n \t\t}\r\n \t\t// check for UnsupportedEncodingException\r",
                "deletions": 1
            },
            {
                "sha": "aa4812f43ba16a0896e5bd0a90ed8c62456111c0",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLEncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ff2ed6fcb14d26fc849153e901cbc548b045ba71/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLEncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ff2ed6fcb14d26fc849153e901cbc548b045ba71/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLEncoderTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLEncoderTest.java?ref=ff2ed6fcb14d26fc849153e901cbc548b045ba71",
                "patch": "@@ -25,13 +25,20 @@\n \t/**\r\n \t * @tests URLEncoder#encode(String, String)\r\n \t */\r\n-\tpublic void test_encodeLjava_lang_StringLjava_lang_String() {\r\n+\tpublic void test_encodeLjava_lang_StringLjava_lang_String() throws Exception {\r\n \t\t// Regression for HARMONY-24\r\n         try {\r\n             URLEncoder.encode(\"str\",\"unknown_enc\");\r\n             fail(\"Assert 0: Should throw UEE for invalid encoding\");\r\n         } catch (UnsupportedEncodingException e) {\r\n             // expected\r\n         } \r\n+\t\t//Regression for HARMONY-1233\r\n+\t\ttry {\r\n+\t\t\tURLEncoder.encode(null, \"harmony\");\r\n+\t\t\tfail(\"NullPointerException expected\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t//expected\r\n+\t\t}\r\n \t}\r\n }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1100 ([classlib][io] compatibility: Harmony method DataOutputStream(null).writeBytes(\"\") throws NPE while RI does not)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@432348 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6df3f51803f583a73bee8841918c055b6ecf8ccf",
        "parent": "https://github.com/apache/harmony-classlib/commit/6c322db247821b91f50238806692be4abe30fbb4",
        "bug_id": "harmony-classlib_202",
        "file": [
            {
                "sha": "90f9b9da28e1c96c440643c5af2228854e684e99",
                "filename": "modules/luni/src/main/java/java/io/DataOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6df3f51803f583a73bee8841918c055b6ecf8ccf/modules/luni/src/main/java/java/io/DataOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6df3f51803f583a73bee8841918c055b6ecf8ccf/modules/luni/src/main/java/java/io/DataOutputStream.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/DataOutputStream.java?ref=6df3f51803f583a73bee8841918c055b6ecf8ccf",
                "patch": "@@ -157,6 +157,9 @@ public final void writeByte(int val) throws IOException {\n \t * @see DataInput#readFully(byte[],int,int)\r\n \t */\r\n \tpublic final void writeBytes(String str) throws IOException {\r\n+\t\tif (str.length() == 0) {\r\n+\t\t\treturn;\r\n+\t\t}\r\n \t\tbyte bytes[] = new byte[str.length()];\r\n \t\tfor (int index = 0; index < str.length(); index++)\r\n \t\t\tbytes[index] = (byte) str.charAt(index);\r",
                "deletions": 0
            },
            {
                "sha": "b84053b2485824c4d94c4bbc1ec12bb840578199",
                "filename": "modules/luni/src/test/java/tests/api/java/io/DataOutputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6df3f51803f583a73bee8841918c055b6ecf8ccf/modules/luni/src/test/java/tests/api/java/io/DataOutputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6df3f51803f583a73bee8841918c055b6ecf8ccf/modules/luni/src/test/java/tests/api/java/io/DataOutputStreamTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/DataOutputStreamTest.java?ref=6df3f51803f583a73bee8841918c055b6ecf8ccf",
                "patch": "@@ -151,7 +151,7 @@ public void test_writeByteI() {\n \t/**\r\n \t * @tests java.io.DataOutputStream#writeBytes(java.lang.String)\r\n \t */\r\n-\tpublic void test_writeBytesLjava_lang_String() {\r\n+\tpublic void test_writeBytesLjava_lang_String() throws IOException {\r\n \t\t// Test for method void\r\n \t\t// java.io.DataOutputStream.writeBytes(java.lang.String)\r\n \t\ttry {\r\n@@ -166,6 +166,8 @@ public void test_writeBytesLjava_lang_String() {\n \t\t} catch (IOException e) {\r\n \t\t\tfail(\"Exception during writeBytes test : \" + e.getMessage());\r\n \t\t}\r\n+\t\t// regression test for HARMONY-1101\r\n+\t\tnew DataOutputStream(null).writeBytes(\"\");\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-1136 ([classlib][net] unexpected NPE for Socket().setKeepAlive(true))\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@432340 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/dc3c9622879e2c2fc61455aa01d76dfb9f0090c3",
        "parent": "https://github.com/apache/harmony-classlib/commit/eb0db8e7130b0d924a55e16b95b7f8afeb2fd8f1",
        "bug_id": "harmony-classlib_203",
        "file": [
            {
                "sha": "d65a7f0d71d574d0c31927a3c0e192e445e98a6b",
                "filename": "modules/luni/src/main/java/java/net/Socket.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/dc3c9622879e2c2fc61455aa01d76dfb9f0090c3/modules/luni/src/main/java/java/net/Socket.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/dc3c9622879e2c2fc61455aa01d76dfb9f0090c3/modules/luni/src/main/java/java/net/Socket.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/Socket.java?ref=dc3c9622879e2c2fc61455aa01d76dfb9f0090c3",
                "patch": "@@ -548,9 +548,11 @@ public boolean getTcpNoDelay() throws SocketException {\n \t *             if an error occurs setting the option\r\n \t */\r\n \tpublic void setKeepAlive(boolean value) throws SocketException {\r\n-\t\tcheckClosedAndCreate(true);\r\n-\t\timpl.setOption(SocketOptions.SO_KEEPALIVE, value ? Boolean.TRUE\r\n-\t\t\t\t: Boolean.FALSE);\r\n+\t\tif (impl != null) {\r\n+\t\t\tcheckClosedAndCreate(true);\r\n+\t\t\timpl.setOption(SocketOptions.SO_KEEPALIVE, value ? Boolean.TRUE\r\n+\t\t\t\t\t: Boolean.FALSE);\r\n+\t\t}\r\n \t}\r\n \r\n //\tstatic native int getSocketFlags();\r",
                "deletions": 3
            },
            {
                "sha": "3cda3315ef5eaf38900b2c4ab8c73157667b7fc0",
                "filename": "modules/luni/src/test/java/tests/api/java/net/SocketTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/dc3c9622879e2c2fc61455aa01d76dfb9f0090c3/modules/luni/src/test/java/tests/api/java/net/SocketTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/dc3c9622879e2c2fc61455aa01d76dfb9f0090c3/modules/luni/src/test/java/tests/api/java/net/SocketTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/SocketTest.java?ref=dc3c9622879e2c2fc61455aa01d76dfb9f0090c3",
                "patch": "@@ -29,6 +29,7 @@\n import java.net.Socket;\r\n import java.net.SocketAddress;\r\n import java.net.SocketException;\r\n+import java.net.SocketImpl;\r\n import java.net.SocketTimeoutException;\r\n import java.net.UnknownHostException;\r\n import java.security.Permission;\r\n@@ -620,7 +621,7 @@ public void test_getTcpNoDelay() {\n \t/**\r\n \t * @tests java.net.Socket#setKeepAlive(boolean)\r\n \t */\r\n-\tpublic void test_setKeepAliveZ() {\r\n+\tpublic void test_setKeepAliveZ() throws Exception {\r\n \t\t// There is not really a good test for this as it is there to detect\r\n \t\t// crashed machines. Just make sure we can set it\r\n \t\ttry {\r\n@@ -634,7 +635,14 @@ public void test_setKeepAliveZ() {\n \t\t} catch (Exception e) {\r\n \t\t\thandleException(e, SO_KEEPALIVE);\r\n \t\t}\r\n+        // regression test for HARMONY-1136\r\n+\t\tnew testSocket((SocketImpl) null).setKeepAlive(true);\r\n \t}\r\n+\tclass testSocket extends Socket {\r\n+\t\tpublic testSocket(SocketImpl impl) throws SocketException {\r\n+\t\t\tsuper(impl);\r\n+\t\t}\r\n+\t} \r\n \r\n \t/**\r\n \t * @tests java.net.Socket#setSocketImplFactory(java.net.SocketImplFactory)\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1195 ([classlib][io] PrintStream(OutputStream, boolean, String) throws IAE while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@431852 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d02388d034626096d4577ce558b7a1df071f23f2",
        "parent": "https://github.com/apache/harmony-classlib/commit/b5d6ce1beaac34d91906c255730ba1051694e014",
        "bug_id": "harmony-classlib_204",
        "file": [
            {
                "sha": "cf3897aee4531b4f217c2ff3e238a50157fce169",
                "filename": "modules/luni/src/main/java/java/io/PrintStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d02388d034626096d4577ce558b7a1df071f23f2/modules/luni/src/main/java/java/io/PrintStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d02388d034626096d4577ce558b7a1df071f23f2/modules/luni/src/main/java/java/io/PrintStream.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/PrintStream.java?ref=d02388d034626096d4577ce558b7a1df071f23f2",
                "patch": "@@ -117,7 +117,7 @@ public PrintStream(OutputStream out, boolean autoflush) {\n \tpublic PrintStream(OutputStream out, boolean autoflush, String enc)\r\n \t\t\tthrows UnsupportedEncodingException {\r\n \t\tsuper(out);\r\n-\t\tif (out == null) {\r\n+\t\tif (out == null || enc == null) {\r\n             throw new NullPointerException();\r\n         }\r\n \t\tthis.autoflush = autoflush;\r",
                "deletions": 1
            },
            {
                "sha": "46300a52fbc317533f48ca2a8d9dff5e05d4cd7d",
                "filename": "modules/luni/src/test/java/tests/api/java/io/PrintStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d02388d034626096d4577ce558b7a1df071f23f2/modules/luni/src/test/java/tests/api/java/io/PrintStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d02388d034626096d4577ce558b7a1df071f23f2/modules/luni/src/test/java/tests/api/java/io/PrintStreamTest.java",
                "status": "modified",
                "changes": 10,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/PrintStreamTest.java?ref=d02388d034626096d4577ce558b7a1df071f23f2",
                "patch": "@@ -37,20 +37,24 @@\n \t/**\r\n \t * @tests java.io.PrintStream#PrintStream(java.io.OutputStream)\r\n \t */\r\n-\tpublic void test_ConstructorLjava_io_OutputStream() {\r\n+\tpublic void test_ConstructorLjava_io_OutputStream() throws Exception{\r\n \t\t// Test for method java.io.PrintStream(java.io.OutputStream)\r\n \t\ttry {\r\n \t\t\tos = new java.io.PrintStream(bos);\r\n \t\t\tos.print(2345.76834720202);\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tfail(\"IOException during constructor test : \" + e.getMessage());\r\n \t\t} finally {\r\n \t\t\ttry {\r\n \t\t\t\tos.close();\r\n \t\t\t} catch (Exception e) {\r\n \t\t\t\tfail(\"IOException during constructor test : \" + e.getMessage());\r\n \t\t\t}\r\n \t\t}\r\n+        //regression for HARMONY-1195\r\n+        try {\r\n+            os = new PrintStream(bos, true, null);\r\n+            fail(\"Should throw NPE.\");\r\n+        } catch (NullPointerException e) {\r\n+        } \r\n \t}\r\n \r\n \t/**\r",
                "deletions": 3
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1200 ([classlib][net] SocketPermission.implies((Permission) null)) expected false but throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@431849 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5215217d0165f1948557e0889393c5ead8d02c6e",
        "parent": "https://github.com/apache/harmony-classlib/commit/029b8d889f168b0b844b2a26f0cd986dc3075ce6",
        "bug_id": "harmony-classlib_205",
        "file": [
            {
                "sha": "cd9b0f602ead76208f7a535a3d7019768e240caf",
                "filename": "modules/luni/src/main/java/java/net/SocketPermission.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5215217d0165f1948557e0889393c5ead8d02c6e/modules/luni/src/main/java/java/net/SocketPermission.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5215217d0165f1948557e0889393c5ead8d02c6e/modules/luni/src/main/java/java/net/SocketPermission.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/SocketPermission.java?ref=5215217d0165f1948557e0889393c5ead8d02c6e",
                "patch": "@@ -238,7 +238,7 @@ public boolean implies(Permission p) {\n \r\n \t\t// tests if the action list of p is the subset of the one of the\r\n \t\t// receiver\r\n-\t\tif ((actionsMask & sp.actionsMask) != sp.actionsMask)\r\n+        if (sp == null || (actionsMask & sp.actionsMask) != sp.actionsMask)\r\n \t\t\treturn false;\r\n \r\n \t\t// only check the port range if the action string of the current object\r",
                "deletions": 1
            },
            {
                "sha": "887b0151b5c563b0343a088848101f60d5aff819",
                "filename": "modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5215217d0165f1948557e0889393c5ead8d02c6e/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5215217d0165f1948557e0889393c5ead8d02c6e/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/SocketPermissionTest.java?ref=5215217d0165f1948557e0889393c5ead8d02c6e",
                "patch": "@@ -108,6 +108,10 @@ public void test_impliesLjava_security_Permission() {\n \t\t// Test for method boolean\r\n \t\t// java.net.SocketPermission.implies(java.security.Permission)\r\n \t\tassertTrue(\"All should imply resolve\", star_All.implies(star_Resolve));\r\n+\t\t\r\n+        // regression for HARMONY-1200\r\n+        assertFalse(\"Null should not be implied\", star_All.implies((SocketPermission)null));\r\n+        \r\n \t\tassertTrue(\"Equals should imply eachother\", www_All\r\n \t\t\t\t.implies(copyOfWww_All));\r\n \t\tassertTrue(\"Wild should imply normal\", star_All.implies(www_All));\r\n@@ -154,6 +158,7 @@ public void test_impliesLjava_security_Permission() {\n \t\tPermissionCollection col = perm1.newPermissionCollection();\r\n \t\tcol.add(perm1);\r\n \t\tassertTrue(\"collection should imply port 80\", col.implies(perm2));\r\n+\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1161 ([classlib][luni] java.util.TreeMap.subMap(Object, Object).size() throws unspecified NPE.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@431540 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/da368a45ec2c5d0a9cdda3ef73972d7e572d542c",
        "parent": "https://github.com/apache/harmony-classlib/commit/b7a94cf498c5861f76078bd129281fc2606ded64",
        "bug_id": "harmony-classlib_206",
        "file": [
            {
                "sha": "90574b29c768fcc74974df704544c64d5c67a522",
                "filename": "modules/luni/src/main/java/java/util/TreeMap.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/da368a45ec2c5d0a9cdda3ef73972d7e572d542c/modules/luni/src/main/java/java/util/TreeMap.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/da368a45ec2c5d0a9cdda3ef73972d7e572d542c/modules/luni/src/main/java/java/util/TreeMap.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/TreeMap.java?ref=da368a45ec2c5d0a9cdda3ef73972d7e572d542c",
                "patch": "@@ -186,7 +186,7 @@ final void cleanNext() {\n             \r\n             @Override\r\n             public boolean hasNext() {\r\n-                return (node != null) && (cmp.compare(endKey, node.key) > 0);\r\n+                return (node != null) && (cmp.compare( node.key, endKey ) < 0);\r\n             }\r\n         }\r\n \r",
                "deletions": 1
            },
            {
                "sha": "f47cd3b501af3641b8f4b0650a958c31232a9d20",
                "filename": "modules/luni/src/test/java/tests/api/java/util/TreeMapTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/da368a45ec2c5d0a9cdda3ef73972d7e572d542c/modules/luni/src/test/java/tests/api/java/util/TreeMapTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/da368a45ec2c5d0a9cdda3ef73972d7e572d542c/modules/luni/src/test/java/tests/api/java/util/TreeMapTest.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/TreeMapTest.java?ref=da368a45ec2c5d0a9cdda3ef73972d7e572d542c",
                "patch": "@@ -54,6 +54,20 @@ public int compare(T o1, T o2) {\n             return c1.compareTo(c2);\r\n         }\r\n     }\r\n+    \r\n+    // Regression for Harmony-1161\r\n+    class MockComparatorNullTolerable implements Comparator<String> {\r\n+\r\n+        public int compare(String o1, String o2) {\r\n+            if( o1 == o2 ) {\r\n+                return 0;\r\n+            }\r\n+            if( null == o1 ) {\r\n+                return -1;\r\n+            }\r\n+            return o1.compareTo(o2);\r\n+        }\r\n+    }\r\n \r\n \tTreeMap tm;\r\n \r\n@@ -367,6 +381,13 @@ public void test_subMapLjava_lang_ObjectLjava_lang_Object() {\n \t\t}\r\n \t\tassertEquals(\"end key less than start key should throw IllegalArgumentException\",\r\n \t\t\t\t1, result);\r\n+        \r\n+        // Regression for Harmony-1161\r\n+        TreeMap<String, String> treeMapWithNull = new TreeMap<String, String>(new MockComparatorNullTolerable());\r\n+        treeMapWithNull.put(\"key1\" , \"value1\"); //$NON-NLS-1$ //$NON-NLS-2$\r\n+        treeMapWithNull.put(null, \"value2\"); //$NON-NLS-1$\r\n+        SortedMap<String, String> subMapWithNull =  treeMapWithNull.subMap( null, \"key1\"); //$NON-NLS-1$\r\n+        assertEquals(\"Size of subMap should be 1:\", 1, subMapWithNull.size()); //$NON-NLS-1$\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-1095 ([classlib][io] compatibility: RI throws OOME while HARMONY throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@429670 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f6fac703033ca5283128da40e830d537e3f0fa0e",
        "parent": "https://github.com/apache/harmony-classlib/commit/e408c93aeddb5b7e82beb4ddcb05a16d37c0edf2",
        "bug_id": "harmony-classlib_207",
        "file": [
            {
                "sha": "c593b43d375560f2d5acb2f56635d21aec900d94",
                "filename": "modules/luni/src/main/java/java/io/CharArrayWriter.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f6fac703033ca5283128da40e830d537e3f0fa0e/modules/luni/src/main/java/java/io/CharArrayWriter.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f6fac703033ca5283128da40e830d537e3f0fa0e/modules/luni/src/main/java/java/io/CharArrayWriter.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/CharArrayWriter.java?ref=f6fac703033ca5283128da40e830d537e3f0fa0e",
                "patch": "@@ -199,7 +199,7 @@ public void write(int oneChar) {\n \tpublic void write(String str, int offset, int len) {\r\n         if (str == null) {\r\n             throw new NullPointerException(org.apache.harmony.luni.util.Msg\r\n-                    .getString(\"K0347\")); //$NON-NLS-1$\r\n+                    .getString(\"K0047\")); //$NON-NLS-1$\r\n         }\r\n \t\t// avoid int overflow\r\n \t\tif (0 <= offset && offset <= str.length() && 0 <= len\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patches for HARMONY-774 ([classlib][auth] unexpected NPE and ClassCastException for javax.security.auth.kerberos.KerberosPrincipal.equals(obj))\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@429548 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3",
        "parent": "https://github.com/apache/harmony-classlib/commit/274ad420555fcb988975f100d2ac800cd3fcbb3d",
        "bug_id": "harmony-classlib_208",
        "file": [
            {
                "sha": "4ad7f0ca4f9cc7194dd3266cd55cf30aa616e864",
                "filename": "modules/auth/src/main/java/common/javax/security/auth/kerberos/KerberosPrincipal.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3/modules/auth/src/main/java/common/javax/security/auth/kerberos/KerberosPrincipal.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3/modules/auth/src/main/java/common/javax/security/auth/kerberos/KerberosPrincipal.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/auth/src/main/java/common/javax/security/auth/kerberos/KerberosPrincipal.java?ref=e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3",
                "patch": "@@ -163,7 +163,7 @@ public boolean equals(Object obj) {\n         if (obj == this) {\n             return true;\n         }\n-        if (obj instanceof KerberosPrincipal) {\n+        if (!(obj instanceof KerberosPrincipal)) {\n             return false;\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "15970187098f7020c847b3969aa6682aac16ecfc",
                "filename": "modules/auth/src/test/java/common/javax/security/auth/kerberos/KerberosPrincipalTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3/modules/auth/src/test/java/common/javax/security/auth/kerberos/KerberosPrincipalTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3/modules/auth/src/test/java/common/javax/security/auth/kerberos/KerberosPrincipalTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/auth/src/test/java/common/javax/security/auth/kerberos/KerberosPrincipalTest.java?ref=e2c3dbe0fb1fc86d377c8f9ee2fce5f3f5bf3ec3",
                "patch": "@@ -119,6 +119,15 @@ public void test_toString() {\n         // .toString());\n     }\n \n+    /**\n+     * @tests javax.security.auth.kerberos.KerberosPrincipal#equals(Object)\n+     */\n+    public void test_equals() {\n+        // Regression for HARMONY-744\n+        assertFalse(new KerberosPrincipal(\"A@B\").equals(null));\n+        assertFalse(new KerberosPrincipal(\"A@B\").equals(new Object()));\n+    }\n+\n     public static void main(String[] args) {\n         junit.textui.TestRunner.run(KerberosPrincipalTest.class);\n     }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-963 (java.util.Timer: purge() throws NPE on empty timer)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@428723 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9cf8d7621fcf35aa8ce254e729ce2635bf006c37",
        "parent": "https://github.com/apache/harmony-classlib/commit/d5254caa990550e2f894d9a0371ab71c1519fb6e",
        "bug_id": "harmony-classlib_209",
        "file": [
            {
                "sha": "a9b37c7b1138b0e59efa465650bb5a5e56dade31",
                "filename": "modules/luni/src/main/java/java/util/Timer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9cf8d7621fcf35aa8ce254e729ce2635bf006c37/modules/luni/src/main/java/java/util/Timer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9cf8d7621fcf35aa8ce254e729ce2635bf006c37/modules/luni/src/main/java/java/util/Timer.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Timer.java?ref=9cf8d7621fcf35aa8ce254e729ce2635bf006c37",
                "patch": "@@ -285,6 +285,9 @@ public synchronized void cancel() {\n \t\t}\r\n \r\n         public int purge() {\r\n+            if(tasks.isEmpty()) {\r\n+                return 0;\r\n+            }\r\n             // callers are synchronized\r\n             tasks.deletedCancelledNumber = 0;\r\n             tasks.root.deleteIfCancelled(tasks);\r",
                "deletions": 0
            },
            {
                "sha": "a705a5398a7b5861ae9b90b718e80089fb3aeac2",
                "filename": "modules/luni/src/test/java/tests/api/java/util/TimerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9cf8d7621fcf35aa8ce254e729ce2635bf006c37/modules/luni/src/test/java/tests/api/java/util/TimerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9cf8d7621fcf35aa8ce254e729ce2635bf006c37/modules/luni/src/test/java/tests/api/java/util/TimerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/TimerTest.java?ref=9cf8d7621fcf35aa8ce254e729ce2635bf006c37",
                "patch": "@@ -292,6 +292,8 @@ public void test_purge() throws Exception {\n         Timer t = null;\r\n         try {\r\n             t = new Timer();\r\n+            assertEquals(t.purge(), 0);\r\n+\r\n             TimerTestTask[] tasks = new TimerTestTask[100];\r\n             int[] delayTime = { 50, 80, 20, 70, 40, 10, 90, 30, 60 };\r\n \r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-888 ([classlib][lang] no NPE for new java.lang.Character.Subset(null))\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@426023 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a2fdbe34c8e5f7239e5911b49e9609e59a6fb255",
        "parent": "https://github.com/apache/harmony-classlib/commit/aac4db78c54d0f6b50498cd4950028c2a136b293",
        "bug_id": "harmony-classlib_210",
        "file": [
            {
                "sha": "ca9323778c5cdf92170739b263eb085b99b9fef9",
                "filename": "modules/luni/src/main/java/java/lang/Character.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a2fdbe34c8e5f7239e5911b49e9609e59a6fb255/modules/luni/src/main/java/java/lang/Character.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a2fdbe34c8e5f7239e5911b49e9609e59a6fb255/modules/luni/src/main/java/java/lang/Character.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/lang/Character.java?ref=a2fdbe34c8e5f7239e5911b49e9609e59a6fb255",
                "patch": "@@ -514,6 +514,9 @@\n \t\tString name;\r\n \r\n \t\tprotected Subset(String string) {\r\n+\t\t\tif (string == null) {\r\n+\t\t\t\tthrow new NullPointerException();\r\n+\t\t\t}\r\n \t\t\tname = string;\r\n \t\t}\r\n \r",
                "deletions": 0
            },
            {
                "sha": "ecc0e65b361b1565c7e56b29e72067b123ea78d9",
                "filename": "modules/luni/src/test/api/java/org/apache/harmony/luni/tests/java/lang/Character_SubsetTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a2fdbe34c8e5f7239e5911b49e9609e59a6fb255/modules/luni/src/test/api/java/org/apache/harmony/luni/tests/java/lang/Character_SubsetTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a2fdbe34c8e5f7239e5911b49e9609e59a6fb255/modules/luni/src/test/api/java/org/apache/harmony/luni/tests/java/lang/Character_SubsetTest.java",
                "status": "added",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/java/org/apache/harmony/luni/tests/java/lang/Character_SubsetTest.java?ref=a2fdbe34c8e5f7239e5911b49e9609e59a6fb255",
                "patch": "@@ -0,0 +1,51 @@\n+/*\n+ *  Copyright 2006 The Apache Software Foundation or its licensors, as applicable.\n+ *\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.harmony.luni.tests.java.lang;\n+\n+import junit.framework.TestCase;\n+\n+public class Character_SubsetTest extends TestCase {\n+\n+    /**\n+     * @tests java.lang.Character.Subset#Character.Subset(java.lang.String)\n+     */\n+    public void test_Ctor() {\n+\n+        try {\n+            // Regression for HARMONY-888\n+            new Character.Subset(null) {\n+            };\n+            fail(\"No expected NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n+    /**\n+     * @tests java.lang.Character.Subset#toString()\n+     */\n+    public void test_toString() {\n+\n+        String name = \"name\";\n+        Character.Subset subset = new Character.Subset(name) {\n+        };\n+        assertSame(name, subset.toString());\n+    }\n+\n+    public static void main(String[] args) {\n+        junit.textui.TestRunner.run(Character_SubsetTest.class);\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-836 (RuleBasedCollator.compare(null, null) doesn't throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@424905 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b42f2843f5a6493b719d58c23efc4313613421cb",
        "parent": "https://github.com/apache/harmony-classlib/commit/b704b1c6185b2f450264975a5fe7f7c8a477c15f",
        "bug_id": "harmony-classlib_211",
        "file": [
            {
                "sha": "4951dee826dbf99809a280cac316470fc9548ca7",
                "filename": "modules/text/src/main/java/java/text/RuleBasedCollator.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b42f2843f5a6493b719d58c23efc4313613421cb/modules/text/src/main/java/java/text/RuleBasedCollator.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b42f2843f5a6493b719d58c23efc4313613421cb/modules/text/src/main/java/java/text/RuleBasedCollator.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/RuleBasedCollator.java?ref=b42f2843f5a6493b719d58c23efc4313613421cb",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 2005, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -148,6 +148,9 @@ public Object clone() {\n \t *         than, equivalent to, or greater than <code>target</code>.\r\n \t */\r\n \tpublic int compare(String source, String target) {\r\n+        if (source == null || target == null) {\r\n+            throw new NullPointerException(\"one of arguments is null\");\r\n+        }\r\n \t\treturn this.icuColl.compare(source, target);\r\n \t}\r\n \r",
                "deletions": 1
            },
            {
                "sha": "c539db5bd8b8c34ee640be2749d5bc878baa0b0a",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/RuleBasedCollatorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b42f2843f5a6493b719d58c23efc4313613421cb/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/RuleBasedCollatorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b42f2843f5a6493b719d58c23efc4313613421cb/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/RuleBasedCollatorTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/RuleBasedCollatorTest.java?ref=b42f2843f5a6493b719d58c23efc4313613421cb",
                "patch": "@@ -263,6 +263,18 @@ public void testNullPointerException() throws Exception {\n         } catch (NullPointerException e) {}\n     }\n \n+    /**\n+     * @tests java.text.RuleBasedCollator.compare(java.lang.String, java.lang.String)\n+     */\n+    public void testCompareNull() throws Exception {\n+        //Regression for HARMONY-836\n+        try {\n+            new RuleBasedCollator(\"< a\").compare(null, null);\n+            fail(\"RuleBasedCollator.compare(null, null) \"\n+                    + \"should throw NullPointerException\");\n+        } catch (NullPointerException e) {}\n+    }\n+\n     /**\n      * @tests java.text.RuleBasedCollator.RuleBasedCollator(java.lang.String)\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-667 ( [classlib][io]java.io.BufferedInputStream.skip(int n) unexpected NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@424890 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d445a491c2005a92a1d4207019868b1de5a231b2",
        "parent": "https://github.com/apache/harmony-classlib/commit/d4d7c4163f0a5baa32f66949fd86cbb350bb66fc",
        "bug_id": "harmony-classlib_212",
        "file": [
            {
                "sha": "3ea5b62d7eb812869886b46833d9e9b824580818",
                "filename": "modules/luni/src/main/java/java/io/BufferedInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d445a491c2005a92a1d4207019868b1de5a231b2/modules/luni/src/main/java/java/io/BufferedInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d445a491c2005a92a1d4207019868b1de5a231b2/modules/luni/src/main/java/java/io/BufferedInputStream.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/BufferedInputStream.java?ref=d445a491c2005a92a1d4207019868b1de5a231b2",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -109,6 +109,9 @@ public synchronized int available() throws IOException {\n \t *             If an error occurs attempting to close this stream.\r\n \t */\r\n \tpublic synchronized void close() throws IOException {\r\n+        if(null == in){\r\n+            throw new IOException(org.apache.harmony.luni.util.Msg.getString(\"K0059\"));\r\n+        }\r\n \t\tsuper.close();\r\n \t\tbuf = null;\r\n \t}\r\n@@ -311,6 +314,9 @@ public synchronized void reset() throws IOException {\n \t *             occurs.\r\n \t */\r\n \tpublic synchronized long skip(long amount) throws IOException {\r\n+        if(null == in){\r\n+            throw new IOException(org.apache.harmony.luni.util.Msg.getString(\"K0059\"));\r\n+        }\r\n \t\tif (amount < 1)\r\n \t\t\treturn 0;\r\n \r",
                "deletions": 1
            },
            {
                "sha": "9aa9be35fd3fa46e5e5614467a787ad0174aeda8",
                "filename": "modules/luni/src/test/java/tests/api/java/io/BufferedInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d445a491c2005a92a1d4207019868b1de5a231b2/modules/luni/src/test/java/tests/api/java/io/BufferedInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d445a491c2005a92a1d4207019868b1de5a231b2/modules/luni/src/test/java/tests/api/java/io/BufferedInputStreamTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/BufferedInputStreamTest.java?ref=d445a491c2005a92a1d4207019868b1de5a231b2",
                "patch": "@@ -1,4 +1,4 @@\n-/* Copyright 1998, 2005 The Apache Software Foundation or its licensors, as applicable\r\n+/* Copyright 1998, 2006 The Apache Software Foundation or its licensors, as applicable\r\n  * \r\n  * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n  * you may not use this file except in compliance with the License.\r\n@@ -120,6 +120,14 @@ public void test_close() {\n \t\t// Test for method void java.io.BufferedInputStream.close()\r\n \t\tnew BufferedInputStream(isFile);\r\n \t\tnew BufferedInputStream(isFile);\r\n+\t\t\r\n+\t\t//regression for HARMONY-667\r\n+        BufferedInputStream buf = new BufferedInputStream(null, 5);\r\n+        try {\r\n+            buf.close();\r\n+        } catch (IOException e) {\r\n+            //expected\r\n+        }                         \r\n \t}\r\n \r\n \t/**\r\n@@ -310,6 +318,14 @@ public void test_skipJ() {\n \t\t} catch (java.io.IOException e) {\r\n \t\t\tfail(\"Exception during skip test\");\r\n \t\t}\r\n+\r\n+\t\t//regression for HARMONY-667\r\n+        BufferedInputStream buf = new BufferedInputStream(null, 5);\r\n+        try {\r\n+            buf.skip(10);\r\n+        } catch (IOException e) {\r\n+            //expected\r\n+        }                         \r\n \t}\r\n \r\n \t/**\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-891 ([classlib][[net] compatibility: java.net.DatagramSocket((DatagramSocketImpl) null) does not throw NPE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@424455 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/845fcd60d8fce26443efa9dbfc59e87619dff992",
        "parent": "https://github.com/apache/harmony-classlib/commit/20e030f0cc035608cca8fe4872d1ee73e834fb1f",
        "bug_id": "harmony-classlib_213",
        "file": [
            {
                "sha": "e621b60d34c7c0ecf01693d937b73ac8a0b6bb43",
                "filename": "modules/luni/src/main/java/java/net/DatagramSocket.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/845fcd60d8fce26443efa9dbfc59e87619dff992/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/845fcd60d8fce26443efa9dbfc59e87619dff992/modules/luni/src/main/java/java/net/DatagramSocket.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/DatagramSocket.java?ref=845fcd60d8fce26443efa9dbfc59e87619dff992",
                "patch": "@@ -504,6 +504,9 @@ public static synchronized void setDatagramSocketImplFactory(\n \t *            the DatagramSocketImpl to use\r\n \t */\r\n \tprotected DatagramSocket(DatagramSocketImpl socketImpl) {\r\n+\t\tif (socketImpl == null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\timpl = socketImpl;\r\n \t}\r\n \r",
                "deletions": 0
            },
            {
                "sha": "4b6b43cb15009f705d25dd6080a248201d4d81b8",
                "filename": "modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/845fcd60d8fce26443efa9dbfc59e87619dff992/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/845fcd60d8fce26443efa9dbfc59e87619dff992/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/DatagramSocketTest.java?ref=845fcd60d8fce26443efa9dbfc59e87619dff992",
                "patch": "@@ -20,6 +20,7 @@\n import java.net.BindException;\r\n import java.net.DatagramPacket;\r\n import java.net.DatagramSocket;\r\n+import java.net.DatagramSocketImpl;\r\n import java.net.Inet4Address;\r\n import java.net.Inet6Address;\r\n import java.net.InetAddress;\r\n@@ -969,6 +970,23 @@ public void test_setSoTimeoutI() {\n \t\t\thandleException(e, SO_TIMEOUT);\r\n \t\t}\r\n \t}\r\n+\t/**\r\n+\t * @tests java.net.DatagramSocket#DatagramSocket(java.net.DatagramSocketImpl)\r\n+\t */\r\n+\tpublic void test_ConstructorLjava_net_DatagramSocketImpl() {\r\n+\t\tclass testDatagramSocket extends DatagramSocket {\r\n+\t\t    public testDatagramSocket(DatagramSocketImpl impl){\r\n+\t\t       super(impl);\r\n+\t\t    }\r\n+\t\t}\r\n+\r\n+\t\ttry {\r\n+\t\t\tnew testDatagramSocket((DatagramSocketImpl) null);\r\n+\t\t\tfail(\"exception expected\");\r\n+\t\t} catch (NullPointerException ex) {\r\n+\t\t\t//expected\r\n+\t\t}\r\n+\t}\r\n \r\n \t/**\r\n \t * @tests java.net.DatagramSocket#DatagramSocket(java.net.SocketAddress)\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-899: JarEntry.getSodeSigners() throws NPE if certificates are null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@422927 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c",
        "parent": "https://github.com/apache/harmony-classlib/commit/41bc64c8e676635f4567a4581f728421b3805b50",
        "bug_id": "harmony-classlib_214",
        "file": [
            {
                "sha": "98dc4410a76f7a1434e719ff0e03a7e9c0aa1496",
                "filename": "modules/archive/src/main/java/java/util/jar/JarEntry.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c/modules/archive/src/main/java/java/util/jar/JarEntry.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c/modules/archive/src/main/java/java/util/jar/JarEntry.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/archive/src/main/java/java/util/jar/JarEntry.java?ref=08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c",
                "patch": "@@ -134,6 +134,9 @@ public JarEntry(JarEntry je) {\n     }\r\n \r\n     private CodeSigner[] getCodeSigners(Certificate[] certs) {\r\n+        if(null == certs) {\r\n+            return null;\r\n+        }\r\n \r\n         X500Principal prevIssuer = null;\r\n         ArrayList<Certificate> list = new ArrayList<Certificate>(certs.length);\r",
                "deletions": 0
            },
            {
                "sha": "ecd0a82e69e5017a1a613cf5ff6f43330df3ebb0",
                "filename": "modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarEntryTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarEntryTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarEntryTest.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/archive/src/test/java/org/apache/harmony/archive/tests/java/util/jar/JarEntryTest.java?ref=08c4c9e483d51ac77095b0e3e41d5a1f8f72c30c",
                "patch": "@@ -137,6 +137,9 @@ public void test_getCodeSigners() throws IOException {\n \t    }\n \t    assertEquals(2,certs_bob.size());\n \t    assertEquals(1,certs_alice.size());\n+            \n+            assertNull(\"getCodeSigners() of a primitive JarEntry should return null\", \n+                 new JarEntry(\"aaa\").getCodeSigners());\n \t}    \n     \n \t/**",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-732\n[classlib][security] unexpected NPE for java.security.spec.EllipticCurve.getSeed() if seed = null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@421537 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c35e7213b2e9f5363762478d1af340578ab79516",
        "parent": "https://github.com/apache/harmony-classlib/commit/bb7a791c1bfc74e5daa1827712caf54fa49d7161",
        "bug_id": "harmony-classlib_215",
        "file": [
            {
                "sha": "589144c22ec0cdd8d4f3f87676a5b8709f251bab",
                "filename": "modules/security/src/main/java/common/java/security/spec/EllipticCurve.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c35e7213b2e9f5363762478d1af340578ab79516/modules/security/src/main/java/common/java/security/spec/EllipticCurve.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c35e7213b2e9f5363762478d1af340578ab79516/modules/security/src/main/java/common/java/security/spec/EllipticCurve.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/spec/EllipticCurve.java?ref=c35e7213b2e9f5363762478d1af340578ab79516",
                "patch": "@@ -121,10 +121,14 @@ public ECField getField() {\n      * @com.intel.drl.spec_ref\n      */\n     public byte[] getSeed() {\n-        // return copy\n-        byte[] ret = new byte[seed.length];\n-        System.arraycopy(seed, 0, ret, 0, ret.length);\n-        return ret;\n+        if (seed == null) {\n+            return null;\n+        } else {\n+            // return copy\n+            byte[] ret = new byte[seed.length];\n+            System.arraycopy(seed, 0, ret, 0, ret.length);\n+            return ret;\n+        }\n     }\n \n     /**",
                "deletions": 4
            },
            {
                "sha": "0ad4f003ca62956f48cd819ac4a959bd7a149a84",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/spec/EllipticCurveTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c35e7213b2e9f5363762478d1af340578ab79516/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/spec/EllipticCurveTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c35e7213b2e9f5363762478d1af340578ab79516/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/spec/EllipticCurveTest.java",
                "status": "modified",
                "changes": 28,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/spec/EllipticCurveTest.java?ref=c35e7213b2e9f5363762478d1af340578ab79516",
                "patch": "@@ -14,11 +14,6 @@\n  *  limitations under the License.\r\n  */\r\n \r\n-/**\r\n-* @author Vladimir N. Molotkov\r\n-* @version $Revision$\r\n-*/\r\n-\r\n package org.apache.harmony.security.tests.java.security.spec;\r\n \r\n import java.math.BigInteger;\r\n@@ -36,18 +31,6 @@\n  */\r\n public class EllipticCurveTest extends TestCase {\r\n \r\n-    /**\r\n-     * Constructor for EllipticCurveTest.\r\n-     * @param name\r\n-     */\r\n-    public EllipticCurveTest(String name) {\r\n-        super(name);\r\n-    }\r\n-\r\n-    //\r\n-    // Tests\r\n-    //\r\n-\r\n     /**\r\n      * Test #1 for <code>EllipticCurve(ECField, BigInteger, BigInteger, byte[])</code>\r\n      * constructor<br>\r\n@@ -576,6 +559,17 @@ public final void testGetSeed03() {\n         assertNotSame(c.getSeed(), c.getSeed());\r\n     }\r\n \r\n+    /**\r\n+     * @tests java.security.spec.EllipticCurve#getSeed()\r\n+     * Assertion: null if not specified\r\n+     */    \r\n+    public final void testGetSeed04() {\r\n+        //Regression for HARMONY-732\r\n+        ECFieldFp f = new ECFieldFp(BigInteger.valueOf(23L));\r\n+        BigInteger a = BigInteger.ONE;\r\n+        assertNull(new EllipticCurve(f, a, a).getSeed());\r\n+    }\r\n+\r\n     /**\r\n      * Test #1 for <code>equals(Object other)</code> method<br>\r\n      * Assertion: return true if this and other objects are equal<br>\r",
                "deletions": 17
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-756 ([classlib][security]javax.security.cert.X509Certificate.getInstance((null) throws unspecified NPE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@420819 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c067786d2d565c17c76ffa957340523a550dc58b",
        "parent": "https://github.com/apache/harmony-classlib/commit/e36b6fb4d3c236f197e20d7ae91f314ef0974536",
        "bug_id": "harmony-classlib_216",
        "file": [
            {
                "sha": "e2342219cb0592c3cba6ab6f0f3dc33213e8c097",
                "filename": "modules/security/src/main/java/common/javax/security/cert/X509Certificate.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c067786d2d565c17c76ffa957340523a550dc58b/modules/security/src/main/java/common/javax/security/cert/X509Certificate.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c067786d2d565c17c76ffa957340523a550dc58b/modules/security/src/main/java/common/javax/security/cert/X509Certificate.java",
                "status": "modified",
                "changes": 534,
                "additions": 270,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/javax/security/cert/X509Certificate.java?ref=c067786d2d565c17c76ffa957340523a550dc58b",
                "patch": "@@ -1,264 +1,270 @@\n-/*\n- *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\n- *\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *     http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- */\n-\n-/**\n-* @author Alexander Y. Kleymenov\n-* @version $Revision$\n-*/\n-\n-package javax.security.cert;\n-\n-import java.io.ByteArrayInputStream;\n-import java.io.InputStream;\n-import java.lang.reflect.Constructor;\n-import java.math.BigInteger;\n-import java.security.AccessController;\n-import java.security.InvalidKeyException;\n-import java.security.NoSuchAlgorithmException;\n-import java.security.NoSuchProviderException;\n-import java.security.Principal;\n-import java.security.PublicKey;\n-import java.security.Security;\n-import java.security.SignatureException;\n-import java.security.cert.CertificateFactory;\n-import java.util.Date;\n-import javax.security.cert.Certificate;\n-import javax.security.cert.CertificateEncodingException;\n-import javax.security.cert.CertificateException;\n-import javax.security.cert.CertificateExpiredException;\n-import javax.security.cert.CertificateNotYetValidException;\n-\n-/**\n- * @com.intel.drl.spec_ref\n- */\n-public abstract class X509Certificate extends Certificate {\n-\n-    private static Constructor constructor;\n-    \n-    static {\n-        try {\n-            String classname = (String) AccessController.doPrivileged(\n-                new java.security.PrivilegedAction() {\n-                    public Object run() {\n-                        return Security.getProperty(\"cert.provider.x509v1\");\n-                    }\n-                }\n-            );\n-            Class cl = Class.forName(classname);\n-            constructor =\n-                cl.getConstructor(new Class[] {InputStream.class});\n-        } catch (Throwable e) {\n-        }\n-    }\n-    \n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public X509Certificate() {\n-        super();\n-    }\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public static final X509Certificate getInstance(InputStream inStream)\n-                                             throws CertificateException {\n-        if (constructor != null) {\n-            try {\n-                return (X509Certificate) \n-                    constructor.newInstance(new Object[] {inStream});\n-            } catch (Throwable e) {\n-                throw new CertificateException(e.getMessage());\n-            }\n-        }\n-\n-        final java.security.cert.X509Certificate cert;\n-        try {\n-            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n-            cert = (java.security.cert.X509Certificate)\n-                                            cf.generateCertificate(inStream);\n-        } catch (java.security.cert.CertificateException e) {\n-            throw new CertificateException(e.getMessage());\n-        }\n-\n-        return new X509Certificate() {\n-\n-            public byte[] getEncoded() throws CertificateEncodingException {\n-                try {\n-                    return cert.getEncoded();\n-                } catch (java.security.cert.CertificateEncodingException e) {\n-                    throw new CertificateEncodingException(e.getMessage());\n-                }\n-            }\n-\n-            public void verify(PublicKey key) throws CertificateException,\n-                                NoSuchAlgorithmException, InvalidKeyException,\n-                                NoSuchProviderException, SignatureException {\n-                try {\n-                    cert.verify(key);\n-                } catch (java.security.cert.CertificateException e) {\n-                    throw new CertificateException(e.getMessage());\n-                }\n-            }\n-\n-            public void verify(PublicKey key, String sigProvider)\n-                            throws CertificateException,\n-                                NoSuchAlgorithmException, InvalidKeyException,\n-                                NoSuchProviderException, SignatureException {\n-                try {\n-                    cert.verify(key, sigProvider);\n-                } catch (java.security.cert.CertificateException e) {\n-                    throw new CertificateException(e.getMessage());\n-                }\n-            }\n-\n-            public String toString() {\n-                return cert.toString();\n-            }\n-\n-            public PublicKey getPublicKey() {\n-                return cert.getPublicKey();\n-            }\n-\n-            public void checkValidity() throws CertificateExpiredException,\n-                                   CertificateNotYetValidException {\n-                try {\n-                    cert.checkValidity();\n-                } catch (java.security.cert.CertificateNotYetValidException e) {\n-                    throw new CertificateNotYetValidException(e.getMessage());\n-                } catch (java.security.cert.CertificateExpiredException e) {\n-                    throw new CertificateExpiredException(e.getMessage());\n-                }\n-            }\n-\n-            public void checkValidity(Date date) \n-                            throws CertificateExpiredException,\n-                                   CertificateNotYetValidException {\n-                try {\n-                    cert.checkValidity(date);\n-                } catch (java.security.cert.CertificateNotYetValidException e) {\n-                    throw new CertificateNotYetValidException(e.getMessage());\n-                } catch (java.security.cert.CertificateExpiredException e) {\n-                    throw new CertificateExpiredException(e.getMessage());\n-                }\n-            }\n-\n-            public int getVersion() {\n-                return 2;\n-            }\n-\n-            public BigInteger getSerialNumber() {\n-                return cert.getSerialNumber();\n-            }\n-\n-            public Principal getIssuerDN() {\n-                return cert.getIssuerDN();\n-            }\n-\n-            public Principal getSubjectDN() {\n-                return cert.getSubjectDN();\n-            }\n-\n-            public Date getNotBefore() {\n-                return cert.getNotBefore();\n-            }\n-\n-            public Date getNotAfter() {\n-                return cert.getNotAfter();\n-            }\n-\n-            public String getSigAlgName() {\n-                return cert.getSigAlgName();\n-            }\n-\n-            public String getSigAlgOID() {\n-                return cert.getSigAlgOID();\n-            }\n-\n-            public byte[] getSigAlgParams() {\n-                return cert.getSigAlgParams();\n-            }\n-        };\n-    }\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public static final X509Certificate getInstance(byte[] certData)\n-                                             throws CertificateException {\n-        ByteArrayInputStream bais = new ByteArrayInputStream(certData);\n-        return getInstance(bais);\n-    }\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract void checkValidity()\n-            throws CertificateExpiredException, CertificateNotYetValidException;\n-\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract void checkValidity(Date date)\n-            throws CertificateExpiredException, CertificateNotYetValidException;\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract int getVersion();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract BigInteger getSerialNumber();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract Principal getIssuerDN();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract Principal getSubjectDN();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract Date getNotBefore();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract Date getNotAfter();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract String getSigAlgName();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract String getSigAlgOID();\n-\n-    /**\n-     * @com.intel.drl.spec_ref\n-     */\n-    public abstract byte[] getSigAlgParams();\n-}\n-\n+/*\r\n+ *  Copyright 2005 The Apache Software Foundation or its licensors, as applicable.\r\n+ *\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+\r\n+/**\r\n+* @author Alexander Y. Kleymenov\r\n+* @version $Revision$\r\n+*/\r\n+\r\n+package javax.security.cert;\r\n+\r\n+import java.io.ByteArrayInputStream;\r\n+import java.io.InputStream;\r\n+import java.lang.reflect.Constructor;\r\n+import java.math.BigInteger;\r\n+import java.security.AccessController;\r\n+import java.security.InvalidKeyException;\r\n+import java.security.NoSuchAlgorithmException;\r\n+import java.security.NoSuchProviderException;\r\n+import java.security.Principal;\r\n+import java.security.PublicKey;\r\n+import java.security.Security;\r\n+import java.security.SignatureException;\r\n+import java.security.cert.CertificateFactory;\r\n+import java.util.Date;\r\n+import javax.security.cert.Certificate;\r\n+import javax.security.cert.CertificateEncodingException;\r\n+import javax.security.cert.CertificateException;\r\n+import javax.security.cert.CertificateExpiredException;\r\n+import javax.security.cert.CertificateNotYetValidException;\r\n+\r\n+/**\r\n+ * @com.intel.drl.spec_ref\r\n+ */\r\n+public abstract class X509Certificate extends Certificate {\r\n+\r\n+    private static Constructor constructor;\r\n+    \r\n+    static {\r\n+        try {\r\n+            String classname = (String) AccessController.doPrivileged(\r\n+                new java.security.PrivilegedAction() {\r\n+                    public Object run() {\r\n+                        return Security.getProperty(\"cert.provider.x509v1\");\r\n+                    }\r\n+                }\r\n+            );\r\n+            Class cl = Class.forName(classname);\r\n+            constructor =\r\n+                cl.getConstructor(new Class[] {InputStream.class});\r\n+        } catch (Throwable e) {\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public X509Certificate() {\r\n+        super();\r\n+    }\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public static final X509Certificate getInstance(InputStream inStream)\r\n+                                             throws CertificateException {\r\n+        if (inStream == null) {\r\n+            throw new CertificateException(\"The stream should not be null\");\r\n+        }\r\n+        if (constructor != null) {\r\n+            try {\r\n+                return (X509Certificate) \r\n+                    constructor.newInstance(new Object[] {inStream});\r\n+            } catch (Throwable e) {\r\n+                throw new CertificateException(e.getMessage());\r\n+            }\r\n+        }\r\n+\r\n+        final java.security.cert.X509Certificate cert;\r\n+        try {\r\n+            CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\r\n+            cert = (java.security.cert.X509Certificate)\r\n+                                            cf.generateCertificate(inStream);\r\n+        } catch (java.security.cert.CertificateException e) {\r\n+            throw new CertificateException(e.getMessage());\r\n+        }\r\n+\r\n+        return new X509Certificate() {\r\n+\r\n+            public byte[] getEncoded() throws CertificateEncodingException {\r\n+                try {\r\n+                    return cert.getEncoded();\r\n+                } catch (java.security.cert.CertificateEncodingException e) {\r\n+                    throw new CertificateEncodingException(e.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            public void verify(PublicKey key) throws CertificateException,\r\n+                                NoSuchAlgorithmException, InvalidKeyException,\r\n+                                NoSuchProviderException, SignatureException {\r\n+                try {\r\n+                    cert.verify(key);\r\n+                } catch (java.security.cert.CertificateException e) {\r\n+                    throw new CertificateException(e.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            public void verify(PublicKey key, String sigProvider)\r\n+                            throws CertificateException,\r\n+                                NoSuchAlgorithmException, InvalidKeyException,\r\n+                                NoSuchProviderException, SignatureException {\r\n+                try {\r\n+                    cert.verify(key, sigProvider);\r\n+                } catch (java.security.cert.CertificateException e) {\r\n+                    throw new CertificateException(e.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            public String toString() {\r\n+                return cert.toString();\r\n+            }\r\n+\r\n+            public PublicKey getPublicKey() {\r\n+                return cert.getPublicKey();\r\n+            }\r\n+\r\n+            public void checkValidity() throws CertificateExpiredException,\r\n+                                   CertificateNotYetValidException {\r\n+                try {\r\n+                    cert.checkValidity();\r\n+                } catch (java.security.cert.CertificateNotYetValidException e) {\r\n+                    throw new CertificateNotYetValidException(e.getMessage());\r\n+                } catch (java.security.cert.CertificateExpiredException e) {\r\n+                    throw new CertificateExpiredException(e.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            public void checkValidity(Date date) \r\n+                            throws CertificateExpiredException,\r\n+                                   CertificateNotYetValidException {\r\n+                try {\r\n+                    cert.checkValidity(date);\r\n+                } catch (java.security.cert.CertificateNotYetValidException e) {\r\n+                    throw new CertificateNotYetValidException(e.getMessage());\r\n+                } catch (java.security.cert.CertificateExpiredException e) {\r\n+                    throw new CertificateExpiredException(e.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            public int getVersion() {\r\n+                return 2;\r\n+            }\r\n+\r\n+            public BigInteger getSerialNumber() {\r\n+                return cert.getSerialNumber();\r\n+            }\r\n+\r\n+            public Principal getIssuerDN() {\r\n+                return cert.getIssuerDN();\r\n+            }\r\n+\r\n+            public Principal getSubjectDN() {\r\n+                return cert.getSubjectDN();\r\n+            }\r\n+\r\n+            public Date getNotBefore() {\r\n+                return cert.getNotBefore();\r\n+            }\r\n+\r\n+            public Date getNotAfter() {\r\n+                return cert.getNotAfter();\r\n+            }\r\n+\r\n+            public String getSigAlgName() {\r\n+                return cert.getSigAlgName();\r\n+            }\r\n+\r\n+            public String getSigAlgOID() {\r\n+                return cert.getSigAlgOID();\r\n+            }\r\n+\r\n+            public byte[] getSigAlgParams() {\r\n+                return cert.getSigAlgParams();\r\n+            }\r\n+        };\r\n+    }\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public static final X509Certificate getInstance(byte[] certData)\r\n+                                             throws CertificateException {\r\n+        if (certData == null) {\r\n+            throw new CertificateException(\"The data should not be null\");\r\n+        }\r\n+        ByteArrayInputStream bais = new ByteArrayInputStream(certData);\r\n+        return getInstance(bais);\r\n+    }\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract void checkValidity()\r\n+            throws CertificateExpiredException, CertificateNotYetValidException;\r\n+\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract void checkValidity(Date date)\r\n+            throws CertificateExpiredException, CertificateNotYetValidException;\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract int getVersion();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract BigInteger getSerialNumber();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract Principal getIssuerDN();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract Principal getSubjectDN();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract Date getNotBefore();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract Date getNotAfter();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract String getSigAlgName();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract String getSigAlgOID();\r\n+\r\n+    /**\r\n+     * @com.intel.drl.spec_ref\r\n+     */\r\n+    public abstract byte[] getSigAlgParams();\r\n+}\r\n+\r",
                "deletions": 264
            },
            {
                "sha": "43b7eed810d97e1b51c89ad69885eea7b3a47cc1",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/javax/security/cert/X509CertificateTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c067786d2d565c17c76ffa957340523a550dc58b/modules/security/src/test/api/java/org/apache/harmony/security/tests/javax/security/cert/X509CertificateTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c067786d2d565c17c76ffa957340523a550dc58b/modules/security/src/test/api/java/org/apache/harmony/security/tests/javax/security/cert/X509CertificateTest.java",
                "status": "modified",
                "changes": 13,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/javax/security/cert/X509CertificateTest.java?ref=c067786d2d565c17c76ffa957340523a550dc58b",
                "patch": "@@ -22,6 +22,7 @@\n package org.apache.harmony.security.tests.javax.security.cert;\r\n \r\n import java.io.ByteArrayInputStream;\r\n+import java.io.InputStream;\r\n import java.security.cert.CertificateFactory;\r\n import java.util.Arrays;\r\n import java.util.Calendar;\r\n@@ -115,6 +116,12 @@ public void testGetInstance1() {\n             // The requested certificate type is not available.\r\n             // Test pass..\r\n         }\r\n+        // Regression for HARMONY-756\r\n+\t\ttry {\r\n+\t\t\tX509Certificate.getInstance((InputStream) null);\r\n+\t\t} catch (CertificateException e) {\r\n+\t\t\t//expected;\r\n+\t\t}\r\n     }\r\n \r\n     /**\r\n@@ -135,6 +142,12 @@ public void testGetInstance2() {\n             // The requested certificate type is not available.\r\n             // Test pass..\r\n         }\r\n+   \t\t// Regression for HARMONY-756\r\n+\t\ttry {\r\n+\t\t\tX509Certificate.getInstance((byte[]) null);\r\n+\t\t} catch (CertificateException e) {\r\n+\t\t\t//expected;\r\n+\t\t}\r\n     }\r\n \r\n     /**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-737\n[classlib][security] unexpected NPE for java.security.cert.X509CRLSelector.setIssuerNames(user_defined_collection);\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@420440 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d37cc14c95589abcd308b5c946b11113884bc4d6",
        "parent": "https://github.com/apache/harmony-classlib/commit/271fd4b0e8eb5346bb32e525f5819ce62ff072f4",
        "bug_id": "harmony-classlib_217",
        "file": [
            {
                "sha": "eec00726e1be1e4cde84bb8f3c8a1a5fcdf859ff",
                "filename": "modules/security/src/main/java/common/java/security/cert/X509CRLSelector.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d37cc14c95589abcd308b5c946b11113884bc4d6/modules/security/src/main/java/common/java/security/cert/X509CRLSelector.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d37cc14c95589abcd308b5c946b11113884bc4d6/modules/security/src/main/java/common/java/security/cert/X509CRLSelector.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/cert/X509CRLSelector.java?ref=d37cc14c95589abcd308b5c946b11113884bc4d6",
                "patch": "@@ -83,6 +83,9 @@ public void setIssuerNames(Collection<?> names) throws IOException {\n             issuerPrincipals = null;\n             return;\n         }\n+        if (names.size() == 0) {\n+            return;\n+        }\n         issuerNames = new ArrayList<String>(names.size());\n         for (Object name: names) {\n             if (name instanceof String) {",
                "deletions": 0
            },
            {
                "sha": "d7e1f3833fbf66e9730b860f545cad30662e09fc",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CRLSelectorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d37cc14c95589abcd308b5c946b11113884bc4d6/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CRLSelectorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d37cc14c95589abcd308b5c946b11113884bc4d6/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CRLSelectorTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CRLSelectorTest.java?ref=d37cc14c95589abcd308b5c946b11113884bc4d6",
                "patch": "@@ -23,6 +23,8 @@\n \n import java.io.IOException;\n import java.security.cert.X509CRLSelector;\n+import java.util.Iterator;\n+import java.util.TreeSet;\n \n import javax.security.auth.x500.X500Principal;\n \n@@ -91,7 +93,7 @@ public void test_addIssuerNameLjava_lang_String() throws Exception {\n     }\n \n     /**\n-     * addIssuerName(String name) method testing.\n+     * @tests addIssuerName(String name)\n      */\n     public void testAddIssuerName() throws IOException {\n         //Regression for HARMONY-736\n@@ -104,4 +106,17 @@ public void testAddIssuerName() throws IOException {\n         //no exception for null\n         selector.addIssuerName((String) null);\n     }\n+\n+    /**\n+     * @tests setIssuerNames(Collection <?> names)\n+     */\n+    public void testSetIssuerNames1() throws IOException {\n+        // Regression for HARMONY-737\n+        X509CRLSelector selector = new X509CRLSelector();\n+        selector.setIssuerNames(new TreeSet() {\n+            public Iterator iterator() {\n+                return null;\n+            }\n+        });\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-784 ([classlib][math] compatibility: no NPE for java.math.BigDecimal((BigInteger) null))\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@420344 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/287523524aee76de7a43500838058f0fba6b54cd",
        "parent": "https://github.com/apache/harmony-classlib/commit/d313c33e327269575735c86af027f772e99a0e63",
        "bug_id": "harmony-classlib_218",
        "file": [
            {
                "sha": "085bedb6e9fe33de5a49b2a7f4fb6176ddad9f9c",
                "filename": "modules/math/src/main/java/java/math/BigDecimal.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/287523524aee76de7a43500838058f0fba6b54cd/modules/math/src/main/java/java/math/BigDecimal.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/287523524aee76de7a43500838058f0fba6b54cd/modules/math/src/main/java/java/math/BigDecimal.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/math/src/main/java/java/math/BigDecimal.java?ref=287523524aee76de7a43500838058f0fba6b54cd",
                "patch": "@@ -210,7 +210,10 @@ public static BigDecimal valueOf(long unscaledValue, int scale) {\n      * as 0.\r\n      */\r\n     public BigDecimal(BigInteger value) {\r\n-        intVal = value;\r\n+        if (value == null) {\r\n+        \tthrow new NullPointerException();\r\n+        }\r\n+    \tintVal = value;\r\n         scale = 0;\r\n     }\r\n \r",
                "deletions": 1
            },
            {
                "sha": "d1fcac081ed4c2b09a092d0c6791cfb56fd0f8df",
                "filename": "modules/math/src/test/java/org/apache/harmony/tests/java/math/BigDecimalConstructorsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/287523524aee76de7a43500838058f0fba6b54cd/modules/math/src/test/java/org/apache/harmony/tests/java/math/BigDecimalConstructorsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/287523524aee76de7a43500838058f0fba6b54cd/modules/math/src/test/java/org/apache/harmony/tests/java/math/BigDecimalConstructorsTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/math/src/test/java/org/apache/harmony/tests/java/math/BigDecimalConstructorsTest.java?ref=287523524aee76de7a43500838058f0fba6b54cd",
                "patch": "@@ -71,6 +71,12 @@ public void testConstrBI() {\n         BigDecimal aNumber = new BigDecimal(bA);\r\n         assertEquals(\"incorrect value\", bA, aNumber.unscaledValue());\r\n         assertEquals(\"incorrect scale\", 0, aNumber.scale());\r\n+        try {\r\n+        \tnew BigDecimal((BigInteger) null);\r\n+        \tfail(\"No NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+        \t//expected\r\n+        }\r\n     }\r\n      \r\n     /**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-798 ([classlib][nio] java.nio.ByteBuffer.order((ByteOrder) null) throws unspecified NPE)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@419970 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a8dcabcd9ada609aa75677055ebf0bb4f86f3664",
        "parent": "https://github.com/apache/harmony-classlib/commit/64dd6413c791f4c60e1bc6c683c4b35059bf266f",
        "bug_id": "harmony-classlib_219",
        "file": [
            {
                "sha": "f3713faf1d4d0149e106883adde6638d62d984a9",
                "filename": "modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a8dcabcd9ada609aa75677055ebf0bb4f86f3664/modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a8dcabcd9ada609aa75677055ebf0bb4f86f3664/modules/nio/src/main/java/java/nio/ByteBuffer.java",
                "status": "modified",
                "changes": 16,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/main/java/java/nio/ByteBuffer.java?ref=a8dcabcd9ada609aa75677055ebf0bb4f86f3664",
                "patch": "@@ -685,19 +685,19 @@ public final ByteOrder order() {\n \t}\r\n \r\n \t/**\r\n-\t * Sets the byte order of this buffer.\r\n-\t * \r\n-\t * @param byteOrder     The byte order to set\r\n-\t * @return This buffer\r\n-\t */\r\n+     * Sets the byte order of this buffer.\r\n+     * \r\n+     * @param byteOrder\r\n+     *            The byte order to set. If <code>null</code> then the order\r\n+     *            will be {@link ByteOrder.LITTLE_ENDIAN LITTLE_ENDIAN}.\r\n+     * @return This buffer\r\n+     * @see ByteOrder\r\n+     */\r\n \tpublic final ByteBuffer order(ByteOrder byteOrder) {\r\n \t\treturn orderImpl(byteOrder);\r\n \t}\r\n \r\n \tByteBuffer orderImpl(ByteOrder byteOrder) {\r\n-\t\tif (byteOrder == null) {\r\n-\t\t\tthrow new NullPointerException();\r\n-\t\t}\r\n \t\torder = byteOrder == ByteOrder.BIG_ENDIAN ? Endianness.BIG_ENDIAN\r\n \t\t\t\t: Endianness.LITTLE_ENDIAN;\r\n \t\treturn this;\r",
                "deletions": 8
            },
            {
                "sha": "88a9187c720360dd459a6b8ecdbf809dfe298490",
                "filename": "modules/nio/src/test/java/common/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a8dcabcd9ada609aa75677055ebf0bb4f86f3664/modules/nio/src/test/java/common/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a8dcabcd9ada609aa75677055ebf0bb4f86f3664/modules/nio/src/test/java/common/org/apache/harmony/tests/java/nio/ByteBufferTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio/src/test/java/common/org/apache/harmony/tests/java/nio/ByteBufferTest.java?ref=a8dcabcd9ada609aa75677055ebf0bb4f86f3664",
                "patch": "@@ -457,6 +457,18 @@ public void testIsDirect() {\n     public void testOrder() {\r\n         // BIG_ENDIAN is the default byte order\r\n         assertEquals(ByteOrder.BIG_ENDIAN, buf.order());\r\n+\r\n+        buf.order(ByteOrder.LITTLE_ENDIAN);\r\n+        assertEquals(ByteOrder.LITTLE_ENDIAN, buf.order());\r\n+        \r\n+        buf.order(ByteOrder.BIG_ENDIAN);\r\n+        assertEquals(ByteOrder.BIG_ENDIAN, buf.order());\r\n+\r\n+        // Regression test for HARMONY-798\r\n+        buf.order((ByteOrder)null);\r\n+        assertEquals(ByteOrder.LITTLE_ENDIAN, buf.order());\r\n+        \r\n+        buf.order(ByteOrder.BIG_ENDIAN);\r\n     }\r\n \r\n     /*\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "HARMONY 703 : java.util.logging.Level constructors should throw NPE if name == null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@418031 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1f5146c0519754b70edfac27bf82f32d74fdf2aa",
        "parent": "https://github.com/apache/harmony-classlib/commit/925bce161dd7ef74fbcc9f72d9fb86e4be4b034a",
        "bug_id": "harmony-classlib_220",
        "file": [
            {
                "sha": "c03185875a07eaa8eaf1789dc46b18ab7a92a2c4",
                "filename": "modules/logging/src/main/java/java/util/logging/Level.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f5146c0519754b70edfac27bf82f32d74fdf2aa/modules/logging/src/main/java/java/util/logging/Level.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f5146c0519754b70edfac27bf82f32d74fdf2aa/modules/logging/src/main/java/java/util/logging/Level.java",
                "status": "modified",
                "changes": 723,
                "additions": 363,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Level.java?ref=1f5146c0519754b70edfac27bf82f32d74fdf2aa",
                "patch": "@@ -1,360 +1,363 @@\n-/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *     http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package java.util.logging;\n-\n-import java.io.Serializable;\n-import java.util.HashMap;\n-import java.util.Map;\n-import java.util.ResourceBundle;\n-\n-/**\n- * <code>Level</code> objects are used to indicate the level of logging. There\n- * are a set of predefined logging levels, each associated with an integer\n- * value. Enabling a certain logging level also enables all logging levels with\n- * larger values.\n- * <p>\n- * The predefined levels in ascending order are FINEST, FINER, FINE, CONFIG,\n- * INFO, WARNING, SEVERE. There are two additional predefined levels, which are\n- * ALL and OFF. ALL indicates logging all messages, and OFF indicates logging no\n- * messages.\n- * </p>\n- * \n- */\n-public class Level implements Serializable {\n-    \n-    \n-    //for serialization compability\n-    private static final long serialVersionUID = -8176160795706313070L;    \n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Constants\n-     * -------------------------------------------------------------------\n-     */\n-\n-\t/*\n-     * -------------------------------------------------------------------\n-     * Class variables\n-     * -------------------------------------------------------------------\n-     */\n-    private static Map<String, Level> levels = new HashMap<String, Level>();\n-\t\n-    // The following string constants define the name of all predefined levels.\n-    private static final String SEVERESTR = \"SEVERE\"; //$NON-NLS-1$\n-\n-    private static final String WARNINGSTR = \"WARNING\"; //$NON-NLS-1$\n-\n-    private static final String INFOSTR = \"INFO\"; //$NON-NLS-1$\n-\n-    private static final String CONFIGSTR = \"CONFIG\"; //$NON-NLS-1$\n-\n-    private static final String FINESTR = \"FINE\"; //$NON-NLS-1$\n-\n-    private static final String FINERSTR = \"FINER\"; //$NON-NLS-1$\n-\n-    private static final String FINESTSTR = \"FINEST\"; //$NON-NLS-1$\n-\n-    private static final String OFFSTR = \"OFF\"; //$NON-NLS-1$\n-\n-    private static final String ALLSTR = \"ALL\"; //$NON-NLS-1$\n-\n-    /**\n-     * The SEVERE level indicates a severe failure.\n-     */\n-    public static final Level SEVERE = new Level(SEVERESTR, 1000);\n-\n-    /**\n-     * The WARNING level indicates a warning.\n-     */\n-    public static final Level WARNING = new Level(WARNINGSTR, 900);\n-\n-    /**\n-     * The INFO level indicates an informative message.\n-     */\n-    public static final Level INFO = new Level(INFOSTR, 800);\n-\n-    /**\n-     * The CONFIG level indicates a static configuration message.\n-     */\n-    public static final Level CONFIG = new Level(CONFIGSTR, 700);\n-\n-    /**\n-     * The FINE level provides tracing messages.\n-     */\n-    public static final Level FINE = new Level(FINESTR, 500);\n-\n-    /**\n-     * The FINER level provides more detailed tracing messages.\n-     */\n-    public static final Level FINER = new Level(FINERSTR, 400);\n-\n-    /**\n-     * The FINEST level provides highly detailed tracing messages.\n-     */\n-    public static final Level FINEST = new Level(FINESTSTR, 300);\n-\n-    /**\n-     * The OFF level provides no logging messages.\n-     */\n-    public static final Level OFF = new Level(OFFSTR, Integer.MAX_VALUE);\n-\n-    /**\n-     * The ALL level provides all logging messages.\n-     */\n-    public static final Level ALL = new Level(ALLSTR, Integer.MIN_VALUE);\n-\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Global initialization\n-     * -------------------------------------------------------------------\n-     */\n-\n-    static {\n-\t\tlevels.remove(null);\n-    }\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Instance variables\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * The name of this Level.\n-     * \n-     * @serial\n-     */\n-    private final String name;\n-\n-    /**\n-     * The integer value indicating the level.\n-     * \n-     * @serial\n-     */\n-    private final int value;\n-\n-    /**\n-     * The name of the resource bundle used to localize the level name.\n-     * \n-     * @serial\n-     */\n-    private final String resourceBundleName;\n-\n-    /*\n-     * The resource bundle associated with this level, used to localize the\n-     * level name.\n-     */\n-    private transient ResourceBundle rb;\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Constructors\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * Constructs an instance of <code>Level</code> taking the supplied name\n-     * and level value.\n-     * \n-     * @param name\n-     *            name of the level\n-     * @param level\n-     *            an integer value indicating the level\n-     */\n-    protected Level(String name, int level) {\n-        this(name, level, null);\n-    }\n-\n-    /**\n-     * Constructs an instance of <code>Level</code> taking the supplied name\n-     * and level value.\n-     * \n-     * @param name\n-     *            name of the level\n-     * @param level\n-     *            an integer value indicating the level\n-     * @param resourceBundleName\n-     *            the name of the resource bundle to use\n-     */\n-    protected Level(String name, int level, String resourceBundleName) {\n-        this.name = name;\n-        this.value = level;\n-        this.resourceBundleName = resourceBundleName;\n-\t\t//put value into known values list in Constructor\n-\t\tif(null==levels.get(name)){\n-\t\t\tlevels.put(name,this);\n-\t\t}\n-\t\tif(null==levels.get(String.valueOf(level))){\n-\t\t\tlevels.put(String.valueOf(this.intValue()), this);\n-\t\t}\n-    }\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Methods\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * Gets the name of this <code>Level</code>.\n-     * \n-     * @return the name of this <code>Level</code>\n-     */\n-    public String getName() {\n-        return this.name;\n-    }\n-\n-    /**\n-     * Gets the name of the resource bundle associated with this\n-     * <code>Level</code>.\n-     * \n-     * @return the name of the resource bundle associated with this\n-     *         <code>Level</code>\n-     */\n-    public String getResourceBundleName() {\n-        return this.resourceBundleName;\n-    }\n-\n-    /**\n-     * Gets the integer value indicating this <code>Level</code>.\n-     * \n-     * @return the integer value indicating this <code>Level</code>\n-     */\n-    public final int intValue() {\n-        return this.value;\n-    }\n-\n-    /**\n-     * Parses a level name into a <code>Level</code> object.\n-     * \n-     * @param name\n-     *            the name of the desired level, which cannot be null\n-     * @return a <code>Level</code> object with the specified name\n-     * @throws NullPointerException\n-     *             If <code>name</code> is null.\n-     * @throws IllegalArgumentException\n-     *             When <code>name</code> cannot be parsed.\n-     */\n-    public static final Level parse(String name) {\n-        if (null == name) {\n-            throw new NullPointerException(\"null\"); //$NON-NLS-1$\n-        }\n-        // Check if the name is a predefined one\n-        Level result = levels.get(name);\n-        if (null != result) {\n-            return result;\n-        }\n-        // Try to parse the name as an integer\n-        try {\n-            int v = Integer.parseInt(name);\n-            result = new Level(name, v);\n-            return result;\n-        } catch (NumberFormatException e) {\n-            throw new IllegalArgumentException(\"Cannot parse this name: \" //$NON-NLS-1$\n-                    + name);\n-        }\n-    }\n-\n-    /**\n-     * Gets the localized name of this level. The default locale is used. If no\n-     * resource bundle is associated with this <code>Level</code>, the\n-     * original level name is returned.\n-     * \n-     * @return the localized name of this level\n-     */\n-    public String getLocalizedName() {\n-        String result = name;\n-        if (null != resourceBundleName && null == rb) {\n-            try {\n-                rb = ResourceBundle.getBundle(resourceBundleName);\n-            } catch (Exception e) {\n-                rb = null;\n-            }\n-        }\n-        if (null != rb) {\n-            try {\n-                result = rb.getString(name);\n-            } catch (Exception e) {\n-                result = name;\n-            }\n-        }\n-        return result;\n-    }\n-\n-    /*\n-     * Maintains the Object uniqueness property across serialization.\n-     */\n-    private Object readResolve() {\n-        String levelName = this.getName();\n-        Level result = levels.get(levelName);\n-\n-        if (null != result) {\n-            boolean sameResourceBundle = (this.resourceBundleName == null ? result\n-                    .getResourceBundleName() == null\n-                    : this.resourceBundleName.equals(result\n-                            .getResourceBundleName()));\n-            if (result.intValue() == this.value && sameResourceBundle) {\n-                return result;\n-            }\n-        }\n-        return this;\n-    }\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Methods overriding parent class Object\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * Compares two <code>Level</code> objects for equality. They are\n-     * considered to be equal if they have the same value.\n-     * \n-     * @param o\n-     *            the other object to be compared with\n-     * @return <code>true</code> if this object equals to the supplied object,\n-     *         otherwise <code>false</code>\n-     */\n-    public boolean equals(Object o) {\n-        if (!(o instanceof Level)) {\n-            return false;\n-        }\n-        return ((Level) o).intValue() == this.value;\n-    }\n-\n-    /**\n-     * Returns the hash code of this <code>Level</code> object.\n-     * \n-     * @return the hash code of this <code>Level</code> object\n-     */\n-    public int hashCode() {\n-        return this.value;\n-    }\n-\n-    /**\n-     * Returns the string representation of this <code>Level</code> object.\n-     * Usually this will include its name.\n-     * \n-     * @return the string representation of this <code>Level</code> object\n-     */\n-    public final String toString() {\n-        return this.name;\n-    }\n-\n-}\n-\n+/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package java.util.logging;\r\n+\r\n+import java.io.Serializable;\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+import java.util.ResourceBundle;\r\n+\r\n+/**\r\n+ * <code>Level</code> objects are used to indicate the level of logging. There\r\n+ * are a set of predefined logging levels, each associated with an integer\r\n+ * value. Enabling a certain logging level also enables all logging levels with\r\n+ * larger values.\r\n+ * <p>\r\n+ * The predefined levels in ascending order are FINEST, FINER, FINE, CONFIG,\r\n+ * INFO, WARNING, SEVERE. There are two additional predefined levels, which are\r\n+ * ALL and OFF. ALL indicates logging all messages, and OFF indicates logging no\r\n+ * messages.\r\n+ * </p>\r\n+ * \r\n+ */\r\n+public class Level implements Serializable {\r\n+    \r\n+    \r\n+    //for serialization compability\r\n+    private static final long serialVersionUID = -8176160795706313070L;    \r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Constants\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+\t/*\r\n+     * -------------------------------------------------------------------\r\n+     * Class variables\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+    private static Map<String, Level> levels = new HashMap<String, Level>();\r\n+\t\r\n+    // The following string constants define the name of all predefined levels.\r\n+    private static final String SEVERESTR = \"SEVERE\"; //$NON-NLS-1$\r\n+\r\n+    private static final String WARNINGSTR = \"WARNING\"; //$NON-NLS-1$\r\n+\r\n+    private static final String INFOSTR = \"INFO\"; //$NON-NLS-1$\r\n+\r\n+    private static final String CONFIGSTR = \"CONFIG\"; //$NON-NLS-1$\r\n+\r\n+    private static final String FINESTR = \"FINE\"; //$NON-NLS-1$\r\n+\r\n+    private static final String FINERSTR = \"FINER\"; //$NON-NLS-1$\r\n+\r\n+    private static final String FINESTSTR = \"FINEST\"; //$NON-NLS-1$\r\n+\r\n+    private static final String OFFSTR = \"OFF\"; //$NON-NLS-1$\r\n+\r\n+    private static final String ALLSTR = \"ALL\"; //$NON-NLS-1$\r\n+\r\n+    /**\r\n+     * The SEVERE level indicates a severe failure.\r\n+     */\r\n+    public static final Level SEVERE = new Level(SEVERESTR, 1000);\r\n+\r\n+    /**\r\n+     * The WARNING level indicates a warning.\r\n+     */\r\n+    public static final Level WARNING = new Level(WARNINGSTR, 900);\r\n+\r\n+    /**\r\n+     * The INFO level indicates an informative message.\r\n+     */\r\n+    public static final Level INFO = new Level(INFOSTR, 800);\r\n+\r\n+    /**\r\n+     * The CONFIG level indicates a static configuration message.\r\n+     */\r\n+    public static final Level CONFIG = new Level(CONFIGSTR, 700);\r\n+\r\n+    /**\r\n+     * The FINE level provides tracing messages.\r\n+     */\r\n+    public static final Level FINE = new Level(FINESTR, 500);\r\n+\r\n+    /**\r\n+     * The FINER level provides more detailed tracing messages.\r\n+     */\r\n+    public static final Level FINER = new Level(FINERSTR, 400);\r\n+\r\n+    /**\r\n+     * The FINEST level provides highly detailed tracing messages.\r\n+     */\r\n+    public static final Level FINEST = new Level(FINESTSTR, 300);\r\n+\r\n+    /**\r\n+     * The OFF level provides no logging messages.\r\n+     */\r\n+    public static final Level OFF = new Level(OFFSTR, Integer.MAX_VALUE);\r\n+\r\n+    /**\r\n+     * The ALL level provides all logging messages.\r\n+     */\r\n+    public static final Level ALL = new Level(ALLSTR, Integer.MIN_VALUE);\r\n+\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Global initialization\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    static {\r\n+\t\tlevels.remove(null);\r\n+    }\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Instance variables\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * The name of this Level.\r\n+     * \r\n+     * @serial\r\n+     */\r\n+    private final String name;\r\n+\r\n+    /**\r\n+     * The integer value indicating the level.\r\n+     * \r\n+     * @serial\r\n+     */\r\n+    private final int value;\r\n+\r\n+    /**\r\n+     * The name of the resource bundle used to localize the level name.\r\n+     * \r\n+     * @serial\r\n+     */\r\n+    private final String resourceBundleName;\r\n+\r\n+    /*\r\n+     * The resource bundle associated with this level, used to localize the\r\n+     * level name.\r\n+     */\r\n+    private transient ResourceBundle rb;\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Constructors\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Constructs an instance of <code>Level</code> taking the supplied name\r\n+     * and level value.\r\n+     * \r\n+     * @param name\r\n+     *            name of the level\r\n+     * @param level\r\n+     *            an integer value indicating the level\r\n+     */\r\n+    protected Level(String name, int level) {\r\n+        this(name, level, null);\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs an instance of <code>Level</code> taking the supplied name\r\n+     * and level value.\r\n+     * \r\n+     * @param name\r\n+     *            name of the level\r\n+     * @param level\r\n+     *            an integer value indicating the level\r\n+     * @param resourceBundleName\r\n+     *            the name of the resource bundle to use\r\n+     */\r\n+    protected Level(String name, int level, String resourceBundleName) {\r\n+        if (null == name) {\r\n+            throw new NullPointerException(\"null\"); //$NON-NLS-1$\r\n+        }\r\n+        this.name = name;\r\n+        this.value = level;\r\n+        this.resourceBundleName = resourceBundleName;\r\n+\t\t//put value into known values list in Constructor\r\n+\t\tif(null==levels.get(name)){\r\n+\t\t\tlevels.put(name,this);\r\n+\t\t}\r\n+\t\tif(null==levels.get(String.valueOf(level))){\r\n+\t\t\tlevels.put(String.valueOf(this.intValue()), this);\r\n+\t\t}\r\n+    }\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Methods\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Gets the name of this <code>Level</code>.\r\n+     * \r\n+     * @return the name of this <code>Level</code>\r\n+     */\r\n+    public String getName() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the name of the resource bundle associated with this\r\n+     * <code>Level</code>.\r\n+     * \r\n+     * @return the name of the resource bundle associated with this\r\n+     *         <code>Level</code>\r\n+     */\r\n+    public String getResourceBundleName() {\r\n+        return this.resourceBundleName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the integer value indicating this <code>Level</code>.\r\n+     * \r\n+     * @return the integer value indicating this <code>Level</code>\r\n+     */\r\n+    public final int intValue() {\r\n+        return this.value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Parses a level name into a <code>Level</code> object.\r\n+     * \r\n+     * @param name\r\n+     *            the name of the desired level, which cannot be null\r\n+     * @return a <code>Level</code> object with the specified name\r\n+     * @throws NullPointerException\r\n+     *             If <code>name</code> is null.\r\n+     * @throws IllegalArgumentException\r\n+     *             When <code>name</code> cannot be parsed.\r\n+     */\r\n+    public static final Level parse(String name) {\r\n+        if (null == name) {\r\n+            throw new NullPointerException(\"null\"); //$NON-NLS-1$\r\n+        }\r\n+        // Check if the name is a predefined one\r\n+        Level result = levels.get(name);\r\n+        if (null != result) {\r\n+            return result;\r\n+        }\r\n+        // Try to parse the name as an integer\r\n+        try {\r\n+            int v = Integer.parseInt(name);\r\n+            result = new Level(name, v);\r\n+            return result;\r\n+        } catch (NumberFormatException e) {\r\n+            throw new IllegalArgumentException(\"Cannot parse this name: \" //$NON-NLS-1$\r\n+                    + name);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the localized name of this level. The default locale is used. If no\r\n+     * resource bundle is associated with this <code>Level</code>, the\r\n+     * original level name is returned.\r\n+     * \r\n+     * @return the localized name of this level\r\n+     */\r\n+    public String getLocalizedName() {\r\n+        String result = name;\r\n+        if (null != resourceBundleName && null == rb) {\r\n+            try {\r\n+                rb = ResourceBundle.getBundle(resourceBundleName);\r\n+            } catch (Exception e) {\r\n+                rb = null;\r\n+            }\r\n+        }\r\n+        if (null != rb) {\r\n+            try {\r\n+                result = rb.getString(name);\r\n+            } catch (Exception e) {\r\n+                result = name;\r\n+            }\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    /*\r\n+     * Maintains the Object uniqueness property across serialization.\r\n+     */\r\n+    private Object readResolve() {\r\n+        String levelName = this.getName();\r\n+        Level result = levels.get(levelName);\r\n+\r\n+        if (null != result) {\r\n+            boolean sameResourceBundle = (this.resourceBundleName == null ? result\r\n+                    .getResourceBundleName() == null\r\n+                    : this.resourceBundleName.equals(result\r\n+                            .getResourceBundleName()));\r\n+            if (result.intValue() == this.value && sameResourceBundle) {\r\n+                return result;\r\n+            }\r\n+        }\r\n+        return this;\r\n+    }\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Methods overriding parent class Object\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Compares two <code>Level</code> objects for equality. They are\r\n+     * considered to be equal if they have the same value.\r\n+     * \r\n+     * @param o\r\n+     *            the other object to be compared with\r\n+     * @return <code>true</code> if this object equals to the supplied object,\r\n+     *         otherwise <code>false</code>\r\n+     */\r\n+    public boolean equals(Object o) {\r\n+        if (!(o instanceof Level)) {\r\n+            return false;\r\n+        }\r\n+        return ((Level) o).intValue() == this.value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the hash code of this <code>Level</code> object.\r\n+     * \r\n+     * @return the hash code of this <code>Level</code> object\r\n+     */\r\n+    public int hashCode() {\r\n+        return this.value;\r\n+    }\r\n+\r\n+    /**\r\n+     * Returns the string representation of this <code>Level</code> object.\r\n+     * Usually this will include its name.\r\n+     * \r\n+     * @return the string representation of this <code>Level</code> object\r\n+     */\r\n+    public final String toString() {\r\n+        return this.name;\r\n+    }\r\n+\r\n+}\r\n+\r",
                "deletions": 360
            },
            {
                "sha": "e5beba54afee1d0e351a204fa7a5c7b292674cc2",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LevelTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1f5146c0519754b70edfac27bf82f32d74fdf2aa/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LevelTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1f5146c0519754b70edfac27bf82f32d74fdf2aa/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LevelTest.java",
                "status": "modified",
                "changes": 31,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/LevelTest.java?ref=1f5146c0519754b70edfac27bf82f32d74fdf2aa",
                "patch": "@@ -67,11 +67,12 @@ public void testConstructorNoResBundle_Normal() {\n \t * As byproducts, getName & intValue are also tested.\r\n \t */\r\n \tpublic void testConstructorNoResBundle_NullName() {\r\n-\t\tMockLevel l = new MockLevel(null, -2);\r\n-\t\tassertEquals(l.getName(), null);\r\n-\t\tassertEquals(l.intValue(), -2);\r\n-\t\tassertNull(l.getResourceBundleName());\r\n-\t}\r\n+        try {\r\n+            MockLevel l = new MockLevel(null, -2);\r\n+            fail(\"No expected NullPointerException\");\r\n+        } catch (NullPointerException ignore) {\r\n+        }\r\n+    }\r\n \r\n \t/*\r\n \t * Test the constructor without resource bundle parameter using empty name.\r\n@@ -99,11 +100,12 @@ public void testConstructorHavingResBundle_Normal() {\n \t * As byproducts, getName & intValue are also tested.\r\n \t */\r\n \tpublic void testConstructorHavingResBundle_NullName() {\r\n-\t\tMockLevel l = new MockLevel(null, -123, null);\r\n-\t\tassertNull(l.getName());\r\n-\t\tassertEquals(l.intValue(), -123);\r\n-\t\tassertNull(l.getResourceBundleName());\r\n-\t}\r\n+        try {\r\n+            MockLevel l = new MockLevel(null, -123, \"qwe\");\r\n+            fail(\"No expected NullPointerException\");\r\n+        } catch (NullPointerException ignore) {\r\n+        }\r\n+    }\r\n \r\n \t// /*\r\n \t// * Test the constructor having resource bundle parameter using empty\r\n@@ -290,13 +292,6 @@ public void testToString_Normal() {\n \t\tassertEquals(\"\", emptyLevel.toString());\r\n \t}\r\n \r\n-\t/*\r\n-\t * Test toString of a Level with null name.\r\n-\t */\r\n-\tpublic void testToString_Null() {\r\n-\t\tMockLevel l = new MockLevel(null, 2);\r\n-\t\tassertEquals(null, l.toString());\r\n-\t}\r\n \r\n \t/*\r\n \t * Test serilaziation of pre-defined const levels. It is expected that the\r\n@@ -317,7 +312,7 @@ public void testSerialization_InstanceLevel() throws Exception {\n \t\tSerializationTester.assertSame(l);\r\n \t\tSerializationTester.assertEquals(Level.parse(\"-1\"));\r\n \t\tSerializationTester.assertEquals(new MockLevel(\"123\", 123, \"bundle\"));\r\n-\t\tSerializationTester.assertEquals(new MockLevel(null, 123, null));\r\n+\t\tSerializationTester.assertEquals(new MockLevel(\"123\", 123, null));\r\n \t}\r\n \r\n \tpublic void testSerializationCompability() throws Exception {\r",
                "deletions": 18
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-650\n[classlib][text]unexpected NPE for object constructed by java.text.Bidi(AttributedCharacterIterator)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@417162 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8c0ac557bccb8dd7f6ed16cac57ae9efc27cadfd",
        "parent": "https://github.com/apache/harmony-classlib/commit/1ccfbe9c0b49ff02f1c40e0be7b33321755c4b8a",
        "bug_id": "harmony-classlib_221",
        "file": [
            {
                "sha": "71d04116b0b12444504c0717415cb03121752ede",
                "filename": "modules/text/src/main/java/java/text/Bidi.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8c0ac557bccb8dd7f6ed16cac57ae9efc27cadfd/modules/text/src/main/java/java/text/Bidi.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8c0ac557bccb8dd7f6ed16cac57ae9efc27cadfd/modules/text/src/main/java/java/text/Bidi.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/Bidi.java?ref=8c0ac557bccb8dd7f6ed16cac57ae9efc27cadfd",
                "patch": "@@ -460,7 +460,7 @@ public static boolean requiresBidi(char[] text, int start, int limit) {\n \t * @return a string containing the internal messsage.\r\n \t */\r\n \tpublic String toString() {\r\n-\t\t// simply return nothing\r\n-\t\treturn \"\";\r\n+\t\treturn super.toString() + \"[direction: \" + direction + \" baselevel: \" + baseLevel\r\n+\t\t\t + \" length: \" + length + \" runs: \" + runs + \"]\";\r\n \t}\r\n }\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-604 (java.net.URLConnection.addRequestProperty((String) null, String value) doesn't throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@414542 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b",
        "parent": "https://github.com/apache/harmony-classlib/commit/f11a4c3e7d8cf08258030469bb37c6d634f8a6a3",
        "bug_id": "harmony-classlib_222",
        "file": [
            {
                "sha": "15883f2ac293fdba0cfb611ef401ae1c72737e64",
                "filename": "modules/luni/src/main/java/java/net/URLConnection.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/main/java/java/net/URLConnection.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/main/java/java/net/URLConnection.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URLConnection.java?ref=d333e32f2f6bcbcca4715b14b3bb59b4763fd31b",
                "patch": "@@ -450,6 +450,9 @@ public String getHeaderField(int pos) {\n \t * @since 1.4\r\n \t */\r\n \tpublic void addRequestProperty(String field, String newValue) {\r\n+        if (field == null) {\r\n+            throw new NullPointerException(Msg.getString(\"KA007\"));\r\n+        }\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 0
            },
            {
                "sha": "4038aa708774979d7cb9ed2303f9a028bcd5c340",
                "filename": "modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/org/apache/harmony/luni/util/ExternalMessages.properties?ref=d333e32f2f6bcbcca4715b14b3bb59b4763fd31b",
                "patch": "@@ -292,5 +292,5 @@ KA003=different mode already set\n KA004=Enums may not be cloned\r\n KA005={0} is not an enum type\r\n KA006={0} is not a constant in the enum type {1}\r\n-\r\n+KA007=field is null\r\n \r",
                "deletions": 1
            },
            {
                "sha": "9b42d5947635c47567dc33cbbb71c7d37f22ef6d",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLConnectionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLConnectionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d333e32f2f6bcbcca4715b14b3bb59b4763fd31b/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLConnectionTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/net/URLConnectionTest.java?ref=d333e32f2f6bcbcca4715b14b3bb59b4763fd31b",
                "patch": "@@ -24,6 +24,23 @@\n \r\n public class URLConnectionTest extends TestCase {\r\n \r\n+    /**\r\n+     * @tests java.net.URLConnection#addRequestProperty(String, String)\r\n+     */\r\n+    public void test_addRequestProperty() throws MalformedURLException,\r\n+            IOException {\r\n+\r\n+        MockURLConnection u = new MockURLConnection(new URL(\r\n+                \"http://www.apache.org\"));\r\n+        try {\r\n+            // Regression for HARMONY-604\r\n+            u.addRequestProperty(null, \"someValue\");\r\n+            fail(\"Expected NullPointerException\");\r\n+        } catch (NullPointerException e) {\r\n+            // expected\r\n+        }\r\n+    }\r\n+\r\n     /**\r\n      * @tests java.net.URLConnection#setUseCaches(boolean)\r\n      */\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fixing NPE problem introduced in HARMONY-500 when machine has more than one network interface.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@412049 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b21cade77639ff82cbbf8cd87dbb94c12de697dd",
        "parent": "https://github.com/apache/harmony-classlib/commit/73b4212c93574cc7d44437cd874b233a8a2ab5dc",
        "bug_id": "harmony-classlib_223",
        "file": [
            {
                "sha": "6b4f8d87b7ffc9b63ddbe3d56eeb85111a46aef8",
                "filename": "modules/luni/src/main/java/java/net/NetworkInterface.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b21cade77639ff82cbbf8cd87dbb94c12de697dd/modules/luni/src/main/java/java/net/NetworkInterface.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b21cade77639ff82cbbf8cd87dbb94c12de697dd/modules/luni/src/main/java/java/net/NetworkInterface.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/NetworkInterface.java?ref=b21cade77639ff82cbbf8cd87dbb94c12de697dd",
                "patch": "@@ -298,15 +298,19 @@ public static NetworkInterface getByInetAddress(InetAddress address)\n         }\r\n \r\n         for (NetworkInterface netif : interfaces) {\r\n-            for (InetAddress addr : netif.addresses) {\r\n-                if (16 == addr.ipaddress.length) {\r\n-                    if (addr.isLinkLocalAddress() || addr.isSiteLocalAddress()) {\r\n-                        ((Inet6Address) addr).scopedIf = netif;\r\n-                        ((Inet6Address) addr).ifname = netif.name;\r\n-                        ((Inet6Address) addr).scope_ifname_set = true;\r\n+            // Ensure that current NetworkInterface is bound to at least \r\n+            // one InetAddress before processing\r\n+            if (netif.addresses != null) {\r\n+                for (InetAddress addr : netif.addresses) {\r\n+                    if (16 == addr.ipaddress.length) {\r\n+                        if (addr.isLinkLocalAddress() || addr.isSiteLocalAddress()) {\r\n+                            ((Inet6Address) addr).scopedIf = netif;\r\n+                            ((Inet6Address) addr).ifname = netif.name;\r\n+                            ((Inet6Address) addr).scope_ifname_set = true;\r\n+                        }\r\n                     }\r\n                 }\r\n-            }\r\n+            }// end if \r\n         }\r\n \r\n         return (new Vector<NetworkInterface>(Arrays.asList(interfaces)))\r",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply updated patch for HARMONY-466 ([classlib][text] DateFormatSymbols, DecimalFormat, SimpleDateFormat methods should throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@407161 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/980c0ef861a03727731b81fed172cf8ee1731d87",
        "parent": "https://github.com/apache/harmony-classlib/commit/668451dd5ba612841786113e143854ef2070e43c",
        "bug_id": "harmony-classlib_224",
        "file": [
            {
                "sha": "9c29eca3e7c287ab90e87a5db61e1c89b4901bf1",
                "filename": "modules/text/src/main/java/java/text/DateFormatSymbols.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/DateFormatSymbols.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/DateFormatSymbols.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/DateFormatSymbols.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -282,8 +282,14 @@ public void setEras(String[] data) {\n \t * \r\n \t * @param data\r\n \t *            the String containing the pattern characters\r\n+\t *\r\n+\t * @exception NullPointerException\r\n+\t *                when the data is null\r\n \t */\r\n \tpublic void setLocalPatternChars(String data) {\r\n+\t\tif (data==null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tlocalPatternChars = data;\r\n \t}\r\n \r",
                "deletions": 0
            },
            {
                "sha": "c772dde30ac05d59349a34c799d07a3dd2e004c0",
                "filename": "modules/text/src/main/java/java/text/DecimalFormat.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/DecimalFormat.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/DecimalFormat.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/DecimalFormat.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -173,10 +173,15 @@ public boolean equals(Object object) {\n      * @return an AttributedCharacterIterator with the formatted number and\r\n      *         attributes\r\n      * \r\n+     * @exception NullPointerException\r\n+     *                when the object is null\r\n      * @exception IllegalArgumentException\r\n      *                when the object cannot be formatted by this Format\r\n      */\r\n     public AttributedCharacterIterator formatToCharacterIterator(Object object) {\r\n+        if (object == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n         return dform.formatToCharacterIterator(object);\r\n     }\r\n \r",
                "deletions": 0
            },
            {
                "sha": "99bcea030c26187e7db0e52180d7a9aca0b77ce8",
                "filename": "modules/text/src/main/java/java/text/SimpleDateFormat.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/SimpleDateFormat.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/main/java/java/text/SimpleDateFormat.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/SimpleDateFormat.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -402,10 +402,15 @@ private Date error(ParsePosition position, int offset, TimeZone zone) {\n \t * @return an AttributedCharacterIterator with the formatted date and\r\n \t *         attributes\r\n \t * \r\n+\t * @exception NullPointerException\r\n+\t *                when the object is null\r\n \t * @exception IllegalArgumentException\r\n \t *                when the object cannot be formatted by this Format\r\n \t */\r\n \tpublic AttributedCharacterIterator formatToCharacterIterator(Object object) {\r\n+\t\tif (object==null) {\r\n+\t\t\tthrow new NullPointerException();\r\n+\t\t}\r\n \t\tif (object instanceof Date)\r\n \t\t\treturn formatToCharacterIteratorImpl((Date) object);\r\n \t\tif (object instanceof Number)\r",
                "deletions": 0
            },
            {
                "sha": "769da7f31ec9c4086278666c253d74e7732ea51f",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DateFormatSymbolsTest.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -237,6 +237,14 @@ public void test_setLocalPatternCharsLjava_lang_String() {\n         String retVal = dfs.getLocalPatternChars();\n         String val = \"GyMZZkHmsSEHHFwWahKz\";\n         assertTrue(\"Returned incorrect pattern string\", retVal.equals(val));\n+        \n+        try {\n+            // Regression for HARMONY-466\n+            new DateFormatSymbols().setLocalPatternChars(null);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n     }\n \n     /**",
                "deletions": 0
            },
            {
                "sha": "0b4705746797da1743baaa7dd989b79f43d1c383",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/DecimalFormatTest.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -1077,6 +1077,15 @@ public void test_formatJLjava_lang_StringBufferLjava_text_FieldPosition() {\n      * @tests java.text.DecimalFormat#formatToCharacterIterator(java.lang.Object)\n      */\n     public void test_formatToCharacterIteratorLjava_lang_Object() {\n+\n+        try {\n+            // Regression for HARMONY-466\n+            new DecimalFormat().formatToCharacterIterator(null);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n         new Support_DecimalFormat(\n                 \"test_formatToCharacterIteratorLjava_lang_Object\")\n                 .t_formatToCharacterIterator();",
                "deletions": 0
            },
            {
                "sha": "46f7f69e0a1288190a4b03d5e0373a4666bac5ef",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/980c0ef861a03727731b81fed172cf8ee1731d87/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/SimpleDateFormatTest.java?ref=980c0ef861a03727731b81fed172cf8ee1731d87",
                "patch": "@@ -313,6 +313,15 @@ public void test_equals_afterFormat() {\n      * @tests java.text.SimpleDateFormat#formatToCharacterIterator(java.lang.Object)\n      */\n     public void test_formatToCharacterIteratorLjava_lang_Object() {\n+\n+        try {\n+            // Regression for HARMONY-466\n+            new SimpleDateFormat().formatToCharacterIterator(null);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n         // Test for method formatToCharacterIterator(java.lang.Object)\n         new Support_SimpleDateFormat(\n                 \"test_formatToCharacterIteratorLjava_lang_Object\")",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-441\n[classlib] java.beans.PropertyChangeSupport.addPropertyChangeListener(String, PropertyChangeListener) should not throw NPE if propertyName == null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@399662 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9ee751ff9012b64346d54937ead2bb2462882015",
        "parent": "https://github.com/apache/harmony-classlib/commit/6dab6d835eee0ff1128d5b1d47940560ab953449",
        "bug_id": "harmony-classlib_225",
        "file": [
            {
                "sha": "c8f7f46828ccf3c5f70ef5a7696deec7eef1f218",
                "filename": "modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9ee751ff9012b64346d54937ead2bb2462882015/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9ee751ff9012b64346d54937ead2bb2462882015/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyChangeSupport.java?ref=9ee751ff9012b64346d54937ead2bb2462882015",
                "patch": "@@ -86,19 +86,17 @@ public synchronized void removePropertyChangeListener(\n     /**\n      * @com.intel.drl.spec_ref\n      */\n-    public synchronized void addPropertyChangeListener(\n-            String propertyName, PropertyChangeListener listener) {\n-        if(propertyName == null) {\n-            throw new NullPointerException(\"propertyName is null\");\n-        } else if(listener != null) {\n-            ArrayList listeners =\n-                (ArrayList) selectedPropertiesChangeListeners.get(propertyName);\n-            \n+    public synchronized void addPropertyChangeListener(String propertyName,\n+            PropertyChangeListener listener) {\n+        if (listener != null && propertyName != null) {\n+            ArrayList listeners = (ArrayList) selectedPropertiesChangeListeners\n+                    .get(propertyName);\n+\n             if (listeners == null) {\n                 listeners = new ArrayList();\n                 selectedPropertiesChangeListeners.put(propertyName, listeners);\n             }\n-            \n+\n             listeners.add(listener);\n         }\n     }",
                "deletions": 9
            },
            {
                "sha": "73009afe0c60dfb144a2404bd353cef2182431bb",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9ee751ff9012b64346d54937ead2bb2462882015/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9ee751ff9012b64346d54937ead2bb2462882015/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/PropertyChangeSupportTest.java?ref=9ee751ff9012b64346d54937ead2bb2462882015",
                "patch": "@@ -65,15 +65,25 @@ public PropertyChangeSupportTest(String name) {\n      *        java.lang.Object)\n      */\n     public void testConstructor_Null() {\n+        // Regression for HARMONY-227\n         try {\n-            // Regression for HARMONY-227\n             new PropertyChangeSupport(null);\n             fail(\"Should throw NullPointerException!\");\n         } catch (NullPointerException ex) {\n             // expected\n         }\n     }\n \n+    /**\n+     * @tests java.beans.PropertyChangeSupport#addPropertyChangeSupport\n+     * \n+     */\n+    public void test_addPropertyChangeListenerNullNull() throws Exception {\n+        // Regression for HARMONY-441\n+        new PropertyChangeSupport(\"bean1\")\n+                .addPropertyChangeListener(null, null);\n+    }\n+\n     /**\n      * @tests java.beans.PropertyChangeSupport#removePropertyChangeListener(\n      *        java.lang.String, java.beans.PropertyChangeListener)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-419\n[classlib][security] X.509 Certificate Factory provider throw NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@398814 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/95d945c3dea3412ff2a22aa4e77c20edff7471d4",
        "parent": "https://github.com/apache/harmony-classlib/commit/33d6bf48e3008ced24f004118285562586ec2de7",
        "bug_id": "harmony-classlib_226",
        "file": [
            {
                "sha": "3e04e063df38c1d97f347877c211ec4a8c4b6f66",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImpl.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -29,6 +29,7 @@\n \n import javax.security.auth.x500.X500Principal;\n \n+import org.apache.harmony.security.x509.Extension;\n import org.apache.harmony.security.x509.Extensions;\n import org.apache.harmony.security.x509.TBSCertList;\n \n@@ -119,7 +120,8 @@ public Set getCriticalExtensionOIDs() {\n         if (extensions == null) {\n             return null;\n         }\n-        return extensions.getExtensionByOID(oid).getRawExtnValue();\n+        Extension ext = extensions.getExtensionByOID(oid);\n+        return (ext == null) ? null : ext.getRawExtnValue();\n     }\n \n     public boolean hasUnsupportedCriticalExtension() {\n@@ -136,4 +138,3 @@ public boolean hasUnsupportedCriticalExtension() {\n     public static void main(String[] args) {\n     }\n }\n-",
                "deletions": 2
            },
            {
                "sha": "d8d835c7f8ed77b7c3fa13824455f15bee0be6a3",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLImpl.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CRLImpl.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -46,6 +46,7 @@\n \n import org.apache.harmony.crypto.utils.AlgNameMapper;\n import org.apache.harmony.security.x509.CertificateList;\n+import org.apache.harmony.security.x509.Extension;\n import org.apache.harmony.security.x509.Extensions;\n import org.apache.harmony.security.x509.TBSCertList;\n \n@@ -397,7 +398,8 @@ public Set getCriticalExtensionOIDs() {\n         if (extensions == null) {\n             return null;\n         }\n-        return extensions.getExtensionByOID(oid).getRawExtnValue();\n+        Extension ext = extensions.getExtensionByOID(oid);\n+        return (ext == null) ? null : ext.getRawExtnValue();\n     }\n \n     public boolean hasUnsupportedCriticalExtension() {\n@@ -407,4 +409,3 @@ public boolean hasUnsupportedCriticalExtension() {\n         return extensions.hasUnsupportedCritical();\n     }\n }\n-",
                "deletions": 2
            },
            {
                "sha": "5322dc9fb0d1617fb30d45c3ad1c21a5cc2d6c1e",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertImpl.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertImpl.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -46,6 +46,7 @@\n \n import org.apache.harmony.crypto.utils.AlgNameMapper;\n import org.apache.harmony.security.x509.Certificate;\n+import org.apache.harmony.security.x509.Extension;\n import org.apache.harmony.security.x509.Extensions;\n import org.apache.harmony.security.x509.TBSCertificate;\n \n@@ -417,7 +418,8 @@ public Set getCriticalExtensionOIDs() {\n         if (extensions == null) {\n             return null;\n         }\n-        return extensions.getExtensionByOID(oid).getRawExtnValue();\n+        Extension ext = extensions.getExtensionByOID(oid);\n+        return (ext == null) ? null : ext.getRawExtnValue();\n     }\n \n     public boolean hasUnsupportedCriticalExtension() {",
                "deletions": 1
            },
            {
                "sha": "9f6e6fe18d89572001b2c6ff2769f1c0841bdbb2",
                "filename": "modules/security/src/test/java/common/java/security/cert/X509CertificateTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/java/security/cert/X509CertificateTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/java/security/cert/X509CertificateTest.java",
                "status": "modified",
                "changes": 51,
                "additions": 51,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/java/common/java/security/cert/X509CertificateTest.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -21,6 +21,7 @@\n \n package java.security.cert;\n \n+import java.io.ByteArrayInputStream;\n import java.math.BigInteger;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n@@ -33,6 +34,7 @@\n \n import javax.security.auth.x500.X500Principal;\n \n+import org.apache.harmony.misc.Base64;\n import org.apache.harmony.security.cert.TestUtils;\n \n import junit.framework.Test;\n@@ -44,6 +46,36 @@\n  */\n public class X509CertificateTest extends TestCase {\n \n+    // Base64 encoded form of ASN.1 DER encoded X.509 Certificate\n+    // (see RFC 3280 at http://www.ietf.org/rfc/rfc3280.txt)\n+    // (generated by using of classes from \n+    // org.apache.harmony.security.x509 package)\n+    static String base64cert =\n+          \"MIIByzCCATagAwIBAgICAiswCwYJKoZIhvcNAQEFMB0xGzAZBgNVBAoT\"\n+        + \"EkNlcnRpZmljYXRlIElzc3VlcjAeFw0wNjA0MjYwNjI4MjJaFw0zMzAz\"\n+        + \"MDExNjQ0MDlaMB0xGzAZBgNVBAoTEkNlcnRpZmljYXRlIElzc3VlcjCB\"\n+        + \"nzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAkLGLsPdSPDMyP1OUOKu+\"\n+        + \"U3cvbNK5RGaQ3bXc5aDjvApx43BcaoXgt6YD/5yXz0OsIooj5yA37+bY\"\n+        + \"JGcVrvFD5FMPdDd3vjNPQOep0MzG4CdbkaZde5SigPabOMQYS4oUyLBx\"\n+        + \"W3LGG0mUODe5AGGqtqXU0GlKg4K2je6cCtookCUCAwEAAaMeMBwwGgYD\"\n+        + \"VR0RAQH/BBAwDoEMcmZjQDgyMi5OYW1lMAsGCSqGSIb3DQEBBQOBgQBZ\"\n+        + \"pVXj01dOpqnZErU+Qb50j8lJD1dIaz1eJTvJCSadj7ziV1VtnnapI07c\"\n+        + \"XEa7ONzcHQTYTG10poHfOK/a0BaULF3GlctDESilwQYbW5BdfpAlZpbH\"\n+        + \"AFLcUDh6Eq50kc+0A/anh/j3mgBNuvbIMo7hHNnZB6k/prswm2BszyLD\"\n+        + \"yw==\";\n+\n+    // Base64 encoded form of ASN.1 DER encoded X.509 CRL\n+    // (see RFC 3280 at http://www.ietf.org/rfc/rfc3280.txt)\n+    // (generated by using of classes from \n+    // org.apache.harmony.security.x509 package)\n+    static String base64crl = \n+          \"MIHXMIGXAgEBMAkGByqGSM44BAMwFTETMBEGA1UEChMKQ1JMIElzc3Vl\"\n+        + \"chcNMDYwNDI3MDYxMzQ1WhcNMDYwNDI3MDYxNTI1WjBBMD8CAgIrFw0w\"\n+        + \"NjA0MjcwNjEzNDZaMCowCgYDVR0VBAMKAQEwHAYDVR0YBBUYEzIwMDYw\"\n+        + \"NDI3MDYxMzQ1LjQ2OFqgDzANMAsGA1UdFAQEBAQEBDAJBgcqhkjOOAQD\"\n+        + \"AzAAMC0CFQCk0t0DTyu82QpajbBlxX9uXvUDSgIUSBN4g+xTEeexs/0k\"\n+        + \"9AkjBhjF0Es=\";\n+\n     // has stub implementation for abstract methods\n     private static class MyX509Certificate extends X509Certificate {\n \n@@ -222,6 +254,25 @@ public void testGetIssuerAlternativeNames()\n         assertNull(new MyX509Certificate().getIssuerAlternativeNames());\n     }\n \n+    /**\n+     * @tests java.security.cert.X509Certificate#getExtensionValue()\n+     */\n+    public void testGetExtensionValue() throws Exception {\n+        // Regression for HARMONY-419\n+        ByteArrayInputStream is = null;\n+        CertificateFactory certFactory = CertificateFactory\n+                .getInstance(\"X.509\");\n+        is = new ByteArrayInputStream(Base64.decode(base64cert.getBytes()));\n+        X509Certificate cert = (X509Certificate) certFactory\n+                .generateCertificate(is);\n+        cert.getExtensionValue(\"1.1.1.1\");\n+\n+        is = new ByteArrayInputStream(Base64.decode(base64crl.getBytes()));\n+        X509CRL crl = (X509CRL) certFactory.generateCRL(is);\n+        crl.getExtensionValue(\"1.1.1.1\");\n+    }\n+    \n+    \n     public static Test suite() {\n         return new TestSuite(X509CertificateTest.class);\n     }",
                "deletions": 0
            },
            {
                "sha": "133c58be05cddc01a7105d135e2dba7799dae6e8",
                "filename": "modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImplTest.java",
                "status": "added",
                "changes": 80,
                "additions": 80,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLEntryImplTest.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -0,0 +1,80 @@\n+/*\r\n+ *  Copyright 2006 The Apache Software Foundation or its licensors, as applicable.\r\n+ *\r\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ *  you may not use this file except in compliance with the License.\r\n+ *  You may obtain a copy of the License at\r\n+ *\r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ *  Unless required by applicable law or agreed to in writing, software\r\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ *  See the License for the specific language governing permissions and\r\n+ *  limitations under the License.\r\n+ */\r\n+\r\n+/**\r\n+ * @author Alexander Y. Kleymenov\r\n+ * @version $Revision$\r\n+ */\r\n+\r\n+package org.apache.harmony.security.provider.cert;\r\n+\r\n+import java.math.BigInteger;\r\n+import java.util.Date;\r\n+import javax.security.auth.x500.X500Principal;\r\n+\r\n+import org.apache.harmony.security.x509.Extension;\r\n+import org.apache.harmony.security.x509.Extensions;\r\n+import org.apache.harmony.security.x509.TBSCertList;\r\n+\r\n+import junit.framework.Test;\r\n+import junit.framework.TestCase;\r\n+import junit.framework.TestSuite;\r\n+\r\n+/**\r\n+ * X509CRLEntryImplTest test\r\n+ */\r\n+public class X509CRLEntryImplTest extends TestCase {\r\n+\r\n+    /**\r\n+     * getExtensionValue(String oid) method testing.\r\n+     */\r\n+    public void testGetExtensionValue() throws Exception {\r\n+        // revoked certificate issuer\r\n+        X500Principal issuer = \r\n+            new X500Principal(\"O=Certificate Issuer\");\r\n+        // revoked sertificate serial number\r\n+        BigInteger serialNumber = BigInteger.valueOf(555);\r\n+        // crl entry extensions\r\n+        Extensions crlEntryExtensions = new Extensions();\r\n+        // add reason code extension which OID is 2.5.29.21\r\n+        // see RFC 3280 http://www.ietf.org/rfc/rfc3280.txt\r\n+        crlEntryExtensions.addExtension(new Extension.ReasonCode(1));\r\n+        // crl entry\r\n+        X509CRLEntryImpl crlEntry = new X509CRLEntryImpl(\r\n+                new TBSCertList.RevokedCertificate(\r\n+                        serialNumber,\r\n+                        new Date(),\r\n+                        crlEntryExtensions\r\n+                    ),\r\n+                issuer\r\n+            );\r\n+        assertNotNull(crlEntry.getExtensionValue(\"2.5.29.21\"));\r\n+        assertNull(\"Null value should be returned in the case of \"\r\n+                + \"nonexisting extension\",\r\n+                // demand absent Invalidity Date extension\r\n+                // which OID is 2.5.29.24 (RFC 3280)\r\n+                crlEntry.getExtensionValue(\"2.5.29.24\"));\r\n+    }\r\n+\r\n+    public static Test suite() {\r\n+        return new TestSuite(X509CRLEntryImplTest.class);\r\n+    }\r\n+\r\n+    public static void main(String[] args) {\r\n+        junit.textui.TestRunner.run(suite());\r\n+    }\r\n+}\r\n+\r",
                "deletions": 0
            },
            {
                "sha": "e858a1dd301e76332a6ce780b500f723a1c700f0",
                "filename": "modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLImplTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CRLImplTest.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -30,6 +30,7 @@\n import java.security.Signature;\n import java.security.cert.CRLException;\n import java.security.cert.CertificateFactory;\n+import java.security.cert.X509CRLEntry;\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n@@ -547,9 +548,10 @@ public void testGetCriticalExtensionOIDs() {\n     /**\n      * getExtensionValue(String oid) method testing.\n      */\n-    public void testGetExtensionValue() {\n-        System.out.println(\"getExtensionValue: \"\n-                + crl.getExtensionValue(\"2.5.29.20\"));\n+    public void testGetExtensionValue() throws Exception {\n+        assertNotNull(crl.getExtensionValue(\"2.5.29.20\"));\n+        assertNull(\"Null value should be returned in the case of \"\n+                + \"nonexisting extension\", crl.getExtensionValue(\"1.1.1.1\"));\n     }\n     \n     /**",
                "deletions": 3
            },
            {
                "sha": "8c81a7e9a0f63918bb62fcc71dce616f22cf2d2a",
                "filename": "modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CertImplTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CertImplTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/95d945c3dea3412ff2a22aa4e77c20edff7471d4/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CertImplTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/java/common/org/apache/harmony/security/provider/cert/X509CertImplTest.java?ref=95d945c3dea3412ff2a22aa4e77c20edff7471d4",
                "patch": "@@ -647,9 +647,12 @@ public void testGetExtensionValue() {\n                 } else {\n                     printAsHex(20, \"\", \" \", certExtnValue);\n                 }\n-                //fail(\"The values for extension \"+id+\" differ.\");\n+                fail(\"The values for extension \"+id+\" differ.\");\n             }\n         }\n+        assertNull(\"Null value should be returned in the case of \"\n+                + \"nonexisting extension\", \n+                certificate.getExtensionValue(\"1.1.1.1\"));\n     }\n     \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-407\njava.beans.PropertyChangeListenerProxy.propertyChange(PropertyChangeEvent evt) does not throw NPE when RI does\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@397072 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db",
        "parent": "https://github.com/apache/harmony-classlib/commit/6ea88de4900c210afcf8547ad5a91899abec9801",
        "bug_id": "harmony-classlib_227",
        "file": [
            {
                "sha": "0940c6a2b04b2ea3388afdc0454ea78bd77b71a4",
                "filename": "modules/beans/make/common/build.xml",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/make/common/build.xml",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/make/common/build.xml",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/make/common/build.xml?ref=b1e7802ff4c7e7b57bdd38495dbb991f1ac484db",
                "patch": "@@ -117,7 +117,6 @@\n                     <exclude name=\"tests/api/java/beans/MethodDescriptorTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PersistenceDelegateTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyChangeEventTest.java\" />\r\n-                    <exclude name=\"tests/api/java/beans/PropertyChangeListenerProxyTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyChangeSupportTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyDescriptorTest.java\" />\r\n                     <exclude name=\"tests/api/java/beans/PropertyEditorManagerTest.java\" />\r",
                "deletions": 1
            },
            {
                "sha": "f2cc2be3b30570aa4a73f671de9b5401d92a7b56",
                "filename": "modules/beans/src/main/java/java/beans/PropertyChangeListenerProxy.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/src/main/java/java/beans/PropertyChangeListenerProxy.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/src/main/java/java/beans/PropertyChangeListenerProxy.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyChangeListenerProxy.java?ref=b1e7802ff4c7e7b57bdd38495dbb991f1ac484db",
                "patch": "@@ -54,8 +54,6 @@ public String getPropertyName() {\n     public void propertyChange(PropertyChangeEvent event) {\n         PropertyChangeListener listener =\n             (PropertyChangeListener) getListener();\n-        if (listener != null) {\n-            listener.propertyChange(event);\n-        }\n+        listener.propertyChange(event);\n     }\n }",
                "deletions": 3
            },
            {
                "sha": "78284dfa218dd39afa67c45db36881c8077a411b",
                "filename": "modules/beans/src/test/java/tests/api/java/beans/PropertyChangeListenerProxyTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeListenerProxyTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b1e7802ff4c7e7b57bdd38495dbb991f1ac484db/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeListenerProxyTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/tests/api/java/beans/PropertyChangeListenerProxyTest.java?ref=b1e7802ff4c7e7b57bdd38495dbb991f1ac484db",
                "patch": "@@ -39,10 +39,6 @@ protected void setUp() throws Exception {\n \t\tproxy = new PropertyChangeListenerProxy(name, listener);\r\n \t}\r\n \r\n-\tprotected void tearDown() throws Exception {\r\n-\t\tsuper.tearDown();\r\n-\t}\r\n-\r\n \tpublic void testPropertyChangeListenerProxy() {\r\n \t\tproxy = new PropertyChangeListenerProxy(null, listener);\r\n \t\tassertSame(listener, proxy.getListener());\r\n@@ -57,7 +53,7 @@ public void testPropertyChangeListenerProxy() {\n \t\ttry {\r\n \t\t\tproxy.propertyChange(new PropertyChangeEvent(new Object(), \"name\",\r\n \t\t\t\t\tnew Object(), new Object()));\r\n-\t\t\tfail(\"should null pointer\");\r\n+            fail(\"NullPointerException expected\");\r\n \t\t} catch (NullPointerException e) {\r\n \t\t}\r\n \r\n@@ -76,7 +72,19 @@ public void testPropertyChange() {\n \t\tassertNull(event);\r\n \t}\r\n \r\n-\tpublic static class MockPropertyChangeListener implements\r\n+    /**\r\n+     * Regression for HARMONY-407\r\n+     */\r\n+    public void testPropertyChange_PropertyChangeEvent() {\r\n+        PropertyChangeListenerProxy proxy = new PropertyChangeListenerProxy(\r\n+                \"harmony\", null);\r\n+        try {\r\n+            proxy.propertyChange(null);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException e) {}\r\n+    }         \r\n+\r\n+    public static class MockPropertyChangeListener implements\r\n \t\t\tPropertyChangeListener {\r\n \t\tpublic void propertyChange(PropertyChangeEvent newevent) {\r\n \t\t\tevent = newevent;\r",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fix for File.createNewFile() as discussed in the mail thread\n'unstable NPE in the archive module'\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@393478 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5231e671047c6cdf1df201b7a9e992cd52bfac6b",
        "parent": "https://github.com/apache/harmony-classlib/commit/def56b606015cdbea6f1c3b726c2eb723c88f5c5",
        "bug_id": "harmony-classlib_228",
        "file": [
            {
                "sha": "3d604da1463b5dbc232d32678b6a836d32f8548d",
                "filename": "modules/luni/src/main/java/java/io/File.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5231e671047c6cdf1df201b7a9e992cd52bfac6b/modules/luni/src/main/java/java/io/File.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5231e671047c6cdf1df201b7a9e992cd52bfac6b/modules/luni/src/main/java/java/io/File.java",
                "status": "modified",
                "changes": 3,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/File.java?ref=5231e671047c6cdf1df201b7a9e992cd52bfac6b",
                "patch": "@@ -1030,9 +1030,8 @@ public boolean createNewFile() throws IOException {\n \t\tcase 0:\r\n \t\t\treturn true;\r\n \t\tcase 1:\r\n-\t\t\treturn false;\r\n \t\tcase 3:\r\n-\t\t\tthrow new IOException(org.apache.harmony.luni.util.Msg.getString(\"K01c1\")); //$NON-NLS-1$\r\n+\t\t\treturn false;\r\n \t\tdefault:\r\n \t\t\tthrow new IOException(org.apache.harmony.luni.util.Msg.getString(\"K01c2\", path)); //$NON-NLS-1$\r\n \t\t}\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-219 (new javax.security.auth.SubjectDomainCombiner(null) should throw NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@391912 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766",
        "parent": "https://github.com/apache/harmony-classlib/commit/a4327dd8cc352446df00cea419f5a66f7c29d5c7",
        "bug_id": "harmony-classlib_229",
        "file": [
            {
                "sha": "53350185cabbe2f0da89729d328c8714e0932119",
                "filename": "modules/security/src/main/java/common/javax/security/auth/SubjectDomainCombiner.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766/modules/security/src/main/java/common/javax/security/auth/SubjectDomainCombiner.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766/modules/security/src/main/java/common/javax/security/auth/SubjectDomainCombiner.java",
                "status": "modified",
                "changes": 14,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/javax/security/auth/SubjectDomainCombiner.java?ref=847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766",
                "patch": "@@ -44,6 +44,8 @@\n      * @com.intel.drl.spec_ref\n      */\n     public SubjectDomainCombiner(Subject subject) {\n+        if (subject == null)\n+            throw new NullPointerException();\n         this.subject = subject;\n     }\n \n@@ -84,15 +86,9 @@ public Subject getSubject() {\n         int cur = 0;\n         if (currentDomains != null) {\n \n-            Principal[] p;\n-            if (subject == null) {\n-                p = new Principal[0];\n-            } else {\n-                Set s = subject.getPrincipals();\n-\n-                p = new Principal[s.size()];\n-                s.toArray(p);\n-            }\n+            Set s = subject.getPrincipals();\n+            Principal[] p = new Principal[s.size()];\n+            s.toArray(p);\n \n             for (cur = 0; cur < currentDomains.length; cur++) {\n                 ProtectionDomain newPD;",
                "deletions": 9
            },
            {
                "sha": "27e3a4ca33aa54c10d4f331a62f401eb371391a6",
                "filename": "modules/security/src/test/java/common/javax/security/auth/SubjectDomainCombinerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766/modules/security/src/test/java/common/javax/security/auth/SubjectDomainCombinerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766/modules/security/src/test/java/common/javax/security/auth/SubjectDomainCombinerTest.java",
                "status": "modified",
                "changes": 46,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/java/common/javax/security/auth/SubjectDomainCombinerTest.java?ref=847702d2f5d9ac3c7cbc5d3b17eab5cd7e740766",
                "patch": "@@ -46,9 +46,10 @@ public static void main(String[] args) {\n     }\n \n     /**\n-     * Testing getSubject() & constructor\n+     * @tests javax.security.auth.SubjectDomainCombiner#SubjectDomainCombiner(\n+     *        javax.security.auth.Subject)\n      */\n-    public final void testGetSubject() {\n+    public final void test_ConstructorLjavax_security_auth_Subject() {\n \n         Subject subject = new Subject();\n \n@@ -57,14 +58,11 @@ public final void testGetSubject() {\n         assertTrue(\"Subject is not null\", subject == combiner.getSubject());\n \n         try {\n-            combiner = new SubjectDomainCombiner(null);\n+            // Regression for HARMONY-219\n+            new SubjectDomainCombiner(null);\n+            fail(\"Constructor should throw NullPointerException\");\n         } catch (NullPointerException e) {\n-            if(!testing){\n-                throw e;\n-            }\n-            return;\n         }\n-        assertNull(\"Subject is null\", combiner.getSubject());\n     }\n \n     /**\n@@ -122,38 +120,6 @@ public String getName() {\n         assertTrue(\"Inherited domain\", domain == pd[0]);\n     }\n \n-    public final void testCombine_NullSubject() throws Exception {\n-\n-        if(testing){\n-            return;\n-        }\n-        \n-        SubjectDomainCombiner combiner = new SubjectDomainCombiner(null);\n-\n-        // check assigned principals\n-        URL url = new URL(\"file://foo.txt\");\n-\n-        CodeSource source = new CodeSource(url, (Certificate[]) null);\n-        PermissionCollection permissions = new Permissions();\n-        ClassLoader classLoader = new URLClassLoader(new URL[] { url });\n-\n-        Principal p = new Principal() {\n-            public String getName() {\n-                return \"p\";\n-            }\n-        };\n-        Principal[] principals = new Principal[] { p };\n-\n-        ProtectionDomain domain = new ProtectionDomain(source, permissions,\n-                classLoader, principals);\n-\n-        ProtectionDomain[] pd = combiner.combine(\n-                new ProtectionDomain[] { domain }, null);\n-        \n-        assertTrue(\"Size\", pd[0].getPrincipals().length==0);\n-\n-    }\n-\n     public final void testSecurityException() {\n \n         denyPermission(new AuthPermission(\"getSubjectFromDomainCombiner\"));",
                "deletions": 40
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-94 (java.util.Collections.binarySearch(List, Object, Comparator c) throws NPE when c is null)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@379778 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/ed11d4a0a70696bbf1074173cd093cd9d9f94e31",
        "parent": "https://github.com/apache/harmony-classlib/commit/4bdad0e72a1bd73c56b3bbe8053ff5bc8b54a5b4",
        "bug_id": "harmony-classlib_230",
        "file": [
            {
                "sha": "beb1c104f576c08da854563bfb5a9333c7cd0864",
                "filename": "modules/luni/src/main/java/java/util/Collections.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ed11d4a0a70696bbf1074173cd093cd9d9f94e31/modules/luni/src/main/java/java/util/Collections.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ed11d4a0a70696bbf1074173cd093cd9d9f94e31/modules/luni/src/main/java/java/util/Collections.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Collections.java?ref=ed11d4a0a70696bbf1074173cd093cd9d9f94e31",
                "patch": "@@ -1339,7 +1339,8 @@ else if (result == 0)\n \t * @param object\r\n \t *            the element to find\r\n \t * @param comparator\r\n-\t *            the Comparator\r\n+\t *            the Comparator.  If the comparator is <code>null</code>\r\n+\t *            then the search uses the objects' natural ordering. \r\n \t * @return the non-negative index of the element, or a negative index which\r\n \t *         is the -index - 1 where the element would be inserted\r\n \t * \r\n@@ -1349,6 +1350,9 @@ else if (result == 0)\n \t */\r\n \tpublic static int binarySearch(List list, Object object,\r\n \t\t\tComparator comparator) {\r\n+\t\tif (comparator == null) {\r\n+\t\t\treturn Collections.binarySearch(list, object);\r\n+\t\t} \r\n \t\tif (!(list instanceof RandomAccess)) {\r\n \t\t\tListIterator it = list.listIterator();\r\n \t\t\twhile (it.hasNext()) {\r",
                "deletions": 1
            },
            {
                "sha": "8bda2aa3c35aeedf05294920e4a626e9fe4d4e9a",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/ed11d4a0a70696bbf1074173cd093cd9d9f94e31/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/ed11d4a0a70696bbf1074173cd093cd9d9f94e31/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java?ref=ed11d4a0a70696bbf1074173cd093cd9d9f94e31",
                "patch": "@@ -18,12 +18,26 @@\n \r\n import java.util.ArrayList;\r\n import java.util.Collections;\r\n+import java.util.LinkedList;\r\n import java.util.List;\r\n \r\n import junit.framework.TestCase;\r\n \r\n public class CollectionsTest extends TestCase {\r\n \r\n+\t/**\r\n+\t * @tests java.util.Collections#binarySearch(java.util.List,\r\n+\t *        java.lang.Object, java.util.Comparator)\r\n+\t */\r\n+\tpublic void test_binarySearchLjava_util_ListLjava_lang_ObjectLjava_util_Comparator() {\r\n+\t\t// Regression for HARMONY-94\r\n+\t\tLinkedList lst = new LinkedList();\r\n+\t\tlst.add(new Integer(30));\r\n+\t\tCollections.sort(lst, null);\r\n+\t\tint index = Collections.binarySearch(lst, new Integer(2), null);\r\n+\t\tassertEquals(-1, index);\r\n+\t} \r\n+\t   \r\n \t/**\r\n \t * @tests java.util.Collections#rotate(java.util.List, int)\r\n \t */\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-54 (java.io.BufferedReader.read(null,int off,int len) does not throw NPE when len==0)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@375584 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e2837315c4462354d314463ba58169fc87b0e79b",
        "parent": "https://github.com/apache/harmony-classlib/commit/adb05f58d002c40a04b25d5f69a41d5e7c16b6bc",
        "bug_id": "harmony-classlib_231",
        "file": [
            {
                "sha": "262c3057f799a7f05070f87903081ebb429c43fa",
                "filename": "modules/luni/src/main/java/java/io/BufferedReader.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/main/java/java/io/BufferedReader.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/main/java/java/io/BufferedReader.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/BufferedReader.java?ref=e2837315c4462354d314463ba58169fc87b0e79b",
                "patch": "@@ -229,11 +229,13 @@ public int read() throws IOException {\n \tpublic int read(char[] buffer, int offset, int length) throws IOException {\r\n \t\tsynchronized (lock) {\r\n \t\t\tif (isOpen()) {\r\n+\t\t\t\t// check for null\r\n+\t\t\t\tint bufLen = buffer.length;\r\n \t\t\t\tif (length == 0)\r\n \t\t\t\t\treturn 0;\r\n \t\t\t\t// avoid int overflow\r\n-\t\t\t\tif (0 <= offset && offset <= buffer.length && 0 < length\r\n-\t\t\t\t\t\t&& length <= buffer.length - offset) {\r\n+\t\t\t\tif (0 <= offset && offset <= bufLen && 0 < length\r\n+\t\t\t\t\t\t&& length <= bufLen - offset) {\r\n \t\t\t\t\tint required;\r\n \t\t\t\t\tif (pos < count) {\r\n \t\t\t\t\t\t/* There are bytes available in the buffer. */\r",
                "deletions": 2
            },
            {
                "sha": "e740f6c2bb91e88fd6c52c0942aa676343ae93c2",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/io/AllTests.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/test/java/org/apache/harmony/tests/java/io/AllTests.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/test/java/org/apache/harmony/tests/java/io/AllTests.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/io/AllTests.java?ref=e2837315c4462354d314463ba58169fc87b0e79b",
                "patch": "@@ -29,6 +29,7 @@ public static Test suite() {\n \t\t\t\t\"Test for org.apache.harmony.tests.java.io\");\r\n \t\t//$JUnit-BEGIN$\r\n \t\tsuite.addTestSuite(FileTest.class);\r\n+\t\tsuite.addTestSuite(BufferedReaderTest.class);\r\n \t\tsuite.addTestSuite(PushBackInputStreamTest.class);\r\n \t\t//$JUnit-END$\r\n \t\treturn suite;\r",
                "deletions": 0
            },
            {
                "sha": "be844ed0a923a442225a4e80e4709545f75f267b",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/io/BufferedReaderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/test/java/org/apache/harmony/tests/java/io/BufferedReaderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e2837315c4462354d314463ba58169fc87b0e79b/modules/luni/src/test/java/org/apache/harmony/tests/java/io/BufferedReaderTest.java",
                "status": "added",
                "changes": 60,
                "additions": 60,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/io/BufferedReaderTest.java?ref=e2837315c4462354d314463ba58169fc87b0e79b",
                "patch": "@@ -0,0 +1,60 @@\n+/* Copyright 2006 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.harmony.tests.java.io;\r\n+\r\n+import java.io.BufferedReader;\r\n+import java.io.CharArrayReader;\r\n+import java.io.IOException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class BufferedReaderTest extends TestCase {\r\n+\r\n+\t/**\r\n+\t * @tests java.io.BufferedReader#read(char[], int, int)\r\n+\t */\r\n+\tpublic void test_read$CII() throws IOException {\r\n+\t\t// Regression for HARMONY-54\r\n+\t\tchar[] ch = {};\r\n+\t\tBufferedReader reader = new BufferedReader(new CharArrayReader(ch));\r\n+\t\ttry {\r\n+\t\t\t// Check exception thrown when the reader is open.\r\n+\t\t\treader.read(null, 1, 0);\r\n+\t\t\tfail(\"Assert 0: NullPointerException expected\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// Expected\r\n+\t\t}\r\n+\r\n+\t\t// Now check IOException is thrown in preference to\r\n+\t\t// NullPointerexception when the reader is closed.\r\n+\t\treader.close();\r\n+\t\ttry {\r\n+\t\t\treader.read(null, 1, 0);\r\n+\t\t\tfail(\"Assert 1: IOException expected\");\r\n+\t\t} catch (IOException e) {\r\n+\t\t\t// Expected\r\n+\t\t}\r\n+\r\n+\t\ttry {\r\n+\t\t\t// And check that the IOException is thrown before\r\n+\t\t\t// ArrayIndexOutOfBoundException\r\n+\t\t\treader.read(ch, 0, 42);\r\n+\t\t\tfail(\"Assert 2: IOException expected\");\r\n+\t\t} catch (IOException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for HARMONY-61 (java.net.InetAddress.getByAddress(null) throws NPE instead of UnknownHostException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@375338 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf",
        "parent": "https://github.com/apache/harmony-classlib/commit/84198b83785b45bf8726a26134fd2b8dd19f3c5b",
        "bug_id": "harmony-classlib_232",
        "file": [
            {
                "sha": "d649418561fc6eca6c2fe7e472d6b4a0d8633a54",
                "filename": "modules/luni/src/main/java/java/net/InetAddress.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/main/java/java/net/InetAddress.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/main/java/java/net/InetAddress.java",
                "status": "modified",
                "changes": 9,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/InetAddress.java?ref=15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf",
                "patch": "@@ -743,15 +743,15 @@ public static InetAddress getByAddress(byte[] ipAddress)\n \tstatic InetAddress getByAddress(byte[] ipAddress, int scope_id)\r\n \t\t\tthrows UnknownHostException {\r\n \t\tbyte[] copy_address;\r\n-\t\tif (ipAddress.length == 4) {\r\n+\t\tif (ipAddress != null && ipAddress.length == 4) {\r\n \t\t\tcopy_address = new byte[4];\r\n \t\t\tfor (int i = 0; i < 4; i++) {\r\n \t\t\t\tcopy_address[i] = ipAddress[i];\r\n \t\t\t}\r\n \t\t\treturn new Inet4Address(ipAddress);\r\n \t\t}\r\n \r\n-\t\tif (ipAddress.length == 16) {\r\n+\t\tif (ipAddress != null && ipAddress.length == 16) {\r\n \t\t\t// First check to see if the address is an IPv6-mapped\r\n \t\t\t// IPv4 address. If it is, then we can make it a IPv4\r\n \t\t\t// address, otherwise, we'll create an IPv6 address.\r\n@@ -837,15 +837,15 @@ public static InetAddress getByAddress(String hostName, byte[] ipAddress)\n \tstatic InetAddress getByAddress(String hostName, byte[] ipAddress,\r\n \t\t\tint scope_id) throws UnknownHostException {\r\n \t\tbyte[] copy_address;\r\n-\t\tif (ipAddress.length == 4) {\r\n+\t\tif (ipAddress != null && ipAddress.length == 4) {\r\n \t\t\tcopy_address = new byte[4];\r\n \t\t\tfor (int i = 0; i < 4; i++) {\r\n \t\t\t\tcopy_address[i] = ipAddress[i];\r\n \t\t\t}\r\n \t\t\treturn new Inet4Address(ipAddress, hostName);\r\n \t\t}\r\n \r\n-\t\tif (ipAddress.length == 16) {\r\n+\t\tif (ipAddress != null && ipAddress.length == 16) {\r\n \t\t\t// First check to see if the address is an IPv6-mapped\r\n \t\t\t// IPv4 address. If it is, then we can make it a IPv4\r\n \t\t\t// address, otherwise, we'll create an IPv6 address.\r\n@@ -864,6 +864,7 @@ static InetAddress getByAddress(String hostName, byte[] ipAddress,\n \r\n \t\t\treturn new Inet6Address(ipAddress, hostName, scope_id);\r\n \t\t}\r\n+\r\n \t\tthrow new UnknownHostException(Msg.getString(\"K0332\", hostName));\r\n \t}\r\n \r",
                "deletions": 4
            },
            {
                "sha": "f77eaf6ce43e7c9425a9dc4c18981feace19ec1f",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/net/AllTests.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/test/java/org/apache/harmony/tests/java/net/AllTests.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/test/java/org/apache/harmony/tests/java/net/AllTests.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/net/AllTests.java?ref=15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf",
                "patch": "@@ -28,8 +28,9 @@ public static Test suite() {\n \t\tTestSuite suite = new TestSuite(\r\n \t\t\t\t\"Test for org.apache.harmony.tests.java.net\");\r\n \t\t//$JUnit-BEGIN$\r\n-\t\tsuite.addTestSuite(URITest.class);\r\n \t\tsuite.addTestSuite(URLEncoderTest.class);\r\n+\t\tsuite.addTestSuite(InetAddressTest.class);\r\n+\t\tsuite.addTestSuite(URITest.class);\r\n \t\t//$JUnit-END$\r\n \t\treturn suite;\r\n \t}\r",
                "deletions": 1
            },
            {
                "sha": "42c26664116d32cb8bcb2356f1514bf3b1eb68d1",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/net/InetAddressTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/test/java/org/apache/harmony/tests/java/net/InetAddressTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf/modules/luni/src/test/java/org/apache/harmony/tests/java/net/InetAddressTest.java",
                "status": "added",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/net/InetAddressTest.java?ref=15386408c4b0f73caa3ffd3d3cdafe7ca180c1cf",
                "patch": "@@ -0,0 +1,37 @@\n+/* Copyright 2006 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+package org.apache.harmony.tests.java.net;\r\n+\r\n+import java.net.InetAddress;\r\n+import java.net.UnknownHostException;\r\n+\r\n+import junit.framework.TestCase;\r\n+\r\n+public class InetAddressTest extends TestCase {\r\n+\r\n+\t/**\r\n+\t * @tests java.net.InetAddress#getByAddress(byte[])\r\n+\t */\r\n+\tpublic void test_getByAddress() {\r\n+\t\t// Regression for HARMONY-61\r\n+\t\ttry {\r\n+\t\t\tInetAddress.getByAddress(null);\r\n+\t\t\tfail(\"Assert 0: UnknownHostException must be thrown\");\r\n+\t\t} catch (UnknownHostException e) {\r\n+\t\t\t// Expected\r\n+\t\t}\r\n+\t}\r\n+}\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix bug revealed after HARMONY-3384 evaluation:\n([classlib][security]java.security.cert.X509Certificate.toString() throws NullPointerException)\n\nSubjectPublicKeyInfo.getPublicKey() returned null and printed an exception stack trace if key's algorithm is unknown. Now in this case key object (that contains parsed data:oid,key bytes) is returned.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@520274 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/96bbc833632358cdd27e68bf06b14cddbe1022f0",
        "parent": "https://github.com/apache/harmony-classlib/commit/929c8d8eb4c80b82837b6f5776cbcb31eb992e7f",
        "bug_id": "harmony-classlib_233",
        "file": [
            {
                "sha": "852b3ceb4804f9140bd693b3070a31c28279951e",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/x509/SubjectPublicKeyInfo.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/main/java/common/org/apache/harmony/security/x509/SubjectPublicKeyInfo.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/main/java/common/org/apache/harmony/security/x509/SubjectPublicKeyInfo.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/x509/SubjectPublicKeyInfo.java?ref=96bbc833632358cdd27e68bf06b14cddbe1022f0",
                "patch": "@@ -23,7 +23,9 @@\n package org.apache.harmony.security.x509;\n \n import java.security.KeyFactory;\n+import java.security.NoSuchAlgorithmException;\n import java.security.PublicKey;\n+import java.security.spec.InvalidKeySpecException;\n import java.security.spec.X509EncodedKeySpec;\n \n import org.apache.harmony.security.asn1.ASN1BitString;\n@@ -140,8 +142,8 @@ public int getUnusedBits() {\n      */\n     public PublicKey getPublicKey() {\n         if (publicKey == null) {\n+            String alg_oid = algorithmID.getAlgorithm();\n             try {\n-                String alg_oid = algorithmID.getAlgorithm();\n                 String alg = \n                     AlgNameMapper.map2AlgName(alg_oid);\n                 \n@@ -150,8 +152,12 @@ public PublicKey getPublicKey() {\n                 }\n                 publicKey = KeyFactory.getInstance(alg)\n                     .generatePublic(new X509EncodedKeySpec(getEncoded()));\n-            } catch (Exception e) {\n-                e.printStackTrace();\n+            } catch (InvalidKeySpecException e) {\n+            } catch (NoSuchAlgorithmException e) {\n+            }\n+            if (publicKey == null) {\n+                publicKey = new X509PublicKey(alg_oid, getEncoded(),\n+                        subjectPublicKey);\n             }\n         }\n         return publicKey;",
                "deletions": 3
            },
            {
                "sha": "cae6b97e8522ea69720e10a4885d07f01dc02d9f",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/x509/X509PublicKey.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/main/java/common/org/apache/harmony/security/x509/X509PublicKey.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/main/java/common/org/apache/harmony/security/x509/X509PublicKey.java",
                "status": "added",
                "changes": 58,
                "additions": 58,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/x509/X509PublicKey.java?ref=96bbc833632358cdd27e68bf06b14cddbe1022f0",
                "patch": "@@ -0,0 +1,58 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.harmony.security.x509;\n+\n+import java.security.PublicKey;\n+\n+public class X509PublicKey implements PublicKey {\n+\n+    private final String algorithm;\n+\n+    private final byte[] encoded;\n+\n+    private final byte[] keyBytes;\n+\n+    public X509PublicKey(String algorithm, byte[] encoded, byte[] keyBytes) {\n+        this.algorithm = algorithm;\n+        this.encoded = encoded;\n+        this.keyBytes = keyBytes;\n+    }\n+\n+    public String getAlgorithm() {\n+        return algorithm;\n+    }\n+\n+    public String getFormat() {\n+        return \"X.509\"; // $NON-NLS-1$\n+    }\n+\n+    public byte[] getEncoded() {\n+        return encoded;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        StringBuilder buf = new StringBuilder(\"algorithm = \"); // $NON-NLS-1$\n+        buf.append(algorithm);\n+        buf.append(\", params unparsed, unparsed keybits = \\n\"); // $NON-NLS-1$\n+        // TODO: implement compatible toString method() \n+        // buf.append(Arrays.toString(keyBytes));\n+\n+        return buf.toString();\n+    }\n+}",
                "deletions": 0
            },
            {
                "sha": "dcb4c6aa3ad21b42acd398ef6d0e7eec30d81e5e",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/96bbc833632358cdd27e68bf06b14cddbe1022f0/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java",
                "status": "modified",
                "changes": 27,
                "additions": 27,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/X509CertSelectorTest.java?ref=96bbc833632358cdd27e68bf06b14cddbe1022f0",
                "patch": "@@ -18,7 +18,9 @@\n package org.apache.harmony.security.tests.java.security.cert;\n \n import java.io.IOException;\n+import java.security.PublicKey;\n import java.security.cert.X509CertSelector;\n+import java.util.Arrays;\n \n import junit.framework.TestCase;\n \n@@ -88,4 +90,29 @@ public void test_addPathToNameLintLjava_lang_String() {\n             }\n         }\n     }\n+    \n+    /**\n+     * @tests java.security.cert.X509CertSelector#setSubjectPublicKey(byte[])\n+     */\n+    public void test_setSubjectPublicKeyLB$() throws Exception {\n+\n+        //SubjectPublicKeyInfo  ::=  SEQUENCE  {\n+        //    algorithm            AlgorithmIdentifier,\n+        //    subjectPublicKey     BIT STRING  }\n+        byte[] enc = { 0x30, 0x0E, // SEQUENCE\n+                0x30, 0x07, // SEQUENCE\n+                0x06, 0x02, 0x03, 0x05,//OID\n+                0x01, 0x01, 0x07, //ANY\n+                0x03, 0x03, 0x01, 0x01, 0x06, // subjectPublicKey\n+        };\n+\n+        X509CertSelector selector = new X509CertSelector();\n+\n+        selector.setSubjectPublicKey(enc);\n+        PublicKey key = selector.getSubjectPublicKey();\n+        assertEquals(\"0.3.5\", key.getAlgorithm());\n+        assertEquals(\"X.509\", key.getFormat());\n+        assertTrue(Arrays.equals(enc, key.getEncoded()));\n+        assertNotNull(key.toString());\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix for SealedObject from \"[#HARMONY-6347] crypto bugfixes\" modified to\nthrow NPE rather than InvalidKeyException (to match RI behaviour) and\nadded regression test.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@822638 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a",
        "parent": "https://github.com/apache/harmony-classlib/commit/da83cc61aecf3a8856d05e7a4c1b1bfb66ec1a34",
        "bug_id": "harmony-classlib_234",
        "file": [
            {
                "sha": "a865c72c68a07bc1d373d7c8cd1e8ccc0401a6c9",
                "filename": "modules/crypto/src/main/java/javax/crypto/SealedObject.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a/modules/crypto/src/main/java/javax/crypto/SealedObject.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a/modules/crypto/src/main/java/javax/crypto/SealedObject.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/main/java/javax/crypto/SealedObject.java?ref=9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a",
                "patch": "@@ -155,6 +155,10 @@ public final String getAlgorithm() {\n     public final Object getObject(Key key)\n                 throws IOException, ClassNotFoundException,\n                        NoSuchAlgorithmException, InvalidKeyException {\n+        if (key == null) {\n+            throw new NullPointerException(\n+                    Messages.getString(\"crypto.05\"));\n+        }\n         try {\n             Cipher cipher = Cipher.getInstance(sealAlg);\n             if ((paramsAlg != null) && (paramsAlg.length() != 0)) {",
                "deletions": 0
            },
            {
                "sha": "eb40a236aa54e3427bdcb8db8934342e7326d3ea",
                "filename": "modules/crypto/src/test/api/java.injected/javax/crypto/SealedObjectTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a/modules/crypto/src/test/api/java.injected/javax/crypto/SealedObjectTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a/modules/crypto/src/test/api/java.injected/javax/crypto/SealedObjectTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/test/api/java.injected/javax/crypto/SealedObjectTest.java?ref=9dee880d3a67a039e9a3ae4ebbe8ee7c8b53a66a",
                "patch": "@@ -27,6 +27,7 @@\n import java.io.ObjectInputStream;\n import java.io.ObjectOutputStream;\n import java.security.Key;\n+import java.security.InvalidKeyException;\n import java.util.Arrays;\n import javax.crypto.Cipher;\n import javax.crypto.KeyGenerator;\n@@ -221,5 +222,15 @@ public void testGetObject3() throws Exception {\n                 + \"original object.\", secret, so.getObject(key, provider));\n     }\n \n+    // Regression test for HARMONY-6347\n+    public void testGetObject4() throws Exception {\n+        try {\n+            new SealedObject(\"secret string\",\n+                             new NullCipher()).getObject((Key)null);\n+            fail(\"NullPointerException should be thrown when key is null\");\n+        } catch (NullPointerException e) {\n+        }\n+    }\n+\n }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Add generated Timer Thread name, Apply modified version of HARMONY-6277 - Timer's finalizer throws an NPE if the Timer wasn't constructed properly\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@796142 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401",
        "parent": "https://github.com/apache/harmony-classlib/commit/2792541150b300407d14c5a8ffccd81603c26a4a",
        "bug_id": "harmony-classlib_235",
        "file": [
            {
                "sha": "f8fc06e8b2cd1c100a541cbf30f6a94ae777f2f0",
                "filename": "modules/luni/.classpath",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/.classpath",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/.classpath",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/.classpath?ref=6d6427df47cb6dfcd18a8b537f24dcc4e76c0401",
                "patch": "@@ -14,5 +14,6 @@\n \t\t</accessrules>\n \t</classpathentry>\n \t<classpathentry kind=\"con\" path=\"org.eclipse.jdt.junit.JUNIT_CONTAINER/4\"/>\n+\t<classpathentry kind=\"lib\" path=\"/home/nathan/harmony/working_classlib/deploy/jdk/jre/lib/boot/luni-kernel-stubs.jar\"/>\n \t<classpathentry kind=\"output\" path=\"bin/main\"/>\n </classpath>",
                "deletions": 0
            },
            {
                "sha": "609003199b58172e12f044db489f856274c0c488",
                "filename": "modules/luni/src/main/java/java/util/Timer.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/src/main/java/java/util/Timer.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/src/main/java/java/util/Timer.java",
                "status": "modified",
                "changes": 96,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Timer.java?ref=6d6427df47cb6dfcd18a8b537f24dcc4e76c0401",
                "patch": "@@ -187,14 +187,10 @@ private int getTask(TimerTask task) {\n \n         /**\n          * Starts a new timer.\n-         *\n-         * @param isDaemon\n+         * \n+         * @param name thread's name\n+         * @param isDaemon daemon thread or not\n          */\n-        TimerImpl(boolean isDaemon) {\n-            this.setDaemon(isDaemon);\n-            this.start();\n-        }\n-\n         TimerImpl(String name, boolean isDaemon) {\n             this.setName(name);\n             this.setDaemon(isDaemon);\n@@ -324,60 +320,78 @@ public int purge() {\n         }\n \n     }\n+    \n+\tprivate static final class FinalizerHelper {\n+\t\tprivate final TimerImpl impl;\n+\t\t\n+\t\tFinalizerHelper(TimerImpl impl) {\n+\t\t\tsuper();\n+\t\t\tthis.impl = impl;\n+\t\t}\n+\t\t\n+\t\t@Override\n+\t\tprotected void finalize() {\n+\t\t\tsynchronized (impl) {\n+\t\t\t\timpl.finished = true;\n+\t\t\t\timpl.notify();\n+\t\t\t}\n+\t\t}\n+\t}\n+\t\n+\tprivate static long timerId;\n+\t\n+\tprivate synchronized static long nextId() {\n+\t\treturn timerId++;\n+\t}\n \n     /* This object will be used in synchronization purposes */\n-    private TimerImpl impl;\n+    private final TimerImpl impl;\n \n     // Used to finalize thread\n     @SuppressWarnings(\"unused\")\n-    private Object finalizer = new Object() { // $NON-LOCK-1$\n-        @Override\n-        protected void finalize() {\n-            synchronized (impl) {\n-                impl.finished = true;\n-                impl.notify();\n-            }\n-        }\n-    };\n+    private final FinalizerHelper finalizer;\n \n     /**\n-     * Creates a new {@code Timer} which may be specified to be run as a daemon thread.\n+     * Creates a new named {@code Timer} which may be specified to be run as a\n+     * daemon thread.\n      *\n-     * @param isDaemon\n-     *            {@code true} if the {@code Timer}'s thread should be a daemon thread.\n+     * @param name the name of the {@code Timer}.\n+     * @param isDaemon true if {@code Timer}'s thread should be a daemon thread.\n+     * @throws NullPointerException is {@code name} is {@code null}\n      */\n-    public Timer(boolean isDaemon) {\n-        impl = new TimerImpl(isDaemon);\n+    public Timer(String name, boolean isDaemon) {\n+    \tsuper();\n+    \tif (name == null){\n+    \t\tthrow new NullPointerException(\"name is null\");\n+    \t}\n+        this.impl = new TimerImpl(name, isDaemon);\n+        this.finalizer = new FinalizerHelper(impl);\n     }\n-\n+    \n     /**\n-     * Creates a new non-daemon {@code Timer}.\n+     * Creates a new named {@code Timer} which does not run as a daemon thread.\n+     *\n+     * @param name the name of the Timer.\n+     * @throws NullPointerException is {@code name} is {@code null}\n      */\n-    public Timer() {\n-        impl = new TimerImpl(false);\n+    public Timer(String name) {\n+        this(name, false);\n     }\n-\n+    \n     /**\n-     * Creates a new named {@code Timer} which may be specified to be run as a\n-     * daemon thread.\n+     * Creates a new {@code Timer} which may be specified to be run as a daemon thread.\n      *\n-     * @param name\n-     *            the name of the {@code Timer}.\n-     * @param isDaemon\n-     *            true if {@code Timer}'s thread should be a daemon thread.\n+     * @param isDaemon {@code true} if the {@code Timer}'s thread should be a daemon thread.\n      */\n-    public Timer(String name, boolean isDaemon) {\n-        impl = new TimerImpl(name, isDaemon);\n+    public Timer(boolean isDaemon) {\n+        this(\"Timer-\" + Timer.nextId(), isDaemon);\n     }\n \n     /**\n-     * Creates a new named {@code Timer} which does not run as a daemon thread.\n-     *\n-     * @param name\n-     *            the name of the Timer.\n+     * Creates a new non-daemon {@code Timer}.\n      */\n-    public Timer(String name) {\n-        impl = new TimerImpl(name, false);\n+    public Timer() {\n+        this(false);\n     }\n \n     /**",
                "deletions": 41
            },
            {
                "sha": "8a5af5c7224bfa85bf97602a3aed942e8993a51c",
                "filename": "modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/TimerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/TimerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6d6427df47cb6dfcd18a8b537f24dcc4e76c0401/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/TimerTest.java",
                "status": "modified",
                "changes": 16,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/api/common/org/apache/harmony/luni/tests/java/util/TimerTest.java?ref=6d6427df47cb6dfcd18a8b537f24dcc4e76c0401",
                "patch": "@@ -189,6 +189,22 @@ public void test_ConstructorS() {\n         }\n     }\n \n+    public void testConstructorThrowsException() {\n+        try {\n+            new Timer(null, true);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            //expected\n+        }\n+\n+        try {\n+            new Timer(null, false);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            //expected\n+        }\n+    }\n+\n     /**\n      * @tests java.util.Timer#cancel()\n      */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied a post-fix for HARMONY-2707 [classlib][swing] javax.swing.plaf.basic.BasicArrowButton.paintTriangle() throws unexpected NPE when incorrect 'direction' parameter is passed in: removed an assertion which was incompatible with RI.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@674054 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c0e4002cefe79bd766404889b5930f0389e56fe0",
        "parent": "https://github.com/apache/harmony-classlib/commit/41ffe1a4127a6c5abacf58e9d1180a80920221a0",
        "bug_id": "harmony-classlib_236",
        "file": [
            {
                "sha": "7b462214fe2d577cf7a0bf8590ee4ea1b2e7bf54",
                "filename": "modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c0e4002cefe79bd766404889b5930f0389e56fe0/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c0e4002cefe79bd766404889b5930f0389e56fe0/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java?ref=c0e4002cefe79bd766404889b5930f0389e56fe0",
                "patch": "@@ -1103,7 +1103,7 @@ private static void paintArrow(final Graphics g, final int x, final int y,\n             py = heights;\n             break;\n         default:\n-            assert false : \"incorrect direction\";\n+            // do nothing to be compatible with RI\n             return;\n         }\n ",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch the fix and unit test update for HARMONY-5223 \n\"[classlib][swing][EIOffice] JComboBox.setEditor throws NPE if \neditor.getEditorComponent returns null\"\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@599489 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/18a3b0b7e1cbdfe0a5a209e8b01674030936266f",
        "parent": "https://github.com/apache/harmony-classlib/commit/84463111fb931987133eb9f39824d7e5d4714cd8",
        "bug_id": "harmony-classlib_237",
        "file": [
            {
                "sha": "70e8bb7d6bf253ddf362b2909a721c547566afa1",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/18a3b0b7e1cbdfe0a5a209e8b01674030936266f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/18a3b0b7e1cbdfe0a5a209e8b01674030936266f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=18a3b0b7e1cbdfe0a5a209e8b01674030936266f",
                "patch": "@@ -408,8 +408,10 @@ public void uninstallUI(final JComponent c) {\n \n     public void addEditor() {\n         editor = comboBox.getEditor().getEditorComponent();\n-        configureEditor();\n-        comboBox.add(editor);\n+        if (editor != null) {\n+            configureEditor();\n+            comboBox.add(editor);\n+        }\n     }\n \n     public void removeEditor() {",
                "deletions": 2
            },
            {
                "sha": "6663aac6f48b52fce83489f7f848b9a0127a5dbf",
                "filename": "modules/swing/src/test/api/java.injected/javax/swing/JComboBoxTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/18a3b0b7e1cbdfe0a5a209e8b01674030936266f/modules/swing/src/test/api/java.injected/javax/swing/JComboBoxTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/18a3b0b7e1cbdfe0a5a209e8b01674030936266f/modules/swing/src/test/api/java.injected/javax/swing/JComboBoxTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java.injected/javax/swing/JComboBoxTest.java?ref=18a3b0b7e1cbdfe0a5a209e8b01674030936266f",
                "patch": "@@ -20,6 +20,7 @@\n  */\n package javax.swing;\n \n+import java.awt.Component;\n import java.awt.EventQueue;\n import java.awt.event.ActionEvent;\n import java.awt.event.ActionListener;\n@@ -793,6 +794,23 @@ public void actionPerformed(final ActionEvent e) {\n     public void testInstallAncestorListener() throws Exception {\n         assertEquals(1, comboBox.getAncestorListeners().length);\n     }\n+    \n+    public void testHarmony5223() {\n+        ComboBoxEditor editor = new NullComboBoxEditor();\n+        comboBox.setEditor(editor);\n+        assertEquals(editor, comboBox.getEditor());\n+    }\n+    \n+    public class NullComboBoxEditor extends BasicComboBoxEditor {\n+        public NullComboBoxEditor() {\n+            super();\n+        }\n+\n+        public Component getEditorComponent() {\n+            return null;\n+        }\n+    }\n+\n \n     private class ActionController implements ActionListener {\n         private ActionEvent event;",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix 2 bugs in PropertyEditorSupport: 1. setSource(null) should not throw NPE(the original tests fail on RI, also updated accordingly), 2. firePropertyChange should fire an event with the source only\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@554857 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b8d2933f30277f1107198a67c4f6d3b09c9ad049",
        "parent": "https://github.com/apache/harmony-classlib/commit/5393daa952b2050663d7efdb860900fdbaf65645",
        "bug_id": "harmony-classlib_238",
        "file": [
            {
                "sha": "855589af5580e0ac1b66cb1b8d9c4910a763b66d",
                "filename": "modules/beans/src/main/java/java/beans/PropertyEditorSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b8d2933f30277f1107198a67c4f6d3b09c9ad049/modules/beans/src/main/java/java/beans/PropertyEditorSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b8d2933f30277f1107198a67c4f6d3b09c9ad049/modules/beans/src/main/java/java/beans/PropertyEditorSupport.java",
                "status": "modified",
                "changes": 30,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/PropertyEditorSupport.java?ref=b8d2933f30277f1107198a67c4f6d3b09c9ad049",
                "patch": "@@ -79,10 +79,7 @@ public Object getValue() {\n         return newValue;\n     }\n \n-    public void setSource(Object source) {\n-        if (source == null) {\n-            throw new NullPointerException(Messages.getString(\"beans.0C\")); //$NON-NLS-1$\n-        }\n+    public void setSource(Object source) {        \n         this.source = source;\n     }\n \n@@ -115,15 +112,22 @@ public boolean isPaintable() {\n     }\n \n     public void firePropertyChange() {\n-        if (listeners.size() > 0) {\n-            PropertyChangeEvent event = new PropertyChangeEvent(source, null,\n-                    oldValue, newValue);\n-            Iterator<PropertyChangeListener> iterator = listeners.iterator();\n-\n-            while (iterator.hasNext()) {\n-                PropertyChangeListener listener = iterator.next();\n-                listener.propertyChange(event);\n-            }\n+        if (listeners.isEmpty()) {\n+            return;\n+        }\n+\n+        List<PropertyChangeListener> copy = new ArrayList<PropertyChangeListener>(\n+                listeners.size());\n+        synchronized (listeners) {\n+            copy.addAll(listeners);\n+        }\n+\n+        PropertyChangeEvent changeAllEvent = new PropertyChangeEvent(source,\n+                null, null, null);\n+        for (Iterator<PropertyChangeListener> listenersItr = copy.iterator(); listenersItr\n+                .hasNext();) {\n+            PropertyChangeListener listna = listenersItr.next();\n+            listna.propertyChange(changeAllEvent);\n         }\n     }\n }",
                "deletions": 13
            },
            {
                "sha": "92b1287d6136205052e3c678f3c39a84f1423ea5",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b8d2933f30277f1107198a67c4f6d3b09c9ad049/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b8d2933f30277f1107198a67c4f6d3b09c9ad049/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorSupportTest.java",
                "status": "modified",
                "changes": 39,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/PropertyEditorSupportTest.java?ref=b8d2933f30277f1107198a67c4f6d3b09c9ad049",
                "patch": "@@ -287,11 +287,24 @@ public void test_setSourceLjava_lang_Object() {\n         support.setSource(source);\n         assertSame(source, support.getSource());\n \n-        try {\n-            support.setSource(null);\n-            fail(\"No expected NullPointerException\");\n-        } catch (NullPointerException e) {\n-        }\n+        support.setSource(null);\n+    }\n+    \n+    public void testSetValue_Event() {\n+        PropertyEditorSupport support = new PropertyEditorSupport();\n+        Object source = new Object();\n+        support.setSource(source);\n+        MockPropertyChangeListener listener = new MockPropertyChangeListener();\n+        support.addPropertyChangeListener(listener);\n+        \n+        support.setValue(new Object());        \n+        PropertyChangeEvent event = listener.getEvent();\n+        assertNotNull(event);\n+        assertEquals(source, event.getSource());\n+        assertNull(event.getNewValue());\n+        assertNull(event.getOldValue());\n+        assertNull(event.getPropagationId());\n+        assertNull(event.getPropertyName());        \n     }\n \n     public static class MockSource {\n@@ -412,4 +425,20 @@ public boolean equals(Object o) {\n                     : this.label.equals(other.label)));\n         }\n     }\n+    \n+    public class MockPropertyChangeListener implements PropertyChangeListener\n+    {\n+\n+        private PropertyChangeEvent event;        \n+        public void propertyChange(PropertyChangeEvent event) {\n+            \n+            this.event = event;\n+        }\n+        \n+        public PropertyChangeEvent getEvent()\n+        {\n+            return event;\n+        }\n+        \n+    }\n }",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Rollback commit r521764:\n(Patch for HARMONY-3443 \"[classlib][awt][netbeans] Container.paint() throws NPE\"\n\n2 test cases from java.awt.font.LineBreakMeasurerTest fails on Linux. Will reopen JIRA issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@522461 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a2de4387add76191ed4ad52e28285691e30dc3c9",
        "parent": "https://github.com/apache/harmony-classlib/commit/e3f8657ef5cfb404653c7d8db25f1ea0d6428e40",
        "bug_id": "harmony-classlib_239",
        "file": [
            {
                "sha": "80f35a5e3b2e2bd9925b5c1de3a2147eb420bb56",
                "filename": "modules/awt/src/main/java/common/java/awt/Container.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a2de4387add76191ed4ad52e28285691e30dc3c9/modules/awt/src/main/java/common/java/awt/Container.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a2de4387add76191ed4ad52e28285691e30dc3c9/modules/awt/src/main/java/common/java/awt/Container.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Container.java?ref=a2de4387add76191ed4ad52e28285691e30dc3c9",
                "patch": "@@ -989,7 +989,7 @@ public void paintComponents(Graphics g) {\n     private void paintComponentsImpl(Graphics g) {\n         Shape clip;\n         \n-        if ((!isShowing()) || (g == null)) {\n+        if (g == null) {\n             return;\n         }\n         \n@@ -999,7 +999,7 @@ private void paintComponentsImpl(Graphics g) {\n             Component comp = children.get(i);\n \n             if (comp.isLightweight() && comp.isVisible()) {\n-                if ((clip != null) && !clip.intersects(comp.getBounds())) {\n+                if (!clip.intersects(comp.getBounds())) {\n                     continue;\n                 }\n ",
                "deletions": 2
            },
            {
                "sha": "a5d3c2d63b21a2c05014a040dc62689e795fb0a0",
                "filename": "modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a2de4387add76191ed4ad52e28285691e30dc3c9/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a2de4387add76191ed4ad52e28285691e30dc3c9/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java",
                "status": "modified",
                "changes": 25,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/ContainerRTest.java?ref=a2de4387add76191ed4ad52e28285691e30dc3c9",
                "patch": "@@ -17,9 +17,6 @@\n package java.awt;\n \n \n-import javax.swing.DebugGraphics;\n-import javax.swing.JButton;\n-\n import junit.framework.TestCase;\n \n \n@@ -66,28 +63,6 @@ public final void testPaint() {\n         // Regression test for HARMONY-2527\n         final Component c = new Frame();\n         c.paint(c.getGraphics());\n-        // End of regression for HARMONY-2527\n-        \n-        // Regression for HARMONY-3443\n-        final Graphics g;\n-        final Frame f = new Frame();\n-\n-        f.add(new JButton());\n-        f.setVisible(true);\n-        g = f.getGraphics();\n-\n-        try {\n-            g.setClip(null);\n-            assertNull(g.getClip());\n-            f.paint(g);\n-        } finally {\n-            f.dispose();\n-        }\n-        // End of regression for HARMONY-3443\n-        \n-        // Regression for HARMONY-3430\n-        new Container().paint(new DebugGraphics());\n-        // End of regression for HARMONY-3430\n     }\n \n     public void testAddComponent() {",
                "deletions": 25
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "This patch is a correct fix for HARMONY-2606 \"[classlib][swing][plaf] javax.swing.plaf.basic.BasicFileChooserUI.ensureFileIsVisible(..) throws unexpected NPE\" and it also removes a regression introduced by previous patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@519272 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2d417eb9ccc329917d2ba9f08bdff2bce62bd12d",
        "parent": "https://github.com/apache/harmony-classlib/commit/bc53d35190b30856952093e7c0d45e311d92dd59",
        "bug_id": "harmony-classlib_240",
        "file": [
            {
                "sha": "afa9a62cf50410ec13f687a7d89bbad8cffe9f9b",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2d417eb9ccc329917d2ba9f08bdff2bce62bd12d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2d417eb9ccc329917d2ba9f08bdff2bce62bd12d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicFileChooserUI.java?ref=2d417eb9ccc329917d2ba9f08bdff2bce62bd12d",
                "patch": "@@ -617,8 +617,9 @@ public void rescanCurrentDirectory(final JFileChooser fc) {\n     }\n \n     public void ensureFileIsVisible(final JFileChooser fc, final File f) {\n-        fileChooser = fc;  \n-        fileChooser.ensureFileIsVisible(f);\n+        if (fileChooser != null) {  \n+            fileChooser.ensureFileIsVisible(f);\n+        }\n     }\n \n     public JFileChooser getFileChooser() {",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2613 \"[classlib][swing][plaf] javax.swing.plaf.basic.BasicTableUI methods throw unspecified NPE if UI is not attached to a table\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@517170 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d",
        "parent": "https://github.com/apache/harmony-classlib/commit/71d7c4da6c2aea321929a76fd390055315ce3ccd",
        "bug_id": "harmony-classlib_241",
        "file": [
            {
                "sha": "60d449c969786322b9c83dfd27812ab9cdb6806d",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java",
                "status": "modified",
                "changes": 12,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableHeaderUI.java?ref=f1215237da9b1ad42b923236b9bbc7c80a2e2f1d",
                "patch": "@@ -101,11 +101,15 @@ public void mouseDragged(final MouseEvent e) {\n         }\n \n         public void mouseEntered(final MouseEvent e) {\n-            updateCursor(e);\n+            if (header != null) {\n+                updateCursor(e);\n+            }\n         }\n \n         public void mouseExited(final MouseEvent e) {\n-            header.setCursor(originalHeaderCursor);\n+            if (header != null) {\n+                header.setCursor(originalHeaderCursor);\n+            }\n         }\n \n \n@@ -316,7 +320,9 @@ protected void installDefaults() {\n     }\n \n     protected void uninstallDefaults() {\n-        Utilities.uninstallColorsAndFont(header);\n+        if (header != null) {\n+            Utilities.uninstallColorsAndFont(header);\n+        }\n     }\n \n     protected void installListeners() {",
                "deletions": 3
            },
            {
                "sha": "26246b59507d9b24a42cfd84a81366387a8b45ac",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java?ref=f1215237da9b1ad42b923236b9bbc7c80a2e2f1d",
                "patch": "@@ -121,7 +121,7 @@ public void mouseExited(final MouseEvent e) {\n         }\n \n         public void mousePressed(final MouseEvent e) {\n-            if (!table.isEnabled()) {\n+            if (table == null || !table.isEnabled()) {\n                 return;\n             }\n \n@@ -162,7 +162,7 @@ public void mousePressed(final MouseEvent e) {\n         }\n \n         public void mouseReleased(final MouseEvent e) {\n-            if (!table.isEnabled()) {\n+            if (table == null || !table.isEnabled()) {\n                 return;\n             }\n \n@@ -178,7 +178,7 @@ public void mouseReleased(final MouseEvent e) {\n         }\n \n         public void mouseDragged(final MouseEvent e) {\n-            if (!table.isEnabled()) {\n+            if (table == null || !table.isEnabled()) {\n                 return;\n             }\n ",
                "deletions": 3
            },
            {
                "sha": "2a196276e0b19cc7f2b820fd8b0174064dd41f2f",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java",
                "status": "modified",
                "changes": 148,
                "additions": 145,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableHeaderUITest.java?ref=f1215237da9b1ad42b923236b9bbc7c80a2e2f1d",
                "patch": "@@ -25,7 +25,10 @@\n import java.awt.Dimension;\n import java.awt.Font;\n import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.event.MouseWheelEvent;\n import javax.swing.BasicSwingTestCase;\n+import javax.swing.JTable;\n import javax.swing.UIManager;\n import javax.swing.plaf.ColorUIResource;\n import javax.swing.plaf.FontUIResource;\n@@ -34,8 +37,14 @@\n import org.apache.harmony.x.swing.Utilities;\n \n public class BasicTableHeaderUITest extends BasicSwingTestCase {\n+\n     private BasicTableHeaderUI ui;\n \n+    private MouseWheelEvent mouseWheelEvent =\n+            new MouseWheelEvent(new Label(),\n+                    0, 0, 0, 0, 0, 0, false, 0,\n+                    MouseWheelEvent.WHEEL_UNIT_SCROLL, 0);\n+\n     public BasicTableHeaderUITest(final String name) {\n         super(name);\n     }\n@@ -63,6 +72,13 @@ public void testCreate() throws Exception {\n     }\n \n     public void testInstallUninstallUI() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallUI(new JTable());\n+            }\n+        });\n         assertNull(ui.header);\n         assertNull(ui.rendererPane);\n         JTableHeader header = new JTableHeader();\n@@ -76,6 +92,18 @@ public void testInstallUninstallUI() throws Exception {\n     }\n \n     public void testInstallUninstallDefaults() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.installDefaults();\n+            }\n+        });\n+\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.uninstallDefaults();\n+\n         ui.header = new JTableHeader();\n         ui.header.setForeground(new ColorUIResource(Color.RED));\n         ui.header.setBackground(new ColorUIResource(Color.BLUE));\n@@ -93,8 +121,23 @@ public void testInstallUninstallDefaults() throws Exception {\n     }\n \n     public void testInstallUninstallListeners() throws Exception {\n-        ui.header = new JTableHeader();\n         assertNull(ui.mouseInputListener);\n+\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.installListeners();\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallListeners();\n+            }\n+        });\n+        ui.header = new JTableHeader();\n         int mouseListenersCount = ui.header.getMouseListeners().length;\n         int mouseMotionListenersCount = ui.header.getMouseMotionListeners().length;\n         ui.installListeners();\n@@ -113,15 +156,56 @@ public void testInstallUninstallKeyboardActions() throws Exception {\n         assertTrue(Utilities.isEmptyArray(ui.header.getActionMap().allKeys()));\n     }\n \n+    public void testInstallKeyboardActions() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.installKeyboardActions();\n+    }\n+\n+    public void testUninstallKeyboardActions() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.uninstallKeyboardActions();\n+    }\n+\n     public void testPaint() throws Exception {\n+        final Graphics g = createTestGraphics();\n+\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.paint(g, new JTable());\n+            }\n+        });\n         ui.installUI(new JTableHeader());\n         ui.header.getColumnModel().addColumn(new TableColumn());\n-        Graphics g = createTestGraphics();\n         g.setClip(0, 0, 100, 100);\n         ui.paint(g, null);\n     }\n \n     public void testGetMinimumMaximumPreferredSize() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getMinimumSize(new JTable());\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getMaximumSize(new JTable());\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getPreferredSize(new JTable());\n+            }\n+        });\n         ui.header = new JTableHeader();\n         assertEquals(new Dimension(), ui.getMinimumSize(null));\n         assertEquals(new Dimension(), ui.getMaximumSize(null));\n@@ -151,8 +235,66 @@ public void testGetMinimumMaximumPreferredSize() throws Exception {\n                 .getPreferredSize(null));\n     }\n \n-    public void testMouseInputListener() throws Exception {\n+    public void testMouseInputHandlerMouseEnteredNull() throws Exception {\n         // Regression test for HARMONY-1777\n         new BasicTableHeaderUI().new MouseInputHandler().mouseEntered(null);\n     }\n+\n+    public void testMouseInputHandlerMouseClicked() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseClicked(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseEntered() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseEntered(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseExited() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseExited(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMousePressed() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new MouseInputHandler().mousePressed(mouseWheelEvent);\n+            }\n+        });\n+    }\n+\n+    public void testMouseInputHandlerMouseReleased() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new MouseInputHandler().mouseReleased(mouseWheelEvent);\n+            }\n+        });\n+    }\n+\n+    public void testMouseInputHandlerMouseDragged() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new MouseInputHandler().mouseDragged(mouseWheelEvent);\n+            }\n+        });\n+    }\n+\n+    public void testMouseInputHandlerMouseMoved() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new MouseInputHandler().mouseMoved(mouseWheelEvent);\n+            }\n+        });\n+    }\n }",
                "deletions": 3
            },
            {
                "sha": "be7908e3836e5ae93dd557d7957af4780f66e7d3",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f1215237da9b1ad42b923236b9bbc7c80a2e2f1d/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "status": "modified",
                "changes": 192,
                "additions": 191,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java?ref=f1215237da9b1ad42b923236b9bbc7c80a2e2f1d",
                "patch": "@@ -22,6 +22,10 @@\n \n import java.awt.Dimension;\n import java.awt.Graphics;\n+import java.awt.Label;\n+import java.awt.event.FocusEvent;\n+import java.awt.event.KeyEvent;\n+import java.awt.event.MouseWheelEvent;\n import javax.swing.BasicSwingTestCase;\n import javax.swing.CellRendererPane;\n import javax.swing.JTable;\n@@ -32,6 +36,15 @@\n public class BasicTableUITest extends BasicSwingTestCase {\n     private BasicTableUI ui;\n \n+    private FocusEvent focusEvent = new FocusEvent(new JTable(), 0);\n+\n+    private KeyEvent keyEvent = new KeyEvent(new JTable(), 0, 0, 0, 0);\n+\n+    private MouseWheelEvent mouseWheelEvent =\n+            new MouseWheelEvent(new Label(),\n+                    0, 0, 0, 0, 0, 0, false, 0,\n+                    MouseWheelEvent.WHEEL_UNIT_SCROLL, 0);\n+\n     public BasicTableUITest(final String name) {\n         super(name);\n     }\n@@ -83,6 +96,13 @@ public void testInstallUI() throws Exception {\n     }\n \n     public void testUninstallUI() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallUI(new JTable());\n+            }\n+        });\n         JTable table = new JTable();\n         ui.installUI(table);\n         ui.uninstallUI(null);\n@@ -92,6 +112,27 @@ public void testUninstallUI() throws Exception {\n \n     public void testGetMinimumMaximumPreferredSize() throws Exception {\n         JTable table = new JTable();\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getMinimumSize(new JTable());\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getMaximumSize(new JTable());\n+            }\n+        });\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.getPreferredSize(new JTable());\n+            }\n+        });\n         ui.table = table;\n         assertEquals(new Dimension(), ui.getMinimumSize(null));\n         TableColumn column1 = new TableColumn();\n@@ -133,17 +174,32 @@ public void testPaint() throws Exception {\n         ui.paint(g, null);\n     }\n \n-    // Regression test for HARMONY-1776\n     public void testPaint_Null() throws Exception {\n         try {\n+            // Regression test for HARMONY-1776\n             ui.paint(null, null);\n             fail(\"NullPointerException should have been thrown\");\n         } catch (NullPointerException e) {\n             // Expected\n         }\n+\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.paint(createTestGraphics(), new JTable());\n+            }\n+        });\n     }\n \n     public void testInstallDefaults() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.installDefaults();\n+            }\n+        });\n         ui.table = new JTable();\n         ui.installDefaults();\n         assertSame(UIManager.getFont(\"Table.font\"), ui.table.getFont());\n@@ -155,4 +211,138 @@ public void testInstallDefaults() throws Exception {\n         assertSame(UIManager.getColor(\"Table.selectionBackground\"), ui.table\n                 .getSelectionBackground());\n     }\n+\n+    public void testInstallKeyboardActions() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.installKeyboardActions();\n+            }\n+        });\n+    }\n+\n+    public void testUninstallDefaults() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallDefaults();\n+            }\n+        });\n+    }\n+\n+    public void testUninstallKeyboardActions() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallKeyboardActions();\n+            }\n+        });\n+    }\n+\n+    public void testInstallListeners() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.installListeners();\n+            }\n+        });\n+    }\n+\n+    public void testUninstallListeners() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.uninstallListeners();\n+            }\n+        });\n+    }\n+\n+    public void testFocusHandlerFocusGained() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new FocusHandler().focusGained(focusEvent);\n+            }\n+        });\n+    }\n+\n+    public void testFocusHandlerFocusLost() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new FocusHandler().focusLost(focusEvent);\n+            }\n+        });\n+    }\n+\n+    public void testKeyHandlerKeyPressed() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new KeyHandler().keyPressed(keyEvent);\n+    }\n+\n+    public void testKeyHandlerKeyReleased() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new KeyHandler().keyReleased(keyEvent);\n+    }\n+\n+    public void testFocusHandlerKeyTyped() throws Exception {\n+        testExceptionalCase(new NullPointerCase() {\n+            // Regression test for HARMONY-2613\n+            @Override\n+            public void exceptionalAction() throws Exception {\n+                ui.new KeyHandler().keyTyped(keyEvent);\n+            }\n+        });\n+    }\n+\n+    public void testMouseInputHandlerMouseClicked() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseClicked(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseEntered() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseEntered(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseExited() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseExited(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMousePressed() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mousePressed(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseReleased() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseReleased(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseDragged() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseDragged(mouseWheelEvent);\n+    }\n+\n+    public void testMouseInputHandlerMouseMoved() throws Exception {\n+        // Regression test for HARMONY-2613\n+        // Make sure it throws no exceptions\n+        ui.new MouseInputHandler().mouseMoved(mouseWheelEvent);\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Updated patch for HARMONY-2779 \"[classlib][awt] Compatibility: java.awt.image.MultiPixelPackedSampleModel.setDataElements(int ,int,Object ,DataBuffer) throws unspecified NPE while Ri throws ArrayIndexOutOfBoundsException\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@513487 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f8e3f5788997ffa2043db3b8cf88e457134658a7",
        "parent": "https://github.com/apache/harmony-classlib/commit/2c50073031903cb987c6b6ada8b8bfb3248494a2",
        "bug_id": "harmony-classlib_242",
        "file": [
            {
                "sha": "86bb813b7408ecefff06db884522392902fb4688",
                "filename": "modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f8e3f5788997ffa2043db3b8cf88e457134658a7/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f8e3f5788997ffa2043db3b8cf88e457134658a7/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "status": "modified",
                "changes": 93,
                "additions": 52,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java?ref=f8e3f5788997ffa2043db3b8cf88e457134658a7",
                "patch": "@@ -122,32 +122,7 @@ public Object getDataElements(int x, int y, Object obj, DataBuffer data) {\n \n     @Override\n     public void setDataElements(int x, int y, Object obj, DataBuffer data) {\n-        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\n-            // awt.63=Coordinates are not in bounds\n-            throw new ArrayIndexOutOfBoundsException(Messages.getString(\"awt.63\")); //$NON-NLS-1$\n-        }\n-        \n-        int bitnum = dataBitOffset + x * pixelBitStride;\n-        int idx = y * scanlineStride + bitnum / dataElementSize;\n-        int elem = data.getElem(idx);\n-        int shift = dataElementSize - (bitnum & (dataElementSize - 1)) -\n-                pixelBitStride;\n-        int mask = ~(bitMask << shift);\n-        elem &= mask;\n-        \n-        switch (getTransferType()) {\n-        case DataBuffer.TYPE_BYTE:\n-            elem |= (((byte[]) obj)[0] & 0xff & bitMask) << shift;\n-            break;\n-        case DataBuffer.TYPE_USHORT:\n-            elem |= (((short[]) obj)[0] & 0xffff & bitMask) << shift;\n-            break;\n-        case DataBuffer.TYPE_INT:\n-            elem |= (((int[]) obj)[0] & bitMask) << shift;\n-            break;\n-        }\n-        \n-        data.setElem(idx, elem);\n+        setSample(x, y, obj, data, 1, 0);\n     }\n \n     @Override\n@@ -202,11 +177,7 @@ public SampleModel createCompatibleSampleModel(int w, int h) {\n \n     @Override\n     public void setPixel(int x, int y, int iArray[], DataBuffer data) {\n-        if (x < 0 || y < 0 || x >= this.width || y >= this.height) {\n-            // awt.63=Coordinates are not in bounds\n-            throw new ArrayIndexOutOfBoundsException(Messages.getString(\"awt.63\")); //$NON-NLS-1$\n-        }\n-        setSample(x, y, 0, iArray[0], data);\n+        setSample(x, y, iArray, data, 2, 0);\n     }\n \n     @Override\n@@ -226,20 +197,12 @@ public int getSample(int x, int y, int b, DataBuffer data) {\n \n     @Override\n     public void setSample(int x, int y, int b, int s, DataBuffer data) {\n-        if (x < 0 || y < 0 || x >= this.width || y >= this.height || b != 0) {\n+        if (b != 0) {\n             // awt.63=Coordinates are not in bounds\n             throw new ArrayIndexOutOfBoundsException(Messages.getString(\"awt.63\")); //$NON-NLS-1$\n         }\n \n-        int bitnum = dataBitOffset + x * pixelBitStride;\n-        int idx = y * scanlineStride + bitnum / dataElementSize;\n-        int elem = data.getElem(idx);\n-        int shift = dataElementSize - (bitnum & (dataElementSize - 1)) -\n-                pixelBitStride;\n-        int mask = ~(bitMask << shift);\n-        elem &= mask;\n-        elem |= (s & bitMask) << shift;\n-        data.setElem(idx, elem);\n+        setSample(x, y, null, data, 3, s);\n     }\n \n     @Override\n@@ -354,5 +317,53 @@ public int getDataBitOffset() {\n         return dataBitOffset;\n     }\n \n+    /**\n+     * This method is used by other methods of this class. The behaviour of\n+     * this method depends on the method which has been invoke this one. The\n+     * argument methodId is used to choose valid behaviour in a particular case.\n+     * If methodId is equal to 1 it means that this method has been invoked by\n+     * the setDataElements() method, 2 - means setPixel(), and setSample() in\n+     * any other cases.\n+     */\n+    private void setSample(final int x, final int y, final Object obj,\n+            final DataBuffer data, final int methodId, int s) {\n+        if ((x < 0) || (y < 0) || (x >= this.width) || (y >= this.height)) {\n+            // awt.63=Coordinates are not in bounds\n+            throw new ArrayIndexOutOfBoundsException(Messages\n+                    .getString(\"awt.63\")); //$NON-NLS-1$\n+        }\n+\n+        final int bitnum = dataBitOffset + x * pixelBitStride;\n+        final int idx = y * scanlineStride + bitnum / dataElementSize;\n+        final int shift = dataElementSize - (bitnum & (dataElementSize - 1))\n+                - pixelBitStride;\n+        final int mask = ~(bitMask << shift);\n+        int elem = data.getElem(idx);\n+\n+        switch (methodId) {\n+        case 1: {                        // Invoked from setDataElements()\n+            switch (getTransferType()) {\n+            case DataBuffer.TYPE_BYTE:\n+                s = ((byte[]) obj)[0] & 0xff;\n+                break;\n+            case DataBuffer.TYPE_USHORT:\n+                s = ((short[]) obj)[0] & 0xffff;\n+                break;\n+            case DataBuffer.TYPE_INT:\n+                s = ((int[]) obj)[0];\n+                break;\n+            }\n+            break;\n+        }\n+        case 2: {                        // Invoked from setPixel()\n+            s = ((int[]) obj)[0];\n+            break;\n+        }\n+        }\n+\n+        elem &= mask;\n+        elem |= (s & bitMask) << shift;\n+        data.setElem(idx, elem);\n+    }\n }\n ",
                "deletions": 41
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Correct fix for HARMONY-2761\n[classlib][security] Security.getProviders throws NumberFormatException unexpectedly\n\nThe case with KeySize attribute was a special case of the bug - NPE was thrown for other attributes\nAlso an attribute and its value should be case insensitive\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@506473 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018",
        "parent": "https://github.com/apache/harmony-classlib/commit/376d7091fe3fa19e0afc5dac84289625a0171b36",
        "bug_id": "harmony-classlib_243",
        "file": [
            {
                "sha": "35a845b438f50fac0111a84da0636edc0977a5f4",
                "filename": "modules/security/src/main/java/common/java/security/Provider.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018/modules/security/src/main/java/common/java/security/Provider.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018/modules/security/src/main/java/common/java/security/Provider.java",
                "status": "modified",
                "changes": 37,
                "additions": 13,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/Provider.java?ref=94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018",
                "patch": "@@ -310,32 +310,21 @@ boolean implementsAlg(String serv, String alg, String attribute, String val) {\n     // returns true if the implementation meets the constraint expressed by the\n     // specified attribute name/value pair.\n     private boolean checkAttribute(String servAlg, String attribute, String val) {\n-        if (attribute.equalsIgnoreCase(\"KeySize\")) { //$NON-NLS-1$\n-\n-            String attributeValue = getProperty(servAlg + \" KeySize\"); //$NON-NLS-1$\n-            if (attributeValue == null) {\n-                // provider doesn't provide KeySize attribute for the service\n-                return false;\n-            }\n-\n-            if (Integer.valueOf(attributeValue).compareTo(Integer.valueOf(val)) < 0) {\n-                return false;\n-            } else {\n-                return true;\n-            }\n-        } else if (attribute.equalsIgnoreCase(\"ImplementedId\")) { //$NON-NLS-1$\n-            if (!getProperty(servAlg + \" ImplementedId\").equals(val)) { //$NON-NLS-1$\n-                return false;\n-            } else {\n-                return true;\n-            }\n-        } else { // other attributes\n-            if (!getProperty(servAlg + \" \" + attribute).equals(val)) { //$NON-NLS-1$\n-                return false;\n-            } else {\n-                return true;\n+        \n+        String attributeValue = getPropertyIgnoreCase(servAlg + ' ' + attribute);\n+        if (attributeValue != null) {\n+            if (attribute.equalsIgnoreCase(\"KeySize\")) { //$NON-NLS-1$\n+                if (Integer.valueOf(attributeValue).compareTo(\n+                        Integer.valueOf(val)) >= 0) {\n+                    return true;\n+                }\n+            } else { // other attributes\n+                if (attributeValue.equalsIgnoreCase(val)) {\n+                    return true;\n+                }\n             }\n         }\n+        return false;\n     }\n \n     /**",
                "deletions": 24
            },
            {
                "sha": "ef0a19f24a0bca63745c551226bd5b2f779531bb",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SecurityTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SecurityTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SecurityTest.java",
                "status": "modified",
                "changes": 51,
                "additions": 45,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/SecurityTest.java?ref=94b7ea9666a7d8cd14d5c15e9ebc69b6bbc83018",
                "patch": "@@ -221,9 +221,23 @@ public void test_getProvidersLjava_lang_String() {\n \n             filter = \"MyService.MyAlgorithm KeySize:1025\";\n             assertNull(filter, Security.getProviders(filter));\n-            \n+\n+            // attribute name and value are case insensitive \n+            filter = \"MyService.MyAlgorithm imPLementedIn:softWARE\";\n+            assertTrue(filter, Arrays.equals(new Provider[] { p }, Security\n+                    .getProviders(filter)));\n+            filter = \"MyService.MyAlgorithm ATTribute:attributeVALUE\";\n+            assertTrue(filter, Arrays.equals(new Provider[] { p }, Security\n+                    .getProviders(filter)));\n+\n             // Regression for HARMONY-2761\n-            filter = \"MyService.MyAlgorithmNoKeySize KeySize:512\";\n+            filter = \"MyService.NoKeySize KeySize:512\";\n+            assertNull(filter, Security.getProviders(filter));\n+\n+            filter = \"MyService.NoImplementedIn ImplementedIn:Software\";\n+            assertNull(filter, Security.getProviders(filter));\n+\n+            filter = \"ABCService.NoAttribute Attribute:ABC\";\n             assertNull(filter, Security.getProviders(filter));\n         } finally { //clean up\n             Security.removeProvider(p.getName());\n@@ -274,11 +288,29 @@ public void test_getProvidersLjava_util_Map() {\n             m.put(\"MessageDigest.SHA-1\", \"\");\n             assertNull(\"MyService.MyAlgorithm KeySize:1025\", Security\n                     .getProviders(m));\n-            \n+\n+            // attribute name and value are case insensitive \n+            m.clear();\n+            m.put(\"MyService.MyAlgorithm imPLementedIn\", \"softWARE\");\n+            assertTrue(Arrays.equals(new Provider[] { p }, Security\n+                    .getProviders(m)));\n+            m.clear();\n+            m.put(\"MyService.MyAlgorithm ATTribute\", \"attributeVALUE\");\n+            assertTrue(Arrays.equals(new Provider[] { p }, Security\n+                    .getProviders(m)));\n+\n             // Regression for HARMONY-2761\n             m.clear();\n-            m.put(\"MyService.MyAlgorithmNoKeySize KeySize\", \"512\");\n+            m.put(\"MyService.NoKeySize KeySize\", \"512\");\n             assertNull(\"No KeySize attribute\", Security.getProviders(m));\n+            \n+            m.clear();\n+            m.put(\"MyService.NoImplementedIn ImplementedIn\", \"Software\");\n+            assertNull(\"No ImplementedIn attribute\", Security.getProviders(m));\n+            \n+            m.clear();\n+            m.put(\"ABCService.NoAttribute Attribute\", \"ABC\");\n+            assertNull(Security.getProviders(m));\n         } finally { //clean up\n             Security.removeProvider(p.getName());\n         }\n@@ -328,10 +360,17 @@ public void test_setPropertyLjava_lang_StringLjava_lang_String() {\n             put(\"MessageDigest.SHA-1\", \"SomeClassName\");\n             put(\"MyService.MyAlgorithm\", \"SomeClassName\");\n             put(\"MyService.MyAlgorithm KeySize\", \"1024\");\n+            put(\"MyService.MyAlgorithm ImplementedIn\", \"Software\");\n+            put(\"MyService.MyAlgorithm Attribute\", \"AttributeValue\");\n \n             // service has no KeySize attribute\n-            put(\"MyService.MyAlgorithmNoKeySize\", \"SomeClassName\");\n+            put(\"MyService.NoKeySize\", \"SomeClassName\");\n+\n+            // service has no ImplementedIn attribute\n+            put(\"MyService.NoImplementedIn\", \"SomeClassName\");\n+\n+            // service has no 'Attribute' attribute\n+            put(\"ABCService.NoAttribute\", \"SomeClassName\");\n         }\n     }\n-\n }",
                "deletions": 6
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Regression test for HARMONY-2844 \"[classlib][swing] j.s.undo.StateEdit.init does not throw NPE on Harmony\"\nThe issue itself was fixed as part of HARMONY-2536\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@504110 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a1aa2107d9bc0700370682375b4497c3d9546222",
        "parent": "https://github.com/apache/harmony-classlib/commit/74814688facf9112a26a766fe2d011064120fa73",
        "bug_id": "harmony-classlib_244",
        "file": [
            {
                "sha": "c3a502a9fbe6ef6670eb496befdf473f44cad63b",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a1aa2107d9bc0700370682375b4497c3d9546222/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a1aa2107d9bc0700370682375b4497c3d9546222/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/undo/StateEditTest.java?ref=a1aa2107d9bc0700370682375b4497c3d9546222",
                "patch": "@@ -14,10 +14,6 @@\n  *  See the License for the specific language governing permissions and\n  *  limitations under the License.\n  */\n-/**\n- * @author Evgeniya G. Maenkova\n- * @version $Revision$\n- */\n package javax.swing.undo;\n \n import java.util.Hashtable;\n@@ -94,11 +90,6 @@ protected void setUp() throws Exception {\n         super.setUp();\n     }\n \n-    @Override\n-    protected void tearDown() throws Exception {\n-        super.tearDown();\n-    }\n-\n     public void testGetPresentationName() {\n         assertNull(se1.getPresentationName());\n         assertEquals(\"presentationName\", se2.getPresentationName());\n@@ -232,6 +223,17 @@ public void testInit() {\n         }\n     }\n \n+    // Regression test for HARMONY-2844\n+    public void testInitNull() {\n+        StateEdit se = new StateEdit(new SimpleEditable());\n+        try {\n+            se.init(null, \"test\");\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testConstants() {\n         assertEquals(\"$Id: StateEdit.java,v 1.6 1997/10\" + \"/01 20:05:51 sandipc Exp $\",\n                 StateEdit.RCSID);",
                "deletions": 9
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Additional patch for HARMONY-1750 \"[classlib][swing]javax.swing.text.DefaultCaret.install(null) does not throw unspecified NPE\"\nException message has been internationalized\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@502543 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/730cd9d8c1ca7bdaa9f741cf53e27dde136deb34",
        "parent": "https://github.com/apache/harmony-classlib/commit/3ea6f8d85831d465a61df56fa7c72485791abd00",
        "bug_id": "harmony-classlib_245",
        "file": [
            {
                "sha": "f6f3b9f7a540f461fab8683e53edfd565e07aac8",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/730cd9d8c1ca7bdaa9f741cf53e27dde136deb34/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/730cd9d8c1ca7bdaa9f741cf53e27dde136deb34/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/DefaultCaret.java?ref=730cd9d8c1ca7bdaa9f741cf53e27dde136deb34",
                "patch": "@@ -57,6 +57,7 @@\n import org.apache.harmony.awt.text.TextUtils;\n import org.apache.harmony.x.swing.StringConstants;\n \n+import org.apache.harmony.x.swing.internal.nls.Messages;\n \n public class DefaultCaret extends Rectangle implements Caret, FocusListener,\n         MouseListener, MouseMotionListener {\n@@ -678,7 +679,7 @@ public int getUpdatePolicy() {\n      */\n     public void install(final JTextComponent c) {\n         if (c == null) { // Fix for HARMONY-1750, for compatiblity with RI\n-            throw new NullPointerException(\"component is null\");\n+            throw new NullPointerException(Messages.getString(\"swing.05\"));\n         }\n         if (!setComponent(c)) {\n             return;",
                "deletions": 1
            },
            {
                "sha": "e82270a30350824d661895d16642881c5394f51b",
                "filename": "modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/730cd9d8c1ca7bdaa9f741cf53e27dde136deb34/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/730cd9d8c1ca7bdaa9f741cf53e27dde136deb34/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties?ref=730cd9d8c1ca7bdaa9f741cf53e27dde136deb34",
                "patch": "@@ -20,4 +20,5 @@ swing.01=fromIndex must be <= toIndex\n swing.02=Invalid verticalScrollBarPolicy\n swing.03=Invalid horizontalScrollBarPolicy\n swing.04=ComboBox is null\n+swing.05=Component is null\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Additional patch for HARMONY-2896 \"[classlib][swing] Compatibility: javax.swing.plaf.basic.BasicComboBoxUI. getAccessibleChildrenCount(null) does not throw unspecified NPE\"\nException message has been internationalized\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@502540 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3ea6f8d85831d465a61df56fa7c72485791abd00",
        "parent": "https://github.com/apache/harmony-classlib/commit/48c49d937ed100a95a7be20c569a92cd8dd6c2f8",
        "bug_id": "harmony-classlib_246",
        "file": [
            {
                "sha": "e8b4885058a98e15a48b0cb7af26de0a908d4c25",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3ea6f8d85831d465a61df56fa7c72485791abd00/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3ea6f8d85831d465a61df56fa7c72485791abd00/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=3ea6f8d85831d465a61df56fa7c72485791abd00",
                "patch": "@@ -67,6 +67,8 @@\n import org.apache.harmony.x.swing.StringConstants;\n import org.apache.harmony.x.swing.Utilities;\n \n+import org.apache.harmony.x.swing.internal.nls.Messages;\n+\n \n public class BasicComboBoxUI extends ComboBoxUI {\n \n@@ -485,7 +487,7 @@ public void unconfigureArrowButton() {\n \n     public int getAccessibleChildrenCount(final JComponent c) {\n         if (comboBox == null) {\n-            throw new NullPointerException(\"comboBox is null\");\n+            throw new NullPointerException(Messages.getString(\"swing.04\"));\n         }\n         return 0;\n     }",
                "deletions": 1
            },
            {
                "sha": "a610ac4a761a7d25e46ab6c5b3c2331c2a60247c",
                "filename": "modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3ea6f8d85831d465a61df56fa7c72485791abd00/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3ea6f8d85831d465a61df56fa7c72485791abd00/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties",
                "status": "modified",
                "changes": 5,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/org/apache/harmony/x/swing/internal/nls/messages.properties?ref=3ea6f8d85831d465a61df56fa7c72485791abd00",
                "patch": "@@ -17,6 +17,7 @@\n # messages for EN locale\n swing.00=Invalid axis: {0}\n swing.01=fromIndex must be <= toIndex\n-swing.02=invalid verticalScrollBarPolicy\n-swing.03=invalid horizontalScrollBarPolicy\n+swing.02=Invalid verticalScrollBarPolicy\n+swing.03=Invalid horizontalScrollBarPolicy\n+swing.04=ComboBox is null\n ",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2521 ([classlib][swing] j.s.text.JTextPane.updateUI() throws NPE). BasicTextUITest was removed from the exclude list because I cannot reproduce any failures. \n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@501436 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/60788a1ba2d3956d46ef398a36e94dab8852056f",
        "parent": "https://github.com/apache/harmony-classlib/commit/bfe80a5020abdb03ffb6576e629305f9d299ea67",
        "bug_id": "harmony-classlib_247",
        "file": [
            {
                "sha": "7fc6accbed26bdfc87969eadaf101e84fdbe757c",
                "filename": "modules/swing/make/exclude.common",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/make/exclude.common",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/make/exclude.common",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.common?ref=60788a1ba2d3956d46ef398a36e94dab8852056f",
                "patch": "@@ -71,7 +71,6 @@ javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n javax/swing/plaf/basic/BasicTextPaneUITest.java\n-javax/swing/plaf/basic/BasicTextUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/basic/BasicTreeUITest.java",
                "deletions": 1
            },
            {
                "sha": "2f5da9790ef9a6a66fdde200b4441faec32da58f",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "status": "modified",
                "changes": 9,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java?ref=60788a1ba2d3956d46ef398a36e94dab8852056f",
                "patch": "@@ -46,17 +46,22 @@ protected void propertyChange(final PropertyChangeEvent e) {\n \n         final String propName = e.getPropertyName();\n \n+        if (e.getNewValue() == null) {\n+            return;\n+        }\n+\n         if (StringConstants.FONT_PROPERTY_CHANGED.equals(propName)) {\n-            updateFontAttributes(getDefaultStyle(e), (Font)e.getNewValue());\n+            updateFontAttributes(getDefaultStyle(e), (Font) e.getNewValue());\n         } else if (StringConstants.FOREGROUND_PROPERTY_CHANGED.equals(propName)) {\n             getDefaultStyle(e).addAttribute(StyleConstants.Foreground,\n                                             e.getNewValue());\n         } else if (StringConstants.TEXT_COMPONENT_DOCUMENT_PROPERTY.equals(propName)) {\n             setDefaultStyle(e);\n         }\n     }\n+\n     private Style getDefaultStyle(final EventObject e) {\n-        return ((JTextPane)e.getSource()).getStyledDocument()\n+        return ((JTextPane) e.getSource()).getStyledDocument()\n                .getStyle(StyleContext.DEFAULT_STYLE);\n     }\n ",
                "deletions": 2
            },
            {
                "sha": "fc9b713728c51acbdaa1d9f40fb348dc4fc55df2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/60788a1ba2d3956d46ef398a36e94dab8852056f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUITest.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextUITest.java?ref=60788a1ba2d3956d46ef398a36e94dab8852056f",
                "patch": "@@ -436,6 +436,9 @@ public void testUninstallUI() throws Exception {\n         tmp = findAndRemoveSubstring(tmp, \"uninstallKeyboardActions::\");\n         tmp = findAndRemoveSubstring(tmp, \"uninstallListeners::\");\n         assertEquals(\"\", tmp);\n+\n+        // regression for HARMONY-2521          \n+        new javax.swing.JTextPane().updateUI();            \n     }\n \n     public void testInstallUI() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying the patch from HARMONY-2779 ([classlib][awt] Compatibility: java.awt.image.MultiPixelPackedSampleModel.setDataElements(int ,int,Object ,DataBuffer) throws unspecified NPE while Ri throws ArrayIndexOutOfBoundsException)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@501076 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/395adae46b72749a22c333c76d8f285cb02a26bf",
        "parent": "https://github.com/apache/harmony-classlib/commit/c3ffc6d3bf33e2daaf3827e85ddf192a7a4eed2a",
        "bug_id": "harmony-classlib_248",
        "file": [
            {
                "sha": "71544e8277380173819be59abd5b498830c1a5de",
                "filename": "modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/395adae46b72749a22c333c76d8f285cb02a26bf/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/395adae46b72749a22c333c76d8f285cb02a26bf/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java",
                "status": "modified",
                "changes": 17,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/MultiPixelPackedSampleModel.java?ref=395adae46b72749a22c333c76d8f285cb02a26bf",
                "patch": "@@ -126,17 +126,28 @@ public void setDataElements(int x, int y, Object obj, DataBuffer data) {\n             // awt.63=Coordinates are not in bounds\n             throw new ArrayIndexOutOfBoundsException(Messages.getString(\"awt.63\")); //$NON-NLS-1$\n         }\n+        \n+        int bitnum = dataBitOffset + x * pixelBitStride;\n+        int idx = y * scanlineStride + bitnum / dataElementSize;\n+        int elem = data.getElem(idx);\n+        int shift = dataElementSize - (bitnum & (dataElementSize - 1)) -\n+                pixelBitStride;\n+        int mask = ~(bitMask << shift);\n+        elem &= mask;\n+        \n         switch (getTransferType()) {\n         case DataBuffer.TYPE_BYTE:\n-            setSample(x, y, 0, ((byte[]) obj)[0] & 0xff, data);\n+            elem |= (((byte[]) obj)[0] & 0xff & bitMask) << shift;\n             break;\n         case DataBuffer.TYPE_USHORT:\n-            setSample(x, y, 0, ((short[]) obj)[0] & 0xffff, data);\n+            elem |= (((short[]) obj)[0] & 0xffff & bitMask) << shift;\n             break;\n         case DataBuffer.TYPE_INT:\n-            setSample(x, y, 0, ((int[]) obj)[0], data);\n+            elem |= (((int[]) obj)[0] & bitMask) << shift;\n             break;\n         }\n+        \n+        data.setElem(idx, elem);\n     }\n \n     @Override",
                "deletions": 3
            },
            {
                "sha": "ca92d3539ab3a9149fa37f6f90d9486ef7baac51",
                "filename": "modules/awt/src/test/api/java/common/java/awt/image/MultiPixelPackedSampleModelTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/395adae46b72749a22c333c76d8f285cb02a26bf/modules/awt/src/test/api/java/common/java/awt/image/MultiPixelPackedSampleModelTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/395adae46b72749a22c333c76d8f285cb02a26bf/modules/awt/src/test/api/java/common/java/awt/image/MultiPixelPackedSampleModelTest.java",
                "status": "modified",
                "changes": 23,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/image/MultiPixelPackedSampleModelTest.java?ref=395adae46b72749a22c333c76d8f285cb02a26bf",
                "patch": "@@ -31,6 +31,8 @@\n import java.util.Arrays;\n import java.util.Random;\n \n+import javax.swing.JSplitPane;\n+\n import junit.framework.TestCase;\n \n public class MultiPixelPackedSampleModelTest extends TestCase {\n@@ -1755,6 +1757,25 @@ public final void testSetDataElements() {\n \n             }\n         }\n+        \n+        // Regression for HARMONY-2779\n+        try {\n+            new MultiPixelPackedSampleModel(0, 52, 4, 8).setDataElements(6, 2,\n+                    (Object) null, new DataBufferFloat(4, 1));\n+            fail(\"ArrayIndexOutOfBoundsException was not thrown\"); //$NON-NLS-1$\n+        } catch (ArrayIndexOutOfBoundsException ex) {\n+            // expected\n+        }\n+        \n+        // Regression for HARMONY-2779\n+        try {\n+            new MultiPixelPackedSampleModel(0, 14907, 18936, 2)\n+                    .setDataElements(14, 14, new JSplitPane(),\n+                            (DataBuffer) null);\n+            fail(\"NullPointerException was not thrown\"); //$NON-NLS-1$\n+        } catch (NullPointerException  ex) {\n+            // expected\n+        }\n     }\n \n     public final void testSetPixel() {\n@@ -2731,4 +2752,6 @@ private Object getDataElementsI(int x, int y, int width, int height,\n             int bank) {\n         return createPixelsFromIntData(x, y, width, height);\n     }\n+    \n+    \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2777] [classlib][swing]\nj.s.text.AbstractDocument.BranchElement.get{Start, End}Offset throw\nArrayIndexOutOfBoundsException rather than NPE\" (again).  Included the\nadditional fix to AbstractDocumentTest.java.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496958 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af",
        "parent": "https://github.com/apache/harmony-classlib/commit/330263c35be43b27d339e23bd77d49673ba83977",
        "bug_id": "harmony-classlib_249",
        "file": [
            {
                "sha": "ff9dd4b5552bbd0eba6ba7341e12e35da486f27e",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/AbstractDocument.java?ref=d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af",
                "patch": "@@ -401,6 +401,9 @@ public int getElementIndex(final int offset) {\n \n         @Override\n         public int getEndOffset() {\n+            if (elements.length == 0) {\n+                throw new NullPointerException();\n+            }\n             return elements[elements.length - 1].getEndOffset();\n         }\n \n@@ -412,6 +415,9 @@ public String getName() {\n \n         @Override\n         public int getStartOffset() {\n+            if (elements.length == 0) {\n+                throw new NullPointerException();\n+            }\n             return elements[0].getStartOffset();\n         }\n ",
                "deletions": 0
            },
            {
                "sha": "f0e0ceb653752034894c792bf2533672a48df18d",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocumentTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocumentTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocumentTest.java",
                "status": "modified",
                "changes": 35,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocumentTest.java?ref=d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af",
                "patch": "@@ -159,33 +159,20 @@ public void testCreateBranchElement() {\n         assertNull(branch.getElement(0));\n         assertNull(branch.getElement(1));\n         assertEquals(0, branch.getElementCount());\n+\n         // Since this branch element has no children yet, it has no start and\n         // end offsets. Thus calling get{Start,End}Offset on an empty branch\n         // element causes the exception being thrown.\n-        if (BasicSwingTestCase.isHarmony()) {\n-            // Our implementation\n-            try {\n-                assertEquals(0, branch.getStartOffset());\n-                fail(\"getStartOffset on an empty BranchElement \" + \"causes exception\");\n-            } catch (ArrayIndexOutOfBoundsException e) {\n-            }\n-            try {\n-                assertEquals(1, branch.getEndOffset());\n-                fail(\"getEndOffset on an empty BranchElement causes exception\");\n-            } catch (ArrayIndexOutOfBoundsException e) {\n-            }\n-        } else {\n-            // Reference implementation\n-            try {\n-                assertEquals(0, branch.getStartOffset());\n-                fail(\"getStartOffset on an empty BranchElement \" + \"causes exception\");\n-            } catch (NullPointerException e) {\n-            }\n-            try {\n-                assertEquals(1, branch.getEndOffset());\n-                fail(\"getEndOffset on an empty BranchElement causes exception\");\n-            } catch (ArrayIndexOutOfBoundsException e) {\n-            }\n+        try {\n+            assertEquals(0, branch.getStartOffset());\n+            fail(\"getStartOffset is expected to throw NullPointerException\");\n+        } catch (NullPointerException e) {\n+        }\n+\n+        try {\n+            assertEquals(1, branch.getEndOffset());\n+            fail(\"getEndOffset is expected to throw NullPointerException\");\n+        } catch (NullPointerException e) {\n         }\n     }\n ",
                "deletions": 24
            },
            {
                "sha": "0e658fa665cb5769e02a480c9fe61fa2e66db36d",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java",
                "status": "modified",
                "changes": 22,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/AbstractDocument_BranchElementTest.java?ref=d54f8b3ca2afa8e45255146bf4a52a6b0a7eb9af",
                "patch": "@@ -243,11 +243,33 @@ public void testGetStartOffset() {\n         assertEquals(0, par.getStartOffset());\n     }\n \n+    // Regression for HARMONY-2777\n+    public void testGetStartOffsetNoChildren() {\n+        par = doc.new BranchElement(null, null);\n+        try {\n+            par.getStartOffset();\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testGetEndOffset() {\n         assertEquals(15, bidi.getEndOffset());\n         assertEquals(15, par.getEndOffset());\n     }\n \n+    // Regression for HARMONY-2777\n+    public void testGetEndOffsetNoChildren() {\n+        par = doc.new BranchElement(null, null);\n+        try {\n+            par.getEndOffset();\n+            fail(\"NullPointerException is expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n     public void testGetElementCount() {\n         assertEquals(5, bidi.getElementCount());\n         assertEquals(2, par.getElementCount());",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2898] [classlib][swing]\njavax.swing.plaf.basic.BasicComboBoxUI.paintCurrentValueBackground throws\nunspecified NPE on RI and doesn't on Harmony\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496287 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6",
        "parent": "https://github.com/apache/harmony-classlib/commit/2074955b257d59164f08dfd62a8316bb0577cdf1",
        "bug_id": "harmony-classlib_250",
        "file": [
            {
                "sha": "7c6aac2e93ffc970cd6227267bf0531ce9d5bd54",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6",
                "patch": "@@ -426,6 +426,9 @@ public void paintCurrentValue(final Graphics g, final Rectangle bounds, final bo\n \n     public void paintCurrentValueBackground(final Graphics g, final Rectangle bounds, final boolean hasFocus) {\n         Color oldColor = g.getColor();\n+        if (comboBox == null) {\n+            throw new NullPointerException(\"comboBox is null\");\n+        }\n         if (hasFocus) {\n             g.setColor(UIManager.getColor(\"ComboBox.selectionBackground\"));\n         } else {",
                "deletions": 0
            },
            {
                "sha": "44905b442acde67e950fca3870c1e3791384a344",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java?ref=c06a4a8fe0e2cc015cb9ba37ee2e18781d1982d6",
                "patch": "@@ -417,6 +417,17 @@ public void testPaintCurrentValueBackground() throws Exception {\n         ui.paintCurrentValueBackground(createTestGraphics(), new Rectangle(0, 0, 10, 10), true);\n     }\n \n+    // Regression test for HARMONY-2898\n+    public void testPaintCurrentValueBackground_Null() throws Exception {\n+        ui.comboBox = null;\n+        try {\n+            ui.paintCurrentValueBackground(createTestGraphics(), new Rectangle(0, 0, 10, 10), true);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testPaintCurrentValue() throws Exception {\n         ui.comboBox = comboBox;\n         ui.popup = new BasicComboPopup(comboBox);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2707] [classlib][swing]\njavax.swing.plaf.basic.BasicArrowButton.paintTriangle() throws unexpected\nNPE when incorrect 'direction' parameter is passed in\".  I modified the\ntest slightly to let junit handle the exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496107 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/a0bcfa844f8edf4e20d78ff65ef266e3b89f0504",
        "parent": "https://github.com/apache/harmony-classlib/commit/b3981431e3cad102cdd0952ff043e3da1e254b9c",
        "bug_id": "harmony-classlib_251",
        "file": [
            {
                "sha": "b117de41c930e5d2c76a4465a1fab14472faa532",
                "filename": "modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0bcfa844f8edf4e20d78ff65ef266e3b89f0504/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0bcfa844f8edf4e20d78ff65ef266e3b89f0504/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/org/apache/harmony/x/swing/Utilities.java?ref=a0bcfa844f8edf4e20d78ff65ef266e3b89f0504",
                "patch": "@@ -1102,6 +1102,7 @@ private static void paintArrow(final Graphics g, final int x, final int y,\n             break;\n         default:\n             assert false : \"incorrect direction\";\n+            return;\n         }\n \n         final Color oldColor = g.getColor();",
                "deletions": 0
            },
            {
                "sha": "cc924f9010536b67b8f406d8deb059b3bc9e3072",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicArrowButtonTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/a0bcfa844f8edf4e20d78ff65ef266e3b89f0504/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicArrowButtonTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/a0bcfa844f8edf4e20d78ff65ef266e3b89f0504/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicArrowButtonTest.java",
                "status": "modified",
                "changes": 14,
                "additions": 14,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicArrowButtonTest.java?ref=a0bcfa844f8edf4e20d78ff65ef266e3b89f0504",
                "patch": "@@ -22,6 +22,9 @@\n \n import java.awt.Color;\n import java.awt.Dimension;\n+import java.awt.Graphics2D;\n+import java.awt.image.BufferedImage;\n+\n import javax.swing.SwingConstants;\n import javax.swing.SwingTestCase;\n \n@@ -56,6 +59,17 @@ public void testFocusTraversable() throws Exception {\n         assertFalse(button.isFocusTraversable());\n     }\n     \n+    /**\n+     * Regression test for HARMONY-2707\n+     * */\n+    private static final int INCORRECT_DIRECTION = 10; \n+\n+    public void testPaintTriangle() throws NullPointerException { \n+        Graphics2D g2D = new BufferedImage(6, 6, BufferedImage.TYPE_INT_RGB).createGraphics(); \n+        BasicArrowButton ab = new BasicArrowButton(0); \n+        ab.paintTriangle(g2D, 0, 0, 0, INCORRECT_DIRECTION, true); \n+    } \n+    \n     /**\n      * Regression test for HARMONY-2629 \n      * */",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2699] [classlib][swing]\njavax.swing.plaf.basic.BasicProgressBarUI.setAnimationIndex(int newValue)\nthrows unspecified  ArithmeticException while RI throws NPE\".  As suggested\nI left the test excluded.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496106 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b3981431e3cad102cdd0952ff043e3da1e254b9c",
        "parent": "https://github.com/apache/harmony-classlib/commit/014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
        "bug_id": "harmony-classlib_252",
        "file": [
            {
                "sha": "19efab9234ace666637129695bfac3c576c7c285",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b3981431e3cad102cdd0952ff043e3da1e254b9c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b3981431e3cad102cdd0952ff043e3da1e254b9c/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicProgressBarUI.java?ref=b3981431e3cad102cdd0952ff043e3da1e254b9c",
                "patch": "@@ -337,6 +337,9 @@ protected int getAnimationIndex() {\n     }\n \n     protected void setAnimationIndex(final int newValue) {\n+        if (progressBar == null) {\n+            throw new NullPointerException(\"progressBar is null\");\n+        }\n         animationIndex = newValue % maxAnimationIndex;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "059e50ef5268de0e7967033f2e4502843c2812f1",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b3981431e3cad102cdd0952ff043e3da1e254b9c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b3981431e3cad102cdd0952ff043e3da1e254b9c/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicProgressBarUITest.java?ref=b3981431e3cad102cdd0952ff043e3da1e254b9c",
                "patch": "@@ -128,10 +128,19 @@ public void testGetPreferredSizes() {\n         assertEquals(ui.getPreferredInnerHorizontal().height, inner.height);\n     }\n \n-    public void testAnimation() {\n+    public void testAnimation() throws ArithmeticException {\n         ui.installUI(progressBar);\n         progressBar.setIndeterminate(true);\n         assertEquals(0, ui.getAnimationIndex());\n+        ui.setAnimationIndex(5);\n+        assertEquals(5, ui.getAnimationIndex());\n+\n+        try { //Regression test for HARMONY-2699\n+            new BasicProgressBarUI().setAnimationIndex(5);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n     \n     /**",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2695] [classlib][swing]\njavax.swing.plaf.basic.BasicCheckBoxMenuItemUI.getMinimumSize(null)/getMaxi\nmumSize(null) returns null while RI throws NPE\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496096 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
        "parent": "https://github.com/apache/harmony-classlib/commit/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86",
        "bug_id": "harmony-classlib_253",
        "file": [
            {
                "sha": "cf87c4da6fe253939321964fe6f402291e80cd4c",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -72,7 +72,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "cf87c4da6fe253939321964fe6f402291e80cd4c",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -72,7 +72,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "1b0928ca9a0e05a98d9bab0463325519ff7b53f4",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -75,7 +75,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "cf87c4da6fe253939321964fe6f402291e80cd4c",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -72,7 +72,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "d2131bc400e4c1c5e1c4838ff5009cde1ee971b5",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -76,7 +76,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "45ea2771d71aa825681414c458edb6457b9aa0cd",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -83,7 +83,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "cf87c4da6fe253939321964fe6f402291e80cd4c",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -72,7 +72,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "cf87c4da6fe253939321964fe6f402291e80cd4c",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -72,7 +72,6 @@ javax/swing/ProgressMonitorInputStreamTest.java\n javax/swing/SortingFocusTraversalPolicyRTest.java\n javax/swing/SwingUtilitiesRTest.java\n javax/swing/SwingUtilitiesTest.java\n-javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java\n javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java",
                "deletions": 1
            },
            {
                "sha": "24b0feef1c0e04a504f004a20d8dc54426c6dd39",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -303,6 +303,9 @@ protected MenuKeyListener createMenuKeyListener(final JComponent c) {\n     }\n \n     public Dimension getMinimumSize(final JComponent c) {\n+        if (c == null) {\n+            throw new NullPointerException(\"component is null\");\n+        }\n         return null;\n     }\n \n@@ -311,6 +314,9 @@ public Dimension getPreferredSize(final JComponent c) {\n     }\n \n     public Dimension getMaximumSize(final JComponent c) {\n+        if (c == null) {\n+            throw new NullPointerException(\"component is null\");\n+        }\n         return null;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "b7162553cac4c65ba756ec4fad59c7dd0946a231",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicCheckBoxMenuItemUITest.java?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -64,4 +64,22 @@ public void testGetPropertyPrefix() {\n      */\n     public void testProcessMouseEvent() {\n     }\n+\n+    /*\n+     * Test method for 'javax.swing.plaf.basic.BasicCheckBoxMenuItemUI.getMinimumSize(null)/getMaximumSize(null)'\n+     */\n+    public void testGetSizes() {\n+        try { //Regression test for HARMONY-2695\n+            checkBoxUI.getMinimumSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try { //Regression test for HARMONY-2695\n+            checkBoxUI.getMaximumSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n }",
                "deletions": 0
            },
            {
                "sha": "a06a78f27883e8166919757d9b52c685f771df28",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/014cd5fc217f32ce602a8dc4973bd5f733dfe57f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "status": "modified",
                "changes": 12,
                "additions": 12,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java?ref=014cd5fc217f32ce602a8dc4973bd5f733dfe57f",
                "patch": "@@ -122,6 +122,18 @@ public FontMetrics getFontMetrics(Font font) {\n         assertEquals(menuItemUI.getPreferredMenuItemSize(item, menuItemUI.checkIcon,\n                 menuItemUI.arrowIcon, menuItemUI.defaultTextIconGap), menuItemUI\n                 .getPreferredSize(item));\n+        try { //Regression test for HARMONY-2695\n+            menuItemUI.getMinimumSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try { //Regression test for HARMONY-2695\n+            menuItemUI.getMaximumSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2704] [classlib][swing]\njavax.swing.plaf.basic.BasicMenuItemUI.uninstallUI(new JOptionPane())\nthrows unspecified NPE while RI throws ClassCastException\".  I removed the\ntest from all exclude lists not just two as in the patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496055 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/3eee9feac66de943191a92971a6034b91d0d5456",
        "parent": "https://github.com/apache/harmony-classlib/commit/1d6e180b769aaf39b68c0d120d6fd68bcef84711",
        "bug_id": "harmony-classlib_254",
        "file": [
            {
                "sha": "84748111a51761a2850a7f6141c3aefd05a841c8",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -77,7 +77,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "84748111a51761a2850a7f6141c3aefd05a841c8",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -77,7 +77,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "71daa101afc7b1c1e225122dbf887b7a22121391",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -80,7 +80,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "84748111a51761a2850a7f6141c3aefd05a841c8",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -77,7 +77,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "028581ecbc18abe060e29c7a0c700c36006d01af",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -81,7 +81,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "0f2074d2a93e3d25d15e0938d9d8e78836ff343d",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -88,7 +88,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "84748111a51761a2850a7f6141c3aefd05a841c8",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -77,7 +77,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "84748111a51761a2850a7f6141c3aefd05a841c8",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -77,7 +77,6 @@ javax/swing/plaf/basic/BasicComboPopupTest.java\n javax/swing/plaf/basic/BasicEditorPaneUITest.java\n javax/swing/plaf/basic/BasicGraphicsUtilsTest.java\n javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java\n-javax/swing/plaf/basic/BasicMenuItemUITest.java\n javax/swing/plaf/basic/BasicOptionPaneUI_ButtonAreaLayoutTest.java\n javax/swing/plaf/basic/BasicRadioButtonMenuItemUITest.java\n javax/swing/plaf/basic/BasicRootPaneUITest.java",
                "deletions": 1
            },
            {
                "sha": "1c539e6b6a85c8ab37a3e0587603b9b3ad57985c",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicMenuItemUI.java?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -192,6 +192,9 @@ public void installUI(final JComponent c) {\n     }\n \n     public void uninstallUI(final JComponent c) {\n+        // Fix for HARMONY-2704, for compatibility with RI\n+        JMenuItem jMenuItem = (JMenuItem) c;\n+\n         uninstallKeyboardActions();\n         uninstallListeners();\n         uninstallComponents(menuItem);",
                "deletions": 0
            },
            {
                "sha": "17946fd137ad4157b39f7d09716e002a0beffbcf",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/3eee9feac66de943191a92971a6034b91d0d5456/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicMenuItemUITest.java?ref=3eee9feac66de943191a92971a6034b91d0d5456",
                "patch": "@@ -34,6 +34,7 @@\n import javax.swing.JMenu;\n import javax.swing.JMenuBar;\n import javax.swing.JMenuItem;\n+import javax.swing.JOptionPane;\n import javax.swing.KeyStroke;\n import javax.swing.MenuElement;\n import javax.swing.MenuSelectionManager;\n@@ -138,6 +139,13 @@ public void testInstallUninstallUI() {\n         assertNull(SwingUtilities.getUIActionMap(item));\n         assertNull(menuItemUI.mouseInputListener);\n         assertEquals(0, item.getComponentCount());\n+\n+        try { //Regression test for HARMONY-2704\n+            menuItemUI.uninstallUI(new JOptionPane());\n+            fail(\"ClassCastException should have been thrown\");\n+        } catch (ClassCastException e) {\n+            // Expected\n+        }\n     }\n \n     /*",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2706] [classlib][swing]\njavax.swing.plaf.basic.BasicMenuBarUI.uninstallDefaults() throws\nunspecified NPE\".  I modified the test slightly to let junit handle the\nexceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496057 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86",
        "parent": "https://github.com/apache/harmony-classlib/commit/3eee9feac66de943191a92971a6034b91d0d5456",
        "bug_id": "harmony-classlib_255",
        "file": [
            {
                "sha": "bbe0a491c835a78398761d5da09473bdd65eeaca",
                "filename": "modules/swing/src/main/java/common/javax/swing/LookAndFeel.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86/modules/swing/src/main/java/common/javax/swing/LookAndFeel.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86/modules/swing/src/main/java/common/javax/swing/LookAndFeel.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/LookAndFeel.java?ref=754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86",
                "patch": "@@ -157,7 +157,7 @@ public static void installBorder(final JComponent comp, final String borderName)\n     }\n \n     public static void uninstallBorder(final JComponent comp) {\n-        if (Utilities.isUIResource(comp.getBorder())) {\n+        if (comp != null && Utilities.isUIResource(comp.getBorder())) {\n             comp.setBorder(null);\n         }\n     }",
                "deletions": 1
            },
            {
                "sha": "417baa8038fb03f5a257b2d6637a067d515d5a60",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/LookAndFeelTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86/modules/swing/src/test/api/java/common/javax/swing/LookAndFeelTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86/modules/swing/src/test/api/java/common/javax/swing/LookAndFeelTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/LookAndFeelTest.java?ref=754f97ccbb9e6dbd0a5dc3b914ba28e314b4bf86",
                "patch": "@@ -156,7 +156,7 @@ public void testInstallColorAndFonts() {\n         assertEquals(UIManager.get(\"CheckBox.font\"), label.getFont());\n     }\n \n-    public void testInstallUninstallBorder() {\n+    public void testInstallUninstallBorder() throws NullPointerException {\n         lf = new MetalLookAndFeel();\n         JPanel p = new JPanel();\n         UIDefaults defaults = lf.getDefaults();\n@@ -170,6 +170,16 @@ public void testInstallUninstallBorder() {\n         assertEquals(UIManager.get(\"Menu.border\"), p.getBorder());\n         LookAndFeel.uninstallBorder(p);\n         assertNull(p.getBorder());\n+\n+        BasicMenuBarUIExt m = \n+            new BasicMenuBarUIExt();\n+        m.uninstallDefaults(); \n+    }\n+\n+    class BasicMenuBarUIExt extends javax.swing.plaf.basic.BasicMenuBarUI {\n+        public void uninstallDefaults() {\n+            super.uninstallDefaults();\n+        }\n     }\n \n     public void testLoadKeyBindings() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2637] [classlib][swing]\njavax.swing.plaf.basic.BasicLabelUI.uninstallDefaults(JLabel label) throws\nNPE while RI doesn't\".\tI modified the test slightly to let junit handle\nthe exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495985 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d2a2681471f7c9322808892a870d6ae57387ce49",
        "parent": "https://github.com/apache/harmony-classlib/commit/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7",
        "bug_id": "harmony-classlib_256",
        "file": [
            {
                "sha": "9de26de7b0a8a2c208545fd8ff64469210798dd6",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicLabelUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d2a2681471f7c9322808892a870d6ae57387ce49/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicLabelUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d2a2681471f7c9322808892a870d6ae57387ce49/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicLabelUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicLabelUI.java?ref=d2a2681471f7c9322808892a870d6ae57387ce49",
                "patch": "@@ -151,6 +151,9 @@ protected void installDefaults(final JLabel label) {\n     }\n \n     protected void uninstallDefaults(final JLabel label) {\n+        if (label == null) {\n+            return;\n+        }\n         Utilities.uninstallColorsAndFont(label);\n         LookAndFeel.uninstallBorder(label);\n     }",
                "deletions": 0
            },
            {
                "sha": "4a70dce927ca91c7c04bb32d5fa4a8abf37042ff",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicLabelUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d2a2681471f7c9322808892a870d6ae57387ce49/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicLabelUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d2a2681471f7c9322808892a870d6ae57387ce49/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicLabelUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicLabelUITest.java?ref=d2a2681471f7c9322808892a870d6ae57387ce49",
                "patch": "@@ -102,4 +102,22 @@ public void testInstallUninstallComponents() throws Exception {\n         ui.installComponents(label);\n         assertEquals(0, label.getComponentCount());\n     }\n+    \n+    private class BasicLabelUIForTest extends BasicLabelUI { \n+        public BasicLabelUIForTest(){ \n+            super(); \n+        } \n+\n+        public void uninstallDefaults(JLabel l) { \n+            super.uninstallDefaults(l); \n+        } \n+    } \n+    \n+    /**\n+     * Regression test for HARMONY-2637\n+     * */\n+    public void testUninstallDefaults() throws NullPointerException { \n+       BasicLabelUIForTest bu = new BasicLabelUIForTest(); \n+       bu.uninstallDefaults(null); \n+    } \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2654] [classlib][swing]\njavax.swing.plaf.basic.BasicPopupMenuUI.installKeyboardActions() throws\nunspecified NPE\".  I fixed the stack overflow caused by the missing\n\"super.\" in the test.  Please test your tests!\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495992 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/064a6a970556855e73dfa01b9c285f35e4c9390b",
        "parent": "https://github.com/apache/harmony-classlib/commit/fa36c0a9b13ebbbb5e6f2c8de3bab1307282ec36",
        "bug_id": "harmony-classlib_257",
        "file": [
            {
                "sha": "9529f2de81c8c7b94a071fb2132ac96cefe2ead0",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/064a6a970556855e73dfa01b9c285f35e4c9390b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/064a6a970556855e73dfa01b9c285f35e4c9390b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicPopupMenuUI.java?ref=064a6a970556855e73dfa01b9c285f35e4c9390b",
                "patch": "@@ -56,6 +56,9 @@ protected void uninstallDefaults() {\n     }\n \n     protected void installKeyboardActions() {\n+        if (popupMenu == null) {\n+            return;\n+        }\n         Utilities.installKeyboardActions(popupMenu, JComponent.WHEN_FOCUSED,\n                                          PROPERTY_PREFIX + \".selectedWindowInputMapBindings\",\n                                          PROPERTY_PREFIX + \".selectedWindowInputMapBindings.RightToLeft\");",
                "deletions": 0
            },
            {
                "sha": "8e9031b3ef5adb2dd9f417baf2ff5918b203cf8a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/064a6a970556855e73dfa01b9c285f35e4c9390b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/064a6a970556855e73dfa01b9c285f35e4c9390b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java",
                "status": "modified",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicPopupMenuUITest.java?ref=064a6a970556855e73dfa01b9c285f35e4c9390b",
                "patch": "@@ -176,4 +176,19 @@ public void testInstallUninstallListeners() {\n             assertEquals(0, menu.getPopupMenuListeners().length);\n         }\n     }\n+    \n+    /**\n+     * Regression test for HARMONY-2654 \n+     * */\n+    public void testInstallKeyboardActions() throws NullPointerException { \n+        BasicPopupMenuUIForTest localBasicPopupMenuUI = new BasicPopupMenuUIForTest(); \n+        localBasicPopupMenuUI.installKeyboardActions(); \n+    } \n+\n+\n+    class BasicPopupMenuUIForTest extends BasicPopupMenuUI { \n+        public void installKeyboardActions () { \n+            super.installKeyboardActions(); \n+        } \n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2636] [classlib][swing]\njavax.swing.plaf.basic.BasicSeparatorUI.uninstallDefaults(JSeparator s)\nthrows NPE while RI doesn't\".  I made the small correction mentioned in the\nJIRA comment.  Next time please test your test!\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495984 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7",
        "parent": "https://github.com/apache/harmony-classlib/commit/9b65cdcf20b25995193b52d92464ca00bc7a5fc4",
        "bug_id": "harmony-classlib_258",
        "file": [
            {
                "sha": "918bd03e10ee6923d4ddff237bfb33fc871209f1",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSeparatorUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSeparatorUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSeparatorUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSeparatorUI.java?ref=d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7",
                "patch": "@@ -61,6 +61,9 @@ protected void installDefaults(final JSeparator s) {\n     }\n \n     protected void uninstallDefaults(final JSeparator s) {\n+        if (s == null) {\n+            return;\n+        }\n         Utilities.uninstallColorsAndFont(s);\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "8b5473ab13c5c0ea7aa58b57466d193b740bc97f",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSeparatorUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSeparatorUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSeparatorUITest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSeparatorUITest.java?ref=d30e83fc5a4f7a4c513e1db6d6c9bad1851016b7",
                "patch": "@@ -92,4 +92,22 @@ public void testInstallUninstallDefaults() {\n      */\n     public void testInstallUninstallListeners() {\n     }\n+    \n+    /**\n+     * Auxiliary class for testUninstallDefaults()\n+     * */\n+    class BasicSeparatorUIForTest extends BasicSeparatorUI\n+    {\n+        public void uninstallDefaults(JSeparator s){\n+            super.uninstallDefaults(s);\n+        }\n+    }\n+\n+    /**\n+     * Regression test for HARMONY-2636\n+     * */\n+    public void testUninstallDefaults() throws NullPointerException {\n+        BasicSeparatorUIForTest localBasicSeparatorUI = new BasicSeparatorUIForTest();\n+        localBasicSeparatorUI.uninstallDefaults(null);\n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2623] [classlib][swing] JScrollBar() throw\nunspecified NPE instead of IAE\".  I fixed the syntax error in test patch.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495972 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7",
        "parent": "https://github.com/apache/harmony-classlib/commit/00ebe37a6af21c2ae6eacb557b1ef49d507fb849",
        "bug_id": "harmony-classlib_259",
        "file": [
            {
                "sha": "a5569e298a16cb05d4769b733de8993c709f08f3",
                "filename": "modules/swing/src/main/java/common/javax/swing/JScrollBar.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7/modules/swing/src/main/java/common/javax/swing/JScrollBar.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7/modules/swing/src/main/java/common/javax/swing/JScrollBar.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JScrollBar.java?ref=2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7",
                "patch": "@@ -119,6 +119,11 @@ public JScrollBar(final int orientation) {\n \n     public JScrollBar(final int orientation, final int value, final int extent, final int min, final int max) {\n         model = new DefaultBoundedRangeModel(value, extent, min, max);\n+\n+        if (orientation != HORIZONTAL && orientation != VERTICAL) {\n+            throw new IllegalArgumentException(\"Orientation is not HORIZONTAL or VERTICAL\");\n+        } \n+\n         this.orientation = orientation;\n         blockIncrement = extent;\n ",
                "deletions": 0
            },
            {
                "sha": "6eebb64e7dd60d07fb6f7f6a02aeaccd4fad7f16",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JScrollBarTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7/modules/swing/src/test/api/java/common/javax/swing/JScrollBarTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7/modules/swing/src/test/api/java/common/javax/swing/JScrollBarTest.java",
                "status": "modified",
                "changes": 11,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JScrollBarTest.java?ref=2b71e2ca8ed73f298a3b552563ab0d1d7be23bd7",
                "patch": "@@ -52,6 +52,17 @@ protected void tearDown() throws Exception {\n         testList = null;\n     }\n \n+    public void testConstructor() throws Exception {\n+        try {         \n+            new JScrollBar(2000, 512, 128, 16, 10001); \n+            fail(\"IllegalArgumentException should be thrown\");\n+        } catch (NullPointerException npe) {    \n+            fail(\"NPE should not be thrown\");            \n+        } catch (IllegalArgumentException iae) {\n+            // PASSED\n+        }\n+    }\n+\n     public void testGetAccessibleContext() throws Exception {\n         JScrollBar.AccessibleJScrollBar accJScrollBar = (JScrollBar.AccessibleJScrollBar) bar\n                 .getAccessibleContext();",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2619] [classlib][swing]\njavax.swing.LayoutFocusTraversalPolicy.getComponentAfter() throws NPE\ninstead of IllegalArgumentException\".  I also removed this test from the\nLinux exclude lists.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495966 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0fae0cd33205cd2982b94a3de259b79a2ab08f82",
        "parent": "https://github.com/apache/harmony-classlib/commit/a48c3e13d3aecc80ae0bc32900c73804821579ba",
        "bug_id": "harmony-classlib_260",
        "file": [
            {
                "sha": "521ad2ed5c6dfcc0f3ee8fe3f2c78b1f72035944",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -65,7 +65,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "521ad2ed5c6dfcc0f3ee8fe3f2c78b1f72035944",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -65,7 +65,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "817ecf728a81df8bc415ad04a4ceefd87b4b7c7e",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -68,7 +68,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "521ad2ed5c6dfcc0f3ee8fe3f2c78b1f72035944",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -65,7 +65,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "c4bda344555a537763bebdc0cbf618b41052daeb",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -69,7 +69,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "13944c67f8515d7dafbce8583052346a02d43ef9",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -76,7 +76,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "521ad2ed5c6dfcc0f3ee8fe3f2c78b1f72035944",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -65,7 +65,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "521ad2ed5c6dfcc0f3ee8fe3f2c78b1f72035944",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -65,7 +65,6 @@ javax/swing/JTextArea_MultithreadedTest.java\n javax/swing/JTextFieldTest.java\n javax/swing/JViewportTest.java\n javax/swing/JWindowTest.java\n-javax/swing/LayoutFocusTraversalPolicyTest.java\n javax/swing/OverlayLayoutTest.java\n javax/swing/PopupFactoryRTest.java\n javax/swing/PopupFactoryTest.java",
                "deletions": 1
            },
            {
                "sha": "6c690a41821d8b400f184a1f7c8610c6e9cdde0f",
                "filename": "modules/swing/src/main/java/common/javax/swing/LayoutFocusTraversalPolicy.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/src/main/java/common/javax/swing/LayoutFocusTraversalPolicy.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/src/main/java/common/javax/swing/LayoutFocusTraversalPolicy.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/LayoutFocusTraversalPolicy.java?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -40,21 +40,39 @@ public LayoutFocusTraversalPolicy() {\n     }\n \n     public Component getComponentBefore(final Container focusCycleRoot, final Component component) {\n+        if (focusCycleRoot == null) {\n+            throw new IllegalArgumentException(\"focusCycleRoot must not be null\");\n+        }\n+        if (component == null) {\n+            throw new IllegalArgumentException(\"component must not be null\");\n+        }\n         ((LayoutComparator)getComparator()).setOrientation(focusCycleRoot.getComponentOrientation());\n         return super.getComponentBefore(focusCycleRoot, component);\n     }\n \n     public Component getComponentAfter(final Container focusCycleRoot, final Component component) {\n+        if (focusCycleRoot == null) {\n+            throw new IllegalArgumentException(\"focusCycleRoot must not be null\");\n+        }\n+        if (component == null) {\n+            throw new IllegalArgumentException(\"component must not be null\");\n+        }\n         ((LayoutComparator)getComparator()).setOrientation(focusCycleRoot.getComponentOrientation());\n         return super.getComponentAfter(focusCycleRoot, component);\n     }\n \n     public Component getLastComponent(final Container focusCycleRoot) {\n+        if (focusCycleRoot == null) {\n+            throw new IllegalArgumentException(\"focusCycleRoot must not be null\");\n+        }\n         ((LayoutComparator)getComparator()).setOrientation(focusCycleRoot.getComponentOrientation());\n         return super.getLastComponent(focusCycleRoot);\n     }\n \n     public Component getFirstComponent(final Container focusCycleRoot) {\n+        if (focusCycleRoot == null) {\n+            throw new IllegalArgumentException(\"focusCycleRoot must not be null\");\n+        }\n         ((LayoutComparator)getComparator()).setOrientation(focusCycleRoot.getComponentOrientation());\n         return super.getFirstComponent(focusCycleRoot);\n     }",
                "deletions": 0
            },
            {
                "sha": "adebf3350360a1f4346ac5b3d793cb9e1ba3324a",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/LayoutFocusTraversalPolicyTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/src/test/api/java/common/javax/swing/LayoutFocusTraversalPolicyTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0fae0cd33205cd2982b94a3de259b79a2ab08f82/modules/swing/src/test/api/java/common/javax/swing/LayoutFocusTraversalPolicyTest.java",
                "status": "modified",
                "changes": 72,
                "additions": 72,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/LayoutFocusTraversalPolicyTest.java?ref=0fae0cd33205cd2982b94a3de259b79a2ab08f82",
                "patch": "@@ -116,6 +116,31 @@ public void testGetComponentBefore() throws Exception {\n         assertEquals(button4, policy.getComponentBefore(cycleRoot, button1));\n     }\n \n+    public void testGetComponentBefore_Null() throws Exception {\n+        JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n+\n+        try {\n+            policy.getComponentBefore(cycleRoot, null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            policy.getComponentBefore(null, button1);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            policy.getComponentBefore(null, null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testGetComponentAfter() throws Exception {\n         JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n         assertEquals(button1, policy.getComponentAfter(cycleRoot, button4));\n@@ -129,20 +154,67 @@ public void testGetComponentAfter() throws Exception {\n         assertEquals(button4, policy.getComponentAfter(cycleRoot, button3));\n     }\n \n+    public void testGetComponentAfter_Null() throws Exception {\n+        JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n+\n+        try {\n+            policy.getComponentAfter(cycleRoot, null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            policy.getComponentAfter(null, button1);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+\n+        try {\n+            policy.getComponentAfter(null, null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testGetLastComponent() throws Exception {\n         JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n         assertEquals(button1, policy.getLastComponent(cycleRoot));\n         cycleRoot = createTestPanel(ComponentOrientation.RIGHT_TO_LEFT);\n         assertEquals(button1, policy.getLastComponent(cycleRoot));\n     }\n \n+    public void testGetLastComponent_Null() throws Exception {\n+        JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n+\n+        try {\n+            policy.getLastComponent(null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testGetFirstComponent() throws Exception {\n         JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n         assertEquals(button2, policy.getFirstComponent(cycleRoot));\n         cycleRoot = createTestPanel(ComponentOrientation.RIGHT_TO_LEFT);\n         assertEquals(button2, policy.getFirstComponent(cycleRoot));\n     }\n \n+    public void testGetFirstComponent_Null() throws Exception {\n+        JPanel cycleRoot = createTestPanel(ComponentOrientation.LEFT_TO_RIGHT);\n+\n+        try {\n+            policy.getFirstComponent(null);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        }\n+    }\n+\n     private JPanel createTestPanel(final ComponentOrientation co) throws Exception {\n         JPanel result = new JPanel(new GridLayout(2, 2));\n         frame.getContentPane().add(result);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2599] [classlib][swing]\njavax.swing.JInternalFrame.JDesktopIcon.getDesktopPane() throws NPE\".  I\nmodified the test slightly to let junit handle the exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495934 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/98ad25e1bbb0194a277f5e0c9e7023843e2cf634",
        "parent": "https://github.com/apache/harmony-classlib/commit/42ba91d8aaaecac147ccd38dd94cd9804b42603a",
        "bug_id": "harmony-classlib_261",
        "file": [
            {
                "sha": "a72f2770d89a70f2be888e7f904277e5836dd3d9",
                "filename": "modules/swing/src/main/java/common/javax/swing/JInternalFrame.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98ad25e1bbb0194a277f5e0c9e7023843e2cf634/modules/swing/src/main/java/common/javax/swing/JInternalFrame.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98ad25e1bbb0194a277f5e0c9e7023843e2cf634/modules/swing/src/main/java/common/javax/swing/JInternalFrame.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JInternalFrame.java?ref=98ad25e1bbb0194a277f5e0c9e7023843e2cf634",
                "patch": "@@ -170,9 +170,13 @@ public JDesktopPane getDesktopPane() {\n             // so, we cannot write here just\n             // return getInternalFrame().getDesktopPane();\n             Container result = SwingUtilities.getAncestorOfClass(JDesktopPane.class, this);\n+\n             if (result == null) {\n-                return getInternalFrame().getDesktopPane();\n+                if(getInternalFrame() != null) {\n+                    result = getInternalFrame().getDesktopPane();\n+                }\n             }\n+\n             return (JDesktopPane) result;\n         }\n ",
                "deletions": 1
            },
            {
                "sha": "9e7ccf7c6a3351e3a96f860359bcc2d11acce21e",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JInternalFrameTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98ad25e1bbb0194a277f5e0c9e7023843e2cf634/modules/swing/src/test/api/java/common/javax/swing/JInternalFrameTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98ad25e1bbb0194a277f5e0c9e7023843e2cf634/modules/swing/src/test/api/java/common/javax/swing/JInternalFrameTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JInternalFrameTest.java?ref=98ad25e1bbb0194a277f5e0c9e7023843e2cf634",
                "patch": "@@ -1129,7 +1129,7 @@ public void testSetGetDesktopIcon() {\n     /*\n      * Class under test for JDesktopPane getDesktopPane()\n      */\n-    public void testGetDesktopPane() {\n+    public void testGetDesktopPane() throws NullPointerException {\n         // no desktopPane\n         assertNull(\"desktopPane is null by default\", frame.getDesktopPane());\n         //JInternalFrame.JDesktopIcon icon = new JInternalFrame.JDesktopIcon(frame);\n@@ -1149,6 +1149,11 @@ public void testGetDesktopPane() {\n         //desktop.remove(frame.getDesktopIcon());\n         //frame.setDesktopIcon(null);\n         //assertNull(\"desktopPane is null\", frame.getDesktopPane());\n+\n+        JInternalFrame jf = new JInternalFrame();\n+        JInternalFrame.JDesktopIcon fc = new JInternalFrame.JDesktopIcon(jf);\n+        fc.setInternalFrame(null);\n+        assertNull(fc.getDesktopPane());              \n     }\n \n     /*",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2598] [classlib][awt]\njava.awt.Graphics2D.drawLine throws NPE if color is set to null\".  I\nmodified the test slightly to let junit handle the exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495931 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/cceb7fbd08a70f882738757ddf2be389abfa28bf",
        "parent": "https://github.com/apache/harmony-classlib/commit/2810686702d194a299958240539c597eb39b4b5b",
        "bug_id": "harmony-classlib_262",
        "file": [
            {
                "sha": "a33c38b3d03f8a4bae465ae7c5034f2a7abaaeae",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/gl/CommonGraphics2D.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/cceb7fbd08a70f882738757ddf2be389abfa28bf/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/CommonGraphics2D.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/cceb7fbd08a70f882738757ddf2be389abfa28bf/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/CommonGraphics2D.java",
                "status": "modified",
                "changes": 12,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/CommonGraphics2D.java?ref=cceb7fbd08a70f882738757ddf2be389abfa28bf",
                "patch": "@@ -130,9 +130,9 @@\n     // Clipping things\n     protected MultiRectArea clip = null;\n \n-    protected Paint paint = Color.BLACK;\n-    protected Color fgColor = Color.BLACK;\n-    protected Color bgColor = Color.WHITE;\n+    protected Paint paint = Color.WHITE;\n+    protected Color fgColor = Color.WHITE;\n+    protected Color bgColor = Color.BLACK;\n \n     protected Composite composite = AlphaComposite.SrcOver;\n \n@@ -978,8 +978,10 @@ public void setClip(Shape s) {\n \n     @Override\n     public void setColor(Color color) {\n-        fgColor = color;\n-        paint = color;\n+        if (color != null) {\n+            fgColor = color;\n+            paint = color;\n+        }\n     }\n \n     @Override",
                "deletions": 5
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2594] [classlib][swing]\njavax.swing.text.StyledEditorKit.createInputAttributes(Element element,\nMutableAttributeSet set) doesn't throw NPE when any of arguments is null\".\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495930 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2810686702d194a299958240539c597eb39b4b5b",
        "parent": "https://github.com/apache/harmony-classlib/commit/214435ff538b7f5cf851090675a33499c3609df1",
        "bug_id": "harmony-classlib_263",
        "file": [
            {
                "sha": "4f255de6651d1fb305dc60c6711ee35183077e83",
                "filename": "modules/swing/src/main/java/common/javax/swing/text/StyledEditorKit.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2810686702d194a299958240539c597eb39b4b5b/modules/swing/src/main/java/common/javax/swing/text/StyledEditorKit.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2810686702d194a299958240539c597eb39b4b5b/modules/swing/src/main/java/common/javax/swing/text/StyledEditorKit.java",
                "status": "modified",
                "changes": 3,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/text/StyledEditorKit.java?ref=2810686702d194a299958240539c597eb39b4b5b",
                "patch": "@@ -358,9 +358,6 @@ public Document createDefaultDocument() {\n \n     protected void createInputAttributes(final Element element,\n                                          final MutableAttributeSet set) {\n-        if (element == null || set == null) {\n-            return;\n-        }\n         AttributeSet as = element.getAttributes();\n         set.removeAttributes(set);\n         for (Enumeration keys = as.getAttributeNames();",
                "deletions": 3
            },
            {
                "sha": "c5f8d138523f309b13f8fbdb538e05c0648c78db",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/text/StyledEditorKitTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2810686702d194a299958240539c597eb39b4b5b/modules/swing/src/test/api/java/common/javax/swing/text/StyledEditorKitTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2810686702d194a299958240539c597eb39b4b5b/modules/swing/src/test/api/java/common/javax/swing/text/StyledEditorKitTest.java",
                "status": "modified",
                "changes": 98,
                "additions": 98,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/text/StyledEditorKitTest.java?ref=2810686702d194a299958240539c597eb39b4b5b",
                "patch": "@@ -20,9 +20,12 @@\n  */\n package javax.swing.text;\n \n+import java.util.Enumeration;\n+\n import javax.swing.Action;\n import javax.swing.JEditorPane;\n import javax.swing.SwingTestCase;\n+import javax.swing.event.ChangeListener;\n \n public class StyledEditorKitTest extends SwingTestCase {\n     StyledEditorKit kit;\n@@ -280,4 +283,99 @@ public void testGetViewFactory() {\n \n     public void testInstallJEditorPane() {\n     }\n+    \n+    \n+    \n+    /**\n+     * Regression test for HARMONY-2594\n+     * */\n+    public void testcreateInputAttributes() {\n+        MyStyledEditorKit msek = new MyStyledEditorKit();\n+        MutableAttributeSet set = new Style() {\n+            public void removeChangeListener(ChangeListener p0) {\n+                return;\n+            }\n+            public void addChangeListener(ChangeListener p0) {\n+                return;\n+            }\n+            public String getName() {\n+                return \"AA\";\n+            }\n+            public void setResolveParent(AttributeSet p0) {\n+                return;\n+            }\n+            public void removeAttributes(AttributeSet p0) {\n+                return;\n+            }\n+            public void removeAttributes(Enumeration p0) {\n+                return;\n+            }\n+            public void removeAttribute(Object p0) {\n+                return;\n+            }\n+            public void addAttributes(AttributeSet p0) {\n+                return;\n+            }\n+            public void addAttribute(Object p0, Object p1) {\n+                return;\n+            }\n+            public AttributeSet getResolveParent() {\n+                return null;\n+            }\n+            public boolean containsAttributes(AttributeSet p0) {\n+                return false;\n+            }\n+            public boolean containsAttribute(Object p0, Object p1) {\n+                return false;\n+            }\n+            public Enumeration getAttributeNames() {\n+                return null;\n+            }\n+            public Object getAttribute(Object p0) {\n+                return null;\n+            }\n+            public AttributeSet copyAttributes() {\n+                return null;\n+            }\n+            public boolean isEqual(AttributeSet p0) {\n+                return false;\n+            }\n+            public boolean isDefined(Object p0) {\n+                return false;\n+            }\n+            public int getAttributeCount() {\n+                return 0;\n+            }\n+        };\n+        try {\n+            msek.createInputAttributes(null, set);\n+            fail(\"NPE not thrown when Element is null!\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    /**\n+     * Regression test for HARMONY-2594\n+     * */\n+    public void testCreateInputAttributes2() {\n+        MyStyledEditorKit msek = new MyStyledEditorKit();\n+        try {\n+            msek.createInputAttributes(new SimpleElement(\"\"), null);\n+            fail(\"NPE not thrown when MutableAttributeSet is null!\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+    \n+    class MyStyledEditorKit extends StyledEditorKit {\n+        public MyStyledEditorKit() {\n+            super();\n+        }\n+\n+        public void createInputAttributes(Element element, MutableAttributeSet set) {\n+            super.createInputAttributes(element, set);\n+        }\n+    }\n+    \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2578] [classlib][swing]\njavax.swing.Box.createRigidArea(null) throws NPE\".  I modified the test\nslightly to let junit handle the exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495923 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/89951bad9eaf62988927d5fb4c0d3548adff5f37",
        "parent": "https://github.com/apache/harmony-classlib/commit/64812c672214353213c1d2fb091f15f75f6607e8",
        "bug_id": "harmony-classlib_264",
        "file": [
            {
                "sha": "6954da4ec9a51c4449d823fd320cb618960bbf0d",
                "filename": "modules/swing/src/main/java/common/javax/swing/Box.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/89951bad9eaf62988927d5fb4c0d3548adff5f37/modules/swing/src/main/java/common/javax/swing/Box.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/89951bad9eaf62988927d5fb4c0d3548adff5f37/modules/swing/src/main/java/common/javax/swing/Box.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/Box.java?ref=89951bad9eaf62988927d5fb4c0d3548adff5f37",
                "patch": "@@ -121,6 +121,8 @@ public void setLayout(LayoutManager layout) {\n     }\n \n     public static Component createRigidArea(Dimension size) {\n+        size = (size == null ? new Dimension(0, 0) : size);\n+        \n         return new Filler(new Dimension(size), new Dimension(size), new Dimension(size));\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "ad2764b7a7fe3e8f2369370553e7f256fa23b2e2",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/BoxTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/89951bad9eaf62988927d5fb4c0d3548adff5f37/modules/swing/src/test/api/java/common/javax/swing/BoxTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/89951bad9eaf62988927d5fb4c0d3548adff5f37/modules/swing/src/test/api/java/common/javax/swing/BoxTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/BoxTest.java?ref=89951bad9eaf62988927d5fb4c0d3548adff5f37",
                "patch": "@@ -53,13 +53,15 @@ public void testSetLayoutLayoutManager() {\n         assertTrue(\"Exception is thrown \", thrown);\n     }\n \n-    public void testCreateRigidArea() {\n+    public void testCreateRigidArea() throws NullPointerException {\n         Dimension size = new Dimension(100, 100);\n         Component box = Box.createRigidArea(size);\n         assertEquals(\"Minimum size initialized \", size, box.getMinimumSize());\n         assertEquals(\"Preferred size initialized \", size, box.getPreferredSize());\n         assertEquals(\"Maximum size initialized \", size, box.getMaximumSize());\n         assertFalse(\"Opaqueness initialized \", box.isOpaque());\n+\n+        Box.createRigidArea(null);             \n     }\n \n     public void testCreateVerticalBox() {",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from \"[#HARMONY-2549] [classlib][swing]\njavax.swing.DebugGraphics() throws NPE\".  I modified the test slightly to\nlet junit handle the exceptions.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495914 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/de2e1ba5776f61baef0d3a83583c545702ced30e",
        "parent": "https://github.com/apache/harmony-classlib/commit/2f0d7e5929656615ae00a67fddfef0c76ebeda47",
        "bug_id": "harmony-classlib_265",
        "file": [
            {
                "sha": "77ab49a466c03876407a017c4e64f657f0fda5db",
                "filename": "modules/swing/src/main/java/common/javax/swing/DebugGraphics.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/de2e1ba5776f61baef0d3a83583c545702ced30e/modules/swing/src/main/java/common/javax/swing/DebugGraphics.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/de2e1ba5776f61baef0d3a83583c545702ced30e/modules/swing/src/main/java/common/javax/swing/DebugGraphics.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/DebugGraphics.java?ref=de2e1ba5776f61baef0d3a83583c545702ced30e",
                "patch": "@@ -168,7 +168,7 @@ public static PrintStream logStream() {\n     }\n \n     public DebugGraphics(Graphics g, JComponent c) {\n-        originalGraphics = g.create();\n+        originalGraphics = (g == null ? null : g.create());\n         component = c;\n         thisNumber = debugGraphicsCount++;\n     }",
                "deletions": 1
            },
            {
                "sha": "0603a7ca4acc11527e112e3005ad22eb8d2caa2e",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/DebugGraphicsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/de2e1ba5776f61baef0d3a83583c545702ced30e/modules/swing/src/test/api/java/common/javax/swing/DebugGraphicsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/de2e1ba5776f61baef0d3a83583c545702ced30e/modules/swing/src/test/api/java/common/javax/swing/DebugGraphicsTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/DebugGraphicsTest.java?ref=de2e1ba5776f61baef0d3a83583c545702ced30e",
                "patch": "@@ -47,4 +47,8 @@ public void testCreate() {\n         DebugGraphics result = (DebugGraphics) debugGraphics.create();\n         assertEquals(debugGraphics.getDebugOptions(), result.getDebugOptions());\n     }\n+\n+    public void testConstructor() throws NullPointerException {\n+        new DebugGraphics();              \n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-2517] [classlib][awt] Compatibility:\njava.awt.RenderingHints(Map&lt;RenderingHints.Key,?&gt; init) constructor\nthrows NPE on Harmony while it works silently on RI\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495876 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2519d310eb9ae7dc124733f82d7f66ace285945a",
        "parent": "https://github.com/apache/harmony-classlib/commit/582e0389e8b6796a20c556f481205c1005149d1f",
        "bug_id": "harmony-classlib_266",
        "file": [
            {
                "sha": "696203fb753019fbe65d5645b6fdb86d60a30cd7",
                "filename": "modules/awt/src/main/java/common/java/awt/RenderingHints.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2519d310eb9ae7dc124733f82d7f66ace285945a/modules/awt/src/main/java/common/java/awt/RenderingHints.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2519d310eb9ae7dc124733f82d7f66ace285945a/modules/awt/src/main/java/common/java/awt/RenderingHints.java",
                "status": "modified",
                "changes": 14,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/RenderingHints.java?ref=2519d310eb9ae7dc124733f82d7f66ace285945a",
                "patch": "@@ -124,12 +124,14 @@ public void putAll(Map<?, ?> m) {\n         } else {\n             Set<?> entries = m.entrySet();\n \n-            Iterator<?> it = entries.iterator();\n-            while (it.hasNext()) {\n-                Map.Entry<?, ?> entry = (Map.Entry<?, ?>) it.next();\n-                Key key = (Key) entry.getKey();\n-                Object val = entry.getValue();\n-                put(key, val);\n+            if (entries != null){\n+                Iterator<?> it = entries.iterator();\n+                while (it.hasNext()) {\n+                    Map.Entry<?, ?> entry = (Map.Entry<?, ?>) it.next();\n+                    Key key = (Key) entry.getKey();\n+                    Object val = entry.getValue();\n+                    put(key, val);\n+                }\n             }\n         }\n     }",
                "deletions": 6
            },
            {
                "sha": "e9db3d3b6a6f902f70ad11760dd19f7ce87dfd5b",
                "filename": "modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/RenderingHintsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2519d310eb9ae7dc124733f82d7f66ace285945a/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/RenderingHintsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2519d310eb9ae7dc124733f82d7f66ace285945a/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/RenderingHintsTest.java",
                "status": "added",
                "changes": 95,
                "additions": 95,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/RenderingHintsTest.java?ref=2519d310eb9ae7dc124733f82d7f66ace285945a",
                "patch": "@@ -0,0 +1,95 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.harmony.awt.tests.java.awt;\n+\n+import java.awt.RenderingHints;\n+import java.util.Collection;\n+import java.util.Map;\n+import java.util.Set;\n+\n+import junit.framework.TestCase;\n+\n+public class RenderingHintsTest extends TestCase {\n+    \n+    public void testConstructor_Null_Map() {\n+        // Regression test HARMONY-2517\n+        Map<RenderingHints.Key,?> localMap = new dummyMap(); \n+        RenderingHints rh = new RenderingHints(localMap); \n+        assertTrue(rh.isEmpty()); \n+    }\n+    \n+    private class dummyMap implements Map<RenderingHints.Key, Object> { \n+        public void clear() { \n+            return; \n+        } \n+\n+        public boolean containsKey(Object p0) { \n+            return false; \n+        } \n+\n+        public boolean containsValue(Object p0) { \n+            return false; \n+        } \n+\n+        public Set<Map.Entry<RenderingHints.Key, Object>> entrySet() { \n+            return null; \n+        } \n+\n+        public boolean equals(Object p0) { \n+            return false; \n+        } \n+\n+        public Object get(Object p0) { \n+            return null; \n+        } \n+\n+        public int hashCode() { \n+            return 0; \n+        } \n+\n+        public boolean isEmpty() { \n+            return false; \n+        } \n+\n+        public Set<RenderingHints.Key> keySet() { \n+            return null; \n+        } \n+\n+        public Object put(RenderingHints.Key p0, Object p1) { \n+            return null; \n+        } \n+\n+        public void putAll(Map p0) { \n+            return; \n+        } \n+\n+        public Object remove(Object p0) { \n+            return null; \n+        } \n+\n+        public int size() { \n+            return 0; \n+        } \n+\n+        public Collection<Object> values() { \n+            return null; \n+        } \n+    }\n+\n+} \n+",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-2069] [classlib][awt] DataFlavor.clone()\nthrows NPE\".  I modified the test slightly to allow junit to handle the\nexception.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495707 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3",
        "parent": "https://github.com/apache/harmony-classlib/commit/36650aee46cd71740f76755b9a2fc7e9a9393fe5",
        "bug_id": "harmony-classlib_267",
        "file": [
            {
                "sha": "e97ddac26b454bb31e8eff51ea273f117676ef13",
                "filename": "modules/awt/src/main/java/common/java/awt/datatransfer/DataFlavor.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3/modules/awt/src/main/java/common/java/awt/datatransfer/DataFlavor.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3/modules/awt/src/main/java/common/java/awt/datatransfer/DataFlavor.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/datatransfer/DataFlavor.java?ref=1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3",
                "patch": "@@ -357,7 +357,8 @@ public Object clone() throws CloneNotSupportedException {\n \n         clone.humanPresentableName = humanPresentableName;\n         clone.representationClass = representationClass;\n-        clone.mimeInfo = (MimeTypeProcessor.MimeType) mimeInfo.clone();\n+        clone.mimeInfo = (mimeInfo != null) ? (MimeTypeProcessor.MimeType)\n+                mimeInfo.clone() : null;\n \n         return clone;\n     }",
                "deletions": 1
            },
            {
                "sha": "8631af94e7f27dd04dde4940683bd15595023d1d",
                "filename": "modules/awt/src/test/api/java/common/java/awt/datatransfer/DataFlavorTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3/modules/awt/src/test/api/java/common/java/awt/datatransfer/DataFlavorTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3/modules/awt/src/test/api/java/common/java/awt/datatransfer/DataFlavorTest.java",
                "status": "modified",
                "changes": 7,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/datatransfer/DataFlavorTest.java?ref=1784e2ae44c4e01c2b0e1a1d42a337eba4c1cfa3",
                "patch": "@@ -433,4 +433,11 @@ public void testHarmony1477Regression() {\n             fail(\"Regression test failed\");\n         }\n     }\n+    \n+    public void testCloneNullMimeInfo()\n+            throws CloneNotSupportedException,NullPointerException {\n+        // Regression for HARMONY-2069\n+        DataFlavor df = new DataFlavor();\n+        df.clone(); \n+    }\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patch from HARMONY-2492 ([classlib][awt] java.awt.dnd.addNotify(null) throws NPE while RI doesn't). DropTargetTest is enabled since all tests pass (at least on Windows)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495654 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b538cb7a3c20c43d02b8d352946a6efff2df1e80",
        "parent": "https://github.com/apache/harmony-classlib/commit/6666615f7323dfc159ce42064639a376aee32fb4",
        "bug_id": "harmony-classlib_268",
        "file": [
            {
                "sha": "6c187bdee07016a2c1ff16ee7f8bbadef456094c",
                "filename": "modules/awt/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.drl?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -28,7 +28,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "6c187bdee07016a2c1ff16ee7f8bbadef456094c",
                "filename": "modules/awt/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.ibm?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -28,7 +28,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "43b9ab1f7622c10d56b313af8abb2b214c021bcd",
                "filename": "modules/awt/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.drl?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -28,7 +28,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "6c187bdee07016a2c1ff16ee7f8bbadef456094c",
                "filename": "modules/awt/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.ibm?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -28,7 +28,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "0cb98f8294eaf6f39263068a32d95a8f5af3b6e8",
                "filename": "modules/awt/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.drl?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -27,7 +27,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "bdf5ba885257f0648d400b42036309e916f200fd",
                "filename": "modules/awt/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.ibm?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -33,7 +33,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "0cb98f8294eaf6f39263068a32d95a8f5af3b6e8",
                "filename": "modules/awt/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.drl?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -27,7 +27,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "0cb98f8294eaf6f39263068a32d95a8f5af3b6e8",
                "filename": "modules/awt/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.ibm?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -27,7 +27,6 @@ java/awt/ScrollPaneAdjustableTest.java\n java/awt/TextAreaTest.java\n java/awt/TextComponentTest.java\n java/awt/TextFieldTest.java\n-java/awt/dnd/DropTargetTest.java\n java/awt/event/ContainerEventTest.java\n java/awt/WinWindowRTest.java\n org/apache/harmony/awt/gl/render/JavaBlitterTest.java",
                "deletions": 1
            },
            {
                "sha": "c2bb6e60d3b7373cda0d56c4c83fb13db6fb2bf7",
                "filename": "modules/awt/src/main/java/common/java/awt/dnd/DropTarget.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/src/main/java/common/java/awt/dnd/DropTarget.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/src/main/java/common/java/awt/dnd/DropTarget.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/dnd/DropTarget.java?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -118,6 +118,10 @@ public void removeNotify(ComponentPeer peer) {\n     }\n \n     public void addNotify(ComponentPeer peer) {\n+        if(component == null) {\n+            return;\n+        }\n+        \n         DTK dtk = DTK.getDTK();\n         DropTargetContextPeer dtp = dtk.createDropTargetContextPeer(context);\n         context.addNotify(dtp);",
                "deletions": 0
            },
            {
                "sha": "db119351614afbfa8d95a36e4d70fd9be3f61349",
                "filename": "modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b538cb7a3c20c43d02b8d352946a6efff2df1e80/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/dnd/DropTargetTest.java?ref=b538cb7a3c20c43d02b8d352946a6efff2df1e80",
                "patch": "@@ -164,6 +164,8 @@ public void testRemoveNotify() {\n     }\n     \n     public void testAddNotify() {\n+        // Regression for HARMONY-2492\n+        new DropTarget().addNotify(null);\n     }\n \n     public void testAddRemoveNotify() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied fix and test patches from \"[#HARMONY-1776] [classlib][swing]\njavax.swing.plaf.basic.BasicTableUI.paint(null, JComponent) does not\nthrow unspecified  NPE\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495558 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2f122b7f61721737e81bfe10a8afdb539f12540b",
        "parent": "https://github.com/apache/harmony-classlib/commit/e5e62d9e5c228664a8256e0000a755c8428c2e17",
        "bug_id": "harmony-classlib_269",
        "file": [
            {
                "sha": "825ab3f426202859cbdb3426df3727d23405947d",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2f122b7f61721737e81bfe10a8afdb539f12540b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2f122b7f61721737e81bfe10a8afdb539f12540b/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTableUI.java?ref=2f122b7f61721737e81bfe10a8afdb539f12540b",
                "patch": "@@ -322,6 +322,9 @@ public Dimension getMaximumSize(final JComponent c) {\n     }\n \n     public void paint(final Graphics g, final JComponent c) {\n+        if (g == null) {\n+            throw new NullPointerException(\"context is null\");\n+        }\n         if (table.getColumnCount() == 0 || table.getRowCount() == 0) {\n             return;\n         }",
                "deletions": 0
            },
            {
                "sha": "3dfe8b09817ea9432a44eb6b2822b4b616d6f23d",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2f122b7f61721737e81bfe10a8afdb539f12540b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2f122b7f61721737e81bfe10a8afdb539f12540b/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java",
                "status": "modified",
                "changes": 11,
                "additions": 10,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTableUITest.java?ref=2f122b7f61721737e81bfe10a8afdb539f12540b",
                "patch": "@@ -124,7 +124,6 @@ public void testGetMinimumMaximumPreferredSize() throws Exception {\n \n     public void testPaint() throws Exception {\n         ui.table = new JTable();\n-        ui.paint(null, null);\n         DefaultTableModel model = (DefaultTableModel) ui.table.getModel();\n         model.addColumn(\"column1\");\n         model.addRow(new Object[] { \"1\" });\n@@ -134,6 +133,16 @@ public void testPaint() throws Exception {\n         ui.paint(g, null);\n     }\n \n+    // Regression test for HARMONY-1776\n+    public void testPaint_Null() throws Exception {\n+        try {\n+            ui.paint(null, null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testInstallDefaults() throws Exception {\n         ui.table = new JTable();\n         ui.installDefaults();",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-2065] [classlib][awt] UnsupportedFlavorException\nthrows unexpected NPE\".  Modified test slightly to let junit handle the\nunexpected exception case.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495568 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/5f4b300c813038d208e1379d8d1c80808d8200c1",
        "parent": "https://github.com/apache/harmony-classlib/commit/2f122b7f61721737e81bfe10a8afdb539f12540b",
        "bug_id": "harmony-classlib_270",
        "file": [
            {
                "sha": "a77adfd653211f361e9fdadc777162eb8b1e13d0",
                "filename": "modules/awt/src/main/java/common/java/awt/datatransfer/UnsupportedFlavorException.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5f4b300c813038d208e1379d8d1c80808d8200c1/modules/awt/src/main/java/common/java/awt/datatransfer/UnsupportedFlavorException.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5f4b300c813038d208e1379d8d1c80808d8200c1/modules/awt/src/main/java/common/java/awt/datatransfer/UnsupportedFlavorException.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/datatransfer/UnsupportedFlavorException.java?ref=5f4b300c813038d208e1379d8d1c80808d8200c1",
                "patch": "@@ -21,6 +21,6 @@\n     private static final long serialVersionUID = 5383814944251665601L;\n \n     public UnsupportedFlavorException(DataFlavor flavor) {\n-        super(\"flavor = \" + flavor.toString()); //$NON-NLS-1$\n+        super(\"flavor = \" + String.valueOf(flavor)); //$NON-NLS-1$\n     }\n }",
                "deletions": 1
            },
            {
                "sha": "f08f78294237c18aad36abc7b0186d15f34f19f5",
                "filename": "modules/awt/src/test/api/java/common/java/awt/datatransfer/UnsupportedFlavorExceptionTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/5f4b300c813038d208e1379d8d1c80808d8200c1/modules/awt/src/test/api/java/common/java/awt/datatransfer/UnsupportedFlavorExceptionTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/5f4b300c813038d208e1379d8d1c80808d8200c1/modules/awt/src/test/api/java/common/java/awt/datatransfer/UnsupportedFlavorExceptionTest.java",
                "status": "added",
                "changes": 15,
                "additions": 15,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/datatransfer/UnsupportedFlavorExceptionTest.java?ref=5f4b300c813038d208e1379d8d1c80808d8200c1",
                "patch": "@@ -0,0 +1,15 @@\n+package java.awt.datatransfer;\n+\n+import junit.framework.TestCase;\n+\n+public class UnsupportedFlavorExceptionTest extends TestCase {\n+\n+    /**\n+     * Test method for\n+     * {@link java.awt.datatransfer.UnsupportedFlavorException#UnsupportedFlavorException(java.awt.datatransfer.DataFlavor)}.\n+     */\n+    public void testUnsupportedFlavorException() throws NullPointerException {\n+        // Regression test for HARMONY-2065\n+        new UnsupportedFlavorException(null);\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-2886 ([classlib][swing] Compatibility: javax.swing.plaf.basic.BasicComboBoxUI.ComboBoxLayoutManager.minimumLayoutSize(null) returns valid result while RI throws NPE)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495282 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/4a5b09cbd39540ee97965fa712ff72e90034bf72",
        "parent": "https://github.com/apache/harmony-classlib/commit/de3138e31cc8dd295721026441e919d421d27d72",
        "bug_id": "harmony-classlib_271",
        "file": [
            {
                "sha": "44104b5d6a236cfe8e070708bf16652b22cb1646",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/4a5b09cbd39540ee97965fa712ff72e90034bf72/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/4a5b09cbd39540ee97965fa712ff72e90034bf72/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java",
                "status": "modified",
                "changes": 6,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicComboBoxUI.java?ref=4a5b09cbd39540ee97965fa712ff72e90034bf72",
                "patch": "@@ -79,10 +79,16 @@ public void removeLayoutComponent(final Component component) {\n         }\n \n         public Dimension preferredLayoutSize(final Container parent) {\n+            if (parent == null) {\n+                throw new NullPointerException(\"parent is null\");\n+            }\n             return new Dimension(0, 0);\n         }\n \n         public Dimension minimumLayoutSize(final Container parent) {\n+            if (parent == null) {\n+                throw new NullPointerException(\"parent is null\");\n+            }\n             return new Dimension(0, 0);\n         }\n ",
                "deletions": 0
            },
            {
                "sha": "3b193300443a57c87af569a5e0fa56123aa2f144",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/4a5b09cbd39540ee97965fa712ff72e90034bf72/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/4a5b09cbd39540ee97965fa712ff72e90034bf72/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicComboBoxUITest.java?ref=4a5b09cbd39540ee97965fa712ff72e90034bf72",
                "patch": "@@ -473,6 +473,25 @@ public void testRemove_NullEditor() throws Exception{\n         BasicComboBoxUI cb = new BasicComboBoxUI();\n         cb.removeEditor();\n     }\n+\n+    public void testComboBoxLayoutManager() throws Exception {\n+        BasicComboBoxUI ui = new BasicComboBoxUI();\n+        BasicComboBoxUI.ComboBoxLayoutManager b = ui.new ComboBoxLayoutManager();\n+\n+        // Regression test for HARMONY-2886\n+        try {\n+            b.minimumLayoutSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+        try {\n+            b.preferredLayoutSize(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n     \n     @SuppressWarnings(\"deprecation\")\n     private void createVisibleCombo() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch HARMONY-2622 ([classlib][swing] Compatibility: javax.swing.JMenuBar.processKeyBinding() for incorrect parameterds throws NPE on Harmony instead of IllegalArgumentException on RI)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@494074 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/cc8e5de1f4926ea76e15abe0e7f486008756f33d",
        "parent": "https://github.com/apache/harmony-classlib/commit/1b203c00a08b8602666f1c23cf99e9ff309fd4af",
        "bug_id": "harmony-classlib_272",
        "file": [
            {
                "sha": "791723299cb3992ad99c2a44b10a1959ab1fac9e",
                "filename": "modules/swing/src/main/java/common/javax/swing/JMenuBar.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/cc8e5de1f4926ea76e15abe0e7f486008756f33d/modules/swing/src/main/java/common/javax/swing/JMenuBar.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/cc8e5de1f4926ea76e15abe0e7f486008756f33d/modules/swing/src/main/java/common/javax/swing/JMenuBar.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/JMenuBar.java?ref=cc8e5de1f4926ea76e15abe0e7f486008756f33d",
                "patch": "@@ -189,7 +189,7 @@ protected void paintBorder(Graphics g) {\n     protected boolean processKeyBinding(KeyStroke ks, KeyEvent event, int condition,\n             boolean pressed) {\n         MenuSelectionManager.defaultManager().processKeyEvent(event);\n-        if (event.isConsumed()) {\n+        if ((event != null) && event.isConsumed()) {\n             return true;\n         }\n         if (super.processKeyBinding(ks, event, condition, pressed)) {",
                "deletions": 1
            },
            {
                "sha": "06b30027b33bdc48c29243acae7650fb5fe7ccf7",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/JMenuBarTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/cc8e5de1f4926ea76e15abe0e7f486008756f33d/modules/swing/src/test/api/java/common/javax/swing/JMenuBarTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/cc8e5de1f4926ea76e15abe0e7f486008756f33d/modules/swing/src/test/api/java/common/javax/swing/JMenuBarTest.java",
                "status": "modified",
                "changes": 20,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/JMenuBarTest.java?ref=cc8e5de1f4926ea76e15abe0e7f486008756f33d",
                "patch": "@@ -21,6 +21,7 @@\n package javax.swing;\n \n import java.awt.Insets;\n+import java.awt.event.KeyEvent;\n import javax.accessibility.AccessibleRole;\n import javax.swing.plaf.MenuBarUI;\n import javax.swing.plaf.basic.BasicMenuBarUI;\n@@ -84,7 +85,24 @@ public void testGetComponentIndex() {\n      * Test method for 'javax.swing.JMenuBar.processKeyBinding(KeyStroke, KeyEvent, int, boolean)'\n      */\n     public void testProcessKeyBinding() {\n-        // TODO implement\n+        JMenuBar jm = new JMenuBar() {\n+            public boolean processKeyBinding(KeyStroke ks, KeyEvent e,\n+                    int condition, boolean pressed) {\n+                return super.processKeyBinding(ks, e, condition, pressed);\n+            }\n+        };\n+        KeyStroke ks = KeyStroke.getKeyStroke('x');\n+\n+        try { // Regression test for HARMONY-2622\n+            jm.processKeyBinding(ks, null, -1, true);\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        } catch (IllegalArgumentException e) {\n+            // Expected\n+        } catch (NullPointerException e) {\n+            fail(\"NullPointerException is thrown instead of IllegalArgumentException\");\n+        }\n+\n+        // TODO implement other checkings\n     }\n \n     /*",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2420: [classlib][prefs] java.util.prefs.AbstractPreferences.exportNode(OutputStream) and java.util.prefs.AbstractPreferences.exportSubtree(OutputStream) throws AssertionError instead of NPE in a case when OutputStream is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489969 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/54c9c40471b5ff1eb74b1549b6896720222c420d",
        "parent": "https://github.com/apache/harmony-classlib/commit/c6cb57f569a43347757ff772eac5ad2c76942869",
        "bug_id": "harmony-classlib_273",
        "file": [
            {
                "sha": "5b21ab991ebd82ddeb9b53c67023a18b76a6e5bf",
                "filename": "modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/54c9c40471b5ff1eb74b1549b6896720222c420d/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/54c9c40471b5ff1eb74b1549b6896720222c420d/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java",
                "status": "modified",
                "changes": 5,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/prefs/src/main/java/java/util/prefs/AbstractPreferences.java?ref=54c9c40471b5ff1eb74b1549b6896720222c420d",
                "patch": "@@ -373,7 +373,7 @@ public void exportNode(OutputStream ostream) throws IOException,\n             BackingStoreException {\n         if(ostream == null) {\n             // prefs.5=Stream is null\n-            throw new AssertionError(Messages.getString(\"prefs.5\"));  //$NON-NLS-1$\n+            throw new NullPointerException(Messages.getString(\"prefs.5\"));  //$NON-NLS-1$\n         }\n         checkState();\n         XMLParser.exportPrefs(this, ostream, false);\n@@ -388,9 +388,8 @@ public void exportSubtree(OutputStream ostream) throws IOException,\n             BackingStoreException {\n         if(ostream == null) {\n             // prefs.5=Stream is null\n-            throw new AssertionError(Messages.getString(\"prefs.5\"));  //$NON-NLS-1$\n+            throw new NullPointerException(Messages.getString(\"prefs.5\"));  //$NON-NLS-1$\n         }\n-\n         checkState();\n         XMLParser.exportPrefs(this, ostream, true);\n     }",
                "deletions": 3
            },
            {
                "sha": "54bbd7f0fd325b6087e5d2bcc58b98ce6a483ebe",
                "filename": "modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/54c9c40471b5ff1eb74b1549b6896720222c420d/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/54c9c40471b5ff1eb74b1549b6896720222c420d/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/prefs/src/test/java/org/apache/harmony/prefs/tests/java/util/prefs/AbstractPreferencesTest.java?ref=54c9c40471b5ff1eb74b1549b6896720222c420d",
                "patch": "@@ -1005,7 +1005,8 @@ public void testExportNode() throws Exception {\n \t\ttry {\n \t\t\tpref.exportNode(null);\n \t\t\tfail();\n-\t\t} catch (AssertionError e) {\n+\t\t} catch (NullPointerException e) {\n+\t\t\t// Expected\n \t\t}\n \n \t\tpref.putBoolean(\"key\", false);\n@@ -1069,7 +1070,8 @@ public void testExportSubtree() throws Exception {\n \t\ttry {\n \t\t\tpref.exportSubtree(null);\n \t\t\tfail();\n-\t\t} catch (AssertionError e) {\n+\t\t} catch (NullPointerException e) {\n+\t\t\t// Expected\n \t\t}\n \t\tByteArrayOutputStream out = new ByteArrayOutputStream();\n \t\tpref.putBoolean(\"key\", false);",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Roll back commit r489362\nPatch for HARMONY-1799 \"[classlib][swing] JTextPane throws NPE after we set null font.\"\n\nThe test BasicTextPaneUITest.java may crash VM. Will reopen the bug report\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489611 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/98a9006edecc281175f40e78f4dd05671c6daa71",
        "parent": "https://github.com/apache/harmony-classlib/commit/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
        "bug_id": "harmony-classlib_274",
        "file": [
            {
                "sha": "20153d6b941e030c51d7a0e5da04b905fce8714b",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -89,6 +89,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "20153d6b941e030c51d7a0e5da04b905fce8714b",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -89,6 +89,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "16dfe6d299a278cc9e25c4f1618465791f82e88d",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -92,6 +92,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "20153d6b941e030c51d7a0e5da04b905fce8714b",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -89,6 +89,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "b5d4db75d1447dad0281b207d4c0ddc381814673",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -93,6 +93,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "c5d42b0bf03055c81e429ae07a9bb601b5af8cf2",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -100,6 +100,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "20153d6b941e030c51d7a0e5da04b905fce8714b",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -89,6 +89,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "20153d6b941e030c51d7a0e5da04b905fce8714b",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -89,6 +89,7 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n+javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 0
            },
            {
                "sha": "0bdd8f154274028e452d153d54d523f702cf83e8",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "status": "modified",
                "changes": 18,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -67,6 +67,9 @@ private void setDefaultStyle(final PropertyChangeEvent e) {\n         }\n \n         final Font f = pane.getFont();\n+        if (f == null) {\n+            return;\n+        }\n \n         final Style style = getDefaultStyle(e);\n \n@@ -80,16 +83,9 @@ protected  String getPropertyPrefix() {\n \n \n     private void updateFontAttributes(final Style style, final Font f) {\n-        if (f == null){\n-            style.removeAttribute(StyleConstants.Italic);\n-            style.removeAttribute(StyleConstants.Bold);\n-            style.removeAttribute(StyleConstants.FontFamily);\n-            style.removeAttribute(StyleConstants.FontSize);\n-        } else {\n-            style.addAttribute(StyleConstants.Italic, Boolean.valueOf(f.isItalic()));\n-            style.addAttribute(StyleConstants.Bold, Boolean.valueOf(f.isBold()));\n-            style.addAttribute(StyleConstants.FontFamily, f.getName());\n-            style.addAttribute(StyleConstants.FontSize, new Integer(f.getSize()));\n-        }\n+        style.addAttribute(StyleConstants.Italic, Boolean.valueOf(f.isItalic()));\n+        style.addAttribute(StyleConstants.Bold, Boolean.valueOf(f.isBold()));\n+        style.addAttribute(StyleConstants.FontFamily, f.getName());\n+        style.addAttribute(StyleConstants.FontSize, new Integer(f.getSize()));\n     }\n }",
                "deletions": 11
            },
            {
                "sha": "4f5bdee7eee965872d1afb60428e354a3b3cb415",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/98a9006edecc281175f40e78f4dd05671c6daa71/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "status": "modified",
                "changes": 33,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java?ref=98a9006edecc281175f40e78f4dd05671c6daa71",
                "patch": "@@ -141,37 +141,4 @@ public void testProPertyChange_FontFamilyName() {\n         assertFalse(font.getFamily().equals(newStyle.getAttribute(StyleConstants.FontFamily)));\n         assertEquals(font.getName(), newStyle.getAttribute(StyleConstants.FontFamily));\n     }\n-    public void testPropertyChange_NullFont() {\n-        // regression test to HARMONY-1799\n-        \n-        textPane = new JTextPane();\n-\n-        textPane.setFont(font);\n-        Style style = textPane.getStyle(StyleContext.DEFAULT_STYLE);\n-        style.addAttribute(StyleConstants.Italic, Boolean.TRUE);\n-        style.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n-        textPane.setFont(null);\n-        assertNull(style.getAttribute(StyleConstants.FontFamily));\n-        assertNull(style.getAttribute(StyleConstants.Italic));\n-        assertNull(style.getAttribute(StyleConstants.Bold));\n-\n-        StyledDocument newDoc = new DefaultStyledDocument();\n-        Style newStyle = newDoc.getStyle(StyleContext.DEFAULT_STYLE);\n-        assertEquals(1, newStyle.getAttributeCount());\n-        newStyle.addAttribute(StyleConstants.Italic, Boolean.FALSE);\n-        newStyle.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n-        newStyle.addAttribute(StyleConstants.StrikeThrough, Boolean.FALSE);\n-        textPane.setForeground(Color.RED);\n-        textPane.setDocument(newDoc);\n-        assertSame(textPane.getStyle(StyleContext.DEFAULT_STYLE), newStyle);\n-        assertNull(textPane.getFont());\n-        assertNull(newStyle.getAttribute(StyleConstants.FontFamily));\n-        assertNull(newStyle.getAttribute(StyleConstants.Italic));\n-        assertNull(newStyle.getAttribute(StyleConstants.Bold));\n-        assertSame(newStyle.getAttribute(StyleConstants.Foreground),\n-                   textPane.getForeground());\n-        assertFalse(((Boolean)newStyle.getAttribute(StyleConstants.StrikeThrough))\n-                     .booleanValue());\n-    }\n-\n }",
                "deletions": 33
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Partly roll back commit r489326\nPatch for HARMONY-1667 \"[classlib][awt] RI BorderLayout.addLayoutComponent(Component, null) throws NPE while Harmony doesn't\"\n\nThe test java/awt/BorderLayoutTest.java crash VM on Linux. Will reopen the bug report.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489604 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
        "parent": "https://github.com/apache/harmony-classlib/commit/61da4ceee887fdec0dddc4cdd44fb28412b4fe4c",
        "bug_id": "harmony-classlib_275",
        "file": [
            {
                "sha": "a2cca0194f9e15406ea1aa1ee658d263dce1e6ce",
                "filename": "modules/awt/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.drl?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -16,6 +16,7 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "a2cca0194f9e15406ea1aa1ee658d263dce1e6ce",
                "filename": "modules/awt/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86.ibm?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -16,6 +16,7 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "8bb92120a985f50173c5f7a6d06f904575f7e310",
                "filename": "modules/awt/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.drl?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -16,6 +16,7 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "a2cca0194f9e15406ea1aa1ee658d263dce1e6ce",
                "filename": "modules/awt/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.linux.x86_64.ibm?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -16,6 +16,7 @@ java/awt/RobotTest.java\n java/awt/WindowTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "480d8e470b686ca39209bdc290b592695c11a21a",
                "filename": "modules/awt/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.drl?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -15,6 +15,7 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "ac2fb40a796594831def5176ebf2deebed3d1b87",
                "filename": "modules/awt/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86.ibm?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -21,6 +21,7 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "480d8e470b686ca39209bdc290b592695c11a21a",
                "filename": "modules/awt/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.drl?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -15,6 +15,7 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            },
            {
                "sha": "480d8e470b686ca39209bdc290b592695c11a21a",
                "filename": "modules/awt/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7f4e3c8d362089df7975b8a5cd7a1e4966a61b55/modules/awt/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/make/exclude.windows.x86_64.ibm?ref=7f4e3c8d362089df7975b8a5cd7a1e4966a61b55",
                "patch": "@@ -15,6 +15,7 @@ java/awt/GridLayoutTest.java\n java/awt/RobotTest.java\n java/awt/WindowRTest.java\n java/awt/datatransfer/ClipboardTest.java\n+java/awt/BorderLayoutTest.java\n java/awt/ButtonRTest.java\n java/awt/CardLayoutTest.java\n java/awt/ChoiceTest.java",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1799 \"[classlib][swing] JTextPane throws NPE after we set null font.\"\nBasicTextPaneUITest.java test is removed from exclude lists\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@489362 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/52bc35c39eccabedfb1427c46b3f027d8d1e8052",
        "parent": "https://github.com/apache/harmony-classlib/commit/042ca8bcc43fd2721da8e4a92084c96c819a8fd0",
        "bug_id": "harmony-classlib_276",
        "file": [
            {
                "sha": "643da60fa1bd725b97584394fd8369678a470a25",
                "filename": "modules/swing/make/exclude.linux.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.drl?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -89,7 +89,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "643da60fa1bd725b97584394fd8369678a470a25",
                "filename": "modules/swing/make/exclude.linux.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86.ibm?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -89,7 +89,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "7cbc2a4be455702148b73b402bf314f05b612eb9",
                "filename": "modules/swing/make/exclude.linux.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.drl?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -92,7 +92,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "643da60fa1bd725b97584394fd8369678a470a25",
                "filename": "modules/swing/make/exclude.linux.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.linux.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.linux.x86_64.ibm?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -89,7 +89,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "1f88623385f246afd3dd0740e88e1cca6639e36b",
                "filename": "modules/swing/make/exclude.windows.x86.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.drl?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -93,7 +93,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "3c1f1bca9df67fb4572405fedfe68055c9914f33",
                "filename": "modules/swing/make/exclude.windows.x86.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86.ibm?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -100,7 +100,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "643da60fa1bd725b97584394fd8369678a470a25",
                "filename": "modules/swing/make/exclude.windows.x86_64.drl",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86_64.drl",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86_64.drl",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.drl?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -89,7 +89,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "643da60fa1bd725b97584394fd8369678a470a25",
                "filename": "modules/swing/make/exclude.windows.x86_64.ibm",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86_64.ibm",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/make/exclude.windows.x86_64.ibm",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/make/exclude.windows.x86_64.ibm?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -89,7 +89,6 @@ javax/swing/plaf/basic/BasicTabbedPaneUITest.java\n javax/swing/plaf/basic/BasicTableUITest.java\n javax/swing/plaf/basic/BasicTextAreaUITest.java\n javax/swing/plaf/basic/BasicTextFieldUITest.java\n-javax/swing/plaf/basic/BasicTextPaneUITest.java\n javax/swing/plaf/basic/BasicToolBarUI$DragWindowTest.java\n javax/swing/plaf/basic/BasicToolBarUITest.java\n javax/swing/plaf/metal/MetalComboBoxIconTest.java",
                "deletions": 1
            },
            {
                "sha": "31fdd54883bdc899e9b66e127822966b52c06335",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java",
                "status": "modified",
                "changes": 18,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicTextPaneUI.java?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -67,9 +67,6 @@ private void setDefaultStyle(final PropertyChangeEvent e) {\n         }\n \n         final Font f = pane.getFont();\n-        if (f == null) {\n-            return;\n-        }\n \n         final Style style = getDefaultStyle(e);\n \n@@ -83,9 +80,16 @@ protected  String getPropertyPrefix() {\n \n \n     private void updateFontAttributes(final Style style, final Font f) {\n-        style.addAttribute(StyleConstants.Italic, Boolean.valueOf(f.isItalic()));\n-        style.addAttribute(StyleConstants.Bold, Boolean.valueOf(f.isBold()));\n-        style.addAttribute(StyleConstants.FontFamily, f.getName());\n-        style.addAttribute(StyleConstants.FontSize, new Integer(f.getSize()));\n+        if (f == null){\n+            style.removeAttribute(StyleConstants.Italic);\n+            style.removeAttribute(StyleConstants.Bold);\n+            style.removeAttribute(StyleConstants.FontFamily);\n+            style.removeAttribute(StyleConstants.FontSize);\n+        } else {\n+            style.addAttribute(StyleConstants.Italic, Boolean.valueOf(f.isItalic()));\n+            style.addAttribute(StyleConstants.Bold, Boolean.valueOf(f.isBold()));\n+            style.addAttribute(StyleConstants.FontFamily, f.getName());\n+            style.addAttribute(StyleConstants.FontSize, new Integer(f.getSize()));\n+        }\n     }\n }",
                "deletions": 7
            },
            {
                "sha": "90732b07ea32630a34425270044de822cad62da5",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/52bc35c39eccabedfb1427c46b3f027d8d1e8052/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java",
                "status": "modified",
                "changes": 33,
                "additions": 33,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicTextPaneUITest.java?ref=52bc35c39eccabedfb1427c46b3f027d8d1e8052",
                "patch": "@@ -141,4 +141,37 @@ public void testProPertyChange_FontFamilyName() {\n         assertFalse(font.getFamily().equals(newStyle.getAttribute(StyleConstants.FontFamily)));\n         assertEquals(font.getName(), newStyle.getAttribute(StyleConstants.FontFamily));\n     }\n+    public void testPropertyChange_NullFont() {\n+        // regression test to HARMONY-1799\n+        \n+        textPane = new JTextPane();\n+\n+        textPane.setFont(font);\n+        Style style = textPane.getStyle(StyleContext.DEFAULT_STYLE);\n+        style.addAttribute(StyleConstants.Italic, Boolean.TRUE);\n+        style.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n+        textPane.setFont(null);\n+        assertNull(style.getAttribute(StyleConstants.FontFamily));\n+        assertNull(style.getAttribute(StyleConstants.Italic));\n+        assertNull(style.getAttribute(StyleConstants.Bold));\n+\n+        StyledDocument newDoc = new DefaultStyledDocument();\n+        Style newStyle = newDoc.getStyle(StyleContext.DEFAULT_STYLE);\n+        assertEquals(1, newStyle.getAttributeCount());\n+        newStyle.addAttribute(StyleConstants.Italic, Boolean.FALSE);\n+        newStyle.addAttribute(StyleConstants.Bold, Boolean.TRUE);\n+        newStyle.addAttribute(StyleConstants.StrikeThrough, Boolean.FALSE);\n+        textPane.setForeground(Color.RED);\n+        textPane.setDocument(newDoc);\n+        assertSame(textPane.getStyle(StyleContext.DEFAULT_STYLE), newStyle);\n+        assertNull(textPane.getFont());\n+        assertNull(newStyle.getAttribute(StyleConstants.FontFamily));\n+        assertNull(newStyle.getAttribute(StyleConstants.Italic));\n+        assertNull(newStyle.getAttribute(StyleConstants.Bold));\n+        assertSame(newStyle.getAttribute(StyleConstants.Foreground),\n+                   textPane.getForeground());\n+        assertFalse(((Boolean)newStyle.getAttribute(StyleConstants.StrikeThrough))\n+                     .booleanValue());\n+    }\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1595 \"[classlib][awt]Compatibility: java.awt.Font.getStringBounds() methods for null FontRenderContext returns bounds on Harmony and throws NPE on RI\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488295 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/34e507787bde9f927b3c494381d11e3cb74798b5",
        "parent": "https://github.com/apache/harmony-classlib/commit/6c7d1c68e78c3df2c021382099f3a8269e70ea2b",
        "bug_id": "harmony-classlib_277",
        "file": [
            {
                "sha": "3ae23780f2835f464db015890370b2b3344f24ac",
                "filename": "modules/awt/src/main/java/common/java/awt/Font.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/34e507787bde9f927b3c494381d11e3cb74798b5/modules/awt/src/main/java/common/java/awt/Font.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/34e507787bde9f927b3c494381d11e3cb74798b5/modules/awt/src/main/java/common/java/awt/Font.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Font.java?ref=34e507787bde9f927b3c494381d11e3cb74798b5",
                "patch": "@@ -681,6 +681,10 @@ public Rectangle2D getStringBounds(CharacterIterator ci, int start,\n                     (end - start)));\n         }\n \n+        if (frc == null) {\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n+        }\n+\n         chars = new char[end - start];\n \n         ci.setIndex(start);\n@@ -721,6 +725,10 @@ public Rectangle2D getStringBounds(char[] chars, int start, int end,\n                     (end - start)));\n         }\n \n+        if (frc == null) {\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n+        }\n+\n         FontPeerImpl peer = (FontPeerImpl) this.getPeer();\n \n         final int TRANSFORM_MASK = AffineTransform.TYPE_GENERAL_ROTATION",
                "deletions": 0
            },
            {
                "sha": "cd91b65a9c60da58b349b279c47a3b6e24cbab48",
                "filename": "modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/34e507787bde9f927b3c494381d11e3cb74798b5/modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/34e507787bde9f927b3c494381d11e3cb74798b5/modules/awt/src/test/api/java/common/java/awt/FontTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 41,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/FontTest.java?ref=34e507787bde9f927b3c494381d11e3cb74798b5",
                "patch": "@@ -21,6 +21,7 @@\n import java.awt.font.TextAttribute;\n import java.text.AttributedString;\n import java.text.CharacterIterator;\n+import java.text.StringCharacterIterator;\n import java.text.AttributedCharacterIterator.Attribute;\n import java.util.Collections;\n \n@@ -142,4 +143,44 @@ public void test_Font_getStringBounds_WithNullTextSource() {\n             // expected\n         }\n     }\n+    \n+    /**\n+     * Checks Font.getStringBounds() methods if FontRenderContext parameter is NULL. \n+     *\n+     */\n+    public void test_Font_getStringBounds_WithNullFRC() {\n+        // regression test for Harmony-1595\n+        Font font = Font.decode(\"Arial\");\n+        try {\n+            font.getStringBounds(new char[] { 'a' }, 0, 1,\n+                    (FontRenderContext) null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            font.getStringBounds(new StringCharacterIterator(\"a\"), 0, 1,\n+                    (FontRenderContext) null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        String str = \"str\";\n+        try {\n+            font.getStringBounds(str, 0, 1, (FontRenderContext) null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            font.getStringBounds(str, (FontRenderContext) null);\n+            fail(\"NullPointerException expected!\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-1629 \"[classlib][awt]Compatibility: java.awt.image.LookupOp constructor for null LookupTable parameter throws NPE on RI while it doesn't on Harmony.\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488294 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6c7d1c68e78c3df2c021382099f3a8269e70ea2b",
        "parent": "https://github.com/apache/harmony-classlib/commit/72a74f4d0f08bdb0cc72219f574a03c7f775cc2d",
        "bug_id": "harmony-classlib_278",
        "file": [
            {
                "sha": "77978ddff4ea4c5bbf509433766b38b1f2ff8af7",
                "filename": "modules/awt/src/main/java/common/java/awt/image/LookupOp.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6c7d1c68e78c3df2c021382099f3a8269e70ea2b/modules/awt/src/main/java/common/java/awt/image/LookupOp.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6c7d1c68e78c3df2c021382099f3a8269e70ea2b/modules/awt/src/main/java/common/java/awt/image/LookupOp.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/LookupOp.java?ref=6c7d1c68e78c3df2c021382099f3a8269e70ea2b",
                "patch": "@@ -58,6 +58,9 @@\n     }\n \n     public LookupOp(LookupTable lookup, RenderingHints hints) {\n+        if (lookup == null){\n+            throw new NullPointerException(Messages.getString(\"awt.01\", \"lookup\"));\n+        }\n         lut = lookup;\n         this.hints = hints;\n         canUseIpp = lut instanceof ByteLookupTable || lut instanceof ShortLookupTable;",
                "deletions": 0
            },
            {
                "sha": "73100c1ef34ba8b0d9e0a72fc882a964c261f170",
                "filename": "modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/image/LookupOpTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6c7d1c68e78c3df2c021382099f3a8269e70ea2b/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/image/LookupOpTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6c7d1c68e78c3df2c021382099f3a8269e70ea2b/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/image/LookupOpTest.java",
                "status": "added",
                "changes": 57,
                "additions": 57,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/org/apache/harmony/awt/tests/java/awt/image/LookupOpTest.java?ref=6c7d1c68e78c3df2c021382099f3a8269e70ea2b",
                "patch": "@@ -0,0 +1,57 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+package org.apache.harmony.awt.tests.java.awt.image;\n+\n+import java.awt.RenderingHints;\n+import java.awt.image.LookupOp;\n+import java.awt.image.LookupTable;\n+\n+import junit.framework.TestCase;\n+\n+public class LookupOpTest extends TestCase {\n+\n+    public LookupOpTest(String name) {\n+        super(name);\n+    }\n+\n+    protected void setUp() throws Exception {\n+        super.setUp();\n+    }\n+\n+    protected void tearDown() throws Exception {\n+        super.tearDown();\n+    }\n+\n+    /*\n+     * Test method for 'java.awt.image.LookupOp.LookupOp(LookupTable, RenderingHints)'\n+     * when the LookupTable argument is null.\n+     */\n+    public final void test_LookupOp_LookupTableRenderingHints_NullLookupTable() {\n+        // regression test for Harmony-1629\n+        RenderingHints hints = new RenderingHints(null);\n+        try {\n+            LookupOp returnValue = new LookupOp((LookupTable)null, hints);\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException npe) {\n+            // expected\n+        }\n+    }\n+\n+    \n+\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-2495 ([classlib][beans] java.beans.EventHandler.invoke( Object,Method method,Object[] arguments) does not throw unspecified NPE if method==null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@488103 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/2661fa6ff89bce88a683f427d494bdfd00fde913",
        "parent": "https://github.com/apache/harmony-classlib/commit/1d0d038caa9a07e0be0bc599d2b7a4d45e066d25",
        "bug_id": "harmony-classlib_279",
        "file": [
            {
                "sha": "95dac8ab3fde52725e1777fb6563849fcf242e6a",
                "filename": "modules/beans/src/main/java/java/beans/EventHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/main/java/java/beans/EventHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/main/java/java/beans/EventHandler.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/EventHandler.java?ref=2661fa6ff89bce88a683f427d494bdfd00fde913",
                "patch": "@@ -60,7 +60,6 @@ public Object invoke(Object proxy, Method method, Object[] arguments) {\n \n             // if a valid object\n             if (handler instanceof EventHandler) {\n-\n                 // if the method from the Object class is called\n                 if (method.getDeclaringClass().equals(Object.class)) {\n                     if (method.getName().equals(\"hashCode\") && //$NON-NLS-1$\n@@ -99,6 +98,12 @@ public Object invoke(Object proxy, Method method, Object[] arguments) {\n                     }\n                 }\n             }\n+        } else {\n+            //HARMONY-2495\n+            if (null == method) {\n+                throw new NullPointerException(Messages.getString(\n+                        \"beans.55\")); //$NON-NLS-1$\n+            }\n         }\n \n         return result;",
                "deletions": 1
            },
            {
                "sha": "72b1c8cadc45e823f42441d389718d0e8c66224d",
                "filename": "modules/beans/src/main/java/org/apache/harmony/beans/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/main/java/org/apache/harmony/beans/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/main/java/org/apache/harmony/beans/internal/nls/messages.properties",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/org/apache/harmony/beans/internal/nls/messages.properties?ref=2661fa6ff89bce88a683f427d494bdfd00fde913",
                "patch": "@@ -100,3 +100,4 @@ beans.51=Listener method {0} should have parameter of type {1}\n beans.52=listenerMethodName(s) is null\n beans.53=eventSetName is null\n beans.54=listenerType is null\n+beans.55=Method is null",
                "deletions": 0
            },
            {
                "sha": "3aec08e88679b0e89227ff183fd738a404ea01f0",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventHandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventHandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/2661fa6ff89bce88a683f427d494bdfd00fde913/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventHandlerTest.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/EventHandlerTest.java?ref=2661fa6ff89bce88a683f427d494bdfd00fde913",
                "patch": "@@ -732,6 +732,14 @@ public void testInvoke_1() throws SecurityException, NoSuchMethodException {\n                 new Class[] { Object.class });\n         assertEquals(Boolean.FALSE, handler.invoke(proxy, equalsMethod,\n                 new String[] { \"mock\" }));\n+        // Test null method with non-proxy Object.\n+        handler = new EventHandler(new Object(), \"a\", \"a\", \"a\");\n+        try {\n+            handler.invoke(new Object(), null, new Object[] {});\n+            fail(\"should throw NPE.\");\n+        } catch (NullPointerException e) {\n+            // expected;\n+        }\n     }\n \n     public void testIncompatibleMethod() {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-2717 \"[classlib][awt] Compatibility: java.awt.image.Raster.createPackedRaster(DataBuffer,int int,int ,int[] ,Point ) throws RasterFormatException while RI throws NPE\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@487328 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/84f42a44657585158fea26247d0e01e20c278075",
        "parent": "https://github.com/apache/harmony-classlib/commit/ff572fc83a0192d4521da1da3ddf01fdbe024134",
        "bug_id": "harmony-classlib_280",
        "file": [
            {
                "sha": "3212b1b8d1664603e8bb23fb1bcae40decbba25a",
                "filename": "modules/awt/src/main/java/common/java/awt/image/Raster.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/84f42a44657585158fea26247d0e01e20c278075/modules/awt/src/main/java/common/java/awt/image/Raster.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/84f42a44657585158fea26247d0e01e20c278075/modules/awt/src/main/java/common/java/awt/image/Raster.java",
                "status": "modified",
                "changes": 9,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/image/Raster.java?ref=84f42a44657585158fea26247d0e01e20c278075",
                "patch": "@@ -327,6 +327,10 @@ public static WritableRaster createInterleavedRaster(int dataType, int w,\n \n     public static WritableRaster createPackedRaster(DataBuffer dataBuffer,\n             int w, int h, int scanlineStride, int bandMasks[], Point location) {\n+        if (dataBuffer == null) {\n+            // awt.278=dataBuffer is null\n+            throw new NullPointerException(Messages.getString(\"awt.278\")); //$NON-NLS-1$\n+        }\n \n         if (w <= 0 || h <= 0) {\n             // awt.22E=w or h is less than or equal to zero\n@@ -348,11 +352,6 @@ public static WritableRaster createPackedRaster(DataBuffer dataBuffer,\n             throw new RasterFormatException(Messages.getString(\"awt.27C\")); //$NON-NLS-1$\n         }\n \n-        if (dataBuffer == null) {\n-            // awt.278=dataBuffer is null\n-            throw new NullPointerException(Messages.getString(\"awt.278\")); //$NON-NLS-1$\n-        }\n-\n         if (dataBuffer.getNumBanks() > 1) {\n             // awt.27A=dataBuffer has more than one bank\n             throw new RasterFormatException(Messages.getString(\"awt.27A\")); //$NON-NLS-1$",
                "deletions": 5
            },
            {
                "sha": "b4b7723fde207c274af37799be7d4a6c5c57f7c4",
                "filename": "modules/awt/src/test/api/java/common/java/awt/image/RasterTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/84f42a44657585158fea26247d0e01e20c278075/modules/awt/src/test/api/java/common/java/awt/image/RasterTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/84f42a44657585158fea26247d0e01e20c278075/modules/awt/src/test/api/java/common/java/awt/image/RasterTest.java",
                "status": "added",
                "changes": 36,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/image/RasterTest.java?ref=84f42a44657585158fea26247d0e01e20c278075",
                "patch": "@@ -0,0 +1,36 @@\n+/*\n+ *  Licensed to the Apache Software Foundation (ASF) under one or more\n+ *  contributor license agreements.  See the NOTICE file distributed with\n+ *  this work for additional information regarding copyright ownership.\n+ *  The ASF licenses this file to You under the Apache License, Version 2.0\n+ *  (the \"License\"); you may not use this file except in compliance with\n+ *  the License.  You may obtain a copy of the License at\n+ *\n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ */\n+\n+\n+package java.awt.image;\n+\n+import junit.framework.TestCase;\n+\n+public class RasterTest extends TestCase {\n+    // A regression test for harmony-2717\n+    public void test_createPackedRaster()\n+    {\n+        try {\n+            Raster.createPackedRaster(null, -32, Integer.MAX_VALUE, 35, new int[] {}, null);\n+            fail(\"Exception expected\");\n+        } catch (NullPointerException expectedException) {\n+            System.out.println(expectedException +\" was thrown\");\n+        } catch (RasterFormatException expectedException) {\n+            fail(expectedException +\" was thrown\");\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch for HARMONY-690 \"[classlib][lang]Compatibility: Harmony Runtime.removeShutdownHook(null) does not throw unspecified NPE while RI does.\" class library version.\nNull checks are added to Runtime class stub.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@483470 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/97e2838b4d5efcdc529b93ee27fca76b799cff24",
        "parent": "https://github.com/apache/harmony-classlib/commit/8908c181d422889a31724f4173f2876e4f244300",
        "bug_id": "harmony-classlib_281",
        "file": [
            {
                "sha": "cca7cef88a3007785efcc2c5bce3448bc38b1470",
                "filename": "modules/luni-kernel/src/main/java/java/lang/Runtime.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/97e2838b4d5efcdc529b93ee27fca76b799cff24/modules/luni-kernel/src/main/java/java/lang/Runtime.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/97e2838b4d5efcdc529b93ee27fca76b799cff24/modules/luni-kernel/src/main/java/java/lang/Runtime.java",
                "status": "modified",
                "changes": 8,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni-kernel/src/main/java/java/lang/Runtime.java?ref=97e2838b4d5efcdc529b93ee27fca76b799cff24",
                "patch": "@@ -270,6 +270,10 @@ public OutputStream getLocalizedOutputStream(OutputStream stream) {\n      * @param hook the hook (a Thread) to register\n      */\n     public void addShutdownHook(Thread hook) {\n+        // Check hook for null\n+        if (hook == null)\n+            throw new NullPointerException(\"null is not allowed here\");\n+                \n         return;\n     }\n \n@@ -280,6 +284,10 @@ public void addShutdownHook(Thread hook) {\n      * @return true if the hook could be de-registered\n      */\n     public boolean removeShutdownHook(Thread hook) {\n+        // Check hook for null\n+        if (hook == null)\n+            throw new NullPointerException(\"null is not allowed here\");\n+                \n         return false;\n     }\n ",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Fix two compability issues:\n1. CodeSource.getCodeSigner() should not throw NPE but return null when certs field is null\n2. IdentityScope.getSystemScope() should read security property \"system.scope\" to find the implementation class\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@469592 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
        "parent": "https://github.com/apache/harmony-classlib/commit/69e1a3f1b8910312af894457d8176044753b11d2",
        "bug_id": "harmony-classlib_282",
        "file": [
            {
                "sha": "2437fd376038153eb67178fbcfbac90c9a4f4f43",
                "filename": "modules/security/src/main/java/common/java/security/CodeSource.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/main/java/common/java/security/CodeSource.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/main/java/common/java/security/CodeSource.java",
                "status": "modified",
                "changes": 4,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/CodeSource.java?ref=02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
                "patch": "@@ -177,14 +177,12 @@ public boolean equals(Object obj) {\n     }\n \n     public final CodeSigner[] getCodeSigners() {\n-\n         if (signers != null) {\n             CodeSigner[] tmp = new CodeSigner[signers.length];\n             System.arraycopy(signers, 0, tmp, 0, tmp.length);\n             return tmp;\n         }\n-\n-        if (factory != null) {\n+        if(certs == null || factory != null){\n             // factory != null means we've done this exercise already.\n             return null;\n         }",
                "deletions": 3
            },
            {
                "sha": "daa8925b8ad68269fe1325554a1e88483fe5eff1",
                "filename": "modules/security/src/main/java/common/java/security/IdentityScope.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/main/java/common/java/security/IdentityScope.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/main/java/common/java/security/IdentityScope.java",
                "status": "modified",
                "changes": 19,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/java/security/IdentityScope.java?ref=02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
                "patch": "@@ -67,9 +67,24 @@ public IdentityScope(String name, IdentityScope scope)\n      * @com.intel.drl.spec_ref \n      */\n     public static IdentityScope getSystemScope() {\n-\n+        /* \n+         * Test shows that the implementation class name is read from security property\n+         * \"system.scope\", and the class is only loaded from boot classpath. No default\n+         * implementation as fallback, i.e., return null if fails to init an instance. \n+         */\n         if (systemScope == null) {\n-            systemScope = new SystemScope(\"System Scope\"); //$NON-NLS-1$\n+            String className = AccessController.doPrivileged(new PrivilegedAction<String>(){\n+                public String run() {\n+                    return Security.getProperty(\"system.scope\"); //$NON-NLS-1$\n+                }\n+            });\n+            if(className != null){\n+                try {\n+                    systemScope = (IdentityScope) Class.forName(className).newInstance();\n+                } catch (Exception e) {\n+                    e.printStackTrace();\n+                }\n+            }\n         }\n         return systemScope;\n     }",
                "deletions": 2
            },
            {
                "sha": "2ee0092a1530561bad525b9d36b2f723f5dfbc74",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/CodeSourceTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/CodeSourceTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/CodeSourceTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/CodeSourceTest.java?ref=02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
                "patch": "@@ -340,6 +340,10 @@ public void testGetCodeSigners_00() {\n             assertTrue(found);\n         }\n     }\n+    \n+    public void testGetCoderSignersNull() throws Exception{\n+        assertNull(new CodeSource(new URL(\"http://url\"), (Certificate[])null).getCodeSigners()); //$NON-NLS-1$\n+    }\n \n     /**\n      * Tests CodeSource.getLocation()",
                "deletions": 0
            },
            {
                "sha": "3b602833f96f0cf4c51c0d9bdc752329c9907ec0",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScopeTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScopeTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/02d1255b7d24ac0ceba0e27eb18e71f870c4be6c/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScopeTest.java",
                "status": "modified",
                "changes": 9,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScopeTest.java?ref=02d1255b7d24ac0ceba0e27eb18e71f870c4be6c",
                "patch": "@@ -93,7 +93,11 @@ public final void testIdentityScopeStringIdentityScope() throws Exception {\n      * just call IdentityScope.getSystemScope()\n      */\n     public final void testGetSystemScope() {\n-        assertNotNull(IdentityScope.getSystemScope());\n+        String name = Security.getProperty(\"system.scope\");\n+        assertNotNull(name);\n+        IdentityScope scope = IdentityScope.getSystemScope(); \n+        assertNotNull(scope);\n+        assertEquals(name, scope.getClass().getName());\n     }\n \n     /**\n@@ -103,7 +107,9 @@ public final void testGetSystemScope() {\n      */\n     \n     public final void testSetSystemScope() {\n+//      default implementation is specified by security property system.scope\n         IdentityScope systemScope = IdentityScope.getSystemScope();\n+        \n         try {\n             // all permissions are granted - sm is not installed\n             is = new IdentityScopeStub(\"Aleksei Semenov\");\n@@ -133,6 +139,7 @@ public final void testSetSystemScope() {\n             IdentityScopeStub.mySetSystemScope(systemScope);\n         }\n     }\n+    \n \n     /**\n      * Class under test for Identity getIdentity(Principal)",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch from HARMONY-1521\n[classlib][beans] XMLEncoder.writeStatement(null) thorws NPE on Harmony and works OK on RI\nremoved redundant method\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@465159 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe",
        "parent": "https://github.com/apache/harmony-classlib/commit/094ed4fc8ebbbea70aae3f929c8b5c3305f14c99",
        "bug_id": "harmony-classlib_283",
        "file": [
            {
                "sha": "67403346c88a69c59cf9d11c6f07910af6a5654c",
                "filename": "modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe/modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe/modules/beans/src/main/java/java/beans/XMLEncoder.java",
                "status": "modified",
                "changes": 12,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/XMLEncoder.java?ref=9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe",
                "patch": "@@ -56,12 +56,12 @@ public Object getOwner() {\n \n     @Override\n     public void writeStatement(Statement oldStm) {\n-        super.writeStatement(oldStm);\n-    }\n-\n-    @Override\n-    public void writeExpression(Expression oldExp) {\n-        super.writeExpression(oldExp);\n+        try {\n+            super.writeStatement(oldStm);\n+        } catch (NullPointerException ignore) {\n+            // ignore exception like RI does\n+            ignore.printStackTrace();\n+        }\n     }\n \n     public void flush() {",
                "deletions": 6
            },
            {
                "sha": "c38eef53cf78a363fef6299dc1bfdfd1eaf90106",
                "filename": "modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/beans/tests/java/beans/XMLEncoderTest.java?ref=9f0fef85b4bc6feb29a70fa3de5eceb1d428fafe",
                "patch": "@@ -194,6 +194,10 @@ public void testWriteExpression() {\n \n     public void testWriteStatement() {\n         // coverd by testWriteStatement\n+\n+         //Regression for HARMONY-1521\n+         //no exception expected\n+         new XMLEncoder(new ByteArrayOutputStream()).writeStatement(null);\n     }\n \n     public void testWriteObject_Null() throws Exception {",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied newest patches for HARMONY-1139\n[classlib][crypto] compatibility: CipherOutputStream().close() throws the IllegalStateException on RI and the NPE on Harmony\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@453153 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/05162bf35cfefcf8b11c04a2e4e5c4844e26f24d",
        "parent": "https://github.com/apache/harmony-classlib/commit/b68000d2b950c8fc0716fb92be1e2ed15049f5e7",
        "bug_id": "harmony-classlib_284",
        "file": [
            {
                "sha": "f1d30cc4afea76e4df6ffa868a88608a11fbb75d",
                "filename": "modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05162bf35cfefcf8b11c04a2e4e5c4844e26f24d/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05162bf35cfefcf8b11c04a2e4e5c4844e26f24d/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java",
                "status": "modified",
                "changes": 6,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/main/java/javax/crypto/CipherOutputStream.java?ref=05162bf35cfefcf8b11c04a2e4e5c4844e26f24d",
                "patch": "@@ -104,8 +104,10 @@ public void close() throws IOException {\n         } catch (IllegalBlockSizeException e) {\n             throw new IOException(e.getMessage());\n         } finally {\n-            out.flush();\n-            out.close();\n+            if (out != null) {\n+                out.flush();\n+                out.close();\n+            }\n         }\n     }\n }",
                "deletions": 2
            },
            {
                "sha": "a6c81476a093d566e1e8498b6d1a1f338f7213c3",
                "filename": "modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/05162bf35cfefcf8b11c04a2e4e5c4844e26f24d/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/05162bf35cfefcf8b11c04a2e4e5c4844e26f24d/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java",
                "status": "added",
                "changes": 37,
                "additions": 37,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherOutputStreamTest.java?ref=05162bf35cfefcf8b11c04a2e4e5c4844e26f24d",
                "patch": "@@ -0,0 +1,37 @@\n+/* Copyright 2006 The Apache Software Foundation or its licensors, as applicable\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+\n+package org.apache.harmony.crypto.tests.javax.crypto;\n+\n+import java.io.OutputStream;\n+import javax.crypto.Cipher;\n+import javax.crypto.CipherOutputStream;\n+\n+public class CipherOutputStreamTest extends junit.framework.TestCase {\n+\n+    /**\n+     * @tests javax.crypto.CipherOutputStream#close()\n+     */\n+    public void test_close() throws Exception {\n+        // regression test for HARMONY-1139\n+        try {\n+            new CipherOutputStream((OutputStream) null, Cipher\n+                    .getInstance(\"DES/CBC/PKCS5Padding\")).close();\n+            fail(\"IllegalStateException expected\");\n+        } catch (IllegalStateException e) {\n+            //expected\n+        }\n+    }\n+}",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied newest patches for HARMONY-1184\n[classlib][crypto] compatibility: Cipher(null, null, \"s\") lead to NPE on RI and works silently on Harmony\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@453152 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/b68000d2b950c8fc0716fb92be1e2ed15049f5e7",
        "parent": "https://github.com/apache/harmony-classlib/commit/5cb707072d682e06f6fc06914ba417047b888ccc",
        "bug_id": "harmony-classlib_285",
        "file": [
            {
                "sha": "345707e94cf6f5f32ca87fa730f6fa5d2b06f879",
                "filename": "modules/crypto/src/main/java/javax/crypto/Cipher.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b68000d2b950c8fc0716fb92be1e2ed15049f5e7/modules/crypto/src/main/java/javax/crypto/Cipher.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b68000d2b950c8fc0716fb92be1e2ed15049f5e7/modules/crypto/src/main/java/javax/crypto/Cipher.java",
                "status": "modified",
                "changes": 8,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/main/java/javax/crypto/Cipher.java?ref=b68000d2b950c8fc0716fb92be1e2ed15049f5e7",
                "patch": "@@ -40,10 +40,10 @@\n import java.util.Set;\n import java.util.StringTokenizer;\n \n+import org.apache.harmony.crypto.internal.NullCipherSpi;\n import org.apache.harmony.crypto.internal.nls.Messages;\n import org.apache.harmony.security.fortress.Engine;\n \n-\n /**\n  * @com.intel.drl.spec_ref\n  * \n@@ -127,6 +127,12 @@\n      */\n     protected Cipher(CipherSpi cipherSpi, Provider provider,\n             String transformation) {\n+        if (cipherSpi == null) {\n+            throw new NullPointerException();\n+        }\n+        if (!(cipherSpi instanceof NullCipherSpi) && provider == null) {\n+            throw new NullPointerException();\n+        }\n         this.provider = provider;\n         this.transformation = transformation;\n         this.spiImpl = cipherSpi;",
                "deletions": 1
            },
            {
                "sha": "5ce7a13e3fb176312a57103fc6107d2b64936aa9",
                "filename": "modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/b68000d2b950c8fc0716fb92be1e2ed15049f5e7/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/b68000d2b950c8fc0716fb92be1e2ed15049f5e7/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java",
                "status": "modified",
                "changes": 37,
                "additions": 36,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/crypto/src/test/api/java/org/apache/harmony/crypto/tests/javax/crypto/CipherTest.java?ref=b68000d2b950c8fc0716fb92be1e2ed15049f5e7",
                "patch": "@@ -31,13 +31,15 @@\n import java.util.Arrays;\n \n import javax.crypto.Cipher;\n+import javax.crypto.CipherSpi;\n import javax.crypto.KeyGenerator;\n import javax.crypto.SecretKeyFactory;\n import javax.crypto.ShortBufferException;\n import javax.crypto.spec.DESedeKeySpec;\n import javax.crypto.spec.IvParameterSpec;\n \n import tests.support.resource.Support_Resources;\n+import org.apache.harmony.crypto.tests.support.MyCipher;\n \n public class CipherTest extends junit.framework.TestCase {\n \n@@ -435,5 +437,38 @@ public void testGetMaxAllowedParameterSpec()\n         } catch (NoSuchAlgorithmException e) {\n         }\n     }\n-    \n+\n+    /**\n+     * @tests javax.crypto.Cipher#Cipher(CipherSpi cipherSpi, Provider provider,\n+     *        String transformation)\n+     */\n+    public void test_Ctor() throws Exception {\n+        // Regression for Harmony-1184\n+        try {\n+            new testCipher(null, null, \"s\");\n+            fail(\"NullPointerException expected\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new testCipher(new MyCipher(), null, \"s\");\n+            fail(\"NullPointerException expected for 'null' provider\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try {\n+            new testCipher(null, new Provider(\"qwerty\", 1.0, \"qwerty\") {}, \"s\");\n+            fail(\"NullPointerException expected for 'null' cipherSpi\");\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+    }\n+\n+    class testCipher extends Cipher {\n+        testCipher(CipherSpi c, Provider p, String s) {\n+            super(c, p, s);\n+        }\n+    }\n }",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-1464] [classlib][awt]compatibility:\nawt.font.TextLayout() constructors with null parameters have behavior that\ndiffers from RI\" and \"[#HARMONY-1465] [classlib][awt]compatibility:\nawt.Font.getLineMetrics() for null FontRenderContext returns LineMetrics\ninstanse on Harmony and throws NPE on RI\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@447336 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0a9c12211014f875bcf305f0d9f0efde342920e0",
        "parent": "https://github.com/apache/harmony-classlib/commit/11a4c5cbd5dee7a16264692e106eaeb37d824c4f",
        "bug_id": "harmony-classlib_286",
        "file": [
            {
                "sha": "4ef2783cf5e8a078cf4ecd84c2b3eb8c0da69bbe",
                "filename": "modules/awt/src/main/java/common/java/awt/Font.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/java/awt/Font.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/java/awt/Font.java",
                "status": "modified",
                "changes": 47,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/Font.java?ref=0a9c12211014f875bcf305f0d9f0efde342920e0",
                "patch": "@@ -41,6 +41,7 @@\n \n import org.apache.harmony.awt.gl.font.CommonGlyphVector;\n import org.apache.harmony.awt.gl.font.FontPeerImpl;\n+import org.apache.harmony.awt.internal.nls.Messages;\n import org.apache.harmony.misc.HashCode;\n \n \n@@ -131,7 +132,7 @@ public Font(Map<? extends Attribute, ?> attributes) {\n         // Default values are taken from the documentation of the Font class. \n         // See Font constructor, decode and getFont sections.\n   \n-        this.name = \"default\";\n+        this.name = \"default\"; //$NON-NLS-1$\n         this.size = 12;\n         this.pointSize = 12;\n         this.style = Font.PLAIN;\n@@ -197,7 +198,7 @@ public Font(Map<? extends Attribute, ?> attributes) {\n     }\n \n     public Font(String name, int style, int size) {\n-        this.name = (name != null) ? name : \"Default\";\n+        this.name = (name != null) ? name : \"Default\"; //$NON-NLS-1$\n         this.size = (size >= 0) ? size : 0;\n         this.style = (style & ~0x03) == 0 ? style : Font.PLAIN;\n         this.pointSize = this.size;\n@@ -330,11 +331,11 @@ public GlyphVector createGlyphVector(FontRenderContext frc, String str) {\n     private static int getFontStyle(String fontStyleName){\n         int result = Font.PLAIN;\n \n-        if (fontStyleName.toUpperCase().equals(\"BOLDITALIC\")) {\n+        if (fontStyleName.toUpperCase().equals(\"BOLDITALIC\")) { //$NON-NLS-1$\n             result = Font.BOLD | Font.ITALIC;\n-        } else if (fontStyleName.toUpperCase().equals(\"BOLD\")) {\n+        } else if (fontStyleName.toUpperCase().equals(\"BOLD\")) { //$NON-NLS-1$\n             result = Font.BOLD;\n-        } else if (fontStyleName.toUpperCase().equals(\"ITALIC\")) {\n+        } else if (fontStyleName.toUpperCase().equals(\"ITALIC\")) { //$NON-NLS-1$\n             result = Font.ITALIC;\n         }\n \n@@ -349,12 +350,12 @@ public static Font decode(String str) {\n         // with spaces.\n         \n         StringTokenizer strTokens;\n-        String delim = \"-\";\n+        String delim = \"-\"; //$NON-NLS-1$\n         String substr;\n \n         int fontSize = 12;\n         int fontStyle = Font.PLAIN;\n-        String fontName = \"dialog\";\n+        String fontName = \"dialog\"; //$NON-NLS-1$\n \n         if (str == null) {\n             return new Font(fontName, fontStyle, fontSize);\n@@ -596,6 +597,10 @@ public String getFontName(Locale l) {\n     public LineMetrics getLineMetrics(char[] chars, int start,\n             int end, FontRenderContext frc) {\n \n+        if (frc == null){\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n+        }\n+\n         FontPeerImpl peer = (FontPeerImpl)this.getPeer();\n \n         return peer.getLineMetrics((new String(chars)).substring(start, end),\n@@ -604,12 +609,17 @@ public LineMetrics getLineMetrics(char[] chars, int start,\n \n     public LineMetrics getLineMetrics(CharacterIterator iter, int start,\n             int end, FontRenderContext frc) {\n+\n+        if (frc == null){\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n+        }\n+\n         String resultString;\n         int iterCount;\n \n         iterCount = end - start;\n         if (iterCount < 0){\n-            resultString = \"\";\n+            resultString = \"\"; //$NON-NLS-1$\n         } else{\n             char[] chars = new char[iterCount];\n             int i = 0;\n@@ -625,6 +635,11 @@ public LineMetrics getLineMetrics(CharacterIterator iter, int start,\n     }\n \n     public LineMetrics getLineMetrics(String str, FontRenderContext frc) {\n+        \n+        if (frc == null){\n+            throw new NullPointerException(Messages.getString(\"awt.00\")); //$NON-NLS-1$\n+        }\n+        \n         FontPeerImpl peer = (FontPeerImpl)this.getPeer();\n         return peer.getLineMetrics(str, frc, getTransform());\n     }\n@@ -771,25 +786,25 @@ public GlyphVector layoutGlyphVector(FontRenderContext frc, char[] chars,\n \n     @Override\n     public String toString() {\n-        String stl = \"plain\";\n+        String stl = \"plain\"; //$NON-NLS-1$\n         String result;\n \n         if (this.isBold() && this.isItalic()){\n-            stl = \"bolditalic\";\n+            stl = \"bolditalic\"; //$NON-NLS-1$\n         }\n         if (this.isBold() && !this.isItalic()){\n-            stl = \"bold\";\n+            stl = \"bold\"; //$NON-NLS-1$\n         }\n \n         if (!this.isBold() && this.isItalic()){\n-            stl = \"italic\";\n+            stl = \"italic\"; //$NON-NLS-1$\n         }\n \n         result = this.getClass().getName() +\n-                \"[family=\" + this.getFamily() +\n-                \",name=\"+ this.name +\n-                \",style=\" + stl +\n-                \",size=\" + this.size + \"]\";\n+                \"[family=\" + this.getFamily() + //$NON-NLS-1$\n+                \",name=\"+ this.name + //$NON-NLS-1$\n+                \",style=\" + stl + //$NON-NLS-1$\n+                \",size=\" + this.size + \"]\"; //$NON-NLS-1$ //$NON-NLS-2$\n         return result;\n     }\n ",
                "deletions": 16
            },
            {
                "sha": "e01d893a00f54a875640621ee8afe8522786dc9b",
                "filename": "modules/awt/src/main/java/common/java/awt/font/TextLayout.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/java/awt/font/TextLayout.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/java/awt/font/TextLayout.java",
                "status": "modified",
                "changes": 21,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/java/awt/font/TextLayout.java?ref=0a9c12211014f875bcf305f0d9f0efde342920e0",
                "patch": "@@ -35,6 +35,7 @@\n import org.apache.harmony.awt.gl.font.CaretManager;\n import org.apache.harmony.awt.gl.font.TextMetricsCalculator;\n import org.apache.harmony.awt.gl.font.TextRunBreaker;\n+import org.apache.harmony.awt.internal.nls.Messages;\n \n public final class TextLayout implements Cloneable {\n \n@@ -70,6 +71,18 @@ public TextHitInfo getStrongCaret(TextHitInfo hit1, TextHitInfo hit2, TextLayout\n     float justificationWidth = -1;\n \n     public TextLayout(String string, Font font, FontRenderContext frc) {\n+        if (string == null){\n+            throw new IllegalArgumentException(Messages.getString(\"awt.01\", \"string\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+        \n+        if (font == null){\n+            throw new IllegalArgumentException(Messages.getString(\"awt.01\", \"font\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+\n+        if (string.length() == 0){\n+            throw new IllegalArgumentException(Messages.getString(\"awt.02\", \"string\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+\n         AttributedString as = new AttributedString(string);\n         as.addAttribute(TextAttribute.FONT, font);\n         this.breaker = new TextRunBreaker(as.getIterator(), frc);\n@@ -88,6 +101,14 @@ public TextLayout(\n     }\n \n     public TextLayout(AttributedCharacterIterator text, FontRenderContext frc) {\n+        if (text == null){\n+            throw new IllegalArgumentException(Messages.getString(\"awt.03\", \"text\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+        \n+        if (text.getBeginIndex() == text.getEndIndex()){\n+            throw new IllegalArgumentException(Messages.getString(\"awt.04\", \"text\")); //$NON-NLS-1$ //$NON-NLS-2$\n+        }\n+\n         this.breaker = new TextRunBreaker(text, frc);\n         caretManager = new CaretManager(breaker);\n     }",
                "deletions": 0
            },
            {
                "sha": "ff58ca206c9fcef3eca51566fe8097979f1f4603",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/gl/font/FontMetricsImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/font/FontMetricsImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/font/FontMetricsImpl.java",
                "status": "modified",
                "changes": 3,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/gl/font/FontMetricsImpl.java?ref=0a9c12211014f875bcf305f0d9f0efde342920e0",
                "patch": "@@ -76,7 +76,8 @@ public FontMetricsImpl(Font fnt) {\n \n         }\n \n-        LineMetricsImpl lm = (LineMetricsImpl)font.getLineMetrics(\"\", null);\n+        LineMetricsImpl lm = (LineMetricsImpl)peer.getLineMetrics(\"\", null, at);\n+        \n         this.ascent = lm.getLogicalAscent();\n         this.descent = lm.getLogicalDescent();\n         this.leading = lm.getLogicalLeading();",
                "deletions": 1
            },
            {
                "sha": "82db986551bfacc7e49a1ae03181a5b0be3a2cdd",
                "filename": "modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/main/java/common/org/apache/harmony/awt/internal/nls/messages.properties?ref=0a9c12211014f875bcf305f0d9f0efde342920e0",
                "patch": "@@ -14,3 +14,8 @@\n # \n \n # messages for EN locale\n+awt.00=FontRenderContext is null\n+awt.01='{0}' parameter is null\n+awt.02='{0}' parameter has zero length\n+awt.03='{0}' iterator parameter is null\n+awt.04='{0}' iterator parameter has zero length",
                "deletions": 0
            },
            {
                "sha": "d648613e77dcb9784c1406739e642e58d3b3dcff",
                "filename": "modules/awt/src/test/api/java/common/java/awt/font/TextLayoutTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/test/api/java/common/java/awt/font/TextLayoutTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0a9c12211014f875bcf305f0d9f0efde342920e0/modules/awt/src/test/api/java/common/java/awt/font/TextLayoutTest.java",
                "status": "modified",
                "changes": 73,
                "additions": 73,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/awt/src/test/api/java/common/java/awt/font/TextLayoutTest.java?ref=0a9c12211014f875bcf305f0d9f0efde342920e0",
                "patch": "@@ -29,6 +29,9 @@\n import java.awt.geom.*;\n import java.text.AttributedString;\n import java.text.AttributedCharacterIterator;\n+import java.text.AttributedCharacterIterator.Attribute;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class TextLayoutTest extends TestCase\n {\n@@ -642,6 +645,76 @@ public void testGetStrongCaret() throws Exception\n         assertEquals(TextHitInfo.leading(5), i);\n     }\n \n+    public void testTextLayoutConstructorConstraints() throws Exception{\n+        // regression test for Harmony-1464\n+        try{\n+            new TextLayout(null, (Font)null, null);\n+        } catch (IllegalArgumentException e) {\n+                // expected\n+        }\n+\n+        try{\n+            new TextLayout(null, f, null);\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+        \n+        try{\n+            new TextLayout(\"\", f, null);\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        try{\n+            new TextLayout(\"aa\", f, null);\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+\n+        try{\n+            new TextLayout(null, null);\n+        } catch (IllegalArgumentException e) {\n+            // expected\n+        }\n+\n+        AttributedString as = new AttributedString(\"test\");\n+        as.addAttribute(TextAttribute.FONT, f, 0, 2 );\n+\n+        try{\n+            new TextLayout(as.getIterator(), null);\n+        } catch (NullPointerException e) {\n+            // expected\n+        }\n+        \n+        try {\n+            new TextLayout(null, (Map<? extends Attribute,?>)null, (FontRenderContext) null);\n+        } catch (IllegalArgumentException e) {\n+            System.out.println(\"success: \" + e.getMessage());\n+            // as expected\n+        }\n+\n+        try {\n+            new TextLayout(null, (Map<? extends Attribute,?>)new HashMap(), (FontRenderContext) null);\n+        } catch (IllegalArgumentException e) {\n+            // as expected\n+        }\n+\n+        try {\n+            new TextLayout(\"aa\", (Map<? extends Attribute,?>)new HashMap(), (FontRenderContext) null);\n+        } catch (NullPointerException e) {\n+            // as expected\n+        }\n+\n+        \n+        try{\n+            new TextLayout(\"\", (Map<? extends Attribute,?>)new HashMap(), (FontRenderContext) null);\n+        } catch (IllegalArgumentException e) {\n+            // as expected\n+            System.out.println(\"success: \" + e.getMessage());\n+        }\n+        \n+    }\n+\n     public static Test suite()\n     {\n         return new TestSuite(TextLayoutTest.class);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch for HARMONY-1168\n[classlib][beans] compatibility: BeanContextServicesSupport.getCurrentServiceSelectors(null) lead to NPE on Harmony and returns 'null' on RI\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@442489 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/8e30bf6e7f3dd92917701e6151ac55188b8d21b5",
        "parent": "https://github.com/apache/harmony-classlib/commit/d64891b62f60acf6e614cea1b66c3b760ab93d82",
        "bug_id": "harmony-classlib_287",
        "file": [
            {
                "sha": "92477ee3b4a4a3cdb09e6617adbd49a8f1a64ff6",
                "filename": "modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/8e30bf6e7f3dd92917701e6151ac55188b8d21b5/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/8e30bf6e7f3dd92917701e6151ac55188b8d21b5/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java",
                "status": "modified",
                "changes": 4,
                "additions": 4,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/beancontext/BeanContextServicesSupport.java?ref=8e30bf6e7f3dd92917701e6151ac55188b8d21b5",
                "patch": "@@ -427,6 +427,10 @@ public Iterator getCurrentServiceClasses() {\n      */\n     public Iterator getCurrentServiceSelectors(Class serviceClass) {\n \n+        if (serviceClass == null) {\n+            return null;\n+        }\n+\n         synchronized (BeanContext.globalHierarchyLock) {\n             synchronized (this.services) {\n                 BCSSServiceProvider bcsp = this.services.get(serviceClass);",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1354([classlib][text] unexpected NPE for AttributedString(AttributedCharacterIterator, 0, 0)) and HARMONY-1355([classlib][text] unexpected OOM for AttributedString(AttributedCharacterIterator))\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@440002 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/0257904616b6c52829c4f3633766cbf8035a4044",
        "parent": "https://github.com/apache/harmony-classlib/commit/0d0ecd3cb2c9d7b0035bd0082c5389ab188a1b3d",
        "bug_id": "harmony-classlib_288",
        "file": [
            {
                "sha": "988f52f8ec12a7794c1c035ce8dcf6adee7ad9da",
                "filename": "modules/text/src/main/java/java/text/AttributedString.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0257904616b6c52829c4f3633766cbf8035a4044/modules/text/src/main/java/java/text/AttributedString.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0257904616b6c52829c4f3633766cbf8035a4044/modules/text/src/main/java/java/text/AttributedString.java",
                "status": "modified",
                "changes": 12,
                "additions": 11,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/AttributedString.java?ref=0257904616b6c52829c4f3633766cbf8035a4044",
                "patch": "@@ -399,13 +399,19 @@ public char setIndex(int location) {\n     }\r\n \r\n     public AttributedString(AttributedCharacterIterator iterator) {\r\n+        if (iterator.getBeginIndex() > iterator.getEndIndex()) {\r\n+        \tthrow new IllegalArgumentException(\"Invalid substring range\");\r\n+        }\r\n         StringBuffer buffer = new StringBuffer();\r\n-        while (iterator.current() != CharacterIterator.DONE) {\r\n+        for (int i = iterator.getBeginIndex(); i < iterator.getEndIndex(); i++) { \r\n             buffer.append(iterator.current());\r\n             iterator.next();\r\n         }\r\n         text = buffer.toString();\r\n         Set<AttributedCharacterIterator.Attribute> attributes = iterator.getAllAttributeKeys();\r\n+        if (attributes == null) {\r\n+        \treturn;\r\n+        }\r\n         attributeMap = new HashMap<Attribute, List<Range>>((attributes.size() * 4 / 3) + 1);\r\n \r\n         Iterator<Attribute> it = attributes.iterator();\r\n@@ -429,6 +435,10 @@ private AttributedString(AttributedCharacterIterator iterator, int start, int en\n         if (start < iterator.getBeginIndex() || end > iterator.getEndIndex() || start > end) {\r\n             throw new IllegalArgumentException();\r\n         }\r\n+        \r\n+        if(attributes == null){\r\n+            return;\r\n+        }\r\n \r\n         StringBuffer buffer = new StringBuffer();\r\n         iterator.setIndex(start);\r",
                "deletions": 1
            },
            {
                "sha": "a368bbb19c00fb22219c0a55989d0ce6b429cdf6",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/0257904616b6c52829c4f3633766cbf8035a4044/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/0257904616b6c52829c4f3633766cbf8035a4044/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java",
                "status": "modified",
                "changes": 77,
                "additions": 77,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/AttributedStringTest.java?ref=0257904616b6c52829c4f3633766cbf8035a4044",
                "patch": "@@ -17,6 +17,8 @@\n import java.text.AttributedCharacterIterator;\n import java.text.AttributedString;\n import java.text.CharacterIterator;\n+import java.util.Map;\n+import java.util.Set;\n \n public class AttributedStringTest extends junit.framework.TestCase {\n \n@@ -35,6 +37,81 @@ public void test_ConstructorLjava_lang_String() {\n \t\tassertTrue(\"Wrong string: \" + buf, buf.toString().equals(test));\n \t}\n \n+\t/**\n+\t * @tests java.text.AttributedString#AttributedString(AttributedCharacterIterator)\n+\t */\n+\tpublic void test_ConstructorLAttributedCharacterIterator() {\n+\t\t//Regression for HARMONY-1354\n+\t\tassertNotNull(new AttributedString(new testAttributedCharacterIterator()));\n+\t}\n+\t/**\n+\t * @tests java.text.AttributedString#AttributedString(AttributedCharacterIterator, int, int)\n+\t */\n+\tpublic void test_ConstructorLAttributedCharacterIteratorII() {\n+\t\t//Regression for HARMONY-1355\n+\t\tassertNotNull(new AttributedString(new testAttributedCharacterIterator(), 0, 0));\n+\t}\n+\n+\tprivate class testAttributedCharacterIterator implements AttributedCharacterIterator {\n+\t    public Set getAllAttributeKeys() {\n+\t        return null;\n+\t    }\n+\t    public Object getAttribute(AttributedCharacterIterator.Attribute p) {\n+\t        return null;\n+\t    }\n+\t    public Map getAttributes() {\n+\t        return null;\n+\t    }\n+\t    public int getRunLimit(Set p) {\n+\t        return 0;\n+\t    }\n+\t    public int getRunLimit(AttributedCharacterIterator.Attribute p) {\n+\t        return 0;\n+\t    }\n+\t    public int getRunLimit() {\n+\t        return 0;\n+\t    }\n+\t    public int getRunStart(Set p) {\n+\t        return 0;\n+\t    }\n+\t    public int getRunStart(AttributedCharacterIterator.Attribute p) {\n+\t        return 0;\n+\t    }\n+\t    public int getRunStart() {\n+\t        return 0;\n+\t    }\n+\t    public Object clone() {\n+\t        return null;\n+\t    }\n+\t    public int getIndex() {\n+\t        return 0;\n+\t    }\n+\t    public int getEndIndex() {\n+\t        return 0;\n+\t    }\n+\t    public int getBeginIndex() {\n+\t        return 0;\n+\t    }\n+\t    public char setIndex(int p) {\n+\t        return 'a';\n+\t    }\n+\t    public char previous() {\n+\t        return 'a';\n+\t    }\n+\t    public char next() {\n+\t        return 'a';\n+\t    }\n+\t    public char current() {\n+\t        return 'a';\n+\t    }\n+\t    public char last() {\n+\t        return 'a';\n+\t    }\n+\t    public char first() {\n+\t        return 'a';\n+\t    }\n+\t}\n+\n     public void test_addAttributeLjava_text_AttributedCharacterIterator$AttributeLjava_lang_ObjectII() {\n         AttributedString as = new AttributedString(\"test\");\n         as.addAttribute(AttributedCharacterIterator.Attribute.LANGUAGE, \"a\", 2,",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patch from \"[#HARMONY-650] [classlib][text]unexpected NPE for\nobject constructed by java.text.Bidi(AttributedCharacterIterator)\".\n\nAnd updated MANIFEST to reflect new dependency.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@438844 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7",
        "parent": "https://github.com/apache/harmony-classlib/commit/992461cc991b49ce16b0f3a7fc9d89a080f951de",
        "bug_id": "harmony-classlib_289",
        "file": [
            {
                "sha": "a162819cfcdd677b3cac6a7f6fc7251acab7112a",
                "filename": "modules/text/META-INF/MANIFEST.MF",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/META-INF/MANIFEST.MF",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/META-INF/MANIFEST.MF",
                "status": "modified",
                "changes": 1,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/META-INF/MANIFEST.MF?ref=fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7",
                "patch": "@@ -12,6 +12,7 @@ Import-Package: java.io,\n  java.net,\r\n  java.security,\r\n  java.util,\r\n+ java.awt.font,\r\n  org.apache.harmony.luni.util,\r\n  tests.support;resolution:=optional;hy_usage=test,\r\n  tests.util;resolution:=optional;hy_usage=test\r",
                "deletions": 0
            },
            {
                "sha": "4e2397eea0a232720dcf4e716a66f84dc8be6c6e",
                "filename": "modules/text/src/main/java/java/text/Bidi.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/src/main/java/java/text/Bidi.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/src/main/java/java/text/Bidi.java",
                "status": "modified",
                "changes": 90,
                "additions": 76,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/main/java/java/text/Bidi.java?ref=fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7",
                "patch": "@@ -18,6 +18,8 @@\n \r\n import java.util.Arrays;\r\n import java.util.LinkedList;\r\n+import java.awt.font.TextAttribute;\r\n+import java.awt.font.NumericShaper;\r\n \r\n import org.apache.harmony.text.BidiRun;\r\n import org.apache.harmony.text.BidiWrapper;\r\n@@ -91,11 +93,65 @@\n \tpublic Bidi(AttributedCharacterIterator paragraph) {\r\n         if (paragraph == null) {\r\n             throw new IllegalArgumentException(\"paragraph is null\");\r\n-        /*\r\n-         * TODO: dependency on java.awt.font.TextAttribute and\r\n-         * java.awt.font.NumericShaper which is not implemented yet.\r\n-         */\r\n         }\r\n+\r\n+        int begin = paragraph.getBeginIndex();\r\n+        int end = paragraph.getEndIndex();\r\n+        int length = end - begin;\r\n+        char text[] = new char[length+1]; // One more char for AttributedCharacterIterator.DONE\r\n+\r\n+        if (length != 0) {\r\n+            text[0] = paragraph.first();\r\n+        } else {\r\n+            paragraph.first();\r\n+        }\r\n+\r\n+        // First check the RUN_DIRECTION attribute.\r\n+        int flags = DIRECTION_DEFAULT_LEFT_TO_RIGHT;\r\n+        Object direction = paragraph.getAttribute(TextAttribute.RUN_DIRECTION);\r\n+        if (direction != null && direction instanceof Boolean) {\r\n+            if (direction.equals(TextAttribute.RUN_DIRECTION_LTR)) {\r\n+                flags = DIRECTION_LEFT_TO_RIGHT;\r\n+            } else {\r\n+                flags = DIRECTION_RIGHT_TO_LEFT;\r\n+            }\r\n+        }\r\n+\r\n+        // Retrieve the text and gather BIDI_EMBEDDINGS\r\n+        byte embeddings[] = null;\r\n+        for (\r\n+                int textLimit = 1, i = 1;\r\n+                i < length;\r\n+                textLimit = paragraph.getRunLimit(TextAttribute.BIDI_EMBEDDING) - begin + 1\r\n+        ) {\r\n+            Object embedding = paragraph.getAttribute(TextAttribute.BIDI_EMBEDDING);\r\n+            if (embedding != null && embedding instanceof Integer) {\r\n+                int embLevel = ((Integer) embedding).intValue();\r\n+\r\n+                if (embeddings == null) {\r\n+                    embeddings = new byte[length];\r\n+                }\r\n+\r\n+                for (; i < textLimit; i++) {\r\n+                    text[i] = paragraph.next();\r\n+                    embeddings[i-1] = (byte) embLevel;\r\n+                }\r\n+            } else {\r\n+                for (; i < textLimit; i++) {\r\n+                    text[i] = paragraph.next();\r\n+                }\r\n+            }\r\n+        }\r\n+\r\n+        // Apply NumericShaper to the text\r\n+        Object numericShaper = paragraph.getAttribute(TextAttribute.NUMERIC_SHAPING);\r\n+        if (numericShaper != null && numericShaper instanceof NumericShaper) {\r\n+            ((NumericShaper) numericShaper).shape(text, 0, length);\r\n+        }\r\n+\r\n+        long pBidi = createUBiDi(text, 0, embeddings, 0, length, flags);\r\n+        readBidiInfo(pBidi);\r\n+        BidiWrapper.ubidi_close(pBidi);\r\n     }\r\n \r\n \t/**\r\n@@ -231,14 +287,18 @@ private void readBidiInfo(long pBidi) {\n \r\n \t\tint runCount = BidiWrapper.ubidi_countRuns(pBidi);\r\n \t\tif (runCount == 0) {\r\n-\t\t\trunCount = 1;\r\n-\t\t\truns = new BidiRun[runCount];\r\n-\t\t\truns[0] = new BidiRun(0, 0, baseLevel);\r\n+            unidirectional = true;\r\n+            runs = null;\r\n \t\t} else if (runCount < 0) {\r\n-\t\t\trunCount = 0;\r\n \t\t\truns = null;\r\n \t\t} else {\r\n \t\t\truns = BidiWrapper.ubidi_getRuns(pBidi);\r\n+\r\n+            // Simplified case for one run which has the base level\r\n+            if (runCount == 1 && runs[0].getLevel() == baseLevel) {\r\n+                unidirectional = true;\r\n+                runs = null;\r\n+            }\r\n \t\t}\r\n \r\n \t\tdirection = BidiWrapper.ubidi_getDirection(pBidi);\r\n@@ -254,6 +314,8 @@ private void readBidiInfo(long pBidi) {\n \r\n \tprivate int direction;\r\n \r\n+    private boolean unidirectional;\r\n+\r\n \t/**\r\n \t * Return whether the base level is from left to right.\r\n \t * \r\n@@ -320,7 +382,7 @@ public int getLength() {\n \t * \r\n \t * @param offset\r\n \t *            the offset of the character.\r\n-\t * @return the int value of the evel.\r\n+\t * @return the int value of the level.\r\n \t */\r\n \tpublic int getLevelAt(int offset) {\r\n \t\ttry {\r\n@@ -336,7 +398,7 @@ public int getLevelAt(int offset) {\n \t * @return the int value of runs, at least 1.\r\n \t */\r\n \tpublic int getRunCount() {\r\n-\t\treturn runs.length;\r\n+\t\treturn unidirectional ? 1 : runs.length;\r\n \t}\r\n \r\n \t/**\r\n@@ -347,7 +409,7 @@ public int getRunCount() {\n \t * @return the level of the run.\r\n \t */\r\n \tpublic int getRunLevel(int run) {\r\n-\t\treturn runs[run].getLevel();\r\n+\t\treturn unidirectional ? baseLevel : runs[run].getLevel();\r\n \t}\r\n \r\n \t/**\r\n@@ -358,7 +420,7 @@ public int getRunLevel(int run) {\n \t * @return the limit offset of the run.\r\n \t */\r\n \tpublic int getRunLimit(int run) {\r\n-\t\treturn runs[run].getLimit();\r\n+\t\treturn unidirectional ? length : runs[run].getLimit();\r\n \t}\r\n \r\n \t/**\r\n@@ -369,7 +431,7 @@ public int getRunLimit(int run) {\n \t * @return the start offset of the run.\r\n \t */\r\n \tpublic int getRunStart(int run) {\r\n-\t\treturn runs[run].getStart();\r\n+\t\treturn unidirectional ? 0 : runs[run].getStart();\r\n \t}\r\n \r\n \t/**\r\n@@ -466,6 +528,6 @@ public static boolean requiresBidi(char[] text, int start, int limit) {\n \t */\r\n \tpublic String toString() {\r\n \t\treturn super.toString() + \"[direction: \" + direction + \" baselevel: \" + baseLevel\r\n-\t\t\t + \" length: \" + length + \" runs: \" + runs + \"]\";\r\n+\t\t\t + \" length: \" + length + \" runs: \" + (unidirectional ? \"null\" : runs.toString()) + \"]\";\r\n \t}\r\n }\r",
                "deletions": 14
            },
            {
                "sha": "56189d40d73832533f34dc44eba3fc1220da215a",
                "filename": "modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java",
                "status": "modified",
                "changes": 18,
                "additions": 18,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/text/src/test/java/org/apache/harmony/text/tests/java/text/BidiTest.java?ref=fe99a7daa4cce2fc01d156015dbbb7bc1d3f5cb7",
                "patch": "@@ -15,6 +15,7 @@\n \n package org.apache.harmony.text.tests.java.text;\n \n+import java.text.AttributedString; \n import java.text.Bidi;\n import java.util.Arrays;\n \n@@ -946,5 +947,22 @@ public void testGetRuns() {\n             assertEquals(expectedRuns[i][1], bi.getRunLimit(i));\n         }\n     }\n+       public void testGetRunLimit() {\n+         bd = new Bidi(\"text\", Bidi.DIRECTION_LEFT_TO_RIGHT);\n+         try {\n+             assertTrue(4 == bd.getRunLimit(-1));\n+         } catch (Exception e) {\n+                       fail(\"Unexpected exception: \" + e);\n+         }\n+       }\n+       public void testBidiConstructor_Iterator() {\n+               AttributedString paragraph = new AttributedString(\"text\");\n+         bd = new Bidi(paragraph.getIterator());\n+         try {\n+             assertTrue(4 == bd.getRunLimit(1));\n+         } catch (Exception e) {\n+                       fail(\"Unexpected exception: \" + e);\n+         }\n+       }\n \n }",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from \"[#HARMONY-1131] [classlib][luni] Compatibility:\njava.net.URL(null, String, int, String, URLStreamHandler) does not throw\nNPE if protocol==null\".\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@438075 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be",
        "parent": "https://github.com/apache/harmony-classlib/commit/153455be28b58dc12a8f7b15b410d6b7f460ab8a",
        "bug_id": "harmony-classlib_290",
        "file": [
            {
                "sha": "eb2d2c4b0cf410305aa2a190a9dc41e0d1108bb8",
                "filename": "modules/luni/src/main/java/java/net/URL.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be/modules/luni/src/main/java/java/net/URL.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be/modules/luni/src/main/java/java/net/URL.java",
                "status": "modified",
                "changes": 7,
                "additions": 6,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/net/URL.java?ref=c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be",
                "patch": "@@ -402,7 +402,12 @@ public URL(String protocol, String host, int port, String file,\n \t\t\thost = \"[\" + host + \"]\"; //$NON-NLS-1$ //$NON-NLS-2$\r\n \t\t}\r\n \r\n-\t\tthis.protocol = protocol;\r\n+\t\tif (protocol != null){\r\n+\t\t    this.protocol = protocol;\r\n+        } else {\r\n+            throw new NullPointerException(Msg.getString(\"K00b3\", protocol)); //$NON-NLS-1$\r\n+        }\r\n+        \r\n \t\tthis.host = host;\r\n \t\tthis.port = port;\r\n \r",
                "deletions": 1
            },
            {
                "sha": "ea6f06e1591bc17a638c591a9164e7c6f911b7a4",
                "filename": "modules/luni/src/test/java/tests/api/java/net/URLTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be/modules/luni/src/test/java/tests/api/java/net/URLTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be/modules/luni/src/test/java/tests/api/java/net/URLTest.java",
                "status": "modified",
                "changes": 74,
                "additions": 74,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/net/URLTest.java?ref=c71e9bd1e5a4890a6dbcb9ef6a0df0cdf4a8f3be",
                "patch": "@@ -1178,7 +1178,81 @@ public void test_openConnection_Security() throws Exception {\n             System.setSecurityManager(null);\r\n         }\r\n     }\r\n+\r\n+    /**\r\n+     * URLStreamHandler implementation class necessary for tests. \r\n+     */\r\n+    private class TestURLStreamHandler extends URLStreamHandler {\r\n+        public URLConnection openConnection(URL arg0) throws IOException {\r\n+            try {\r\n+                return arg0.openConnection();\r\n+            } catch (Throwable e) {\r\n+                return null;\r\n+            }\r\n+        }\r\n+    }\r\n+    \r\n+    /**\r\n+     * Check NPE throwing in constructor when protocol argument is null and\r\n+     * URLStreamHandler argument is initialized.\r\n+     */\r\n+    public void test_ConstructorLnullLjava_lang_StringILjava_lang_StringLjava_net_URLStreamHandler()\r\n+        throws Exception {\r\n+        // Regression for HARMONY-1131\r\n+        TestURLStreamHandler lh = new TestURLStreamHandler();\r\n+\r\n+        try {\r\n+            new URL(null, \"1\", 0, \"file\", lh);\r\n+            fail(\"NullPointerException expected, but nothing was thrown!\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected NullPointerException\r\n+        }\r\n+\r\n+    }\r\n     \r\n+    /**\r\n+     * Check NPE throwing in constructor when protocol argument is null and\r\n+     * URLStreamHandler argument is null.\r\n+     */\r\n+    public void test_ConstructorLnullLjava_lang_StringILjava_lang_StringLnull()\r\n+        throws Exception {\r\n+        // Regression for HARMONY-1131\r\n+        try {\r\n+            new URL(null, \"1\", 0, \"file\", null);\r\n+            fail(\"NullPointerException expected, but nothing was thrown!\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected NullPointerException\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check NPE throwing in constructor with 4 params when protocol argument is null.\r\n+     */\r\n+    public void test_ConstructorLnullLjava_lang_StringILjava_lang_String()\r\n+        throws Exception {\r\n+        // Regression for HARMONY-1131\r\n+        try {\r\n+            new URL(null, \"1\", 0, \"file\");\r\n+            fail(\"NullPointerException expected, but nothing was thrown!\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected NullPointerException\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Check NPE throwing in constructor with 3 params when protocol argument is null.\r\n+     */\r\n+    public void test_ConstructorLnullLjava_lang_StringLjava_lang_String()\r\n+        throws Exception {\r\n+        // Regression for HARMONY-1131\r\n+        try {\r\n+            new URL(null, \"1\", \"file\");\r\n+            fail(\"NullPointerException expected, but nothing was thrown!\");\r\n+        } catch (NullPointerException e) {\r\n+            // Expected NullPointerException\r\n+        }\r\n+    }\r\n+\r\n \t/**\r\n \t * Sets up the fixture, for example, open a network connection. This method\r\n \t * is called before a test is executed.\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Patch applied for HARMONY-1255 ( [classlib][logging]compatibility: java.util.logging.Handler.isLoggable(null) doesn't throw NPE while RI throws.)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@433900 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/d731117d74e33cbbfaa117a8abd60f60a733d4bd",
        "parent": "https://github.com/apache/harmony-classlib/commit/5702c7a73894c3e89da4bf3f1218421121fdc7ec",
        "bug_id": "harmony-classlib_291",
        "file": [
            {
                "sha": "231e9ef048d077a81e9dda5c53e13a2e9a4b2689",
                "filename": "modules/logging/src/main/java/java/util/logging/Handler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/main/java/java/util/logging/Handler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/main/java/java/util/logging/Handler.java",
                "status": "modified",
                "changes": 824,
                "additions": 412,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/Handler.java?ref=d731117d74e33cbbfaa117a8abd60f60a733d4bd",
                "patch": "@@ -1,412 +1,412 @@\n-/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *     http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package java.util.logging;\n-\n-import java.nio.charset.Charset;\n-import java.security.AccessController;\n-import java.security.PrivilegedExceptionAction;\n-import java.io.UnsupportedEncodingException;\n-\n-/**\n- * A <code>Handler</code> object accepts a logging request and exports the\n- * desired messages to a target, for example, a file, the console, etc. It can\n- * be disabled by setting its logging level to <code>Level.OFF</code>.\n- * \n- */\n-public abstract class Handler {\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Constants\n-     * -------------------------------------------------------------------\n-     */\n-    private static final Level DEFAULT_LEVEL = Level.ALL;\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Instance variables\n-     * -------------------------------------------------------------------\n-     */\n-\n-    // the error manager to report errors during logging\n-    private ErrorManager errorMan;\n-\n-    // the character encoding used by this handler\n-    private String encoding;\n-\n-    // the logging level\n-    private Level level;\n-\n-    // the formatter used to export messages\n-    private Formatter formatter;\n-\n-    // the filter used to filter undesired messages\n-    private Filter filter;\n-\n-    // class name, used for property reading\n-    private String prefix;\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Constructors\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * Constructs a <code>Handler</code> object with a default error manager,\n-     * the default encoding, and the default logging level\n-     * <code>Level.ALL</code>. It has no filter and no formatter.\n-     */\n-    protected Handler() {\n-        this.errorMan = new ErrorManager();\n-        this.level = DEFAULT_LEVEL;\n-        this.encoding = null;\n-        this.filter = null;\n-        this.formatter = null;\n-        this.prefix = this.getClass().getName();\n-    }\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Methods\n-     * -------------------------------------------------------------------\n-     */\n-\n-    // get a instance from given class name, using Class.forName()\n-    private Object getDefaultInstance(String className) {\n-        Object result = null;\n-        if (null == className) {\n-            return result;\n-        }\n-        try {\n-            result = Class.forName(className).newInstance();\n-        } catch (Exception e) {\n-            //ignore\n-        }\n-        return result;\n-    }\n-\n-    // get a instance from given class name, using context classloader\n-    private Object getCustomizeInstance(final String className)\n-            throws Exception {\n-        Class<?> c = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {\n-                    public Class<?> run() throws Exception {\n-                        ClassLoader loader = Thread.currentThread()\n-                                .getContextClassLoader();\n-                        if (null == loader) {\n-                            loader = ClassLoader.getSystemClassLoader();\n-                        }\n-                        return loader.loadClass(className);\n-                    }\n-                });\n-        return c.newInstance();\n-    }\n-\n-    // print error message in some format\n-    void printInvalidPropMessage(String key, String value, Exception e) {\n-        String msg = new StringBuffer().append(\"Invalid property value for \") //$NON-NLS-1$\n-                .append(prefix).append(\".\").append(key).append(\":\").append( //$NON-NLS-1$//$NON-NLS-2$\n-                        value).toString();\n-        errorMan.error(msg, e, ErrorManager.GENERIC_FAILURE);\n-    }\n-\n-    /*\n-     * init the common properties, including filter, level, formatter, and\n-     * encoding\n-     */\n-    void initProperties(String defaultLevel, String defaultFilter,\n-            String defaultFormatter, String defaultEncoding) {\n-        LogManager manager = LogManager.getLogManager();\n-\n-        //set filter\n-        final String filterName = manager.getProperty(prefix + \".filter\"); //$NON-NLS-1$\n-        if (null != filterName) {\n-            try {\n-                filter = (Filter) getCustomizeInstance(filterName);\n-            } catch (Exception e1) {\n-                printInvalidPropMessage(\"filter\", filterName, e1); //$NON-NLS-1$\n-                filter = (Filter) getDefaultInstance(defaultFilter);\n-            }\n-        } else {\n-            filter = (Filter) getDefaultInstance(defaultFilter);\n-        }\n-\n-        //set level\n-        String levelName = manager.getProperty(prefix + \".level\"); //$NON-NLS-1$\n-        if (null != levelName) {\n-            try {\n-                level = Level.parse(levelName);\n-            } catch (Exception e) {\n-                printInvalidPropMessage(\"level\", levelName, e); //$NON-NLS-1$\n-                level = Level.parse(defaultLevel);\n-            }\n-        } else {\n-            level = Level.parse(defaultLevel);\n-        }\n-\n-        //set formatter\n-        final String formatterName = manager.getProperty(prefix + \".formatter\"); //$NON-NLS-1$\n-        if (null != formatterName) {\n-            try {\n-                formatter = (Formatter) getCustomizeInstance(formatterName);\n-            } catch (Exception e) {\n-                printInvalidPropMessage(\"formatter\", formatterName, e); //$NON-NLS-1$\n-                formatter = (Formatter) getDefaultInstance(defaultFormatter);\n-            }\n-        } else {\n-            formatter = (Formatter) getDefaultInstance(defaultFormatter);\n-        }\n-\n-        //set encoding\n-        final String encodingName = manager.getProperty(prefix + \".encoding\"); //$NON-NLS-1$\n-        try {\n-            internalSetEncoding(encodingName);\n-        } catch (UnsupportedEncodingException e) {\n-            printInvalidPropMessage(\"encoding\", encodingName, e); //$NON-NLS-1$\n-        }\n-    }\n-\n-    /**\n-     * Closes this handler. A flush operation will usually be performed and all\n-     * the associated resources will be freed. Client applications should not\n-     * use a handler after closing it.\n-     * \n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public abstract void close();\n-\n-    /**\n-     * Flushes any buffered output.\n-     */\n-    public abstract void flush();\n-\n-    /**\n-     * Accepts an actual logging request.\n-     * \n-     * @param record\n-     *            the log record to be logged\n-     */\n-    public abstract void publish(LogRecord record);\n-\n-    /**\n-     * Gets the character encoding used by this handler.\n-     * \n-     * @return the character encoding used by this handler\n-     */\n-    public String getEncoding() {\n-        return this.encoding;\n-    }\n-\n-    /**\n-     * Gets the error manager used by this handler to report errors during\n-     * logging.\n-     * \n-     * @return the error manager used by this handler\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public ErrorManager getErrorManager() {\n-        LogManager.getLogManager().checkAccess();\n-        return this.errorMan;\n-    }\n-\n-    /**\n-     * Gets the filter used by this handler.\n-     * \n-     * @return the filter used by this handler\n-     */\n-    public Filter getFilter() {\n-        return this.filter;\n-    }\n-\n-    /**\n-     * Gets the formatter used by this handler to format the logging messages.\n-     * \n-     * @return the formatter used by this handler\n-     */\n-    public Formatter getFormatter() {\n-        return this.formatter;\n-    }\n-\n-    /**\n-     * Gets the logging level of this handler.\n-     * \n-     * @return the logging level of this handler\n-     */\n-    public Level getLevel() {\n-        return this.level;\n-    }\n-\n-    /**\n-     * Determines whether the supplied log record need to be logged. The logging\n-     * levels will be checked as well as the filter.\n-     * \n-     * @param record\n-     *            the log record to be checked\n-     * @return <code>true</code> if the supplied log record need to be logged,\n-     *         otherwise <code>false</code>\n-     */\n-    public boolean isLoggable(LogRecord record) {\n-        if (null == record) {\n-            return false;\n-        }\n-        if (this.level.intValue() == Level.OFF.intValue()) {\n-            return false;\n-        } else if (record.getLevel().intValue() >= this.level.intValue()) {\n-            return null == this.filter || this.filter.isLoggable(record);\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * Report an error to the error manager associated with this handler.\n-     * \n-     * @param msg\n-     *            the error message\n-     * @param ex\n-     *            the associated exception\n-     * @param code\n-     *            the error code\n-     */\n-    protected void reportError(String msg, Exception ex, int code) {\n-        this.errorMan.error(msg, ex, code);\n-    }\n-\n-    /**\n-     * Sets the character encoding used by this handler. A <code>null</code>\n-     * value indicates the using of the default encoding. This internal method\n-     * does not check security.\n-     * \n-     * @param newEncoding\n-     *            the character encoding to set\n-     * @throws UnsupportedEncodingException\n-     *             If the specified encoding is not supported by the runtime.\n-     */\n-    void internalSetEncoding(String newEncoding)\n-            throws UnsupportedEncodingException {\n-        // accepts \"null\" because it indicates using default encoding\n-        if (null == newEncoding) {\n-            this.encoding = null;\n-        } else {\n-            if (Charset.isSupported(newEncoding)) {\n-                this.encoding = newEncoding;\n-            } else {\n-                throw new UnsupportedEncodingException(\"The encoding \\\"\" //$NON-NLS-1$\n-                        + newEncoding + \"\\\" is not supported.\"); //$NON-NLS-1$\n-            }\n-\n-        }\n-    }\n-\n-    /**\n-     * Sets the character encoding used by this handler. A <code>null</code>\n-     * value indicates the using of the default encoding.\n-     * \n-     * @param encoding\n-     *            the character encoding to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     * @throws UnsupportedEncodingException\n-     *             If the specified encoding is not supported by the runtime.\n-     */\n-    public void setEncoding(String encoding) throws SecurityException,\n-            UnsupportedEncodingException {\n-        LogManager.getLogManager().checkAccess();\n-        internalSetEncoding(encoding);\n-    }\n-\n-    /**\n-     * Sets the error manager for this handler.\n-     * \n-     * @param em\n-     *            the error manager to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public void setErrorManager(ErrorManager em) {\n-        LogManager.getLogManager().checkAccess();\n-        if (null == em) {\n-            throw new NullPointerException();\n-        }\n-        this.errorMan = em;\n-    }\n-\n-    /**\n-     * Sets the filter to be used by this handler.\n-     * \n-     * @param newFilter\n-     *            the filter to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public void setFilter(Filter newFilter) {\n-        LogManager.getLogManager().checkAccess();\n-        this.filter = newFilter;\n-    }\n-\n-    /**\n-     * Sets the formatter to be used by this handler. This internal method does\n-     * not check security.\n-     * \n-     * @param newFormatter\n-     *            the formatter to set\n-     */\n-    void internalSetFormatter(Formatter newFormatter) {\n-        if (null == newFormatter) {\n-            throw new NullPointerException();\n-        }\n-        this.formatter = newFormatter;\n-    }\n-\n-    /**\n-     * Sets the formatter to be used by this handler.\n-     * \n-     * @param newFormatter\n-     *            the formatter to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public void setFormatter(Formatter newFormatter) {\n-        LogManager.getLogManager().checkAccess();\n-        internalSetFormatter(newFormatter);\n-    }\n-\n-    /**\n-     * Sets the logging level of this handler.\n-     * \n-     * @param newLevel\n-     *            the logging level to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public void setLevel(Level newLevel) {\n-        if (null == newLevel) {\n-            throw new NullPointerException();\n-        }\n-        LogManager.getLogManager().checkAccess();\n-        this.level = newLevel;\n-    }\n-}\n-\n+/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package java.util.logging;\r\n+\r\n+import java.nio.charset.Charset;\r\n+import java.security.AccessController;\r\n+import java.security.PrivilegedExceptionAction;\r\n+import java.io.UnsupportedEncodingException;\r\n+\r\n+/**\r\n+ * A <code>Handler</code> object accepts a logging request and exports the\r\n+ * desired messages to a target, for example, a file, the console, etc. It can\r\n+ * be disabled by setting its logging level to <code>Level.OFF</code>.\r\n+ * \r\n+ */\r\n+public abstract class Handler {\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Constants\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+    private static final Level DEFAULT_LEVEL = Level.ALL;\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Instance variables\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    // the error manager to report errors during logging\r\n+    private ErrorManager errorMan;\r\n+\r\n+    // the character encoding used by this handler\r\n+    private String encoding;\r\n+\r\n+    // the logging level\r\n+    private Level level;\r\n+\r\n+    // the formatter used to export messages\r\n+    private Formatter formatter;\r\n+\r\n+    // the filter used to filter undesired messages\r\n+    private Filter filter;\r\n+\r\n+    // class name, used for property reading\r\n+    private String prefix;\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Constructors\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Constructs a <code>Handler</code> object with a default error manager,\r\n+     * the default encoding, and the default logging level\r\n+     * <code>Level.ALL</code>. It has no filter and no formatter.\r\n+     */\r\n+    protected Handler() {\r\n+        this.errorMan = new ErrorManager();\r\n+        this.level = DEFAULT_LEVEL;\r\n+        this.encoding = null;\r\n+        this.filter = null;\r\n+        this.formatter = null;\r\n+        this.prefix = this.getClass().getName();\r\n+    }\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Methods\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    // get a instance from given class name, using Class.forName()\r\n+    private Object getDefaultInstance(String className) {\r\n+        Object result = null;\r\n+        if (null == className) {\r\n+            return result;\r\n+        }\r\n+        try {\r\n+            result = Class.forName(className).newInstance();\r\n+        } catch (Exception e) {\r\n+            //ignore\r\n+        }\r\n+        return result;\r\n+    }\r\n+\r\n+    // get a instance from given class name, using context classloader\r\n+    private Object getCustomizeInstance(final String className)\r\n+            throws Exception {\r\n+        Class<?> c = AccessController.doPrivileged(new PrivilegedExceptionAction<Class<?>>() {\r\n+                    public Class<?> run() throws Exception {\r\n+                        ClassLoader loader = Thread.currentThread()\r\n+                                .getContextClassLoader();\r\n+                        if (null == loader) {\r\n+                            loader = ClassLoader.getSystemClassLoader();\r\n+                        }\r\n+                        return loader.loadClass(className);\r\n+                    }\r\n+                });\r\n+        return c.newInstance();\r\n+    }\r\n+\r\n+    // print error message in some format\r\n+    void printInvalidPropMessage(String key, String value, Exception e) {\r\n+        String msg = new StringBuffer().append(\"Invalid property value for \") //$NON-NLS-1$\r\n+                .append(prefix).append(\".\").append(key).append(\":\").append( //$NON-NLS-1$//$NON-NLS-2$\r\n+                        value).toString();\r\n+        errorMan.error(msg, e, ErrorManager.GENERIC_FAILURE);\r\n+    }\r\n+\r\n+    /*\r\n+     * init the common properties, including filter, level, formatter, and\r\n+     * encoding\r\n+     */\r\n+    void initProperties(String defaultLevel, String defaultFilter,\r\n+            String defaultFormatter, String defaultEncoding) {\r\n+        LogManager manager = LogManager.getLogManager();\r\n+\r\n+        //set filter\r\n+        final String filterName = manager.getProperty(prefix + \".filter\"); //$NON-NLS-1$\r\n+        if (null != filterName) {\r\n+            try {\r\n+                filter = (Filter) getCustomizeInstance(filterName);\r\n+            } catch (Exception e1) {\r\n+                printInvalidPropMessage(\"filter\", filterName, e1); //$NON-NLS-1$\r\n+                filter = (Filter) getDefaultInstance(defaultFilter);\r\n+            }\r\n+        } else {\r\n+            filter = (Filter) getDefaultInstance(defaultFilter);\r\n+        }\r\n+\r\n+        //set level\r\n+        String levelName = manager.getProperty(prefix + \".level\"); //$NON-NLS-1$\r\n+        if (null != levelName) {\r\n+            try {\r\n+                level = Level.parse(levelName);\r\n+            } catch (Exception e) {\r\n+                printInvalidPropMessage(\"level\", levelName, e); //$NON-NLS-1$\r\n+                level = Level.parse(defaultLevel);\r\n+            }\r\n+        } else {\r\n+            level = Level.parse(defaultLevel);\r\n+        }\r\n+\r\n+        //set formatter\r\n+        final String formatterName = manager.getProperty(prefix + \".formatter\"); //$NON-NLS-1$\r\n+        if (null != formatterName) {\r\n+            try {\r\n+                formatter = (Formatter) getCustomizeInstance(formatterName);\r\n+            } catch (Exception e) {\r\n+                printInvalidPropMessage(\"formatter\", formatterName, e); //$NON-NLS-1$\r\n+                formatter = (Formatter) getDefaultInstance(defaultFormatter);\r\n+            }\r\n+        } else {\r\n+            formatter = (Formatter) getDefaultInstance(defaultFormatter);\r\n+        }\r\n+\r\n+        //set encoding\r\n+        final String encodingName = manager.getProperty(prefix + \".encoding\"); //$NON-NLS-1$\r\n+        try {\r\n+            internalSetEncoding(encodingName);\r\n+        } catch (UnsupportedEncodingException e) {\r\n+            printInvalidPropMessage(\"encoding\", encodingName, e); //$NON-NLS-1$\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes this handler. A flush operation will usually be performed and all\r\n+     * the associated resources will be freed. Client applications should not\r\n+     * use a handler after closing it.\r\n+     * \r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public abstract void close();\r\n+\r\n+    /**\r\n+     * Flushes any buffered output.\r\n+     */\r\n+    public abstract void flush();\r\n+\r\n+    /**\r\n+     * Accepts an actual logging request.\r\n+     * \r\n+     * @param record\r\n+     *            the log record to be logged\r\n+     */\r\n+    public abstract void publish(LogRecord record);\r\n+\r\n+    /**\r\n+     * Gets the character encoding used by this handler.\r\n+     * \r\n+     * @return the character encoding used by this handler\r\n+     */\r\n+    public String getEncoding() {\r\n+        return this.encoding;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the error manager used by this handler to report errors during\r\n+     * logging.\r\n+     * \r\n+     * @return the error manager used by this handler\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public ErrorManager getErrorManager() {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        return this.errorMan;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the filter used by this handler.\r\n+     * \r\n+     * @return the filter used by this handler\r\n+     */\r\n+    public Filter getFilter() {\r\n+        return this.filter;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the formatter used by this handler to format the logging messages.\r\n+     * \r\n+     * @return the formatter used by this handler\r\n+     */\r\n+    public Formatter getFormatter() {\r\n+        return this.formatter;\r\n+    }\r\n+\r\n+    /**\r\n+     * Gets the logging level of this handler.\r\n+     * \r\n+     * @return the logging level of this handler\r\n+     */\r\n+    public Level getLevel() {\r\n+        return this.level;\r\n+    }\r\n+\r\n+    /**\r\n+     * Determines whether the supplied log record need to be logged. The logging\r\n+     * levels will be checked as well as the filter.\r\n+     * \r\n+     * @param record\r\n+     *            the log record to be checked\r\n+     * @return <code>true</code> if the supplied log record need to be logged,\r\n+     *         otherwise <code>false</code>\r\n+     */\r\n+    public boolean isLoggable(LogRecord record) {\r\n+        if (null == record) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        if (this.level.intValue() == Level.OFF.intValue()) {\r\n+            return false;\r\n+        } else if (record.getLevel().intValue() >= this.level.intValue()) {\r\n+            return null == this.filter || this.filter.isLoggable(record);\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * Report an error to the error manager associated with this handler.\r\n+     * \r\n+     * @param msg\r\n+     *            the error message\r\n+     * @param ex\r\n+     *            the associated exception\r\n+     * @param code\r\n+     *            the error code\r\n+     */\r\n+    protected void reportError(String msg, Exception ex, int code) {\r\n+        this.errorMan.error(msg, ex, code);\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the character encoding used by this handler. A <code>null</code>\r\n+     * value indicates the using of the default encoding. This internal method\r\n+     * does not check security.\r\n+     * \r\n+     * @param newEncoding\r\n+     *            the character encoding to set\r\n+     * @throws UnsupportedEncodingException\r\n+     *             If the specified encoding is not supported by the runtime.\r\n+     */\r\n+    void internalSetEncoding(String newEncoding)\r\n+            throws UnsupportedEncodingException {\r\n+        // accepts \"null\" because it indicates using default encoding\r\n+        if (null == newEncoding) {\r\n+            this.encoding = null;\r\n+        } else {\r\n+            if (Charset.isSupported(newEncoding)) {\r\n+                this.encoding = newEncoding;\r\n+            } else {\r\n+                throw new UnsupportedEncodingException(\"The encoding \\\"\" //$NON-NLS-1$\r\n+                        + newEncoding + \"\\\" is not supported.\"); //$NON-NLS-1$\r\n+            }\r\n+\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the character encoding used by this handler. A <code>null</code>\r\n+     * value indicates the using of the default encoding.\r\n+     * \r\n+     * @param encoding\r\n+     *            the character encoding to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     * @throws UnsupportedEncodingException\r\n+     *             If the specified encoding is not supported by the runtime.\r\n+     */\r\n+    public void setEncoding(String encoding) throws SecurityException,\r\n+            UnsupportedEncodingException {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        internalSetEncoding(encoding);\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the error manager for this handler.\r\n+     * \r\n+     * @param em\r\n+     *            the error manager to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public void setErrorManager(ErrorManager em) {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        if (null == em) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        this.errorMan = em;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the filter to be used by this handler.\r\n+     * \r\n+     * @param newFilter\r\n+     *            the filter to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public void setFilter(Filter newFilter) {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        this.filter = newFilter;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the formatter to be used by this handler. This internal method does\r\n+     * not check security.\r\n+     * \r\n+     * @param newFormatter\r\n+     *            the formatter to set\r\n+     */\r\n+    void internalSetFormatter(Formatter newFormatter) {\r\n+        if (null == newFormatter) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        this.formatter = newFormatter;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the formatter to be used by this handler.\r\n+     * \r\n+     * @param newFormatter\r\n+     *            the formatter to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public void setFormatter(Formatter newFormatter) {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        internalSetFormatter(newFormatter);\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the logging level of this handler.\r\n+     * \r\n+     * @param newLevel\r\n+     *            the logging level to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public void setLevel(Level newLevel) {\r\n+        if (null == newLevel) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        LogManager.getLogManager().checkAccess();\r\n+        this.level = newLevel;\r\n+    }\r\n+}\r\n+\r",
                "deletions": 412
            },
            {
                "sha": "d93c55d5624275a65bcc2ebe24c4fa40b2f4f365",
                "filename": "modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/main/java/java/util/logging/StreamHandler.java",
                "status": "modified",
                "changes": 717,
                "additions": 360,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/main/java/java/util/logging/StreamHandler.java?ref=d731117d74e33cbbfaa117a8abd60f60a733d4bd",
                "patch": "@@ -1,357 +1,360 @@\n-/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\n- * \n- * Licensed under the Apache License, Version 2.0 (the \"License\");\n- * you may not use this file except in compliance with the License.\n- * You may obtain a copy of the License at\n- * \n- *     http://www.apache.org/licenses/LICENSE-2.0\n- * \n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-\n-\n-package java.util.logging;\n-\n-import java.io.OutputStream;\n-import java.io.OutputStreamWriter;\n-import java.io.UnsupportedEncodingException;\n-import java.io.Writer;\n-\n-/**\n- * A <code>StreamHandler</code> object writes log messages to an output\n- * stream, that is, objects of the class <code>java.io.OutputStream</code>.\n- * <p>\n- * A <code>StreamHandler</code> object reads the following properties from the\n- * log manager to initialize itself:\n- * <ul>\n- * <li>java.util.logging.StreamHandler.level specifies the logging level,\n- * defaults to <code>Level.INFO</code> if this property is not found or has an\n- * invalid value;\n- * <li>java.util.logging.StreamHandler.filter specifies the name of the filter\n- * class to be associated with this handler, defaults to <code>null</code> if\n- * this property is not found or has an invalid value;\n- * <li>java.util.logging.StreamHandler.formatter specifies the name of the\n- * formatter class to be associated with this handler, defaults to\n- * <code>java.util.logging.SimpleFormatter</code> if this property is not\n- * found or has an invalid value;\n- * <li>java.util.logging.StreamHandler.encoding specifies the encoding this\n- * handler will use to encode log messages, defaults to <code>null</code> if\n- * this property is not found or has an invalid value.\n- * </ul>\n- * </p>\n- * <p>\n- * This class is not thread-safe.\n- * </p>\n- * \n- */\n-public class StreamHandler extends Handler {\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Instance variables\n-     * -------------------------------------------------------------------\n-     */\n-\n-    // the output stream this handler writes to\n-    private OutputStream os;\n-\n-    // the writer that writes to the output stream\n-    private Writer writer;\n-\n-    // the flag indicating whether the writer has been initialized\n-    private boolean writerNotInitialized;\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Constructors\n-     * -------------------------------------------------------------------\n-     */\n-\n-    /**\n-     * Constructs a <code>StreamHandler</code> object. The new stream handler\n-     * does not have an associated output stream.\n-     */\n-    public StreamHandler() {\n-        initProperties(\"INFO\", null, \"java.util.logging.SimpleFormatter\",  //$NON-NLS-1$//$NON-NLS-2$\n-                null);\n-        this.os = null;\n-        this.writer = null;\n-        this.writerNotInitialized = true;\n-    }\n-\n-    /**\n-     * Constructs a <code>StreamHandler</code> object with the supplied output\n-     * stream. Default properties are read.\n-     * \n-     * @param os\n-     *            the output stream this handler writes to\n-     */\n-    StreamHandler(OutputStream os) {\n-        this();\n-        this.os = os;\n-    }\n-\n-    /*\n-     * Constructs a <code>StreamHandler</code> object. Specified default\n-     * values will be used if the corresponding properties are found in log\n-     * manager's properties.\n-     */\n-    StreamHandler(String defaultLevel, String defaultFilter,\n-            String defaultFormatter, String defaultEncoding) {\n-        initProperties(defaultLevel, defaultFilter, defaultFormatter,\n-                defaultEncoding);\n-        this.os = null;\n-        this.writer = null;\n-        this.writerNotInitialized = true;\n-    }\n-\n-    /**\n-     * Constructs a <code>StreamHandler</code> object with the supplied output\n-     * stream and formatter.\n-     * \n-     * @param os\n-     *            the output stream this handler writes to\n-     * @param formatter\n-     *            the formatter this handler uses to format the output\n-     */\n-    public StreamHandler(OutputStream os, Formatter formatter) {\n-        this();\n-        if (os == null) {\n-            throw new NullPointerException(\"The OutputStream parameter is null\");\n-        }\n-        if (formatter == null) {\n-            throw new NullPointerException(\"The Formatter parameter is null.\");\n-        }\n-        this.os = os;\n-        internalSetFormatter(formatter);\n-    }\n-\n-    /*\n-     * -------------------------------------------------------------------\n-     * Methods\n-     * -------------------------------------------------------------------\n-     */\n-\n-    // initialize the writer\n-    private void initializeWritter() {\n-        this.writerNotInitialized = false;\n-        if (null == getEncoding()) {\n-            this.writer = new OutputStreamWriter(this.os);\n-        } else {\n-            try {\n-                this.writer = new OutputStreamWriter(this.os, getEncoding());\n-            } catch (UnsupportedEncodingException e) {\n-                /*\n-                 * Should not happen because it's checked in\n-                 * super.initProperties().\n-                 */\n-            }\n-        }\n-        write(getFormatter().getHead(this));\n-    }\n-\n-    // Write a string to the output stream.\n-    private void write(String s) {\n-        try {\n-            this.writer.write(s);\n-        } catch (Exception e) {\n-            getErrorManager().error(\n-                    \"Exception occurred when writing to the output stream.\", e, //$NON-NLS-1$\n-                    ErrorManager.WRITE_FAILURE);\n-        }\n-    }\n-\n-    /**\n-     * Sets the output stream this handler writes to. Note it does nothing else.\n-     * \n-     * @param newOs\n-     *            the new output stream\n-     */\n-    void internalSetOutputStream(OutputStream newOs) {\n-        this.os = newOs;\n-    }\n-\n-\t\n-    /**\n-     * Sets the output stream this handler writes to. If there's an existing\n-     * output stream, the tail string of the associated formatter will be\n-     * written to it. Then it will be flushed and closed.\n-     * \n-     * @param os\n-     *            the new output stream\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    protected void setOutputStream(OutputStream os) {\n-        if (null == os) {\n-            throw new NullPointerException();\n-        }\n-        LogManager.getLogManager().checkAccess();\n-        close(true);\n-        this.writer = null;\n-        this.os = os;\n-        this.writerNotInitialized = true;\n-    }\n-\n-    /**\n-     * Sets the character encoding used by this handler. A <code>null</code>\n-     * value indicates the using of the default encoding.\n-     * \n-     * @param encoding\n-     *            the character encoding to set\n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     * @throws UnsupportedEncodingException\n-     *             If the specified encoding is not supported by the runtime.\n-     */\n-    public void setEncoding(String encoding) throws SecurityException,\n-            UnsupportedEncodingException {\n-\t\t//flush first before set new encoding\n-\t\tthis.flush();\n-        super.setEncoding(encoding);\n-        // renew writer only if the writer exists\n-        if (null != this.writer) {\n-            if (null == getEncoding()) {\n-                this.writer = new OutputStreamWriter(this.os);\n-            } else {\n-                try {\n-                    this.writer = new OutputStreamWriter(this.os, getEncoding());\n-                } catch (UnsupportedEncodingException e) {\n-                    /*\n-                     * Should not happen because it's checked in\n-                     * super.initProperties().\n-                     */\n-                }\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Closes this handler, but the underlying output stream is only closed when\n-     * <code>closeStream</code> is <code>true</code>. Security is not checked.\n-     * \n-     * @param closeStream\n-     *            whether to close the underlying output stream\n-     */\n-    void close(boolean closeStream) {\n-        if (null != this.os) {\n-            if (this.writerNotInitialized) {\n-                initializeWritter();\n-            }\n-            write(getFormatter().getTail(this));\n-            try {\n-                this.writer.flush();\n-                if (closeStream) {\n-                    this.writer.close();\n-\t\t\t\t\tthis.writer = null;\n-\t                this.os = null;\n-                }\n-            } catch (Exception e) {\n-                getErrorManager().error(\n-                        \"Exception occurred when closing the output stream.\", e, //$NON-NLS-1$\n-                        ErrorManager.CLOSE_FAILURE);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Closes this handler. The tail string of the formatter associated with\n-     * this handler will be written out. A flush operation a subsequent close\n-     * operation will then be performed upon the outputstream. Client\n-     * applications should not use a handler after closing it.\n-     * \n-     * @throws SecurityException\n-     *             If a security manager determines that the caller does not\n-     *             have the required permission.\n-     */\n-    public void close() {\n-        LogManager.getLogManager().checkAccess();\n-        close(true);\n-    }\n-\n-    /**\n-     * Flushes any buffered output.\n-     */\n-    public void flush() {\n-        if (null != this.os) {\n-            try {\n-                if (null != this.writer) {\n-                    this.writer.flush();\n-                } else {\n-                    this.os.flush();\n-                }\n-            } catch (Exception e) {\n-                getErrorManager().error(\n-                        \"Exception occurred while flushing the output stream.\", //$NON-NLS-1$\n-                        e, ErrorManager.FLUSH_FAILURE);\n-            }\n-        }\n-    }\n-\n-    /**\n-     * Accepts an actual logging request. The log record will be formatted and\n-     * written to the output stream if the following three conditions are met:\n-     * <ul>\n-     * <li>the supplied log record has at least the required logging level;\n-     * <li>the supplied log record passes the filter associated with this\n-     * handler if any;\n-     * <li>the output stream associated with this handler is not\n-     * <code>null</code>.\n-     * </ul>\n-     * If it is the first time a log record need to be written out, the head\n-     * string of the formatter associated with this handler will be written out\n-     * first.\n-     * \n-     * @param record\n-     *            the log record to be logged\n-     */\n-    public void publish(LogRecord record) {\n-        try {\n-            if (this.isLoggable(record)) {\n-                if (this.writerNotInitialized) {\n-                    initializeWritter();\n-                }\n-                String msg = null;\n-                try {\n-                    msg = getFormatter().format(record);\n-                } catch (Exception e) {\n-                    getErrorManager()\n-                            .error(\n-                                    \"Exception occurred while formatting the log record.\", //$NON-NLS-1$\n-                                    e, ErrorManager.FORMAT_FAILURE);\n-                }\n-                write(msg);\n-            }\n-        } catch (Exception e) {\n-            getErrorManager().error(\n-                    \"Exception occurred while logging the record.\", e, //$NON-NLS-1$\n-                    ErrorManager.GENERIC_FAILURE);\n-        }\n-    }\n-\n-    /**\n-     * Determines whether the supplied log record need to be logged. The logging\n-     * levels will be checked as well as the filter. The output stream of this\n-     * handler is also checked. If it's null, this method returns false.\n-     * \n-     * @param record\n-     *            the log record to be checked\n-     * @return <code>true</code> if the supplied log record need to be logged,\n-     *         otherwise <code>false</code>\n-     */\n-    public boolean isLoggable(LogRecord record) {\n-        if (super.isLoggable(record) && null != this.os) {\n-            return true;\n-        }\n-        return false;\n-    }\n-\n-}\n-\n-\n+/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\r\n+ * \r\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n+ * you may not use this file except in compliance with the License.\r\n+ * You may obtain a copy of the License at\r\n+ * \r\n+ *     http://www.apache.org/licenses/LICENSE-2.0\r\n+ * \r\n+ * Unless required by applicable law or agreed to in writing, software\r\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n+ * See the License for the specific language governing permissions and\r\n+ * limitations under the License.\r\n+ */\r\n+\r\n+\r\n+package java.util.logging;\r\n+\r\n+import java.io.OutputStream;\r\n+import java.io.OutputStreamWriter;\r\n+import java.io.UnsupportedEncodingException;\r\n+import java.io.Writer;\r\n+\r\n+/**\r\n+ * A <code>StreamHandler</code> object writes log messages to an output\r\n+ * stream, that is, objects of the class <code>java.io.OutputStream</code>.\r\n+ * <p>\r\n+ * A <code>StreamHandler</code> object reads the following properties from the\r\n+ * log manager to initialize itself:\r\n+ * <ul>\r\n+ * <li>java.util.logging.StreamHandler.level specifies the logging level,\r\n+ * defaults to <code>Level.INFO</code> if this property is not found or has an\r\n+ * invalid value;\r\n+ * <li>java.util.logging.StreamHandler.filter specifies the name of the filter\r\n+ * class to be associated with this handler, defaults to <code>null</code> if\r\n+ * this property is not found or has an invalid value;\r\n+ * <li>java.util.logging.StreamHandler.formatter specifies the name of the\r\n+ * formatter class to be associated with this handler, defaults to\r\n+ * <code>java.util.logging.SimpleFormatter</code> if this property is not\r\n+ * found or has an invalid value;\r\n+ * <li>java.util.logging.StreamHandler.encoding specifies the encoding this\r\n+ * handler will use to encode log messages, defaults to <code>null</code> if\r\n+ * this property is not found or has an invalid value.\r\n+ * </ul>\r\n+ * </p>\r\n+ * <p>\r\n+ * This class is not thread-safe.\r\n+ * </p>\r\n+ * \r\n+ */\r\n+public class StreamHandler extends Handler {\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Instance variables\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    // the output stream this handler writes to\r\n+    private OutputStream os;\r\n+\r\n+    // the writer that writes to the output stream\r\n+    private Writer writer;\r\n+\r\n+    // the flag indicating whether the writer has been initialized\r\n+    private boolean writerNotInitialized;\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Constructors\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    /**\r\n+     * Constructs a <code>StreamHandler</code> object. The new stream handler\r\n+     * does not have an associated output stream.\r\n+     */\r\n+    public StreamHandler() {\r\n+        initProperties(\"INFO\", null, \"java.util.logging.SimpleFormatter\",  //$NON-NLS-1$//$NON-NLS-2$\r\n+                null);\r\n+        this.os = null;\r\n+        this.writer = null;\r\n+        this.writerNotInitialized = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs a <code>StreamHandler</code> object with the supplied output\r\n+     * stream. Default properties are read.\r\n+     * \r\n+     * @param os\r\n+     *            the output stream this handler writes to\r\n+     */\r\n+    StreamHandler(OutputStream os) {\r\n+        this();\r\n+        this.os = os;\r\n+    }\r\n+\r\n+    /*\r\n+     * Constructs a <code>StreamHandler</code> object. Specified default\r\n+     * values will be used if the corresponding properties are found in log\r\n+     * manager's properties.\r\n+     */\r\n+    StreamHandler(String defaultLevel, String defaultFilter,\r\n+            String defaultFormatter, String defaultEncoding) {\r\n+        initProperties(defaultLevel, defaultFilter, defaultFormatter,\r\n+                defaultEncoding);\r\n+        this.os = null;\r\n+        this.writer = null;\r\n+        this.writerNotInitialized = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Constructs a <code>StreamHandler</code> object with the supplied output\r\n+     * stream and formatter.\r\n+     * \r\n+     * @param os\r\n+     *            the output stream this handler writes to\r\n+     * @param formatter\r\n+     *            the formatter this handler uses to format the output\r\n+     */\r\n+    public StreamHandler(OutputStream os, Formatter formatter) {\r\n+        this();\r\n+        if (os == null) {\r\n+            throw new NullPointerException(\"The OutputStream parameter is null\");\r\n+        }\r\n+        if (formatter == null) {\r\n+            throw new NullPointerException(\"The Formatter parameter is null.\");\r\n+        }\r\n+        this.os = os;\r\n+        internalSetFormatter(formatter);\r\n+    }\r\n+\r\n+    /*\r\n+     * -------------------------------------------------------------------\r\n+     * Methods\r\n+     * -------------------------------------------------------------------\r\n+     */\r\n+\r\n+    // initialize the writer\r\n+    private void initializeWritter() {\r\n+        this.writerNotInitialized = false;\r\n+        if (null == getEncoding()) {\r\n+            this.writer = new OutputStreamWriter(this.os);\r\n+        } else {\r\n+            try {\r\n+                this.writer = new OutputStreamWriter(this.os, getEncoding());\r\n+            } catch (UnsupportedEncodingException e) {\r\n+                /*\r\n+                 * Should not happen because it's checked in\r\n+                 * super.initProperties().\r\n+                 */\r\n+            }\r\n+        }\r\n+        write(getFormatter().getHead(this));\r\n+    }\r\n+\r\n+    // Write a string to the output stream.\r\n+    private void write(String s) {\r\n+        try {\r\n+            this.writer.write(s);\r\n+        } catch (Exception e) {\r\n+            getErrorManager().error(\r\n+                    \"Exception occurred when writing to the output stream.\", e, //$NON-NLS-1$\r\n+                    ErrorManager.WRITE_FAILURE);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the output stream this handler writes to. Note it does nothing else.\r\n+     * \r\n+     * @param newOs\r\n+     *            the new output stream\r\n+     */\r\n+    void internalSetOutputStream(OutputStream newOs) {\r\n+        this.os = newOs;\r\n+    }\r\n+\r\n+\t\r\n+    /**\r\n+     * Sets the output stream this handler writes to. If there's an existing\r\n+     * output stream, the tail string of the associated formatter will be\r\n+     * written to it. Then it will be flushed and closed.\r\n+     * \r\n+     * @param os\r\n+     *            the new output stream\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    protected void setOutputStream(OutputStream os) {\r\n+        if (null == os) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        LogManager.getLogManager().checkAccess();\r\n+        close(true);\r\n+        this.writer = null;\r\n+        this.os = os;\r\n+        this.writerNotInitialized = true;\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets the character encoding used by this handler. A <code>null</code>\r\n+     * value indicates the using of the default encoding.\r\n+     * \r\n+     * @param encoding\r\n+     *            the character encoding to set\r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     * @throws UnsupportedEncodingException\r\n+     *             If the specified encoding is not supported by the runtime.\r\n+     */\r\n+    public void setEncoding(String encoding) throws SecurityException,\r\n+            UnsupportedEncodingException {\r\n+\t\t//flush first before set new encoding\r\n+\t\tthis.flush();\r\n+        super.setEncoding(encoding);\r\n+        // renew writer only if the writer exists\r\n+        if (null != this.writer) {\r\n+            if (null == getEncoding()) {\r\n+                this.writer = new OutputStreamWriter(this.os);\r\n+            } else {\r\n+                try {\r\n+                    this.writer = new OutputStreamWriter(this.os, getEncoding());\r\n+                } catch (UnsupportedEncodingException e) {\r\n+                    /*\r\n+                     * Should not happen because it's checked in\r\n+                     * super.initProperties().\r\n+                     */\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes this handler, but the underlying output stream is only closed when\r\n+     * <code>closeStream</code> is <code>true</code>. Security is not checked.\r\n+     * \r\n+     * @param closeStream\r\n+     *            whether to close the underlying output stream\r\n+     */\r\n+    void close(boolean closeStream) {\r\n+        if (null != this.os) {\r\n+            if (this.writerNotInitialized) {\r\n+                initializeWritter();\r\n+            }\r\n+            write(getFormatter().getTail(this));\r\n+            try {\r\n+                this.writer.flush();\r\n+                if (closeStream) {\r\n+                    this.writer.close();\r\n+\t\t\t\t\tthis.writer = null;\r\n+\t                this.os = null;\r\n+                }\r\n+            } catch (Exception e) {\r\n+                getErrorManager().error(\r\n+                        \"Exception occurred when closing the output stream.\", e, //$NON-NLS-1$\r\n+                        ErrorManager.CLOSE_FAILURE);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Closes this handler. The tail string of the formatter associated with\r\n+     * this handler will be written out. A flush operation a subsequent close\r\n+     * operation will then be performed upon the outputstream. Client\r\n+     * applications should not use a handler after closing it.\r\n+     * \r\n+     * @throws SecurityException\r\n+     *             If a security manager determines that the caller does not\r\n+     *             have the required permission.\r\n+     */\r\n+    public void close() {\r\n+        LogManager.getLogManager().checkAccess();\r\n+        close(true);\r\n+    }\r\n+\r\n+    /**\r\n+     * Flushes any buffered output.\r\n+     */\r\n+    public void flush() {\r\n+        if (null != this.os) {\r\n+            try {\r\n+                if (null != this.writer) {\r\n+                    this.writer.flush();\r\n+                } else {\r\n+                    this.os.flush();\r\n+                }\r\n+            } catch (Exception e) {\r\n+                getErrorManager().error(\r\n+                        \"Exception occurred while flushing the output stream.\", //$NON-NLS-1$\r\n+                        e, ErrorManager.FLUSH_FAILURE);\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Accepts an actual logging request. The log record will be formatted and\r\n+     * written to the output stream if the following three conditions are met:\r\n+     * <ul>\r\n+     * <li>the supplied log record has at least the required logging level;\r\n+     * <li>the supplied log record passes the filter associated with this\r\n+     * handler if any;\r\n+     * <li>the output stream associated with this handler is not\r\n+     * <code>null</code>.\r\n+     * </ul>\r\n+     * If it is the first time a log record need to be written out, the head\r\n+     * string of the formatter associated with this handler will be written out\r\n+     * first.\r\n+     * \r\n+     * @param record\r\n+     *            the log record to be logged\r\n+     */\r\n+    public void publish(LogRecord record) {\r\n+        try {\r\n+            if (this.isLoggable(record)) {\r\n+                if (this.writerNotInitialized) {\r\n+                    initializeWritter();\r\n+                }\r\n+                String msg = null;\r\n+                try {\r\n+                    msg = getFormatter().format(record);\r\n+                } catch (Exception e) {\r\n+                    getErrorManager()\r\n+                            .error(\r\n+                                    \"Exception occurred while formatting the log record.\", //$NON-NLS-1$\r\n+                                    e, ErrorManager.FORMAT_FAILURE);\r\n+                }\r\n+                write(msg);\r\n+            }\r\n+        } catch (Exception e) {\r\n+            getErrorManager().error(\r\n+                    \"Exception occurred while logging the record.\", e, //$NON-NLS-1$\r\n+                    ErrorManager.GENERIC_FAILURE);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Determines whether the supplied log record need to be logged. The logging\r\n+     * levels will be checked as well as the filter. The output stream of this\r\n+     * handler is also checked. If it's null, this method returns false.\r\n+     * \r\n+     * @param record\r\n+     *            the log record to be checked\r\n+     * @return <code>true</code> if the supplied log record need to be logged,\r\n+     *         otherwise <code>false</code>\r\n+     */\r\n+    public boolean isLoggable(LogRecord record) {\r\n+    \tif (null == record) {\r\n+\t\t\treturn false;\r\n+\t\t}\r\n+        if (super.isLoggable(record) && null != this.os) {\r\n+            return true;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+}\r\n+\r\n+\r",
                "deletions": 357
            },
            {
                "sha": "3c309771eb12fa8908cbd2caa969610ff2875923",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/HandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/HandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/HandlerTest.java",
                "status": "modified",
                "changes": 12,
                "additions": 8,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/HandlerTest.java?ref=d731117d74e33cbbfaa117a8abd60f60a733d4bd",
                "patch": "@@ -473,13 +473,17 @@ public void testIsLoggable_WithFilter() {\n \t\tassertSame(r, CallVerificationStack.getInstance().pop());\r\n \t}\r\n \r\n-\t/*\r\n-\t * Null log record, handler should call ErrorManager to handle\r\n-\t * exceptional case\r\n+\t/**\r\n+\t * @tests java.util.logging.Handler#isLoggable(LogRecord)\r\n \t */\r\n \tpublic void testIsLoggable_Null() {\r\n \t\tMockHandler h = new MockHandler();\r\n-\t\th.isLoggable(null);\r\n+\t\ttry {\r\n+\t\t\th.isLoggable(null);\r\n+\t\t\tfail(\"should throw NullPointerException\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n \t}\r\n \r\n \t/*\r",
                "deletions": 4
            },
            {
                "sha": "c774d06fb662eb2bf0f6c5ad1bef155ee928aa0c",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/MemoryHandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/MemoryHandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/MemoryHandlerTest.java",
                "status": "modified",
                "changes": 2,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/MemoryHandlerTest.java?ref=d731117d74e33cbbfaa117a8abd60f60a733d4bd",
                "patch": "@@ -161,7 +161,9 @@ public void testFlush() {\n \tpublic void testIsLoggable() {\r\n \t\ttry {\r\n \t\t\thandler.isLoggable(null);\r\n+\t\t\tfail(\"should throw NullPointerException\");\r\n \t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n \t\t}\r\n \t\tLogRecord record = new LogRecord(Level.FINER, \"MSG1\");\r\n \t\tassertFalse(handler.isLoggable(record));\r",
                "deletions": 0
            },
            {
                "sha": "5f288afd5c326e2f5957cb9492257f90d40a5a0e",
                "filename": "modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/StreamHandlerTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/StreamHandlerTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/d731117d74e33cbbfaa117a8abd60f60a733d4bd/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/StreamHandlerTest.java",
                "status": "modified",
                "changes": 4,
                "additions": 2,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/logging/src/test/java/org/apache/harmony/logging/tests/java/util/logging/StreamHandlerTest.java?ref=d731117d74e33cbbfaa117a8abd60f60a733d4bd",
                "patch": "@@ -496,15 +496,15 @@ public void testIsLoggable_WithFilter() {\n \tpublic void testIsLoggable_Null() {\r\n \t\tStreamHandler h = new StreamHandler(new ByteArrayOutputStream(),\r\n \t\t\t\tnew SimpleFormatter());\r\n-\t\th.isLoggable(null);\r\n+\t\tassertFalse(h.isLoggable(null));\r\n \t}\r\n \r\n \t/*\r\n \t * Test isLoggable(), null log record, without output stream\r\n \t */\r\n \tpublic void testIsLoggable_Null_NoOutputStream() {\r\n \t\tStreamHandler h = new StreamHandler();\r\n-\t\th.isLoggable(null);\r\n+\t\tassertFalse(h.isLoggable(null));\r\n \t}\r\n \r\n \t/*\r",
                "deletions": 2
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "applied patch for HARMONY-1173\n[classlib][security] compatibility: IdentityScope.getIdentity((String) null) throws NPE on RI and returns 'null' on Harmony\nadded regression test\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@431555 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/fcc8d3b87c4323439926ba560e70e0485d4715d0",
        "parent": "https://github.com/apache/harmony-classlib/commit/4de98b5e42146fc88c6b32ea20ec805a682c3d59",
        "bug_id": "harmony-classlib_292",
        "file": [
            {
                "sha": "0c4f52241b3be3f134ea2527fc727c0b174f4027",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/SystemScope.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fcc8d3b87c4323439926ba560e70e0485d4715d0/modules/security/src/main/java/common/org/apache/harmony/security/SystemScope.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fcc8d3b87c4323439926ba560e70e0485d4715d0/modules/security/src/main/java/common/org/apache/harmony/security/SystemScope.java",
                "status": "modified",
                "changes": 2,
                "additions": 1,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/SystemScope.java?ref=fcc8d3b87c4323439926ba560e70e0485d4715d0",
                "patch": "@@ -79,7 +79,7 @@ public int size() {\n      */\n     public synchronized Identity getIdentity(String name) {\n         if (name == null) {\n-            return null;\n+            throw new NullPointerException();\n         }\n         return (Identity) names.get(name);\n     }",
                "deletions": 1
            },
            {
                "sha": "e84c82246d465f0346dddaa96ad2a7d60e7dc0bb",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScope2Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/fcc8d3b87c4323439926ba560e70e0485d4715d0/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScope2Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/fcc8d3b87c4323439926ba560e70e0485d4715d0/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScope2Test.java",
                "status": "modified",
                "changes": 35,
                "additions": 22,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/IdentityScope2Test.java?ref=fcc8d3b87c4323439926ba560e70e0485d4715d0",
                "patch": "@@ -238,16 +238,25 @@ public void test_size() throws Exception {\n        \t\tassertEquals(\"Wrong size\", 1, sub.size());\r\n \t}\r\n \r\n-\t/**\r\n-\t * @tests java.security.IdentityScope#toString()\r\n-\t */\r\n-\tpublic void test_toString() throws Exception {\r\n-       \t\tIdentityScopeSubclass sub = new IdentityScopeSubclass(\"test\",\r\n-       \t\t\t\tnew IdentityScopeSubclass());\r\n-       \t\tIdentity id = new IdentitySubclass();\r\n-       \t\tid.setPublicKey(pubKey);\r\n-       \t\tsub.addIdentity(id);\r\n-       \t\tassertNotNull(\"toString returned a null\", sub.toString());\r\n-       \t\tassertTrue(\"Not a valid String \", sub.toString().length() > 0);\r\n-\t}\r\n-}\n\\ No newline at end of file\n+    /**\r\n+     * @tests java.security.IdentityScope#toString()\r\n+     */\r\n+    public void test_toString() throws Exception {\r\n+            IdentityScopeSubclass sub = new IdentityScopeSubclass(\"test\",\r\n+                    new IdentityScopeSubclass());\r\n+            Identity id = new IdentitySubclass();\r\n+            id.setPublicKey(pubKey);\r\n+            sub.addIdentity(id);\r\n+            assertNotNull(\"toString returned a null\", sub.toString());\r\n+            assertTrue(\"Not a valid String \", sub.toString().length() > 0);\r\n+    }\r\n+\r\n+    public void test_getIdentity() throws Exception {\r\n+        //Regression for HARMONY-1173\r\n+        IdentityScope scope = IdentityScope.getSystemScope(); \r\n+        try {\r\n+            scope.getIdentity((String) null);\r\n+            fail(\"NPE expected\");\r\n+        } catch (NullPointerException npe) {}\r\n+    }\r\n+}\r",
                "deletions": 13
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Apply patch for HARMONY-901: java.util.Locale(String language, String country, String variant) constructor doesn't throw NPE when variant is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@422922 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/41bc64c8e676635f4567a4581f728421b3805b50",
        "parent": "https://github.com/apache/harmony-classlib/commit/c915256a13b7b02186e064d43b08880a8bdf62e9",
        "bug_id": "harmony-classlib_293",
        "file": [
            {
                "sha": "5f4009e44f4bfc785b55aa8a1c1f00cf6fa78fd4",
                "filename": "modules/luni/src/main/java/java/util/Locale.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/41bc64c8e676635f4567a4581f728421b3805b50/modules/luni/src/main/java/java/util/Locale.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/41bc64c8e676635f4567a4581f728421b3805b50/modules/luni/src/main/java/java/util/Locale.java",
                "status": "modified",
                "changes": 38,
                "additions": 23,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Locale.java?ref=41bc64c8e676635f4567a4581f728421b3805b50",
                "patch": "@@ -202,27 +202,35 @@ public Locale(String language, String country) {\n \t}\r\n \r\n \t/**\r\n-\t * Constructs a new Locale using the specified language, country, and\r\n-\t * variant codes.\r\n-\t * @param language \r\n-\t * @param country \r\n-\t * @param variant \r\n-\t * \r\n-\t */\r\n-\tpublic Locale(String language, String country, String variant) {\r\n-\t\tlanguageCode = language.toLowerCase();\r\n-\t\t// Map new language codes to the obsolete language\r\n-\t\t// codes so the correct resource bundles will be used.\r\n-\t\tif (languageCode.equals(\"he\")) {\r\n+     * Constructs a new Locale using the specified language, country, and\r\n+     * variant codes.\r\n+     * \r\n+     * @param language\r\n+     * @param country\r\n+     * @param variant\r\n+     * @throws NullPointerException if <code>language</code>,\r\n+     *         <code>country</code> or <code>variant</code> is\r\n+     *         <code>null</code>.\r\n+     */\r\n+    public Locale(String language, String country, String variant) {\r\n+        if (language == null || country == null || variant == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+        languageCode = language.toLowerCase();\r\n+        // Map new language codes to the obsolete language\r\n+        // codes so the correct resource bundles will be used.\r\n+        if (languageCode.equals(\"he\")) {\r\n             languageCode = \"iw\"; //$NON-NLS-1$\r\n         } else if (languageCode.equals(\"id\")) {\r\n             languageCode = \"in\"; //$NON-NLS-1$\r\n         } else if (languageCode.equals(\"yi\")) {\r\n             languageCode = \"ji\"; //$NON-NLS-1$\r\n         }\r\n-\t\tcountryCode = country.toUpperCase();\r\n-\t\tvariantCode = variant;\r\n-\t}\r\n+\r\n+        countryCode = country.toUpperCase();\r\n+\r\n+        variantCode = variant;\r\n+    }\r\n \r\n \t/**\r\n \t * Answers a new Locale with the same language, country and variant codes as\r",
                "deletions": 15
            },
            {
                "sha": "1b18e592857ede08de8a9483d2f380d09a26e3c7",
                "filename": "modules/luni/src/test/java/tests/api/java/util/LocaleTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/41bc64c8e676635f4567a4581f728421b3805b50/modules/luni/src/test/java/tests/api/java/util/LocaleTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/41bc64c8e676635f4567a4581f728421b3805b50/modules/luni/src/test/java/tests/api/java/util/LocaleTest.java",
                "status": "modified",
                "changes": 17,
                "additions": 17,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/util/LocaleTest.java?ref=41bc64c8e676635f4567a4581f728421b3805b50",
                "patch": "@@ -45,6 +45,23 @@ public void test_ConstructorLjava_lang_StringLjava_lang_StringLjava_lang_String(\n \t\tLocale x = new Locale(\"xx\", \"CV\", \"ZZ\");\r\n \t\tassertTrue(\"Failed to create Locale\", x.getLanguage().equals(\"xx\")\r\n \t\t\t\t&& (x.getCountry().equals(\"CV\") && x.getVariant().equals(\"ZZ\")));\r\n+                try {\r\n+                   new Locale(null, \"CV\", \"ZZ\");\r\n+                   fail(\"expected NullPointerException with 1st parameter == null\");\r\n+                } catch(NullPointerException e) {\r\n+                }\r\n+\r\n+                try {\r\n+                   new Locale(\"xx\", null, \"ZZ\");\r\n+                   fail(\"expected NullPointerException with 2nd parameter == null\");\r\n+                } catch(NullPointerException e) {\r\n+                }\r\n+\r\n+                try {\r\n+                   new Locale(\"xx\", \"CV\", null);\r\n+                   fail(\"expected NullPointerException with 3rd parameter == null\");\r\n+                } catch(NullPointerException e) {\r\n+                }\r\n \t}\r\n \r\n \t/**\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "enabling ObjectInputStreamTest, including integration of patch from HARMONY-844\n[classlib][io] compatibility: java.io.ObjectInputStream.skipBytes(len<=0) returns len while RI throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@421594 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/6eb61a0130c1c41e6141a209722403723f2d916b",
        "parent": "https://github.com/apache/harmony-classlib/commit/c26de4cff3acc5dbabcbfae87897e6a355f49e21",
        "bug_id": "harmony-classlib_294",
        "file": [
            {
                "sha": "abce0695325daee9860f51f3d8337ee94d963fe4",
                "filename": "modules/luni/build.xml",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/build.xml",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/build.xml",
                "status": "modified",
                "changes": 1,
                "additions": 0,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/build.xml?ref=6eb61a0130c1c41e6141a209722403723f2d916b",
                "patch": "@@ -395,7 +395,6 @@\n                     <exclude name=\"tests/api/java/lang/IllegalThreadStateExceptionTest.java\" />\n                     <exclude name=\"tests/api/java/lang/ThreadTest.java\" />\n                     <exclude name=\"tests/api/java/io/InputStreamReaderTest.java\" />\n-                    <exclude name=\"tests/api/java/io/ObjectInputStreamTest.java\" />\n                     <exclude name=\"tests/api/java/io/ObjectOutputStreamTest.java\" />\n                     <exclude name=\"tests/api/java/io/OutputStreamWriterTest.java\" />\n                     <exclude name=\"tests/api/java/io/PipedInputStreamTest.java\" />",
                "deletions": 1
            },
            {
                "sha": "ef40b1780a346651aa834b53aaa0ed6f8d79c216",
                "filename": "modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/main/java/java/io/ObjectInputStream.java",
                "status": "modified",
                "changes": 6,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectInputStream.java?ref=6eb61a0130c1c41e6141a209722403723f2d916b",
                "patch": "@@ -2542,7 +2542,11 @@ private static native void setField(Object instance, Class<?> declaringClass,\n      */\r\n     public int skipBytes(int length) throws IOException {\r\n         // To be used with available. Ok to call if reading primitive buffer\r\n-        int offset = 0;\r\n+        if (input == null) {\r\n+            throw new NullPointerException();\r\n+        }\r\n+\r\n+    \tint offset = 0;\r\n         while (offset < length) {\r\n             checkReadPrimitiveTypes();\r\n             long skipped = primitiveData.skip(length - offset);\r",
                "deletions": 1
            },
            {
                "sha": "ec2b367e83ce5ba0501a9ca42c2ca0842ead0b83",
                "filename": "modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/main/java/java/io/ObjectOutputStream.java",
                "status": "modified",
                "changes": 18,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/io/ObjectOutputStream.java?ref=6eb61a0130c1c41e6141a209722403723f2d916b",
                "patch": "@@ -196,7 +196,7 @@ protected ObjectOutputStream() throws IOException, SecurityException {\n \t */\r\n \tpublic ObjectOutputStream(OutputStream output) throws IOException {\r\n \t\tClass<?> implementationClass = getClass();\r\n-\t\tClass<?> thisClass = ObjectInputStream.class;\r\n+\t\tClass<?> thisClass = ObjectOutputStream.class;\r\n \t\tif (implementationClass != thisClass) {\r\n \t\t\tboolean mustCheck = false;\r\n \t\t\ttry {\r\n@@ -670,7 +670,7 @@ public PutField putFields() throws IOException {\n \t *         The handle that this object was assigned when it was saved.\r\n \t */\r\n \tprivate Integer registeredObjectHandleFor(Object obj) {\r\n-\t\treturn (Integer) objectsWritten.get(obj);\r\n+\t\treturn objectsWritten.get(obj);\r\n \t}\r\n \r\n \t/**\r\n@@ -956,7 +956,7 @@ private Integer writeClassDesc(ObjectStreamClass classDesc, boolean unshared)\n \t\t}\r\n \t\tif (handle == null) {\r\n             Class<?> classToWrite = classDesc.forClass();\r\n-\t\t\tInteger previousHandle = (Integer) objectsWritten.get(classDesc);\r\n+\t\t\tInteger previousHandle = objectsWritten.get(classDesc);\r\n \t\t\t// If we got here, it is a new (non-null) classDesc that will have\r\n \t\t\t// to be registered as well\r\n \t\t\thandle = registerObjectWritten(classDesc);\r\n@@ -1402,7 +1402,7 @@ private Integer writeNewArray(Object array, Class<?> arrayClass,\n \t\toutput.writeByte(TC_ARRAY);\r\n \t\twriteClassDescForClass(arrayClass);\r\n \r\n-\t\tInteger previousHandle = (Integer) objectsWritten.get(array);\r\n+\t\tInteger previousHandle = objectsWritten.get(array);\r\n \t\tInteger handle = registerObjectWritten(array);\r\n \t\tif (unshared) {\r\n \t\t\t// remove reference to unshared object\r\n@@ -1498,7 +1498,7 @@ private Integer writeNewClass(Class<?> object, boolean unshared) throws IOExcept\n \t\t// it.\r\n \t\twriteClassDesc(ObjectStreamClass.lookupStreamClass(object), unshared);\r\n \t\t\r\n-\t\tInteger previousHandle = (Integer) objectsWritten.get(object);\r\n+\t\tInteger previousHandle = objectsWritten.get(object);\r\n \t\tInteger handle = registerObjectWritten(object);\r\n \t\tif (unshared) {\r\n \t\t\t// remove reference to unshared object\r\n@@ -1626,7 +1626,7 @@ private Integer writeNewObject(Object object, Class<?> theClass,\n \t\t// Either serializable or externalizable, now we can save info\r\n \t\toutput.writeByte(TC_OBJECT);\r\n \t\twriteClassDescForClass(theClass);\r\n-\t\tInteger previousHandle = (Integer) objectsWritten.get(object);\r\n+\t\tInteger previousHandle = objectsWritten.get(object);\r\n \t\tInteger handle = registerObjectWritten(object);\r\n \r\n \t\t// This is how we know what to do in defaultWriteObject. And it is also\r\n@@ -1696,7 +1696,7 @@ private Integer writeNewString(String object, boolean unshared) throws IOExcepti\n \t\t}\r\n \t\toutput.writeUTFBytes(object, count);\r\n \t\t\r\n-\t\tInteger previousHandle = (Integer) objectsWritten.get(object);\r\n+\t\tInteger previousHandle = objectsWritten.get(object);\r\n \t\tInteger handle = registerObjectWritten(object);\r\n \t\tif (unshared) {\r\n \t\t\t// remove reference to unshared object\r\n@@ -1944,7 +1944,7 @@ private ObjectStreamClass writeEnumDesc(Class theClass, boolean unshared)\n         classDesc.setSerialVersionUID(0L);\r\n         // set flag for enum, the flag is (SC_SERIALIZABLE | SC_ENUM)\r\n         classDesc.setFlags((byte)(SC_SERIALIZABLE|SC_ENUM));\r\n-        Integer previousHandle = (Integer) objectsWritten.get(classDesc);\r\n+        Integer previousHandle = objectsWritten.get(classDesc);\r\n         Integer handle = null;\r\n         if (!unshared) {\r\n             handle = dumpCycle(classDesc);\r\n@@ -1989,7 +1989,7 @@ private Integer writeNewEnum(Object object, Class theClass, boolean unshared)\n         output.writeByte(TC_ENUM);\r\n         ObjectStreamClass classDesc = writeEnumDesc(theClass, unshared);\r\n \r\n-        Integer previousHandle = (Integer) objectsWritten.get(object);\r\n+        Integer previousHandle = objectsWritten.get(object);\r\n         Integer handle = registerObjectWritten(object);        \r\n \r\n         ObjectStreamField[] fields = classDesc.getSuperclass().fields();\r",
                "deletions": 9
            },
            {
                "sha": "405b474933de1e5dcc863477e052988027307ad4",
                "filename": "modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/6eb61a0130c1c41e6141a209722403723f2d916b/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java",
                "status": "modified",
                "changes": 1141,
                "additions": 505,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/tests/api/java/io/ObjectInputStreamTest.java?ref=6eb61a0130c1c41e6141a209722403723f2d916b",
                "patch": "@@ -24,513 +24,412 @@\n import java.io.ObjectInputStream;\r\n import java.io.ObjectOutputStream;\r\n import java.io.Serializable;\r\n+import java.io.SerializablePermission;\r\n import java.io.StreamCorruptedException;\r\n+import java.security.Permission;\r\n import java.util.Hashtable;\r\n import java.util.Vector;\r\n \r\n import tests.support.resource.Support_Resources;\r\n \r\n public class ObjectInputStreamTest extends junit.framework.TestCase implements\r\n-\t\tSerializable {\r\n-\r\n-\tObjectInputStream ois;\r\n-\r\n-\tObjectOutputStream oos;\r\n-\r\n-\tByteArrayOutputStream bao;\r\n-\r\n-\tpublic class SerializableTestHelper implements Serializable {\r\n-\t\tpublic String aField1;\r\n-\r\n-\t\tpublic String aField2;\r\n-\r\n-\t\tSerializableTestHelper() {\r\n-\t\t\taField1 = null;\r\n-\t\t\taField2 = null;\r\n-\t\t}\r\n-\r\n-\t\tSerializableTestHelper(String s, String t) {\r\n-\t\t\taField1 = s;\r\n-\t\t\taField2 = t;\r\n-\t\t}\r\n-\r\n-\t\tprivate void readObject(ObjectInputStream ois) throws IOException {\r\n-\t\t\t// note aField2 is not read\r\n-\t\t\ttry {\r\n-\t\t\t\tObjectInputStream.GetField fields = ois.readFields();\r\n-\t\t\t\taField1 = (String) fields.get(\"aField1\", \"Zap\");\r\n-\t\t\t} catch (Exception e) {\r\n-\t\t\t\tSystem.out.println(\"Exception during test: \" + e.toString());\r\n-\t\t\t}\r\n-\t\t}\r\n-\r\n-\t\tprivate void writeObject(ObjectOutputStream oos) throws IOException {\r\n-\t\t\t// note aField2 is not written\r\n-\t\t\tObjectOutputStream.PutField fields = oos.putFields();\r\n-\t\t\tfields.put(\"aField1\", aField1);\r\n-\t\t\toos.writeFields();\r\n-\t\t}\r\n-\r\n-\t\tpublic String getText1() {\r\n-\t\t\treturn aField1;\r\n-\t\t}\r\n-\r\n-\t\tpublic void setText1(String s) {\r\n-\t\t\taField1 = s;\r\n-\t\t}\r\n-\r\n-\t\tpublic String getText2() {\r\n-\t\t\treturn aField2;\r\n-\t\t}\r\n-\r\n-\t\tpublic void setText2(String s) {\r\n-\t\t\taField2 = s;\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tpublic static class A1 implements Serializable {\r\n-\t\tstatic final long serialVersionUID = 5942584913446079661L;\r\n-\r\n-\t\tB1 b1 = new B1();\r\n-\r\n-\t\tB1 b2 = b1;\r\n-\r\n-\t\tVector v = new Vector();\r\n-\t}\r\n-\r\n-\tpublic static class B1 implements Serializable {\r\n-\t\tint i = 5;\r\n-\r\n-\t\tHashtable h = new Hashtable();\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readObject()\r\n-\t */\r\n-\tpublic void test_readObjectMissingClasses() {\r\n-\t\ttry {\r\n-\t\t\t// To create or update the resource, uncomment the following, and\r\n-\t\t\t// the B1 class definition and references above.\r\n-\t\t\tObjectOutputStream out = new ObjectOutputStream(\r\n-\t\t\t\t\tnew FileOutputStream(\"hyts_missingclass.ser\"));\r\n-\t\t\tout.writeObject(new tests.api.java.io.ObjectInputStreamTest.A1());\r\n-\t\t\tout.close();\r\n-\r\n-\t\t\tObjectInputStream in = new ObjectInputStream(Support_Resources\r\n-\t\t\t\t\t.getStream(\"hyts_missingclass.ser\"));\r\n-\t\t\tin.readObject();\r\n-\t\t\tin.close();\r\n-\t\t\t// the serialized data should load without any exceptions.\r\n-\t\t} catch (Exception e) {\r\n-\t\t\te.printStackTrace();\r\n-\t\t\tfail(\"unexpected: \" + e);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_ConstructorLjava_io_InputStream() {\r\n-\t\t// Test for method java.io.ObjectInputStream(java.io.InputStream)\r\n-\t\ttry {\r\n-\t\t\toos.writeDouble(Double.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.close();\r\n-\t\t\toos.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception contructing stream : \" + e.getMessage());\r\n-\t\t}\r\n-\t\tboolean exception = false;\r\n-\t\ttry {\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(new byte[90]));\r\n-\t\t} catch (StreamCorruptedException e) {\r\n-\t\t\t// Correct\r\n-\t\t\texception = true;\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception contructing stream : \" + e.getMessage());\r\n-\t\t}\r\n-\t\tassertTrue(\"Expected exception\", exception);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_ConstructorLjava_io_InputStream_subtest0() {\r\n-\t\tSystem.setSecurityManager(new SecurityManager());\r\n-\t\ttry {\r\n-\t\t\tByteArrayOutputStream out = new ByteArrayOutputStream();\r\n-\t\t\tObjectOutputStream obout = new ObjectOutputStream(out);\r\n-\t\t\tobout.write(0);\r\n-\t\t\tobout.close();\r\n-\t\t\tInputStream in = new ByteArrayInputStream(out.toByteArray());\r\n-\t\t\t// should not cause SecurityException\r\n-\t\t\tnew ObjectInputStream(in);\r\n-\t\t\tclass SubTest1 extends ObjectInputStream {\r\n-\t\t\t\tSubTest1(InputStream in) throws IOException {\r\n-\t\t\t\t\tsuper(in);\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\t;\r\n-\t\t\tin.reset();\r\n-\t\t\t// should not cause SecurityException\r\n-\t\t\tnew SubTest1(in);\r\n-\t\t\tclass SubTest2 extends ObjectInputStream {\r\n-\t\t\t\tSubTest2(InputStream in) throws IOException {\r\n-\t\t\t\t\tsuper(in);\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tpublic Object readUnshared() throws IOException,\r\n-\t\t\t\t\t\tClassNotFoundException {\r\n-\t\t\t\t\treturn null;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\t;\r\n-\t\t\tin.reset();\r\n-\t\t\ttry {\r\n-\t\t\t\tnew SubTest2(in);\r\n-\t\t\t\tfail(\"should throw SecurityException 1\");\r\n-\t\t\t} catch (SecurityException e) {\r\n-\t\t\t}\r\n-\t\t\tclass SubTest3 extends ObjectInputStream {\r\n-\t\t\t\tSubTest3(InputStream in) throws IOException {\r\n-\t\t\t\t\tsuper(in);\r\n-\t\t\t\t}\r\n-\r\n-\t\t\t\tpublic GetField readFields() throws IOException,\r\n-\t\t\t\t\t\tClassNotFoundException, NotActiveException {\r\n-\t\t\t\t\treturn null;\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t\t;\r\n-\t\t\tin.reset();\r\n-\t\t\ttry {\r\n-\t\t\t\tnew SubTest3(in);\r\n-\t\t\t\tfail(\"should throw SecurityException 2\");\r\n-\t\t\t} catch (SecurityException e) {\r\n-\t\t\t}\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Unexpeced: \" + e);\r\n-\t\t} finally {\r\n-\t\t\tSystem.setSecurityManager(null);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#available()\r\n-\t */\r\n-\tpublic void test_available() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.available()\r\n-\t\ttry {\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect bytes\", 10, ois.available());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#close()\r\n-\t */\r\n-\tpublic void test_close() {\r\n-\t\t// Test for method void java.io.ObjectInputStream.close()\r\n-\t\ttry {\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Failed closing stream : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#defaultReadObject()\r\n-\t */\r\n-\tpublic void test_defaultReadObject() {\r\n-\t\t// Test for method void java.io.ObjectInputStream.defaultReadObject()\r\n-\t\t// SM. This method may as well be private, as if called directly it\r\n-\t\t// throws an exception.\r\n-\t\ttry {\r\n-\t\t\tString s = \"HelloWorld\";\r\n-\t\t\toos.writeObject(s);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.defaultReadObject();\r\n-\t\t\tfail(\"defaultReadObject should fail.\");\r\n-\t\t\tois.close();\r\n-\t\t} catch (NotActiveException e) {\r\n-\t\t\t// Desired behavior.\r\n-\t\t\treturn;\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tfail(\"Wrong exception during test : \" + e.getMessage());\r\n-\t\t}\r\n-\t\tfail(\"defaultReadObject should have thrown exception\");\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#read()\r\n-\t */\r\n-\tpublic void test_read() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.read()\r\n-\t\ttry {\r\n-\t\t\toos.write('T');\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect byte value\", 'T', ois.read());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#read(byte[], int, int)\r\n-\t */\r\n-\tpublic void test_read$BII() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.read(byte [], int, int)\r\n-\t\ttry {\r\n-\t\t\tbyte[] buf = new byte[10];\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.read(buf, 0, 10);\r\n-\t\t\tois.close();\r\n-\t\t\tassertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0, 10)\r\n-\t\t\t\t\t);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readBoolean()\r\n-\t */\r\n-\tpublic void test_readBoolean() {\r\n-\t\t// Test for method boolean java.io.ObjectInputStream.readBoolean()\r\n-\t\ttry {\r\n-\t\t\toos.writeBoolean(true);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect boolean value\", ois.readBoolean());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readByte()\r\n-\t */\r\n-\tpublic void test_readByte() {\r\n-\t\t// Test for method byte java.io.ObjectInputStream.readByte()\r\n-\t\ttry {\r\n-\t\t\toos.writeByte(127);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect byte value\", 127, ois.readByte());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readChar()\r\n-\t */\r\n-\tpublic void test_readChar() {\r\n-\t\t// Test for method char java.io.ObjectInputStream.readChar()\r\n-\t\ttry {\r\n-\t\t\toos.writeChar('T');\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect char value\", 'T', ois.readChar());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readDouble()\r\n-\t */\r\n-\tpublic void test_readDouble() {\r\n-\t\t// Test for method double java.io.ObjectInputStream.readDouble()\r\n-\t\ttry {\r\n-\t\t\toos.writeDouble(Double.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect double value\",\r\n-\t\t\t\t\tois.readDouble() == Double.MAX_VALUE);\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readFields()\r\n-\t */\r\n-\tpublic void test_readFields() {\r\n-\t\t// Test for method java.io.ObjectInputStream$GetField\r\n-\t\t// java.io.ObjectInputStream.readFields()\r\n-\r\n-\t\tSerializableTestHelper sth;\r\n-\r\n-\t\t/*\r\n-\t\t * \"SerializableTestHelper\" is an object created for these tests with\r\n-\t\t * two fields (Strings) and simple implementations of readObject and\r\n-\t\t * writeObject which simply read and write the first field but not the\r\n-\t\t * second\r\n-\t\t */\r\n-\r\n-\t\ttry {\r\n-\t\t\toos.writeObject(new SerializableTestHelper(\"Gabba\", \"Jabba\"));\r\n-\t\t\toos.flush();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tsth = (SerializableTestHelper) (ois.readObject());\r\n-\t\t\tassertEquals(\"readFields / writeFields failed--first field not set\",\r\n-\t\t\t\t\t\"Gabba\", sth.getText1());\r\n-\t\t\tassertNull(\r\n-\t\t\t\t\t\"readFields / writeFields failed--second field should not have been set\",\r\n-\t\t\t\t\tsth.getText2());\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readFloat()\r\n-\t */\r\n-\tpublic void test_readFloat() {\r\n-\t\t// Test for method float java.io.ObjectInputStream.readFloat()\r\n-\t\ttry {\r\n-\t\t\toos.writeFloat(Float.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect float value\",\r\n-\t\t\t\t\tois.readFloat() == Float.MAX_VALUE);\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readFully(byte[])\r\n-\t */\r\n-\tpublic void test_readFully$B() {\r\n-\t\t// Test for method void java.io.ObjectInputStream.readFully(byte [])\r\n-\t\ttry {\r\n-\t\t\tbyte[] buf = new byte[10];\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.readFully(buf);\r\n-\t\t\tois.close();\r\n-\t\t\tassertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0, 10)\r\n-\t\t\t\t\t);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readFully(byte[], int, int)\r\n-\t */\r\n-\tpublic void test_readFully$BII() {\r\n-\t\t// Test for method void java.io.ObjectInputStream.readFully(byte [],\r\n-\t\t// int, int)\r\n-\t\ttry {\r\n-\t\t\tbyte[] buf = new byte[10];\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.readFully(buf, 0, 10);\r\n-\t\t\tois.close();\r\n-\t\t\tassertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0, 10)\r\n-\t\t\t\t\t);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readInt()\r\n-\t */\r\n-\tpublic void test_readInt() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.readInt()\r\n-\t\ttry {\r\n-\t\t\toos.writeInt(Integer.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect int value\",\r\n-\t\t\t\t\tois.readInt() == Integer.MAX_VALUE);\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readLine()\r\n-\t */\r\n-\tpublic void test_readLine() {\r\n-\t\t// Test for method java.lang.String java.io.ObjectInputStream.readLine()\r\n-\t\ttry {\r\n-\t\t\toos.writeBytes(\"HelloWorld\\nSecondLine\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.readLine();\r\n-\t\t\tassertEquals(\"Read incorrect string value\", \r\n-\t\t\t\t\t\"SecondLine\", ois.readLine());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readLong()\r\n-\t */\r\n-\tpublic void test_readLong() {\r\n-\t\t// Test for method long java.io.ObjectInputStream.readLong()\r\n-\t\ttry {\r\n-\t\t\toos.writeLong(Long.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect long value\",\r\n-\t\t\t\t\tois.readLong() == Long.MAX_VALUE);\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readObject()\r\n-\t */\r\n-\tpublic void test_readObject() throws Exception {\r\n+        Serializable {\r\n+\r\n+    ObjectInputStream ois;\r\n+\r\n+    ObjectOutputStream oos;\r\n+\r\n+    ByteArrayOutputStream bao;\r\n+\r\n+    public class SerializableTestHelper implements Serializable {\r\n+\r\n+        public String aField1;\r\n+\r\n+        public String aField2;\r\n+\r\n+        SerializableTestHelper() {\r\n+            aField1 = null;\r\n+            aField2 = null;\r\n+        }\r\n+\r\n+        SerializableTestHelper(String s, String t) {\r\n+            aField1 = s;\r\n+            aField2 = t;\r\n+        }\r\n+\r\n+        private void readObject(ObjectInputStream ois) throws Exception {\r\n+            // note aField2 is not read\r\n+            ObjectInputStream.GetField fields = ois.readFields();\r\n+            aField1 = (String) fields.get(\"aField1\", \"Zap\");\r\n+        }\r\n+\r\n+        private void writeObject(ObjectOutputStream oos) throws IOException {\r\n+            // note aField2 is not written\r\n+            ObjectOutputStream.PutField fields = oos.putFields();\r\n+            fields.put(\"aField1\", aField1);\r\n+            oos.writeFields();\r\n+        }\r\n+\r\n+        public String getText1() {\r\n+            return aField1;\r\n+        }\r\n+\r\n+        public void setText1(String s) {\r\n+            aField1 = s;\r\n+        }\r\n+\r\n+        public String getText2() {\r\n+            return aField2;\r\n+        }\r\n+\r\n+        public void setText2(String s) {\r\n+            aField2 = s;\r\n+        }\r\n+    }\r\n+\r\n+    public static class A1 implements Serializable {\r\n+\r\n+        static final long serialVersionUID = 5942584913446079661L;\r\n+\r\n+        B1 b1 = new B1();\r\n+\r\n+        B1 b2 = b1;\r\n+\r\n+        Vector v = new Vector();\r\n+    }\r\n+\r\n+    public static class B1 implements Serializable {\r\n+\r\n+        int i = 5;\r\n+\r\n+        Hashtable h = new Hashtable();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readObject()\r\n+     */\r\n+    public void test_readObjectMissingClasses() throws Exception {\r\n+        // To create or update the resource, uncomment the following, and\r\n+        // the B1 class definition and references above.\r\n+        ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream(\r\n+                \"hyts_missingclass.ser\"));\r\n+        out.writeObject(new tests.api.java.io.ObjectInputStreamTest.A1());\r\n+        out.close();\r\n+\r\n+        ObjectInputStream in = new ObjectInputStream(Support_Resources\r\n+                .getStream(\"hyts_missingclass.ser\"));\r\n+        in.readObject();\r\n+        in.close();\r\n+        // the serialized data should load without any exceptions.\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\r\n+     */\r\n+    public void test_ConstructorLjava_io_InputStream() throws IOException {\r\n+        // Test for method java.io.ObjectInputStream(java.io.InputStream)\r\n+        oos.writeDouble(Double.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.close();\r\n+        oos.close();\r\n+\r\n+        try {\r\n+            ois = new ObjectInputStream(new ByteArrayInputStream(new byte[90]));\r\n+            fail(\"StreamCorruptedException expected\");\r\n+        } catch (StreamCorruptedException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#ObjectInputStream(java.io.InputStream)\r\n+     */\r\n+    public void test_ConstructorLjava_io_InputStream_subtest0() throws IOException {\r\n+        SecurityManager sm = System.getSecurityManager();\r\n+        System.setSecurityManager(new SecurityManager() {\r\n+            Permission golden = new SerializablePermission(\"enableSubclassImplementation\");\r\n+            \r\n+            public void checkPermission(Permission p) {\r\n+                if (golden.equals(p)) {\r\n+                    throw new SecurityException();\r\n+                }\r\n+            }\r\n+        });\r\n+\r\n+        try {\r\n+            ByteArrayOutputStream out = new ByteArrayOutputStream();\r\n+            ObjectOutputStream obout = new ObjectOutputStream(out);\r\n+            obout.write(0);\r\n+            obout.close();\r\n+\r\n+            InputStream in = new ByteArrayInputStream(out.toByteArray());\r\n+\r\n+            // should not cause SecurityException\r\n+            new ObjectInputStream(in);\r\n+            in.reset();\r\n+\r\n+            // should not cause SecurityException\r\n+            new ObjectInputStream(in) {};\r\n+            in.reset();\r\n+\r\n+            try {\r\n+                new ObjectInputStream(in) {\r\n+                    public Object readUnshared() throws IOException, ClassNotFoundException {\r\n+                        return null;\r\n+                    }\r\n+                };\r\n+                fail(\"should throw SecurityException 1\");\r\n+            } catch (SecurityException e) {}\r\n+\r\n+            in.reset();\r\n+            try {\r\n+                new ObjectInputStream(in) {\r\n+                    public GetField readFields() throws IOException,\r\n+                            ClassNotFoundException, NotActiveException {\r\n+                        return null;\r\n+                    }\r\n+                };\r\n+                fail(\"should throw SecurityException 2\");\r\n+            } catch (SecurityException e) {}\r\n+        } finally {\r\n+            System.setSecurityManager(sm);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#available()\r\n+     */\r\n+    public void test_available() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.available()\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect bytes\", 10, ois.available());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#close()\r\n+     */\r\n+    public void test_close() throws IOException {\r\n+        // Test for method void java.io.ObjectInputStream.close()\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#defaultReadObject()\r\n+     */\r\n+    public void test_defaultReadObject() throws Exception {\r\n+        // Test for method void java.io.ObjectInputStream.defaultReadObject()\r\n+        // SM. This method may as well be private, as if called directly it\r\n+        // throws an exception.\r\n+        String s = \"HelloWorld\";\r\n+        oos.writeObject(s);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        try {\r\n+            ois.defaultReadObject();\r\n+            fail(\"NotActiveException expected\");\r\n+        } catch (NotActiveException e) {\r\n+            // Desired behavior\r\n+        } finally {\r\n+            ois.close();\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#read()\r\n+     */\r\n+    public void test_read() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.read()\r\n+        oos.write('T');\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect byte value\", 'T', ois.read());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#read(byte[], int, int)\r\n+     */\r\n+    public void test_read$BII() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.read(byte [], int, int)\r\n+        byte[] buf = new byte[10];\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.read(buf, 0, 10);\r\n+        ois.close();\r\n+        assertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0,\r\n+                10));\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readBoolean()\r\n+     */\r\n+    public void test_readBoolean() throws IOException {\r\n+        // Test for method boolean java.io.ObjectInputStream.readBoolean()\r\n+        oos.writeBoolean(true);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect boolean value\", ois.readBoolean());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readByte()\r\n+     */\r\n+    public void test_readByte() throws IOException {\r\n+        // Test for method byte java.io.ObjectInputStream.readByte()\r\n+        oos.writeByte(127);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect byte value\", 127, ois.readByte());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readChar()\r\n+     */\r\n+    public void test_readChar() throws IOException {\r\n+        // Test for method char java.io.ObjectInputStream.readChar()\r\n+        oos.writeChar('T');\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect char value\", 'T', ois.readChar());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readDouble()\r\n+     */\r\n+    public void test_readDouble() throws IOException {\r\n+        // Test for method double java.io.ObjectInputStream.readDouble()\r\n+        oos.writeDouble(Double.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect double value\",\r\n+                ois.readDouble() == Double.MAX_VALUE);\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readFields()\r\n+     */\r\n+    public void test_readFields() throws Exception {\r\n+        // Test for method java.io.ObjectInputStream$GetField\r\n+        // java.io.ObjectInputStream.readFields()\r\n+\r\n+        SerializableTestHelper sth;\r\n+\r\n+        /*\r\n+         * \"SerializableTestHelper\" is an object created for these tests with\r\n+         * two fields (Strings) and simple implementations of readObject and\r\n+         * writeObject which simply read and write the first field but not the\r\n+         * second\r\n+         */\r\n+\r\n+        oos.writeObject(new SerializableTestHelper(\"Gabba\", \"Jabba\"));\r\n+        oos.flush();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        sth = (SerializableTestHelper) (ois.readObject());\r\n+        assertEquals(\"readFields / writeFields failed--first field not set\",\r\n+                \"Gabba\", sth.getText1());\r\n+        assertNull(\r\n+                \"readFields / writeFields failed--second field should not have been set\",\r\n+                sth.getText2());\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readFloat()\r\n+     */\r\n+    public void test_readFloat() throws IOException {\r\n+        // Test for method float java.io.ObjectInputStream.readFloat()\r\n+        oos.writeFloat(Float.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect float value\",\r\n+                ois.readFloat() == Float.MAX_VALUE);\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readFully(byte[])\r\n+     */\r\n+    public void test_readFully$B() throws IOException {\r\n+        // Test for method void java.io.ObjectInputStream.readFully(byte [])\r\n+        byte[] buf = new byte[10];\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.readFully(buf);\r\n+        ois.close();\r\n+        assertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0,\r\n+                10));\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readFully(byte[], int, int)\r\n+     */\r\n+    public void test_readFully$BII() throws IOException {\r\n+        // Test for method void java.io.ObjectInputStream.readFully(byte [],\r\n+        // int, int)\r\n+        byte[] buf = new byte[10];\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.readFully(buf, 0, 10);\r\n+        ois.close();\r\n+        assertEquals(\"Read incorrect bytes\", \"HelloWorld\", new String(buf, 0,\r\n+                10));\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readInt()\r\n+     */\r\n+    public void test_readInt() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.readInt()\r\n+        oos.writeInt(Integer.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect int value\",\r\n+                ois.readInt() == Integer.MAX_VALUE);\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readLine()\r\n+     */\r\n+    public void test_readLine() throws IOException {\r\n+        // Test for method java.lang.String java.io.ObjectInputStream.readLine()\r\n+        oos.writeBytes(\"HelloWorld\\nSecondLine\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.readLine();\r\n+        assertEquals(\"Read incorrect string value\", \"SecondLine\", ois\r\n+                .readLine());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readLong()\r\n+     */\r\n+    public void test_readLong() throws IOException {\r\n+        // Test for method long java.io.ObjectInputStream.readLong()\r\n+        oos.writeLong(Long.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect long value\",\r\n+                ois.readLong() == Long.MAX_VALUE);\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readObject()\r\n+     */\r\n+    public void test_readObject() throws Exception {\r\n         // Test for method java.lang.Object\r\n         // java.io.ObjectInputStream.readObject()\r\n         String s = \"HelloWorld\";\r\n@@ -612,152 +511,122 @@ public void test_readObject() throws Exception {\n                 out.toByteArray()));\r\n         Object o = ois.readObject();\r\n         assertEquals(C.class, o.getClass());\r\n-\t}\r\n+    }\r\n \r\n     public static class A implements Serializable {\r\n+\r\n         private static final long serialVersionUID = 11L;\r\n \r\n         public String name = \"name\";\r\n     }\r\n \r\n-    public static class B extends A {\r\n-    }\r\n+    public static class B extends A {}\r\n \r\n     public static class C extends B {\r\n+\r\n         private static final long serialVersionUID = 33L;\r\n     }\r\n \r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readObject()\r\n-\t */\r\n-\tpublic void test_readObjectCorrupt() {\r\n-\t\tbyte[] bytes = { 00, 00, 00, 0x64, 0x43, 0x48, (byte) 0xFD, 0x71, 00,\r\n-\t\t\t\t00, 0x0B, (byte) 0xB8, 0x4D, 0x65 };\r\n-\t\tByteArrayInputStream bin = new ByteArrayInputStream(bytes);\r\n-\t\tboolean exception = false;\r\n-\t\ttry {\r\n-\t\t\tObjectInputStream in = new ObjectInputStream(bin);\r\n-\t\t\tin.readObject();\r\n-\t\t\tfail(\"Unexpected read of corrupted stream\");\r\n-\t\t} catch (StreamCorruptedException e) {\r\n-\t\t\texception = true;\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Unexpected: \" + e);\r\n-\t\t} catch (ClassNotFoundException e) {\r\n-\t\t\tfail(\"Unexpected: \" + e);\r\n-\t\t}\r\n-\t\tassertTrue(\"Expected StreamCorruptedException\", exception);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readShort()\r\n-\t */\r\n-\tpublic void test_readShort() {\r\n-\t\t// Test for method short java.io.ObjectInputStream.readShort()\r\n-\t\ttry {\r\n-\t\t\toos.writeShort(Short.MAX_VALUE);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertTrue(\"Read incorrect short value\",\r\n-\t\t\t\t\tois.readShort() == Short.MAX_VALUE);\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readUnsignedByte()\r\n-\t */\r\n-\tpublic void test_readUnsignedByte() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.readUnsignedByte()\r\n-\t\ttry {\r\n-\t\t\toos.writeByte(-1);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect unsignedByte value\", 255, ois\r\n-\t\t\t\t\t.readUnsignedByte());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readUnsignedShort()\r\n-\t */\r\n-\tpublic void test_readUnsignedShort() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.readUnsignedShort()\r\n-\t\ttry {\r\n-\t\t\toos.writeShort(-1);\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect unsignedShort value\", 65535, ois\r\n-\t\t\t\t\t.readUnsignedShort());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#readUTF()\r\n-\t */\r\n-\tpublic void test_readUTF() {\r\n-\t\t// Test for method java.lang.String java.io.ObjectInputStream.readUTF()\r\n-\t\ttry {\r\n-\t\t\toos.writeUTF(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tassertEquals(\"Read incorrect utf value\", \r\n-\t\t\t\t\t\"HelloWorld\", ois.readUTF());\r\n-\t\t\tois.close();\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.io.ObjectInputStream#skipBytes(int)\r\n-\t */\r\n-\tpublic void test_skipBytesI() {\r\n-\t\t// Test for method int java.io.ObjectInputStream.skipBytes(int)\r\n-\t\ttry {\r\n-\t\t\tbyte[] buf = new byte[10];\r\n-\t\t\toos.writeBytes(\"HelloWorld\");\r\n-\t\t\toos.close();\r\n-\t\t\tois = new ObjectInputStream(new ByteArrayInputStream(bao\r\n-\t\t\t\t\t.toByteArray()));\r\n-\t\t\tois.skipBytes(5);\r\n-\t\t\tois.read(buf, 0, 5);\r\n-\t\t\tois.close();\r\n-\t\t\tassertEquals(\"Skipped incorrect bytes\", \"World\", new String(buf, 0, 5)\r\n-\t\t\t\t\t);\r\n-\t\t} catch (IOException e) {\r\n-\t\t\tfail(\"Exception serializing data : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Sets up the fixture, for example, open a network connection. This method\r\n-\t * is called before a test is executed.\r\n-\t */\r\n-\tprotected void setUp() {\r\n-\t\ttry {\r\n-\t\t\toos = new ObjectOutputStream(bao = new ByteArrayOutputStream());\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tfail(\"Setup failed : \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * Tears down the fixture, for example, close a network connection. This\r\n-\t * method is called after a test is executed.\r\n-\t */\r\n-\tprotected void tearDown() {\r\n-\t}\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readObject()\r\n+     */\r\n+    public void test_readObjectCorrupt() {\r\n+        byte[] bytes = { 00, 00, 00, 0x64, 0x43, 0x48, (byte) 0xFD, 0x71, 00,\r\n+                00, 0x0B, (byte) 0xB8, 0x4D, 0x65 };\r\n+        ByteArrayInputStream bin = new ByteArrayInputStream(bytes);\r\n+        boolean exception = false;\r\n+        try {\r\n+            ObjectInputStream in = new ObjectInputStream(bin);\r\n+            in.readObject();\r\n+            fail(\"Unexpected read of corrupted stream\");\r\n+        } catch (StreamCorruptedException e) {\r\n+            exception = true;\r\n+        } catch (IOException e) {\r\n+            fail(\"Unexpected: \" + e);\r\n+        } catch (ClassNotFoundException e) {\r\n+            fail(\"Unexpected: \" + e);\r\n+        }\r\n+        assertTrue(\"Expected StreamCorruptedException\", exception);\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readShort()\r\n+     */\r\n+    public void test_readShort() throws IOException {\r\n+        // Test for method short java.io.ObjectInputStream.readShort()\r\n+        oos.writeShort(Short.MAX_VALUE);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertTrue(\"Read incorrect short value\",\r\n+                ois.readShort() == Short.MAX_VALUE);\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readUnsignedByte()\r\n+     */\r\n+    public void test_readUnsignedByte() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.readUnsignedByte()\r\n+        oos.writeByte(-1);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect unsignedByte value\", 255, ois\r\n+                .readUnsignedByte());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readUnsignedShort()\r\n+     */\r\n+    public void test_readUnsignedShort() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.readUnsignedShort()\r\n+        oos.writeShort(-1);\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect unsignedShort value\", 65535, ois\r\n+                .readUnsignedShort());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#readUTF()\r\n+     */\r\n+    public void test_readUTF() throws IOException {\r\n+        // Test for method java.lang.String java.io.ObjectInputStream.readUTF()\r\n+        oos.writeUTF(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        assertEquals(\"Read incorrect utf value\", \"HelloWorld\", ois.readUTF());\r\n+        ois.close();\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.io.ObjectInputStream#skipBytes(int)\r\n+     */\r\n+    public void test_skipBytesI() throws IOException {\r\n+        // Test for method int java.io.ObjectInputStream.skipBytes(int)\r\n+        byte[] buf = new byte[10];\r\n+        oos.writeBytes(\"HelloWorld\");\r\n+        oos.close();\r\n+        ois = new ObjectInputStream(new ByteArrayInputStream(bao.toByteArray()));\r\n+        ois.skipBytes(5);\r\n+        ois.read(buf, 0, 5);\r\n+        ois.close();\r\n+        assertEquals(\"Skipped incorrect bytes\", \"World\", new String(buf, 0, 5));\r\n+\r\n+        // Regression for HARMONY-844\r\n+        try {\r\n+            new ObjectInputStream() {}.skipBytes(0);\r\n+            fail(\"NullPointerException expected\");\r\n+        } catch (NullPointerException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * Sets up the fixture, for example, open a network connection. This method\r\n+     * is called before a test is executed.\r\n+     */\r\n+    protected void setUp() throws Exception {\r\n+        super.setUp();\r\n+        oos = new ObjectOutputStream(bao = new ByteArrayOutputStream());\r\n+    }\r\n }\r",
                "deletions": 636
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes for HARMONY-814\n[classlib][security] X509 Certificate Factory implementation throws NPE while RI throws another exception\nand some style fixes for related tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@420523 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d",
        "parent": "https://github.com/apache/harmony-classlib/commit/552472c68abfdad165e7c0a4c3440e79c1b4b3cd",
        "bug_id": "harmony-classlib_295",
        "file": [
            {
                "sha": "b2af583365cc5f34918ea484edac305e1d0bda57",
                "filename": "modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertFactoryImpl.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertFactoryImpl.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertFactoryImpl.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/main/java/common/org/apache/harmony/security/provider/cert/X509CertFactoryImpl.java?ref=86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d",
                "patch": "@@ -83,6 +83,9 @@ public X509CertFactoryImpl() { }\n      */\n     public Certificate engineGenerateCertificate(InputStream inStream)\n             throws CertificateException {\n+        if (inStream == null) {\n+            throw new CertificateException(\"Input stream should not be null.\");\n+        }\n         try {\n             if (!inStream.markSupported()) {\n                 // create the mark supporting wrapper\n@@ -159,6 +162,9 @@ public Certificate engineGenerateCertificate(InputStream inStream)\n     public Collection<? extends Certificate>\n             engineGenerateCertificates(InputStream inStream)\n                 throws CertificateException {\n+        if (inStream == null) {\n+            throw new CertificateException(\"Input stream should not be null.\");\n+        }\n         ArrayList result = new ArrayList();\n         try {\n             if (!inStream.markSupported()) {\n@@ -232,6 +238,9 @@ public Certificate engineGenerateCertificate(InputStream inStream)\n      */\n     public CRL engineGenerateCRL(InputStream inStream)\n             throws CRLException {\n+        if (inStream == null) {\n+            throw new CRLException(\"Input stream should not be null.\");\n+        }\n         try {\n             if (!inStream.markSupported()) {\n                 // create the mark supporting wrapper",
                "deletions": 0
            },
            {
                "sha": "d7ca75ff350921faf0f0ebd083051e451f934c1e",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory3Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory3Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory3Test.java",
                "status": "modified",
                "changes": 163,
                "additions": 61,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory3Test.java?ref=86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d",
                "patch": "@@ -23,120 +23,96 @@\n \r\n import java.io.File;\r\n import java.io.FileInputStream;\r\n-import java.io.FileNotFoundException;\r\n-import java.io.IOException;\r\n-import java.security.NoSuchProviderException;\r\n import java.security.Provider;\r\n import java.security.cert.CertPath;\r\n import java.security.cert.Certificate;\r\n-import java.security.cert.CertificateException;\r\n import java.security.cert.CertificateFactory;\r\n import java.util.Collection;\r\n import java.util.Iterator;\r\n import java.util.List;\r\n import java.util.Vector;\r\n \r\n-import org.apache.harmony.security.tests.java.security.cert.CertificateFactory1Test;\r\n+import junit.framework.TestCase;\r\n+\r\n import org.apache.harmony.security.tests.support.SpiEngUtils;\r\n import org.apache.harmony.security.tests.support.TestUtils;\r\n \r\n-import junit.framework.TestCase;\r\n-\r\n /**\r\n  * Tests for <code>CertificateFactory</code> class methods\r\n  */\r\n \r\n public class CertificateFactory3Test extends TestCase {\r\n \r\n-    /**\r\n-     * Constructor for CertificateFactoryFileTests.\r\n-     * @param arg0\r\n-     */\r\n-    public CertificateFactory3Test(String arg0) {\r\n-        super(arg0);\r\n-    }\r\n     private static String defaultProviderName = null;\r\n \r\n     private static Provider defaultProvider = null;\r\n \r\n-    private static boolean X509Support = false;\r\n-\r\n     private static String defaultType = CertificateFactory1Test.defaultType;\r\n \r\n     public static String fileCertificateX509 = \"java/security/cert/serialization/Certificate.X.509\";\r\n+\r\n     public static String fileCertPathPki = \"java/security/cert/serialization/CertPath.PkiPath\";\r\n \r\n+    private static boolean X509Support = false;\r\n+\r\n     private static String NotSupportMsg = \"\";\r\n \r\n     static {\r\n         defaultProvider = SpiEngUtils.isSupport(defaultType,\r\n                 CertificateFactory1Test.srvCertificateFactory);\r\n-        X509Support = (defaultProvider != null);\r\n-        defaultProviderName = (X509Support ? defaultProvider.getName() : null);\r\n+        X509Support = defaultProvider != null;\r\n+        defaultProviderName = X509Support ? defaultProvider.getName() : null;\r\n+\r\n         NotSupportMsg = defaultType.concat(\" is not supported\");\r\n+\r\n         fileCertificateX509 = SpiEngUtils.getFileName(TestUtils.TEST_ROOT,\r\n                 fileCertificateX509);\r\n-        fileCertificateX509 = fileCertificateX509.replace('/',File.separatorChar);\r\n+        fileCertificateX509 = fileCertificateX509.replace('/',\r\n+                File.separatorChar);\r\n+\r\n         fileCertPathPki = SpiEngUtils.getFileName(TestUtils.TEST_ROOT,\r\n                 fileCertPathPki);\r\n-        fileCertPathPki = fileCertPathPki.replace('/',File.separatorChar);\r\n-    \r\n+        fileCertPathPki = fileCertPathPki.replace('/', File.separatorChar);\r\n+\r\n     }\r\n \r\n-    private static CertificateFactory[] initCertFs() {\r\n+    private static CertificateFactory[] initCertFs() throws Exception {\r\n         if (!X509Support) {\r\n             fail(NotSupportMsg);\r\n-            return null;\r\n-        }\r\n-        try {\r\n-            CertificateFactory[] certFs = new CertificateFactory[3];\r\n-            certFs[0] = CertificateFactory.getInstance(defaultType);\r\n-            certFs[1] = CertificateFactory.getInstance(defaultType,\r\n-                    defaultProviderName);\r\n-            certFs[2] = CertificateFactory.getInstance(defaultType,\r\n-                    defaultProvider);\r\n-            return certFs;\r\n-        } catch (Exception e) {\r\n-            return null;\r\n         }\r\n+\r\n+        CertificateFactory[] certFs = new CertificateFactory[3];\r\n+        certFs[0] = CertificateFactory.getInstance(defaultType);\r\n+        certFs[1] = CertificateFactory.getInstance(defaultType,\r\n+                defaultProviderName);\r\n+        certFs[2] = CertificateFactory\r\n+                .getInstance(defaultType, defaultProvider);\r\n+        return certFs;\r\n     }\r\n-    \r\n+\r\n     /**\r\n-     * Test for \r\n-     * <code>generateCertificate(InputStream inStream)</code> method\r\n+     * Test for <code>generateCertificate(InputStream inStream)</code> method\r\n      * Assertion: returns Certificate\r\n      */\r\n-    public void testGenerateCertificate() \r\n-            throws CertificateException, NoSuchProviderException,\r\n-                FileNotFoundException, IOException {\r\n-        if (!X509Support) {\r\n-            fail(NotSupportMsg);\r\n-            return;\r\n-        }\r\n+    public void testGenerateCertificate() throws Exception {\r\n         CertificateFactory[] certFs = initCertFs();\r\n         assertNotNull(\"CertificateFactory objects were not created\", certFs);\r\n         FileInputStream fis = null;\r\n-        Certificate [] certs = new Certificate[3];\r\n+        Certificate[] certs = new Certificate[3];\r\n         for (int i = 0; i < certFs.length; i++) {\r\n             fis = new FileInputStream(fileCertificateX509);\r\n             certs[i] = certFs[i].generateCertificate(fis);\r\n             fis.close();\r\n-        }        \r\n+        }\r\n         assertEquals(certs[0], certs[1]);\r\n         assertEquals(certs[0], certs[2]);\r\n     }\r\n+\r\n     /**\r\n-     * Test for \r\n-     * <code>generateCertificates(InputStream inStream)</code> method\r\n+     * Test for <code>generateCertificates(InputStream inStream)</code> method\r\n      * Assertion: returns Collection which consists of 1 Certificate\r\n      */\r\n-    public void testeGnerateCertificates() \r\n-            throws CertificateException, NoSuchProviderException,\r\n-                FileNotFoundException, IOException {\r\n-        if (!X509Support) {\r\n-            fail(NotSupportMsg);\r\n-            return;\r\n-        }\r\n+    public void testeGnerateCertificates() throws Exception {\r\n         CertificateFactory[] certFs = initCertFs();\r\n         assertNotNull(\"CertificateFactory objects were not created\", certFs);\r\n         FileInputStream fis = new FileInputStream(fileCertificateX509);\r\n@@ -152,18 +128,12 @@ public void testeGnerateCertificates()\n             assertEquals(\"Incorect Certificate in Collection\", cert, it.next());\r\n         }\r\n     }\r\n+\r\n     /**\r\n-     * Test for \r\n-     * <code>generateCertPath(List certificates)</code> method\r\n+     * Test for <code>generateCertPath(List certificates)</code> method\r\n      * Assertion: returns CertPath with 1 Certificate\r\n      */\r\n-    public void testGenerateCertPath01() \r\n-            throws CertificateException, NoSuchProviderException,\r\n-                FileNotFoundException, IOException{\r\n-        if (!X509Support) {\r\n-            fail(NotSupportMsg);\r\n-            return;\r\n-        }\r\n+    public void testGenerateCertPath01() throws Exception {\r\n         CertificateFactory[] certFs = initCertFs();\r\n         assertNotNull(\"CertificateFactory objects were not created\", certFs);\r\n         // create list of certificates with one certificate\r\n@@ -177,23 +147,18 @@ public void testGenerateCertPath01()\n             certPath = certFs[i].generateCertPath(list);\r\n             assertEquals(cert.getType(), certPath.getType());\r\n             List list1 = certPath.getCertificates();\r\n-            assertFalse(\"Result list is empty\",list1.isEmpty());\r\n+            assertFalse(\"Result list is empty\", list1.isEmpty());\r\n             Iterator it = list1.iterator();\r\n             assertEquals(\"Incorrect Certificate in CertPath\", cert, it.next());\r\n         }\r\n-    }    \r\n+    }\r\n+\r\n     /**\r\n-     * Test for \r\n-     * <code>generateCertPath(InputStream inStream, String encoding)</code> method\r\n-     * Assertion: returns CertPath with 1 Certificate\r\n+     * Test for\r\n+     * <code>generateCertPath(InputStream inStream, String encoding)</code>\r\n+     * method Assertion: returns CertPath with 1 Certificate\r\n      */\r\n-    public void testGenerateCertPath02() \r\n-            throws CertificateException, NoSuchProviderException,\r\n-                FileNotFoundException, IOException {\r\n-        if (!X509Support) {\r\n-            fail(NotSupportMsg);\r\n-            return;\r\n-        }\r\n+    public void testGenerateCertPath02() throws Exception {\r\n         CertificateFactory[] certFs = initCertFs();\r\n         assertNotNull(\"CertificateFactory objects were not created\", certFs);\r\n         for (int i = 0; i < certFs.length; i++) {\r\n@@ -202,42 +167,36 @@ public void testGenerateCertPath02()\n             certPath = certFs[i].generateCertPath(fis, \"PkiPath\");\r\n             fis.close();\r\n             assertEquals(defaultType, certPath.getType());\r\n+\r\n             List list1 = certPath.getCertificates();\r\n-            assertFalse(\"Result list is empty\",list1.isEmpty());\r\n+            assertFalse(\"Result list is empty\", list1.isEmpty());\r\n         }\r\n-    }    \r\n+    }\r\n+\r\n     /**\r\n-     * Test for \r\n-     * <code>generateCertPath(InputStream inStream)</code> method\r\n+     * Test for <code>generateCertPath(InputStream inStream)</code> method\r\n      * Assertion: returns CertPath with 1 Certificate\r\n      */\r\n-    public void testGenerateCertPath03() \r\n-            throws CertificateException, NoSuchProviderException,\r\n-                FileNotFoundException, IOException{\r\n-        if (!X509Support) {\r\n-            fail(NotSupportMsg);\r\n-            return;\r\n-        }\r\n+    public void testGenerateCertPath03() throws Exception {\r\n         String certPathEncoding = \"PkiPath\";\r\n         CertificateFactory[] certFs = initCertFs();\r\n         assertNotNull(\"CertificateFactory objects were not created\", certFs);\r\n         for (int i = 0; i < certFs.length; i++) {\r\n             Iterator it = certFs[0].getCertPathEncodings();\r\n-            if (it.hasNext()) {\r\n-                if (certPathEncoding.equals(it.next())) {\r\n-                    CertPath certPath = null;\r\n-                    FileInputStream fis = new FileInputStream(fileCertPathPki);\r\n-                    certPath = certFs[i].generateCertPath(fis);\r\n-                    fis.close();\r\n-                    assertEquals(defaultType, certPath.getType());\r\n-                    List list1 = certPath.getCertificates();\r\n-                    assertFalse(\"Result list is empty\",list1.isEmpty());\r\n-                } else {\r\n-                    fail(\"Default encoding is not \".concat(certPathEncoding));\r\n-                }\r\n-            } else {\r\n-                fail(\"There are no CertPath encodings\");\r\n-            }\r\n+\r\n+            assertTrue(\"no CertPath encodings\", it.hasNext());\r\n+\r\n+            assertEquals(\"Incorrect default encoding\", certPathEncoding, it\r\n+                    .next());\r\n+\r\n+            CertPath certPath = null;\r\n+            FileInputStream fis = new FileInputStream(fileCertPathPki);\r\n+            certPath = certFs[i].generateCertPath(fis);\r\n+            fis.close();\r\n+            assertEquals(defaultType, certPath.getType());\r\n+\r\n+            List list1 = certPath.getCertificates();\r\n+            assertFalse(\"Result list is empty\", list1.isEmpty());\r\n         }\r\n     }\r\n }\r",
                "deletions": 102
            },
            {
                "sha": "16d679b54c3d38bb29cabdcb4d16452d70fd26f9",
                "filename": "modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory4Test.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory4Test.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory4Test.java",
                "status": "modified",
                "changes": 1106,
                "additions": 567,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/security/src/test/api/java/org/apache/harmony/security/tests/java/security/cert/CertificateFactory4Test.java?ref=86cf0bebf33908ffaa8de8ef92d83b2e6d1f705d",
                "patch": "@@ -18,7 +18,6 @@\n import java.io.ByteArrayInputStream;\r\n import java.io.IOException;\r\n import java.io.InputStream;\r\n-import java.net.MalformedURLException;\r\n import java.net.URL;\r\n import java.security.NoSuchProviderException;\r\n import java.security.Provider;\r\n@@ -28,545 +27,574 @@\n import java.security.cert.CertificateException;\r\n import java.security.cert.CertificateFactory;\r\n import java.util.Collection;\r\n+import java.util.List;\r\n \r\n+import junit.framework.TestCase;\r\n import tests.support.Support_GetResource;\r\n import tests.support.resource.Support_Resources;\r\n \r\n-import junit.framework.TestCase;\r\n-\r\n-public class CertificateFactory4Test extends junit.framework.TestCase {\r\n-\r\n-\tprivate static final String BASE_URL = Support_GetResource\r\n-\t\t\t.getResourceURL(\"/../internalres/\");\r\n-\r\n-\tprivate static final String[] CERTIFICATE_URLS = new String[] {\r\n-\t\t\t\"Bug93891-PEM.cer\", \"Bug93891-DER.cer\", \"Bug94404-PKCS7.cer\" };\r\n-\r\n-\tprivate static final String[] CRL_URLS = new String[] { \"Bug93893-1.crl\",\r\n-\t\t\t\"Bug93893-2.crl\", \"Bug94404-DER.crl\" };\r\n-\r\n-\tprivate static final String[] CRLCOLLECTION_URLS = new String[] { \"Bug94404-PKCS7.crl\" };\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_generateCertificateLjava_io_InputStream() {\r\n-\t\t// Test 1\r\n-\t\t// Test for method java.security.cert.Certificate\r\n-\t\t// java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)\r\n-\t\tint i = 0;\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tfor (; i < CERTIFICATES_ENCODED_X509.length; i++)\r\n-\t\t\t\tif (CERTIFICATES_ENCODED_X509[i] != null) {\r\n-\t\t\t\t\tByteArrayInputStream bais = new ByteArrayInputStream(\r\n-\t\t\t\t\t\t\tCERTIFICATES_ENCODED_X509[i].getBytes());\r\n-\t\t\t\t\tfact.generateCertificate(bais);\r\n-\t\t\t\t\t\r\n-\t\t\t\t\t// try again with generateCertificates()\r\n-\t\t\t\t\tbais = new ByteArrayInputStream(\r\n-\t\t\t\t\t\t\tCERTIFICATES_ENCODED_X509[i].getBytes());\r\n-\t\t\t\t\tfact.generateCertificate(bais);\r\n-\t\t\t\t}\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"CertificateException in getInstance or generateCertificate[\"\r\n-\t\t\t\t\t+ i + \"]\");\r\n-\t\t}\r\n-\r\n-\t\t// Test 2\r\n-\t\tInputStream is = Support_Resources.getResourceStream(\"hyts_badpem.cer\");\r\n-\t\tboolean caughtException = false;\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tfact.generateCertificate(is);\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tcaughtException = true;\r\n-\t\t} finally {\r\n-\t\t\ttry {\r\n-\t\t\t\tis.close();\r\n-\t\t\t} catch (IOException e) {\r\n-\t\t\t\t// Ignore\r\n-\t\t\t}\r\n-\t\t}\r\n-\t\tassertTrue(\"Test2: CertificateException not thrown\", caughtException);\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#generateCertificates(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_generateCertificatesLjava_io_InputStream() {\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tfor (int i = 0; i < CERTIFICATE_URLS.length; i++) {\r\n-\t\t\t\tURL certUrl = new URL(BASE_URL + CERTIFICATE_URLS[i]);\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\tInputStream is = certUrl.openStream();\r\n-\t\t\t\t\tCollection certs = fact.generateCertificates(is);\r\n-\t\t\t\t\tassertNotNull(\"The certificates in \\\"\"\r\n-\t\t\t\t\t\t\t+ certUrl.toExternalForm()\r\n-\t\t\t\t\t\t\t+ \"\\\" were not parsed correctly\", certs);\r\n-\t\t\t\t} catch (IOException e) {\r\n-\t\t\t\t\t// the certificate could not be found, skip it\r\n-\t\t\t\t} catch (CertificateException e) {\r\n-\t\t\t\t\tfail(\"An exception was thrown while parsing \\\"\"\r\n-\t\t\t\t\t\t\t+ certUrl.toExternalForm() + \"\\\": \"\r\n-\t\t\t\t\t\t\t+ e.getMessage());\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"Could not instantiate the CertificateFactory for X509: \"\r\n-\t\t\t\t\t+ e.getMessage());\r\n-\t\t} catch (MalformedURLException e) {\r\n-\t\t\tfail(\"Invalid certificate url: \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#generateCRL(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_generateCRLLjava_io_InputStream() {\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tfor (int i = 0; i < CRL_URLS.length; i++) {\r\n-\t\t\t\tURL certUrl = new URL(BASE_URL + CRL_URLS[i]);\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\tInputStream is = certUrl.openStream();\r\n-\t\t\t\t\tCRL crl = fact.generateCRL(is);\r\n-\t\t\t\t\tassertNotNull(\"The CRL in \\\"\" + certUrl.toExternalForm()\r\n-\t\t\t\t\t\t\t+ \"\\\" were not parsed correctly\", crl);\r\n-\t\t\t\t} catch (IOException e) {\r\n-\t\t\t\t\t// the certificate could not be found, skip it\r\n-\t\t\t\t} catch (CRLException e) {\r\n-\t\t\t\t\tfail(\"An exception was thrown while parsing \\\"\"\r\n-\t\t\t\t\t\t\t+ certUrl.toExternalForm() + \"\\\": \"\r\n-\t\t\t\t\t\t\t+ e.getMessage());\r\n-\t\t\t\t}\r\n-\t\t\t}// end for \r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"Could not instantiate the CertificateFactory for X509: \"\r\n-\t\t\t\t\t+ e.getMessage());\r\n-\t\t} catch (MalformedURLException e) {\r\n-\t\t\tfail(\"Invalid certificate url: \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#generateCRLs(java.io.InputStream)\r\n-\t */\r\n-\tpublic void test_generateCRLsLjava_io_InputStream() {\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tfor (int i = 0; i < CRLCOLLECTION_URLS.length; i++) {\r\n-\t\t\t\tURL certUrl = new URL(BASE_URL + CRLCOLLECTION_URLS[i]);\r\n-\t\t\t\ttry {\r\n-\t\t\t\t\tInputStream is = certUrl.openStream();\r\n-\t\t\t\t\tCollection crls = fact.generateCRLs(is);\r\n-\t\t\t\t\tassertTrue(\"The CRLs in \\\"\" + certUrl.toExternalForm()\r\n-\t\t\t\t\t\t\t+ \"\\\" were not parsed correctly\", crls != null\r\n-\t\t\t\t\t\t\t&& crls.size() > 0);\r\n-\t\t\t\t} catch (IOException e) {\r\n-\t\t\t\t\t// the certificate could not be found, skip it\r\n-\t\t\t\t} catch (CRLException e) {\r\n-\t\t\t\t\tfail(\"An exception was thrown while parsing \\\"\"\r\n-\t\t\t\t\t\t\t+ certUrl.toExternalForm() + \"\\\": \"\r\n-\t\t\t\t\t\t\t+ e.getMessage());\r\n-\t\t\t\t}\r\n-\t\t\t}\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"Could not instantiate the CertificateFactory for X509: \"\r\n-\t\t\t\t\t+ e.getMessage());\r\n-\t\t} catch (MalformedURLException e) {\r\n-\t\t\tfail(\"Invalid certificate url: \" + e.getMessage());\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#getInstance(java.lang.String)\r\n-\t */\r\n-\tpublic void test_getInstanceLjava_lang_String() {\r\n-\t\t// Test for method java.security.cert.CertificateFactory\r\n-\t\t// java.security.cert.CertificateFactory.getInstance(java.lang.String)\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n-\t\t\tassertTrue(\"factory is null\", fact != null);\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tassertTrue(\"CertificateException in getInstance\", false);\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#getInstance(java.lang.String,\r\n-\t *        java.lang.String)\r\n-\t */\r\n-\tpublic void test_getInstanceLjava_lang_StringLjava_lang_String() {\r\n-\t\t// Test for method java.security.cert.CertificateFactory\r\n-\t\t// java.security.cert.CertificateFactory.getInstance(java.lang.String,\r\n-\t\t// java.lang.String)\r\n-\t\ttry {\r\n-\t\t\tProvider[] providers = Security\r\n-\t\t\t\t\t.getProviders(\"CertificateFactory.X.509\");\r\n-\t\t\tif (providers != null) {\r\n-\t\t\t\tfor (int i = 0; i < providers.length; i++) {\r\n-\t\t\t\t\tCertificateFactory fact = CertificateFactory.getInstance(\r\n-\t\t\t\t\t\t\t\"X.509\", providers[i].getName());\r\n-\t\t\t\t\tassertNotNull(\"factory is null\", fact);\r\n-\t\t\t\t}// end for\r\n-\t\t\t} else {\r\n-\t\t\t\tfail(\"No providers support CertificateFactory.X.509\");\r\n-\t\t\t}\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"CertificateException in getInstance\");\r\n-\t\t} catch (NoSuchProviderException e) {\r\n-\t\t\tfail(\"getInstance did not find the provider\");\r\n-\t\t}\r\n-\r\n-\t\t// exception case\r\n-\t\ttry {\r\n-\t\t\tCertificateFactory.getInstance(\"X.509\", \"IHaventBeenConfigured\");\r\n-\t\t\tfail(\"Should have thrown NoSuchProviderException\");\r\n-\t\t} catch (NoSuchProviderException e) {\r\n-\t\t\t// Expected\r\n-\t\t} catch (Exception e) {\r\n-\t\t\tfail(\"Should have thrown NoSuchProviderException\");\r\n-\t\t}\r\n-\t}\r\n-\r\n-\t/**\r\n-\t * @tests java.security.cert.CertificateFactory#getProvider()\r\n-\t */\r\n-\tpublic void test_getProvider() {\r\n-\t\t// Test for method java.security.Provider\r\n-\t\t// java.security.cert.CertificateFactory.getProvider()\r\n-\t\ttry {\r\n-\t\t\tProvider p = CertificateFactory.getInstance(\"X.509\").getProvider();\r\n-\t\t\tassertNotNull(\"provider is null\", p);\r\n-\t\t} catch (CertificateException e) {\r\n-\t\t\tfail(\"CertificateException in getInstance\");\r\n-\t\t}\r\n-\t}\r\n-\r\n-\tstatic final String[] CERTIFICATES_ENCODED_X509 = new String[17];\r\n-\r\n-\t{\r\n-\t\tCERTIFICATES_ENCODED_X509[0] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICZTCCAdICBQL3AAC2MA0GCSqGSIb3DQEBAgUAMF8xCzAJBgNVBAYTAlVTMSAw\\n\"\r\n-\t\t\t\t+ \"HgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEuMCwGA1UECxMlU2VjdXJl\\n\"\r\n-\t\t\t\t+ \"IFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05NzAyMjAwMDAwMDBa\\n\"\r\n-\t\t\t\t+ \"Fw05ODAyMjAyMzU5NTlaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZv\\n\"\r\n-\t\t\t\t+ \"cm5pYTESMBAGA1UEBxMJUGFsbyBBbHRvMR8wHQYDVQQKExZTdW4gTWljcm9zeXN0\\n\"\r\n-\t\t\t\t+ \"ZW1zLCBJbmMuMSEwHwYDVQQLExhUZXN0IGFuZCBFdmFsdWF0aW9uIE9ubHkxGjAY\\n\"\r\n-\t\t\t\t+ \"BgNVBAMTEWFyZ29uLmVuZy5zdW4uY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\n\"\r\n-\t\t\t\t+ \"iQKBgQCofmdY+PiUWN01FOzEewf+GaG+lFf132UpzATmYJkA4AEA/juW7jSi+LJk\\n\"\r\n-\t\t\t\t+ \"wJKi5GO4RyZoyimAL/5yIWDV6l1KlvxyKslr0REhMBaD/3Z3EsLTTEf5gVrQS6sT\\n\"\r\n-\t\t\t\t+ \"WMoSZAyzB39kFfsB6oUXNtV8+UKKxSxKbxvhQn267PeCz5VX2QIDAQABMA0GCSqG\\n\"\r\n-\t\t\t\t+ \"SIb3DQEBAgUAA34AXl3at6luiV/7I9MN5CXYoPJYI8Bcdc1hBagJvTMcmlqL2uOZ\\n\"\r\n-\t\t\t\t+ \"H9T5hNMEL9Tk6aI7yZPXcw/xI2K6pOR/FrMp0UwJmdxX7ljV6ZtUZf7pY492UqwC\\n\"\r\n-\t\t\t\t+ \"1777XQ9UEZyrKJvF5ntleeO0ayBqLGVKCWzWZX9YsXCpv47FNLZbupE=\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[1] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICZzCCAdCgAwIBAgIBGzANBgkqhkiG9w0BAQUFADBhMQswCQYDVQQGEwJVUzEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n-\t\t\t\t+ \"A1BLSTEcMBoGA1UEAxMTRG9EIFBLSSBNZWQgUm9vdCBDQTAeFw05ODA4MDMyMjAy\\n\"\r\n-\t\t\t\t+ \"MjlaFw0wODA4MDQyMjAyMjlaMGExCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9VLlMu\\n\"\r\n-\t\t\t\t+ \"IEdvdmVybm1lbnQxDDAKBgNVBAsTA0RvRDEMMAoGA1UECxMDUEtJMRwwGgYDVQQD\\n\"\r\n-\t\t\t\t+ \"ExNEb0QgUEtJIE1lZCBSb290IENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\"\r\n-\t\t\t\t+ \"gQDbrM/J9FrJSX+zxFUbsI9Vw5QbguVBIa95rwW/0M8+sM0r5gd+DY6iubm6wnXk\\n\"\r\n-\t\t\t\t+ \"CSvbfQlFEDSKr4WYeeGp+d9WlDnQdtDFLdA45tCi5SHjnW+hGAmZnld0rz6wQekF\\n\"\r\n-\t\t\t\t+ \"5xQaa5A6wjhMlLOjbh27zyscrorMJ1O5FBOWnEHcRv6xqQIDAQABoy8wLTAdBgNV\\n\"\r\n-\t\t\t\t+ \"HQ4EFgQUVrmYR6m9701cHQ3r5kXyG7zsCN0wDAYDVR0TBAUwAwEB/zANBgkqhkiG\\n\"\r\n-\t\t\t\t+ \"9w0BAQUFAAOBgQDVX1Y0YqC7vekeZjVxtyuC8Mnxbrz6D109AX07LEIRzNYzwZ0w\\n\"\r\n-\t\t\t\t+ \"MTImSp9sEzWW+3FueBIU7AxGys2O7X0qmN3zgszPfSiocBuQuXIYQctJhKjF5KVc\\n\"\r\n-\t\t\t\t+ \"VGQRYYlt+myhl2vy6yPzEVCjiKwMEb1Spu0irCf+lFW2hsdjvmSQMtZvOw==\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[2] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIID6TCCA1KgAwIBAgIBGjANBgkqhkiG9w0BAQUFADBhMQswCQYDVQQGEwJVUzEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n-\t\t\t\t+ \"A1BLSTEcMBoGA1UEAxMTRG9EIFBLSSBNZWQgUm9vdCBDQTAeFw05ODA4MDIxNjQ1\\n\"\r\n-\t\t\t\t+ \"MzhaFw0wMzA4MDIxNjQ1MzhaMFYxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9VLlMu\\n\"\r\n-\t\t\t\t+ \"IEdvdmVybm1lbnQxDDAKBgNVBAsTA0RvRDEMMAoGA1UECxMDUEtJMREwDwYDVQQD\\n\"\r\n-\t\t\t\t+ \"EwhNZWQgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAyUcrw1k6QKdB\\n\"\r\n-\t\t\t\t+ \"WjgtGOk1AVaqJNI8acDGglhqQQ94QYfqZKuo1wwdnYehrgo5QcGkw9XcjBYegLFs\\n\"\r\n-\t\t\t\t+ \"v4NCCwZ2pgsfYJlvHcSGPhT/wROUYEpXKelfXiEeaGhFl8zGcqteI2+EBbOZnFpj\\n\"\r\n-\t\t\t\t+ \"Y4y+25dQcjYnrRGMAQ98qGwQtogDiDcCAwEAAaOCAbowggG2MBYGA1UdIAQPMA0w\\n\"\r\n-\t\t\t\t+ \"CwYJYIZIAWUCAQsDMB8GA1UdIwQYMBaAFFa5mEepve9NXB0N6+ZF8hu87AjdMAwG\\n\"\r\n-\t\t\t\t+ \"A1UdJAQFMAOAAQAwHQYDVR0OBBYEFDM6FOgJZ2GIZSQg7HlwQtemkx72MA4GA1Ud\\n\"\r\n-\t\t\t\t+ \"DwEB/wQEAwIBhjB+BgNVHRIEdzB1hnNsZGFwOi8vZHMtMS5jaGFtYi5kaXNhLm1p\\n\"\r\n-\t\t\t\t+ \"bC9jbiUzZERvRCUyMFBLSSUyME1lZCUyMFJvb3QlMjBDQSUyY291JTNkUEtJJTIg\\n\"\r\n-\t\t\t\t+ \"Y291JTNkRG9EJTJjbyUzZFUuUy4lMjBHb3Zlcm5tZW50JTJjYyUzZFVTMA8GA1Ud\\n\"\r\n-\t\t\t\t+ \"EwEB/wQFMAMBAf8wgawGA1UdHwSBpDCBoTCBnqCBm6CBmIaBlWxkYXA6Ly9kcy0x\\n\"\r\n-\t\t\t\t+ \"LmNoYW1iLmRpc2EubWlsL2NuJTNkRG9EJTIwUEtJJTIwTWVkJTIwUm9vdCUyMENB\\n\"\r\n-\t\t\t\t+ \"JTJjb3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVudCUy\\n\"\r\n-\t\t\t\t+ \"Y2MlM2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0GCSqG\\n\"\r\n-\t\t\t\t+ \"SIb3DQEBBQUAA4GBAFo5/Tu0dsy8tyhJVvxaKFNMfP3LLaspl+Or8oCpncKdpKyj\\n\"\r\n-\t\t\t\t+ \"7ZO6uJ0n7oqvEaUThm8jgXSNgyttlYPwoNBxEsTq/lBDV3+y/c61psw3qM2boB1H\\n\"\r\n-\t\t\t\t+ \"Oi3xXnRY+etG33TN9yydzrZ52XM0hnJZd4xIfoAgqs4T2rgqg8hx0ydU7o4o\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[3] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIDVjCCAr+gAwIBAgIBRTANBgkqhkiG9w0BAQUFADBWMQswCQYDVQQGEwJVUzEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n-\t\t\t\t+ \"A1BLSTERMA8GA1UEAxMITWVkIENBLTEwHhcNOTgwODAyMTcxMzI5WhcNMDEwODAy\\n\"\r\n-\t\t\t\t+ \"MTcxMzI5WjBwMQswCQYDVQQGEwJVUzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50\\n\"\r\n-\t\t\t\t+ \"MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsTA1BLSTENMAsGA1UECxMEVVNBRjEcMBoG\\n\"\r\n-\t\t\t\t+ \"A1UEAxMTZHMtMS5jaXN0dy5zYWljLmNvbTCBnTANBgkqhkiG9w0BAQEFAAOBiwAw\\n\"\r\n-\t\t\t\t+ \"gYcCgYEA19oJsspSHnWDi1/NTthbLrnicDogg3c63ZHPedU1YD90L1ogkYzxSA2t\\n\"\r\n-\t\t\t\t+ \"MgsVZpNejBglE972mXKPqEGDojnDgltRgRLtLqisIs0DSFQrJrhA8egMH/pHAo9H\\n\"\r\n-\t\t\t\t+ \"fH0n9rQUYBI3dsLxQkGVUSbB4P83VHi0sQO0dWsq5mEZd9G+MfsCAQOjggEaMIIB\\n\"\r\n-\t\t\t\t+ \"FjAWBgNVHSAEDzANMAsGCWCGSAFlAgELAzAfBgNVHSMEGDAWgBQzOhToCWdhiGUk\\n\"\r\n-\t\t\t\t+ \"IOx5cELXppMe9jAdBgNVHQ4EFgQUcQaYO8EEjje+VI3vfBIlDC6HNj0wDgYDVR0P\\n\"\r\n-\t\t\t\t+ \"AQH/BAQDAgUgMAwGA1UdEwEB/wQCMAAwgZ0GA1UdHwSBlTCBkjCBj6CBjKCBiYaB\\n\"\r\n-\t\t\t\t+ \"hmxkYXA6Ly9kcy0xLmNoYW1iLmRpc2EubWlsL2NuJTNkTWVkJTIwQ0ElMmQxJTJj\\n\"\r\n-\t\t\t\t+ \"b3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVudCUyY2Ml\\n\"\r\n-\t\t\t\t+ \"M2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0GCSqGSIb3\\n\"\r\n-\t\t\t\t+ \"DQEBBQUAA4GBAEg7AC9bad2KZzyX4cqLU/mv2cbVg6tES2PIeST7nk8CQcv9a8IO\\n\"\r\n-\t\t\t\t+ \"3K4uhrKoTsQfqs9p6+6s0VbgH3PKvOAIF4DAp5Yq1zz3fB+hsaFleHqtDNuldm1+\\n\"\r\n-\t\t\t\t+ \"3XA2Oqa5aRFkb6Krut0EEOV4c/GEAPOrRGUTzYmOp4SEc8TEaD/75A7R\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[4] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIDXDCCAsWgAwIBAgIBSjANBgkqhkiG9w0BAQUFADBWMQswCQYDVQQGEwJVUzEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n-\t\t\t\t+ \"A1BLSTERMA8GA1UEAxMITWVkIENBLTEwHhcNOTgwODAyMTgwMjQwWhcNMDEwODAy\\n\"\r\n-\t\t\t\t+ \"MTgwMjQwWjB0MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50\\n\"\r\n-\t\t\t\t+ \"MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsTA1BLSTENMAsGA1UECxMEVVNBRjEgMB4G\\n\"\r\n-\t\t\t\t+ \"A1UEAxMXR3VtYnkuSm9zZXBoLjAwMDAwMDUwNDQwgZ8wDQYJKoZIhvcNAQEBBQAD\\n\"\r\n-\t\t\t\t+ \"gY0AMIGJAoGBALT/R7bPqs1c1YqXAg5HNpZLgW2HuAc7RCaP06cE4R44GBLw/fQc\\n\"\r\n-\t\t\t\t+ \"VRNLn5pgbTXsDnjiZVd8qEgYqjKFQka4/tNhaF7No2tBZB+oYL/eP0IWtP+h/W6D\\n\"\r\n-\t\t\t\t+ \"KR5+UvIIdgmx7k3t9jp2Q51JpHhhKEb9WN54trCO9Yu7PYU+LI85jEIBAgMBAAGj\\n\"\r\n-\t\t\t\t+ \"ggEaMIIBFjAWBgNVHSAEDzANMAsGCWCGSAFlAgELAzAfBgNVHSMEGDAWgBQzOhTo\\n\"\r\n-\t\t\t\t+ \"CWdhiGUkIOx5cELXppMe9jAdBgNVHQ4EFgQUkLBJl+ayKgzOp/wwBX9M1lSkCg4w\\n\"\r\n-\t\t\t\t+ \"DgYDVR0PAQH/BAQDAgbAMAwGA1UdEwEB/wQCMAAwgZ0GA1UdHwSBlTCBkjCBj6CB\\n\"\r\n-\t\t\t\t+ \"jKCBiYaBhmxkYXA6Ly9kcy0xLmNoYW1iLmRpc2EubWlsL2NuJTNkTWVkJTIwQ0El\\n\"\r\n-\t\t\t\t+ \"MmQxJTJjb3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVu\\n\"\r\n-\t\t\t\t+ \"dCUyY2MlM2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0G\\n\"\r\n-\t\t\t\t+ \"CSqGSIb3DQEBBQUAA4GBAFjapuDHMvIdUeYRyEYdShBR1JZC20tJ3MQnyBQveddz\\n\"\r\n-\t\t\t\t+ \"LGFDGpIkRAQU7T/5/ne8lMexyxViC21xOlK9LdbJCbVyywvb9uEm/1je9wieQQtr\\n\"\r\n-\t\t\t\t+ \"kjykuB+WB6qTCIslAO/eUmgzfzIENvnH8O+fH7QTr2PdkFkiPIqBJYHvw7F3XDqy\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[5] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIDlDCCAv2gAwIBAgIBGTANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJVUzEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n-\t\t\t\t+ \"A1BLSTEXMBUGA1UEAxMOTWVkIEVtYWlsIENBLTEwHhcNOTgwODAyMTgwNjM0WhcN\\n\"\r\n-\t\t\t\t+ \"MDAwODAyMTgwNjM0WjCBmTELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292\\n\"\r\n-\t\t\t\t+ \"ZXJubWVudDEMMAoGA1UECxMDRG9EMQwwCgYDVQQLEwNQS0kxDTALBgNVBAsTBFVT\\n\"\r\n-\t\t\t\t+ \"QUYxIDAeBgNVBAMTF0d1bWJ5Lkpvc2VwaC4wMDAwMDA1MDQ0MSMwIQYJKoZIhvcN\\n\"\r\n-\t\t\t\t+ \"AQkBFhRndW1ieUBjaXN0dy5zYWljLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw\\n\"\r\n-\t\t\t\t+ \"gYkCgYEAvU4LMoOnF9bmhHvxZz8wCc9eRJ0j4RB0SmVYoq9iPrSJBwROeuxuU8VS\\n\"\r\n-\t\t\t\t+ \"JBL/u+RB5t6UJVNjXFmB1wS0foxpOHFQBFWyvWmuOiRUNaRxTVCrO4eG+nmM/U89\\n\"\r\n-\t\t\t\t+ \"DKAc9FV4bZ8dPE9PlK9oq0J8Y2DIKz1+gIeM1sTPMnDtFgfGyH8CAwEAAaOCASYw\\n\"\r\n-\t\t\t\t+ \"ggEiMBYGA1UdIAQPMA0wCwYJYIZIAWUCAQsDMB8GA1UdIwQYMBaAFJcrSHN/a+aN\\n\"\r\n-\t\t\t\t+ \"L5DK1NpJUIvX+bVnMB0GA1UdDgQWBBR50N97AxK0G6U17EP1iu38LiLTBzAOBgNV\\n\"\r\n-\t\t\t\t+ \"HQ8BAf8EBAMCBaAwDAYDVR0TAQH/BAIwADCBqQYDVR0fBIGhMIGeMIGboIGYoIGV\\n\"\r\n-\t\t\t\t+ \"hoGSbGRhcDovL2RzLTEuY2hhbWIuZGlzYS5taWw6MzkwL2NuJTNkTWVkJTIwRW1h\\n\"\r\n-\t\t\t\t+ \"aWwlMjBDQSUyZDElMmNvdSUzZFBLSSUyY291JTNkRG9EJTJjbyUzZFUuUy4lMjBH\\n\"\r\n-\t\t\t\t+ \"b3Zlcm5tZW50JTJjYyUzZFVTP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3QlM2Ji\\n\"\r\n-\t\t\t\t+ \"aW5hcnkwDQYJKoZIhvcNAQEFBQADgYEAA9z8h7K4v0CuOyvmALNl8TQt0inf0w52\\n\"\r\n-\t\t\t\t+ \"JJUvw/3FLA622IHe/vC9VHyIF0ibSEljWeOBuRjoMELAZGXCwRu43o2LDRqHr4Pc\\n\"\r\n-\t\t\t\t+ \"WlG0uUtgHTPxbZpaUwueIZCBZg57f7Zhlub7Ag+AjeOybFj3FYqDB7TYqWJgAs/7\\n\"\r\n-\t\t\t\t+ \"g5WfNEVAEwc=\\n\" + \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[6] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIEEjCCA7ygAwIBAgIIEt4r4gAAAlIwDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n-\t\t\t\t+ \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n-\t\t\t\t+ \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n-\t\t\t\t+ \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n-\t\t\t\t+ \"OTcxMTI1MTkwNDIyWhcNOTgxMDE0MTgxMTI4WjBuMQswCQYDVQQGEwJVUzELMAkG\\n\"\r\n-\t\t\t\t+ \"A1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD\\n\"\r\n-\t\t\t\t+ \"b3Jwb3JhdGlvbjENMAsGA1UECxMERFNZUzERMA8GA1UEAxMIQ2VydFRlc3QwWzAN\\n\"\r\n-\t\t\t\t+ \"BgkqhkiG9w0BAQEFAANKADBHAkB6hKgbYme8gtCf1Vy74KVNLf2o/R1kQVDSZiNm\\n\"\r\n-\t\t\t\t+ \"lBSEsHAJSLXuuVdYsKo/hzarr9gGmI/gUzmargY1xJGQYbazAgMBAAGjggIXMIIC\\n\"\r\n-\t\t\t\t+ \"EzCBzwYDVR0jBIHHMIHEgBS3hTIRuBZaOibht1DZjnTUg/IiRaGBmaSBljCBkzEL\\n\"\r\n-\t\t\t\t+ \"MAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25kMRMwEQYD\\n\"\r\n-\t\t\t\t+ \"VQQKEwpXaW5kb3dzIE5UMRswGQYDVQQLExJEaXN0cmlidXRlZCBTeXN0ZW0xMzAx\\n\"\r\n-\t\t\t\t+ \"BgNVBAMTKk1pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBD\\n\"\r\n-\t\t\t\t+ \"QYIQERNhAKoA/oUR0US54igUYzCBvQYDVR0fBIG1MIGyMFagVKBShlBodHRwOi8v\\n\"\r\n-\t\t\t\t+ \"Q0VSVFNSVi9DZXJ0U3J2L0NlcnRFbnJvbGwvTWljcm9zb2Z0IENlcnRpZmljYXRl\\n\"\r\n-\t\t\t\t+ \"IFNlcnZlciBUZXN0IEdyb3VwIENBLmNybDBYoFagVIZSZmlsZTovL1xcQ0VSVFNS\\n\"\r\n-\t\t\t\t+ \"VlxDZXJ0U3J2XENlcnRFbnJvbGxcTWljcm9zb2Z0IENlcnRpZmljYXRlIFNlcnZl\\n\"\r\n-\t\t\t\t+ \"ciBUZXN0IEdyb3VwIENBLmNybDAJBgNVHRMEAjAAMHQGCCsGAQUFBwEBBGgwZjBk\\n\"\r\n-\t\t\t\t+ \"BggrBgEFBQcwAoZYaHR0cDovL0NFUlRTUlYvQ2VydFNydi9DZXJ0RW5yb2xsL0NF\\n\"\r\n-\t\t\t\t+ \"UlRTUlZfTWljcm9zb2Z0IENlcnRpZmljYXRlIFNlcnZlciBUZXN0IEdyb3VwIENB\\n\"\r\n-\t\t\t\t+ \"LmNydDANBgkqhkiG9w0BAQQFAANBAFbEj4j/3Nv6WcAvq24C7yw8L0FcyE4dtLLX\\n\"\r\n-\t\t\t\t+ \"U+04P0POe/doyTT6UngXNXp9RXpqDSiIHBRTshpvR+N2vweR5qA=\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[7] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIEYTCCBAugAwIBAgIIFViWmwAAAlowDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n-\t\t\t\t+ \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n-\t\t\t\t+ \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n-\t\t\t\t+ \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n-\t\t\t\t+ \"OTcxMTI2MDYzNzE4WhcNOTgxMDE0MTgxMTI4WjCBmjEjMCEGCSqGSIb3DQEJARYU\\n\"\r\n-\t\t\t\t+ \"YWxsYW5jQG1pY3Jvc29mdC5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQ\\n\"\r\n-\t\t\t\t+ \"MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u\\n\"\r\n-\t\t\t\t+ \"MQ0wCwYDVQQLEwREU1lTMRgwFgYDVQQDEw9BbGxhbiBKLiBDb29wZXIwWzANBgkq\\n\"\r\n-\t\t\t\t+ \"hkiG9w0BAQEFAANKADBHAkB1951uZLyJXjSZTc8Z1QnuXvKBAqm2WT4OFaFySF/F\\n\"\r\n-\t\t\t\t+ \"WnMbIlAE0pvszDkKZ+N7hBzcc5pVIjezPfZ8cPh//jVPAgMBAAGjggI5MIICNTAL\\n\"\r\n-\t\t\t\t+ \"BgNVHQ8EBAMCADgwEwYDVR0lBAwwCgYIKwYBBQUHAwQwgc8GA1UdIwSBxzCBxIAU\\n\"\r\n-\t\t\t\t+ \"t4UyEbgWWjom4bdQ2Y501IPyIkWhgZmkgZYwgZMxCzAJBgNVBAYTAlVTMQswCQYD\\n\"\r\n-\t\t\t\t+ \"VQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMKV2luZG93cyBOVDEb\\n\"\r\n-\t\t\t\t+ \"MBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQDEypNaWNyb3NvZnQg\\n\"\r\n-\t\t\t\t+ \"Q2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0GCEBETYQCqAP6FEdFEueIo\\n\"\r\n-\t\t\t\t+ \"FGMwgb0GA1UdHwSBtTCBsjBWoFSgUoZQaHR0cDovL0NFUlRTUlYvQ2VydFNydi9D\\n\"\r\n-\t\t\t\t+ \"ZXJ0RW5yb2xsL01pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91\\n\"\r\n-\t\t\t\t+ \"cCBDQS5jcmwwWKBWoFSGUmZpbGU6Ly9cXENFUlRTUlZcQ2VydFNydlxDZXJ0RW5y\\n\"\r\n-\t\t\t\t+ \"b2xsXE1pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBDQS5j\\n\"\r\n-\t\t\t\t+ \"cmwwCQYDVR0TBAIwADB0BggrBgEFBQcBAQRoMGYwZAYIKwYBBQUHMAKGWGh0dHA6\\n\"\r\n-\t\t\t\t+ \"Ly9DRVJUU1JWL0NlcnRTcnYvQ2VydEVucm9sbC9DRVJUU1JWX01pY3Jvc29mdCBD\\n\"\r\n-\t\t\t\t+ \"ZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBDQS5jcnQwDQYJKoZIhvcNAQEE\\n\"\r\n-\t\t\t\t+ \"BQADQQA1TYsk07tW0dhU6bHPK7NXHUFFiZ2fAtC0epLY9G6yuYb1lozPv5sDnCl1\\n\"\r\n-\t\t\t\t+ \"A2fZPgawvAqCvK9xkv5L4j2F+v4U\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[8] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIEYjCCBAygAwIBAgIIFVsHaQAAAlwwDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n-\t\t\t\t+ \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n-\t\t\t\t+ \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n-\t\t\t\t+ \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n-\t\t\t\t+ \"OTcxMTI2MDYzOTU4WhcNOTgxMDE0MTgxMTI4WjCBmjEjMCEGCSqGSIb3DQEJARYU\\n\"\r\n-\t\t\t\t+ \"YWxsYW5jQG1pY3Jvc29mdC5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQ\\n\"\r\n-\t\t\t\t+ \"MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u\\n\"\r\n-\t\t\t\t+ \"MQ0wCwYDVQQLEwREU1lTMRgwFgYDVQQDEw9BbGxhbiBKLiBDb29wZXIwXDANBgkq\\n\"\r\n-\t\t\t\t+ \"hkiG9w0BAQEFAANLADBIAkEA0T1td8kfsJgwm8Qj+jtrq29tqc/DIkIbAPcyygKG\\n\"\r\n-\t\t\t\t+ \"1XEUvzQEQumVQx5lCD2LOOJs0eOuv4h6ngvLW+goDaidNQIDAQABo4ICOTCCAjUw\\n\"\r\n-\t\t\t\t+ \"CwYDVR0PBAQDAgDAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMIHPBgNVHSMEgccwgcSA\\n\"\r\n-\t\t\t\t+ \"FLeFMhG4Flo6JuG3UNmOdNSD8iJFoYGZpIGWMIGTMQswCQYDVQQGEwJVUzELMAkG\\n\"\r\n-\t\t\t\t+ \"A1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEzARBgNVBAoTCldpbmRvd3MgTlQx\\n\"\r\n-\t\t\t\t+ \"GzAZBgNVBAsTEkRpc3RyaWJ1dGVkIFN5c3RlbTEzMDEGA1UEAxMqTWljcm9zb2Z0\\n\"\r\n-\t\t\t\t+ \"IENlcnRpZmljYXRlIFNlcnZlciBUZXN0IEdyb3VwIENBghARE2EAqgD+hRHRRLni\\n\"\r\n-\t\t\t\t+ \"KBRjMIG9BgNVHR8EgbUwgbIwVqBUoFKGUGh0dHA6Ly9DRVJUU1JWL0NlcnRTcnYv\\n\"\r\n-\t\t\t\t+ \"Q2VydEVucm9sbC9NaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3Jv\\n\"\r\n-\t\t\t\t+ \"dXAgQ0EuY3JsMFigVqBUhlJmaWxlOi8vXFxDRVJUU1JWXENlcnRTcnZcQ2VydEVu\\n\"\r\n-\t\t\t\t+ \"cm9sbFxNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0Eu\\n\"\r\n-\t\t\t\t+ \"Y3JsMAkGA1UdEwQCMAAwdAYIKwYBBQUHAQEEaDBmMGQGCCsGAQUFBzAChlhodHRw\\n\"\r\n-\t\t\t\t+ \"Oi8vQ0VSVFNSVi9DZXJ0U3J2L0NlcnRFbnJvbGwvQ0VSVFNSVl9NaWNyb3NvZnQg\\n\"\r\n-\t\t\t\t+ \"Q2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EuY3J0MA0GCSqGSIb3DQEB\\n\"\r\n-\t\t\t\t+ \"BAUAA0EAUPXt2pOY3YwRUHzD7Dtgyx5G7KxKtLan1wFBFjhv406v2Utb+2+wTQlS\\n\"\r\n-\t\t\t\t+ \"ulWemcm8eOdG64nspv0oqSJnA8f4xg==\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[9] = null;\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[10] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICiTCCAfICAQAwDQYJKoZIhvcNAQEEBQAwgYwxCzAJBgNVBAYTAlVTMRUwEwYD\\n\"\r\n-\t\t\t\t+ \"VQQIEwxOb3J0aCBEYWtvdGExFDASBgNVBAcTC0dyYW5kIEZvcmtzMRYwFAYDVQQK\\n\"\r\n-\t\t\t\t+ \"Ew1VTkQgQWVyb3NwYWNlMRgwFgYDVQQDFA9yb290QGNzLnVuZC5lZHUxHjAcBgkq\\n\"\r\n-\t\t\t\t+ \"hkiG9w0BCQEWD3Jvb3RAY3MudW5kLmVkdTAeFw05OTAzMDIyMDU4NDRaFw0wOTAy\\n\"\r\n-\t\t\t\t+ \"MjcyMDU4NDRaMIGMMQswCQYDVQQGEwJVUzEVMBMGA1UECBMMTm9ydGggRGFrb3Rh\\n\"\r\n-\t\t\t\t+ \"MRQwEgYDVQQHEwtHcmFuZCBGb3JrczEWMBQGA1UEChMNVU5EIEFlcm9zcGFjZTEY\\n\"\r\n-\t\t\t\t+ \"MBYGA1UEAxQPcm9vdEBjcy51bmQuZWR1MR4wHAYJKoZIhvcNAQkBFg9yb290QGNz\\n\"\r\n-\t\t\t\t+ \"LnVuZC5lZHUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALmlQJg5Nl2VsQZ1\\n\"\r\n-\t\t\t\t+ \"/B8fW4YDdk09SlVc7vyWcbcmbWRBJee0jcH448XdRP/m/MXIRsVKyhLA5f01+VPy\\n\"\r\n-\t\t\t\t+ \"E2aDkx2WiU4DpqbMbGGAytuXBNudJQmBXjWEFiAGe7dYgDNGKK7Yo1k49Q6qGg9q\\n\"\r\n-\t\t\t\t+ \"5did3+ppsyfzbeaiDCH0LO5gegNvAgMBAAEwDQYJKoZIhvcNAQEEBQADgYEAJnok\\n\"\r\n-\t\t\t\t+ \"1gvj4KC9HeUX/R4Q/f5tbJ2jLeQATIHtUx9QSKSq7IsdY0zz9EnKOsc9pr8JfBTL\\n\"\r\n-\t\t\t\t+ \"cAwrxqvl5QuoCFVR2tQq8DtBQY8vp7bEF2CZVoxZJXMIKKiD/Hjb0oypbq5wF0SY\\n\"\r\n-\t\t\t\t+ \"xN5DUfG5sShi+vPIAwE62tZ1P1I1N8DQpDYiXkw=\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[11] = null;\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[12] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICWDCCAgICAQAwDQYJKoZIhvcNAQEEBQAwgbYxCzAJBgNVBAYTAlpBMRUwEwYD\\n\"\r\n-\t\t\t\t+ \"VQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEdMBsGA1UEChMU\\n\"\r\n-\t\t\t\t+ \"VGhhd3RlIENvbnN1bHRpbmcgY2MxHzAdBgNVBAsTFkNlcnRpZmljYXRpb24gU2Vy\\n\"\r\n-\t\t\t\t+ \"dmljZXMxFzAVBgNVBAMTDnd3dy50aGF3dGUuY29tMSMwIQYJKoZIhvcNAQkBFhR3\\n\"\r\n-\t\t\t\t+ \"ZWJtYXN0ZXJAdGhhd3RlLmNvbTAeFw05NjExMTQxNzE1MjVaFw05NjEyMTQxNzE1\\n\"\r\n-\t\t\t\t+ \"MjVaMIG2MQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYD\\n\"\r\n-\t\t\t\t+ \"VQQHEwlDYXBlIFRvd24xHTAbBgNVBAoTFFRoYXd0ZSBDb25zdWx0aW5nIGNjMR8w\\n\"\r\n-\t\t\t\t+ \"HQYDVQQLExZDZXJ0aWZpY2F0aW9uIFNlcnZpY2VzMRcwFQYDVQQDEw53d3cudGhh\\n\"\r\n-\t\t\t\t+ \"d3RlLmNvbTEjMCEGCSqGSIb3DQEJARYUd2VibWFzdGVyQHRoYXd0ZS5jb20wXDAN\\n\"\r\n-\t\t\t\t+ \"BgkqhkiG9w0BAQEFAANLADBIAkEAmpIl7aR3aSPUUwUrHzpVMrsm3gpI2PzIwMh3\\n\"\r\n-\t\t\t\t+ \"9l1h/RszI0/0qC2WRMlfwm5FapohoyjTJ6ZyGUUenICllKyKZwIDAQABMA0GCSqG\\n\"\r\n-\t\t\t\t+ \"SIb3DQEBBAUAA0EAfI57WLkOKEyQqyCDYZ6reCukVDmAe7nZSbOyKv6KUvTCiQ5c\\n\"\r\n-\t\t\t\t+ \"e5L4y3c/ViKdlou5BcQYAbxA7rwO/vz4m51w4w==\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[13] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIDGjCCAtgCBDaRW4swCwYHKoZIzjgEAwUAMHMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdGbG9y\\n\"\r\n-\t\t\t\t+ \"aWRhMRQwEgYDVQQHEwtHYWluZXN2aWxsZTEQMA4GA1UEChMHVW5rbm93bjEQMA4GA1UECxMHVW5r\\n\"\r\n-\t\t\t\t+ \"bm93bjEYMBYGA1UEAxMPUm9iZXJ0IEx5YmFyZ2VyMB4XDTk5MDEwNTAwMjMzOVoXDTk5MDQwNTAw\\n\"\r\n-\t\t\t\t+ \"MjMzOVowczELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0Zsb3JpZGExFDASBgNVBAcTC0dhaW5lc3Zp\\n\"\r\n-\t\t\t\t+ \"bGxlMRAwDgYDVQQKEwdVbmtub3duMRAwDgYDVQQLEwdVbmtub3duMRgwFgYDVQQDEw9Sb2JlcnQg\\n\"\r\n-\t\t\t\t+ \"THliYXJnZXIwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I870QA\\n\"\r\n-\t\t\t\t+ \"wx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJPu6nX\\n\"\r\n-\t\t\t\t+ \"/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccCFQCXYFCPFSML\\n\"\r\n-\t\t\t\t+ \"zLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o66oL5V0wLPQeCZ1FZV4661FlP\\n\"\r\n-\t\t\t\t+ \"5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8jSjgo64eK7OmdZFuo38L+iE1YvH7YnoBJDvM\\n\"\r\n-\t\t\t\t+ \"pPG+qFGQiaiD3+Fa5Z8GkotmXoB7VSVkAUw7/s9JKgOBhAACgYBMhs/XcF0LAjbuhoAY4EOmxd4U\\n\"\r\n-\t\t\t\t+ \"U0w4nSJQ2vKcgpyHU1Sv/tbUr3xEm6Yyx49j1eNp9jVwM1a6NYX8BO8fCSHIiUVvJVFlCcoO7Qb8\\n\"\r\n-\t\t\t\t+ \"Px7drfbFAFt8mFE1mjYCuj21ePHhs1DlZKJwu2ElC6GaRwtBk3+oCMDAnLuySd0+fAohdDALBgcq\\n\"\r\n-\t\t\t\t+ \"hkjOOAQDBQADLwAwLAIUddbqC3woMcABg/r1GPW9eVNStGwCFCBGySvdXK0i4aLVC4Ptbc3PQFjp\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[14] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICyzCCAjQCAQAwDQYJKoZIhvcNAQEEBQAwga0xCzAJBgNVBAYTAlVTMREwDwYD\\n\"\r\n-\t\t\t\t+ \"VQQIEwhOZXcgWW9yazEWMBQGA1UEBxMNTmV3IFlvcmsgQ2l0eTEcMBoGA1UEChMT\\n\"\r\n-\t\t\t\t+ \"Q29sdW1iaWEgVW5pdmVyc2l0eTENMAsGA1UECxMEQWNJUzEfMB0GA1UEAxMWQ29s\\n\"\r\n-\t\t\t\t+ \"dW1iaWEgVW5pdmVyc2l0eSBDQTElMCMGCSqGSIb3DQEJARYWY2VydC1hdXRoQGNv\\n\"\r\n-\t\t\t\t+ \"bHVtYmlhLmVkdTAeFw05NzA0MjgxNDQxMDNaFw0wMDA0MjgxNDQxMDNaMIGtMQsw\\n\"\r\n-\t\t\t\t+ \"CQYDVQQGEwJVUzERMA8GA1UECBMITmV3IFlvcmsxFjAUBgNVBAcTDU5ldyBZb3Jr\\n\"\r\n-\t\t\t\t+ \"IENpdHkxHDAaBgNVBAoTE0NvbHVtYmlhIFVuaXZlcnNpdHkxDTALBgNVBAsTBEFj\\n\"\r\n-\t\t\t\t+ \"SVMxHzAdBgNVBAMTFkNvbHVtYmlhIFVuaXZlcnNpdHkgQ0ExJTAjBgkqhkiG9w0B\\n\"\r\n-\t\t\t\t+ \"CQEWFmNlcnQtYXV0aEBjb2x1bWJpYS5lZHUwgZ8wDQYJKoZIhvcNAQEBBQADgY0A\\n\"\r\n-\t\t\t\t+ \"MIGJAoGBANiod6flzM72CbsK/3gzHzcdjpoozRDD/wgq31jEeDdfKY+ljAwxaZS9\\n\"\r\n-\t\t\t\t+ \"mt7S1g7lL+55fx7FjfJxvJRXvS9UbDU46PDDyJloWYobg84bK5ZcV5UnIPZmGHW/\\n\"\r\n-\t\t\t\t+ \"/xVDUtIGhc4T+Xm5p4F+4AcgewF2s4TbKWxfC98FJfepc31KjkGbAgMBAAEwDQYJ\\n\"\r\n-\t\t\t\t+ \"KoZIhvcNAQEEBQADgYEAI/e6xC+osVM4eMkSUUWgihuocQlRL9ixTlGqW9fvNlI1\\n\"\r\n-\t\t\t\t+ \"q58fELU5bcFko7d02S9Egac/9ckkt/sbHMv9zQhfnvpol8BN+LivGu+09IiOW4yq\\n\"\r\n-\t\t\t\t+ \"c9xT58Pv9gwZ/Ei5VS+FXvzHIr91yWIlwLsnKfgYDrmQowG5FkHSG1ZotUdl7Oo=\\n\"\r\n-\t\t\t\t+ \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[15] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIICnjCCAgcCAQMwDQYJKoZIhvcNAQEEBQAwgaAxCzAJBgNVBAYTAklUMR4wHAYD\\n\"\r\n-\t\t\t\t+ \"VQQKExVQb2xpdGVjbmljbyBkaSBUb3Jpbm8xIzAhBgNVBAsTGklDRS1URUwgSXRh\\n\"\r\n-\t\t\t\t+ \"bGlhbiBDQSBmb3IgV1dXMSAwHgYDVQQDExdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\\n\"\r\n-\t\t\t\t+ \"eTEqMCgGCSqGSIb3DQEJARYbd3d3LWNhLWl0QGljZS10ZWwucG9saXRvLml0MB4X\\n\"\r\n-\t\t\t\t+ \"DTk2MTAwMjExNDQ0NFoXDTk3MTIwMTExNDQ0NFowgY0xCzAJBgNVBAYTAklUMQ8w\\n\"\r\n-\t\t\t\t+ \"DQYDVQQHEwZUb3Jpbm8xHjAcBgNVBAoTFVBvbGl0ZWNuaWNvIGRpIFRvcmlubzEO\\n\"\r\n-\t\t\t\t+ \"MAwGA1UECxMFQ2VTSVQxGTAXBgNVBAMTEHVsaXNzZS5wb2xpdG8uaXQxIjAgBgkq\\n\"\r\n-\t\t\t\t+ \"hkiG9w0BCQEWE3dlYm1hc3RlckBwb2xpdG8uaXQwgZ8wDQYJKoZIhvcNAQEBBQAD\\n\"\r\n-\t\t\t\t+ \"gY0AMIGJAoGBAMUq/FdrxbSfGtGZq/FTTgC1JqxO4iiHiyxtgRT1oEvJIUjajVRN\\n\"\r\n-\t\t\t\t+ \"dtBVUhW6JmhHje/qnMop09XcF7b89a9ahtG9jM70S03biXVmg66pWOpy6P7znAQj\\n\"\r\n-\t\t\t\t+ \"VFPoCRR7BqUiGq0419a101Acaqkxi/4DdqiTPee4H7mcDZYu+fDPNQaHAgMBAAEw\\n\"\r\n-\t\t\t\t+ \"DQYJKoZIhvcNAQEEBQADgYEAt15bzk0XO+ZM+Q6275VTQIon6KQQHnv9NflIFOoW\\n\"\r\n-\t\t\t\t+ \"fgGRmoyiJFrjU1sIS8ctF03DH2xR20CuKd98fBpKnoOLd7eTKAGzGFPml36TPVj+\\n\"\r\n-\t\t\t\t+ \"YYWdrWqnIzQn6F0OKR/U3Y+ot5fUNuqN36Q1wsVvpPJlOMx8D8OQy8ainHgG3YYA\\n\"\r\n-\t\t\t\t+ \"TJk=\\n\" + \"-----END CERTIFICATE-----\\n\";\r\n-\r\n-\t\tCERTIFICATES_ENCODED_X509[16] =\r\n-\t\t\"-----BEGIN CERTIFICATE-----\\n\"\r\n-\t\t\t\t+ \"MIIC1TCCAj6gAwIBAgIBBDANBgkqhkiG9w0BAQQFADBZMQswCQYDVQQGEwJVUzEf\\n\"\r\n-\t\t\t\t+ \"MB0GA1UEChMWVW5pdmVyc2l0eSBvZiBDb2xvcmFkbzEWMBQGA1UECxMNU3lzdGVt\\n\"\r\n-\t\t\t\t+ \"IE9mZmljZTERMA8GA1UEAxMIVU1TIENBLTEwHhcNOTgwNTExMjEwMjU0WhcNMDgw\\n\"\r\n-\t\t\t\t+ \"NTEwMjEwMjU0WjBZMQswCQYDVQQGEwJVUzEfMB0GA1UEChMWVW5pdmVyc2l0eSBv\\n\"\r\n-\t\t\t\t+ \"ZiBDb2xvcmFkbzEWMBQGA1UECxMNU3lzdGVtIE9mZmljZTERMA8GA1UEAxMIVU1T\\n\"\r\n-\t\t\t\t+ \"IENBLTEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALGf8Ny+kHlXqLTi3uIf\\n\"\r\n-\t\t\t\t+ \"mkxxwDJd14sOg+hv85pxsqzCRJEgOx5YDUt05hJ7N0s4rJ/gNUcJaKR6ul+qLGbW\\n\"\r\n-\t\t\t\t+ \"+Zb4S1YFbnKaO16zggvgckwpLGYRBbmee9+E47W8VEOZWrJXUkpJ/ZV8GAnesrvn\\n\"\r\n-\t\t\t\t+ \"XTEKfm7bX9s6R7FQfDoHNnQfAgMBAAGjgawwgakwEQYJYIZIAYb4QgEBBAQDAgD2\\n\"\r\n-\t\t\t\t+ \"MB8GA1UdIwQYMBaAFOqlID9Er6dI09n9Lvnby+FISi7oMFQGCWCGSAGG+EIBDQRH\\n\"\r\n-\t\t\t\t+ \"FkVFeHRlbmRlZCBDQSBDZXJ0aWZpY2F0ZSBmcm9tIDI0IE1vbnRocyB0byAxMjAg\\n\"\r\n-\t\t\t\t+ \"TW9udGhzLiAgRFRHID0gMDUxMTE5OTgwHQYDVR0OBBYEFOqlID9Er6dI09n9Lvnb\\n\"\r\n-\t\t\t\t+ \"y+FISi7oMA0GCSqGSIb3DQEBBAUAA4GBAFNFo27JeeIgsMqS7Na//6gJQRilxwVS\\n\"\r\n-\t\t\t\t+ \"Bfx6J43YX47EgNDLn4J7B9Tst+2bDZDAk1lZyu4y2WCLrnfg/e6B1KYBhCt/Srsc\\n\"\r\n-\t\t\t\t+ \"r+WomFcw19k1jBtBaYxVwh/9N4ppZGdKILACciXbxfoLbbNgSDx5+KbE2c2m9is7\\n\"\r\n-\t\t\t\t+ \"MIZgRexTvnJa\\n\" + \"-----END CERTIFICATE-----\\n\";\r\n-\t}\r\n-}\n\\ No newline at end of file\n+public class CertificateFactory4Test extends TestCase {\r\n+\r\n+    private static final String BASE_URL = Support_GetResource\r\n+            .getResourceURL(\"/../internalres/\");\r\n+\r\n+    private static final String[] CERTIFICATE_URLS = new String[] {\r\n+            \"Bug93891-PEM.cer\", \"Bug93891-DER.cer\", \"Bug94404-PKCS7.cer\" };\r\n+\r\n+    private static final String[] CRL_URLS = new String[] { \"Bug93893-1.crl\",\r\n+            \"Bug93893-2.crl\", \"Bug94404-DER.crl\" };\r\n+\r\n+    private static final String[] CRLCOLLECTION_URLS = new String[] { \"Bug94404-PKCS7.crl\" };\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertificate(java.io.InputStream)\r\n+     */\r\n+    public void test_generateCertificateLjava_io_InputStream() throws Exception {\r\n+        // Test 1\r\n+        // Test for method java.security.cert.Certificate\r\n+        // java.security.cert.CertificateFactory.generateCertificate(java.io.InputStream)\r\n+        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n+        for (int i = 0; i < CERTIFICATES_ENCODED_X509.length; i++) {\r\n+            ByteArrayInputStream bais = new ByteArrayInputStream(\r\n+                    CERTIFICATES_ENCODED_X509[i].getBytes());\r\n+            fact.generateCertificate(bais);\r\n+\r\n+            // try again with generateCertificates()\r\n+            bais = new ByteArrayInputStream(CERTIFICATES_ENCODED_X509[i]\r\n+                    .getBytes());\r\n+            fact.generateCertificate(bais);\r\n+        }\r\n+\r\n+        // Test 2\r\n+        InputStream is = Support_Resources.getResourceStream(\"hyts_badpem.cer\");\r\n+        try {\r\n+            fact.generateCertificate(is);\r\n+            fail(\"Test2: CertificateException not thrown\");\r\n+        } catch (CertificateException e) {} finally {\r\n+            try {\r\n+                is.close();\r\n+            } catch (IOException ignore) {}\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertificates(java.io.InputStream)\r\n+     */\r\n+    public void test_generateCertificatesLjava_io_InputStream()\r\n+            throws Exception {\r\n+        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n+        for (int i = 0; i < CERTIFICATE_URLS.length; i++) {\r\n+            URL certUrl = new URL(BASE_URL + CERTIFICATE_URLS[i]);\r\n+            try {\r\n+                InputStream is = certUrl.openStream();\r\n+                Collection certs = fact.generateCertificates(is);\r\n+                assertNotNull(\"The certificates in \\\"\"\r\n+                        + certUrl.toExternalForm()\r\n+                        + \"\\\" were not parsed correctly\", certs);\r\n+            } catch (IOException e) {\r\n+                // the certificate could not be found, skip it\r\n+            } catch (CertificateException e) {\r\n+                fail(\"An exception was thrown while parsing \\\"\"\r\n+                        + certUrl.toExternalForm() + \"\\\": \" + e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCRL(java.io.InputStream)\r\n+     */\r\n+    public void test_generateCRLLjava_io_InputStream() throws Exception {\r\n+        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n+        for (int i = 0; i < CRL_URLS.length; i++) {\r\n+            URL certUrl = new URL(BASE_URL + CRL_URLS[i]);\r\n+            try {\r\n+                InputStream is = certUrl.openStream();\r\n+                CRL crl = fact.generateCRL(is);\r\n+                assertNotNull(\"The CRL in \\\"\" + certUrl.toExternalForm()\r\n+                        + \"\\\" were not parsed correctly\", crl);\r\n+            } catch (IOException e) {\r\n+                // the certificate could not be found, skip it\r\n+            } catch (CRLException e) {\r\n+                fail(\"An exception was thrown while parsing \\\"\"\r\n+                        + certUrl.toExternalForm() + \"\\\": \" + e.getMessage());\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCRLs(java.io.InputStream)\r\n+     */\r\n+    public void test_generateCRLsLjava_io_InputStream() throws Exception {\r\n+        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n+        for (int i = 0; i < CRLCOLLECTION_URLS.length; i++) {\r\n+            URL certUrl = new URL(BASE_URL + CRLCOLLECTION_URLS[i]);\r\n+            try {\r\n+                InputStream is = certUrl.openStream();\r\n+                Collection crls = fact.generateCRLs(is);\r\n+                assertTrue(\"The CRLs in \\\"\" + certUrl.toExternalForm()\r\n+                        + \"\\\" were not parsed correctly\", crls != null\r\n+                        && crls.size() > 0);\r\n+            } catch (IOException e) {\r\n+                // the certificate could not be found, skip it\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#getInstance(java.lang.String)\r\n+     */\r\n+    public void test_getInstanceLjava_lang_String() throws Exception {\r\n+        // Test for method java.security.cert.CertificateFactory\r\n+        // java.security.cert.CertificateFactory.getInstance(java.lang.String)\r\n+        CertificateFactory fact = CertificateFactory.getInstance(\"X.509\");\r\n+        assertTrue(\"factory is null\", fact != null);\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#getInstance(java.lang.String,\r\n+     *        java.lang.String)\r\n+     */\r\n+    public void test_getInstanceLjava_lang_StringLjava_lang_String()\r\n+            throws Exception {\r\n+        // Test for method java.security.cert.CertificateFactory\r\n+        // java.security.cert.CertificateFactory.getInstance(java.lang.String,\r\n+        // java.lang.String)\r\n+        Provider[] providers = Security\r\n+                .getProviders(\"CertificateFactory.X.509\");\r\n+\r\n+        if (providers != null) {\r\n+            for (int i = 0; i < providers.length; i++) {\r\n+                CertificateFactory fact = CertificateFactory.getInstance(\r\n+                        \"X.509\", providers[i].getName());\r\n+                assertNotNull(\"factory is null\", fact);\r\n+            }// end for\r\n+        } else {\r\n+            fail(\"No providers support CertificateFactory.X.509\");\r\n+        }\r\n+\r\n+        // exception case\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\", \"IHaventBeenConfigured\");\r\n+            fail(\"Should have thrown NoSuchProviderException\");\r\n+        } catch (NoSuchProviderException e) {\r\n+            // Expected\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#getProvider()\r\n+     */\r\n+    public void test_getProvider() throws Exception {\r\n+        // Test for method java.security.Provider\r\n+        // java.security.cert.CertificateFactory.getProvider()\r\n+        Provider p = CertificateFactory.getInstance(\"X.509\").getProvider();\r\n+        assertNotNull(\"provider is null\", p);\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCRLs(InputStream\r\n+     *        inStream)\r\n+     */\r\n+    public void testGenerateCRLs2() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCRL(\r\n+                    (InputStream) null);\r\n+            fail(\"CRLException was not thrown\");\r\n+        } catch (CRLException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertificate(InputStream\r\n+     *        inStream)\r\n+     */\r\n+    public void testGenerateCertificate() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCertificate(null);\r\n+            fail(\"CertificateException was not thrown\");\r\n+        } catch (CertificateException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertificates(InputStream\r\n+     *        inStream)\r\n+     */\r\n+    public void testGenerateCertificates2() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCertificates(null);\r\n+            fail(\"CertificateException was not thrown\");\r\n+        } catch (CertificateException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertPath(InputStream\r\n+     *        inStream, String encoding)\r\n+     */\r\n+    public void testGenerateCertPath1() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCertPath(\r\n+                    (InputStream) null, \"PkiPath\");\r\n+            fail(\"CertificateException was not thrown\");\r\n+        } catch (CertificateException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertPath(List<?\r\n+     *        extends Certificate> certificates)\r\n+     */\r\n+    public void testGenerateCertPath2() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCertPath(\r\n+                    (List) null);\r\n+            fail(\"NullPointerException was not thrown\");\r\n+        } catch (NullPointerException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCertPath(InputStream\r\n+     *        inStream)\r\n+     */\r\n+    public void testGenerateCertPath3() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCertPath(\r\n+                    (InputStream) null);\r\n+            fail(\"CertificateException was not thrown\");\r\n+        } catch (CertificateException e) {}\r\n+    }\r\n+\r\n+    /**\r\n+     * @tests java.security.cert.CertificateFactory#generateCRL(InputStream\r\n+     *        inStream)\r\n+     */\r\n+    public void testGenerateCRL() throws Exception {\r\n+        // Regression for HARMONY-814\r\n+        try {\r\n+            CertificateFactory.getInstance(\"X.509\").generateCRL(\r\n+                    (InputStream) null);\r\n+            fail(\"CRLException was not thrown\");\r\n+        } catch (CRLException e) {}\r\n+    }\r\n+\r\n+    private static final String[] CERTIFICATES_ENCODED_X509 = {\r\n+            // CERTIFICATES_ENCODED_X509[0]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICZTCCAdICBQL3AAC2MA0GCSqGSIb3DQEBAgUAMF8xCzAJBgNVBAYTAlVTMSAw\\n\"\r\n+                    + \"HgYDVQQKExdSU0EgRGF0YSBTZWN1cml0eSwgSW5jLjEuMCwGA1UECxMlU2VjdXJl\\n\"\r\n+                    + \"IFNlcnZlciBDZXJ0aWZpY2F0aW9uIEF1dGhvcml0eTAeFw05NzAyMjAwMDAwMDBa\\n\"\r\n+                    + \"Fw05ODAyMjAyMzU5NTlaMIGWMQswCQYDVQQGEwJVUzETMBEGA1UECBMKQ2FsaWZv\\n\"\r\n+                    + \"cm5pYTESMBAGA1UEBxMJUGFsbyBBbHRvMR8wHQYDVQQKExZTdW4gTWljcm9zeXN0\\n\"\r\n+                    + \"ZW1zLCBJbmMuMSEwHwYDVQQLExhUZXN0IGFuZCBFdmFsdWF0aW9uIE9ubHkxGjAY\\n\"\r\n+                    + \"BgNVBAMTEWFyZ29uLmVuZy5zdW4uY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\\n\"\r\n+                    + \"iQKBgQCofmdY+PiUWN01FOzEewf+GaG+lFf132UpzATmYJkA4AEA/juW7jSi+LJk\\n\"\r\n+                    + \"wJKi5GO4RyZoyimAL/5yIWDV6l1KlvxyKslr0REhMBaD/3Z3EsLTTEf5gVrQS6sT\\n\"\r\n+                    + \"WMoSZAyzB39kFfsB6oUXNtV8+UKKxSxKbxvhQn267PeCz5VX2QIDAQABMA0GCSqG\\n\"\r\n+                    + \"SIb3DQEBAgUAA34AXl3at6luiV/7I9MN5CXYoPJYI8Bcdc1hBagJvTMcmlqL2uOZ\\n\"\r\n+                    + \"H9T5hNMEL9Tk6aI7yZPXcw/xI2K6pOR/FrMp0UwJmdxX7ljV6ZtUZf7pY492UqwC\\n\"\r\n+                    + \"1777XQ9UEZyrKJvF5ntleeO0ayBqLGVKCWzWZX9YsXCpv47FNLZbupE=\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[1]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICZzCCAdCgAwIBAgIBGzANBgkqhkiG9w0BAQUFADBhMQswCQYDVQQGEwJVUzEY\\n\"\r\n+                    + \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n+                    + \"A1BLSTEcMBoGA1UEAxMTRG9EIFBLSSBNZWQgUm9vdCBDQTAeFw05ODA4MDMyMjAy\\n\"\r\n+                    + \"MjlaFw0wODA4MDQyMjAyMjlaMGExCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9VLlMu\\n\"\r\n+                    + \"IEdvdmVybm1lbnQxDDAKBgNVBAsTA0RvRDEMMAoGA1UECxMDUEtJMRwwGgYDVQQD\\n\"\r\n+                    + \"ExNEb0QgUEtJIE1lZCBSb290IENBMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKB\\n\"\r\n+                    + \"gQDbrM/J9FrJSX+zxFUbsI9Vw5QbguVBIa95rwW/0M8+sM0r5gd+DY6iubm6wnXk\\n\"\r\n+                    + \"CSvbfQlFEDSKr4WYeeGp+d9WlDnQdtDFLdA45tCi5SHjnW+hGAmZnld0rz6wQekF\\n\"\r\n+                    + \"5xQaa5A6wjhMlLOjbh27zyscrorMJ1O5FBOWnEHcRv6xqQIDAQABoy8wLTAdBgNV\\n\"\r\n+                    + \"HQ4EFgQUVrmYR6m9701cHQ3r5kXyG7zsCN0wDAYDVR0TBAUwAwEB/zANBgkqhkiG\\n\"\r\n+                    + \"9w0BAQUFAAOBgQDVX1Y0YqC7vekeZjVxtyuC8Mnxbrz6D109AX07LEIRzNYzwZ0w\\n\"\r\n+                    + \"MTImSp9sEzWW+3FueBIU7AxGys2O7X0qmN3zgszPfSiocBuQuXIYQctJhKjF5KVc\\n\"\r\n+                    + \"VGQRYYlt+myhl2vy6yPzEVCjiKwMEb1Spu0irCf+lFW2hsdjvmSQMtZvOw==\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[2]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIID6TCCA1KgAwIBAgIBGjANBgkqhkiG9w0BAQUFADBhMQswCQYDVQQGEwJVUzEY\\n\"\r\n+                    + \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n+                    + \"A1BLSTEcMBoGA1UEAxMTRG9EIFBLSSBNZWQgUm9vdCBDQTAeFw05ODA4MDIxNjQ1\\n\"\r\n+                    + \"MzhaFw0wMzA4MDIxNjQ1MzhaMFYxCzAJBgNVBAYTAlVTMRgwFgYDVQQKEw9VLlMu\\n\"\r\n+                    + \"IEdvdmVybm1lbnQxDDAKBgNVBAsTA0RvRDEMMAoGA1UECxMDUEtJMREwDwYDVQQD\\n\"\r\n+                    + \"EwhNZWQgQ0EtMTCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEAyUcrw1k6QKdB\\n\"\r\n+                    + \"WjgtGOk1AVaqJNI8acDGglhqQQ94QYfqZKuo1wwdnYehrgo5QcGkw9XcjBYegLFs\\n\"\r\n+                    + \"v4NCCwZ2pgsfYJlvHcSGPhT/wROUYEpXKelfXiEeaGhFl8zGcqteI2+EBbOZnFpj\\n\"\r\n+                    + \"Y4y+25dQcjYnrRGMAQ98qGwQtogDiDcCAwEAAaOCAbowggG2MBYGA1UdIAQPMA0w\\n\"\r\n+                    + \"CwYJYIZIAWUCAQsDMB8GA1UdIwQYMBaAFFa5mEepve9NXB0N6+ZF8hu87AjdMAwG\\n\"\r\n+                    + \"A1UdJAQFMAOAAQAwHQYDVR0OBBYEFDM6FOgJZ2GIZSQg7HlwQtemkx72MA4GA1Ud\\n\"\r\n+                    + \"DwEB/wQEAwIBhjB+BgNVHRIEdzB1hnNsZGFwOi8vZHMtMS5jaGFtYi5kaXNhLm1p\\n\"\r\n+                    + \"bC9jbiUzZERvRCUyMFBLSSUyME1lZCUyMFJvb3QlMjBDQSUyY291JTNkUEtJJTIg\\n\"\r\n+                    + \"Y291JTNkRG9EJTJjbyUzZFUuUy4lMjBHb3Zlcm5tZW50JTJjYyUzZFVTMA8GA1Ud\\n\"\r\n+                    + \"EwEB/wQFMAMBAf8wgawGA1UdHwSBpDCBoTCBnqCBm6CBmIaBlWxkYXA6Ly9kcy0x\\n\"\r\n+                    + \"LmNoYW1iLmRpc2EubWlsL2NuJTNkRG9EJTIwUEtJJTIwTWVkJTIwUm9vdCUyMENB\\n\"\r\n+                    + \"JTJjb3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVudCUy\\n\"\r\n+                    + \"Y2MlM2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0GCSqG\\n\"\r\n+                    + \"SIb3DQEBBQUAA4GBAFo5/Tu0dsy8tyhJVvxaKFNMfP3LLaspl+Or8oCpncKdpKyj\\n\"\r\n+                    + \"7ZO6uJ0n7oqvEaUThm8jgXSNgyttlYPwoNBxEsTq/lBDV3+y/c61psw3qM2boB1H\\n\"\r\n+                    + \"Oi3xXnRY+etG33TN9yydzrZ52XM0hnJZd4xIfoAgqs4T2rgqg8hx0ydU7o4o\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[3]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIDVjCCAr+gAwIBAgIBRTANBgkqhkiG9w0BAQUFADBWMQswCQYDVQQGEwJVUzEY\\n\"\r\n+                    + \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n+                    + \"A1BLSTERMA8GA1UEAxMITWVkIENBLTEwHhcNOTgwODAyMTcxMzI5WhcNMDEwODAy\\n\"\r\n+                    + \"MTcxMzI5WjBwMQswCQYDVQQGEwJVUzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50\\n\"\r\n+                    + \"MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsTA1BLSTENMAsGA1UECxMEVVNBRjEcMBoG\\n\"\r\n+                    + \"A1UEAxMTZHMtMS5jaXN0dy5zYWljLmNvbTCBnTANBgkqhkiG9w0BAQEFAAOBiwAw\\n\"\r\n+                    + \"gYcCgYEA19oJsspSHnWDi1/NTthbLrnicDogg3c63ZHPedU1YD90L1ogkYzxSA2t\\n\"\r\n+                    + \"MgsVZpNejBglE972mXKPqEGDojnDgltRgRLtLqisIs0DSFQrJrhA8egMH/pHAo9H\\n\"\r\n+                    + \"fH0n9rQUYBI3dsLxQkGVUSbB4P83VHi0sQO0dWsq5mEZd9G+MfsCAQOjggEaMIIB\\n\"\r\n+                    + \"FjAWBgNVHSAEDzANMAsGCWCGSAFlAgELAzAfBgNVHSMEGDAWgBQzOhToCWdhiGUk\\n\"\r\n+                    + \"IOx5cELXppMe9jAdBgNVHQ4EFgQUcQaYO8EEjje+VI3vfBIlDC6HNj0wDgYDVR0P\\n\"\r\n+                    + \"AQH/BAQDAgUgMAwGA1UdEwEB/wQCMAAwgZ0GA1UdHwSBlTCBkjCBj6CBjKCBiYaB\\n\"\r\n+                    + \"hmxkYXA6Ly9kcy0xLmNoYW1iLmRpc2EubWlsL2NuJTNkTWVkJTIwQ0ElMmQxJTJj\\n\"\r\n+                    + \"b3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVudCUyY2Ml\\n\"\r\n+                    + \"M2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0GCSqGSIb3\\n\"\r\n+                    + \"DQEBBQUAA4GBAEg7AC9bad2KZzyX4cqLU/mv2cbVg6tES2PIeST7nk8CQcv9a8IO\\n\"\r\n+                    + \"3K4uhrKoTsQfqs9p6+6s0VbgH3PKvOAIF4DAp5Yq1zz3fB+hsaFleHqtDNuldm1+\\n\"\r\n+                    + \"3XA2Oqa5aRFkb6Krut0EEOV4c/GEAPOrRGUTzYmOp4SEc8TEaD/75A7R\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[4]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIDXDCCAsWgAwIBAgIBSjANBgkqhkiG9w0BAQUFADBWMQswCQYDVQQGEwJVUzEY\\n\"\r\n+                    + \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n+                    + \"A1BLSTERMA8GA1UEAxMITWVkIENBLTEwHhcNOTgwODAyMTgwMjQwWhcNMDEwODAy\\n\"\r\n+                    + \"MTgwMjQwWjB0MQswCQYDVQQGEwJVUzEYMBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50\\n\"\r\n+                    + \"MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsTA1BLSTENMAsGA1UECxMEVVNBRjEgMB4G\\n\"\r\n+                    + \"A1UEAxMXR3VtYnkuSm9zZXBoLjAwMDAwMDUwNDQwgZ8wDQYJKoZIhvcNAQEBBQAD\\n\"\r\n+                    + \"gY0AMIGJAoGBALT/R7bPqs1c1YqXAg5HNpZLgW2HuAc7RCaP06cE4R44GBLw/fQc\\n\"\r\n+                    + \"VRNLn5pgbTXsDnjiZVd8qEgYqjKFQka4/tNhaF7No2tBZB+oYL/eP0IWtP+h/W6D\\n\"\r\n+                    + \"KR5+UvIIdgmx7k3t9jp2Q51JpHhhKEb9WN54trCO9Yu7PYU+LI85jEIBAgMBAAGj\\n\"\r\n+                    + \"ggEaMIIBFjAWBgNVHSAEDzANMAsGCWCGSAFlAgELAzAfBgNVHSMEGDAWgBQzOhTo\\n\"\r\n+                    + \"CWdhiGUkIOx5cELXppMe9jAdBgNVHQ4EFgQUkLBJl+ayKgzOp/wwBX9M1lSkCg4w\\n\"\r\n+                    + \"DgYDVR0PAQH/BAQDAgbAMAwGA1UdEwEB/wQCMAAwgZ0GA1UdHwSBlTCBkjCBj6CB\\n\"\r\n+                    + \"jKCBiYaBhmxkYXA6Ly9kcy0xLmNoYW1iLmRpc2EubWlsL2NuJTNkTWVkJTIwQ0El\\n\"\r\n+                    + \"MmQxJTJjb3UlM2RQS0klMmNvdSUzZERvRCUyY28lM2RVLlMuJTIwR292ZXJubWVu\\n\"\r\n+                    + \"dCUyY2MlM2RVUz9jZXJ0aWZpY2F0ZVJldm9jYXRpb25MaXN0JTNiYmluYXJ5MA0G\\n\"\r\n+                    + \"CSqGSIb3DQEBBQUAA4GBAFjapuDHMvIdUeYRyEYdShBR1JZC20tJ3MQnyBQveddz\\n\"\r\n+                    + \"LGFDGpIkRAQU7T/5/ne8lMexyxViC21xOlK9LdbJCbVyywvb9uEm/1je9wieQQtr\\n\"\r\n+                    + \"kjykuB+WB6qTCIslAO/eUmgzfzIENvnH8O+fH7QTr2PdkFkiPIqBJYHvw7F3XDqy\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[5]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIDlDCCAv2gAwIBAgIBGTANBgkqhkiG9w0BAQUFADBcMQswCQYDVQQGEwJVUzEY\\n\"\r\n+                    + \"MBYGA1UEChMPVS5TLiBHb3Zlcm5tZW50MQwwCgYDVQQLEwNEb0QxDDAKBgNVBAsT\\n\"\r\n+                    + \"A1BLSTEXMBUGA1UEAxMOTWVkIEVtYWlsIENBLTEwHhcNOTgwODAyMTgwNjM0WhcN\\n\"\r\n+                    + \"MDAwODAyMTgwNjM0WjCBmTELMAkGA1UEBhMCVVMxGDAWBgNVBAoTD1UuUy4gR292\\n\"\r\n+                    + \"ZXJubWVudDEMMAoGA1UECxMDRG9EMQwwCgYDVQQLEwNQS0kxDTALBgNVBAsTBFVT\\n\"\r\n+                    + \"QUYxIDAeBgNVBAMTF0d1bWJ5Lkpvc2VwaC4wMDAwMDA1MDQ0MSMwIQYJKoZIhvcN\\n\"\r\n+                    + \"AQkBFhRndW1ieUBjaXN0dy5zYWljLmNvbTCBnzANBgkqhkiG9w0BAQEFAAOBjQAw\\n\"\r\n+                    + \"gYkCgYEAvU4LMoOnF9bmhHvxZz8wCc9eRJ0j4RB0SmVYoq9iPrSJBwROeuxuU8VS\\n\"\r\n+                    + \"JBL/u+RB5t6UJVNjXFmB1wS0foxpOHFQBFWyvWmuOiRUNaRxTVCrO4eG+nmM/U89\\n\"\r\n+                    + \"DKAc9FV4bZ8dPE9PlK9oq0J8Y2DIKz1+gIeM1sTPMnDtFgfGyH8CAwEAAaOCASYw\\n\"\r\n+                    + \"ggEiMBYGA1UdIAQPMA0wCwYJYIZIAWUCAQsDMB8GA1UdIwQYMBaAFJcrSHN/a+aN\\n\"\r\n+                    + \"L5DK1NpJUIvX+bVnMB0GA1UdDgQWBBR50N97AxK0G6U17EP1iu38LiLTBzAOBgNV\\n\"\r\n+                    + \"HQ8BAf8EBAMCBaAwDAYDVR0TAQH/BAIwADCBqQYDVR0fBIGhMIGeMIGboIGYoIGV\\n\"\r\n+                    + \"hoGSbGRhcDovL2RzLTEuY2hhbWIuZGlzYS5taWw6MzkwL2NuJTNkTWVkJTIwRW1h\\n\"\r\n+                    + \"aWwlMjBDQSUyZDElMmNvdSUzZFBLSSUyY291JTNkRG9EJTJjbyUzZFUuUy4lMjBH\\n\"\r\n+                    + \"b3Zlcm5tZW50JTJjYyUzZFVTP2NlcnRpZmljYXRlUmV2b2NhdGlvbkxpc3QlM2Ji\\n\"\r\n+                    + \"aW5hcnkwDQYJKoZIhvcNAQEFBQADgYEAA9z8h7K4v0CuOyvmALNl8TQt0inf0w52\\n\"\r\n+                    + \"JJUvw/3FLA622IHe/vC9VHyIF0ibSEljWeOBuRjoMELAZGXCwRu43o2LDRqHr4Pc\\n\"\r\n+                    + \"WlG0uUtgHTPxbZpaUwueIZCBZg57f7Zhlub7Ag+AjeOybFj3FYqDB7TYqWJgAs/7\\n\"\r\n+                    + \"g5WfNEVAEwc=\\n\" + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[6]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIEEjCCA7ygAwIBAgIIEt4r4gAAAlIwDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n+                    + \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n+                    + \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n+                    + \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n+                    + \"OTcxMTI1MTkwNDIyWhcNOTgxMDE0MTgxMTI4WjBuMQswCQYDVQQGEwJVUzELMAkG\\n\"\r\n+                    + \"A1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxHjAcBgNVBAoTFU1pY3Jvc29mdCBD\\n\"\r\n+                    + \"b3Jwb3JhdGlvbjENMAsGA1UECxMERFNZUzERMA8GA1UEAxMIQ2VydFRlc3QwWzAN\\n\"\r\n+                    + \"BgkqhkiG9w0BAQEFAANKADBHAkB6hKgbYme8gtCf1Vy74KVNLf2o/R1kQVDSZiNm\\n\"\r\n+                    + \"lBSEsHAJSLXuuVdYsKo/hzarr9gGmI/gUzmargY1xJGQYbazAgMBAAGjggIXMIIC\\n\"\r\n+                    + \"EzCBzwYDVR0jBIHHMIHEgBS3hTIRuBZaOibht1DZjnTUg/IiRaGBmaSBljCBkzEL\\n\"\r\n+                    + \"MAkGA1UEBhMCVVMxCzAJBgNVBAgTAldBMRAwDgYDVQQHEwdSZWRtb25kMRMwEQYD\\n\"\r\n+                    + \"VQQKEwpXaW5kb3dzIE5UMRswGQYDVQQLExJEaXN0cmlidXRlZCBTeXN0ZW0xMzAx\\n\"\r\n+                    + \"BgNVBAMTKk1pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBD\\n\"\r\n+                    + \"QYIQERNhAKoA/oUR0US54igUYzCBvQYDVR0fBIG1MIGyMFagVKBShlBodHRwOi8v\\n\"\r\n+                    + \"Q0VSVFNSVi9DZXJ0U3J2L0NlcnRFbnJvbGwvTWljcm9zb2Z0IENlcnRpZmljYXRl\\n\"\r\n+                    + \"IFNlcnZlciBUZXN0IEdyb3VwIENBLmNybDBYoFagVIZSZmlsZTovL1xcQ0VSVFNS\\n\"\r\n+                    + \"VlxDZXJ0U3J2XENlcnRFbnJvbGxcTWljcm9zb2Z0IENlcnRpZmljYXRlIFNlcnZl\\n\"\r\n+                    + \"ciBUZXN0IEdyb3VwIENBLmNybDAJBgNVHRMEAjAAMHQGCCsGAQUFBwEBBGgwZjBk\\n\"\r\n+                    + \"BggrBgEFBQcwAoZYaHR0cDovL0NFUlRTUlYvQ2VydFNydi9DZXJ0RW5yb2xsL0NF\\n\"\r\n+                    + \"UlRTUlZfTWljcm9zb2Z0IENlcnRpZmljYXRlIFNlcnZlciBUZXN0IEdyb3VwIENB\\n\"\r\n+                    + \"LmNydDANBgkqhkiG9w0BAQQFAANBAFbEj4j/3Nv6WcAvq24C7yw8L0FcyE4dtLLX\\n\"\r\n+                    + \"U+04P0POe/doyTT6UngXNXp9RXpqDSiIHBRTshpvR+N2vweR5qA=\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[7]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIEYTCCBAugAwIBAgIIFViWmwAAAlowDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n+                    + \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n+                    + \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n+                    + \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n+                    + \"OTcxMTI2MDYzNzE4WhcNOTgxMDE0MTgxMTI4WjCBmjEjMCEGCSqGSIb3DQEJARYU\\n\"\r\n+                    + \"YWxsYW5jQG1pY3Jvc29mdC5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQ\\n\"\r\n+                    + \"MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u\\n\"\r\n+                    + \"MQ0wCwYDVQQLEwREU1lTMRgwFgYDVQQDEw9BbGxhbiBKLiBDb29wZXIwWzANBgkq\\n\"\r\n+                    + \"hkiG9w0BAQEFAANKADBHAkB1951uZLyJXjSZTc8Z1QnuXvKBAqm2WT4OFaFySF/F\\n\"\r\n+                    + \"WnMbIlAE0pvszDkKZ+N7hBzcc5pVIjezPfZ8cPh//jVPAgMBAAGjggI5MIICNTAL\\n\"\r\n+                    + \"BgNVHQ8EBAMCADgwEwYDVR0lBAwwCgYIKwYBBQUHAwQwgc8GA1UdIwSBxzCBxIAU\\n\"\r\n+                    + \"t4UyEbgWWjom4bdQ2Y501IPyIkWhgZmkgZYwgZMxCzAJBgNVBAYTAlVTMQswCQYD\\n\"\r\n+                    + \"VQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMKV2luZG93cyBOVDEb\\n\"\r\n+                    + \"MBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQDEypNaWNyb3NvZnQg\\n\"\r\n+                    + \"Q2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0GCEBETYQCqAP6FEdFEueIo\\n\"\r\n+                    + \"FGMwgb0GA1UdHwSBtTCBsjBWoFSgUoZQaHR0cDovL0NFUlRTUlYvQ2VydFNydi9D\\n\"\r\n+                    + \"ZXJ0RW5yb2xsL01pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91\\n\"\r\n+                    + \"cCBDQS5jcmwwWKBWoFSGUmZpbGU6Ly9cXENFUlRTUlZcQ2VydFNydlxDZXJ0RW5y\\n\"\r\n+                    + \"b2xsXE1pY3Jvc29mdCBDZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBDQS5j\\n\"\r\n+                    + \"cmwwCQYDVR0TBAIwADB0BggrBgEFBQcBAQRoMGYwZAYIKwYBBQUHMAKGWGh0dHA6\\n\"\r\n+                    + \"Ly9DRVJUU1JWL0NlcnRTcnYvQ2VydEVucm9sbC9DRVJUU1JWX01pY3Jvc29mdCBD\\n\"\r\n+                    + \"ZXJ0aWZpY2F0ZSBTZXJ2ZXIgVGVzdCBHcm91cCBDQS5jcnQwDQYJKoZIhvcNAQEE\\n\"\r\n+                    + \"BQADQQA1TYsk07tW0dhU6bHPK7NXHUFFiZ2fAtC0epLY9G6yuYb1lozPv5sDnCl1\\n\"\r\n+                    + \"A2fZPgawvAqCvK9xkv5L4j2F+v4U\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[8]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIEYjCCBAygAwIBAgIIFVsHaQAAAlwwDQYJKoZIhvcNAQEEBQAwgZMxCzAJBgNV\\n\"\r\n+                    + \"BAYTAlVTMQswCQYDVQQIEwJXQTEQMA4GA1UEBxMHUmVkbW9uZDETMBEGA1UEChMK\\n\"\r\n+                    + \"V2luZG93cyBOVDEbMBkGA1UECxMSRGlzdHJpYnV0ZWQgU3lzdGVtMTMwMQYDVQQD\\n\"\r\n+                    + \"EypNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EwHhcN\\n\"\r\n+                    + \"OTcxMTI2MDYzOTU4WhcNOTgxMDE0MTgxMTI4WjCBmjEjMCEGCSqGSIb3DQEJARYU\\n\"\r\n+                    + \"YWxsYW5jQG1pY3Jvc29mdC5jb20xCzAJBgNVBAYTAlVTMQswCQYDVQQIEwJXQTEQ\\n\"\r\n+                    + \"MA4GA1UEBxMHUmVkbW9uZDEeMBwGA1UEChMVTWljcm9zb2Z0IENvcnBvcmF0aW9u\\n\"\r\n+                    + \"MQ0wCwYDVQQLEwREU1lTMRgwFgYDVQQDEw9BbGxhbiBKLiBDb29wZXIwXDANBgkq\\n\"\r\n+                    + \"hkiG9w0BAQEFAANLADBIAkEA0T1td8kfsJgwm8Qj+jtrq29tqc/DIkIbAPcyygKG\\n\"\r\n+                    + \"1XEUvzQEQumVQx5lCD2LOOJs0eOuv4h6ngvLW+goDaidNQIDAQABo4ICOTCCAjUw\\n\"\r\n+                    + \"CwYDVR0PBAQDAgDAMBMGA1UdJQQMMAoGCCsGAQUFBwMIMIHPBgNVHSMEgccwgcSA\\n\"\r\n+                    + \"FLeFMhG4Flo6JuG3UNmOdNSD8iJFoYGZpIGWMIGTMQswCQYDVQQGEwJVUzELMAkG\\n\"\r\n+                    + \"A1UECBMCV0ExEDAOBgNVBAcTB1JlZG1vbmQxEzARBgNVBAoTCldpbmRvd3MgTlQx\\n\"\r\n+                    + \"GzAZBgNVBAsTEkRpc3RyaWJ1dGVkIFN5c3RlbTEzMDEGA1UEAxMqTWljcm9zb2Z0\\n\"\r\n+                    + \"IENlcnRpZmljYXRlIFNlcnZlciBUZXN0IEdyb3VwIENBghARE2EAqgD+hRHRRLni\\n\"\r\n+                    + \"KBRjMIG9BgNVHR8EgbUwgbIwVqBUoFKGUGh0dHA6Ly9DRVJUU1JWL0NlcnRTcnYv\\n\"\r\n+                    + \"Q2VydEVucm9sbC9NaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3Jv\\n\"\r\n+                    + \"dXAgQ0EuY3JsMFigVqBUhlJmaWxlOi8vXFxDRVJUU1JWXENlcnRTcnZcQ2VydEVu\\n\"\r\n+                    + \"cm9sbFxNaWNyb3NvZnQgQ2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0Eu\\n\"\r\n+                    + \"Y3JsMAkGA1UdEwQCMAAwdAYIKwYBBQUHAQEEaDBmMGQGCCsGAQUFBzAChlhodHRw\\n\"\r\n+                    + \"Oi8vQ0VSVFNSVi9DZXJ0U3J2L0NlcnRFbnJvbGwvQ0VSVFNSVl9NaWNyb3NvZnQg\\n\"\r\n+                    + \"Q2VydGlmaWNhdGUgU2VydmVyIFRlc3QgR3JvdXAgQ0EuY3J0MA0GCSqGSIb3DQEB\\n\"\r\n+                    + \"BAUAA0EAUPXt2pOY3YwRUHzD7Dtgyx5G7KxKtLan1wFBFjhv406v2Utb+2+wTQlS\\n\"\r\n+                    + \"ulWemcm8eOdG64nspv0oqSJnA8f4xg==\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[9]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICiTCCAfICAQAwDQYJKoZIhvcNAQEEBQAwgYwxCzAJBgNVBAYTAlVTMRUwEwYD\\n\"\r\n+                    + \"VQQIEwxOb3J0aCBEYWtvdGExFDASBgNVBAcTC0dyYW5kIEZvcmtzMRYwFAYDVQQK\\n\"\r\n+                    + \"Ew1VTkQgQWVyb3NwYWNlMRgwFgYDVQQDFA9yb290QGNzLnVuZC5lZHUxHjAcBgkq\\n\"\r\n+                    + \"hkiG9w0BCQEWD3Jvb3RAY3MudW5kLmVkdTAeFw05OTAzMDIyMDU4NDRaFw0wOTAy\\n\"\r\n+                    + \"MjcyMDU4NDRaMIGMMQswCQYDVQQGEwJVUzEVMBMGA1UECBMMTm9ydGggRGFrb3Rh\\n\"\r\n+                    + \"MRQwEgYDVQQHEwtHcmFuZCBGb3JrczEWMBQGA1UEChMNVU5EIEFlcm9zcGFjZTEY\\n\"\r\n+                    + \"MBYGA1UEAxQPcm9vdEBjcy51bmQuZWR1MR4wHAYJKoZIhvcNAQkBFg9yb290QGNz\\n\"\r\n+                    + \"LnVuZC5lZHUwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALmlQJg5Nl2VsQZ1\\n\"\r\n+                    + \"/B8fW4YDdk09SlVc7vyWcbcmbWRBJee0jcH448XdRP/m/MXIRsVKyhLA5f01+VPy\\n\"\r\n+                    + \"E2aDkx2WiU4DpqbMbGGAytuXBNudJQmBXjWEFiAGe7dYgDNGKK7Yo1k49Q6qGg9q\\n\"\r\n+                    + \"5did3+ppsyfzbeaiDCH0LO5gegNvAgMBAAEwDQYJKoZIhvcNAQEEBQADgYEAJnok\\n\"\r\n+                    + \"1gvj4KC9HeUX/R4Q/f5tbJ2jLeQATIHtUx9QSKSq7IsdY0zz9EnKOsc9pr8JfBTL\\n\"\r\n+                    + \"cAwrxqvl5QuoCFVR2tQq8DtBQY8vp7bEF2CZVoxZJXMIKKiD/Hjb0oypbq5wF0SY\\n\"\r\n+                    + \"xN5DUfG5sShi+vPIAwE62tZ1P1I1N8DQpDYiXkw=\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[10]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICWDCCAgICAQAwDQYJKoZIhvcNAQEEBQAwgbYxCzAJBgNVBAYTAlpBMRUwEwYD\\n\"\r\n+                    + \"VQQIEwxXZXN0ZXJuIENhcGUxEjAQBgNVBAcTCUNhcGUgVG93bjEdMBsGA1UEChMU\\n\"\r\n+                    + \"VGhhd3RlIENvbnN1bHRpbmcgY2MxHzAdBgNVBAsTFkNlcnRpZmljYXRpb24gU2Vy\\n\"\r\n+                    + \"dmljZXMxFzAVBgNVBAMTDnd3dy50aGF3dGUuY29tMSMwIQYJKoZIhvcNAQkBFhR3\\n\"\r\n+                    + \"ZWJtYXN0ZXJAdGhhd3RlLmNvbTAeFw05NjExMTQxNzE1MjVaFw05NjEyMTQxNzE1\\n\"\r\n+                    + \"MjVaMIG2MQswCQYDVQQGEwJaQTEVMBMGA1UECBMMV2VzdGVybiBDYXBlMRIwEAYD\\n\"\r\n+                    + \"VQQHEwlDYXBlIFRvd24xHTAbBgNVBAoTFFRoYXd0ZSBDb25zdWx0aW5nIGNjMR8w\\n\"\r\n+                    + \"HQYDVQQLExZDZXJ0aWZpY2F0aW9uIFNlcnZpY2VzMRcwFQYDVQQDEw53d3cudGhh\\n\"\r\n+                    + \"d3RlLmNvbTEjMCEGCSqGSIb3DQEJARYUd2VibWFzdGVyQHRoYXd0ZS5jb20wXDAN\\n\"\r\n+                    + \"BgkqhkiG9w0BAQEFAANLADBIAkEAmpIl7aR3aSPUUwUrHzpVMrsm3gpI2PzIwMh3\\n\"\r\n+                    + \"9l1h/RszI0/0qC2WRMlfwm5FapohoyjTJ6ZyGUUenICllKyKZwIDAQABMA0GCSqG\\n\"\r\n+                    + \"SIb3DQEBBAUAA0EAfI57WLkOKEyQqyCDYZ6reCukVDmAe7nZSbOyKv6KUvTCiQ5c\\n\"\r\n+                    + \"e5L4y3c/ViKdlou5BcQYAbxA7rwO/vz4m51w4w==\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            // CERTIFICATES_ENCODED_X509[11]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIDGjCCAtgCBDaRW4swCwYHKoZIzjgEAwUAMHMxCzAJBgNVBAYTAlVTMRAwDgYDVQQIEwdGbG9y\\n\"\r\n+                    + \"aWRhMRQwEgYDVQQHEwtHYWluZXN2aWxsZTEQMA4GA1UEChMHVW5rbm93bjEQMA4GA1UECxMHVW5r\\n\"\r\n+                    + \"bm93bjEYMBYGA1UEAxMPUm9iZXJ0IEx5YmFyZ2VyMB4XDTk5MDEwNTAwMjMzOVoXDTk5MDQwNTAw\\n\"\r\n+                    + \"MjMzOVowczELMAkGA1UEBhMCVVMxEDAOBgNVBAgTB0Zsb3JpZGExFDASBgNVBAcTC0dhaW5lc3Zp\\n\"\r\n+                    + \"bGxlMRAwDgYDVQQKEwdVbmtub3duMRAwDgYDVQQLEwdVbmtub3duMRgwFgYDVQQDEw9Sb2JlcnQg\\n\"\r\n+                    + \"THliYXJnZXIwggG3MIIBLAYHKoZIzjgEATCCAR8CgYEA/X9TgR11EilS30qcLuzk5/YRt1I870QA\\n\"\r\n+                    + \"wx4/gLZRJmlFXUAiUftZPY1Y+r/F9bow9subVWzXgTuAHTRv8mZgt2uZUKWkn5/oBHsQIsJPu6nX\\n\"\r\n+                    + \"/rfGG/g7V+fGqKYVDwT7g/bTxR7DAjVUE1oWkTL2dfOuK2HXKu/yIgMZndFIAccCFQCXYFCPFSML\\n\"\r\n+                    + \"zLKSuYKi64QL8Fgc9QKBgQD34aCF1ps93su8q1w2uFe5eZSvu/o66oL5V0wLPQeCZ1FZV4661FlP\\n\"\r\n+                    + \"5nEHEIGAtEkWcSPoTCgWE7fPCTKMyKbhPBZ6i1R8jSjgo64eK7OmdZFuo38L+iE1YvH7YnoBJDvM\\n\"\r\n+                    + \"pPG+qFGQiaiD3+Fa5Z8GkotmXoB7VSVkAUw7/s9JKgOBhAACgYBMhs/XcF0LAjbuhoAY4EOmxd4U\\n\"\r\n+                    + \"U0w4nSJQ2vKcgpyHU1Sv/tbUr3xEm6Yyx49j1eNp9jVwM1a6NYX8BO8fCSHIiUVvJVFlCcoO7Qb8\\n\"\r\n+                    + \"Px7drfbFAFt8mFE1mjYCuj21ePHhs1DlZKJwu2ElC6GaRwtBk3+oCMDAnLuySd0+fAohdDALBgcq\\n\"\r\n+                    + \"hkjOOAQDBQADLwAwLAIUddbqC3woMcABg/r1GPW9eVNStGwCFCBGySvdXK0i4aLVC4Ptbc3PQFjp\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            //CERTIFICATES_ENCODED_X509[12]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICyzCCAjQCAQAwDQYJKoZIhvcNAQEEBQAwga0xCzAJBgNVBAYTAlVTMREwDwYD\\n\"\r\n+                    + \"VQQIEwhOZXcgWW9yazEWMBQGA1UEBxMNTmV3IFlvcmsgQ2l0eTEcMBoGA1UEChMT\\n\"\r\n+                    + \"Q29sdW1iaWEgVW5pdmVyc2l0eTENMAsGA1UECxMEQWNJUzEfMB0GA1UEAxMWQ29s\\n\"\r\n+                    + \"dW1iaWEgVW5pdmVyc2l0eSBDQTElMCMGCSqGSIb3DQEJARYWY2VydC1hdXRoQGNv\\n\"\r\n+                    + \"bHVtYmlhLmVkdTAeFw05NzA0MjgxNDQxMDNaFw0wMDA0MjgxNDQxMDNaMIGtMQsw\\n\"\r\n+                    + \"CQYDVQQGEwJVUzERMA8GA1UECBMITmV3IFlvcmsxFjAUBgNVBAcTDU5ldyBZb3Jr\\n\"\r\n+                    + \"IENpdHkxHDAaBgNVBAoTE0NvbHVtYmlhIFVuaXZlcnNpdHkxDTALBgNVBAsTBEFj\\n\"\r\n+                    + \"SVMxHzAdBgNVBAMTFkNvbHVtYmlhIFVuaXZlcnNpdHkgQ0ExJTAjBgkqhkiG9w0B\\n\"\r\n+                    + \"CQEWFmNlcnQtYXV0aEBjb2x1bWJpYS5lZHUwgZ8wDQYJKoZIhvcNAQEBBQADgY0A\\n\"\r\n+                    + \"MIGJAoGBANiod6flzM72CbsK/3gzHzcdjpoozRDD/wgq31jEeDdfKY+ljAwxaZS9\\n\"\r\n+                    + \"mt7S1g7lL+55fx7FjfJxvJRXvS9UbDU46PDDyJloWYobg84bK5ZcV5UnIPZmGHW/\\n\"\r\n+                    + \"/xVDUtIGhc4T+Xm5p4F+4AcgewF2s4TbKWxfC98FJfepc31KjkGbAgMBAAEwDQYJ\\n\"\r\n+                    + \"KoZIhvcNAQEEBQADgYEAI/e6xC+osVM4eMkSUUWgihuocQlRL9ixTlGqW9fvNlI1\\n\"\r\n+                    + \"q58fELU5bcFko7d02S9Egac/9ckkt/sbHMv9zQhfnvpol8BN+LivGu+09IiOW4yq\\n\"\r\n+                    + \"c9xT58Pv9gwZ/Ei5VS+FXvzHIr91yWIlwLsnKfgYDrmQowG5FkHSG1ZotUdl7Oo=\\n\"\r\n+                    + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            //CERTIFICATES_ENCODED_X509[13]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIICnjCCAgcCAQMwDQYJKoZIhvcNAQEEBQAwgaAxCzAJBgNVBAYTAklUMR4wHAYD\\n\"\r\n+                    + \"VQQKExVQb2xpdGVjbmljbyBkaSBUb3Jpbm8xIzAhBgNVBAsTGklDRS1URUwgSXRh\\n\"\r\n+                    + \"bGlhbiBDQSBmb3IgV1dXMSAwHgYDVQQDExdDZXJ0aWZpY2F0aW9uIEF1dGhvcml0\\n\"\r\n+                    + \"eTEqMCgGCSqGSIb3DQEJARYbd3d3LWNhLWl0QGljZS10ZWwucG9saXRvLml0MB4X\\n\"\r\n+                    + \"DTk2MTAwMjExNDQ0NFoXDTk3MTIwMTExNDQ0NFowgY0xCzAJBgNVBAYTAklUMQ8w\\n\"\r\n+                    + \"DQYDVQQHEwZUb3Jpbm8xHjAcBgNVBAoTFVBvbGl0ZWNuaWNvIGRpIFRvcmlubzEO\\n\"\r\n+                    + \"MAwGA1UECxMFQ2VTSVQxGTAXBgNVBAMTEHVsaXNzZS5wb2xpdG8uaXQxIjAgBgkq\\n\"\r\n+                    + \"hkiG9w0BCQEWE3dlYm1hc3RlckBwb2xpdG8uaXQwgZ8wDQYJKoZIhvcNAQEBBQAD\\n\"\r\n+                    + \"gY0AMIGJAoGBAMUq/FdrxbSfGtGZq/FTTgC1JqxO4iiHiyxtgRT1oEvJIUjajVRN\\n\"\r\n+                    + \"dtBVUhW6JmhHje/qnMop09XcF7b89a9ahtG9jM70S03biXVmg66pWOpy6P7znAQj\\n\"\r\n+                    + \"VFPoCRR7BqUiGq0419a101Acaqkxi/4DdqiTPee4H7mcDZYu+fDPNQaHAgMBAAEw\\n\"\r\n+                    + \"DQYJKoZIhvcNAQEEBQADgYEAt15bzk0XO+ZM+Q6275VTQIon6KQQHnv9NflIFOoW\\n\"\r\n+                    + \"fgGRmoyiJFrjU1sIS8ctF03DH2xR20CuKd98fBpKnoOLd7eTKAGzGFPml36TPVj+\\n\"\r\n+                    + \"YYWdrWqnIzQn6F0OKR/U3Y+ot5fUNuqN36Q1wsVvpPJlOMx8D8OQy8ainHgG3YYA\\n\"\r\n+                    + \"TJk=\\n\" + \"-----END CERTIFICATE-----\\n\",\r\n+\r\n+            //CERTIFICATES_ENCODED_X509[14]\r\n+            \"-----BEGIN CERTIFICATE-----\\n\"\r\n+                    + \"MIIC1TCCAj6gAwIBAgIBBDANBgkqhkiG9w0BAQQFADBZMQswCQYDVQQGEwJVUzEf\\n\"\r\n+                    + \"MB0GA1UEChMWVW5pdmVyc2l0eSBvZiBDb2xvcmFkbzEWMBQGA1UECxMNU3lzdGVt\\n\"\r\n+                    + \"IE9mZmljZTERMA8GA1UEAxMIVU1TIENBLTEwHhcNOTgwNTExMjEwMjU0WhcNMDgw\\n\"\r\n+                    + \"NTEwMjEwMjU0WjBZMQswCQYDVQQGEwJVUzEfMB0GA1UEChMWVW5pdmVyc2l0eSBv\\n\"\r\n+                    + \"ZiBDb2xvcmFkbzEWMBQGA1UECxMNU3lzdGVtIE9mZmljZTERMA8GA1UEAxMIVU1T\\n\"\r\n+                    + \"IENBLTEwgZ8wDQYJKoZIhvcNAQEBBQADgY0AMIGJAoGBALGf8Ny+kHlXqLTi3uIf\\n\"\r\n+                    + \"mkxxwDJd14sOg+hv85pxsqzCRJEgOx5YDUt05hJ7N0s4rJ/gNUcJaKR6ul+qLGbW\\n\"\r\n+                    + \"+Zb4S1YFbnKaO16zggvgckwpLGYRBbmee9+E47W8VEOZWrJXUkpJ/ZV8GAnesrvn\\n\"\r\n+                    + \"XTEKfm7bX9s6R7FQfDoHNnQfAgMBAAGjgawwgakwEQYJYIZIAYb4QgEBBAQDAgD2\\n\"\r\n+                    + \"MB8GA1UdIwQYMBaAFOqlID9Er6dI09n9Lvnby+FISi7oMFQGCWCGSAGG+EIBDQRH\\n\"\r\n+                    + \"FkVFeHRlbmRlZCBDQSBDZXJ0aWZpY2F0ZSBmcm9tIDI0IE1vbnRocyB0byAxMjAg\\n\"\r\n+                    + \"TW9udGhzLiAgRFRHID0gMDUxMTE5OTgwHQYDVR0OBBYEFOqlID9Er6dI09n9Lvnb\\n\"\r\n+                    + \"y+FISi7oMA0GCSqGSIb3DQEBBAUAA4GBAFNFo27JeeIgsMqS7Na//6gJQRilxwVS\\n\"\r\n+                    + \"Bfx6J43YX47EgNDLn4J7B9Tst+2bDZDAk1lZyu4y2WCLrnfg/e6B1KYBhCt/Srsc\\n\"\r\n+                    + \"r+WomFcw19k1jBtBaYxVwh/9N4ppZGdKILACciXbxfoLbbNgSDx5+KbE2c2m9is7\\n\"\r\n+                    + \"MIZgRexTvnJa\\n\" + \"-----END CERTIFICATE-----\\n\" };\r\n+}\r",
                "deletions": 539
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Bug fix for HARMONY-526 ([classlib] unspecified NPE for java.sql.Timestamp.equals(Object) and equals(Timestamp) methods if parameter == null)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@410450 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e8d7fbfb9342ee50ab2badbaeea5250d44536fc3",
        "parent": "https://github.com/apache/harmony-classlib/commit/0d477c61eff825bf4695b097811f06c1c4fcde5e",
        "bug_id": "harmony-classlib_296",
        "file": [
            {
                "sha": "8c4a818eeb144c4363f7b1978c15f6ac20303953",
                "filename": "modules/sql/src/main/java/java/sql/Timestamp.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e8d7fbfb9342ee50ab2badbaeea5250d44536fc3/modules/sql/src/main/java/java/sql/Timestamp.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e8d7fbfb9342ee50ab2badbaeea5250d44536fc3/modules/sql/src/main/java/java/sql/Timestamp.java",
                "status": "modified",
                "changes": 42,
                "additions": 21,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/main/java/java/sql/Timestamp.java?ref=e8d7fbfb9342ee50ab2badbaeea5250d44536fc3",
                "patch": "@@ -1,16 +1,16 @@\n-/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\r\n- * \r\n- * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n- * you may not use this file except in compliance with the License.\r\n- * You may obtain a copy of the License at\r\n- * \r\n- *     http://www.apache.org/licenses/LICENSE-2.0\r\n- * \r\n- * Unless required by applicable law or agreed to in writing, software\r\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n- * See the License for the specific language governing permissions and\r\n- * limitations under the License.\r\n+/* Copyright 2004 The Apache Software Foundation or its licensors, as applicable\n+ * \n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ * \n+ *     http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n  */\n \n \n@@ -156,14 +156,11 @@ public int compareTo( Timestamp theTimestamp ) {\n \t * false if the object is not a Timestamp object or if the object is a Timestamp but\n \t * represents a different instant in time\n \t */\n-    public boolean equals( Object theObject ) {\n-    \tTimestamp theTimestamp;\n-    \ttry {\n-    \t\ttheTimestamp = (Timestamp) theObject;\n-    \t} catch (ClassCastException e) {\n-    \t\treturn false;\n-    \t} // end \n-    \treturn this.equals( (Timestamp) theTimestamp );\n+    public boolean equals(Object theObject) {\n+        if (theObject instanceof Timestamp) {\n+            return equals((Timestamp) theObject);\n+        }\n+        return false;\n     } // end method equals( Object )\n     \n \t/**\n@@ -172,6 +169,9 @@ public boolean equals( Object theObject ) {\n \t * @return true if this Timestamp object is equal to the supplied Timestamp object\n \t */\n     public boolean equals( Timestamp theTimestamp ) {\n+        if (theTimestamp == null) {\n+            return false;\n+        }\n     \tif( (this.getTime() == theTimestamp.getTime()) && (this.getNanos() == theTimestamp.getNanos()) ) {\n     \t\treturn true;\n     \t} else {",
                "deletions": 21
            },
            {
                "sha": "94a5c195f613076a7778a29126bfc5553a9f91db",
                "filename": "modules/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/TimestampTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e8d7fbfb9342ee50ab2badbaeea5250d44536fc3/modules/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/TimestampTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e8d7fbfb9342ee50ab2badbaeea5250d44536fc3/modules/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/TimestampTest.java",
                "status": "modified",
                "changes": 5,
                "additions": 5,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/sql/src/test/java/org/apache/harmony/sql/tests/java/sql/TimestampTest.java?ref=e8d7fbfb9342ee50ab2badbaeea5250d44536fc3",
                "patch": "@@ -454,6 +454,9 @@ public void testEqualsTimestamp() {\n \r\n \t\t\tassertFalse(theTimestamp.equals(theTest));\r\n \t\t} // end for\r\n+        \r\n+        // Regression for HARMONY-526\r\n+        assertFalse(new Timestamp(0).equals((Timestamp) null));\r\n \t} // end method testequalsTimestamp\r\n \r\n \t/*\r\n@@ -480,6 +483,8 @@ public void testEqualsObject() {\n \t\tTimestamp theTimestamp = new Timestamp(TIME_ARRAY[1]);\r\n \t\tassertFalse(theTimestamp.equals(nastyTest));\r\n \r\n+        // Regression for HARMONY-526\r\n+        assertFalse(new Timestamp(0).equals((Object) null));\r\n \t} // end method testequalsObject\r\n \r\n \t/*\r",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "fixes and regression test for HARMONY-491\n[classlib] Constructors of java.nio.charset.CharsetEncoder should not throw NPE if charset==null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@409162 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/e6a61b747767dee499000877babaf7a829c86913",
        "parent": "https://github.com/apache/harmony-classlib/commit/338adc9b3c10b53317034d7b3ad424b8bc63788d",
        "bug_id": "harmony-classlib_297",
        "file": [
            {
                "sha": "1fbd65ea497c9db0f03387f37274d7ab42ff1f69",
                "filename": "modules/nio_char/src/main/java/java/nio/charset/CharsetEncoder.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e6a61b747767dee499000877babaf7a829c86913/modules/nio_char/src/main/java/java/nio/charset/CharsetEncoder.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e6a61b747767dee499000877babaf7a829c86913/modules/nio_char/src/main/java/java/nio/charset/CharsetEncoder.java",
                "status": "modified",
                "changes": 29,
                "additions": 16,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio_char/src/main/java/java/nio/charset/CharsetEncoder.java?ref=e6a61b747767dee499000877babaf7a829c86913",
                "patch": "@@ -202,7 +202,6 @@ protected CharsetEncoder(Charset cs, float averageBytesPerChar,\n \t\tstatus = INIT;\r\n \t\tmalformAction = CodingErrorAction.REPORT;\r\n \t\tunmapAction = CodingErrorAction.REPORT;\r\n-\t\tdecoder = cs.newDecoder();\r\n \t\treplaceWith(replacement);\r\n \t}\r\n \r\n@@ -722,18 +721,22 @@ protected void implReset() {\n \t *         replacement byte array.\r\n \t */\r\n \tpublic boolean isLegalReplacement(byte[] repl) {\r\n-\t\tCodingErrorAction malform = decoder.malformedInputAction();\r\n-\t\tCodingErrorAction unmap = decoder.unmappableCharacterAction();\r\n-\t\tdecoder.onMalformedInput(CodingErrorAction.REPORT);\r\n-\t\tdecoder.onUnmappableCharacter(CodingErrorAction.REPORT);\r\n-\t\tByteBuffer in = ByteBuffer.wrap(repl);\r\n-\t\tCharBuffer out = CharBuffer.allocate((int) (repl.length * decoder\r\n-\t\t\t\t.maxCharsPerByte()));\r\n-\t\tCoderResult result = decoder.decode(in, out, true);\r\n-\t\tdecoder.onMalformedInput(malform);\r\n-\t\tdecoder.onUnmappableCharacter(unmap);\r\n-\t\treturn !result.isError();\r\n-\t}\r\n+        if (decoder == null) {\r\n+            decoder = cs.newDecoder();\r\n+        }\r\n+\r\n+        CodingErrorAction malform = decoder.malformedInputAction();\r\n+        CodingErrorAction unmap = decoder.unmappableCharacterAction();\r\n+        decoder.onMalformedInput(CodingErrorAction.REPORT);\r\n+        decoder.onUnmappableCharacter(CodingErrorAction.REPORT);\r\n+        ByteBuffer in = ByteBuffer.wrap(repl);\r\n+        CharBuffer out = CharBuffer.allocate((int) (repl.length * decoder\r\n+                .maxCharsPerByte()));\r\n+        CoderResult result = decoder.decode(in, out, true);\r\n+        decoder.onMalformedInput(malform);\r\n+        decoder.onUnmappableCharacter(unmap);\r\n+        return !result.isError();\r\n+    }\r\n \r\n \t/**\r\n \t * Gets this encoder's <code>CodingErrorAction</code> when malformed input\r",
                "deletions": 13
            },
            {
                "sha": "0acb41d684574da38e2079a191f056a43aac488e",
                "filename": "modules/nio_char/src/test/java/org/apache/harmony/tests/java/nio/charset/CharsetEncoderTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/e6a61b747767dee499000877babaf7a829c86913/modules/nio_char/src/test/java/org/apache/harmony/tests/java/nio/charset/CharsetEncoderTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/e6a61b747767dee499000877babaf7a829c86913/modules/nio_char/src/test/java/org/apache/harmony/tests/java/nio/charset/CharsetEncoderTest.java",
                "status": "modified",
                "changes": 41,
                "additions": 34,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/nio_char/src/test/java/org/apache/harmony/tests/java/nio/charset/CharsetEncoderTest.java?ref=e6a61b747767dee499000877babaf7a829c86913",
                "patch": "@@ -52,10 +52,21 @@ public void test_ConstructorLjava_nio_charset_CharsetFF() {\n \t\t}\r\n \t}\r\n \r\n-\t/**\r\n-\t * Helper for contructor tests\r\n-\t */\r\n-\tpublic static class MockCharsetEncoderForHarmony141 extends CharsetEncoder {\r\n+    /**\r\n+     * @tests java.nio.charset.CharsetEncoder.CharsetEncoder(\r\n+     *        java.nio.charset.Charset, float, float)\r\n+     */\r\n+    public void test_ConstructorLjava_nio_charset_CharsetNull() {\r\n+        // Regression for HARMONY-491\r\n+        CharsetEncoder ech = new MockCharsetEncoderForHarmony491(null, 1, 1);\r\n+        assertNull(ech.charset());\r\n+    }\r\n+\r\n+    /**\r\n+     * Helper for contructor tests\r\n+     */\r\n+\r\n+    public static class MockCharsetEncoderForHarmony141 extends CharsetEncoder {\r\n \r\n \t\tprotected MockCharsetEncoderForHarmony141(Charset cs,\r\n \t\t\t\tfloat averageBytesPerChar, float maxBytesPerChar) {\r\n@@ -73,9 +84,25 @@ protected CoderResult encodeLoop(CharBuffer in, ByteBuffer out) {\n \t\t}\r\n \t}\r\n \r\n-\t/*\r\n-\t * Test malfunction encode(CharBuffer)\r\n-\t */\r\n+    public static class MockCharsetEncoderForHarmony491 extends CharsetEncoder {\r\n+\r\n+        public MockCharsetEncoderForHarmony491(Charset arg0, float arg1,\r\n+                float arg2) {\r\n+            super(arg0, arg1, arg2);\r\n+        }\r\n+\r\n+        protected CoderResult encodeLoop(CharBuffer arg0, ByteBuffer arg1) {\r\n+            return null;\r\n+        }\r\n+\r\n+        public boolean isLegalReplacement(byte[] arg0) {\r\n+            return true;\r\n+        }\r\n+    }\r\n+\r\n+    /*\r\n+     * Test malfunction encode(CharBuffer)\r\n+     */\r\n \tpublic void test_EncodeLjava_nio_CharBuffer() throws Exception {\r\n \t\tMockMalfunctionCharset cs = new MockMalfunctionCharset(\"mock\", null);\r\n \t\ttry {\r",
                "deletions": 7
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "The second patch from HARMONY-441 applied\n[classlib] java.beans.PropertyChangeSupport.addPropertyChangeListener(String, PropertyChangeListener) should not throw NPE if propertyName == null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@399949 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/7821295217b77540aed099a2950aafff6f6b9c1c",
        "parent": "https://github.com/apache/harmony-classlib/commit/c61b932b2269ba25ebe5b6df942d3e8a7b188299",
        "bug_id": "harmony-classlib_298",
        "file": [
            {
                "sha": "999560b49b5128697e544cae2122ed29bd23320a",
                "filename": "modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7821295217b77540aed099a2950aafff6f6b9c1c/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7821295217b77540aed099a2950aafff6f6b9c1c/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java",
                "status": "modified",
                "changes": 16,
                "additions": 7,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/main/java/java/beans/VetoableChangeSupport.java?ref=7821295217b77540aed099a2950aafff6f6b9c1c",
                "patch": "@@ -85,19 +85,17 @@ public synchronized void removeVetoableChangeListener(\n     /**\n      * @com.intel.drl.spec_ref\n      */\n-    public synchronized void addVetoableChangeListener(\n-            String propertyName, VetoableChangeListener listener) {\n-        if(propertyName == null) {\n-            throw new NullPointerException(\"propertyName is null\");\n-        } else if(listener != null) {\n-            ArrayList listeners =\n-                (ArrayList) selectedVetoableChangeListeners.get(propertyName);\n-            \n+    public synchronized void addVetoableChangeListener(String propertyName,\n+            VetoableChangeListener listener) {\n+        if (propertyName != null && listener != null) {\n+            ArrayList listeners = (ArrayList) selectedVetoableChangeListeners\n+                    .get(propertyName);\n+\n             if (listeners == null) {\n                 listeners = new ArrayList();\n                 selectedVetoableChangeListeners.put(propertyName, listeners);\n             }\n-            \n+\n             listeners.add(listener);\n         }\n     }",
                "deletions": 9
            },
            {
                "sha": "8113a81b7c29646fc3645dd1a5bb1346973c0ceb",
                "filename": "modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/7821295217b77540aed099a2950aafff6f6b9c1c/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/7821295217b77540aed099a2950aafff6f6b9c1c/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java",
                "status": "modified",
                "changes": 62,
                "additions": 31,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/beans/src/test/java/org/apache/harmony/tests/java/beans/VetoableChangeSupportTest.java?ref=7821295217b77540aed099a2950aafff6f6b9c1c",
                "patch": "@@ -33,7 +33,7 @@\n /**\n  * The test checks the class java.beans.VetoableChangeSupport\n  * @author Maxim V. Berkultsev\n- * @version $Revision: 1.2.6.3 $\n+ * @version $Revision$\n  */\n \n public class VetoableChangeSupportTest extends TestCase {\n@@ -57,14 +57,24 @@ public VetoableChangeSupportTest(String name) {\n      *        java.lang.Object)\n      */\n     public void testVetoableChangeSupport_null() {\n+        // Regression for HARMONY-228\n         try {\n-            // Regression for HARMONY-228\n             new VetoableChangeSupport(null);\n             fail(\"Should throw NullPointerException.\");\n         } catch (NullPointerException e) {\n         }\n     }\n-    \n+\n+    /**\n+     * @tests java.beans.VetoableChangeSupport#addVetoableChangeListener(java.lang.String,\n+     *        java.beans.VetoableChangeListener)\n+     */\n+    public void test_addPropertyChangeListenerNullNull() throws Exception {\n+        // Regression for HARMONY-441\n+        new VetoableChangeSupport(\"bean1\")\n+                .addVetoableChangeListener(null, null);\n+    }\n+\n     /**\n      * The test checks the method add() with no property specified\n      */\n@@ -76,13 +86,10 @@ public void vetoableChange(PropertyChangeEvent pce) {\n         };\n         vcs.addVetoableChangeListener(vcl);\n         VetoableChangeListener[] vcls = vcs.getVetoableChangeListeners();\n-        if(vcls == null) {\n-            fail(\"Returned listeners is null.\");\n-        } else if(vcls.length != 1) {\n-            fail(\"Number of listeners is not equal to 1.\");\n-        } else {\n-            assertEquals(vcl, vcls[0]);\n-        }\n+\n+        assertNotNull(\"Returned listeners is null.\", vcls);\n+        assertEquals(1, vcls.length);\n+        assertEquals(vcl, vcls[0]);\n     }\n     \n     /**\n@@ -97,13 +104,10 @@ public void vetoableChange(PropertyChangeEvent pce) {\n         vcs.addVetoableChangeListener(\"property1\", vcl);\n         VetoableChangeListener[] vcls = vcs.getVetoableChangeListeners(\n                 \"property1\");\n-        if(vcls == null) {\n-            fail(\"Returned listeners is null.\");\n-        } else if(vcls.length != 1) {\n-            fail(\"Number of listeners is not equal to 1.\");\n-        } else {\n-            assertEquals(vcl, vcls[0]);\n-        }\n+\n+        assertNotNull(\"Returned listeners is null.\", vcls);\n+        assertEquals(1, vcls.length);\n+        assertEquals(vcl, vcls[0]);\n     }\n     \n     /**\n@@ -112,23 +116,19 @@ public void vetoableChange(PropertyChangeEvent pce) {\n     public void testAddVetoableChangeListenerProxy() {\n         VetoableChangeSupport vcs = new VetoableChangeSupport(\"bean1\");\n         VetoableChangeListener vcl = new VetoableChangeListener() {\n-            public void vetoableChange(PropertyChangeEvent pce) {\n-            }\n+            public void vetoableChange(PropertyChangeEvent pce) {}\n         };\n         vcs.addVetoableChangeListener(\"property1\", vcl);\n         VetoableChangeListener[] vcls = vcs.getVetoableChangeListeners();\n-        if(vcls == null) {\n-            fail(\"Returned listeners is null.\");\n-        } else if(vcls.length != 1) {\n-            fail(\"Number of listeners is not equal to 1.\");\n-        } else if(!(vcls[0] instanceof VetoableChangeListenerProxy)) {\n-            fail(\"Listener is not of VetoableChangeListenerProxy type\");\n-        } else {\n-            assertEquals(vcl,\n-                    ((VetoableChangeListenerProxy) vcls[0]).getListener());\n-            assertEquals(\"property1\",\n-                    ((VetoableChangeListenerProxy) vcls[0]).getPropertyName());\n-        }\n+\n+        assertNotNull(\"Returned listeners is null.\", vcls);\n+        assertEquals(1, vcls.length);\n+\n+        assertTrue(\"Listener is not of VetoableChangeListenerProxy type\",\n+                vcls[0] instanceof VetoableChangeListenerProxy);\n+        assertEquals(vcl, ((VetoableChangeListenerProxy) vcls[0]).getListener());\n+        assertEquals(\"property1\", ((VetoableChangeListenerProxy) vcls[0])\n+                .getPropertyName());\n     }\n     \n     /**",
                "deletions": 31
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "- Fix for HARMONY-93 (some methods in java.util.Collections don't throw NPE when the parameter is null)\n- marked a number of invariant fields final\n- implemented synchronized versions of toString\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/harmony/enhanced/classlib/trunk@379447 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/f2bc7793cf2390b0c88477287b2f6fdb86cdf14b",
        "parent": "https://github.com/apache/harmony-classlib/commit/ce40022def65f153239c70b2dd4ca726a32c3258",
        "bug_id": "harmony-classlib_299",
        "file": [
            {
                "sha": "4370146d53f7013bb796098425922123e04c83e5",
                "filename": "modules/luni/src/main/java/java/util/Collections.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f2bc7793cf2390b0c88477287b2f6fdb86cdf14b/modules/luni/src/main/java/java/util/Collections.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f2bc7793cf2390b0c88477287b2f6fdb86cdf14b/modules/luni/src/main/java/java/util/Collections.java",
                "status": "modified",
                "changes": 69,
                "additions": 49,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/main/java/java/util/Collections.java?ref=f2bc7793cf2390b0c88477287b2f6fdb86cdf14b",
                "patch": "@@ -30,9 +30,9 @@\n \t\t\tSerializable {\r\n \t\tprivate static final long serialVersionUID = 2739099268398711800L;\r\n \r\n-\t\tprivate int n;\r\n+\t\tprivate final int n;\r\n \r\n-\t\tprivate Object element;\r\n+\t\tprivate final Object element;\r\n \r\n \t\tCopiesList(int length, Object object) {\r\n \t\t\tif (length < 0) {\r\n@@ -150,7 +150,7 @@ public int compare(Object o1, Object o2) {\n \t\t\tSerializable {\r\n \t\tprivate static final long serialVersionUID = 3193687207550431679L;\r\n \r\n-\t\tObject element;\r\n+\t\tfinal Object element;\r\n \r\n \t\tSingletonSet(Object object) {\r\n \t\t\telement = object;\r\n@@ -191,7 +191,7 @@ public void remove() {\n \t\t\tSerializable {\r\n \t\tprivate static final long serialVersionUID = 3093736618740652951L;\r\n \r\n-\t\tObject element;\r\n+\t\tfinal Object element;\r\n \r\n \t\tSingletonList(Object object) {\r\n \t\t\telement = object;\r\n@@ -216,7 +216,7 @@ public int size() {\n \t\t\tSerializable {\r\n \t\tprivate static final long serialVersionUID = -6979724477215052911L;\r\n \r\n-\t\tObject k, v;\r\n+\t\tfinal Object k, v;\r\n \r\n \t\tSingletonMap(Object key, Object value) {\r\n \t\t\tk = key;\r\n@@ -305,9 +305,8 @@ public void remove() {\n \tstatic class SynchronizedCollection implements Collection, Serializable {\r\n \t\tprivate static final long serialVersionUID = 3053995032091335093L;\r\n \r\n-\t\tCollection c;\r\n-\r\n-\t\tObject mutex;\r\n+\t\tfinal Collection c;\r\n+\t\tfinal Object mutex;\r\n \r\n \t\tSynchronizedCollection(Collection collection) {\r\n \t\t\tc = collection;\r\n@@ -391,6 +390,12 @@ public int size() {\n \t\t\t}\r\n \t\t}\r\n \r\n+\t\tpublic String toString() {\r\n+\t\t\tsynchronized (mutex) {\r\n+\t\t\t\treturn c.toString();\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n \t\tpublic Object[] toArray(Object[] array) {\r\n \t\t\tsynchronized (mutex) {\r\n \t\t\t\treturn c.toArray(array);\r\n@@ -414,7 +419,6 @@ private void writeObject(ObjectOutputStream stream) throws IOException {\n \r\n \t\tSynchronizedRandomAccessList(List l, Object mutex) {\r\n \t\t\tsuper(l, mutex);\r\n-\t\t\tlist = l;\r\n \t\t}\r\n \r\n \t\tpublic List subList(int start, int end) {\r\n@@ -443,7 +447,7 @@ private Object writeReplace() {\n \t\t\tList {\r\n \t\tprivate static final long serialVersionUID = -7754090372962971524L;\r\n \r\n-\t\tList list;\r\n+\t\tfinal List list;\r\n \r\n \t\tSynchronizedList(List l) {\r\n \t\t\tsuper(l);\r\n@@ -558,9 +562,8 @@ private Object readResolve() {\n \tstatic class SynchronizedMap implements Map, Serializable {\r\n \t\tprivate static final long serialVersionUID = 1978198479659022715L;\r\n \r\n-\t\tprivate Map m;\r\n-\r\n-\t\tObject mutex;\r\n+\t\tprivate final Map m;\r\n+\t\tfinal Object mutex;\r\n \r\n \t\tSynchronizedMap(Map map) {\r\n \t\t\tm = map;\r\n@@ -656,6 +659,12 @@ public Collection values() {\n \t\t\t}\r\n \t\t}\r\n \r\n+\t\tpublic String toString() {\r\n+\t\t\tsynchronized (mutex) {\r\n+\t\t\t\treturn m.toString();\r\n+\t\t\t}\r\n+\t\t}\r\n+\r\n \t\tprivate void writeObject(ObjectOutputStream stream) throws IOException {\r\n \t\t\tsynchronized (mutex) {\r\n \t\t\t\tstream.defaultWriteObject();\r\n@@ -697,7 +706,7 @@ private void writeObject(ObjectOutputStream stream) throws IOException {\n \t\t\tSortedMap {\r\n \t\tprivate static final long serialVersionUID = -8798146769416483793L;\r\n \r\n-\t\tprivate SortedMap sm;\r\n+\t\tprivate final SortedMap sm;\r\n \r\n \t\tSynchronizedSortedMap(SortedMap map) {\r\n \t\t\tsuper(map);\r\n@@ -757,7 +766,7 @@ private void writeObject(ObjectOutputStream stream) throws IOException {\n \t\t\tSortedSet {\r\n \t\tprivate static final long serialVersionUID = 8695801310862127406L;\r\n \r\n-\t\tprivate SortedSet ss;\r\n+\t\tprivate final SortedSet ss;\r\n \r\n \t\tSynchronizedSortedSet(SortedSet set) {\r\n \t\t\tsuper(set);\r\n@@ -816,7 +825,7 @@ private void writeObject(ObjectOutputStream stream) throws IOException {\n \t\t\tSerializable {\r\n \t\tprivate static final long serialVersionUID = 1820017752578914078L;\r\n \r\n-\t\tCollection c;\r\n+\t\tfinal Collection c;\r\n \r\n \t\tUnmodifiableCollection(Collection collection) {\r\n \t\t\tc = collection;\r\n@@ -920,7 +929,7 @@ private Object writeReplace() {\n \t\t\timplements List {\r\n \t\tprivate static final long serialVersionUID = -283967356065247728L;\r\n \r\n-\t\tList list;\r\n+\t\tfinal List list;\r\n \r\n \t\tUnmodifiableList(List l) {\r\n \t\t\tsuper(l);\r\n@@ -1039,7 +1048,7 @@ private Object readResolve() {\n \tprivate static class UnmodifiableMap implements Map, Serializable {\r\n \t\tprivate static final long serialVersionUID = -1034234728574286014L;\r\n \r\n-\t\tprivate Map m;\r\n+\t\tprivate final Map m;\r\n \r\n \t\tprivate static class UnmodifiableEntrySet extends UnmodifiableSet {\r\n \t\t\tprivate static final long serialVersionUID = 7854390611657943733L;\r\n@@ -1204,7 +1213,7 @@ public int hashCode() {\n \t\t\timplements SortedMap {\r\n \t\tprivate static final long serialVersionUID = -8806743815996713206L;\r\n \r\n-\t\tprivate SortedMap sm;\r\n+\t\tprivate final SortedMap sm;\r\n \r\n \t\tUnmodifiableSortedMap(SortedMap map) {\r\n \t\t\tsuper(map);\r\n@@ -1240,7 +1249,7 @@ public SortedMap tailMap(Object after) {\n \t\t\timplements SortedSet {\r\n \t\tprivate static final long serialVersionUID = -4929149591599911165L;\r\n \r\n-\t\tprivate SortedSet ss;\r\n+\t\tprivate final SortedSet ss;\r\n \r\n \t\tUnmodifiableSortedSet(SortedSet set) {\r\n \t\t\tsuper(set);\r\n@@ -1968,6 +1977,8 @@ public static ArrayList list(Enumeration enumeration) {\n \t * @return a synchronized Collection\r\n \t */\r\n \tpublic static Collection synchronizedCollection(Collection collection) {\r\n+\t\tif (collection == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new SynchronizedCollection(collection);\r\n \t}\r\n \r\n@@ -1997,6 +2008,8 @@ public static List synchronizedList(List list) {\n \t * @return a synchronized Map\r\n \t */\r\n \tpublic static Map synchronizedMap(Map map) {\r\n+\t\tif (map == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new SynchronizedMap(map);\r\n \t}\r\n \r\n@@ -2009,6 +2022,8 @@ public static Map synchronizedMap(Map map) {\n \t * @return a synchronized Set\r\n \t */\r\n \tpublic static Set synchronizedSet(Set set) {\r\n+\t\tif (set == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new SynchronizedSet(set);\r\n \t}\r\n \r\n@@ -2021,6 +2036,8 @@ public static Set synchronizedSet(Set set) {\n \t * @return a synchronized SortedMap\r\n \t */\r\n \tpublic static SortedMap synchronizedSortedMap(SortedMap map) {\r\n+\t\tif (map == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new SynchronizedSortedMap(map);\r\n \t}\r\n \r\n@@ -2033,6 +2050,8 @@ public static SortedMap synchronizedSortedMap(SortedMap map) {\n \t * @return a synchronized SortedSet\r\n \t */\r\n \tpublic static SortedSet synchronizedSortedSet(SortedSet set) {\r\n+\t\tif (set == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new SynchronizedSortedSet(set);\r\n \t}\r\n \r\n@@ -2046,6 +2065,8 @@ public static SortedSet synchronizedSortedSet(SortedSet set) {\n \t * @return an unmodifiable Collection\r\n \t */\r\n \tpublic static Collection unmodifiableCollection(Collection collection) {\r\n+\t\tif (collection == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new UnmodifiableCollection(collection);\r\n \t}\r\n \r\n@@ -2077,6 +2098,8 @@ public static List unmodifiableList(List list) {\n \t * @return a unmodifiable Map\r\n \t */\r\n \tpublic static Map unmodifiableMap(Map map) {\r\n+\t\tif (map == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new UnmodifiableMap(map);\r\n \t}\r\n \r\n@@ -2090,6 +2113,8 @@ public static Map unmodifiableMap(Map map) {\n \t * @return a unmodifiable Set\r\n \t */\r\n \tpublic static Set unmodifiableSet(Set set) {\r\n+\t\tif (set == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new UnmodifiableSet(set);\r\n \t}\r\n \r\n@@ -2103,6 +2128,8 @@ public static Set unmodifiableSet(Set set) {\n \t * @return a unmodifiable SortedMap\r\n \t */\r\n \tpublic static SortedMap unmodifiableSortedMap(SortedMap map) {\r\n+\t\tif (map == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new UnmodifiableSortedMap(map);\r\n \t}\r\n \r\n@@ -2116,6 +2143,8 @@ public static SortedMap unmodifiableSortedMap(SortedMap map) {\n \t * @return a unmodifiable SortedSet\r\n \t */\r\n \tpublic static SortedSet unmodifiableSortedSet(SortedSet set) {\r\n+\t\tif (set == null)\r\n+\t\t\tthrow new NullPointerException();\r\n \t\treturn new UnmodifiableSortedSet(set);\r\n \t}\r\n }\r",
                "deletions": 20
            },
            {
                "sha": "8b9d8502eca8e024da8d501c8a136eca2b9ca14d",
                "filename": "modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/f2bc7793cf2390b0c88477287b2f6fdb86cdf14b/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/f2bc7793cf2390b0c88477287b2f6fdb86cdf14b/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java",
                "status": "modified",
                "changes": 132,
                "additions": 131,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/luni/src/test/java/org/apache/harmony/tests/java/util/CollectionsTest.java?ref=f2bc7793cf2390b0c88477287b2f6fdb86cdf14b",
                "patch": "@@ -30,7 +30,7 @@\n \tpublic void test_rotateLjava_util_ListI() {\r\n \t\t// Regression for HARMONY-19 Rotate an *empty* list\r\n \t\tCollections.rotate(new ArrayList(), 25);\r\n-\t\t\r\n+\r\n \t\t// Regression for HARMONY-20\r\n \t\tList list = new ArrayList();\r\n \t\tlist.add(0, \"zero\");\r\n@@ -51,4 +51,134 @@ public void test_rotateLjava_util_ListI() {\n \t\tassertEquals(\"Rotated incorrectly at position 4, \", \"two\",\r\n \t\t\t\t(String) list.get(4));\r\n \t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#synchronizedCollection(java.util.Collection)\r\n+\t */\r\n+\tpublic void test_synchronizedCollectionLjava_util_Collection() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.synchronizedCollection(null);\r\n+\t\t\tfail(\"Assert 0: synchronizedCollection(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#synchronizedSortedMap(java.util.SortedMap)\r\n+\t */\r\n+\tpublic void test_synchronizedSortedMapLjava_util_SortedMap() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.synchronizedSortedMap(null);\r\n+\t\t\tfail(\"Assert 0: synchronizedSortedMap(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#synchronizedMap(java.util.Map)\r\n+\t */\r\n+\tpublic void test_synchronizedMapLjava_util_Map() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.synchronizedMap(null);\r\n+\t\t\tfail(\"Assert 0: synchronizedMap(map) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#synchronizedSet(java.util.Set)\r\n+\t */\r\n+\tpublic void test_synchronizedSetLjava_util_Set() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.synchronizedSet(null);\r\n+\t\t\tfail(\"Assert 0: synchronizedSet(set) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#synchronizedSortedSet(java.util.SortedSet)\r\n+\t */\r\n+\tpublic void test_synchronizedSortedSetLjava_util_SortedSet() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.synchronizedSortedSet(null);\r\n+\t\t\tfail(\"Assert 0: synchronizedSortedSet(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#unmodifiableCollection(java.util.Collection)\r\n+\t */\r\n+\tpublic void test_unmodifiableCollectionLjava_util_Collection() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.unmodifiableCollection(null);\r\n+\t\t\tfail(\"Assert 0: unmodifiableCollection(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#unmodifiableMap(java.util.Map)\r\n+\t */\r\n+\tpublic void test_unmodifiableMapLjava_util_Map() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.unmodifiableMap(null);\r\n+\t\t\tfail(\"Assert 0: unmodifiableMap(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#unmodifiableSet(java.util.Set)\r\n+\t */\r\n+\tpublic void test_unmodifiableSetLjava_util_Set() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.unmodifiableSet(null);\r\n+\t\t\tfail(\"Assert 0: unmodifiableSet(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#unmodifiableSortedMap(java.util.SortedMap)\r\n+\t */\r\n+\tpublic void test_unmodifiableSortedMapLjava_util_SortedMap() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.unmodifiableSortedMap(null);\r\n+\t\t\tfail(\"Assert 0: unmodifiableSortedMap(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n+\r\n+\t/**\r\n+\t * @tests java.util.Collections#unmodifiableSortedSet(java.util.SortedSet)\r\n+\t */\r\n+\tpublic void test_unmodifiableSortedSetLjava_util_SortedSet() {\r\n+\t\ttry {\r\n+\t\t\t// Regression for HARMONY-93\r\n+\t\t\tCollections.unmodifiableSortedSet(null);\r\n+\t\t\tfail(\"Assert 0: unmodifiableSortedSet(null) must throw NPE\");\r\n+\t\t} catch (NullPointerException e) {\r\n+\t\t\t// expected\r\n+\t\t}\r\n+\t}\r\n }\r",
                "deletions": 1
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applying patches from \"[#HARMONY-2661] [classlib][swing][plaf]\njavax.swing.plaf.basic.BasicSplitPaneUI.getDividerLocation(null) doesn't\nthrow unspecified NPE\".  I've not applied the patch to remove the test from\nthe windows exclude list because I don't have a windows machine handy and I\nstill get two failures on Linux.\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@496040 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/151ed4339a97d54d54318101d37126eec5e85b1f",
        "parent": "https://github.com/apache/harmony-classlib/commit/59d0d402c395f955c8987bfb34fe70f01cbb7129",
        "bug_id": "harmony-classlib_300",
        "file": [
            {
                "sha": "3dd85391008e21bbe4011dd1c4bb35a006633fe3",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/151ed4339a97d54d54318101d37126eec5e85b1f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/151ed4339a97d54d54318101d37126eec5e85b1f/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java",
                "status": "modified",
                "changes": 3,
                "additions": 3,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicSplitPaneUI.java?ref=151ed4339a97d54d54318101d37126eec5e85b1f",
                "patch": "@@ -714,6 +714,9 @@ public void setDividerLocation(final JSplitPane jc, final int location) {\n     }\n \n     public int getDividerLocation(final JSplitPane jc) {\n+        if (jc == null) { // Fix for HARMONY-2661, for compatibility with RI\n+            throw new NullPointerException(\"jc is null\");\n+        }\n         return dividerLocation;\n     }\n ",
                "deletions": 0
            },
            {
                "sha": "9dd8dbe84b6edd537f0bddfdbb5819562fa83d57",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/151ed4339a97d54d54318101d37126eec5e85b1f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/151ed4339a97d54d54318101d37126eec5e85b1f/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java",
                "status": "modified",
                "changes": 9,
                "additions": 9,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicSplitPaneUITest.java?ref=151ed4339a97d54d54318101d37126eec5e85b1f",
                "patch": "@@ -290,6 +290,15 @@ public void testSetDividerLocation() throws Exception {\n         assertEquals(20, ui.getDividerLocation(splitPane));\n     }\n \n+    public void testGetDividerLocation() throws Exception {\n+        try { // Regression test for HARMONY-2661\n+            ui.getDividerLocation(null);\n+            fail(\"NullPointerException should have been thrown\");\n+        } catch (NullPointerException e) {\n+            // Expected\n+        }\n+    }\n+\n     public void testInitialLocation() throws Exception {\n         splitPane.setSize(1000, 2000);\n         splitPane.setBorder(BorderFactory.createEmptyBorder(5, 10, 15, 20));",
                "deletions": 0
            }
        ]
    },
    {
        "repo": "harmony-classlib",
        "message": "Applied patches from:\n\n  [#HARMONY-2588] [classlib][swing] javax.swing.plaf.basic.\n    BasicInternalFrameTitlePane.SizeAction.getKeys() returns empty array\n\n  [#HARMONY-2604] [classlib][swing] javax.swing.plaf.basic.\n    BasicInternalFrameTitlePane.SizeAction.actionPerformed(null) throws NPE\n\n  [#HARMONY-2608] [classlib][swing] javax.swing.plaf.basic.\n    BasicInternalFrameTitlePane.MoveAction has inconsistencies with RI\n\nand common regression test patch.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/harmony/enhanced/classlib/trunk@495927 13f79535-47bb-0310-9956-ffa450edef68",
        "commit": "https://github.com/apache/harmony-classlib/commit/450a1447132275de3797dcb64f2f1b2a36c0db28",
        "parent": "https://github.com/apache/harmony-classlib/commit/2bb610381d75492d26d82dd333d10c85d3a08bf6",
        "bug_id": "harmony-classlib_301",
        "file": [
            {
                "sha": "fcd905b0705fd33b228d0732b2f4c0d381f55557",
                "filename": "modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/450a1447132275de3797dcb64f2f1b2a36c0db28/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/450a1447132275de3797dcb64f2f1b2a36c0db28/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java",
                "status": "modified",
                "changes": 19,
                "additions": 19,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/main/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePane.java?ref=450a1447132275de3797dcb64f2f1b2a36c0db28",
                "patch": "@@ -140,14 +140,33 @@ public void actionPerformed(final ActionEvent e) {\n     }\n \n     public class MoveAction extends AbstractAction {\n+        private static final String MOVE_ACTION_NAME = \"Move\";\n+        \n+        public MoveAction() {\n+            putValue(Action.NAME, MOVE_ACTION_NAME);\n+        }\n+        \n         public void actionPerformed(final ActionEvent e) {\n+            if (e == null) {\n+                return;\n+            }\n+            \n             ((BasicDesktopPaneUI)frame.getDesktopPane().getUI()).\n                 frameOperation = BasicDesktopPaneUI.DRAGGING;\n         }\n     }\n \n     public class SizeAction extends AbstractAction {\n+        private static final String SIZE_ACTION_NAME = \"Size\";\n+        \n+        public SizeAction() {\n+            putValue(Action.NAME, SIZE_ACTION_NAME);\n+        }\n+        \n         public void actionPerformed(final ActionEvent e) {\n+            if (e == null) {\n+                return;\n+            }\n             ((BasicDesktopPaneUI)frame.getDesktopPane().getUI()).\n                 frameOperation = BasicDesktopPaneUI.RESIZING;\n         }",
                "deletions": 0
            },
            {
                "sha": "8a91c72145a6c851a5d9d27709ed94047e1e2cd5",
                "filename": "modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "blob_url": "https://github.com/apache/harmony-classlib/blob/450a1447132275de3797dcb64f2f1b2a36c0db28/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "raw_url": "https://github.com/apache/harmony-classlib/raw/450a1447132275de3797dcb64f2f1b2a36c0db28/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java",
                "status": "modified",
                "changes": 55,
                "additions": 55,
                "contents_url": "https://api.github.com/repos/apache/harmony-classlib/contents/modules/swing/src/test/api/java/common/javax/swing/plaf/basic/BasicInternalFrameTitlePaneTest.java?ref=450a1447132275de3797dcb64f2f1b2a36c0db28",
                "patch": "@@ -27,6 +27,8 @@\n import java.awt.Rectangle;\n import java.beans.PropertyChangeListener;\n import java.beans.PropertyVetoException;\n+\n+import javax.swing.Action;\n import javax.swing.JDesktopPane;\n import javax.swing.JFrame;\n import javax.swing.JInternalFrame;\n@@ -37,6 +39,7 @@\n import javax.swing.UIManager;\n import javax.swing.event.InternalFrameAdapter;\n import javax.swing.event.InternalFrameEvent;\n+import javax.swing.plaf.metal.MetalInternalFrameTitlePane;\n \n public class BasicInternalFrameTitlePaneTest extends SwingTestCase {\n     private BasicInternalFrameTitlePane pane;\n@@ -540,4 +543,56 @@ public void testPaintTitleBackground() {\n     public void testPaintComponent() {\n         // Note: painting code, cannot test\n     }\n+    \n+    /**\n+     * Regression test for HARMONY-2608\n+     * */\n+    public void testMoveActionKey() {\n+        BasicInternalFrameTitlePane.MoveAction m = pane.new MoveAction();\n+        assertEquals(1, m.getKeys().length);\n+        String key = (String)m.getKeys()[0];\n+        assertEquals(Action.NAME, key);\n+        assertEquals(\"Move\", m.getValue(key));\n+    }\n+    \n+    /**\n+     * Regression test for HARMONY-2608\n+     * */\n+    public void testMoveActionPerformed() {\n+        BasicInternalFrameTitlePane.MoveAction m = pane.new MoveAction();\n+        try {\n+            m.actionPerformed(null);\n+        } catch ( NullPointerException e) { \n+            fail(\"NPE shouldn't be thrown\");\n+        }\n+    }\n+    \n+    /**\n+     * Regression test for HARMONY-2604\n+     * */\n+    public void testSizeActionPerformed() {\n+        String str = \"test string\";\n+        JInternalFrame jf = new JInternalFrame(str);\n+        MetalInternalFrameTitlePane jp = new MetalInternalFrameTitlePane(jf);\n+        BasicInternalFrameTitlePane.SizeAction m = jp.new SizeAction();\n+        try {\n+            m.actionPerformed(null);\n+        } catch (NullPointerException e) {\n+            fail(\"NPE shouldn't be thrown\");\n+        }\n+    }\n+    \n+    /**\n+     * Regression test for HARMONY-2588\n+     * */\n+    public void testSizeActionKey() {\n+        String str = \"test string\";\n+        JInternalFrame jf = new JInternalFrame(str);\n+        MetalInternalFrameTitlePane jp = new MetalInternalFrameTitlePane(jf);\n+        BasicInternalFrameTitlePane.SizeAction m = jp.new SizeAction();\n+        assertEquals(1, m.getKeys().length);\n+        String key = (String)m.getKeys()[0];\n+        assertEquals(Action.NAME, key);\n+        assertEquals(\"Size\", m.getValue(key));\n+   } \n }",
                "deletions": 0
            }
        ]
    }
]