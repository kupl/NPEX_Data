{
    "pdfbox_03449fd": {
        "bug_id": "pdfbox_03449fd",
        "commit": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "patch": "@@ -1330,6 +1330,10 @@ public void write(PDDocument doc, SignatureInterface signInterface) throws IOExc\n                 missingID = false;\n             }\n         }\n+        else\n+        {\n+            idArray = new COSArray();\n+        }\n         // check for an existing documentID\n         if (idArray != null && idArray.size() == 2)\n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/03449fd43fb9bafb630a7e54a4255a6e862dfdcc/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "sha": "a145699efc871fb5cffaf2675dd66a9e0739d3ea",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824693 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784",
        "patched_files": [
            "COSWriter.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "COSWriterTest.java"
        ]
    },
    "pdfbox_0b862d2": {
        "bug_id": "pdfbox_0b862d2",
        "commit": "https://github.com/apache/pdfbox/commit/0b862d20780c2d395e99aa279e9b095c64a5eae2",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/pdfbox/blob/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java?ref=0b862d20780c2d395e99aa279e9b095c64a5eae2",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
                "patch": "@@ -83,6 +83,10 @@\n      * A common COSName value.\n      */\n     public static final COSName ANNOTS = new COSName( \"Annots\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName ANTI_ALIAS = new COSName( \"AntiAlias\" );\n     /**\n      * A common COSName value.\n      */\n@@ -275,9 +279,13 @@\n      */\n     public static final COSName COLUMNS = new COSName( \"Columns\" );\n     /**\n-    * A common COSName value.\n-    */\n+     * A common COSName value.\n+     */\n     public static final COSName CONTENTS = new COSName( \"Contents\" );\n+     /**\n+      * A common COSName value.\n+      */\n+    public static final COSName COORDS = new COSName( \"Coords\" );\n     /**\n     * A common COSName value.\n     */\n@@ -433,6 +441,11 @@\n     /** \"ExtGState\" */\n     public static final COSName EXT_G_STATE = new COSName( \"ExtGState\" );\n \n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName EXTEND = new COSName( \"Extend\" );\n+\n     /** \"Extends\" */\n     public static final COSName EXTENDS = new COSName( \"Extends\" );\n \n@@ -533,6 +546,10 @@\n      * A common COSName value.\n      */\n     public static final COSName FT = new COSName( \"FT\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName FUNCTION = new COSName( \"Function\" );\n     /**\n      * A common COSName value.\n      */\n@@ -944,6 +961,10 @@\n \n     /** \"Shading\" */\n     public static final COSName SHADING = new COSName( \"Shading\" );\n+    /**\n+     * A common COSName value.\n+     */\n+    public static final COSName SHADING_TYPE = new COSName( \"ShadingType\" );\n     /**\n      * A common COSName value.\n      */",
                "raw_url": "https://github.com/apache/pdfbox/raw/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/cos/COSName.java",
                "sha": "40499fead8d570732b2a06ca9046b436bb3b0905",
                "status": "modified"
            },
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/pdfbox/blob/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java?ref=0b862d20780c2d395e99aa279e9b095c64a5eae2",
                "deletions": 15,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java",
                "patch": "@@ -20,6 +20,7 @@\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSBoolean;\n import org.apache.pdfbox.cos.COSArray;\n+import org.apache.pdfbox.cos.COSFloat;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.pdmodel.graphics.color.PDColorSpaceFactory;\n@@ -41,7 +42,11 @@\n {\n     private COSDictionary DictShading;\n     private COSName shadingname;\n-\n+    private COSArray domain = null;\n+    private COSArray extend = null;\n+    private PDFunction function = null;\n+    private PDColorSpace colorspace = null;\n+    \n     /**\n      * The name of this object.\n      */\n@@ -105,7 +110,7 @@ public COSName getShadingName()\n     */\n     public int getShadingType()\n     {\n-        return DictShading.getInt(\"ShadingType\");\n+        return DictShading.getInt(COSName.SHADING_TYPE);\n     }\n     \n     /**\n@@ -116,7 +121,11 @@ public int getShadingType()\n     */\n     public PDColorSpace getColorSpace() throws IOException\n     {\n-        return PDColorSpaceFactory.createColorSpace(DictShading.getDictionaryObject(\"ColorSpace\"));\n+        if (colorspace == null)\n+        {\n+            colorspace = PDColorSpaceFactory.createColorSpace(DictShading.getDictionaryObject(COSName.COLORSPACE));\n+        }\n+        return colorspace;\n     }\n     \n     /**\n@@ -126,7 +135,7 @@ public PDColorSpace getColorSpace() throws IOException\n     */\n     public boolean getAntiAlias()\n     {\n-        return DictShading.getBoolean(\"AntiAlias\",false);\n+        return DictShading.getBoolean(COSName.ANTI_ALIAS,false);\n     }\n     \n     /**\n@@ -136,7 +145,7 @@ public boolean getAntiAlias()\n     */\n     public COSArray getCoords()\n     {\n-        return (COSArray)(DictShading.getDictionaryObject(\"Coords\"));\n+        return (COSArray)(DictShading.getDictionaryObject(COSName.COORDS));\n     }\n     \n     /**\n@@ -146,7 +155,11 @@ public COSArray getCoords()\n     */\n     public PDFunction getFunction() throws IOException\n     {\n-        return PDFunction.create(DictShading.getDictionaryObject(\"Function\"));\n+        if (function == null)\n+        {\n+            function = PDFunction.create(DictShading.getDictionaryObject(COSName.FUNCTION));\n+        }\n+        return function;\n     }\n     \n     /**\n@@ -156,7 +169,18 @@ public PDFunction getFunction() throws IOException\n     */\n     public COSArray getDomain()\n     {\n-        return (COSArray)(DictShading.getDictionaryObject(\"Domain\"));\n+        if (domain == null) \n+        {\n+            domain = (COSArray)(DictShading.getDictionaryObject(COSName.DOMAIN));\n+            // use default values\n+            if (domain == null) \n+            {\n+                domain = new COSArray();\n+                domain.add(new COSFloat(0.0f));\n+                domain.add(new COSFloat(1.0f));\n+            }\n+        }\n+        return domain;\n     }\n     \n     /**\n@@ -167,15 +191,18 @@ public COSArray getDomain()\n     */\n     public COSArray getExtend()\n     {\n-        COSArray arExtend=(COSArray)(DictShading.getDictionaryObject(\"Extend\"));\n-        if (arExtend == null)\n+        if (extend == null)\n         {\n-            arExtend = new COSArray();\n-            arExtend.add(COSBoolean.FALSE);\n-            arExtend.add(COSBoolean.FALSE);\n+            extend = (COSArray)(DictShading.getDictionaryObject(COSName.EXTEND));\n+            // use default values\n+            if (extend == null)\n+            {\n+                extend = new COSArray();\n+                extend.add(COSBoolean.FALSE);\n+                extend.add(COSBoolean.FALSE);\n+            }\n         }\n-        \n-        return arExtend;\n+        return extend;\n     }\n     \n     /**\n@@ -205,7 +232,7 @@ public String toString()\n             + \"\\tShadingType: \" + getShadingType() + \"\\n\"\n             + \"\\tColorSpace: \" + sColorSpace + \"\\n\"\n             + \"\\tAntiAlias: \" + getAntiAlias() + \"\\n\"\n-            + \"\\tCoords: \" + getCoords().toString() + \"\\n\"\n+            + \"\\tCoords: \" + (getCoords() != null ? getCoords().toString() : \"\") + \"\\n\"\n             + \"\\tDomain: \" + getDomain().toString() + \"\\n\"\n             + \"\\tFunction: \" + sFunction + \"\\n\"\n             + \"\\tExtend: \" + getExtend().toString() + \"\\n\"",
                "raw_url": "https://github.com/apache/pdfbox/raw/0b862d20780c2d395e99aa279e9b095c64a5eae2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/PDShading.java",
                "sha": "855de4640edb4871043ead63d8c9d9a4edf7d054",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1013: fixed NPE as proposed by Craig Stires, added some more COSName constants, introduced more default values\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1133328 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/bcf4b6e430ac12a7dd494f3ad1686a7ee995828a",
        "patched_files": [
            "COSName.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestCOSName.java"
        ]
    },
    "pdfbox_138b0d6": {
        "bug_id": "pdfbox_138b0d6",
        "commit": "https://github.com/apache/pdfbox/commit/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java?ref=138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.documentinterchange.logicalstructure;\n \n+import java.util.Collections;\n import java.util.Iterator;\n import java.util.Map;\n \n@@ -743,7 +744,7 @@ private PDStructureTreeRoot getStructureTreeRoot()\n         {\n             return root.getRoleMap();\n         }\n-        return null;\n+        return Collections.emptyMap();\n     }\n \n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/138b0d6c8168e03b5f2b4ffe92301bdb7bcb82a1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/documentinterchange/logicalstructure/PDStructureElement.java",
                "sha": "397aacd67cbb7294e7b8e79a352bd076760366de",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824701 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/03449fd43fb9bafb630a7e54a4255a6e862dfdcc",
        "patched_files": [
            "PDStructureElement.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDStructureElementTest.java"
        ]
    },
    "pdfbox_13fd53c": {
        "bug_id": "pdfbox_13fd53c",
        "commit": "https://github.com/apache/pdfbox/commit/13fd53c704d0a03c0c2f8af3829669d9a9b701f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pdfbox/blob/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=13fd53c704d0a03c0c2f8af3829669d9a9b701f3",
                "deletions": 7,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -141,7 +141,7 @@ else if (length == 2)\n     /**\n      * This will clear AFM resources that are stored statically. This is usually not a problem\n      * unless you want to reclaim resources for a long running process.\n-     * \n+     *\n      * SPECIAL NOTE: The font calculations are currently in COSObject, which is where they will\n      * reside until PDFont is mature enough to take them over. PDFont is the appropriate place for\n      * them and not in COSObject but we need font calculations for text extraction. THIS METHOD WILL\n@@ -196,6 +196,7 @@ public PDFontDescriptor getFontDescriptor()\n                 {\n                     fontDescriptor = new PDFontDescriptorAFM(afm);\n                 }\n+                // it shouldn't be possible to reach this point...\n             }\n         }\n         return fontDescriptor;\n@@ -691,12 +692,7 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        // not all fonts have a font descriptor\n-        if (getFontDescriptor() != null)\n-        {\n-            return getFontDescriptor().isSymbolic();\n-        }\n-        return false;\n+        return getFontDescriptor().isSymbolic();\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/13fd53c704d0a03c0c2f8af3829669d9a9b701f3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "d2b915413d935dd06cea02da39343aaa656d5d4c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: Allow NPE which hopefully never happens\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604018 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/493ca599868ef0a1b8bbe8d19d102282bef95ebf",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_1d86d5b": {
        "bug_id": "pdfbox_1d86d5b",
        "commit": "https://github.com/apache/pdfbox/commit/1d86d5b191c6366b9df45767d59b3b058e049784",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=1d86d5b191c6366b9df45767d59b3b058e049784",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1339,6 +1339,12 @@ public ExternalSigningSupport saveIncrementalForExternalSigning(OutputStream out\n                 break;\n             }\n         }\n+\n+        if (foundSignature == null)\n+        {\n+            throw new IllegalStateException(\"document does not contain signature fields\");\n+        }\n+\n         int[] byteRange = foundSignature.getByteRange();\n         if (!Arrays.equals(byteRange, RESERVE_BYTE_RANGE))\n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/1d86d5b191c6366b9df45767d59b3b058e049784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "1f12af880a0b3bc86466cbe15eee3c6ab0f523d4",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824684 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/0279494b1bf88b1536dd57ad4b2a0c8da62e7191",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_2390a37": {
        "bug_id": "pdfbox_2390a37",
        "commit": "https://github.com/apache/pdfbox/commit/2390a371a24e9a53ddc16025049f33a4d5979506",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=2390a371a24e9a53ddc16025049f33a4d5979506",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -784,7 +784,11 @@ public float getFontWidth( int charCode )\n         if (charCode >= firstChar && charCode <= lastChar)\n         {\n             List<Float> widths = getWidths();\n-            width = widths.get(charCode-firstChar).floatValue();\n+            // maybe the font doesn't provide any widths\n+            if (widths != null)\n+            {\n+                width = widths.get(charCode-firstChar).floatValue();\n+            }\n         }\n         else \n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/2390a371a24e9a53ddc16025049f33a4d5979506/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "fae3a9390203e82ca39ba05928a165f0692f7c87",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1049: fixed a NPE when using external type1 fonts as proposed by Henning Saul\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1139497 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/23d2430692f4d4c5fde108cc30651bb4f24d95e0",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_2b7a2d3": {
        "bug_id": "pdfbox_2b7a2d3",
        "commit": "https://github.com/apache/pdfbox/commit/2b7a2d3332424bff79910cc0c0248ea8507e7ba9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=2b7a2d3332424bff79910cc0c0248ea8507e7ba9",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "patch": "@@ -574,7 +574,11 @@ protected void doWriteTrailer(COSDocument doc) throws IOException\n         // Remove a checksum if present\n         trailer.removeItem( COSName.DOC_CHECKSUM );\n \n-        ((COSArray) trailer.getItem(COSName.ID)).setDirect(true);\n+        COSArray idArray = trailer.getCOSArray(COSName.ID);\n+        if (idArray != null)\n+        {\n+            idArray.setDirect(true);\n+        }\n \n         trailer.accept(this);\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/2b7a2d3332424bff79910cc0c0248ea8507e7ba9/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "sha": "535375bb86e5a8eb71e792734e6ebb9028d23414",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-45: avoid NPE, as suggested by softvisionfd\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1857149 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/548dd7a6bbffb8de701441d6b5b83fe095ef03bd",
        "patched_files": [
            "COSWriter.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "COSWriterTest.java"
        ]
    },
    "pdfbox_2b9bb65": {
        "bug_id": "pdfbox_2b9bb65",
        "commit": "https://github.com/apache/pdfbox/commit/2b9bb6526de705de7842ac27da8f1b06e5cf7f69",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java?ref=2b9bb6526de705de7842ac27da8f1b06e5cf7f69",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "patch": "@@ -302,7 +302,7 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         List<String> filters = getFilters();\n         ByteArrayInputStream in = new ByteArrayInputStream(rawData);\n         ByteArrayOutputStream out = new ByteArrayOutputStream(rawData.length);\n-        for (int i = 0; i < filters.size(); i++)\n+        for (int i = 0; filters != null && i < filters.size(); i++)\n         {\n             // TODO handling of abbreviated names belongs here, rather than in other classes\n             out.reset();",
                "raw_url": "https://github.com/apache/pdfbox/raw/2b9bb6526de705de7842ac27da8f1b06e5cf7f69/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/PDInlineImage.java",
                "sha": "97e94e7f6a303094b61fe1d6abcd1ca77771d93d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783539 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/beeaaad60901519bb869cc3a9c694299e64d0d4a",
        "patched_files": [
            "PDInlineImage.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDInlineImageTest.java"
        ]
    },
    "pdfbox_2cb23c5": {
        "bug_id": "pdfbox_2cb23c5",
        "commit": "https://github.com/apache/pdfbox/commit/2cb23c52a77ed378f31d180f07c579fef01a3ca2",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=2cb23c52a77ed378f31d180f07c579fef01a3ca2",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -124,6 +124,10 @@\n         @SuppressWarnings(\"unused\")\r\n         Header header = readHeader(input);\r\n         String[] nameIndex = readStringIndexData(input);\r\n+        if (nameIndex == null)\r\n+        {\r\n+            throw new IOException(\"Name index missing in CFF font\");\r\n+        }\r\n         byte[][] topDictIndex = readIndexData(input);\r\n         stringIndex = readStringIndexData(input);\r\n         byte[][] globalSubrIndex = readIndexData(input);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/2cb23c52a77ed378f31d180f07c579fef01a3ca2/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "2f64eb0814545182692eb475fbb3615ee300f30a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3855: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1800901 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/30ffe3356d907cb61dedb416cf11222104668337",
        "patched_files": [
            "CFFParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_2d42753": {
        "bug_id": "pdfbox_2d42753",
        "commit": "https://github.com/apache/pdfbox/commit/2d427535cb0e49380e9e9d0ac3387160ae76710e",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/pdfbox/blob/2d427535cb0e49380e9e9d0ac3387160ae76710e/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "changes": 45,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java?ref=2d427535cb0e49380e9e9d0ac3387160ae76710e",
                "deletions": 21,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "patch": "@@ -101,28 +101,31 @@ public CMap parse(InputStream input) throws IOException\n                     break;\n                 }\n \n-                switch (op.op)\n+                if (previousToken != null)\n                 {\n-                    case \"usecmap\":\n-                        parseUsecmap((LiteralName) previousToken, result);\n-                        break;\n-                    case \"begincodespacerange\":\n-                        parseBegincodespacerange((Number) previousToken, cmapStream, result);\n-                        break;\n-                    case \"beginbfchar\":\n-                        parseBeginbfchar((Number) previousToken, cmapStream, result);\n-                        break;\n-                    case \"beginbfrange\":\n-                        parseBeginbfrange((Number) previousToken, cmapStream, result);\n-                        break;\n-                    case \"begincidchar\":\n-                        parseBegincidchar((Number) previousToken, cmapStream, result);\n-                        break;\n-                    case \"begincidrange\":\n-                        parseBegincidrange((Integer) previousToken, cmapStream, result);\n-                        break;\n-                    default:\n-                        break;\n+                    switch (op.op)\n+                    {\n+                        case \"usecmap\":\n+                            parseUsecmap((LiteralName) previousToken, result);\n+                            break;\n+                        case \"begincodespacerange\":\n+                            parseBegincodespacerange((Number) previousToken, cmapStream, result);\n+                            break;\n+                        case \"beginbfchar\":\n+                            parseBeginbfchar((Number) previousToken, cmapStream, result);\n+                            break;\n+                        case \"beginbfrange\":\n+                            parseBeginbfrange((Number) previousToken, cmapStream, result);\n+                            break;\n+                        case \"begincidchar\":\n+                            parseBegincidchar((Number) previousToken, cmapStream, result);\n+                            break;\n+                        case \"begincidrange\":\n+                            parseBegincidrange((Integer) previousToken, cmapStream, result);\n+                            break;\n+                        default:\n+                            break;\n+                    }\n                 }\n             }\n             else if (token instanceof LiteralName)",
                "raw_url": "https://github.com/apache/pdfbox/raw/2d427535cb0e49380e9e9d0ac3387160ae76710e/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "sha": "8d8f1324485f7105de2851f32d94893a33ce92c2",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4071: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1870927 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/6ec9b7966b0c2ba33dacb9dc942f33525f158155",
        "patched_files": [
            "CMapParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestCMapParser.java"
        ]
    },
    "pdfbox_30c58bb": {
        "bug_id": "pdfbox_30c58bb",
        "commit": "https://github.com/apache/pdfbox/commit/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "patch": "@@ -91,7 +91,7 @@ public OutputStream createOutputStream() throws IOException\n      *\n      * @throws IOException If an IO error occurs during reading.\n      */\n-    public InputStream createInputStream() throws IOException\n+    public InputStream createInputStream()\n     {\n         return new ByteArrayInputStream( data );\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "sha": "78fe1d568d90a942834b146b9a0a534786586741",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -129,7 +129,7 @@ else if (length == 2)\n \n     private List<Integer> widths = null;\n \n-    private PDFontDescriptor fontDescriptor = null;\n+    protected PDFontDescriptor fontDescriptor = null;\n     private boolean widthsAreMissing = false;\n \n     // formerly in PDSimpleFont\n@@ -196,7 +196,6 @@ public PDFontDescriptor getFontDescriptor()\n                 {\n                     fontDescriptor = new PDFontDescriptorAFM(afm);\n                 }\n-                // it shouldn't be possible to reach this point...\n             }\n         }\n         return fontDescriptor;\n@@ -692,6 +691,10 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n+        if (getFontDescriptor() == null)\n+        {\n+            return false;\n+        }\n         return getFontDescriptor().isSymbolic();\n     }\n ",
                "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "330924151a797445227f6d47449be62e7825de34",
                "status": "modified"
            },
            {
                "additions": 26,
                "blob_url": "https://github.com/apache/pdfbox/blob/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java?ref=30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
                "deletions": 6,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "patch": "@@ -93,19 +93,20 @@ public static PDTrueTypeFont loadTTF(PDDocument doc, File file) throws IOExcepti\n      *\n      * @param fontDictionary The font dictionary according to the PDF specification.\n      */\n-    public PDTrueTypeFont(COSDictionary fontDictionary)\n+    public PDTrueTypeFont(COSDictionary fontDictionary)  throws IOException\n     {\n         super(fontDictionary);\n+        getTTFFont(); // load the font file\n     }\n \n     /**\n      * Creates a new TrueType font for embedding.\n      */\n-    private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n+    private PDTrueTypeFont(PDDocument document, InputStream ttfStream) throws IOException\n     {\n         dict.setItem(COSName.SUBTYPE, COSName.TRUE_TYPE);\n \n-        PDStream stream = new PDStream(document, ttf, false);\n+        PDStream stream = new PDStream(document, ttfStream, false);\n         stream.getStream().setInt(COSName.LENGTH1, stream.getByteArray().length); // todo: wrong?\n         stream.addCompression();\n \n@@ -122,7 +123,8 @@ private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n         try\n         {\n             stream2 = stream.createInputStream();\n-            fd = getFontDescriptor(new TTFParser().parseTTF(stream2));\n+            ttf = new TTFParser().parseTTF(stream2);\n+            fd = makeFontDescriptor(ttf);\n         }\n         finally\n         {\n@@ -133,8 +135,26 @@ private PDTrueTypeFont(PDDocument document, InputStream ttf) throws IOException\n         dict.setItem(COSName.FONT_DESC, fd);\n     }\n \n+    @Override\n+    public PDFontDescriptor getFontDescriptor()\n+    {\n+        if (fontDescriptor == null)\n+        {\n+            COSDictionary fd = (COSDictionary) dict.getDictionaryObject(COSName.FONT_DESC);\n+            if (fd != null)\n+            {\n+                fontDescriptor = new PDFontDescriptorDictionary(fd);\n+            }\n+            else\n+            {\n+                fontDescriptor = makeFontDescriptor(ttf);\n+            }\n+        }\n+        return fontDescriptor;\n+    }\n+\n     // creates a new font descriptor dictionary for the given TTF\n-    private PDFontDescriptorDictionary getFontDescriptor(TrueTypeFont ttf) throws IOException\n+    private PDFontDescriptorDictionary makeFontDescriptor(TrueTypeFont ttf)\n     {\n         PDFontDescriptorDictionary fd = new PDFontDescriptorDictionary();\n \n@@ -334,7 +354,7 @@ public TrueTypeFont getTTFFont() throws IOException\n     {\n         if (ttf == null)\n         {\n-            PDFontDescriptorDictionary fd = (PDFontDescriptorDictionary) getFontDescriptor();\n+            PDFontDescriptorDictionary fd = (PDFontDescriptorDictionary) super.getFontDescriptor();\n             if (fd != null)\n             {\n                 PDStream ff2Stream = fd.getFontFile2();",
                "raw_url": "https://github.com/apache/pdfbox/raw/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDTrueTypeFont.java",
                "sha": "98f6897e121308e95e88be778f4857edef33cfa9",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: Prevent NPE in system TTF getFontDescriptor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604679 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/0b4678aaaa28bb531843b367a7ae26e34ac81236",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_31b832b": {
        "bug_id": "pdfbox_31b832b",
        "commit": "https://github.com/apache/pdfbox/commit/31b832bc5434ec7e50502644cabcf0d995de28a4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=31b832bc5434ec7e50502644cabcf0d995de28a4",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -156,7 +156,7 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             else\r\n             {\r\n                 LOG.warn(\"COSDictionary expected, but got \" +\r\n-                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n+                        (base == null ? \"null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/pdfbox/raw/31b832bc5434ec7e50502644cabcf0d995de28a4/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "a3453dc2da422d05bb9ad8010106f8cfe3e6e94b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854506 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3",
        "patched_files": [
            "PDPageTree.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_3356102": {
        "bug_id": "pdfbox_3356102",
        "commit": "https://github.com/apache/pdfbox/commit/3356102c65af2032982c711b32fba77ac5ff382d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=3356102c65af2032982c711b32fba77ac5ff382d",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -517,7 +517,7 @@ public float getSpaceWidth()\n             COSBase toUnicode = dict.getDictionaryObject(COSName.TO_UNICODE);\n             try\n             {\n-                if (toUnicode != null)\n+                if (toUnicode != null && toUnicodeCMap != null)\n                 {\n                     int spaceMapping = toUnicodeCMap.getSpaceMapping();\n                     if (spaceMapping > -1)",
                "raw_url": "https://github.com/apache/pdfbox/raw/3356102c65af2032982c711b32fba77ac5ff382d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "08f2847a3a28c62725a0b5160a03b88c8e1bf0a6",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852: avoid NPE possibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783127 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/8355db7b782a03a4fe8963fbfb8710492b0b929d",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_3a43692": {
        "bug_id": "pdfbox_3a43692",
        "commit": "https://github.com/apache/pdfbox/commit/3a436929423ce82b58ab48cfed4f77f2312c62b3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=3a436929423ce82b58ab48cfed4f77f2312c62b3",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -155,7 +155,8 @@ public static COSBase getInheritableAttribute(COSDictionary node, COSName key)\n             }\r\n             else\r\n             {\r\n-                LOG.warn(\"COSDictionary expected, but got \" + base.getClass().getSimpleName());\r\n+                LOG.warn(\"COSDictionary expected, but got \" +\r\n+                        (base == null ? \" null\" : base.getClass().getSimpleName()));\r\n             }\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/pdfbox/raw/3a436929423ce82b58ab48cfed4f77f2312c62b3/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "a069722b7c2a8758d3f14d83bce29fa9269aa906",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4476: avoid NPE, as suggested by Derek Liu\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1854504 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e13b880b1fd5a44cd3bd002eb3dc5f3477f4f9dc",
        "patched_files": [
            "PDPageTree.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_4551be8": {
        "bug_id": "pdfbox_4551be8",
        "commit": "https://github.com/apache/pdfbox/commit/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "patch": "@@ -1222,6 +1222,8 @@ public void write(PDDocument doc) throws IOException\n      * @param signInterface class to be used for signing \n      *\n      * @throws IOException If an error occurs while generating the data.\n+     * @throws IllegalStateException If the document has an encryption dictionary but no protection\n+     * policy.\n      */\n     public void write(PDDocument doc, SignatureInterface signInterface) throws IOException\n     {\n@@ -1251,6 +1253,11 @@ public void write(PDDocument doc, SignatureInterface signInterface) throws IOExc\n             if (pdDocument.getEncryption() != null)\n             {\n                 SecurityHandler securityHandler = pdDocument.getEncryption().getSecurityHandler();\n+                if (!securityHandler.hasProtectionPolicy())\n+                {\n+                    throw new IllegalStateException(\"PDF contains an encryption dictionary, please remove it with \"\n+                            + \"setAllSecurityToBeRemoved() or set a protection policy with protect()\");\n+                }\n                 securityHandler.prepareDocumentForEncryption(pdDocument);\n                 willEncrypt = true;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdfwriter/COSWriter.java",
                "sha": "d1927c505f42e2ec42255f567e4495143e5c453a",
                "status": "modified"
            },
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
                "patch": "@@ -483,4 +483,13 @@ private KeyTransRecipientInfo computeRecipientInfo(X509Certificate x509certifica\n         RecipientIdentifier recipientId = new RecipientIdentifier(serial);\n         return new KeyTransRecipientInfo(recipientId, algorithmId, octets);\n     }\n+    \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasProtectionPolicy()\n+    {\n+        return policy != null;\n+    }\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/PublicKeySecurityHandler.java",
                "sha": "d8cdaaa69a4b81343433cb36aa074bd16612a152",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
                "patch": "@@ -533,4 +533,11 @@ public void setAES(boolean aesValue)\n     {\n         useAES = aesValue;\n     }\n+\n+    /**\n+     * Returns whether a protection policy has been set.\n+     * \n+     * @return true if a protection policy has been set.\n+     */\n+    public abstract boolean hasProtectionPolicy();\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/SecurityHandler.java",
                "sha": "64c0ee88d5fe9eb8d37e7440ad0c9718db8d5822",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pdfbox/blob/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java?ref=4551be8739d6ca459f9ca0b00ef34fcd89d47fe2",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
                "patch": "@@ -1152,4 +1152,12 @@ private static void logIfStrongEncryptionMissing()\n         }\n     }\n \n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public boolean hasProtectionPolicy()\n+    {\n+        return policy != null;\n+    }\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/4551be8739d6ca459f9ca0b00ef34fcd89d47fe2/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/encryption/StandardSecurityHandler.java",
                "sha": "4f0e5f6d4cc49cb1c28724ce4d8c6873324707e3",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2769: avoid NPE if no protection policy when saving\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1675453 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e5f70f27402a704942e35278964a9ae8955df5b3",
        "patched_files": [
            "COSWriter.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "COSWriterTest.java"
        ]
    },
    "pdfbox_4c4ed24": {
        "bug_id": "pdfbox_4c4ed24",
        "commit": "https://github.com/apache/pdfbox/commit/4c4ed241142a9f78e7fd51f7df1749a011ff0eda",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=4c4ed241142a9f78e7fd51f7df1749a011ff0eda",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "patch": "@@ -57,7 +57,7 @@\n {\n     private static final Log LOG = LogFactory.getLog(PDICCBased.class);\n \n-    private PDStream stream;\n+    private final PDStream stream;\n     private int numberOfComponents = -1;\n     private ICC_Profile iccProfile;\n     private PDColorSpace alternateColorSpace;\n@@ -72,7 +72,8 @@ public PDICCBased(PDDocument doc)\n     {\n         array = new COSArray();\n         array.add(COSName.ICCBASED);\n-        array.add(new PDStream(doc));\n+        stream = new PDStream(doc);\n+        array.add(stream);\n     }\n \n     /**\n@@ -148,7 +149,7 @@ private void loadICCProfile() throws IOException\n                 // fall back to alternateColorSpace color space\n                 awtColorSpace = null;\n                 alternateColorSpace = getAlternateColorSpace();\n-                LOG.error(\"Can't read embedded ICC profile, using alternate color space: \" + alternateColorSpace.getName());\n+                LOG.error(\"Can't read embedded ICC profile (\" + e.getLocalizedMessage() + \"), using alternate color space: \" + alternateColorSpace.getName());\n                 initialColor = alternateColorSpace.getInitialColor();\n             }\n             else",
                "raw_url": "https://github.com/apache/pdfbox/raw/4c4ed241142a9f78e7fd51f7df1749a011ff0eda/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "sha": "4a66bb7b1670dd630fce9467f23e4e379f23590a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2812: avoid potiential later NPE by assigning local field\nPDFBOX-2576: make field final; improve message\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681649 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/c781e42cd9c6aa0ffebf0ce96abf776ccb6a2f18",
        "patched_files": [
            "PDICCBased.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDICCBasedTest.java"
        ]
    },
    "pdfbox_4dc3663": {
        "bug_id": "pdfbox_4dc3663",
        "commit": "https://github.com/apache/pdfbox/commit/4dc366384361b299355a463a0e53eca9d15ca175",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=4dc366384361b299355a463a0e53eca9d15ca175",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -29,7 +29,6 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSNumber;\n-import org.apache.pdfbox.cos.COSString;\n import org.apache.pdfbox.pdmodel.PDDocument;\n import org.apache.pdfbox.pdmodel.PDPage;\n import org.apache.pdfbox.pdmodel.PDPageContentStream;\n@@ -352,8 +351,7 @@ public PDField getField(String fullyQualifiedName)\n      */\n     public String getDefaultAppearance()\n     {\n-        COSString defaultAppearance = (COSString) dictionary.getItem(COSName.DA);\n-        return defaultAppearance.getString();\n+        return dictionary.getString(COSName.DA,\"\");\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "48fbbe44871df60806b6eff81e12455804d9ba07",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pdfbox/blob/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=4dc366384361b299355a463a0e53eca9d15ca175",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "patch": "@@ -19,6 +19,8 @@\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n import java.io.IOException;\n \n import org.apache.pdfbox.cos.COSName;\n@@ -67,6 +69,12 @@ public void testFieldsEntry()\n         // there shouldn't be an exception if there is no such field\n         assertNull(acroForm.getField(\"foo\"));\n     }\n+    \n+    @Test\n+    public void testAcroFormProperties()\n+    {\n+        assertTrue(acroForm.getDefaultAppearance().isEmpty());\n+    }\n \n     @After\n     public void tearDown() throws IOException",
                "raw_url": "https://github.com/apache/pdfbox/raw/4dc366384361b299355a463a0e53eca9d15ca175/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "sha": "2b4fa99018a2ba0d8464f5b0f1a55d3e490703d9",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2995: avoid NPE if DA is not defined\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1705415 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/be28398651ffdf6b2843e8071cb178f923e75baf",
        "patched_files": [
            "PDAcroForm.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_53fdf25": {
        "bug_id": "pdfbox_53fdf25",
        "commit": "https://github.com/apache/pdfbox/commit/53fdf250d6f303eebafe597a0867d3329a101b90",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java?ref=53fdf250d6f303eebafe597a0867d3329a101b90",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "patch": "@@ -381,6 +381,10 @@ private void updateByValue(String value)\n         // update the appearance state (AS)\n         for (PDAnnotationWidget widget : getWidgets())\n         {\n+            if (widget.getAppearance() == null)\n+            {\n+                continue;\n+            }\n             PDAppearanceEntry appearanceEntry = widget.getAppearance().getNormalAppearance();\n             if (((COSDictionary) appearanceEntry.getCOSObject()).containsKey(value))\n             {",
                "raw_url": "https://github.com/apache/pdfbox/raw/53fdf250d6f303eebafe597a0867d3329a101b90/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDButton.java",
                "sha": "fb834901b443b042d25f5504ab042f41fa4c3a8b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4366: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1845601 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/56869c987e7de00d985a18389acd0bb76c909ebf",
        "patched_files": [
            "PDButton.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDButtonTest.java"
        ]
    },
    "pdfbox_56b8196": {
        "bug_id": "pdfbox_56b8196",
        "commit": "https://github.com/apache/pdfbox/commit/56b819647ee120503fc2878d3468ee9f35272d1f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=56b819647ee120503fc2878d3468ee9f35272d1f",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -453,7 +453,7 @@ public PDField getField(String fullyQualifiedName)\n         // get the field from the field tree\n         for (PDField field : getFieldTree())\n         {\n-            if (field.getFullyQualifiedName().compareTo(fullyQualifiedName) == 0)\n+            if (field.getFullyQualifiedName().equals(fullyQualifiedName))\n             {\n                 return field;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/56b819647ee120503fc2878d3468ee9f35272d1f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "285e1b3b50c961dda277de53ac4071693f737143",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2852, PDFBOX-3547: avoid NPE in getField if supplied name is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1768224 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/6931869d1fcc56beb0ba88cbb53caab2438500ab",
        "patched_files": [
            "PDAcroForm.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_5b3c570": {
        "bug_id": "pdfbox_5b3c570",
        "commit": "https://github.com/apache/pdfbox/commit/5b3c5708af635257d12c51d1c99f274e70d2c2d1",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=5b3c5708af635257d12c51d1c99f274e70d2c2d1",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -360,6 +360,11 @@ else if (options.getPage() <= 0)\n \n         List<PDField> fields = acroForm.getFields();\n         PDSignatureField signatureField = null;\n+        if(fields == null) \n+        {\n+            fields = new ArrayList();\n+            acroForm.setFields(fields);\n+        }\n         for (PDField pdField : fields)\n         {\n             if (pdField instanceof PDSignatureField)",
                "raw_url": "https://github.com/apache/pdfbox/raw/5b3c5708af635257d12c51d1c99f274e70d2c2d1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "f8ee631ab960691aaae4a8b05a7b96a8c929e466",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1719\nNPE while signing PDF - acroform without fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1523680 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/af49e1a8a0a23151c743726cae88b0519950f436",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_5f9b1f8": {
        "bug_id": "pdfbox_5f9b1f8",
        "commit": "https://github.com/apache/pdfbox/commit/5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "patch": "@@ -41,13 +41,21 @@ public PDComplexFileSpecification()\n     }\n \n     /**\n-     * Constructor.\n+     * Constructor. Creates empty COSDictionary if dict is null.\n      *\n      * @param dict The dictionary that fulfils this file specification.\n      */\n     public PDComplexFileSpecification( COSDictionary dict )\n     {\n-        fs = dict;\n+        if (dict == null)\n+        {\n+            fs = new COSDictionary();\n+            fs.setItem( COSName.TYPE, COSName.FILESPEC );\n+        }\n+        else\n+        {\n+            fs = dict;\n+        }\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/filespecification/PDComplexFileSpecification.java",
                "sha": "8ee7a393f4bc7d8aa8b0d9b3f8adea3ed906b3e7",
                "status": "modified"
            },
            {
                "additions": 74,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "changes": 74,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "patch": "@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.Map;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.apache.pdfbox.pdmodel.PDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.PDDocumentNameDictionary;\n+import org.apache.pdfbox.pdmodel.PDEmbeddedFilesNameTreeNode;\n+import org.apache.pdfbox.pdmodel.TestPDDocumentCatalog;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDComplexFileSpecification;\n+import org.apache.pdfbox.pdmodel.common.filespecification.PDEmbeddedFile;\n+import org.junit.Test;\n+\n+import junit.framework.TestCase;\n+\n+public class TestEmbeddedFiles extends TestCase\n+{\n+    @Test\n+    public void testNullEmbeddedFile() throws IOException\n+    {\n+        PDEmbeddedFile embeddedFile = null;\n+        boolean ok = false;\n+        try\n+        {\n+            PDDocument doc = PDDocument.load(TestEmbeddedFiles.class.getResourceAsStream(\n+                \"null_PDComplexFileSpecification.pdf\"));\n+\n+            PDDocumentCatalog catalog = doc.getDocumentCatalog();\n+            PDDocumentNameDictionary names = catalog.getNames();\n+            assertEquals(\"expected two files\", 2, names.getEmbeddedFiles().getNames().size());\n+            PDEmbeddedFilesNameTreeNode embeddedFiles = names.getEmbeddedFiles();\n+\n+            PDComplexFileSpecification spec = (PDComplexFileSpecification)\n+                                            embeddedFiles.getNames().get(\"non-existent-file.docx\");\n+\n+            if (spec != null)\n+            {\n+                embeddedFile = spec.getEmbeddedFile();\n+                ok = true;\n+            }\n+            //now test for actual attachment\n+            spec = (PDComplexFileSpecification)embeddedFiles.getNames().get(\"My first attachment\");\n+            assertNotNull(\"one attachment actually exists\", spec);\n+            assertEquals(\"existing file length\", 17660, spec.getEmbeddedFile().getLength());\n+            spec = (PDComplexFileSpecification)embeddedFiles\n+                                                    .getNames().get(\"non-existent-file.docx\");\n+        }\n+        catch (NullPointerException e)\n+        {\n+            assertNotNull(\"null pointer exception\", null);\n+        }\n+        assertTrue(\"Was able to get file without exception\", ok);\n+        assertNull(\"EmbeddedFile was correctly null\", embeddedFile);\n+    }\n+\n+}\n+",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestEmbeddedFiles.java",
                "sha": "a5a699bde96421fd98650f9418c14d04c315bebc",
                "status": "added"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "changes": 0,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 0,
                "filename": "pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/pdfbox/src/test/resources/org/apache/pdfbox/pdmodel/common/null_PDComplexFileSpecification.pdf",
                "sha": "d4170b5b525446c2a9a015d50de079fe7cf87a0c",
                "status": "added"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=5f9b1f80b24f43848f4b7ddba8744e6609441c1e",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -291,7 +291,7 @@ else if( args[i].equals( NONSEQ ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file.getSubtype().equals(\"application/pdf\")) \n+                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n                                 {\n                                     if (debug)\n                                     {",
                "raw_url": "https://github.com/apache/pdfbox/raw/5f9b1f80b24f43848f4b7ddba8744e6609441c1e/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "38e65ae71e042ef03e07ee2f71983dc9861bb243",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1884: Avoid NPE in PDComplexFileSpecification\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1575069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/da5520d5e9398771ee840a27023fc0884cbd73d2",
        "patched_files": [
            "PDComplexFileSpecification.java",
            "null_PDComplexFileSpecification.java",
            "EmbeddedFiles.java",
            "ExtractText.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java",
            "TestEmbeddedFiles.java"
        ]
    },
    "pdfbox_6134c4a": {
        "bug_id": "pdfbox_6134c4a",
        "commit": "https://github.com/apache/pdfbox/commit/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89",
        "file": [
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/pdfbox/blob/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "changes": 48,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89",
                "deletions": 2,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "patch": "@@ -20,6 +20,7 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.io.ByteArrayOutputStream;\n import java.io.File;\n@@ -245,8 +246,51 @@ public void testAddMissingInformationOnAcroFormAccess()\n             return;\n         }\n     }\n-    \n-    \n+\n+    /**\n+     * PDFBOX-4235: a bad /DA string should not result in an NPE.\n+     * \n+     * @throws IOException \n+     */\n+    @Test\n+    public void testBadDA() throws IOException\n+    {\n+        try (PDDocument doc = new PDDocument())\n+        {\n+            PDPage page = new PDPage();\n+            doc.addPage(page);\n+\n+            PDAcroForm acroForm = new PDAcroForm(document);\n+            doc.getDocumentCatalog().setAcroForm(acroForm);\n+            acroForm.setDefaultResources(new PDResources());\n+\n+            PDTextField textBox = new PDTextField(acroForm);\n+            textBox.setPartialName(\"SampleField\");\n+\n+            // https://stackoverflow.com/questions/50609478/\n+            // \"tf\" is a typo, should have been \"Tf\" and this results that no font is chosen\n+            textBox.setDefaultAppearance(\"/Helv 0 tf 0 g\");\n+            acroForm.getFields().add(textBox);\n+\n+            PDAnnotationWidget widget = textBox.getWidgets().get(0);\n+            PDRectangle rect = new PDRectangle(50, 750, 200, 20);\n+            widget.setRectangle(rect);\n+            widget.setPage(page);\n+\n+            page.getAnnotations().add(widget);\n+\n+            try\n+            {\n+                textBox.setValue(\"huhu\");\n+            }\n+            catch (IllegalArgumentException ex)\n+            {\n+                return;\n+            }\n+            fail(\"IllegalArgumentException should have been thrown\");\n+        }\n+    }\n+\n     @After\n     public void tearDown() throws IOException\n     {",
                "raw_url": "https://github.com/apache/pdfbox/raw/6134c4ad0b56f3ed92529cbdd64ad2ecd7eedf89/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "sha": "fdfcc173f92f97fa39218a9fe398e211648a7718",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4235: test to check that IllegalArgumentException is thrown and no NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1832641 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/9eff016f57f7782f91f63d35ea11aee33303b3ba",
        "patched_files": [
            "PDAcroForm.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_65e8292": {
        "bug_id": "pdfbox_65e8292",
        "commit": "https://github.com/apache/pdfbox/commit/65e82922ddde5508f49f0b305152486adf919615",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "patch": "@@ -181,6 +181,11 @@ private static BufferedImage getAlphaImage(BufferedImage image) throws IOExcepti\n                     \" useful, use LosslessImageFactory instead\");\r\n         }\r\n         WritableRaster alphaRaster = image.getAlphaRaster();\r\n+        if (alphaRaster == null)\r\n+        {\r\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\r\n+            return null;\r\n+        }\r\n         BufferedImage alphaImage = new BufferedImage(image.getWidth(), image.getHeight(),\r\n                 BufferedImage.TYPE_BYTE_GRAY);\r\n         alphaImage.setData(alphaRaster);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "sha": "f59a292b904485899c45ffefa7332abfba047172",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java?ref=65e82922ddde5508f49f0b305152486adf919615",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "patch": "@@ -136,6 +136,11 @@ private static PDImageXObject createAlphaFromARGBImage(PDDocument document, Buff\n \n         // extract the alpha information\n         WritableRaster alphaRaster = image.getAlphaRaster();\n+        if (alphaRaster == null)\n+        {\n+            // happens sometimes (PDFBOX-2654) despite colormodel claiming to have alpha\n+            return null;\n+        }\n \n         int[] pixels = alphaRaster.getPixels(0, 0,\n                 alphaRaster.getSampleModel().getWidth(),",
                "raw_url": "https://github.com/apache/pdfbox/raw/65e82922ddde5508f49f0b305152486adf919615/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/LosslessFactory.java",
                "sha": "39c7ccb2667a3f67986ce196f08386e216c05d0c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2654: avoid NPE if bi.getAlphaRaster() returns null\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1656322 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7a4e80a4698c3b7c5595a4582495b79cc05ffd97",
        "patched_files": [
            "LosslessFactory.java",
            "JPEGFactory.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "LosslessFactoryTest.java",
            "JPEGFactoryTest.java"
        ]
    },
    "pdfbox_66c19ee": {
        "bug_id": "pdfbox_66c19ee",
        "commit": "https://github.com/apache/pdfbox/commit/66c19ee46bbec1ad99b9443b738014981752ccc8",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/pdfbox/blob/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=66c19ee46bbec1ad99b9443b738014981752ccc8",
                "deletions": 19,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -234,9 +234,8 @@ public boolean isCachingFields()\n      *\n      * @param fullyQualifiedName The name of the field to get.\n      * @return The field with that name of null if one was not found.\n-     * @throws IOException If there is an error getting the field type.\n      */\n-    public PDField getField(String fullyQualifiedName) throws IOException\n+    public PDField getField(String fullyQualifiedName)\n     {\n         PDField retval = null;\n         if (fieldCache != null)\n@@ -248,35 +247,38 @@ public PDField getField(String fullyQualifiedName) throws IOException\n             String[] nameSubSection = fullyQualifiedName.split(\"\\\\.\");\n             COSArray fields = (COSArray) dictionary.getDictionaryObject(COSName.FIELDS);\n \n-            for (int i = 0; i < fields.size() && retval == null; i++)\n+            if (fields != null)\n             {\n-                COSDictionary element = (COSDictionary) fields.getObject(i);\n-                if (element != null)\n+                for (int i = 0; i < fields.size() && retval == null; i++)\n                 {\n-                    COSString fieldName =\n-                        (COSString)element.getDictionaryObject(COSName.T);\n-                    if (fieldName.getString().equals(fullyQualifiedName) ||\n-                        fieldName.getString().equals(nameSubSection[0]))\n+                    COSDictionary element = (COSDictionary) fields.getObject(i);\n+                    if (element != null)\n                     {\n-                        PDField root = PDField.fromDictionary(this, element, null);\n-                        if (root != null)\n+                        COSString fieldName =\n+                            (COSString)element.getDictionaryObject(COSName.T);\n+                        if (fieldName.getString().equals(fullyQualifiedName) ||\n+                            fieldName.getString().equals(nameSubSection[0]))\n                         {\n-                            if (nameSubSection.length > 1)\n+                            PDField root = PDField.fromDictionary(this, element, null);\n+                            if (root != null)\n                             {\n-                                PDField kid = root.findKid(nameSubSection, 1);\n-                                if (kid != null)\n+                                if (nameSubSection.length > 1)\n                                 {\n-                                    retval = kid;\n+                                    PDField kid = root.findKid(nameSubSection, 1);\n+                                    if (kid != null)\n+                                    {\n+                                        retval = kid;\n+                                    }\n+                                    else\n+                                    {\n+                                        retval = root;\n+                                    }\n                                 }\n                                 else\n                                 {\n                                     retval = root;\n                                 }\n                             }\n-                            else\n-                            {\n-                                retval = root;\n-                            }\n                         }\n                     }\n                 }",
                "raw_url": "https://github.com/apache/pdfbox/raw/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "9e403b5c17d115b2b685b0638a61a7e0e14d8736",
                "status": "modified"
            },
            {
                "additions": 78,
                "blob_url": "https://github.com/apache/pdfbox/blob/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "changes": 78,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java?ref=66c19ee46bbec1ad99b9443b738014981752ccc8",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "patch": "@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.interactive.form;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import java.io.IOException;\n+\n+import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import org.junit.After;\n+import org.junit.Before;\n+import org.junit.Test;\n+\n+/**\n+ * Test for the PDButton class.\n+ *\n+ */\n+public class PDAcroFormTest\n+{\n+    \n+    private PDDocument document;\n+    private PDAcroForm acroForm;\n+    \n+    @Before\n+    public void setUp()\n+    {\n+        document = new PDDocument();\n+        acroForm = new PDAcroForm(document);\n+        document.getDocumentCatalog().setAcroForm(acroForm);\n+    }\n+\n+    @Test\n+    public void testFieldsEntry()\n+    {\n+        // the /Fields entry has been created with the AcroForm\n+        // as this is a required entry\n+        assertNotNull(acroForm.getFields());\n+        assertEquals(acroForm.getFields().size(),0);\n+        \n+        // there shouldn't be an exception if there is no such field\n+        assertNull(acroForm.getField(\"foo\"));\n+        \n+        // remove the required entry which is the case for some\n+        // PDFs (see PDFBOX-2965)\n+        acroForm.getCOSObject().removeItem(COSName.FIELDS);\n+        \n+        // ensure there is always an empty collection returned\n+        assertNotNull(acroForm.getFields());\n+        assertEquals(acroForm.getFields().size(),0);\n+\n+        // there shouldn't be an exception if there is no such field\n+        assertNull(acroForm.getField(\"foo\"));\n+    }\n+\n+    @After\n+    public void tearDown() throws IOException\n+    {\n+        document.close();\n+    }\n+\n+}\n+",
                "raw_url": "https://github.com/apache/pdfbox/raw/66c19ee46bbec1ad99b9443b738014981752ccc8/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroFormTest.java",
                "sha": "9bafd3a3b8e6a8ecd4fa865ee29fc35ae61cf487",
                "status": "added"
            }
        ],
        "message": "PDFBOX-2965: avoid NPE in getField() if the /Fields entry is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1701905 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/f7c36a4ef800eff69c342a1be2989e20a048add8",
        "patched_files": [
            "PDAcroForm.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_6a1a74e": {
        "bug_id": "pdfbox_6a1a74e",
        "commit": "https://github.com/apache/pdfbox/commit/6a1a74e6f77fe64f996bb347dead593e4376b07b",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java?ref=6a1a74e6f77fe64f996bb347dead593e4376b07b",
                "deletions": 11,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "patch": "@@ -66,7 +66,6 @@\n      */\n     private static final Log LOG = LogFactory.getLog(PDPageContentStream.class);\n \n-    private PDPage page;\n     private OutputStream output;\n     private boolean inTextMode = false;\n     private PDResources resources;\n@@ -186,15 +185,6 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n     public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appendContent, boolean compress,\n             boolean resetContext) throws IOException\n     {\n-\n-        page = sourcePage;\n-        resources = page.getResources();\n-        if (resources == null)\n-        {\n-            resources = new PDResources();\n-            page.setResources(resources);\n-        }\n-\n         // Get the pdstream from the source page instead of creating a new one\n         PDStream contents = sourcePage.getContents();\n         boolean hasContent = contents != null;\n@@ -276,6 +266,13 @@ public PDPageContentStream(PDDocument document, PDPage sourcePage, boolean appen\n         }\n         formatDecimal.setMaximumFractionDigits(10);\n         formatDecimal.setGroupingUsed(false);\n+        // this has to be done here, as the resources will be set to null when reseting the content stream\n+        resources = sourcePage.getResources();\n+        if (resources == null)\n+        {\n+            resources = new PDResources();\n+            sourcePage.setResources(resources);\n+        }\n     }\n \n     /**\n@@ -1513,7 +1510,6 @@ public void close() throws IOException\n         output.close();\n         currentNonStrokingColorSpace = null;\n         currentStrokingColorSpace = null;\n-        page = null;\n         resources = null;\n     }\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/6a1a74e6f77fe64f996bb347dead593e4376b07b/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/edit/PDPageContentStream.java",
                "sha": "981aa8f3a10c482545f400b85977bf82635b7010",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1789: avoid NPE after reseting the content stream\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1547540 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/cf82ccbcc6f09a26dce07fb846617033c52f8105",
        "patched_files": [
            "PDPageContentStream.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageContentStream.java"
        ]
    },
    "pdfbox_70dc587": {
        "bug_id": "pdfbox_70dc587",
        "commit": "https://github.com/apache/pdfbox/commit/70dc5875052f2091cae086cfa9cd81fdd537a9e3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java?ref=70dc5875052f2091cae086cfa9cd81fdd537a9e3",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "patch": "@@ -361,9 +361,10 @@ private void parseBeginbfrange(Number cosCount, PushbackInputStream cmapStream,\n             {\n                 tokenBytes = (byte[]) nextToken;\n             }\n-            if (tokenBytes.length == 0)\n+            if (tokenBytes == null || tokenBytes.length == 0)\n             {\n                 // PDFBOX-3450: ignore <>\n+                // PDFBOX-3807: ignore null\n                 continue;\n             }\n             boolean done = false;",
                "raw_url": "https://github.com/apache/pdfbox/raw/70dc5875052f2091cae086cfa9cd81fdd537a9e3/fontbox/src/main/java/org/apache/fontbox/cmap/CMapParser.java",
                "sha": "00e865bd5f5d418e6ca1d574db0e542f225e1e56",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3807: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1796092 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/231aa444e76123ceace8fd4529647fbed7717349",
        "patched_files": [
            "CMapParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestCMapParser.java"
        ]
    },
    "pdfbox_71f6b08": {
        "bug_id": "pdfbox_71f6b08",
        "commit": "https://github.com/apache/pdfbox/commit/71f6b0874c12f6e40f0b491e2559686d191aca14",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=71f6b0874c12f6e40f0b491e2559686d191aca14",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n \n+import org.apache.fontbox.cff.CFFOperator;\n import org.apache.fontbox.cff.charset.CFFCharset;\n import org.apache.fontbox.cff.charset.CFFExpertCharset;\n import org.apache.fontbox.cff.charset.CFFExpertSubsetCharset;\n@@ -623,7 +624,9 @@ private Entry getEntry(CFFOperator operator)\n         {\n             for (Entry entry : entries)\n             {\n-                if (entry.operator.equals(operator))\n+            \t// Check for null entry before comparing the Font\n+                if (entry != null && entry.operator != null && \n+                    entry.operator.equals(operator))\n                 {\n                     return entry;\n                 }",
                "raw_url": "https://github.com/apache/pdfbox/raw/71f6b0874c12f6e40f0b491e2559686d191aca14/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "3d18f80489b210becb4ac3fddbe995f4cb878ed6",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-703: added a check for null to avoid NPE. Patch by Peter Lenahan (Peter_Lenahan at ibi dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@941835 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/6b8316816efe98aee734100a75c75734ba403335",
        "patched_files": [
            "CFFParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_7312902": {
        "bug_id": "pdfbox_7312902",
        "commit": "https://github.com/apache/pdfbox/commit/73129021bd446ec61d182186e024fde62e55d209",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java?ref=73129021bd446ec61d182186e024fde62e55d209",
                "deletions": 3,
                "filename": "jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "patch": "@@ -36,7 +36,7 @@\n  * subclasses for access to specific properties.\n  * \n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>\n- * @version $Revision: 1.8 $\n+ * \n  */\n public class XMPSchema\n {\n@@ -246,7 +246,15 @@ public Calendar getDateProperty(String propertyName) throws IOException\n      */\n     public void setDateProperty(String propertyName, Calendar date)\n     {\n-        setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        if (date != null)\n+        {\n+            setTextProperty(propertyName, DateConverter.toISO8601(date));\n+        }\n+        else\n+        {\n+            // remove the value for the given property \n+            setTextProperty(propertyName, null);\n+        }\n     }\n \n     /**\n@@ -820,7 +828,8 @@ public String getLanguageProperty(String propertyName, String language)\n                     }\n                 }\n             }\n-            else if (property.getChildNodes().getLength() == 1 && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n+            else if (property.getChildNodes().getLength() == 1 \n+                    && Node.TEXT_NODE == property.getFirstChild().getNodeType())\n             {\n                 retval = property.getFirstChild().getNodeValue();\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/73129021bd446ec61d182186e024fde62e55d209/jempbox/src/main/java/org/apache/jempbox/xmp/XMPSchema.java",
                "sha": "b05022a095427db8546b3b3a1fd3b614506d0b05",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-823: avoid NPE when setting a dtae property\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1540811 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5f43564de8055cb6bcbdd4ddd8d4a68fbe9cc7f6",
        "patched_files": [
            "XMPSchema.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "XMPSchemaTest.java"
        ]
    },
    "pdfbox_79eb804": {
        "bug_id": "pdfbox_79eb804",
        "commit": "https://github.com/apache/pdfbox/commit/79eb804b77d48d341f3a3741349e3e25d9abd1fd",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=79eb804b77d48d341f3a3741349e3e25d9abd1fd",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -601,6 +601,10 @@ else if (encodingId == 1)\n \r\n         // read private dict\r\n         DictData.Entry privateEntry = topDict.getEntry(\"Private\");\r\n+        if (privateEntry == null)\r\n+        {\r\n+            throw new IOException(\"Private dictionary entry missing for font \" + font.fontName);\r\n+        }\r\n         int privateOffset = privateEntry.getNumber(1).intValue();\r\n         input.setPosition(privateOffset);\r\n         int privateSize = privateEntry.getNumber(0).intValue();\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/79eb804b77d48d341f3a3741349e3e25d9abd1fd/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "bd17417c0a5a87e359e40187b03a50bbc7cd6a7a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3057: avoid NPE if private dict missing, throw IOException instead\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1710384 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/cc97e0223c518f5f1d8ab6c63cad7ce080477aa4",
        "patched_files": [
            "CFFParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_82bea6b": {
        "bug_id": "pdfbox_82bea6b",
        "commit": "https://github.com/apache/pdfbox/commit/82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "patch": "@@ -91,7 +91,7 @@ public OutputStream createOutputStream() throws IOException\n      *\n      * @throws IOException If an IO error occurs during reading.\n      */\n-    public InputStream createInputStream()\n+    public InputStream createInputStream() throws IOException\n     {\n         return new ByteArrayInputStream( data );\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDMemoryStream.java",
                "sha": "e58e00e815f1225e98bbe91d62ce8544172b7f8c",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/pdfbox/blob/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=82bea6b6c33227c313fbda0435a449ad3fdd4e9f",
                "deletions": 4,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -691,10 +691,6 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        if (getFontDescriptor() == null)\n-        {\n-            return false;\n-        }\n         return getFontDescriptor().isSymbolic();\n     }\n ",
                "raw_url": "https://github.com/apache/pdfbox/raw/82bea6b6c33227c313fbda0435a449ad3fdd4e9f/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "07ae03a52a96e0a6e06c06608df3174a98b02e3c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: Prevent NPE in system TTF getFontDescriptor()\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1604681 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/30c58bb66f556287cd80d73a2b3aeb98f0fa3e37",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_851d10c": {
        "bug_id": "pdfbox_851d10c",
        "commit": "https://github.com/apache/pdfbox/commit/851d10cf56c2cd27ba699d32f5d93afa49cda7c9",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java?ref=851d10cf56c2cd27ba699d32f5d93afa49cda7c9",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "patch": "@@ -80,10 +80,19 @@ public PDICCBased(PDDocument doc)\n      * Creates a new ICC color space using the PDF array.\n      *\n      * @param iccArray the ICC stream object\n-     * @throws java.io.IOException if there is an error reading the ICC profile.\n+     * @throws IOException if there is an error reading the ICC profile or if the parameter\n+     * is invalid.\n      */\n     public PDICCBased(COSArray iccArray) throws IOException\n     {\n+        if (iccArray.size() < 2)\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have two elements\");\n+        }\n+        if (!(iccArray.getObject(1) instanceof COSStream))\n+        {\n+            throw new IOException(\"ICCBased colorspace array must have a stream as second element\");\n+        }\n         array = iccArray;\n         stream = new PDStream((COSStream) iccArray.getObject(1));\n         loadICCProfile();",
                "raw_url": "https://github.com/apache/pdfbox/raw/851d10cf56c2cd27ba699d32f5d93afa49cda7c9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBased.java",
                "sha": "4e6428639bfd12bb681dc8de0a933d7bfd42a0ef",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3728: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1788014 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/50cccec1d003dfed1f970ff545f81fe69dc7420c",
        "patched_files": [
            "PDICCBased.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDICCBasedTest.java"
        ]
    },
    "pdfbox_8782aa5": {
        "bug_id": "pdfbox_8782aa5",
        "commit": "https://github.com/apache/pdfbox/commit/8782aa533901a30e3ad76a492d5d25138e97653a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "patch": "@@ -34,7 +34,7 @@\n     @Override\n     public void process(Operator operator, List<COSBase> operands) throws IOException\n     {\n-        if (operator.getImageData().length == 0)\n+        if (operator.getImageData() == null || operator.getImageData().length == 0)\n         {\n             return;\n         }",
                "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/contentstream/operator/graphics/BeginInlineImage.java",
                "sha": "e6e1f3c71b7166a04d21eb4364fe942946f13d8b",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/pdfbox/blob/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java?ref=8782aa533901a30e3ad76a492d5d25138e97653a",
                "deletions": 4,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "patch": "@@ -285,12 +285,15 @@ else if( next.equals( \"false\" ) )\n                         imageParams.setItem( (COSName)nextToken, (COSBase)value );\n                     }\n                     //final token will be the image data, maybe??\n-                    Operator imageData = (Operator)nextToken;\n-                    if (imageData.getImageData().length == 0)\n+                    if (nextToken instanceof Operator)\n                     {\n-                        LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        Operator imageData = (Operator) nextToken;\n+                        if (imageData.getImageData() == null || imageData.getImageData().length == 0)\n+                        {\n+                            LOG.warn(\"empty inline image at stream offset \" + seqSource.getPosition());\n+                        }\n+                        beginImageOP.setImageData(imageData.getImageData());\n                     }\n-                    beginImageOP.setImageData( imageData.getImageData() );\n                 }\n                 break;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/8782aa533901a30e3ad76a492d5d25138e97653a/pdfbox/src/main/java/org/apache/pdfbox/pdfparser/PDFStreamParser.java",
                "sha": "902bbc52f9757368d0e3fc3d996fb876509e8f76",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3694: avoid NPE and ClassCastExcepton on empty inline images\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1783575 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/bb1078cdc5a35b790295848ee1bc869ad9061840",
        "patched_files": [
            "PDFStreamParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFStreamParserTest.java"
        ]
    },
    "pdfbox_8b25052": {
        "bug_id": "pdfbox_8b25052",
        "commit": "https://github.com/apache/pdfbox/commit/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=8b250520afbcceb6d0f0cb0a9e552a064aed0fb4",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -1215,6 +1215,10 @@ private void updatePageReferences(PDFCloneUtility cloner,\n     {\n         for (COSObjectable obj : numberTreeAsMap.values())\n         {\n+            if (obj == null)\n+            {\n+                continue;\n+            }\n             PDParentTreeValue val = (PDParentTreeValue) obj;\n             COSBase base = val.getCOSObject();\n             if (base instanceof COSArray)",
                "raw_url": "https://github.com/apache/pdfbox/raw/8b250520afbcceb6d0f0cb0a9e552a064aed0fb4/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "b0474f2b993d7073028fde46517cf5252eae022f",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852210 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db",
        "patched_files": [
            "PDFMergerUtility.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_8fd5a17": {
        "bug_id": "pdfbox_8fd5a17",
        "commit": "https://github.com/apache/pdfbox/commit/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pdfbox/blob/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=8fd5a17ab537e8302ac576018a28f4f04b2a0ad0",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1107,18 +1107,23 @@ public void save(OutputStream output) throws IOException\n         }\n     }\n \n-   /**\n-     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n+    /**\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a\n+     * file or a stream, not if the document was created in PDFBox itself.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n-     * @throws IllegalStateException if the document was not loaded from a file.\n+     * @throws IllegalStateException if the document was not loaded from a file or a stream.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n         COSWriter writer = null;\n         try\n         {\n+            if (pdfSource == null)\n+            {\n+                throw new IllegalStateException(\"document was not loaded from a file or a stream\");\n+            }\n             writer = new COSWriter(output, pdfSource);\n             writer.write(this, signInterface);\n             writer.close();",
                "raw_url": "https://github.com/apache/pdfbox/raw/8fd5a17ab537e8302ac576018a28f4f04b2a0ad0/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "3cfd8dc5ad0f0024d0390e5e1e8045f3dfb01b15",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3312: avoid NPE if document wasn't loaded / fix javadoc \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1738359 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e7bdcf6292250c96223b0a7636248de9a630ace9",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_95fa048": {
        "bug_id": "pdfbox_95fa048",
        "commit": "https://github.com/apache/pdfbox/commit/95fa048ad447bce2d2bb5477c2a2076ebabd6764",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java?ref=95fa048ad447bce2d2bb5477c2a2076ebabd6764",
                "deletions": 3,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "patch": "@@ -238,9 +238,12 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n             else\n             {\n                 PDOutlineItem first = srcOutline.getFirstChild();\n-                PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n-                        destination, first ));\n-                destOutline.appendChild( clonedFirst );\n+                if(first != null)\n+                {\n+                    PDOutlineItem clonedFirst = new PDOutlineItem( (COSDictionary)cloneForNewDocument(\n+                            destination, first ));\n+                    destOutline.appendChild( clonedFirst );\n+                }\n             }\n         }\n ",
                "raw_url": "https://github.com/apache/pdfbox/raw/95fa048ad447bce2d2bb5477c2a2076ebabd6764/pdfbox/src/main/java/org/apache/pdfbox/util/PDFMergerUtility.java",
                "sha": "059296263fc3e5017d9789a3c6381ce87aeacb6d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-700: avoid NPE when merging pdfs containing an OutlineNode. Patch by Adam Nichols (adam at swmc dot com)\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@940369 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/f52731360d9f471ac4e76fe472d2075a955d6faf",
        "patched_files": [
            "PDFMergerUtility.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_a6bba6b": {
        "bug_id": "pdfbox_a6bba6b",
        "commit": "https://github.com/apache/pdfbox/commit/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=a6bba6b353737b7deb4667e3ade6ac9da2d86ba9",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -1314,8 +1314,11 @@ public void close() throws IOException\n     \t\tpageMap = null;\n     \t}\n     \tsecurityHandler = null;\n-        document.close();\n-        document = null;\n+    \tif (document != null)\n+    \t{\n+\t        document.close();\n+\t        document = null;\n+    \t}\n         if (parser != null)\n         {\n         \tparser.clearResources();",
                "raw_url": "https://github.com/apache/pdfbox/raw/a6bba6b353737b7deb4667e3ade6ac9da2d86ba9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "731d0af841ef9e8c88b56d01dea32fd827e07c94",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1808: added a null check to avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1557374 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/401e1919f0034a1f0eff3bc893cf7a86c18fc7db",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_ace999f": {
        "bug_id": "pdfbox_ace999f",
        "commit": "https://github.com/apache/pdfbox/commit/ace999fe2b5d0b49511bd5059fb70ca5dc59699c",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=ace999fe2b5d0b49511bd5059fb70ca5dc59699c",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -274,7 +274,10 @@ else if( args[i].equals( CONSOLE ) )\n                                     } \n                                     finally \n                                     {\n-                                        subDoc.close();\n+                                        if (subDoc != null)\n+                                        {\n+                                            subDoc.close();\n+                                        }\n                                     }\n                                 }\n                             } ",
                "raw_url": "https://github.com/apache/pdfbox/raw/ace999fe2b5d0b49511bd5059fb70ca5dc59699c/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "44e0b2fc64f34686d2342963de2e119e1649bd9a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2576: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1671273 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/38a935da475db2461c7b3ecd94df3d11ee0e7792",
        "patched_files": [
            "ExtractText.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java"
        ]
    },
    "pdfbox_af95cd3": {
        "bug_id": "pdfbox_af95cd3",
        "commit": "https://github.com/apache/pdfbox/commit/af95cd31ee1c7cd4f2d729566e039757b2d37794",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java?ref=af95cd31ee1c7cd4f2d729566e039757b2d37794",
                "deletions": 1,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "patch": "@@ -252,7 +252,7 @@ else if( args[i].equals( CONSOLE ) )\n                                 }\n                                 PDComplexFileSpecification spec = (PDComplexFileSpecification) ent.getValue();\n                                 PDEmbeddedFile file = spec.getEmbeddedFile();\n-                                if (file != null && file.getSubtype().equals(\"application/pdf\"))\n+                                if (file != null && \"application/pdf\".equals(file.getSubtype()))\n                                 {\n                                     if (debug)\n                                     {",
                "raw_url": "https://github.com/apache/pdfbox/raw/af95cd31ee1c7cd4f2d729566e039757b2d37794/tools/src/main/java/org/apache/pdfbox/tools/ExtractText.java",
                "sha": "c2f02c1877757ebe8af83f8cad9904a78a6ec921",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2678: avoid NPE risk discovered by user \"nullpointer\"\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1659023 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1f09ee49862fe3edc6a947fab8e228e92e3440e8",
        "patched_files": [
            "ExtractText.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestExtractText.java"
        ]
    },
    "pdfbox_b87f994": {
        "bug_id": "pdfbox_b87f994",
        "commit": "https://github.com/apache/pdfbox/commit/b87f9948260d772775cb2eecfb697ae91f702a6b",
        "file": [
            {
                "additions": 46,
                "blob_url": "https://github.com/apache/pdfbox/blob/b87f9948260d772775cb2eecfb697ae91f702a6b/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java",
                "changes": 46,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java?ref=b87f9948260d772775cb2eecfb697ae91f702a6b",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java",
                "patch": "@@ -0,0 +1,46 @@\n+/*\n+ * Copyright 2015 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.graphics.color;\n+\n+import org.apache.pdfbox.pdmodel.PDDocument;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import org.junit.Test;\n+\n+/**\n+ *\n+ * @author Tilman Hausherr\n+ */\n+public class PDICCBasedTest\n+{\n+\n+    public PDICCBasedTest()\n+    {\n+    }\n+\n+    /**\n+     * Test of Constructor for PDFBOX-2812.\n+     */\n+    @Test\n+    public void testConstructor()\n+    {\n+        PDDocument doc = new PDDocument();\n+        PDICCBased iccBased = new PDICCBased(doc);\n+        assertEquals(\"ICCBased\", iccBased.getName());\n+        assertNotNull(iccBased.getPDStream());\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/pdfbox/raw/b87f9948260d772775cb2eecfb697ae91f702a6b/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/graphics/color/PDICCBasedTest.java",
                "sha": "bb419e5aa8607ddb7147804325b4e933ce2ee316",
                "status": "added"
            }
        ],
        "message": "PDFBOX-2812: test to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1681651 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/4c4ed241142a9f78e7fd51f7df1749a011ff0eda",
        "patched_files": [
            "PDICCBased.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDICCBasedTest.java"
        ]
    },
    "pdfbox_b9aaf1e": {
        "bug_id": "pdfbox_b9aaf1e",
        "commit": "https://github.com/apache/pdfbox/commit/b9aaf1efb1261e1193a1272897b7d8e8bb813742",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java?ref=b9aaf1efb1261e1193a1272897b7d8e8bb813742",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "patch": "@@ -304,8 +304,8 @@ private boolean isPageTreeNode(COSDictionary node )\n     {\r\n         // some files such as PDFBOX-2250-229205.pdf don't have Pages set as the Type, so we have\r\n         // to check for the presence of Kids too\r\n-        return node.getCOSName(COSName.TYPE) == COSName.PAGES ||\r\n-               node.containsKey(COSName.KIDS);\r\n+        return node != null &&\r\n+               (node.getCOSName(COSName.TYPE) == COSName.PAGES || node.containsKey(COSName.KIDS));\r\n     }\r\n \r\n     /**\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/b9aaf1efb1261e1193a1272897b7d8e8bb813742/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDPageTree.java",
                "sha": "713710c3d3cc3406d98f498233a12fe0aefabcaf",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3894: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1805547 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/46802f039793e93d4c929e8faa969d768dca7cfd",
        "patched_files": [
            "PDPageTree.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDPageTree.java"
        ]
    },
    "pdfbox_bc28d6b": {
        "bug_id": "pdfbox_bc28d6b",
        "commit": "https://github.com/apache/pdfbox/commit/bc28d6b3a39305acc0c5e70000453396f3ada784",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "patch": "@@ -118,7 +118,7 @@ protected static ImageReader findImageReader(String formatName, String errorCaus\n         while (readers.hasNext())\n         {\n             reader = readers.next();\n-            if (reader.canReadRaster())\n+            if (reader != null && reader.canReadRaster())\n             {\n                 break;\n             }",
                "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/filter/Filter.java",
                "sha": "cb8ce97ca131665f41dc01c5f35dd4bfbeba869e",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784",
                "deletions": 0,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "patch": "@@ -253,6 +253,10 @@ private static ImageWriter getJPEGImageWriter() throws IOException\n                 writer.dispose();\r\n             }\r\n             writer = writers.next();\r\n+            if (writer == null)\r\n+            {\r\n+                continue;\r\n+            }\r\n             // PDFBOX-3566: avoid CLibJPEGImageWriter, which is not a JPEGImageWriteParam\r\n             if (writer.getDefaultWriteParam() instanceof JPEGImageWriteParam)\r\n             {\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/graphics/image/JPEGFactory.java",
                "sha": "b4e401dd2f929fc692a993eee73eb4ba642a303f",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/bc28d6b3a39305acc0c5e70000453396f3ada784/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java?ref=bc28d6b3a39305acc0c5e70000453396f3ada784",
                "deletions": 0,
                "filename": "tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "patch": "@@ -184,6 +184,10 @@ public static boolean writeImage(BufferedImage image, String formatName, OutputS\n                     writer.dispose();\n                 }\n                 writer = writers.next();\n+                if (writer == null)\n+                {\n+                    continue;\n+                }\n                 param = writer.getDefaultWriteParam();\n                 metadata = writer.getDefaultImageMetadata(new ImageTypeSpecifier(image), param);\n                 if (metadata != null",
                "raw_url": "https://github.com/apache/pdfbox/raw/bc28d6b3a39305acc0c5e70000453396f3ada784/tools/src/main/java/org/apache/pdfbox/tools/imageio/ImageIOUtil.java",
                "sha": "08219cc9fecae152e5d4cb62ea608389018199a3",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3739: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1789714 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/b692119e707b374a7593fe9cab28b15957981e3f",
        "patched_files": [
            "JPEGFactory.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "JPEGFactoryTest.java"
        ]
    },
    "pdfbox_bd7957b": {
        "bug_id": "pdfbox_bd7957b",
        "commit": "https://github.com/apache/pdfbox/commit/bd7957b5986a7261bebfd4cc59acc8b33974c035",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=bd7957b5986a7261bebfd4cc59acc8b33974c035",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -189,8 +189,7 @@ public Object getValue(Integer index) throws IOException\n                 }\n                 COSInteger key = (COSInteger) base;\n                 COSBase cosValue = numbersArray.getObject(i + 1);\n-                COSObjectable pdValue = convertCOSToPD( cosValue );\n-                indices.put( key.intValue(), pdValue );\n+                indices.put(key.intValue(), cosValue == null ? null : convertCOSToPD(cosValue));\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n@@ -215,6 +214,9 @@ protected COSObjectable convertCOSToPD(COSBase base) throws IOException\n         }\n         catch( Exception t )\n         {\n+            System.out.println(\"valueType: \" + valueType);\n+            System.out.println(\"base: \" + base);\n+            System.out.println(\"Exception: \" + t);\n             throw new IOException(\"Error while trying to create value in number tree:\" + t.getMessage(), t);\n         }\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/bd7957b5986a7261bebfd4cc59acc8b33974c035/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "sha": "a4da469311acb4a332d164e3b3b755fa308aa5c8",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852205 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/2d8273051858824fc3721def784406010586fc16",
        "patched_files": [
            "PDNumberTreeNode.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    "pdfbox_bdab232": {
        "bug_id": "pdfbox_bdab232",
        "commit": "https://github.com/apache/pdfbox/commit/bdab232e265a828d758979678920fcdaf2c5b7b9",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/pdfbox/blob/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java?ref=bdab232e265a828d758979678920fcdaf2c5b7b9",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java",
                "patch": "@@ -16,6 +16,7 @@\n  */\n package org.apache.pdfbox.pdmodel.interactive.action;\n \n+import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n import org.apache.pdfbox.cos.COSString;\n@@ -57,11 +58,16 @@ public PDActionURI(COSDictionary a)\n      * This will get the uniform resource identifier to resolve. It should be encoded in 7-bit\n      * ASCII, but UTF-8 is supported too.\n      *\n-     * @return The URI entry of the specific URI action dictionary.\n+     * @return The URI entry of the specific URI action dictionary or null if there isn't any.\n      */\n     public String getURI()\n     {\n-        return new String(((COSString) action.getDictionaryObject(COSName.URI)).getBytes(), Charsets.UTF_8);\n+        COSBase base = action.getDictionaryObject(COSName.URI);\n+        if (base instanceof COSString)\n+        {\n+            return new String(((COSString) base).getBytes(), Charsets.UTF_8);\n+        }\n+        return null;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURI.java",
                "sha": "2898bbe14f6b80dc7cf19f92c72990f2dad3f44a",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java?ref=bdab232e265a828d758979678920fcdaf2c5b7b9",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java",
                "patch": "@@ -16,6 +16,7 @@\n package org.apache.pdfbox.pdmodel.interactive.action;\n \n import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNull;\n import org.junit.Test;\n \n /**\n@@ -31,6 +32,7 @@\n     public void testUTF8URI()\n     {\n         PDActionURI actionURI = new PDActionURI();\n+        assertNull(actionURI.getURI());\n         actionURI.setURI(\"http://\u00e7\u00b5\u201e\u00e5\u0152\u00b6\u00e6\u203a\u00bf\u00e7\u00b6\u017d.com/\");\n         assertEquals(\"http://\u7d4c\u55b6\u627f\u7d99.com/\", actionURI.getURI());\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/bdab232e265a828d758979678920fcdaf2c5b7b9/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/interactive/action/PDActionURITest.java",
                "sha": "e8d07b1bb8daddcead89d23ae62f68f51e6eef6b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3946: avoid NPE if URI doesn't exist\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1810594 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/55586aadb4fd2008e8b7bd9017bef208b63c3454",
        "patched_files": [
            "PDActionURI.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDActionURITest.java"
        ]
    },
    "pdfbox_bdd43a0": {
        "bug_id": "pdfbox_bdd43a0",
        "commit": "https://github.com/apache/pdfbox/commit/bdd43a03fddf8287297563eef12546ba9e1bab5b",
        "file": [
            {
                "additions": 14,
                "blob_url": "https://github.com/apache/pdfbox/blob/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=bdd43a03fddf8287297563eef12546ba9e1bab5b",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -711,8 +711,9 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n             throws IOException\n     {\n         List<PDField> srcFields = srcAcroForm.getFields();\n+        COSArray destFields = null;\n \n-        if (srcFields != null)\n+        if (srcFields != null && srcFields.size() > 0)\n         {\n             // if a form is merged multiple times using PDFBox the newly generated\n             // fields starting with dummyFieldName may already exist. We need to determine the last unique \n@@ -729,7 +730,18 @@ private void acroFormLegacyMode(PDFCloneUtility cloner, PDAcroForm destAcroForm,\n                 }\n             }\n \n-            COSArray destFields = (COSArray) destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            // get the destinations root fields. Could be that the entry doesn't exist\n+            // or is of wrong type\n+            COSBase base = destAcroForm.getCOSObject().getItem(COSName.FIELDS);\n+            if (base instanceof COSArray)\n+            {\n+                destFields = (COSArray) base;\n+            }\n+            else\n+            {\n+                destFields = new COSArray();\n+            }\n+            \n             for (PDField srcField : srcAcroForm.getFields())\n             {\n                 COSDictionary dstField = (COSDictionary) cloner.cloneForNewDocument(srcField.getCOSObject());",
                "raw_url": "https://github.com/apache/pdfbox/raw/bdd43a03fddf8287297563eef12546ba9e1bab5b/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "574fcd9ec9f774c629677f2ce6b9bd44440e7d4a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4107: avoid potential NPE; avoid potential ClassCastException\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1824081 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fdc927e703908e5d3b8a82c618b81ab2c4d0a545",
        "patched_files": [
            "PDFMergerUtility.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_be59647": {
        "bug_id": "pdfbox_be59647",
        "commit": "https://github.com/apache/pdfbox/commit/be5964793daaf560370212bcc713f4b8cab46d25",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=be5964793daaf560370212bcc713f4b8cab46d25",
                "deletions": 5,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -283,18 +283,17 @@ public void addSignature(PDSignature sigObject, SignatureInterface signatureInte\n             acroForm.getCOSObject().setNeedToBeUpdated(true);\n         }\n \n-        List<PDField> fields = acroForm.getFields();\n-        if (fields == null)\n+        PDSignatureField signatureField = null;\n+        if (!(acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS) instanceof COSArray))\n         {\n-            fields = new ArrayList<PDField>();\n-            acroForm.setFields(fields);\n+            acroForm.getCOSObject().setItem(COSName.FIELDS, new COSArray());\n         }\n         else\n         {\n             COSArray fieldArray = (COSArray) acroForm.getCOSObject().getDictionaryObject(COSName.FIELDS);\n             fieldArray.setNeedToBeUpdated(true);\n+            signatureField = findSignatureField(acroForm.getFields(), sigObject);\n         }\n-        PDSignatureField signatureField = findSignatureField(fields, sigObject);\n         if (signatureField == null)\n         {\n             signatureField = new PDSignatureField(acroForm);",
                "raw_url": "https://github.com/apache/pdfbox/raw/be5964793daaf560370212bcc713f4b8cab46d25/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "9ade531107353a6019eabb3b30578ed85ab51c6d",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3663: avoid NPE if /AcroForm exists without /Fields\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1780413 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/047579e94208ef3a7d3bbe90e9765b59283c7203",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_c71ea9e": {
        "bug_id": "pdfbox_c71ea9e",
        "commit": "https://github.com/apache/pdfbox/commit/c71ea9edd1e8ebc6d195c0209048844ca67947ff",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pdfbox/blob/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java?ref=c71ea9edd1e8ebc6d195c0209048844ca67947ff",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "patch": "@@ -314,7 +314,9 @@ public void flatten(List<PDField> fields, boolean refreshAppearances) throws IOE\n                 {\n                     annotations.add(annotation);                 \n                 }\n-                else if (!annotation.isInvisible() && !annotation.isHidden() && annotation.getNormalAppearanceStream() != null)\n+                else if (!annotation.isInvisible() && !annotation.isHidden() &&\n+                         annotation.getNormalAppearanceStream() != null && \n+                         annotation.getNormalAppearanceStream().getBBox() != null)\n                 {\n                     contentStream = new PDPageContentStream(document, page, AppendMode.APPEND, true, !isContentStreamWrapped);\n                     isContentStreamWrapped = true;",
                "raw_url": "https://github.com/apache/pdfbox/raw/c71ea9edd1e8ebc6d195c0209048844ca67947ff/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDAcroForm.java",
                "sha": "570b2dad3e0e6774bbf7de5a17840b4e0bedcb64",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4631: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1865323 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/2e238062ba0d761c1544f59fab6e8379b3694752",
        "patched_files": [
            "PDAcroForm.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAcroFormTest.java"
        ]
    },
    "pdfbox_c94a9e1": {
        "bug_id": "pdfbox_c94a9e1",
        "commit": "https://github.com/apache/pdfbox/commit/c94a9e12071f4f60b85d93d399cc024b41377688",
        "file": [
            {
                "additions": 29,
                "blob_url": "https://github.com/apache/pdfbox/blob/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "changes": 50,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java?ref=c94a9e12071f4f60b85d93d399cc024b41377688",
                "deletions": 21,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "patch": "@@ -18,6 +18,8 @@\n \n import java.io.IOException;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSName;\n@@ -37,6 +39,11 @@\n  */\n public abstract class PDAnnotation implements COSObjectable\n {\n+    /**\n+     * Log instance.\n+     */\n+    private static final Log log = LogFactory.getLog(PDAnnotation.class);\n+\n     /**\n      * An annotation flag.\n      */\n@@ -85,7 +92,7 @@\n      * @return The correctly typed annotation object.\n      * @throws IOException If there is an error while creating the annotation.\n      */\n-    // TODO not yet implemented: FreeText, Polygon, PolyLine, Caret, Ink, Sound, \n+    // TODO not yet implemented: \n     // Movie, Screen, PrinterMark, TrapNet, Watermark, 3D, Redact\n     public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n     {\n@@ -94,62 +101,63 @@ public static PDAnnotation createAnnotation( COSBase base ) throws IOException\n         {\n             COSDictionary annotDic = (COSDictionary)base;\n             String subtype = annotDic.getNameAsString( COSName.SUBTYPE );\n-            if( subtype.equals( PDAnnotationFileAttachment.SUB_TYPE ) )\n+            if( PDAnnotationFileAttachment.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationFileAttachment( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLine.SUB_TYPE ) )\n+            else if( PDAnnotationLine.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLine( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationPopup.SUB_TYPE ) )\n+            else if( PDAnnotationPopup.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationPopup(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationRubberStamp.SUB_TYPE ) )\n+            else if( PDAnnotationRubberStamp.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationRubberStamp(annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_SQUARE ) ||\n-                    subtype.equals( PDAnnotationSquareCircle.SUB_TYPE_CIRCLE ) )\n+            else if( PDAnnotationSquareCircle.SUB_TYPE_SQUARE.equals(subtype) ||\n+                    PDAnnotationSquareCircle.SUB_TYPE_CIRCLE.equals(subtype) )\n             {\n                 annot = new PDAnnotationSquareCircle( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationText.SUB_TYPE ) )\n+            else if( PDAnnotationText.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationText( annotDic);\n             }\n-            else if( subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY ) ||\n-                    subtype.equals( PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT ))\n+            else if( PDAnnotationTextMarkup.SUB_TYPE_HIGHLIGHT.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_UNDERLINE.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_SQUIGGLY.equals(subtype) ||\n+                    PDAnnotationTextMarkup.SUB_TYPE_STRIKEOUT.equals(subtype) )\n             {\n                 annot = new PDAnnotationTextMarkup( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationLink.SUB_TYPE ) )\n+            else if( PDAnnotationLink.SUB_TYPE.equals(subtype) )\n             {\n                 annot = new PDAnnotationLink( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationWidget.SUB_TYPE ) )\n+            else if( PDAnnotationWidget.SUB_TYPE.equals(subtype) )\n             {\n                annot = new PDAnnotationWidget( annotDic );\n             }\n-            else if( subtype.equals( PDAnnotationMarkup.SUB_TYPE_FREETEXT ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYGON ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_POLYLINE ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_CARET ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_INK ) ||\n-                    subtype.equals( PDAnnotationMarkup.SUB_TYPE_SOUND ))\n+            else if( PDAnnotationMarkup.SUB_TYPE_FREETEXT.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYGON.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_POLYLINE.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_CARET.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_INK.equals(subtype) ||\n+                    PDAnnotationMarkup.SUB_TYPE_SOUND.equals(subtype) )\n             {\n                 annot = new PDAnnotationMarkup( annotDic );\n             }\n             else\n             {\n                 annot = new PDAnnotationUnknown( annotDic );\n+                log.debug(\"Unknown or unsupported annotation subtype \"+subtype);\n             }\n         }\n         else",
                "raw_url": "https://github.com/apache/pdfbox/raw/c94a9e12071f4f60b85d93d399cc024b41377688/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/annotation/PDAnnotation.java",
                "sha": "963d4115a389521069fc568d823c8e0089692cdf",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-960: avoid NPE when annotation subtype is missing\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1070099 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/96cb36e599c091b25084f20902a7c7eff9730857",
        "patched_files": [
            "PDAnnotation.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDAnnotationTest.java"
        ]
    },
    "pdfbox_ca50571": {
        "bug_id": "pdfbox_ca50571",
        "commit": "https://github.com/apache/pdfbox/commit/ca5057167359def53b88992eaec0476ef098f3db",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=ca5057167359def53b88992eaec0476ef098f3db",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -30,6 +30,7 @@\n import org.apache.pdfbox.cos.COSDictionary;\n import org.apache.pdfbox.cos.COSInteger;\n import org.apache.pdfbox.cos.COSName;\n+import org.apache.pdfbox.cos.COSNull;\n \n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n@@ -251,7 +252,7 @@ public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n             {\n                 array.add( COSInteger.get( key ) );\n                 COSObjectable obj = numbers.get( key );\n-                array.add( obj );\n+                array.add(obj == null ? COSNull.NULL : obj);\n             }\n             Integer lower = null;\n             Integer upper = null;",
                "raw_url": "https://github.com/apache/pdfbox/raw/ca5057167359def53b88992eaec0476ef098f3db/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "sha": "661f0eef9bb41ec2862a9eb766df6cc93972e3b1",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-4444: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1852208 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/bd9995639240c2b763be3e9dc99a49df48ef642b",
        "patched_files": [
            "PDNumberTreeNode.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    "pdfbox_cd14019": {
        "bug_id": "pdfbox_cd14019",
        "commit": "https://github.com/apache/pdfbox/commit/cd14019b9d5a82db3282685114410ce788f8bcbb",
        "file": [
            {
                "additions": 72,
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "changes": 106,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "deletions": 34,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "patch": "@@ -24,6 +24,8 @@\n import java.util.List;\n import java.util.Map;\n \n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n import org.apache.pdfbox.cos.COSDictionary;\n@@ -33,22 +35,24 @@\n /**\n  * This class represents a PDF Number tree. See the PDF Reference 1.7 section\n  * 7.9.7 for more details.\n- * \n+ *\n  * @author <a href=\"mailto:ben@benlitchfield.com\">Ben Litchfield</a>,\n  *         <a href=\"igor.podolskiy@ievvwi.uni-stuttgart.de\">Igor Podolskiy</a>\n  * @version $Revision: 1.4 $\n  */\n public class PDNumberTreeNode implements COSObjectable\n {\n+    private static final Log LOG = LogFactory.getLog( PDNumberTreeNode.class );\n+\n     private COSDictionary node;\n-    private Class<?> valueType = null;\n+    private Class<? extends COSObjectable> valueType = null;\n \n     /**\n      * Constructor.\n      *\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( Class<?> valueClass )\n+    public PDNumberTreeNode( Class<? extends COSObjectable> valueClass )\n     {\n         node = new COSDictionary();\n         valueType = valueClass;\n@@ -60,7 +64,7 @@ public PDNumberTreeNode( Class<?> valueClass )\n      * @param dict The dictionary that holds the name information.\n      * @param valueClass The PD Model type of object that is the value.\n      */\n-    public PDNumberTreeNode( COSDictionary dict, Class<?> valueClass )\n+    public PDNumberTreeNode( COSDictionary dict, Class<? extends COSObjectable> valueClass )\n     {\n         node = dict;\n         valueType = valueClass;\n@@ -91,19 +95,18 @@ public COSDictionary getCOSDictionary()\n      *\n      * @return The list of children or null if there are no children.\n      */\n-    public List getKids()\n+    public List<PDNumberTreeNode> getKids()\n     {\n-\n-        List retval = null;\n+        List<PDNumberTreeNode> retval = null;\n         COSArray kids = (COSArray)node.getDictionaryObject( COSName.KIDS );\n         if( kids != null )\n         {\n-            List pdObjects = new ArrayList();\n+            List<PDNumberTreeNode> pdObjects = new ArrayList<PDNumberTreeNode>();\n             for( int i=0; i<kids.size(); i++ )\n             {\n                 pdObjects.add( createChildNode( (COSDictionary)kids.getObject(i) ) );\n             }\n-            retval = new COSArrayList(pdObjects,kids);\n+            retval = new COSArrayList<PDNumberTreeNode>(pdObjects,kids);\n         }\n \n         return retval;\n@@ -114,8 +117,22 @@ public List getKids()\n      *\n      * @param kids The children of this number tree.\n      */\n-    public void setKids( List kids )\n+    public void setKids( List<? extends PDNumberTreeNode> kids )\n     {\n+        if (kids != null && kids.size() > 0)\n+        {\n+            PDNumberTreeNode firstKid = kids.get(0);\n+            PDNumberTreeNode lastKid = kids.get(kids.size() - 1);\n+            Integer lowerLimit = firstKid.getLowerLimit();\n+            this.setLowerLimit(lowerLimit);\n+            Integer upperLimit = lastKid.getUpperLimit();\n+            this.setUpperLimit(upperLimit);\n+        }\n+        else if ( node.getDictionaryObject( COSName.NUMS ) == null )\n+        {\n+            // Remove limits if there are no kids and no numbers set.\n+            node.setItem( COSName.LIMITS, null);\n+        }\n         node.setItem( COSName.KIDS, COSArrayList.converterToCOSArray( kids ) );\n     }\n \n@@ -125,29 +142,36 @@ public void setKids( List kids )\n      * @param index The index in the number tree.\n      *\n      * @return The value corresponding to the index.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n     public Object getValue( Integer index ) throws IOException\n     {\n         Object retval = null;\n-        Map<Integer,Object> names = getNumbers();\n+        Map<Integer,COSObjectable> names = getNumbers();\n         if( names != null )\n         {\n             retval = names.get( index );\n         }\n         else\n         {\n-            List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            List<PDNumberTreeNode> kids = getKids();\n+            if ( kids != null )\n             {\n-                PDNumberTreeNode childNode = (PDNumberTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( index );\n+                    PDNumberTreeNode childNode = kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( index ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( index ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( index );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                LOG.warn(\"NumberTreeNode does not have \\\"nums\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }\n@@ -158,27 +182,25 @@ public Object getValue( Integer index ) throws IOException\n      * depend on where this class is being used.\n      *\n      * @return A map of COS objects.\n-     * \n+     *\n      * @throws IOException If there is a problem creating the values.\n      */\n-    public Map getNumbers()  throws IOException\n+    public Map<Integer,COSObjectable> getNumbers()  throws IOException\n     {\n-        Map<Integer,Object> indices = null;\n+        Map<Integer, COSObjectable> indices = null;\n         COSArray namesArray = (COSArray)node.getDictionaryObject( COSName.NUMS );\n         if( namesArray != null )\n         {\n-            indices = new HashMap<Integer,Object>();\n+            indices = new HashMap<Integer,COSObjectable>();\n             for( int i=0; i<namesArray.size(); i+=2 )\n             {\n                 COSInteger key = (COSInteger)namesArray.getObject(i);\n                 COSBase cosValue = namesArray.getObject( i+1 );\n-                Object pdValue = convertCOSToPD( cosValue );\n-\n+                COSObjectable pdValue = convertCOSToPD( cosValue );\n                 indices.put( Integer.valueOf(key.intValue()), pdValue );\n             }\n             indices = Collections.unmodifiableMap(indices);\n         }\n-\n         return indices;\n     }\n \n@@ -191,12 +213,12 @@ public Map getNumbers()  throws IOException\n      * @return The converted PD Model object.\n      * @throws IOException If there is an error during creation.\n      */\n-    protected Object convertCOSToPD( COSBase base ) throws IOException\n+    protected COSObjectable convertCOSToPD( COSBase base ) throws IOException\n     {\n-        Object retval = null;\n+        COSObjectable retval = null;\n         try\n         {\n-            Constructor<?> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n+            Constructor<? extends COSObjectable> ctor = valueType.getConstructor( new Class[] { base.getClass() } );\n             retval = ctor.newInstance( new Object[] { base } );\n         }\n         catch( Throwable t )\n@@ -225,7 +247,7 @@ protected PDNumberTreeNode createChildNode( COSDictionary dic )\n      *\n      * @param numbers The map of names to objects.\n      */\n-    public void setNumbers( Map<Integer,Object> numbers )\n+    public void setNumbers( Map<Integer, ? extends COSObjectable> numbers )\n     {\n         if( numbers == null )\n         {\n@@ -234,7 +256,7 @@ public void setNumbers( Map<Integer,Object> numbers )\n         }\n         else\n         {\n-            List<Integer> keys = new ArrayList( numbers.keySet() );\n+            List<Integer> keys = new ArrayList<Integer>( numbers.keySet() );\n             Collections.sort( keys );\n             COSArray array = new COSArray();\n             for( int i=0; i<keys.size(); i++ )\n@@ -266,7 +288,7 @@ public Integer getUpperLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 1 ));\n         }\n@@ -286,8 +308,16 @@ private void setUpperLimit( Integer upper )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( upper != null)\n+        {\n+            arr.setInt( 1, upper.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 1, null );\n         }\n-        arr.setInt( 1, upper.intValue() );\n     }\n \n     /**\n@@ -299,7 +329,7 @@ public Integer getLowerLimit()\n     {\n         Integer retval = null;\n         COSArray arr = (COSArray)node.getDictionaryObject( COSName.LIMITS );\n-        if( arr != null )\n+        if( arr != null && arr.get(0) != null )\n         {\n             retval = Integer.valueOf(arr.getInt( 0 ));\n         }\n@@ -319,7 +349,15 @@ private void setLowerLimit( Integer lower )\n             arr = new COSArray();\n             arr.add( null );\n             arr.add( null );\n+            node.setItem( COSName.LIMITS, arr );\n+        }\n+        if ( lower != null )\n+        {\n+            arr.setInt( 0, lower.intValue() );\n+        }\n+        else\n+        {\n+            arr.set( 0, null );\n         }\n-        arr.setInt( 0, lower.intValue() );\n     }\n }",
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNumberTreeNode.java",
                "sha": "b35a1cd4a273be9c8c4ac48bd20d38a338617e36",
                "status": "modified"
            },
            {
                "additions": 17,
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "changes": 25,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "deletions": 8,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "patch": "@@ -98,19 +98,25 @@ public PDPageLabels(PDDocument document, COSDictionary dict) throws IOException\n         findLabels(root);\n     }\n     \n-    private void findLabels(PDNumberTreeNode node) throws IOException {\n-        if (node.getKids() != null) {\n+    private void findLabels(PDNumberTreeNode node) throws IOException \n+    {\n+        if (node.getKids() != null) \n+        {\n             List<PDNumberTreeNode> kids = node.getKids();\n-            for (PDNumberTreeNode kid : kids) {\n+            for (PDNumberTreeNode kid : kids) \n+            {\n                 findLabels(kid);\n             }\n         }\n-        else if (node.getNumbers() != null) {\n-            Map<Integer, COSDictionary> numbers = node.getNumbers();\n-            for (Entry<Integer, COSDictionary> i : numbers.entrySet())\n+        else if (node.getNumbers() != null) \n+        {\n+            Map<Integer, COSObjectable> numbers = node.getNumbers();\n+            for (Entry<Integer, COSObjectable> i : numbers.entrySet())\n             {\n                 if(i.getKey() >= 0)\n-                    labels.put(i.getKey(), new PDPageLabelRange(i.getValue()));\n+                {\n+                    labels.put(i.getKey(), new PDPageLabelRange((COSDictionary)i.getValue()));\n+                }\n             }\n         }\n     }\n@@ -160,7 +166,10 @@ public void setLabelItem(int startPage, PDPageLabelRange item)\n     {\n         labels.put(startPage, item);\n     }\n-\n+    \n+    /**\n+     * {@inheritDoc} \n+     */\n     public COSBase getCOSObject()\n     {\n         COSDictionary dict = new COSDictionary();",
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDPageLabels.java",
                "sha": "c05839a0bbd143f53b8075f1ac9007e8762f641e",
                "status": "modified"
            },
            {
                "additions": 188,
                "blob_url": "https://github.com/apache/pdfbox/blob/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "changes": 188,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java?ref=cd14019b9d5a82db3282685114410ce788f8bcbb",
                "deletions": 0,
                "filename": "pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "patch": "@@ -0,0 +1,188 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.pdfbox.pdmodel.common;\n+\n+import java.io.IOException;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.TreeMap;\n+\n+import junit.framework.Assert;\n+import junit.framework.TestCase;\n+\n+import org.apache.pdfbox.cos.COSBase;\n+import org.apache.pdfbox.cos.COSInteger;\n+\n+/**\n+ * A test case for PDNumberTreeNode.\n+ * Based on TestPDNameTreeNode.\n+ * \n+ * @author Dominic Tubach\n+ */\n+public class TestPDNumberTreeNode extends TestCase\n+{\n+\n+    private PDNumberTreeNode node1;\n+    private PDNumberTreeNode node2;\n+    private PDNumberTreeNode node4;\n+    private PDNumberTreeNode node5;\n+    private PDNumberTreeNode node24;\n+    \n+    public static class PDTest implements COSObjectable {\n+        private int value;\n+\n+        public PDTest(int value) {\n+            this.value = value;\n+        }\n+        \n+        public PDTest(COSInteger cosInt) {\n+            this.value = cosInt.intValue();\n+        }\n+\n+        public COSBase getCOSObject()\n+        {\n+            return COSInteger.get( value );\n+        }\n+\n+        @Override\n+        public int hashCode()\n+        {\n+            final int prime = 31;\n+            int result = 1;\n+            result = prime * result + value;\n+            return result;\n+        }\n+\n+        @Override\n+        public boolean equals( Object obj )\n+        {\n+            if ( this == obj)\n+                return true;\n+            if ( obj == null)\n+                return false;\n+            if ( getClass() != obj.getClass())\n+                return false;\n+            PDTest other = (PDTest) obj;\n+            if ( value != other.value)\n+                return false;\n+            return true;\n+        }\n+    }\n+\n+    @Override\n+    protected void setUp() throws Exception\n+    {\n+        this.node5 = new PDNumberTreeNode(PDTest.class);\n+        Map<Integer,PDTest> Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 1, new PDTest( 89 ) );\n+        Numbers.put( 2, new PDTest( 13 ) );\n+        Numbers.put( 3, new PDTest( 95 ) );\n+        Numbers.put( 4, new PDTest( 51 ) );\n+        Numbers.put( 5, new PDTest( 18 ) );\n+        Numbers.put( 6, new PDTest( 33 ) );\n+        Numbers.put( 7, new PDTest( 85 ) );\n+        this.node5.setNumbers( Numbers );\n+\n+        this.node24 = new PDNumberTreeNode( PDTest.class );\n+        Numbers = new TreeMap<Integer, PDTest>();\n+        Numbers.put( 8, new PDTest( 54 ) );\n+        Numbers.put( 9, new PDTest( 70 ) );\n+        Numbers.put( 10, new PDTest( 39 ) );\n+        Numbers.put( 11, new PDTest( 30 ) );\n+        Numbers.put( 12, new PDTest( 40 ) );\n+        this.node24.setNumbers( Numbers );\n+\n+        this.node2 = new PDNumberTreeNode( PDTest.class );\n+        List<PDNumberTreeNode> kids = this.node2.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node5 );\n+        this.node2.setKids( kids );\n+\n+        this.node4 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node4.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node24 );\n+        this.node4.setKids( kids );\n+\n+        this.node1 = new PDNumberTreeNode( PDTest.class );\n+        kids = this.node1.getKids();\n+        if ( kids == null)\n+        {\n+            kids = new COSArrayList<PDNumberTreeNode>();\n+        }\n+        kids.add( this.node2 );\n+        kids.add( this.node4 );\n+        this.node1.setKids( kids );\n+    }\n+    \n+    public void testGetValue() throws IOException {\n+        Assert.assertEquals(new PDTest( 51 ), this.node5.getValue( 4 ));\n+        Assert.assertEquals(new PDTest(70), this.node1.getValue( 9 ));\n+        \n+        this.node1.setKids( null );\n+        this.node1.setNumbers( null );\n+        Assert.assertNull( this.node1.getValue( 0 ) );\n+    }\n+\n+    public void testUpperLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node5.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 7 ), this.node2.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node24.getUpperLimit());\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node4.getUpperLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 12 ), this.node1.getUpperLimit());\n+\n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getUpperLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getUpperLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getUpperLimit() );\n+    }\n+\n+    public void testLowerLimit() throws IOException\n+    {\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node5.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node2.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node24.getLowerLimit());\n+        Assert.assertEquals(Integer.valueOf( 8 ), this.node4.getLowerLimit());\n+\n+        Assert.assertEquals(Integer.valueOf( 1 ), this.node1.getLowerLimit());\n+        \n+        this.node24.setNumbers( new HashMap<Integer, COSObjectable>() );\n+        Assert.assertNull( this.node24.getLowerLimit() );\n+        \n+        this.node5.setNumbers( null );\n+        Assert.assertNull( this.node5.getLowerLimit() );\n+        \n+        this.node1.setKids( null );\n+        Assert.assertNull( this.node1.getLowerLimit() );\n+    }\n+\n+}",
                "raw_url": "https://github.com/apache/pdfbox/raw/cd14019b9d5a82db3282685114410ce788f8bcbb/pdfbox/src/test/java/org/apache/pdfbox/pdmodel/common/TestPDNumberTreeNode.java",
                "sha": "993c3c949e5ae5fe694c9134e9dbb0f6bbab8aa4",
                "status": "added"
            }
        ],
        "message": "PDFBOX-1381: update limits in setKids and avoid NPEs as proposed by Dominic Tubach\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1454845 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/da7e1be335e89a7ab6e6adb1cf2b071cc1e21295",
        "patched_files": [
            "PDNumberTreeNode.java",
            "PDPageLabels.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNumberTreeNode.java"
        ]
    },
    "pdfbox_d0dc78e": {
        "bug_id": "pdfbox_d0dc78e",
        "commit": "https://github.com/apache/pdfbox/commit/d0dc78ed7bf8e69fa51e87ad42225b2ef3ceab6d",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/d0dc78ed7bf8e69fa51e87ad42225b2ef3ceab6d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=d0dc78ed7bf8e69fa51e87ad42225b2ef3ceab6d",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -801,7 +801,7 @@ private void getEncodingFromFont()\n                             }\n                             if (line.startsWith(\"/Encoding\")) \n                             {\n-                                if(line.endsWith(\"array\")) \n+                                if(line.contains(\"array\")) \n                                 {\n                                     StringTokenizer st = new StringTokenizer(line);\n                                     // ignore the first token\n@@ -829,7 +829,10 @@ else if (line.startsWith(\"dup\")) {\n                                 st.nextElement();\n                                 int index = Integer.parseInt(st.nextToken());\n                                 String name = st.nextToken();\n-                                encoding.addCharacterEncoding(index, name.replace(\"/\", \"\"));\n+                                if(encoding == null)\n+                                    log.warn(\"Unable to get character encoding.  Encoding defintion found without /Encoding line.\");\n+                                else\n+                                    encoding.addCharacterEncoding(index, name.replace(\"/\", \"\"));\n                             }\n                         }\n                         in.close();",
                "raw_url": "https://github.com/apache/pdfbox/raw/d0dc78ed7bf8e69fa51e87ad42225b2ef3ceab6d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "dafd3ed897c8df4e00430e46c263ab4952423876",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-897: NullPointerException PDFFont#getEncodingFromFont with a PDF book because Type1Encoding is null\nPatch by Martijn Brinkers with logging added by Adam Nichols.\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1037891 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_d25ffd9": {
        "bug_id": "pdfbox_d25ffd9",
        "commit": "https://github.com/apache/pdfbox/commit/d25ffd989ca99ae7da09f91cafccd2ff6e5979f8",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/d25ffd989ca99ae7da09f91cafccd2ff6e5979f8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java?ref=d25ffd989ca99ae7da09f91cafccd2ff6e5979f8",
                "deletions": 2,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "patch": "@@ -291,10 +291,18 @@ public boolean addAll(int index, Collection<? extends E> c)\n         List<Float> retval = null;\n         if( floatArray != null )\n         {\n-            List<Float> numbers = new ArrayList<Float>();\n+            List<Float> numbers = new ArrayList<Float>(floatArray.size());\n             for( int i=0; i<floatArray.size(); i++ )\n             {\n-                numbers.add(((COSNumber) floatArray.getObject(i)).floatValue());\n+                COSBase base = floatArray.getObject(i);\n+                if (base instanceof COSNumber)\n+                {\n+                    numbers.add(((COSNumber) base).floatValue());\n+                }\n+                else\n+                {\n+                    numbers.add(null);\n+                }\n             }\n             retval = new COSArrayList<Float>( numbers, floatArray );\n         }",
                "raw_url": "https://github.com/apache/pdfbox/raw/d25ffd989ca99ae7da09f91cafccd2ff6e5979f8/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "sha": "7623d42994bf5dad479b0182d964d94ff31895d5",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3448: avoid NullPointerException for null elements\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1754967 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/c8dc78a6dd0df9c67cca1139c6ff6b1b0dbb499e",
        "patched_files": [
            "COSArrayList.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "COSArrayListTest.java"
        ]
    },
    "pdfbox_d3c45be": {
        "bug_id": "pdfbox_d3c45be",
        "commit": "https://github.com/apache/pdfbox/commit/d3c45be1be0d4d29aef41704a636b332cafb700c",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/d3c45be1be0d4d29aef41704a636b332cafb700c/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java?ref=d3c45be1be0d4d29aef41704a636b332cafb700c",
                "deletions": 3,
                "filename": "src/test/java/org/apache/pdfbox/util/TestPDFToImage.java",
                "patch": "@@ -190,10 +190,12 @@ public boolean accept(File dir, String name)\n                         return (name.endsWith(\".pdf\") || name.endsWith(\".ai\"));\n                     }\n                 });\n-\n-                for (int n = 0; n < testFiles.length; n++)\n+                if (testFiles != null)\n                 {\n-                    doTestFile(testFiles[n], false, inDirExt, outDirExt);\n+                    for (int n = 0; n < testFiles.length; n++)\n+                    {\n+                        doTestFile(testFiles[n], false, inDirExt, outDirExt);\n+                    }\n                 }\n             }\n             else",
                "raw_url": "https://github.com/apache/pdfbox/raw/d3c45be1be0d4d29aef41704a636b332cafb700c/src/test/java/org/apache/pdfbox/util/TestPDFToImage.java",
                "sha": "6a877a18e79e78feb7cf8894872c4194f59b0abe",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-391: avoid NPE if there aren't any input-ext files\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/pdfbox/trunk@795111 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1a1eca4fe6d5f7c485458c2393df2617d71e3377",
        "patched_files": [
            "PDFToImage.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDFToImage.java"
        ]
    },
    "pdfbox_d64875a": {
        "bug_id": "pdfbox_d64875a",
        "commit": "https://github.com/apache/pdfbox/commit/d64875a5f8db2f5bc6ccbcb631cb4a719334094b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/pdfbox/blob/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "changes": 29,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java?ref=d64875a5f8db2f5bc6ccbcb631cb4a719334094b",
                "deletions": 24,
                "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "patch": "@@ -56,36 +56,17 @@\n     /**\n      * Initialize the signature creator with a keystore and certficate password.\n      * @param keystore the pkcs12 keystore containing the signing certificate\n-     * @param password the password for recovering the key\n+     * @param pin the password for recovering the key\n      * @throws KeyStoreException if the keystore has not been initialized (loaded)\n      * @throws NoSuchAlgorithmException if the algorithm for recovering the key cannot be found\n      * @throws UnrecoverableKeyException if the given password is wrong\n      * @throws CertificateException if the certificate is not valid as signing time\n+     * @throws IOException if no certificate could be found\n      */\n-    public CreateSignature(KeyStore keystore, char[] password)\n-            throws KeyStoreException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException\n+    public CreateSignature(KeyStore keystore, char[] pin)\n+            throws KeyStoreException, UnrecoverableKeyException, NoSuchAlgorithmException, CertificateException, IOException\n     {\n-        // grabs the first alias from the keystore and get the private key. An\n-        // TODO alternative method or constructor could be used for setting a specific\n-        // alias that should be used.\n-        Enumeration<String> aliases = keystore.aliases();\n-        String alias;\n-        if (aliases.hasMoreElements())\n-        {\n-            alias = aliases.nextElement();\n-        }\n-        else\n-        {\n-            throw new KeyStoreException(\"Keystore is empty\");\n-        }\n-        setPrivateKey((PrivateKey) keystore.getKey(alias, password));\n-        Certificate cert = keystore.getCertificateChain(alias)[0];\n-        setCertificate(cert);\n-        if (cert instanceof X509Certificate)\n-        {\n-            // avoid expired certificate\n-            ((X509Certificate) cert).checkValidity();\n-        }\n+        super(keystore, pin);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignature.java",
                "sha": "f71e4a887085d21dd29ebdfc5b446fbc7354ac57",
                "status": "modified"
            },
            {
                "additions": 55,
                "blob_url": "https://github.com/apache/pdfbox/blob/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java",
                "changes": 57,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java?ref=d64875a5f8db2f5bc6ccbcb631cb4a719334094b",
                "deletions": 2,
                "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java",
                "patch": "@@ -19,9 +19,16 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.GeneralSecurityException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n import java.security.PrivateKey;\n+import java.security.UnrecoverableKeyException;\n import java.security.cert.Certificate;\n+import java.security.cert.CertificateException;\n+import java.security.cert.X509Certificate;\n import java.util.ArrayList;\n+import java.util.Enumeration;\n import java.util.List;\n import org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface;\n import org.bouncycastle.asn1.ASN1Encodable;\n@@ -54,12 +61,58 @@\n     private Certificate certificate;\n     private TSAClient tsaClient;\n \n-    public void setPrivateKey(PrivateKey privateKey)\n+    /**\n+     * Initialize the signature creator with a keystore (pkcs12) and pin that should be used for the\n+     * signature.\n+     *\n+     * @param keystore is a pkcs12 keystore.\n+     * @param pin is the pin for the keystore / private key\n+     * @throws KeyStoreException if the keystore has not been initialized (loaded)\n+     * @throws NoSuchAlgorithmException if the algorithm for recovering the key cannot be found\n+     * @throws UnrecoverableKeyException if the given password is wrong\n+     * @throws CertificateException if the certificate is not valid as signing time\n+     * @throws IOException if no certificate could be found\n+     */\n+    public CreateSignatureBase(KeyStore keystore, char[] pin)\n+            throws KeyStoreException, UnrecoverableKeyException, NoSuchAlgorithmException, IOException, CertificateException\n+    {\n+        // grabs the first alias from the keystore and get the private key. An\n+        // alternative method or constructor could be used for setting a specific\n+        // alias that should be used.\n+        Enumeration<String> aliases = keystore.aliases();\n+        String alias;\n+        Certificate cert = null;\n+        while (aliases.hasMoreElements())\n+        {\n+            alias = aliases.nextElement();\n+            setPrivateKey((PrivateKey) keystore.getKey(alias, pin));\n+            Certificate[] certChain = keystore.getCertificateChain(alias);\n+            if (certChain == null)\n+            {\n+                continue;\n+            }\n+            cert = certChain[0];\n+            setCertificate(cert);\n+            if (cert instanceof X509Certificate)\n+            {\n+                // avoid expired certificate\n+                ((X509Certificate) cert).checkValidity();\n+            }\n+            break;\n+        }\n+\n+        if (cert == null)\n+        {\n+            throw new IOException(\"Could not find certificate\");\n+        }\n+    }\n+\n+    public final void setPrivateKey(PrivateKey privateKey)\n     {\n         this.privateKey = privateKey;\n     }\n \n-    public void setCertificate(Certificate certificate)\n+    public final void setCertificate(Certificate certificate)\n     {\n         this.certificate = certificate;\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateSignatureBase.java",
                "sha": "8026d4323c42d2920694d1f8e0353b175a8bdc86",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java?ref=d64875a5f8db2f5bc6ccbcb631cb4a719334094b",
                "deletions": 21,
                "filename": "examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
                "patch": "@@ -81,31 +81,12 @@ public void setVisibleSignatureProperties(String name, String location, String r\n      * @throws NoSuchAlgorithmException if the algorithm for recovering the key cannot be found\n      * @throws UnrecoverableKeyException if the given password is wrong\n      * @throws CertificateException if the certificate is not valid as signing time\n+     * @throws IOException if no certificate could be found\n      */\n     public CreateVisibleSignature(KeyStore keystore, char[] pin)\n             throws KeyStoreException, UnrecoverableKeyException, NoSuchAlgorithmException, IOException, CertificateException\n     {\n-        // grabs the first alias from the keystore and get the private key. An\n-        // alternative method or constructor could be used for setting a specific\n-        // alias that should be used.\n-        Enumeration<String> aliases = keystore.aliases();\n-        String alias = null;\n-        if (aliases.hasMoreElements())\n-        {\n-            alias = aliases.nextElement();\n-        }\n-        else\n-        {\n-            throw new IOException(\"Could not find alias\");\n-        }\n-        setPrivateKey((PrivateKey) keystore.getKey(alias, pin));\n-        Certificate cert = keystore.getCertificateChain(alias)[0];\n-        setCertificate(cert);\n-        if (cert instanceof X509Certificate)\n-        {\n-            // avoid expired certificate\n-            ((X509Certificate) cert).checkValidity();\n-        }\n+        super(keystore, pin);\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/d64875a5f8db2f5bc6ccbcb631cb4a719334094b/examples/src/main/java/org/apache/pdfbox/examples/signature/CreateVisibleSignature.java",
                "sha": "7c4e7f48690a06d4e8359aad49e29fee065675ce",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3416: avoid NullPointerException as suggested by Vittal Aithal; refactor double code\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1752186 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/97ae43642a255d3c9dcf3c8b579985edc4e09ca2",
        "patched_files": [
            "CreateSignature.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestCreateSignature.java"
        ]
    },
    "pdfbox_e3c8b09": {
        "bug_id": "pdfbox_e3c8b09",
        "commit": "https://github.com/apache/pdfbox/commit/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
                "deletions": 0,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "patch": "@@ -47,6 +47,16 @@\n         this.isCIDFont = isCIDFont;\n     }\n \n+    /**\n+     * Indicates if the charset belongs to a CID font.\n+     * \n+     * @return true for CID fonts\n+     */\n+    public boolean isCIDFont()\n+    {\n+        return isCIDFont;\n+    }\n+    \n     /**\n      * Adds a new GID/SID/name combination to the charset.\n      *",
                "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFCharset.java",
                "sha": "217bfeb4b3c7883adf0dec01bf72a1dde1c0e35d",
                "status": "modified"
            },
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad",
                "deletions": 6,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -1323,11 +1323,14 @@ protected Format1Charset(boolean isCIDFont)\n         @Override\r\n         public int getCIDForGID(int gid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInRange(gid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapValue(gid);\r\n+                    if (mapping.isInRange(gid))\r\n+                    {\r\n+                        return mapping.mapValue(gid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getCIDForGID(gid);\r\n@@ -1336,11 +1339,14 @@ public int getCIDForGID(int gid)\n         @Override\r\n         public int getGIDForCID(int cid)\r\n         {\r\n-            for (RangeMapping mapping : rangesCID2GID)\r\n+            if (isCIDFont())\r\n             {\r\n-                if (mapping.isInReverseRange(cid))\r\n+                for (RangeMapping mapping : rangesCID2GID)\r\n                 {\r\n-                    return mapping.mapReverseValue(cid);\r\n+                    if (mapping.isInReverseRange(cid))\r\n+                    {\r\n+                        return mapping.mapReverseValue(cid);\r\n+                    }\r\n                 }\r\n             }\r\n             return super.getGIDForCID(cid);\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/e3c8b09cdae84e8dd7d5e8f5504a0e8bece919ad/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "e579e8f0ecc36f89439f08a98f8f0d27a265ac96",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3187: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1724102 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/1d9155376cc2805aae8331f939dd7784b17eee41",
        "patched_files": [
            "CFFParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_e6470fe": {
        "bug_id": "pdfbox_e6470fe",
        "commit": "https://github.com/apache/pdfbox/commit/e6470feaf5eafb9de9981cf3a0529a1adb8eea00",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java?ref=e6470feaf5eafb9de9981cf3a0529a1adb8eea00",
                "deletions": 1,
                "filename": "fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "patch": "@@ -1075,7 +1075,6 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n         {\r\n             int first = dataInput.readSID();\r\n             int nLeft = dataInput.readCard16();\r\n-            charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n             if (!isCIDFont)\r\n             {\r\n                 for (int j = 0; j < 1 + nLeft; j++)\r\n@@ -1084,6 +1083,10 @@ private Format2Charset readFormat2Charset(CFFDataInput dataInput, int format, in\n                     charset.addSID(gid + j, sid, readString(sid));\r\n                 }\r\n             }\r\n+            else\r\n+            {\r\n+                charset.rangesCID2GID.add(new Format2Charset.Range(gid, first, nLeft));\r\n+            }\r\n             gid += nLeft;\r\n         }\r\n         return charset;\r",
                "raw_url": "https://github.com/apache/pdfbox/raw/e6470feaf5eafb9de9981cf3a0529a1adb8eea00/fontbox/src/main/java/org/apache/fontbox/cff/CFFParser.java",
                "sha": "5dcdfc1c98c76d6f62d7b4aa0f037e79573c2a65",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3131: avoid NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1721419 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/a51120cb1ec47de5bceb5b962bb4d536bf215cc2",
        "patched_files": [
            "CFFParser.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "CFFParserTest.java"
        ]
    },
    "pdfbox_e8b3469": {
        "bug_id": "pdfbox_e8b3469",
        "commit": "https://github.com/apache/pdfbox/commit/e8b34694cf320960375ebe28c66ad5a2b3ec9f81",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/pdfbox/blob/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java?ref=e8b34694cf320960375ebe28c66ad5a2b3ec9f81",
                "deletions": 12,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "patch": "@@ -247,20 +247,23 @@ public InputStream createInputStream(List<String> stopFilters) throws IOExceptio\n         InputStream is = stream.createRawInputStream();\n         ByteArrayOutputStream os = new ByteArrayOutputStream();\n         List<COSName> filters = getFilters();\n-        for (int i = 0; i < filters.size(); i++)\n+        if (filters != null)\n         {\n-            COSName nextFilter = filters.get(i);\n-            if (stopFilters.contains(nextFilter.getName()))\n+            for (int i = 0; i < filters.size(); i++)\n             {\n-                break;\n-            }\n-            else\n-            {\n-                Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n-                filter.decode(is, os, stream, i);\n-                IOUtils.closeQuietly(is);\n-                is = new ByteArrayInputStream(os.toByteArray());\n-                os.reset();\n+                COSName nextFilter = filters.get(i);\n+                if ((stopFilters != null) && stopFilters.contains(nextFilter.getName()))\n+                {\n+                    break;\n+                }\n+                else\n+                {\n+                    Filter filter = FilterFactory.INSTANCE.getFilter(nextFilter);\n+                    filter.decode(is, os, stream, i);\n+                    IOUtils.closeQuietly(is);\n+                    is = new ByteArrayInputStream(os.toByteArray());\n+                    os.reset();\n+                }\n             }\n         }\n         return is;",
                "raw_url": "https://github.com/apache/pdfbox/raw/e8b34694cf320960375ebe28c66ad5a2b3ec9f81/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "sha": "f773de04ba049e2836fccf9af8acc354d73387ae",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2948: prevent NPE when stream has no filter\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1698151 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7196c84de4fe3639dd20a2d8a02c599242608d7c",
        "patched_files": [
            "PDStream.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDStreamTest.java"
        ]
    },
    "pdfbox_e96983a": {
        "bug_id": "pdfbox_e96983a",
        "commit": "https://github.com/apache/pdfbox/commit/e96983aa602bb3ecc57860cbd3b9dd14b79bc325",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=e96983aa602bb3ecc57860cbd3b9dd14b79bc325",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -377,7 +377,7 @@ protected float getAverageFontWidthFromAFMFile() throws IOException\n      */\n     protected FontMetric getAFM()\n     {\n-        if(afm==null){\n+        if(isType1Font() && afm==null){\n             COSBase baseFont = font.getDictionaryObject( COSName.BASE_FONT );\n             String name = null;\n             if( baseFont instanceof COSName )",
                "raw_url": "https://github.com/apache/pdfbox/raw/e96983aa602bb3ecc57860cbd3b9dd14b79bc325/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "af6de4ed63a4b4bdddbc784a1063d380a99e25d3",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-1008: use AFM metrics only with Type1 fonts to avoid NPE in getFontHeight \n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1133689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/7cf0bd0df5d21e9f81cb549f90856800a0e343e2",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_eb385bf": {
        "bug_id": "pdfbox_eb385bf",
        "commit": "https://github.com/apache/pdfbox/commit/eb385bf10f197123eb0979f7319df3b6aa351fbf",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/pdfbox/blob/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java?ref=eb385bf10f197123eb0979f7319df3b6aa351fbf",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "patch": "@@ -164,7 +164,8 @@ public PDSignature getDefaultValue()\n     @Override\n     public String getValueAsString()\n     {\n-        return getValue().toString();\n+        PDSignature signature = getValue();\n+        return signature != null ? signature.toString() : \"\";\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/eb385bf10f197123eb0979f7319df3b6aa351fbf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/interactive/form/PDSignatureField.java",
                "sha": "d37f6047eaf9d97056b38c236698a5687fd10845",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2932: avoid NPE when field has no value\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1695466 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fed8a29b81b5dda18d857c9bb99b07575c92f332",
        "patched_files": [
            "PDSignatureField.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDSignatureFieldTest.java"
        ]
    },
    "pdfbox_ecb2f58": {
        "bug_id": "pdfbox_ecb2f58",
        "commit": "https://github.com/apache/pdfbox/commit/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java?ref=ecb2f58c6871b8da8f2bc5561c4b3124ca361afe",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "patch": "@@ -691,7 +691,12 @@ public boolean isTrueTypeFont()\n      */\n     public boolean isSymbolicFont()\n     {\n-        return getFontDescriptor().isSymbolic();\n+        // not all fonts have a font descriptor\n+        if (getFontDescriptor() != null)\n+        {\n+            return getFontDescriptor().isSymbolic();\n+        }\n+        return false;\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/pdfbox/raw/ecb2f58c6871b8da8f2bc5561c4b3124ca361afe/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/font/PDFont.java",
                "sha": "45baa765d82a39b77c42346ba9121b69c869e836",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2149: avoid, NPE, as not all fonts have a font descriptor\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1603854 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/e46676736abe6f8d25ecb6adc2e80e5b11903c00",
        "patched_files": [
            "PDFont.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFontTest.java"
        ]
    },
    "pdfbox_f1548a4": {
        "bug_id": "pdfbox_f1548a4",
        "commit": "https://github.com/apache/pdfbox/commit/f1548a438eff04ae318e547dbc868e170bde13b1",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/pdfbox/blob/f1548a438eff04ae318e547dbc868e170bde13b1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java?ref=f1548a438eff04ae318e547dbc868e170bde13b1",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "patch": "@@ -164,7 +164,9 @@ public static PDStream createFromCOS( COSBase base ) throws IOException\n         }\n         else if( base instanceof COSArray )\n         {\n-            retval = new PDStream( new COSStreamArray( (COSArray)base ) );\n+            if (((COSArray)base).size() > 0) {\n+                retval = new PDStream( new COSStreamArray( (COSArray)base ) );\n+            }\n         }\n         else\n         {",
                "raw_url": "https://github.com/apache/pdfbox/raw/f1548a438eff04ae318e547dbc868e170bde13b1/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDStream.java",
                "sha": "1782a48be2c1eb76bb248adb9f3f4ec9727d791c",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-898: COSStreamArray NullPointerException. firstStream is null if COSArray contains no items\nPatch contributed by Martijn Brinkers\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1037894 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/d0dc78ed7bf8e69fa51e87ad42225b2ef3ceab6d",
        "patched_files": [
            "PDStream.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDStreamTest.java"
        ]
    },
    "pdfbox_f39436a": {
        "bug_id": "pdfbox_f39436a",
        "commit": "https://github.com/apache/pdfbox/commit/f39436a8796e8e72313ae03c2029662e33fde9a8",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/pdfbox/blob/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java?ref=f39436a8796e8e72313ae03c2029662e33fde9a8",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "patch": "@@ -420,7 +420,7 @@ public void appendDocument(PDDocument destination, PDDocument source) throws IOE\n         PDDocumentOutline srcOutline = srcCatalog.getDocumentOutline();\n         if (srcOutline != null)\n         {\n-            if (destOutline == null)\n+            if (destOutline == null || destOutline.getFirstChild() == null)\n             {\n                 PDDocumentOutline cloned = new PDDocumentOutline((COSDictionary) cloner.cloneForNewDocument(srcOutline));\n                 destCatalog.setDocumentOutline(cloned);",
                "raw_url": "https://github.com/apache/pdfbox/raw/f39436a8796e8e72313ae03c2029662e33fde9a8/pdfbox/src/main/java/org/apache/pdfbox/multipdf/PDFMergerUtility.java",
                "sha": "20eef6ea365528a07565878669965fe7a44e7265",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-3761: avoid NPE if /Outlines exists but is empty\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1791933 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5a20e5cac9ed3a4f52fe0de7f0b78789c43551e7",
        "patched_files": [
            "PDFMergerUtility.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "PDFMergerUtilityTest.java"
        ]
    },
    "pdfbox_f4e4fc5": {
        "bug_id": "pdfbox_f4e4fc5",
        "commit": "https://github.com/apache/pdfbox/commit/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/pdfbox/blob/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java?ref=f4e4fc542951b1c27b76ffd857d6d8973eb3f68d",
                "deletions": 5,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "patch": "@@ -23,6 +23,8 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.logging.Log;\n+import org.apache.commons.logging.LogFactory;\n \n import org.apache.pdfbox.cos.COSArray;\n import org.apache.pdfbox.cos.COSBase;\n@@ -39,6 +41,7 @@\n  */\n public class PDNameTreeNode implements COSObjectable\n {\n+    private static final Log log = LogFactory.getLog(PDNameTreeNode.class);\n     private COSDictionary node;\n     private Class valueType = null;\n \n@@ -147,15 +150,22 @@ public Object getValue( String name ) throws IOException\n         else\n         {\n             List kids = getKids();\n-            for( int i=0; i<kids.size() && retval == null; i++ )\n+            if (kids != null) \n             {\n-                PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n-                if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n-                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                for( int i=0; i<kids.size() && retval == null; i++ )\n                 {\n-                    retval = childNode.getValue( name );\n+                    PDNameTreeNode childNode = (PDNameTreeNode)kids.get( i );\n+                    if( childNode.getLowerLimit().compareTo( name ) <= 0 &&\n+                        childNode.getUpperLimit().compareTo( name ) >= 0 )\n+                    {\n+                        retval = childNode.getValue( name );\n+                    }\n                 }\n             }\n+            else\n+            {\n+                log.warn(\"NameTreeNode does not have \\\"names\\\" nor \\\"kids\\\" objects.\");\n+            }\n         }\n         return retval;\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/f4e4fc542951b1c27b76ffd857d6d8973eb3f68d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/PDNameTreeNode.java",
                "sha": "62759c2fbac04c1b31666675e28f37db17834630",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-891: Malformed document causes NPE in PDNameTreeNode.getValue\nPatch courtesy of Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1037069 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/42087b9de7fd044853fc476e562c0274a1638157",
        "patched_files": [
            "PDNameTreeNode.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDNameTreeNode.java"
        ]
    },
    "pdfbox_f95ac87": {
        "bug_id": "pdfbox_f95ac87",
        "commit": "https://github.com/apache/pdfbox/commit/f95ac87e74c5c2d62818cc1942c8f06090d751bf",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/pdfbox/blob/f95ac87e74c5c2d62818cc1942c8f06090d751bf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 17,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=f95ac87e74c5c2d62818cc1942c8f06090d751bf",
                "deletions": 7,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -328,17 +328,20 @@ public void addSignature(PDSignature sigObject, SignatureInterface signatureInte\n                     {\n                         COSDictionary cosBaseDict = (COSDictionary) base;\n \n-                        // Appearance Dictionary auslesen und setzen\n-                        PDAppearanceDictionary ap = new PDAppearanceDictionary(\n-                                (COSDictionary) cosBaseDict.getItem(COSName.AP));\n+                        // read and set Appearance Dictionary\n+                        PDAppearanceDictionary ap = \n+                                new PDAppearanceDictionary((COSDictionary)cosBaseDict.getDictionaryObject(COSName.AP));\n                         ap.getCOSObject().setDirect(true);\n                         signatureField.getWidget().setAppearance(ap);\n \n-                        // AcroForm DefaultRessource auslesen und setzen\n+                        // read and set AcroForm DefaultResource\n                         COSBase dr = cosBaseDict.getItem(COSName.DR);\n-                        dr.setDirect(true);\n-                        dr.setNeedToBeUpdate(true);\n-                        acroFormDict.setItem(COSName.DR, dr);\n+                        if (dr != null)\n+                        {\n+                            dr.setDirect(true);\n+                            dr.setNeedToBeUpdate(true);\n+                            acroFormDict.setItem(COSName.DR, dr);\n+                        }\n                         sigFieldNotFound = false;\n                     }\n                 }",
                "raw_url": "https://github.com/apache/pdfbox/raw/f95ac87e74c5c2d62818cc1942c8f06090d751bf/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "e6c4c0be7e286d906d096af22ac59b067573384e",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2470: avoid ClassCastException or NullPointerException in addSignature, as suggested by Huynh and John Hewson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1637476 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/4a2754950a855e7342c1c0cc6661336ff833cc25",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_fafcb5e": {
        "bug_id": "pdfbox_fafcb5e",
        "commit": "https://github.com/apache/pdfbox/commit/fafcb5e24d6d0b984903637b86bb0f47438cf8c6",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/pdfbox/blob/fafcb5e24d6d0b984903637b86bb0f47438cf8c6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java?ref=fafcb5e24d6d0b984903637b86bb0f47438cf8c6",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "patch": "@@ -177,7 +177,10 @@ else if( o instanceof DualCOSObjectable )\n         }\n         else\n         {\n-            array.add( ((COSObjectable)o).getCOSObject() );\n+            if(array != null)\n+            {\n+                array.add(((COSObjectable)o).getCOSObject());\n+            }\n         }\n         return actual.add(o);\n     }",
                "raw_url": "https://github.com/apache/pdfbox/raw/fafcb5e24d6d0b984903637b86bb0f47438cf8c6/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/common/COSArrayList.java",
                "sha": "488e799f8154519e88da217a9a739da1bc46490a",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-928: added NPE protection which occurred when reading corrupt PDFs\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1053229 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/a008a943ee1188f29ce87ac5d736d7604cc440b1",
        "patched_files": [
            "COSArrayList.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "COSArrayListTest.java"
        ]
    },
    "pdfbox_fdb019d": {
        "bug_id": "pdfbox_fdb019d",
        "commit": "https://github.com/apache/pdfbox/commit/fdb019d531a938b5170a4cd4ecb8bb879c3d474d",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/pdfbox/blob/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=fdb019d531a938b5170a4cd4ecb8bb879c3d474d",
                "deletions": 1,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -968,13 +968,18 @@ public void save(OutputStream output) throws IOException\n     }\n \n    /**\n-     * Save the PDF as an incremental update.\n+     * Save the PDF as an incremental update. This is only possible if the PDF was loaded from a file.\n      *\n      * @param output stream to write\n      * @throws IOException if the output could not be written\n+     * @throws IllegalStateException if the document was not loaded from a file.\n      */\n     public void saveIncremental(OutputStream output) throws IOException\n     {\n+        if (incrementalFile == null)\n+        {\n+            throw new IllegalStateException(\"Incremental save is only possible if the document was loaded from a file\");\n+        }\n         InputStream input = new RandomAccessBufferedFileInputStream(incrementalFile);\n         COSWriter writer = null;\n         try",
                "raw_url": "https://github.com/apache/pdfbox/raw/fdb019d531a938b5170a4cd4ecb8bb879c3d474d/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "03a0eb555a9723c903b0e4c2534f9d6922ba0111",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-2716: throw IllegalStateException instead of NPE if saveIncremental() called after loading from a stream instead of a file\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1674945 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/5519b3d8c1700a62b00adba8d4a6f04ba8b975c6",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    },
    "pdfbox_ffbc207": {
        "bug_id": "pdfbox_ffbc207",
        "commit": "https://github.com/apache/pdfbox/commit/ffbc2070ecd7dc6893a48330aae0db5942c75cd9",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/pdfbox/blob/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "changes": 21,
                "contents_url": "https://api.github.com/repos/apache/pdfbox/contents/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java?ref=ffbc2070ecd7dc6893a48330aae0db5942c75cd9",
                "deletions": 9,
                "filename": "pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "patch": "@@ -322,16 +322,19 @@ public PDPage importPage( PDPage page ) throws IOException\n         try\n         {\n             PDStream src = page.getContents();\n-            PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n-            importedPage.setContents( dest );\n-            os = dest.createOutputStream();\n-\n-            byte[] buf = new byte[10240];\n-            int amountRead = 0;\n-            is = src.createInputStream();\n-            while((amountRead = is.read(buf,0,10240)) > -1)\n+            if(src != null)\n             {\n-                os.write(buf, 0, amountRead);\n+                PDStream dest = new PDStream( new COSStream( src.getStream(), document.getScratchFile() ) );\n+                importedPage.setContents( dest );\n+                os = dest.createOutputStream();\n+\n+                byte[] buf = new byte[10240];\n+                int amountRead = 0;\n+                is = src.createInputStream();\n+                while((amountRead = is.read(buf,0,10240)) > -1)\n+                {\n+                    os.write(buf, 0, amountRead);\n+                }\n             }\n             addPage( importedPage );\n         }",
                "raw_url": "https://github.com/apache/pdfbox/raw/ffbc2070ecd7dc6893a48330aae0db5942c75cd9/pdfbox/src/main/java/org/apache/pdfbox/pdmodel/PDDocument.java",
                "sha": "eff6afe92ceec424769f84ad0cb869fe3aa03d2b",
                "status": "modified"
            }
        ],
        "message": "PDFBOX-889: Empty page causes NPE in importPage\nPatch contributed by Kevin Jackson\n\ngit-svn-id: https://svn.apache.org/repos/asf/pdfbox/trunk@1038232 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/pdfbox/commit/fb9ab33a4943741ad165de2036128946d17e58b2",
        "patched_files": [
            "PDDocument.java"
        ],
        "repo": "pdfbox",
        "unit_tests": [
            "TestPDDocument.java"
        ]
    }
}