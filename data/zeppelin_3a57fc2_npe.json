[
    {
        "repo": "zeppelin",
        "commit": "https://github.com/apache/zeppelin/commit/3a57fc2933eef0bcbec1679f06acc3c659d62dff",
        "bug_id": "zeppelin_3a57fc2",
        "message": "0.7.1 with ssl\n\nThe Cassandra Interpreter does not support talking to clusters that use SSL/client to node encryption. It does not have the properties needed to configure the SSL Context. This PR adds the properties to the driver config and sets up the SSL options when they are requested.\n\nFeature\n\n[ZEPPELIN-1501](https://issues.apache.org/jira/browse/ZEPPELIN-1501)\n\nUsing Cassandra/CQL interpreter connect to a Cassandra cluster that uses a client to node encryption, i.e:\n\n```\n%cassandra\ndescribe keyspaces;\n```\n* Does the licenses files need update? No\n* Is there breaking changes for older versions? No\n* Does this needs documentation? Yes.\n    The new SSL-related properties should be added to the list (cassandra.ssl.enabled, cassandra.ssl.truststore.path and cassandra.ssl.truststore.password).\n\nAuthor: Alex Lourie <djay.il@gmail.com>\nAuthor: Robert Marshall <robertmarshall@Instaclustrs-MacBook-Pro.local>\n\nCloses #2238 from alourie/0.7.1-withSSL and squashes the following commits:\n\n2a6eee6 [Alex Lourie] Handle potential NPE in properties parsing\ne9b4769 [Alex Lourie] Fix formatting for CI to pass\n521b2d9 [Robert Marshall] Add SSL support to Cassandra interpreter\n\n(cherry picked from commit 53ea135ce2de6be792aba6ebd9f67fb4d0996f7b)\nSigned-off-by: Lee moon soo <moon@apache.org>",
        "parent": "https://github.com/apache/zeppelin/commit/6bd6c70881e8515a5b0679e5a8d6c235cfb1adf6",
        "patched_files": [
            "CassandraInterpreter.java",
            "interpreter-setting.json"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 71,
                "raw_url": "https://github.com/apache/zeppelin/raw/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java?ref=3a57fc2933eef0bcbec1679f06acc3c659d62dff",
                "filename": "cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "deletions": 29,
                "sha": "0f986be3189589c2643ecb5b5212ffe5783cbba3",
                "blob_url": "https://github.com/apache/zeppelin/blob/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
                "patch": "@@ -17,23 +17,28 @@\n package org.apache.zeppelin.cassandra;\n \n import com.datastax.driver.core.Cluster;\n+import com.datastax.driver.core.JdkSSLOptions;\n import com.datastax.driver.core.ProtocolOptions.Compression;\n import com.datastax.driver.core.Session;\n import org.apache.zeppelin.interpreter.Interpreter;\n import org.apache.zeppelin.interpreter.InterpreterContext;\n-import org.apache.zeppelin.interpreter.InterpreterPropertyBuilder;\n import org.apache.zeppelin.interpreter.InterpreterResult;\n import org.apache.zeppelin.interpreter.thrift.InterpreterCompletion;\n import org.apache.zeppelin.scheduler.Scheduler;\n import org.apache.zeppelin.scheduler.SchedulerFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n+import javax.net.ssl.SSLContext;\n+import javax.net.ssl.TrustManagerFactory;\n+import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Paths;\n+import java.security.KeyStore;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Properties;\n \n-import static com.datastax.driver.core.ProtocolOptions.DEFAULT_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS;\n import static java.lang.Integer.parseInt;\n \n /**\n@@ -43,8 +48,8 @@\n \n   private static final Logger LOGGER = LoggerFactory.getLogger(CassandraInterpreter.class);\n \n-  public static final String CASSANDRA_INTERPRETER_PARALLELISM = \"cassandra.interpreter\" +\n-      \".parallelism\";\n+  public static final String CASSANDRA_INTERPRETER_PARALLELISM =\n+          \"cassandra.interpreter.parallelism\";\n   public static final String CASSANDRA_HOSTS = \"cassandra.hosts\";\n   public static final String CASSANDRA_PORT = \"cassandra.native.port\";\n   public static final String CASSANDRA_PROTOCOL_VERSION = \"cassandra.protocol.version\";\n@@ -59,21 +64,21 @@\n   public static final String CASSANDRA_SPECULATIVE_EXECUTION_POLICY =\n           \"cassandra.speculative.execution.policy\";\n   public static final String CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS =\n-        \"cassandra.max.schema.agreement.wait.second\";\n+          \"cassandra.max.schema.agreement.wait.second\";\n   public static final String CASSANDRA_POOLING_NEW_CONNECTION_THRESHOLD_LOCAL =\n-        \"cassandra.pooling.new.connection.threshold.local\";\n+          \"cassandra.pooling.new.connection.threshold.local\";\n   public static final String CASSANDRA_POOLING_NEW_CONNECTION_THRESHOLD_REMOTE =\n-        \"cassandra.pooling.new.connection.threshold.remote\";\n+          \"cassandra.pooling.new.connection.threshold.remote\";\n   public static final String CASSANDRA_POOLING_MAX_CONNECTION_PER_HOST_LOCAL =\n-        \"cassandra.pooling.max.connection.per.host.local\";\n+          \"cassandra.pooling.max.connection.per.host.local\";\n   public static final String CASSANDRA_POOLING_MAX_CONNECTION_PER_HOST_REMOTE =\n-        \"cassandra.pooling.max.connection.per.host.remote\";\n+          \"cassandra.pooling.max.connection.per.host.remote\";\n   public static final String CASSANDRA_POOLING_CORE_CONNECTION_PER_HOST_LOCAL =\n           \"cassandra.pooling.core.connection.per.host.local\";\n   public static final String CASSANDRA_POOLING_CORE_CONNECTION_PER_HOST_REMOTE =\n           \"cassandra.pooling.core.connection.per.host.remote\";\n   public static final String CASSANDRA_POOLING_MAX_REQUESTS_PER_CONNECTION_LOCAL =\n-        \"cassandra.pooling.max.request.per.connection.local\";\n+          \"cassandra.pooling.max.request.per.connection.local\";\n   public static final String CASSANDRA_POOLING_MAX_REQUESTS_PER_CONNECTION_REMOTE =\n           \"cassandra.pooling.max.request.per.connection.remote\";\n   public static final String CASSANDRA_POOLING_IDLE_TIMEOUT_SECONDS =\n@@ -106,6 +111,13 @@\n           \"cassandra.socket.soLinger\";\n   public static final String CASSANDRA_SOCKET_TCP_NO_DELAY =\n           \"cassandra.socket.tcp.no_delay\";\n+  public static final String CASSANDRA_WITH_SSL =\n+          \"cassandra.ssl.enabled\";\n+  public static final String CASSANDRA_TRUSTSTORE_PATH =\n+          \"cassandra.ssl.truststore.path\";\n+  public static final String CASSANDRA_TRUSTSTORE_PASSWORD =\n+          \"cassandra.ssl.truststore.password\";\n+\n \n   public static final String DEFAULT_HOST = \"localhost\";\n   public static final String DEFAULT_PORT = \"9042\";\n@@ -143,6 +155,7 @@\n   public static final List NO_COMPLETION = new ArrayList<>();\n \n   InterpreterLogic helper;\n+  Cluster.Builder clusterBuilder;\n   Cluster cluster;\n   Session session;\n   private JavaDriverConfig driverConfig = new JavaDriverConfig();\n@@ -162,29 +175,58 @@ public void open() {\n     }\n \n     LOGGER.info(\"Bootstrapping Cassandra Java Driver to connect to \" + hosts.toString() +\n-                  \"on port \" + port);\n+            \"on port \" + port);\n \n     Compression compression = driverConfig.getCompressionProtocol(this);\n \n-    cluster  = Cluster.builder()\n-      .addContactPoints(addresses)\n-      .withPort(port)\n-      .withProtocolVersion(driverConfig.getProtocolVersion(this))\n-      .withClusterName(getProperty(CASSANDRA_CLUSTER_NAME))\n-      .withCompression(compression)\n-      .withCredentials(getProperty(CASSANDRA_CREDENTIALS_USERNAME),\n-              getProperty(CASSANDRA_CREDENTIALS_PASSWORD))\n-      .withLoadBalancingPolicy(driverConfig.getLoadBalancingPolicy(this))\n-      .withRetryPolicy(driverConfig.getRetryPolicy(this))\n-      .withReconnectionPolicy(driverConfig.getReconnectionPolicy(this))\n-      .withSpeculativeExecutionPolicy(driverConfig.getSpeculativeExecutionPolicy(this))\n-      .withMaxSchemaAgreementWaitSeconds(\n-              parseInt(getProperty(CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS)))\n-      .withPoolingOptions(driverConfig.getPoolingOptions(this))\n-      .withQueryOptions(driverConfig.getQueryOptions(this))\n-      .withSocketOptions(driverConfig.getSocketOptions(this))\n-      .build();\n+    clusterBuilder = Cluster.builder()\n+            .addContactPoints(addresses)\n+            .withPort(port)\n+            .withProtocolVersion(driverConfig.getProtocolVersion(this))\n+            .withClusterName(getProperty(CASSANDRA_CLUSTER_NAME))\n+            .withCompression(compression)\n+            .withCredentials(getProperty(CASSANDRA_CREDENTIALS_USERNAME),\n+                    getProperty(CASSANDRA_CREDENTIALS_PASSWORD))\n+            .withLoadBalancingPolicy(driverConfig.getLoadBalancingPolicy(this))\n+            .withRetryPolicy(driverConfig.getRetryPolicy(this))\n+            .withReconnectionPolicy(driverConfig.getReconnectionPolicy(this))\n+            .withSpeculativeExecutionPolicy(driverConfig.getSpeculativeExecutionPolicy(this))\n+            .withMaxSchemaAgreementWaitSeconds(\n+                    parseInt(getProperty(CASSANDRA_MAX_SCHEMA_AGREEMENT_WAIT_SECONDS)))\n+            .withPoolingOptions(driverConfig.getPoolingOptions(this))\n+            .withQueryOptions(driverConfig.getQueryOptions(this))\n+            .withSocketOptions(driverConfig.getSocketOptions(this));\n+\n+    final String runWithSSL = getProperty(CASSANDRA_WITH_SSL);\n+    if (runWithSSL != null && runWithSSL.equals(\"true\")) {\n+      LOGGER.debug(\"Cassandra Interpreter: Using SSL\");\n+\n+      try {\n+        final SSLContext sslContext;\n+        {\n+          final KeyStore trustStore = KeyStore.getInstance(\"JKS\");\n+          final InputStream stream = Files.newInputStream(Paths.get(\n+                  getProperty(CASSANDRA_TRUSTSTORE_PATH)));\n+          trustStore.load(stream, getProperty(CASSANDRA_TRUSTSTORE_PASSWORD).toCharArray());\n+\n+          final TrustManagerFactory trustManagerFactory = TrustManagerFactory.getInstance(\n+                  TrustManagerFactory.getDefaultAlgorithm());\n+          trustManagerFactory.init(trustStore);\n+\n+          sslContext = SSLContext.getInstance(\"TLS\");\n+          sslContext.init(null, trustManagerFactory.getTrustManagers(), null);\n+        }\n+        clusterBuilder = clusterBuilder.withSSL(JdkSSLOptions.builder()\n+                .withSSLContext(sslContext)\n+                .build());\n+      } catch (Exception e) {\n+        LOGGER.error(e.toString());\n+      }\n+    } else {\n+      LOGGER.debug(\"Cassandra Interpreter: Not using SSL\");\n+    }\n \n+    cluster = clusterBuilder.build();\n     session = cluster.connect();\n     helper = new InterpreterLogic(session);\n   }",
                "changes": 100
            },
            {
                "status": "modified",
                "additions": 21,
                "raw_url": "https://github.com/apache/zeppelin/raw/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/resources/interpreter-setting.json",
                "contents_url": "https://api.github.com/repos/apache/zeppelin/contents/cassandra/src/main/resources/interpreter-setting.json?ref=3a57fc2933eef0bcbec1679f06acc3c659d62dff",
                "filename": "cassandra/src/main/resources/interpreter-setting.json",
                "deletions": 0,
                "sha": "407de9cdff3e16e1bf52cdb65a1d7386977c6415",
                "blob_url": "https://github.com/apache/zeppelin/blob/3a57fc2933eef0bcbec1679f06acc3c659d62dff/cassandra/src/main/resources/interpreter-setting.json",
                "patch": "@@ -220,6 +220,27 @@\n         \"defaultValue\": true,\n         \"description\": \"Cassandra socket TCP no delay. Default = true\",\n         \"type\": \"checkbox\"\n+      },\n+      \"cassandra.ssl.enabled\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.enabled\",\n+        \"defaultValue\": \"false\",\n+        \"description\": \"Cassandra SSL\",\n+        \"type\": \"checkbox\"\n+      },\n+      \"cassandra.ssl.truststore.path\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.truststore.path\",\n+        \"defaultValue\": \"none\",\n+        \"description\": \"Cassandra truststore path. Default = none\",\n+        \"type\": \"string\"\n+      },\n+      \"cassandra.ssl.truststore.password\": {\n+        \"envName\": null,\n+        \"propertyName\": \"cassandra.ssl.truststore.password\",\n+        \"defaultValue\": \"none\",\n+        \"description\": \"Cassandra truststore password. Default = none\",\n+        \"type\": \"password\"\n       }\n     },\n     \"editor\": {",
                "changes": 21
            }
        ],
        "unit_tests": [
            "CassandraInterpreterTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "cassandra/src/test/java/org/apache/zeppelin/cassandra/CassandraInterpreterTest.java",
        "buggy_files": [
            "cassandra/src/main/java/org/apache/zeppelin/cassandra/CassandraInterpreter.java",
            "shell/src/main/resources/interpreter-setting.json",
            "jdbc/src/main/resources/interpreter-setting.json",
            "groovy/src/main/resources/interpreter-setting.json",
            "markdown/src/main/resources/interpreter-setting.json",
            "ignite/src/main/resources/interpreter-setting.json",
            "lens/src/main/resources/interpreter-setting.json",
            "r/src/main/resources/interpreter-setting.json",
            "elasticsearch/src/main/resources/interpreter-setting.json",
            "pig/src/main/resources/interpreter-setting.json",
            "alluxio/src/main/resources/interpreter-setting.json",
            "python/src/main/resources/interpreter-setting.json",
            "flink/src/main/resources/interpreter-setting.json",
            "zeppelin-zengine/src/test/resources/interpreter/mock/interpreter-setting.json",
            "livy/src/main/resources/interpreter-setting.json",
            "hbase/src/main/resources/interpreter-setting.json",
            "angular/src/main/resources/interpreter-setting.json",
            "bigquery/src/main/resources/interpreter-setting.json",
            "helium-dev/src/main/resources/interpreter-setting.json",
            "spark/src/main/resources/interpreter-setting.json",
            "spark/src/main/sparkr-resources/interpreter-setting.json",
            "cassandra/src/main/resources/interpreter-setting.json",
            "beam/src/main/resources/interpreter-setting.json",
            "file/src/main/resources/interpreter-setting.json",
            "geode/src/main/resources/interpreter-setting.json",
            "kylin/src/main/resources/interpreter-setting.json",
            "scalding/src/main/resources/interpreter-setting.json"
        ],
        "fixed": true
    }
]