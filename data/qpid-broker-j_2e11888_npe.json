[
    {
        "repo": "qpid-broker-j",
        "commit": "https://github.com/apache/qpid-broker-j/commit/2e118889f331fe750ed1683c9203f65978def861",
        "bug_id": "qpid-broker-j_2e11888",
        "message": "QPID-5240: Change ExternalSaslServer to avoid NPE possibility.\n\nContract for SaslServer#getAuthorizationID does not disallow the calling of getAuthorizationID following a failed authentication\nso returning null in this case seems reasonable (com.sun.security.sasl.CramMD5Server behaves in this way).\n\nAlso refactored EAMT to have small tightly targetted tests.",
        "parent": "https://github.com/apache/qpid-broker-j/commit/7367c2de8a29be7fede6508d1ef1860149810662",
        "patched_files": [
            "ExternalAuthenticationManager.java",
            "ExternalSaslServer.java"
        ],
        "file": [
            {
                "status": "modified",
                "additions": 2,
                "raw_url": "https://github.com/apache/qpid-broker-j/raw/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java?ref=2e118889f331fe750ed1683c9203f65978def861",
                "filename": "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "deletions": 2,
                "sha": "5f5ee08c214728fc1c2965c190f7ae15301e462e",
                "blob_url": "https://github.com/apache/qpid-broker-j/blob/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java",
                "patch": "@@ -36,7 +36,7 @@\n \n     private boolean _complete = false;\n     private final Principal _externalPrincipal;\n-    private boolean _useFullDN = false;\n+    private final boolean _useFullDN;\n \n     public ExternalSaslServer(Principal externalPrincipal, boolean useFullDN)\n     {\n@@ -62,7 +62,7 @@ public boolean isComplete()\n \n     public String getAuthorizationID()\n     {\n-        return getAuthenticatedPrincipal().getName();\n+        return getAuthenticatedPrincipal() == null ? null : getAuthenticatedPrincipal().getName();\n     }\n \n     public byte[] unwrap(byte[] incoming, int offset, int len) throws SaslException",
                "changes": 4
            },
            {
                "status": "modified",
                "additions": 103,
                "raw_url": "https://github.com/apache/qpid-broker-j/raw/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "contents_url": "https://api.github.com/repos/apache/qpid-broker-j/contents/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java?ref=2e118889f331fe750ed1683c9203f65978def861",
                "filename": "broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "deletions": 93,
                "sha": "586bff5683c1411d392449b17aae291135f1f0b9",
                "blob_url": "https://github.com/apache/qpid-broker-j/blob/2e118889f331fe750ed1683c9203f65978def861/broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
                "patch": "@@ -43,141 +43,151 @@ public void testCreateSaslServer() throws Exception\n         createSaslServerTestImpl(_manager);\n     }\n \n-    public void testCreateSaslServerUsingFullDN() throws Exception\n+    public void testAuthenticatePrincipalNull_CausesAuthError() throws Exception\n     {\n-        createSaslServerTestImpl(_managerUsingFullDN);\n-    }\n-\n-    public void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n-    {\n-        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-\n-        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n-\n-        try\n-        {\n-            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n-            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n-        }\n-        catch (SaslException e)\n-        {\n-            // pass\n-        }\n-    }\n-\n-    /**\n-     * Test behaviour of the authentication when the useFullDN attribute is set true\n-     * and the username is taken directly as the externally supplied Principal\n-     */\n-    public void testAuthenticateWithFullDN() throws Exception\n-    {\n-        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-\n-        assertOnlyContainsWrapped(principal, result.getPrincipals());\n-\n-        saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n-                     AuthenticationResult.AuthenticationStatus.ERROR,\n-                     result.getStatus());\n+                AuthenticationResult.AuthenticationStatus.ERROR,\n+                result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n     }\n \n-    /**\n-     * Test behaviour of the authentication when parsing the username from\n-     * the Principals DN as <CN>@<DC1>.<DC2>.<DC3>....<DCN>\n-     */\n-    public void testAuthenticateWithUsernameBasedOnCNAndDC() throws Exception\n+    public void testAuthenticatePrincipalNoCn_CausesAuthError() throws Exception\n     {\n-        X500Principal principal;\n-        SaslServer saslServer;\n-        AuthenticationResult result;\n-        UsernamePrincipal expectedPrincipal;\n-\n-        // DN contains only CN\n-        principal = new X500Principal(\"CN=person\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-\n-        result = _manager.authenticate(saslServer, new byte[0]);\n-        assertNotNull(result);\n-        assertEquals(\"Expected authentication to be successful\",\n-                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n-                     result.getStatus());\n-        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n-\n-        // Null principal\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        X500Principal principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN doesn't contain CN\n-        principal = new X500Principal(\"DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalEmptyCn_CausesAuthError() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n \n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be unsuccessful\",\n                 AuthenticationResult.AuthenticationStatus.ERROR,\n                 result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains empty CN\n-        principal = new X500Principal(\"CN=, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n-        result = _manager.authenticate(saslServer, new byte[0]);\n+    public void testAuthenticatePrincipalCnOnly() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n-        assertEquals(\"Expected authentication to be unsuccessful\",\n-                AuthenticationResult.AuthenticationStatus.ERROR,\n-                result.getStatus());\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+        assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnAndDc() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrinicpalCnDc_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person@example.com\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person@example.com\", saslServer.getAuthorizationID());\n+    }\n \n-        // DN contains CN and DC and other components\n-        principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n-        expectedPrincipal = new UsernamePrincipal(\"person\");\n-        saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+    public void testAuthenticatePrincipalCn_OtherComponentsIgnored() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, O=My Company Ltd, L=Newbury, ST=Berkshire, C=GB\");\n+        UsernamePrincipal expectedPrincipal = new UsernamePrincipal(\"person\");\n+        SaslServer saslServer = _manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n \n-        result = _manager.authenticate(saslServer, new byte[0]);\n+        AuthenticationResult result = _manager.authenticate(saslServer, new byte[0]);\n         assertNotNull(result);\n         assertEquals(\"Expected authentication to be successful\",\n                 AuthenticationResult.AuthenticationStatus.SUCCESS,\n                 result.getStatus());\n         assertOnlyContainsWrapped(expectedPrincipal, result.getPrincipals());\n+        assertEquals(\"person\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_CreateSaslServer() throws Exception\n+    {\n+        createSaslServerTestImpl(_managerUsingFullDN);\n+    }\n+\n+    public void testFullDNMode_Authenticate() throws Exception\n+    {\n+        X500Principal principal = new X500Principal(\"CN=person, DC=example, DC=com\");\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", principal);\n+\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be successful\",\n+                     AuthenticationResult.AuthenticationStatus.SUCCESS,\n+                     result.getStatus());\n+\n+        assertOnlyContainsWrapped(principal, result.getPrincipals());\n+        assertEquals(\"CN=person,DC=example,DC=com\", saslServer.getAuthorizationID());\n+    }\n+\n+    public void testFullDNMode_AuthenticatePrincipalNull_CausesAuthError() throws Exception\n+    {\n+        SaslServer saslServer = _managerUsingFullDN.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+        AuthenticationResult result = _managerUsingFullDN.authenticate(saslServer, new byte[0]);\n+\n+        assertNotNull(result);\n+        assertEquals(\"Expected authentication to be unsuccessful\",\n+                     AuthenticationResult.AuthenticationStatus.ERROR,\n+                     result.getStatus());\n+        assertNull(saslServer.getAuthorizationID());\n+    }\n+\n+    private void createSaslServerTestImpl(AuthenticationManager manager) throws Exception\n+    {\n+        SaslServer server = manager.createSaslServer(\"EXTERNAL\", \"example.example.com\", null);\n+\n+        assertEquals(\"Sasl Server mechanism name is not as expected\", \"EXTERNAL\", server.getMechanismName());\n+\n+        try\n+        {\n+            server = manager.createSaslServer(\"PLAIN\", \"example.example.com\", null);\n+            fail(\"Expected creating SaslServer with incorrect mechanism to throw an exception\");\n+        }\n+        catch (SaslException e)\n+        {\n+            // pass\n+        }\n     }\n \n }",
                "changes": 196
            }
        ],
        "unit_tests": [
            "ExternalAuthenticationManagerTest.java"
        ]
    },
    {
        "buggy": false,
        "test_file": "broker-core/src/test/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManagerTest.java",
        "buggy_files": [
            "broker-core/src/main/java/org/apache/qpid/server/security/auth/manager/ExternalAuthenticationManager.java",
            "broker-core/src/main/java/org/apache/qpid/server/security/auth/sasl/external/ExternalSaslServer.java"
        ],
        "fixed": true
    }
]