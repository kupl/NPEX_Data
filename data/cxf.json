{
    "cxf_0028906": {
        "bug_id": "cxf_0028906",
        "commit": "https://github.com/apache/cxf/commit/002890617019d1e706a32847b71952f1e99f2c68",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/002890617019d1e706a32847b71952f1e99f2c68/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java?ref=002890617019d1e706a32847b71952f1e99f2c68",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "patch": "@@ -73,7 +73,7 @@ private AuthorizationUtils() {\n                                                  Set<String> challenges,\n                                                  String realm) {\n         List<String> headers = mc.getHttpHeaders().getRequestHeader(\"Authorization\");\n-        if (headers.size() == 1) {\n+        if (headers != null && headers.size() == 1) {\n             String[] parts = headers.get(0).split(\" \");\n             if (parts.length > 0 \n                 && (challenges == null || challenges.isEmpty() || challenges.contains(parts[0]))) {",
                "raw_url": "https://github.com/apache/cxf/raw/002890617019d1e706a32847b71952f1e99f2c68/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/utils/AuthorizationUtils.java",
                "sha": "09df5ef5c938c196df82b71571fed8ec52adc92c",
                "status": "modified"
            }
        ],
        "message": "[CXF-6153] Fixing NPE",
        "parent": "https://github.com/apache/cxf/commit/1946e323a0df6e5f9748af82106cff39d7b5d01f",
        "repo": "cxf",
        "unit_tests": [
            "AuthorizationUtilsTest.java"
        ]
    },
    "cxf_0a7a0d0": {
        "bug_id": "cxf_0a7a0d0",
        "commit": "https://github.com/apache/cxf/commit/0a7a0d023cffec2db34da7df4582c832dabbcdcd",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "patch": "@@ -24,12 +24,19 @@\n import java.util.Set;\n \n import org.apache.cxf.Bus;\n+import org.apache.cxf.jaxrs.provider.ProviderFactory;\n \n public class FilterProviderInfo<T> extends ProviderInfo<T> {\n \n     private Set<String> nameBinding;\n     private Map<Class<?>, Integer> supportedContracts;\n     \n+    public FilterProviderInfo(T provider,\n+                              Bus bus,\n+                              Map<Class<?>, Integer> supportedContracts) {\n+        this(provider, bus, ProviderFactory.DEFAULT_FILTER_NAME_BINDING, supportedContracts);        \n+    }\n+    \n     public FilterProviderInfo(T provider,\n                               Bus bus,\n                               String nameBinding,",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/model/FilterProviderInfo.java",
                "sha": "403c0f81965085b07d99adcbdc54d3ddd25d88d5",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "patch": "@@ -77,7 +77,7 @@\n import org.apache.cxf.message.MessageUtils;\n \n public abstract class ProviderFactory {\n-    protected static final String DEFAULT_FILTER_NAME_BINDING = \"org.apache.cxf.filter.binding\";\n+    public static final String DEFAULT_FILTER_NAME_BINDING = \"org.apache.cxf.filter.binding\";\n     protected static final String SERVER_FACTORY_NAME = \"org.apache.cxf.jaxrs.provider.ServerProviderFactory\";\n     protected static final String CLIENT_FACTORY_NAME = \"org.apache.cxf.jaxrs.client.ClientProviderFactory\";\n     protected static final String IGNORE_TYPE_VARIABLES = \"org.apache.cxf.jaxrs.providers.ignore.typevars\";\n@@ -362,7 +362,7 @@ public Configuration getDynamicConfiguration() {\n             if (size > 0) {\n                 interceptors = new ArrayList<ReaderInterceptor>(size + 1);\n                 List<ProviderInfo<ReaderInterceptor>> readers =\n-                    getPostMatchContainerFilters(readerInterceptors, names);\n+                    getBoundFilters(readerInterceptors, names);\n                 for (ProviderInfo<ReaderInterceptor> p : readers) {\n                     InjectionUtils.injectContexts(p.getProvider(), p, m);\n                     interceptors.add(p.getProvider());\n@@ -401,7 +401,7 @@ public Configuration getDynamicConfiguration() {\n             if (size > 0) {\n                 interceptors = new ArrayList<WriterInterceptor>(size + 1);\n                 List<ProviderInfo<WriterInterceptor>> writers =\n-                    getPostMatchContainerFilters(writerInterceptors, names);\n+                    getBoundFilters(writerInterceptors, names);\n                 for (ProviderInfo<WriterInterceptor> p : writers) {\n                     InjectionUtils.injectContexts(p.getProvider(), p, m);\n                     interceptors.add(p.getProvider());\n@@ -884,7 +884,7 @@ public void setSchemaLocations(List<String> schemas) {\n         }\n     }\n \n-    protected static <T> List<ProviderInfo<T>> getPostMatchContainerFilters(Map<NameKey, ProviderInfo<T>> boundFilters,\n+    protected static <T> List<ProviderInfo<T>> getBoundFilters(Map<NameKey, ProviderInfo<T>> boundFilters,\n                                                                           Set<String> names) {\n         if (boundFilters.isEmpty()) {\n             return Collections.emptyList();",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "sha": "aa5d71e49ee512a96e93ed78c33fbe4c306d1c5c",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "patch": "@@ -138,7 +138,7 @@ private static synchronized ServerProviderFactory initBaseFactory(Bus bus) {\n     }\n     \n     public List<ProviderInfo<ContainerRequestFilter>> getPostMatchContainerRequestFilters(Set<String> names) {\n-        return getPostMatchContainerFilters(postMatchContainerRequestFilters, names);\n+        return getBoundFilters(postMatchContainerRequestFilters, names);\n         \n     }\n     \n@@ -165,7 +165,7 @@ private static synchronized ServerProviderFactory initBaseFactory(Bus bus) {\n     }\n     \n     public List<ProviderInfo<ContainerResponseFilter>> getContainerResponseFilters(Set<String> names) {\n-        return getPostMatchContainerFilters(postMatchContainerResponseFilters, \n+        return getBoundFilters(postMatchContainerResponseFilters, \n                                             names);\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ServerProviderFactory.java",
                "sha": "51f333031d7f37fc4e8a846997a3f5a2eb0dfd16",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java?ref=0a7a0d023cffec2db34da7df4582c832dabbcdcd",
                "deletions": 1,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "patch": "@@ -210,7 +210,7 @@ public Builder request() {\n                     providers.add(p);\n                 } else {\n                     providers.add(\n-                        new FilterProviderInfo<Object>(p, pf.getBus(), null, contracts));\n+                        new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n                 }\n             }\n             ",
                "raw_url": "https://github.com/apache/cxf/raw/0a7a0d023cffec2db34da7df4582c832dabbcdcd/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "sha": "b04b3a3762d394e19e8f0c512a68b7c27435fd05",
                "status": "modified"
            }
        ],
        "message": "[CXF-5135] Using default binding name when creating client interceptors to prevent NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1520291 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/415fc29334310285b25d2c9a59c2640ee56a5963",
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_0ada3f2": {
        "bug_id": "cxf_0ada3f2",
        "commit": "https://github.com/apache/cxf/commit/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "patch": "@@ -223,7 +223,7 @@ public void init(List<ClassResourceInfo> cris) {\n             }\n             if (!schemaLocs.isEmpty()) {\n                 this.setSchemaLocations(schemaLocs);\n-                if (cris.size() == 0 && schema != null) {\n+                if (cris.size() == 0 && schema != null && sv != null) {\n                     SchemaValidation.SchemaValidationType type = sv.type();\n                     if (type == SchemaValidation.SchemaValidationType.OUT) {\n                         validateInputIfPossible = false;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/AbstractJAXBProvider.java",
                "sha": "eed47448c840fea211324d175bf8528e8f09119b",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "patch": "@@ -929,12 +929,12 @@ private static Object injectIntoCollectionOrArray(Class<?> rawType,\n             realGenericType = realType;\n         } else {\n             Type[] types = getActualTypes(genericType);\n-            if (types.length == 0 || !(types[0] instanceof ParameterizedType)) {\n+            if (types == null || types.length == 0 || !(types[0] instanceof ParameterizedType)) {\n                 realType = getActualType(genericType);\n                 realGenericType = realType;\n             } else {\n                 realType = getRawType(types[0]);\n-                realGenericType = types[0] == realType ? realType : types[0];\n+                realGenericType = types[0];\n             }\n         }\n         Object theValues = null;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "sha": "37897c8bf4446fd8530dc175e7e99a48db61a617",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "patch": "@@ -339,7 +339,8 @@ public static void injectParameters(OperationResourceInfo ori,\n                 if (cris.isEmpty()) {\n                     firstCri = cri;\n                     cris.put(cri, entry.getValue());\n-                } else if (URITemplate.compareTemplates(firstCri.getURITemplate(), cri.getURITemplate()) == 0) {\n+                } else if (firstCri != null\n+                        && URITemplate.compareTemplates(firstCri.getURITemplate(), cri.getURITemplate()) == 0) {\n                     cris.put(cri, entry.getValue());\n                 } else {\n                     break;\n@@ -1550,8 +1551,10 @@ private static boolean compareCompositeSubtypes(MediaType requiredType, MediaTyp\n                     String subTypeBeforePlus1 = splitMediaSubType(subType1, false);\n                     String subTypeBeforePlus2 = splitMediaSubType(subType2, false);\n                     nullPossible = subTypeBeforePlus1 == null || subTypeBeforePlus2 == null;\n-                    isCompatible = subTypeBeforePlus1 == null && subTypeBeforePlus2.equals(subType1)\n-                        || subTypeBeforePlus2 == null && subTypeBeforePlus1.equals(subType2);\n+                    isCompatible = subTypeBeforePlus1 == null && subTypeBeforePlus2 != null\n+                            && subTypeBeforePlus2.equals(subType1)\n+                            || subTypeBeforePlus2 == null && subTypeBeforePlus1 != null\n+                            && subTypeBeforePlus1.equals(subType2);\n                     if (!isCompatible && !nullPossible) {\n                         isCompatible = subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n                             && (subType1.charAt(subType1.length() - 1) == '*'\n@@ -1569,7 +1572,7 @@ private static boolean compareCompositeSubtypes(MediaType requiredType, MediaTyp\n                     String subTypeBeforePlus1 = splitMediaSubType(subType1, false);\n                     String subTypeBeforePlus2 = splitMediaSubType(subType2, false);\n \n-                    isCompatible = subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n+                    isCompatible = subTypeBeforePlus1 != null && subTypeBeforePlus1.equalsIgnoreCase(subTypeBeforePlus2)\n                         && (subType1.charAt(subType1.length() - 1) == '*'\n                             || subType2.charAt(subType2.length() - 1) == '*');\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "sha": "87217bf00af22dcc9003dcb69f5834d61372fba4",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java?ref=0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "patch": "@@ -896,7 +896,7 @@ public static JAXRSServerFactoryBean createApplication(Application app,\n     public static Object createProviderInstance(Class<?> cls) {\n         try {\n             Constructor<?> c = ResourceUtils.findResourceConstructor(cls, false);\n-            if (c.getParameterTypes().length == 0) {\n+            if (c != null && c.getParameterTypes().length == 0) {\n                 return c.newInstance();\n             }\n             return c;",
                "raw_url": "https://github.com/apache/cxf/raw/0ada3f2b8ce9575ce27ed67b1eeecaf0be52943e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/ResourceUtils.java",
                "sha": "5e93b5f6df714a4854dda05ac0b966d46ae54bf7",
                "status": "modified"
            }
        ],
        "message": "Add some NPE checks",
        "parent": "https://github.com/apache/cxf/commit/85e9a478055cb35f917e5cfa8e19fa52a7290fe0",
        "repo": "cxf",
        "unit_tests": [
            "ResourceUtilsTest.java"
        ]
    },
    "cxf_0c307b6": {
        "bug_id": "cxf_0c307b6",
        "commit": "https://github.com/apache/cxf/commit/0c307b67340dcafd75a1fd40ce003869ddd4594b",
        "file": [
            {
                "additions": 24,
                "blob_url": "https://github.com/apache/cxf/blob/0c307b67340dcafd75a1fd40ce003869ddd4594b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "changes": 47,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java?ref=0c307b67340dcafd75a1fd40ce003869ddd4594b",
                "deletions": 23,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "patch": "@@ -254,35 +254,36 @@ protected MessageContext createProtocolMessageContext(SoapMessage message) {\n         Exchange exch = message.getExchange();\n         setupBindingOperationInfo(exch, sm);\n         SOAPMessage msg = sm.getMessage();\n-        try {\n-            List<SOAPElement> params = new ArrayList<>();\n-            message.put(MessageContext.REFERENCE_PARAMETERS, params);\n-            SOAPHeader head = SAAJUtils.getHeader(msg);\n-            if (head != null) {\n-                Iterator<Node> it = CastUtils.cast(head.getChildElements());\n-                while (it != null && it.hasNext()) {\n-                    Node nd = it.next();\n-                    if (nd instanceof SOAPElement) {\n-                        SOAPElement el = (SOAPElement)nd;\n-                        if (el.hasAttributeNS(Names.WSA_NAMESPACE_NAME, \"IsReferenceParameter\")\n-                            && (\"1\".equals(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n-                                                             \"IsReferenceParameter\"))\n-                                || Boolean.parseBoolean(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n-                                                                          \"IsReferenceParameter\")))) {\n-                            params.add(el);\n+        if (msg != null) {\n+            try {\n+                List<SOAPElement> params = new ArrayList<>();\n+                message.put(MessageContext.REFERENCE_PARAMETERS, params);\n+                SOAPHeader head = SAAJUtils.getHeader(msg);\n+                if (head != null) {\n+                    Iterator<Node> it = CastUtils.cast(head.getChildElements());\n+                    while (it != null && it.hasNext()) {\n+                        Node nd = it.next();\n+                        if (nd instanceof SOAPElement) {\n+                            SOAPElement el = (SOAPElement) nd;\n+                            if (el.hasAttributeNS(Names.WSA_NAMESPACE_NAME, \"IsReferenceParameter\")\n+                                    && (\"1\".equals(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n+                                    \"IsReferenceParameter\"))\n+                                    || Boolean.parseBoolean(el.getAttributeNS(Names.WSA_NAMESPACE_NAME,\n+                                    \"IsReferenceParameter\")))) {\n+                                params.add(el);\n+                            }\n                         }\n                     }\n                 }\n+                if (isRequestor(message) && msg.getSOAPPart().getEnvelope().getBody() != null\n+                        && msg.getSOAPPart().getEnvelope().getBody().hasFault()) {\n+                    return null;\n+                }\n+            } catch (SOAPException e) {\n+                throw new Fault(e);\n             }\n-            if (isRequestor(message) && msg.getSOAPPart().getEnvelope().getBody() != null\n-                && msg.getSOAPPart().getEnvelope().getBody().hasFault()) {\n-                return null;\n-            }\n-        } catch (SOAPException e) {\n-            throw new Fault(e);\n         }\n \n-\n         return sm;\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/0c307b67340dcafd75a1fd40ce003869ddd4594b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/handler/soap/SOAPHandlerInterceptor.java",
                "sha": "340c966ac8f3484971040f05acf7e4ac3470c1c2",
                "status": "modified"
            }
        ],
        "message": "[CXF-7412] avoid NPE occuring when handler chain contains a SoapHandler and empty message is received",
        "parent": "https://github.com/apache/cxf/commit/dcb4070248666908113395b0f1c689dc1c30b493",
        "repo": "cxf",
        "unit_tests": [
            "SOAPHandlerInterceptorTest.java"
        ]
    },
    "cxf_0dd2a34": {
        "bug_id": "cxf_0dd2a34",
        "commit": "https://github.com/apache/cxf/commit/0dd2a34a95055652731dbef0f10234dcc51dfea3",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/0dd2a34a95055652731dbef0f10234dcc51dfea3/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=0dd2a34a95055652731dbef0f10234dcc51dfea3",
                "deletions": 2,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -639,8 +639,13 @@ public static Object unmarshall(JAXBContext context, Schema schema, Object sourc\n         } catch (Throwable ex) {\n             if (ex instanceof javax.xml.bind.UnmarshalException) {\n                 javax.xml.bind.UnmarshalException unmarshalEx = (javax.xml.bind.UnmarshalException)ex;\n-                throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, unmarshalEx.getLinkedException()\n-                    .getMessage()), ex);\n+                if (unmarshalEx.getLinkedException() != null) {\n+                    throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, \n+                                            unmarshalEx.getLinkedException().getMessage()), ex);\n+                } else {\n+                    throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, \n+                                                unmarshalEx.getMessage()), ex);                    \n+                }\n             } else {\n                 throw new Fault(new Message(\"UNMARSHAL_ERROR\", BUNDLE, ex.getMessage()), ex);\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/0dd2a34a95055652731dbef0f10234dcc51dfea3/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "39cb1952f40a81d7e65e5ab48a97435cb4f55bee",
                "status": "modified"
            }
        ],
        "message": "Guard against NPE when creating a fault\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@658241 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/d9e18df6cd7fe118fd6f24b58c5e85265021181b",
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_0fdde9e": {
        "bug_id": "cxf_0fdde9e",
        "commit": "https://github.com/apache/cxf/commit/0fdde9e2b7057328a71c978a0b1727a80a8078db",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/0fdde9e2b7057328a71c978a0b1727a80a8078db/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java?ref=0fdde9e2b7057328a71c978a0b1727a80a8078db",
                "deletions": 1,
                "filename": "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "patch": "@@ -217,7 +217,7 @@ public boolean isRepeatable() {\n             .setSocketTimeout((int) csPolicy.getReceiveTimeout())\n             .setConnectTimeout((int) csPolicy.getConnectionTimeout());\n         Proxy p = proxyFactory.createProxy(csPolicy , uri);\n-        if (p != null) {\n+        if (p != null && p.type() != Proxy.Type.DIRECT) {\n             InetSocketAddress isa = (InetSocketAddress)p.address();\n             HttpHost proxy = new HttpHost(isa.getHostName(), isa.getPort());\n             b.setProxy(proxy);",
                "raw_url": "https://github.com/apache/cxf/raw/0fdde9e2b7057328a71c978a0b1727a80a8078db/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "sha": "d1d6abd81488e0096aed248ea4cac8acd7a0ba66",
                "status": "modified"
            }
        ],
        "message": "[CXF-5836] Fix NPE when nonProxyHosts is used\nPatch from Nicolas Sprauel applied",
        "parent": "https://github.com/apache/cxf/commit/d40ea830bd7ddd973d9b2b15b42783f30a399790",
        "repo": "cxf",
        "unit_tests": [
            "AsyncHTTPConduitTest.java"
        ]
    },
    "cxf_10ebf9c": {
        "bug_id": "cxf_10ebf9c",
        "commit": "https://github.com/apache/cxf/commit/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java?ref=10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "patch": "@@ -69,7 +69,7 @@ public static ServerAuthorizationCodeGrant initCodeGrant(AuthorizationCodeRegist\n     protected abstract void saveCodeGrant(ServerAuthorizationCodeGrant grant);\n \n     public static boolean isCodeMatched(ServerAuthorizationCodeGrant grant, Client c, UserSubject sub) {\n-        if (c == null || grant.getClient().getClientId().equals(c.getClientId())) {\n+        if (grant != null && (c == null || grant.getClient().getClientId().equals(c.getClientId()))) {\n             UserSubject grantSub = grant.getSubject();\n             return sub == null || grantSub != null && grantSub.getLogin().equals(sub.getLogin());\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/grants/code/AbstractCodeDataProvider.java",
                "sha": "8787a8bf508cae1f9988bff0c94bd21a1e1c8454",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java?ref=10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "patch": "@@ -579,7 +579,7 @@ protected static boolean isClientMatched(Client c, UserSubject resourceOwner) {\n                 && c.getResourceOwnerSubject().getLogin().equals(resourceOwner.getLogin());\n     }\n     protected static boolean isTokenMatched(ServerAccessToken token, Client c, UserSubject sub) {\n-        if (c == null || token.getClient().getClientId().equals(c.getClientId())) {\n+        if (token != null && (c == null || token.getClient().getClientId().equals(c.getClientId()))) {\n             UserSubject tokenSub = token.getSubject();\n             if (sub == null || tokenSub != null && tokenSub.getLogin().equals(sub.getLogin())) {\n                 return true;",
                "raw_url": "https://github.com/apache/cxf/raw/10ebf9ccfd29ad5888e639b4d4f558cc59bbdc60/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/AbstractOAuthDataProvider.java",
                "sha": "cc1b623248bb0517c39c9f206d1e5fedbc0f9710",
                "status": "modified"
            }
        ],
        "message": "Avoiding possible NPEs in the oauth2 providers",
        "parent": "https://github.com/apache/cxf/commit/19121e3da243bb1516d605fd1498087efedd387c",
        "repo": "cxf",
        "unit_tests": [
            "AbstractOAuthDataProviderTest.java"
        ]
    },
    "cxf_156b166": {
        "bug_id": "cxf_156b166",
        "commit": "https://github.com/apache/cxf/commit/156b166b093aa92c1fc400e0f1f7440ded701169",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/156b166b093aa92c1fc400e0f1f7440ded701169/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "changes": 44,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java?ref=156b166b093aa92c1fc400e0f1f7440ded701169",
                "deletions": 21,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "patch": "@@ -137,31 +137,33 @@ public void handleMessage(SoapMessage message) throws Fault {\n                 (List<?>) message.get(WSHandlerConstants.RECV_RESULTS));\n \n         // Get all encrypted and signed references\n-        for (WSHandlerResult wshr : results) {\n-            List<WSSecurityEngineResult> signedResults = wshr.getActionResults().get(WSConstants.SIGN);\n-            if (signedResults != null) {\n-                for (WSSecurityEngineResult signedResult : signedResults) {\n-                    List<WSDataRef> sl =\n-                        CastUtils.cast((List<?>)signedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n-                    if (sl != null) {\n-                        if (sl.size() == 1\n-                            && sl.get(0).getName().equals(new QName(WSConstants.SIG_NS, WSConstants.SIG_LN))) {\n-                            //endorsing the signature so don't include\n-                            continue;\n+        if (results != null) {\n+            for (WSHandlerResult wshr : results) {\n+                List<WSSecurityEngineResult> signedResults = wshr.getActionResults().get(WSConstants.SIGN);\n+                if (signedResults != null) {\n+                    for (WSSecurityEngineResult signedResult : signedResults) {\n+                        List<WSDataRef> sl =\n+                            CastUtils.cast((List<?>)signedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n+                        if (sl != null) {\n+                            if (sl.size() == 1\n+                                && sl.get(0).getName().equals(new QName(WSConstants.SIG_NS, WSConstants.SIG_LN))) {\n+                                //endorsing the signature so don't include\n+                                continue;\n+                            }\n+\n+                            signed.addAll(sl);\n                         }\n-\n-                        signed.addAll(sl);\n                     }\n                 }\n-            }\n \n-            List<WSSecurityEngineResult> encryptedResults = wshr.getActionResults().get(WSConstants.ENCR);\n-            if (encryptedResults != null) {\n-                for (WSSecurityEngineResult encryptedResult : encryptedResults) {\n-                    List<WSDataRef> el =\n-                        CastUtils.cast((List<?>)encryptedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n-                    if (el != null) {\n-                        encrypted.addAll(el);\n+                List<WSSecurityEngineResult> encryptedResults = wshr.getActionResults().get(WSConstants.ENCR);\n+                if (encryptedResults != null) {\n+                    for (WSSecurityEngineResult encryptedResult : encryptedResults) {\n+                        List<WSDataRef> el =\n+                            CastUtils.cast((List<?>)encryptedResult.get(WSSecurityEngineResult.TAG_DATA_REF_URIS));\n+                        if (el != null) {\n+                            encrypted.addAll(el);\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/156b166b093aa92c1fc400e0f1f7440ded701169/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "sha": "bcca66826c0135ad5641140cd363a49b1c775a58",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/19cad14f41be42f02a429bdcf93613fa43673448",
        "repo": "cxf",
        "unit_tests": [
            "CryptoCoverageCheckerTest.java"
        ]
    },
    "cxf_1855e28": {
        "bug_id": "cxf_1855e28",
        "commit": "https://github.com/apache/cxf/commit/1855e288a4564803be42dad7b9957e16c6b10ac5",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/1855e288a4564803be42dad7b9957e16c6b10ac5/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=1855e288a4564803be42dad7b9957e16c6b10ac5",
                "deletions": 1,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -632,7 +632,7 @@ private void initializeMessage(SoapBindingInfo bi, BindingOperationInfo boi, Bin\n                             bmsg.getMessageParts().remove(mpi);\n                         } else if (SOAPBindingUtil.isSOAPBody(content)) {\n                             SoapBody sb = SOAPBindingUtil.getSoapBody(content);\n-                            if (sb.getParts().size() == 1) {\n+                            if (sb.getParts() != null && sb.getParts().size() == 1) {\n                                 partName = (String) sb.getParts().get(0);\n                             }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/1855e288a4564803be42dad7b9957e16c6b10ac5/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "249d632dee6bb1a08463938bdf9b64d0324d45ce",
                "status": "modified"
            }
        ],
        "message": "[CXF-1603] Add another NPE guard, fix from Benjamin Coiffe applied\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@659126 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/bec4331cd2eb9ef60a80480d7ce718299563a42d",
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_19f7992": {
        "bug_id": "cxf_19f7992",
        "commit": "https://github.com/apache/cxf/commit/19f79924ada3850e62ab429e538ee63a23445836",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/19f79924ada3850e62ab429e538ee63a23445836/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java?ref=19f79924ada3850e62ab429e538ee63a23445836",
                "deletions": 4,
                "filename": "rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "patch": "@@ -131,11 +131,13 @@ public synchronized void configureBean(String bn, Object beanInstance, boolean c\n                 //Aries blueprint 0.3.x\n                 m = ReflectionUtil.findMethod(container.getClass(), \"getRepository\");\n                 Object o = ReflectionUtil.setAccessible(m).invoke(container);\n-                m = ReflectionUtil.findMethod(container.getClass(), \"getRecipe\", String.class);\n+                m = ReflectionUtil.findMethod(o.getClass(), \"getRecipe\", String.class);\n                 o = ReflectionUtil.setAccessible(m).invoke(o, bn);  //returns the recipe\n-                m = ReflectionUtil.findMethod(o.getClass(), \"setProperties\", Object.class);\n-                if (m != null) {\n-                    ReflectionUtil.setAccessible(m).invoke(o, beanInstance);\n+                if (o != null) {\n+                    m = ReflectionUtil.findMethod(o.getClass(), \"setProperties\", Object.class);\n+                    if (m != null) {\n+                        ReflectionUtil.setAccessible(m).invoke(o, beanInstance);\n+                    }\n                 }\n             }\n         } catch (InvocationTargetException ite) {",
                "raw_url": "https://github.com/apache/cxf/raw/19f79924ada3850e62ab429e538ee63a23445836/rt/core/src/main/java/org/apache/cxf/bus/blueprint/ConfigurerImpl.java",
                "sha": "4ab9163b41b2c3f0cee419cab335d7d77a878ea3",
                "status": "modified"
            }
        ],
        "message": "Fix a potential NPE in blueprint configuration\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1311832 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/21df6d90185c755079d817cc39be3baefd93fcdc",
        "repo": "cxf",
        "unit_tests": [
            "ConfigurerImplTest.java"
        ]
    },
    "cxf_2158264": {
        "bug_id": "cxf_2158264",
        "commit": "https://github.com/apache/cxf/commit/2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties?ref=2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "patch": "@@ -24,4 +24,5 @@ CLOSE_FAILED_MSG = Failed to close connection.\n RECONNECT_WAIT_MSG = Waiting for the next reconnect attempt.\n SELECT_DEST_SEQ_FAILED_MSG = Failed to retrieve destination sequences from persistent store.\n SELECT_SRC_SEQ_FAILED_MSG = Failed to retrieve source sequences from persistent store.\n-VERIFY_TABLE_FAILED_MSG = Failed to verify the table definition.\n\\ No newline at end of file\n+VERIFY_TABLE_FAILED_MSG = Failed to verify the table definition.\n+INITIALIZATION_FAILED_MSG = Failed to initialize RMTxStore.\n\\ No newline at end of file",
                "raw_url": "https://github.com/apache/cxf/raw/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/Messages.properties",
                "sha": "ca40717e8240f4a4eda5a009d918b528bf183335",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java?ref=2158264d2a1826556c6a88a68e82ea46a7fc2fc3",
                "deletions": 3,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "patch": "@@ -877,7 +877,7 @@ protected void createTables() throws SQLException {\n                 }\n             }\n         } finally {\n-            if (connection == null) {\n+            if (connection == null && con != null) {\n                 con.close();\n             }\n         }\n@@ -1068,7 +1068,6 @@ public synchronized void init() {\n                 cacheStatements();\n             }\n         } catch (SQLException ex) {\n-            ex.printStackTrace();\n             LogUtils.log(LOG, Level.SEVERE, \"CONNECT_EXC\", ex);\n             SQLException se = ex;\n             while (se.getNextException() != null) {\n@@ -1077,7 +1076,7 @@ public synchronized void init() {\n             }\n             throw new RMStoreException(ex);\n         } catch (Throwable ex) {\n-            ex.printStackTrace();\n+            LogUtils.log(LOG, Level.SEVERE, \"INITIALIZATION_FAILED_MSG\", ex);\n         }\n     }   \n     ",
                "raw_url": "https://github.com/apache/cxf/raw/2158264d2a1826556c6a88a68e82ea46a7fc2fc3/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/persistence/jdbc/RMTxStore.java",
                "sha": "5d037e7b23a6a14513c80d85d07558cb0cb3d2ac",
                "status": "modified"
            }
        ],
        "message": "Fix ignorable NPE stack traces in tests\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1359285 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/55781e1c2eb52fddcc3b62138e2fa79604d69b93",
        "repo": "cxf",
        "unit_tests": [
            "RMTxStoreTest.java"
        ]
    },
    "cxf_26aec87": {
        "bug_id": "cxf_26aec87",
        "commit": "https://github.com/apache/cxf/commit/26aec8750ada9e05d829efbc3e3bba8991710998",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/26aec8750ada9e05d829efbc3e3bba8991710998/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=26aec8750ada9e05d829efbc3e3bba8991710998",
                "deletions": 1,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -191,7 +191,8 @@ private boolean isSOAPMessage(Message message) {\n     private String getMessageId(Message message) {\n         AddressingProperties addrProp = ContextUtils.retrieveMAPs(message, false,\n                                                                   MessageUtils.isOutbound(message), false);\n-        return (addrProp != null) ? addrProp.getMessageID().getValue() : UUID.randomUUID().toString();\n+        return addrProp != null && addrProp.getMessageID() != null\n+            ? addrProp.getMessageID().getValue() : UUID.randomUUID().toString();\n     }\n \n     private String getOperationName(Message message) {",
                "raw_url": "https://github.com/apache/cxf/raw/26aec8750ada9e05d829efbc3e3bba8991710998/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "17a07bfcc8c9f38dfbaa89a7efafa323c103fa4e",
                "status": "modified"
            }
        ],
        "message": "[CXF-6721] Preventing NPE",
        "parent": "https://github.com/apache/cxf/commit/f0d6854a8c9e9cf20ec50daa86ae2c5396f365b7",
        "repo": "cxf",
        "unit_tests": [
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_2b8ccfb": {
        "bug_id": "cxf_2b8ccfb",
        "commit": "https://github.com/apache/cxf/commit/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -362,7 +362,7 @@ private String getContentTypeFromMessage() {\n     protected void copyToResponse(HttpServletResponse response) {\r\n         String contentType = getContentTypeFromMessage();\r\n  \r\n-        if (!headers.containsKey(Message.CONTENT_TYPE)) {\r\n+        if (!headers.containsKey(Message.CONTENT_TYPE) && contentType != null) {\r\n             response.setContentType(contentType);\r\n         }\r\n \r",
                "raw_url": "https://github.com/apache/cxf/raw/2b8ccfbe36c007b74e5d93690fa68e3a974c0bf2/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "b9ad81f4b26c561747d966e920eb059ced79eaff",
                "status": "modified"
            }
        ],
        "message": "[CXF-3232] Add a NPE guard around setting the content type\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1057390 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/9e0729a6977313f550d34e03686d80abe8784d61",
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_2c81965": {
        "bug_id": "cxf_2c81965",
        "commit": "https://github.com/apache/cxf/commit/2c81965cfe31529b2364326facca5703a423199d",
        "file": [
            {
                "additions": 23,
                "blob_url": "https://github.com/apache/cxf/blob/2c81965cfe31529b2364326facca5703a423199d/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "changes": 23,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java?ref=2c81965cfe31529b2364326facca5703a423199d",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "patch": "@@ -22,7 +22,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n+import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.List;\n \n import javax.activation.DataSource;\n \n@@ -53,6 +55,27 @@ private synchronized void load() {\n                 }\n             }\n         }\n+        if (dataSource == null) {\n+            //couldn't find it, build up error message\n+            List<String> ids = new ArrayList<String>(10);\n+            for (Attachment a : attachments) {\n+                ids.add(a.getId());\n+                if (a.getId().equals(id)) {\n+                    this.dataSource = a.getDataHandler().getDataSource();\n+                    if (dataSource != null) {\n+                        ids = null;\n+                        break;\n+                    } else {\n+                        throw new IllegalStateException(\"Could not get DataSource for \"\n+                                                        + \"attachment of id \" + id);\n+                    }\n+                }\n+            }\n+            if (ids != null) {\n+                throw new IllegalStateException(\"No attachment for \"\n+                                                + \" id \" + id + \" found in \" + ids);\n+            }\n+        }\n     }\n     \n     public String getContentType() {",
                "raw_url": "https://github.com/apache/cxf/raw/2c81965cfe31529b2364326facca5703a423199d/rt/core/src/main/java/org/apache/cxf/attachment/LazyDataSource.java",
                "sha": "483f8479d1e53dcf1124f32889e7efd967beb1b8",
                "status": "modified"
            }
        ],
        "message": "[CXF-3477] Stick a better error message in (rather than an NPE) if an\nattachment couldn't be found.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1129987 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3ce1441e61233845b8fef403536bd6df323ad876",
        "repo": "cxf",
        "unit_tests": [
            "LazyDataSourceTest.java"
        ]
    },
    "cxf_2e1f619": {
        "bug_id": "cxf_2e1f619",
        "commit": "https://github.com/apache/cxf/commit/2e1f619f65e6981c7ad3bf957078e9f1967d49c7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/2e1f619f65e6981c7ad3bf957078e9f1967d49c7/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java?ref=2e1f619f65e6981c7ad3bf957078e9f1967d49c7",
                "deletions": 5,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "patch": "@@ -360,7 +360,7 @@ public static boolean hasEmptyAction(AddressingProperties maps) {\n      * @param inMAPs the inbound MAPs\n      * @param inMessage the current message\n      */\n-    public static void rebaseResponse(final EndpointReferenceType reference,\n+    public static void rebaseResponse(EndpointReferenceType reference,\n                                       AddressingProperties inMAPs,\n                                       final Message inMessage) {\n         \n@@ -382,12 +382,13 @@ public static void rebaseResponse(final EndpointReferenceType reference,\n             }\n             \n             try {\n+                if (reference == null) {\n+                    reference = ContextUtils.getNoneEndpointReference();\n+                }\n                 exchange.setOutMessage(partialResponse);\n                 Conduit backChannel = target.getBackChannel(inMessage,\n                                                             partialResponse,\n-                                                            reference == null\n-                                                            ? ContextUtils.getNoneEndpointReference()\n-                                                            : reference);\n+                                                            reference);\n \n                 if (backChannel != null) {\n                     // set up interceptor chains and send message\n@@ -419,7 +420,8 @@ public static void rebaseResponse(final EndpointReferenceType reference,\n                     exchange.setOutMessage(fullResponse);\n                     \n                     Destination destination = createDecoupledDestination(\n-                        exchange, reference);\n+                        exchange, \n+                        reference);\n                     exchange.setDestination(destination);\n                          \n                     ",
                "raw_url": "https://github.com/apache/cxf/raw/2e1f619f65e6981c7ad3bf957078e9f1967d49c7/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "sha": "6835eb9bc58af7608e204e2eb310a3e5c54eccd7",
                "status": "modified"
            }
        ],
        "message": "[CXF-3349] Fix possible NPE in WS-RM scenarios\nPatch suggestion from Aki Yoshida applied\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1072196 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3694146adde1a15ceecc3aa3dc465b5d11c6eccc",
        "repo": "cxf",
        "unit_tests": [
            "ContextUtilsTest.java"
        ]
    },
    "cxf_3453c6c": {
        "bug_id": "cxf_3453c6c",
        "commit": "https://github.com/apache/cxf/commit/3453c6ccac9bb829af8ecc65823e66b68db3e831",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/3453c6ccac9bb829af8ecc65823e66b68db3e831/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java?ref=3453c6ccac9bb829af8ecc65823e66b68db3e831",
                "deletions": 1,
                "filename": "rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "patch": "@@ -305,7 +305,7 @@ protected void initBeanConfig(BeanConfig beanConfig, Properties props) {\n         if (theLicense == null && !licenseWasSet) {\n             if (props != null) {\n                 theLicense = props.getProperty(LICENSE_PROPERTY);\n-                if (theLicense.isEmpty()) {\n+                if (theLicense != null && theLicense.isEmpty()) {\n                     theLicense = null;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cxf/raw/3453c6ccac9bb829af8ecc65823e66b68db3e831/rt/rs/description-swagger/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "sha": "4679e6e27e2c9e049388c0a43280bfe0f6c33b47",
                "status": "modified"
            }
        ],
        "message": "fixed NPE",
        "parent": "https://github.com/apache/cxf/commit/70ac8edcc95d88ae4a338005ffd07fe149b46793",
        "repo": "cxf",
        "unit_tests": [
            "Swagger2FeatureTest.java"
        ]
    },
    "cxf_351364f": {
        "bug_id": "cxf_351364f",
        "commit": "https://github.com/apache/cxf/commit/351364f7f32970754af4583ffc0626b177b023e9",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/351364f7f32970754af4583ffc0626b177b023e9/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java?ref=351364f7f32970754af4583ffc0626b177b023e9",
                "deletions": 0,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "patch": "@@ -66,6 +66,7 @@ public String getPrettyMessage(String message, String encoding) {\n             // that can occur when we set a limit and cur the rest off\n             XMLStreamWriter xwriter = StaxUtils.createXMLStreamWriter(swriter);\n             xwriter = new PrettyPrintXMLStreamWriter(xwriter, 2);\n+            encoding = encoding == null ? \"UTF-8\" : encoding;\n             InputStream in = new ByteArrayInputStream(message.getBytes(encoding));\n             try {\n                 StaxUtils.copy(new StreamSource(in), xwriter);",
                "raw_url": "https://github.com/apache/cxf/raw/351364f7f32970754af4583ffc0626b177b023e9/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/PrettyLoggingFilter.java",
                "sha": "db42fd4ef04e77a80cf313aeec2f871e615dd28b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6770] Fixing NPE",
        "parent": "https://github.com/apache/cxf/commit/cf492753cd899f1ac7056e3523270db6714d4420",
        "repo": "cxf",
        "unit_tests": [
            "TestPrettyLoggingFilter.java"
        ]
    },
    "cxf_3c2a97a": {
        "bug_id": "cxf_3c2a97a",
        "commit": "https://github.com/apache/cxf/commit/3c2a97a926baa894d9eea469e0c174fda1b5d006",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/3c2a97a926baa894d9eea469e0c174fda1b5d006/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java?ref=3c2a97a926baa894d9eea469e0c174fda1b5d006",
                "deletions": 1,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "patch": "@@ -820,7 +820,12 @@ private X509Certificate getCert(Crypto crypto) throws Exception {\n         }\n         CryptoType cryptoType = new CryptoType(CryptoType.TYPE.ALIAS);\n         cryptoType.setAlias(alias);\n-        return crypto.getX509Certificates(cryptoType)[0];\n+        \n+        X509Certificate certs[] = crypto.getX509Certificates(cryptoType);\n+        if (certs == null || certs.length == 0) {\n+            throw new Fault(\"Could not get X509Certificate for alias \" + alias, LOG);\n+        }\n+        return certs[0];\n     }\n \n     private void addLifetime(XMLStreamWriter writer) throws XMLStreamException {",
                "raw_url": "https://github.com/apache/cxf/raw/3c2a97a926baa894d9eea469e0c174fda1b5d006/rt/ws/security/src/main/java/org/apache/cxf/ws/security/trust/STSClient.java",
                "sha": "d055266b9112add4a0e2f34a8fccdd9504675002",
                "status": "modified"
            }
        ],
        "message": "Add a NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1082698 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4bdbcc0af48d90dd7e229721969bf9743d59ede7",
        "repo": "cxf",
        "unit_tests": [
            "STSClientTest.java"
        ]
    },
    "cxf_3ee75a8": {
        "bug_id": "cxf_3ee75a8",
        "commit": "https://github.com/apache/cxf/commit/3ee75a865656883ac9602d75ff19ef0312d03743",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/3ee75a865656883ac9602d75ff19ef0312d03743/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java?ref=3ee75a865656883ac9602d75ff19ef0312d03743",
                "deletions": 1,
                "filename": "rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "patch": "@@ -269,7 +269,7 @@ private String getRestOperationName(Message curMessage) {\n     }\n     \n     private static String safeGet(Message message, String key) {\n-        if (!message.containsKey(key)) {\n+        if (message == null || !message.containsKey(key)) {\n             return null;\n         }\n         Object value = message.get(key);",
                "raw_url": "https://github.com/apache/cxf/raw/3ee75a865656883ac9602d75ff19ef0312d03743/rt/features/logging/src/main/java/org/apache/cxf/ext/logging/event/DefaultLogEventMapper.java",
                "sha": "8324dae9fc5e86a480f39c129df692ac4abc417f",
                "status": "modified"
            }
        ],
        "message": "Fix NPE if message is null",
        "parent": "https://github.com/apache/cxf/commit/d655bcb160e5403f60a8365b2bf41ef07cb0414b",
        "repo": "cxf",
        "unit_tests": [
            "DefaultLogEventMapperTest.java"
        ]
    },
    "cxf_3f719f9": {
        "bug_id": "cxf_3f719f9",
        "commit": "https://github.com/apache/cxf/commit/3f719f99dbb6ba9ae961d90323e7f8c55961e616",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/3f719f99dbb6ba9ae961d90323e7f8c55961e616/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java?ref=3f719f99dbb6ba9ae961d90323e7f8c55961e616",
                "deletions": 0,
                "filename": "rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "patch": "@@ -236,6 +236,9 @@ public static JsonWebKeys loadJwkSet(Properties props, Bus bus, JweDecryptionPro\n         if (keyStoreLoc != null) {\n             try {\n                 InputStream is = ResourceUtils.getResourceStream(keyStoreLoc, bus);\n+                if (is == null) {\n+                    throw new SecurityException(\"Error in loading keystore location: \" + keyStoreLoc);\n+                }\n                 keyContent = IOUtils.readStringFromStream(is);\n             } catch (Exception ex) {\n                 throw new SecurityException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/3f719f99dbb6ba9ae961d90323e7f8c55961e616/rt/rs/security/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "sha": "241fe6b4ff1007b2ec8263b3465ee612a00c224a",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/3e8d71b42b3cf74b15080fad9769330992e384ca",
        "repo": "cxf",
        "unit_tests": [
            "JwkUtilsTest.java"
        ]
    },
    "cxf_403a4fb": {
        "bug_id": "cxf_403a4fb",
        "commit": "https://github.com/apache/cxf/commit/403a4fb83a23b6bae60bc12eb48c357d1f822040",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/403a4fb83a23b6bae60bc12eb48c357d1f822040/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java?ref=403a4fb83a23b6bae60bc12eb48c357d1f822040",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "patch": "@@ -63,6 +63,10 @@ public static Properties loadAllProperties(String resourceName, ClassLoader clas\n                                                Logger logger, Level level, String msg)\n         throws IOException {\n         Properties properties = new Properties();\n+        // Set default class loader if neccessary\n+        if (classLoader == null) {\n+            classLoader = PropertiesLoaderUtils.class.getClassLoader();\n+        }\n         Enumeration<URL> urls = classLoader.getResources(resourceName);\n \n         while (urls.hasMoreElements()) {",
                "raw_url": "https://github.com/apache/cxf/raw/403a4fb83a23b6bae60bc12eb48c357d1f822040/core/src/main/java/org/apache/cxf/common/util/PropertiesLoaderUtils.java",
                "sha": "e7c91d3f8aea39be2d40b456ac72d7d62c2d180a",
                "status": "modified"
            }
        ],
        "message": "[CXF-5822] Fixing a possible NPE in PropertiesLoaderUtils, patch from Christoph E\u00dfer applied",
        "parent": "https://github.com/apache/cxf/commit/5daca2d2bc1e771468fcad6d22c6b0db843e24cb",
        "repo": "cxf",
        "unit_tests": [
            "PropertiesLoaderUtilsTest.java"
        ]
    },
    "cxf_42fa58e": {
        "bug_id": "cxf_42fa58e",
        "commit": "https://github.com/apache/cxf/commit/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -872,7 +872,11 @@ private static XMLStreamReader findExtraNamespaces(XMLStreamReader source) {\n                 f.setAccessible(true);\n                 String ns[] = (String[])f.get(c);\n                 for (int x = 0; x < ns.length; x += 2) {\n-                    nsMap.put(ns[x], ns[x + 1]);\n+                    if (ns[x] == null) {\n+                        nsMap.put(null, ns[x + 1]);\n+                    } else {\n+                        nsMap.put(ns[x], ns[x + 1]);\n+                    }\n                 }\n             }\n         } catch (Throwable t) {",
                "raw_url": "https://github.com/apache/cxf/raw/42fa58e77a0f85ed12c7d0b2fc97d98f77ef067a/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "2fde06e2f182d7d95f72b613fd9c7554a6260ddf",
                "status": "modified"
            }
        ],
        "message": "Fix potential NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1298956 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/da18cfcf54dac8e0bba96b351a106a7c2f19467c",
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_43bbff0": {
        "bug_id": "cxf_43bbff0",
        "commit": "https://github.com/apache/cxf/commit/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java?ref=43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "patch": "@@ -67,7 +67,7 @@ protected void getTransportAssertions(Message message) {\n     \n     protected BindingFaultInfo getBindingFaultInfo(Message msg, Exception ex, BindingOperationInfo boi) {\n         BindingFaultInfo bfi = msg.get(BindingFaultInfo.class);        \n-        if (null == bfi) {\n+        if (null == bfi && ex != null) {\n             Throwable cause = ex.getCause();\n             if (null == cause) {\n                 return null;",
                "raw_url": "https://github.com/apache/cxf/raw/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/AbstractPolicyInterceptor.java",
                "sha": "3b2ce1c8c4ec0e6b04c6401cbaafd597aeb9e4a1",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java?ref=43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0",
                "deletions": 1,
                "filename": "rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "patch": "@@ -90,7 +90,6 @@ protected void handle(Message message) {\n         if (null == ex) {\n             ex = exchange.get(Exception.class);\n         }\n-        assert null != ex;\n         \n         BindingFaultInfo bfi = getBindingFaultInfo(message, ex, boi);\n         if (null == bfi) {",
                "raw_url": "https://github.com/apache/cxf/raw/43bbff0f7bfe1e0b4cc81acc890a92c11e6529d0/rt/ws/policy/src/main/java/org/apache/cxf/ws/policy/PolicyVerificationInFaultInterceptor.java",
                "sha": "dcbea0b1b87595b6a8f918b8caf10b4825d505b6",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@888105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/05fcdc46f1d9af25e3b91b196deb20298804fbe4",
        "repo": "cxf",
        "unit_tests": [
            "PolicyVerificationInFaultInterceptorTest.java"
        ]
    },
    "cxf_4e1149c": {
        "bug_id": "cxf_4e1149c",
        "commit": "https://github.com/apache/cxf/commit/4e1149ce5ee48723719305c68e00ec6f2d1e475e",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/4e1149ce5ee48723719305c68e00ec6f2d1e475e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java?ref=4e1149ce5ee48723719305c68e00ec6f2d1e475e",
                "deletions": 5,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "patch": "@@ -1010,12 +1010,15 @@ private static boolean isServletApiContext(String name) {\n         } else if (SERVLET_CONFIG_CLASS_NAME.equals(name)) {\n             proxyClassName = \"org.apache.cxf.jaxrs.impl.tl.ThreadLocalServletConfig\";\n         }\n-        try {\n-            return (ThreadLocalProxy<?>)ClassLoaderUtils.loadClass(proxyClassName, InjectionUtils.class)\n-                .newInstance();\n-        } catch (Throwable t) {\n-            throw new RuntimeException(t);\n+        if (proxyClassName != null) {\n+            try {\n+                return (ThreadLocalProxy<?>)ClassLoaderUtils.loadClass(proxyClassName, InjectionUtils.class)\n+                    .newInstance();\n+            } catch (Throwable t) {\n+                throw new RuntimeException(t);\n+            }\n         }\n+        return null;\n     }\n     \n     public static Method getGetterFromSetter(Method setter) throws Exception {",
                "raw_url": "https://github.com/apache/cxf/raw/4e1149ce5ee48723719305c68e00ec6f2d1e475e/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/InjectionUtils.java",
                "sha": "94911297a403f36cc154aab091e76e0fbecd292b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6480] Avoiding NPE",
        "parent": "https://github.com/apache/cxf/commit/81bc682a409806567fc3485157e184e72feaf086",
        "repo": "cxf",
        "unit_tests": [
            "InjectionUtilsTest.java"
        ]
    },
    "cxf_508ed23": {
        "bug_id": "cxf_508ed23",
        "commit": "https://github.com/apache/cxf/commit/508ed233f535fb4f6187a7369aa4360599b27361",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/508ed233f535fb4f6187a7369aa4360599b27361/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java?ref=508ed233f535fb4f6187a7369aa4360599b27361",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "patch": "@@ -270,7 +270,9 @@ private JaxWsClientEndpointImpl getJaxwsEndpoint(QName portName, AbstractService\n         \n         //When the dispatch is created from EPR, the EPR's address will be set in portInfo\n         PortInfoImpl portInfo = getPortInfo(portName);\n-        if (portInfo != null && !portInfo.getAddress().equals(ei.getAddress())) {\n+        if (portInfo != null\n+            && portInfo.getAddress() != null \n+            && !portInfo.getAddress().equals(ei.getAddress())) {\n             ei.setAddress(portInfo.getAddress());\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/508ed233f535fb4f6187a7369aa4360599b27361/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/ServiceImpl.java",
                "sha": "df224063199e41d4479e8d28c451794ec4446fd5",
                "status": "modified"
            }
        ],
        "message": "[CXF-5476] Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1559242 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/1f60c6b3d49aa037c87c50fb1595e99448384695",
        "repo": "cxf",
        "unit_tests": [
            "ServiceImplTest.java",
            "TestServiceImpl.java"
        ]
    },
    "cxf_51814b3": {
        "bug_id": "cxf_51814b3",
        "commit": "https://github.com/apache/cxf/commit/51814b35896eb9143c62990a95d60d510a8d48db",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java?ref=51814b35896eb9143c62990a95d60d510a8d48db",
                "deletions": 2,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "patch": "@@ -1443,8 +1443,8 @@ private void setEntityHeaders(Entity<?> entity) {\n         public <T> Future<T> method(String name, Entity<?> entity, InvocationCallback<T> callback) {\n             WebClient.this.setEntityHeaders(entity);\n             return doInvokeAsyncCallback(name, \n-                                         entity.getEntity(), \n-                                         entity.getEntity().getClass(), \n+                                         entity == null ? null : entity.getEntity(), \n+                                         entity == null ? null : entity.getEntity().getClass(),\n                                          null, \n                                          callback);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/WebClient.java",
                "sha": "812e204c419d0cae2a153974b4e537a92530ce96",
                "status": "modified"
            },
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/cxf/blob/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "changes": 22,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java?ref=51814b35896eb9143c62990a95d60d510a8d48db",
                "deletions": 7,
                "filename": "rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "patch": "@@ -33,6 +33,7 @@\n import javax.ws.rs.client.WebTarget;\n import javax.ws.rs.core.Configurable;\n import javax.ws.rs.core.Configuration;\n+import javax.ws.rs.core.Feature;\n import javax.ws.rs.core.Link;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.UriBuilder;\n@@ -71,7 +72,12 @@ public void close() {\n     @Override\n     public Builder invocation(Link link) {\n         checkClosed();\n-        return target(link.getUriBuilder()).request();\n+        Builder builder = target(link.getUriBuilder()).request();\n+        String type = link.getType();\n+        if (type != null) {\n+            builder.accept(type);\n+        }\n+        return builder;\n     }\n \n     @Override\n@@ -205,12 +211,14 @@ public Builder request() {\n             List<Object> providers = new LinkedList<Object>();\n             Configuration cfg = configImpl.getConfiguration();\n             for (Object p : cfg.getInstances()) {\n-                Map<Class<?>, Integer> contracts = cfg.getContracts(p.getClass());\n-                if (contracts == null || contracts.isEmpty()) {\n-                    providers.add(p);\n-                } else {\n-                    providers.add(\n-                        new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n+                if (!(p instanceof Feature)) {\n+                    Map<Class<?>, Integer> contracts = cfg.getContracts(p.getClass());\n+                    if (contracts == null || contracts.isEmpty()) {\n+                        providers.add(p);\n+                    } else {\n+                        providers.add(\n+                            new FilterProviderInfo<Object>(p, pf.getBus(), contracts));\n+                    }\n                 }\n             }\n             ",
                "raw_url": "https://github.com/apache/cxf/raw/51814b35896eb9143c62990a95d60d510a8d48db/rt/rs/client/src/main/java/org/apache/cxf/jaxrs/client/spec/ClientImpl.java",
                "sha": "d4c4b0d37269a47d1c749cdab5fb777b8054a3b6",
                "status": "modified"
            }
        ],
        "message": "[CXF-5135] Adding a missing NPE guard to AsyncInvokerImpl\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1520597 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/19e99e219c74326ce6edc30a0b69a0bc45ce85d8",
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_53d69d2": {
        "bug_id": "cxf_53d69d2",
        "commit": "https://github.com/apache/cxf/commit/53d69d2e5a7b31a292f0365b0c70a3ad804adb48",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/53d69d2e5a7b31a292f0365b0c70a3ad804adb48/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java?ref=53d69d2e5a7b31a292f0365b0c70a3ad804adb48",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "patch": "@@ -84,7 +84,7 @@ public XmlSchema addSchemaDocument(ServiceInfo serviceInfo, SchemaCollection col\n         \n         SchemaInfo schemaInfo = serviceInfo.getSchema(ns);\n         if (schemaInfo != null && (systemId == null && schemaInfo.getSystemId() == null \n-            || systemId != null && schemaInfo.getSystemId().equalsIgnoreCase(systemId))) {\n+            || systemId != null && systemId.equalsIgnoreCase(schemaInfo.getSystemId()))) {\n             return schemaInfo.getSchema();\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/53d69d2e5a7b31a292f0365b0c70a3ad804adb48/api/src/main/java/org/apache/cxf/databinding/AbstractDataBinding.java",
                "sha": "39dca99fcdda5adc95185707f8cd6248d1af9319",
                "status": "modified"
            }
        ],
        "message": "Yet another update to avoid a possible NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@702248 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/9524b0db1bbf781be26e814ed922aaafcda69314",
        "repo": "cxf",
        "unit_tests": [
            "AbstractDataBindingTest.java"
        ]
    },
    "cxf_56a44e0": {
        "bug_id": "cxf_56a44e0",
        "commit": "https://github.com/apache/cxf/commit/56a44e02e49f1d5281799ac57370b03772620cc8",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/56a44e02e49f1d5281799ac57370b03772620cc8/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java?ref=56a44e02e49f1d5281799ac57370b03772620cc8",
                "deletions": 2,
                "filename": "rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "patch": "@@ -196,13 +196,13 @@ protected void serviceRequest(final ServletContext context,\n \n         if (inMessage == null) {\n \n+            ExchangeImpl exchange = new ExchangeImpl();\n             inMessage = new MessageImpl();\n+            exchange.setInMessage(inMessage);\n             setupMessage(inMessage, context, req, resp);\n \n             ((MessageImpl) inMessage).setDestination(this);\n \n-            ExchangeImpl exchange = new ExchangeImpl();\n-            exchange.setInMessage(inMessage);\n             exchange.setSession(new HTTPSession(req));\n         }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/56a44e02e49f1d5281799ac57370b03772620cc8/rt/transports/http-netty/netty-server/src/main/java/org/apache/cxf/transport/http/netty/server/NettyHttpDestination.java",
                "sha": "0995b9ce8de56e05842432abb446b88d324c518f",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on server side\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1502082 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/6a825d6f00ee51a58effb6bc07339f62bb3ae67c",
        "repo": "cxf",
        "unit_tests": [
            "NettyHttpDestinationTest.java"
        ]
    },
    "cxf_5a67729": {
        "bug_id": "cxf_5a67729",
        "commit": "https://github.com/apache/cxf/commit/5a67729bef8110bd9a61fa026a3e7bca09864dec",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/5a67729bef8110bd9a61fa026a3e7bca09864dec/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java?ref=5a67729bef8110bd9a61fa026a3e7bca09864dec",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "patch": "@@ -118,7 +118,12 @@ private void updateContext(ServletConfig servletConfig, ApplicationContext ctx)\n             ctx = bus.getExtension(BusApplicationContext.class);\n         } else {\n             LOG.info(\"LOAD_BUS_WITH_APPLICATION_CONTEXT\");\n-            bus = new SpringBusFactory(ctx).createBus();\n+            inRefresh = true;\n+            try {\n+                bus = new SpringBusFactory(ctx).createBus();\n+            } finally {\n+                inRefresh = false;\n+            }\n         }        \n         \n         ResourceManager resourceManager = bus.getExtension(ResourceManager.class);\n@@ -175,7 +180,7 @@ public void destroy() {\n     }\n \n     public void onApplicationEvent(ApplicationEvent event) {\n-        if (!inRefresh && event instanceof ContextRefreshedEvent) {\n+        if (!inRefresh && event instanceof ContextRefreshedEvent && getServletConfig() != null) {\n             //need to re-do the bus/controller stuff\n             try {\n                 inRefresh = true;",
                "raw_url": "https://github.com/apache/cxf/raw/5a67729bef8110bd9a61fa026a3e7bca09864dec/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/CXFServlet.java",
                "sha": "a5b24209d8131c53c439b5d6b29432b648f3c068",
                "status": "modified"
            }
        ],
        "message": "[CXF-2620] Add some guards to prevent NPE with certain use cases and\nSpring 3.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@900875 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/85bb4855c1521a72d72115fdb4fc2a91fae2ea0b",
        "repo": "cxf",
        "unit_tests": [
            "CXFServletTest.java"
        ]
    },
    "cxf_5c2d098": {
        "bug_id": "cxf_5c2d098",
        "commit": "https://github.com/apache/cxf/commit/5c2d0981036a9c26e935b4748489d8898583d70c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/5c2d0981036a9c26e935b4748489d8898583d70c/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java?ref=5c2d0981036a9c26e935b4748489d8898583d70c",
                "deletions": 1,
                "filename": "rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "patch": "@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Set;\n \n+import javax.servlet.ServletContext;\n import javax.ws.rs.container.ContainerRequestContext;\n import javax.ws.rs.container.ContainerRequestFilter;\n import javax.ws.rs.container.PreMatching;\n@@ -174,7 +175,8 @@ public void filter(ContainerRequestContext requestContext) throws IOException {\n \n         @Override\n         public void filter(ContainerRequestContext requestContext) throws IOException {\n-            if (mc.getServletContext().getAttribute(ReaderConfig.class.getName()) == null) {\n+            ServletContext servletContext = mc.getServletContext();\n+            if (servletContext != null && servletContext.getAttribute(ReaderConfig.class.getName()) == null) {\n                 if (mc.getServletConfig() != null\n                     && Boolean.valueOf(mc.getServletConfig().getInitParameter(\"scan.all.resources\"))) {\n                     addReaderConfig(mc.getServletConfig().getInitParameter(\"ignore.routes\"));",
                "raw_url": "https://github.com/apache/cxf/raw/5c2d0981036a9c26e935b4748489d8898583d70c/rt/rs/description/src/main/java/org/apache/cxf/jaxrs/swagger/Swagger2Feature.java",
                "sha": "7a68622c64750092ff747383adf76fbbfceedd72",
                "status": "modified"
            }
        ],
        "message": "CXF-6601: avoid NPE",
        "parent": "https://github.com/apache/cxf/commit/cb2160fee6782b8638477ae7af5ad4cd82d6b88f",
        "repo": "cxf",
        "unit_tests": [
            "Swagger2FeatureTest.java"
        ]
    },
    "cxf_5f80039": {
        "bug_id": "cxf_5f80039",
        "commit": "https://github.com/apache/cxf/commit/5f800397146f994e32b6f71b5afd9088d0cd1500",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/5f800397146f994e32b6f71b5afd9088d0cd1500/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=5f800397146f994e32b6f71b5afd9088d0cd1500",
                "deletions": 1,
                "filename": "common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -784,7 +784,9 @@ public static void writeNode(Node n, XMLStreamWriter writer, boolean repairing)\n         }\n         case Node.DOCUMENT_TYPE_NODE:\n             try {\n-                writer.writeDTD(((DocumentType)n).getTextContent());\n+                if (((DocumentType)n).getTextContent() != null) {\n+                    writer.writeDTD(((DocumentType)n).getTextContent());\n+                }\n             } catch (UnsupportedOperationException ex) {\n                 //can we ignore?  DOM writers really don't allow this\n                 //as there isn't a way to write a DTD in dom",
                "raw_url": "https://github.com/apache/cxf/raw/5f800397146f994e32b6f71b5afd9088d0cd1500/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "0eb0281015278d13759172a6433e844325032271",
                "status": "modified"
            }
        ],
        "message": "[CXF-2919] Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@984454 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/6b5fe08a131a9addd80f6b2ccf3f198d650b6a37",
        "repo": "cxf",
        "unit_tests": [
            "StaxUtilsTest.java"
        ]
    },
    "cxf_60148ec": {
        "bug_id": "cxf_60148ec",
        "commit": "https://github.com/apache/cxf/commit/60148ecdde0ee79aa2c495650668a936fddb361b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/60148ecdde0ee79aa2c495650668a936fddb361b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=60148ecdde0ee79aa2c495650668a936fddb361b",
                "deletions": 3,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -131,9 +131,9 @@ public void purgeAcknowledged(SourceSequence seq) {\n                         purged.add(m);\n                     }\n                 }\n-            }\n-            if (sequenceCandidates.isEmpty()) {\n-                candidates.remove(seq.getIdentifier().getValue());\n+                if (sequenceCandidates.isEmpty()) {\n+                    candidates.remove(seq.getIdentifier().getValue());\n+                }\n             }\n             LOG.fine(\"Completed purging resend candidates.\");\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/60148ecdde0ee79aa2c495650668a936fddb361b/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "8d1e00e44650c9810dc586cc43890b8265b4a534",
                "status": "modified"
            }
        ],
        "message": "[CXF-2317] Fix for NPE in RetransmissionQueueImpl - fix from Guillaume\nPorcher applied.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@789528 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/55076a9b869b53918a21b8a3c139aaf3ff4daf1f",
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java"
        ]
    },
    "cxf_618a9e8": {
        "bug_id": "cxf_618a9e8",
        "commit": "https://github.com/apache/cxf/commit/618a9e85dc08432d33b76471b2723dfcdf26542c",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/618a9e85dc08432d33b76471b2723dfcdf26542c/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java?ref=618a9e85dc08432d33b76471b2723dfcdf26542c",
                "deletions": 1,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "patch": "@@ -127,7 +127,8 @@ public void handleMessage(SoapMessage message) throws Fault {\n                 if (fault.getRole() != null) {\n                     soapFault.setFaultActor(fault.getRole());\n                 }\n-                if (fault.getDetail() != null) {\n+                if (fault.getDetail() != null\n+                    && fault.getDetail().getFirstChild() != null) {\n                     soapFault.addDetail().appendChild(\n                         soapMessage.getSOAPPart().importNode(\n                             fault.getDetail().getFirstChild(), true));",
                "raw_url": "https://github.com/apache/cxf/raw/618a9e85dc08432d33b76471b2723dfcdf26542c/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/saaj/SAAJInInterceptor.java",
                "sha": "335eeb42daf291775bf395d977af83339cdc7710",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in SAAJInInterceptor when FaultDetail is not populated\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@734666 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5623e9d5a532e8d1b29d030a6cbe2a86edc6ac44",
        "repo": "cxf",
        "unit_tests": [
            "SAAJInInterceptorTest.java"
        ]
    },
    "cxf_61b1305": {
        "bug_id": "cxf_61b1305",
        "commit": "https://github.com/apache/cxf/commit/61b13052c3e38491f46792ed607105c9d1f92b55",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/61b13052c3e38491f46792ed607105c9d1f92b55/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java?ref=61b13052c3e38491f46792ed607105c9d1f92b55",
                "deletions": 2,
                "filename": "rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "patch": "@@ -218,8 +218,10 @@ public void onMessage(javax.jms.Message message, Session session) {\n             // handle the incoming message\n             incomingObserver.onMessage(inMessage);\n             \n-            inMessage = inMessage.getExchange().getInMessage();\n-            \n+            if (inMessage.getExchange() != null \n+                && inMessage.getExchange().getInMessage() != null) {\n+                inMessage = inMessage.getExchange().getInMessage();\n+            }\n             //need to propagate any exceptions back to Spring container \n             //so transactions can occur\n             if (inMessage.getContent(Exception.class) != null && session != null) {",
                "raw_url": "https://github.com/apache/cxf/raw/61b13052c3e38491f46792ed607105c9d1f92b55/rt/transports/jms/src/main/java/org/apache/cxf/transport/jms/JMSDestination.java",
                "sha": "55662d63fb86c235823c94b346d12a57689c083e",
                "status": "modified"
            }
        ],
        "message": "Add some NPE guards\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@951549 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5f620de8b0952a2a4d1d44d33848508e6462b839",
        "repo": "cxf",
        "unit_tests": [
            "JMSDestinationTest.java"
        ]
    },
    "cxf_67f5bef": {
        "bug_id": "cxf_67f5bef",
        "commit": "https://github.com/apache/cxf/commit/67f5befafa7b9aeb831451dbccd3a7e8993b456d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/67f5befafa7b9aeb831451dbccd3a7e8993b456d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java?ref=67f5befafa7b9aeb831451dbccd3a7e8993b456d",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "patch": "@@ -238,10 +238,10 @@ public int getLength() {\n \n     public URI getLocation() {\n         Object header = metadata.getFirst(HttpHeaders.LOCATION);\n-        if (header == null) {\n+        if (header == null && outMessage != null) {\n             header = outMessage.get(Message.REQUEST_URI);\n         }\n-        return header == null || header instanceof URI ? (URI)header\n+        return header == null || header instanceof URI ? (URI) header\n             : URI.create(header.toString());\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/67f5befafa7b9aeb831451dbccd3a7e8993b456d/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "sha": "d23ce98f0eb54852d00def6d0117cd8aa1846d8f",
                "status": "modified"
            }
        ],
        "message": "Prevent NPE when outMessage is null",
        "parent": "https://github.com/apache/cxf/commit/f0b60da47e8a1430444551daf970c820101f516a",
        "repo": "cxf",
        "unit_tests": [
            "ResponseImplTest.java"
        ]
    },
    "cxf_6c37922": {
        "bug_id": "cxf_6c37922",
        "commit": "https://github.com/apache/cxf/commit/6c37922c1eee2bc78c576bd69ba32221b60c2d7b",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/6c37922c1eee2bc78c576bd69ba32221b60c2d7b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java?ref=6c37922c1eee2bc78c576bd69ba32221b60c2d7b",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "patch": "@@ -447,7 +447,11 @@ public String getWsdlLocation() {\n     }\n \n     public void setWsdlLocation(String wsdlLocation) {\n-        this.wsdlLocation = new String(wsdlLocation);\n+        if (wsdlLocation != null) {\n+            this.wsdlLocation = new String(wsdlLocation);\n+        } else {\n+            this.wsdlLocation = null;\n+        }\n     }\n \n     public void setBindingUri(String binding) {",
                "raw_url": "https://github.com/apache/cxf/raw/6c37922c1eee2bc78c576bd69ba32221b60c2d7b/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "sha": "32a06061c8c397cceaed07e4f2b1a7b4e13c32ea",
                "status": "modified"
            }
        ],
        "message": "Fix a NPE I introduced.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@790642 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/45457cdea89522772888fafc7d8fed9de4d50def",
        "repo": "cxf",
        "unit_tests": [
            "EndpointImplTest.java",
            "TestEndpointImpl.java"
        ]
    },
    "cxf_6e022e2": {
        "bug_id": "cxf_6e022e2",
        "commit": "https://github.com/apache/cxf/commit/6e022e235449c0167f3700b6579d261586d87055",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/6e022e235449c0167f3700b6579d261586d87055/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=6e022e235449c0167f3700b6579d261586d87055",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -738,6 +738,9 @@ private static void writeStartElement(XMLStreamReader reader, XMLStreamWriter wr\n             if (nsPrefix == null) {\n                 nsPrefix = \"\";\n             }\n+            if (nsURI == null) {\n+                nsURI = \"\";\n+            }\n             if (nsPrefix.length() == 0) {\n                 writer.writeDefaultNamespace(nsURI);\n                 writer.setDefaultNamespace(nsURI);",
                "raw_url": "https://github.com/apache/cxf/raw/6e022e235449c0167f3700b6579d261586d87055/api/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "151e61d934d1799cbefb6a0b57a683d5d9c14d99",
                "status": "modified"
            }
        ],
        "message": "[CXF-5004] NPE at StaxUtils.copy for empty namespaces under JDK's XMLStreamReader\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1479735 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/74a52d0fe68a7a84f44cdc4583ed8b1ef2036b42",
        "repo": "cxf",
        "unit_tests": [
            "StaxUtilsTest.java"
        ]
    },
    "cxf_73ad9a8": {
        "bug_id": "cxf_73ad9a8",
        "commit": "https://github.com/apache/cxf/commit/73ad9a853d999d7f60039e482c182c79a1d57a09",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/73ad9a853d999d7f60039e482c182c79a1d57a09/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java?ref=73ad9a853d999d7f60039e482c182c79a1d57a09",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "patch": "@@ -699,7 +699,9 @@ protected void setParameters(Object[] params, Message message) {\n     }\n \n     public void onMessage(Message message) {\n-\n+        if (bus == null) {\n+            throw new IllegalStateException(\"Message received on a Client that has been closed or destroyed.\");\n+        }\n         Endpoint endpoint = message.getExchange().getEndpoint();\n         if (endpoint == null) {\n             // in this case correlation will occur outside the transport,",
                "raw_url": "https://github.com/apache/cxf/raw/73ad9a853d999d7f60039e482c182c79a1d57a09/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "sha": "9114c66f130924948b0b12902bc6a9a707bc951c",
                "status": "modified"
            }
        ],
        "message": "[CXF-6070] Instead of NPE, throw a more meaningful exception.",
        "parent": "https://github.com/apache/cxf/commit/5e06ba0c4970700477484bd2409a226aa9ec7f0a",
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_793eebe": {
        "bug_id": "cxf_793eebe",
        "commit": "https://github.com/apache/cxf/commit/793eebe60d3f934bdaf009f24a392e68c5ab4630",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/793eebe60d3f934bdaf009f24a392e68c5ab4630/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java?ref=793eebe60d3f934bdaf009f24a392e68c5ab4630",
                "deletions": 0,
                "filename": "rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "patch": "@@ -134,6 +134,11 @@ public Destination getDestination(EndpointInfo endpointInfo, Bus bus) throws IOE\n             AbstractHTTPDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n             if (d == null) {\n                 d = factory.createDestination(endpointInfo, bus, registry);\n+                if (d == null) {\n+                    String error = \"No destination available. The CXF websocket transport needs either the \"\n+                        + \"Jetty WebSocket or Atmosphere dependencies to be available\";\n+                    throw new IOException(error); \n+                }\n                 registry.addDestination(d);\n                 configure(bus, d);\n                 d.finalizeConfig();",
                "raw_url": "https://github.com/apache/cxf/raw/793eebe60d3f934bdaf009f24a392e68c5ab4630/rt/transports/websocket/src/main/java/org/apache/cxf/transport/websocket/WebSocketTransportFactory.java",
                "sha": "b1da5390fba66d81411fafaa5259fcb4f0c18289",
                "status": "modified"
            }
        ],
        "message": "Avoid a NPE in websocket transport",
        "parent": "https://github.com/apache/cxf/commit/fbf69824d551605272fad67cc0bbc60a93fb52d7",
        "repo": "cxf",
        "unit_tests": [
            "WebSocketTransportFactoryTest.java"
        ]
    },
    "cxf_7b78b8b": {
        "bug_id": "cxf_7b78b8b",
        "commit": "https://github.com/apache/cxf/commit/7b78b8b49f5ee85231b9a966689f2fff9531782c",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/7b78b8b49f5ee85231b9a966689f2fff9531782c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?ref=7b78b8b49f5ee85231b9a966689f2fff9531782c",
                "deletions": 4,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "patch": "@@ -544,10 +544,12 @@ private void buildWSAActions(OperationInfo operation, Method method) {\n                                                        inputAction);\n             operation.getInput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n                                                        inputAction);\n-            operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME,\n-                                                       computeAction(operation, \"Response\"));\n-            operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n-                                                        computeAction(operation, \"Response\"));\n+            if (operation.getOutput() != null) {\n+                operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME,\n+                                                            computeAction(operation, \"Response\"));\n+                operation.getOutput().addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME,\n+                                                            computeAction(operation, \"Response\"));\n+            }\n \n         } else {\n             MessageInfo input = operation.getInput();",
                "raw_url": "https://github.com/apache/cxf/raw/7b78b8b49f5ee85231b9a966689f2fff9531782c/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "sha": "769293e1cb5077dfa510a106ecea51caec015d40",
                "status": "modified"
            }
        ],
        "message": "[CXF-3560] Add NPE guard when WS-A is used with one-ways\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1132857 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/3f3785001bd5d672ef926773d7464df4ee53e359",
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceFactoryBeanTest.java"
        ]
    },
    "cxf_842729f": {
        "bug_id": "cxf_842729f",
        "commit": "https://github.com/apache/cxf/commit/842729f78df0ca634d8a3a2aedd42ff57a8269a3",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/842729f78df0ca634d8a3a2aedd42ff57a8269a3/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java?ref=842729f78df0ca634d8a3a2aedd42ff57a8269a3",
                "deletions": 1,
                "filename": "common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "patch": "@@ -205,7 +205,7 @@ private void tryFileSystem(String baseUriStr, String uriStr) throws IOException,\n             // do nothing\n         }\n \n-        if (is == null && baseUriStr.startsWith(\"classpath:\")) {\n+        if (is == null && baseUriStr != null && baseUriStr.startsWith(\"classpath:\")) {\n             tryClasspath(baseUriStr + uriStr);\n         }\n         if (is == null && uri != null && \"file\".equals(uri.getScheme())) {",
                "raw_url": "https://github.com/apache/cxf/raw/842729f78df0ca634d8a3a2aedd42ff57a8269a3/common/common/src/main/java/org/apache/cxf/resource/URIResolver.java",
                "sha": "9d625261067463b7e073f79d2b2237aa133c931d",
                "status": "modified"
            }
        ],
        "message": "Add NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@831417 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/2c040aebc0ffdb599c2ff3dc3b9e8a4c8fa952ee",
        "repo": "cxf",
        "unit_tests": [
            "URIResolverTest.java"
        ]
    },
    "cxf_87d67b9": {
        "bug_id": "cxf_87d67b9",
        "commit": "https://github.com/apache/cxf/commit/87d67b928b87adb1e60eb817d1718f405cbc7e3c",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/cxf/blob/87d67b928b87adb1e60eb817d1718f405cbc7e3c/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 27,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=87d67b928b87adb1e60eb817d1718f405cbc7e3c",
                "deletions": 17,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -19,13 +19,11 @@\n \n package org.apache.cxf.ws.rm.soap;\n \n-import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n import java.io.OutputStream;\n import java.net.ConnectException;\n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collection;\n import java.util.Date;\n import java.util.HashMap;\n@@ -390,7 +388,7 @@ private void serverResend(Message message) throws RMException {\n         }\n         \n         final String address = to.getValue();\n-        LOG.fine(\"Resending to address: \" + address);\n+        LOG.log(Level.FINE, \"Resending to address: {0}\", address);\n         final ProtocolVariation protocol = RMContextUtils.getProtocolVariation(message);\n         final Endpoint reliableEndpoint = manager.getReliableEndpoint(message).getEndpoint(protocol);\n \n@@ -455,15 +453,10 @@ private void resend(Conduit c, Message message) {\n             }\n             CachedOutputStream content = (CachedOutputStream)message\n                 .get(RMMessageConstants.SAVED_CONTENT);\n-            InputStream bis = null;\n             if (null == content) {\n-                byte[] savedbytes = message.getContent(byte[].class);\n-                bis = new ByteArrayInputStream(savedbytes); \n-                if (LOG.isLoggable(Level.FINE)) {\n-                    LOG.fine(\"Using saved byte array: \" + Arrays.toString(savedbytes));\n-                }\n+                LOG.log(Level.WARNING, \"Assuming the message has been acknowledged and released, skipping resend.\");\n             } else {\n-                bis = content.getInputStream();\n+                InputStream bis = content.getInputStream();\n                 if (LOG.isLoggable(Level.FINE)) {\n                     if (content.size() < 65536) {\n                         LOG.fine(\"Using saved output stream: \" \n@@ -472,17 +465,17 @@ private void resend(Conduit c, Message message) {\n                         LOG.fine(\"Using saved output stream: ...\");                        \n                     }\n                 }\n-            }\n \n-            // copy saved output stream to new output stream in chunks of 1024\n-            IOUtils.copyAndCloseInput(bis, os);\n-            os.flush();\n-            // closing the conduit this way will close the underlining stream that is os.\n-            c.close(message);\n+                // copy saved output stream to new output stream in chunks of 1024\n+                IOUtils.copyAndCloseInput(bis, os);\n+                os.flush();\n+                // closing the conduit this way will close the underlining stream that is os.\n+                c.close(message);\n+            }\n         } catch (ConnectException ex) {\n             //ignore, we'll just resent again later\n         } catch (IOException ex) {\n-            LOG.log(Level.SEVERE, \"RESEND_FAILED_MSG\", ex);\n+            LOG.log(Level.WARNING, \"RESEND_FAILED_MSG\", ex);\n         }\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/87d67b928b87adb1e60eb817d1718f405cbc7e3c/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "c096128ce7fbec6147fb1ce6698a023e3d9f4ace",
                "status": "modified"
            }
        ],
        "message": "[CXF-5546] NPE may be thrown and logged during WS-RM's retransmission\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1565162 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/0bfee67fff799ffa7845873a4190676763c1c1ea",
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java"
        ]
    },
    "cxf_883461c": {
        "bug_id": "cxf_883461c",
        "commit": "https://github.com/apache/cxf/commit/883461c7fa6743b7fa5a587f16aadd92a037fb8f",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/883461c7fa6743b7fa5a587f16aadd92a037fb8f/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java?ref=883461c7fa6743b7fa5a587f16aadd92a037fb8f",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "patch": "@@ -297,12 +297,14 @@ public synchronized boolean doIntercept(Message message) {\n                         }\n     \n                         message.setContent(Exception.class, ex);\n+                        boolean isOneWay = false;\n                         if (message.getExchange() != null) {\n                             message.getExchange().put(Exception.class, ex);\n+                            isOneWay = message.getExchange().isOneWay();\n                         }                    \n                         unwind(message);\n                         \n-                        if (faultObserver != null && !message.getExchange().isOneWay()) {\n+                        if (faultObserver != null && !isOneWay) {\n                             faultObserver.onMessage(message);\n                         }\n                     }",
                "raw_url": "https://github.com/apache/cxf/raw/883461c7fa6743b7fa5a587f16aadd92a037fb8f/api/src/main/java/org/apache/cxf/phase/PhaseInterceptorChain.java",
                "sha": "eb4815aaaa7ff77b5d10ec727a2ac20aaf2fefd8",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@891037 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5b409868efb18b954c3880148d721c7ceabc6bcf",
        "repo": "cxf",
        "unit_tests": [
            "PhaseInterceptorChainTest.java"
        ]
    },
    "cxf_8aa2857": {
        "bug_id": "cxf_8aa2857",
        "commit": "https://github.com/apache/cxf/commit/8aa2857dfb2a04431461f75eb1338da3a8df7776",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/8aa2857dfb2a04431461f75eb1338da3a8df7776/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java?ref=8aa2857dfb2a04431461f75eb1338da3a8df7776",
                "deletions": 5,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "patch": "@@ -844,11 +844,13 @@ public Boolean isWrapperPartQualified(MessagePartInfo mpi) {\n     \n     public Long getWrapperPartMinOccurs(MessagePartInfo mpi) {\n         Annotation[] a = (Annotation[])mpi.getProperty(ReflectionServiceFactoryBean.PARAM_ANNOTATION);\n-        for (Annotation a2 : a) {\n-            if (a2 instanceof XmlElement) {\n-                XmlElement e = (XmlElement)a2;\n-                if (e.required()) {\n-                    return 1L;\n+        if (a != null) {\n+            for (Annotation a2 : a) {\n+                if (a2 instanceof XmlElement) {\n+                    XmlElement e = (XmlElement)a2;\n+                    if (e.required()) {\n+                        return 1L;\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/8aa2857dfb2a04431461f75eb1338da3a8df7776/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceConfiguration.java",
                "sha": "81e2d0200a4bbfc44b2b66beeb852d3f5a5b18a0",
                "status": "modified"
            }
        ],
        "message": "[CXF-3069] Adding NPE guard to getWrapperPartMinOccurs method\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1027509 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/93b280e2353cc9477db7918c06812c30443ea071",
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceConfigurationTest.java"
        ]
    },
    "cxf_8c8ed16": {
        "bug_id": "cxf_8c8ed16",
        "commit": "https://github.com/apache/cxf/commit/8c8ed16605a2d7468da380155e9aa4c4bbd62031",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/8c8ed16605a2d7468da380155e9aa4c4bbd62031/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java?ref=8c8ed16605a2d7468da380155e9aa4c4bbd62031",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "patch": "@@ -637,6 +637,9 @@ public static Certificate loadCertificate(InputStream storeLocation, char[] stor\n     }\n     public static Certificate loadCertificate(KeyStore keyStore, String alias) {\n         try {\n+            if (!keyStore.containsAlias(alias)) {\n+                throw new SecurityException(\"No alias exists in the keystore for the given alias: \" + alias);\n+            }\n             return keyStore.getCertificate(alias);\n         } catch (Exception ex) { \n             throw new SecurityException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/8c8ed16605a2d7468da380155e9aa4c4bbd62031/core/src/main/java/org/apache/cxf/common/util/crypto/CryptoUtils.java",
                "sha": "5495fbc18fdad9b3d6dd7c9792972548682925b7",
                "status": "modified"
            }
        ],
        "message": "Avoid NPE if the keystore does not contain the given alias",
        "parent": "https://github.com/apache/cxf/commit/e4feffb6f13fd5ba1c8c76bb2301d2d1a13fd43a",
        "repo": "cxf",
        "unit_tests": [
            "CryptoUtilsTest.java"
        ]
    },
    "cxf_8d0fefa": {
        "bug_id": "cxf_8d0fefa",
        "commit": "https://github.com/apache/cxf/commit/8d0fefa3990b902776741e631fdb1fe53c350c6f",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "patch": "@@ -88,7 +88,8 @@ public void run() {\n         };\n         \n         Executor executor = getExecutor(endpoint);\n-        if (exchange.get(Executor.class) == executor) {\n+        Executor executor2 = exchange.get(Executor.class);\n+        if (executor2 == executor || executor == null) {\n             // already executing on the appropriate executor\n             invocation.run();\n         } else {",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/api/src/main/java/org/apache/cxf/interceptor/ServiceInvokerInterceptor.java",
                "sha": "5c4a6d5de8241edbda11477ea5bd993afcb78d32",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "patch": "@@ -50,7 +50,6 @@\n import org.apache.cxf.service.model.MessagePartInfo;\n import org.apache.cxf.service.model.OperationInfo;\n import org.apache.cxf.service.model.ServiceInfo;\n-import org.apache.cxf.workqueue.SynchronousExecutor;\n \n /**\n  * The CXF Service implementation which is used \n@@ -74,7 +73,6 @@ public JAXRSServiceImpl(String address, QName qname) {\n \n     public JAXRSServiceImpl(List<ClassResourceInfo> cri, QName qname) {\n         this.classResourceInfos = cri;\n-        executor = SynchronousExecutor.getInstance();    \n         this.serviceName = qname;\n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/JAXRSServiceImpl.java",
                "sha": "24508220582799081c8fd1d5b6eaf41b103d6338",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "patch": "@@ -22,6 +22,7 @@\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.Executor;\n import java.util.logging.Level;\n import java.util.logging.Logger;\n \n@@ -41,6 +42,7 @@\n import org.apache.cxf.service.model.InterfaceInfo;\n import org.apache.cxf.service.model.OperationInfo;\n import org.apache.cxf.transport.Conduit;\n+import org.apache.cxf.workqueue.SynchronousExecutor;\n import org.apache.cxf.ws.addressing.AttributedURIType;\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n import org.apache.cxf.ws.addressing.RelatesToType;\n@@ -169,7 +171,11 @@ public void run() {\n                     }\n                 }\n             };\n-            reliableEndpoint.getApplicationEndpoint().getExecutor().execute(r);\n+            Executor ex = reliableEndpoint.getApplicationEndpoint().getExecutor();\n+            if (ex == null) {\n+                ex = SynchronousExecutor.getInstance();\n+            }\n+            ex.execute(r);\n             return null;\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Proxy.java",
                "sha": "28d3bd1f073dd52976f6c87d839aad8ceb5af999",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java?ref=8d0fefa3990b902776741e631fdb1fe53c350c6f",
                "deletions": 1,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "patch": "@@ -49,6 +49,7 @@\n import org.apache.cxf.service.model.EndpointInfo;\n import org.apache.cxf.transport.Conduit;\n import org.apache.cxf.transport.MessageObserver;\n+import org.apache.cxf.workqueue.SynchronousExecutor;\n import org.apache.cxf.ws.addressing.AddressingProperties;\n import org.apache.cxf.ws.addressing.AttributedURIType;\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n@@ -527,7 +528,11 @@ protected void initiate(boolean requestAcknowledge) {\n             Executor executor = ep.getExecutor();\n             if (null == executor) {\n                 executor = ep.getService().getExecutor();\n-                LOG.log(Level.FINE, \"Using service executor {0}\", executor.getClass().getName());\n+                if (executor == null) {\n+                    executor = SynchronousExecutor.getInstance();\n+                } else {\n+                    LOG.log(Level.FINE, \"Using service executor {0}\", executor.getClass().getName());\n+                }\n             } else {\n                 LOG.log(Level.FINE, \"Using endpoint executor {0}\", executor.getClass().getName());\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/8d0fefa3990b902776741e631fdb1fe53c350c6f/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/soap/RetransmissionQueueImpl.java",
                "sha": "42601cafa2a7e2d5572ef1384c625248d68f528c",
                "status": "modified"
            }
        ],
        "message": "[CXF-4312] Similar issue on the server side about having an executor set\nby default.   Not needed if the rest of the code guards against NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1337293 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/eb8928278f16bc9ae4384ef6b2b03befab62e92c",
        "repo": "cxf",
        "unit_tests": [
            "RetransmissionQueueImplTest.java"
        ]
    },
    "cxf_8f12a15": {
        "bug_id": "cxf_8f12a15",
        "commit": "https://github.com/apache/cxf/commit/8f12a150b8902c59a96d7cde90ac833628aa0dd8",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/8f12a150b8902c59a96d7cde90ac833628aa0dd8/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java?ref=8f12a150b8902c59a96d7cde90ac833628aa0dd8",
                "deletions": 3,
                "filename": "core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "patch": "@@ -325,7 +325,9 @@ public void setThreadLocalRequestContext(boolean b) {\n         try {\n             return invoke(oi, params, context, exchange);\n         } finally {\n-            responseContext.put(Thread.currentThread(), resp);\n+            if (responseContext != null) {\n+                responseContext.put(Thread.currentThread(), resp);\n+            }\n         }\n     }\n     public Object[] invoke(BindingOperationInfo oi,\n@@ -336,7 +338,7 @@ public void setThreadLocalRequestContext(boolean b) {\n         } finally {\n             if (context != null) {\n                 Map<String, Object> resp = CastUtils.cast((Map<?, ?>)context.get(RESPONSE_CONTEXT));\n-                if (resp != null) {\n+                if (resp != null && responseContext != null) {\n                     responseContext.put(Thread.currentThread(), resp);\n                 }\n             }\n@@ -811,7 +813,7 @@ public void onMessage(Message message) {\n                                                                 .getOutMessage()\n                                                                 .get(Message.INVOCATION_CONTEXT));\n                 resCtx = CastUtils.cast((Map<?, ?>)resCtx.get(RESPONSE_CONTEXT));\n-                if (resCtx != null) {\n+                if (resCtx != null && responseContext != null) {\n                     responseContext.put(Thread.currentThread(), resCtx);\n                 }\n                 try {",
                "raw_url": "https://github.com/apache/cxf/raw/8f12a150b8902c59a96d7cde90ac833628aa0dd8/core/src/main/java/org/apache/cxf/endpoint/ClientImpl.java",
                "sha": "775170cfcad6ae530fa9ce995613865948357da2",
                "status": "modified"
            }
        ],
        "message": "[CXF-6092] Add a couple NPE guards",
        "parent": "https://github.com/apache/cxf/commit/7845fa85e7640bad0e7bd42d1a2ac77873def0ac",
        "repo": "cxf",
        "unit_tests": [
            "ClientImplTest.java"
        ]
    },
    "cxf_916e9d3": {
        "bug_id": "cxf_916e9d3",
        "commit": "https://github.com/apache/cxf/commit/916e9d345fcec4211c57b0955b51020b6dc2376b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 0,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "patch": "@@ -200,6 +200,9 @@ public String getPackageName() {\n     }\n \n     public String mapPackageName(String ns) {\n+        if (ns == null) {\n+            ns = \"\";\n+        }\n         if (hasNamespace(ns)) {\n             return mapNamespaceToPackageName(ns);\n         } else {",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/common/ToolContext.java",
                "sha": "406816dc068010b053905772ca086dc6148def59",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 1,
                "filename": "tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "patch": "@@ -90,7 +90,7 @@ public static String getPackageName(String nameSpaceURI) {\n \n         List<String> tokens = tokenize(nameSpaceURI, \"/: \");\n         if (tokens.size() == 0) {\n-            return null;\n+            return \"cxf\"; \n         }\n \n         if (tokens.size() > 1) {",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/common/src/main/java/org/apache/cxf/tools/util/URIParserUtil.java",
                "sha": "927c06824c3da0255f15bd25c0f113252264a44d",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 1,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "patch": "@@ -481,7 +481,7 @@ private boolean addedToClassCollector(String packageName) {\n         Collection<String> files = classCollector.getGeneratedFileInfo();\n         for (String file : files) {\n             int dotIndex = file.lastIndexOf(\".\");\n-            String sub = dotIndex == -1 ? \"\" : file.substring(0, dotIndex - 1);\n+            String sub = dotIndex <= 0 ? \"\" : file.substring(0, dotIndex - 1);\n             if (sub.equals(packageName)) {\n                 return true;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "sha": "f9a377ea86e8a917eecd78e76fbe6fdf3ff480fb",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java?ref=916e9d345fcec4211c57b0955b51020b6dc2376b",
                "deletions": 0,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "patch": "@@ -36,6 +36,7 @@ public InterfaceMapper(ToolContext c) {\n     public JavaInterface map(InterfaceInfo interfaceInfo) {\n         JavaInterface intf = new JavaInterface();\n         String namespace = interfaceInfo.getName().getNamespaceURI();\n+\n         String packageName = ProcessorUtil.parsePackageName(namespace, context.mapPackageName(namespace));\n         \n         String loc = (String)context.get(ToolConstants.CFG_WSDLLOCATION);",
                "raw_url": "https://github.com/apache/cxf/raw/916e9d345fcec4211c57b0955b51020b6dc2376b/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/processor/internal/mapper/InterfaceMapper.java",
                "sha": "26336737c22b120df15e61ad621a26b12c72805b",
                "status": "modified"
            }
        ],
        "message": "[CXF-2431] If the wsdl doesn't have a targetnamespace defined, at least\ntry to do something and not NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@821216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c44bc1059aed6d1649b3db18b90d4495b6025181",
        "repo": "cxf",
        "unit_tests": [
            "InterfaceMapperTest.java"
        ]
    },
    "cxf_9192b48": {
        "bug_id": "cxf_9192b48",
        "commit": "https://github.com/apache/cxf/commit/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java?ref=9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7",
                "deletions": 0,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "patch": "@@ -126,6 +126,7 @@ public synchronized Node getNode() {\n                     src.setPublicId(publicId);\n                     Document doc = StaxUtils.read(src);\n                     setNode(doc);\n+                    nd = super.getNode();\n                 } catch (Exception ex) {\n                     throw new RuntimeException(ex);\n                 }",
                "raw_url": "https://github.com/apache/cxf/raw/9192b48919f1ff2c07c6e20f8382a1c8b1fd19b7/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBDataBinding.java",
                "sha": "e81a359f646193dc8233ca2a575ec239c229f8f2",
                "status": "modified"
            }
        ],
        "message": "Fix NPE in some tests with j5\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1332490 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/f8d2b65c5e3eb5444cfce2257e705e092bf7b3b0",
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_9283d10": {
        "bug_id": "cxf_9283d10",
        "commit": "https://github.com/apache/cxf/commit/9283d10adb87d00e68b49444a3d2222469770bf8",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9283d10adb87d00e68b49444a3d2222469770bf8/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=9283d10adb87d00e68b49444a3d2222469770bf8",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -435,12 +435,18 @@ protected void copyToResponse(HttpServletResponse response) {\n             \n             if (addHeaders || HTTP_HEADERS_SINGLE_VALUE_ONLY.contains(header)) {\n                 for (int i = 0; i < headerList.size(); i++) {\n-                    response.addHeader(header, headerObjectToString(headerList.get(i)));\n+                    Object headerObject = headerList.get(i);\n+                    if (headerObject != null) {\n+                        response.addHeader(header, headerObjectToString(headerObject));\n+                    }\n                 }\n             } else {\n                 StringBuilder sb = new StringBuilder();\n                 for (int i = 0; i < headerList.size(); i++) {\n-                    sb.append(headerObjectToString(headerList.get(i)));\n+                    Object headerObject = headerList.get(i);\n+                    if (headerObject != null) {\n+                        sb.append(headerObjectToString(headerObject));\n+                    }\n                     \n                     if (i + 1 < headerList.size()) {\n                         sb.append(',');",
                "raw_url": "https://github.com/apache/cxf/raw/9283d10adb87d00e68b49444a3d2222469770bf8/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "620deb1b8382d613786ad2dd5c0b3d9ac6503f72",
                "status": "modified"
            }
        ],
        "message": "Adding NPE guards to HTTP Headers utility, thanks to Raman Malisetti",
        "parent": "https://github.com/apache/cxf/commit/0aa08eec65301d329efce12da8e98cf0c3d3112e",
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_92a726a": {
        "bug_id": "cxf_92a726a",
        "commit": "https://github.com/apache/cxf/commit/92a726ac642728322f795668708b0d8ea1e70653",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/92a726ac642728322f795668708b0d8ea1e70653/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java?ref=92a726ac642728322f795668708b0d8ea1e70653",
                "deletions": 2,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "patch": "@@ -227,10 +227,12 @@ public Source invoke(Source request) {\n         } catch (Exception e) {\n             try {\n                 SOAPFault fault = soapFactory.createFault();\n-                if (e.getMessage() == null) {\n+                if (e.getMessage() != null) {\n+                    fault.setFaultString(e.getMessage());\n+                } else if (e.getCause() != null && e.getCause().getMessage() != null) {\n                     fault.setFaultString(e.getCause().getMessage());\n                 } else {\n-                    fault.setFaultString(e.getMessage());\n+                    fault.setFaultString(\"Internal STS error\");\n                 }\n                 Detail detail = fault.addDetail();\n                 detail = fault.getDetail();",
                "raw_url": "https://github.com/apache/cxf/raw/92a726ac642728322f795668708b0d8ea1e70653/rt/ws/security/src/main/java/org/apache/cxf/ws/security/sts/provider/SecurityTokenServiceProvider.java",
                "sha": "1ad1bd52bc930cabf0bafe0b509b06a0cbc4251a",
                "status": "modified"
            }
        ],
        "message": "Avoiding a NPE in the STS when creating a fault caused by a NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1133899 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c1eea3f31b047a8e69605e7196b67cd5be101ff6",
        "repo": "cxf",
        "unit_tests": [
            "SecurityTokenServiceProviderTest.java"
        ]
    },
    "cxf_92ae40b": {
        "bug_id": "cxf_92ae40b",
        "commit": "https://github.com/apache/cxf/commit/92ae40b38620bfe45463d07d728f31f3a1dea4fb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/92ae40b38620bfe45463d07d728f31f3a1dea4fb/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=92ae40b38620bfe45463d07d728f31f3a1dea4fb",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -276,6 +276,12 @@ private void renderStyleSheet(HttpServletRequest request,\n                 transport.getDestinations());\n         Collections.sort(destinations, new Comparator<ServletDestination>() {\n             public int compare(ServletDestination o1, ServletDestination o2) {\n+                if (o1.getEndpointInfo().getInterface() == null) {\n+                    return -1;\n+                }\n+                if (o2.getEndpointInfo().getInterface() == null) {\n+                    return 1;\n+                }\n                 return o1.getEndpointInfo().getInterface().getName()\n                         .getLocalPart().compareTo(\n                                 o2.getEndpointInfo().getInterface().getName()",
                "raw_url": "https://github.com/apache/cxf/raw/92ae40b38620bfe45463d07d728f31f3a1dea4fb/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "96673e32f916e5e94aae4787edbe2a722cee2a23",
                "status": "modified"
            }
        ],
        "message": "Fixing NPE caused by JAXRS endpoints\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@763200 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c338c36cf06ecdf7dbfae62ed253e1366b0b645d",
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_9469be2": {
        "bug_id": "cxf_9469be2",
        "commit": "https://github.com/apache/cxf/commit/9469be2decdf115f4fe6b16e0d1465a62da8dc07",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/9469be2decdf115f4fe6b16e0d1465a62da8dc07/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java?ref=9469be2decdf115f4fe6b16e0d1465a62da8dc07",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "patch": "@@ -176,6 +176,8 @@ public void setTimeoutHandler(TimeoutHandler handler) {\n                 extraCallbacks[i] = callbacks[i].newInstance();\n             }\n             return register(callback.newInstance(), extraCallbacks);    \n+        } catch (NullPointerException e) {\n+            throw e;\n         } catch (Throwable t) {\n             return Collections.emptyMap();\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/9469be2decdf115f4fe6b16e0d1465a62da8dc07/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/AsyncResponseImpl.java",
                "sha": "c21e52823fc756019baec30174feb86a2f266990",
                "status": "modified"
            }
        ],
        "message": "[CXF-6388] Rethrowing NPE from AsyncResponseImpl, patch from Iris Ding applied",
        "parent": "https://github.com/apache/cxf/commit/3913cbf504bb863e48ed5fcff25edc06e25f52c0",
        "repo": "cxf",
        "unit_tests": [
            "AsyncResponseImplTest.java"
        ]
    },
    "cxf_954128c": {
        "bug_id": "cxf_954128c",
        "commit": "https://github.com/apache/cxf/commit/954128c80854bc166fd30cace425e1270265c7e4",
        "file": [
            {
                "additions": 12,
                "blob_url": "https://github.com/apache/cxf/blob/954128c80854bc166fd30cace425e1270265c7e4/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java?ref=954128c80854bc166fd30cace425e1270265c7e4",
                "deletions": 6,
                "filename": "common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "patch": "@@ -743,15 +743,19 @@ public static Document read(XMLStreamReader reader) throws XMLStreamException {\n     }\n     public static Document read(XMLStreamReader reader, boolean recordLoc) throws XMLStreamException {\n         Document doc = DOMUtils.createDocument();\n-        doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        if (reader.getLocation().getSystemId() != null) {\n+            doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        }\n         readDocElements(doc, doc, reader, true, recordLoc);\n         return doc;\n     }\n     \n     public static Document read(DocumentBuilder builder, XMLStreamReader reader, boolean repairing) \n         throws XMLStreamException {\n         Document doc = builder.newDocument();\n-        doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        if (reader.getLocation().getSystemId() != null) {\n+            doc.setDocumentURI(new String(reader.getLocation().getSystemId()));\n+        }\n         readDocElements(doc, reader, repairing);\n         return doc;\n     }\n@@ -944,16 +948,18 @@ private static void declare(Element node, String uri, String prefix) {\n         node.setAttributeNodeNS(attr);\n     }\n     public static XMLStreamReader createXMLStreamReader(InputSource src) {\n+        String sysId = src.getSystemId() == null ? null : new String(src.getSystemId());\n+        String pubId = src.getPublicId() == null ? null : new String(src.getPublicId());\n         if (src.getByteStream() != null) {\n             if (src.getEncoding() == null) {\n-                StreamSource ss = new StreamSource(src.getByteStream(), src.getSystemId());\n-                ss.setPublicId(src.getPublicId());\n+                StreamSource ss = new StreamSource(src.getByteStream(), sysId);\n+                ss.setPublicId(pubId);\n                 return createXMLStreamReader(ss);\n             }\n             return createXMLStreamReader(src.getByteStream(), src.getEncoding());\n         } else if (src.getCharacterStream() != null) {\n-            StreamSource ss = new StreamSource(src.getCharacterStream(), src.getSystemId());\n-            ss.setPublicId(src.getPublicId());\n+            StreamSource ss = new StreamSource(src.getCharacterStream(), sysId);\n+            ss.setPublicId(pubId);\n             return createXMLStreamReader(ss);\n         }\n         throw new IllegalArgumentException(\"InputSource must have a ByteStream or CharacterStream\");",
                "raw_url": "https://github.com/apache/cxf/raw/954128c80854bc166fd30cace425e1270265c7e4/common/common/src/main/java/org/apache/cxf/staxutils/StaxUtils.java",
                "sha": "71ad706c816a8360224c15f22bd56f26a7f8911a",
                "status": "modified"
            },
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/954128c80854bc166fd30cace425e1270265c7e4/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java?ref=954128c80854bc166fd30cace425e1270265c7e4",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "patch": "@@ -222,7 +222,9 @@ private Definition loadDefinition(String url) throws WSDLException {\n         Document doc;\n         try {\n             doc = StaxUtils.read(StaxUtils.createXMLStreamReader(src), true);\n-            doc.setDocumentURI(new String(src.getSystemId()));\n+            if (src.getSystemId() != null) {\n+                doc.setDocumentURI(new String(src.getSystemId()));\n+            }\n         } catch (Exception e) {\n             throw new WSDLException(WSDLException.PARSER_ERROR, e.getMessage(), e);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/954128c80854bc166fd30cace425e1270265c7e4/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLManagerImpl.java",
                "sha": "9e548333b6cf2419e59f46a54075fe3b638594a7",
                "status": "modified"
            }
        ],
        "message": "Add some NPE checks\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@835615 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/7ce6c7559e346fb03d83e2a704d0e3e01d5313a5",
        "repo": "cxf",
        "unit_tests": [
            "WSDLManagerImplTest.java"
        ]
    },
    "cxf_95d6cfc": {
        "bug_id": "cxf_95d6cfc",
        "commit": "https://github.com/apache/cxf/commit/95d6cfcd27d16d37497875125a1a0c6aa276fcd5",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/95d6cfcd27d16d37497875125a1a0c6aa276fcd5/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java?ref=95d6cfcd27d16d37497875125a1a0c6aa276fcd5",
                "deletions": 7,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "patch": "@@ -214,13 +214,14 @@ public void createSequenceResponse(CreateSequenceResponseType createResponse,\n         Identifier offeredId = reliableEndpoint.getProxy().getOfferedIdentifier();\n         if (null != offeredId) {\n             AcceptType accept = createResponse.getAccept();\n-            assert null != accept;\n-            Destination dest = reliableEndpoint.getDestination();\n-            String address = accept.getAcksTo().getAddress().getValue();\n-            if (!RMUtils.getAddressingConstants().getNoneURI().equals(address)) {\n-                DestinationSequence ds =  new DestinationSequence(offeredId, accept.getAcksTo(), dest,\n-                    protocol);\n-                dest.addSequence(ds);\n+            if (accept != null) {\n+                Destination dest = reliableEndpoint.getDestination();\n+                String address = accept.getAcksTo().getAddress().getValue();\n+                if (!RMUtils.getAddressingConstants().getNoneURI().equals(address)) {\n+                    DestinationSequence ds =  new DestinationSequence(offeredId, accept.getAcksTo(), dest,\n+                                                                      protocol);\n+                    dest.addSequence(ds);\n+                }\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/95d6cfcd27d16d37497875125a1a0c6aa276fcd5/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/Servant.java",
                "sha": "96d86b3795cf18121af4ceaf76456aaa9959cb2e",
                "status": "modified"
            }
        ],
        "message": "[CXF-5725] Fix NPE when no Accept for Offer",
        "parent": "https://github.com/apache/cxf/commit/021646df45517d2c06680e20da050f8ebe424a26",
        "repo": "cxf",
        "unit_tests": [
            "ServantTest.java"
        ]
    },
    "cxf_96133bc": {
        "bug_id": "cxf_96133bc",
        "commit": "https://github.com/apache/cxf/commit/96133bca4298b740f8fa46830854f7a5329fe8f3",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/96133bca4298b740f8fa46830854f7a5329fe8f3/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java?ref=96133bca4298b740f8fa46830854f7a5329fe8f3",
                "deletions": 3,
                "filename": "rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "patch": "@@ -245,7 +245,7 @@ public static JsonWebKeys loadPublicJwkSet(Message m, Properties props) {\n     public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPasswordProvider cb) {\n         String key = (String)props.get(JoseConstants.RSSEC_KEY_STORE_FILE);\n         JsonWebKeys jwkSet = null;\n-        if (key != null) {\n+        if (key != null && m != null) {\n             Object jwkSetProp = m.getExchange().get(key);\n             if (jwkSetProp != null && !(jwkSetProp instanceof JsonWebKeys)) {\n                 throw new JwkException(\"Unexpected key store class: \" + jwkSetProp.getClass().getName());\n@@ -254,8 +254,8 @@ public static JsonWebKeys loadJwkSet(Message m, Properties props, PrivateKeyPass\n             }\n         }\n         if (jwkSet == null) {\n-            jwkSet = loadJwkSet(props, m.getExchange().getBus(), cb);\n-            if (key != null) {\n+            jwkSet = loadJwkSet(props, m != null ? m.getExchange().getBus() : null, cb);\n+            if (key != null && m != null) {\n                 m.getExchange().put(key, jwkSet);\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/96133bca4298b740f8fa46830854f7a5329fe8f3/rt/rs/security/jose-parent/jose/src/main/java/org/apache/cxf/rs/security/jose/jwk/JwkUtils.java",
                "sha": "6b7132589625c5e8c4a4c6660641a2da0e97f94b",
                "status": "modified"
            }
        ],
        "message": "[CXF-7721] Adding few NPE guards",
        "parent": "https://github.com/apache/cxf/commit/278d9185150d743ff4b411d070b023e8758d372e",
        "repo": "cxf",
        "unit_tests": [
            "JwkUtilsTest.java"
        ]
    },
    "cxf_9726201": {
        "bug_id": "cxf_9726201",
        "commit": "https://github.com/apache/cxf/commit/9726201a36691afaf02dcaf19974b13b1f9efbbb",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties?ref=9726201a36691afaf02dcaf19974b13b1f9efbbb",
                "deletions": 0,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "patch": "@@ -30,4 +30,5 @@ FAIL_TO_CREATE_WSDL_DEFINITION = Fail to create wsdl definition from : {0}\\r\\nCa\n MISSING_DESTINATION_FACTORY = Cannot find the destination factory, check the port //wsdl:port[@name=''{0}'']\n MISSING_SERVICE= No definition of service {0} in the WSDL.\n WSDL4J_BAD_ELEMENT_PART= Part {0} defined as element {1} which is not in the schema.\n+PART_NO_NAME_NO_TYPE= Part {0} defined with no element and no type.\n NO_MESSAGE=No {0} message was found for operation {1} and input named {2}.  Check the wsdl for errors.",
                "raw_url": "https://github.com/apache/cxf/raw/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/Messages.properties",
                "sha": "cafcd1f18ddd89dd40733d5ade2ace118b3ac6df",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java?ref=9726201a36691afaf02dcaf19974b13b1f9efbbb",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "patch": "@@ -797,7 +797,7 @@ private void buildMessage(AbstractMessageContainer minfo, Message msg) {\n                 pi.setTypeQName(part.getTypeName());\n                 pi.setElement(false);\n                 pi.setXmlSchema(schemas.getTypeByQName(part.getTypeName()));\n-            } else {\n+            } else if (part.getElementName() != null) {\n                 pi.setElementQName(part.getElementName());\n                 XmlSchemaElement schemaElement = schemas.getElementByQName(part.getElementName());\n                 if (null == schemaElement) {\n@@ -810,6 +810,13 @@ private void buildMessage(AbstractMessageContainer minfo, Message msg) {\n                 }\n                 pi.setElement(true);\n                 pi.setXmlSchema(schemaElement);\n+            } else {\n+                org.apache.cxf.common.i18n.Message errorMessage = \n+                    new org.apache.cxf.common.i18n.Message(\"PART_NO_NAME_NO_TYPE\",\n+                                                           LOG,\n+                                                           part.getName());\n+                throw new WSDLRuntimeException(errorMessage);\n+                \n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/9726201a36691afaf02dcaf19974b13b1f9efbbb/rt/core/src/main/java/org/apache/cxf/wsdl11/WSDLServiceBuilder.java",
                "sha": "8fde3cd1812d6aa1249e61830a341fe14b77f5e5",
                "status": "modified"
            }
        ],
        "message": "Change NPE to Runtime error for part with no content. CXF-2438.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@816778 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/b105ccd46daf966ef00a76cf9911ad72c7718646",
        "repo": "cxf",
        "unit_tests": [
            "WSDLServiceBuilderTest.java"
        ]
    },
    "cxf_98db1cd": {
        "bug_id": "cxf_98db1cd",
        "commit": "https://github.com/apache/cxf/commit/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java?ref=98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee",
                "deletions": 1,
                "filename": "rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "patch": "@@ -377,7 +377,7 @@ public int copyFrom(InputStream in) throws IOException {\n         \n         @Override\n         public void close() throws IOException {\n-            if (!chunking) {\n+            if (!chunking && wrappedStream != null) {\n                 CachedOutputStream out = (CachedOutputStream)wrappedStream;\n                 this.basicEntity.setContentLength(out.size());\n                 wrappedStream = null;",
                "raw_url": "https://github.com/apache/cxf/raw/98db1cd54046d06fd4ae7ea66d96d24c9d7a3dee/rt/transports/http-hc/src/main/java/org/apache/cxf/transport/http/asyncclient/AsyncHTTPConduit.java",
                "sha": "e555c1ac94983a111128b8756ab4588514780c6d",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on GET requests\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1518297 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e560cfeee66f238d232e7d7073b6adea991c66fc",
        "repo": "cxf",
        "unit_tests": [
            "AsyncHTTPConduitTest.java"
        ]
    },
    "cxf_9b52e41": {
        "bug_id": "cxf_9b52e41",
        "commit": "https://github.com/apache/cxf/commit/9b52e410b42e45ad240f71080dbd671e18843b38",
        "file": [
            {
                "additions": 42,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "changes": 59,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 17,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "patch": "@@ -30,70 +30,95 @@\n import javax.ws.rs.ext.Providers;\n \n import org.apache.cxf.jaxrs.ext.MessageContext;\n+import org.apache.cxf.jaxrs.ext.MessageContextImpl;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n \n public class ThreadLocalMessageContext extends AbstractThreadLocalProxy<MessageContext> \n     implements MessageContext {\n \n     public Object get(Object key) {\n-        return get() != null ? get().get(key) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.get(key) : null;\n     }\n     \n     public <T> T getContext(Class<T> contextClass) {\n-        return get() != null ? get().getContext(contextClass) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContext(contextClass) : null;\n     }\n \n     public HttpHeaders getHttpHeaders() {\n-        return get() != null ? get().getHttpHeaders() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpHeaders() : null;\n     }\n \n     public HttpServletRequest getHttpServletRequest() {\n-        return get() != null ? get().getHttpServletRequest() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpServletRequest() : null;\n     }\n \n     public HttpServletResponse getHttpServletResponse() {\n-        return get() != null ? get().getHttpServletResponse() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getHttpServletResponse() : null;\n     }\n \n     public Providers getProviders() {\n-        return get() != null ? get().getProviders() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getProviders() : null;\n     }\n \n     public SecurityContext getSecurityContext() {\n-        return get() != null ? get().getSecurityContext() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getSecurityContext() : null;\n     }\n \n     public ServletConfig getServletConfig() {\n-        return get() != null ? get().getServletConfig() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getServletConfig() : null;\n     }\n \n     public ServletContext getServletContext() {\n-        return get() != null ? get().getServletContext() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getServletContext() : null;\n     }\n \n     public UriInfo getUriInfo() {\n-        return get() != null ? get().getUriInfo() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getUriInfo() : null;\n     }\n \n     public Request getRequest() {\n-        return get() != null ? get().getRequest() : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getRequest() : null;\n     }\n \n     public void put(Object key, Object value) {\n-        if (get() != null) {\n-            get().put(key, value);\n+        MessageContext mc = getCurrentMessageContext();\n+        if (mc != null) {\n+            mc.put(key, value);\n         }\n     }\n \n     public <T, E> T getResolver(Class<T> resolverClass, Class<E> resolveClazz) {\n-        return get() != null ? get().getResolver(resolverClass, resolveClazz) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getResolver(resolverClass, resolveClazz) : null;\n     }\n \n     public <T> T getContent(Class<T> format) {\n-        return get() != null ? get().getContent(format) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContent(format) : null;\n     }\n \n     public Object getContextualProperty(Object key) {\n-        return get() != null ? get().getContextualProperty(key) : null;\n+        MessageContext mc = getCurrentMessageContext();\n+        return mc != null ? mc.getContextualProperty(key) : null;\n+    }\n+    private MessageContext getCurrentMessageContext() {\n+        MessageContext mc = get();\n+        return mc != null ? mc : getMessageContextImpl();\n+    }\n+    private MessageContext getMessageContextImpl() {\n+        Message m = JAXRSUtils.getCurrentMessage();\n+        return m != null ? new MessageContextImpl(m) : null;\n     }\n-\n }",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalMessageContext.java",
                "sha": "bd926fd3df94a08b47740040d3a2dad1c31628ff",
                "status": "modified"
            },
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "changes": 24,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 4,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "patch": "@@ -29,29 +29,45 @@\n import javax.ws.rs.ext.MessageBodyWriter;\n import javax.ws.rs.ext.Providers;\n \n+import org.apache.cxf.jaxrs.impl.ProvidersImpl;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.message.Message;\n+\n public class ThreadLocalProviders extends AbstractThreadLocalProxy<Providers>\n        implements Providers {\n \n     public <T> MessageBodyReader<T> getMessageBodyReader(Class<T> type, \n                                                          Type genericType, \n                                                          Annotation[] annotations,\n                                                          MediaType mediaType) {\n-        return get().getMessageBodyReader(type, genericType, annotations, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getMessageBodyReader(type, genericType, annotations, mediaType) : null;\n     }\n \n     public <T> MessageBodyWriter<T> getMessageBodyWriter(Class<T> type, \n                                                          Type genericType, \n                                                          Annotation[] annotations,\n                                                          MediaType mediaType) {\n-        return get().getMessageBodyWriter(type, genericType, annotations, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getMessageBodyWriter(type, genericType, annotations, mediaType) : null;\n     }\n \n     public <T> ContextResolver<T> getContextResolver(Class<T> contextType, MediaType mediaType) {\n-        return get().getContextResolver(contextType, mediaType);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getContextResolver(contextType, mediaType) : null;\n     }\n \n     public <T extends Throwable> ExceptionMapper<T> getExceptionMapper(Class<T> type) {\n-        return get().getExceptionMapper(type);\n+        Providers p = getCurrentProviders();\n+        return p != null ? p.getExceptionMapper(type) : null;\n     }\n \n+    private Providers getCurrentProviders() {\n+        Providers p = get();\n+        return p != null ? p : getProvidersImpl();\n+    }\n+    private Providers getProvidersImpl() {\n+        Message m = JAXRSUtils.getCurrentMessage();\n+        return m != null ? new ProvidersImpl(JAXRSUtils.getContextMessage(m)) : null;\n+    }\n }",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/tl/ThreadLocalProviders.java",
                "sha": "bf195852795fa175a1405331b726d22075011b7a",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java?ref=9b52e410b42e45ad240f71080dbd671e18843b38",
                "deletions": 2,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "patch": "@@ -1062,12 +1062,18 @@ public static Object createBeanParamValue(Message m, Class<?> clazz, OperationRe\n         return instance;\n     }\n     \n-    public static <T> T createContextValue(Message m, Type genericType, Class<T> clazz) {\n- \n+    public static Message getContextMessage(Message m) {\n+        \n         Message contextMessage = m.getExchange() != null ? m.getExchange().getInMessage() : m;\n         if (contextMessage == null && !PropertyUtils.isTrue(m.get(Message.INBOUND_MESSAGE))) {\n             contextMessage = m;\n         }\n+        return contextMessage;\n+    }\n+    \n+    public static <T> T createContextValue(Message m, Type genericType, Class<T> clazz) {\n+ \n+        Message contextMessage = getContextMessage(m);\n         Object o = null;\n         if (UriInfo.class.isAssignableFrom(clazz)) {\n             o = createUriInfo(contextMessage);",
                "raw_url": "https://github.com/apache/cxf/raw/9b52e410b42e45ad240f71080dbd671e18843b38/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/utils/JAXRSUtils.java",
                "sha": "d4d64cd079de9b482f385c2b3fbf0be8e048e411",
                "status": "modified"
            }
        ],
        "message": "[CXF-6593] Protecting against NPE if TL contexts are refreshed",
        "parent": "https://github.com/apache/cxf/commit/c9ec28df42e815b0771964fdae96b7ecb2e2281b",
        "repo": "cxf",
        "unit_tests": [
            "JAXRSUtilsTest.java"
        ]
    },
    "cxf_a49acbd": {
        "bug_id": "cxf_a49acbd",
        "commit": "https://github.com/apache/cxf/commit/a49acbdff65435b2addc0e01fd13040c229516ee",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/a49acbdff65435b2addc0e01fd13040c229516ee/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java?ref=a49acbdff65435b2addc0e01fd13040c229516ee",
                "deletions": 2,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "patch": "@@ -401,15 +401,15 @@ String getCorrelationID() {\n     void scheduleAcknowledgement(long acknowledgementInterval) {  \n         AcksPolicyType ap = destination.getManager().getDestinationPolicy().getAcksPolicy();\n  \n-        if (acknowledgementInterval > 0 && getMonitor().getMPM() >= ap.getIntraMessageThreshold()) {\n+        if (acknowledgementInterval > 0 && getMonitor().getMPM() >= (ap == null ? 10 : ap.getIntraMessageThreshold())) {\n             LOG.fine(\"Schedule deferred acknowledgment\");\n             scheduleDeferredAcknowledgement(acknowledgementInterval);\n         } else {\n             LOG.fine(\"Schedule immediate acknowledgment\");\n             scheduleImmediateAcknowledgement();\n             \n             destination.getManager().getTimer().schedule(\n-                new ImmediateFallbackAcknowledgment(), ap.getImmediaAcksTimeout());\n+                new ImmediateFallbackAcknowledgment(), ap == null ? 1000L : ap.getImmediaAcksTimeout());\n            \n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/a49acbdff65435b2addc0e01fd13040c229516ee/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/DestinationSequence.java",
                "sha": "103b380c8409749484aad7587aeed49eb8d77c31",
                "status": "modified"
            }
        ],
        "message": "[CXF-4964] NPE is thrown when WS-RM's destination has no ackPolicy configured\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1468436 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/4318942cb10e3454de5d084646a9ee199bad54e6",
        "repo": "cxf",
        "unit_tests": [
            "DestinationSequenceTest.java"
        ]
    },
    "cxf_a7b9dca": {
        "bug_id": "cxf_a7b9dca",
        "commit": "https://github.com/apache/cxf/commit/a7b9dca144ca76f4ad62a05310cc298447aa2572",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/a7b9dca144ca76f4ad62a05310cc298447aa2572/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java?ref=a7b9dca144ca76f4ad62a05310cc298447aa2572",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "patch": "@@ -186,7 +186,9 @@ protected void saveRefreshToken(RefreshToken refreshToken) {\n     @Override\n     protected void linkRefreshTokenToAccessToken(RefreshToken rt, ServerAccessToken at) {\n         super.linkRefreshTokenToAccessToken(rt,  at);\n-        accessTokenCache.replace(at.getTokenKey(), at);\n+        if (!isStoreJwtTokenKeyOnly()) {\n+            accessTokenCache.replace(at.getTokenKey(), at);\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cxf/raw/a7b9dca144ca76f4ad62a05310cc298447aa2572/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "sha": "a583e70a5bf5e0ede768c1874038c856bb51bd8f",
                "status": "modified"
            }
        ],
        "message": "CXF-7913 - Fixing another NPE with JCache",
        "parent": "https://github.com/apache/cxf/commit/ad27755270c649ab64f2cec0d3768772ef68fc1f",
        "repo": "cxf",
        "unit_tests": [
            "JCacheOAuthDataProviderTest.java"
        ]
    },
    "cxf_aa6c635": {
        "bug_id": "cxf_aa6c635",
        "commit": "https://github.com/apache/cxf/commit/aa6c635cffccc826f29f7c4a883ac7cb72389109",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/aa6c635cffccc826f29f7c4a883ac7cb72389109/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=aa6c635cffccc826f29f7c4a883ac7cb72389109",
                "deletions": 0,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -302,6 +302,9 @@ private static void writeArrayObject(Marshaller marshaller,\n                                          Object mObj) throws Fault, JAXBException {\n         // Have to handle this ourselves.... which really\n         // sucks.... but what can we do?\n+        if (mObj == null) {\n+            return;\n+        }\n         Object objArray;\n         Class cls = null;\n         if (mObj instanceof List) {",
                "raw_url": "https://github.com/apache/cxf/raw/aa6c635cffccc826f29f7c4a883ac7cb72389109/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "ac34d369e617851e7a9681dbf9da285527c6be73",
                "status": "modified"
            }
        ],
        "message": "[CXF-2329] Add NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@790637 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/619ab527acc1eb240007e287718d3edf6450b9d9",
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_ab7b0a3": {
        "bug_id": "cxf_ab7b0a3",
        "commit": "https://github.com/apache/cxf/commit/ab7b0a3b12090969d543126132bfbbe6a7d75eaa",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ab7b0a3b12090969d543126132bfbbe6a7d75eaa/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java?ref=ab7b0a3b12090969d543126132bfbbe6a7d75eaa",
                "deletions": 1,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "patch": "@@ -873,7 +873,7 @@ private static XMLStreamReader findExtraNamespaces(XMLStreamReader source) {\n                 String ns[] = (String[])f.get(c);\n                 for (int x = 0; x < ns.length; x += 2) {\n                     if (ns[x] == null) {\n-                        nsMap.put(null, ns[x + 1]);\n+                        nsMap.put(\"\", ns[x + 1]);\n                     } else {\n                         nsMap.put(ns[x], ns[x + 1]);\n                     }",
                "raw_url": "https://github.com/apache/cxf/raw/ab7b0a3b12090969d543126132bfbbe6a7d75eaa/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/JAXBEncoderDecoder.java",
                "sha": "ee39b2ed87926f2fa349fbe3e83ace63763f4b51",
                "status": "modified"
            }
        ],
        "message": "Once again, fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1301201 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/a6d28c13d01c1690e6268784222acdd6b3b3268f",
        "repo": "cxf",
        "unit_tests": [
            "JAXBEncoderDecoderTest.java"
        ]
    },
    "cxf_ad336ad": {
        "bug_id": "cxf_ad336ad",
        "commit": "https://github.com/apache/cxf/commit/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java?ref=ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09",
                "deletions": 4,
                "filename": "tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "patch": "@@ -362,10 +362,12 @@ public String getWrappedElementType(QName wrapperElement, QName item) {\n         Mapping mapping = rawJaxbModelGenCode.get(wrapperElement);\n         if (mapping != null) {\n             List<? extends Property> propList = mapping.getWrapperStyleDrilldown();\n-            for (Property pro : propList) {\n-                if (pro.elementName().getNamespaceURI().equals(item.getNamespaceURI())\n-                    && pro.elementName().getLocalPart().equals(item.getLocalPart())) {\n-                    return pro.type().fullName();\n+            if (propList != null) {\n+                for (Property pro : propList) {\n+                    if (pro.elementName().getNamespaceURI().equals(item.getNamespaceURI())\n+                        && pro.elementName().getLocalPart().equals(item.getLocalPart())) {\n+                        return pro.type().fullName();\n+                    }\n                 }\n             }\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/ad336ad8db4d7c842a6ce8f9ac3253c269c9ef09/tools/wsdlto/databinding/jaxb/src/main/java/org/apache/cxf/tools/wsdlto/databinding/jaxb/JAXBDataBinding.java",
                "sha": "1f785e2d3e55c37cb38780265aa0ec9dcfbef3ad",
                "status": "modified"
            }
        ],
        "message": "Add a guard NPE check\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@657922 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/fc5e74356d476b7fc4ff86507544a6aa477a25bb",
        "repo": "cxf",
        "unit_tests": [
            "JAXBDataBindingTest.java"
        ]
    },
    "cxf_affd57f": {
        "bug_id": "cxf_affd57f",
        "commit": "https://github.com/apache/cxf/commit/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca",
        "file": [
            {
                "additions": 31,
                "blob_url": "https://github.com/apache/cxf/blob/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "changes": 61,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java?ref=affd57f78aeee0ac0b065ced1f549e9a94f9c5ca",
                "deletions": 30,
                "filename": "rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "patch": "@@ -53,40 +53,41 @@ public Object read(MessagePartInfo part, XMLStreamReader input) {\n     }\n \n     public Object read(QName name, XMLStreamReader input, Class type) {\n-        if (SAXSource.class.isAssignableFrom(type)) {\n-            try {\n-                CachedOutputStream out = new CachedOutputStream();\n+        if (type != null) {\n+            if (SAXSource.class.isAssignableFrom(type)) {\n                 try {\n-                    XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n-                    StaxUtils.copy(input, xsw);\n-                    xsw.close();\n-                    return new SAXSource(new InputSource(out.getInputStream()));\n-                } finally {\n-                    out.close();\n+                    CachedOutputStream out = new CachedOutputStream();\n+                    try {\n+                        XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n+                        StaxUtils.copy(input, xsw);\n+                        xsw.close();\n+                        return new SAXSource(new InputSource(out.getInputStream()));\n+                    } finally {\n+                        out.close();\n+                    }\n+                } catch (IOException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n+                } catch (XMLStreamException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n                 }\n-            } catch (IOException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            } catch (XMLStreamException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            }\n-        } else if (StreamSource.class.isAssignableFrom(type)) {\n-            try {\n-                CachedOutputStream out = new CachedOutputStream();\n+            } else if (StreamSource.class.isAssignableFrom(type)) {\n                 try {\n-                    XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n-                    StaxUtils.copy(input, xsw);\n-                    xsw.close();\n-                    return new StreamSource(out.getInputStream());\n-                } finally {\n-                    out.close();\n+                    CachedOutputStream out = new CachedOutputStream();\n+                    try {\n+                        XMLStreamWriter xsw = StaxUtils.createXMLStreamWriter(out);\n+                        StaxUtils.copy(input, xsw);\n+                        xsw.close();\n+                        return new StreamSource(out.getInputStream());\n+                    } finally {\n+                        out.close();\n+                    }\n+                } catch (IOException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n+                } catch (XMLStreamException e) {\n+                    throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n                 }\n-            } catch (IOException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            } catch (XMLStreamException e) {\n-                throw new Fault(new Message(\"COULD_NOT_READ_XML_STREAM\", LOG), e);\n-            }\n-        } \n-        \n+            } \n+        }\n         return read(input);\n     }\n ",
                "raw_url": "https://github.com/apache/cxf/raw/affd57f78aeee0ac0b065ced1f549e9a94f9c5ca/rt/core/src/main/java/org/apache/cxf/databinding/source/XMLStreamDataReader.java",
                "sha": "4832fcb1edd5961135b5dde44b66f750cd321ece",
                "status": "modified"
            }
        ],
        "message": "Don't NPE if type is null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@725839 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/782216612d60c2f6ffe29c92f103dbda46453444",
        "repo": "cxf",
        "unit_tests": [
            "XMLStreamDataReaderTest.java"
        ]
    },
    "cxf_b4f34d0": {
        "bug_id": "cxf_b4f34d0",
        "commit": "https://github.com/apache/cxf/commit/b4f34d03b2a244f9b97918d6ca33f532079e8dcb",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/b4f34d03b2a244f9b97918d6ca33f532079e8dcb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=b4f34d03b2a244f9b97918d6ca33f532079e8dcb",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1473,7 +1473,12 @@ protected boolean redirectRetransmit() throws IOException {\n         protected boolean authorizationRetransmit() throws IOException {\n             Message m = new MessageImpl();\n             updateResponseHeaders(m);\n-            HttpAuthHeader authHeader = new HttpAuthHeader(Headers.getSetProtocolHeaders(m).get(\"WWW-Authenticate\"));\n+            List<String> authHeaderValues = Headers.getSetProtocolHeaders(m).get(\"WWW-Authenticate\");\n+            if (authHeaderValues == null) {\n+                LOG.warning(\"WWW-Authenticate response header is not set\");\n+                return false;\n+            }\n+            HttpAuthHeader authHeader = new HttpAuthHeader(authHeaderValues);\n             URI currentURI = url;\n             String realm = authHeader.getRealm();\n             detectAuthorizationLoop(getConduitName(), outMessage, currentURI, realm);",
                "raw_url": "https://github.com/apache/cxf/raw/b4f34d03b2a244f9b97918d6ca33f532079e8dcb/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "c5f6fddd49a5d4a1b313d3d3bd594bad4034a3ef",
                "status": "modified"
            }
        ],
        "message": "[CXF-6408] Preventing NPE",
        "parent": "https://github.com/apache/cxf/commit/50b4ccf167d73fc547a0567f49cdffe41e68cb9a",
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_b875cec": {
        "bug_id": "cxf_b875cec",
        "commit": "https://github.com/apache/cxf/commit/b875cecedb449c764de9c6669dd6d7d80e146f23",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/b875cecedb449c764de9c6669dd6d7d80e146f23/core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/helpers/IOUtils.java?ref=b875cecedb449c764de9c6669dd6d7d80e146f23",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "patch": "@@ -142,6 +142,9 @@ public static String newStringFromBytes(byte[] bytes, int start, int length) {\n \n     public static int copy(final InputStream input, final OutputStream output)\n         throws IOException {\n+        if (input == null) {\n+            return 0;\n+        }\n         if (output instanceof CopyingOutputStream) {\n             return ((CopyingOutputStream)output).copyFrom(input);\n         }",
                "raw_url": "https://github.com/apache/cxf/raw/b875cecedb449c764de9c6669dd6d7d80e146f23/core/src/main/java/org/apache/cxf/helpers/IOUtils.java",
                "sha": "5c4d18969505269119ad4080430a1b2440df71af",
                "status": "modified"
            }
        ],
        "message": "[CXF-6463] Preventing NPE if InputStream is null",
        "parent": "https://github.com/apache/cxf/commit/b97598447f52f1ae627ae2b06c98d2dd99abf539",
        "repo": "cxf",
        "unit_tests": [
            "IOUtilsTest.java"
        ]
    },
    "cxf_bb1e056": {
        "bug_id": "cxf_bb1e056",
        "commit": "https://github.com/apache/cxf/commit/bb1e05690f88ea3a4781bd7939c68c8c0495517c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/bb1e05690f88ea3a4781bd7939c68c8c0495517c/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java?ref=bb1e05690f88ea3a4781bd7939c68c8c0495517c",
                "deletions": 1,
                "filename": "rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "patch": "@@ -48,7 +48,7 @@\n /**\n  * An abstract class containing some functionality to validate a username + password received\n  * via HTTP Basic Authentication via a WSS4J Validator (and hence JAAS, the STS, etc.). It can\n- * be subclasses and used as a CXF interceptor or else via a JAX-RS ContainerRequestFilter.\n+ * be subclassed and used as a CXF interceptor or else via a JAX-RS ContainerRequestFilter.\n  */\n public abstract class WSS4JBasicAuthValidator {\n ",
                "raw_url": "https://github.com/apache/cxf/raw/bb1e05690f88ea3a4781bd7939c68c8c0495517c/rt/security-saml/src/main/java/org/apache/cxf/rt/security/saml/interceptor/WSS4JBasicAuthValidator.java",
                "sha": "00a6227c5f535f4150ac94307689d9310310f5a7",
                "status": "modified"
            },
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/bb1e05690f88ea3a4781bd7939c68c8c0495517c/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java?ref=bb1e05690f88ea3a4781bd7939c68c8c0495517c",
                "deletions": 3,
                "filename": "services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "patch": "@@ -245,9 +245,12 @@ private String signToken(\n                 }\n             }\n             // Get the password\n-            WSPasswordCallback[] cb = {new WSPasswordCallback(alias, WSPasswordCallback.SIGNATURE)};\n-            callbackHandler.handle(cb);\n-            String password = cb[0].getPassword();\n+            String password = null;\n+            if (callbackHandler != null) {\n+                WSPasswordCallback[] cb = {new WSPasswordCallback(alias, WSPasswordCallback.SIGNATURE)};\n+                callbackHandler.handle(cb);\n+                password = cb[0].getPassword();\n+            }\n \n             Properties signingProperties = new Properties();\n ",
                "raw_url": "https://github.com/apache/cxf/raw/bb1e05690f88ea3a4781bd7939c68c8c0495517c/services/sts/sts-core/src/main/java/org/apache/cxf/sts/token/provider/jwt/JWTTokenProvider.java",
                "sha": "9119a0ce79b6d28c191c3ba975b5d8aad5953ee5",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/3fc5e29018ca32c14f82ced1f07678c4bf35bfea",
        "repo": "cxf",
        "unit_tests": [
            "JWTTokenProviderTest.java"
        ]
    },
    "cxf_bb42285": {
        "bug_id": "cxf_bb42285",
        "commit": "https://github.com/apache/cxf/commit/bb42285dce2af51edf4f90985a50b6eed5a77015",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/bb42285dce2af51edf4f90985a50b6eed5a77015/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java?ref=bb42285dce2af51edf4f90985a50b6eed5a77015",
                "deletions": 2,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "patch": "@@ -826,8 +826,9 @@ private void restoreExchange(SoapMessage message, AddressingProperties maps) {\n                                           \"org.apache.cxf.ws.addressing.MAPAggregator.addressingDisabled\",\n                                           false)) {\n                     //see if it can directly be correlated with the out message:\n-                    AddressingProperties outp = ContextUtils.retrieveMAPs(message.getExchange().getOutMessage(),\n-                                                                          false, true, false);\n+                    Message outmsg = message.getExchange().getOutMessage();\n+                    AddressingProperties outp = outmsg != null \n+                        ? ContextUtils.retrieveMAPs(outmsg, false, true, false) : null;\n                     if (outp == null \n                         || !outp.getMessageID().getValue().equals(maps.getRelatesTo().getValue())) {\n                         LOG.log(Level.WARNING, \"CORRELATION_FAILURE_MSG\");",
                "raw_url": "https://github.com/apache/cxf/raw/bb42285dce2af51edf4f90985a50b6eed5a77015/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/soap/MAPCodec.java",
                "sha": "fb229afa58515c8e51321b056eff94816f2f3d68",
                "status": "modified"
            }
        ],
        "message": "[CXF-5057] NPE at the decoupled endpoint when receving a response messge with unknown identifier\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1489942 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/90c163306e79d9f2d38c094ac6b8996fc7c62bcc",
        "repo": "cxf",
        "unit_tests": [
            "MAPCodecTest.java"
        ]
    },
    "cxf_bbcbac0": {
        "bug_id": "cxf_bbcbac0",
        "commit": "https://github.com/apache/cxf/commit/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/cxf/blob/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java?ref=bbcbac00dd7a1bf5f0c68f9a77dae1497d969167",
                "deletions": 0,
                "filename": "rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "patch": "@@ -116,6 +116,10 @@ public void handleMessage(SoapMessage message) throws Fault {\n             // return\n         }\n         \n+        if (message.getContent(SOAPMessage.class) == null) {\n+            throw new SoapFault(\"Error obtaining SOAP document\", Fault.FAULT_CODE_CLIENT);\n+        }\n+        \n         Element documentElement = null;\n         try {\n             SOAPMessage saajDoc = message.getContent(SOAPMessage.class);",
                "raw_url": "https://github.com/apache/cxf/raw/bbcbac00dd7a1bf5f0c68f9a77dae1497d969167/rt/ws/security/src/main/java/org/apache/cxf/ws/security/wss4j/CryptoCoverageChecker.java",
                "sha": "b5a0d972ea88cfadaca4c390a70ca2dfeacc5e9a",
                "status": "modified"
            }
        ],
        "message": "NPE fix",
        "parent": "https://github.com/apache/cxf/commit/4c9cc32f7bba136b3970c91f15a7f24c94c94c89",
        "repo": "cxf",
        "unit_tests": [
            "CryptoCoverageCheckerTest.java"
        ]
    },
    "cxf_c32136c": {
        "bug_id": "cxf_c32136c",
        "commit": "https://github.com/apache/cxf/commit/c32136c0bb980d152954eca44f6b8f06e84bd913",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/c32136c0bb980d152954eca44f6b8f06e84bd913/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java?ref=c32136c0bb980d152954eca44f6b8f06e84bd913",
                "deletions": 0,
                "filename": "core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "patch": "@@ -52,6 +52,9 @@ public static String getTargetNamespace(Exchange exchange) {\n \n     public static BindingOperationInfo getOperation(Exchange exchange, String opName) {\n         Endpoint ep = exchange.get(Endpoint.class);\n+        if (ep == null) {\n+            return null;\n+        }\n         BindingInfo service = ep.getEndpointInfo().getBinding();\n \n         for (BindingOperationInfo b : service.getOperations()) {",
                "raw_url": "https://github.com/apache/cxf/raw/c32136c0bb980d152954eca44f6b8f06e84bd913/core/src/main/java/org/apache/cxf/service/model/ServiceModelUtil.java",
                "sha": "d3fe66e92999c1d6c122cb5731f8c1ff167cb4ad",
                "status": "modified"
            }
        ],
        "message": "added npe guard",
        "parent": "https://github.com/apache/cxf/commit/2f0b3e38212674883d610cfcfbd76b901bd3d997",
        "repo": "cxf",
        "unit_tests": [
            "ServiceModelUtilTest.java"
        ]
    },
    "cxf_c6ec599": {
        "bug_id": "cxf_c6ec599",
        "commit": "https://github.com/apache/cxf/commit/c6ec599873a67cccae0a75270900c1cbec2cd796",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/c6ec599873a67cccae0a75270900c1cbec2cd796/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java?ref=c6ec599873a67cccae0a75270900c1cbec2cd796",
                "deletions": 1,
                "filename": "rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "patch": "@@ -172,7 +172,7 @@ private void validateIssuer(org.opensaml.saml.saml2.core.Issuer issuer) throws W\n         }\n \n         // Issuer value must match (be contained in) Issuer IDP\n-        if (enforceKnownIssuer && !issuerIDP.startsWith(issuer.getValue())) {\n+        if (enforceKnownIssuer && (issuer.getValue() == null || !issuerIDP.startsWith(issuer.getValue()))) {\n             LOG.fine(\"Issuer value: \" + issuer.getValue() + \" does not match issuer IDP: \"\n                 + issuerIDP);\n             throw new WSSecurityException(WSSecurityException.ErrorCode.FAILURE, \"invalidSAMLsecurity\");",
                "raw_url": "https://github.com/apache/cxf/raw/c6ec599873a67cccae0a75270900c1cbec2cd796/rt/rs/security/sso/saml/src/main/java/org/apache/cxf/rs/security/saml/sso/SAMLSSOResponseValidator.java",
                "sha": "0e70836423db9d3b5a035d2985271b546837d41f",
                "status": "modified"
            }
        ],
        "message": "NPE fix if a SAML Issuer is null",
        "parent": "https://github.com/apache/cxf/commit/b62ea11153d17a5849ef4242842f22ca996ce2a1",
        "repo": "cxf",
        "unit_tests": [
            "SAMLSSOResponseValidatorTest.java"
        ]
    },
    "cxf_c786610": {
        "bug_id": "cxf_c786610",
        "commit": "https://github.com/apache/cxf/commit/c786610bcc187d8a350437c4d01a59fc5d8d0cae",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/c786610bcc187d8a350437c4d01a59fc5d8d0cae/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java?ref=c786610bcc187d8a350437c4d01a59fc5d8d0cae",
                "deletions": 1,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "patch": "@@ -337,7 +337,7 @@ protected void doPublish(String addr) {\n                 if (!endpointInfo.getAddress().contains(addr)) {\n                     endpointInfo.setAddress(addr);\n                 }\n-                if (publishedEndpointUrl != null) {\n+                if (publishedEndpointUrl != null && wsdlLocation != null) {\n                     endpointInfo.setProperty(WSDLGetUtils.PUBLISHED_ENDPOINT_URL, publishedEndpointUrl);\n                     //early update the publishedEndpointUrl so that endpoints in the same app sharing the same wsdl\n                     //do not require all of them to be queried for wsdl before the wsdl is finally fully updated",
                "raw_url": "https://github.com/apache/cxf/raw/c786610bcc187d8a350437c4d01a59fc5d8d0cae/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/EndpointImpl.java",
                "sha": "88e93a1b620188f76f0a39a416222e1d04cac36e",
                "status": "modified"
            }
        ],
        "message": "[CXF-4856] Fix a NPE for java first cases.\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1450880 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/df3da6f92d4159380b0ddf7dbb9e174e00cdd51b",
        "repo": "cxf",
        "unit_tests": [
            "EndpointImplTest.java",
            "TestEndpointImpl.java"
        ]
    },
    "cxf_cdc55cd": {
        "bug_id": "cxf_cdc55cd",
        "commit": "https://github.com/apache/cxf/commit/cdc55cd46959d896a2e0e471a03a4733b1662394",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/cdc55cd46959d896a2e0e471a03a4733b1662394/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java?ref=cdc55cd46959d896a2e0e471a03a4733b1662394",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "patch": "@@ -277,7 +277,8 @@ void logProtocolHeaders(Level level) {\n         for (String header : headers.keySet()) {\n             List<?> headerList = headers.get(header);\n             for (Object value : headerList) {\n-                LOG.log(level, header + \": \" + value.toString());\n+                LOG.log(level, header + \": \" \n+                    + (value == null ? \"<null>\" : value.toString()));\n             }\n         }\n     }",
                "raw_url": "https://github.com/apache/cxf/raw/cdc55cd46959d896a2e0e471a03a4733b1662394/rt/transports/http/src/main/java/org/apache/cxf/transport/http/Headers.java",
                "sha": "6c8dacdf71c66e78bcdd64a6a9ef0b91d4174804",
                "status": "modified"
            }
        ],
        "message": "[CXF-6058] NPE guard in Header logging",
        "parent": "https://github.com/apache/cxf/commit/5cf72fee49149c746897611aa63134db62181778",
        "repo": "cxf",
        "unit_tests": [
            "HeadersTest.java"
        ]
    },
    "cxf_d2be1f3": {
        "bug_id": "cxf_d2be1f3",
        "commit": "https://github.com/apache/cxf/commit/d2be1f3b07e27675f8e53fac1adade3b223e9751",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/d2be1f3b07e27675f8e53fac1adade3b223e9751/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=d2be1f3b07e27675f8e53fac1adade3b223e9751",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -187,7 +187,7 @@ public boolean invoke(HttpServletRequest request, HttpServletResponse res, boole\n                     }\n                 }\n             }\n-            if (d != null) {\n+            if (d != null && d.getMessageObserver() != null) {\n                 Bus bus = d.getBus();\n                 ClassLoaderHolder orig = null;\n                 try {",
                "raw_url": "https://github.com/apache/cxf/raw/d2be1f3b07e27675f8e53fac1adade3b223e9751/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "dbd59ad17b7ade7efd36c69f85fa06d1357ece02",
                "status": "modified"
            }
        ],
        "message": "[CXF-6979] Avoid NPE",
        "parent": "https://github.com/apache/cxf/commit/87b4ca4362ea7a0e7b45d1589027045c6e3a552e",
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_d5eca29": {
        "bug_id": "cxf_d5eca29",
        "commit": "https://github.com/apache/cxf/commit/d5eca298b744a4bf7fb73a96b08191ed92b0098a",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/cxf/blob/d5eca298b744a4bf7fb73a96b08191ed92b0098a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "changes": 12,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java?ref=d5eca298b744a4bf7fb73a96b08191ed92b0098a",
                "deletions": 5,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "patch": "@@ -550,12 +550,14 @@ public UriBuilder segment(String... segments) throws IllegalArgumentException {\n      */\n     private List<String> toStringList(Object... values) throws IllegalArgumentException {\n         List<String> list = new ArrayList<String>();\n-        for (int i = 0; i < values.length; i++) {\n-            Object value = values[i];\n-            if (value == null) {\n-                throw new IllegalArgumentException(\"Null value on \" + i + \" position\");\n+        if (values != null) {\n+            for (int i = 0; i < values.length; i++) {\n+                Object value = values[i];\n+                if (value == null) {\n+                    throw new IllegalArgumentException(\"Null value on \" + i + \" position\");\n+                }\n+                list.add(value.toString());\n             }\n-            list.add(value.toString());\n         }\n         if (list.isEmpty()) {\n             list.add(\"\");",
                "raw_url": "https://github.com/apache/cxf/raw/d5eca298b744a4bf7fb73a96b08191ed92b0098a/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/UriBuilderImpl.java",
                "sha": "498123c1b888a9cb18d104a35e12e3ab49955c9d",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@984493 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/706f7a0a7d321df669a40b8a3cc7d6e3687377e2",
        "repo": "cxf",
        "unit_tests": [
            "UriBuilderImplTest.java"
        ]
    },
    "cxf_d721bd1": {
        "bug_id": "cxf_d721bd1",
        "commit": "https://github.com/apache/cxf/commit/d721bd15440cdacd94f5835ecfe513db891262cf",
        "file": [
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/cxf/blob/d721bd15440cdacd94f5835ecfe513db891262cf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java?ref=d721bd15440cdacd94f5835ecfe513db891262cf",
                "deletions": 1,
                "filename": "tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "patch": "@@ -300,7 +300,6 @@ protected void copyAllJaxbDeclarations(final Node schemaNode, final Element jaxw\n                     }\n                 }\n                 appinfoNode.appendChild(cloneNode);\n-                childNode = childNode.getNextSibling();\n             }\n         }\n         ",
                "raw_url": "https://github.com/apache/cxf/raw/d721bd15440cdacd94f5835ecfe513db891262cf/tools/wsdlto/frontend/jaxws/src/main/java/org/apache/cxf/tools/wsdlto/frontend/jaxws/customization/CustomizationParser.java",
                "sha": "73520106bfceab18966694425ccb6f009918efc8",
                "status": "modified"
            }
        ],
        "message": "[CXF-5862] Make sure we don't skip binding nodes in the binding file\nFixes a potential NPE if there are an odd number of binding nodes",
        "parent": "https://github.com/apache/cxf/commit/3bf3d07c954536d099274ebf1c5690e84ff3a423",
        "repo": "cxf",
        "unit_tests": [
            "CustomizationParserTest.java"
        ]
    },
    "cxf_d809b56": {
        "bug_id": "cxf_d809b56",
        "commit": "https://github.com/apache/cxf/commit/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java?ref=d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
                "deletions": 6,
                "filename": "rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "patch": "@@ -124,13 +124,16 @@ private void writeHeaders(String contentType, String attachmentId, Writer writer\n \n         writer.write(\"Content-Transfer-Encoding: binary\\r\\n\");\n \n-        writer.write(\"Content-ID: <\");\n-        if (attachmentId.charAt(0) == '<'\n-            && attachmentId.charAt(attachmentId.length() - 1) == '>') {\n-            attachmentId = attachmentId.substring(1, attachmentId.length() - 1);\n+        if (attachmentId != null) {\n+            writer.write(\"Content-ID: <\");\n+            if (attachmentId.charAt(0) == '<'\n+                && attachmentId.charAt(attachmentId.length() - 1) == '>') {\n+                attachmentId = attachmentId.substring(1, attachmentId.length() - 1);\n+            }\n+            writer.write(URLDecoder.decode(attachmentId, \"UTF-8\"));\n+            writer.write(\">\\r\\n\");\n         }\n-        writer.write(URLDecoder.decode(attachmentId, \"UTF-8\"));\n-        writer.write(\">\\r\\n\\r\\n\");\n+        writer.write(\"\\r\\n\");\n     }\n \n     /**",
                "raw_url": "https://github.com/apache/cxf/raw/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/attachment/AttachmentSerializer.java",
                "sha": "7e2cdec47dc732cdb78adc625f060853db053078",
                "status": "modified"
            },
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java?ref=d809b56b8ea82abf98ea82f09d66f92b4b5a0b17",
                "deletions": 1,
                "filename": "rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "patch": "@@ -47,7 +47,8 @@ public void handleMessage(Message message) {\n         // by declaring the Object.\n         Object prop = message.getContextualProperty(org.apache.cxf.message.Message.MTOM_ENABLED); \n         boolean mtomEnabled = MessageUtils.isTrue(prop);\n-        boolean writeAtts = MessageUtils.isTrue(message.getContextualProperty(WRITE_ATTACHMENTS));\n+        boolean writeAtts = MessageUtils.isTrue(message.getContextualProperty(WRITE_ATTACHMENTS))\n+            || (message.getAttachments() != null && !message.getAttachments().isEmpty());\n         \n         if (!mtomEnabled && !writeAtts) {\n             return;",
                "raw_url": "https://github.com/apache/cxf/raw/d809b56b8ea82abf98ea82f09d66f92b4b5a0b17/rt/core/src/main/java/org/apache/cxf/interceptor/AttachmentOutInterceptor.java",
                "sha": "488923aca7a32bbfc85dd191142e4e00924b7e15",
                "status": "modified"
            }
        ],
        "message": "If message has attachments, force into mime mode\nIf attachment doesn't have an ID, be OK with that.  Don't NPE.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@773693 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/e094214559f768a10078d4a0b67347130915fc4e",
        "repo": "cxf",
        "unit_tests": [
            "TestAttachmentOutInterceptor.java"
        ]
    },
    "cxf_d99c9ad": {
        "bug_id": "cxf_d99c9ad",
        "commit": "https://github.com/apache/cxf/commit/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java?ref=d99c9ad353894b95b6ae866a7e63b9dbb8a0665c",
                "deletions": 0,
                "filename": "rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "patch": "@@ -305,6 +305,9 @@ public Output append(String str) {\n         @Override\n         public Output append(String str) {\n             try {\n+                if (str == null) {\n+                    str = \"null\";\n+                }\n                 os.write(StringUtils.toBytesUTF8(str));\n             } catch (IOException ex) {\n                 throw new RuntimeException(ex);",
                "raw_url": "https://github.com/apache/cxf/raw/d99c9ad353894b95b6ae866a7e63b9dbb8a0665c/rt/rs/extensions/json-basic/src/main/java/org/apache/cxf/jaxrs/json/basic/JsonMapObjectReaderWriter.java",
                "sha": "abf6eefe565da5a940fdf9c2e9555388f4d291ef",
                "status": "modified"
            }
        ],
        "message": "Completing the NPE checking code in the basic json writer",
        "parent": "https://github.com/apache/cxf/commit/4dcf5120561ba5b11bf9493c931889c591cf36e0",
        "repo": "cxf",
        "unit_tests": [
            "JsonMapObjectReaderWriterTest.java"
        ]
    },
    "cxf_d9c0c2f": {
        "bug_id": "cxf_d9c0c2f",
        "commit": "https://github.com/apache/cxf/commit/d9c0c2ffb468315c9e538736ac8e731782209640",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/cxf/blob/d9c0c2ffb468315c9e538736ac8e731782209640/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java?ref=d9c0c2ffb468315c9e538736ac8e731782209640",
                "deletions": 6,
                "filename": "rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "patch": "@@ -266,12 +266,15 @@ static XmlJavaTypeAdapter getFieldXJTA(final Field f) {\n             adapter = f.getType().getAnnotation(XmlJavaTypeAdapter.class);\n         }\n         if (adapter == null) {\n-            XmlJavaTypeAdapters adapters = f.getDeclaringClass().getPackage().getAnnotation(XmlJavaTypeAdapters.class);\n-            if (adapters != null) {\n-                for (XmlJavaTypeAdapter candidate : adapters.value()) {\n-                    if (candidate != null && candidate.type().equals(f.getType())) {\n-                        adapter = candidate;\n-                        break;\n+            Package packageDeclaration = f.getDeclaringClass().getPackage();\n+            if (packageDeclaration != null) {\n+                XmlJavaTypeAdapters adapters = packageDeclaration.getAnnotation(XmlJavaTypeAdapters.class);\n+                if (adapters != null) {\n+                    for (XmlJavaTypeAdapter candidate : adapters.value()) {\n+                        if (candidate != null && candidate.type().equals(f.getType())) {\n+                            adapter = candidate;\n+                            break;\n+                        }\n                     }\n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/d9c0c2ffb468315c9e538736ac8e731782209640/rt/databinding/jaxb/src/main/java/org/apache/cxf/jaxb/Utils.java",
                "sha": "05e4da90ed666bcc221b1c2ebee1a7aa1316c9b1",
                "status": "modified"
            }
        ],
        "message": "[CXF-7947] avoid NPE for classes in default package",
        "parent": "https://github.com/apache/cxf/commit/a6978c675d99ed3e317f37ea8f9885004369ff7a",
        "repo": "cxf",
        "unit_tests": [
            "UtilsTest.java",
            "TestUtils.java"
        ]
    },
    "cxf_da963ab": {
        "bug_id": "cxf_da963ab",
        "commit": "https://github.com/apache/cxf/commit/da963ab6e038f28d5d8bdfcf8371774a4365f904",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/da963ab6e038f28d5d8bdfcf8371774a4365f904/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java?ref=da963ab6e038f28d5d8bdfcf8371774a4365f904",
                "deletions": 1,
                "filename": "rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "patch": "@@ -385,6 +385,9 @@ public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n         if (shouldCheckUrl(handler.getBus())) {\n             checkRegistedContext(url);\n         }\n+        if (contexts == null) {\n+            contexts = new ContextHandlerCollection();\n+        }\n         \n         SecurityHandler securityHandler = null;\n         if (server == null) {\n@@ -454,7 +457,6 @@ public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n                     }\n                 }\n             }\n-            contexts = new ContextHandlerCollection();\n             /*\n              * handlerCollection may be null here if is only one handler to deal with.\n              * Which in turn implies that there can't be a 'defaultHander' to deal with.",
                "raw_url": "https://github.com/apache/cxf/raw/da963ab6e038f28d5d8bdfcf8371774a4365f904/rt/transports/http-jetty/src/main/java/org/apache/cxf/transport/http_jetty/JettyHTTPServerEngine.java",
                "sha": "df0e23a5a34576a72c5fab183c0a17ceb776e53b",
                "status": "modified"
            }
        ],
        "message": "[CXF-6402] preventing NPE in JettyHTTPServerEngine",
        "parent": "https://github.com/apache/cxf/commit/88a7cd850f0471d6e51f9045bf01f775a905cbf2",
        "repo": "cxf",
        "unit_tests": [
            "JettyHTTPServerEngineTest.java"
        ]
    },
    "cxf_db470d7": {
        "bug_id": "cxf_db470d7",
        "commit": "https://github.com/apache/cxf/commit/db470d74ba946246428168d3c50c60ff0116cbe6",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/db470d74ba946246428168d3c50c60ff0116cbe6/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=db470d74ba946246428168d3c50c60ff0116cbe6",
                "deletions": 0,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -495,6 +495,12 @@ protected void addMessageFromBinding(ExtensibilityElement ext, BindingOperationI\n \n         ServiceInfo serviceInfo = bop.getBinding().getService();\n \n+        if (header != null && header.getMessage() == null) {\n+            throw new RuntimeException(\"Problem with WSDL: soap:header element\" \n+                + \" for operation \" + bop.getName() + \" under binding \" + bop.getBinding().getName()\n+                + \" does not contain a valid message attribute.\");\n+        }\n+        \n         if (header != null && serviceInfo.getMessage(header.getMessage()) == null) {\n             Definition def = (Definition)serviceInfo.getProperty(WSDLServiceBuilder.WSDL_DEFINITION);\n             SchemaCollection schemas = serviceInfo.getXmlSchemaCollection();",
                "raw_url": "https://github.com/apache/cxf/raw/db470d74ba946246428168d3c50c60ff0116cbe6/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "1319936973ab7462c322a46405189f6683a5b839",
                "status": "modified"
            }
        ],
        "message": "[CXF-5793] A better error message than an NPE if the \"message\" attribute isn't there.",
        "parent": "https://github.com/apache/cxf/commit/1900e1f4ace53bc112c16f36d846f25905daab4c",
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_ddc01a1": {
        "bug_id": "cxf_ddc01a1",
        "commit": "https://github.com/apache/cxf/commit/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java?ref=ddc01a185658418ce8b68ebf5e1a57c1a7de06ce",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "patch": "@@ -199,7 +199,12 @@ public static String createContentID(String ns) throws UnsupportedEncodingExcept\n         if (ns != null && (ns.length() > 0)) {\n             try {\n                 URI uri = new URI(ns);\n-                cid = uri.getHost();\n+                String host = uri.getHost();\n+                if (host != null) {\n+                    cid = host;\n+                } else {\n+                    cid = ns;\n+                }\n             } catch (Exception e) {\n                 cid = ns;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/ddc01a185658418ce8b68ebf5e1a57c1a7de06ce/core/src/main/java/org/apache/cxf/attachment/AttachmentUtil.java",
                "sha": "18b198f4dbcfe0e70eb41288426dec4495b1cb3e",
                "status": "modified"
            }
        ],
        "message": "[CXF-6517] Avoiding NPE",
        "parent": "https://github.com/apache/cxf/commit/0696b166015543a1b2ad9c165dd00e27fea8dd18",
        "repo": "cxf",
        "unit_tests": [
            "AttachmentUtilTest.java"
        ]
    },
    "cxf_df376f9": {
        "bug_id": "cxf_df376f9",
        "commit": "https://github.com/apache/cxf/commit/df376f99fae456687fdab8a13d2f561f683d57b8",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/cxf/blob/df376f99fae456687fdab8a13d2f561f683d57b8/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java?ref=df376f99fae456687fdab8a13d2f561f683d57b8",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "patch": "@@ -89,8 +89,14 @@ protected synchronized void updateDests(HttpServletRequest request) {\n         for (String path : paths) {\n             ServletDestination d2 = transport.getDestinationForPath(path);\n             String ad = d2.getEndpointInfo().getAddress();\n-            if (ad.equals(path)\n-                || ad.equals(lastBase + path)) {\n+            if (ad == null \n+                && d2.getAddress() != null\n+                && d2.getAddress().getAddress() != null) {\n+                ad = d2.getAddress().getAddress().getValue();\n+            }\n+            if (ad != null \n+                && (ad.equals(path)\n+                || ad.equals(lastBase + path))) {\n                 d2.getEndpointInfo().setAddress(base + path);\n                 if (d2.getEndpointInfo().getExtensor(AddressType.class) != null) {\n                     d2.getEndpointInfo().getExtensor(AddressType.class).setLocation(base + path);",
                "raw_url": "https://github.com/apache/cxf/raw/df376f99fae456687fdab8a13d2f561f683d57b8/rt/transports/http/src/main/java/org/apache/cxf/transport/servlet/ServletController.java",
                "sha": "2922c1b34136e76c2a74e0c25c8eb4da8aab529b",
                "status": "modified"
            }
        ],
        "message": "[CXF-2551] Add some NPE checks into the ServletController\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@889067 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/cf56eefa916ca15924e275ae737cd77a4b8b57f5",
        "repo": "cxf",
        "unit_tests": [
            "ServletControllerTest.java"
        ]
    },
    "cxf_dfb24e2": {
        "bug_id": "cxf_dfb24e2",
        "commit": "https://github.com/apache/cxf/commit/dfb24e2c6eecbdf96e2c241360843afa01b12eec",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/dfb24e2c6eecbdf96e2c241360843afa01b12eec/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java?ref=dfb24e2c6eecbdf96e2c241360843afa01b12eec",
                "deletions": 0,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "patch": "@@ -255,6 +255,9 @@ public Conduit getConduit(\n     }\n     \n     public Destination getDestination(EndpointInfo endpointInfo) throws IOException {\n+        if (endpointInfo == null) {\n+            throw new IllegalArgumentException(\"EndpointInfo cannot be null\");\n+        }\n         AbstractHTTPDestination d = registry.getDestinationForPath(endpointInfo.getAddress());\n         if (d == null) {\n             HttpDestinationFactory jettyFactory = bus.getExtension(HttpDestinationFactory.class);",
                "raw_url": "https://github.com/apache/cxf/raw/dfb24e2c6eecbdf96e2c241360843afa01b12eec/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPTransportFactory.java",
                "sha": "a0fca0d588c636d280ae827e5d473d88f5b6bfe9",
                "status": "modified"
            }
        ],
        "message": "Add an NPE guard\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1152083 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/7c4a15ff6d03feb8ff652d3d058ba25c063e540b",
        "repo": "cxf",
        "unit_tests": [
            "HTTPTransportFactoryTest.java"
        ]
    },
    "cxf_e67f2cf": {
        "bug_id": "cxf_e67f2cf",
        "commit": "https://github.com/apache/cxf/commit/e67f2cfc12b55b06632b1e0e733a91a09a0a734d",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/e67f2cfc12b55b06632b1e0e733a91a09a0a734d/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=e67f2cfc12b55b06632b1e0e733a91a09a0a734d",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1693,7 +1693,7 @@ protected void makeTrustDecision() throws IOException {\n                 } catch (UntrustedURLConnectionIOException untrustedEx) {\n                     if (LOG.isLoggable(Level.FINE)) {\n                         LOG.log(Level.FINE, \"Trust Decider \"\n-                            + trustDecider.getLogicalName()\n+                            + trustDecider != null ? trustDecider.getLogicalName() : decider2.getLogicalName()\n                             + \" considers Conduit \"\n                             + conduitName \n                             + \" untrusted.\", untrustedEx);",
                "raw_url": "https://github.com/apache/cxf/raw/e67f2cfc12b55b06632b1e0e733a91a09a0a734d/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "fd69a5efb98c1f179e0a11358c2652fae8a03b26",
                "status": "modified"
            }
        ],
        "message": "[CXF-4803]NPE is thrown while enabling fine log level in TrustDecisionUtil if MessageTrustDecider from message context is used\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1442016 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/c738276bea35237efedc8b6c35dfaef0aa604ad3",
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_e7013ba": {
        "bug_id": "cxf_e7013ba",
        "commit": "https://github.com/apache/cxf/commit/e7013ba82626938bbfe4c62d5c0823b3a182fbb4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/e7013ba82626938bbfe4c62d5c0823b3a182fbb4/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java?ref=e7013ba82626938bbfe4c62d5c0823b3a182fbb4",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "patch": "@@ -1003,7 +1003,7 @@ protected static int compareClasses(Class<?> expectedCls, Object o1, Object o2)\n                 Class<?> actualType = InjectionUtils.getActualType(genericSuperType);\n                 if (expectedClass == actualType) {\n                     return new Type[]{genericSuperType};\n-                } else if (expectedClass.isAssignableFrom(actualType)) {\n+                } else if (actualType != null && expectedClass.isAssignableFrom(actualType)) {\n                     return new Type[]{};    \n                 }\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/e7013ba82626938bbfe4c62d5c0823b3a182fbb4/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/ProviderFactory.java",
                "sha": "2f180e7350387887686400d7ee325a579b38b783",
                "status": "modified"
            }
        ],
        "message": "[CXF-5348] Preventing NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1563198 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/743852fad0f04bbdcd060d3f0bc3f592a132d3d6",
        "repo": "cxf",
        "unit_tests": [
            "ProviderFactoryTest.java"
        ]
    },
    "cxf_e848fc3": {
        "bug_id": "cxf_e848fc3",
        "commit": "https://github.com/apache/cxf/commit/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java?ref=e848fc3499b3deb95ff5e0c5a6e80867f5c903f2",
                "deletions": 2,
                "filename": "rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "patch": "@@ -208,8 +208,9 @@ public BindingInfo createBindingInfo(ServiceInfo si, String bindingid, Object co\n \n     private void createSoapBinding(final SoapBindingInfo bi) throws WSDLException {\n         boolean isSoap12 = bi.getSoapVersion() instanceof Soap12;\n-        ExtensionRegistry extensionRegistry = getBus().getExtension(WSDLManager.class)\n-            .getExtensionRegistry();\n+        Bus bs = getBus();\n+        WSDLManager m = bs.getExtension(WSDLManager.class);\n+        ExtensionRegistry extensionRegistry = m.getExtensionRegistry();\n \n         SoapBinding soapBinding = SOAPBindingUtil.createSoapBinding(extensionRegistry, isSoap12);\n         soapBinding.setStyle(bi.getStyle());",
                "raw_url": "https://github.com/apache/cxf/raw/e848fc3499b3deb95ff5e0c5a6e80867f5c903f2/rt/bindings/soap/src/main/java/org/apache/cxf/binding/soap/SoapBindingFactory.java",
                "sha": "8ffabb679c37e8029a37396af845d673cffc40d1",
                "status": "modified"
            }
        ],
        "message": "Split line into 3 to try and debug which part is causing the NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@922913 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/287fbe1a653a12f90cb7d324ac83ed848ef13589",
        "repo": "cxf",
        "unit_tests": [
            "SoapBindingFactoryTest.java"
        ]
    },
    "cxf_e855e8f": {
        "bug_id": "cxf_e855e8f",
        "commit": "https://github.com/apache/cxf/commit/e855e8f139fdff2fb397e45ee0df9a7e70378a59",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/api/src/main/java/org/apache/cxf/message/Message.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/api/src/main/java/org/apache/cxf/message/Message.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 0,
                "filename": "api/src/main/java/org/apache/cxf/message/Message.java",
                "patch": "@@ -69,6 +69,12 @@\n     String PARTIAL_RESPONSE_MESSAGE = \"org.apache.cxf.partial.response\";\n     String EMPTY_PARTIAL_RESPONSE_MESSAGE = \"org.apache.cxf.partial.response.empty\";\n     String ONE_WAY_REQUEST = \"OnewayRequest\";\n+\n+    /**\n+     * Boolean property specifying if oneWay response must be processed.\n+     */\n+    String PROCESS_ONEWAY_REPONSE = \"org.apache.cxf.transport.processOneWayResponse\";\n+    \n     \n     String ROBUST_ONEWAY = \"org.apache.cxf.oneway.robust\";\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/api/src/main/java/org/apache/cxf/message/Message.java",
                "sha": "449cbce3f05c89d557dd124f7d9fe4dabb40e12a",
                "status": "modified"
            },
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 2,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -18,7 +18,6 @@\n  */\n package org.apache.cxf.transport.http;\n \n-\n import java.beans.PropertyChangeEvent;\n import java.beans.PropertyChangeListener;\n import java.io.ByteArrayInputStream;\n@@ -1564,6 +1563,15 @@ private boolean isOneway(Exchange exchange) {\n             return exchange != null && exchange.isOneWay();\n         }\n         \n+        private boolean doProcessResponse(Message message) {\n+            // 1. Not oneWay\n+            if (!isOneway(message.getExchange())) {\n+                return true;\n+            }\n+            // 2. Context property\n+            return MessageUtils.getContextualBoolean(message, Message.PROCESS_ONEWAY_REPONSE, false);\n+        }\n+\n         protected void handleResponseInternal() throws IOException {\n             Exchange exchange = outMessage.getExchange();\n             int responseCode = connection.getResponseCode();\n@@ -1590,7 +1598,7 @@ protected void handleResponseInternal() throws IOException {\n             if (isOneway(exchange) \n                 || HttpURLConnection.HTTP_ACCEPTED == responseCode) {\n                 in = ChunkedUtil.getPartialResponse(connection, responseCode);\n-                if (in == null) {\n+                if ((in == null) || (!doProcessResponse(outMessage))) {\n                     // oneway operation or decoupled MEP without \n                     // partial response\n                     connection.getInputStream().close();\n@@ -1603,6 +1611,9 @@ protected void handleResponseInternal() throws IOException {\n                             cc.handleResponse(null, null);\n                         }\n                     }\n+                    if (in != null) {\n+                        in.close();\n+                    }\n                     return;\n                 }\n             } else {",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "4fce16c1f3e9672d51ddd317c622430f7cfff5d2",
                "status": "modified"
            },
            {
                "additions": 45,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "changes": 72,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 27,
                "filename": "rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "patch": "@@ -48,7 +48,6 @@\n import org.apache.cxf.ws.addressing.EndpointReferenceType;\n import org.easymock.EasyMock;\n import org.easymock.IMocksControl;\n-\n import org.junit.After;\n import org.junit.AfterClass;\n import org.junit.Assert;\n@@ -61,7 +60,7 @@\n public class HTTPConduitURLEasyMockTest extends Assert {\n     private static String oldHttpProxyHost;\n \n-    private enum ResponseStyle { NONE, BACK_CHANNEL, BACK_CHANNEL_ERROR, DECOUPLED };\n+    private enum ResponseStyle { NONE, BACK_CHANNEL, BACK_CHANNEL_ERROR, DECOUPLED, ONEWAY_NONE };\n     private enum ResponseDelimiter { LENGTH, CHUNKED, EOF };\n \n     private static final String NOWHERE = \"http://nada.nothing.nowhere.null/\";\n@@ -212,12 +211,13 @@ public void testSendHttpGetConnection() throws Exception {\n     }\n \n     @Test\n-    public void testSendOnewayChunkedEmptyPartialResponse() \n+    public void testSendOnewayChunkedEmptyPartialResponseProcessResponse() \n         throws Exception {\n         control = EasyMock.createNiceControl();\n         HTTPConduit conduit = setUpConduit(true, false);\n         Message message = new MessageImpl();\n         conduit.prepare(message);\n+        message.put(Message.PROCESS_ONEWAY_REPONSE, Boolean.TRUE);\n         verifySentMessage(conduit, \n                           message, \n                           ResponseStyle.NONE,\n@@ -226,7 +226,23 @@ public void testSendOnewayChunkedEmptyPartialResponse()\n                           \"POST\");\n         finalVerify();\n     }\n-    \n+\n+    @Test\n+    public void testSendOnewayDoNotProcessResponse() \n+        throws Exception {\n+        control = EasyMock.createNiceControl();\n+        HTTPConduit conduit = setUpConduit(true, false);\n+        Message message = new MessageImpl();\n+        conduit.prepare(message);\n+        verifySentMessage(conduit, \n+                          message, \n+                          ResponseStyle.ONEWAY_NONE,\n+                          ResponseDelimiter.CHUNKED,\n+                          true,  // empty response\n+                          \"POST\");\n+        finalVerify();\n+    }\n+\n     @Test\n     public void testSendTwowayDecoupledEmptyPartialResponse() \n         throws Exception {\n@@ -266,9 +282,9 @@ private void setUpOneway(Message message) {\n         Exchange exchange = control.createMock(Exchange.class);\n         message.setExchange(exchange);\n         exchange.isOneWay();\n-        EasyMock.expectLastCall().andReturn(true);\n+        EasyMock.expectLastCall().andReturn(true).anyTimes();\n         exchange.isSynchronous();\n-        EasyMock.expectLastCall().andReturn(true);\n+        EasyMock.expectLastCall().andReturn(true).anyTimes();\n         exchange.isEmpty();\n         EasyMock.expectLastCall().andReturn(true).anyTimes();\n     }\n@@ -425,33 +441,35 @@ private void verifySentMessage(HTTPConduit conduit,\n             EasyMock.expectLastCall();\n         }\n         \n-        if (style == ResponseStyle.NONE) {\n+        if ((style == ResponseStyle.NONE) || (style == ResponseStyle.ONEWAY_NONE)) {\n             setUpOneway(message);\n         }\n         \n         connection.getRequestMethod();\n         EasyMock.expectLastCall().andReturn(method).anyTimes();\n-        verifyHandleResponse(style, delimiter, conduit);\n+        verifyHandleResponse(style, delimiter, emptyResponse, conduit);\n \n         control.replay();\n         \n         wrappedOS.flush();\n         wrappedOS.flush();\n         wrappedOS.close();\n \n-        assertNotNull(\"expected in message\", inMessage);\n-        Map<?, ?> headerMap = (Map<?, ?>) inMessage.get(Message.PROTOCOL_HEADERS);\n-        assertEquals(\"unexpected response headers\", headerMap.size(), 0);\n-        Integer expectedResponseCode = getResponseCode(style);\n-        assertEquals(\"unexpected response code\",\n-                     expectedResponseCode,\n-                     inMessage.get(Message.RESPONSE_CODE));\n-        if (!emptyResponse) {\n-            assertTrue(\"unexpected content formats\",\n-                       inMessage.getContentFormats().contains(InputStream.class));\n-            InputStream content = inMessage.getContent(InputStream.class);\n-            if (!(content instanceof PushbackInputStream)) {\n-                assertSame(\"unexpected content\", is, content);            \n+        if (style != ResponseStyle.ONEWAY_NONE) {\n+            assertNotNull(\"expected in message\", inMessage);\n+            Map<?, ?> headerMap = (Map<?, ?>) inMessage.get(Message.PROTOCOL_HEADERS);\n+            assertEquals(\"unexpected response headers\", headerMap.size(), 0);\n+            Integer expectedResponseCode = getResponseCode(style);\n+            assertEquals(\"unexpected response code\",\n+                         expectedResponseCode,\n+                         inMessage.get(Message.RESPONSE_CODE));\n+            if (!emptyResponse) {\n+                assertTrue(\"unexpected content formats\",\n+                           inMessage.getContentFormats().contains(InputStream.class));\n+                InputStream content = inMessage.getContent(InputStream.class);\n+                if (!(content instanceof PushbackInputStream)) {\n+                    assertSame(\"unexpected content\", is, content);            \n+                }\n             }\n         }\n         \n@@ -505,11 +523,6 @@ private OutputStream verifyRequestHeaders(Message message, boolean expectHeaders\n         return wrappedOS;\n     }\n     \n-    private void verifyHandleResponse(ResponseStyle style, ResponseDelimiter delimiter, HTTPConduit conduit) \n-        throws IOException {\n-        verifyHandleResponse(style, delimiter, false, conduit);\n-    }\n-    \n     private void verifyHandleResponse(ResponseStyle style, \n                                       ResponseDelimiter delimiter,\n                                       boolean emptyResponse,\n@@ -560,7 +573,12 @@ private void verifyHandleResponse(ResponseStyle style,\n         case BACK_CHANNEL_ERROR:\n             connection.getErrorStream();\n             EasyMock.expectLastCall().andReturn(null);\n-            break;    \n+            break; \n+            \n+        case ONEWAY_NONE:\n+            is.close();\n+            EasyMock.expectLastCall();\n+            break;\n             \n         default:\n             break;",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/transports/http/src/test/java/org/apache/cxf/transport/http/HTTPConduitURLEasyMockTest.java",
                "sha": "46c1e9095f49b10ab1383cc3991232afc9c42915",
                "status": "modified"
            },
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java?ref=e855e8f139fdff2fb397e45ee0df9a7e70378a59",
                "deletions": 0,
                "filename": "rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "patch": "@@ -117,6 +117,11 @@ protected void handle(Message msg) throws SequenceFault, RMException {\n             RMContextUtils.storeRMProperties(msg, rmpsOut, true);\n         }\n         \n+        // Activate process response for oneWay\n+        if (msg.getExchange().isOneWay()) {\n+            msg.getExchange().put(Message.PROCESS_ONEWAY_REPONSE, true);\n+        }\n+        \n         RMProperties rmpsIn = null;\n         Identifier inSeqId = null;\n         long inMessageNumber = 0;",
                "raw_url": "https://github.com/apache/cxf/raw/e855e8f139fdff2fb397e45ee0df9a7e70378a59/rt/ws/rm/src/main/java/org/apache/cxf/ws/rm/RMOutInterceptor.java",
                "sha": "e765ad839b4f9a72d7f2c74d45dda6f1f6cf77c8",
                "status": "modified"
            }
        ],
        "message": "[CXF-4248] DocLiteralInInterceptor throws NPE if oneWay operation sends non-empty response\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1342527 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/64d6a8a70a04eab2dc480502857a00b7785c95c9",
        "repo": "cxf",
        "unit_tests": [
            "RMOutInterceptorTest.java"
        ]
    },
    "cxf_ecbbda4": {
        "bug_id": "cxf_ecbbda4",
        "commit": "https://github.com/apache/cxf/commit/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java?ref=ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4",
                "deletions": 1,
                "filename": "rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "patch": "@@ -918,7 +918,7 @@ public static String getAction(Extensible ext) {\n         if (o instanceof QName) {\n             return ((QName)o).getLocalPart();\n         }\n-        return o.toString();\n+        return o == null ? null : o.toString();\n     }\n     public static EndpointReferenceType getNoneEndpointReference() {\n         return NONE_ENDPOINT_REFERENCE;",
                "raw_url": "https://github.com/apache/cxf/raw/ecbbda410dbe6e36b1cd425d07ad3c8756c5c2e4/rt/ws/addr/src/main/java/org/apache/cxf/ws/addressing/ContextUtils.java",
                "sha": "d13b35c8a595133e302ce12ca372944f1667730b",
                "status": "modified"
            }
        ],
        "message": "[CXF-3871] avoid NPE at getAction in wsa ContextUtils.getAction\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1187370 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/1fe19dc206aab805f40d671d0b39e672d1bdb400",
        "repo": "cxf",
        "unit_tests": [
            "ContextUtilsTest.java"
        ]
    },
    "cxf_eea01bb": {
        "bug_id": "cxf_eea01bb",
        "commit": "https://github.com/apache/cxf/commit/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/cxf/blob/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java?ref=eea01bbe70a1b1f472fdd63c363d1f15e550b1bc",
                "deletions": 0,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "patch": "@@ -89,6 +89,9 @@ public Object readFrom(\n         Class<Object> clazz, Type genericType, Annotation[] annotations, MediaType mt, \n         MultivaluedMap<String, String> headers, InputStream is) \n         throws IOException {\n+        if (is == null) {\n+            return null;\n+        }\n         try {\n             if (mt.isCompatible(MediaType.MULTIPART_FORM_DATA_TYPE)) {\n                 MultipartBody body = AttachmentUtils.getMultipartBody(mc);",
                "raw_url": "https://github.com/apache/cxf/raw/eea01bbe70a1b1f472fdd63c363d1f15e550b1bc/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/provider/FormEncodingProvider.java",
                "sha": "2389322778a7f0a653287e7db323541767930103",
                "status": "modified"
            }
        ],
        "message": "[CXF-3821] Adding an NPE guard to FormEncodingProvider\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1175951 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/5af4066acba87bae5687ff5f50e573cc5808e777",
        "repo": "cxf",
        "unit_tests": [
            "FormEncodingProviderTest.java"
        ]
    },
    "cxf_f1593e4": {
        "bug_id": "cxf_f1593e4",
        "commit": "https://github.com/apache/cxf/commit/f1593e4d3ab856611f419f3948252ccfd4b09fa0",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f1593e4d3ab856611f419f3948252ccfd4b09fa0/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java?ref=f1593e4d3ab856611f419f3948252ccfd4b09fa0",
                "deletions": 1,
                "filename": "rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "patch": "@@ -1259,7 +1259,7 @@ protected void retransmit(String newURL) throws IOException {\n \n             // If this is a GET method we must not touch the output\n             // stream as this automagically turns the request into a POST.\n-            if (getMethod().equals(\"GET\")) {\n+            if (getMethod().equals(\"GET\") || cachedStream == null) {\n                 handleNoOutput();\n                 return;\n             }",
                "raw_url": "https://github.com/apache/cxf/raw/f1593e4d3ab856611f419f3948252ccfd4b09fa0/rt/transports/http/src/main/java/org/apache/cxf/transport/http/HTTPConduit.java",
                "sha": "8314c1403a7305f3e06a821505fc8d86587ca7e7",
                "status": "modified"
            }
        ],
        "message": "Adding a cached stream NPE check to HttpConduit",
        "parent": "https://github.com/apache/cxf/commit/ceb04f964e0772389b7a773114c282769ba913a3",
        "repo": "cxf",
        "unit_tests": [
            "HTTPConduitTest.java"
        ]
    },
    "cxf_f20c924": {
        "bug_id": "cxf_f20c924",
        "commit": "https://github.com/apache/cxf/commit/f20c924442a8f5055dd7021f03eb364b675052b0",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/f20c924442a8f5055dd7021f03eb364b675052b0/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java?ref=f20c924442a8f5055dd7021f03eb364b675052b0",
                "deletions": 2,
                "filename": "rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "patch": "@@ -579,15 +579,15 @@ private void buildWSAActions(OperationInfo operation, Method method) {\n             if (faultActions != null && faultActions.length > 0 && operation.getFaults() != null) {\n                 for (FaultAction faultAction : faultActions) {\n                     FaultInfo faultInfo = getFaultInfo(operation, faultAction.className());\n-                    if (!StringUtils.isEmpty(faultAction.value())) {\n+                    if (faultInfo != null && !StringUtils.isEmpty(faultAction.value())) {\n                         faultInfo.addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME, faultAction\n                             .value());\n                         faultInfo.addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME, faultAction\n                             .value());\n                     }\n                     if (operation.isUnwrappedCapable()) {\n                         faultInfo = getFaultInfo(operation.getUnwrappedOperation(), faultAction.className());\n-                        if (!StringUtils.isEmpty(faultAction.value())) {\n+                        if (faultInfo != null && !StringUtils.isEmpty(faultAction.value())) {\n                             faultInfo.addExtensionAttribute(JAXWSAConstants.WSAW_ACTION_QNAME, faultAction\n                                 .value());\n                             faultInfo.addExtensionAttribute(JAXWSAConstants.WSAM_ACTION_QNAME, faultAction",
                "raw_url": "https://github.com/apache/cxf/raw/f20c924442a8f5055dd7021f03eb364b675052b0/rt/frontend/jaxws/src/main/java/org/apache/cxf/jaxws/support/JaxWsServiceFactoryBean.java",
                "sha": "bdf15404d180d1d7fc750ea03d5b5679086276fb",
                "status": "modified"
            }
        ],
        "message": "[CXF-4493]add NPE guard when FaultAction is used with OneWay\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1380132 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/b7138cc714b0c7e92ec3983e107c69d50f7ac338",
        "repo": "cxf",
        "unit_tests": [
            "JaxWsServiceFactoryBeanTest.java"
        ]
    },
    "cxf_f58500e": {
        "bug_id": "cxf_f58500e",
        "commit": "https://github.com/apache/cxf/commit/f58500e38c69850d6ac62192ea843ae2a5119418",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f58500e38c69850d6ac62192ea843ae2a5119418/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java?ref=f58500e38c69850d6ac62192ea843ae2a5119418",
                "deletions": 1,
                "filename": "core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "patch": "@@ -1565,7 +1565,7 @@ public static void setNoEscapeHandler(final Marshaller marshaller) {\n     public static void setEscapeHandler(Marshaller marshaller, Object escapeHandler) {\n         try {\n             String postFix = getPostfix(marshaller.getClass());\n-            if (postFix != null) {\n+            if (postFix != null && escapeHandler != null) {\n                 marshaller.setProperty(\"com.sun.xml\" + postFix + \".bind.characterEscapeHandler\", escapeHandler);\n             }\n         } catch (PropertyException e) {",
                "raw_url": "https://github.com/apache/cxf/raw/f58500e38c69850d6ac62192ea843ae2a5119418/core/src/main/java/org/apache/cxf/common/jaxb/JAXBUtils.java",
                "sha": "09107f560a3014dd15db977dc1070d02acef373c",
                "status": "modified"
            }
        ],
        "message": "[CXF-7905]add NPE guard for escapeHandler",
        "parent": "https://github.com/apache/cxf/commit/b11ba45f602ee0986cabd2020deb7e56b4f39bc5",
        "repo": "cxf",
        "unit_tests": [
            "JAXBUtilsTest.java"
        ]
    },
    "cxf_f75fa59": {
        "bug_id": "cxf_f75fa59",
        "commit": "https://github.com/apache/cxf/commit/f75fa599c12005fd8541dbfe783882a334366307",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/cxf/blob/f75fa599c12005fd8541dbfe783882a334366307/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java?ref=f75fa599c12005fd8541dbfe783882a334366307",
                "deletions": 1,
                "filename": "rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "patch": "@@ -385,7 +385,7 @@ public Link getLink(String relation) {\n         } \n         \n         throw new IllegalStateException(\"The entity is not backed by an input stream, entity class is : \"\n-            + entity != null ? entity.getClass().getName() : null);\n+            + (entity != null ? entity.getClass().getName() : null));\n         \n     }\n     ",
                "raw_url": "https://github.com/apache/cxf/raw/f75fa599c12005fd8541dbfe783882a334366307/rt/frontend/jaxrs/src/main/java/org/apache/cxf/jaxrs/impl/ResponseImpl.java",
                "sha": "51ff48dec7f8035b5c358b33c651a28d8d5c71fb",
                "status": "modified"
            }
        ],
        "message": "[CXF-5795] Prevening misleading NPE",
        "parent": "https://github.com/apache/cxf/commit/5885d6be3fdb3b9b38a4d9d753e927424f20096c",
        "repo": "cxf",
        "unit_tests": [
            "ResponseImplTest.java"
        ]
    },
    "cxf_fbbcf94": {
        "bug_id": "cxf_fbbcf94",
        "commit": "https://github.com/apache/cxf/commit/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/cxf/blob/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java?ref=fbbcf945ad9d10b4fb16c8722de77b1f4c62db44",
                "deletions": 1,
                "filename": "rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "patch": "@@ -151,7 +151,11 @@ public ServerAccessToken getAccessToken(String accessTokenKey) throws OAuthServi\n \n     @Override\n     protected void doRevokeAccessToken(ServerAccessToken at) {\n-        accessTokenCache.remove(at.getTokenKey());\n+        if (isUseJwtFormatForAccessTokens() && isStoreJwtTokenKeyOnly()) {\n+            jwtAccessTokenCache.remove(at.getTokenKey());\n+        } else {\n+            accessTokenCache.remove(at.getTokenKey());\n+        }\n     }\n \n     @Override",
                "raw_url": "https://github.com/apache/cxf/raw/fbbcf945ad9d10b4fb16c8722de77b1f4c62db44/rt/rs/security/oauth-parent/oauth2/src/main/java/org/apache/cxf/rs/security/oauth2/provider/JCacheOAuthDataProvider.java",
                "sha": "0b006b5dabd87f4f77d62fd2bfd82124c42e90d5",
                "status": "modified"
            }
        ],
        "message": "CXF-7913 - NPE in OAuth 2.0 JCacheOAuthDataProvider with isStoreJwtTokenKeyOnly",
        "parent": "https://github.com/apache/cxf/commit/7eb08b4e9136bc0bd50a7d23cc392e5cd5501f0c",
        "repo": "cxf",
        "unit_tests": [
            "JCacheOAuthDataProviderTest.java"
        ]
    },
    "cxf_fd70825": {
        "bug_id": "cxf_fd70825",
        "commit": "https://github.com/apache/cxf/commit/fd70825a59214b8e78a8ef75d5b956d17fa11267",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/cxf/blob/fd70825a59214b8e78a8ef75d5b956d17fa11267/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "changes": 4,
                "contents_url": "https://api.github.com/repos/apache/cxf/contents/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java?ref=fd70825a59214b8e78a8ef75d5b956d17fa11267",
                "deletions": 2,
                "filename": "rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "patch": "@@ -286,7 +286,7 @@ private String getCollectionMethod(Map<String, String> map, Class<?> pojoClass)\n         return null;\n     }\n     \n-    private <T> T getAtomElementHandler(Map<String, T> handlers, Class<?> pojoClass) {\n+    protected <T> T getAtomElementHandler(Map<String, T> handlers, Class<?> pojoClass) {\n         T handler = getAtomElementHandlerSuperClass(handlers, pojoClass);\n         if (handler == null) {\n             Class<?>[] interfaces = pojoClass.getInterfaces();\n@@ -301,7 +301,7 @@ private String getCollectionMethod(Map<String, String> map, Class<?> pojoClass)\n     }\n     \n     private <T> T getAtomElementHandlerSuperClass(Map<String, T> handlers, Class<?> pojoClass) {\n-        if (pojoClass == Object.class) {\n+        if (pojoClass == null || pojoClass == Object.class) {\n             return null;\n         }\n         T handler = handlers.get(pojoClass.getName());",
                "raw_url": "https://github.com/apache/cxf/raw/fd70825a59214b8e78a8ef75d5b956d17fa11267/rt/rs/extensions/providers/src/main/java/org/apache/cxf/jaxrs/provider/atom/AtomPojoProvider.java",
                "sha": "1e9586fe34be168eb3e8edf7f1a9e1d63bf7e7b7",
                "status": "modified"
            }
        ],
        "message": "AtomPojoProvider will throw NPE if interface classes are used\n\ngit-svn-id: https://svn.apache.org/repos/asf/cxf/trunk@1422958 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/cxf/commit/af72503cfd4f4d503168248524155c8b1b3c8a57",
        "repo": "cxf",
        "unit_tests": [
            "AtomPojoProviderTest.java"
        ]
    }
}