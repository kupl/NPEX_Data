{
    "sling-org-apache-sling-discovery-oak_030410f": {
        "bug_id": "sling-org-apache-sling-discovery-oak_030410f",
        "commit": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/030410f6446c49b564877ce059f6f0efc705f45d",
        "file": [
            {
                "additions": 28,
                "blob_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/blob/030410f6446c49b564877ce059f6f0efc705f45d/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "changes": 38,
                "contents_url": "https://api.github.com/repos/apache/sling-org-apache-sling-discovery-oak/contents/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java?ref=030410f6446c49b564877ce059f6f0efc705f45d",
                "deletions": 10,
                "filename": "src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "patch": "@@ -107,7 +107,7 @@\n      * whether or not this service is activated - necessary to avoid sending\n      * events to discovery awares before activate is done\n      **/\n-    private boolean activated = false;\n+    private volatile boolean activated = false;\n \n     @Reference\n     private ResourceResolverFactory resourceResolverFactory;\n@@ -400,7 +400,9 @@ private void bindPropertyProviderInteral(final PropertyProvider propertyProvider\n         final ProviderInfo info = new ProviderInfo(propertyProvider, props);\n         this.providerInfos.add(info);\n         Collections.sort(this.providerInfos);\n-        this.doUpdateProperties();\n+        if (activated) {\n+            this.doUpdateProperties();\n+        }\n         checkForTopologyChange();\n     }\n \n@@ -439,7 +441,9 @@ private void unbindPropertyProviderInternal(\n \n         final ProviderInfo info = new ProviderInfo(propertyProvider, props);\n         if ( this.providerInfos.remove(info) && update ) {\n-            this.doUpdateProperties();\n+            if (activated) {\n+                this.doUpdateProperties();\n+            }\n             this.checkForTopologyChange();\n         }\n     }\n@@ -454,9 +458,19 @@ private void unbindPropertyProviderInternal(\n      * @see Config#getClusterInstancesPath()\n      */\n     private void doUpdateProperties() {\n-        if (resourceResolverFactory == null) {\n+        // SLING-5382 : the caller must ensure that this method\n+        // is not invoked after deactivation or before activation.\n+        // so this method doesn't have to do any further synchronization.\n+        // what we do nevertheless is a paranoia way of checking if\n+        // all variables are available and do a NOOP if that's not the case.\n+        final ResourceResolverFactory rrf = resourceResolverFactory;\n+        final Config c = config;\n+        final String sid = slingId;\n+        if (rrf == null || c == null || sid == null) {\n             // cannot update the properties then..\n-            logger.debug(\"doUpdateProperties: too early to update the properties. resourceResolverFactory not yet set.\");\n+            logger.debug(\"doUpdateProperties: too early to update the properties. \"\n+                    + \"resourceResolverFactory ({}), config ({}) or slingId ({}) not yet set.\",\n+                    new Object[] {rrf, c, sid});\n             return;\n         } else {\n             logger.debug(\"doUpdateProperties: updating properties now..\");\n@@ -470,14 +484,14 @@ private void doUpdateProperties() {\n \n         ResourceResolver resourceResolver = null;\n         try {\n-            resourceResolver = resourceResolverFactory\n+            resourceResolver = rrf\n                     .getAdministrativeResourceResolver(null);\n \n             Resource myInstance = ResourceHelper\n                     .getOrCreateResource(\n                             resourceResolver,\n-                            config.getClusterInstancesPath()\n-                                    + \"/\" + slingId + \"/properties\");\n+                            c.getClusterInstancesPath()\n+                                    + \"/\" + sid + \"/properties\");\n             // SLING-2879 - revert/refresh resourceResolver here to work\n             // around a potential issue with jackrabbit in a clustered environment\n             resourceResolver.revert();\n@@ -541,8 +555,12 @@ private void doUpdateProperties() {\n      */\n     public void updateProperties() {\n         synchronized (lock) {\n-            logger.debug(\"updateProperties: calling doUpdateProperties.\");\n-            doUpdateProperties();\n+            if (!activated) {\n+                logger.debug(\"updateProperties: not yet activated, not calling doUpdateProperties this time.\");\n+            } else {\n+                logger.debug(\"updateProperties: calling doUpdateProperties.\");\n+                doUpdateProperties();\n+            }\n             logger.debug(\"updateProperties: calling handlePotentialTopologyChange.\");\n             checkForTopologyChange();\n             logger.debug(\"updateProperties: done.\");",
                "raw_url": "https://github.com/apache/sling-org-apache-sling-discovery-oak/raw/030410f6446c49b564877ce059f6f0efc705f45d/src/main/java/org/apache/sling/discovery/oak/OakDiscoveryService.java",
                "sha": "bdbbd97fb5e5c2e6f8145e5a548c9a9846b004ed",
                "status": "modified"
            }
        ],
        "message": "SLING-5382 : avoid NPE when PropertyProviders are bind/unbind/changed before activate\n\ngit-svn-id: https://svn.apache.org/repos/asf/sling/trunk@1727036 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/sling-org-apache-sling-discovery-oak/commit/dd977f32e74792c8f3b7291ae2ec656073e28ec7",
        "repo": "sling-org-apache-sling-discovery-oak",
        "unit_tests": [
            "OakDiscoveryServiceTest.java"
        ]
    }
}