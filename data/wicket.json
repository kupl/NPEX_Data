{
    "wicket_0431d5b": {
        "bug_id": "wicket_0431d5b",
        "commit": "https://github.com/apache/wicket/commit/0431d5bcccb0def666eebfb822acbd93c6b1fe2d",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/0431d5bcccb0def666eebfb822acbd93c6b1fe2d/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java?ref=0431d5bcccb0def666eebfb822acbd93c6b1fe2d",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "patch": "@@ -343,7 +343,8 @@ public synchronized void unbind()\n \t\tpublic synchronized boolean exists(String pageMapName, int pageId, int versionNumber)\r\n \t\t{\r\n \t\t\tPageMapEntry entry = getPageMapEntry(pageMapName, false);\r\n-\t\t\treturn entry.getManager().getPageWindow(pageId, versionNumber, -1) != null;\r\n+\t\t\treturn entry != null &&\r\n+\t\t\t\t\tentry.getManager().getPageWindow(pageId, versionNumber, -1) != null;\r\n \t\t}\r\n \t}\r\n \r",
                "raw_url": "https://github.com/apache/wicket/raw/0431d5bcccb0def666eebfb822acbd93c6b1fe2d/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/pagestore/DiskPageStore.java",
                "sha": "79ec04bb18e01b289170b9ed86829c848d596f61",
                "status": "modified"
            }
        ],
        "message": "NPE check\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@567320 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/5f6248ab5846c3e2c6ea6d0a7d4a347c576a0780",
        "repo": "wicket",
        "unit_tests": [
            "DiskPageStoreTest.java"
        ]
    },
    "wicket_046c766": {
        "bug_id": "wicket_046c766",
        "commit": "https://github.com/apache/wicket/commit/046c766581b8291edf1ece12ea3116edbe3fef89",
        "file": [
            {
                "additions": 52,
                "blob_url": "https://github.com/apache/wicket/blob/046c766581b8291edf1ece12ea3116edbe3fef89/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "changes": 56,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java?ref=046c766581b8291edf1ece12ea3116edbe3fef89",
                "deletions": 4,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "patch": "@@ -29,6 +29,7 @@\n import org.apache.wicket.markup.html.WicketEventReference;\n import org.apache.wicket.response.NullResponse;\n import org.apache.wicket.util.string.JavascriptUtils;\n+import org.apache.wicket.util.string.Strings;\n \n \n /**\n@@ -69,6 +70,10 @@ public final void markRendered(Object object)\n \t */\n \tpublic void renderCSSReference(ResourceReference reference)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -82,6 +87,10 @@ public void renderCSSReference(ResourceReference reference)\n \t */\n \tpublic void renderCSSReference(ResourceReference reference, String media)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -94,6 +103,10 @@ public void renderCSSReference(ResourceReference reference, String media)\n \t */\n \tpublic void renderCSSReference(String url)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderCSSReference(url, null);\n@@ -106,6 +119,10 @@ public void renderCSSReference(String url)\n \t */\n \tpublic void renderCSSReference(String url, String media)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { \"css\", url, media });\n@@ -131,6 +148,10 @@ public void renderCSSReference(String url, String media)\n \t */\n \tpublic void renderJavascriptReference(ResourceReference reference)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -144,6 +165,10 @@ public void renderJavascriptReference(ResourceReference reference)\n \t */\n \tpublic void renderJavascriptReference(ResourceReference reference, String id)\n \t{\n+\t\tif (reference == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"reference cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tCharSequence url = RequestCycle.get().urlFor(reference);\n@@ -156,6 +181,10 @@ public void renderJavascriptReference(ResourceReference reference, String id)\n \t */\n \tpublic void renderJavascriptReference(String url)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { \"javascript\", url });\n@@ -173,6 +202,10 @@ public void renderJavascriptReference(String url)\n \t */\n \tpublic void renderJavascriptReference(String url, String id)\n \t{\n+\t\tif (Strings.isEmpty(url))\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"url cannot be empty or null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token1 = Arrays.asList(new Object[] { \"javascript\", url });\n@@ -192,6 +225,10 @@ public void renderJavascriptReference(String url, String id)\n \t */\n \tpublic void renderJavascript(CharSequence javascript, String id)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tList token = Arrays.asList(new Object[] { javascript.toString(), id });\n@@ -208,6 +245,10 @@ public void renderJavascript(CharSequence javascript, String id)\n \t */\n \tpublic void renderString(CharSequence string)\n \t{\n+\t\tif (string == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"string cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\tString token = string.toString();\n@@ -232,6 +273,10 @@ public final boolean wasRendered(Object object)\n \t */\n \tpublic void renderOnDomReadyJavascript(String javascript)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderOnEventJavacript(\"window\", \"domready\", javascript);\n@@ -243,6 +288,10 @@ public void renderOnDomReadyJavascript(String javascript)\n \t */\n \tpublic void renderOnLoadJavascript(String javascript)\n \t{\n+\t\tif (javascript == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\"javascript cannot be null\");\n+\t\t}\n \t\tif (!closed)\n \t\t{\n \t\t\trenderOnEventJavacript(\"window\", \"load\", javascript);\n@@ -258,13 +307,12 @@ public void renderOnEventJavacript(String target, String event, String javascrip\n \t{\n \t\tif (!closed)\n \t\t{\n-\t\t\tList token = Arrays\n-\t\t\t\t\t.asList(new Object[] { \"javascript-event\", target, event, javascript });\n+\t\t\tList token = Arrays.asList(new Object[] { \"javascript-event\", target, event, javascript });\n \t\t\tif (wasRendered(token) == false)\n \t\t\t{\n \t\t\t\trenderJavascriptReference(WicketEventReference.INSTANCE);\n \t\t\t\tJavascriptUtils.writeJavascript(getResponse(), \"Wicket.Event.add(\" + target +\n-\t\t\t\t\t\t\", \\\"\" + event + \"\\\", function() { \" + javascript + \";});\");\n+\t\t\t\t\t\", \\\"\" + event + \"\\\", function() { \" + javascript + \";});\");\n \t\t\t\tmarkRendered(token);\n \t\t\t}\n \t\t}\n@@ -275,7 +323,7 @@ public void renderOnEventJavacript(String target, String event, String javascrip\n \t */\n \tpublic void close()\n \t{\n-\t\tthis.closed = true;\n+\t\tclosed = true;\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/046c766581b8291edf1ece12ea3116edbe3fef89/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/internal/HeaderResponse.java",
                "sha": "3dbdcd4d18bddc05de20058996225c6a677b8a90",
                "status": "modified"
            }
        ],
        "message": "WICKET-1396: Add more explicit exception for NPE in HeaderResponse.java\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@635053 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d09448e754f57eb0cce6127047560a66e6560c04",
        "repo": "wicket",
        "unit_tests": [
            "HeaderResponseTest.java",
            "TestHeaderResponse.java"
        ]
    },
    "wicket_145b9f0": {
        "bug_id": "wicket_145b9f0",
        "commit": "https://github.com/apache/wicket/commit/145b9f00b17e143c12a26527213e3eddc62026fc",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/145b9f00b17e143c12a26527213e3eddc62026fc/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java?ref=145b9f00b17e143c12a26527213e3eddc62026fc",
                "deletions": 13,
                "filename": "wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "patch": "@@ -577,29 +577,35 @@ public String toString()\n \t{\n \t\tStringBuilder str = new StringBuilder();\n \n-\t\tfor (int i = 0; i < indexedParameters.size(); i++)\n+\t\tif (indexedParameters != null)\n \t\t{\n-\t\t\tif (i > 0)\n-\t\t\t\tstr.append(\", \");\n+\t\t\tfor (int i = 0; i < indexedParameters.size(); i++)\n+\t\t\t{\n+\t\t\t\tif (i > 0)\n+\t\t\t\t\tstr.append(\", \");\n \n-\t\t\tstr.append(i);\n-\t\t\tstr.append('=');\n-\t\t\tstr.append('[').append(indexedParameters.get(i)).append(']');\n+\t\t\t\tstr.append(i);\n+\t\t\t\tstr.append('=');\n+\t\t\t\tstr.append('[').append(indexedParameters.get(i)).append(']');\n+\t\t\t}\n \t\t}\n \n \t\tif (str.length() > 0)\n \t\t\tstr.append(\", \");\n \n-\t\tfor (int i = 0; i < namedParameters.size(); i++)\n+\t\tif (namedParameters != null)\n \t\t{\n-\t\t\tEntry entry = namedParameters.get(i);\n+\t\t\tfor (int i = 0; i < namedParameters.size(); i++)\n+\t\t\t{\n+\t\t\t\tEntry entry = namedParameters.get(i);\n \n-\t\t\tif (i > 0)\n-\t\t\t\tstr.append(\", \");\n+\t\t\t\tif (i > 0)\n+\t\t\t\t\tstr.append(\", \");\n \n-\t\t\tstr.append(entry.key);\n-\t\t\tstr.append('=');\n-\t\t\tstr.append('[').append(entry.value).append(']');\n+\t\t\t\tstr.append(entry.key);\n+\t\t\t\tstr.append('=');\n+\t\t\t\tstr.append('[').append(entry.value).append(']');\n+\t\t\t}\n \t\t}\n \t\treturn str.toString();\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/145b9f00b17e143c12a26527213e3eddc62026fc/wicket-request/src/main/java/org/apache/wicket/request/mapper/parameter/PageParameters.java",
                "sha": "190c4f2f88667d52327ef10adde854aa21505a32",
                "status": "modified"
            }
        ],
        "message": "WICKET-3270  NPE in PageParameters toString method\n\nAdd a check for null for indexed and named parameters before iterating on them\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1050689 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d6033493518adcddc3e28171b8ebd9d329d127c7",
        "repo": "wicket",
        "unit_tests": [
            "PageParametersTest.java"
        ]
    },
    "wicket_26bd939": {
        "bug_id": "wicket_26bd939",
        "commit": "https://github.com/apache/wicket/commit/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff/wicket/src/java/wicket/markup/MarkupCache.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/MarkupCache.java?ref=26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff",
                "deletions": 2,
                "filename": "wicket/src/java/wicket/markup/MarkupCache.java",
                "patch": "@@ -227,7 +227,10 @@ public final IMarkup getMarkup(final MarkupContainer<?> container,\n \t\t{\n \t\t\tsynchronized (markupCache)\n \t\t\t{\n-\t\t\t\tmarkup = markupCache.get(cacheKey);\n+\t\t\t\tif (cacheKey != null)\n+\t\t\t\t{\n+\t\t\t\t\tmarkup = markupCache.get(cacheKey);\n+\t\t\t\t}\n \n \t\t\t\t// Must Markup be loaded?\n \t\t\t\tif (markup == null)\n@@ -267,7 +270,10 @@ public final IMarkup getMarkup(final MarkupContainer<?> container,\n \n \t\t\t\t\t\t// Save any markup list (or absence of one) for next\n \t\t\t\t\t\t// time\n-\t\t\t\t\t\tmarkupCache.put(cacheKey, markup);\n+\t\t\t\t\t\tif (cacheKey != null)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tmarkupCache.put(cacheKey, markup);\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/26bd939daeac5bfbea2d267c5d43ec2a1f73e8ff/wicket/src/java/wicket/markup/MarkupCache.java",
                "sha": "c5cf8bbab00c5cd9ec22b0bf0c8ec788299d6ae0",
                "status": "modified"
            }
        ],
        "message": "fix NPE if cache key == null\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@461864 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0cbbfbf457fd9185f70df60179a0a7029d8a31d7",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_28583a2": {
        "bug_id": "wicket_28583a2",
        "commit": "https://github.com/apache/wicket/commit/28583a29c3e8367d93105c097f9826302809a477",
        "file": [
            {
                "additions": 11,
                "blob_url": "https://github.com/apache/wicket/blob/28583a29c3e8367d93105c097f9826302809a477/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "changes": 18,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java?ref=28583a29c3e8367d93105c097f9826302809a477",
                "deletions": 7,
                "filename": "wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "patch": "@@ -40,7 +40,11 @@\n {\n \tprivate static final long serialVersionUID = 1L;\n \n-\tprivate Form<?> form;\n+\t/**\n+\t * should never be accessed directly (thus the __ cause its overkil to create a super class),\n+\t * instead always use #getForm()\n+\t */\n+\tprivate Form<?> __form;\n \n \t/**\n \t * Constructor. This constructor can only be used when the component this behavior is attached\n@@ -65,7 +69,7 @@ public AjaxFormSubmitBehavior(String event)\n \tpublic AjaxFormSubmitBehavior(Form<?> form, String event)\n \t{\n \t\tsuper(event);\n-\t\tthis.form = form;\n+\t\t__form = form;\n \n \t\tif (form != null)\n \t\t{\n@@ -79,20 +83,20 @@ public AjaxFormSubmitBehavior(Form<?> form, String event)\n \t */\n \tprotected Form<?> getForm()\n \t{\n-\t\tif (form == null)\n+\t\tif (__form == null)\n \t\t{\n \t\t\t// try to find form in the hierarchy of owning component\n \t\t\tComponent component = getComponent();\n-\t\t\tform = component.findParent(Form.class);\n-\t\t\tif (form == null)\n+\t\t\t__form = component.findParent(Form.class);\n+\t\t\tif (__form == null)\n \t\t\t{\n \t\t\t\tthrow new IllegalStateException(\n \t\t\t\t\t\"form was not specified in the constructor and cannot \"\n \t\t\t\t\t\t+ \"be found in the hierarchy of the component this behavior \"\n \t\t\t\t\t\t+ \"is attached to\");\n \t\t\t}\n \t\t}\n-\t\treturn form;\n+\t\treturn __form;\n \t}\n \n \t/**\n@@ -139,7 +143,7 @@ protected void onEvent(AjaxRequestTarget target)\n \t\t{\n \t\t\tonSubmit(target);\n \t\t}\n-\t\tif (form.findParent(Page.class) != null)\n+\t\tif (getForm().findParent(Page.class) != null)\n \t\t{\n \t\t\t/*\n \t\t\t * there can be cases when a form is replaced with another component in the onsubmit()",
                "raw_url": "https://github.com/apache/wicket/raw/28583a29c3e8367d93105c097f9826302809a477/wicket/src/main/java/org/apache/wicket/ajax/form/AjaxFormSubmitBehavior.java",
                "sha": "3e7cd63946b080b671a32656f32cadf62d56fee4",
                "status": "modified"
            }
        ],
        "message": "WICKET-2330 fixed npe in ajaxformsubmitbehavior\nIssue: WICKET-2330\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@785696 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8ee095bf725cacd450d72411e609f007404df3f4",
        "repo": "wicket",
        "unit_tests": [
            "AjaxFormSubmitBehaviorTest.java"
        ]
    },
    "wicket_2b59506": {
        "bug_id": "wicket_2b59506",
        "commit": "https://github.com/apache/wicket/commit/2b5950625e73ad1ae56e346a0d250445f9c1ae9b",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/2b5950625e73ad1ae56e346a0d250445f9c1ae9b/wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/protocol/http/WebApplication.java?ref=2b5950625e73ad1ae56e346a0d250445f9c1ae9b",
                "deletions": 2,
                "filename": "wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "patch": "@@ -270,12 +270,11 @@ public final WicketFilter getWicketFilter()\n \t */\n \tpublic final void mount(IRequestTargetUrlCodingStrategy encoder)\n \t{\n-\t\tcheckMountPath(encoder.getMountPath());\n-\n \t\tif (encoder == null)\n \t\t{\n \t\t\tthrow new IllegalArgumentException(\"Encoder must be not null\");\n \t\t}\n+\t\tcheckMountPath(encoder.getMountPath());\n \n \t\tgetRequestCycleProcessor().getRequestCodingStrategy().mount(encoder);\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/2b5950625e73ad1ae56e346a0d250445f9c1ae9b/wicket/src/main/java/wicket/protocol/http/WebApplication.java",
                "sha": "0a578372ac45fe7bbeded20e5c9ff7cb42448500",
                "status": "modified"
            }
        ],
        "message": "do NPE check where it makes sense\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@529103 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ec80b3c774b9ed113fe694484dd6d14dbc5a3a7f",
        "repo": "wicket",
        "unit_tests": [
            "WebApplicationTest.java"
        ]
    },
    "wicket_2bc1b27": {
        "bug_id": "wicket_2bc1b27",
        "commit": "https://github.com/apache/wicket/commit/2bc1b27ed93d3a53dbd15c9fab706eb71481151e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/2bc1b27ed93d3a53dbd15c9fab706eb71481151e/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java?ref=2bc1b27ed93d3a53dbd15c9fab706eb71481151e",
                "deletions": 2,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "patch": "@@ -97,8 +97,11 @@\n \t */\n \tpublic void destroy()\n \t{\n-\t\tthis.webApplication.internalDestroy();\n-\t\tthis.webApplication = null;\n+\t\tif (this.webApplication != null)\n+\t\t{\n+\t\t\tthis.webApplication.internalDestroy();\n+\t\t\tthis.webApplication = null;\n+\t\t}\n \t}\n \n \t/**\n@@ -211,6 +214,7 @@ public final void doGet(final HttpServletRequest servletRequest,\n \t\t\t\t\t// Try to see if there is a redirect stored\n \t\t\t\t\tISessionStore sessionStore = webApplication.getSessionStore();\n \t\t\t\t\tString sessionId = sessionStore.getSessionId(request, false);\n+\t\t\t\t\tSystem.out.println(\"THOOF-WICKET: Redirect to buffer for session id \" + sessionId);\n \t\t\t\t\tif (sessionId != null)\n \t\t\t\t\t{\n \t\t\t\t\t\tBufferedHttpServletResponse bufferedResponse = webApplication",
                "raw_url": "https://github.com/apache/wicket/raw/2bc1b27ed93d3a53dbd15c9fab706eb71481151e/jdk-1.4/wicket/src/main/java/org/apache/wicket/protocol/http/WicketFilter.java",
                "sha": "2f2f5c100910d8fcd5d53c1ee322e8427e4b4eda",
                "status": "modified"
            }
        ],
        "message": "Fix NPE on destroying when filter did not fully set up.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@541377 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/58e5c44174ace7106d4afe5cdd847dc4bbcbe3cf",
        "repo": "wicket",
        "unit_tests": [
            "WicketFilterTest.java"
        ]
    },
    "wicket_2c19418": {
        "bug_id": "wicket_2c19418",
        "commit": "https://github.com/apache/wicket/commit/2c194180a5c2660a70ae1121cd12ce355afebc52",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java?ref=2c194180a5c2660a70ae1121cd12ce355afebc52",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "patch": "@@ -1979,7 +1979,8 @@ public final void render(final MarkupStream markupStream)\n \t\t\t\tlog.debug(\"End render \" + this);\n \t\t\t}\n \t\t}\n-\t\telse\n+\t\t// markupStream is null when rendering a page\n+\t\telse if (markupStream != null)\n \t\t{\n \t\t\tif (getFlag(FLAG_PLACEHOLDER))\n \t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/2c194180a5c2660a70ae1121cd12ce355afebc52/jdk-1.4/wicket/src/main/java/org/apache/wicket/Component.java",
                "sha": "8dc71e8c5edd275c83f2ab196f363adc5c3d7bdc",
                "status": "modified"
            }
        ],
        "message": "WICKET-738 setVisible(false) on Page throws NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@555407 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cd6e324a6751689013539f14d55085f3efc9c2ba",
        "repo": "wicket",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "wicket_2f0d105": {
        "bug_id": "wicket_2f0d105",
        "commit": "https://github.com/apache/wicket/commit/2f0d10586617093046cf60909622f2c8f5be8d6a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/2f0d10586617093046cf60909622f2c8f5be8d6a/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java?ref=2f0d10586617093046cf60909622f2c8f5be8d6a",
                "deletions": 1,
                "filename": "wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "patch": "@@ -326,7 +326,8 @@ protected FeedbackMessagesModel newFeedbackMessagesModel()\n \t */\n \tprotected Component newMessageDisplayComponent(String id, FeedbackMessage message)\n \t{\n-\t\tLabel label = new Label(id, message.getMessage().toString());\n+\t\tSerializable serializable = message.getMessage();\n+\t\tLabel label = new Label(id, (serializable == null) ? \"\" : serializable.toString());\n \t\tlabel.setEscapeModelStrings(FeedbackPanel.this.getEscapeModelStrings());\n \t\treturn label;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/2f0d10586617093046cf60909622f2c8f5be8d6a/wicket/src/main/java/org/apache/wicket/markup/html/panel/FeedbackPanel.java",
                "sha": "7182eaeb2ce712193137b77aef7869d323feeae0",
                "status": "modified"
            }
        ],
        "message": "WICKET-1780 NPE in feedback panel\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683906 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "repo": "wicket",
        "unit_tests": [
            "FeedbackPanelTest.java"
        ]
    },
    "wicket_32a40bc": {
        "bug_id": "wicket_32a40bc",
        "commit": "https://github.com/apache/wicket/commit/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
        "file": [
            {
                "additions": 30,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "changes": 31,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "patch": "@@ -17,14 +17,17 @@\n package org.apache.wicket.markup.parser;\n \n import java.text.ParseException;\n+import java.util.concurrent.atomic.AtomicLong;\n \n+import org.apache.wicket.MetaDataKey;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.HtmlSpecialTag;\n import org.apache.wicket.markup.Markup;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupParser;\n import org.apache.wicket.markup.MarkupResourceStream;\n import org.apache.wicket.markup.MarkupStream;\n+import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,7 +48,12 @@\n \n \t/** The next MarkupFilter in the chain */\n \tprivate IMarkupFilter parent;\n-\n+\t\n+\t/** A key for a request-relative counter (see {@link #getRequestUniqueId()}) **/\n+\tprivate final static MetaDataKey<AtomicLong> REQUEST_COUNTER_KEY = new MetaDataKey<AtomicLong>()\n+\t{\n+\t};\n+\t\t\n \t/**\n \t * Construct.\n \t */\n@@ -190,4 +198,25 @@ else if (markupResourceStream != null)\n \t\t}\n \t\treturn wicketNamespace;\n \t}\n+\t\n+\t/**\n+\t * Returns an id using a request-relative counter. This can be\n+\t * useful for autocomponent tags that needs to get tag id.\n+\t * \n+\t * @return\n+\t * \t\tthe request-relative id\n+\t */\n+\tprotected long getRequestUniqueId()\n+\t{\n+\t\tAtomicLong counter = RequestCycle.get().getMetaData(REQUEST_COUNTER_KEY);\n+\t\t\n+\t\tif (counter == null)\n+\t\t{\n+\t\t\tcounter = new AtomicLong();\n+\t\t\t\n+\t\t\tRequestCycle.get().setMetaData(REQUEST_COUNTER_KEY, counter);\n+\t\t}\n+\t\t\n+\t\treturn counter.getAndIncrement();\n+\t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/AbstractMarkupFilter.java",
                "sha": "6478da26547d265dbe05a1edea4f5749e4c42d8c",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "patch": "@@ -19,7 +19,6 @@\n import java.text.ParseException;\n import java.util.ArrayDeque;\n import java.util.Deque;\n-import java.util.concurrent.atomic.AtomicLong;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -73,14 +72,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t/** Stack of <wicket:enclosure> tags */\n \tprivate Deque<ComponentTag> stack;\n \n-\t/**\n-\t * Used to assign unique ids to enclosures\n-\t * \n-\t * TODO queueing: there has to be a better way of doing this, perhaps some merged-markup-unique\n-\t * counter\n-\t */\n-\tprivate static final AtomicLong index = new AtomicLong();\n-\n \t/** The id of the first wicket tag inside the enclosure */\n \tprivate String childId;\n \n@@ -109,7 +100,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t// If open tag, than put the tag onto the stack\n \t\t\tif (tag.isOpen())\n \t\t\t{\n-\t\t\t\ttag.setId(tag.getId() + index.getAndIncrement());\n+\t\t\t\ttag.setId(tag.getId() + getRequestUniqueId());\n \t\t\t\ttag.setModified(true);\n \t\t\t\ttag.setAutoComponentFactory(FACTORY);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/EnclosureHandler.java",
                "sha": "b29da3bef70a4499a7c830f2b446d40c5f4e4453",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java?ref=32a40bc1de5302f17bbcc19cd3ab769b0dc0f274",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "patch": "@@ -18,7 +18,6 @@\n \n import java.text.ParseException;\n import java.util.Iterator;\n-import java.util.concurrent.atomic.AtomicInteger;\n \n import org.apache.wicket.Component;\n import org.apache.wicket.MarkupContainer;\n@@ -109,14 +108,6 @@ public Component newComponent(MarkupContainer container, ComponentTag tag)\n \t\t}\n \t};\n \n-\t\n-\t/** \n-\t * https://issues.apache.org/jira/browse/WICKET-5724\n-\t * \n-\t * Unique index to generate new tag ids.\n-\t * */\n-\tprivate final AtomicInteger componentIndex = new AtomicInteger();\n-\n \t/**\n \t * Constructor for the IComponentResolver role.\n \t */\n@@ -164,7 +155,7 @@ protected final MarkupElement onComponentTag(ComponentTag tag) throws ParseExcep\n \t\t\t\tif (tag.getId() == null)\n \t\t\t\t{\n \t\t\t\t\ttag.setId(getWicketRelativePathPrefix(null)\n-\t\t\t\t\t\t+ componentIndex.getAndIncrement());\n+\t\t\t\t\t\t+ getRequestUniqueId());\n \t\t\t\t\ttag.setAutoComponentTag(true);\n \t\t\t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/32a40bc1de5302f17bbcc19cd3ab769b0dc0f274/wicket-core/src/main/java/org/apache/wicket/markup/parser/filter/RelativePathPrefixHandler.java",
                "sha": "554df3edb071d8a2de01aebbf1fe95e8d5a371b1",
                "status": "modified"
            }
        ],
        "message": "WICKET-5904 NPE after editing a markup file in debug mode",
        "parent": "https://github.com/apache/wicket/commit/52d99f303bea3994a28d2f08c878909ef56044f1",
        "repo": "wicket",
        "unit_tests": [
            "RelativePathPrefixHandlerTest.java"
        ]
    },
    "wicket_35e9a11": {
        "bug_id": "wicket_35e9a11",
        "commit": "https://github.com/apache/wicket/commit/35e9a11b577db1cd427bc893fb4d95f091ead2b1",
        "file": [
            {
                "additions": 19,
                "blob_url": "https://github.com/apache/wicket/blob/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "changes": 35,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java?ref=35e9a11b577db1cd427bc893fb4d95f091ead2b1",
                "deletions": 16,
                "filename": "wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "patch": "@@ -218,26 +218,29 @@ private void writeObject(final ObjectOutputStream s) throws IOException\n \t\t\ts.defaultWriteObject();\n \n \t\t\t// prepare for serialization and store the pages\n-\t\t\tList<Serializable> l = new ArrayList<Serializable>();\n-\t\t\tIPageStore pageStore = getPageStore();\n-\t\t\tfor (IManageablePage p : pages)\n+\t\t\tList<Serializable> serializedPages = new ArrayList<Serializable>();\n+\t\t\tif (pages != null)\n \t\t\t{\n-\t\t\t\tSerializable preparedPage;\n-\t\t\t\tif (pageStore != null)\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n-\t\t\t\t}\n-\t\t\t\telse\n-\t\t\t\t{\n-\t\t\t\t\tpreparedPage = p;\n-\t\t\t\t}\n-\n-\t\t\t\tif (preparedPage != null)\n+\t\t\t\tIPageStore pageStore = getPageStore();\n+\t\t\t\tfor (IManageablePage p : pages)\n \t\t\t\t{\n-\t\t\t\t\tl.add(preparedPage);\n+\t\t\t\t\tSerializable preparedPage;\n+\t\t\t\t\tif (pageStore != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = pageStore.prepareForSerialization(sessionId, p);\n+\t\t\t\t\t}\n+\t\t\t\t\telse\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpreparedPage = p;\n+\t\t\t\t\t}\n+\n+\t\t\t\t\tif (preparedPage != null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tserializedPages.add(preparedPage);\n+\t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}\n-\t\t\ts.writeObject(l);\n+\t\t\ts.writeObject(serializedPages);\n \t\t}\n \n \t\t/**",
                "raw_url": "https://github.com/apache/wicket/raw/35e9a11b577db1cd427bc893fb4d95f091ead2b1/wicket-core/src/main/java/org/apache/wicket/page/PersistentPageManager.java",
                "sha": "c9fd4731e98007ad423cb7d7783425725c8e1033",
                "status": "modified"
            }
        ],
        "message": "WICKET-3691 NPE in PersistentPageManager.SessionEntry.writeObject(ObjectOutputStream) when using embedded Tomcat\n\nAdd check for pages == null.\nRename local variable to have more meaningful name (l -> serializedPages).\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1101019 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/af9cae20fa58d20fd8e833e0366ad99f4207bb9c",
        "repo": "wicket",
        "unit_tests": [
            "PersistentPageManagerTest.java"
        ]
    },
    "wicket_3b14566": {
        "bug_id": "wicket_3b14566",
        "commit": "https://github.com/apache/wicket/commit/3b1456662e3c75aa492921157c989e63e40f2a79",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=3b1456662e3c75aa492921157c989e63e40f2a79",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -93,7 +93,7 @@ public void propertiesLoaded(final String key)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @return The string resource\n \t * @throws MissingResourceException\n \t *             If resource not found and configuration dictates that\n@@ -111,7 +111,7 @@ public String getString(final String key, final Component component)\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -132,7 +132,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param model\n \t *            The model to use for OGNL substitutions in the strings\n \t *            (optional)\n@@ -156,7 +156,7 @@ public String getString(final String key, final Component component, final IMode\n \t * @param key\n \t *            The key to obtain the resource for\n \t * @param component\n-\t *            The component to get the resource for (optional)\n+\t *            The component to get the resource for\n \t * @param defaultValue\n \t *            The default value (optional)\n \t * @return The string resource",
                "raw_url": "https://github.com/apache/wicket/raw/3b1456662e3c75aa492921157c989e63e40f2a79/wicket/src/java/wicket/Localizer.java",
                "sha": "f83752067143e8814b52d383e016053ec7a10462",
                "status": "modified"
            }
        ],
        "message": "fixed: javadoc changed: [ 1350108 ] NPE in wicket.Localizer.getString()\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458241 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c2cde5946a27fdaf3904545871ce776f27958748",
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_3dd37b3": {
        "bug_id": "wicket_3dd37b3",
        "commit": "https://github.com/apache/wicket/commit/3dd37b3fb67a44cc44390848d18a96ebd3db220e",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=3dd37b3fb67a44cc44390848d18a96ebd3db220e",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -727,8 +727,8 @@ public MarkupContainer replace(final Component child)\n \n \t\tif (child.getParent() != this)\n \t\t{\n-\t\t\t// Add to map\n-\t\t\tfinal Component replaced = put(child);\n+\t\t\t// Get the child component to replace\n+\t\t\tfinal Component replaced = children_get(child.getId());\n \n \t\t\t// Look up to make sure it was already in the map\n \t\t\tif (replaced == null)\n@@ -737,7 +737,10 @@ public MarkupContainer replace(final Component child)\n \t\t\t\t\texceptionMessage(\"Cannot replace a component which has not been added: id='\" +\n \t\t\t\t\t\tchild.getId() + \"', component=\" + child));\n \t\t\t}\n-\n+\t\t\t\n+\t\t\t// Add to map\n+\t\t\tput(child);\n+\t\t\t\n \t\t\t// first remove the component.\n \t\t\tremovedComponent(replaced);\n ",
                "raw_url": "https://github.com/apache/wicket/raw/3dd37b3fb67a44cc44390848d18a96ebd3db220e/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "c01b90e4e56a54735917313c4c0ce8cc91a77dfa",
                "status": "modified"
            }
        ],
        "message": "WICKET-5912 NPE in Page#hasInvisibleTransparentChild",
        "parent": "https://github.com/apache/wicket/commit/5c5490dafbc29748abfda0441e002fe456c1ff31",
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_40790b6": {
        "bug_id": "wicket_40790b6",
        "commit": "https://github.com/apache/wicket/commit/40790b6e424b74008247900402c80ce1201c0806",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java?ref=40790b6e424b74008247900402c80ce1201c0806",
                "deletions": 1,
                "filename": "jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "patch": "@@ -81,11 +81,19 @@ public VelocityPanel(final String name, final IModel/* <Map> */model)\n \t */\n \tprivate Reader getTemplateReader()\n \t{\n-\t\tfinal String template = getTemplateResource().asString();\n+\t\tfinal IStringResourceStream resource = getTemplateResource();\n+\t\tif (resource == null)\n+\t\t{\n+\t\t\tthrow new IllegalArgumentException(\n+\t\t\t\t\t\"getTemplateResource must return a resource\");\n+\t\t}\n+\n+\t\tfinal String template = resource.asString();\n \t\tif (template != null)\n \t\t{\n \t\t\treturn new StringReader(template);\n \t\t}\n+\n \t\treturn null;\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/40790b6e424b74008247900402c80ce1201c0806/jdk-1.4/wicket-velocity/src/main/java/org/apache/wicket/velocity/markup/html/VelocityPanel.java",
                "sha": "64eef4ce7670002f4dfccd1e0d74b67a7283e4a0",
                "status": "modified"
            }
        ],
        "message": "throw exception with message rather than NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@535928 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/e6f106f7abb5bc78aa1634ff57e212acdd9588c0",
        "repo": "wicket",
        "unit_tests": [
            "VelocityPanelTest.java"
        ]
    },
    "wicket_42a640a": {
        "bug_id": "wicket_42a640a",
        "commit": "https://github.com/apache/wicket/commit/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "changes": 16,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 10,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "patch": "@@ -174,19 +174,15 @@ protected void onComponentTag(final ComponentTag tag)\n \t\t\t\t\"] contains a null model object, must be an object of type java.util.Collection\");\n \t\t}\n \n-\t\tif (group.hasRawInput())\n+\t\tfinal String raw = group.getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tfinal String[] inputArray = group.getRawInput().split(FormComponent.VALUE_SEPARATOR);\n-\n-\t\t\tif (inputArray != null)\n+\t\t\tfinal String[] values = raw.split(FormComponent.VALUE_SEPARATOR);\n+\t\t\tfor (String value : values)\n \t\t\t{\n-\t\t\t\tfor (String input : inputArray)\n+\t\t\t\tif (uuid.equals(value))\n \t\t\t\t{\n-\t\t\t\t\tif (uuid.equals(input))\n-\t\t\t\t\t{\n-\t\t\t\t\t\ttag.put(\"checked\", \"checked\");\n-\t\t\t\t\t}\n+\t\t\t\t\ttag.put(\"checked\", \"checked\");\n \t\t\t\t}\n \t\t\t}\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Check.java",
                "sha": "f0f6b1c3771ba057eeb31398d0bfc7226e7afb73",
                "status": "modified"
            },
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "changes": 19,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java?ref=42a640a57b4a773f2507bbb485ca24dd5fb0dfc5",
                "deletions": 11,
                "filename": "wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "patch": "@@ -221,22 +221,19 @@ boolean isSelected(final SelectOption<?> option)\n \t\tArgs.notNull(option, \"option\");\n \n \t\t// if the raw input is specified use that, otherwise use model\n-\t\tif (hasRawInput())\n+\t\tfinal String raw = getRawInput();\n+\t\tif (!Strings.isEmpty(raw))\n \t\t{\n-\t\t\t// Wicket-2949 getInputAsArray() might not be the raw input\n-\t\t\tString[] values = getRawInput().split(VALUE_SEPARATOR);\n-\t\t\tif (values != null && values.length > 0)\n+\t\t\tString[] values = raw.split(VALUE_SEPARATOR);\n+\t\t\tfor (int i = 0; i < values.length; i++)\n \t\t\t{\n-\t\t\t\tfor (int i = 0; i < values.length; i++)\n+\t\t\t\tString value = values[i];\n+\t\t\t\tif (value.equals(option.getValue()))\n \t\t\t\t{\n-\t\t\t\t\tString value = values[i];\n-\t\t\t\t\tif (value.equals(option.getValue()))\n-\t\t\t\t\t{\n-\t\t\t\t\t\treturn true;\n-\t\t\t\t\t}\n+\t\t\t\t\treturn true;\n \t\t\t\t}\n-\t\t\t\treturn false;\n \t\t\t}\n+\t\t\treturn false;\n \t\t}\n \n \t\treturn compareModels(getDefaultModelObject(), option.getDefaultModelObject());",
                "raw_url": "https://github.com/apache/wicket/raw/42a640a57b4a773f2507bbb485ca24dd5fb0dfc5/wicket-extensions/src/main/java/org/apache/wicket/extensions/markup/html/form/select/Select.java",
                "sha": "45f8b373938ff16c9ac32e89cfb5baa6d2b84394",
                "status": "modified"
            }
        ],
        "message": "AAU-2949 fix NPE. hasRawInput() can return null for check boxes...",
        "parent": "https://github.com/apache/wicket/commit/b2dc52d6f522ad9c9aabcd6f25c1242f5071bc25",
        "repo": "wicket",
        "unit_tests": [
            "SelectTest.java"
        ]
    },
    "wicket_4fc4621": {
        "bug_id": "wicket_4fc4621",
        "commit": "https://github.com/apache/wicket/commit/4fc462187d294222372ef73951c5d4c849c148d5",
        "file": [
            {
                "additions": 20,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "changes": 32,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/RequestCycle.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 12,
                "filename": "wicket/src/main/java/wicket/RequestCycle.java",
                "patch": "@@ -890,14 +890,6 @@ private void detach()\n \t\t// clear the used pagemap for this thread, \n \t\t// maybe we can move this a few lines above to have a but more\n \t\t// concurrency (session.update)\n-\t\ttry\n-\t\t{\n-\t\t\tsession.requestDetached();\n-\t\t}\n-\t\tcatch(RuntimeException re)\n-\t\t{\n-\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n-\t\t}\n \t\tif (getResponse() instanceof BufferedWebResponse)\n \t\t{\n \t\t\ttry\n@@ -910,12 +902,28 @@ private void detach()\n \t\t\t}\n \t\t}\n \n-\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n-\t\tif (requestLogger != null)\n+\t\ttry\n \t\t{\n-\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\tIRequestLogger requestLogger = getApplication().getRequestLogger();\n+\t\t\tif (requestLogger != null)\n+\t\t\t{\n+\t\t\t\trequestLogger.requestTime((System.currentTimeMillis() - startTime));\n+\t\t\t}\n \t\t}\n-\t\t\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error in the RequestLogger ending.\", re);\n+\t\t}\n+\n+\t\ttry\n+\t\t{\n+\t\t\tsession.requestDetached();\n+\t\t}\n+\t\tcatch(RuntimeException re)\n+\t\t{\n+\t\t\tlog.error(\"there was an error detaching the request from the session \" + session + \".\", re);\n+\t\t}\n+\n \t\ttry\n \t\t{\n \t\t\tonEndRequest();",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/RequestCycle.java",
                "sha": "2cadf154c26b9eb5c6c645cab720bae1745beca3",
                "status": "modified"
            },
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/protocol/http/RequestLogger.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 10,
                "filename": "wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "patch": "@@ -202,28 +202,28 @@ public void requestTime(long timeTaken)\n \t\tRequestData rd = (RequestData)currentRequest.get();\n \t\tif(rd != null)\n \t\t{\n+\t\t\tsynchronized (this)\n+\t\t\t{\n+\t\t\t\tif(active > 0)\n+\t\t\t\t{\n+\t\t\t\t\trd.setActiveRequest(active--);\n+\t\t\t\t}\n+\t\t\t}\n \t\t\tSession session = Session.get();\n \t\t\tString sessionId = session.getId();\n \t\t\trd.setSessionId(sessionId);\n-\t\t\t\n+\n \t\t\tObject sessionInfo = getSessionInfo(session);\n \t\t\trd.setSessionInfo(sessionInfo);\n-\t\t\t\n+\n \t\t\tlong sizeInBytes = -1;\n \t\t\tif(Application.get().getRequestLoggerSettings().getRecordSessionSize())\n \t\t\t{\n \t\t\t\tsizeInBytes = session.getSizeInBytes();\n \t\t\t}\n \t\t\trd.setSessionSize(sizeInBytes);\n \t\t\trd.setTimeTaken(timeTaken);\n-\t\t\tsynchronized (this)\n-\t\t\t{\n-\t\t\t\tif(active > 0)\n-\t\t\t\t{\n-\t\t\t\t\trd.setActiveRequest(active--);\n-\t\t\t\t}\n-\t\t\t}\n-\t\t\t\n+\n \t\t\trequests.add(0, rd);\n \t\t\tcurrentRequest.set(null);\n \t\t\tif(sessionId != null)",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/protocol/http/RequestLogger.java",
                "sha": "77402191b69e23c326d5aecd6c427062ad4baf79",
                "status": "modified"
            },
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/util/lang/Objects.java?ref=4fc462187d294222372ef73951c5d4c849c148d5",
                "deletions": 2,
                "filename": "wicket/src/main/java/wicket/util/lang/Objects.java",
                "patch": "@@ -1052,16 +1052,18 @@ public static Number newInteger(int type, long value)\n \t */\n \tpublic static long sizeof(final Object object)\n \t{\n+\t\tif (object == null) return 0;\n \t\ttry\n \t\t{\n \t\t\tfinal ByteCountingOutputStream out = new ByteCountingOutputStream();\n \t\t\tnew ObjectOutputStream(out).writeObject(object);\n \t\t\tout.close();\n \t\t\treturn out.size();\n \t\t}\n-\t\tcatch (IOException e)\n+\t\tcatch (Exception e)\n \t\t{\n-\t\t\treturn -1;\n+\t\t\tlog.warn(\"Size of failed of object: \" + object.getClass().getName(), e);\n+\t\t\treturn 0;\n \t\t}\n \t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/4fc462187d294222372ef73951c5d4c849c148d5/wicket/src/main/java/wicket/util/lang/Objects.java",
                "sha": "c5f166c38b1712e073263b39c2eeb0918020ad19",
                "status": "modified"
            }
        ],
        "message": "WICKET-241, WICKET-240, all stages in requestcycle called again by wrapping methods that can generate exceptions in a try/catch block. Possible NPE's in calculation of size also captured, which was the cause of resource leaks (e.g. non-closed database connections when resource clean up is done in requestcycle.detach)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@501911 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/697a5cf7909733bc41f176dfc8969f96144713ee",
        "repo": "wicket",
        "unit_tests": [
            "ObjectsTest.java"
        ]
    },
    "wicket_4fe91d8": {
        "bug_id": "wicket_4fe91d8",
        "commit": "https://github.com/apache/wicket/commit/4fe91d81aee44702ad547920f3ed48982eeeeec2",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Localizer.java?ref=4fe91d81aee44702ad547920f3ed48982eeeeec2",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/Localizer.java",
                "patch": "@@ -405,7 +405,7 @@ private List getComponentStack(final Component component)\n \t\tif (!(component instanceof Page))\n \t\t{\n \t\t\tMarkupContainer container = component.getParent();\n-\t\t\twhile (true)\n+\t\t\twhile (container != null)\n \t\t\t{\n \t\t\t\tsearchStack.add(container.getClass());\n \t\t\t\tif (container instanceof Page)",
                "raw_url": "https://github.com/apache/wicket/raw/4fe91d81aee44702ad547920f3ed48982eeeeec2/wicket/src/java/wicket/Localizer.java",
                "sha": "7dc2b13dc0448b0321e56d9e3b4fe4f806ae7fb8",
                "status": "modified"
            }
        ],
        "message": "fixed NPE if getParent() returned null\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@458757 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7756a1904a49e4f850e1401be63d761a4627b28a",
        "repo": "wicket",
        "unit_tests": [
            "LocalizerTest.java"
        ]
    },
    "wicket_59b3e31": {
        "bug_id": "wicket_59b3e31",
        "commit": "https://github.com/apache/wicket/commit/59b3e318762733adea00cfe3b31c5dd25e4d2147",
        "file": [
            {
                "additions": 21,
                "blob_url": "https://github.com/apache/wicket/blob/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "changes": 42,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java?ref=59b3e318762733adea00cfe3b31c5dd25e4d2147",
                "deletions": 21,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "patch": "@@ -1503,38 +1503,38 @@ protected final void validateValidators()\n \n \t\tIValidator<T> validator = null;\n \n-\t\ttry\n+\t\tfor (Behavior behavior : getBehaviors())\n \t\t{\n-\t\t\tfor (Behavior behavior : getBehaviors())\n+\t\t\tvalidator = null;\n+\t\t\tif (behavior instanceof ValidatorAdapter)\n \t\t\t{\n-\t\t\t\tvalidator = null;\n-\t\t\t\tif (behavior instanceof ValidatorAdapter)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n-\t\t\t\t}\n-\t\t\t\telse if (behavior instanceof IValidator)\n-\t\t\t\t{\n-\t\t\t\t\tvalidator = (IValidator<T>)behavior;\n-\t\t\t\t}\n-\t\t\t\tif (validator != null)\n+\t\t\t\tvalidator = ((ValidatorAdapter<T>)behavior).getValidator();\n+\t\t\t}\n+\t\t\telse if (behavior instanceof IValidator)\n+\t\t\t{\n+\t\t\t\tvalidator = (IValidator<T>)behavior;\n+\t\t\t}\n+\t\t\tif (validator != null)\n+\t\t\t{\n+\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n \t\t\t\t{\n-\t\t\t\t\tif (isNull == false || validator instanceof INullAcceptingValidator<?>)\n+\t\t\t\t\ttry\n \t\t\t\t\t{\n \t\t\t\t\t\tvalidator.validate(validatable);\n \t\t\t\t\t}\n-\t\t\t\t\tif (!isValid())\n+\t\t\t\t\tcatch (Exception e)\n \t\t\t\t\t{\n-\t\t\t\t\t\tbreak;\n+\t\t\t\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n+\t\t\t\t\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n+\t\t\t\t\t\t\t\t\" on component \" + getPath(), e);\n \t\t\t\t\t}\n \t\t\t\t}\n+\t\t\t\tif (!isValid())\n+\t\t\t\t{\n+\t\t\t\t\tbreak;\n+\t\t\t\t}\n \t\t\t}\n \t\t}\n-\t\tcatch (Exception e)\n-\t\t{\n-\t\t\tthrow new WicketRuntimeException(\"Exception '\" + e.getMessage() +\n-\t\t\t\t\"' occurred during validation \" + validator.getClass().getName() +\n-\t\t\t\t\" on component \" + getPath(), e);\n-\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/59b3e318762733adea00cfe3b31c5dd25e4d2147/wicket-core/src/main/java/org/apache/wicket/markup/html/form/FormComponent.java",
                "sha": "660cf5393620e7f470c83c30ab4eef91f6f37916",
                "status": "modified"
            }
        ],
        "message": "Move the try/catch just around the 'validator.validate()' call. Otherwise the construction of the error message will fail with NPE because 'validator' my be null",
        "parent": "https://github.com/apache/wicket/commit/9575f0d93901b7163a46c2ea38f43f135ecd7d50",
        "repo": "wicket",
        "unit_tests": [
            "FormComponentTest.java"
        ]
    },
    "wicket_6073fbd": {
        "bug_id": "wicket_6073fbd",
        "commit": "https://github.com/apache/wicket/commit/6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "changes": 3,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java?ref=6073fbd0585602fcca3d09e10dc89fcbc6a629c4",
                "deletions": 1,
                "filename": "wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "patch": "@@ -188,7 +188,8 @@ private final String getBeanNameOfClass(final ApplicationContext ctx, final Clas\n \t\t\t\tBeanDefinition beanDef = getBeanDefinition(\n \t\t\t\t\t((AbstractApplicationContext)ctx).getBeanFactory(), possibility);\n \t\t\t\tif (BeanFactoryUtils.isFactoryDereference(possibility) ||\n-\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") || !beanDef.isAutowireCandidate())\n+\t\t\t\t\tpossibility.startsWith(\"scopedTarget.\") ||\n+\t\t\t\t\t(beanDef != null && !beanDef.isAutowireCandidate()))\n \t\t\t\t{\n \t\t\t\t\tit.remove();\n \t\t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/6073fbd0585602fcca3d09e10dc89fcbc6a629c4/wicket-spring/src/main/java/org/apache/wicket/spring/injection/annot/AnnotProxyFieldValueFactory.java",
                "sha": "4a8880c05e58e76b6a753329d71f51fa36eeda78",
                "status": "modified"
            }
        ],
        "message": "Fixes WICKET-3632: NPE while injecting\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1095885 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/90d7803ba60c644eef9bbbbf3dc792d2ab137aa6",
        "repo": "wicket",
        "unit_tests": [
            "AnnotProxyFieldValueFactoryTest.java"
        ]
    },
    "wicket_689669c": {
        "bug_id": "wicket_689669c",
        "commit": "https://github.com/apache/wicket/commit/689669c193ebc7a5815ded063333a942450eea68",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/689669c193ebc7a5815ded063333a942450eea68/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java?ref=689669c193ebc7a5815ded063333a942450eea68",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -432,7 +432,11 @@ public Component newAutoComponent(final MarkupContainer container, final String\n \t\t\t\t}\n \n \t\t\t\t// Make sure base markup pages (inheritance) are handled correct\n-\t\t\t\tMarkupContainer parentWithContainer = container.findParentWithAssociatedMarkup();\n+\t\t\t\tMarkupContainer parentWithContainer = container;\n+\t\t\t\tif (container.getParent() != null)\n+\t\t\t\t{\n+\t\t\t\t\tparentWithContainer = container.findParentWithAssociatedMarkup();\n+\t\t\t\t}\n \t\t\t\tif ((parentWithContainer instanceof Page) && !infoPath.startsWith(\".\") &&\n \t\t\t\t\t\tpage.getMarkupStream().isMergedMarkup())\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/689669c193ebc7a5815ded063333a942450eea68/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "54c9e86b047fb41610ef555e7cf86231b44d9678",
                "status": "modified"
            }
        ],
        "message": "fix NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@564872 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/3d465c25b8a06c19435488185e2e51e9d0c73fa5",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_729e2ec": {
        "bug_id": "wicket_729e2ec",
        "commit": "https://github.com/apache/wicket/commit/729e2ec3393c406e73319168488b0a22b4ae1ade",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/729e2ec3393c406e73319168488b0a22b4ae1ade/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java?ref=729e2ec3393c406e73319168488b0a22b4ae1ade",
                "deletions": 1,
                "filename": "wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "patch": "@@ -206,7 +206,7 @@ public final String getModelValue()\n \t{\n \t\t// Get the list of selected values\n \t\tObject modelObject = getModelObject();\n-\t\tif (!(modelObject instanceof Collection))\n+\t\tif (modelObject != null && !(modelObject instanceof Collection))\n \t\t{\n \t\t\tthrow new WicketRuntimeException(\n \t\t\t\t\t\"Model object for a ListMultipleChoice must be a Collection (found \"",
                "raw_url": "https://github.com/apache/wicket/raw/729e2ec3393c406e73319168488b0a22b4ae1ade/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "sha": "f99853a80432355bbb07fb71746df63ee2074349",
                "status": "modified"
            }
        ],
        "message": "WICKET-231: npe fix for sanicy check patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@499072 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/b415fd24cfa6468e6fde9ffd9ca97b318cbb03bb",
        "repo": "wicket",
        "unit_tests": [
            "ListMultipleChoiceTest.java"
        ]
    },
    "wicket_743503c": {
        "bug_id": "wicket_743503c",
        "commit": "https://github.com/apache/wicket/commit/743503c86e52eb965bf73c47164e8f2f1b754e7a",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/743503c86e52eb965bf73c47164e8f2f1b754e7a/wicket/src/java/wicket/markup/MarkupCache.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/MarkupCache.java?ref=743503c86e52eb965bf73c47164e8f2f1b754e7a",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/MarkupCache.java",
                "patch": "@@ -91,7 +91,7 @@ public final MarkupStream getMarkupStream(final MarkupContainer container, final\n \t\t\t// throw exception since there is no associated markup\n \t\t\tthrow new WicketRuntimeException(\n \t\t\t\t\t\"Markup not found. Component class: \"\n-\t\t\t\t\t\t\t+ clazz.getName()\n+\t\t\t\t\t\t\t+ (clazz != null ? clazz.getName() : container.getClass().getName())\n \t\t\t\t\t\t\t+ \" Enable debug messages for wicket.util.resource.Resource to get a list of all filenames tried.\");\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/743503c86e52eb965bf73c47164e8f2f1b754e7a/wicket/src/java/wicket/markup/MarkupCache.java",
                "sha": "4b848dbb1635013237d3106dc7afd52e0c8ff5b4",
                "status": "modified"
            }
        ],
        "message": "fixed [1182843 ] NPE in exception generation process\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@456498 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/8c90a9193a82d1b21ac17873654eaf56aec9e88a",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_74b92ab": {
        "bug_id": "wicket_74b92ab",
        "commit": "https://github.com/apache/wicket/commit/74b92abb83242b7bacd01dc9ddb8d78330ca5f76",
        "file": [
            {
                "additions": 15,
                "blob_url": "https://github.com/apache/wicket/blob/74b92abb83242b7bacd01dc9ddb8d78330ca5f76/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 28,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java?ref=74b92abb83242b7bacd01dc9ddb8d78330ca5f76",
                "deletions": 13,
                "filename": "wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -440,20 +440,22 @@ public Component newAutoComponent(final MarkupContainer container, final String\n \t\t\t\t\t\t&& page.getMarkupStream().isMergedMarkup())\n \t\t\t\t{\n \t\t\t\t\tClass clazz = container.getMarkupStream().getTag().getMarkupClass();\n-\t\t\t\t\t\n-\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n-\t\t\t\t\t// current page\n-\t\t\t\t\tclassName = Packages.extractPackageName(clazz) + \".\" + infoPath;\n-\t\n-\t\t\t\t\ttry\n+\t\t\t\t\tif (clazz != null)\n \t\t\t\t\t{\n-\t\t\t\t\t\tclazz = defaultClassResolver.resolveClass(className);\n-\t\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pathInfo.getPageParameters());\n-\t\t\t\t\t}\n-\t\t\t\t\tcatch (WicketRuntimeException ex)\n-\t\t\t\t\t{\n-\t\t\t\t\t\tlog.warn(\"Did not find corresponding java class: \" + className);\n-\t\t\t\t\t\t// fall through\n+\t\t\t\t\t\t// Href is relative. Resolve the url given relative to the\n+\t\t\t\t\t\t// current page\n+\t\t\t\t\t\tclassName = Packages.extractPackageName(clazz) + \".\" + infoPath;\n+\t\n+\t\t\t\t\t\ttry\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tclazz = defaultClassResolver.resolveClass(className);\n+\t\t\t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pathInfo.getPageParameters());\n+\t\t\t\t\t\t}\n+\t\t\t\t\t\tcatch (WicketRuntimeException ex)\n+\t\t\t\t\t\t{\n+\t\t\t\t\t\t\tlog.warn(\"Did not find corresponding java class: \" + className);\n+\t\t\t\t\t\t\t// fall through\n+\t\t\t\t\t\t}\n \t\t\t\t\t}\n \t\t\t\t}\n \t\t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/74b92abb83242b7bacd01dc9ddb8d78330ca5f76/wicket/src/java/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "bb6ec333055c97048610ea4a95a73fd847bb2275",
                "status": "modified"
            }
        ],
        "message": "fixed NPE and extended the unit test (provided by Thomas Singer)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@460162 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/af8bc0ceff7d99d4bb431a9538974acee58d3680",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_7614520": {
        "bug_id": "wicket_7614520",
        "commit": "https://github.com/apache/wicket/commit/7614520e94eb49cb2e5c2c560d055b18c8785301",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 15,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=7614520e94eb49cb2e5c2c560d055b18c8785301",
                "deletions": 8,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -1319,9 +1319,9 @@ protected void delegateSubmit(IFormSubmittingComponent submittingComponent)\n \t\tForm formToProcess = this;\n \t\tif (submittingComponent != null)\n \t\t{\n-\t\t\tsubmittingComponent.onSubmit();\n \t\t\t// use the form which the submittingComponent has submitted for further processing\n \t\t\tformToProcess = submittingComponent.getForm();\n+\t\t\tsubmittingComponent.onSubmit();\n \t\t}\n \n \t\t// Model was successfully updated with valid data\n@@ -1368,13 +1368,12 @@ protected final String getJavascriptId()\n \n \n \t/**\n-\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in \n-\t * the template, \"post\" is the default. Note that the markup-declared HTTP method may not\n-\t * correspond to the one actually used to submit the form; in an Ajax submit, for example, \n-\t * JavaScript event handlers may submit the form with a \"get\" even when the form method is \n-\t * declared as \"post.\" Therefore this method should not be considered a guarantee of the \n-\t * HTTP method used, but a value for the markup only.\n-\t * Override if you have a requirement to alter this behavior.\n+\t * Gets the HTTP submit method that will appear in form markup. If no method is specified in the\n+\t * template, \"post\" is the default. Note that the markup-declared HTTP method may not correspond\n+\t * to the one actually used to submit the form; in an Ajax submit, for example, JavaScript event\n+\t * handlers may submit the form with a \"get\" even when the form method is declared as \"post.\"\n+\t * Therefore this method should not be considered a guarantee of the HTTP method used, but a\n+\t * value for the markup only. Override if you have a requirement to alter this behavior.\n \t * \n \t * @return the submit method specified in markup.\n \t */",
                "raw_url": "https://github.com/apache/wicket/raw/7614520e94eb49cb2e5c2c560d055b18c8785301/jdk-1.4/wicket/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "0d712f2df35f973b53ace581e2ba31bb7ca108d8",
                "status": "modified"
            }
        ],
        "message": "WICKET-1430: Form processing throws NPE if button.onsubmit() moves the button or its parents out of the component hierarchy\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@638021 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/0d0a8b78760f7dd7a984df0ab6e6329755fb7f3f",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_7cc3599": {
        "bug_id": "wicket_7cc3599",
        "commit": "https://github.com/apache/wicket/commit/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java?ref=7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f",
                "deletions": 5,
                "filename": "wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "patch": "@@ -186,8 +186,10 @@ public final String getModelValue()\n \t{\n \t\t// Get the list of selected values\n \t\tObject modelObject = getModelObject();\n-\t\tif (! (modelObject instanceof Collection))\n-\t\t\tthrow new WicketRuntimeException(\"Model object for a ListMultipleChoice must be a Collection (found \" + modelObject.getClass() + \")\");\n+\t\tif (modelObject != null && !(modelObject instanceof Collection))\n+\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\"Model object for a ListMultipleChoice must be a Collection (found \"\n+\t\t\t\t\t\t\t+ modelObject.getClass() + \")\");\n \t\tfinal Collection selectedValues = (Collection)modelObject;\n \t\tfinal AppendingStringBuffer buffer = new AppendingStringBuffer();\n \t\tif (selectedValues != null)\n@@ -235,7 +237,7 @@ protected final void onComponentTag(final ComponentTag tag)\n \t{\n \t\tsuper.onComponentTag(tag);\n \t\ttag.put(\"multiple\", \"multiple\");\n-\t\t\n+\n \t\tif (!tag.getAttributes().containsKey(\"size\"))\n \t\t{\n \t\t\ttag.put(\"size\", Math.min(maxRows, getChoices().size()));\n@@ -272,7 +274,7 @@ protected Object convertValue(String[] ids) throws ConversionException\n \t\t}\n \t\treturn selectedValues;\n \t}\n-\t\n+\n \t/**\n \t * @see FormComponent#updateModel()\n \t */\n@@ -282,7 +284,8 @@ public void updateModel()\n \t\tif (selectedValues != null)\n \t\t{\n \t\t\tif (getModelObject() != selectedValues)\n-\t\t\t\tthrow new WicketRuntimeException(\"Updating a ListMultipleChoice works by modifying the underlying model object in-place, so please make sure that getObject() always returns the same Collection instance!\");\n+\t\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\t\"Updating a ListMultipleChoice works by modifying the underlying model object in-place, so please make sure that getObject() always returns the same Collection instance!\");\n \t\t\tmodelChanging();\n \t\t\tselectedValues.clear();\n \t\t\tselectedValues.addAll((Collection)getConvertedInput());",
                "raw_url": "https://github.com/apache/wicket/raw/7cc3599025cdf4c4fcd64e3d7be32cf29bbf4c2f/wicket/src/main/java/wicket/markup/html/form/ListMultipleChoice.java",
                "sha": "4ac77c695b6b162ff85a7b35f183b7802a9badc7",
                "status": "modified"
            }
        ],
        "message": "WICKET-231: npe fix for sanicy check patch\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/branches/wicket-1.x@499073 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/81275860a9a4b82e894b23328b1d4232aee45c5d",
        "repo": "wicket",
        "unit_tests": [
            "ListMultipleChoiceTest.java"
        ]
    },
    "wicket_7ebae30": {
        "bug_id": "wicket_7ebae30",
        "commit": "https://github.com/apache/wicket/commit/7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 7,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -23,7 +23,6 @@\n import java.util.Iterator;\n import java.util.List;\n \n-import org.apache.wicket.feedback.IFeedback;\n import org.apache.wicket.markup.ComponentTag;\n import org.apache.wicket.markup.MarkupElement;\n import org.apache.wicket.markup.MarkupException;\n@@ -1394,12 +1393,8 @@ void onBeforeRenderChildren()\n \t\t\t\t// Get next child\n \t\t\t\tfinal Component child = children_get(i);\n \n-\t\t\t\t// Ignore feedback as that was done in Page\n-\t\t\t\tif (!(child instanceof IFeedback))\n-\t\t\t\t{\n-\t\t\t\t\t// Call begin request on the child\n-\t\t\t\t\tchild.beforeRender();\n-\t\t\t\t}\n+\t\t\t\t// Call begin request on the child\n+\t\t\t\tchild.beforeRender();\n \t\t\t}\n \t\t}\n \t\tcatch (RuntimeException ex)",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "27560128b0a5a3b2c2f3f56b591d71d58e67afb5",
                "status": "modified"
            },
            {
                "additions": 0,
                "blob_url": "https://github.com/apache/wicket/blob/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "changes": 1,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java?ref=7ebae3095e7ee9ad914a6d96f634e81b07e6020a",
                "deletions": 1,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "patch": "@@ -814,7 +814,6 @@ public final void renderPage()\n \t\t\tpublic Object component(Component component)\n \t\t\t{\n \t\t\t\t((IFeedback)component).updateFeedback();\n-\t\t\t\tcomponent.beforeRender();\n \t\t\t\treturn IVisitor.CONTINUE_TRAVERSAL;\n \t\t\t}\n \t\t});",
                "raw_url": "https://github.com/apache/wicket/raw/7ebae3095e7ee9ad914a6d96f634e81b07e6020a/jdk-1.4/wicket/src/main/java/org/apache/wicket/Page.java",
                "sha": "b4fbb7cadfcc397c6ab7e3933862e5cee4cd8779",
                "status": "modified"
            }
        ],
        "message": "Fix for NPE in ListView on AJAX calls.  The problem was with IFeedback implementing components, which were special cased in onBeforeRenderChildren() based on the assumption that Page had already called beforeRender() on them.  This is not the case with an AJAX rendering.\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@537919 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/5db310ad78875869177502a2d15581de227dc0cd",
        "repo": "wicket",
        "unit_tests": [
            "TestPage.java"
        ]
    },
    "wicket_8468de3": {
        "bug_id": "wicket_8468de3",
        "commit": "https://github.com/apache/wicket/commit/8468de343669cdd482f41359acaaadc6ae4d5653",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java?ref=8468de343669cdd482f41359acaaadc6ae4d5653",
                "deletions": 2,
                "filename": "jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "patch": "@@ -62,7 +62,7 @@ public BundleStringResourceLoader(final String bundleName)\n \t * @return The string resource value or null if resource not found\n \t */\n \tpublic final String loadStringResource(final Class clazz, final String key, Locale locale,\n-\t\t\tfinal String style)\n+\t\tfinal String style)\n \t{\n \t\tif (locale == null)\n \t\t{\n@@ -91,6 +91,7 @@ public final String loadStringResource(final Class clazz, final String key, Loca\n \t */\n \tpublic final String loadStringResource(final Component component, final String key)\n \t{\n-\t\treturn loadStringResource(null, key, component.getLocale(), null);\n+\t\tfinal Locale locale = (component != null) ? component.getLocale() : null;\n+\t\treturn loadStringResource(null, key, locale, null);\n \t}\n }",
                "raw_url": "https://github.com/apache/wicket/raw/8468de343669cdd482f41359acaaadc6ae4d5653/jdk-1.4/wicket/src/main/java/org/apache/wicket/resource/loader/BundleStringResourceLoader.java",
                "sha": "2651fcf450c59a145e6cfa843eea3b89a648ef39",
                "status": "modified"
            }
        ],
        "message": "WICKET-1415: BundleStringResourceLoader throws NPE if component is null\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@640155 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/7536a80d5183c8a00050dae51a0fa008ab0c40d9",
        "repo": "wicket",
        "unit_tests": [
            "BundleStringResourceLoaderTest.java"
        ]
    },
    "wicket_8511b06": {
        "bug_id": "wicket_8511b06",
        "commit": "https://github.com/apache/wicket/commit/8511b06ce2f23cabd1f796b9d787b65245f06a23",
        "file": [
            {
                "additions": 6,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/AutoLinkResolver.java",
                "changes": 13,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/AutoLinkResolver.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 7,
                "filename": "wicket/src/java/wicket/AutoLinkResolver.java",
                "patch": "@@ -29,6 +29,7 @@\n import wicket.markup.html.link.ExternalLink;\n import wicket.util.string.Strings;\n import wicket.util.value.ValueMap;\n+import wicket.util.lang.Packages;\n \n /**\n  * The AutoLinkResolver is responsible to handle automatic link resolution. Tags\n@@ -153,14 +154,14 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t\t// Wicket will not throw an exception. It accepts it.\n \t\t\tinfoPath = Strings.replaceAll(infoPath, \"/\", \".\");\n \n+\t\t\tfinal ApplicationSettings appSettings = page.getApplicationSettings();\n+\t\t\tfinal IClassResolver defaultClassResolver = appSettings.getDefaultClassResolver();\n \t\t\tif (!infoPath.startsWith(\".\"))\n \t\t\t{\n \t\t\t\t// Href is relative. Resolve the url given relative to the\n \t\t\t\t// current page\n-\t\t\t\tfinal String className = page.getClass().getPackage().getName() + \".\" + infoPath;\n-\t\t\t\tfinal Class clazz = page.getApplicationSettings().getDefaultClassResolver()\n-\t\t\t\t\t\t.resolveClass(className);\n-\n+\t\t\t\tfinal String className = Packages.extractPackageName( page.getClass() ) + \".\" + infoPath;\n+\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n \t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t}\n \t\t\telse\n@@ -170,9 +171,7 @@ private final Component resolveAutomaticLink(final MarkupContainer container, fi\n \t\t\t\tfinal String className = infoPath.substring(1);\n \t\t\t\ttry\n \t\t\t\t{\n-\t\t\t\t\tfinal Class clazz = page.getApplicationSettings().getDefaultClassResolver()\n-\t\t\t\t\t\t\t.resolveClass(className);\n-\n+\t\t\t\t\tfinal Class clazz = defaultClassResolver.resolveClass(className);\n \t\t\t\t\treturn new AutolinkBookmarkablePageLink(autoId, clazz, pageParameters);\n \t\t\t\t}\n \t\t\t\tcatch (WicketRuntimeException ex)",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/AutoLinkResolver.java",
                "sha": "6499b5bcd9edd4f24b3e362be21792c0958f3157",
                "status": "modified"
            },
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/markup/html/PackageResource.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/PackageResource.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/markup/html/PackageResource.java",
                "patch": "@@ -170,7 +170,7 @@ private PackageResource(final Class scope, final String path, final Locale local\n \t{\n \t\tthis.scope = scope;\n \t\t// Convert resource path to absolute path relative to base package\n-\t\tthis.absolutePath = Packages.absolutePath(scope.getPackage(), path);\n+\t\tthis.absolutePath = Packages.absolutePath(scope, path);\n \t\tthis.locale = locale;\n \t\tthis.style = style;\n \t\t",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/markup/html/PackageResource.java",
                "sha": "f07973f856de94c95149b9ced09eb130229f33d8",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/pageset/PackagePageSetMap.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 4,
                "filename": "wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "patch": "@@ -33,7 +33,7 @@\n public class PackagePageSetMap extends PageSetMap\n {\n \t/** Map from Package to PageSet */\n-\tprivate final Map packageToPageSet = new HashMap();\n+\tprivate final Map packageNameToPageSet = new HashMap();\n \n \t/**\n \t * Adds a mapping from a given class to a given PageSet\n@@ -46,21 +46,24 @@\n \tpublic final void add(final Class pageClass, final PageSet pageSet)\n \t{\n \t\tcheckPageClass(pageClass);\n-\t\tpackageToPageSet.put(pageClass.getPackage(), pageSet);\n+\t\tString packageName = Packages.extractPackageName( pageClass );\n+\t\tpackageNameToPageSet.put( packageName, pageSet );\n \t}\n \n \t/**\n \t * @see wicket.PageSetMap#pageSet(wicket.Page)\n \t */\n \tpublic PageSet pageSet(final Page page)\n \t{\n-\t\tfor (Package p = page.getClass().getPackage(); p != null; p = Packages.parent(p))\n+\t\tString packageName = Packages.extractPackageName( page.getClass() );\n+\t\twhile ( \"\".equals( packageName ) == false )\n \t\t{\n-\t\t\tfinal PageSet pageSet = (PageSet)packageToPageSet.get(p);\n+\t\t\tfinal PageSet pageSet = (PageSet)packageNameToPageSet.get(packageName);\n \t\t\tif (pageSet != null)\n \t\t\t{\n \t\t\t\treturn pageSet;\n \t\t\t}\n+\t\t\tpackageName = Packages.parent(packageName);\n \t\t}\n \t\treturn null;\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/pageset/PackagePageSetMap.java",
                "sha": "25d27766331df53ef7f7c1f8a0e98405f6c3e857",
                "status": "modified"
            },
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Classes.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/lang/Classes.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 7,
                "filename": "wicket/src/java/wicket/util/lang/Classes.java",
                "patch": "@@ -53,24 +53,24 @@ public static String name(final Class c)\n \t}\n \n \t/**\n-\t * Takes a package and a relative path to a class and returns any class at\n-\t * that relative path. For example, if the given package was java.lang and\n+\t * Takes a Class and a relative path to a class and returns any class at\n+\t * that relative path. For example, if the given Class was java.lang.System and\n \t * the relative path was \"../util/List\", then the java.util.List class would\n \t * be returned.\n-\t * \n-\t * @param p\n+\t *\n+\t * @param scope\n \t *            The package to start at\n \t * @param path\n \t *            The relative path to the class\n \t * @return The class\n \t * @throws ClassNotFoundException\n \t */\n-\tpublic static Class relativeClass(final Package p, final String path)\n+\tpublic static Class relativeClass(final Class scope, final String path)\n \t\t\tthrows ClassNotFoundException\n \t{\n-\t\treturn Class.forName(Packages.absolutePath(p, path).replace('/', '.'));\n+\t\treturn Class.forName(Packages.absolutePath(scope, path).replace('/', '.'));\n \t}\n-\t\n+\n \t/**\n \t * Invoke the setter method for 'name' on object and provide the 'value'\n \t * ",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Classes.java",
                "sha": "b64973484df8a010d206834a370f13c5080fa61f",
                "status": "modified"
            },
            {
                "additions": 84,
                "blob_url": "https://github.com/apache/wicket/blob/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Packages.java",
                "changes": 97,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/lang/Packages.java?ref=8511b06ce2f23cabd1f796b9d787b65245f06a23",
                "deletions": 13,
                "filename": "wicket/src/java/wicket/util/lang/Packages.java",
                "patch": "@@ -19,15 +19,33 @@\n \n import wicket.util.string.IStringIterator;\n import wicket.util.string.StringList;\n-import wicket.util.string.Strings;\n \n /**\n  * Utilities for dealing with packages.\n  * \n  * @author Jonathan Locke\n+ * @author Niclas Hedhman\n  */\n public final class Packages\n {\n+\t/**\n+\t * Takes a package and a relative path to a resource and returns an absolute\n+\t * path to the resource. For example, if the given package was java.lang and\n+\t * the relative path was \"../util/List\", then \"java/util/List\" would be\n+\t * returned.\n+\t * \n+\t * @param p\n+\t *            The package to start at\n+\t * @param relativePath\n+\t *            The relative path to the class\n+\t * @return The absolute path\n+\t */\n+\tpublic static String absolutePath(final Class p, final String relativePath)\n+\t{\n+\t\tString packName = extractPackageName(p);\n+\t\treturn absolutePath(packName, relativePath);\n+\t}\n+\n \t/**\n \t * Takes a package and a relative path to a resource and returns an absolute\n \t * path to the resource. For example, if the given package was java.lang and\n@@ -41,6 +59,23 @@\n \t * @return The absolute path\n \t */\n \tpublic static String absolutePath(final Package p, final String relativePath)\n+\t{\n+\t\treturn absolutePath(p.getName(), relativePath);\n+\t}\n+\n+\t/**\n+\t * Takes a package and a relative path to a resource and returns an absolute\n+\t * path to the resource. For example, if the given package was java.lang and\n+\t * the relative path was \"../util/List\", then \"java/util/List\" would be\n+\t * returned.\n+\t * \n+\t * @param packageName\n+\t *            The package to start at\n+\t * @param relativePath\n+\t *            The relative path to the class\n+\t * @return The absolute path\n+\t */\n+\tpublic static String absolutePath(final String packageName, final String relativePath)\n \t{\n \t\t// Is path already absolute?\n \t\tif (relativePath.startsWith(\"/\"))\n@@ -50,7 +85,7 @@ public static String absolutePath(final Package p, final String relativePath)\n \t\telse\n \t\t{\n \t\t\t// Break package into list of package names\n-\t\t\tfinal StringList absolutePath = StringList.tokenize(p.getName(), \".\");\n+\t\t\tfinal StringList absolutePath = StringList.tokenize(packageName, \".\");\n \n \t\t\t// Break path into folders\n \t\t\tfinal StringList folders = StringList.tokenize(relativePath, \"/\\\\\");\n@@ -62,7 +97,7 @@ public static String absolutePath(final Package p, final String relativePath)\n \t\t\t\tfinal String folder = iterator.next();\n \n \t\t\t\t// Up one?\n-\t\t\t\tif (folder.equals(\"..\"))\n+\t\t\t\tif (\"..\".equals(folder))\n \t\t\t\t{\n \t\t\t\t\t// Pop off stack\n \t\t\t\t\tif (absolutePath.size() > 0)\n@@ -87,23 +122,59 @@ public static String absolutePath(final Package p, final String relativePath)\n \t}\n \n \t/**\n-\t * @param p\n-\t *            The Package\n+\t * Determines the package name for the given class.\n+\t * \n+\t * @param forClass\n+\t *            the class\n+\t * @return the package name\n+\t */\n+\tpublic static String extractPackageName(final Class forClass)\n+\t{\n+\t\tString classname = forClass.getName();\n+\t\tString parent = parent(classname);\n+\t\treturn parent;\n+\t}\n+\n+\t/**\n+\t * Gets the parent package name.\n+\t * \n+\t * @param packageName\n+\t *            The Package name\n \t * @return The parent Package\n \t */\n-\tpublic static Package parent(final Package p)\n+\tpublic static String parent(final String packageName)\n \t{\n-\t\tfinal String packageName = p.getName();\n-\t\tif (packageName.indexOf('.') != -1)\n+\t\tint pos = packageName.lastIndexOf(\".\");\n+\t\tString parent;\n+\t\tif (pos < 0)\n \t\t{\n-\t\t\tfinal String parentPackageName = Strings.beforeLast(packageName, '.');\n-\t\t\treturn Package.getPackage(parentPackageName);\n+\t\t\tpos = packageName.lastIndexOf(\"/\");\n+\t\t\tif (pos < 0)\n+\t\t\t{\n+\t\t\t\tpos = 0;\n+\t\t\t}\n \t\t}\n-\t\treturn null;\n+\t\tparent = packageName.substring(0, pos);\n+\t\treturn parent;\n \t}\n-\t\n+\n+\n+\t/**\n+\t * Resolve scope for the given class by extracting it's package name and\n+\t * converting all dots to slashes.\n+\t * \n+\t * @param forClass\n+\t *            the class\n+\t * @return the scope string\n+\t */\n+\tpublic static String resolveScope(final Class forClass)\n+\t{\n+\t\tString packName = extractPackageName(forClass);\n+\t\treturn packName.replace('.', '/');\n+\t}\n+\n \t/**\n-\t * Instantiation not allowed\n+\t * Instantiation not allowed.\n \t */\n \tprivate Packages()\n \t{",
                "raw_url": "https://github.com/apache/wicket/raw/8511b06ce2f23cabd1f796b9d787b65245f06a23/wicket/src/java/wicket/util/lang/Packages.java",
                "sha": "b8586f88fd1ec675662baf6a3975d5586c184e0c",
                "status": "modified"
            }
        ],
        "message": "fix for 1251658 (Possible NPE in AutoLinkResolver) and 1291603 (patch)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@457774 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c0d9739c90cdb4e06c34c8346158e4a2a9aa58cf",
        "repo": "wicket",
        "unit_tests": [
            "PackagesTest.java"
        ]
    },
    "wicket_8cd64ee": {
        "bug_id": "wicket_8cd64ee",
        "commit": "https://github.com/apache/wicket/commit/8cd64ee40d1ac5444d7136e9a68c71010085f65a",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "changes": 20,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java?ref=8cd64ee40d1ac5444d7136e9a68c71010085f65a",
                "deletions": 7,
                "filename": "wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "patch": "@@ -110,7 +110,7 @@ public ComponentStringResourceLoader()\n \t * @see org.apache.wicket.resource.loader.IStringResourceLoader#loadStringResource(java.lang.Class,\n \t *      java.lang.String, java.util.Locale, java.lang.String)\n \t */\n-\tpublic String loadStringResource(Class< ? > clazz, final String key, final Locale locale,\n+\tpublic String loadStringResource(Class<?> clazz, final String key, final Locale locale,\n \t\tfinal String style)\n \t{\n \t\tif (clazz == null)\n@@ -132,7 +132,7 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \t\t\tResourceNameIterator iter = new ResourceNameIterator(path, style, locale, null);\n \t\t\twhile (iter.hasNext())\n \t\t\t{\n-\t\t\t\tString newPath = (String)iter.next();\n+\t\t\t\tString newPath = iter.next();\n \n \t\t\t\tfinal Properties props = propertiesFactory.load(clazz, newPath);\n \t\t\t\tif (props != null)\n@@ -159,6 +159,12 @@ public String loadStringResource(Class< ? > clazz, final String key, final Local\n \n \t\t\t// Move to the next superclass\n \t\t\tclazz = clazz.getSuperclass();\n+\n+\t\t\tif (clazz == null)\n+\t\t\t{\n+\t\t\t\t// nothing more to search, done\n+\t\t\t\tbreak;\n+\t\t\t}\n \t\t}\n \n \t\t// not found\n@@ -188,12 +194,12 @@ public String loadStringResource(final Component component, final String key)\n \n \t\t// The reason why we need to create that stack is because we need to\n \t\t// walk it downwards starting with Page down to the Component\n-\t\tList<Class< ? >> searchStack = getComponentStack(component);\n+\t\tList<Class<?>> searchStack = getComponentStack(component);\n \n \t\t// Walk the component hierarchy down from page to the component\n \t\tfor (int i = searchStack.size() - 1; (i >= 0) && (string == null); i--)\n \t\t{\n-\t\t\tClass< ? > clazz = searchStack.get(i);\n+\t\t\tClass<?> clazz = searchStack.get(i);\n \n \t\t\t// First, try the fully qualified resource name relative to the\n \t\t\t// component on the path from page down.\n@@ -226,10 +232,10 @@ public String loadStringResource(final Component component, final String key)\n \t *            The component to evaluate\n \t * @return The stack of classes\n \t */\n-\tprivate List<Class< ? >> getComponentStack(final Component component)\n+\tprivate List<Class<?>> getComponentStack(final Component component)\n \t{\n \t\t// Build the search stack\n-\t\tfinal List<Class< ? >> searchStack = new ArrayList<Class< ? >>();\n+\t\tfinal List<Class<?>> searchStack = new ArrayList<Class<?>>();\n \t\tsearchStack.add(component.getClass());\n \n \t\tif (!(component instanceof Page))\n@@ -258,7 +264,7 @@ public String loadStringResource(final Component component, final String key)\n \t *            The class to check\n \t * @return Whether to stop the search\n \t */\n-\tprotected boolean isStopResourceSearch(final Class< ? > clazz)\n+\tprotected boolean isStopResourceSearch(final Class<?> clazz)\n \t{\n \t\tif ((clazz == null) || clazz.equals(Object.class) || clazz.equals(Application.class))\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/8cd64ee40d1ac5444d7136e9a68c71010085f65a/wicket/src/main/java/org/apache/wicket/resource/loader/ComponentStringResourceLoader.java",
                "sha": "a9554af89fb74d05902eade24f4accfe338a6fbc",
                "status": "modified"
            }
        ],
        "message": "patch possible npe when interface is passed in\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@683701 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/02c85dba31a0d5c315f5e90a994df2263a61b2d9",
        "repo": "wicket",
        "unit_tests": [
            "ComponentStringResourceLoaderTest.java"
        ]
    },
    "wicket_999e860": {
        "bug_id": "wicket_999e860",
        "commit": "https://github.com/apache/wicket/commit/999e86006793c58b45fb0bc09bd55fde1db42b49",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/999e86006793c58b45fb0bc09bd55fde1db42b49/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "changes": 10,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java?ref=999e86006793c58b45fb0bc09bd55fde1db42b49",
                "deletions": 1,
                "filename": "wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "patch": "@@ -228,7 +228,15 @@ public void setAmOrPm(AM_PM amOrPm)\n \t */\n \tpublic void setDate(Date date)\n \t{\n-\t\tthis.date = (date != null) ? new MutableDateTime(date) : null;\n+\t\tif (date == null) {\n+\t\t\tthis.date = null;\n+\t\t\tsetDefaultModelObject(null);\n+\t\t\tsetHours(null);\n+\t\t\tsetMinutes(null);\n+\t\t\treturn;\n+\t\t}\n+\t\t\n+\t\tthis.date = new MutableDateTime(date);\n \t\tsetDefaultModelObject(date);\n \n \t\tInteger hours = getHours();",
                "raw_url": "https://github.com/apache/wicket/raw/999e86006793c58b45fb0bc09bd55fde1db42b49/wicket-datetime/src/main/java/org/apache/wicket/extensions/yui/calendar/DateTimeField.java",
                "sha": "c521336399874ccf22c7c29cdb9070d3dd3c99ac",
                "status": "modified"
            }
        ],
        "message": "fixed wicket-2083: NPE when clearing DateTimeField \n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@744182 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/6b2a347b3d7e8e5959114ae57ff0a8666743d4f4",
        "repo": "wicket",
        "unit_tests": [
            "DateTimeFieldTest.java"
        ]
    },
    "wicket_aa24d76": {
        "bug_id": "wicket_aa24d76",
        "commit": "https://github.com/apache/wicket/commit/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/markup/html/form/Form.java?ref=aa24d761bfcf0cae32aa6d41589b2b7ed2b31191",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/markup/html/form/Form.java",
                "patch": "@@ -925,6 +925,11 @@ private void dispatchEvent(final Page page, final String url)\n \t{\n \t\tfinal RequestParameters requestParameters = getRequest().getRequestParameters();\n \t\tfinal Component component = page.get(requestParameters.getComponentPath());\n+\t\tif (component == null)\n+\t\t{\n+\t\t\tthrow new WicketRuntimeException(\n+\t\t\t\t\t\"Component not found: \" + requestParameters.getComponentPath());\n+\t\t}\n \t\tif (!component.isVisible())\n \t\t{\n \t\t\tthrow new WicketRuntimeException(",
                "raw_url": "https://github.com/apache/wicket/raw/aa24d761bfcf0cae32aa6d41589b2b7ed2b31191/wicket/src/java/wicket/markup/html/form/Form.java",
                "sha": "f63de6a4fd0ce458103997d5ff6fca87eb7abbf1",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459396 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/a96383b0210468fd4ee0087fec3961fb82a668ec",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_af05b3d": {
        "bug_id": "wicket_af05b3d",
        "commit": "https://github.com/apache/wicket/commit/af05b3d68ca8b8021db8e205d39557782eb68a7b",
        "file": [
            {
                "additions": 3,
                "blob_url": "https://github.com/apache/wicket/blob/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java?ref=af05b3d68ca8b8021db8e205d39557782eb68a7b",
                "deletions": 3,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "patch": "@@ -774,10 +774,10 @@ else if (hasError())\n \t\t\tcallOnError(submitter);\n \t\t}\n \n-\n-\t\tif (((WebRequest)getRequest()).isAjax())\n+\t\t// update auto labels if we are inside an ajax request\n+\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n+\t\tif (target != null)\n \t\t{\n-\t\t\tfinal AjaxRequestTarget target = getRequestCycle().find(AjaxRequestTarget.class);\n \t\t\tvisitChildren(FormComponent.class, new IVisitor<FormComponent<?>, Void>()\n \t\t\t{\n \t\t\t\t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/af05b3d68ca8b8021db8e205d39557782eb68a7b/wicket-core/src/main/java/org/apache/wicket/markup/html/form/Form.java",
                "sha": "7eeb1e17c4c76b9726b4859279bd15f8034abf08",
                "status": "modified"
            }
        ],
        "message": "WICKET-5462 fix npe in ajax form component label repainting",
        "parent": "https://github.com/apache/wicket/commit/a3a5a40fcea53384554d7a8ada08ef7bb021bf1d",
        "repo": "wicket",
        "unit_tests": [
            "FormTest.java",
            "TestForm.java"
        ]
    },
    "wicket_b02ba6d": {
        "bug_id": "wicket_b02ba6d",
        "commit": "https://github.com/apache/wicket/commit/b02ba6d5f4810ab70f0144f9c16273311b976b9a",
        "file": [
            {
                "additions": 8,
                "blob_url": "https://github.com/apache/wicket/blob/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 8,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=b02ba6d5f4810ab70f0144f9c16273311b976b9a",
                "deletions": 0,
                "filename": "wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -694,6 +694,10 @@ public void clear()\n \t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn false;\n+\t\t\t}\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n@@ -702,6 +706,10 @@ public boolean containsKey(Object key)\n \t\t */\n \t\tpublic V get(Object key)\n \t\t{\n+\t\t\tif (key == null)\n+\t\t\t{\n+\t\t\t\treturn null;\n+\t\t\t}\n \t\t\treturn cache.get(key);\n \t\t}\n ",
                "raw_url": "https://github.com/apache/wicket/raw/b02ba6d5f4810ab70f0144f9c16273311b976b9a/wicket/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "3328337be9948e0ad20976b1f8e96de96be93aba",
                "status": "modified"
            }
        ],
        "message": "fixed: NPE after application hot redeployment (MarkupCache)\nIssue: WICKET-2475\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@816867 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/9771e6b210e353c3e91aeefbf7c7214ef30b6d75",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_b719561": {
        "bug_id": "wicket_b719561",
        "commit": "https://github.com/apache/wicket/commit/b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
        "file": [
            {
                "additions": 9,
                "blob_url": "https://github.com/apache/wicket/blob/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "changes": 9,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java?ref=b719561b4429941ccbd705ac1ddd13e4aa1aec0e",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "patch": "@@ -349,6 +349,15 @@ public void reset() throws IOException\n \t\twriteObjectMethodMissing.clear();\n \t}\n \n+\t@Override\n+\tpublic void close() throws IOException\n+\t{\n+\t\t// do not call super.close() because SerializableChecker uses ObjectOutputStream's no-arg constructor\n+\n+\t\t// just null-ify the declared members\n+\t\treset();\n+\t}\n+\n \tprivate void check(Object obj)\n \t{\n \t\tif (obj == null)",
                "raw_url": "https://github.com/apache/wicket/raw/b719561b4429941ccbd705ac1ddd13e4aa1aec0e/wicket-core/src/main/java/org/apache/wicket/core/util/io/SerializableChecker.java",
                "sha": "57f831716882a7750bc29cb274e46a8c3b771e81",
                "status": "modified"
            }
        ],
        "message": "WICKET-4706 SerializableChecker.close throws NPE",
        "parent": "https://github.com/apache/wicket/commit/4fc82e3598ec6d790fe13c05ef99b1a69095779e",
        "repo": "wicket",
        "unit_tests": [
            "SerializableCheckerTest.java"
        ]
    },
    "wicket_bc10ba5": {
        "bug_id": "wicket_bc10ba5",
        "commit": "https://github.com/apache/wicket/commit/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
        "file": [
            {
                "additions": 2,
                "blob_url": "https://github.com/apache/wicket/blob/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java?ref=bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc",
                "deletions": 5,
                "filename": "wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "patch": "@@ -710,12 +710,9 @@ public final void renderAssociatedMarkup(final String openTagName, final String\n \t */\n \tpublic MarkupContainer replace(final Component child)\n \t{\n-\t\tcheckHierarchyChange(child);\n+\t\tArgs.notNull(child, \"child\");\n \n-\t\tif (child == null)\n-\t\t{\n-\t\t\tthrow new IllegalArgumentException(\"argument child must be not null\");\n-\t\t}\n+\t\tcheckHierarchyChange(child);\n \n \t\tif (log.isDebugEnabled())\n \t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/bc10ba570fd6ef9867351d7f7d9e960eb2ba3dfc/wicket-core/src/main/java/org/apache/wicket/MarkupContainer.java",
                "sha": "731065c5f3aa82804f1f3fe85de5c0c7cc2bd4fb",
                "status": "modified"
            }
        ],
        "message": "Move the check for non-null earlier in the method body. It would throw NPE in #checkHierarchyChange() otherwise.\n\nUse Args.",
        "parent": "https://github.com/apache/wicket/commit/0b78d759220c1b09abb0d47b5007757bbfeb4e0c",
        "repo": "wicket",
        "unit_tests": [
            "MarkupContainerTest.java"
        ]
    },
    "wicket_c48ef46": {
        "bug_id": "wicket_c48ef46",
        "commit": "https://github.com/apache/wicket/commit/c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "changes": 6,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/util/string/Strings.java?ref=c48ef460a9c570dcedfe50bf5ab92872dd0aa682",
                "deletions": 1,
                "filename": "wicket/src/java/wicket/util/string/Strings.java",
                "patch": "@@ -807,8 +807,12 @@ else if (aChar == 'f')\n \t *            The unicode string\n \t * @return The escaped unicode string, like '\\u4F60\\u597D'.\n \t */\n-\tpublic static String toEscapedUnicode(String unicodeString)\n+\tpublic static String toEscapedUnicode(final String unicodeString)\n \t{\n+\t\tif ((unicodeString == null) || (unicodeString.length() == 0))\n+\t\t{\n+\t\t\treturn unicodeString;\n+\t\t}\n \t\tint len = unicodeString.length();\n \t\tint bufLen = len * 2;\n \t\tStringBuffer outBuffer = new StringBuffer(bufLen);",
                "raw_url": "https://github.com/apache/wicket/raw/c48ef460a9c570dcedfe50bf5ab92872dd0aa682/wicket/src/java/wicket/util/string/Strings.java",
                "sha": "715860c1747a3476ad59555680bb34f2bb9b7254",
                "status": "modified"
            }
        ],
        "message": "avoid NPE in unicode conversion\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@462131 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/ae260354840d0a55a9d19524940a913c0cf3aab5",
        "repo": "wicket",
        "unit_tests": [
            "StringsTest.java"
        ]
    },
    "wicket_c940a37": {
        "bug_id": "wicket_c940a37",
        "commit": "https://github.com/apache/wicket/commit/c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
        "file": [
            {
                "additions": 40,
                "blob_url": "https://github.com/apache/wicket/blob/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "changes": 40,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java?ref=c940a378736e728ba959ec62d9a1f10fb0bc6a0f",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "patch": "@@ -96,18 +96,27 @@ protected MarkupCache()\n \t\t}\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void clear()\n \t{\n \t\tmarkupCache.clear();\n \t\tmarkupKeyCache.clear();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic void shutdown()\n \t{\n \t\tmarkupCache.shutdown();\n \t\tmarkupKeyCache.shutdown();\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final IMarkupFragment removeMarkup(final String cacheKey)\n \t{\n \t\tArgs.notNull(cacheKey, \"cacheKey\");\n@@ -188,6 +197,10 @@ private boolean isBaseMarkupCached(final CharSequence key)\n \t{\n \t\t// Get the markup associated with key\n \t\tMarkup markup = markupCache.get(key);\n+\t\tif (markup == null)\n+\t\t{\n+\t\t\treturn false;\n+\t\t}\n \n \t\t// Get the base markup resource stream from the markup\n \t\tMarkupResourceStream resourceStream = markup.getMarkupResourceStream()\n@@ -215,6 +228,9 @@ private boolean isMarkupCached(final MarkupResourceStream resourceStream)\n \t\treturn false;\n \t}\n \n+\t/**\n+\t * {@inheritDoc}\n+\t */\n \tpublic final int size()\n \t{\n \t\treturn markupCache.size();\n@@ -610,11 +626,17 @@ public DefaultCacheImplementation()\n \t\t{\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void clear()\n \t\t{\n \t\t\tcache.clear();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean containsKey(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -624,6 +646,9 @@ public boolean containsKey(Object key)\n \t\t\treturn cache.containsKey(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic V get(Object key)\n \t\t{\n \t\t\tif (key == null)\n@@ -633,26 +658,41 @@ public V get(Object key)\n \t\t\treturn cache.get(key);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic Collection<K> getKeys()\n \t\t{\n \t\t\treturn cache.keySet();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void put(K key, V value)\n \t\t{\n \t\t\tcache.put(key, value);\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic boolean remove(K key)\n \t\t{\n \t\t\treturn cache.remove(key) == null;\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic int size()\n \t\t{\n \t\t\treturn cache.size();\n \t\t}\n \n+\t\t/**\n+\t\t * {@inheritDoc}\n+\t\t */\n \t\tpublic void shutdown()\n \t\t{\n \t\t\tclear();",
                "raw_url": "https://github.com/apache/wicket/raw/c940a378736e728ba959ec62d9a1f10fb0bc6a0f/wicket-core/src/main/java/org/apache/wicket/markup/MarkupCache.java",
                "sha": "dd4c4bc1a7a13a40d7dfb4c1e0a65be7c513c170",
                "status": "modified"
            }
        ],
        "message": "fixed NPE when reloading updated markup in development mode\nIssue: WICKET-3336\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1059368 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/b40d5d6d529720e41948fa3ad55aa4bd29e527c4",
        "repo": "wicket",
        "unit_tests": [
            "MarkupCacheTest.java"
        ]
    },
    "wicket_ca2ae1a": {
        "bug_id": "wicket_ca2ae1a",
        "commit": "https://github.com/apache/wicket/commit/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java?ref=ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "patch": "@@ -578,7 +578,7 @@ public ResourceReferenceAutolink(final String id, final Class<?> clazz, final St\n \t\t\tClass<?> cursor = clazz;\n \t\t\t// iterate all parents because the auto linked resource may come from\n \t\t\t// inherited markup\n-\t\t\twhile (cursor != null || cursor != Object.class)\n+\t\t\twhile (cursor != null && cursor != Object.class)\n \t\t\t{\n \t\t\t\tif (PackageResource.exists(cursor, href, getLocale(), getStyle(), getVariation()))\n \t\t\t\t{",
                "raw_url": "https://github.com/apache/wicket/raw/ca2ae1ae5aa57665bd7ae292bc4ec5fe7524a158/wicket-core/src/main/java/org/apache/wicket/markup/resolver/AutoLinkResolver.java",
                "sha": "5b20adb95c406a178f3b9aef5c517c610252b404",
                "status": "modified"
            }
        ],
        "message": "WICKET-4152 NPE in CachingResourceStreamLocator due to the search in parent's markup in Autolink code\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1186767 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/4fa68de58a9e18f183b2db381c47f7ac1a3b929d",
        "repo": "wicket",
        "unit_tests": [
            "AutoLinkResolverTest.java"
        ]
    },
    "wicket_db0a4db": {
        "bug_id": "wicket_db0a4db",
        "commit": "https://github.com/apache/wicket/commit/db0a4db0510392331298f7179193ef6c2b4b6053",
        "file": [
            {
                "additions": 4,
                "blob_url": "https://github.com/apache/wicket/blob/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-examples/src/java/wicket/examples/forminput/FormInput.java?ref=db0a4db0510392331298f7179193ef6c2b4b6053",
                "deletions": 1,
                "filename": "wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "patch": "@@ -89,7 +89,10 @@ public FormInput()\n \t */\n \tpublic void setLocale(Locale locale)\n \t{\n-\t\tgetSession().setLocale(locale);\n+\t\tif (locale != null)\n+\t\t{\n+\t\t\tgetSession().setLocale(locale);\n+\t\t}\n \t}\n \n \t/**",
                "raw_url": "https://github.com/apache/wicket/raw/db0a4db0510392331298f7179193ef6c2b4b6053/wicket-examples/src/java/wicket/examples/forminput/FormInput.java",
                "sha": "31a127a8ab3c1bd381f1b1dce36f24eafd495343",
                "status": "modified"
            }
        ],
        "message": "avoid NPE\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@459438 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/cfcaf4af4065396d7e1b6b940d7947c02f8d3fee",
        "repo": "wicket",
        "unit_tests": [
            "FormInputTest.java"
        ]
    },
    "wicket_e37a9e1": {
        "bug_id": "wicket_e37a9e1",
        "commit": "https://github.com/apache/wicket/commit/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
        "file": [
            {
                "additions": 1,
                "blob_url": "https://github.com/apache/wicket/blob/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "changes": 2,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java?ref=e37a9e101f6ee74aa03bff9a6797a16d304b3d0c",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "patch": "@@ -152,7 +152,7 @@ protected void onRemove()\n \t\t\t// decrement the fence count\n \n \t\t\tInteger count = fence.getMetaData(FENCE_KEY);\n-\t\t\tcount = count == 1 ? null : count - 1;\n+\t\t\tcount = (count == null || count == 1) ? null : count - 1;\n \t\t\tfence.setMetaData(FENCE_KEY, count);\n \t\t}\n \t}",
                "raw_url": "https://github.com/apache/wicket/raw/e37a9e101f6ee74aa03bff9a6797a16d304b3d0c/wicket-core/src/main/java/org/apache/wicket/feedback/FencedFeedbackPanel.java",
                "sha": "f6916f2c8f0e19f04d4de8cbe3d0dc4210f3a43f",
                "status": "modified"
            }
        ],
        "message": "WICKET-4968 NPE in FencedFeedbackPanel#onRemove",
        "parent": "https://github.com/apache/wicket/commit/af3f84485ccf7a10a7fafe9246d80ff83b13daed",
        "repo": "wicket",
        "unit_tests": [
            "FencedFeedbackPanelTest.java"
        ]
    },
    "wicket_eb7c860": {
        "bug_id": "wicket_eb7c860",
        "commit": "https://github.com/apache/wicket/commit/eb7c860efdddcedf6ea323a903d4a5af9e814a02",
        "file": [
            {
                "additions": 5,
                "blob_url": "https://github.com/apache/wicket/blob/eb7c860efdddcedf6ea323a903d4a5af9e814a02/wicket/src/java/wicket/Component.java",
                "changes": 5,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket/src/java/wicket/Component.java?ref=eb7c860efdddcedf6ea323a903d4a5af9e814a02",
                "deletions": 0,
                "filename": "wicket/src/java/wicket/Component.java",
                "patch": "@@ -793,6 +793,11 @@ protected void invalidateModel()\n     {\n         // Find the page where this component lives\n         final Page page = getPage();\n+        \n+        if (page == null)\n+        {\n+            return;\n+        }\n \n         // Make all previous renderings of the page stale\n         page.setStaleRendering(page.getRendering());",
                "raw_url": "https://github.com/apache/wicket/raw/eb7c860efdddcedf6ea323a903d4a5af9e814a02/wicket/src/java/wicket/Component.java",
                "sha": "71af289fd8cf501f9a0eb435528e42571fbbd604",
                "status": "modified"
            }
        ],
        "message": "prevent NPE being thrown from invalidateModel, if component not yet assigned to page\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/wicket/trunk@455216 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/02f3c71e3c3c012e6cebd65363409124eb2b647a",
        "repo": "wicket",
        "unit_tests": [
            "ComponentTest.java",
            "TestComponent.java"
        ]
    },
    "wicket_f2db539": {
        "bug_id": "wicket_f2db539",
        "commit": "https://github.com/apache/wicket/commit/f2db539e5cfab3801293b175581586a9cdf785e3",
        "file": [
            {
                "additions": 10,
                "blob_url": "https://github.com/apache/wicket/blob/f2db539e5cfab3801293b175581586a9cdf785e3/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "changes": 11,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java?ref=f2db539e5cfab3801293b175581586a9cdf785e3",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "patch": "@@ -548,7 +548,16 @@ public void write(byte[] b, int off, int len) throws IOException\n \t@Override\n \tpublic String toString()\n \t{\n-\t\treturn charSequenceAction.builder.toString();\n+\t\tfinal String toString;\n+\t\tif (charSequenceAction != null)\n+\t\t{\n+\t\t\ttoString = charSequenceAction.builder.toString();\n+\t\t}\n+\t\telse\n+\t\t{\n+\t\t\ttoString = super.toString();\n+\t\t}\n+\t\treturn toString;\n \t}\n \n \t@Override",
                "raw_url": "https://github.com/apache/wicket/raw/f2db539e5cfab3801293b175581586a9cdf785e3/wicket-core/src/main/java/org/apache/wicket/protocol/http/BufferedWebResponse.java",
                "sha": "2ec9997bbd31494aef67be9bcd97afc55d499d46",
                "status": "modified"
            }
        ],
        "message": "Improve BufferedWebResponse#toString().\ncharSequenceAction may be null and thus calling #toString() fails with NPE\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1078105 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/c9c55aab22520a06833baddcd7d1532a667f97aa",
        "repo": "wicket",
        "unit_tests": [
            "BufferedWebResponseTest.java"
        ]
    },
    "wicket_f5a62da": {
        "bug_id": "wicket_f5a62da",
        "commit": "https://github.com/apache/wicket/commit/f5a62da5b38c504db8945a88857a53aae6b5d7b7",
        "file": [
            {
                "additions": 7,
                "blob_url": "https://github.com/apache/wicket/blob/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "changes": 7,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java?ref=f5a62da5b38c504db8945a88857a53aae6b5d7b7",
                "deletions": 0,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "patch": "@@ -92,6 +92,13 @@ public IRequestHandler mapRequest(Request request)\n \t\t\t\t// should be stripped of timestamps\n \t\t\t\tif (i + 1 == segmentsSize)\n \t\t\t\t{\n+\t\t\t\t\t// since we need mutable page parameters for \n+\t\t\t\t\t// the caching strategy ensure they are not null \n+\t\t\t\t\tif (pageParameters == null)\n+\t\t\t\t\t{\n+\t\t\t\t\t\tpageParameters = new PageParameters();\n+\t\t\t\t\t}\n+\t\t\t\t\t\n \t\t\t\t\t// The filename + parameters eventually contain caching\n \t\t\t\t\t// related information which needs to be removed\n \t\t\t\t\tResourceUrl resourceUrl = new ResourceUrl(segment, pageParameters);",
                "raw_url": "https://github.com/apache/wicket/raw/f5a62da5b38c504db8945a88857a53aae6b5d7b7/wicket-core/src/main/java/org/apache/wicket/request/mapper/BasicResourceReferenceMapper.java",
                "sha": "c1530cfdd5da3dbce6a5fb760db2933994625e47",
                "status": "modified"
            }
        ],
        "message": "WICKET-3828 QueryStringWithTimestampResourceCachingStrategy#undecorateUrl(ResourceUrl) can causes NPE\n\ngit-svn-id: https://svn.apache.org/repos/asf/wicket/trunk@1138587 13f79535-47bb-0310-9956-ffa450edef68",
        "parent": "https://github.com/apache/wicket/commit/d997f7e9d4939eaa4074e185bd06ac07361e9ccd",
        "repo": "wicket",
        "unit_tests": [
            "BasicResourceReferenceMapperTest.java"
        ]
    },
    "wicket_feed0b7": {
        "bug_id": "wicket_feed0b7",
        "commit": "https://github.com/apache/wicket/commit/feed0b7814855c9d8815826ecd4c75f96da090cf",
        "file": [
            {
                "additions": 13,
                "blob_url": "https://github.com/apache/wicket/blob/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "changes": 14,
                "contents_url": "https://api.github.com/repos/apache/wicket/contents/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java?ref=feed0b7814855c9d8815826ecd4c75f96da090cf",
                "deletions": 1,
                "filename": "wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "patch": "@@ -30,8 +30,11 @@\n import org.apache.wicket.core.util.lang.WicketObjects;\n import org.apache.wicket.core.util.resource.locator.IResourceStreamLocator;\n import org.apache.wicket.markup.html.IPackageResourceGuard;\n+import org.apache.wicket.mock.MockWebRequest;\n+import org.apache.wicket.request.Url;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.apache.wicket.request.resource.caching.IStaticCacheableResource;\n+import org.apache.wicket.response.StringResponse;\n import org.apache.wicket.util.io.IOUtils;\n import org.apache.wicket.util.lang.Classes;\n import org.apache.wicket.util.lang.Packages;\n@@ -493,7 +496,16 @@ public InputStream getInputStream() throws ResourceStreamNotFoundException\n \t\t\t}\n \n \t\t\tRequestCycle cycle = RequestCycle.get();\n-\t\t\tAttributes attributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\tAttributes attributes;\n+\t\t\tif (cycle != null)\n+\t\t\t{\n+\t\t\t\tattributes = new Attributes(cycle.getRequest(), cycle.getResponse());\n+\t\t\t}\n+\t\t\telse\n+\t\t\t{\n+\t\t\t\t// use empty request and response in case of non-http thread. WICKET-5532\n+\t\t\t\tattributes = new Attributes(new MockWebRequest(Url.parse(\"\")), new StringResponse());\n+\t\t\t}\n \t\t\tbyte[] processedBytes = processResponse(attributes, bytes);\n \t\t\treturn new ByteArrayInputStream(processedBytes);\n \t\t}",
                "raw_url": "https://github.com/apache/wicket/raw/feed0b7814855c9d8815826ecd4c75f96da090cf/wicket-core/src/main/java/org/apache/wicket/request/resource/PackageResource.java",
                "sha": "403d1f7da77e6859b25ac03d5b1174c046c1f8ef",
                "status": "modified"
            }
        ],
        "message": "WICKET-5532 NPE calling PackageResource.getResourceStream() if there is no RequestCycle defined\n\nUse empty request and response when a PackageResource is used out of a request cycle\n\n(cherry picked from commit ae44d26db32587f4ddb9b8c52460ec1450dc96f5)",
        "parent": "https://github.com/apache/wicket/commit/5fe57410df21141d1a8db05fcb95728ab0ab8065",
        "repo": "wicket",
        "unit_tests": [
            "PackageResourceTest.java"
        ]
    }
}